uint64_t sub_1002E72E8()
{
  uint64_t v0;
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  swift_release(*(void *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ObservationPruneSchedulerService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd32ObservationPruneSchedulerService);
}

uint64_t sub_1002E7334()
{
  v1 = (void *)swift_task_alloc(dword_1009A83B4);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100015D58;
  return sub_1002E4D9C();
}

uint64_t sub_1002E7378(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009A8480,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for ObservationPruneSchedulerService,  (uint64_t)&unk_1007F9940);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002E73B4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002E73C4(uint64_t a1, uint64_t a2)
{
  v5 = (void *)swift_task_alloc(dword_1009A848C);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000159BC;
  return sub_1002E5D34(a1, a2);
}

uint64_t sub_1002E742C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002E7450(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  v7 = (void *)swift_task_alloc(dword_1009A849C);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100015D58;
  return sub_1002E68B4(a1, a2, v6);
}

uint64_t sub_1002E74B8()
{
  return sub_1002E7540(48LL);
}

uint64_t sub_1002E74C0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  v7 = (void *)swift_task_alloc(dword_1009A84AC);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100015D58;
  return sub_1002E4F4C(a1, v4, v5, v6);
}

uint64_t sub_1002E7538()
{
  return sub_1002E7540(40LL);
}

uint64_t sub_1002E7540(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t sub_1002E7578()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009A84BC);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100015D58;
  uint64_t v2 = (void *)swift_task_alloc(dword_1009A83BC);
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100015D58;
  return sub_1002E5910();
}

uint64_t sub_1002E75E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099C818);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002E7628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1002E77BC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002E7684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1002E77BC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002E76D0()
{
  char v1 = *v0;
  v2._countAndFlagsBits = 0x203A4D6F427BLL;
  v2._object = (void *)0xE600000000000000LL;
  String.append(_:)(v2);
  if ((v1 & 4) != 0) {
    uint64_t v3 = 1702195828LL;
  }
  else {
    uint64_t v3 = 0x65736C6166LL;
  }
  if ((v1 & 4) != 0) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE500000000000000LL;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 125LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return 0LL;
}

ValueMetadata *type metadata accessor for ExtraKeyBits()
{
  return &type metadata for ExtraKeyBits;
}

unint64_t sub_1002E7778()
{
  unint64_t result = qword_1009A84C8;
  if (!qword_1009A84C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F99A0, &type metadata for ExtraKeyBits);
    atomic_store(result, (unint64_t *)&qword_1009A84C8);
  }

  return result;
}

unint64_t sub_1002E77BC()
{
  unint64_t result = qword_1009A84D0;
  if (!qword_1009A84D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9A08, &type metadata for ExtraKeyBits);
    atomic_store(result, (unint64_t *)&qword_1009A84D0);
  }

  return result;
}

uint64_t sub_1002E7800@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v1 = sub_100004AEC(&qword_1009A1D88);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for URLComponents(0LL);
  uint64_t v4 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for FMNAuthenticationProvider(0LL);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    v17 = (uint64_t *)&unk_1009A34D0;
    uint64_t v18 = (uint64_t)v12;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v16, 0LL);
    uint64_t v19 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1LL, v33) != 1)
    {
      v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v28 = v32;
      v27(v32, v3, v19);
      v29 = (void (*)(_BYTE *, void))URLComponents.path.modify(v35);
      v30._countAndFlagsBits = 0x6769666E6F63LL;
      v30._object = (void *)0xE600000000000000LL;
      String.append(_:)(v30);
      v29(v35, 0LL);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v34, v28, v19);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v17 = &qword_1009A1D88;
    uint64_t v18 = (uint64_t)v3;
  }

  sub_100015794(v18, v17);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2AE08);
  v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "No url found in account bag.", v24, 2u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  URLComponents.init()(v25);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.path.setter(0xD000000000000015LL, 0x800000010085CF50LL);
  return URLComponents.host.setter(0xD000000000000012LL, 0x8000000100854BE0LL);
}

uint64_t sub_1002E7BAC()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2A4B8);
  sub_10000A720(v0, (uint64_t)qword_100A2A4B8);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012LL, 0x800000010085CF10LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1002E7C7C()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  sub_10000A8AC(v0, qword_100A2A4D0);
  sub_10000A720(v0, (uint64_t)qword_100A2A4D0);
  uint64_t v1 = String.utf8Data.getter(0xD00000000000001BLL, 0x800000010085CF30LL);
  unint64_t v3 = v2;
  unint64_t v4 = sub_100042F34();
  DataProtocol.stableUUID.getter(&type metadata for Data, v4);
  return sub_100016F9C(v1, v3);
}

uint64_t sub_1002E7D20(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002E7D60 + 4 * byte_1007F9A90[a1]))( 0x6556747065636361LL,  0xED00006E6F697372LL);
}

uint64_t sub_1002E7D60()
{
  return 0x4565727574616566LL;
}

unint64_t sub_1002E7D84()
{
  return 0xD00000000000001ELL;
}

unint64_t sub_1002E7E00()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_1002E7E18()
{
  return 0xD000000000000017LL;
}

unint64_t sub_1002E7E30()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_1002E7E48()
{
  return 0xD000000000000020LL;
}

unint64_t sub_1002E7E60()
{
  return 0xD000000000000025LL;
}

unint64_t sub_1002E7E78()
{
  return 0xD00000000000001FLL;
}

unint64_t sub_1002E7E90()
{
  return 0xD00000000000002ELL;
}

void sub_1002E7EA8()
{
}

uint64_t sub_1002E7EC8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002E7F08 + 4 * byte_1007F9AA0[a1]))( 0x6556747065636361LL,  0xED00006E6F697372LL);
}

uint64_t sub_1002E7F08()
{
  return 0x4565727574616566LL;
}

unint64_t sub_1002E7F2C()
{
  return 0xD00000000000001ELL;
}

unint64_t sub_1002E7FA8()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_1002E7FC0()
{
  return 0xD000000000000017LL;
}

unint64_t sub_1002E7FD8()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_1002E7FF0()
{
  return 0xD000000000000020LL;
}

unint64_t sub_1002E8008()
{
  return 0xD000000000000025LL;
}

unint64_t sub_1002E8020()
{
  return 0xD00000000000001FLL;
}

unint64_t sub_1002E8038()
{
  return 0xD00000000000002ELL;
}

void sub_1002E8050()
{
}

uint64_t sub_1002E8070(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_1002E7D20(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_1002E7D20(v2);
  if (v3 == v6 && v5 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1002E80F8()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  uint64_t v2 = sub_1002E7D20(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002E8158(uint64_t a1)
{
  uint64_t v3 = sub_1002E7D20(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002E8198(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  uint64_t v3 = sub_1002E7D20(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1002E81F4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1002E93D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002E8220@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1002E7D20(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1002E8248()
{
  return sub_1002E7EC8(*v0);
}

unint64_t sub_1002E8250@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1002E93D4(a1);
  *a2 = result;
  return result;
}

void sub_1002E8274(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_1002E8280(uint64_t a1)
{
  unint64_t v2 = sub_1002E9C8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002E82A8(uint64_t a1)
{
  unint64_t v2 = sub_1002E9C8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002E82D0@<X0>(uint64_t a1@<X8>)
{
  if (qword_10099B250 != -1) {
    swift_once(&qword_10099B250, sub_1002E7C7C);
  }
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2A4D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v3, v2);
}

__n128 sub_1002E8340@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v10[11];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 192) = v10[12];
    __int128 v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    __int128 v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    __int128 v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    __int128 v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    __n128 result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t sub_1002E83A8(void *a1)
{
  return sub_1002E83BC(a1);
}

uint64_t sub_1002E83BC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A8660);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002E9C8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsConfig.CodingKeys,  &type metadata for SecureLocationsConfig.CodingKeys,  v11,  v9,  v10);
  double v12 = *(double *)v3;
  LOBYTE(v32[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(void *)&v12, v32, v5);
  if (!v2)
  {
    uint64_t v13 = *((unsigned __int8 *)v3 + 8);
    LOBYTE(v32[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v32, v5);
    double v14 = *((double *)v3 + 2);
    LOBYTE(v32[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v14);
    double v15 = *((double *)v3 + 3);
    LOBYTE(v32[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v15);
    uint64_t v16 = v3[4];
    LOBYTE(v32[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v32, v5);
    double v17 = *((double *)v3 + 5);
    LOBYTE(v32[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v17);
    double v18 = *((double *)v3 + 6);
    LOBYTE(v32[0]) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v18);
    uint64_t v19 = *((unsigned __int8 *)v3 + 56);
    LOBYTE(v32[0]) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v32, v5);
    double v20 = *((double *)v3 + 9);
    LOBYTE(v32[0]) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v20);
    *(void *)&v32[0] = v3[8];
    char v34 = 8;
    uint64_t v21 = sub_100004AEC(&qword_1009A5FA8);
    uint64_t v22 = sub_1002E9D68( (unint64_t *)&qword_1009A8668,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v32, &v34, v5, v21, v22);
    uint64_t v23 = *((unsigned __int8 *)v3 + 80);
    LOBYTE(v32[0]) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v32, v5);
    double v24 = *((double *)v3 + 11);
    LOBYTE(v32[0]) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v24);
    uint64_t v25 = v3[12];
    LOBYTE(v32[0]) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v32, v5);
    double v26 = *((double *)v3 + 13);
    LOBYTE(v32[0]) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v26);
    double v27 = *((double *)v3 + 14);
    LOBYTE(v32[0]) = 14;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v27);
    __int128 v28 = *(_OWORD *)(v3 + 21);
    v32[2] = *(_OWORD *)(v3 + 19);
    v32[3] = v28;
    v32[4] = *(_OWORD *)(v3 + 23);
    uint64_t v33 = v3[25];
    __int128 v29 = *(_OWORD *)(v3 + 17);
    v32[0] = *(_OWORD *)(v3 + 15);
    v32[1] = v29;
    char v34 = 15;
    unint64_t v30 = sub_1002E9DC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v32, &v34, v5, &type metadata for OwnedDeviceConfig, v30);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1002E8774()
{
  qword_100A2A4E8 = (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_1002E8788(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1002E87C4 + 4 * byte_1007F9AB0[a1]))( 0xD000000000000017LL,  0x800000010085CF70LL);
}

uint64_t sub_1002E87C4()
{
  return v0 - 18;
}

uint64_t sub_1002E8884(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A8730);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002EAC3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnedDeviceConfig.CodingKeys,  &type metadata for OwnedDeviceConfig.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  char v35 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v35, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    char v34 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v34, v5);
    uint64_t v14 = v3[2];
    char v33 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v33, v5);
    uint64_t v15 = v3[3];
    char v32 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v32, v5);
    uint64_t v16 = *((void *)v3 + 1);
    char v31 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v31, v5);
    double v17 = *((double *)v3 + 2);
    char v30 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v30, v5, v17);
    double v18 = *((double *)v3 + 3);
    char v29 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v18);
    uint64_t v19 = v3[32];
    char v28 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v28, v5);
    uint64_t v20 = *((void *)v3 + 5);
    uint64_t v21 = *((void *)v3 + 6);
    HIBYTE(v27) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, (char *)&v27 + 7, v5);
    uint64_t v22 = *((void *)v3 + 7);
    uint64_t v23 = *((void *)v3 + 8);
    BYTE6(v27) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, (char *)&v27 + 6, v5);
    uint64_t v24 = *((void *)v3 + 9);
    uint64_t v25 = *((void *)v3 + 10);
    BYTE5(v27) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v25, (char *)&v27 + 5, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002E8B00()
{
  return sub_1002E8788(*v0);
}

uint64_t sub_1002E8B08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002EA43C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002E8B2C(uint64_t a1)
{
  unint64_t v2 = sub_1002EAC3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002E8B54(uint64_t a1)
{
  unint64_t v2 = sub_1002EAC3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002E8B7C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }

  return result;
}

uint64_t sub_1002E8BD4(void *a1)
{
  return sub_1002E8884(a1);
}

uint64_t sub_1002E8BE8()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for OwnedDeviceConfigsDefaults()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd26OwnedDeviceConfigsDefaults);
}

uint64_t type metadata accessor for OwnedDevicePublishPolicy()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd24OwnedDevicePublishPolicy);
}

uint64_t destroy for SecureLocationsConfig(void *a1)
{
  return swift_bridgeObjectRelease(a1[25]);
}

uint64_t initializeWithCopy for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  uint64_t v6 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v6;
  uint64_t v7 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v7;
  uint64_t v8 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v8;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v6 = *(void *)(a2 + 168);
  uint64_t v7 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  uint64_t v8 = *(void *)(a2 + 184);
  uint64_t v9 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  uint64_t v10 = *(void *)(a2 + 200);
  uint64_t v11 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v9 = *(_OWORD *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  uint64_t v5 = *(void *)(a2 + 168);
  uint64_t v6 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 184);
  uint64_t v8 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 200);
  uint64_t v10 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0LL;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 208) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsConfig()
{
  return &type metadata for SecureLocationsConfig;
}

unint64_t sub_1002E9084(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1002E90B0();
  unint64_t result = sub_1002E90F4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1002E90B0()
{
  unint64_t result = qword_1009A8630;
  if (!qword_1009A8630)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9B60, &type metadata for SecureLocationsConfig);
    atomic_store(result, (unint64_t *)&qword_1009A8630);
  }

  return result;
}

unint64_t sub_1002E90F4()
{
  unint64_t result = qword_1009A8638;
  if (!qword_1009A8638)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9B38, &type metadata for SecureLocationsConfig);
    atomic_store(result, (unint64_t *)&qword_1009A8638);
  }

  return result;
}

id sub_1002E9138()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  __int128 v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v4 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v26 = v4;
  id result = [(id)objc_opt_self(AKDevice) currentDevice];
  if (result)
  {
    uint64_t v6 = result;
    id v7 = [result serverFriendlyDescription];

    if (v7)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      uint64_t v10 = v9;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
      unint64_t v25 = v4;
      unint64_t v26 = 0x8000000000000000LL;
      sub_10005C260(v8, v10, 0xD000000000000011LL, 0x8000000100854B60LL, isUniquelyReferenced_nonNull_native);
      unint64_t v12 = v25;
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_100047E14(0xD000000000000011LL, 0x8000000100854B60LL);
      swift_bridgeObjectRelease();
      unint64_t v12 = v26;
    }

    char v13 = swift_isUniquelyReferenced_nonNull_native(v12);
    unint64_t v25 = v12;
    sub_10005C260(49LL, 0xE100000000000000LL, 0x562D747065636341LL, 0xEE006E6F69737265LL, v13);
    unint64_t v14 = v25;
    swift_bridgeObjectRelease();
    char v15 = swift_isUniquelyReferenced_nonNull_native(v14);
    unint64_t v25 = v14;
    sub_10005C260(0xD000000000000010LL, 0x8000000100854B80LL, 0x2D746E65746E6F43LL, 0xEC00000065707954LL, v15);
    unint64_t v26 = v25;
    uint64_t v16 = swift_bridgeObjectRelease();
    uint64_t v17 = Date.init()(v16);
    uint64_t v18 = Date.epoch.getter(v17);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    unint64_t v25 = v18;
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
    uint64_t v21 = v20;
    unint64_t v22 = v26;
    char v23 = swift_isUniquelyReferenced_nonNull_native(v26);
    unint64_t v25 = v22;
    unint64_t v26 = 0x8000000000000000LL;
    sub_10005C260(v19, v21, 0xD000000000000015LL, 0x8000000100854BA0LL, v23);
    unint64_t v24 = v25;
    swift_bridgeObjectRelease();
    return (id)v24;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_1002E93D4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100934198, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0x10) {
    return 16LL;
  }
  else {
    return v3;
  }
}

void *sub_1002E941C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A8640);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  v135 = a1;
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002E9C8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsConfig.CodingKeys,  &type metadata for SecureLocationsConfig.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return (void *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
  }
  uint64_t v12 = v6;
  LOBYTE(v105) = 0;
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v5);
  uint64_t v14 = v5;
  if ((v15 & 1) != 0) {
    uint64_t v16 = 0LL;
  }
  else {
    uint64_t v16 = v13;
  }
  LOBYTE(v105) = 1;
  int v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14);
  uint64_t v91 = v16;
  LOBYTE(v105) = 2;
  double v18 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14));
  LODWORD(v90) = v17 == 2;
  if ((v19 & 1) != 0) {
    double v20 = 100.0;
  }
  else {
    double v20 = v18;
  }
  LOBYTE(v105) = 3;
  double v21 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14));
  if ((v22 & 1) != 0) {
    double v23 = 604800.0;
  }
  else {
    double v23 = v21;
  }
  LOBYTE(v105) = 4;
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14);
  if ((v25 & 1) != 0) {
    uint64_t v26 = 5LL;
  }
  else {
    uint64_t v26 = v24;
  }
  LOBYTE(v105) = 5;
  double v27 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14));
  uint64_t v89 = v26;
  if ((v28 & 1) != 0) {
    double v29 = 3600.0;
  }
  else {
    double v29 = v27;
  }
  LOBYTE(v105) = 6;
  double v30 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14));
  if ((v31 & 1) != 0) {
    double v32 = 120.0;
  }
  else {
    double v32 = v30;
  }
  LOBYTE(v105) = 7;
  int v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14);
  LOBYTE(v105) = 9;
  double v34 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14));
  LODWORD(v88) = v33;
  DWORD2(v87) = v17;
  if ((v35 & 1) != 0) {
    double v37 = 120.0;
  }
  else {
    double v37 = v34;
  }
  uint64_t v38 = sub_100004AEC(&qword_1009A5FA8);
  LOBYTE(v92) = 8;
  uint64_t v39 = sub_1002E9D68( &qword_1009A8650,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
  uint64_t v40 = v14;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v38, &v92, v14, v38, v39);
  uint64_t v41 = v105;
  if (!v105)
  {
    if (qword_10099B258 != -1) {
      swift_once(&qword_10099B258, sub_1002E8774);
    }
    uint64_t v41 = qword_100A2A4E8;
    swift_bridgeObjectRetain(qword_100A2A4E8);
  }

  LOBYTE(v105) = 10;
  swift_bridgeObjectRetain(v41);
  LODWORD(v87) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v40);
  DWORD2(v86) = v87 == 2;
  LOBYTE(v105) = 11;
  double v42 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v40));
  if ((v43 & 1) != 0) {
    double v44 = 1800.0;
  }
  else {
    double v44 = v42;
  }
  LOBYTE(v105) = 12;
  uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v40);
  if ((v46 & 1) != 0) {
    uint64_t v47 = 5LL;
  }
  else {
    uint64_t v47 = v45;
  }
  LOBYTE(v105) = 13;
  double v48 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v40));
  if ((v49 & 1) != 0) {
    double v50 = 900.0;
  }
  else {
    double v50 = v48;
  }
  LOBYTE(v105) = 14;
  double v51 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v40));
  if ((v52 & 1) != 0) {
    double v53 = 1000.0;
  }
  else {
    double v53 = v51;
  }
  LOBYTE(v92) = 15;
  unint64_t v54 = sub_1002E9CD0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for OwnedDeviceConfig,  &v92,  v40,  &type metadata for OwnedDeviceConfig,  v54);
  int v81 = (v90 | BYTE8(v87)) & 1;
  int v82 = v88 & 1;
  unint64_t v80 = v105;
  int v84 = (BYTE8(v86) | v87) & 1;
  uint64_t v83 = v107;
  uint64_t v78 = v108;
  unint64_t v55 = *(void *)&v110;
  uint64_t v90 = v111;
  unint64_t v85 = v112;
  __int128 v86 = v106;
  __int128 v87 = v113;
  uint64_t v88 = v109;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v40);
  if (v55)
  {
    unint64_t v56 = v55;
    uint64_t v57 = (v80 >> 8) & 1;
    int v58 = v80 & 1;
    uint64_t v59 = (v80 >> 16) & 1;
    int v60 = v78 & 1;
    uint64_t v61 = (v80 >> 24) & 1;
  }

  else
  {
    uint64_t v90 = 808334129LL;
    *((void *)&v87 + 1) = 0xE300000000000000LL;
    uint64_t v88 = 808334897LL;
    unint64_t v56 = 0xE400000000000000LL;
    int v58 = 1;
    *(void *)&__int128 v87 = 3157561LL;
    uint64_t v83 = 0x417E133800000000LL;
    *((void *)&v86 + 1) = 0x416E133800000000LL;
    *(void *)&__int128 v86 = 5LL;
    uint64_t v57 = 1LL;
    uint64_t v59 = 1LL;
    uint64_t v61 = 1LL;
    int v60 = 1;
    unint64_t v85 = 0xE400000000000000LL;
  }

  uint64_t v62 = v91;
  *(void *)&__int128 v92 = v91;
  char v64 = v81;
  char v63 = v82;
  BYTE8(v92) = v81;
  *(double *)&__int128 v93 = v20;
  *((double *)&v93 + 1) = v23;
  uint64_t v65 = v89;
  *(void *)&__int128 v94 = v89;
  *((double *)&v94 + 1) = v29;
  *(double *)&__int128 v95 = v32;
  BYTE8(v95) = v82;
  *(void *)&__int128 v96 = v41;
  *((double *)&v96 + 1) = v37;
  LOBYTE(v97) = v84;
  *((double *)&v97 + 1) = v44;
  *(void *)&__int128 v98 = v47;
  double v79 = v50;
  *((double *)&v98 + 1) = v50;
  *(double *)&__int128 v99 = v53;
  double v66 = v53;
  LODWORD(v78) = v58;
  BYTE8(v99) = v58;
  uint64_t v76 = v59;
  uint64_t v77 = v57;
  BYTE9(v99) = v57;
  BYTE10(v99) = v59;
  uint64_t v75 = v61;
  BYTE11(v99) = v61;
  __int128 v100 = v86;
  uint64_t v67 = v83;
  *(void *)&__int128 v101 = v83;
  HIDWORD(v74) = v60;
  BYTE8(v101) = v60;
  *(void *)&__int128 v102 = v88;
  *((void *)&v102 + 1) = v56;
  unint64_t v80 = v56;
  *(void *)&__int128 v103 = v90;
  *((void *)&v103 + 1) = v85;
  __int128 v104 = v87;
  sub_1002E9D14(&v92);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
  uint64_t v105 = v62;
  LOBYTE(v106) = v64;
  *(_DWORD *)((char *)&v106 + 1) = v134[0];
  DWORD1(v106) = *(_DWORD *)((char *)v134 + 3);
  *((double *)&v106 + 1) = v20;
  uint64_t v107 = *(void *)&v23;
  uint64_t v108 = v65;
  uint64_t v109 = *(void *)&v29;
  double v110 = v32;
  LOBYTE(v111) = v63;
  *(_DWORD *)((char *)&v111 + 1) = *(_DWORD *)v133;
  HIDWORD(v111) = *(_DWORD *)&v133[3];
  unint64_t v112 = v41;
  *(double *)&__int128 v113 = v37;
  BYTE8(v113) = v84;
  HIDWORD(v113) = *(_DWORD *)&v132[3];
  *(_DWORD *)((char *)&v113 + 9) = *(_DWORD *)v132;
  double v114 = v44;
  uint64_t v115 = v47;
  double v116 = v79;
  double v117 = v66;
  char v118 = v78;
  char v119 = v77;
  char v120 = v76;
  char v121 = v75;
  __int128 v122 = v86;
  uint64_t v123 = v67;
  char v124 = BYTE4(v74);
  *(_DWORD *)&v125[3] = *(_DWORD *)&v131[3];
  *(_DWORD *)v125 = *(_DWORD *)v131;
  uint64_t v126 = v88;
  unint64_t v127 = v80;
  uint64_t v128 = v90;
  unint64_t v129 = v85;
  __int128 v130 = v87;
  id result = sub_100246384(&v105);
  __int128 v68 = v103;
  a2[10] = v102;
  a2[11] = v68;
  a2[12] = v104;
  __int128 v69 = v99;
  a2[6] = v98;
  a2[7] = v69;
  __int128 v70 = v101;
  a2[8] = v100;
  a2[9] = v70;
  __int128 v71 = v95;
  a2[2] = v94;
  a2[3] = v71;
  __int128 v72 = v97;
  a2[4] = v96;
  a2[5] = v72;
  __int128 v73 = v93;
  *a2 = v92;
  a2[1] = v73;
  return result;
}

unint64_t sub_1002E9C8C()
{
  unint64_t result = qword_1009A8648;
  if (!qword_1009A8648)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9DDC, &type metadata for SecureLocationsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8648);
  }

  return result;
}

unint64_t sub_1002E9CD0()
{
  unint64_t result = qword_1009A8658;
  if (!qword_1009A8658)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9DB4, &type metadata for OwnedDeviceConfig);
    atomic_store(result, (unint64_t *)&qword_1009A8658);
  }

  return result;
}

void *sub_1002E9D14(void *a1)
{
  uint64_t v2 = a1[21];
  uint64_t v3 = a1[23];
  uint64_t v4 = a1[25];
  swift_bridgeObjectRetain(a1[8]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1002E9D68(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100004B78(&qword_1009A5FA8);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1002E9DC8()
{
  unint64_t result = qword_1009A8670;
  if (!qword_1009A8670)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9D8C, &type metadata for OwnedDeviceConfig);
    atomic_store(result, (unint64_t *)&qword_1009A8670);
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsConfigRequest()
{
  return &type metadata for SecureLocationsConfigRequest;
}

uint64_t sub_1002E9E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002E9E28);
}

uint64_t sub_1002E9E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for URLComponents(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1002E9E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002E9EA8);
}

uint64_t sub_1002E9EA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = type metadata accessor for URLComponents(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SecureLocationsConfigEndpoint(uint64_t a1)
{
  uint64_t result = qword_1009A86D0;
  if (!qword_1009A86D0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsConfigEndpoint);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SecureLocationsConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }

uint64_t storeEnumTagSinglePayload for SecureLocationsConfig.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF0) {
    return ((uint64_t (*)(void))((char *)&loc_1002EA03C + 4 * byte_1007F9AC0[v4]))();
  }
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1002EA070 + 4 * byte_1007F9ABB[v4]))();
}

uint64_t sub_1002EA070(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002EA078(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002EA080LL);
  }
  return result;
}

uint64_t sub_1002EA08C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002EA094LL);
  }
  *(_BYTE *)uint64_t result = a2 + 15;
  return result;
}

uint64_t sub_1002EA098(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002EA0A0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsConfig.CodingKeys()
{
  return &type metadata for SecureLocationsConfig.CodingKeys;
}

uint64_t destroy for OwnedDeviceConfig(void *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for OwnedDeviceConfig(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for OwnedDeviceConfig(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for OwnedDeviceConfig(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for OwnedDeviceConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnedDeviceConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceConfig()
{
  return &type metadata for OwnedDeviceConfig;
}

unint64_t sub_1002EA368()
{
  unint64_t result = qword_1009A8708;
  if (!qword_1009A8708)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9CDC, &type metadata for SecureLocationsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8708);
  }

  return result;
}

unint64_t sub_1002EA3B0()
{
  unint64_t result = qword_1009A8710;
  if (!qword_1009A8710)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9C14, &type metadata for SecureLocationsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8710);
  }

  return result;
}

unint64_t sub_1002EA3F8()
{
  unint64_t result = qword_1009A8718;
  if (!qword_1009A8718)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9C3C, &type metadata for SecureLocationsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8718);
  }

  return result;
}

uint64_t sub_1002EA43C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000017LL && a2 == 0x800000010085CF70LL)
  {
    unint64_t v4 = 0x800000010085CF70LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000010085CF70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x800000010085CF90LL)
  {
    unint64_t v6 = 0x800000010085CF90LL;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x800000010085CF90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_12;
  }

  if (a1 == 0xD000000000000019LL && a2 == 0x800000010085CFB0LL)
  {
    unint64_t v7 = 0x800000010085CFB0LL;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x800000010085CFB0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_18;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x800000010085CFD0LL)
  {
    unint64_t v8 = 0x800000010085CFD0LL;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010085CFD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_24;
  }

  if (a1 == 0x4B664F6F4E78616DLL && a2 == 0xEB00000000737965LL)
  {
    unint64_t v9 = 0xEB00000000737965LL;
LABEL_30:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B664F6F4E78616DLL, 0xEB00000000737965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_30;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x800000010085CFF0LL)
  {
    unint64_t v10 = 0x800000010085CFF0LL;
LABEL_36:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010085CFF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_36;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x800000010085D010LL)
  {
    unint64_t v11 = 0x800000010085D010LL;
LABEL_42:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010085D010LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_42;
  }

  if (a1 == 0xD000000000000028LL)
  {
    unint64_t v12 = 0x800000010085D030LL;
    if (a2 == 0x800000010085D030LL) {
      goto LABEL_47;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000028LL, 0x800000010085D030LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if (a1 == 0xD000000000000026LL && a2 == 0x800000010085D060LL)
  {
    unint64_t v13 = 0x800000010085D060LL;
LABEL_53:
    swift_bridgeObjectRelease(v13);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000026LL, 0x800000010085D060LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_53;
  }

  if (a1 == 0xD000000000000028LL)
  {
    unint64_t v14 = 0x800000010085D090LL;
    if (a2 == 0x800000010085D090LL) {
      goto LABEL_58;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000028LL, 0x800000010085D090LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_58:
    swift_bridgeObjectRelease(v14);
    return 9LL;
  }

  if (a1 == 0xD00000000000002ALL && a2 == 0x800000010085D0C0LL)
  {
    swift_bridgeObjectRelease(0x800000010085D0C0LL);
    return 10LL;
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ALL, 0x800000010085D0C0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0) {
      return 10LL;
    }
    else {
      return 11LL;
    }
  }

uint64_t sub_1002EA85C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A8720);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002EAC3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnedDeviceConfig.CodingKeys,  &type metadata for OwnedDeviceConfig.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v50 = 0;
  char v12 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v5);
  char v49 = 1;
  char v13 = KeyedDecodingContainer.decode(_:forKey:)(&v49, v5);
  char v48 = 2;
  int v39 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v5);
  char v47 = 3;
  int v38 = KeyedDecodingContainer.decode(_:forKey:)(&v47, v5);
  char v46 = 4;
  uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
  char v45 = 5;
  KeyedDecodingContainer.decode(_:forKey:)(&v45, v5);
  uint64_t v15 = v14;
  char v44 = 6;
  KeyedDecodingContainer.decode(_:forKey:)(&v44, v5);
  uint64_t v17 = v16;
  char v43 = 7;
  int v35 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v5);
  char v42 = 8;
  uint64_t v36 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v5);
  char v41 = 9;
  uint64_t v34 = v18;
  swift_bridgeObjectRetain(v18);
  uint64_t v32 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
  uint64_t v33 = v19;
  char v40 = 10;
  swift_bridgeObjectRetain(v19);
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v5);
  uint64_t v21 = v20;
  int v29 = v13 & 1;
  int v30 = v12 & 1;
  char v22 = v39 & 1;
  char v23 = v38 & 1;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
  char v25 = v35 & 1;
  v24(v8, v5);
  uint64_t v26 = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  uint64_t v27 = v33;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v30;
  *(_BYTE *)(a2 + 1) = v29;
  *(_BYTE *)(a2 + 2) = v22;
  *(_BYTE *)(a2 + 3) = v23;
  *(void *)(a2 + 8) = v37;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v17;
  *(_BYTE *)(a2 + 32) = v25;
  *(void *)(a2 + 40) = v36;
  *(void *)(a2 + 48) = v26;
  *(void *)(a2 + 56) = v32;
  *(void *)(a2 + 64) = v27;
  *(void *)(a2 + 72) = v31;
  *(void *)(a2 + 80) = v21;
  return result;
}

unint64_t sub_1002EAC3C()
{
  unint64_t result = qword_1009A8728;
  if (!qword_1009A8728)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9EE4, &type metadata for OwnedDeviceConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8728);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for OwnedDeviceConfig.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_1002EACCC + 4 * byte_1007F9ACA[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1002EAD00 + 4 * byte_1007F9AC5[v4]))();
}

uint64_t sub_1002EAD00(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002EAD08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002EAD10LL);
  }
  return result;
}

uint64_t sub_1002EAD1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002EAD24LL);
  }
  *(_BYTE *)unint64_t result = a2 + 10;
  return result;
}

uint64_t sub_1002EAD28(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002EAD30(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceConfig.CodingKeys()
{
  return &type metadata for OwnedDeviceConfig.CodingKeys;
}

unint64_t sub_1002EAD50()
{
  unint64_t result = qword_1009A8738;
  if (!qword_1009A8738)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9EBC, &type metadata for OwnedDeviceConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8738);
  }

  return result;
}

unint64_t sub_1002EAD98()
{
  unint64_t result = qword_1009A8740;
  if (!qword_1009A8740)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9E2C, &type metadata for OwnedDeviceConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8740);
  }

  return result;
}

unint64_t sub_1002EADE0()
{
  unint64_t result = qword_1009A8748;
  if (!qword_1009A8748)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9E54, &type metadata for OwnedDeviceConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8748);
  }

  return result;
}

void *sub_1002EAE24(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v7 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v7;
    uint64_t v8 = a2[7];
    uint64_t v9 = a2[8];
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a3[6];
    char v12 = (void *)(a1 + v11);
    char v13 = (uint64_t *)((char *)a2 + v11);
    *(void *)(a1 + 56) = v8;
    uint64_t v14 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    uint64_t v15 = *((void *)v14 - 1);
    uint64_t v16 = *(unsigned int (**)(void *, uint64_t, int *, __n128))(v15 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    __n128 v17 = swift_bridgeObjectRetain(v9);
    if (v16(v13, 1LL, v14, v17))
    {
      uint64_t v18 = sub_100004AEC(&qword_1009A6DD0);
      memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64LL));
      uint64_t v19 = a3;
    }

    else
    {
      uint64_t v90 = v15;
      uint64_t v21 = v13[1];
      void *v12 = *v13;
      v12[1] = v21;
      uint64_t v22 = v13[3];
      v12[2] = v13[2];
      v12[3] = v22;
      uint64_t v23 = v13[5];
      v12[4] = v13[4];
      v12[5] = v23;
      *((_WORD *)v12 + 24) = *((_WORD *)v13 + 24);
      *((_BYTE *)v12 + 72) = *((_BYTE *)v13 + 72);
      uint64_t v24 = v13[8];
      v12[7] = v13[7];
      v12[8] = v24;
      uint64_t v25 = v14[10];
      __dst = (char *)v12 + v25;
      uint64_t v89 = (char *)v13 + v25;
      uint64_t v26 = type metadata accessor for URL(0LL);
      uint64_t v27 = *(void *)(v26 - 8);
      char v28 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v27 + 48);
      uint64_t v29 = v21;
      uint64_t v30 = v26;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v22);
      __n128 v31 = swift_bridgeObjectRetain(v23);
      uint64_t v87 = v27;
      if (v28(v89, 1LL, v30, v31))
      {
        uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dst, v89, *(void *)(*(void *)(v32 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v89, v30);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0LL, 1LL, v30);
      }

      uint64_t v19 = a3;
      uint64_t v33 = v14[11];
      uint64_t v34 = (char *)v12 + v33;
      int v35 = (char *)v13 + v33;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v28)((char *)v13 + v33, 1LL, v30))
      {
        uint64_t v36 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v34, v35, v30);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v34, 0LL, 1LL, v30);
      }

      uint64_t v37 = v14[12];
      int v38 = (char *)v12 + v37;
      int v39 = (char *)v13 + v37;
      *(void *)int v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v14[13];
      char v41 = (void *)((char *)v12 + v40);
      char v42 = (void *)((char *)v13 + v40);
      uint64_t v43 = v42[1];
      *char v41 = *v42;
      v41[1] = v43;
      uint64_t v44 = v14[14];
      uint64_t v45 = *(void *)((char *)v13 + v44);
      *(void *)((char *)v12 + v44) = v45;
      uint64_t v46 = v14[15];
      char v47 = (void *)((char *)v12 + v46);
      char v48 = (void *)((char *)v13 + v46);
      uint64_t v49 = v48[1];
      *char v47 = *v48;
      v47[1] = v49;
      uint64_t v50 = v14[16];
      uint64_t v51 = *(void *)((char *)v13 + v50);
      *(void *)((char *)v12 + v50) = v51;
      uint64_t v52 = v14[17];
      double v53 = (char *)v12 + v52;
      unint64_t v54 = (char *)v13 + v52;
      *(_OWORD *)double v53 = *(_OWORD *)v54;
      v53[16] = v54[16];
      uint64_t v55 = v14[18];
      unint64_t v56 = (char *)v12 + v55;
      uint64_t v57 = (char *)v13 + v55;
      *(_OWORD *)unint64_t v56 = *(_OWORD *)v57;
      v56[16] = v57[16];
      int v58 = *(void (**)(void *, void, uint64_t, int *, __n128))(v90 + 56);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v49);
      __n128 v59 = swift_bridgeObjectRetain(v51);
      v58(v12, 0LL, 1LL, v14, v59);
    }

    uint64_t v60 = v19[7];
    uint64_t v61 = (char *)v4 + v60;
    uint64_t v62 = (char *)a2 + v60;
    char v63 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
    uint64_t v64 = *((void *)v63 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v64 + 48))(v62, 1LL, v63))
    {
      uint64_t v65 = sub_100004AEC(&qword_1009A6DC8);
      memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64LL));
    }

    else
    {
      uint64_t v66 = type metadata accessor for URL(0LL);
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16LL);
      v67(v61, v62, v66);
      v67(&v61[v63[5]], &v62[v63[5]], v66);
      v67(&v61[v63[6]], &v62[v63[6]], v66);
      v67(&v61[v63[7]], &v62[v63[7]], v66);
      v67(&v61[v63[8]], &v62[v63[8]], v66);
      v67(&v61[v63[9]], &v62[v63[9]], v66);
      v67(&v61[v63[10]], &v62[v63[10]], v66);
      v67(&v61[v63[11]], &v62[v63[11]], v66);
      v67(&v61[v63[12]], &v62[v63[12]], v66);
      v67(&v61[v63[13]], &v62[v63[13]], v66);
      v67(&v61[v63[14]], &v62[v63[14]], v66);
      v67(&v61[v63[15]], &v62[v63[15]], v66);
      (*(void (**)(char *, void, uint64_t, int *))(v64 + 56))(v61, 0LL, 1LL, v63);
    }

    uint64_t v68 = v19[8];
    uint64_t v69 = v19[9];
    __int128 v70 = (void *)((char *)v4 + v68);
    __int128 v71 = (uint64_t *)((char *)a2 + v68);
    uint64_t v72 = v71[1];
    *__int128 v70 = *v71;
    v70[1] = v72;
    __int128 v73 = (void *)((char *)v4 + v69);
    uint64_t v74 = (uint64_t *)((char *)a2 + v69);
    uint64_t v75 = *(uint64_t *)((char *)a2 + v69 + 8);
    swift_bridgeObjectRetain(v72);
    if (v75)
    {
      *__int128 v73 = *v74;
      v73[1] = v75;
      uint64_t v76 = v74[3];
      v73[2] = v74[2];
      v73[3] = v76;
      uint64_t v77 = v74[4];
      uint64_t v78 = v74[5];
      v73[4] = v77;
      v73[5] = v78;
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRetain(v78);
    }

    else
    {
      __int128 v79 = *((_OWORD *)v74 + 1);
      *(_OWORD *)__int128 v73 = *(_OWORD *)v74;
      *((_OWORD *)v73 + 1) = v79;
      *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
    }

    uint64_t v80 = v19[10];
    int v81 = (char *)v4 + v80;
    uint64_t v82 = (uint64_t)a2 + v80;
    uint64_t v83 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16LL))(v81, v82, v83);
    uint64_t v84 = v19[11];
    uint64_t v85 = *(uint64_t *)((char *)a2 + v84);
    *(void *)((char *)v4 + v84) = v85;
    swift_bridgeObjectRetain(v85);
  }

  return v4;
}

uint64_t type metadata accessor for AccessoryInfoResponseContent.Configuration(uint64_t a1)
{
  return sub_10008BED8( a1,  (uint64_t *)&unk_1009A8918,  (uint64_t)&nominal type descriptor for AccessoryInfoResponseContent.Configuration);
}

uint64_t type metadata accessor for AccessoryInfoResponseContent.Assets(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A8860, (uint64_t)&nominal type descriptor for AccessoryInfoResponseContent.Assets);
}

uint64_t sub_1002EB3C4(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, 1LL, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = v4 + *(int *)(v5 + 40);
    uint64_t v7 = type metadata accessor for URL(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (!v9(v6, 1LL, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
    uint64_t v10 = v4 + *(int *)(v5 + 44);
    if (!v9(v10, 1LL, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v11 = a1 + a2[7];
  char v12 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v12 - 1) + 48LL))(v11, 1LL, v12))
  {
    uint64_t v13 = type metadata accessor for URL(0LL);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL);
    v14(v11, v13);
    v14(v11 + v12[5], v13);
    v14(v11 + v12[6], v13);
    v14(v11 + v12[7], v13);
    v14(v11 + v12[8], v13);
    v14(v11 + v12[9], v13);
    v14(v11 + v12[10], v13);
    v14(v11 + v12[11], v13);
    v14(v11 + v12[12], v13);
    v14(v11 + v12[13], v13);
    v14(v11 + v12[14], v13);
    v14(v11 + v12[15], v13);
  }

  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[9] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v15 = a1 + a2[10];
  uint64_t v16 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002EB660(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  char v12 = (void *)(a2 + v10);
  *(void *)(a1 + 56) = v7;
  uint64_t v13 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(unsigned int (**)(void *, uint64_t, int *, __n128))(v14 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  __n128 v16 = swift_bridgeObjectRetain(v8);
  if (v15(v12, 1LL, v13, v16))
  {
    uint64_t v17 = sub_100004AEC(&qword_1009A6DD0);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64LL));
    uint64_t v18 = a3;
  }

  else
  {
    uint64_t v87 = v14;
    uint64_t v19 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v19;
    uint64_t v20 = v12[3];
    v11[2] = v12[2];
    v11[3] = v20;
    uint64_t v21 = v12[5];
    v11[4] = v12[4];
    v11[5] = v21;
    *((_WORD *)v11 + 24) = *((_WORD *)v12 + 24);
    *((_BYTE *)v11 + 72) = *((_BYTE *)v12 + 72);
    uint64_t v22 = v12[8];
    v11[7] = v12[7];
    v11[8] = v22;
    uint64_t v23 = v13[10];
    __dst = (char *)v11 + v23;
    uint64_t v24 = (char *)v12 + v23;
    uint64_t v25 = type metadata accessor for URL(0LL);
    uint64_t v85 = *(void *)(v25 - 8);
    uint64_t v26 = v19;
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v85 + 48);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v20);
    __n128 v28 = swift_bridgeObjectRetain(v21);
    if (v27(v24, 1LL, v25, v28))
    {
      uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dst, v24, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(__dst, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(__dst, 0LL, 1LL, v25);
    }

    uint64_t v30 = v13[11];
    __n128 v31 = (char *)v11 + v30;
    uint64_t v32 = (char *)v12 + v30;
    int v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v27)((char *)v12 + v30, 1LL, v25);
    uint64_t v18 = a3;
    if (v33)
    {
      uint64_t v34 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v31, v32, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v31, 0LL, 1LL, v25);
    }

    uint64_t v35 = v13[12];
    uint64_t v36 = (char *)v11 + v35;
    uint64_t v37 = (char *)v12 + v35;
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v13[13];
    int v39 = (void *)((char *)v11 + v38);
    uint64_t v40 = (void *)((char *)v12 + v38);
    uint64_t v41 = v40[1];
    *int v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = v13[14];
    uint64_t v43 = *(void *)((char *)v12 + v42);
    *(void *)((char *)v11 + v42) = v43;
    uint64_t v44 = v13[15];
    uint64_t v45 = (void *)((char *)v11 + v44);
    uint64_t v46 = (void *)((char *)v12 + v44);
    uint64_t v47 = v46[1];
    *uint64_t v45 = *v46;
    v45[1] = v47;
    uint64_t v48 = v13[16];
    uint64_t v49 = *(void *)((char *)v12 + v48);
    *(void *)((char *)v11 + v48) = v49;
    uint64_t v50 = v13[17];
    uint64_t v51 = (char *)v11 + v50;
    uint64_t v52 = (char *)v12 + v50;
    *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
    v51[16] = v52[16];
    uint64_t v53 = v13[18];
    unint64_t v54 = (char *)v11 + v53;
    uint64_t v55 = (char *)v12 + v53;
    *(_OWORD *)unint64_t v54 = *(_OWORD *)v55;
    v54[16] = v55[16];
    unint64_t v56 = *(void (**)(void *, void, uint64_t, int *, __n128))(v87 + 56);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v47);
    __n128 v57 = swift_bridgeObjectRetain(v49);
    v56(v11, 0LL, 1LL, v13, v57);
  }

  uint64_t v58 = v18[7];
  __n128 v59 = (char *)(a1 + v58);
  uint64_t v60 = (char *)(a2 + v58);
  uint64_t v61 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
  uint64_t v62 = *((void *)v61 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v62 + 48))(v60, 1LL, v61))
  {
    uint64_t v63 = sub_100004AEC(&qword_1009A6DC8);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64LL));
  }

  else
  {
    uint64_t v64 = type metadata accessor for URL(0LL);
    uint64_t v65 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16LL);
    v65(v59, v60, v64);
    v65(&v59[v61[5]], &v60[v61[5]], v64);
    v65(&v59[v61[6]], &v60[v61[6]], v64);
    v65(&v59[v61[7]], &v60[v61[7]], v64);
    v65(&v59[v61[8]], &v60[v61[8]], v64);
    v65(&v59[v61[9]], &v60[v61[9]], v64);
    v65(&v59[v61[10]], &v60[v61[10]], v64);
    v65(&v59[v61[11]], &v60[v61[11]], v64);
    v65(&v59[v61[12]], &v60[v61[12]], v64);
    v65(&v59[v61[13]], &v60[v61[13]], v64);
    v65(&v59[v61[14]], &v60[v61[14]], v64);
    v65(&v59[v61[15]], &v60[v61[15]], v64);
    (*(void (**)(char *, void, uint64_t, int *))(v62 + 56))(v59, 0LL, 1LL, v61);
  }

  uint64_t v66 = v18[8];
  uint64_t v67 = v18[9];
  uint64_t v68 = (void *)(a1 + v66);
  uint64_t v69 = (void *)(a2 + v66);
  uint64_t v70 = v69[1];
  *uint64_t v68 = *v69;
  v68[1] = v70;
  __int128 v71 = (void *)(a1 + v67);
  uint64_t v72 = (void *)(a2 + v67);
  uint64_t v73 = *(void *)(a2 + v67 + 8);
  swift_bridgeObjectRetain(v70);
  if (v73)
  {
    *__int128 v71 = *v72;
    v71[1] = v73;
    uint64_t v74 = v72[3];
    v71[2] = v72[2];
    v71[3] = v74;
    uint64_t v75 = v72[4];
    uint64_t v76 = v72[5];
    v71[4] = v75;
    v71[5] = v76;
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v76);
  }

  else
  {
    __int128 v77 = *((_OWORD *)v72 + 1);
    *(_OWORD *)__int128 v71 = *(_OWORD *)v72;
    *((_OWORD *)v71 + 1) = v77;
    *((_OWORD *)v71 + 2) = *((_OWORD *)v72 + 2);
  }

  uint64_t v78 = v18[10];
  uint64_t v79 = a1 + v78;
  uint64_t v80 = a2 + v78;
  uint64_t v81 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 16LL))(v79, v80, v81);
  uint64_t v82 = v18[11];
  uint64_t v83 = *(void *)(a2 + v82);
  *(void *)(a1 + v82) = v83;
  swift_bridgeObjectRetain(v83);
  return a1;
}

uint64_t sub_1002EBBA8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v7 = a2[3];
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_BYTE *)(a1 + 34) = *((_BYTE *)a2 + 34);
  *(_BYTE *)(a1 + 35) = *((_BYTE *)a2 + 35);
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
  *(_BYTE *)(a1 + 37) = *((_BYTE *)a2 + 37);
  *(_BYTE *)(a1 + 38) = *((_BYTE *)a2 + 38);
  *(_BYTE *)(a1 + 39) = *((_BYTE *)a2 + 39);
  *(void *)(a1 + 40) = a2[5];
  uint64_t v8 = a2[6];
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  uint64_t v9 = a2[8];
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[9];
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  __n128 v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (v17)
  {
    if (!v18)
    {
      uint64_t v145 = v15;
      v147 = a3;
      *(void *)uint64_t v12 = *(void *)v13;
      uint64_t v19 = *(void *)(v13 + 8);
      *(void *)(v12 + 8) = v19;
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      uint64_t v20 = *(void *)(v13 + 24);
      *(void *)(v12 + 24) = v20;
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      uint64_t v21 = *(void *)(v13 + 40);
      *(void *)(v12 + 40) = v21;
      *(_WORD *)(v12 + 48) = *(_WORD *)(v13 + 48);
      *(void *)(v12 + 56) = *(void *)(v13 + 56);
      uint64_t v22 = *(void *)(v13 + 64);
      *(_BYTE *)(v12 + 72) = *(_BYTE *)(v13 + 72);
      *(void *)(v12 + 64) = v22;
      uint64_t v23 = v14[10];
      v143 = (const void *)(v13 + v23);
      __dst = (void *)(v12 + v23);
      uint64_t v24 = type metadata accessor for URL(0LL);
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v26 = v19;
      uint64_t v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v25 + 48);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v20);
      __n128 v28 = swift_bridgeObjectRetain(v21);
      if (v27(v143, 1LL, v24, v28))
      {
        uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dst, v143, *(void *)(*(void *)(v29 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(__dst, v143, v24);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0LL, 1LL, v24);
      }

      uint64_t v42 = v25;
      uint64_t v43 = v14[11];
      uint64_t v44 = (void *)(v12 + v43);
      uint64_t v45 = (const void *)(v13 + v43);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v27)(v13 + v43, 1LL, v24))
      {
        uint64_t v46 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v42 + 16))(v44, v45, v24);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v44, 0LL, 1LL, v24);
      }

      uint64_t v47 = v14[12];
      uint64_t v48 = v12 + v47;
      uint64_t v49 = (uint64_t *)(v13 + v47);
      uint64_t v50 = *v49;
      *(_BYTE *)(v48 + 8) = *((_BYTE *)v49 + 8);
      *(void *)uint64_t v48 = v50;
      uint64_t v51 = v14[13];
      uint64_t v52 = (void *)(v12 + v51);
      uint64_t v53 = (void *)(v13 + v51);
      *uint64_t v52 = *v53;
      uint64_t v54 = v53[1];
      v52[1] = v54;
      uint64_t v55 = v14[14];
      uint64_t v56 = *(void *)(v13 + v55);
      *(void *)(v12 + v55) = v56;
      uint64_t v57 = v14[15];
      uint64_t v58 = (void *)(v12 + v57);
      __n128 v59 = (void *)(v13 + v57);
      *uint64_t v58 = *v59;
      uint64_t v60 = v59[1];
      v58[1] = v60;
      uint64_t v61 = v14[16];
      uint64_t v62 = *(void *)(v13 + v61);
      *(void *)(v12 + v61) = v62;
      uint64_t v63 = v14[17];
      uint64_t v64 = v12 + v63;
      uint64_t v65 = (__int128 *)(v13 + v63);
      __int128 v66 = *v65;
      *(_BYTE *)(v64 + 16) = *((_BYTE *)v65 + 16);
      *(_OWORD *)uint64_t v64 = v66;
      uint64_t v67 = v14[18];
      uint64_t v68 = v12 + v67;
      uint64_t v69 = (__int128 *)(v13 + v67);
      __int128 v70 = *v69;
      *(_BYTE *)(v68 + 16) = *((_BYTE *)v69 + 16);
      *(_OWORD *)uint64_t v68 = v70;
      __int128 v71 = *(void (**)(uint64_t, void, uint64_t, int *, __n128))(v145 + 56);
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v60);
      __n128 v72 = swift_bridgeObjectRetain(v62);
      v71(v12, 0LL, 1LL, v14, v72);
      goto LABEL_26;
    }

void *sub_1002EC69C(void *a1)
{
  return a1;
}

uint64_t sub_1002EC6C8(uint64_t a1, __int128 *a2, int *a3)
{
  __int128 v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  __int128 v8 = *a2;
  __int128 v7 = a2[1];
  uint64_t v9 = *((void *)a2 + 9);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = v9;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  uint64_t v10 = a3[6];
  uint64_t v11 = (_OWORD *)(a1 + v10);
  uint64_t v12 = (__int128 *)((char *)a2 + v10);
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v7;
  uint64_t v13 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v14 = *((void *)v13 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v14 + 48))(v12, 1LL, v13))
  {
    uint64_t v15 = sub_100004AEC(&qword_1009A6DD0);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    __int128 v16 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v16;
    v11[2] = v12[2];
    *((_WORD *)v11 + 24) = *((_WORD *)v12 + 24);
    uint64_t v17 = *((void *)v12 + 8);
    *((void *)v11 + 7) = *((void *)v12 + 7);
    *((void *)v11 + 8) = v17;
    *((_BYTE *)v11 + 72) = *((_BYTE *)v12 + 72);
    uint64_t v18 = v13[10];
    uint64_t v55 = v14;
    __dst = (char *)v11 + v18;
    uint64_t v19 = (char *)v12 + v18;
    uint64_t v20 = type metadata accessor for URL(0LL);
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    uint64_t v54 = v21;
    if (v22(v19, 1LL, v20))
    {
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dst, v19, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(__dst, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0LL, 1LL, v20);
    }

    uint64_t v24 = v13[11];
    uint64_t v25 = (char *)v11 + v24;
    uint64_t v26 = (char *)v12 + v24;
    if (v22((char *)v12 + v24, 1LL, v20))
    {
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v25, v26, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v25, 0LL, 1LL, v20);
    }

    uint64_t v28 = v13[12];
    uint64_t v29 = (char *)v11 + v28;
    uint64_t v30 = (char *)v12 + v28;
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    *(_OWORD *)((char *)v11 + v13[13]) = *(_OWORD *)((char *)v12 + v13[13]);
    *(void *)((char *)v11 + v13[14]) = *(void *)((char *)v12 + v13[14]);
    *(_OWORD *)((char *)v11 + v13[15]) = *(_OWORD *)((char *)v12 + v13[15]);
    *(void *)((char *)v11 + v13[16]) = *(void *)((char *)v12 + v13[16]);
    uint64_t v31 = v13[17];
    uint64_t v32 = (char *)v11 + v31;
    uint64_t v33 = (char *)v12 + v31;
    v32[16] = v33[16];
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    uint64_t v34 = v13[18];
    uint64_t v35 = (char *)v11 + v34;
    uint64_t v36 = (char *)v12 + v34;
    v35[16] = v36[16];
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v55 + 56))(v11, 0LL, 1LL, v13);
  }

  uint64_t v37 = a3[7];
  uint64_t v38 = (char *)(a1 + v37);
  int v39 = (char *)a2 + v37;
  int v40 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
  uint64_t v41 = *((void *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1LL, v40))
  {
    uint64_t v42 = sub_100004AEC(&qword_1009A6DC8);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    uint64_t v43 = type metadata accessor for URL(0LL);
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32LL);
    v44(v38, v39, v43);
    v44(&v38[v40[5]], &v39[v40[5]], v43);
    v44(&v38[v40[6]], &v39[v40[6]], v43);
    v44(&v38[v40[7]], &v39[v40[7]], v43);
    v44(&v38[v40[8]], &v39[v40[8]], v43);
    v44(&v38[v40[9]], &v39[v40[9]], v43);
    v44(&v38[v40[10]], &v39[v40[10]], v43);
    v44(&v38[v40[11]], &v39[v40[11]], v43);
    v44(&v38[v40[12]], &v39[v40[12]], v43);
    v44(&v38[v40[13]], &v39[v40[13]], v43);
    v44(&v38[v40[14]], &v39[v40[14]], v43);
    v44(&v38[v40[15]], &v39[v40[15]], v43);
    (*(void (**)(char *, void, uint64_t, int *))(v41 + 56))(v38, 0LL, 1LL, v40);
  }

  uint64_t v45 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(__int128 *)((char *)a2 + a3[8]);
  uint64_t v46 = (_OWORD *)(a1 + v45);
  uint64_t v47 = (__int128 *)((char *)a2 + v45);
  __int128 v48 = v47[1];
  *uint64_t v46 = *v47;
  v46[1] = v48;
  v46[2] = v47[2];
  uint64_t v49 = a3[10];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = (uint64_t)a2 + v49;
  uint64_t v52 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 32LL))(v50, v51, v52);
  *(void *)(a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_1002ECB24(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_100018C68(v10, type metadata accessor for AccessoryInfoResponseContent.Configuration);
      goto LABEL_7;
    }

    int v111 = a3;
    uint64_t v26 = *(void *)(v11 + 8);
    *(void *)uint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v26;
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void *)(v11 + 24);
    *(void *)(v10 + 16) = *(void *)(v11 + 16);
    *(void *)(v10 + 24) = v27;
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(v11 + 40);
    *(void *)(v10 + 32) = *(void *)(v11 + 32);
    *(void *)(v10 + 40) = v28;
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 48) = *(_WORD *)(v11 + 48);
    uint64_t v29 = *(void *)(v11 + 64);
    *(void *)(v10 + 56) = *(void *)(v11 + 56);
    *(void *)(v10 + 64) = v29;
    *(_BYTE *)(v10 + 72) = *(_BYTE *)(v11 + 72);
    uint64_t v30 = v12[10];
    uint64_t v31 = (void *)(v10 + v30);
    uint64_t v32 = (void *)(v11 + v30);
    uint64_t v33 = type metadata accessor for URL(0LL);
    __dsta = *(void **)(v33 - 8);
    uint64_t v34 = (uint64_t (*)(void *, uint64_t, uint64_t))__dsta[6];
    int v35 = v34(v31, 1LL, v33);
    int v36 = v34(v32, 1LL, v33);
    if (v35)
    {
      if (!v36)
      {
        ((void (*)(void *, const void *, uint64_t))__dsta[4])(v31, v32, v33);
        ((void (*)(void *, void, uint64_t, uint64_t))__dsta[7])(v31, 0LL, 1LL, v33);
        goto LABEL_19;
      }
    }

    else
    {
      if (!v36)
      {
        ((void (*)(void *, const void *, uint64_t))__dsta[5])(v31, v32, v33);
LABEL_19:
        uint64_t v51 = v12[11];
        uint64_t v52 = (void *)(v10 + v51);
        uint64_t v53 = (void *)(v11 + v51);
        int v54 = v34((void *)(v10 + v51), 1LL, v33);
        int v55 = v34(v53, 1LL, v33);
        if (v54)
        {
          a3 = v111;
          if (!v55)
          {
            ((void (*)(void *, const void *, uint64_t))__dsta[4])(v52, v53, v33);
            ((void (*)(void *, void, uint64_t, uint64_t))__dsta[7])(v52, 0LL, 1LL, v33);
LABEL_25:
            uint64_t v57 = v12[12];
            uint64_t v58 = v10 + v57;
            uint64_t v59 = v11 + v57;
            *(void *)uint64_t v58 = *(void *)v59;
            *(_BYTE *)(v58 + 8) = *(_BYTE *)(v59 + 8);
            uint64_t v60 = v12[13];
            uint64_t v61 = (void *)(v10 + v60);
            uint64_t v62 = (uint64_t *)(v11 + v60);
            uint64_t v64 = *v62;
            uint64_t v63 = v62[1];
            *uint64_t v61 = v64;
            v61[1] = v63;
            swift_bridgeObjectRelease();
            *(void *)(v10 + v12[14]) = *(void *)(v11 + v12[14]);
            swift_bridgeObjectRelease();
            uint64_t v65 = v12[15];
            __int128 v66 = (void *)(v10 + v65);
            uint64_t v67 = (uint64_t *)(v11 + v65);
            uint64_t v69 = *v67;
            uint64_t v68 = v67[1];
            *__int128 v66 = v69;
            v66[1] = v68;
            swift_bridgeObjectRelease();
            *(void *)(v10 + v12[16]) = *(void *)(v11 + v12[16]);
            swift_bridgeObjectRelease();
            uint64_t v70 = v12[17];
            uint64_t v71 = v10 + v70;
            uint64_t v72 = v11 + v70;
            *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
            *(_BYTE *)(v71 + 16) = *(_BYTE *)(v72 + 16);
            uint64_t v73 = v12[18];
            uint64_t v74 = v10 + v73;
            uint64_t v75 = v11 + v73;
            *(_BYTE *)(v74 + 16) = *(_BYTE *)(v75 + 16);
            *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
            goto LABEL_26;
          }
        }

        else
        {
          a3 = v111;
          if (!v55)
          {
            ((void (*)(void *, const void *, uint64_t))__dsta[5])(v52, v53, v33);
            goto LABEL_25;
          }

          ((void (*)(void *, uint64_t))__dsta[1])(v52, v33);
        }

        uint64_t v56 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64LL));
        goto LABEL_25;
      }

      ((void (*)(void *, uint64_t))__dsta[1])(v31, v33);
    }

    uint64_t v50 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v31, v32, *(void *)(*(void *)(v50 - 8) + 64LL));
    goto LABEL_19;
  }

  if (v16)
  {
LABEL_7:
    uint64_t v25 = sub_100004AEC(&qword_1009A6DD0);
    memcpy((void *)v10, (const void *)v11, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_26;
  }

  __int128 v17 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v17;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(_WORD *)(v10 + 48) = *(_WORD *)(v11 + 48);
  uint64_t v18 = *(void *)(v11 + 64);
  *(void *)(v10 + 56) = *(void *)(v11 + 56);
  *(void *)(v10 + 64) = v18;
  *(_BYTE *)(v10 + 72) = *(_BYTE *)(v11 + 72);
  uint64_t v19 = v12[10];
  __dst = (void *)(v10 + v19);
  int v110 = a3;
  uint64_t v20 = (const void *)(v11 + v19);
  uint64_t v21 = type metadata accessor for URL(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48);
  __src = (void (**)(void *, const void *, uint64_t))v22;
  if (v23(v20, 1LL, v21))
  {
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(__dst, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(__dst, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0LL, 1LL, v21);
  }

  uint64_t v37 = v12[11];
  uint64_t v38 = (void *)(v10 + v37);
  int v39 = (const void *)(v11 + v37);
  if (v23((const void *)(v11 + v37), 1LL, v21))
  {
    uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    __src[4](v38, v39, v21);
    ((void (*)(void *, void, uint64_t, uint64_t))__src[7])(v38, 0LL, 1LL, v21);
  }

  uint64_t v41 = v12[12];
  uint64_t v42 = v10 + v41;
  uint64_t v43 = v11 + v41;
  *(void *)uint64_t v42 = *(void *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  *(_OWORD *)(v10 + v12[13]) = *(_OWORD *)(v11 + v12[13]);
  *(void *)(v10 + v12[14]) = *(void *)(v11 + v12[14]);
  *(_OWORD *)(v10 + v12[15]) = *(_OWORD *)(v11 + v12[15]);
  *(void *)(v10 + v12[16]) = *(void *)(v11 + v12[16]);
  uint64_t v44 = v12[17];
  uint64_t v45 = v10 + v44;
  uint64_t v46 = v11 + v44;
  *(_BYTE *)(v45 + 16) = *(_BYTE *)(v46 + 16);
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  uint64_t v47 = v12[18];
  uint64_t v48 = v10 + v47;
  uint64_t v49 = v11 + v47;
  *(_BYTE *)(v48 + 16) = *(_BYTE *)(v49 + 16);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
  a3 = v110;
LABEL_26:
  uint64_t v76 = a3[7];
  int v77 = (char *)(a1 + v76);
  int v78 = (char *)(a2 + v76);
  uint64_t v79 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
  uint64_t v80 = *((void *)v79 - 1);
  uint64_t v81 = *(uint64_t (**)(char *, uint64_t, int *))(v80 + 48);
  int v82 = v81(v77, 1LL, v79);
  int v83 = v81(v78, 1LL, v79);
  if (v82)
  {
    if (!v83)
    {
      uint64_t v84 = type metadata accessor for URL(0LL);
      uint64_t v85 = a3;
      __int128 v86 = *(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 32LL);
      v86(v77, v78, v84);
      v86(&v77[v79[5]], &v78[v79[5]], v84);
      v86(&v77[v79[6]], &v78[v79[6]], v84);
      v86(&v77[v79[7]], &v78[v79[7]], v84);
      v86(&v77[v79[8]], &v78[v79[8]], v84);
      v86(&v77[v79[9]], &v78[v79[9]], v84);
      v86(&v77[v79[10]], &v78[v79[10]], v84);
      v86(&v77[v79[11]], &v78[v79[11]], v84);
      v86(&v77[v79[12]], &v78[v79[12]], v84);
      v86(&v77[v79[13]], &v78[v79[13]], v84);
      v86(&v77[v79[14]], &v78[v79[14]], v84);
      v86(&v77[v79[15]], &v78[v79[15]], v84);
      a3 = v85;
      (*(void (**)(char *, void, uint64_t, int *))(v80 + 56))(v77, 0LL, 1LL, v79);
      goto LABEL_32;
    }

    goto LABEL_31;
  }

  if (v83)
  {
    sub_100018C68((uint64_t)v77, type metadata accessor for AccessoryInfoResponseContent.Assets);
LABEL_31:
    uint64_t v87 = sub_100004AEC(&qword_1009A6DC8);
    memcpy(v77, v78, *(void *)(*(void *)(v87 - 8) + 64LL));
    goto LABEL_32;
  }

  uint64_t v105 = type metadata accessor for URL(0LL);
  __int128 v106 = *(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 40LL);
  v106(v77, v78, v105);
  v106(&v77[v79[5]], &v78[v79[5]], v105);
  v106(&v77[v79[6]], &v78[v79[6]], v105);
  v106(&v77[v79[7]], &v78[v79[7]], v105);
  v106(&v77[v79[8]], &v78[v79[8]], v105);
  v106(&v77[v79[9]], &v78[v79[9]], v105);
  v106(&v77[v79[10]], &v78[v79[10]], v105);
  v106(&v77[v79[11]], &v78[v79[11]], v105);
  v106(&v77[v79[12]], &v78[v79[12]], v105);
  v106(&v77[v79[13]], &v78[v79[13]], v105);
  v106(&v77[v79[14]], &v78[v79[14]], v105);
  v106(&v77[v79[15]], &v78[v79[15]], v105);
LABEL_32:
  uint64_t v88 = a3[8];
  uint64_t v89 = (void *)(a1 + v88);
  uint64_t v90 = (uint64_t *)(a2 + v88);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  *uint64_t v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = a3[9];
  uint64_t v94 = a1 + v93;
  uint64_t v95 = a2 + v93;
  if (!*(void *)(a1 + v93 + 8))
  {
LABEL_36:
    __int128 v99 = *(_OWORD *)(v95 + 16);
    *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
    *(_OWORD *)(v94 + 16) = v99;
    *(_OWORD *)(v94 + 32) = *(_OWORD *)(v95 + 32);
    goto LABEL_37;
  }

  uint64_t v96 = *(void *)(v95 + 8);
  if (!v96)
  {
    sub_1002EC69C((void *)v94);
    goto LABEL_36;
  }

  *(void *)uint64_t v94 = *(void *)v95;
  *(void *)(v94 + 8) = v96;
  swift_bridgeObjectRelease();
  uint64_t v97 = *(void *)(v95 + 24);
  *(void *)(v94 + 16) = *(void *)(v95 + 16);
  *(void *)(v94 + 24) = v97;
  swift_bridgeObjectRelease();
  uint64_t v98 = *(void *)(v95 + 40);
  *(void *)(v94 + 32) = *(void *)(v95 + 32);
  *(void *)(v94 + 40) = v98;
  swift_bridgeObjectRelease();
LABEL_37:
  uint64_t v100 = a3[10];
  uint64_t v101 = a1 + v100;
  uint64_t v102 = a2 + v100;
  uint64_t v103 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 40LL))(v101, v102, v103);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002ED420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002ED42C);
}

uint64_t sub_1002ED42C(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100004AEC(&qword_1009A6DD0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[6];
    }

    else
    {
      uint64_t v12 = sub_100004AEC(&qword_1009A6DC8);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[7];
      }

      else
      {
        uint64_t v10 = type metadata accessor for ServerStatusCode(0LL);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[10];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_1002ED4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002ED504);
}

uint64_t sub_1002ED504(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_100004AEC(&qword_1009A6DD0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[6];
    }

    else
    {
      uint64_t v12 = sub_100004AEC(&qword_1009A6DC8);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[7];
      }

      else
      {
        uint64_t v10 = type metadata accessor for ServerStatusCode(0LL);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[10];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t type metadata accessor for AccessoryInfoResponseContent(uint64_t a1)
{
  return sub_10008BED8( a1,  (uint64_t *)&unk_1009A87A8,  (uint64_t)&nominal type descriptor for AccessoryInfoResponseContent);
}

void sub_1002ED5E0(uint64_t a1)
{
  v8[0] = "H";
  v8[1] = &unk_1007FA0D8;
  sub_10009361C(319LL, &qword_1009A87B8, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  if (v3 <= 0x3F)
  {
    v8[2] = *(void *)(v2 - 8) + 64LL;
    sub_10009361C( 319LL,  (unint64_t *)&unk_1009A87C0,  type metadata accessor for AccessoryInfoResponseContent.Assets);
    if (v5 <= 0x3F)
    {
      v8[3] = *(void *)(v4 - 8) + 64LL;
      v8[4] = &unk_1007FA0F0;
      v8[5] = &unk_1007FA108;
      uint64_t v6 = type metadata accessor for ServerStatusCode(319LL);
      if (v7 <= 0x3F)
      {
        v8[6] = *(void *)(v6 - 8) + 64LL;
        v8[7] = &unk_1007FA120;
        swift_initStructMetadata(a1, 256LL, 8LL, v8, a1 + 16);
      }
    }
  }

uint64_t destroy for AccessoryInfoResponseContent.PublicKeys(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *initializeWithCopy for AccessoryInfoResponseContent.PublicKeys(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for AccessoryInfoResponseContent.PublicKeys(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *assignWithTake for AccessoryInfoResponseContent.PublicKeys(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoResponseContent.PublicKeys(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoResponseContent.PublicKeys( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.PublicKeys()
{
  return &type metadata for AccessoryInfoResponseContent.PublicKeys;
}

uint64_t *sub_1002ED8D8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v8((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
    v8((uint64_t *)((char *)a1 + a3[8]), (uint64_t *)((char *)a2 + a3[8]), v7);
    v8((uint64_t *)((char *)a1 + a3[9]), (uint64_t *)((char *)a2 + a3[9]), v7);
    v8((uint64_t *)((char *)a1 + a3[10]), (uint64_t *)((char *)a2 + a3[10]), v7);
    v8((uint64_t *)((char *)a1 + a3[11]), (uint64_t *)((char *)a2 + a3[11]), v7);
    v8((uint64_t *)((char *)a1 + a3[12]), (uint64_t *)((char *)a2 + a3[12]), v7);
    v8((uint64_t *)((char *)a1 + a3[13]), (uint64_t *)((char *)a2 + a3[13]), v7);
    v8((uint64_t *)((char *)a1 + a3[14]), (uint64_t *)((char *)a2 + a3[14]), v7);
    v8((uint64_t *)((char *)a1 + a3[15]), (uint64_t *)((char *)a2 + a3[15]), v7);
  }

  return a1;
}

uint64_t sub_1002EDA3C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v6(a1, v4);
  v6(a1 + a2[5], v4);
  v6(a1 + a2[6], v4);
  v6(a1 + a2[7], v4);
  v6(a1 + a2[8], v4);
  v6(a1 + a2[9], v4);
  v6(a1 + a2[10], v4);
  v6(a1 + a2[11], v4);
  v6(a1 + a2[12], v4);
  v6(a1 + a2[13], v4);
  v6(a1 + a2[14], v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + a2[15], v4);
}

uint64_t sub_1002EDB6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1002EDCA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1002EDDDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1002EDF14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1002EE04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002EE058);
}

uint64_t sub_1002EE058(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_1002EE094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002EE0A0);
}

uint64_t sub_1002EE0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_1002EE0E0(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    v4[4] = v4[0];
    v4[5] = v4[0];
    v4[6] = v4[0];
    v4[7] = v4[0];
    v4[8] = v4[0];
    v4[9] = v4[0];
    v4[10] = v4[0];
    v4[11] = v4[0];
    swift_initStructMetadata(a1, 256LL, 12LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_1002EE15C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[5];
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    uint64_t v11 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v11;
    uint64_t v12 = a3[10];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v10;
    uint64_t v15 = type metadata accessor for URL(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = v7;
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v8);
    __n128 v19 = swift_bridgeObjectRetain(v10);
    if (v18(v14, 1LL, v15, v19))
    {
      uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v22 = a3[11];
    uint64_t v23 = (char *)v4 + v22;
    uint64_t v24 = (char *)a2 + v22;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v18)((char *)a2 + v22, 1LL, v15))
    {
      uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v23, v24, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v23, 0LL, 1LL, v15);
    }

    uint64_t v26 = a3[12];
    uint64_t v27 = a3[13];
    uint64_t v28 = (char *)v4 + v26;
    uint64_t v29 = (uint64_t)a2 + v26;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = *(_BYTE *)(v29 + 8);
    uint64_t v30 = (void *)((char *)v4 + v27);
    uint64_t v31 = (uint64_t *)((char *)a2 + v27);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = a3[14];
    uint64_t v34 = a3[15];
    uint64_t v35 = *(uint64_t *)((char *)a2 + v33);
    *(void *)((char *)v4 + v33) = v35;
    int v36 = (void *)((char *)v4 + v34);
    uint64_t v37 = (uint64_t *)((char *)a2 + v34);
    uint64_t v38 = v37[1];
    *int v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = a3[16];
    uint64_t v40 = a3[17];
    uint64_t v41 = *(uint64_t *)((char *)a2 + v39);
    *(void *)((char *)v4 + v39) = v41;
    uint64_t v42 = (char *)v4 + v40;
    uint64_t v43 = (uint64_t)a2 + v40;
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    v42[16] = *(_BYTE *)(v43 + 16);
    uint64_t v44 = a3[18];
    uint64_t v45 = (char *)v4 + v44;
    uint64_t v46 = (uint64_t)a2 + v44;
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    v45[16] = *(_BYTE *)(v46 + 16);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v41);
  }

  return v4;
}

uint64_t sub_1002EE3B4(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[10];
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (char *)a1 + a2[11];
  if (!v7(v8, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[14]));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[15] + 8));
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[16]));
}

uint64_t sub_1002EE49C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = a3[10];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v6;
  uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v15 + 48);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v7);
  __n128 v18 = swift_bridgeObjectRetain(v9);
  if (v17(v13, 1LL, v14, v18))
  {
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v17)(a2 + v20, 1LL, v14))
  {
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v21, v22, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v21, 0LL, 1LL, v14);
  }

  uint64_t v24 = a3[12];
  uint64_t v25 = a3[13];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(void *)uint64_t v26 = *(void *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  uint64_t v28 = (void *)(a1 + v25);
  uint64_t v29 = (void *)(a2 + v25);
  uint64_t v30 = v29[1];
  void *v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[14];
  uint64_t v32 = a3[15];
  uint64_t v33 = *(void *)(a2 + v31);
  *(void *)(a1 + v31) = v33;
  uint64_t v34 = (void *)(a1 + v32);
  uint64_t v35 = (void *)(a2 + v32);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  uint64_t v37 = a3[16];
  uint64_t v38 = a3[17];
  uint64_t v39 = *(void *)(a2 + v37);
  *(void *)(a1 + v37) = v39;
  uint64_t v40 = a1 + v38;
  uint64_t v41 = a2 + v38;
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_BYTE *)(v40 + 16) = *(_BYTE *)(v41 + 16);
  uint64_t v42 = a3[18];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
  *(_BYTE *)(v43 + 16) = *(_BYTE *)(v44 + 16);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v39);
  return a1;
}

uint64_t sub_1002EE6C8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v9;
  uint64_t v10 = a3[10];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = a3[11];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  int v22 = v15((void *)(a1 + v19), 1LL, v13);
  int v23 = v15(v21, 1LL, v13);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v20, v21, v13);
      goto LABEL_13;
    }

    (*(void (**)(void *, uint64_t))(v14 + 8))(v20, v13);
    goto LABEL_12;
  }

  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v20, v21, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v20, 0LL, 1LL, v13);
LABEL_13:
  uint64_t v25 = a3[12];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v28 = *v27;
  *(_BYTE *)(v26 + 8) = *((_BYTE *)v27 + 8);
  *(void *)uint64_t v26 = v28;
  uint64_t v29 = a3[13];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  *uint64_t v30 = *v31;
  uint64_t v32 = v31[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[14];
  uint64_t v34 = *(void *)(a2 + v33);
  *(void *)(a1 + v33) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[15];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  *uint64_t v36 = *v37;
  uint64_t v38 = v37[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[16];
  uint64_t v40 = *(void *)(a2 + v39);
  *(void *)(a1 + v39) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[17];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = (__int128 *)(a2 + v41);
  __int128 v44 = *v43;
  *(_BYTE *)(v42 + 16) = *((_BYTE *)v43 + 16);
  *(_OWORD *)uint64_t v42 = v44;
  uint64_t v45 = a3[18];
  uint64_t v46 = a1 + v45;
  uint64_t v47 = (__int128 *)(a2 + v45);
  __int128 v48 = *v47;
  *(_BYTE *)(v46 + 16) = *((_BYTE *)v47 + 16);
  *(_OWORD *)uint64_t v46 = v48;
  return a1;
}

uint64_t sub_1002EE9F0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v9 = a3[10];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1LL, v12))
  {
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
  }

  uint64_t v16 = a3[11];
  int v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  if (v14((const void *)(a2 + v16), 1LL, v12))
  {
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v17, 0LL, 1LL, v12);
  }

  uint64_t v20 = a3[12];
  uint64_t v21 = a3[13];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  uint64_t v24 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  uint64_t v25 = a3[17];
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  uint64_t v28 = a3[18];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *(_BYTE *)(v29 + 16) = *(_BYTE *)(v30 + 16);
  return a1;
}

uint64_t sub_1002EEBC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v10 = a3[10];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = a3[11];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  int v22 = v15((void *)(a1 + v19), 1LL, v13);
  int v23 = v15(v21, 1LL, v13);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v20, v21, v13);
      goto LABEL_13;
    }

    (*(void (**)(void *, uint64_t))(v14 + 8))(v20, v13);
    goto LABEL_12;
  }

  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v20, v21, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v20, 0LL, 1LL, v13);
LABEL_13:
  uint64_t v25 = a3[12];
  uint64_t v26 = a3[13];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  uint64_t v29 = (void *)(a1 + v26);
  uint64_t v30 = (uint64_t *)(a2 + v26);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[15];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[17];
  uint64_t v39 = a3[18];
  uint64_t v40 = a1 + v38;
  uint64_t v41 = a2 + v38;
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_BYTE *)(v40 + 16) = *(_BYTE *)(v41 + 16);
  uint64_t v42 = a1 + v39;
  uint64_t v43 = a2 + v39;
  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
  *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
  return a1;
}

uint64_t sub_1002EEE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002EEE88);
}

uint64_t sub_1002EEE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 40),  a2,  v8);
  }

uint64_t sub_1002EEF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002EEF14);
}

uint64_t sub_1002EEF14(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 40),  a2,  a2,  v7);
  }

  return result;
}

void sub_1002EEF8C(uint64_t a1)
{
  v4[0] = &unk_1007FA0F0;
  v4[1] = &unk_1007FA158;
  v4[2] = &unk_1007FA158;
  v4[3] = &unk_1007FA170;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = &unk_1007FA188;
  sub_10009361C( 319LL,  (unint64_t *)&qword_1009A8928,  (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = &unk_1007FA188;
    uint64_t v8 = &unk_1007FA158;
    uint64_t v9 = &unk_1007FA120;
    uint64_t v10 = &unk_1007FA158;
    uint64_t v11 = &unk_1007FA120;
    uint64_t v12 = &unk_1007FA1A0;
    uint64_t v13 = &unk_1007FA1A0;
    swift_initStructMetadata(a1, 256LL, 15LL, v4, a1 + 16);
  }

uint64_t sub_1002EF064@<X0>(uint64_t a1@<X8>)
{
  uint64_t v76 = a1;
  uint64_t v1 = sub_100004AEC(&qword_1009A6DC8);
  __chkstk_darwin(v1);
  uint64_t v75 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v4 = __chkstk_darwin(v3);
  int v77 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  int v78 = (char *)&v74 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v80 = (char *)&v74 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v81 = (char *)&v74 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  int v82 = (char *)&v74 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  int v83 = (char *)&v74 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v84 = (char *)&v74 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v85 = (char *)&v74 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  __int128 v86 = (char *)&v74 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v87 = (char *)&v74 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v88 = (char *)&v74 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v89 = (char *)&v74 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v74 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v79 = (char *)&v74 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v74 - v34;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v74 - v36;
  uint64_t v38 = sub_100004AEC(&qword_1009A6DD0);
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v74 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URL.init(string:)(0xD000000000000011LL, 0x800000010085D110LL);
  uint64_t v41 = type metadata accessor for URL(0LL);
  uint64_t v42 = *(void **)(v41 - 8);
  uint64_t v43 = (uint64_t (*)(char *, uint64_t, uint64_t))v42[6];
  uint64_t result = v43(v35, 1LL, v41);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v45 = (void (*)(char *, char *, uint64_t))v42[4];
  v45(v37, v35, v41);
  uint64_t v46 = (void (*)(char *, void, uint64_t, uint64_t))v42[7];
  v46(v37, 0LL, 1LL, v41);
  URL.init(string:)(0xD000000000000011LL, 0x800000010085D110LL);
  uint64_t result = v43(v30, 1LL, v41);
  if ((_DWORD)result == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v47 = (uint64_t)v79;
  v45(v79, v30, v41);
  v46((char *)v47, 0LL, 1LL, v41);
  *(_OWORD *)uint64_t v40 = xmmword_1007F9F40;
  *((void *)v40 + 2) = 0x6E6F796E6143LL;
  *((void *)v40 + 3) = 0xE600000000000000LL;
  strcpy(v40 + 32, "Endurace CF7");
  v40[45] = 0;
  *((_WORD *)v40 + 23) = -5120;
  *((_WORD *)v40 + 24) = 0;
  *(_OWORD *)(v40 + 56) = xmmword_1007F9F50;
  v40[72] = 0;
  __int128 v48 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  sub_100015750((uint64_t)v37, (uint64_t)&v40[v48[10]], (uint64_t *)&unk_1009A34D0);
  sub_100015750(v47, (uint64_t)&v40[v48[11]], (uint64_t *)&unk_1009A34D0);
  uint64_t v49 = &v40[v48[12]];
  *(void *)uint64_t v49 = 0LL;
  v49[8] = 0;
  uint64_t v50 = &v40[v48[13]];
  *(void *)uint64_t v50 = 0xD000000000000012LL;
  *((void *)v50 + 1) = 0x800000010085D130LL;
  *(void *)&v40[v48[14]] = &off_100933408;
  uint64_t v51 = &v40[v48[15]];
  *(void *)uint64_t v51 = 0xD000000000000010LL;
  *((void *)v51 + 1) = 0x800000010085D150LL;
  *(void *)&v40[v48[16]] = &off_100933438;
  uint64_t v52 = &v40[v48[17]];
  *(void *)uint64_t v52 = 0LL;
  *((void *)v52 + 1) = 0LL;
  v52[16] = 1;
  uint64_t v53 = &v40[v48[18]];
  *(void *)uint64_t v53 = 0LL;
  *((void *)v53 + 1) = 0LL;
  v53[16] = 1;
  (*(void (**)(char *, void, uint64_t, int *))(*((void *)v48 - 1) + 56LL))(v40, 0LL, 1LL, v48);
  int v54 = v89;
  URL.init(string:)(0xD00000000000005FLL, 0x800000010085D170LL);
  uint64_t result = v43(v54, 1LL, v41);
  int v55 = v80;
  if ((_DWORD)result == 1)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v56 = v88;
  URL.init(string:)(0xD00000000000005CLL, 0x800000010085D1D0LL);
  uint64_t result = v43(v56, 1LL, v41);
  uint64_t v57 = v78;
  if ((_DWORD)result == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v58 = v87;
  URL.init(string:)(0xD000000000000063LL, 0x800000010085D230LL);
  uint64_t result = v43(v58, 1LL, v41);
  if ((_DWORD)result == 1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v59 = v86;
  URL.init(string:)(0xD000000000000060LL, 0x800000010085D2A0LL);
  uint64_t result = v43(v59, 1LL, v41);
  if ((_DWORD)result == 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v60 = v85;
  URL.init(string:)(0xD000000000000063LL, 0x800000010085D310LL);
  uint64_t result = v43(v60, 1LL, v41);
  if ((_DWORD)result == 1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v61 = v84;
  URL.init(string:)(0xD000000000000060LL, 0x800000010085D380LL);
  uint64_t result = v43(v61, 1LL, v41);
  if ((_DWORD)result == 1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v62 = v83;
  URL.init(string:)(0xD000000000000062LL, 0x800000010085D3F0LL);
  uint64_t result = v43(v62, 1LL, v41);
  if ((_DWORD)result == 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v63 = v82;
  URL.init(string:)(0xD000000000000062LL, 0x800000010085D3F0LL);
  uint64_t result = v43(v63, 1LL, v41);
  if ((_DWORD)result == 1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v64 = v81;
  URL.init(string:)(0xD000000000000062LL, 0x800000010085D3F0LL);
  uint64_t result = v43(v64, 1LL, v41);
  if ((_DWORD)result == 1)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  URL.init(string:)(0xD000000000000062LL, 0x800000010085D3F0LL);
  uint64_t result = v43(v55, 1LL, v41);
  if ((_DWORD)result == 1)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  URL.init(string:)(0xD000000000000062LL, 0x800000010085D3F0LL);
  uint64_t result = v43(v57, 1LL, v41);
  if ((_DWORD)result == 1)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v65 = v77;
  URL.init(string:)(0xD000000000000062LL, 0x800000010085D3F0LL);
  uint64_t result = v43(v65, 1LL, v41);
  if ((_DWORD)result != 1)
  {
    uint64_t v66 = (uint64_t)v75;
    v45(v75, v89, v41);
    uint64_t v67 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
    v45((char *)(v66 + v67[5]), v88, v41);
    v45((char *)(v66 + v67[6]), v87, v41);
    v45((char *)(v66 + v67[7]), v86, v41);
    v45((char *)(v66 + v67[8]), v85, v41);
    v45((char *)(v66 + v67[9]), v84, v41);
    v45((char *)(v66 + v67[10]), v83, v41);
    v45((char *)(v66 + v67[11]), v82, v41);
    v45((char *)(v66 + v67[12]), v81, v41);
    v45((char *)(v66 + v67[13]), v55, v41);
    v45((char *)(v66 + v67[14]), v57, v41);
    v45((char *)(v66 + v67[15]), v65, v41);
    (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v67 - 1) + 56LL))(v66, 0LL, 1LL, v67);
    uint64_t v68 = (int *)type metadata accessor for AccessoryInfoResponseContent(0LL);
    uint64_t v69 = v76;
    uint64_t v70 = v76 + v68[10];
    uint64_t v71 = enum case for ServerStatusCode.success(_:);
    uint64_t v72 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 104LL))(v70, v71, v72);
    *(void *)uint64_t v69 = 0LL;
    *(_BYTE *)(v69 + 8) = 1;
    *(void *)(v69 + 16) = 0x64695F796D6D7564LL;
    *(void *)(v69 + 24) = 0xE800000000000000LL;
    *(_BYTE *)(v69 + 32) = 1;
    *(_DWORD *)(v69 + 33) = 33686018;
    *(_DWORD *)(v69 + 36) = 33686018;
    *(_OWORD *)(v69 + 40) = 0u;
    *(_OWORD *)(v69 + 56) = 0u;
    *(void *)(v69 + 72) = 0x101010101010101LL;
    *(_DWORD *)(v69 + 80) = 16843009;
    sub_100015750((uint64_t)v40, v69 + v68[6], &qword_1009A6DD0);
    uint64_t result = sub_100015750(v66, v69 + v68[7], &qword_1009A6DC8);
    *(_OWORD *)(v69 + v68[8]) = xmmword_1007F9F60;
    uint64_t v73 = (_OWORD *)(v69 + v68[9]);
    v73[1] = 0u;
    v73[2] = 0u;
    *uint64_t v73 = 0u;
    *(void *)(v69 + v68[11]) = 0LL;
    return result;
  }

uint64_t sub_1002EFA14(unint64_t a1, unsigned int a2)
{
  unint64_t v2 = a1 & 0x10000;
  if ((a1 & 1) != 0)
  {
    BOOL v4 = v2 == 0;
    if ((a1 & 0x100) == 0)
    {
      uint64_t v3 = 5LL;
      if (v4) {
        uint64_t v3 = 1LL;
      }
      if ((a1 & 0x1000000) != 0) {
        goto LABEL_16;
      }
      goto LABEL_17;
    }

    uint64_t v3 = 7LL;
    uint64_t v5 = 3LL;
  }

  else
  {
    if ((a1 & 0x100) == 0)
    {
      uint64_t v3 = v2 >> 14;
      if ((a1 & 0x1000000) == 0) {
        goto LABEL_17;
      }
LABEL_16:
      v3 |= 8uLL;
      goto LABEL_17;
    }

    BOOL v4 = v2 == 0;
    uint64_t v3 = 6LL;
    uint64_t v5 = 2LL;
  }

  if (v4) {
    uint64_t v3 = v5;
  }
  if ((a1 & 0x1000000) != 0) {
    goto LABEL_16;
  }
LABEL_17:
  int8x16_t v6 = (int8x16_t)vdupq_n_s64(a1);
  int8x16_t v7 = vandq_s8( vbicq_s8( (int8x16_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)xmmword_1007F9F90),  (int8x16_t)vceqq_s64((int64x2_t)vandq_s8(v6, (int8x16_t)xmmword_1007F9F80), (int64x2_t)xmmword_1007F9FB0)),  (int8x16_t)xmmword_1007F9FE0);
  int8x8_t v8 = (int8x8_t)vdup_n_s32(a2);
  int8x16_t v9 = vandq_s8( vbicq_s8( (int8x16_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)xmmword_1007F9FA0),  (int8x16_t)vceqq_s64((int64x2_t)vandq_s8(v6, (int8x16_t)xmmword_1007F9F70), (int64x2_t)xmmword_1007F9FC0)),  (int8x16_t)xmmword_1007F9FD0);
  int32x2_t v10 = (int32x2_t)vand_s8( vbic_s8( (int8x8_t)vshl_u32((uint32x2_t)v8, (uint32x2_t)0x30000000ALL),  (int8x8_t)vceq_s32( (int32x2_t)vand_s8(v8, (int8x8_t)0xFF00000000FFLL),  (int32x2_t)0x20000000002LL)),  (int8x8_t)0x80000000400LL);
  unsigned __int32 v11 = vorr_s8((int8x8_t)v10, (int8x8_t)vdup_lane_s32(v10, 1)).u32[0];
  if ((a2 & 0xFF0000) == 0x20000) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = (a2 >> 7) & 0x200;
  }
  LODWORD(v13) = (a2 >> 12) & 0x1000;
  if (HIBYTE(a2) == 2) {
    uint64_t v13 = 0LL;
  }
  else {
    uint64_t v13 = v13;
  }
  int8x16_t v14 = vorrq_s8(v9, v7);
  return *(void *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)) | v12 | v3 | v13 | v11;
}

uint64_t sub_1002EFB60(void *a1, double a2, double a3)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A8BA0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int32x2_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v13 = sub_1002FB2FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for Coordinates.CodingKeys,  &type metadata for Coordinates.CodingKeys,  v13,  v11,  v12);
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v17, v7, a2);
  if (!v3)
  {
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v16, v7, a3);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int sub_1002EFC7C(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v4 = 0LL;
  }
  Hasher._combine(_:)(v4);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v5 = 0LL;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_1002EFCE8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A8C00);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  unint64_t v10 = sub_1002FB784();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoResponse.CodingKeys,  &type metadata for AccessoryInfoResponse.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100004AEC(&qword_1009A8BE8);
  uint64_t v12 = sub_1002FB7C8( &qword_1009A8C08,  &qword_1009A8C10,  (uint64_t)&unk_1007FA470,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_1002EFE0C(uint64_t a1)
{
  uint64_t v2 = v1;
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v4 = *(void *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }

  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  int v7 = *(unsigned __int8 *)(v2 + 32);
  if (v7 == 2)
  {
    Swift::UInt8 v8 = 0;
  }

  else
  {
    Swift::UInt8 v8 = v7 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v8);
  int v9 = *(unsigned __int8 *)(v2 + 33);
  if (v9 == 2)
  {
    Swift::UInt8 v10 = 0;
  }

  else
  {
    Swift::UInt8 v10 = v9 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v10);
  int v11 = *(unsigned __int8 *)(v2 + 34);
  if (v11 == 2)
  {
    Swift::UInt8 v12 = 0;
  }

  else
  {
    Swift::UInt8 v12 = v11 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  int v13 = *(unsigned __int8 *)(v2 + 35);
  if (v13 == 2)
  {
    Swift::UInt8 v14 = 0;
  }

  else
  {
    Swift::UInt8 v14 = v13 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v14);
  int v15 = *(unsigned __int8 *)(v2 + 36);
  if (v15 == 2)
  {
    Swift::UInt8 v16 = 0;
  }

  else
  {
    Swift::UInt8 v16 = v15 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v16);
  int v17 = *(unsigned __int8 *)(v2 + 37);
  if (v17 == 2)
  {
    Swift::UInt8 v18 = 0;
  }

  else
  {
    Swift::UInt8 v18 = v17 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v18);
  int v19 = *(unsigned __int8 *)(v2 + 38);
  if (v19 == 2)
  {
    Swift::UInt8 v20 = 0;
  }

  else
  {
    Swift::UInt8 v20 = v19 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v20);
  int v21 = *(unsigned __int8 *)(v2 + 39);
  if (v21 == 2)
  {
    Swift::UInt8 v22 = 0;
  }

  else
  {
    Swift::UInt8 v22 = v21 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v22);
  uint64_t v23 = *(void *)(v2 + 48);
  if (v23)
  {
    uint64_t v24 = *(void *)(v2 + 40);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(a1, v24, v23);
    swift_bridgeObjectRelease(v23);
    uint64_t v25 = *(void *)(v2 + 64);
    if (v25)
    {
LABEL_30:
      uint64_t v26 = *(void *)(v2 + 56);
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v25);
      String.hash(into:)(a1, v26, v25);
      swift_bridgeObjectRelease(v25);
      return;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v25 = *(void *)(v2 + 64);
    if (v25) {
      goto LABEL_30;
    }
  }

  Hasher._combine(_:)(0);
}

uint64_t sub_1002F0050(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1002F0088 + 4 * byte_1007FA010[a1]))( 0xD000000000000012LL,  0x800000010085D610LL);
}

uint64_t sub_1002F0088()
{
  return 0x7250796D646E6966LL;
}

  ;
}

uint64_t sub_1002F013C()
{
  return 0x5565636166727573LL;
}

uint64_t sub_1002F015C()
{
  return 0x496B726F7774656ELL;
}

uint64_t sub_1002F0178()
{
  return 0x70756B6F6F4C6E73LL;
}

uint64_t sub_1002F0198(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A8BC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt8 v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002FB6FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessorySoftwareInfo.CodingKeys,  &type metadata for AccessorySoftwareInfo.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = *((unsigned __int8 *)v3 + 8);
  char v37 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v37, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v36 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v36, v5);
    uint64_t v16 = *((unsigned __int8 *)v3 + 32);
    char v35 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, &v35, v5);
    uint64_t v17 = *((unsigned __int8 *)v3 + 33);
    char v34 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, &v34, v5);
    uint64_t v18 = *((unsigned __int8 *)v3 + 34);
    char v33 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, &v33, v5);
    uint64_t v19 = *((unsigned __int8 *)v3 + 35);
    char v32 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v32, v5);
    uint64_t v20 = *((unsigned __int8 *)v3 + 36);
    char v31 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, &v31, v5);
    uint64_t v21 = *((unsigned __int8 *)v3 + 37);
    char v30 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, &v30, v5);
    uint64_t v22 = *((unsigned __int8 *)v3 + 38);
    HIBYTE(v29) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, (char *)&v29 + 7, v5);
    uint64_t v23 = *((unsigned __int8 *)v3 + 39);
    BYTE6(v29) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, (char *)&v29 + 6, v5);
    uint64_t v24 = v3[5];
    uint64_t v25 = v3[6];
    BYTE5(v29) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, (char *)&v29 + 5, v5);
    uint64_t v26 = v3[7];
    uint64_t v27 = v3[8];
    BYTE4(v29) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, (char *)&v29 + 4, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1002F0440(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if ((a2 & 0xFF00000000LL) == 0x200000000LL)
  {
    LOBYTE(v5) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v5 = HIDWORD(a2) & 1;
  }

  Hasher._combine(_:)(v5);
  if ((a2 & 0xFF0000000000LL) == 0x20000000000LL)
  {
    LOBYTE(v6) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v6 = (a2 >> 40) & 1;
  }

  Hasher._combine(_:)(v6);
  if ((a2 & 0xFF000000000000LL) == 0x2000000000000LL)
  {
    LOBYTE(v7) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v7 = HIWORD(a2) & 1;
  }

  Hasher._combine(_:)(v7);
  if (HIBYTE(a2) == 2)
  {
    LOBYTE(v8) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v8 = HIBYTE(a2) & 1;
  }

  Hasher._combine(_:)(v8);
  if (a3 == 2)
  {
    Swift::UInt8 v9 = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    Swift::UInt8 v9 = a3 & 1;
  }

  Hasher._combine(_:)(v9);
  if ((a3 & 0xFF00) == 0x200)
  {
    LOBYTE(v10) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    int v10 = (a3 >> 8) & 1;
  }

  Hasher._combine(_:)(v10);
  if ((a3 & 0xFF0000) == 0x20000)
  {
    LOBYTE(v11) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    int v11 = HIWORD(a3) & 1;
  }

  Hasher._combine(_:)(v11);
  if (HIBYTE(a3) == 2)
  {
    LOBYTE(v12) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    int v12 = HIBYTE(a3) & 1;
  }

  Hasher._combine(_:)(v12);
}

uint64_t sub_1002F05B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002F05F4 + 4 * byte_1007FA01C[a1]))( 0x6E756F5379616C70LL,  0xE900000000000064LL);
}

uint64_t sub_1002F05F4()
{
  return 0x6C656363417475LL;
}

uint64_t sub_1002F060C()
{
  return 0x756B6F6F4C63666ELL;
}

uint64_t sub_1002F0634()
{
  return 0x65646F4D74736F6CLL;
}

uint64_t sub_1002F064C()
{
  return 0x6857796669746F6ELL;
}

uint64_t sub_1002F0670()
{
  return 0x7449656D616E6572LL;
}

uint64_t sub_1002F068C()
{
  return 0x65676E6172LL;
}

uint64_t sub_1002F06A0()
{
  return 0x6E69646E69467462LL;
}

unint64_t sub_1002F06B8()
{
  return 0xD000000000000014LL;
}

uint64_t sub_1002F06D4()
{
  return 1886544245LL;
}

unint64_t sub_1002F06E4()
{
  return 0xD000000000000018LL;
}

uint64_t sub_1002F0704(void *a1, unint64_t a2, unsigned int a3)
{
  unsigned int v17 = a3;
  uint64_t v6 = a2 & 1;
  uint64_t v7 = sub_100004AEC(&qword_1009A8BD0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v13 = sub_1002FB740();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoCapabilities.CodingKeys,  &type metadata for AccessoryInfoCapabilities.CodingKeys,  v13,  v12,  v11);
  char v29 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v6, &v29, v7);
  if (!v3)
  {
    uint64_t v14 = v17;
    char v28 = 1;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 8) & 1, &v28, v7);
    char v27 = 2;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 16) & 1, &v27, v7);
    char v26 = 3;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 24) & 1, &v26, v7);
    char v25 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(HIDWORD(a2), &v25, v7);
    char v24 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2 >> 40, &v24, v7);
    char v23 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(HIWORD(a2), &v23, v7);
    char v22 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(HIBYTE(a2), &v22, v7);
    char v21 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, &v21, v7);
    char v20 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14 >> 8, &v20, v7);
    char v19 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(WORD1(v14), &v19, v7);
    char v18 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(BYTE3(v14), &v18, v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1002F09E4()
{
  if (*v0) {
    return 121LL;
  }
  else {
    return 120LL;
  }
}

uint64_t sub_1002F09FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002F7B14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002F0A20(uint64_t a1)
{
  unint64_t v2 = sub_1002FB2FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F0A48(uint64_t a1)
{
  unint64_t v2 = sub_1002FB2FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1002F0A70(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = sub_1002F7BD0(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
  }

uint64_t sub_1002F0A98(void *a1)
{
  return sub_1002EFB60(a1, *v1, v1[1]);
}

Swift::Int sub_1002F0AB0()
{
  return sub_1002EFC7C(*v0, v0[1]);
}

void sub_1002F0AB8()
{
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0LL;
  }
  Hasher._combine(_:)(v3);
}

Swift::Int sub_1002F0AFC(uint64_t a1)
{
  Swift::UInt64 v2 = *v1;
  Swift::UInt64 v3 = v1[1];
  Hasher.init(_seed:)(v7, a1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0LL;
  }
  Hasher._combine(_:)(v4);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v3;
  }
  else {
    Swift::UInt64 v5 = 0LL;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

BOOL sub_1002F0B58(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_1002F0B84()
{
  return 0x73746375646F7270LL;
}

uint64_t sub_1002F0B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x73746375646F7270LL && a2 == 0xE800000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE800000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746375646F7270LL, 0xE800000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1002F0C30(uint64_t a1)
{
  unint64_t v2 = sub_1002FB784();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F0C58(uint64_t a1)
{
  unint64_t v2 = sub_1002FB784();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1002F0C80@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002F7D28(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002F0CA8(void *a1)
{
  return sub_1002EFCE8(a1, *v1);
}

uint64_t sub_1002F0CC0()
{
  return sub_1002F0050(*v0);
}

uint64_t sub_1002F0CC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002F7E74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002F0CEC(uint64_t a1)
{
  unint64_t v2 = sub_1002FB6FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F0D14(uint64_t a1)
{
  unint64_t v2 = sub_1002FB6FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1002F0D3C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t sub_1002F0D8C(void *a1)
{
  return sub_1002F0198(a1);
}

Swift::Int sub_1002F0DA0()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F0DE0(uint64_t a1)
{
  return Hasher._finalize()();
}

BOOL sub_1002F0E18(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  __int128 v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_1002F5BB4((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_1002F0E70()
{
  return sub_1002F05B8(*v0);
}

uint64_t sub_1002F0E78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002F8774(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002F0E9C(uint64_t a1)
{
  unint64_t v2 = sub_1002FB740();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F0EC4(uint64_t a1)
{
  unint64_t v2 = sub_1002FB740();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1002F0EEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1002F8C64(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_BYTE *)(a2 + 1) = BYTE1(result) & 1;
    *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
    *(_BYTE *)(a2 + 3) = BYTE3(result) & 1;
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_BYTE *)(a2 + 5) = BYTE5(result);
    *(_BYTE *)(a2 + 6) = BYTE6(result);
    *(_BYTE *)(a2 + 7) = HIBYTE(result);
    *(_DWORD *)(a2 + 8) = v5;
  }

  return result;
}

uint64_t sub_1002F0F6C(void *a1)
{
  uint64_t v2 = 256LL;
  if (!v1[1]) {
    uint64_t v2 = 0LL;
  }
  uint64_t v3 = v2 | *v1;
  uint64_t v4 = 0x10000LL;
  if (!v1[2]) {
    uint64_t v4 = 0LL;
  }
  uint64_t v5 = 0x1000000LL;
  if (!v1[3]) {
    uint64_t v5 = 0LL;
  }
  return sub_1002F0704( a1,  v3 | v4 | v5 | ((unint64_t)v1[4] << 32) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[7] << 56),  *((_DWORD *)v1 + 2));
}

Swift::Int sub_1002F0FE4()
{
  uint64_t v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  int v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  unsigned int v8 = *((_DWORD *)v0 + 2);
  uint64_t v9 = v0[7];
  Hasher.init(_seed:)(v15, 0LL);
  uint64_t v10 = 256LL;
  if (!v2) {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = v10 | v1;
  uint64_t v12 = 0x10000LL;
  if (!v3) {
    uint64_t v12 = 0LL;
  }
  uint64_t v13 = 0x1000000LL;
  if (!v4) {
    uint64_t v13 = 0LL;
  }
  sub_1002F0440((uint64_t)v15, v11 | v12 | v13 | (v5 << 32) | (v6 << 40) | (v7 << 48) | (v9 << 56), v8);
  return Hasher._finalize()();
}

void sub_1002F10A8(uint64_t a1)
{
  uint64_t v2 = 256LL;
  if (!v1[1]) {
    uint64_t v2 = 0LL;
  }
  uint64_t v3 = v2 | *v1;
  uint64_t v4 = 0x10000LL;
  if (!v1[2]) {
    uint64_t v4 = 0LL;
  }
  uint64_t v5 = 0x1000000LL;
  if (!v1[3]) {
    uint64_t v5 = 0LL;
  }
  sub_1002F0440( a1,  v3 | v4 | v5 | ((unint64_t)v1[4] << 32) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[7] << 56),  *((_DWORD *)v1 + 2));
}

Swift::Int sub_1002F1110(uint64_t a1)
{
  uint64_t v2 = *v1;
  int v3 = v1[1];
  int v4 = v1[2];
  int v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  unsigned int v9 = *((_DWORD *)v1 + 2);
  uint64_t v10 = v1[7];
  Hasher.init(_seed:)(v16, a1);
  uint64_t v11 = 256LL;
  if (!v3) {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = v11 | v2;
  uint64_t v13 = 0x10000LL;
  if (!v4) {
    uint64_t v13 = 0LL;
  }
  uint64_t v14 = 0x1000000LL;
  if (!v5) {
    uint64_t v14 = 0LL;
  }
  sub_1002F0440((uint64_t)v16, v12 | v13 | v14 | (v6 << 32) | (v7 << 40) | (v8 << 48) | (v10 << 56), v9);
  return Hasher._finalize()();
}

uint64_t sub_1002F11D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (a1[1]) {
    uint64_t v3 = 256LL;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = v3 | *a1;
  if (a1[2]) {
    uint64_t v5 = 0x10000LL;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (a1[3]) {
    uint64_t v6 = 0x1000000LL;
  }
  else {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = v4 | v5 | v6 | ((unint64_t)a1[4] << 32) | ((unint64_t)a1[5] << 40) | ((unint64_t)a1[6] << 48) | ((unint64_t)a1[7] << 56);
  if (a2[1]) {
    uint64_t v8 = 256LL;
  }
  else {
    uint64_t v8 = 0LL;
  }
  uint64_t v9 = v8 | *a2;
  if (a2[2]) {
    uint64_t v10 = 0x10000LL;
  }
  else {
    uint64_t v10 = 0LL;
  }
  if (a2[3]) {
    uint64_t v11 = 0x1000000LL;
  }
  else {
    uint64_t v11 = 0LL;
  }
  return sub_1002F5E6C( v7,  v2,  v9 | v10 | v11 | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 48) | ((unint64_t)a2[7] << 56),  *((_DWORD *)a2 + 2));
}

uint64_t sub_1002F129C()
{
  v18[8] = 0;
  _StringGuts.grow(_:)(52LL);
  v1._countAndFlagsBits = 0x3A6449747261703CLL;
  v1._object = (void *)0xE900000000000020LL;
  String.append(_:)(v1);
  *(void *)char v18 = *v0;
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x7079547472617020LL;
  v4._object = (void *)0xEB00000000203A65LL;
  String.append(_:)(v4);
  uint64_t v5 = *((void *)v0 + 1);
  uint64_t v6 = (void *)*((void *)v0 + 2);
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0x6D614E7472617020LL;
  v8._object = (void *)0xEB00000000203A65LL;
  String.append(_:)(v8);
  uint64_t v9 = *((void *)v0 + 3);
  uint64_t v10 = (void *)*((void *)v0 + 4);
  swift_bridgeObjectRetain(v10);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0x616D697250736920LL;
  v12._object = (void *)0xEC000000203A7972LL;
  String.append(_:)(v12);
  if ((v0[56] & 1) != 0) {
    uint64_t v13 = 1702195828LL;
  }
  else {
    uint64_t v13 = 0x65736C6166LL;
  }
  if ((v0[56] & 1) != 0) {
    unint64_t v14 = 0xE400000000000000LL;
  }
  else {
    unint64_t v14 = 0xE500000000000000LL;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease(v14);
  v16._countAndFlagsBits = 62LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  return *(void *)&v18[1];
}

void sub_1002F1440(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(v2 + 48);
  if (v8)
  {
    uint64_t v9 = *(void *)(v2 + 40);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(a1, v9, v8);
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  int v10 = *(unsigned __int8 *)(v2 + 56);
  if (v10 == 2)
  {
    Swift::UInt8 v11 = 0;
  }

  else
  {
    Swift::UInt8 v11 = v10 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v11);
}

uint64_t sub_1002F1520(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A8B98);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002FB2B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryLayoutTemplate.CodingKeys,  &type metadata for AccessoryLayoutTemplate.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  v25[1] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12);
  if (!v2)
  {
    uint64_t v13 = *((void *)v3 + 1);
    uint64_t v14 = *((void *)v3 + 2);
    v25[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, v25, v5);
    uint64_t v15 = *((void *)v3 + 3);
    uint64_t v16 = *((void *)v3 + 4);
    char v24 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v24, v5);
    uint64_t v17 = *((void *)v3 + 5);
    uint64_t v18 = *((void *)v3 + 6);
    char v23 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v23, v5);
    uint64_t v19 = v3[56];
    char v22 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v22, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1002F16AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v55 - v12;
  uint64_t v14 = v1[1];
  if (v14)
  {
    uint64_t v15 = *v1;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v14);
    String.hash(into:)(a1, v15, v14);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v16 = v1[2];
  uint64_t v17 = v2[3];
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = v2[4];
  uint64_t v19 = v2[5];
  swift_bridgeObjectRetain(v19);
  String.hash(into:)(a1, v18, v19);
  swift_bridgeObjectRelease();
  if ((*((_BYTE *)v2 + 49) & 1) != 0)
  {
    Swift::UInt8 v20 = 0;
  }

  else
  {
    Swift::UInt8 v20 = *((_BYTE *)v2 + 48);
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v2[7]);
  if (*((_BYTE *)v2 + 72) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v21 = v2[8];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
  }

  char v22 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  sub_10001581C((uint64_t)v2 + v22[10], (uint64_t)v13, (uint64_t *)&unk_1009A34D0);
  char v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v23(v13, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v13, v4);
    Hasher._combine(_:)(1u);
    uint64_t v24 = sub_100007864( &qword_1009A89C0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v24);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  sub_10001581C((uint64_t)v2 + v22[11], (uint64_t)v11, (uint64_t *)&unk_1009A34D0);
  if (v23(v11, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    Hasher._combine(_:)(1u);
    uint64_t v25 = sub_100007864( &qword_1009A89C0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v25);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  char v26 = (char *)v2 + v22[12];
  if (v26[8] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v27 = *(void *)v26;
    Hasher._combine(_:)(1u);
    if ((v27 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v28 = v27;
    }
    else {
      Swift::UInt64 v28 = 0LL;
    }
    Hasher._combine(_:)(v28);
  }

  char v29 = (void *)((char *)v2 + v22[13]);
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  swift_bridgeObjectRetain(v31);
  String.hash(into:)(a1, v30, v31);
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void *)((char *)v2 + v22[14]);
  if (v32)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v32 + 16));
    uint64_t v33 = *(void *)(v32 + 16);
    if (v33)
    {
      swift_bridgeObjectRetain(v32);
      char v34 = (void *)(v32 + 40);
      do
      {
        uint64_t v35 = *(v34 - 1);
        uint64_t v36 = *v34;
        swift_bridgeObjectRetain(*v34);
        String.hash(into:)(a1, v35, v36);
        swift_bridgeObjectRelease();
        v34 += 2;
        --v33;
      }

      while (v33);
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  char v37 = (void *)((char *)v2 + v22[15]);
  uint64_t v38 = *v37;
  uint64_t v39 = v37[1];
  swift_bridgeObjectRetain(v39);
  String.hash(into:)(a1, v38, v39);
  swift_bridgeObjectRelease();
  uint64_t v40 = *(void *)((char *)v2 + v22[16]);
  if (v40)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v40 + 16));
    uint64_t v41 = *(void *)(v40 + 16);
    if (v41)
    {
      swift_bridgeObjectRetain(v40);
      uint64_t v42 = (void *)(v40 + 40);
      do
      {
        uint64_t v43 = *(v42 - 1);
        uint64_t v44 = *v42;
        swift_bridgeObjectRetain(*v42);
        String.hash(into:)(a1, v43, v44);
        swift_bridgeObjectRelease();
        v42 += 2;
        --v41;
      }

      while (v41);
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v45 = (char *)v2 + v22[17];
  if ((v45[16] & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v47 = *(void *)v45;
    Swift::UInt64 v46 = *((void *)v45 + 1);
    Hasher._combine(_:)(1u);
    if ((v47 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v48 = v47;
    }
    else {
      Swift::UInt64 v48 = 0LL;
    }
    Hasher._combine(_:)(v48);
    if ((v46 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v49 = v46;
    }
    else {
      Swift::UInt64 v49 = 0LL;
    }
    Hasher._combine(_:)(v49);
  }

  uint64_t v50 = (char *)v2 + v22[18];
  if (v50[16] == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v52 = *(void *)v50;
    Swift::UInt64 v51 = *((void *)v50 + 1);
    Hasher._combine(_:)(1u);
    if ((v52 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v53 = v52;
    }
    else {
      Swift::UInt64 v53 = 0LL;
    }
    Hasher._combine(_:)(v53);
    if ((v51 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v54 = v51;
    }
    else {
      Swift::UInt64 v54 = 0LL;
    }
    Hasher._combine(_:)(v54);
  }

uint64_t sub_1002F1BE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1002F1C24 + 4 * byte_1007FA028[a1]))( 0xD000000000000013LL,  0x800000010085D540LL);
}

unint64_t sub_1002F1C24()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1002F1D28()
{
  return v0 + 10;
}

uint64_t sub_1002F1D38()
{
  return v0 + 8;
}

void sub_1002F1D48()
{
}

uint64_t sub_1002F1D60(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A8AE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002FA47C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys,  &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v45) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v45, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v45) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v45, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    LOBYTE(v45) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v45, v5);
    int v18 = *((unsigned __int8 *)v3 + 48);
    int v19 = *((unsigned __int8 *)v3 + 49);
    LOBYTE(v45) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18 | (v19 << 8), &v45, v5);
    uint64_t v20 = v3[7];
    LOBYTE(v45) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v45, v5);
    uint64_t v21 = v3[8];
    uint64_t v22 = *((unsigned __int8 *)v3 + 72);
    LOBYTE(v45) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v45, v5);
    char v23 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    uint64_t v24 = (uint64_t)v3 + v23[10];
    LOBYTE(v45) = 6;
    uint64_t v25 = type metadata accessor for URL(0LL);
    uint64_t v26 = sub_100007864( &qword_1009A8AC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v45, v5, v25, v26);
    uint64_t v27 = (uint64_t)v3 + v23[11];
    LOBYTE(v45) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v45, v5, v25, v26);
    Swift::UInt64 v28 = (uint64_t *)((char *)v3 + v23[12]);
    uint64_t v29 = *v28;
    uint64_t v30 = *((unsigned __int8 *)v28 + 8);
    LOBYTE(v45) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v45, v5);
    uint64_t v31 = (uint64_t *)((char *)v3 + v23[13]);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    LOBYTE(v45) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v33, &v45, v5);
    *(void *)&__int128 v45 = *(uint64_t *)((char *)v3 + v23[14]);
    v47[0] = 10;
    uint64_t v34 = sub_100004AEC(&qword_1009AED50);
    uint64_t v35 = sub_1001C89D8( (unint64_t *)&qword_1009B0650,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v45, v47, v5, v34, v35);
    uint64_t v36 = (uint64_t *)((char *)v3 + v23[15]);
    uint64_t v37 = *v36;
    uint64_t v38 = v36[1];
    LOBYTE(v45) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v37, v38, &v45, v5);
    *(void *)&__int128 v45 = *(uint64_t *)((char *)v3 + v23[16]);
    v47[0] = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v45, v47, v5, v34, v35);
    uint64_t v39 = (__int128 *)((char *)v3 + v23[17]);
    char v40 = *((_BYTE *)v39 + 16);
    __int128 v45 = *v39;
    char v46 = v40;
    v47[0] = 13;
    unint64_t v41 = sub_1002FA504();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v45, v47, v5, &type metadata for Coordinates, v41);
    uint64_t v42 = (__int128 *)((char *)v3 + v23[18]);
    char v43 = *((_BYTE *)v42 + 16);
    __int128 v45 = *v42;
    char v46 = v43;
    v47[0] = 14;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v45, v47, v5, &type metadata for Coordinates, v41);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002F21A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v46 - v9;
  uint64_t v50 = sub_100004AEC(&qword_1009A8AD0);
  uint64_t v11 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::UInt64 v53 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  __chkstk_darwin(v53);
  Swift::UInt64 v51 = a1;
  Swift::UInt64 v52 = (uint64_t *)((char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_100012ED8(a1, v15);
  unint64_t v17 = sub_1002FA47C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys,  &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys,  v17,  v15,  v16);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
  }
  uint64_t v48 = a2;
  uint64_t v49 = v11;
  LOBYTE(v54) = 0;
  uint64_t v18 = v50;
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v50);
  uint64_t v20 = v53;
  uint64_t v21 = v52;
  *Swift::UInt64 v52 = v19;
  v21[1] = v22;
  LOBYTE(v54) = 1;
  v21[2] = KeyedDecodingContainer.decode(_:forKey:)(&v54, v18);
  v21[3] = v23;
  LOBYTE(v54) = 2;
  v21[4] = KeyedDecodingContainer.decode(_:forKey:)(&v54, v18);
  v21[5] = v24;
  LOBYTE(v54) = 3;
  __int16 v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v18);
  *((_BYTE *)v21 + 48) = v25;
  *((_BYTE *)v21 + 49) = HIBYTE(v25) & 1;
  LOBYTE(v54) = 4;
  v21[7] = KeyedDecodingContainer.decode(_:forKey:)(&v54, v18);
  LOBYTE(v54) = 5;
  v21[8] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v18);
  *((_BYTE *)v21 + 72) = v26 & 1;
  uint64_t v27 = type metadata accessor for URL(0LL);
  LOBYTE(v54) = 6;
  uint64_t v47 = sub_100007864( &qword_1009A8AB8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v54, v18, v27, v47);
  sub_100015750((uint64_t)v10, (uint64_t)v21 + v20[10], (uint64_t *)&unk_1009A34D0);
  LOBYTE(v54) = 7;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v54, v18, v27, v47);
  sub_100015750((uint64_t)v8, (uint64_t)v21 + v20[11], (uint64_t *)&unk_1009A34D0);
  LOBYTE(v54) = 8;
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v18);
  uint64_t v29 = (char *)v21 + v20[12];
  *(void *)uint64_t v29 = v28;
  v29[8] = v30 & 1;
  LOBYTE(v54) = 9;
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v18);
  uint64_t v32 = (uint64_t *)((char *)v52 + v53[13]);
  uint64_t *v32 = v31;
  v32[1] = v33;
  uint64_t v34 = sub_100004AEC(&qword_1009AED50);
  char v56 = 10;
  uint64_t v35 = sub_1001C89D8( (unint64_t *)&qword_1009A56C0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v34, &v56, v50, v34, v35);
  *(uint64_t *)((char *)v52 + v53[14]) = v54;
  LOBYTE(v54) = 11;
  uint64_t v36 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v50);
  uint64_t v37 = (uint64_t *)((char *)v52 + v53[15]);
  *uint64_t v37 = v36;
  v37[1] = v38;
  char v56 = 12;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v34, &v56, v50, v34, v35);
  *(uint64_t *)((char *)v52 + v53[16]) = v54;
  char v56 = 13;
  unint64_t v39 = sub_1002FA4C0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Coordinates,  &v56,  v50,  &type metadata for Coordinates,  v39);
  char v40 = v55;
  unint64_t v41 = (char *)v52 + v53[17];
  *(_OWORD *)unint64_t v41 = v54;
  v41[16] = v40;
  char v56 = 14;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Coordinates,  &v56,  v50,  &type metadata for Coordinates,  v39);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v50);
  char v42 = v55;
  uint64_t v43 = (uint64_t)v52;
  uint64_t v44 = (char *)v52 + v53[18];
  *(_OWORD *)uint64_t v44 = v54;
  v44[16] = v42;
  sub_10001DC4C(v43, v48, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
  return sub_100018C68(v43, type metadata accessor for AccessoryInfoResponseContent.Configuration);
}

uint64_t sub_1002F2998(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002F29D8 + 4 * byte_1007FA037[a1]))( 0x48746C7561666564LL,  0xEF6E6F63496F7265LL);
}

uint64_t sub_1002F29D8()
{
  return 0x4C746C7561666564LL;
}

unint64_t sub_1002F29FC()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1002F2A3C()
{
  return 0x726F4D6E7261656CLL;
}

void sub_1002F2AB8()
{
}

uint64_t sub_1002F2ADC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A8AC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002FA438();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys,  &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys,  v11,  v9,  v10);
  char v39 = 0;
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = sub_100007864( &qword_1009A8AC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v39, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
    uint64_t v15 = v3 + v14[5];
    char v38 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v38, v5, v12, v13);
    uint64_t v16 = v3 + v14[6];
    char v37 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v37, v5, v12, v13);
    uint64_t v17 = v3 + v14[7];
    char v36 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v36, v5, v12, v13);
    uint64_t v18 = v3 + v14[8];
    char v35 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v35, v5, v12, v13);
    uint64_t v19 = v3 + v14[9];
    char v34 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v34, v5, v12, v13);
    uint64_t v20 = v3 + v14[10];
    char v33 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v33, v5, v12, v13);
    uint64_t v21 = v3 + v14[11];
    char v32 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v32, v5, v12, v13);
    uint64_t v22 = v3 + v14[12];
    char v31 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v31, v5, v12, v13);
    uint64_t v23 = v3 + v14[13];
    char v30 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v30, v5, v12, v13);
    uint64_t v24 = v3 + v14[14];
    char v29 = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v29, v5, v12, v13);
    uint64_t v25 = v3 + v14[15];
    char v28 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v28, v5, v12, v13);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002F2E4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v69 = type metadata accessor for URL(0LL);
  uint64_t v71 = *(void *)(v69 - 8);
  uint64_t v3 = __chkstk_darwin(v69);
  uint64_t v58 = (void **)((char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v59 = (void **)((char *)&v54 - v6);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v60 = (void **)((char *)&v54 - v8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v61 = (void **)((char *)&v54 - v10);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v62 = (void **)((char *)&v54 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v63 = (void **)((char *)&v54 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v64 = (void **)((char *)&v54 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (void **)((char *)&v54 - v18);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (void **)((char *)&v54 - v21);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (void **)((char *)&v54 - v24);
  uint64_t v26 = __chkstk_darwin(v23);
  char v28 = (void **)((char *)&v54 - v27);
  __chkstk_darwin(v26);
  uint64_t v65 = (void **)((char *)&v54 - v29);
  uint64_t v67 = sub_100004AEC(&qword_1009A8AA8);
  uint64_t v30 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  char v32 = (char *)&v54 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
  __chkstk_darwin(v72);
  uint64_t v73 = (char *)&v54 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = a1[3];
  uint64_t v35 = a1[4];
  uint64_t v70 = a1;
  sub_100012ED8(a1, v34);
  unint64_t v36 = sub_1002FA438();
  uint64_t v66 = v32;
  uint64_t v37 = v68;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys,  &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys,  v36,  v34,  v35);
  if (v37) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v70);
  }
  char v55 = v22;
  char v56 = v25;
  __int128 v54 = v19;
  uint64_t v68 = v30;
  char v85 = 0;
  char v38 = (void *)sub_100007864( &qword_1009A8AB8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  char v39 = v65;
  uint64_t v40 = v69;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v65, v69, &v85, v67, v69, v38);
  unint64_t v41 = *(void (**)(char *, void *, uint64_t))(v71 + 32);
  char v42 = v73;
  v41(v73, v39, v40);
  char v84 = 1;
  uint64_t v43 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v28, v40, &v84, v67, v40, v38);
  uint64_t v44 = v72;
  v41(&v42[v72[5]], v43, v40);
  char v83 = 2;
  __int128 v45 = v56;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v56, v40, &v83, v67, v40, v38);
  v41(&v42[v44[6]], v45, v40);
  char v82 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v55, v40, &v82, v67, v40, v38);
  uint64_t v46 = v44;
  v41(&v42[v44[7]], v55, v40);
  char v81 = 4;
  uint64_t v47 = v54;
  uint64_t v65 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v40, &v81, v67, v40, v38);
  v41(&v42[v46[8]], v47, v40);
  char v80 = 5;
  uint64_t v48 = v64;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v64, v40, &v80, v67, v40, v65);
  v41(&v42[v46[9]], v48, v40);
  char v79 = 6;
  uint64_t v49 = v63;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v63, v40, &v79, v67, v40, v65);
  v41(&v42[v46[10]], v49, v40);
  char v78 = 7;
  uint64_t v50 = v62;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v62, v40, &v78, v67, v40, v65);
  v41(&v42[v46[11]], v50, v40);
  v77[0] = 8;
  Swift::UInt64 v51 = v61;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v61, v40, v77, v67, v40, v65);
  v41(&v42[v46[12]], v51, v40);
  char v76 = 9;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v60, v40, &v76, v67, v40, v65);
  v41(&v73[v72[13]], v60, v40);
  char v75 = 10;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v59, v40, &v75, v67, v40, v65);
  v41(&v73[v72[14]], v59, v40);
  char v74 = 11;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v58, v40, &v74, v67, v40, v65);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v67);
  uint64_t v52 = (uint64_t)v73;
  v41(&v73[v72[15]], v58, v40);
  sub_10001DC4C(v52, v57, type metadata accessor for AccessoryInfoResponseContent.Assets);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v70);
  return sub_100018C68(v52, type metadata accessor for AccessoryInfoResponseContent.Assets);
}

uint64_t sub_1002F3818()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002F3854 + 4 * byte_1007FA043[*v0]))( 0x6E65644974726170LL,  0xEE00726569666974LL);
}

uint64_t sub_1002F3854()
{
  return 0x6570795474726170LL;
}

uint64_t sub_1002F386C()
{
  return 0x656D614E74726170LL;
}

uint64_t sub_1002F3884()
{
  return 0x626D795374726170LL;
}

uint64_t sub_1002F38A0()
{
  return 0x72616D6972507369LL;
}

uint64_t sub_1002F38BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002F8FB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002F38E0(uint64_t a1)
{
  unint64_t v2 = sub_1002FB2B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F3908(uint64_t a1)
{
  unint64_t v2 = sub_1002FB2B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002F3930@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v7 + 9);
  }

  return result;
}

uint64_t sub_1002F3978(void *a1)
{
  return sub_1002F1520(a1);
}

Swift::Int sub_1002F398C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F39CC(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1002F3A08(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  __int128 v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return sub_1002F60A4((unsigned __int8 *)v5, (unsigned __int8 *)v7) & 1;
}

uint64_t sub_1002F3A60()
{
  return sub_1002F1BE8(*v0);
}

uint64_t sub_1002F3A68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002F94F4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1002F3A8C(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_1002F3A98(uint64_t a1)
{
  unint64_t v2 = sub_1002FA47C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F3AC0(uint64_t a1)
{
  unint64_t v2 = sub_1002FA47C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002F3AE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002F21A8(a1, a2);
}

uint64_t sub_1002F3AFC(void *a1)
{
  return sub_1002F1D60(a1);
}

Swift::Int sub_1002F3B10(uint64_t a1, uint64_t a2)
{
  return sub_100089AA0(a1, a2, (void (*)(void *))sub_1002F16AC);
}

Swift::Int sub_1002F3B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100089AF0(a1, a2, a3, (void (*)(void *))sub_1002F16AC);
}

uint64_t sub_1002F3B30()
{
  return sub_100007864( &qword_1009A8990,  type metadata accessor for AccessoryInfoResponseContent.Configuration,  (uint64_t)&unk_1007FA1B8);
}

uint64_t sub_1002F3B5C()
{
  return sub_1002F2998(*v0);
}

uint64_t sub_1002F3B64@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002F9AF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002F3B88(uint64_t a1)
{
  unint64_t v2 = sub_1002FA438();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F3BB0(uint64_t a1)
{
  unint64_t v2 = sub_1002FA438();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002F3BD8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002F2E4C(a1, a2);
}

uint64_t sub_1002F3BEC(void *a1)
{
  return sub_1002F2ADC(a1);
}

Swift::Int sub_1002F3C00()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = sub_100007864( &qword_1009A89C0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1002F3D90(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = sub_100007864( &qword_1009A89C0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_1002F3F08(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = sub_100007864( &qword_1009A89C0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1002F4098()
{
  return sub_100007864( &qword_1009A8998,  type metadata accessor for AccessoryInfoResponseContent.Assets,  (uint64_t)&unk_1007FA270);
}

uint64_t sub_1002F40C4()
{
  v1._countAndFlagsBits = 0x7972636E4531653CLL;
  v1._object = (void *)0xEE003A6E6F697470LL;
  String.append(_:)(v1);
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)v0[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0x7972636E45326520LL;
  v5._object = (void *)0xEE003A6E6F697470LL;
  String.append(_:)(v5);
  uint64_t v6 = v0[2];
  uint64_t v7 = (void *)v0[3];
  swift_bridgeObjectRetain(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._object = (void *)0x800000010085D0F0LL;
  v9._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v9);
  uint64_t v11 = v0[4];
  uint64_t v10 = (void *)v0[5];
  swift_bridgeObjectRetain(v10);
  v12._countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v10);
  v13._countAndFlagsBits = 62LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  return 0LL;
}

uint64_t sub_1002F41FC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A8AA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002FA3F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys,  &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v21, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v20, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002F4338()
{
  uint64_t v1 = 0x707972636E453265LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6966697265563273LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x707972636E453165LL;
  }
}

uint64_t sub_1002F4398@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002FA038(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002F43BC(uint64_t a1)
{
  unint64_t v2 = sub_1002FA3F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F43E4(uint64_t a1)
{
  unint64_t v2 = sub_1002FA3F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002F440C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_1002F444C(void *a1)
{
  return sub_1002F41FC(a1);
}

Swift::Int sub_1002F4460()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  Hasher.init(_seed:)(v8, 0LL);
  String.hash(into:)(v8, v1, v2);
  String.hash(into:)(v8, v3, v4);
  String.hash(into:)(v8, v6, v5);
  return Hasher._finalize()();
}

uint64_t sub_1002F44E0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v7 = v1[5];
  String.hash(into:)(a1, v3, v4);
  String.hash(into:)(a1, v5, v6);
  return String.hash(into:)(a1, v8, v7);
}

Swift::Int sub_1002F4538(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  Hasher.init(_seed:)(v9, a1);
  String.hash(into:)(v9, v2, v3);
  String.hash(into:)(v9, v4, v5);
  String.hash(into:)(v9, v7, v6);
  return Hasher._finalize()();
}

uint64_t sub_1002F45B8(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0] = v3;
  __int128 v5 = a2[2];
  v8[1] = v4;
  _OWORD v8[2] = v5;
  return sub_1002F61AC((uint64_t *)v7, v8) & 1;
}

unint64_t sub_1002F4600()
{
  unint64_t result = qword_1009A89A0;
  if (!qword_1009A89A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA328, &type metadata for AccessoryInfoResponseContent.PublicKeys);
    atomic_store(result, (unint64_t *)&qword_1009A89A0);
  }

  return result;
}

void sub_1002F4644(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
  uint64_t v41 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A6DC8);
  __chkstk_darwin(v7);
  uint64_t v40 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v9 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  unint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A6DD0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v15 = *(_OWORD *)(v1 + 48);
  v42[2] = *(_OWORD *)(v1 + 32);
  v42[3] = v15;
  uint64_t v43 = *(void *)(v1 + 64);
  __int128 v16 = *(_OWORD *)(v1 + 16);
  v42[0] = *(_OWORD *)v1;
  v42[1] = v16;
  sub_1002F7A84(v42);
  sub_1002EFE0C(a1);
  sub_1002F7ACC(v42);
  uint64_t v17 = *(void *)(v1 + 72);
  if (v17 == 2LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unsigned int v18 = *(_DWORD *)(v1 + 80);
    Hasher._combine(_:)(1u);
    sub_1002F0440(a1, v17 & 0xFFFFFFFF01010101LL, v18);
  }

  uint64_t v19 = v39;
  char v20 = (int *)type metadata accessor for AccessoryInfoResponseContent(0LL);
  sub_10001581C(v2 + v20[6], (uint64_t)v14, &qword_1009A6DD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1LL, v19) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    sub_10002218C((uint64_t)v14, (uint64_t)v11, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    Hasher._combine(_:)(1u);
    sub_1002F16AC(a1);
    sub_100018C68((uint64_t)v11, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  }

  uint64_t v22 = v40;
  uint64_t v21 = v41;
  sub_10001581C(v2 + v20[7], v40, &qword_1009A6DC8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    sub_10002218C(v22, (uint64_t)v6, type metadata accessor for AccessoryInfoResponseContent.Assets);
    Hasher._combine(_:)(1u);
    uint64_t v23 = type metadata accessor for URL(0LL);
    uint64_t v24 = sub_100007864( &qword_1009A89C0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    sub_100018C68((uint64_t)v6, type metadata accessor for AccessoryInfoResponseContent.Assets);
  }

  uint64_t v25 = (uint64_t *)(v2 + v20[8]);
  uint64_t v26 = v25[1];
  if (v26)
  {
    uint64_t v27 = *v25;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v26);
    String.hash(into:)(a1, v27, v26);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  char v28 = (uint64_t *)(v2 + v20[9]);
  uint64_t v29 = v28[1];
  if (v29)
  {
    uint64_t v31 = v28[4];
    uint64_t v30 = v28[5];
    uint64_t v33 = v28[2];
    uint64_t v32 = v28[3];
    uint64_t v34 = *v28;
    Hasher._combine(_:)(1u);
    sub_1002549B8(v34, v29, v33, v32, v31, v30);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v30);
    String.hash(into:)(a1, v34, v29);
    String.hash(into:)(a1, v33, v32);
    String.hash(into:)(a1, v31, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1002F77C0(v34, v29, v33, v32, v31, v30);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v35 = type metadata accessor for ServerStatusCode(0LL);
  uint64_t v36 = sub_100007864( &qword_1009A8A70,  (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode,  (uint64_t)&protocol conformance descriptor for ServerStatusCode);
  dispatch thunk of Hashable.hash(into:)(a1, v35, v36);
  uint64_t v37 = *(void *)(v2 + v20[11]);
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v37);
    sub_1005BEDD8(a1, v37);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

uint64_t sub_1002F4BE4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A8A28);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002F777C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoResponseContent.CodingKeys,  &type metadata for AccessoryInfoResponseContent.CodingKeys,  v11,  v9,  v10);
  char v12 = *(_BYTE *)(v3 + 8);
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v14 = *(void *)(v3 + 24);
  *(void *)&__int128 v39 = *(void *)v3;
  BYTE8(v39) = v12;
  *(void *)&__int128 v40 = v13;
  *((void *)&v40 + 1) = v14;
  *(void *)&v41[0] = *(void *)(v3 + 32);
  *(_OWORD *)((char *)v41 + 8) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)((char *)&v41[1] + 8) = *(_OWORD *)(v3 + 56);
  char v38 = 0;
  unint64_t v15 = sub_1002F790C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v39, &v38, v5, &type metadata for AccessorySoftwareInfo, v15);
  if (!v2)
  {
    int v16 = *(_DWORD *)(v3 + 80);
    *(void *)&__int128 v39 = *(void *)(v3 + 72);
    DWORD2(v39) = v16;
    char v38 = 1;
    unint64_t v17 = sub_1002F7950();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v39,  &v38,  v5,  &type metadata for AccessoryInfoCapabilities,  v17);
    unsigned int v18 = (int *)type metadata accessor for AccessoryInfoResponseContent(0LL);
    uint64_t v19 = v3 + v18[6];
    LOBYTE(v39) = 2;
    uint64_t v20 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    uint64_t v21 = sub_100007864( &qword_1009A8A40,  type metadata accessor for AccessoryInfoResponseContent.Configuration,  (uint64_t)&unk_1007FA220);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v39, v5, v20, v21);
    uint64_t v22 = v3 + v18[7];
    LOBYTE(v39) = 3;
    uint64_t v23 = type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
    uint64_t v24 = sub_100007864( &qword_1009A8A48,  type metadata accessor for AccessoryInfoResponseContent.Assets,  (uint64_t)&unk_1007FA2D8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v39, v5, v23, v24);
    uint64_t v25 = (uint64_t *)(v3 + v18[8]);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    LOBYTE(v39) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v39, v5);
    char v28 = (__int128 *)(v3 + v18[9]);
    __int128 v29 = v28[1];
    __int128 v39 = *v28;
    __int128 v40 = v29;
    v41[0] = v28[2];
    char v38 = 5;
    unint64_t v30 = sub_1002F7994();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v39,  &v38,  v5,  &type metadata for AccessoryInfoResponseContent.PublicKeys,  v30);
    uint64_t v31 = v3 + v18[10];
    LOBYTE(v39) = 6;
    uint64_t v32 = type metadata accessor for ServerStatusCode(0LL);
    uint64_t v33 = sub_100007864( &qword_1009A8A58,  (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode,  (uint64_t)&protocol conformance descriptor for ServerStatusCode);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v39, v5, v32, v33);
    *(void *)&__int128 v39 = *(void *)(v3 + v18[11]);
    char v38 = 7;
    uint64_t v34 = sub_100004AEC(&qword_1009A8A10);
    uint64_t v35 = sub_1002F79D8( &qword_1009A8A60,  (void (*)(void))sub_1002F7A40,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v38, v5, v34, v35);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002F4F6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v3 = type metadata accessor for ServerStatusCode(0LL);
  uint64_t v55 = *(void *)(v3 - 8);
  uint64_t v56 = v3;
  __chkstk_darwin(v3);
  __int128 v54 = (uint64_t *)((char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = sub_100004AEC(&qword_1009A6DC8);
  __chkstk_darwin(v5);
  uint64_t v57 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A6DD0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = sub_100004AEC(&qword_1009A89D8);
  uint64_t v10 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  char v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AccessoryInfoResponseContent(0LL);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = a1[3];
  uint64_t v16 = a1[4];
  sub_100012ED8(a1, v17);
  unint64_t v18 = sub_1002F777C();
  uint64_t v58 = v12;
  uint64_t v19 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoResponseContent.CodingKeys,  &type metadata for AccessoryInfoResponseContent.CodingKeys,  v18,  v17,  v16);
  if (v19) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v20 = v57;
  uint64_t v60 = v10;
  Swift::UInt64 v51 = (int *)v13;
  uint64_t v52 = a1;
  uint64_t v50 = v15;
  char v64 = 0;
  unint64_t v21 = sub_1002F77FC();
  uint64_t v22 = v58;
  uint64_t v23 = v59;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v61,  &type metadata for AccessorySoftwareInfo,  &v64,  v59,  &type metadata for AccessorySoftwareInfo,  v21);
  char v24 = BYTE8(v61);
  __int128 v25 = v62;
  uint64_t v26 = v50;
  *uint64_t v50 = v61;
  *((_BYTE *)v26 + 8) = v24;
  *((_OWORD *)v26 + 1) = v25;
  v26[4] = *(void *)&v63[0];
  *(_OWORD *)(v26 + 5) = *(_OWORD *)((char *)v63 + 8);
  *(_OWORD *)(v26 + 7) = *(_OWORD *)((char *)&v63[1] + 8);
  char v64 = 1;
  unint64_t v27 = sub_1002F7840();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for AccessoryInfoCapabilities,  &v64,  v23,  &type metadata for AccessoryInfoCapabilities,  v27);
  int v28 = DWORD2(v61);
  v26[9] = v61;
  *((_DWORD *)v26 + 20) = v28;
  uint64_t v29 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  LOBYTE(v61) = 2;
  uint64_t v30 = sub_100007864( &qword_1009A89F8,  type metadata accessor for AccessoryInfoResponseContent.Configuration,  (uint64_t)&unk_1007FA248);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v29, &v61, v23, v29, v30);
  sub_100015750((uint64_t)v9, (uint64_t)v26 + v51[6], &qword_1009A6DD0);
  uint64_t v31 = type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
  LOBYTE(v61) = 3;
  uint64_t v32 = sub_100007864( &qword_1009A8A00,  type metadata accessor for AccessoryInfoResponseContent.Assets,  (uint64_t)&unk_1007FA300);
  uint64_t v33 = (uint64_t)v20;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, &v61, v23, v31, v32);
  uint64_t v34 = v51;
  sub_100015750(v33, (uint64_t)v26 + v51[7], &qword_1009A6DC8);
  LOBYTE(v61) = 4;
  uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v23);
  uint64_t v36 = (void *)((char *)v26 + v34[8]);
  *uint64_t v36 = v35;
  v36[1] = v37;
  char v64 = 5;
  unint64_t v38 = sub_1002F7884();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for AccessoryInfoResponseContent.PublicKeys,  &v64,  v23,  &type metadata for AccessoryInfoResponseContent.PublicKeys,  v38);
  __int128 v39 = (_OWORD *)((char *)v26 + v34[9]);
  __int128 v40 = v62;
  *__int128 v39 = v61;
  v39[1] = v40;
  v39[2] = v63[0];
  LOBYTE(v61) = 6;
  uint64_t v41 = sub_100007864( (unint64_t *)&qword_1009A4AC8,  (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode,  (uint64_t)&protocol conformance descriptor for ServerStatusCode);
  char v42 = v54;
  uint64_t v43 = (char *)v26;
  uint64_t v44 = v56;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v56, &v61, v23, v56, v41);
  (*(void (**)(char *, void *, uint64_t))(v55 + 32))(&v43[v34[10]], v42, v44);
  uint64_t v45 = sub_100004AEC(&qword_1009A8A10);
  char v64 = 7;
  uint64_t v46 = sub_1002F79D8( &qword_1009A8A18,  (void (*)(void))sub_1002F78C8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v45, &v64, v23, v45, v46);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v22, v23);
  uint64_t v47 = (uint64_t)v50;
  *(void *)((char *)v50 + v34[11]) = v61;
  sub_10001DC4C(v47, v53, type metadata accessor for AccessoryInfoResponseContent);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
  return sub_100018C68(v47, type metadata accessor for AccessoryInfoResponseContent);
}

uint64_t sub_1002F56A4()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002F56DC + 4 * byte_1007FA048[*v0]))( 0x6572617774666F73LL,  0xEC0000006F666E49LL);
}

uint64_t sub_1002F56DC()
{
  return 0x696C696261706163LL;
}

uint64_t sub_1002F56FC()
{
  return 0x72756769666E6F63LL;
}

uint64_t sub_1002F5720()
{
  return 0x737465737361LL;
}

uint64_t sub_1002F5734()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_1002F574C()
{
  return 0x654B63696C627570LL;
}

uint64_t sub_1002F5768()
{
  return 0x737574617473LL;
}

uint64_t sub_1002F577C()
{
  return 0x655474756F79616CLL;
}

uint64_t sub_1002F57A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002FB340(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002F57C4(uint64_t a1)
{
  unint64_t v2 = sub_1002F777C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F57EC(uint64_t a1)
{
  unint64_t v2 = sub_1002F777C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002F5814@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002F4F6C(a1, a2);
}

uint64_t sub_1002F5828(void *a1)
{
  return sub_1002F4BE4(a1);
}

Swift::Int sub_1002F583C(uint64_t a1, uint64_t a2)
{
  return sub_100089AA0(a1, a2, (void (*)(void *))sub_1002F4644);
}

Swift::Int sub_1002F584C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100089AF0(a1, a2, a3, (void (*)(void *))sub_1002F4644);
}

uint64_t sub_1002F585C()
{
  return sub_100007864( &qword_1009A89A8,  type metadata accessor for AccessoryInfoResponseContent,  (uint64_t)&unk_1007FA408);
}

uint64_t sub_1002F5888()
{
  uint64_t v1 = sub_100004AEC(&qword_1009A6DD0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v23 = 0LL;
  *((void *)&v23 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(49LL);
  __int128 v26 = v23;
  v4._countAndFlagsBits = 60LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  char v5 = *(_BYTE *)(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = *(void *)(v0 + 24);
  *(void *)&__int128 v23 = *(void *)v0;
  BYTE8(v23) = v5;
  *(void *)&__int128 v24 = v6;
  *((void *)&v24 + 1) = v7;
  *(void *)&v25[0] = *(void *)(v0 + 32);
  *(_OWORD *)((char *)v25 + 8) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)((char *)&v25[1] + 8) = *(_OWORD *)(v0 + 56);
  _print_unlocked<A, B>(_:_:)( &v23,  &v26,  &type metadata for AccessorySoftwareInfo,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v8._countAndFlagsBits = 0x3A73757461747320LL;
  v8._object = (void *)0xE800000000000000LL;
  String.append(_:)(v8);
  uint64_t v9 = (int *)type metadata accessor for AccessoryInfoResponseContent(0LL);
  uint64_t v10 = type metadata accessor for ServerStatusCode(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A89B0,  (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode,  (uint64_t)&protocol conformance descriptor for ServerStatusCode);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x6E6F697372657620LL;
  v13._object = (void *)0xE90000000000003ALL;
  String.append(_:)(v13);
  __int128 v23 = *(_OWORD *)(v0 + v9[8]);
  uint64_t v14 = sub_100004AEC(&qword_1009A34B0);
  _print_unlocked<A, B>(_:_:)( &v23,  &v26,  v14,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v15._countAndFlagsBits = 0x3A6769666E6F6320LL;
  v15._object = (void *)0xE800000000000000LL;
  String.append(_:)(v15);
  sub_10001581C(v0 + v9[6], (uint64_t)v3, &qword_1009A6DD0);
  v16._countAndFlagsBits = String.init<A>(describing:)(v3, v1);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x4B63696C62757020LL;
  v17._object = (void *)0xEC0000003A737965LL;
  String.append(_:)(v17);
  unint64_t v18 = (__int128 *)(v0 + v9[9]);
  __int128 v19 = v18[1];
  __int128 v23 = *v18;
  __int128 v24 = v19;
  v25[0] = v18[2];
  uint64_t v20 = sub_100004AEC(&qword_1009A89B8);
  _print_unlocked<A, B>(_:_:)( &v23,  &v26,  v20,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v21._countAndFlagsBits = 62LL;
  v21._object = (void *)0xE100000000000000LL;
  String.append(_:)(v21);
  return v26;
}

unint64_t sub_1002F5B0C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessoryInfoResponseContent(0LL);
  swift_bridgeObjectRetain(a1);
  v4._countAndFlagsBits = Array.description.getter(v3, v2);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000020LL;
}

unint64_t sub_1002F5BAC()
{
  return sub_1002F5B0C(*v0);
}

BOOL sub_1002F5BB4(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8)) {
      return 0LL;
    }
  }

  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v4 = 1;
    }
    if ((v4 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  BOOL v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0LL), BOOL result = 0LL, (v10 & 1) != 0))
  {
    int v12 = *(unsigned __int8 *)(a1 + 32);
    int v13 = *(unsigned __int8 *)(a2 + 32);
    if (v12 == 2)
    {
      if (v13 != 2) {
        return 0LL;
      }
    }

    else
    {
      BOOL result = 0LL;
      BOOL v14 = (v12 & 1) == 0;
      if (v13 == 2 || ((v14 ^ v13) & 1) == 0) {
        return result;
      }
    }

    int v15 = *(unsigned __int8 *)(a1 + 33);
    int v16 = *(unsigned __int8 *)(a2 + 33);
    if (v15 == 2)
    {
      if (v16 != 2) {
        return 0LL;
      }
    }

    else
    {
      BOOL result = 0LL;
      BOOL v17 = (v15 & 1) == 0;
      if (v16 == 2 || ((v17 ^ v16) & 1) == 0) {
        return result;
      }
    }

    int v18 = *(unsigned __int8 *)(a1 + 34);
    int v19 = *(unsigned __int8 *)(a2 + 34);
    if (v18 == 2)
    {
      if (v19 != 2) {
        return 0LL;
      }
    }

    else
    {
      BOOL result = 0LL;
      BOOL v20 = (v18 & 1) == 0;
      if (v19 == 2 || ((v20 ^ v19) & 1) == 0) {
        return result;
      }
    }

    int v21 = *(unsigned __int8 *)(a1 + 35);
    int v22 = *(unsigned __int8 *)(a2 + 35);
    if (v21 == 2)
    {
      if (v22 != 2) {
        return 0LL;
      }
    }

    else
    {
      BOOL result = 0LL;
      BOOL v23 = (v21 & 1) == 0;
      if (v22 == 2 || ((v23 ^ v22) & 1) == 0) {
        return result;
      }
    }

    int v24 = *(unsigned __int8 *)(a1 + 36);
    int v25 = *(unsigned __int8 *)(a2 + 36);
    if (v24 == 2)
    {
      if (v25 != 2) {
        return 0LL;
      }
    }

    else
    {
      BOOL result = 0LL;
      BOOL v26 = (v24 & 1) == 0;
      if (v25 == 2 || ((v26 ^ v25) & 1) == 0) {
        return result;
      }
    }

    int v27 = *(unsigned __int8 *)(a1 + 37);
    int v28 = *(unsigned __int8 *)(a2 + 37);
    if (v27 == 2)
    {
      if (v28 != 2) {
        return 0LL;
      }
    }

    else
    {
      BOOL result = 0LL;
      BOOL v29 = (v27 & 1) == 0;
      if (v28 == 2 || ((v29 ^ v28) & 1) == 0) {
        return result;
      }
    }

    int v30 = *(unsigned __int8 *)(a1 + 38);
    int v31 = *(unsigned __int8 *)(a2 + 38);
    if (v30 == 2)
    {
      if (v31 != 2) {
        return 0LL;
      }
    }

    else
    {
      BOOL result = 0LL;
      BOOL v32 = (v30 & 1) == 0;
      if (v31 == 2 || ((v32 ^ v31) & 1) == 0) {
        return result;
      }
    }

    int v33 = *(unsigned __int8 *)(a1 + 39);
    int v34 = *(unsigned __int8 *)(a2 + 39);
    if (v33 == 2)
    {
      if (v34 != 2) {
        return 0LL;
      }
    }

    else
    {
      BOOL result = 0LL;
      BOOL v35 = (v33 & 1) == 0;
      if (v34 == 2 || ((v35 ^ v34) & 1) == 0) {
        return result;
      }
    }

    uint64_t v36 = *(void *)(a1 + 48);
    uint64_t v37 = *(void *)(a2 + 48);
    if (v36)
    {
      if (!v37) {
        return 0LL;
      }
      uint64_t v38 = *(void *)(a1 + 40);
      uint64_t v39 = *(void *)(a2 + 40);
      if (v38 != v39 || v36 != v37)
      {
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v36, v39, v37, 0LL);
        BOOL result = 0LL;
        if ((v40 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v37)
    {
      return 0LL;
    }

    uint64_t v41 = *(void *)(a1 + 64);
    uint64_t v42 = *(void *)(a2 + 64);
    if (v41)
    {
      if (!v42) {
        return 0LL;
      }
      uint64_t v43 = *(void *)(a1 + 56);
      uint64_t v44 = *(void *)(a2 + 56);
      return v43 == v44 && v41 == v42 || (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v41, v44, v42, 0LL) & 1) != 0;
    }

    return !v42;
  }

  return result;
}

uint64_t sub_1002F5E6C(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  uint64_t result = 0LL;
  if (((a1 ^ a3) & 1) == 0
    && ((a1 >> 8) & 1) == ((a3 >> 8) & 1)
    && ((a1 >> 16) & 1) == ((a3 >> 16) & 1)
    && ((a1 >> 24) & 1) == ((a3 >> 24) & 1))
  {
    if ((a1 & 0xFF00000000LL) == 0x200000000LL)
    {
      if (BYTE4(a3) != 2) {
        return 0LL;
      }
    }

    else
    {
      uint64_t result = 0LL;
    }

    if ((a1 & 0xFF0000000000LL) == 0x20000000000LL)
    {
      if (BYTE5(a3) != 2) {
        return 0LL;
      }
    }

    else
    {
      uint64_t result = 0LL;
      if (BYTE5(a3) == 2 || ((a1 & 0x10000000000LL) == 0) == ((a3 >> 40) & 1)) {
        return result;
      }
    }

    if ((a1 & 0xFF000000000000LL) == 0x2000000000000LL)
    {
      if (BYTE6(a3) != 2) {
        return 0LL;
      }
    }

    else
    {
      uint64_t result = 0LL;
      if (BYTE6(a3) == 2 || ((a1 & 0x1000000000000LL) == 0) == (HIWORD(a3) & 1)) {
        return result;
      }
    }

    unint64_t v6 = HIBYTE(a3);
    if (HIBYTE(a1) == 2)
    {
      if ((_DWORD)v6 != 2) {
        return 0LL;
      }
    }

    else
    {
      uint64_t result = 0LL;
      BOOL v7 = (a1 & 0x100000000000000LL) == 0;
      if ((_DWORD)v6 == 2 || ((v7 ^ HIBYTE(a3) & 1) & 1) == 0) {
        return result;
      }
    }

    if (a2 == 2)
    {
    }

    else
    {
      uint64_t result = 0LL;
    }

    if ((a2 & 0xFF00) == 0x200)
    {
      if (BYTE1(a4) != 2) {
        return 0LL;
      }
    }

    else
    {
      uint64_t result = 0LL;
    }

    if ((a2 & 0xFF0000) == 0x20000)
    {
      if (BYTE2(a4) != 2) {
        return 0LL;
      }
LABEL_40:
      unsigned int v8 = HIBYTE(a4);
      if (HIBYTE(a2) == 2)
      {
        if (v8 == 2) {
          return 1LL;
        }
      }

      else if (v8 != 2 && ((((a2 & 0x1000000) == 0) ^ ((a4 & 0x1000000) >> 24)) & 1) != 0)
      {
        return 1LL;
      }

      return 0LL;
    }

    uint64_t result = 0LL;
    if (BYTE2(a4) != 2 && ((((a2 & 0x10000) == 0) ^ ((a4 & 0x10000) >> 16)) & 1) != 0) {
      goto LABEL_40;
    }
  }

  return result;
}

uint64_t sub_1002F60A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a2 + 2);
  BOOL v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL), uint64_t result = 0LL, (v9 & 1) != 0))
  {
    uint64_t v11 = *((void *)a1 + 3);
    uint64_t v12 = *((void *)a1 + 4);
    uint64_t v13 = *((void *)a2 + 3);
    uint64_t v14 = *((void *)a2 + 4);
    BOOL v15 = v11 == v13 && v12 == v14;
    if (v15
      || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0LL), uint64_t result = 0LL, (v16 & 1) != 0))
    {
      uint64_t v17 = *((void *)a1 + 6);
      uint64_t v18 = *((void *)a2 + 6);
      if (v17)
      {
        if (v18)
        {
          uint64_t v19 = *((void *)a1 + 5);
          uint64_t v20 = *((void *)a2 + 5);
          if (v19 != v20 || v17 != v18)
          {
            char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v17, v20, v18, 0LL);
            uint64_t result = 0LL;
            if ((v21 & 1) == 0) {
              return result;
            }
          }

uint64_t sub_1002F61AC(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL), uint64_t result = 0LL, (v8 & 1) != 0))
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = a1[3];
    uint64_t v12 = a2[2];
    uint64_t v13 = a2[3];
    BOOL v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0LL), uint64_t result = 0LL, (v15 & 1) != 0))
    {
      uint64_t v16 = a1[4];
      uint64_t v17 = a1[5];
      uint64_t v18 = a2[4];
      uint64_t v19 = a2[5];
      if (v16 == v18 && v17 == v19) {
        return 1LL;
      }
      else {
        return _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0LL);
      }
    }
  }

  return result;
}

uint64_t sub_1002F624C(uint64_t a1, uint64_t a2)
{
  if ((static URL.== infix(_:_:)(a1, a2) & 1) != 0
    && (uint64_t v4 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0LL),
        (static URL.== infix(_:_:)(a1 + v4[5], a2 + v4[5]) & 1) != 0)
    && (static URL.== infix(_:_:)(a1 + v4[6], a2 + v4[6]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[7], a2 + v4[7]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[8], a2 + v4[8]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[9], a2 + v4[9]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[10], a2 + v4[10]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[11], a2 + v4[11]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[12], a2 + v4[12]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[13], a2 + v4[13]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[14], a2 + v4[14]) & 1) != 0)
  {
    return static URL.== infix(_:_:)(a1 + v4[15], a2 + v4[15]);
  }

  else
  {
    return 0LL;
  }

BOOL sub_1002F6370(uint64_t a1, uint64_t a2)
{
  uint64_t v137 = type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v132 = (uint64_t)&v128 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v135 = sub_100004AEC(&qword_1009A8A78);
  __chkstk_darwin(v135);
  uint64_t v6 = (char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A6DC8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v133 = (uint64_t)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v139 = (uint64_t)&v128 - v11;
  __chkstk_darwin(v10);
  uint64_t v138 = (uint64_t)&v128 - v12;
  uint64_t v13 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v134 = (uint64_t)&v128 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100004AEC(&qword_1009A8A80);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC(&qword_1009A6DD0);
  uint64_t v20 = __chkstk_darwin(v19);
  int v22 = (char *)&v128 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v20);
  int v25 = (char *)&v128 - v24;
  __chkstk_darwin(v23);
  int v27 = (char *)&v128 - v26;
  __int128 v28 = *(_OWORD *)(a1 + 48);
  v142[2] = *(_OWORD *)(a1 + 32);
  v142[3] = v28;
  uint64_t v143 = *(void *)(a1 + 64);
  __int128 v29 = *(_OWORD *)(a1 + 16);
  v142[0] = *(_OWORD *)a1;
  v142[1] = v29;
  __int128 v30 = *(_OWORD *)(a2 + 48);
  v144[2] = *(_OWORD *)(a2 + 32);
  v144[3] = v30;
  uint64_t v145 = *(void *)(a2 + 64);
  __int128 v31 = *(_OWORD *)(a2 + 16);
  v144[0] = *(_OWORD *)a2;
  v144[1] = v31;
  uint64_t v32 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) == 2LL)
  {
    if (v32 != 2) {
      return 0LL;
    }
  }

  else if (v32 == 2 {
         || (sub_1002F5E6C( *(void *)(a1 + 72) & 0xFFFFFFFF01010101LL,  *(_DWORD *)(a1 + 80),  *(void *)(a2 + 72) & 0xFFFFFFFF01010101LL,  *(_DWORD *)(a2 + 80)) & 1) == 0)
  }
  {
    return 0LL;
  }

  __int128 v131 = v6;
  uint64_t v33 = type metadata accessor for AccessoryInfoResponseContent(0LL);
  uint64_t v34 = *(int *)(v33 + 24);
  uint64_t v128 = a1;
  sub_10001581C(a1 + v34, (uint64_t)v27, &qword_1009A6DD0);
  uint64_t v129 = v33;
  uint64_t v35 = *(int *)(v33 + 24);
  uint64_t v130 = a2;
  sub_10001581C(a2 + v35, (uint64_t)v25, &qword_1009A6DD0);
  uint64_t v36 = (uint64_t)&v18[*(int *)(v16 + 48)];
  sub_10001581C((uint64_t)v27, (uint64_t)v18, &qword_1009A6DD0);
  sub_10001581C((uint64_t)v25, v36, &qword_1009A6DD0);
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v37((uint64_t)v18, 1LL, v13) == 1)
  {
    sub_100015794((uint64_t)v25, &qword_1009A6DD0);
    sub_100015794((uint64_t)v27, &qword_1009A6DD0);
    int v38 = v37(v36, 1LL, v13);
    uint64_t v39 = v139;
    if (v38 == 1)
    {
      sub_100015794((uint64_t)v18, &qword_1009A6DD0);
      goto LABEL_14;
    }

BOOL sub_1002F6F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v93 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v92 = &v85[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_100004AEC(&qword_1009A89C8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v91 = &v85[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v10 = &v85[-v9];
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = &v85[-v14];
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = &v85[-v17];
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = &v85[-v20];
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = &v85[-v23];
  __chkstk_darwin(v22);
  int v27 = &v85[-v26];
  uint64_t v28 = *(void *)(a1 + 8);
  uint64_t v29 = *(void *)(a2 + 8);
  if (v28)
  {
    if (!v29) {
      return 0LL;
    }
    uint64_t v90 = v25;
    if (*(void *)a1 != *(void *)a2 || v28 != v29)
    {
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)a1, v28, *(void *)a2, v29, 0LL);
      BOOL result = 0LL;
      if ((v30 & 1) == 0) {
        return result;
      }
    }
  }

  else
  {
    uint64_t v90 = v25;
    if (v29) {
      return 0LL;
    }
  }

  uint64_t v32 = *(void *)(a1 + 16);
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = *(void *)(a2 + 16);
  uint64_t v35 = *(void *)(a2 + 24);
  if (v32 == v34 && v33 == v35
    || (v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v34, v35, 0LL), BOOL result = 0LL, (v36 & 1) != 0))
  {
    if ((uint64_t v37 = *(void *)(a1 + 32),
          uint64_t v38 = *(void *)(a1 + 40),
          uint64_t v39 = *(void *)(a2 + 32),
          uint64_t v40 = *(void *)(a2 + 40),
          v37 == v39)
      && v38 == v40
      || (v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0LL), BOOL result = 0LL, (v41 & 1) != 0))
    {
      char v42 = *(_BYTE *)(a2 + 49);
      if ((*(_BYTE *)(a1 + 49) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + 49)) {
          return 0LL;
        }
      }

      else
      {
        if ((v42 & 1) != 0) {
          return 0LL;
        }
      }

      if (*(void *)(a1 + 56) != *(void *)(a2 + 56)) {
        return 0LL;
      }
      char v43 = *(_BYTE *)(a2 + 72);
      if ((*(_BYTE *)(a1 + 72) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + 72)) {
          return 0LL;
        }
      }

      else
      {
        if (*(void *)(a1 + 64) != *(void *)(a2 + 64)) {
          char v43 = 1;
        }
        if ((v43 & 1) != 0) {
          return 0LL;
        }
      }

      uint64_t v88 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
      sub_10001581C(a1 + *(int *)(v88 + 40), (uint64_t)v27, (uint64_t *)&unk_1009A34D0);
      sub_10001581C(a2 + *(int *)(v88 + 40), (uint64_t)v24, (uint64_t *)&unk_1009A34D0);
      char v89 = &v10[*(int *)(v6 + 48)];
      sub_10001581C((uint64_t)v27, (uint64_t)v10, (uint64_t *)&unk_1009A34D0);
      sub_10001581C((uint64_t)v24, (uint64_t)v89, (uint64_t *)&unk_1009A34D0);
      uint64_t v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
      if (v87((uint64_t)v10, 1LL, v4) == 1)
      {
        sub_100015794((uint64_t)v24, (uint64_t *)&unk_1009A34D0);
        sub_100015794((uint64_t)v27, (uint64_t *)&unk_1009A34D0);
        sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009A34D0);
      }

      else
      {
        sub_10001581C((uint64_t)v10, (uint64_t)v21, (uint64_t *)&unk_1009A34D0);
        if (v87((uint64_t)v89, 1LL, v4) == 1)
        {
          sub_100015794((uint64_t)v24, (uint64_t *)&unk_1009A34D0);
          sub_100015794((uint64_t)v27, (uint64_t *)&unk_1009A34D0);
          (*(void (**)(_BYTE *, uint64_t))(v93 + 8))(v21, v4);
          goto LABEL_38;
        }

        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v93 + 32))(v92, v89, v4);
        uint64_t v44 = sub_100007864( &qword_1009A89D0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        int v86 = dispatch thunk of static Equatable.== infix(_:_:)(v21, v92, v4, v44);
        char v89 = *(_BYTE **)(v93 + 8);
        ((void (*)(_BYTE *, uint64_t))v89)(v92, v4);
        sub_100015794((uint64_t)v24, (uint64_t *)&unk_1009A34D0);
        sub_100015794((uint64_t)v27, (uint64_t *)&unk_1009A34D0);
        ((void (*)(_BYTE *, uint64_t))v89)(v21, v4);
        sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009A34D0);
        if ((v86 & 1) == 0) {
          return 0LL;
        }
      }

      uint64_t v45 = (int *)v88;
      sub_10001581C(a1 + *(int *)(v88 + 44), (uint64_t)v18, (uint64_t *)&unk_1009A34D0);
      sub_10001581C(a2 + v45[11], (uint64_t)v15, (uint64_t *)&unk_1009A34D0);
      uint64_t v10 = v91;
      uint64_t v46 = (uint64_t)&v91[*(int *)(v6 + 48)];
      sub_10001581C((uint64_t)v18, (uint64_t)v91, (uint64_t *)&unk_1009A34D0);
      sub_10001581C((uint64_t)v15, v46, (uint64_t *)&unk_1009A34D0);
      uint64_t v47 = v87;
      if (v87((uint64_t)v10, 1LL, v4) == 1)
      {
        sub_100015794((uint64_t)v15, (uint64_t *)&unk_1009A34D0);
        sub_100015794((uint64_t)v18, (uint64_t *)&unk_1009A34D0);
        if (v47(v46, 1LL, v4) == 1)
        {
          sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009A34D0);
LABEL_42:
          uint64_t v54 = v45[12];
          uint64_t v55 = (double *)(a1 + v54);
          char v56 = *(_BYTE *)(a1 + v54 + 8);
          uint64_t v57 = (double *)(a2 + v54);
          int v58 = *(unsigned __int8 *)(a2 + v54 + 8);
          if ((v56 & 1) != 0)
          {
            if (!v58) {
              return 0LL;
            }
          }

          else
          {
            if (*v55 != *v57) {
              LOBYTE(v58) = 1;
            }
            if ((v58 & 1) != 0) {
              return 0LL;
            }
          }

          uint64_t v59 = v45[13];
          uint64_t v60 = *(void *)(a1 + v59);
          uint64_t v61 = *(void *)(a1 + v59 + 8);
          char v62 = (void *)(a2 + v59);
          uint64_t v63 = v62[1];
          if (v60 != *v62 || v61 != v63)
          {
            char v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, *v62, v63, 0LL);
            BOOL result = 0LL;
            if ((v64 & 1) == 0) {
              return result;
            }
          }

          uint64_t v65 = v45[14];
          uint64_t v66 = *(void **)(a1 + v65);
          uint64_t v67 = *(void **)(a2 + v65);
          if (v66)
          {
            if (!v67 || (sub_100125B04(v66, v67) & 1) == 0) {
              return 0LL;
            }
          }

          else if (v67)
          {
            return 0LL;
          }

          uint64_t v68 = v45[15];
          uint64_t v69 = *(void *)(a1 + v68);
          uint64_t v70 = *(void *)(a1 + v68 + 8);
          uint64_t v71 = (void *)(a2 + v68);
          uint64_t v72 = v71[1];
          if (v69 != *v71 || v70 != v72)
          {
            char v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, *v71, v72, 0LL);
            BOOL result = 0LL;
            if ((v73 & 1) == 0) {
              return result;
            }
          }

          uint64_t v74 = v45[16];
          uint64_t v75 = *(void **)(a1 + v74);
          uint64_t v76 = *(void **)(a2 + v74);
          if (v75)
          {
            if (!v76 || (sub_100125B04(v75, v76) & 1) == 0) {
              return 0LL;
            }
          }

          else if (v76)
          {
            return 0LL;
          }

          uint64_t v77 = v45[17];
          uint64_t v78 = (double *)(a1 + v77);
          char v79 = *(_BYTE *)(a1 + v77 + 16);
          uint64_t v80 = a2 + v77;
          if ((v79 & 1) != 0)
          {
            if (!*(_BYTE *)(v80 + 16)) {
              return 0LL;
            }
          }

          else
          {
            if ((*(_BYTE *)(v80 + 16) & 1) != 0) {
              return 0LL;
            }
            BOOL result = 0LL;
            uint64_t v45 = (int *)v88;
          }

          uint64_t v81 = v45[18];
          char v82 = (double *)(a1 + v81);
          char v83 = *(_BYTE *)(a1 + v81 + 16);
          uint64_t v84 = a2 + v81;
          if ((v83 & 1) == 0) {
            return (*(_BYTE *)(v84 + 16) & 1) == 0 && *v82 == *(double *)v84 && v82[1] == *(double *)(v84 + 8);
          }
          return (*(_BYTE *)(v84 + 16) & 1) != 0;
        }
      }

      else
      {
        uint64_t v48 = v90;
        sub_10001581C((uint64_t)v10, v90, (uint64_t *)&unk_1009A34D0);
        if (v47(v46, 1LL, v4) != 1)
        {
          uint64_t v50 = v92;
          uint64_t v49 = v93;
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v93 + 32))(v92, v46, v4);
          uint64_t v51 = sub_100007864( &qword_1009A89D0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          char v52 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v50, v4, v51);
          uint64_t v53 = *(void (**)(_BYTE *, uint64_t))(v49 + 8);
          v53(v50, v4);
          sub_100015794((uint64_t)v15, (uint64_t *)&unk_1009A34D0);
          sub_100015794((uint64_t)v18, (uint64_t *)&unk_1009A34D0);
          v53((_BYTE *)v48, v4);
          uint64_t v45 = (int *)v88;
          sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009A34D0);
          if ((v52 & 1) == 0) {
            return 0LL;
          }
          goto LABEL_42;
        }

        sub_100015794((uint64_t)v15, (uint64_t *)&unk_1009A34D0);
        sub_100015794((uint64_t)v18, (uint64_t *)&unk_1009A34D0);
        (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v48, v4);
      }

unint64_t sub_1002F777C()
{
  unint64_t result = qword_1009A89E0;
  if (!qword_1009A89E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAC2C, &type metadata for AccessoryInfoResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A89E0);
  }

  return result;
}

uint64_t sub_1002F77C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }

  return result;
}

unint64_t sub_1002F77FC()
{
  unint64_t result = qword_1009A89E8;
  if (!qword_1009A89E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAC04, &type metadata for AccessorySoftwareInfo);
    atomic_store(result, (unint64_t *)&qword_1009A89E8);
  }

  return result;
}

unint64_t sub_1002F7840()
{
  unint64_t result = qword_1009A89F0;
  if (!qword_1009A89F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FABDC, &type metadata for AccessoryInfoCapabilities);
    atomic_store(result, (unint64_t *)&qword_1009A89F0);
  }

  return result;
}

unint64_t sub_1002F7884()
{
  unint64_t result = qword_1009A8A08;
  if (!qword_1009A8A08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA3E0, &type metadata for AccessoryInfoResponseContent.PublicKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8A08);
  }

  return result;
}

unint64_t sub_1002F78C8()
{
  unint64_t result = qword_1009A8A20;
  if (!qword_1009A8A20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FACF4, &type metadata for AccessoryLayoutTemplate);
    atomic_store(result, (unint64_t *)&qword_1009A8A20);
  }

  return result;
}

unint64_t sub_1002F790C()
{
  unint64_t result = qword_1009A8A30;
  if (!qword_1009A8A30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FABB4, &type metadata for AccessorySoftwareInfo);
    atomic_store(result, (unint64_t *)&qword_1009A8A30);
  }

  return result;
}

unint64_t sub_1002F7950()
{
  unint64_t result = qword_1009A8A38;
  if (!qword_1009A8A38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAB8C, &type metadata for AccessoryInfoCapabilities);
    atomic_store(result, (unint64_t *)&qword_1009A8A38);
  }

  return result;
}

unint64_t sub_1002F7994()
{
  unint64_t result = qword_1009A8A50;
  if (!qword_1009A8A50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA3B8, &type metadata for AccessoryInfoResponseContent.PublicKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8A50);
  }

  return result;
}

uint64_t sub_1002F79D8(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100004B78(&qword_1009A8A10);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1002F7A40()
{
  unint64_t result = qword_1009A8A68;
  if (!qword_1009A8A68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FACA4, &type metadata for AccessoryLayoutTemplate);
    atomic_store(result, (unint64_t *)&qword_1009A8A68);
  }

  return result;
}

void *sub_1002F7A84(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[6];
  swift_bridgeObjectRetain(a1[8]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *sub_1002F7ACC(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[8];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_1002F7B14(uint64_t a1, unint64_t a2)
{
  if (a1 == 120 && a2 == 0xE100000000000000LL)
  {
    unint64_t v4 = 0xE100000000000000LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(120LL, 0xE100000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 121 && a2 == 0xE100000000000000LL)
  {
    swift_bridgeObjectRelease(0xE100000000000000LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(121LL, 0xE100000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

double sub_1002F7BD0(void *a1)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A8B88);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  unint64_t v10 = sub_1002FB2FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for Coordinates.CodingKeys,  &type metadata for Coordinates.CodingKeys,  v10,  v8,  v9);
  if (!v1)
  {
    char v15 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&v15, v4);
    double v2 = v11;
    char v14 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v14, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v2;
}

void *sub_1002F7D28(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A8BD8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100012ED8(a1, v7);
  unint64_t v10 = sub_1002FB784();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoResponse.CodingKeys,  &type metadata for AccessoryInfoResponse.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = sub_100004AEC(&qword_1009A8BE8);
    uint64_t v12 = sub_1002FB7C8( &qword_1009A8BF0,  &qword_1009A8BF8,  (uint64_t)&unk_1007FA498,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v16;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v9;
}

uint64_t sub_1002F7E74(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v4 = 0x800000010085D610LL;
    if (a2 == 0x800000010085D610LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010085D610LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x7250796D646E6966LL && a2 == 0xEF6449746375646FLL)
  {
    unint64_t v6 = 0xEF6449746375646FLL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7250796D646E6966LL, 0xEF6449746375646FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v7 = 0x800000010085D630LL;
    if (a2 == 0x800000010085D630LL) {
      goto LABEL_16;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010085D630LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0x6341454C45487369LL && a2 == 0xEF79726F73736563LL)
  {
    unint64_t v8 = 0xEF79726F73736563LL;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6341454C45487369LL, 0xEF79726F73736563LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_22;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v9 = 0x800000010085D650LL;
    if (a2 == 0x800000010085D650LL) {
      goto LABEL_27;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010085D650LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_27:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x800000010085D670LL)
  {
    unint64_t v10 = 0x800000010085D670LL;
LABEL_33:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x800000010085D670LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_33;
  }

  if (a1 == 0x6E6564646968LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v11 = 0xE600000000000000LL;
LABEL_39:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6564646968LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_39;
  }

  if (a1 == 0x6761547269417369LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v12 = 0xE800000000000000LL;
LABEL_45:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6761547269417369LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_45;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x800000010085D690LL)
  {
    unint64_t v13 = 0x800000010085D690LL;
LABEL_51:
    swift_bridgeObjectRelease(v13);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010085D690LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_51;
  }

  if (a1 == 0x5565636166727573LL && a2 == 0xE900000000000074LL)
  {
    unint64_t v14 = 0xE900000000000074LL;
LABEL_57:
    swift_bridgeObjectRelease(v14);
    return 9LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5565636166727573LL, 0xE900000000000074LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_57;
  }

  if (a1 == 0x496B726F7774656ELL && a2 == 0xE900000000000064LL)
  {
    unint64_t v15 = 0xE900000000000064LL;
LABEL_63:
    swift_bridgeObjectRelease(v15);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496B726F7774656ELL, 0xE900000000000064LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_63;
  }

  if (a1 == 0x70756B6F6F4C6E73LL && a2 == 0xEB000000006C7255LL)
  {
    swift_bridgeObjectRelease(0xEB000000006C7255LL);
    return 11LL;
  }

  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x70756B6F6F4C6E73LL, 0xEB000000006C7255LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0) {
      return 11LL;
    }
    else {
      return 12LL;
    }
  }

uint64_t sub_1002F837C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A8BA8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002FB6FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessorySoftwareInfo.CodingKeys,  &type metadata for AccessorySoftwareInfo.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v47 = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v5);
  int v35 = v13;
  char v46 = 1;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
  uint64_t v16 = v15;
  uint64_t v34 = v14;
  char v45 = 2;
  swift_bridgeObjectRetain(v15);
  int v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v5);
  char v44 = 3;
  int v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v5);
  char v43 = 4;
  int v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v5);
  char v42 = 5;
  int v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v5);
  char v41 = 6;
  int v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v5);
  char v40 = 7;
  int v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
  char v39 = 8;
  int v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v39, v5);
  char v38 = 9;
  int v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v5);
  char v37 = 10;
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v37, v5);
  uint64_t v25 = v17;
  char v36 = 11;
  swift_bridgeObjectRetain(v17);
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5);
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  uint64_t v20 = v25;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v12;
  *(_BYTE *)(a2 + 8) = v35 & 1;
  *(void *)(a2 + 16) = v34;
  *(void *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = v33;
  *(_BYTE *)(a2 + 33) = v32;
  *(_BYTE *)(a2 + 34) = v31;
  *(_BYTE *)(a2 + 35) = v30;
  *(_BYTE *)(a2 + 36) = v29;
  *(_BYTE *)(a2 + 37) = v28;
  *(_BYTE *)(a2 + 38) = v27;
  *(_BYTE *)(a2 + 39) = v26;
  *(void *)(a2 + 40) = v24;
  *(void *)(a2 + 48) = v20;
  *(void *)(a2 + 56) = v23;
  *(void *)(a2 + 64) = v19;
  return result;
}

uint64_t sub_1002F8774(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E756F5379616C70LL && a2 == 0xE900000000000064LL)
  {
    unint64_t v4 = 0xE900000000000064LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F5379616C70LL, 0xE900000000000064LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 0x6C656363417475LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v6 = 0xE700000000000000LL;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C656363417475LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_12;
  }

  if (a1 == 0x756B6F6F4C63666ELL && a2 == 0xE900000000000070LL)
  {
    unint64_t v7 = 0xE900000000000070LL;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756B6F6F4C63666ELL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_18;
  }

  if (a1 == 0x756B6F6F4C656C62LL && a2 == 0xE900000000000070LL)
  {
    unint64_t v8 = 0xE900000000000070LL;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756B6F6F4C656C62LL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_24;
  }

  if (a1 == 0x65646F4D74736F6CLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v9 = 0xE800000000000000LL;
LABEL_30:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D74736F6CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_30;
  }

  if (a1 == 0x6857796669746F6ELL && a2 == 0xEF646E756F466E65LL)
  {
    unint64_t v10 = 0xEF646E756F466E65LL;
LABEL_36:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6857796669746F6ELL, 0xEF646E756F466E65LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_36;
  }

  if (a1 == 0x7449656D616E6572LL && a2 == 0xEA00000000006D65LL)
  {
    unint64_t v11 = 0xEA00000000006D65LL;
LABEL_42:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7449656D616E6572LL, 0xEA00000000006D65LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_42;
  }

  if (a1 == 0x65676E6172LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v12 = 0xE500000000000000LL;
LABEL_48:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65676E6172LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_48;
  }

  if (a1 == 0x6E69646E69467462LL && a2 == 0xE900000000000067LL)
  {
    unint64_t v13 = 0xE900000000000067LL;
LABEL_54:
    swift_bridgeObjectRelease(v13);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69646E69467462LL, 0xE900000000000067LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_54;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v14 = 0x800000010085D6B0LL;
    if (a2 == 0x800000010085D6B0LL) {
      goto LABEL_59;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000010085D6B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_59:
    swift_bridgeObjectRelease(v14);
    return 9LL;
  }

  if (a1 == 1886544245 && a2 == 0xE400000000000000LL)
  {
    unint64_t v15 = 0xE400000000000000LL;
LABEL_65:
    swift_bridgeObjectRelease(v15);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1886544245LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_65;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x800000010085D6D0LL)
  {
    swift_bridgeObjectRelease(0x800000010085D6D0LL);
    return 11LL;
  }

  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010085D6D0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0) {
      return 11LL;
    }
    else {
      return 12LL;
    }
  }

unint64_t sub_1002F8C64(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A8BB8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_1002FB740();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoCapabilities.CodingKeys,  &type metadata for AccessoryInfoCapabilities.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v36 = 0;
  char v10 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v3);
  char v35 = 1;
  char v11 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v3);
  char v34 = 2;
  char v12 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v3);
  char v33 = 3;
  int v24 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v3);
  char v32 = 4;
  int v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v3);
  char v31 = 5;
  int v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v3);
  char v30 = 6;
  int v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v3);
  char v29 = 7;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v3);
  char v28 = 8;
  v19[3] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v28, v3);
  char v27 = 9;
  v19[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v27, v3);
  char v26 = 10;
  v19[1] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v26, v3);
  char v25 = 11;
  KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v25, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  uint64_t v14 = 256LL;
  if ((v11 & 1) == 0) {
    uint64_t v14 = 0LL;
  }
  unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  uint64_t v16 = 0x10000LL;
  if ((v12 & 1) == 0) {
    uint64_t v16 = 0LL;
  }
  unint64_t v17 = v15 | v16;
  uint64_t v18 = 0x1000000LL;
  if ((v24 & 1) == 0) {
    uint64_t v18 = 0LL;
  }
  return v17 | v18 | ((unint64_t)v23 << 32) | ((unint64_t)v22 << 40) | ((unint64_t)v21 << 48) | (v20 << 56);
}

uint64_t sub_1002F8FB4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E65644974726170LL && a2 == 0xEE00726569666974LL)
  {
    unint64_t v5 = 0xEE00726569666974LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644974726170LL, 0xEE00726569666974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6570795474726170LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795474726170LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x656D614E74726170LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v8 = 0xE800000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E74726170LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x626D795374726170LL && a2 == 0xEA00000000006C6FLL)
  {
    unint64_t v9 = 0xEA00000000006C6FLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x626D795374726170LL, 0xEA00000000006C6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x72616D6972507369LL && a2 == 0xE900000000000079LL)
  {
    swift_bridgeObjectRelease(0xE900000000000079LL);
    return 4LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72616D6972507369LL, 0xE900000000000079LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_1002F920C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A8B78);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002FB2B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryLayoutTemplate.CodingKeys,  &type metadata for AccessoryLayoutTemplate.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v33 = 0;
  char v12 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
  char v32 = 1;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  uint64_t v15 = v14;
  uint64_t v28 = v13;
  char v31 = 2;
  swift_bridgeObjectRetain(v14);
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
  uint64_t v18 = v17;
  uint64_t v25 = v16;
  char v30 = 3;
  swift_bridgeObjectRetain(v17);
  uint64_t v26 = 0LL;
  uint64_t v27 = v18;
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
  char v29 = 4;
  uint64_t v26 = v19;
  swift_bridgeObjectRetain(v19);
  LOBYTE(v18) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  uint64_t v20 = v26;
  swift_bridgeObjectRelease();
  uint64_t v21 = v27;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v12;
  *(void *)(a2 + 8) = v28;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v25;
  *(void *)(a2 + 32) = v21;
  *(void *)(a2 + 40) = v24;
  *(void *)(a2 + 48) = v20;
  *(_BYTE *)(a2 + 56) = v18;
  return result;
}

uint64_t sub_1002F94F4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v4 = 0x800000010085D540LL;
    if (a2 == 0x800000010085D540LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010085D540LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v6 = 0x8000000100851DE0LL;
    if (a2 == 0x8000000100851DE0LL) {
      goto LABEL_10;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100851DE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065LL)
  {
    unint64_t v7 = 0xE900000000000065LL;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6C65646F6DLL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_16;
  }

  if (a1 == 0x5479726574746162LL && a2 == 0xEB00000000657079LL)
  {
    unint64_t v8 = 0xEB00000000657079LL;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5479726574746162LL, 0xEB00000000657079LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_22;
  }

  if (a1 == 0x79726F6765746163LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v9 = 0xE800000000000000LL;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_28;
  }

  if (a1 == 0x52746C7561666564LL && a2 == 0xEB00000000656C6FLL)
  {
    unint64_t v10 = 0xEB00000000656C6FLL;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x52746C7561666564LL, 0xEB00000000656C6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_34;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x800000010085D560LL)
  {
    unint64_t v11 = 0x800000010085D560LL;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010085D560LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_40;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v12 = 0x800000010085D580LL;
    if (a2 == 0x800000010085D580LL) {
      goto LABEL_45;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010085D580LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x800000010085D5A0LL)
  {
    unint64_t v13 = 0x800000010085D5A0LL;
LABEL_51:
    swift_bridgeObjectRelease(v13);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000010085D5A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_51;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x800000010085D130LL)
  {
    unint64_t v14 = 0x800000010085D130LL;
LABEL_57:
    swift_bridgeObjectRelease(v14);
    return 9LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010085D130LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_57;
  }

  if (a1 == 0x726F4D6E7261656CLL && a2 == 0xEE00736D65744965LL)
  {
    unint64_t v15 = 0xEE00736D65744965LL;
LABEL_63:
    swift_bridgeObjectRelease(v15);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F4D6E7261656CLL, 0xEE00736D65744965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_63;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v16 = 0x800000010085D150LL;
    if (a2 == 0x800000010085D150LL) {
      goto LABEL_68;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010085D150LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
LABEL_68:
    swift_bridgeObjectRelease(v16);
    return 11LL;
  }

  if (a1 == 0xD00000000000001ALL && a2 == 0x800000010084DCE0LL)
  {
    unint64_t v17 = 0x800000010084DCE0LL;
LABEL_74:
    swift_bridgeObjectRelease(v17);
    return 12LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010084DCE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
    goto LABEL_74;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v18 = 0x800000010085D5C0LL;
    if (a2 == 0x800000010085D5C0LL) {
      goto LABEL_79;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010085D5C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 13LL;
  }

  if (a1 == 0xD000000000000024LL && a2 == 0x800000010085D5E0LL)
  {
    swift_bridgeObjectRelease(0x800000010085D5E0LL);
    return 14LL;
  }

  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024LL, 0x800000010085D5E0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0) {
      return 14LL;
    }
    else {
      return 15LL;
    }
  }

uint64_t sub_1002F9AF8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x48746C7561666564LL && a2 == 0xEF6E6F63496F7265LL)
  {
    unint64_t v5 = 0xEF6E6F63496F7265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x48746C7561666564LL, 0xEF6E6F63496F7265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4C746C7561666564LL && a2 == 0xEF6E6F6349747369LL)
  {
    unint64_t v7 = 0xEF6E6F6349747369LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C746C7561666564LL, 0xEF6E6F6349747369LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v8 = 0x800000010085D460LL;
    if (a2 == 0x800000010085D460LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010085D460LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v9 = 0x800000010085D480LL;
    if (a2 == 0x800000010085D480LL) {
      goto LABEL_24;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010085D480LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v10 = 0x800000010085D4A0LL;
    if (a2 == 0x800000010085D4A0LL) {
      goto LABEL_29;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010085D4A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v11 = 0x800000010085D4C0LL;
    if (a2 == 0x800000010085D4C0LL) {
      goto LABEL_34;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010085D4C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_34:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if (a1 == 0x726F4D6E7261656CLL && a2 == 0xED00006E6F634965LL)
  {
    unint64_t v12 = 0xED00006E6F634965LL;
LABEL_40:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F4D6E7261656CLL, 0xED00006E6F634965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_40;
  }

  if (a1 == 0xD000000000000019LL && a2 == 0x800000010085D4E0LL)
  {
    unint64_t v13 = 0x800000010085D4E0LL;
LABEL_46:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x800000010085D4E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_46;
  }

  if (a1 == 0x726F4D6E7261656CLL && a2 == 0xEF78326E6F634965LL)
  {
    unint64_t v14 = 0xEF78326E6F634965LL;
LABEL_52:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F4D6E7261656CLL, 0xEF78326E6F634965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_52;
  }

  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v15 = 0x800000010085D500LL;
    if (a2 == 0x800000010085D500LL) {
      goto LABEL_57;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010085D500LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_57:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if (a1 == 0x726F4D6E7261656CLL && a2 == 0xEF78336E6F634965LL)
  {
    unint64_t v16 = 0xEF78336E6F634965LL;
LABEL_63:
    swift_bridgeObjectRelease(v16);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F4D6E7261656CLL, 0xEF78336E6F634965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_63;
  }

  if (a1 == 0xD00000000000001BLL && a2 == 0x800000010085D520LL)
  {
    swift_bridgeObjectRelease(0x800000010085D520LL);
    return 11LL;
  }

  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010085D520LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0) {
      return 11LL;
    }
    else {
      return 12LL;
    }
  }

uint64_t sub_1002FA038(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x707972636E453165LL && a2 == 0xEC0000006E6F6974LL)
  {
    unint64_t v5 = 0xEC0000006E6F6974LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707972636E453165LL, 0xEC0000006E6F6974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x707972636E453265LL && a2 == 0xEC0000006E6F6974LL)
  {
    unint64_t v7 = 0xEC0000006E6F6974LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707972636E453265LL, 0xEC0000006E6F6974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6966697265563273LL && a2 == 0xEE006E6F69746163LL)
  {
    swift_bridgeObjectRelease(0xEE006E6F69746163LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6966697265563273LL, 0xEE006E6F69746163LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1002FA1C0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A8A90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002FA3F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys,  &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v30 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  uint64_t v14 = v13;
  uint64_t v27 = v12;
  char v29 = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
  uint64_t v17 = v16;
  uint64_t v25 = v15;
  char v28 = 2;
  swift_bridgeObjectRetain(v16);
  uint64_t v26 = v17;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  uint64_t v20 = v19;
  uint64_t v21 = v18;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  uint64_t v22 = v26;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v27;
  a2[1] = v14;
  a2[2] = v25;
  a2[3] = v22;
  a2[4] = v21;
  a2[5] = v20;
  return result;
}

unint64_t sub_1002FA3F4()
{
  unint64_t result = qword_1009A8A98;
  if (!qword_1009A8A98)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FAB3C,  &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8A98);
  }

  return result;
}

unint64_t sub_1002FA438()
{
  unint64_t result = qword_1009A8AB0;
  if (!qword_1009A8AB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAAEC, &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8AB0);
  }

  return result;
}

unint64_t sub_1002FA47C()
{
  unint64_t result = qword_1009A8AD8;
  if (!qword_1009A8AD8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FAA9C,  &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8AD8);
  }

  return result;
}

unint64_t sub_1002FA4C0()
{
  unint64_t result = qword_1009A8AE0;
  if (!qword_1009A8AE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FACCC, &type metadata for Coordinates);
    atomic_store(result, (unint64_t *)&qword_1009A8AE0);
  }

  return result;
}

unint64_t sub_1002FA504()
{
  unint64_t result = qword_1009A8AF0;
  if (!qword_1009A8AF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAC7C, &type metadata for Coordinates);
    atomic_store(result, (unint64_t *)&qword_1009A8AF0);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoResponseContent.Configuration.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }

uint64_t storeEnumTagSinglePayload for AccessoryInfoResponseContent.Configuration.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF1) {
    return ((uint64_t (*)(void))((char *)&loc_1002FA624 + 4 * byte_1007FA055[v4]))();
  }
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1002FA658 + 4 * byte_1007FA050[v4]))();
}

uint64_t sub_1002FA658(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FA660(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002FA668LL);
  }
  return result;
}

uint64_t sub_1002FA674(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002FA67CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 14;
  return result;
}

uint64_t sub_1002FA680(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FA688(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.Configuration.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.Assets.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoResponseContent.PublicKeys.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1002FA708 + 4 * byte_1007FA05F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1002FA73C + 4 * byte_1007FA05A[v4]))();
}

uint64_t sub_1002FA73C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FA744(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002FA74CLL);
  }
  return result;
}

uint64_t sub_1002FA758(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002FA760LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1002FA764(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FA76C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.PublicKeys.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoResponseContent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1002FA7D4 + 4 * byte_1007FA069[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1002FA808 + 4 * byte_1007FA064[v4]))();
}

uint64_t sub_1002FA808(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FA810(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002FA818LL);
  }
  return result;
}

uint64_t sub_1002FA824(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002FA82CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1002FA830(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FA838(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.CodingKeys;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponse()
{
  return &type metadata for AccessoryInfoResponse;
}

uint64_t destroy for AccessoryLayoutTemplate(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryLayoutTemplate(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryLayoutTemplate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryLayoutTemplate()
{
  return &type metadata for AccessoryLayoutTemplate;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessoryInfoCapabilities(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoCapabilities(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && a1[12]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoCapabilities( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 12) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 12) = 0;
    }
    if (a2) {
      *(_BYTE *)__n128 result = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoCapabilities()
{
  return &type metadata for AccessoryInfoCapabilities;
}

uint64_t destroy for AccessorySoftwareInfo(void *a1)
{
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for AccessorySoftwareInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AccessorySoftwareInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_BYTE *)(a1 + 34) = *((_BYTE *)a2 + 34);
  *(_BYTE *)(a1 + 35) = *((_BYTE *)a2 + 35);
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
  *(_BYTE *)(a1 + 37) = *((_BYTE *)a2 + 37);
  *(_BYTE *)(a1 + 38) = *((_BYTE *)a2 + 38);
  *(_BYTE *)(a1 + 39) = *((_BYTE *)a2 + 39);
  *(void *)(a1 + 40) = a2[5];
  uint64_t v7 = a2[6];
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 56) = a2[7];
  uint64_t v9 = a2[8];
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for AccessorySoftwareInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AccessorySoftwareInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessorySoftwareInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessorySoftwareInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessorySoftwareInfo()
{
  return &type metadata for AccessorySoftwareInfo;
}

ValueMetadata *type metadata accessor for Coordinates()
{
  return &type metadata for Coordinates;
}

unint64_t sub_1002FAE3C()
{
  unint64_t result = qword_1009A8AF8;
  if (!qword_1009A8AF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA5A4, &type metadata for Coordinates);
    atomic_store(result, (unint64_t *)&qword_1009A8AF8);
  }

  return result;
}

unint64_t sub_1002FAE84()
{
  unint64_t result = qword_1009A8B00;
  if (!qword_1009A8B00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA60C, &type metadata for AccessorySoftwareInfo);
    atomic_store(result, (unint64_t *)&qword_1009A8B00);
  }

  return result;
}

unint64_t sub_1002FAECC()
{
  unint64_t result = qword_1009A8B08;
  if (!qword_1009A8B08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA674, &type metadata for AccessoryInfoCapabilities);
    atomic_store(result, (unint64_t *)&qword_1009A8B08);
  }

  return result;
}

unint64_t sub_1002FAF14()
{
  unint64_t result = qword_1009A8B10;
  if (!qword_1009A8B10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA6DC, &type metadata for AccessoryLayoutTemplate);
    atomic_store(result, (unint64_t *)&qword_1009A8B10);
  }

  return result;
}

unint64_t sub_1002FAF5C()
{
  unint64_t result = qword_1009A8B18;
  if (!qword_1009A8B18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA824, &type metadata for AccessoryInfoResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B18);
  }

  return result;
}

unint64_t sub_1002FAFA4()
{
  unint64_t result = qword_1009A8B20;
  if (!qword_1009A8B20)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FA8DC,  &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B20);
  }

  return result;
}

unint64_t sub_1002FAFEC()
{
  unint64_t result = qword_1009A8B28;
  if (!qword_1009A8B28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA994, &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B28);
  }

  return result;
}

unint64_t sub_1002FB034()
{
  unint64_t result = qword_1009A8B30;
  if (!qword_1009A8B30)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FAA4C,  &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B30);
  }

  return result;
}

unint64_t sub_1002FB07C()
{
  unint64_t result = qword_1009A8B38;
  if (!qword_1009A8B38)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FA9BC,  &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B38);
  }

  return result;
}

unint64_t sub_1002FB0C4()
{
  unint64_t result = qword_1009A8B40;
  if (!qword_1009A8B40)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FA9E4,  &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B40);
  }

  return result;
}

unint64_t sub_1002FB10C()
{
  unint64_t result = qword_1009A8B48;
  if (!qword_1009A8B48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA904, &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B48);
  }

  return result;
}

unint64_t sub_1002FB154()
{
  unint64_t result = qword_1009A8B50;
  if (!qword_1009A8B50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA92C, &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B50);
  }

  return result;
}

unint64_t sub_1002FB19C()
{
  unint64_t result = qword_1009A8B58;
  if (!qword_1009A8B58)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FA84C,  &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B58);
  }

  return result;
}

unint64_t sub_1002FB1E4()
{
  unint64_t result = qword_1009A8B60;
  if (!qword_1009A8B60)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FA874,  &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B60);
  }

  return result;
}

unint64_t sub_1002FB22C()
{
  unint64_t result = qword_1009A8B68;
  if (!qword_1009A8B68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA794, &type metadata for AccessoryInfoResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B68);
  }

  return result;
}

unint64_t sub_1002FB274()
{
  unint64_t result = qword_1009A8B70;
  if (!qword_1009A8B70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FA7BC, &type metadata for AccessoryInfoResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B70);
  }

  return result;
}

unint64_t sub_1002FB2B8()
{
  unint64_t result = qword_1009A8B80;
  if (!qword_1009A8B80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB1F4, &type metadata for AccessoryLayoutTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B80);
  }

  return result;
}

unint64_t sub_1002FB2FC()
{
  unint64_t result = qword_1009A8B90;
  if (!qword_1009A8B90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB1A4, &type metadata for Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8B90);
  }

  return result;
}

uint64_t sub_1002FB340(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6572617774666F73LL && a2 == 0xEC0000006F666E49LL)
  {
    unint64_t v5 = 0xEC0000006F666E49LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6572617774666F73LL, 0xEC0000006F666E49LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x696C696261706163LL && a2 == 0xEC00000073656974LL)
  {
    unint64_t v7 = 0xEC00000073656974LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163LL, 0xEC00000073656974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x72756769666E6F63LL && a2 == 0xED00006E6F697461LL)
  {
    unint64_t v8 = 0xED00006E6F697461LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72756769666E6F63LL, 0xED00006E6F697461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x737465737361LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v9 = 0xE600000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737465737361LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v10 = 0xE700000000000000LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0x654B63696C627570LL && a2 == 0xEA00000000007379LL)
  {
    unint64_t v11 = 0xEA00000000007379LL;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B63696C627570LL, 0xEA00000000007379LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_38;
  }

  if (a1 == 0x737574617473LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v12 = 0xE600000000000000LL;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_44;
  }

  if (a1 == 0x655474756F79616CLL && a2 == 0xEE006574616C706DLL)
  {
    swift_bridgeObjectRelease(0xEE006574616C706DLL);
    return 7LL;
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x655474756F79616CLL, 0xEE006574616C706DLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0) {
      return 7LL;
    }
    else {
      return 8LL;
    }
  }

unint64_t sub_1002FB6FC()
{
  unint64_t result = qword_1009A8BB0;
  if (!qword_1009A8BB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB154, &type metadata for AccessorySoftwareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8BB0);
  }

  return result;
}

unint64_t sub_1002FB740()
{
  unint64_t result = qword_1009A8BC0;
  if (!qword_1009A8BC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB104, &type metadata for AccessoryInfoCapabilities.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8BC0);
  }

  return result;
}

unint64_t sub_1002FB784()
{
  unint64_t result = qword_1009A8BE0;
  if (!qword_1009A8BE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB0B4, &type metadata for AccessoryInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8BE0);
  }

  return result;
}

uint64_t sub_1002FB7C8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100004B78(&qword_1009A8BE8);
    sub_100007864(a2, type metadata accessor for AccessoryInfoResponseContent, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1002FB88C + 4 * byte_1007FA06E[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1002FB8AC + 4 * byte_1007FA073[v4]))();
  }
}

_BYTE *sub_1002FB88C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1002FB8AC(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1002FB8B4(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1002FB8BC(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1002FB8C4(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1002FB8CC(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponse.CodingKeys()
{
  return &type metadata for AccessoryInfoResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for AccessoryInfoCapabilities.CodingKeys()
{
  return &type metadata for AccessoryInfoCapabilities.CodingKeys;
}

uint64_t _s12searchpartyd28AccessoryInfoResponseContentV6AssetsV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_1002FB944 + 4 * byte_1007FA07D[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1002FB978 + 4 * byte_1007FA078[v4]))();
}

uint64_t sub_1002FB978(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FB980(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002FB988LL);
  }
  return result;
}

uint64_t sub_1002FB994(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002FB99CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_1002FB9A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FB9A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessorySoftwareInfo.CodingKeys()
{
  return &type metadata for AccessorySoftwareInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Coordinates.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1002FBA10 + 4 * byte_1007FA087[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002FBA44 + 4 * byte_1007FA082[v4]))();
}

uint64_t sub_1002FBA44(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FBA4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002FBA54LL);
  }
  return result;
}

uint64_t sub_1002FBA60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002FBA68LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1002FBA6C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FBA74(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Coordinates.CodingKeys()
{
  return &type metadata for Coordinates.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryLayoutTemplate.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1002FBADC + 4 * byte_1007FA091[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1002FBB10 + 4 * byte_1007FA08C[v4]))();
}

uint64_t sub_1002FBB10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FBB18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002FBB20LL);
  }
  return result;
}

uint64_t sub_1002FBB2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002FBB34LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1002FBB38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002FBB40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLayoutTemplate.CodingKeys()
{
  return &type metadata for AccessoryLayoutTemplate.CodingKeys;
}

unint64_t sub_1002FBB60()
{
  unint64_t result = qword_1009A8C18;
  if (!qword_1009A8C18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FADAC, &type metadata for AccessoryLayoutTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C18);
  }

  return result;
}

unint64_t sub_1002FBBA8()
{
  unint64_t result = qword_1009A8C20;
  if (!qword_1009A8C20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAE64, &type metadata for Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C20);
  }

  return result;
}

unint64_t sub_1002FBBF0()
{
  unint64_t result = qword_1009A8C28;
  if (!qword_1009A8C28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAF1C, &type metadata for AccessorySoftwareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C28);
  }

  return result;
}

unint64_t sub_1002FBC38()
{
  unint64_t result = qword_1009A8C30;
  if (!qword_1009A8C30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAFD4, &type metadata for AccessoryInfoCapabilities.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C30);
  }

  return result;
}

unint64_t sub_1002FBC80()
{
  unint64_t result = qword_1009A8C38;
  if (!qword_1009A8C38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB08C, &type metadata for AccessoryInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C38);
  }

  return result;
}

unint64_t sub_1002FBCC8()
{
  unint64_t result = qword_1009A8C40;
  if (!qword_1009A8C40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAFFC, &type metadata for AccessoryInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C40);
  }

  return result;
}

unint64_t sub_1002FBD10()
{
  unint64_t result = qword_1009A8C48;
  if (!qword_1009A8C48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB024, &type metadata for AccessoryInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C48);
  }

  return result;
}

unint64_t sub_1002FBD58()
{
  unint64_t result = qword_1009A8C50;
  if (!qword_1009A8C50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAF44, &type metadata for AccessoryInfoCapabilities.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C50);
  }

  return result;
}

unint64_t sub_1002FBDA0()
{
  unint64_t result = qword_1009A8C58;
  if (!qword_1009A8C58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAF6C, &type metadata for AccessoryInfoCapabilities.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C58);
  }

  return result;
}

unint64_t sub_1002FBDE8()
{
  unint64_t result = qword_1009A8C60;
  if (!qword_1009A8C60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAE8C, &type metadata for AccessorySoftwareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C60);
  }

  return result;
}

unint64_t sub_1002FBE30()
{
  unint64_t result = qword_1009A8C68;
  if (!qword_1009A8C68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAEB4, &type metadata for AccessorySoftwareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C68);
  }

  return result;
}

unint64_t sub_1002FBE78()
{
  unint64_t result = qword_1009A8C70;
  if (!qword_1009A8C70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FADD4, &type metadata for Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C70);
  }

  return result;
}

unint64_t sub_1002FBEC0()
{
  unint64_t result = qword_1009A8C78;
  if (!qword_1009A8C78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FADFC, &type metadata for Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C78);
  }

  return result;
}

unint64_t sub_1002FBF08()
{
  unint64_t result = qword_1009A8C80;
  if (!qword_1009A8C80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAD1C, &type metadata for AccessoryLayoutTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C80);
  }

  return result;
}

unint64_t sub_1002FBF50()
{
  unint64_t result = qword_1009A8C88;
  if (!qword_1009A8C88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAD44, &type metadata for AccessoryLayoutTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8C88);
  }

  return result;
}

uint64_t sub_1002FBF94()
{
  int64_t v2 = v0[3];
  unint64_t v1 = v0[4];
  int64_t v3 = v2;
  if (!v1)
  {
    int64_t v8 = v2 + 1;
    if (__OFADD__(v2, 1LL)) {
      goto LABEL_26;
    }
    int64_t v9 = (unint64_t)(v0[2] + 64LL) >> 6;
    if (v8 < v9)
    {
      uint64_t v10 = v0[1];
      unint64_t v11 = *(void *)(v10 + 8 * v8);
      if (v11)
      {
LABEL_8:
        uint64_t v4 = (v11 - 1) & v11;
        unint64_t v5 = __clz(__rbit64(v11)) + (v8 << 6);
        int64_t v3 = v8;
        goto LABEL_3;
      }

      int64_t v12 = v2 + 2;
      int64_t v3 = v2 + 1;
      if (v2 + 2 < v9)
      {
        unint64_t v11 = *(void *)(v10 + 8 * v12);
        if (v11)
        {
LABEL_11:
          int64_t v8 = v12;
          goto LABEL_8;
        }

        int64_t v3 = v2 + 2;
        if (v2 + 3 < v9)
        {
          unint64_t v11 = *(void *)(v10 + 8 * (v2 + 3));
          if (v11)
          {
            int64_t v8 = v2 + 3;
            goto LABEL_8;
          }

          int64_t v12 = v2 + 4;
          int64_t v3 = v2 + 3;
          if (v2 + 4 < v9)
          {
            unint64_t v11 = *(void *)(v10 + 8 * v12);
            if (v11) {
              goto LABEL_11;
            }
            int64_t v8 = v2 + 5;
            int64_t v3 = v2 + 4;
            if (v2 + 5 < v9)
            {
              unint64_t v11 = *(void *)(v10 + 8 * v8);
              if (v11) {
                goto LABEL_8;
              }
              int64_t v3 = v9 - 1;
              int64_t v13 = v2 + 6;
              while (v9 != v13)
              {
                unint64_t v11 = *(void *)(v10 + 8 * v13++);
                if (v11)
                {
                  int64_t v8 = v13 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }

    uint64_t v7 = 0LL;
    v0[3] = v3;
    v0[4] = 0LL;
    return v7;
  }

  uint64_t v4 = (v1 - 1) & v1;
  unint64_t v5 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
  uint64_t v6 = *(void *)(*(void *)(*v0 + 48LL) + 16 * v5 + 8);
  v0[3] = v3;
  v0[4] = v4;
  uint64_t v7 = v0[5];
  if (!__OFADD__(v7, 1LL))
  {
    v0[5] = v7 + 1;
    swift_bridgeObjectRetain(v6);
    return v7;
  }

  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1002FC1F4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  swift_release(*(void *)(v0 + 80));
  return v0;
}

uint64_t sub_1002FC248()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for SPObserverAnalytics()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd19SPObserverAnalytics);
}

uint64_t sub_1002FC288(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  sub_100504C28(a1, (uint64_t)v15);
  sub_10001581C((uint64_t)v15, (uint64_t)&v10, (uint64_t *)&unk_1009A9C40);
  if (v11)
  {
    sub_100012EC0(&v10, (uint64_t)v12);
    uint64_t v3 = v13;
    uint64_t v4 = v14;
    unint64_t v5 = sub_100012ED8(v12, v13);
    uint64_t v6 = sub_10054A858((uint64_t)v5, v2, v3, v4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
  }

  else
  {
    sub_100015794((uint64_t)&v10, (uint64_t *)&unk_1009A9C40);
    uint64_t v6 = 0LL;
  }

  type metadata accessor for Transaction(0LL);
  uint64_t v7 = swift_allocObject(&unk_1009501E8, 24LL, 7LL);
  *(void *)(v7 + 16) = v6;
  int64_t v8 = v6;
  static Transaction.asyncTask(name:block:)("MultiConnectionAnalytics", 24LL, 2LL, &unk_1009A8E28, v7);

  swift_release();
  return sub_100015794((uint64_t)v15, (uint64_t *)&unk_1009A9C40);
}

uint64_t sub_1002FC394(_BYTE *a1)
{
  unint64_t v2 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v124 = (uint64_t)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (unint64_t)&v121 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (unint64_t)&v121 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v131 = (uint64_t)&v121 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v143 = (char *)&v121 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v142 = (uint64_t (*)(uint64_t))((char *)&v121 - v17);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v126 = (uint64_t)&v121 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v144 = (char *)&v121 - v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v121 - v22;
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v129 = (uint64_t)&v121 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v123 = (uint64_t)&v121 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v128 = (char *)&v121 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v140 = (char *)&v121 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v125 = (uint64_t)&v121 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v132 = (uint64_t)&v121 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v137 = (uint64_t)&v121 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v133 = (uint64_t)&v121 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  char v43 = (uint64_t (*)(uint64_t))((char *)&v121 - v42);
  __chkstk_darwin(v41);
  uint64_t v146 = v3;
  char v44 = *(void (**)(void))(v3 + 56);
  uint64_t v141 = (uint64_t)&v121 - v45;
  uint64_t v138 = v44;
  v44();
  if (qword_10099B300 != -1) {
    goto LABEL_83;
  }
  while (1)
  {
    uint64_t v46 = qword_100A2A6C8;
    uint64_t v136 = objc_autoreleasePoolPush();
    uint64_t v139 = sub_100004AEC((uint64_t *)&unk_1009AF790);
    OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v46, v139);
    char v47 = v149;
    uint64_t v48 = v149[2];
    unint64_t v145 = v2;
    uint64_t v127 = a1;
    uint64_t v134 = v43;
    if (!v48) {
      goto LABEL_15;
    }
    unint64_t v49 = sub_10030D124((uint64_t)a1);
    if ((v50 & 1) != 0)
    {
      uint64_t v51 = *(void *)(v47[7] + 8 * v49);
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRelease();
      char v52 = sub_1002FF0C8( v51,  &qword_1009A60C8,  (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_100301504);
      swift_bridgeObjectRelease();
      sub_1002FFE1C((uint64_t)v52);
      char v43 = v53;
      swift_release();
      uint64_t v54 = _swiftEmptyArrayStorage;
      v149 = _swiftEmptyArrayStorage;
      a1 = (_BYTE *)*((void *)v43 + 2);
      if (a1)
      {
        uint64_t v135 = 0LL;
        unint64_t v121 = v11;
        unint64_t v122 = v8;
        unint64_t v11 = 0LL;
        while (v11 < *((void *)v43 + 2))
        {
          unint64_t v55 = (*(unsigned __int8 *)(v146 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
          uint64_t v56 = *(void *)(v146 + 72);
          sub_10001DC4C((uint64_t)v43 + v55 + v56 * v11, (uint64_t)v23, type metadata accessor for BeaconObservation);
          if (v23[*(int *)(v2 + 24)] == 33)
          {
            sub_10002218C((uint64_t)v23, (uint64_t)v144, type metadata accessor for BeaconObservation);
            if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0) {
              sub_100032AA8(0, v54[2] + 1LL, 1);
            }
            uint64_t v54 = v149;
            unint64_t v8 = v149[2];
            unint64_t v57 = v149[3];
            if (v8 >= v57 >> 1)
            {
              sub_100032AA8(v57 > 1, v8 + 1, 1);
              uint64_t v54 = v149;
            }

            v54[2] = v8 + 1;
            sub_10002218C((uint64_t)v144, (uint64_t)v54 + v55 + v8 * v56, type metadata accessor for BeaconObservation);
            unint64_t v2 = v145;
          }

          else
          {
            sub_100303000((uint64_t)v23);
          }

          if (a1 == (_BYTE *)++v11)
          {
            uint64_t v54 = v149;
            unint64_t v8 = v122;
            unint64_t v11 = v121;
            goto LABEL_17;
          }
        }

        __break(1u);
        goto LABEL_81;
      }

uint64_t sub_1002FD2B8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(sub_1002FD2D0, 0LL, 0LL);
}

uint64_t sub_1002FD2D0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = type metadata accessor for AnalyticsEvent(0LL);
  uint64_t v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(void *)(v0 + 24) = v3;
  swift_defaultActor_initialize(v3);
  unint64_t v4 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v3 + 14) = v4;
  UUID.init()(v4);
  uint64_t v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v7(v5, 1LL, 1LL, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v6);
  *((void *)v3 + 15) = 0xD00000000000003DLL;
  *((void *)v3 + 16) = 0x800000010085BB30LL;
  id v8 = v1;
  return swift_task_switch(sub_1002FD3D4, v3, 0LL);
}

uint64_t sub_1002FD3D4()
{
  return swift_task_switch(sub_10029A980, 0LL, 0LL);
}

id sub_1002FD43C(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A0E28);
  uint64_t inited = swift_initStackObject(v6, v51);
  *(_OWORD *)(inited + 16) = xmmword_1007E4750;
  *(void *)(inited + 32) = 0xD000000000000016LL;
  *(void *)(inited + 40) = 0x800000010085BB70LL;
  sub_100022898(0LL, (unint64_t *)&qword_1009A9C80, &OBJC_CLASS___NSNumber_ptr);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
  *(_BYTE *)(inited + 56) = 0;
  *(void *)(inited + 64) = 0x6E6F697461727564LL;
  *(void *)(inited + 72) = 0xE800000000000000LL;
  *(NSNumber *)(inited + 80) = NSNumber.init(integerLiteral:)(0LL);
  *(_BYTE *)(inited + 88) = 0;
  unint64_t v8 = sub_100412AA4(inited);
  if (!a1) {
    return (id)v8;
  }
  id v9 = a1;
  id result = [v9 systemVersion];
  if (result)
  {
    uint64_t v11 = (uint64_t)result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    unint64_t v50 = v8;
    sub_10005C698(v11, 0, 0xD000000000000013LL, 0x8000000100857290LL, isUniquelyReferenced_nonNull_native);
    unint64_t v13 = v50;
    swift_bridgeObjectRelease();
    id result = [v9 systemVersion];
    if (result)
    {
      uint64_t v14 = (uint64_t)result;
      char v15 = swift_isUniquelyReferenced_nonNull_native(v13);
      unint64_t v50 = v13;
      sub_10005C698(v14, 0, 0xD00000000000001BLL, 0x80000001008572B0LL, v15);
      unint64_t v16 = v50;
      swift_bridgeObjectRelease();
      id v17 = objc_msgSend( objc_allocWithZone(NSNumber),  "initWithInteger:",  objc_msgSend(v9, "batteryLevel"));
      char v18 = swift_isUniquelyReferenced_nonNull_native(v16);
      unint64_t v50 = v16;
      sub_10005C698((uint64_t)v17, 0, 0x4C79726574746162LL, 0xEC0000006C657665LL, v18);
      unint64_t v19 = v50;
      swift_bridgeObjectRelease();
      id v20 = SPBeaconTaskNameBeginLeashing;
      id v21 = [v9 taskInformation];
      type metadata accessor for SPBeaconTaskName(0LL);
      uint64_t v23 = v22;
      uint64_t v24 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
      unint64_t v25 = sub_10030303C();
      uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v21, v23, v24, v25);

      if (*(void *)(v26 + 16) && (uint64_t v27 = sub_10030D388(v20), (v28 & 1) != 0))
      {
        id v29 = *(id *)(*(void *)(v26 + 56) + 8 * v27);

        swift_bridgeObjectRelease();
        [v29 state];
      }

      else
      {

        swift_bridgeObjectRelease();
      }

      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      char v31 = swift_isUniquelyReferenced_nonNull_native(v19);
      unint64_t v50 = v19;
      sub_10005C698((uint64_t)isa, 0, 0x6563697665447369LL, 0xEF6465687361654CLL, v31);
      unint64_t v32 = v50;
      swift_bridgeObjectRelease();
      uint64_t v33 = [v9 connected];
      char v34 = swift_isUniquelyReferenced_nonNull_native(v32);
      unint64_t v50 = v32;
      sub_10005C698(v33, 1, 0xD000000000000011LL, 0x8000000100853CF0LL, v34);
      unint64_t v8 = v50;
      swift_bridgeObjectRelease();
      id v35 = [v9 role];
      if (v35)
      {
        uint64_t v36 = v35;
        id v37 = [v35 role];

        static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        NSString v38 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        char v39 = swift_isUniquelyReferenced_nonNull_native(v8);
        unint64_t v50 = v8;
        sub_10005C698((uint64_t)v38, 0, 1701605234LL, 0xE400000000000000LL, v39);
        unint64_t v8 = v50;
        swift_bridgeObjectRelease();
      }

      id v40 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
      unsigned int v41 = [v40 isInternalBuild];

      if (!v41) {
        goto LABEL_13;
      }
      id v42 = [v9 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

      UUID.uuidString.getter(v43);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      NSString v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v45 = swift_isUniquelyReferenced_nonNull_native(v8);
      unint64_t v50 = v8;
      sub_10005C698((uint64_t)v44, 0, 0x6544646572696170LL, 0xEE00444965636976LL, v45);
      unint64_t v8 = v50;
      swift_bridgeObjectRelease();
      id v46 = [v9 serialNumber];
      if (v46)
      {
        uint64_t v47 = (uint64_t)v46;
        char v48 = swift_isUniquelyReferenced_nonNull_native(v8);
        unint64_t v50 = v8;
        sub_10005C698(v47, 0, 0xD000000000000018LL, 0x8000000100853D10LL, v48);
        unint64_t v8 = v50;

        swift_bridgeObjectRelease();
      }

      else
      {
LABEL_13:
      }

      return (id)v8;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1002FDA1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8)
{
  *(void *)(v8 + 72) = a5;
  *(double *)(v8 + 56) = a7;
  *(double *)(v8 + 64) = a8;
  *(double *)(v8 + 48) = a6;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  return swift_task_switch(sub_1002FDA44, 0LL, 0LL);
}

uint64_t sub_1002FDA44()
{
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = type metadata accessor for AnalyticsEvent(0LL);
  uint64_t v5 = (char *)swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v0[10] = v5;
  swift_defaultActor_initialize(v5);
  unint64_t v6 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v5 + 14) = v6;
  UUID.init()(v6);
  uint64_t v7 = &v5[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v8 = type metadata accessor for DispatchTime(0LL);
  id v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL);
  v9(v7, 1LL, 1LL, v8);
  v9(&v5[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v8);
  *((void *)v5 + 15) = 0xD00000000000002DLL;
  *((void *)v5 + 16) = 0x800000010085D7F0LL;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  id v10 = v1;
  return swift_task_switch(sub_1002FDB68, v5, 0LL);
}

uint64_t sub_1002FDB68()
{
  uint64_t v1 = *(void **)(v0 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_task_switch(sub_1002FDBF4, 0LL, 0LL);
}

uint64_t sub_1002FDBF4()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  uint64_t v2 = swift_allocObject(v1, 112LL, 15LL);
  v0[11] = v2;
  swift_defaultActor_initialize(v2);
  uint64_t v3 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[12] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = (uint64_t *)sub_1002FDC60;
  return sub_100713F88(v0[10]);
}

uint64_t sub_1002FDC60()
{
  return swift_task_switch(sub_1002FDCBC, 0LL, 0LL);
}

uint64_t sub_1002FDCBC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1002FDCEC(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = &v48[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v16 = sub_100004AEC(&qword_1009A0E28);
  uint64_t inited = swift_initStackObject(v16, v48);
  *(_OWORD *)(inited + 16) = xmmword_1007E8280;
  *(void *)(inited + 32) = 0x746341746E657665LL;
  *(void *)(inited + 40) = 0xEB000000006E6F69LL;
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 56) = 0;
  strcpy((char *)(inited + 64), "previousEvent");
  *(_WORD *)(inited + 78) = -4864;
  *(void *)(inited + 80) = String._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0xD000000000000014LL;
  *(void *)(inited + 104) = 0x800000010085D820LL;
  *(void *)(inited + 112) = [objc_allocWithZone(NSNumber) initWithDouble:a1];
  *(_BYTE *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0x6E6F697461727564LL;
  *(void *)(inited + 136) = 0xEF4D4365636E6953LL;
  *(void *)(inited + 144) = [objc_allocWithZone(NSNumber) initWithDouble:a2];
  *(_BYTE *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0xD000000000000017LL;
  *(void *)(inited + 168) = 0x800000010085D840LL;
  *(void *)(inited + 176) = [objc_allocWithZone(NSNumber) initWithDouble:a3];
  *(_BYTE *)(inited + 184) = 0;
  unint64_t v18 = sub_100412AA4(inited);
  if (!a8) {
    return (id)v18;
  }
  id v19 = a8;
  id result = [v19 systemVersion];
  if (result)
  {
    uint64_t v21 = (uint64_t)result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    unint64_t v47 = v18;
    sub_10005C698(v21, 0, 0xD000000000000013LL, 0x8000000100857290LL, isUniquelyReferenced_nonNull_native);
    unint64_t v23 = v47;
    swift_bridgeObjectRelease();
    id result = [v19 systemVersion];
    if (result)
    {
      uint64_t v24 = (uint64_t)result;
      char v25 = swift_isUniquelyReferenced_nonNull_native(v23);
      unint64_t v47 = v23;
      sub_10005C698(v24, 0, 0xD00000000000001BLL, 0x80000001008572B0LL, v25);
      unint64_t v26 = v47;
      swift_bridgeObjectRelease();
      id v27 = SPBeaconTaskNameBeginLeashing;
      id v28 = [v19 taskInformation];
      type metadata accessor for SPBeaconTaskName(0LL);
      uint64_t v30 = v29;
      uint64_t v31 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
      unint64_t v32 = sub_10030303C();
      uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v28, v30, v31, v32);

      if (*(void *)(v33 + 16) && (uint64_t v34 = sub_10030D388(v27), (v35 & 1) != 0))
      {
        id v36 = *(id *)(*(void *)(v33 + 56) + 8 * v34);

        swift_bridgeObjectRelease();
        [v36 state];
      }

      else
      {

        swift_bridgeObjectRelease();
      }

      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      char v38 = swift_isUniquelyReferenced_nonNull_native(v26);
      unint64_t v47 = v26;
      sub_10005C698((uint64_t)isa, 0, 0x6563697665447369LL, 0xEF6465687361654CLL, v38);
      unint64_t v18 = v47;
      swift_bridgeObjectRelease();
      id v39 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
      LODWORD(isa) = [v39 isInternalBuild];

      if (!(_DWORD)isa) {
        goto LABEL_11;
      }
      id v40 = [v19 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

      UUID.uuidString.getter(v41);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      NSString v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v43 = swift_isUniquelyReferenced_nonNull_native(v18);
      unint64_t v47 = v18;
      sub_10005C698((uint64_t)v42, 0, 0x6544646572696170LL, 0xEE00444965636976LL, v43);
      unint64_t v18 = v47;
      swift_bridgeObjectRelease();
      id v44 = [v19 serialNumber];
      if (v44)
      {
        uint64_t v45 = (uint64_t)v44;
        char v46 = swift_isUniquelyReferenced_nonNull_native(v18);
        unint64_t v47 = v18;
        sub_10005C698(v45, 0, 0xD000000000000018LL, 0x8000000100853D10LL, v46);
        unint64_t v18 = v47;

        swift_bridgeObjectRelease();
      }

      else
      {
LABEL_11:
      }

      return (id)v18;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1002FE264(_BYTE *a1)
{
  uint64_t result = type metadata accessor for BeaconObservation(0LL);
  int v3 = a1[*(int *)(result + 24)];
  if (v3 == 30) {
    return sub_1002FC288((uint64_t)a1);
  }
  return result;
}

uint64_t sub_1002FE2BC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    BOOL v7 = 0;
    a3 = 0LL;
    goto LABEL_14;
  }

  if (!a3)
  {
    BOOL v7 = 0;
LABEL_14:
    uint64_t v8 = a4;
LABEL_15:
    *(void *)uint64_t result = a4;
    *(void *)(result + 8) = a5;
    *(void *)(result + 16) = v8;
    *(_BYTE *)(result + 24) = v7;
    return a3;
  }

  if (a3 < 0) {
    goto LABEL_17;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = a4;
  while (1)
  {
    BOOL v7 = v6 == a5;
    if (v6 != a5) {
      break;
    }
    uint64_t v8 = 0LL;
LABEL_8:
    *(void *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5) {
      goto LABEL_15;
    }
    ++v5;
    BOOL v9 = v6 == a5;
    uint64_t v6 = v8;
    if (v9)
    {
      BOOL v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }

  uint64_t v8 = v6 + 1;
  if (v6 != -1) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1002FE348(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4)
{
  if (!a2)
  {
    BOOL v6 = 0;
    a3 = 0LL;
    goto LABEL_14;
  }

  if (!a3)
  {
    BOOL v6 = 0;
LABEL_14:
    unsigned __int8 v7 = a4;
LABEL_15:
    *(_WORD *)uint64_t result = a4;
    *(_BYTE *)(result + 2) = v7;
    *(_BYTE *)(result + 3) = v6;
    return a3;
  }

  if (a3 < 0) {
    goto LABEL_17;
  }
  uint64_t v4 = 0LL;
  unsigned __int8 v5 = a4;
  while (1)
  {
    BOOL v6 = v5 == (unsigned __int16)(a4 & 0xFF00) >> 8;
    unsigned __int8 v7 = 0;
LABEL_8:
    *(_BYTE *)(a2 + v4) = v5;
    if (a3 - 1 == v4) {
      goto LABEL_15;
    }
    ++v4;
    BOOL v8 = v5 == (unsigned __int16)(a4 & 0xFF00) >> 8;
    unsigned __int8 v5 = v7;
    if (v8)
    {
      BOOL v6 = 1;
      a3 = v4;
      goto LABEL_15;
    }
  }

  unsigned __int8 v7 = v5 + 1;
  if (((v5 + 1) & 0x100) == 0) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

void *sub_1002FE3EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100004AEC(&qword_10099D3C8);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  unsigned __int8 v7 = sub_1003010A4(&v10, (uint64_t)(v4 + 4), v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1000A6F30(v8);
  if (v7 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_1002FE4D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100004AEC(&qword_1009A8E58);
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconGroup.PairingState(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  uint64_t result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      _OWORD v8[2] = v1;
      _OWORD v8[3] = 2 * (((uint64_t)result - v7) / v5);
      uint64_t v11 = sub_100301248(&v13, (uint64_t)v8 + v7, v1, a1);
      uint64_t v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_1000A6F30(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_1002FE5EC(uint64_t a1)
{
  return sub_1002FE924(a1, &qword_1009A8E60);
}

void *sub_1002FE5F8(uint64_t a1)
{
  return sub_1002FF0C8( a1,  &qword_1009A60C8,  (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_100301504);
}

void *sub_1002FE60C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  uint64_t result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      _OWORD v8[2] = v1;
      _OWORD v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain(a1);
      uint64_t v11 = sub_1003016FC(&v12, (uint64_t)v8 + v7, v1, a1);
      sub_1000A6F30(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t *sub_1002FE704(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      goto LABEL_5;
    }
    return _swiftEmptyArrayStorage;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v2 = __CocoaDictionary.count.getter(a1);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_5:
  if (v2 <= 0)
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v3 = sub_100004AEC(&qword_1009B0610);
    uint64_t v4 = (uint64_t *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
    int64_t v5 = j__malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    v4[2] = v2;
    v4[3] = (2 * (v6 >> 3)) | 1;
  }

  swift_bridgeObjectRetain(v1);
  uint64_t v7 = sub_100301A4C((uint64_t)&v9, v4 + 4, v2, v1);
  uint64_t result = (uint64_t *)sub_1000A6F30(v9);
  if (v7 == v2) {
    return v4;
  }
  __break(1u);
  return result;
}

void *sub_1002FE7FC(uint64_t a1)
{
  return sub_1002FEA34(a1, (uint64_t *)&unk_1009B12B0, type metadata accessor for OwnedBeaconGroup);
}

void *sub_1002FE810(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = sub_100004AEC(&qword_1009B0610);
      uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      int64_t v5 = j__malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }

    swift_bridgeObjectRetain(v1);
    sub_100187E9C((unint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v7;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    if (v1 < 0) {
      uint64_t v8 = v1;
    }
    else {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

void *sub_1002FE904(uint64_t a1)
{
  return sub_1002FEA34(a1, &qword_10099D448, type metadata accessor for BeaconStatus);
}

void *sub_1002FE918(uint64_t a1)
{
  return sub_1002FE924(a1, (uint64_t *)&unk_1009B1220);
}

void *sub_1002FE924(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100004AEC(a2);
  int64_t v5 = (void *)swift_allocObject(v4, 8 * v2 + 32, 7LL);
  int64_t v6 = j__malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 25;
  }
  _OWORD v5[2] = v2;
  v5[3] = 2 * (v7 >> 3);
  uint64_t v8 = sub_100302300(&v11, v5 + 4, v2, a1);
  uint64_t v9 = v11;
  swift_bridgeObjectRetain(a1);
  sub_1000A6F30(v9);
  if (v8 != (void *)v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v5;
}

uint64_t **sub_1002FEA04(uint64_t a1)
{
  return sub_1002FEF88(a1, &qword_1009A9C70, &OBJC_CLASS___SPUnauthorizedTrackingObservation_ptr, &qword_1009A9D30);
}

void *sub_1002FEA20(uint64_t a1)
{
  return sub_1002FEA34(a1, &qword_10099D4E8, type metadata accessor for RawSearchResult);
}

void *sub_1002FEA34(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = sub_100004AEC(a2);
  uint64_t v7 = *(void *)(a3(0LL) - 8);
  uint64_t v8 = *(void *)(v7 + 72);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 32) & ~v9;
  uint64_t v11 = (void *)swift_allocObject(v6, v10 + v8 * v3, v9 | 7);
  uint64_t result = (void *)j__malloc_size(v11);
  if (v8)
  {
    if ((void *)((char *)result - v10) != (void *)0x8000000000000000LL || v8 != -1)
    {
      v11[2] = v3;
      v11[3] = 2 * (((uint64_t)result - v10) / v8);
      uint64_t v14 = sub_100301D20(&v16, (uint64_t)v11 + v10, v3, a1, a3);
      uint64_t v15 = v16;
      swift_bridgeObjectRetain(a1);
      sub_1000A6F30(v15);
      if (v14 == v3) {
        return v11;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_1002FEB50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100004AEC(&qword_1009B10C0);
  uint64_t v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  uint64_t v7 = sub_100301FD8(&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1000A6F30(v8);
  if (v7 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_1002FEC34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_18;
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v8 = 16 * v5;
  if (v5 <= 0)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (v4 != a3) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t v9 = sub_100004AEC(&qword_10099D3B8);
  uint64_t v10 = (void *)swift_allocObject(v9, v8 + 32, 7LL);
  int64_t v11 = j__malloc_size(v10);
  uint64_t v12 = v11 - 32;
  if (v11 < 32) {
    uint64_t v12 = v11 - 17;
  }
  v10[2] = v5;
  v10[3] = 2 * (v12 >> 4);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

void *sub_1002FEDA4(void *result, unint64_t a2)
{
  uint64_t v3 = (uint64_t)result;
  unint64_t v4 = a2 - (void)result;
  if (a2 < (unint64_t)result)
  {
    if ((uint64_t)((uint64_t)result - a2) < 0)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }

    unint64_t v4 = a2 - (void)result;
LABEL_5:
    uint64_t v5 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
    }

    else
    {
      if (v4 == -1LL) {
        return _swiftEmptyArrayStorage;
      }
      if (v5 <= 0)
      {
        uint64_t v7 = _swiftEmptyArrayStorage;
      }

      else
      {
        uint64_t v6 = sub_100004AEC(&qword_1009B10C0);
        uint64_t v7 = (void *)swift_allocObject(v6, 8 * v5 + 32, 7LL);
        int64_t v8 = j__malloc_size(v7);
        uint64_t v9 = v8 - 32;
        if (v8 < 32) {
          uint64_t v9 = v8 - 25;
        }
        _OWORD v7[2] = v5;
        _OWORD v7[3] = 2 * (v9 >> 3);
      }

      uint64_t result = (void *)sub_1002FE2BC((uint64_t)&v10, (uint64_t)(v7 + 4), v5, v3, a2);
      if (result == (void *)v5) {
        return v7;
      }
    }

    __break(1u);
    goto LABEL_17;
  }

void *sub_1002FEE8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100004AEC(&qword_1009B1460);
  uint64_t v4 = swift_allocObject(v3, v1 + 32, 7LL);
  size_t v5 = j__malloc_size((const void *)v4);
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = 2 * v5 - 64;
  uint64_t v6 = sub_10030216C(&v9, (_BYTE *)(v4 + 32), v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_1000A6F30(v7);
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return (void *)v4;
}

void *sub_1002FEF60(uint64_t a1)
{
  return sub_1002FE924(a1, &qword_1009A7D78);
}

uint64_t **sub_1002FEF6C(uint64_t a1)
{
  return sub_1002FEF88(a1, &qword_1009A0A70, &OBJC_CLASS___SPCBPeripheralManagerSessionKey_ptr, &qword_1009A8E30);
}

uint64_t **sub_1002FEF88(uint64_t a1, unint64_t *a2, void *a3, unint64_t *a4)
{
  uint64_t v7 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
    return (uint64_t **)_swiftEmptyArrayStorage;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v8 = __CocoaSet.count.getter(a1);
  if (!v8) {
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
LABEL_5:
  if (v8 <= 0)
  {
    uint64_t v10 = (uint64_t **)_swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v9 = sub_100004AEC(&qword_1009B0610);
    uint64_t v10 = (uint64_t **)swift_allocObject(v9, 8 * v8 + 32, 7LL);
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = (uint64_t *)v8;
    v10[3] = (uint64_t *)((2 * (v12 >> 3)) | 1);
  }

  swift_bridgeObjectRetain(v7);
  uint64_t v13 = sub_1003026F0(&v15, v10 + 4, v8, v7, a2, a3, a4);
  uint64_t result = (uint64_t **)sub_1000A6F30(v15);
  __break(1u);
  return result;
}

void *sub_1002FF0A8(uint64_t a1)
{
  return sub_1002FF1D4(a1, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_1003024F8);
}

void *sub_1002FF0B4(uint64_t a1)
{
  return sub_1002FF0C8( a1,  &qword_1009A8E38,  (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_1003024F8);
}

void *sub_1002FF0C8( uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = sub_100004AEC(a2);
  uint64_t v7 = (void *)swift_allocObject(v6, 8 * v3 + 32, 7LL);
  int64_t v8 = j__malloc_size(v7);
  uint64_t v9 = v8 - 32;
  if (v8 < 32) {
    uint64_t v9 = v8 - 25;
  }
  _OWORD v7[2] = v3;
  _OWORD v7[3] = 2 * (v9 >> 3);
  uint64_t v10 = a3(&v13, v7 + 4, v3, a1);
  uint64_t v11 = v13;
  swift_bridgeObjectRetain(a1);
  sub_1000A6F30(v11);
  if (v10 != v3)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v7;
}

uint64_t **sub_1002FF1AC(uint64_t a1)
{
  return sub_1002FEF88(a1, &qword_10099E2C0, &OBJC_CLASS___CKRecordZoneID_ptr, &qword_1009A8E50);
}

void *sub_1002FF1C8(uint64_t a1)
{
  return sub_1002FF1D4(a1, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_1003029E8);
}

void *sub_1002FF1D4(uint64_t a1, uint64_t (*a2)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = sub_100004AEC(&qword_1009B0610);
  uint64_t v6 = (void *)swift_allocObject(v5, 8 * v2 + 32, 7LL);
  int64_t v7 = j__malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 25;
  }
  _OWORD v6[2] = v2;
  v6[3] = (2 * (v8 >> 3)) | 1;
  uint64_t v9 = a2(&v12, v6 + 4, v2, a1);
  uint64_t v10 = v12;
  swift_bridgeObjectRetain(a1);
  sub_1000A6F30(v10);
  if (v9 != v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v6;
}

void *sub_1002FF2C0(__int16 a1)
{
  else {
    unint64_t v1 = HIBYTE(a1) - a1;
  }
  uint64_t v2 = v1 + 1;
  if (v1 == -1LL) {
    return _swiftEmptyArrayStorage;
  }
  if (v1 >= 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v5 = sub_100004AEC(&qword_10099D328);
    uint64_t v3 = (void *)swift_allocObject(v5, v1 + 33, 7LL);
    size_t v6 = j__malloc_size(v3);
    v3[2] = v2;
    v3[3] = 2 * v6 - 64;
  }

  uint64_t result = (void *)sub_1002FE348((uint64_t)v8, (uint64_t)(v3 + 4), v2, a1);
  if (result == (void *)v2) {
    return v3;
  }
  __break(1u);
  return result;
}

void *sub_1002FF37C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  uint64_t result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      _OWORD v8[2] = v1;
      _OWORD v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain(a1);
      uint64_t v11 = sub_100302BE0(&v12, (uint64_t)v8 + v7, v1, a1);
      sub_1000A6F30(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1002FF474(uint64_t a1)
{
  uint64_t v117 = a1;
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v1);
  uint64_t v105 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v107 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v103 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A7E78);
  __chkstk_darwin(v5);
  uint64_t v118 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v116 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A8E68);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v102 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v104 = (char *)&v89 - v13;
  uint64_t v106 = sub_100004AEC(&qword_1009A8E70);
  uint64_t v14 = *(void *)(v106 - 8);
  uint64_t v15 = __chkstk_darwin(v106);
  uint64_t v113 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v109 = (uint64_t)&v89 - v17;
  uint64_t v18 = sub_100004AEC(&qword_1009A8E78);
  __chkstk_darwin(v18);
  id v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC(&qword_1009A8E80);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v108 = (uint64_t)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v24);
  uint64_t v93 = (uint64_t)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v26 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v97 = (uint64_t)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100004AEC(&qword_1009A8E88);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v101 = v26;
  uint64_t v31 = *(unsigned __int8 *)(v26 + 80);
  sub_10001581C(v117, (uint64_t)v30, &qword_1009A8E88);
  unint64_t v96 = v30;
  sub_10001581C((uint64_t)v30, (uint64_t)v20, &qword_1009A8E78);
  uint64_t v91 = v22;
  uint64_t v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  unint64_t v32 = _swiftEmptyArrayStorage;
  if (v92(v20, 1LL, v21) != 1)
  {
    uint64_t v98 = 0LL;
    uint64_t v110 = 0LL;
    uint64_t v90 = (v31 + 32) & ~v31;
    double v99 = (char *)_swiftEmptyArrayStorage + v90;
    uint64_t v89 = v31 | 7;
    uint64_t v33 = _swiftEmptyArrayStorage;
    uint64_t v34 = (uint64_t)v104;
    uint64_t v35 = (uint64_t)v105;
    uint64_t v36 = v107;
    uint64_t v111 = v20;
    uint64_t v112 = v3;
    uint64_t v95 = v21;
    while (1)
    {
      uint64_t v100 = v33;
      uint64_t v37 = v108;
      sub_100015750((uint64_t)v20, v108, &qword_1009A8E80);
      uint64_t v117 = v37 + *(int *)(v21 + 40);
      uint64_t v38 = v118;
      sub_10001581C(v117, v118, &qword_1009A7E78);
      uint64_t v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
      if (v115(v38, 1LL, v7) == 1)
      {
        uint64_t v39 = v106;
LABEL_13:
        sub_100015794(v118, &qword_1009A7E78);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v34, 1LL, 1LL, v39);
LABEL_15:
        sub_100015794(v108, &qword_1009A8E80);
        sub_100015794(v34, &qword_1009A8E68);
        uint64_t v56 = (uint64_t)v96;
        sub_100015794((uint64_t)v96, &qword_1009A8E78);
        uint64_t v57 = 1LL;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v56, 1LL, 1LL, v95);
        uint64_t v58 = v93;
      }

      else
      {
        uint64_t v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 32);
        uint64_t v39 = v106;
        while (1)
        {
          uint64_t v40 = v14;
          uint64_t v41 = v114(v9, v118, v7);
          DirectorySequence.next()(v41);
          uint64_t v42 = v112;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v35, 1LL, v36) == 1)
          {
            uint64_t v43 = v116;
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            sub_100015794(v35, (uint64_t *)&unk_1009A34D0);
            uint64_t v44 = v117;
            sub_100015794(v117, &qword_1009A7E78);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1LL, 1LL, v7);
            uint64_t v14 = v40;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v34, 1LL, 1LL, v39);
          }

          else
          {
            uint64_t v45 = v103;
            (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v103, v35, v36);
            char v46 = objc_autoreleasePoolPush();
            uint64_t v47 = v102;
            uint64_t v48 = v110;
            sub_1005428A4((void (*)(void))v45, v108, v102);
            uint64_t v110 = v48;
            uint64_t v36 = v107;
            uint64_t v49 = v46;
            uint64_t v35 = (uint64_t)v105;
            objc_autoreleasePoolPop(v49);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            uint64_t v34 = (uint64_t)v104;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v36);
            uint64_t v50 = v47;
            uint64_t v39 = v106;
            sub_100015750(v50, v34, &qword_1009A8E68);
            uint64_t v14 = v40;
          }

          int v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v34, 1LL, v39);
          uint64_t v52 = (uint64_t)v113;
          if (v51 == 1)
          {
            id v20 = v111;
            goto LABEL_15;
          }

          uint64_t v53 = v109;
          sub_100015750(v34, v109, &qword_1009A8E70);
          sub_100015750(v53, v52, &qword_1009A8E70);
          sub_100015794(v52, &qword_1009A8E70);
          uint64_t v54 = v118;
          sub_10001581C(v117, v118, &qword_1009A7E78);
          int v55 = v115(v54, 1LL, v7);
          id v20 = v111;
          if (v55 == 1) {
            goto LABEL_13;
          }
        }

        sub_100015794(v108, &qword_1009A8E80);
        uint64_t v78 = v52;
        uint64_t v58 = v93;
        sub_10002218C(v78, v93, type metadata accessor for SharedBeaconRecord);
        uint64_t v57 = 0LL;
        id v20 = v111;
      }

      uint64_t v59 = v101;
      uint64_t v60 = v57;
      uint64_t v61 = v94;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v58, v60, 1LL, v94);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v58, 1LL, v61) == 1)
      {
        uint64_t v85 = v98;
        uint64_t v84 = v100;
        goto LABEL_42;
      }

      uint64_t result = sub_10002218C(v58, v97, type metadata accessor for SharedBeaconRecord);
      uint64_t v63 = v98;
      if (v98)
      {
        unint64_t v32 = v100;
        goto LABEL_38;
      }

      unint64_t v64 = v100[3];
      int64_t v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
      if (v65 <= 1) {
        uint64_t v66 = 1LL;
      }
      else {
        uint64_t v66 = v65;
      }
      uint64_t v67 = sub_100004AEC(&qword_1009B1300);
      uint64_t v68 = *(void *)(v101 + 72);
      uint64_t v69 = v90;
      unint64_t v32 = (void *)swift_allocObject(v67, v90 + v68 * v66, v89);
      uint64_t result = j__malloc_size(v32);
      if (!v68) {
        goto LABEL_48;
      }
      uint64_t v70 = result - v69;
      if (result - v69 == 0x8000000000000000LL && v68 == -1) {
        goto LABEL_49;
      }
      uint64_t v72 = v70 / v68;
      v32[2] = v66;
      v32[3] = 2 * (v70 / v68);
      unint64_t v73 = (char *)v32 + v69;
      unint64_t v74 = v100;
      uint64_t v75 = v100[3] >> 1;
      uint64_t v76 = v75 * v68;
      if (v100[2]) {
        break;
      }
LABEL_37:
      double v99 = &v73[v76];
      uint64_t v63 = (v72 & 0x7FFFFFFFFFFFFFFFLL) - v75;
      uint64_t result = swift_release(v74);
      uint64_t v34 = (uint64_t)v104;
      uint64_t v35 = (uint64_t)v105;
LABEL_38:
      uint64_t v36 = v107;
      BOOL v79 = __OFSUB__(v63, 1LL);
      uint64_t v80 = v63 - 1;
      if (v79)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }

      uint64_t v98 = v80;
      uint64_t v81 = (uint64_t)v99;
      sub_10002218C(v97, (uint64_t)v99, type metadata accessor for SharedBeaconRecord);
      double v99 = (char *)(v81 + *(void *)(v101 + 72));
      sub_10001581C((uint64_t)v96, (uint64_t)v20, &qword_1009A8E78);
      uint64_t v21 = v95;
      int v82 = v92(v20, 1LL, v95);
      uint64_t v33 = v32;
      if (v82 == 1) {
        goto LABEL_40;
      }
    }

    uint64_t v77 = (char *)v100 + v69;
    if (v32 < v100 || v73 >= &v77[v76])
    {
      swift_arrayInitWithTakeFrontToBack((char *)v32 + v69, v77, v75, v94);
    }

    else
    {
      if (v32 == v100)
      {
LABEL_36:
        v74[2] = 0LL;
        goto LABEL_37;
      }

      swift_arrayInitWithTakeBackToFront((char *)v32 + v69, v77);
    }

    unint64_t v74 = v100;
    goto LABEL_36;
  }

  uint64_t v98 = 0LL;
LABEL_40:
  sub_100015794((uint64_t)v20, &qword_1009A8E78);
  uint64_t v83 = v93;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v93, 1LL, 1LL, v94);
  uint64_t v84 = v32;
  uint64_t v58 = v83;
  uint64_t v85 = v98;
LABEL_42:
  sub_100015794((uint64_t)v96, &qword_1009A8E88);
  sub_100015794(v58, (uint64_t *)&unk_1009AE470);
  unint64_t v86 = v84[3];
  uint64_t result = (uint64_t)v84;
  if (v86 >= 2)
  {
    unint64_t v87 = v86 >> 1;
    BOOL v79 = __OFSUB__(v87, v85);
    uint64_t v88 = v87 - v85;
    if (v79) {
      goto LABEL_50;
    }
    v84[2] = v88;
  }

  return result;
}

void sub_1002FFE1C(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v51 = (uint64_t)&v47 - v6;
  uint64_t v7 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v52 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  int v55 = _swiftEmptyArrayStorage;
  uint64_t v53 = (uint64_t)_swiftEmptyArrayStorage + v11;
  uint64_t v48 = v10 | 7;
  __n128 v12 = swift_bridgeObjectRetain(a1);
  unint64_t v56 = 0LL;
  uint64_t v54 = 0LL;
  unint64_t v13 = 0LL;
  uint64_t v50 = v11;
LABEL_4:
  unint64_t v16 = *(void *)(a1 + 16);
  if (v13 == v16)
  {
LABEL_36:
    uint64_t v20 = v51;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56))(v51, 1LL, 1LL, v7, v12);
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v43 = v54;
    uint64_t v42 = v55;
    swift_bridgeObjectRelease();
    sub_100015794(v20, (uint64_t *)&unk_1009A5990);
    unint64_t v44 = v42[3];
    if (v44 < 2) {
      return;
    }
    unint64_t v45 = v44 >> 1;
    BOOL v39 = __OFSUB__(v45, v43);
    unint64_t v46 = v45 - v43;
    if (!v39)
    {
      v42[2] = v46;
      return;
    }
  }

  else
  {
    if (v13 < v16)
    {
      while (1)
      {
        uint64_t v17 = *(void *)(a1 + 32 + 8 * v13);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRelease();
        if (v17) {
          break;
        }
LABEL_9:
        ++v13;
        unint64_t v18 = *(void *)(a1 + 16);
        if (v13 == v18) {
          goto LABEL_36;
        }
        if (v13 >= v18) {
          goto LABEL_41;
        }
      }

      unint64_t v14 = *(void *)(v17 + 16);
      if (!v14)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1LL, 1LL, v7);
        sub_100015794((uint64_t)v5, (uint64_t *)&unk_1009A5990);
        goto LABEL_9;
      }

      unint64_t v15 = 0LL;
      ++v13;
      while (1)
      {
        if (v15 >= v14) {
          goto LABEL_42;
        }
        uint64_t v19 = *(void *)(v8 + 72);
        unint64_t v56 = v15;
        uint64_t v49 = v19;
        sub_10001DC4C(v17 + v11 + v19 * v15, (uint64_t)v5, type metadata accessor for BeaconObservation);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0LL, 1LL, v7);
        uint64_t v20 = v51;
        sub_100015750((uint64_t)v5, v51, (uint64_t *)&unk_1009A5990);
        sub_10002218C(v20, v52, type metadata accessor for BeaconObservation);
        uint64_t v22 = v54;
        uint64_t v21 = v55;
        if (!v54) {
          break;
        }
LABEL_34:
        BOOL v39 = __OFSUB__(v22, 1LL);
        uint64_t v40 = v22 - 1;
        if (v39) {
          goto LABEL_43;
        }
        uint64_t v54 = v40;
        ++v56;
        uint64_t v41 = v53;
        sub_10002218C(v52, v53, type metadata accessor for BeaconObservation);
        uint64_t v11 = v50;
        uint64_t v53 = v41 + v49;
        int v55 = v21;
        unint64_t v14 = *(void *)(v17 + 16);
        unint64_t v15 = v56;
        if (v56 == v14)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1LL, 1LL, v7);
          sub_100015794((uint64_t)v5, (uint64_t *)&unk_1009A5990);
          goto LABEL_4;
        }
      }

      unint64_t v23 = v55[3];
      int64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      if (v24 <= 1) {
        uint64_t v25 = 1LL;
      }
      else {
        uint64_t v25 = v24;
      }
      uint64_t v26 = sub_100004AEC(&qword_10099D318);
      uint64_t v28 = v49;
      uint64_t v27 = v50;
      uint64_t v54 = v25;
      uint64_t v21 = (void *)swift_allocObject(v26, v50 + v25 * v49, v48);
      size_t v29 = j__malloc_size(v21);
      if (!v28) {
        goto LABEL_46;
      }
      int64_t v30 = v29 - v27;
      if (v29 - v27 == 0x8000000000000000LL && v28 == -1) {
        goto LABEL_47;
      }
      uint64_t v32 = v30 / v28;
      v21[2] = v54;
      v21[3] = 2 * (v30 / v28);
      uint64_t v33 = (char *)v21 + v27;
      uint64_t v34 = v55;
      uint64_t v35 = v55[3] >> 1;
      uint64_t v36 = v35 * v28;
      if (!v55[2])
      {
LABEL_33:
        uint64_t v53 = (uint64_t)&v33[v36];
        uint64_t v22 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v35;
        swift_release(v34);
        goto LABEL_34;
      }

      uint64_t v37 = (char *)v55 + v50;
      if (v21 < v55 || v33 >= &v37[v36])
      {
        uint64_t v53 = v30 / v28;
        uint64_t v54 = (uint64_t)v33;
        uint64_t v38 = v35;
        uint64_t v47 = v36;
        swift_arrayInitWithTakeFrontToBack(v33, v37, v35, v7);
      }

      else
      {
        if (v21 == v55)
        {
LABEL_32:
          v34[2] = 0LL;
          goto LABEL_33;
        }

        uint64_t v53 = v30 / v28;
        uint64_t v54 = (uint64_t)v33;
        uint64_t v38 = v35;
        uint64_t v47 = v36;
        swift_arrayInitWithTakeBackToFront(v33, v37);
      }

      uint64_t v36 = v47;
      uint64_t v35 = v38;
      uint64_t v32 = v53;
      uint64_t v33 = (char *)v54;
      goto LABEL_32;
    }

uint64_t sub_100300258(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A8E90);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_retain();
  uint64_t v44 = a1;
  dispatch thunk of _AnyIteratorBoxBase.next()(v10);
  uint64_t v42 = v6;
  uint64_t v11 = *(unsigned int (**)(void, void, void))(v6 + 48);
  __n128 v12 = _swiftEmptyArrayStorage;
  if (v11(v4, 1LL, v5) != 1)
  {
    uint64_t v13 = 0LL;
    uint64_t v43 = (v9 + 32) & ~v9;
    uint64_t v19 = (char *)_swiftEmptyArrayStorage + v43;
    uint64_t v41 = v9 | 7;
    uint64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v21 = v42;
    while (1)
    {
      uint64_t result = sub_10002218C((uint64_t)v4, (uint64_t)v8, type metadata accessor for KeyGenerationBeaconInfo);
      if (v13)
      {
        __n128 v12 = v20;
        BOOL v17 = __OFSUB__(v13--, 1LL);
        if (v17) {
          goto LABEL_32;
        }
      }

      else
      {
        unint64_t v23 = v20[3];
        int64_t v24 = v8;
        uint64_t v25 = v11;
        uint64_t v26 = v5;
        int64_t v27 = v23 & 0xFFFFFFFFFFFFFFFELL;
        if (v27 <= 1) {
          uint64_t v28 = 1LL;
        }
        else {
          uint64_t v28 = v27;
        }
        uint64_t v29 = sub_100004AEC(&qword_10099D338);
        uint64_t v30 = *(void *)(v21 + 72);
        uint64_t v31 = v43;
        __n128 v12 = (void *)swift_allocObject(v29, v43 + v30 * v28, v41);
        uint64_t result = j__malloc_size(v12);
        if (!v30) {
          goto LABEL_34;
        }
        uint64_t v32 = result - v31;
        if (result - v31 == 0x8000000000000000LL && v30 == -1) {
          goto LABEL_35;
        }
        uint64_t v34 = v32 / v30;
        v12[2] = v28;
        void v12[3] = 2 * (v32 / v30);
        uint64_t v35 = (char *)v12 + v31;
        uint64_t v36 = v20[3] >> 1;
        uint64_t v37 = v36 * v30;
        if (v20[2])
        {
          uint64_t v38 = (char *)v20 + v43;
          if (v12 < v20 || v35 >= (char *)v20 + v43 + v37)
          {
            swift_arrayInitWithTakeFrontToBack(v35, v38, v36, v26);
          }

          else if (v12 != v20)
          {
            swift_arrayInitWithTakeBackToFront(v35, v38);
          }

          v20[2] = 0LL;
        }

        uint64_t v19 = &v35[v37];
        uint64_t v40 = (v34 & 0x7FFFFFFFFFFFFFFFLL) - v36;
        uint64_t result = swift_release(v20);
        uint64_t v5 = v26;
        uint64_t v21 = v42;
        uint64_t v11 = v25;
        uint64_t v8 = v24;
        BOOL v17 = __OFSUB__(v40, 1LL);
        uint64_t v13 = v40 - 1;
        if (v17)
        {
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
      }

      uint64_t v22 = sub_10002218C((uint64_t)v8, (uint64_t)v19, type metadata accessor for KeyGenerationBeaconInfo);
      v19 += *(void *)(v21 + 72);
      dispatch thunk of _AnyIteratorBoxBase.next()(v22);
      uint64_t v20 = v12;
      if (v11(v4, 1LL, v5) == 1) {
        goto LABEL_3;
      }
    }
  }

  uint64_t v13 = 0LL;
LABEL_3:
  swift_release(v44);
  uint64_t result = sub_100015794((uint64_t)v4, &qword_1009A8E90);
  unint64_t v15 = v12[3];
  if (v15 >= 2)
  {
    unint64_t v16 = v15 >> 1;
    BOOL v17 = __OFSUB__(v16, v13);
    uint64_t v18 = v16 - v13;
    if (v17) {
      goto LABEL_36;
    }
    v12[2] = v18;
  }

  return (uint64_t)v12;
}

size_t sub_100300538(uint64_t a1)
{
  uint64_t v117 = a1;
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v1);
  uint64_t v105 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v107 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v103 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A7E78);
  __chkstk_darwin(v5);
  uint64_t v118 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v116 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A8E40);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v102 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v104 = (char *)&v89 - v13;
  uint64_t v106 = sub_100004AEC(&qword_1009A8E48);
  uint64_t v14 = *(void *)(v106 - 8);
  uint64_t v15 = __chkstk_darwin(v106);
  uint64_t v113 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v109 = (uint64_t)&v89 - v17;
  uint64_t v18 = sub_100004AEC(&qword_1009A7E90);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC(&qword_1009A7E80);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v108 = (uint64_t)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC(&qword_1009A4780);
  __chkstk_darwin(v24);
  uint64_t v93 = (uint64_t)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v26 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v97 = (uint64_t)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100004AEC(&qword_1009A7E88);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v101 = v26;
  uint64_t v31 = *(unsigned __int8 *)(v26 + 80);
  sub_10001581C(v117, (uint64_t)v30, &qword_1009A7E88);
  unint64_t v96 = v30;
  sub_10001581C((uint64_t)v30, (uint64_t)v20, &qword_1009A7E90);
  uint64_t v91 = v22;
  uint64_t v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v32 = _swiftEmptyArrayStorage;
  if (v92(v20, 1LL, v21) != 1)
  {
    uint64_t v98 = 0LL;
    uint64_t v110 = 0LL;
    uint64_t v90 = (v31 + 32) & ~v31;
    double v99 = (char *)_swiftEmptyArrayStorage + v90;
    uint64_t v89 = v31 | 7;
    uint64_t v33 = _swiftEmptyArrayStorage;
    uint64_t v34 = (uint64_t)v104;
    uint64_t v35 = (uint64_t)v105;
    uint64_t v36 = v107;
    uint64_t v111 = v20;
    uint64_t v112 = v3;
    uint64_t v95 = v21;
    while (1)
    {
      uint64_t v100 = v33;
      uint64_t v37 = v108;
      sub_100015750((uint64_t)v20, v108, &qword_1009A7E80);
      uint64_t v117 = v37 + *(int *)(v21 + 40);
      uint64_t v38 = v118;
      sub_10001581C(v117, v118, &qword_1009A7E78);
      uint64_t v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
      if (v115(v38, 1LL, v7) == 1)
      {
        uint64_t v39 = v106;
LABEL_13:
        sub_100015794(v118, &qword_1009A7E78);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v34, 1LL, 1LL, v39);
LABEL_15:
        sub_100015794(v108, &qword_1009A7E80);
        sub_100015794(v34, &qword_1009A8E40);
        uint64_t v56 = (uint64_t)v96;
        sub_100015794((uint64_t)v96, &qword_1009A7E90);
        uint64_t v57 = 1LL;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v56, 1LL, 1LL, v95);
        uint64_t v58 = v93;
      }

      else
      {
        uint64_t v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 32);
        uint64_t v39 = v106;
        while (1)
        {
          uint64_t v40 = v14;
          uint64_t v41 = v114(v9, v118, v7);
          DirectorySequence.next()(v41);
          uint64_t v42 = v112;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v35, 1LL, v36) == 1)
          {
            uint64_t v43 = v116;
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            sub_100015794(v35, (uint64_t *)&unk_1009A34D0);
            uint64_t v44 = v117;
            sub_100015794(v117, &qword_1009A7E78);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1LL, 1LL, v7);
            uint64_t v14 = v40;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v34, 1LL, 1LL, v39);
          }

          else
          {
            unint64_t v45 = v103;
            (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v103, v35, v36);
            unint64_t v46 = objc_autoreleasePoolPush();
            uint64_t v47 = v102;
            uint64_t v48 = v110;
            sub_1005438B4((void (*)(void))v45, v108, v102);
            uint64_t v110 = v48;
            uint64_t v36 = v107;
            uint64_t v49 = v46;
            uint64_t v35 = (uint64_t)v105;
            objc_autoreleasePoolPop(v49);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            uint64_t v34 = (uint64_t)v104;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v36);
            uint64_t v50 = v47;
            uint64_t v39 = v106;
            sub_100015750(v50, v34, &qword_1009A8E40);
            uint64_t v14 = v40;
          }

          int v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v34, 1LL, v39);
          uint64_t v52 = (uint64_t)v113;
          if (v51 == 1)
          {
            uint64_t v20 = v111;
            goto LABEL_15;
          }

          uint64_t v53 = v109;
          sub_100015750(v34, v109, &qword_1009A8E48);
          sub_100015750(v53, v52, &qword_1009A8E48);
          sub_100015794(v52, &qword_1009A8E48);
          uint64_t v54 = v118;
          sub_10001581C(v117, v118, &qword_1009A7E78);
          int v55 = v115(v54, 1LL, v7);
          uint64_t v20 = v111;
          if (v55 == 1) {
            goto LABEL_13;
          }
        }

        sub_100015794(v108, &qword_1009A7E80);
        uint64_t v78 = v52;
        uint64_t v58 = v93;
        sub_10002218C(v78, v93, type metadata accessor for OwnedDeviceKeyRecord);
        uint64_t v57 = 0LL;
        uint64_t v20 = v111;
      }

      uint64_t v59 = v101;
      uint64_t v60 = v57;
      uint64_t v61 = v94;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v58, v60, 1LL, v94);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v58, 1LL, v61) == 1)
      {
        uint64_t v85 = v98;
        uint64_t v84 = v100;
        goto LABEL_42;
      }

      size_t result = sub_10002218C(v58, v97, type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v63 = v98;
      if (v98)
      {
        uint64_t v32 = v100;
        goto LABEL_38;
      }

      unint64_t v64 = v100[3];
      int64_t v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
      if (v65 <= 1) {
        uint64_t v66 = 1LL;
      }
      else {
        uint64_t v66 = v65;
      }
      uint64_t v67 = sub_100004AEC(&qword_10099D3F8);
      uint64_t v68 = *(void *)(v101 + 72);
      uint64_t v69 = v90;
      uint64_t v32 = (void *)swift_allocObject(v67, v90 + v68 * v66, v89);
      size_t result = j__malloc_size(v32);
      if (!v68) {
        goto LABEL_48;
      }
      int64_t v70 = result - v69;
      if (result - v69 == 0x8000000000000000LL && v68 == -1) {
        goto LABEL_49;
      }
      uint64_t v72 = v70 / v68;
      v32[2] = v66;
      v32[3] = 2 * (v70 / v68);
      unint64_t v73 = (char *)v32 + v69;
      unint64_t v74 = v100;
      uint64_t v75 = v100[3] >> 1;
      uint64_t v76 = v75 * v68;
      if (v100[2]) {
        break;
      }
LABEL_37:
      double v99 = &v73[v76];
      uint64_t v63 = (v72 & 0x7FFFFFFFFFFFFFFFLL) - v75;
      size_t result = swift_release();
      uint64_t v34 = (uint64_t)v104;
      uint64_t v35 = (uint64_t)v105;
LABEL_38:
      uint64_t v36 = v107;
      BOOL v79 = __OFSUB__(v63, 1LL);
      uint64_t v80 = v63 - 1;
      if (v79)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }

      uint64_t v98 = v80;
      uint64_t v81 = (uint64_t)v99;
      sub_10002218C(v97, (uint64_t)v99, type metadata accessor for OwnedDeviceKeyRecord);
      double v99 = (char *)(v81 + *(void *)(v101 + 72));
      sub_10001581C((uint64_t)v96, (uint64_t)v20, &qword_1009A7E90);
      uint64_t v21 = v95;
      int v82 = v92(v20, 1LL, v95);
      uint64_t v33 = v32;
      if (v82 == 1) {
        goto LABEL_40;
      }
    }

    uint64_t v77 = (char *)v100 + v69;
    if (v32 < v100 || v73 >= &v77[v76])
    {
      swift_arrayInitWithTakeFrontToBack((char *)v32 + v69, v77, v75, v94);
    }

    else
    {
      if (v32 == v100)
      {
LABEL_36:
        v74[2] = 0LL;
        goto LABEL_37;
      }

      swift_arrayInitWithTakeBackToFront((char *)v32 + v69, v77);
    }

    unint64_t v74 = v100;
    goto LABEL_36;
  }

  uint64_t v98 = 0LL;
LABEL_40:
  sub_100015794((uint64_t)v20, &qword_1009A7E90);
  uint64_t v83 = v93;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v93, 1LL, 1LL, v94);
  uint64_t v84 = v32;
  uint64_t v58 = v83;
  uint64_t v85 = v98;
LABEL_42:
  sub_100015794((uint64_t)v96, &qword_1009A7E88);
  sub_100015794(v58, &qword_1009A4780);
  unint64_t v86 = v84[3];
  size_t result = (size_t)v84;
  if (v86 >= 2)
  {
    unint64_t v87 = v86 >> 1;
    BOOL v79 = __OFSUB__(v87, v85);
    uint64_t v88 = v87 - v85;
    if (v79) {
      goto LABEL_50;
    }
    v84[2] = v88;
  }

  return result;
}

uint64_t sub_100300EE0(uint64_t a1)
{
  uint64_t result = sub_1002FBF94();
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v6 = result;
    uint64_t v7 = v2;
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    uint64_t v10 = 0LL;
    uint64_t v11 = &_swiftEmptyArrayStorage[4];
    while (1)
    {
      if (!v10)
      {
        unint64_t v12 = v5[3];
        int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
        if (v13 <= 1) {
          uint64_t v14 = 1LL;
        }
        else {
          uint64_t v14 = v13;
        }
        uint64_t v15 = sub_100004AEC(&qword_10099D370);
        uint64_t v16 = (void *)swift_allocObject(v15, 32 * v14 + 32, 7LL);
        int64_t v17 = j__malloc_size(v16);
        uint64_t v18 = v17 - 32;
        if (v17 < 32) {
          uint64_t v18 = v17 - 1;
        }
        uint64_t v19 = v18 >> 5;
        v16[2] = v14;
        v16[3] = 2 * (v18 >> 5);
        unint64_t v20 = (unint64_t)(v16 + 4);
        uint64_t v21 = v5[3] >> 1;
        if (v5[2])
        {
          _OWORD v5[2] = 0LL;
        }

        uint64_t v11 = (uint64_t *)(v20 + 32 * v21);
        uint64_t v10 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        uint64_t result = swift_release(v5);
        uint64_t v5 = v16;
      }

      BOOL v23 = __OFSUB__(v10--, 1LL);
      if (v23) {
        break;
      }
      *uint64_t v11 = v6;
      v11[1] = v7;
      v11[2] = v8;
      v11[3] = v9;
      v11 += 4;
      uint64_t result = sub_1002FBF94();
      uint64_t v6 = result;
      uint64_t v7 = v24;
      uint64_t v8 = v25;
      uint64_t v9 = v26;
      if (!v25) {
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v10 = 0LL;
LABEL_23:
  uint64_t result = sub_1000A6F30(a1);
  unint64_t v27 = v5[3];
  if (v27 < 2) {
    return (uint64_t)v5;
  }
  unint64_t v28 = v27 >> 1;
  BOOL v23 = __OFSUB__(v28, v10);
  uint64_t v29 = v28 - v10;
  if (!v23)
  {
    _OWORD v5[2] = v29;
    return (uint64_t)v5;
  }

void *sub_1003010A4(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(a4 + 48) + 16 * v12;
    int v14 = *(_DWORD *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    *(_DWORD *)a2 = v14;
    *(void *)(a2 + 8) = v15;
    a2 += 16LL;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v16 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v16 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v16);
  if (v17) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v16 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v16;
    goto LABEL_34;
  }

  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17)
  {
LABEL_15:
    int64_t v16 = v8;
LABEL_19:
    unint64_t v19 = __clz(__rbit64(v17));
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v12 = v19 + (v16 << 6);
    int64_t v8 = v16;
    goto LABEL_8;
  }

  int64_t v18 = v16 + 2;
  if (v16 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17)
  {
LABEL_18:
    int64_t v16 = v18;
    goto LABEL_19;
  }

  int64_t v8 = v16 + 3;
  if (v16 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v16 + 2;
    goto LABEL_34;
  }

  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v16 + 4;
  if (v16 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v16 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v17 = *(void *)(v4 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }

uint64_t sub_100301248(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v36 = a4;
  uint64_t v18 = *(void *)(a4 + 64);
  uint64_t v17 = a4 + 64;
  uint64_t v16 = v18;
  uint64_t v35 = v17;
  uint64_t v19 = -1LL << *(_BYTE *)(v17 - 32);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1LL << -(char)v19);
  }
  else {
    uint64_t v20 = -1LL;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0LL;
    a3 = 0LL;
LABEL_38:
    uint64_t v30 = v35;
    *a1 = v36;
    a1[1] = v30;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }

  if (!a3)
  {
    int64_t v22 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v32 = -1LL << *(_BYTE *)(v17 - 32);
  uint64_t v33 = a1;
  int64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  int64_t v34 = (unint64_t)(63 - v19) >> 6;
  int64_t v31 = v34 - 1;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    sub_10001DC4C( *(void *)(v36 + 56) + v29 * v25,  (uint64_t)v12,  type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10002218C((uint64_t)v12, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t result = sub_10002218C((uint64_t)v15, a2, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (v23 == a3) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v26 >= v34) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v35 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }

  v22 += 2LL;
  if (v26 + 1 >= v34)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v35 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v34) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v35 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v35 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }

  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    unint64_t v21 = 0LL;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }

  unint64_t v27 = *(void *)(v35 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v26 >= v34)
    {
      unint64_t v21 = 0LL;
      int64_t v22 = v31;
      goto LABEL_36;
    }

    unint64_t v27 = *(void *)(v35 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }

uint64_t sub_100301504(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v20);
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = swift_bridgeObjectRetain(v20);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_1003016FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = a4;
  uint64_t v15 = a4 + 56;
  uint64_t v14 = *(void *)(a4 + 56);
  uint64_t v16 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v35 = a1;
  uint64_t v36 = v16;
  uint64_t v17 = -v16;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0LL;
    uint64_t v21 = 0LL;
LABEL_39:
    int64_t v31 = v35;
    uint64_t v32 = ~v36;
    *uint64_t v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }

  if (!a3)
  {
    int64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  int64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v37 = a4 + 56;
  int64_t v38 = (unint64_t)(63 - v36) >> 6;
  int64_t v34 = v38 - 1;
  uint64_t v39 = a3;
  int64_t v22 = v40;
  uint64_t v23 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v25 = v24 | (v20 << 6);
  while (1)
  {
    uint64_t v29 = *(void *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(void *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v10, 0LL, 1LL, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1LL, v11) == 1)
    {
      uint64_t v15 = v37;
      goto LABEL_38;
    }

    ++v21;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      uint64_t v21 = v39;
      uint64_t v15 = v37;
      goto LABEL_39;
    }

    a2 += v29;
    uint64_t v23 = v41;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    uint64_t v15 = v37;
    if (v26 >= v38) {
      goto LABEL_37;
    }
    unint64_t v27 = *(void *)(v37 + 8 * v26);
    if (!v27)
    {
      int64_t v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38) {
        goto LABEL_37;
      }
      unint64_t v27 = *(void *)(v37 + 8 * v28);
      if (v27) {
        goto LABEL_14;
      }
      int64_t v20 = v26 + 1;
      if (v26 + 2 >= v38) {
        goto LABEL_37;
      }
      unint64_t v27 = *(void *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2LL;
      }

      else
      {
        int64_t v20 = v26 + 2;
        if (v26 + 3 >= v38) {
          goto LABEL_37;
        }
        unint64_t v27 = *(void *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          int64_t v28 = v26 + 4;
          int64_t v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            unint64_t v27 = *(void *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                int64_t v26 = v28 + 1;
                if (__OFADD__(v28, 1LL)) {
                  goto LABEL_42;
                }
                if (v26 >= v38)
                {
                  int64_t v20 = v34;
                  goto LABEL_37;
                }

                unint64_t v27 = *(void *)(v37 + 8 * v26);
                ++v28;
                if (v27) {
                  goto LABEL_21;
                }
              }
            }

uint64_t sub_100301A4C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = (void *)result;
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t result = __CocoaDictionary.makeIterator()(v8);
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    unint64_t v11 = 0LL;
    unint64_t v4 = result | 0x8000000000000000LL;
    if (v6) {
      goto LABEL_6;
    }
LABEL_40:
    int64_t v12 = 0LL;
    a3 = 0LL;
LABEL_49:
    void *v7 = v4;
    v7[1] = v9;
    _OWORD v7[2] = v10;
    _OWORD v7[3] = v12;
    _OWORD v7[4] = v11;
    return a3;
  }

  uint64_t v25 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v9 = a4 + 64;
  uint64_t v26 = ~v25;
  uint64_t v27 = -v25;
  if (v27 < 64) {
    uint64_t v28 = ~(-1LL << v27);
  }
  else {
    uint64_t v28 = -1LL;
  }
  unint64_t v11 = v28 & *(void *)(a4 + 64);
  uint64_t v10 = v26;
  if (!a2) {
    goto LABEL_40;
  }
LABEL_6:
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_49;
  }

  if (a3 < 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  uint64_t v29 = v10;
  uint64_t v30 = v7;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v31 = (unint64_t)(v10 + 64) >> 6;
  while ((v4 & 0x8000000000000000LL) != 0)
  {
    uint64_t v16 = v9;
    uint64_t v17 = __CocoaDictionary.Iterator.next()();
    if (!v17) {
      goto LABEL_42;
    }
    uint64_t v19 = v18;
    swift_unknownObjectRelease(v17);
    uint64_t v32 = v19;
    uint64_t v20 = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
    uint64_t v21 = v33;
    uint64_t result = swift_unknownObjectRelease(v19);
    if (!v21)
    {
LABEL_42:
      a3 = v13;
      uint64_t v9 = v16;
LABEL_48:
      uint64_t v10 = v29;
      uint64_t v7 = v30;
      goto LABEL_49;
    }

    uint64_t v9 = v16;
LABEL_9:
    ++v13;
    *v6++ = v21;
    if (v13 == a3) {
      goto LABEL_48;
    }
  }

  if (v11)
  {
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v15 = v14 | (v12 << 6);
LABEL_26:
    uint64_t result = (uint64_t)*(id *)(*(void *)(v4 + 56) + 8 * v15);
    if (!result) {
      goto LABEL_47;
    }
    uint64_t v21 = result;
    goto LABEL_9;
  }

  int64_t v22 = v12 + 1;
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
    goto LABEL_51;
  }

  if (v22 >= v31) {
    goto LABEL_43;
  }
  unint64_t v23 = *(void *)(v9 + 8 * v22);
  if (v23) {
    goto LABEL_25;
  }
  v12 += 2LL;
  if (v22 + 1 >= v31)
  {
    unint64_t v11 = 0LL;
    int64_t v12 = v22;
    goto LABEL_47;
  }

  unint64_t v23 = *(void *)(v9 + 8 * v12);
  if (v23)
  {
LABEL_21:
    int64_t v22 = v12;
LABEL_25:
    unint64_t v11 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v12 = v22;
    goto LABEL_26;
  }

  int64_t v24 = v22 + 2;
  if (v22 + 2 >= v31) {
    goto LABEL_43;
  }
  unint64_t v23 = *(void *)(v9 + 8 * v24);
  if (v23)
  {
LABEL_24:
    int64_t v22 = v24;
    goto LABEL_25;
  }

  int64_t v12 = v22 + 3;
  if (v22 + 3 >= v31)
  {
    unint64_t v11 = 0LL;
    int64_t v12 = v22 + 2;
    goto LABEL_47;
  }

  unint64_t v23 = *(void *)(v9 + 8 * v12);
  if (v23) {
    goto LABEL_21;
  }
  int64_t v24 = v22 + 4;
  if (v22 + 4 >= v31)
  {
LABEL_43:
    unint64_t v11 = 0LL;
LABEL_47:
    a3 = v13;
    goto LABEL_48;
  }

  unint64_t v23 = *(void *)(v9 + 8 * v24);
  if (v23) {
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v22 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v22 >= v31)
    {
      unint64_t v11 = 0LL;
      int64_t v12 = v31 - 1;
      goto LABEL_47;
    }

    unint64_t v23 = *(void *)(v9 + 8 * v22);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

uint64_t sub_100301D20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v10 = a5(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v38 = a4;
  uint64_t v20 = *(void *)(a4 + 56);
  uint64_t v19 = a4 + 56;
  uint64_t v18 = v20;
  uint64_t v37 = v19;
  uint64_t v21 = -1LL << *(_BYTE *)(v19 - 24);
  if (-v21 < 64) {
    uint64_t v22 = ~(-1LL << -(char)v21);
  }
  else {
    uint64_t v22 = -1LL;
  }
  unint64_t v23 = v22 & v18;
  if (!a2)
  {
    int64_t v24 = 0LL;
    a3 = 0LL;
LABEL_38:
    uint64_t v32 = v37;
    *a1 = v38;
    a1[1] = v32;
    a1[2] = ~v21;
    a1[3] = v24;
    a1[4] = v23;
    return a3;
  }

  if (!a3)
  {
    int64_t v24 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v34 = -1LL << *(_BYTE *)(v19 - 24);
  uint64_t v35 = a1;
  int64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  int64_t v36 = (unint64_t)(63 - v21) >> 6;
  int64_t v33 = v36 - 1;
  if (!v23) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v26 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  unint64_t v27 = v26 | (v24 << 6);
  while (1)
  {
    ++v25;
    uint64_t v31 = *(void *)(v11 + 72);
    sub_10001DC4C(*(void *)(v38 + 48) + v31 * v27, (uint64_t)v14, a5);
    sub_10002218C((uint64_t)v14, (uint64_t)v17, a5);
    uint64_t result = sub_10002218C((uint64_t)v17, a2, a5);
    if (v25 == a3) {
      goto LABEL_37;
    }
    a2 += v31;
    if (v23) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v28 >= v36) {
      goto LABEL_32;
    }
    unint64_t v29 = *(void *)(v37 + 8 * v28);
    if (!v29) {
      break;
    }
LABEL_18:
    unint64_t v23 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v24 = v28;
  }

  v24 += 2LL;
  if (v28 + 1 >= v36)
  {
    unint64_t v23 = 0LL;
    int64_t v24 = v28;
    goto LABEL_36;
  }

  unint64_t v29 = *(void *)(v37 + 8 * v24);
  if (v29) {
    goto LABEL_14;
  }
  int64_t v30 = v28 + 2;
  if (v28 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v29 = *(void *)(v37 + 8 * v30);
  if (v29) {
    goto LABEL_17;
  }
  int64_t v24 = v28 + 3;
  if (v28 + 3 >= v36)
  {
    unint64_t v23 = 0LL;
    int64_t v24 = v28 + 2;
    goto LABEL_36;
  }

  unint64_t v29 = *(void *)(v37 + 8 * v24);
  if (v29)
  {
LABEL_14:
    int64_t v28 = v24;
    goto LABEL_18;
  }

  int64_t v30 = v28 + 4;
  if (v28 + 4 >= v36)
  {
LABEL_32:
    unint64_t v23 = 0LL;
LABEL_36:
    a3 = v25;
LABEL_37:
    uint64_t v21 = v34;
    a1 = v35;
    goto LABEL_38;
  }

  unint64_t v29 = *(void *)(v37 + 8 * v30);
  if (v29)
  {
LABEL_17:
    int64_t v28 = v30;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v28 >= v36)
    {
      unint64_t v23 = 0LL;
      int64_t v24 = v33;
      goto LABEL_36;
    }

    unint64_t v29 = *(void *)(v37 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_18;
    }
  }

void *sub_100301FD8(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }

void *sub_10030216C(void *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }

void *sub_100302300(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  unint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *unint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

void *sub_1003024F8(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  unint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *unint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t *sub_1003026F0( uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4, unint64_t *a5, void *a6, unint64_t *a7)
{
  uint64_t v7 = a4;
  unint64_t v9 = a2;
  uint64_t v37 = result;
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v13 = a4;
    }
    else {
      uint64_t v13 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v14 = __CocoaSet.makeIterator()(v13);
    uint64_t v15 = sub_100022898(0LL, a5, a6);
    uint64_t v16 = sub_10014EFD4(a7, a5, a6);
    uint64_t result = Set.Iterator.init(_cocoa:)(v43, v14, v15, v16);
    uint64_t v7 = v43[0];
    uint64_t v17 = v43[1];
    uint64_t v18 = v43[2];
    int64_t v19 = v43[3];
    unint64_t v20 = v43[4];
    if (v9) {
      goto LABEL_6;
    }
LABEL_39:
    uint64_t v21 = 0LL;
    goto LABEL_41;
  }

  int64_t v19 = 0LL;
  uint64_t v32 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v17 = a4 + 56;
  uint64_t v18 = ~v32;
  uint64_t v33 = -v32;
  if (v33 < 64) {
    uint64_t v34 = ~(-1LL << v33);
  }
  else {
    uint64_t v34 = -1LL;
  }
  unint64_t v20 = v34 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_39;
  }
LABEL_6:
  if (!a3)
  {
    uint64_t v21 = 0LL;
LABEL_41:
    uint64_t v35 = v37;
LABEL_44:
    *uint64_t v35 = v7;
    v35[1] = v17;
    v35[2] = v18;
    v35[3] = v19;
    v35[4] = v20;
    return (uint64_t *)v21;
  }

  if (a3 < 0) {
    goto LABEL_51;
  }
  uint64_t v21 = 0LL;
  int64_t v38 = (unint64_t)(v18 + 64) >> 6;
  uint64_t v36 = v18;
  while (1)
  {
    if (v7 < 0)
    {
      uint64_t v28 = __CocoaSet.Iterator.next()(result);
      if (!v28) {
        goto LABEL_43;
      }
      uint64_t v29 = v28;
      uint64_t v41 = v28;
      uint64_t v30 = sub_100022898(0LL, a5, a6);
      swift_unknownObjectRetain(v29);
      swift_dynamicCast(&v42, &v41, (char *)&type metadata for Swift.AnyObject + 8, v30, 7LL);
      int64_t v24 = v42;
      uint64_t result = (uint64_t *)swift_unknownObjectRelease(v29);
      if (!v24) {
        goto LABEL_43;
      }
      goto LABEL_11;
    }

    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_10;
    }

    int64_t v25 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v25 >= v38)
    {
      unint64_t v20 = 0LL;
      goto LABEL_43;
    }

    unint64_t v26 = *(void *)(v17 + 8 * v25);
    if (v26) {
      goto LABEL_26;
    }
    int64_t v27 = v19 + 2;
    if (v19 + 2 >= v38)
    {
      unint64_t v20 = 0LL;
      ++v19;
      goto LABEL_43;
    }

    unint64_t v26 = *(void *)(v17 + 8 * v27);
    if (!v26)
    {
      if (v19 + 3 >= v38) {
        goto LABEL_47;
      }
      unint64_t v26 = *(void *)(v17 + 8 * (v19 + 3));
      if (v26)
      {
        int64_t v25 = v19 + 3;
        goto LABEL_26;
      }

      int64_t v27 = v19 + 4;
      if (v19 + 4 >= v38)
      {
        unint64_t v20 = 0LL;
        v19 += 3LL;
        goto LABEL_43;
      }

      unint64_t v26 = *(void *)(v17 + 8 * v27);
      if (!v26)
      {
        int64_t v25 = v19 + 5;
        if (v19 + 5 >= v38)
        {
LABEL_47:
          unint64_t v20 = 0LL;
          int64_t v19 = v27;
          goto LABEL_43;
        }

        unint64_t v26 = *(void *)(v17 + 8 * v25);
        if (!v26)
        {
          int64_t v31 = v19 + 6;
          while (v38 != v31)
          {
            unint64_t v26 = *(void *)(v17 + 8 * v31++);
            if (v26)
            {
              int64_t v25 = v31 - 1;
              goto LABEL_26;
            }
          }

          unint64_t v20 = 0LL;
          int64_t v19 = v38 - 1;
          goto LABEL_43;
        }

        goto LABEL_26;
      }
    }

    int64_t v25 = v27;
LABEL_26:
    unint64_t v20 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v19 = v25;
LABEL_10:
    uint64_t result = (uint64_t *)*(id *)(*(void *)(v7 + 48) + 8 * v23);
    int64_t v24 = result;
    if (!result) {
      goto LABEL_43;
    }
LABEL_11:
    ++v21;
    *v9++ = v24;
    if (v21 == a3)
    {
      uint64_t v21 = a3;
LABEL_43:
      uint64_t v18 = v36;
      uint64_t v35 = v37;
      goto LABEL_44;
    }
  }

  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void *sub_1003029E8(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  unint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *unint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_100302BE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = a4;
  uint64_t v15 = a4 + 64;
  uint64_t v14 = *(void *)(a4 + 64);
  uint64_t v16 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v35 = a1;
  uint64_t v36 = v16;
  uint64_t v17 = -v16;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0LL;
    uint64_t v21 = 0LL;
LABEL_39:
    int64_t v31 = v35;
    uint64_t v32 = ~v36;
    *uint64_t v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }

  if (!a3)
  {
    int64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  int64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v37 = a4 + 64;
  int64_t v38 = (unint64_t)(63 - v36) >> 6;
  int64_t v34 = v38 - 1;
  uint64_t v39 = a3;
  unint64_t v22 = v40;
  uint64_t v23 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v25 = v24 | (v20 << 6);
  while (1)
  {
    uint64_t v29 = *(void *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(void *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v10, 0LL, 1LL, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1LL, v11) == 1)
    {
      uint64_t v15 = v37;
      goto LABEL_38;
    }

    ++v21;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      uint64_t v21 = v39;
      uint64_t v15 = v37;
      goto LABEL_39;
    }

    a2 += v29;
    uint64_t v23 = v41;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    uint64_t v15 = v37;
    if (v26 >= v38) {
      goto LABEL_37;
    }
    unint64_t v27 = *(void *)(v37 + 8 * v26);
    if (!v27)
    {
      int64_t v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38) {
        goto LABEL_37;
      }
      unint64_t v27 = *(void *)(v37 + 8 * v28);
      if (v27) {
        goto LABEL_14;
      }
      int64_t v20 = v26 + 1;
      if (v26 + 2 >= v38) {
        goto LABEL_37;
      }
      unint64_t v27 = *(void *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2LL;
      }

      else
      {
        int64_t v20 = v26 + 2;
        if (v26 + 3 >= v38) {
          goto LABEL_37;
        }
        unint64_t v27 = *(void *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          int64_t v28 = v26 + 4;
          int64_t v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            unint64_t v27 = *(void *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                int64_t v26 = v28 + 1;
                if (__OFADD__(v28, 1LL)) {
                  goto LABEL_42;
                }
                if (v26 >= v38)
                {
                  int64_t v20 = v34;
                  goto LABEL_37;
                }

                unint64_t v27 = *(void *)(v37 + 8 * v26);
                ++v28;
                if (v27) {
                  goto LABEL_21;
                }
              }
            }

uint64_t sub_100302F30()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100302F64()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  __int128 v8 = *(_OWORD *)(v0 + 48);
  __int128 v9 = *(_OWORD *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = swift_task_alloc(dword_1009A8E14);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_1000159BC;
  *(void *)(v6 + 72) = v5;
  *(void *)(v6 + 64) = v4;
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 32) = v2;
  *(void *)(v6 + 40) = v3;
  *(_OWORD *)(v6 + 16) = v9;
  return swift_task_switch(sub_1002FDA44, 0LL, 0LL);
}

uint64_t sub_100303000(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconObservation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10030303C()
{
  unint64_t result = qword_10099C3B0;
  if (!qword_10099C3B0)
  {
    type metadata accessor for SPBeaconTaskName(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1007E3C50, v1);
    atomic_store(result, (unint64_t *)&qword_10099C3B0);
  }

  return result;
}

uint64_t sub_100303084()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003030A8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009A8E24);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  v3[2] = v2;
  return swift_task_switch(sub_1002FD2D0, 0LL, 0LL);
}

uint64_t sub_10030310C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009A8E98);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009A8E98);
  if (qword_10099B2E8 != -1) {
    swift_once(&qword_10099B2E8, sub_10030588C);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2A670);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_10030319C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DatabaseState(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
}

uint64_t sub_1003031EC(uint64_t a1)
{
  return sub_100303224(a1, qword_100A2A4F0, 0x800000010085D9A0LL);
}

uint64_t sub_100303208(uint64_t a1)
{
  return sub_100303224(a1, qword_100A2A508, 0x800000010085D9E0LL);
}

uint64_t sub_100303224(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Table(0LL);
  sub_10000A8AC(v5, a2);
  sub_10000A720(v5, (uint64_t)a2);
  return Table.init(_:database:)(0xD000000000000018LL, a3, 0LL, 0LL);
}

uint64_t sub_100303288()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_logger;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair));
  uint64_t v3 = v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_baseContainerURL;
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10030331C()
{
  return type metadata accessor for CloudStorageDatabase(0LL);
}

uint64_t type metadata accessor for CloudStorageDatabase(uint64_t a1)
{
  uint64_t result = qword_1009A8ED8;
  if (!qword_1009A8ED8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudStorageDatabase);
  }
  return result;
}

uint64_t sub_100303360(uint64_t a1)
{
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  _OWORD v5[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v5[3] = *(void *)(result - 8) + 64LL;
    v5[4] = &unk_1007FB320;
    uint64_t result = type metadata accessor for URL(319LL);
    if (v4 <= 0x3F)
    {
      v5[5] = *(void *)(result - 8) + 64LL;
      v5[6] = &unk_1007FB338;
      v5[7] = (char *)&value witness table for Builtin.Int32 + 64;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100303424()
{
  return sub_100305ACC((unint64_t *)&unk_1009A8FC0, (uint64_t)&unk_1007FB458);
}

uint64_t sub_100303448@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_baseContainerURL;
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_10030348C()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair);
  swift_beginAccess(v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t sub_1003034D4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_release(v4);
}

uint64_t (*sub_100303524(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

void sub_100303568(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_10030319C(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1003035E4()
{
  uint64_t v1 = sub_100004AEC(&qword_1009A9048);
  uint64_t v2 = *(void *)(type metadata accessor for DatabaseState(0LL) - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v1, v5 + v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1007E67D0;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = v8 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v8 + 16LL);
  uint64_t v10 = (os_unfair_lock_s *)(v8 + ((*(unsigned int *)(*(void *)v8 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v10);
  sub_10030319C(v9, v7);
  os_unfair_lock_unlock(v10);
  AsyncStreamProvider.stream(initialEvents:)(v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003036D4()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_currentVersion);
}

uint64_t sub_1003036E4()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_temporary);
}

uint64_t sub_1003036F4()
{
  return sub_10030590C();
}

uint64_t sub_100303708()
{
  return URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013LL, 0x800000010085DA40LL, 0LL);
}

void sub_1003037B0()
{
}

uint64_t sub_1003037E4()
{
  uint64_t v1 = type metadata accessor for DatabaseState(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = v5 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v5 + 16LL);
  uint64_t v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(void *)v5 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_100303EA8(v6);
  os_unfair_lock_unlock(v7);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DatabaseState.available(_:), v1);
  AsyncStreamProvider.yield(value:transaction:)(v4, 0LL);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1003038E4(int a1, int a2, uint64_t a3)
{
}

void sub_1003038F8(int a1, int a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v36 = type metadata accessor for Connection.TransactionMode(0LL);
  uint64_t v8 = *(void *)(v36 - 8);
  uint64_t v9 = __chkstk_darwin(v36);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v34 - v12;
  if (qword_10099B260 != -1) {
    swift_once(&qword_10099B260, sub_10030310C);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_1009A8E98);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (_DWORD *)swift_slowAlloc(14LL, -1LL);
    uint64_t v35 = v7;
    unint64_t v19 = v13;
    uint64_t v20 = v8;
    uint64_t v21 = a3;
    unint64_t v22 = v18;
    *uint64_t v18 = 67109376;
    LODWORD(v37) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 4, v18 + 1, v18 + 2);
    *((_WORD *)v22 + 4) = 1024;
    LODWORD(v37) = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 4, (char *)v22 + 10, (char *)v22 + 14);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Migrate schema %d -> %d", (uint8_t *)v22, 0xEu);
    uint64_t v23 = v22;
    a3 = v21;
    uint64_t v8 = v20;
    uint64_t v13 = v19;
    uint64_t v7 = v35;
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  uint64_t v25 = v36;
  if (a2 == 2)
  {
    __chkstk_darwin(v24);
    uint64_t v32 = a3;
    uint64_t v33 = v7;
    (*(void (**)(char *, void, uint64_t))(v8 + 104))( v11,  enum case for Connection.TransactionMode.deferred(_:),  v25);
    Connection.transaction(_:block:)(v11, sub_100304CDC, &v34 - 4);
    uint64_t v13 = v11;
LABEL_7:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v25);
    return;
  }

  if (a2 == 1)
  {
    v26._countAndFlagsBits = 0xD00000000000001FLL;
    v26._object = (void *)0x800000010085D940LL;
    Connection.execute(_:)(v26);
    if (!v27)
    {
      v28._countAndFlagsBits = 0xD000000000000018LL;
      v28._object = (void *)0x800000010085D960LL;
      Connection.execute(_:)(v28);
      if (!v30)
      {
        __chkstk_darwin(v29);
        uint64_t v32 = a3;
        uint64_t v33 = v7;
        (*(void (**)(char *, void, uint64_t))(v8 + 104))( v13,  enum case for Connection.TransactionMode.deferred(_:),  v25);
        Connection.transaction(_:block:)(v13, sub_100304CF4, &v34 - 4);
        goto LABEL_7;
      }
    }
  }

  else
  {
    unint64_t v37 = 0LL;
    unint64_t v38 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease();
    unint64_t v37 = 0xD000000000000013LL;
    unint64_t v38 = 0x800000010085D920LL;
    int v39 = a2;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v37,  v38,  "searchpartyd/CloudStorageDatabase.swift",  39LL,  2LL,  121LL,  0);
    __break(1u);
  }

void sub_100303CA8()
{
}

void sub_100303CDC()
{
}

void sub_100303D10()
{
}

uint64_t sub_100303D44()
{
  uint64_t v0 = type metadata accessor for CloudStorageDatabase(0LL);
  uint64_t v1 = sub_100305ACC(&qword_1009A9050, (uint64_t)&unk_1007FB3A8);
  return Database.description.getter(v0, v1);
}

uint64_t sub_100303D8C()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to Database.isolatedDescription.getter[1]);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = type metadata accessor for CloudStorageDatabase(0LL);
  uint64_t v3 = sub_100305ACC(&qword_1009A9050, (uint64_t)&unk_1007FB3A8);
  void *v1 = v0;
  v1[1] = sub_100303E08;
  return Database.isolatedDescription.getter(v2, v3);
}

uint64_t sub_100303E08(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_100303E60()
{
  return sub_100305ACC(&qword_1009A8FD0, (uint64_t)&unk_1007FB350);
}

uint64_t sub_100303E84()
{
  return sub_100305ACC(&qword_1009A8FD8, (uint64_t)&unk_1007FB380);
}

uint64_t sub_100303EA8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DatabaseState(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 104))( a1,  enum case for DatabaseState.available(_:),  v2);
}

uint64_t sub_100303F10(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Table(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B268 != -1) {
    swift_once(&qword_10099B268, sub_1003031EC);
  }
  uint64_t v7 = sub_10000A720(v3, (uint64_t)qword_100A2A4F0);
  uint64_t v8 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0LL, 0LL, 0LL, sub_100304164, 0LL);
  Connection.run(_:_:)(v8, v9, _swiftEmptyArrayStorage);
  if (v1) {
    return swift_bridgeObjectRelease();
  }
  v19[1] = a1;
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  uint64_t v10 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_1007E67D0;
  if (qword_10099B290 != -1) {
    swift_once(&qword_10099B290, sub_100305230);
  }
  uint64_t v12 = sub_100004AEC(&qword_10099E780);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2A568);
  *(void *)(v11 + 56) = v12;
  *(void *)(v11 + 64) = sub_1000372EC( &qword_10099E838,  &qword_10099E780,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  uint64_t v14 = sub_10000A7C8((void *)(v11 + 32));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v14, v13, v12);
  uint64_t v15 = Table.createIndex(_:unique:ifNotExists:)(v11, 0LL, 0LL);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  Connection.run(_:_:)(v15, v17, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100304164()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v51 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009A8FE0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A8FE8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A8FF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A8FF8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A9000);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B278 != -1) {
    swift_once(&qword_10099B278, sub_100305084);
  }
  *(void *)&__int128 v49 = v5;
  uint64_t v18 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v19 = sub_10000A720(v18, (uint64_t)qword_100A2A520);
  uint64_t v50 = v1;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
  v20(v17, 1LL, 1LL, v0);
  unint64_t v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL);
  uint64_t v47 = v18;
  v46(v14, 1LL, 1LL, v18);
  uint64_t v45 = type metadata accessor for UUID(0LL);
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)(v19, 1LL, v17, v14, v45, &protocol witness table for UUID);
  sub_100015794((uint64_t)v14, &qword_1009A8FF8);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  if (qword_10099B280 != -1) {
    swift_once(&qword_10099B280, sub_100305108);
  }
  uint64_t v21 = sub_100004AEC(&qword_1009A9008);
  uint64_t v22 = sub_10000A720(v21, (uint64_t)qword_100A2A538);
  v20(v17, 1LL, 1LL, v0);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL);
  v23(v11, 1LL, 1LL, v21);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v22,  0LL,  v17,  v11,  &type metadata for String,  &protocol witness table for String);
  sub_100015794((uint64_t)v11, &qword_1009A8FF0);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  if (qword_10099B288 != -1) {
    swift_once(&qword_10099B288, sub_100305194);
  }
  uint64_t v24 = sub_10000A720(v21, (uint64_t)qword_100A2A550);
  v20(v17, 1LL, 1LL, v0);
  v23(v11, 1LL, 1LL, v21);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v24,  0LL,  v17,  v11,  &type metadata for String,  &protocol witness table for String);
  sub_100015794((uint64_t)v11, &qword_1009A8FF0);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  if (qword_10099B290 != -1) {
    swift_once(&qword_10099B290, sub_100305230);
  }
  uint64_t v25 = sub_100004AEC(&qword_10099E780);
  uint64_t v26 = sub_10000A720(v25, (uint64_t)qword_100A2A568);
  v20(v17, 1LL, 1LL, v0);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL);
  v27(v8, 1LL, 1LL, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v26,  0LL,  v17,  v8,  &type metadata for Data,  &protocol witness table for Data);
  sub_100015794((uint64_t)v8, &qword_1009A8FE8);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  uint64_t v28 = v49;
  if (qword_10099B298 != -1) {
    swift_once(&qword_10099B298, sub_1003052C4);
  }
  uint64_t v29 = sub_100004AEC(&qword_1009A9010);
  uint64_t v30 = sub_10000A720(v29, (uint64_t)qword_100A2A580);
  v20(v17, 1LL, 1LL, v0);
  v27(v8, 1LL, 1LL, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v30,  0LL,  v17,  v8,  &type metadata for Data,  &protocol witness table for Data);
  sub_100015794((uint64_t)v8, &qword_1009A8FE8);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  if (qword_10099B2A0 != -1) {
    swift_once(&qword_10099B2A0, sub_100305358);
  }
  uint64_t v48 = v27;
  uint64_t v31 = v47;
  uint64_t v32 = sub_10000A720(v47, (uint64_t)qword_100A2A598);
  v20(v17, 1LL, 1LL, v0);
  v46(v14, 1LL, 1LL, v31);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v32, 0LL, v17, v14, v45, &protocol witness table for UUID);
  sub_100015794((uint64_t)v14, &qword_1009A8FF8);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  if (qword_10099B2B0 != -1) {
    swift_once(&qword_10099B2B0, sub_100305478);
  }
  uint64_t v33 = sub_100004AEC(&qword_10099E760);
  uint64_t v34 = sub_10000A720(v33, (uint64_t)qword_100A2A5C8);
  v20(v17, 1LL, 1LL, v0);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL);
  v35(v28, 1LL, 1LL, v33);
  uint64_t v47 = v34;
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v34,  0LL,  v17,  v28,  &type metadata for Int64,  &protocol witness table for Int64);
  sub_100015794(v28, &qword_1009A8FE0);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  if (qword_10099B2A8 != -1) {
    swift_once(&qword_10099B2A8, sub_1003053E4);
  }
  uint64_t v36 = sub_10000A720(v33, (uint64_t)qword_100A2A5B0);
  v20(v17, 1LL, 1LL, v0);
  v35(v28, 1LL, 1LL, v33);
  unint64_t v46 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v36;
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v36,  0LL,  v17,  v28,  &type metadata for Int64,  &protocol witness table for Int64);
  sub_100015794(v28, &qword_1009A8FE0);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  if (qword_10099B2B8 != -1) {
    swift_once(&qword_10099B2B8, sub_100305508);
  }
  uint64_t v37 = sub_10000A720(v33, (uint64_t)qword_100A2A5E0);
  v20(v17, 1LL, 1LL, v0);
  v35(v28, 1LL, 1LL, v33);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v37,  0LL,  v17,  v28,  &type metadata for Int64,  &protocol witness table for Int64);
  sub_100015794(v28, &qword_1009A8FE0);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  if (qword_10099B2C0 != -1) {
    swift_once(&qword_10099B2C0, sub_1003055A0);
  }
  uint64_t v38 = sub_10000A720(v25, (uint64_t)qword_100A2A5F8);
  v20(v17, 1LL, 1LL, v0);
  int v39 = v48;
  v48(v8, 1LL, 1LL, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v38,  0LL,  v17,  v8,  &type metadata for Data,  &protocol witness table for Data);
  sub_100015794((uint64_t)v8, &qword_1009A8FE8);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  if (qword_10099B2C8 != -1) {
    swift_once(&qword_10099B2C8, sub_100305634);
  }
  uint64_t v40 = sub_10000A720(v25, (uint64_t)qword_100A2A610);
  v20(v17, 1LL, 1LL, v0);
  v39(v8, 1LL, 1LL, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v40,  0LL,  v17,  v8,  &type metadata for Data,  &protocol witness table for Data);
  sub_100015794((uint64_t)v8, &qword_1009A8FE8);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  if (qword_10099B2D0 != -1) {
    swift_once(&qword_10099B2D0, sub_1003056C8);
  }
  uint64_t v41 = sub_10000A720(v25, (uint64_t)qword_100A2A628);
  v20(v17, 1LL, 1LL, v0);
  v39(v8, 1LL, 1LL, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v41,  0LL,  v17,  v8,  &type metadata for Data,  &protocol witness table for Data);
  sub_100015794((uint64_t)v8, &qword_1009A8FE8);
  sub_100015794((uint64_t)v17, &qword_1009A9000);
  __int128 v49 = xmmword_1007FB2D0;
  __int128 v52 = xmmword_1007FB2D0;
  uint64_t v42 = v51;
  ~= infix<A>(_:_:)( &v52,  v47,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  TableBuilder.check(_:)(v42);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v50 + 8);
  v43(v42, v0);
  __int128 v52 = v49;
  ~= infix<A>(_:_:)( &v52,  v46,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  TableBuilder.check(_:)(v42);
  return ((uint64_t (*)(char *, uint64_t))v43)(v42, v0);
}

uint64_t sub_100304C14()
{
  if (qword_10099B270 != -1) {
    swift_once(&qword_10099B270, sub_100303208);
  }
  uint64_t v1 = type metadata accessor for Table(0LL);
  sub_10000A720(v1, (uint64_t)qword_100A2A508);
  uint64_t v2 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0LL, 0LL, 0LL, sub_100304D0C, 0LL);
  Connection.run(_:_:)(v2, v3, _swiftEmptyArrayStorage);
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100304CDC()
{
  return sub_100304C14();
}

uint64_t sub_100304CF4()
{
  return sub_100303F10(*(void *)(v0 + 16));
}

uint64_t sub_100304D0C()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A9038);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009A8FE8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A8FF8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A9000);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B278 != -1) {
    swift_once(&qword_10099B278, sub_100305084);
  }
  uint64_t v12 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2A520);
  uint64_t v14 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL);
  v15(v11, 1LL, 1LL, v14);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 1LL, 1LL, v12);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)(v13, 1LL, v11, v8, v16, &protocol witness table for UUID);
  sub_100015794((uint64_t)v8, &qword_1009A8FF8);
  sub_100015794((uint64_t)v11, &qword_1009A9000);
  if (qword_10099B2E0 != -1) {
    swift_once(&qword_10099B2E0, sub_1003057F4);
  }
  uint64_t v17 = sub_100004AEC(&qword_1009A9010);
  uint64_t v18 = sub_10000A720(v17, (uint64_t)qword_100A2A658);
  v15(v11, 1LL, 1LL, v14);
  uint64_t v19 = sub_100004AEC(&qword_10099E780);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v5, 1LL, 1LL, v19);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v18,  0LL,  v11,  v5,  &type metadata for Data,  &protocol witness table for Data);
  sub_100015794((uint64_t)v5, &qword_1009A8FE8);
  sub_100015794((uint64_t)v11, &qword_1009A9000);
  if (qword_10099B2D8 != -1) {
    swift_once(&qword_10099B2D8, sub_100305760);
  }
  uint64_t v20 = sub_100004AEC(&qword_10099E7A0);
  uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2A640);
  v15(v11, 1LL, 1LL, v14);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v2, 1LL, 1LL, v20);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v21,  0LL,  v11,  v2,  &type metadata for Int,  &protocol witness table for Int);
  sub_100015794((uint64_t)v2, &qword_1009A9038);
  return sub_100015794((uint64_t)v11, &qword_1009A9000);
}

uint64_t sub_100305084()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E6D8);
  sub_10000A8AC(v0, qword_100A2A520);
  sub_10000A720(v0, (uint64_t)qword_100A2A520);
  uint64_t v1 = sub_1000372EC(&qword_1009A9020, &qword_10099E6D8, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(25705LL, 0xE200000000000000LL, v0, v1);
}

uint64_t sub_100305108()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A9008);
  sub_10000A8AC(v0, qword_100A2A538);
  sub_10000A720(v0, (uint64_t)qword_100A2A538);
  uint64_t v1 = sub_1000372EC(&qword_1009A9030, &qword_1009A9008, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6C65646F6DLL, 0xE500000000000000LL, v0, v1);
}

uint64_t sub_100305194()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A9008);
  sub_10000A8AC(v0, qword_100A2A550);
  sub_10000A720(v0, (uint64_t)qword_100A2A550);
  uint64_t v1 = sub_1000372EC(&qword_1009A9030, &qword_1009A9008, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x65566D6574737973LL, 0xED00006E6F697372LL, v0, v1);
}

uint64_t sub_100305230()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E780);
  sub_10000A8AC(v0, qword_100A2A568);
  sub_10000A720(v0, (uint64_t)qword_100A2A568);
  uint64_t v1 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000015LL, 0x80000001008523C0LL, v0, v1);
}

uint64_t sub_1003052C4()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A9010);
  sub_10000A8AC(v0, qword_100A2A580);
  sub_10000A720(v0, (uint64_t)qword_100A2A580);
  uint64_t v1 = sub_1000372EC(&qword_1009A9028, &qword_1009A9010, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000015LL, 0x8000000100852340LL, v0, v1);
}

uint64_t sub_100305358()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E6D8);
  sub_10000A8AC(v0, qword_100A2A598);
  sub_10000A720(v0, (uint64_t)qword_100A2A598);
  uint64_t v1 = sub_1000372EC(&qword_1009A9020, &qword_10099E6D8, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x64496E6D66LL, 0xE500000000000000LL, v0, v1);
}

uint64_t sub_1003053E4()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E760);
  sub_10000A8AC(v0, qword_100A2A5B0);
  sub_10000A720(v0, (uint64_t)qword_100A2A5B0);
  uint64_t v1 = sub_1000372EC(&qword_1009A9018, &qword_10099E760, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x49746375646F7270LL, 0xE900000000000064LL, v0, v1);
}

uint64_t sub_100305478()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E760);
  sub_10000A8AC(v0, qword_100A2A5C8);
  sub_10000A720(v0, (uint64_t)qword_100A2A5C8);
  uint64_t v1 = sub_1000372EC(&qword_1009A9018, &qword_10099E760, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6449726F646E6576LL, 0xE800000000000000LL, v0, v1);
}

uint64_t sub_100305508()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E760);
  sub_10000A8AC(v0, qword_100A2A5E0);
  sub_10000A720(v0, (uint64_t)qword_100A2A5E0);
  uint64_t v1 = sub_1000372EC(&qword_1009A9018, &qword_10099E760, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x45676E6972696170LL, 0xEC00000068636F70LL, v0, v1);
}

uint64_t sub_1003055A0()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E780);
  sub_10000A8AC(v0, qword_100A2A5F8);
  sub_10000A720(v0, (uint64_t)qword_100A2A5F8);
  uint64_t v1 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000012LL, 0x800000010085D980LL, v0, v1);
}

uint64_t sub_100305634()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E780);
  sub_10000A8AC(v0, qword_100A2A610);
  sub_10000A720(v0, (uint64_t)qword_100A2A610);
  uint64_t v1 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x4B65746176697270LL, 0xEA00000000007965LL, v0, v1);
}

uint64_t sub_1003056C8()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E780);
  sub_10000A8AC(v0, qword_100A2A628);
  sub_10000A720(v0, (uint64_t)qword_100A2A628);
  uint64_t v1 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x697274656D6D7973LL, 0xEC00000079654B63LL, v0, v1);
}

uint64_t sub_100305760()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E7A0);
  sub_10000A8AC(v0, qword_100A2A640);
  sub_10000A720(v0, (uint64_t)qword_100A2A640);
  uint64_t v1 = sub_1000372EC(&qword_1009A9040, &qword_10099E7A0, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000012LL, 0x800000010085D9C0LL, v0, v1);
}

uint64_t sub_1003057F4()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A9010);
  sub_10000A8AC(v0, qword_100A2A658);
  sub_10000A720(v0, (uint64_t)qword_100A2A658);
  uint64_t v1 = sub_1000372EC(&qword_1009A9028, &qword_1009A9010, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x754E6C6169726573LL, 0xEC0000007265626DLL, v0, v1);
}

uint64_t sub_10030588C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A670);
  sub_10000A720(v0, (uint64_t)qword_100A2A670);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000011LL,  0x800000010085DA00LL);
}

uint64_t sub_10030590C()
{
  uint64_t v2 = type metadata accessor for Keychain.DataProtectionClass(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = static Keychain.data(account:service:)(0x6170686372616573LL, 0xEB00000000797472LL, 0x6F745364756F6C43LL);
  if (!v1)
  {
    if (v7 >> 60 == 15)
    {
      uint64_t v0 = static Data.random(bytes:)(32LL);
      unint64_t v9 = v8;
      v12[0] = v0;
      v12[1] = v8;
      (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Keychain.DataProtectionClass.c(_:),  v2);
      sub_10001736C(v0, v9);
      unint64_t v10 = sub_100042F34();
      static Keychain.set<A>(data:account:service:dataProtectionClass:)( v12,  0x6170686372616573LL,  0xEB00000000797472LL,  0x6F745364756F6C43LL,  0xEC00000065676172LL,  v5,  &type metadata for Data,  v10);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_100016F9C(v0, v9);
    }

    else
    {
      return v6;
    }
  }

  return v0;
}

uint64_t sub_100305ACC(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for CloudStorageDatabase(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryGenericPayload()
{
  return &type metadata for AccessoryGenericPayload;
}

unint64_t sub_100305B1C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100305B48();
  unint64_t result = sub_1000F5000();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100305B48()
{
  unint64_t result = qword_1009A9058;
  if (!qword_1009A9058)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB498, &type metadata for AccessoryGenericPayload);
    atomic_store(result, (unint64_t *)&qword_1009A9058);
  }

  return result;
}

uint64_t sub_100305B8C(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2 = 0x7972616D697250LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x7261646E6F636553LL;
    }
    else {
      uint64_t v4 = 0x6F4C657275636553LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE900000000000079LL;
    }
    else {
      unint64_t v5 = 0xEF736E6F69746163LL;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        uint64_t v2 = 0x7261646E6F636553LL;
      }
      else {
        uint64_t v2 = 0x6F4C657275636553LL;
      }
      if (v6 == 1) {
        unint64_t v7 = 0xE900000000000079LL;
      }
      else {
        unint64_t v7 = 0xEF736E6F69746163LL;
      }
      if (v4 != v2) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v5 = 0xE700000000000000LL;
    uint64_t v4 = 0x7972616D697250LL;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE700000000000000LL;
  if (v4 != 0x7972616D697250LL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0LL);
    goto LABEL_22;
  }

uint64_t sub_100305CC4(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 80LL;
  }
  else {
    uint64_t v2 = 84LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 80LL;
  }
  else {
    uint64_t v3 = 84LL;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000LL, v3, 0xE100000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE100000000000000LL, 2LL);
  return v4 & 1;
}

void sub_100305D28(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100305D84(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100305DE4 + 4 * byte_1007FB50C[a2]))(0x64696C6176LL);
}

uint64_t sub_100305DE4(uint64_t a1)
{
  if (a1 == 0x64696C6176LL && v1 == 0xE500000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x64696C6176LL, 0xE500000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000LL);
  return v2 & 1;
}

void sub_100305E8C(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100305EF8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100305F5C + 4 * byte_1007FB514[a2]))(1818322280LL);
}

uint64_t sub_100305F5C(uint64_t a1)
{
  if (a1 == 1818322280 && v1 == 0xE400000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1818322280LL, 0xE400000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  return v2 & 1;
}

void sub_100306008(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100306064(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003060D4 + 4 * byte_1007FB51D[a2]))(29556LL);
}

uint64_t sub_1003060D4(uint64_t a1)
{
  if (a1 == 29556 && v1 == 0xE200000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 29556LL, 0xE200000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000LL);
  return v2 & 1;
}

void sub_100306190(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1003061D8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100306274 + 4 * byte_1007FB528[a2]))(0x6953726576726573LL);
}

uint64_t sub_100306274(uint64_t a1)
{
  if (a1 == 0x6953726576726573LL && v1 == 0xEA00000000006E67LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6953726576726573LL, 0xEA00000000006E67LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006E67LL);
  return v2 & 1;
}

void sub_100306360(char a1)
{
  __asm { BR              X11 }

uint64_t sub_100306450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0x800000010084D950LL;
  if (a1 == a3 && v3 == 0x800000010084D950LL)
  {
    char v5 = 1;
    unint64_t v4 = v3;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, 0x800000010084D950LL, 0LL);
  }

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return v5 & 1;
}

void sub_100306538(char a1)
{
  __asm { BR              X11 }

uint64_t sub_100306584(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100306684 + 4 * byte_1007FB543[a2]))(a3 + 2);
}

uint64_t sub_100306684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 2;
  unint64_t v5 = 0x80000001008500B0LL;
  if (a1 == v4 && v3 == 0x80000001008500B0LL)
  {
    char v6 = 1;
    unint64_t v5 = v3;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, v4, 0x80000001008500B0LL, 0LL);
  }

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  return v6 & 1;
}

uint64_t sub_1003067E4(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 29548LL;
  }
  else {
    uint64_t v2 = 27496LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 29548LL;
  }
  else {
    uint64_t v3 = 27496LL;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE200000000000000LL, v3, 0xE200000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE200000000000000LL, 2LL);
  return v4 & 1;
}

uint64_t sub_100306848(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0x800000010084DA60LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0xD000000000000036LL;
    }
    else {
      unint64_t v4 = 0xD000000000000035LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0x800000010084DAA0LL;
    }
    else {
      unint64_t v5 = 0x800000010084DAE0LL;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        unint64_t v7 = 0xD000000000000036LL;
      }
      else {
        unint64_t v7 = 0xD000000000000035LL;
      }
      if (v6 == 1) {
        unint64_t v2 = 0x800000010084DAA0LL;
      }
      else {
        unint64_t v2 = 0x800000010084DAE0LL;
      }
      if (v4 != v7) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xD000000000000037LL;
    unint64_t v5 = 0x800000010084DA60LL;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xD000000000000037LL;
  if (v4 != 0xD000000000000037LL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v7, v2, 0LL);
    goto LABEL_22;
  }

void sub_10030693C(char a1)
{
  __asm { BR              X12 }

uint64_t sub_100306988(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100306A20 + 4 * byte_1007FB552[a2]))(v2 + 7);
}

uint64_t sub_100306A20(uint64_t a1)
{
  unint64_t v3 = 0x800000010084E150LL;
  if (a1 == v1 + 7 && v2 == 0x800000010084E150LL)
  {
    char v4 = 1;
    unint64_t v3 = v2;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v1 + 7, 0x800000010084E150LL, 0LL);
  }

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

void sub_100306AF4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100306B50(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100306C2C + 4 * byte_1007FB561[a2]))(0x6449646D63LL);
}

uint64_t sub_100306C2C(uint64_t a1)
{
  if (a1 == 0x6449646D63LL && v1 == 0xE500000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6449646D63LL, 0xE500000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000LL);
  return v2 & 1;
}

void sub_100306D74(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100306DC4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100306E7C + 4 * byte_1007FB572[a2]))(0x646567617473LL);
}

uint64_t sub_100306E7C(uint64_t a1)
{
  if (a1 == 0x646567617473LL && v1 == 0xE600000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x646567617473LL, 0xE600000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000LL);
  return v2 & 1;
}

uint64_t sub_100306F94(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0xD000000000000014LL;
  }
  else {
    unint64_t v3 = 0x6E776F6E6B6E75LL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0x800000010084FFF0LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v5 = 0xD000000000000014LL;
  }
  else {
    unint64_t v5 = 0x6E776F6E6B6E75LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x800000010084FFF0LL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10030703C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v8 = v6;
  if (v3 == v7 && v5 == v6)
  {
    char v9 = 1;
    uint64_t v8 = v5;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v7, v6, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

void sub_1003070C4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100307114(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10030719C + 4 * byte_1007FB57F[a2]))(0x726576726573LL);
}

uint64_t sub_10030719C(uint64_t a1)
{
  if (a1 == 0x726576726573LL && v1 == 0xE600000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x726576726573LL, 0xE600000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000LL);
  return v2 & 1;
}

uint64_t sub_10030726C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x7354746E657665LL;
  }
  else {
    uint64_t v3 = 0x746E657665LL;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x7354746E657665LL;
  }
  else {
    uint64_t v5 = 0x746E657665LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE700000000000000LL;
  }
  else {
    unint64_t v6 = 0xE500000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10030730C(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 1802661751LL;
  }
  else {
    uint64_t v2 = 1701670760LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 1802661751LL;
  }
  else {
    uint64_t v3 = 1701670760LL;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE400000000000000LL, v3, 0xE400000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE400000000000000LL, 2LL);
  return v4 & 1;
}

void sub_100307378(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1003073C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100307420 + 4 * byte_1007FB588[a2]))(0x676E696C637963LL);
}

uint64_t sub_100307420(uint64_t a1)
{
  if (a1 == 0x676E696C637963LL && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x676E696C637963LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1003074C4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0x61636F4C6E736361LL;
  }
  else {
    unint64_t v3 = 0xD000000000000014LL;
  }
  if (v2) {
    unint64_t v4 = 0x800000010084FFC0LL;
  }
  else {
    unint64_t v4 = 0xED0000736E6F6974LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v5 = 0x61636F4C6E736361LL;
  }
  else {
    unint64_t v5 = 0xD000000000000014LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xED0000736E6F6974LL;
  }
  else {
    unint64_t v6 = 0x800000010084FFC0LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100307578(char a1)
{
  __asm { BR              X12 }

uint64_t sub_1003075C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100307654 + 4 * byte_1007FB593[a2]))(0xD00000000000002CLL);
}

uint64_t sub_100307654(uint64_t a1)
{
  unint64_t v2 = 0x800000010084FE50LL;
  if (a1 == 0xD00000000000002CLL && v1 == 0x800000010084FE50LL)
  {
    char v3 = 1;
    unint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD00000000000002CLL, 0x800000010084FE50LL, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_10030771C(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100307754(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100307794 + 4 * byte_1007FB59E[a2]))(21840LL);
}

uint64_t sub_100307794(uint64_t a1)
{
  if (a1 == 21840 && v1 == 0xE200000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 21840LL, 0xE200000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000LL);
  return v2 & 1;
}

void sub_100307814(char a1)
{
  __asm { BR              X11 }

uint64_t sub_100307860(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10030794C + 4 * byte_1007FB5AB[a2]))(0x696669746E656469LL);
}

uint64_t sub_10030794C(uint64_t a1)
{
  if (a1 == 0x696669746E656469LL && v1 == 0xEA00000000007265LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x696669746E656469LL, 0xEA00000000007265LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000007265LL);
  return v2 & 1;
}

uint64_t sub_100307A98(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6F43737574617473LL;
  }
  else {
    uint64_t v3 = 0x7069726373627573LL;
  }
  if (v2) {
    unint64_t v4 = 0xEE0064496E6F6974LL;
  }
  else {
    unint64_t v4 = 0xEA00000000006564LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6F43737574617473LL;
  }
  else {
    uint64_t v5 = 0x7069726373627573LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEA00000000006564LL;
  }
  else {
    unint64_t v6 = 0xEE0064496E6F6974LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100307B4C(char a1)
{
  __asm { BR              X12 }

uint64_t sub_100307B9C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100307C78 + 4 * byte_1007FB5BC[a2]))(v2 + 9);
}

uint64_t sub_100307C78(uint64_t a1)
{
  unint64_t v3 = 0x800000010084FD60LL;
  if (a1 == v1 + 9 && v2 == 0x800000010084FD60LL)
  {
    char v4 = 1;
    unint64_t v3 = v2;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v1 + 9, 0x800000010084FD60LL, 0LL);
  }

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

uint64_t sub_100307D84(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x657669746361LL;
  }
  else {
    uint64_t v3 = 0x7472656E69LL;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000LL;
  }
  else {
    unint64_t v4 = 0xE600000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x657669746361LL;
  }
  else {
    uint64_t v5 = 0x7472656E69LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xE500000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100307E20(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100307E60(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100307ED8 + 4 * byte_1007FB5C9[a2]))(1936094325LL);
}

uint64_t sub_100307ED8(uint64_t a1)
{
  if (a1 == 1936094325 && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1936094325LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_100307F98(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2 = 0x72656E776FLL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x646572616873LL;
    }
    else {
      uint64_t v4 = 6448503LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE600000000000000LL;
    }
    else {
      unint64_t v5 = 0xE300000000000000LL;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        uint64_t v2 = 0x646572616873LL;
      }
      else {
        uint64_t v2 = 6448503LL;
      }
      if (v6 == 1) {
        unint64_t v7 = 0xE600000000000000LL;
      }
      else {
        unint64_t v7 = 0xE300000000000000LL;
      }
      if (v4 != v2) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v5 = 0xE500000000000000LL;
    uint64_t v4 = 0x72656E776FLL;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE500000000000000LL;
  if (v4 != 0x72656E776FLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0LL);
    goto LABEL_22;
  }

void sub_100308094(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1003080DC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100308140 + 4 * byte_1007FB5D3[a2]))(1684107369LL);
}

uint64_t sub_100308140(uint64_t a1)
{
  if (a1 == 1684107369 && v1 == 0xE400000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1684107369LL, 0xE400000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  return v2 & 1;
}

void sub_1003081EC(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100308224(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003082CC + 4 * byte_1007FB5DF[a2]))(0x6C6562616CLL);
}

uint64_t sub_1003082CC(uint64_t a1)
{
  if (a1 == 0x6C6562616CLL && v1 == 0xE500000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6C6562616CLL, 0xE500000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000LL);
  return v2 & 1;
}

uint64_t sub_1003083C0(char a1, unsigned __int8 a2)
{
  unint64_t v2 = 0x800000010084E6B0LL;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0x800000010084E6D0LL;
    }
    else {
      unint64_t v3 = 0x800000010084E6F0LL;
    }
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }

  else
  {
    unint64_t v3 = 0x800000010084E6B0LL;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        unint64_t v2 = 0x800000010084E6D0LL;
      }
      else {
        unint64_t v2 = 0x800000010084E6F0LL;
      }
    }
  }

  if (v3 == v2)
  {
    char v5 = 1;
    unint64_t v2 = v3;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, v3, 0xD000000000000010LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return v5 & 1;
}

uint64_t sub_10030849C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6974737561687865LL;
  }
  else {
    uint64_t v3 = 0x6F4C74736574616CLL;
  }
  if (v2) {
    unint64_t v4 = 0xEE006E6F69746163LL;
  }
  else {
    unint64_t v4 = 0xEA00000000006576LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6974737561687865LL;
  }
  else {
    uint64_t v5 = 0x6F4C74736574616CLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEA00000000006576LL;
  }
  else {
    unint64_t v6 = 0xEE006E6F69746163LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100308550(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1003085AC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100308630 + 4 * byte_1007FB5EB[a2]))(0x65746144646E65LL);
}

uint64_t sub_100308630(uint64_t a1)
{
  if (a1 == 0x65746144646E65LL && v1 == 0xE700000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x65746144646E65LL, 0xE700000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  return v2 & 1;
}

uint64_t sub_100308700(char a1, char a2)
{
  uint64_t v2 = qword_1007FB980[a1];
  uint64_t v3 = qword_1007FB980[a2];
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000LL, v3, 0xE100000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE100000000000000LL, 2LL);
  return v4 & 1;
}

uint64_t sub_100308764(char a1, char a2)
{
  uint64_t v2 = qword_1007FB998[a1];
  uint64_t v3 = qword_1007FB998[a2];
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000LL, v3, 0xE100000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE100000000000000LL, 2LL);
  return v4 & 1;
}

void sub_1003087C8(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100308818(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100308948 + 4 * byte_1007FB5F9[a2]))(0x6F506D756964656DLL);
}

uint64_t sub_100308948(uint64_t a1)
{
  if (a1 == 0x6F506D756964656DLL && v1 == 0xEB00000000726577LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6F506D756964656DLL, 0xEB00000000726577LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB00000000726577LL);
  return v2 & 1;
}

void sub_100308AD4(char a1)
{
  __asm { BR              X11 }

uint64_t sub_100308B20(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100308BD4 + 4 * byte_1007FB609[a2]))(0x6E6F6973726576LL);
}

uint64_t sub_100308BD4(uint64_t a1)
{
  if (a1 == 0x6E6F6973726576LL && v1 == 0xE700000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6E6F6973726576LL, 0xE700000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  return v2 & 1;
}

uint64_t sub_100308CE0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000010LL;
  unint64_t v3 = 0x800000010084D8A0LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x65636E6575716573LL;
    }
    else {
      unint64_t v5 = 0x7865646E69LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE800000000000000LL;
    }
    else {
      unint64_t v6 = 0xE500000000000000LL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  unint64_t v5 = 0xD000000000000010LL;
  unint64_t v6 = 0x800000010084D8A0LL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0x65636E6575716573LL;
    }
    else {
      unint64_t v2 = 0x7865646E69LL;
    }
    if (v7 == 1) {
      unint64_t v3 = 0xE800000000000000LL;
    }
    else {
      unint64_t v3 = 0xE500000000000000LL;
    }
  }

void sub_100308DE4(char a1)
{
  __asm { BR              X12 }

uint64_t sub_100308E30(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100308EC0 + 4 * byte_1007FB617[a2]))(0xD000000000000016LL);
}

uint64_t sub_100308EC0(uint64_t a1)
{
  unint64_t v2 = 0x800000010084DD20LL;
  if (a1 == 0xD000000000000016LL && v1 == 0x800000010084DD20LL)
  {
    char v3 = 1;
    unint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000016LL, 0x800000010084DD20LL, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_100308F88(char a1)
{
  __asm { BR              X11 }

uint64_t sub_100308FD4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10030903C + 4 * byte_1007FB622[a2]))(1701869940LL);
}

uint64_t sub_10030903C(uint64_t a1)
{
  if (a1 == 1701869940 && v1 == 0xE400000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1701869940LL, 0xE400000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  return v2 & 1;
}

void sub_1003090E8(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100309154(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100309228 + 4 * byte_1007FB62E[a2]))(0x6D617473656D6974LL);
}

uint64_t sub_100309228(uint64_t a1)
{
  if (a1 == 0x6D617473656D6974LL && v1 == 0xE900000000000070LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6D617473656D6974LL, 0xE900000000000070LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000070LL);
  return v2 & 1;
}

uint64_t sub_100309360(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 3158066LL;
  }
  else {
    uint64_t v3 = 0x726F7272456F6ELL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xE300000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 3158066LL;
  }
  else {
    uint64_t v5 = 0x726F7272456F6ELL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE300000000000000LL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1003093FC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v3 = 0x7974696C697475LL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xEB0000000065636ELL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v5 = 0x7974696C697475LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEB0000000065636ELL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1003094A8(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1003094F4(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE400000000000000LL);
}

void sub_100309554(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100309590(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xEA00000000006E67LL);
}

void sub_100309624(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100309668(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(0x800000010084D950LL);
}

void sub_100309708(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10030974C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(0x80000001008500B0LL);
}

uint64_t sub_100309844(uint64_t a1, unsigned __int8 a2)
{
  int v2 = a2;
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v3 = 0xD000000000000036LL;
    }
    else {
      unint64_t v3 = 0xD000000000000035LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0x800000010084DAA0LL;
    }
    else {
      unint64_t v4 = 0x800000010084DAE0LL;
    }
  }

  else
  {
    unint64_t v3 = 0xD000000000000037LL;
    unint64_t v4 = 0x800000010084DA60LL;
  }

  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_1003098BC(uint64_t a1, char a2)
{
  __asm { BR              X11 }

uint64_t sub_100309904(uint64_t a1)
{
  return swift_bridgeObjectRelease(0x800000010084E150LL);
}

void sub_100309990(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1003099D4(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE500000000000000LL);
}

void sub_100309AAC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100309AEC(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE600000000000000LL);
}

void sub_100309B9C(uint64_t a1, char a2)
{
  __asm { BR              X11 }

uint64_t sub_100309BE4(uint64_t a1)
{
  return swift_bridgeObjectRelease(0x800000010084FE50LL);
}

void sub_100309C68(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100309CAC(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xEA00000000007265LL);
}

void sub_100309D90(uint64_t a1, char a2)
{
  __asm { BR              X11 }

uint64_t sub_100309DDC(uint64_t a1)
{
  return swift_bridgeObjectRelease(0x800000010084FD60LL);
}

uint64_t sub_100309EAC(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v2 = 0x800000010084E6D0LL;
    }
    else {
      unint64_t v2 = 0x800000010084E6F0LL;
    }
  }

  else
  {
    unint64_t v2 = 0x800000010084E6B0LL;
  }

  String.hash(into:)(a1, 0xD000000000000010LL, v2);
  return swift_bridgeObjectRelease(v2);
}

void sub_100309F1C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100309F5C(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xEB00000000726577LL);
}

void sub_10030A060(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10030A0A4(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE700000000000000LL);
}

void sub_10030A150(uint64_t a1, char a2)
{
  __asm { BR              X11 }

uint64_t sub_10030A198(uint64_t a1)
{
  return swift_bridgeObjectRelease(0x800000010084DD20LL);
}

void sub_10030A21C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10030A268(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE900000000000070LL);
}

void sub_10030A338(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030A390()
{
  return Hasher._finalize()();
}

void sub_10030A404(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030A44C()
{
  return Hasher._finalize()();
}

void sub_10030A4F4(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030A548()
{
  return Hasher._finalize()();
}

Swift::Int sub_10030A604(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v3 = 0xD000000000000036LL;
    }
    else {
      unint64_t v3 = 0xD000000000000035LL;
    }
    if (a2 == 1) {
      unint64_t v4 = 0x800000010084DAA0LL;
    }
    else {
      unint64_t v4 = 0x800000010084DAE0LL;
    }
  }

  else
  {
    unint64_t v3 = 0xD000000000000037LL;
    unint64_t v4 = 0x800000010084DA60LL;
  }

  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_10030A6A0(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030A6F8()
{
  return Hasher._finalize()();
}

void sub_10030A79C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030A7E8()
{
  return Hasher._finalize()();
}

void sub_10030A8AC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030A904()
{
  return Hasher._finalize()();
}

void sub_10030A9A0(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030A9FC()
{
  return Hasher._finalize()();
}

void sub_10030AAE4(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030AB24()
{
  return Hasher._finalize()();
}

Swift::Int sub_10030ABD4(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v3 = 0x800000010084E6D0LL;
    }
    else {
      unint64_t v3 = 0x800000010084E6F0LL;
    }
  }

  else
  {
    unint64_t v3 = 0x800000010084E6B0LL;
  }

  String.hash(into:)(v5, 0xD000000000000010LL, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_10030AC68(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030ACBC()
{
  return Hasher._finalize()();
}

void sub_10030AD84(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030ADDC()
{
  return Hasher._finalize()();
}

void sub_10030AE78(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030AEC8()
{
  return Hasher._finalize()();
}

void sub_10030AF3C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10030AF94()
{
  return Hasher._finalize()();
}

uint64_t sub_10030B078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v37 = 0x2000000000LL;
  uint64_t v38 = __DataStorage.init(length:)(32LL);
  sub_1003124A0((int *)&v37, 0);
  uint64_t v5 = v37;
  uint64_t v6 = HIDWORD(v37);
  if (__OFSUB__(HIDWORD(v37), (_DWORD)v37))
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v7 = v38;
  if (HIDWORD(v37) - (_DWORD)v37 != 32)
  {
LABEL_8:
    swift_release();
    uint64_t v32 = 94LL;
    uint64_t v31 = "Could not create fakeSharedSecretKey";
    goto LABEL_10;
  }

  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v8 = __DataStorage.init(length:)(32LL);
  uint64_t v37 = 0x2000000000LL;
  uint64_t v38 = v8;
  sub_1003124A0((int *)&v37, 0);
  uint64_t v9 = v37;
  uint64_t v10 = HIDWORD(v37);
  if (__OFSUB__(HIDWORD(v37), (_DWORD)v37))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v34 = v7;
  uint64_t v35 = v6;
  uint64_t v36 = v5;
  uint64_t v33 = v38;
  if (HIDWORD(v37) - (_DWORD)v37 == 32)
  {
    uint64_t v11 = type metadata accessor for TimeBasedKey(0LL);
    uint64_t v12 = a1 + *(int *)(v11 + 20);
    uint64_t v13 = type metadata accessor for DateInterval(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(a2, v12, v13);
    uint64_t v14 = (void *)(a1 + *(int *)(v11 + 24));
    uint64_t v15 = v14[4];
    unint64_t v16 = v14[5];
    uint64_t v17 = (int *)type metadata accessor for CryptoKeys(0LL);
    uint64_t v18 = (uint64_t *)(a2 + v17[5]);
    *uint64_t v18 = v15;
    v18[1] = v16;
    uint64_t v19 = v14[2];
    unint64_t v20 = v14[3];
    uint64_t v21 = (uint64_t *)(a2 + v17[6]);
    *uint64_t v21 = v19;
    v21[1] = v20;
    sub_10001736C(v19, v20);
    sub_10001736C(v19, v20);
    sub_100018BE4(v15, v16);
    uint64_t v22 = sub_1004DFCF0(v19, v20);
    uint64_t v24 = v23;
    sub_100016F9C(v19, v20);
    sub_1001782E4(v22, v24);
    uint64_t v25 = v37;
    uint64_t v26 = v38;
    uint64_t result = sub_100018C68(a1, type metadata accessor for TimeBasedKey);
    uint64_t v28 = (uint64_t *)(a2 + v17[7]);
    uint64_t *v28 = v25;
    v28[1] = v26;
    uint64_t v29 = (uint64_t *)(a2 + v17[8]);
    *uint64_t v29 = v36 | (v35 << 32);
    v29[1] = v34 | 0x4000000000000000LL;
    uint64_t v30 = (uint64_t *)(a2 + v17[9]);
    *uint64_t v30 = v9 | (v10 << 32);
    v30[1] = v33 | 0x4000000000000000LL;
    return result;
  }

  swift_release();
  uint64_t v32 = 98LL;
  uint64_t v31 = "Could not create fakeIntermediateKey";
LABEL_10:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000024LL,  (unint64_t)(v31 - 32) | 0x8000000000000000LL,  "searchpartyd/CryptoKeys.swift",  29LL,  2LL,  v32,  0);
  __break(1u);
  return result;
}

uint64_t CryptoKeys.privateKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoKeys(0LL) + 20);
  uint64_t v2 = *(void *)v1;
  sub_100018BE4(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for CryptoKeys(uint64_t a1)
{
  uint64_t result = qword_1009A90E0;
  if (!qword_1009A90E0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CryptoKeys);
  }
  return result;
}

uint64_t CryptoKeys.publicKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoKeys(0LL) + 24);
  uint64_t v2 = *(void *)v1;
  sub_10001736C(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.advertisement.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoKeys(0LL) + 28);
  uint64_t v2 = *(void *)v1;
  sub_10001736C(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.sharedSecretKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoKeys(0LL) + 32);
  uint64_t v2 = *(void *)v1;
  sub_10001736C(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.intermediateKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoKeys(0LL) + 36);
  uint64_t v2 = *(void *)v1;
  sub_10001736C(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DateInterval(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A9060,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
  uint64_t v6 = (int *)type metadata accessor for CryptoKeys(0LL);
  uint64_t v7 = (uint64_t *)(v1 + v6[5]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v9 = *v7;
    Hasher._combine(_:)(1u);
    sub_10001736C(v9, v8);
    Data.hash(into:)(a1, v9, v8);
    sub_1000182F0(v9, v8);
  }

  uint64_t v10 = (uint64_t *)(v1 + v6[6]);
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  sub_10001736C(*v10, v12);
  Data.hash(into:)(a1, v11, v12);
  sub_100016F9C(v11, v12);
  uint64_t v13 = (uint64_t *)(v2 + v6[7]);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_10001736C(*v13, v15);
  Data.hash(into:)(a1, v14, v15);
  sub_100016F9C(v14, v15);
  unint64_t v16 = (uint64_t *)(v2 + v6[8]);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_10001736C(*v16, v18);
  Data.hash(into:)(a1, v17, v18);
  sub_100016F9C(v17, v18);
  uint64_t v19 = (uint64_t *)(v2 + v6[9]);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_10001736C(*v19, v21);
  Data.hash(into:)(a1, v20, v21);
  return sub_100016F9C(v20, v21);
}

Swift::Int CryptoKeys.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_10030B714(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10030B73C + 4 * byte_1007FB6EB[a1]))( 68LL,  0xE100000000000000LL);
}

uint64_t sub_10030B73C()
{
  return 21072LL;
}

uint64_t sub_10030B748()
{
  return 21840LL;
}

uint64_t sub_10030B754()
{
  return 65LL;
}

uint64_t sub_10030B75C()
{
  return 19283LL;
}

uint64_t sub_10030B768()
{
  return 79LL;
}

uint64_t sub_10030B770()
{
  return 17747LL;
}

uint64_t sub_10030B77C()
{
  return 18771LL;
}

uint64_t sub_10030B788()
{
  return 73LL;
}

uint64_t sub_10030B790()
{
  return 19779LL;
}

uint64_t sub_10030B79C()
{
  return 20035LL;
}

uint64_t sub_10030B7A8()
{
  return 78LL;
}

uint64_t sub_10030B7B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10030B7D8 + 4 * byte_1007FB6F7[a1]))( 68LL,  0xE100000000000000LL);
}

uint64_t sub_10030B7D8()
{
  return 21072LL;
}

uint64_t sub_10030B7E4()
{
  return 21840LL;
}

uint64_t sub_10030B7F0()
{
  return 65LL;
}

uint64_t sub_10030B7F8()
{
  return 19283LL;
}

uint64_t sub_10030B804()
{
  return 79LL;
}

uint64_t sub_10030B80C()
{
  return 17747LL;
}

uint64_t sub_10030B818()
{
  return 18771LL;
}

uint64_t sub_10030B824()
{
  return 73LL;
}

uint64_t sub_10030B82C()
{
  return 19779LL;
}

uint64_t sub_10030B838()
{
  return 20035LL;
}

uint64_t sub_10030B844()
{
  return 78LL;
}

Swift::Int sub_10030B850(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10030B888(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_10030B714(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10030B714(v2);
  if (v3 == v6 && v5 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_10030B910()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  uint64_t v2 = sub_10030B714(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10030B970(uint64_t a1)
{
  uint64_t v3 = sub_10030B714(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_10030B9B0(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  uint64_t v3 = sub_10030B714(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_10030BA0C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100313164(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10030BA38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10030B714(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10030BA60()
{
  return sub_10030B7B0(*v0);
}

unint64_t sub_10030BA68@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100313164(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10030BA8C(uint64_t a1)
{
  unint64_t v2 = sub_1003127B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030BAB4(uint64_t a1)
{
  unint64_t v2 = sub_1003127B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CryptoKeys.encode(to:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v90 = *(void *)(v2 - 8);
  uint64_t v91 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A9068);
  uint64_t v93 = *(void *)(v9 - 8);
  uint64_t v94 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_1003127B0();
  unint64_t v96 = v11;
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CryptoKeys.CodingKeys,  &type metadata for CryptoKeys.CodingKeys,  v14,  v12,  v13);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_100012ED8(a1, v15);
  uint64_t v17 = dispatch thunk of Encoder.userInfo.getter(v15, v16);
  if (qword_10099BA20 != -1) {
    swift_once(&qword_10099BA20, sub_100792B54);
  }
  uint64_t v18 = sub_10000A720(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v18, v5);
  if (*(void *)(v17 + 16) && (unint64_t v19 = sub_10030D0D4((uint64_t)v8), (v20 & 1) != 0))
  {
    sub_10006A650(*(void *)(v17 + 56) + 32 * v19, (uint64_t)&v98);
  }

  else
  {
    __int128 v98 = 0u;
    __int128 v99 = 0u;
  }

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (*((void *)&v99 + 1))
  {
    int v21 = swift_dynamicCast(&v97, &v98, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
    unint64_t v22 = v95;
    uint64_t v24 = v91;
    uint64_t v23 = v92;
    uint64_t v25 = v90;
    if (v21) {
      int v26 = v97;
    }
    else {
      int v26 = 0;
    }
  }

  else
  {
    sub_100015794((uint64_t)&v98, &qword_10099E200);
    int v26 = 0;
    unint64_t v22 = v95;
    uint64_t v24 = v91;
    uint64_t v23 = v92;
    uint64_t v25 = v90;
  }

  uint64_t v27 = sub_100004AEC(&qword_1009A3780);
  uint64_t v28 = swift_allocObject(v27, 48LL, 7LL);
  *(_OWORD *)(v28 + 16) = xmmword_1007E4750;
  uint64_t v29 = DateInterval.start.getter(v28);
  double v30 = Date.timeIntervalSinceReferenceDate.getter(v29);
  uint64_t v31 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v4, v24);
  *(double *)(v28 + 32) = v30;
  *(double *)(v28 + 40) = DateInterval.duration.getter(v31);
  *(void *)&__int128 v98 = v28;
  LOBYTE(v97) = 0;
  uint64_t v32 = sub_100004AEC(&qword_1009A3788);
  uint64_t v33 = sub_100170438( &qword_1009A3790,  (uint64_t)&protocol witness table for Double,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v34 = v94;
  uint64_t v35 = v32;
  uint64_t v36 = v96;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v94, v35, v33);
  if (v23)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v36, v34);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = (int *)type metadata accessor for CryptoKeys(0LL);
    uint64_t v38 = (uint64_t *)(v22 + v37[5]);
    uint64_t v40 = *v38;
    unint64_t v39 = v38[1];
    if (v39 >> 60 == 15)
    {
      uint64_t v40 = 0LL;
      unint64_t v39 = 0xF000000000000000LL;
    }

    *(void *)&__int128 v98 = v40;
    *((void *)&v98 + 1) = v39;
    LOBYTE(v97) = 1;
    unint64_t v41 = sub_1000170A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v98, &v97, v34, &type metadata for Data, v41);
    __int128 v98 = *(_OWORD *)(v22 + v37[6]);
    LOBYTE(v97) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v34, &type metadata for Data, v41);
    uint64_t v42 = (void *)(v22 + v37[7]);
    unint64_t v44 = v42[1];
    *(void *)&__int128 v98 = *v42;
    uint64_t v43 = v98;
    *((void *)&v98 + 1) = v44;
    LOBYTE(v97) = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v34, &type metadata for Data, v41);
    uint64_t v92 = v43;
    uint64_t v45 = (void *)(v22 + v37[9]);
    unint64_t v46 = v45[1];
    *(void *)&__int128 v98 = *v45;
    uint64_t v47 = v98;
    *((void *)&v98 + 1) = v46;
    LOBYTE(v97) = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v34, &type metadata for Data, v41);
    uint64_t v91 = v47;
    if (v26)
    {
      unint64_t v95 = v46;
      uint64_t v49 = v34;
      uint64_t v50 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      uint64_t v51 = __DataStorage.init(length:)(32LL);
      *(void *)&__int128 v98 = 0x2000000000LL;
      *((void *)&v98 + 1) = v51;
      sub_1003124A0((int *)&v98, 0);
      *((void *)&v98 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v97) = 4;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v49, &type metadata for Data, v41);
      swift_release();
      swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      uint64_t v72 = __DataStorage.init(length:)(32LL);
      *(void *)&__int128 v98 = 0x2000000000LL;
      *((void *)&v98 + 1) = v72;
      sub_1003124A0((int *)&v98, 0);
      *((void *)&v98 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v97) = 5;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v49, &type metadata for Data, v41);
      swift_release();
      swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      uint64_t v73 = __DataStorage.init(length:)(32LL);
      *(void *)&__int128 v98 = 0x2000000000LL;
      *((void *)&v98 + 1) = v73;
      sub_1003124A0((int *)&v98, 0);
      *((void *)&v98 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v97) = 6;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v49, &type metadata for Data, v41);
      swift_release();
      swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      uint64_t v74 = __DataStorage.init(length:)(16LL);
      *(void *)&__int128 v98 = 0x1000000000LL;
      *((void *)&v98 + 1) = v74;
      sub_1003124A0((int *)&v98, 0);
      *((void *)&v98 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v97) = 7;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v49, &type metadata for Data, v41);
      swift_release();
    }

    else
    {
      __int128 v98 = *(_OWORD *)(v95 + v37[8]);
      LOBYTE(v97) = 4;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v34, &type metadata for Data, v41);
      unint64_t v95 = v46;
    }

    uint64_t v52 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
    unint64_t v54 = v53;
    uint64_t v55 = v91;
    unint64_t v56 = v95;
    sub_10001736C(v91, v95);
    sub_1004DF7EC(v55, v56, v52, v54, 32LL);
    uint64_t v58 = v57;
    uint64_t v60 = v59;
    sub_100016F9C(v55, v56);
    sub_1001782BC(v58, v60);
    sub_100016F9C(v52, v54);
    __int128 v61 = v98;
    LOBYTE(v97) = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v94, &type metadata for Data, v41);
    sub_100016F9C(v61, *((unint64_t *)&v61 + 1));
    uint64_t v62 = String.utf8Data.getter(0x7463656E6E6F63LL, 0xE700000000000000LL);
    unint64_t v64 = v63;
    uint64_t v65 = v91;
    unint64_t v66 = v95;
    sub_10001736C(v91, v95);
    sub_1004DF7EC(v65, v66, v62, v64, 32LL);
    uint64_t v68 = v67;
    uint64_t v70 = v69;
    sub_100016F9C(v65, v66);
    sub_1001782BC(v68, v70);
    sub_100016F9C(v62, v64);
    __int128 v71 = v98;
    LOBYTE(v97) = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v94, &type metadata for Data, v41);
    sub_100016F9C(v71, *((unint64_t *)&v71 + 1));
    uint64_t v75 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
    unint64_t v77 = v76;
    uint64_t v78 = v91;
    unint64_t v79 = v95;
    sub_10001736C(v91, v95);
    sub_1004DF7EC(v78, v79, v75, v77, 32LL);
    uint64_t v81 = v80;
    uint64_t v83 = v82;
    sub_100016F9C(v78, v79);
    sub_1001782BC(v81, v83);
    sub_100016F9C(v75, v77);
    __int128 v84 = v98;
    uint64_t v85 = sub_10017AFAC(v98, *((unint64_t *)&v98 + 1), v92, v44);
    unint64_t v87 = v86;
    sub_100016F9C(v84, *((unint64_t *)&v84 + 1));
    *(void *)&__int128 v98 = v85;
    *((void *)&v98 + 1) = v87;
    LOBYTE(v97) = 11;
    uint64_t v88 = v94;
    uint64_t v89 = v96;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v94, &type metadata for Data, v41);
    sub_100016F9C(v85, v87);
    return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v89, v88);
  }

void *CryptoKeys.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A9078);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CryptoKeys(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  unint64_t v56 = a1;
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_1003127B0();
  uint64_t v16 = v57;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CryptoKeys.CodingKeys,  &type metadata for CryptoKeys.CodingKeys,  v15,  v14,  v13);
  if (v16) {
    return (void *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
  }
  unint64_t v53 = v5;
  unint64_t v54 = (int *)v10;
  uint64_t v17 = v7;
  uint64_t v57 = v12;
  uint64_t v18 = sub_100004AEC(&qword_1009A3788);
  char v59 = 0;
  uint64_t v19 = sub_100170438( &qword_1009A37A0,  (uint64_t)&protocol witness table for Double,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, v18, &v59, v6, v18, v19);
  uint64_t v20 = v58;
  char v59 = 1;
  unint64_t v21 = sub_100016FE0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v59, v6, &type metadata for Data, v21);
  uint64_t v52 = v20;
  __int128 v22 = v58;
  char v59 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, &type metadata for Data, &v59, v6, &type metadata for Data, v21);
  unint64_t v50 = *((void *)&v22 + 1);
  uint64_t v51 = v22;
  __int128 v23 = v58;
  char v59 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, &type metadata for Data, &v59, v6, &type metadata for Data, v21);
  unint64_t v48 = *((void *)&v23 + 1);
  uint64_t v49 = v23;
  __int128 v24 = v58;
  char v59 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, &type metadata for Data, &v59, v6, &type metadata for Data, v21);
  __int128 v47 = v24;
  __int128 v25 = v58;
  char v59 = 8;
  unint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)( &v58,  &type metadata for Data,  &v59,  v6,  &type metadata for Data,  v21);
  __int128 v46 = v25;
  uint64_t v27 = v52;
  unint64_t v28 = v48;
  if (!*(void *)(v52 + 16))
  {
    __break(1u);
    goto LABEL_11;
  }

  __int128 v45 = v58;
  uint64_t v29 = v53;
  unint64_t result = (void *)Date.init(timeIntervalSinceReferenceDate:)(result);
  double v30 = v57;
  unint64_t v31 = v50;
  if (*(void *)(v27 + 16) < 2uLL)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  double v32 = *(double *)(v27 + 40);
  swift_bridgeObjectRelease();
  DateInterval.init(start:duration:)(v29, v32);
  if (v31 >> 60 == 15)
  {
    uint64_t v33 = 0LL;
    unint64_t v34 = 0xF000000000000000LL;
  }

  else
  {
    uint64_t v35 = v51;
    sub_100018BE4(v51, v31);
    uint64_t v33 = sub_10017D280(v35, v31);
  }

  uint64_t v36 = (uint64_t *)&v30[v54[5]];
  *uint64_t v36 = v33;
  v36[1] = v34;
  uint64_t v37 = v49;
  sub_10001736C(v49, v28);
  uint64_t v38 = sub_10017D59C(v37, v28);
  uint64_t v39 = v47;
  uint64_t v40 = (uint64_t *)&v30[v54[6]];
  *uint64_t v40 = v38;
  v40[1] = v41;
  uint64_t v42 = *((void *)&v47 + 1);
  sub_10001736C(v39, *((unint64_t *)&v47 + 1));
  sub_1001782E4(v39, v42);
  *(_OWORD *)&v30[v54[7]] = v58;
  sub_10001736C(v46, *((unint64_t *)&v46 + 1));
  sub_1001782BC(v46, *((uint64_t *)&v46 + 1));
  *(_OWORD *)&v30[v54[8]] = v58;
  sub_1001782BC(v45, *((uint64_t *)&v45 + 1));
  (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v6);
  sub_1000182F0(v51, v50);
  sub_100016F9C(v49, v48);
  sub_100016F9C(v47, *((unint64_t *)&v47 + 1));
  sub_100016F9C(v46, *((unint64_t *)&v46 + 1));
  uint64_t v43 = v55;
  uint64_t v44 = (uint64_t)v57;
  *(_OWORD *)&v57[v54[9]] = v58;
  sub_10001DC4C(v44, v43, type metadata accessor for CryptoKeys);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
  return (void *)sub_100018C68(v44, type metadata accessor for CryptoKeys);
}

void *sub_10030CE20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CryptoKeys.init(from:)(a1, a2);
}

uint64_t sub_10030CE34(void *a1)
{
  return CryptoKeys.encode(to:)(a1);
}

unint64_t sub_10030CE48(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_10030DD5C(a1, v3);
}

unint64_t sub_10030CE78(Swift::UInt32 a1, Swift::UInt a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_10030DDF8(a1, a2, v5);
}

uint64_t sub_10030CEE4(uint64_t a1)
{
  return sub_10030DE78(a1, v3);
}

uint64_t sub_10030CF14(uint64_t a1, uint64_t a2)
{
  return sub_10030D860( a1,  a2,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10030E118);
}

unint64_t sub_10030CF28(char a1)
{
  uint64_t v2 = v1;
  Hasher.init(_seed:)(v9, *(void *)(v2 + 40));
  char v4 = a1 & 1;
  if ((a1 & 1) != 0) {
    unint64_t v5 = 0xD000000000000014LL;
  }
  else {
    unint64_t v5 = 0x6E776F6E6B6E75LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v6 = 0x800000010084FFF0LL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  Swift::Int v7 = Hasher._finalize()();
  return sub_10030E1F8(v4, v7);
}

uint64_t sub_10030CFC0(uint64_t a1, unint64_t a2)
{
  return sub_10030D638(a1, a2, (uint64_t (*)(uint64_t, unint64_t, Swift::Int))sub_10030E338);
}

unint64_t sub_10030CFCC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10030ED28(a1, v4);
}

uint64_t sub_10030CFFC(uint64_t a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_10030EDEC(a1, v3);
}

unint64_t sub_10030D054(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_10030F178(a1, v7);
}

unint64_t sub_10030D0D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, &protocol witness table for CodingUserInfoKey);
  return sub_10030F2EC(a1, v6);
}

unint64_t sub_10030D124(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10030F414(a1, v7);
}

unint64_t sub_10030D190(unsigned __int8 a1)
{
  uint64_t v3 = static Hasher._hash(seed:bytes:count:)(*(void *)(v1 + 40), a1, 1LL);
  return sub_10030F554(a1, v3);
}

unint64_t sub_10030D1C4(uint64_t a1)
{
  return sub_10030D72C(a1, (void (*)(void))type metadata accessor for BeaconIdentifier);
}

unint64_t sub_10030D1D0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10030F818(a1, v4, (unint64_t *)&qword_10099E400, &OBJC_CLASS___NSObject_ptr);
}

unint64_t sub_10030D21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 44LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  String.hash(into:)(v14, a1, a2);
  swift_bridgeObjectRelease();
  Swift::Int v12 = Hasher._finalize()();
  return sub_10030F5F4(a1, a2, a3, a4, v12);
}

unint64_t sub_10030D338(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10030F818(a1, v4, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
}

unint64_t sub_10030D38C(uint64_t a1)
{
  return sub_10030DA58( a1,  (void (*)(void *))sub_1005D3D98,  type metadata accessor for OwnedBeaconRecord,  (uint64_t (*)(char *, uint64_t))sub_1005D7464);
}

unint64_t sub_10030D3A8(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v7 = Hasher._finalize()();
  return sub_10030F928(a1, a2, a3, v7);
}

unint64_t sub_10030D438(uint64_t a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_10030F9FC(a1, v3);
}

unint64_t sub_10030D490(Swift::UInt a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_10030DD5C(a1, v3);
}

unint64_t sub_10030D4F4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v10, v3, v4);
  type metadata accessor for BeaconIdentifier(0LL);
  dispatch thunk of Hashable.hash(into:)(v10, v3, v4);
  uint64_t v5 = type metadata accessor for BeaconKeyServiceBuilder.FileKey(0LL);
  if (*(_BYTE *)(a1 + *(int *)(v5 + 20)))
  {
    if (*(_BYTE *)(a1 + *(int *)(v5 + 20)) == 1)
    {
      unint64_t v6 = 0xE900000000000079LL;
      uint64_t v7 = 0x7261646E6F636553LL;
    }

    else
    {
      unint64_t v6 = 0xEF736E6F69746163LL;
      uint64_t v7 = 0x6F4C657275636553LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE700000000000000LL;
    uint64_t v7 = 0x7972616D697250LL;
  }

  String.hash(into:)(v10, v7, v6);
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  return sub_10030FACC(a1, v8);
}

uint64_t sub_10030D62C(uint64_t a1, unint64_t a2)
{
  return sub_10030D638(a1, a2, (uint64_t (*)(uint64_t, unint64_t, Swift::Int))sub_10030FD48);
}

uint64_t sub_10030D638( uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, Swift::Int))
{
  Swift::Int v6 = Hasher._finalize()();
  return a3(a1, a2, v6);
}

unint64_t sub_10030D6BC(char a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_100310738(a1, v3);
}

unint64_t sub_10030D720(uint64_t a1)
{
  return sub_10030D72C(a1, (void (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
}

unint64_t sub_10030D72C(uint64_t a1, void (*a2)(void))
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v5, v6);
  a2(0LL);
  dispatch thunk of Hashable.hash(into:)(v9, v5, v6);
  Swift::Int v7 = Hasher._finalize()();
  return sub_1003107EC(a1, v7, (uint64_t (*)(void))a2);
}

unint64_t sub_10030D7F4(uint64_t a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_100310918(a1, v3);
}

uint64_t sub_10030D84C(uint64_t a1, uint64_t a2)
{
  return sub_10030D860(a1, a2, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_100310DD4);
}

uint64_t sub_10030D860( uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v8 = Hasher._finalize()();
  return a4(a1, a2, v8);
}

unint64_t sub_10030D8D8(unsigned __int8 a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_10030F554(a1, v3);
}

unint64_t sub_10030D930(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v10, v3, v4);
  uint64_t v5 = type metadata accessor for BeaconKeyManager.FileKey(0LL);
  if (*(_BYTE *)(a1 + *(int *)(v5 + 20)))
  {
    if (*(_BYTE *)(a1 + *(int *)(v5 + 20)) == 1)
    {
      unint64_t v6 = 0xE900000000000079LL;
      uint64_t v7 = 0x7261646E6F636553LL;
    }

    else
    {
      unint64_t v6 = 0xEF736E6F69746163LL;
      uint64_t v7 = 0x6F4C657275636553LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE700000000000000LL;
    uint64_t v7 = 0x7972616D697250LL;
  }

  String.hash(into:)(v10, v7, v6);
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  return sub_100311764(a1, v8);
}

unint64_t sub_10030DA3C(uint64_t a1)
{
  return sub_10030DA58( a1,  (void (*)(void *))sub_1006DEAF0,  type metadata accessor for StableIdentifier,  (uint64_t (*)(char *, uint64_t))sub_1006DF8C4);
}

unint64_t sub_10030DA58( uint64_t a1, void (*a2)(void *), uint64_t (*a3)(void), uint64_t (*a4)(char *, uint64_t))
{
  Swift::Int v9 = Hasher._finalize()();
  return sub_1003119C4(a1, v9, a3, a4);
}

unint64_t sub_10030DAD8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = sub_100004AEC(&qword_10099E338);
  uint64_t v6 = sub_1003131F4((unint64_t *)&qword_10099E348, (uint64_t)&protocol conformance descriptor for Identifier<A>);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100311AD0(a1, v7);
}

unint64_t sub_10030DB40(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10030F818(a1, v4, (unint64_t *)&qword_1009AFB10, &OBJC_CLASS___CBUUID_ptr);
}

unint64_t sub_10030DB8C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10030F818(a1, v4, &qword_10099E2C0, &OBJC_CLASS___CKRecordZoneID_ptr);
}

unint64_t sub_10030DBD8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10030F818(a1, v4, &qword_1009A9140, &OBJC_CLASS___IDSService_ptr);
}

unint64_t sub_10030DC24(char *a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v7, v3, v4);
  Swift::Int v5 = Hasher._finalize()();
  return sub_100311C0C(a1, v5);
}

unint64_t sub_10030DCD0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_10030F178(a1, v7);
}

unint64_t sub_10030DD5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_10030DDF8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = *(void *)(v3 + 48) + 16 * result;
      int v9 = *(_DWORD *)v8;
      uint64_t v10 = *(void *)(v8 + 8);
      if (v9 == a1 && v10 == a2) {
        break;
      }
      unint64_t result = (result + 1) & v7;
    }

    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0);
  }

  return result;
}

uint64_t sub_10030DE78(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
  if (((*(void *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v3) & 1) != 0) {
    __asm { BR              X9 }
  }

  return a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10030E118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10030E1F8(char a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v5 = ~v3;
    if ((a1 & 1) != 0) {
      unint64_t v6 = 0xD000000000000014LL;
    }
    else {
      unint64_t v6 = 0x6E776F6E6B6E75LL;
    }
    if ((a1 & 1) != 0) {
      unint64_t v7 = 0x800000010084FFF0LL;
    }
    else {
      unint64_t v7 = 0xE700000000000000LL;
    }
    while (1)
    {
      unint64_t v8 = *(_BYTE *)(*(void *)(v2 + 48) + v4) ? 0xD000000000000014LL : 0x6E776F6E6B6E75LL;
      unint64_t v9 = *(_BYTE *)(*(void *)(v2 + 48) + v4) ? 0x800000010084FFF0LL : 0xE700000000000000LL;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0LL);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0) {
          continue;
        }
      }

      return v4;
    }

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  return v4;
}

uint64_t sub_10030E338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
    __asm { BR              X8 }
  }

  return a3 & ~v4;
}

unint64_t sub_10030ED28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_10006A5E8(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10016C77C((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

uint64_t sub_10030EDEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
  if (((*(void *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v3) & 1) != 0) {
    __asm { BR              X9 }
  }

  return a2 & ~(-1LL << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10030F178(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_10030F2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v17 = a1;
  uint64_t v5 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)( v8,  v17,  v5,  &protocol witness table for CodingUserInfoKey);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_10030F414(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      uint64_t v14 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_10030F554(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

unint64_t sub_10030F5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v7 = a5 & ~v6;
  uint64_t v25 = v5 + 64;
  if (((*(void *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
  {
    uint64_t v8 = v5;
    uint64_t v24 = ~v6;
    while (1)
    {
      unint64_t v10 = (uint64_t *)(*(void *)(v8 + 48) + 32 * v7);
      uint64_t v11 = v10[1];
      uint64_t v27 = *v10;
      swift_bridgeObjectRetain_n(v11, 2LL);
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v12._object;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(object);
      v14._countAndFlagsBits = 44LL;
      v14._object = (void *)0xE100000000000000LL;
      String.append(_:)(v14);
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v16 = v15._object;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRetain(a2);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v18 = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(v18);
      v19._countAndFlagsBits = 44LL;
      v19._object = (void *)0xE100000000000000LL;
      String.append(_:)(v19);
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v21 = v20._object;
      String.append(_:)(v20);
      swift_bridgeObjectRelease(v21);
      if (v27 == a1 && v11 == a2) {
        break;
      }
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v11, a1, a2, 0LL);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(a2);
      if ((v22 & 1) == 0)
      {
        unint64_t v7 = (v7 + 1) & v24;
        if (((*(void *)(v25 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0) {
          continue;
        }
      }

      return v7;
    }

    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v11, 2LL);
  }

  return v7;
}

unint64_t sub_10030F818(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t i = a2 & ~v6;
  if (((*(void *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_100022898(0LL, a3, a4);
    id v8 = *(id *)(*(void *)(v4 + 48) + 8 * i);
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      uint64_t v10 = ~v6;
      for (unint64_t i = (i + 1) & v10; ((*(void *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v10)
      {
        id v11 = *(id *)(*(void *)(v4 + 48) + 8 * i);
        char v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_10030F928(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if (((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
  {
    int v10 = a1;
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      uint64_t v13 = (unsigned __int8 *)(v12 + 24 * v7);
      if (*v13 == v10)
      {
        uint64_t v14 = *((void *)v13 + 1);
        uint64_t v15 = *((void *)v13 + 2);
        BOOL v16 = v14 == a2 && v15 == a3;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a2, a3, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v7 = (v7 + 1) & v11;
    }

    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0);
  }

  return v7;
}

unint64_t sub_10030F9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0
    && (sub_1003120C4(*(void *)(*(void *)(v2 + 48) + 8 * i), a1) & 1) == 0)
  {
    uint64_t v7 = ~v4;
    for (unint64_t i = (i + 1) & v7; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v7)
    {
      if ((sub_1003120C4(*(void *)(*(void *)(v2 + 48) + 8 * i), a1) & 1) != 0) {
        break;
      }
    }
  }

  return i;
}

unint64_t sub_10030FACC(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = type metadata accessor for BeaconKeyServiceBuilder.FileKey(0LL);
  __chkstk_darwin(v25);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = v2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
    return v10;
  }
  uint64_t v11 = ~v9;
  uint64_t v12 = *(void *)(v5 + 72);
  uint64_t v23 = v2 + 64;
  uint64_t v24 = v2;
  while (1)
  {
    sub_10001DC4C( *(void *)(v2 + 48) + v12 * v10,  (uint64_t)v7,  type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    if ((static UUID.== infix(_:_:)(v7, a1) & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v14 = type metadata accessor for BeaconIdentifier(0LL);
    uint64_t v15 = *(int *)(v25 + 20);
    if (v7[v15]) {
      break;
    }
    unint64_t v17 = 0xE700000000000000LL;
    uint64_t v16 = 0x7972616D697250LL;
    int v18 = *(unsigned __int8 *)(a1 + v15);
    if (v18) {
      goto LABEL_12;
    }
LABEL_16:
    unint64_t v20 = 0xE700000000000000LL;
    uint64_t v19 = 0x7972616D697250LL;
    if (v16 == 0x7972616D697250LL) {
      goto LABEL_19;
    }
LABEL_3:
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v19, v20, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = v23;
    uint64_t v2 = v24;
    if ((v13 & 1) != 0) {
      goto LABEL_21;
    }
LABEL_4:
    sub_100018C68((uint64_t)v7, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
      return v10;
    }
  }

  if (v7[v15] == 1)
  {
    uint64_t v16 = 0x7261646E6F636553LL;
    unint64_t v17 = 0xE900000000000079LL;
    int v18 = *(unsigned __int8 *)(a1 + v15);
    if (v18) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }

  uint64_t v16 = 0x6F4C657275636553LL;
  unint64_t v17 = 0xEF736E6F69746163LL;
  int v18 = *(unsigned __int8 *)(a1 + v15);
  if (!v18) {
    goto LABEL_16;
  }
LABEL_12:
  if (v18 == 1)
  {
    uint64_t v19 = 0x7261646E6F636553LL;
    unint64_t v20 = 0xE900000000000079LL;
    if (v16 == 0x7261646E6F636553LL) {
      goto LABEL_19;
    }
    goto LABEL_3;
  }

  uint64_t v19 = 0x6F4C657275636553LL;
  unint64_t v20 = 0xEF736E6F69746163LL;
  if (v16 != 0x6F4C657275636553LL) {
    goto LABEL_3;
  }
LABEL_19:
  if (v17 != v20) {
    goto LABEL_3;
  }
  swift_bridgeObjectRelease_n(v17, 2LL);
LABEL_21:
  sub_100018C68((uint64_t)v7, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
  return v10;
}

uint64_t sub_10030FD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
    __asm { BR              X8 }
  }

  return a3 & ~v4;
}

unint64_t sub_100310738(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = qword_1007FB9B0[a1];
    uint64_t v8 = *(void *)(v2 + 48);
    if (qword_1007FB9B0[*(char *)(v8 + result)] != v7)
    {
      uint64_t v9 = ~v5;
      for (unint64_t result = (result + 1) & v9;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v9)
      {
      }
    }
  }

  return result;
}

unint64_t sub_1003107EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v7 = a3(0LL);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v12 = a2 & ~v11;
  if (((*(void *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v8 + 72);
    while (1)
    {
      sub_10001DC4C(*(void *)(v3 + 48) + v14 * v12, (uint64_t)v10, a3);
      if ((static UUID.== infix(_:_:)(v10, a1) & 1) != 0
        && (static UUID.== infix(_:_:)(&v10[*(int *)(v7 + 20)], a1 + *(int *)(v7 + 20)) & 1) != 0)
      {
        break;
      }

      sub_100018C68((uint64_t)v10, a3);
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        return v12;
      }
    }

    sub_100018C68((uint64_t)v10, a3);
  }

  return v12;
}

unint64_t sub_100310918(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  uint64_t v56 = v5;
  __chkstk_darwin(v4);
  unint64_t v48 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v54);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v50 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  __chkstk_darwin(v50);
  unint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v19 = a2 & ~v18;
  if (((*(void *)(v2 + 64 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) != 0)
  {
    uint64_t v20 = v2 + 64;
    uint64_t v49 = v12;
    uint64_t v57 = ~v18;
    uint64_t v58 = *(void *)(v15 + 72);
    uint64_t v21 = type metadata accessor for ManagedCBPeripheralBeaconInfo;
    uint64_t v51 = v8;
    uint64_t v52 = v2 + 64;
    uint64_t v22 = (int *)v50;
    uint64_t v53 = v2;
    do
    {
      uint64_t v23 = v21;
      sub_10001DC4C(*(void *)(v2 + 48) + v58 * v19, (uint64_t)v17, v21);
      if ((static UUID.== infix(_:_:)(v17, v59) & 1) == 0
        || (static UUID.== infix(_:_:)(&v17[v22[5]], v59 + v22[5]) & 1) == 0)
      {
        goto LABEL_5;
      }

      uint64_t v24 = v22[6];
      uint64_t v25 = (uint64_t)v8;
      uint64_t v26 = (uint64_t)&v17[v24];
      sub_1003131AC(v59 + v24, (uint64_t)v14);
      uint64_t v27 = v25 + *(int *)(v54 + 48);
      sub_1003131AC(v26, v25);
      sub_1003131AC((uint64_t)v14, v27);
      uint64_t v28 = v55;
      uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
      if (v29(v25, 1LL, v55) == 1)
      {
        sub_100015794((uint64_t)v14, &qword_10099D8A0);
        int v30 = v29(v27, 1LL, v28);
        uint64_t v2 = v53;
        if (v30 != 1) {
          goto LABEL_4;
        }
        uint64_t v8 = v51;
        sub_100015794((uint64_t)v51, &qword_10099D8A0);
        uint64_t v20 = v52;
      }

      else
      {
        uint64_t v31 = (uint64_t)v49;
        sub_1003131AC(v25, (uint64_t)v49);
        if (v29(v27, 1LL, v28) == 1)
        {
          sub_100015794((uint64_t)v14, &qword_10099D8A0);
          (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v31, v28);
          uint64_t v2 = v53;
          uint64_t v22 = (int *)v50;
LABEL_4:
          uint64_t v8 = v51;
          sub_100015794((uint64_t)v51, (uint64_t *)&unk_1009B5370);
          uint64_t v20 = v52;
          goto LABEL_5;
        }

        uint64_t v32 = v56;
        uint64_t v33 = v48;
        (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v48, v27, v28);
        uint64_t v34 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        char v35 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v33, v28, v34);
        uint64_t v36 = *(void (**)(char *, uint64_t))(v32 + 8);
        v36(v33, v28);
        sub_100015794((uint64_t)v14, &qword_10099D8A0);
        v36((char *)v31, v28);
        sub_100015794(v25, &qword_10099D8A0);
        uint64_t v8 = (char *)v25;
        uint64_t v22 = (int *)v50;
        uint64_t v20 = v52;
        uint64_t v2 = v53;
        if ((v35 & 1) == 0) {
          goto LABEL_5;
        }
      }

      if ((static Date.== infix(_:_:)(&v17[v22[7]], v59 + v22[7]) & 1) != 0)
      {
        if ((uint64_t v37 = v22[8],
              uint64_t v38 = *(void *)&v17[v37],
              uint64_t v39 = *(void *)&v17[v37 + 8],
              uint64_t v40 = (void *)(v59 + v37),
              uint64_t v41 = v40[1],
              v38 == *v40)
          && v39 == v41
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, *v40, v41, 0LL) & 1) != 0)
        {
          if (*(_DWORD *)&v17[v22[9]] == *(_DWORD *)(v59 + v22[9]))
          {
            if ((uint64_t v42 = v22[10],
                  uint64_t v43 = *(void *)&v17[v42],
                  uint64_t v44 = *(void *)&v17[v42 + 8],
                  __int128 v45 = (void *)(v59 + v42),
                  uint64_t v46 = v45[1],
                  v43 == *v45)
              && v44 == v46
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, *v45, v46, 0LL) & 1) != 0)
            {
              if (v17[v22[11]] == *(_BYTE *)(v59 + v22[11]) && v17[v22[12]] == *(_BYTE *)(v59 + v22[12]))
              {
                sub_100018C68((uint64_t)v17, type metadata accessor for ManagedCBPeripheralBeaconInfo);
                return v19;
              }
            }
          }
        }
      }

uint64_t sub_100310DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
    __asm { BR              X8 }
  }

  return a3 & ~v4;
}

unint64_t sub_100311764(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = type metadata accessor for BeaconKeyManager.FileKey(0LL);
  __chkstk_darwin(v21);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  if (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
    return v9;
  }
  uint64_t v10 = ~v8;
  uint64_t v11 = *(void *)(v5 + 72);
  uint64_t v20 = ~v8;
  while (1)
  {
    sub_10001DC4C(*(void *)(v2 + 48) + v11 * v9, (uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
    if ((static UUID.== infix(_:_:)(v7, a1) & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v13 = *(int *)(v21 + 20);
    if (v7[v13]) {
      break;
    }
    unint64_t v15 = 0xE700000000000000LL;
    uint64_t v14 = 0x7972616D697250LL;
    int v16 = *(unsigned __int8 *)(a1 + v13);
    if (v16) {
      goto LABEL_11;
    }
LABEL_15:
    unint64_t v18 = 0xE700000000000000LL;
    uint64_t v17 = 0x7972616D697250LL;
    if (v14 == 0x7972616D697250LL) {
      goto LABEL_18;
    }
LABEL_3:
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v17, v18, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v20;
    if ((v12 & 1) != 0) {
      goto LABEL_20;
    }
LABEL_4:
    sub_100018C68((uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
    unint64_t v9 = (v9 + 1) & v10;
    if (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
      return v9;
    }
  }

  if (v7[v13] == 1)
  {
    uint64_t v14 = 0x7261646E6F636553LL;
    unint64_t v15 = 0xE900000000000079LL;
    int v16 = *(unsigned __int8 *)(a1 + v13);
    if (v16) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }

  uint64_t v14 = 0x6F4C657275636553LL;
  unint64_t v15 = 0xEF736E6F69746163LL;
  int v16 = *(unsigned __int8 *)(a1 + v13);
  if (!v16) {
    goto LABEL_15;
  }
LABEL_11:
  if (v16 == 1)
  {
    uint64_t v17 = 0x7261646E6F636553LL;
    unint64_t v18 = 0xE900000000000079LL;
    if (v14 == 0x7261646E6F636553LL) {
      goto LABEL_18;
    }
    goto LABEL_3;
  }

  uint64_t v17 = 0x6F4C657275636553LL;
  unint64_t v18 = 0xEF736E6F69746163LL;
  if (v14 != 0x6F4C657275636553LL) {
    goto LABEL_3;
  }
LABEL_18:
  if (v15 != v18) {
    goto LABEL_3;
  }
  swift_bridgeObjectRelease_n(v15, 2LL);
LABEL_20:
  sub_100018C68((uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
  return v9;
}

unint64_t sub_1003119C4( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(char *, uint64_t))
{
  uint64_t v9 = a3(0LL);
  __chkstk_darwin(v9);
  char v12 = (char *)&v19 - v11;
  uint64_t v13 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v14 = a2 & ~v13;
  if (((*(void *)(v4 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0)
  {
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v10 + 72);
    do
    {
      sub_10001DC4C(*(void *)(v4 + 48) + v16 * v14, (uint64_t)v12, a3);
      char v17 = a4(v12, a1);
      sub_100018C68((uint64_t)v12, a3);
      if ((v17 & 1) != 0) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }

    while (((*(void *)(v4 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0);
  }

  return v14;
}

unint64_t sub_100311AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = sub_100004AEC(&qword_10099E338);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      uint64_t v14 = sub_1003131F4(&qword_1009A9148, (uint64_t)&protocol conformance descriptor for Identifier<A>);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_100311C0C(char *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for ShareAttemptTracker.AttemptKey(0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      sub_10001DC4C( *(void *)(v2 + 48) + v12 * v10,  (uint64_t)v8,  type metadata accessor for ShareAttemptTracker.AttemptKey);
      if (dword_1007FBB08[*v8] == dword_1007FBB08[*a1]
        && (static UUID.== infix(_:_:)(&v8[*(int *)(v5 + 20)], &a1[*(int *)(v5 + 20)]) & 1) != 0)
      {
        break;
      }

      sub_100018C68((uint64_t)v8, type metadata accessor for ShareAttemptTracker.AttemptKey);
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        return v10;
      }
    }

    sub_100018C68((uint64_t)v8, type metadata accessor for ShareAttemptTracker.AttemptKey);
  }

  return v10;
}

uint64_t sub_100311D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  unint64_t v10 = (char *)&v36 - v9;
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v36 - v12;
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v14 = 0LL;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v37 = a1;
  uint64_t v38 = a1 + 56;
  uint64_t v16 = 1LL << *(_BYTE *)(a1 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v15;
  int64_t v39 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v42 = a2 + 56;
  uint64_t v36 = (char *)&v36 - v12;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v40 = (v18 - 1) & v18;
  int64_t v41 = v14;
  for (unint64_t i = __clz(__rbit64(v18)) | (v14 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    uint64_t v24 = v43;
    uint64_t v25 = *(void *)(v43 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 16);
    v26(v13, *(void *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v10, v13, v4);
    uint64_t v27 = *(void *)(a2 + 40);
    uint64_t v28 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    uint64_t v30 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v31 = v29 & ~v30;
    if (((*(void *)(v42 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v31) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v4);
      return 0LL;
    }

    uint64_t v32 = ~v30;
    while (1)
    {
      v26(v7, *(void *)(a2 + 48) + v31 * v25, v4);
      uint64_t v33 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v10, v4, v33);
      char v35 = *(void (**)(char *, uint64_t))(v43 + 8);
      v35(v7, v4);
      if ((v34 & 1) != 0) {
        break;
      }
      unint64_t v31 = (v31 + 1) & v32;
      if (((*(void *)(v42 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v31) & 1) == 0)
      {
        v35(v10, v4);
        return 0LL;
      }
    }

    uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v10, v4);
    uint64_t v13 = v36;
    a1 = v37;
    unint64_t v18 = v40;
    int64_t v14 = v41;
    if (v40) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v20 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_35;
    }

    if (v20 >= v39) {
      return 1LL;
    }
    unint64_t v21 = *(void *)(v38 + 8 * v20);
    int64_t v22 = v14 + 1;
    if (!v21)
    {
      int64_t v22 = v20 + 1;
      if (v20 + 1 >= v39) {
        return 1LL;
      }
      unint64_t v21 = *(void *)(v38 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v20 + 2;
        if (v20 + 2 >= v39) {
          return 1LL;
        }
        unint64_t v21 = *(void *)(v38 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v20 + 3;
          if (v20 + 3 >= v39) {
            return 1LL;
          }
          unint64_t v21 = *(void *)(v38 + 8 * v22);
          if (!v21) {
            break;
          }
        }
      }
    }

Swift::Int sub_1003120C4(Swift::Int result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  Swift::Int v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  Swift::Int v5 = result + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }

    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }

    if (v13 >= v9) {
      return 1LL;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 1;
    if (v13 + 1 >= v9) {
      return 1LL;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 2;
    if (v13 + 2 >= v9) {
      return 1LL;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 3;
    if (v13 + 3 >= v9) {
      return 1LL;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v15 = v13 + 4;
    if (v15 >= v9) {
      return 1LL;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1LL)) {
          goto LABEL_35;
        }
        if (v4 >= v9) {
          return 1LL;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        ++v15;
        if (v14) {
          goto LABEL_24;
        }
      }
    }

    int64_t v4 = v15;
LABEL_24:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    Swift::UInt v16 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v12);
    Hasher.init(_seed:)(v21, *(void *)(a2 + 40));
    Hasher._combine(_:)(v16);
    uint64_t result = Hasher._finalize()();
    uint64_t v17 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v18 = result & ~v17;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0) {
      return 0LL;
    }
    uint64_t v19 = *(void *)(a2 + 48);
  }

  while (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16);
  uint64_t v20 = ~v17;
  while (1)
  {
    unint64_t v18 = (v18 + 1) & v20;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0) {
      return 0LL;
    }
  }

void sub_1003122B8(uint64_t a1)
{
  __asm { BR              X13 }

void *sub_100312314( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  unsigned __int8 v32 = BYTE4(v24);
  unsigned __int8 v33 = BYTE5(v24);
  unsigned __int8 v34 = BYTE6(v24);
  uint64_t result = memset(&v30, v27, BYTE6(v24));
  unint64_t v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *uint64_t v26 = v30;
  v26[1] = v29;
  return result;
}

void sub_1003124A0(int *a1, int a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  int64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }
  memset((void *)(v7 + v9), a2, v12);
}

uint64_t _s12searchpartyd10CryptoKeysV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((static DateInterval.== infix(_:_:)() & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = (int *)type metadata accessor for CryptoKeys(0LL);
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  unint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (uint64_t *)(a2 + v5);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  if (v7 >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      sub_100018BE4(v6, v7);
      sub_100018BE4(v9, v10);
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
      char v12 = v11;
      sub_1000182F0(v9, v10);
      sub_1000182F0(v6, v7);
      if ((v12 & 1) == 0) {
        return 0LL;
      }
      goto LABEL_8;
    }

unint64_t sub_1003127B0()
{
  unint64_t result = qword_1009A9070;
  if (!qword_1009A9070)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB92C, &type metadata for CryptoKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9070);
  }

  return result;
}

uint64_t sub_1003127F4()
{
  return sub_100007864( &qword_1009A9080,  type metadata accessor for CryptoKeys,  (uint64_t)&protocol conformance descriptor for CryptoKeys);
}

uint64_t *initializeBufferWithCopyOfBuffer for CryptoKeys(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for DateInterval(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v13 = *(void *)v10;
      sub_10001736C(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }

    uint64_t v14 = a3[6];
    unint64_t v15 = (uint64_t *)((char *)a1 + v14);
    Swift::UInt v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    sub_10001736C(*v16, v18);
    *unint64_t v15 = v17;
    v15[1] = v18;
    uint64_t v19 = a3[7];
    char v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    sub_10001736C(*v21, v23);
    *char v20 = v22;
    v20[1] = v23;
    uint64_t v24 = a3[8];
    uint64_t v25 = (uint64_t *)((char *)a1 + v24);
    unint64_t v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    sub_10001736C(*v26, v28);
    *uint64_t v25 = v27;
    v25[1] = v28;
    uint64_t v29 = a3[9];
    uint64_t v30 = (uint64_t *)((char *)a1 + v29);
    unint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    sub_10001736C(*v31, v33);
    *uint64_t v30 = v32;
    v30[1] = v33;
  }

  return a1;
}

uint64_t destroy for CryptoKeys(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  int v5 = (uint64_t *)(a1 + a2[5]);
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_100016F9C(*v5, v6);
  }
  sub_100016F9C(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  sub_100016F9C(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  sub_100016F9C(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
  return sub_100016F9C(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
}

uint64_t initializeWithCopy for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v11 = *v9;
    sub_10001736C(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_10001736C(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[7];
  unint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_10001736C(*v19, v21);
  *unint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = a3[8];
  unint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_10001736C(*v24, v26);
  *unint64_t v23 = v25;
  v23[1] = v26;
  uint64_t v27 = a3[9];
  unint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v30 = *v29;
  unint64_t v31 = v29[1];
  sub_10001736C(*v29, v31);
  uint64_t *v28 = v30;
  v28[1] = v31;
  return a1;
}

uint64_t assignWithCopy for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15LL)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      sub_10001736C(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      sub_100016F9C(v13, v14);
      goto LABEL_8;
    }

    sub_100170B90((uint64_t)v8);
    goto LABEL_6;
  }

  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }

  uint64_t v11 = *v9;
  sub_10001736C(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
LABEL_8:
  uint64_t v15 = a3[6];
  unint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_10001736C(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  uint64_t *v16 = v18;
  v16[1] = v19;
  sub_100016F9C(v20, v21);
  uint64_t v22 = a3[7];
  unint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_10001736C(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *unint64_t v23 = v25;
  v23[1] = v26;
  sub_100016F9C(v27, v28);
  uint64_t v29 = a3[8];
  uint64_t v30 = (uint64_t *)(a1 + v29);
  unint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v32 = *v31;
  unint64_t v33 = v31[1];
  sub_10001736C(*v31, v33);
  uint64_t v34 = *v30;
  unint64_t v35 = v30[1];
  *uint64_t v30 = v32;
  v30[1] = v33;
  sub_100016F9C(v34, v35);
  uint64_t v36 = a3[9];
  uint64_t v37 = (uint64_t *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v39 = *v38;
  unint64_t v40 = v38[1];
  sub_10001736C(*v38, v40);
  uint64_t v41 = *v37;
  unint64_t v42 = v37[1];
  *uint64_t v37 = v39;
  v37[1] = v40;
  sub_100016F9C(v41, v42);
  return a1;
}

uint64_t initializeWithTake for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      sub_100016F9C(v12, v10);
      goto LABEL_6;
    }

    sub_100170B90((uint64_t)v8);
  }

  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
LABEL_6:
  uint64_t v13 = a3[6];
  uint64_t v14 = *(void *)(a1 + v13);
  unint64_t v15 = *(void *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_100016F9C(v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_100016F9C(v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = *(void *)(a1 + v19);
  unint64_t v21 = *(void *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_100016F9C(v20, v21);
  uint64_t v22 = a3[9];
  uint64_t v23 = *(void *)(a1 + v22);
  unint64_t v24 = *(void *)(a1 + v22 + 8);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  sub_100016F9C(v23, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptoKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100312E1C);
}

uint64_t sub_100312E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CryptoKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100312EB8);
}

uint64_t sub_100312EB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DateInterval(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  unint64_t v10 = (void *)(a1 + *(int *)(a4 + 24));
  *unint64_t v10 = 0LL;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_100312F40(uint64_t a1)
{
  uint64_t result = type metadata accessor for DateInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1007FB800;
    v4[2] = &unk_1007FB818;
    v4[3] = &unk_1007FB818;
    v4[4] = &unk_1007FB818;
    v4[5] = &unk_1007FB818;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for CryptoKeys.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_10031300C + 4 * byte_1007FB72A[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_100313040 + 4 * byte_1007FB725[v4]))();
}

uint64_t sub_100313040(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100313048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100313050LL);
  }
  return result;
}

uint64_t sub_10031305C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100313064LL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_100313068(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100313070(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CryptoKeys.CodingKeys()
{
  return &type metadata for CryptoKeys.CodingKeys;
}

unint64_t sub_100313090()
{
  unint64_t result = qword_1009A9128;
  if (!qword_1009A9128)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB904, &type metadata for CryptoKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9128);
  }

  return result;
}

unint64_t sub_1003130D8()
{
  unint64_t result = qword_1009A9130;
  if (!qword_1009A9130)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB83C, &type metadata for CryptoKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9130);
  }

  return result;
}

unint64_t sub_100313120()
{
  unint64_t result = qword_1009A9138;
  if (!qword_1009A9138)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB864, &type metadata for CryptoKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9138);
  }

  return result;
}

unint64_t sub_100313164(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100934338, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xC) {
    return 12LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1003131AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003131F4(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_100004B78(&qword_10099E338);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

void sub_100313238(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_100313290()
{
  return Hasher._finalize()();
}

Swift::Int sub_10031334C(char a1)
{
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v2 = 0xD000000000000036LL;
    }
    else {
      unint64_t v2 = 0xD000000000000035LL;
    }
    if (a1 == 1) {
      unint64_t v3 = 0x800000010084DAA0LL;
    }
    else {
      unint64_t v3 = 0x800000010084DAE0LL;
    }
  }

  else
  {
    unint64_t v2 = 0xD000000000000037LL;
    unint64_t v3 = 0x800000010084DA60LL;
  }

  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1003133EC(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_100313448()
{
  return Hasher._finalize()();
}

void sub_1003134BC(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_100313518()
{
  return Hasher._finalize()();
}

void sub_1003135BC(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_100313610()
{
  return Hasher._finalize()();
}

Swift::Int sub_100313684(char a1)
{
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v2 = 0x800000010084E6D0LL;
    }
    else {
      unint64_t v2 = 0x800000010084E6F0LL;
    }
  }

  else
  {
    unint64_t v2 = 0x800000010084E6B0LL;
  }

  String.hash(into:)(v4, 0xD000000000000010LL, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

void sub_10031371C(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_100313768()
{
  return Hasher._finalize()();
}

Swift::Int sub_100313810(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_1003D4ADC(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10032DBFC(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100313878@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10032F430(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t SPSecureLocationSubscriptionMode.init(from:)(void *a1)
{
  return sub_10032F430(a1);
}

uint64_t sub_1003138B4(void *a1)
{
  return SPSecureLocationSubscriptionMode.encode(to:)(a1, *v1);
}

uint64_t SPSecureLocationSubscriptionMode.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v10, v3, v4);
  unint64_t v5 = 0xE900000000000065LL;
  unint64_t v6 = 0x76697463616F7270LL;
  switch(a2)
  {
    case 0LL:
      break;
    case 1LL:
      unint64_t v5 = 0xE700000000000000LL;
      unint64_t v6 = 0x776F6C6C616873LL;
      break;
    case 2LL:
      unint64_t v5 = 0xE400000000000000LL;
      unint64_t v6 = 1702259052LL;
      break;
    case 3LL:
      unint64_t v5 = 0xE500000000000000LL;
      unint64_t v6 = 0x72656E776FLL;
      break;
    case 4LL:
      unint64_t v5 = 0xEE00657669746361LL;
      unint64_t v6 = 0x6F725072656E776FLL;
      break;
    case 5LL:
      unint64_t v5 = 0x800000010085DAE0LL;
      unint64_t v6 = 0xD000000000000013LL;
      break;
    default:
      unint64_t v5 = 0xE700000000000000LL;
      unint64_t v6 = 0x6E776F6E6B6E75LL;
      break;
  }

  uint64_t v7 = v11;
  uint64_t v8 = v12;
  sub_100037298((uint64_t)v10, v11);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v6, v5, v7, v8);
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v10);
}

uint64_t sub_100313A34()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009A9150);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009A9150);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2AE08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_100313AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  unint64_t v63 = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SecureLocationsConfigEndpoint(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v59 - v12;
  uint64_t v14 = enum case for FMNAccountType.searchParty(_:);
  uint64_t v15 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104LL))(v13, v14, v15);
  sub_1002E7800((uint64_t)&v13[*(int *)(v8 + 20)]);
  uint64_t v16 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = type metadata accessor for FMNMockingPreferences(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v7, 1LL, 1LL, v17);
  uint64_t v18 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v7);
  uint64_t v19 = type metadata accessor for ServerInteractionController(0LL);
  uint64_t v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  sub_10001DC4C((uint64_t)v13, (uint64_t)v11, type metadata accessor for SecureLocationsConfigEndpoint);
  unint64_t v21 = (void *)sub_100431948((uint64_t)v11, v18, v20);
  id v22 = sub_1002E9138();
  if (v22)
  {
    uint64_t v25 = (uint64_t)v22;
    uint64_t v26 = v23;
    unint64_t v27 = v24;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_10000A720(v28, (uint64_t)qword_100A2AE08);
    sub_100339CB4(v25, v26, v27);
    swift_bridgeObjectRetain(v25);
    uint64_t v30 = sub_10001736C(v26, v27);
    v59[1] = v29;
    unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.debug.getter(v31);
    BOOL v33 = os_log_type_enabled(v31, v32);
    uint64_t v61 = a2;
    uint64_t v62 = v13;
    uint64_t v60 = v21;
    if (v33)
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      uint64_t v67 = v35;
      *(_DWORD *)uint64_t v34 = 136315138;
      v59[0] = v34 + 4;
      swift_bridgeObjectRetain(v25);
      uint64_t v37 = Dictionary.description.getter( v36,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      uint64_t v66 = sub_1003F11D4(v37, v39, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v59[0], v34 + 12);
      swift_bridgeObjectRelease();
      sub_100117A58(v25, v26, v27);
      sub_100117A58(v25, v26, v27);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "FetchConfig request headers %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      sub_100117A58(v25, v26, v27);
      sub_100117A58(v25, v26, v27);
    }

    swift_bridgeObjectRetain(v25);
    sub_10001736C(v26, v27);
    swift_bridgeObjectRetain(v25);
    uint64_t v45 = sub_10001736C(v26, v27);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.debug.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      unint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      uint64_t v67 = v49;
      *(_DWORD *)unint64_t v48 = 136315138;
      uint64_t v50 = v63;
      static String.Encoding.utf8.getter(v49);
      uint64_t v51 = String.init(data:encoding:)(v26, v27, v50);
      if (v52)
      {
        unint64_t v53 = v52;
      }

      else
      {
        uint64_t v51 = 7104878LL;
        unint64_t v53 = 0xE300000000000000LL;
      }

      uint64_t v66 = sub_1003F11D4(v51, v53, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease();
      sub_100117A58(v25, v26, v27);
      sub_100117A58(v25, v26, v27);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "FetchConfig request body %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      sub_100117A58(v25, v26, v27);
      sub_100117A58(v25, v26, v27);
    }

    uint64_t v13 = v62;
    swift_bridgeObjectRetain(v25);
    sub_10001736C(v26, v27);
    sub_10043205C(v25, v26, v27, 0LL, v60);
    sub_100117A58(v25, v26, v27);
    uint64_t v54 = (void *)swift_allocObject(&unk_100950600, 40LL, 7LL);
    uint64_t v55 = v65;
    v54[2] = v64;
    v54[3] = v55;
    uint64_t v56 = v61;
    v54[4] = v61;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_100336E68, v54);
    swift_release();
    swift_release();
    uint64_t v57 = swift_allocObject(&unk_100950628, 32LL, 7LL);
    *(void *)(v57 + 16) = v55;
    *(void *)(v57 + 24) = v56;
    swift_retain();
    Future.addFailure(block:)(sub_100336E74, v57);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100117A58(v25, v26, v27);
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    uint64_t v41 = sub_10000A720(v40, (uint64_t)qword_100A2AE08);
    unint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      char v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "FetchConfig - failed to create request", v44, 2u);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    swift_release();
  }

  return sub_100018C68((uint64_t)v13, type metadata accessor for SecureLocationsConfigEndpoint);
}

void sub_1003141E8(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  int v76 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v74 = *(void *)(v11 - 8);
  uint64_t v75 = v11;
  __chkstk_darwin(v11);
  uint64_t v73 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_10000A720(v13, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain_n(a1, 2LL);
  id v15 = a2;
  uint64_t v77 = v14;
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc(38LL, -1LL);
    int v70 = v18;
    uint64_t v20 = v19;
    uint64_t v69 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v92[0] = v69;
    *(_DWORD *)uint64_t v20 = 134218754;
    *(void *)&__int128 v79 = *(void *)(a1 + 16);
    uint64_t v71 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 8, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2082;
    uint64_t v72 = v7;
    uint64_t v67 = v20 + 14;
    id v21 = [v15 clientApp];
    os_log_t v68 = v16;
    id v22 = v10;
    uint64_t v23 = v8;
    id v24 = v15;
    id v25 = v21;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    unint64_t v28 = v27;

    id v15 = v24;
    uint64_t v8 = v23;
    uint64_t v10 = v22;
    *(void *)&__int128 v79 = sub_1003F11D4(v26, v28, (uint64_t *)v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 8, v67, v20 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2080;
    swift_bridgeObjectRetain(a1);
    uint64_t v30 = Array.description.getter(v29, &type metadata for String);
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    *(void *)&__int128 v79 = sub_1003F11D4(v30, v32, (uint64_t *)v92);
    a4 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 8, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease_n(a1, 2LL);
    uint64_t v7 = v72;
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 32) = 1024;
    LODWORD(v79) = v76 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 4, v20 + 34, v20 + 38);
    os_log_t v33 = v68;
    _os_log_impl( (void *)&_mh_execute_header,  v68,  (os_log_type_t)v70,  "SubscribeAndFetch location for %ld IDs for clientApp %{public}s ids %s forceKeyRefresh %{BOOL}d",  (uint8_t *)v20,  0x26u);
    uint64_t v34 = v69;
    swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);

    uint64_t v35 = sub_10032FB5C();
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
    uint64_t v35 = sub_10032FB5C();
    if ((v35 & 1) != 0)
    {
LABEL_12:
      os_log_type_t v47 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v48 = static os_log_type_t.default.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe",  v49,  2u);
        swift_slowDealloc(v49, -1LL, -1LL);
      }

      [v15 subscriptionMode];
      id v50 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
      sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v52 = [v50 initWithExpiryTime:isa locations:15.0];

      type metadata accessor for SecureLocationsError(0LL);
      uint64_t v54 = v53;
      *(void *)&__int128 v79 = 6LL;
      unint64_t v55 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v56 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
      _BridgedStoredNSError.init(_:userInfo:)(v92, &v79, v55, v54, v56);

      return;
    }
  }

  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v36 = qword_100A2AE20;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v36, &type metadata for SecureLocationsConfig);
  swift_release();
  v92[10] = v89;
  v92[11] = v90;
  v92[12] = v91;
  v92[6] = v85;
  v92[7] = v86;
  v92[8] = v87;
  v92[9] = v88;
  v92[2] = v81;
  v92[3] = v82;
  v92[4] = v83;
  v92[5] = v84;
  v92[0] = v79;
  v92[1] = v80;
  uint64_t v35 = sub_100246384(v92);
  if ((BYTE8(v92[0]) & 1) == 0) {
    goto LABEL_12;
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v37 = swift_allocObject(&unk_100951028, 64LL, 7LL);
    *(void *)(v37 + 16) = a1;
    *(void *)(v37 + 24) = a4;
    *(void *)(v37 + 32) = v15;
    *(_BYTE *)(v37 + 40) = v76 & 1;
    *(void *)(v37 + 48) = DeviceInformationProviderFactory.init();
    *(void *)(v37 + 56) = 0LL;
    *(void *)&__int128 v81 = sub_100338B90;
    *((void *)&v81 + 1) = v37;
    *(void *)&__int128 v79 = _NSConcreteStackBlock;
    *((void *)&v79 + 1) = 1107296256LL;
    *(void *)&__int128 v80 = sub_1001C31E8;
    *((void *)&v80 + 1) = &unk_100951040;
    unint64_t v38 = _Block_copy(&v79);
    uint64_t v39 = a1;
    uint64_t v40 = v38;
    swift_bridgeObjectRetain(v39);
    id v41 = v15;
    uint64_t v42 = swift_retain();
    os_log_type_t v43 = v73;
    static DispatchQoS.unspecified.getter(v42);
    uint64_t v78 = _swiftEmptyArrayStorage;
    uint64_t v44 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v45 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v46 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v45, v46, v7, v44);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v43, v10, v40);
    _Block_release(v40);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v43, v75);
    swift_release();
  }

  else
  {
    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v58 = static os_log_type_t.default.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "No findMyIds specified for SubscribeAndFetch - not proceeding",  v59,  2u);
      swift_slowDealloc(v59, -1LL, -1LL);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    id v60 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v62 = [v60 initWithDomain:v61 code:0 userInfo:0];

    [v15 subscriptionMode];
    id v63 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
    Class v64 = Array._bridgeToObjectiveC()().super.isa;
    id v65 = [v63 initWithExpiryTime:v64 locations:15.0];
  }

void sub_1003149FC(uint64_t a1, void *a2, int a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v6 = v5;
  int v79 = a3;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v78 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v77 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v75 = *(void *)(v13 - 8);
  uint64_t v76 = v13;
  __chkstk_darwin(v13);
  uint64_t v74 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain_n(a1, 2LL);
  id v17 = a2;
  uint64_t v80 = v16;
  int v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc(38LL, -1LL);
    int v70 = v20;
    uint64_t v22 = v21;
    uint64_t v69 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v95[0] = v69;
    *(_DWORD *)uint64_t v22 = 134218754;
    *(void *)&__int128 v82 = *(void *)(a1 + 16);
    uint64_t v71 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 8, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2082;
    os_log_t v68 = v18;
    id v23 = [v17 clientApp];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v72 = a5;
    uint64_t v73 = a4;
    uint64_t v25 = v24;
    unint64_t v27 = v26;

    *(void *)&__int128 v82 = sub_1003F11D4(v25, v27, (uint64_t *)v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 8, v22 + 14, v22 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    swift_bridgeObjectRetain(a1);
    uint64_t v29 = Array.description.getter(v28, &type metadata for String);
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    uint64_t v32 = v29;
    a5 = v72;
    *(void *)&__int128 v82 = sub_1003F11D4(v32, v31, (uint64_t *)v95);
    uint64_t v11 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 8, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease_n(a1, 2LL);
    a4 = v73;
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 32) = 1024;
    LODWORD(v82) = v79 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 4, v22 + 34, v22 + 38);
    os_log_t v33 = v68;
    _os_log_impl( (void *)&_mh_execute_header,  v68,  (os_log_type_t)v70,  "SubscribeAndFetch location for %ld IDs for clientApp %{public}s ids %s forceKeyRefresh %{BOOL}d",  (uint8_t *)v22,  0x26u);
    uint64_t v34 = v69;
    swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    uint64_t v35 = sub_10032FB5C();
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
    uint64_t v35 = sub_10032FB5C();
    if ((v35 & 1) != 0)
    {
LABEL_12:
      uint64_t v46 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v47 = static os_log_type_t.default.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        os_log_type_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v48 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe",  v48,  2u);
        swift_slowDealloc(v48, -1LL, -1LL);
      }

      [v17 subscriptionMode];
      id v49 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
      sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v51 = [v49 initWithExpiryTime:isa locations:15.0];

      type metadata accessor for SecureLocationsError(0LL);
      uint64_t v53 = v52;
      *(void *)&__int128 v82 = 6LL;
      unint64_t v54 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v55 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
      _BridgedStoredNSError.init(_:userInfo:)(v95, &v82, v54, v53, v55);
      uint64_t v56 = *(void **)&v95[0];
      a4(v51, *(void *)&v95[0]);

      return;
    }
  }

  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v36 = qword_100A2AE20;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v36, &type metadata for SecureLocationsConfig);
  swift_release();
  v95[10] = v92;
  v95[11] = v93;
  v95[12] = v94;
  v95[6] = v88;
  v95[7] = v89;
  v95[8] = v90;
  v95[9] = v91;
  v95[2] = v84;
  v95[3] = v85;
  v95[4] = v86;
  v95[5] = v87;
  v95[0] = v82;
  v95[1] = v83;
  uint64_t v35 = sub_100246384(v95);
  if ((BYTE8(v95[0]) & 1) == 0) {
    goto LABEL_12;
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v37 = swift_allocObject(&unk_100951528, 64LL, 7LL);
    *(void *)(v37 + 16) = a1;
    *(void *)(v37 + 24) = v6;
    *(void *)(v37 + 32) = v17;
    *(_BYTE *)(v37 + 40) = v79 & 1;
    *(void *)(v37 + 48) = a4;
    *(void *)(v37 + 56) = a5;
    *(void *)&__int128 v84 = sub_100338B90;
    *((void *)&v84 + 1) = v37;
    *(void *)&__int128 v82 = _NSConcreteStackBlock;
    *((void *)&v82 + 1) = 1107296256LL;
    *(void *)&__int128 v83 = sub_1001C31E8;
    *((void *)&v83 + 1) = &unk_100951540;
    unint64_t v38 = _Block_copy(&v82);
    swift_bridgeObjectRetain(a1);
    id v39 = v17;
    swift_retain();
    uint64_t v40 = swift_retain();
    id v41 = v74;
    static DispatchQoS.unspecified.getter(v40);
    __int128 v81 = _swiftEmptyArrayStorage;
    uint64_t v42 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v43 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v44 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v45 = v77;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v81, v43, v44, v11, v42);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v41, v45, v38);
    _Block_release(v38);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v45, v11);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v76);
    swift_release();
  }

  else
  {
    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v58 = static os_log_type_t.default.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "No findMyIds specified for SubscribeAndFetch - not proceeding",  v59,  2u);
      swift_slowDealloc(v59, -1LL, -1LL);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    id v60 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v62 = [v60 initWithDomain:v61 code:0 userInfo:0];

    [v17 subscriptionMode];
    id v63 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
    Class v64 = Array._bridgeToObjectiveC()().super.isa;
    id v65 = [v63 initWithExpiryTime:v64 locations:15.0];

    id v66 = v62;
    a4(v65, v62);
  }

void sub_100315248( uint64_t a1, uint64_t a2, void *a3, char a4, void (*a5)(id, uint64_t), uint64_t a6)
{
  uint64_t v273 = a6;
  v272 = a5;
  unint64_t v10 = 0LL;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v11);
  v267 = (char *)&v263 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Endpoint = type metadata accessor for SecureLocationsFetchEndpoint(0LL);
  uint64_t v13 = __chkstk_darwin(Endpoint);
  uint64_t v15 = (char *)&v263 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v266 = (uint64_t)&v263 - v17;
  __chkstk_darwin(v16);
  uint64_t v276 = (uint64_t)&v263 - v18;
  uint64_t v19 = sub_100004AEC(&qword_1009A7110);
  __chkstk_darwin(v19);
  uint64_t v279 = (uint64_t)&v263 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for SecureLocation(0LL);
  uint64_t v274 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v263 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v277 = (uint64_t)&v263 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v263 - v27;
  uint64_t v294 = type metadata accessor for String.Encoding(0LL);
  uint64_t v293 = *(void *)(v294 - 8);
  __chkstk_darwin(v294);
  v295 = (char *)&v263 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v30);
  v292 = (char *)&v263 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v298 = type metadata accessor for UUID(0LL);
  uint64_t v297 = *(void *)(v298 - 8);
  __chkstk_darwin(v298);
  v281 = (char *)&v263 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v287 = swift_allocObject(&unk_100950740, 24LL, 7LL);
  *(void *)(v287 + 16) = &_swiftEmptyDictionarySingleton;
  unsigned __int8 v319 = 0;
  os_log_t v33 = *(void **)(a1 + 16);
  v301 = a3;
  uint64_t v280 = a2;
  uint64_t v275 = a1;
  v265 = v33;
  if (v33)
  {
    uint64_t v296 = *(void *)(a2 + 48);
    uint64_t v291 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain(a1);
    __n128 v34 = swift_beginAccess(&v319, v318, 1LL, 0LL);
    v299 = &v317;
    v285 = (char *)&v316 + 4;
    v284 = &v311;
    uint64_t v35 = (unint64_t *)(a1 + 40);
    v306 = _swiftEmptyArrayStorage;
    v34.n128_u64[0] = 136315138LL;
    __n128 v288 = v34;
    v282 = (char *)&type metadata for Any + 8;
    v34.n128_u64[0] = 67109634LL;
    __n128 v283 = v34;
    v34.n128_u64[0] = 136315394LL;
    __n128 v286 = v34;
    int v290 = a4 & 1;
    __int128 v269 = xmmword_1007E67D0;
    v268 = (char *)&type metadata for () + 8;
    v289 = v15;
    v270 = v24;
    v278 = v28;
    while (1)
    {
      v303 = v33;
      uint64_t v38 = *(v35 - 1);
      unint64_t v37 = *v35;
      uint64_t v302 = (uint64_t)v35;
      uint64_t v39 = qword_10099B5E8;
      swift_bridgeObjectRetain(v37);
      if (v39 != -1) {
        uint64_t v40 = swift_once(&qword_10099B5E8, sub_1005C66A4);
      }
      uint64_t v41 = qword_100A2AE20;
      __chkstk_darwin(v40);
      *(&v263 - 4) = v41;
      *(&v263 - 3) = v38;
      *(&v263 - 2) = v37;
      swift_retain();
      uint64_t v300 = sub_100004AEC(&qword_1009A34B0);
      OS_dispatch_queue.sync<A>(execute:)(sub_100338BB8, &v263 - 6, v300);
      uint64_t v42 = swift_release();
      unint64_t v304 = aBlock;
      unint64_t v43 = v311;
      uint64_t v44 = v295;
      static String.Encoding.utf8.getter(v42);
      uint64_t v45 = String.data(using:allowLossyConversion:)(v44, 0LL, v38, v37);
      unint64_t v47 = v46;
      (*(void (**)(char *, uint64_t))(v293 + 8))(v44, v294);
      os_log_type_t v48 = &off_10099B000;
      v308 = (uint8_t *)v38;
      if (v47 >> 60 == 15) {
        break;
      }
      unint64_t aBlock = v45;
      uint64_t v311 = v47;
      unint64_t v50 = sub_100042F34();
      uint64_t v49 = (uint64_t)v292;
      DataProtocol.stableUUID.getter(&type metadata for Data, v50);
      sub_1000182F0(v45, v47);
      uint64_t v51 = v297;
      uint64_t v52 = v298;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v297 + 56))(v49, 0LL, 1LL, v298);
      uint64_t v67 = (uint64_t)v281;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v281, v49, v52);
      uint64_t v68 = v51;
      swift_retain();
      uint64_t v69 = v279;
      sub_10050C994(v67, v279);
      swift_release();
      uint64_t v70 = type metadata accessor for SecureLocationsCachedPayload(0LL);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48LL))(v69, 1LL, v70) == 1)
      {
        sub_100015794(v69, &qword_1009A7110);
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v52);
        uint64_t v38 = (uint64_t)v308;
        goto LABEL_11;
      }

      uint64_t v107 = v69 + *(int *)(v70 + 20);
      uint64_t v108 = v277;
      sub_10001DC4C(v107, v277, type metadata accessor for SecureLocation);
      sub_100018C68(v69, type metadata accessor for SecureLocationsCachedPayload);
      uint64_t v109 = (uint64_t)v278;
      sub_10002218C(v108, (uint64_t)v278, type metadata accessor for SecureLocation);
      swift_retain();
      char v110 = sub_1005C7E64(v109);
      swift_release();
      if ((v110 & 1) != 0)
      {
        uint64_t v111 = *(void *)(v280 + 40);
        uint64_t v112 = sub_100004AEC(&qword_10099D540);
        uint64_t v113 = *(unsigned __int8 *)(v274 + 80);
        uint64_t v114 = (v113 + 32) & ~v113;
        uint64_t v115 = swift_allocObject(v112, v114 + *(void *)(v274 + 72), v113 | 7);
        *(_OWORD *)(v115 + 16) = v269;
        sub_10001DC4C(v109, v115 + v114, type metadata accessor for SecureLocation);
        uint64_t v116 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v116);
        *(&v263 - 4) = v111;
        *(&v263 - 3) = (uint64_t)DeviceInformationProviderFactory.init();
        *(&v263 - 2) = 0LL;
        *(&v263 - 1) = v115;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.receivedUpdatedLocations",  70LL,  2LL,  sub_100338D80);
        swift_bridgeObjectRelease();
        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v117 = type metadata accessor for Logger(0LL);
        sub_10000A720(v117, (uint64_t)qword_100A2AE08);
        uint64_t v118 = (uint64_t)v270;
        sub_10001DC4C(v109, (uint64_t)v270, type metadata accessor for SecureLocation);
        uint64_t v119 = swift_bridgeObjectRetain_n(v37, 2LL);
        uint64_t v120 = (os_log_s *)Logger.logObject.getter(v119);
        os_log_type_t v121 = static os_log_type_t.default.getter(v120);
        int v122 = v121;
        if (os_log_type_enabled(v120, v121))
        {
          uint64_t v123 = swift_slowAlloc(22LL, -1LL);
          uint64_t v307 = swift_slowAlloc(64LL, -1LL);
          unint64_t aBlock = v307;
          *(_DWORD *)uint64_t v123 = v286.n128_u32[0];
          LODWORD(v305) = v122;
          swift_bridgeObjectRetain(v37);
          uint64_t v124 = (uint64_t)v308;
          uint64_t v316 = sub_1003F11D4((uint64_t)v308, v37, (uint64_t *)&aBlock);
          uint64_t v125 = v299;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v299, v123 + 4, v123 + 12);
          swift_bridgeObjectRelease_n(v37, 3LL);
          *(_WORD *)(v123 + 12) = 2080;
          uint64_t v264 = v123 + 14;
          uint64_t v126 = sub_1005EE53C();
          uint64_t v316 = sub_1003F11D4(v126, v127, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v125, v264, v123 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68(v118, type metadata accessor for SecureLocation);
          _os_log_impl( (void *)&_mh_execute_header,  v120,  (os_log_type_t)v305,  "SubscribeAndFetch: cached location for id: %s, sending before subscribe %s",  (uint8_t *)v123,  0x16u);
          unint64_t v128 = v307;
          swift_arrayDestroy(v307, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v128, -1LL, -1LL);
          swift_slowDealloc(v123, -1LL, -1LL);

          uint64_t v129 = v109;
          uint64_t v38 = v124;
          a3 = v301;
          sub_100018C68(v129, type metadata accessor for SecureLocation);
          uint64_t v59 = (*(uint64_t (**)(char *, uint64_t))(v297 + 8))(v281, v298);
          os_log_type_t v48 = &off_10099B000;
          goto LABEL_16;
        }

        sub_100018C68(v118, type metadata accessor for SecureLocation);
        swift_bridgeObjectRelease_n(v37, 2LL);
        sub_100018C68(v109, type metadata accessor for SecureLocation);
        uint64_t v59 = (*(uint64_t (**)(char *, uint64_t))(v297 + 8))(v281, v298);
        os_log_type_t v48 = &off_10099B000;
      }

      else
      {
        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v130 = type metadata accessor for Logger(0LL);
        sub_10000A720(v130, (uint64_t)qword_100A2AE08);
        uint64_t v131 = swift_bridgeObjectRetain_n(v37, 2LL);
        uint64_t v132 = (os_log_s *)Logger.logObject.getter(v131);
        os_log_type_t v133 = static os_log_type_t.default.getter(v132);
        if (os_log_type_enabled(v132, v133))
        {
          uint64_t v134 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v307 = swift_slowAlloc(32LL, -1LL);
          unint64_t aBlock = v307;
          *(_DWORD *)uint64_t v134 = v288.n128_u32[0];
          v305 = v134 + 4;
          swift_bridgeObjectRetain(v37);
          uint64_t v135 = a3;
          uint64_t v136 = (uint64_t)v308;
          uint64_t v316 = sub_1003F11D4((uint64_t)v308, v37, (uint64_t *)&aBlock);
          uint64_t v38 = v136;
          a3 = v135;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v299, v305, v134 + 12);
          swift_bridgeObjectRelease_n(v37, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v132,  v133,  "SubscribeAndFetch: cached location for id: %s- got cached location but not within the cache validity timeframe, moving on",  v134,  0xCu);
          unint64_t v137 = v307;
          swift_arrayDestroy(v307, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v137, -1LL, -1LL);
          swift_slowDealloc(v134, -1LL, -1LL);

          sub_100018C68((uint64_t)v278, type metadata accessor for SecureLocation);
          uint64_t v59 = (*(uint64_t (**)(char *, uint64_t))(v297 + 8))(v281, v298);
          goto LABEL_16;
        }

        swift_bridgeObjectRelease_n(v37, 2LL);

        sub_100018C68((uint64_t)v278, type metadata accessor for SecureLocation);
        uint64_t v59 = (*(uint64_t (**)(char *, uint64_t))(v297 + 8))(v281, v298);
      }

      uint64_t v38 = (uint64_t)v308;
LABEL_16:
      __chkstk_darwin(v59);
      *(&v263 - 4) = v60;
      *(&v263 - 3) = v38;
      *(&v263 - 2) = v37;
      *(&v263 - 1) = (uint64_t)a3;
      OS_dispatch_queue.sync<A>(execute:)(sub_100338BD4, &v263 - 6, &type metadata for Bool);
      unsigned __int8 v319 = aBlock;
      if ((aBlock & 1) == 0)
      {
        if (v48[188] != (_UNKNOWN *)-1LL) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v61 = type metadata accessor for Logger(0LL);
        sub_10000A720(v61, (uint64_t)qword_100A2AE08);
        uint64_t v62 = swift_bridgeObjectRetain_n(v37, 2LL);
        id v63 = (os_log_s *)Logger.logObject.getter(v62);
        os_log_type_t v64 = static os_log_type_t.default.getter(v63);
        if (os_log_type_enabled(v63, v64))
        {
          id v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v66 = swift_slowAlloc(32LL, -1LL);
          unint64_t aBlock = v66;
          *(_DWORD *)id v65 = v288.n128_u32[0];
          swift_bridgeObjectRetain(v37);
          uint64_t v316 = sub_1003F11D4((uint64_t)v308, v37, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v299, v65 + 4, v65 + 12);
          swift_bridgeObjectRelease_n(v37, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "SubscribeAndFetch - shouldProceed false for %s",  v65,  0xCu);
          swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v66, -1LL, -1LL);
          swift_slowDealloc(v65, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v37, 2LL);
        }
      }

      if (v48[188] != (_UNKNOWN *)-1LL) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v71 = type metadata accessor for Logger(0LL);
      uint64_t v72 = sub_10000A720(v71, (uint64_t)qword_100A2AE08);
      uint64_t v73 = v43;
      swift_bridgeObjectRetain_n(v43, 2LL);
      uint64_t v74 = swift_bridgeObjectRetain_n(v37, 2LL);
      v305 = (uint8_t *)v72;
      uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
      os_log_type_t v76 = static os_log_type_t.debug.getter(v75);
      BOOL v77 = os_log_type_enabled(v75, v76);
      uint64_t v307 = v10;
      if (v77)
      {
        uint64_t v78 = swift_slowAlloc(28LL, -1LL);
        uint64_t v79 = swift_slowAlloc(64LL, -1LL);
        unint64_t aBlock = v79;
        *(_DWORD *)uint64_t v78 = v283.n128_u32[0];
        LODWORD(v316) = v319;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v285, v78 + 4, v78 + 8);
        *(_WORD *)(v78 + 8) = 2080;
        swift_bridgeObjectRetain(v37);
        uint64_t v316 = sub_1003F11D4((uint64_t)v308, v37, (uint64_t *)&aBlock);
        uint64_t v80 = v299;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v299, v78 + 10, v78 + 18);
        swift_bridgeObjectRelease_n(v37, 3LL);
        *(_WORD *)(v78 + 18) = 2080;
        if (v43) {
          uint64_t v81 = v304;
        }
        else {
          uint64_t v81 = 7104878LL;
        }
        if (v43) {
          unint64_t v82 = v43;
        }
        else {
          unint64_t v82 = 0xE300000000000000LL;
        }
        swift_bridgeObjectRetain(v43);
        uint64_t v316 = sub_1003F11D4(v81, v82, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v80, v78 + 20, v78 + 28);
        swift_bridgeObjectRelease_n(v43, 2LL);
        uint64_t v73 = v43;
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v75,  v76,  "SubscribeAndFetch - shouldProceed %{BOOL}d for %s %s",  (uint8_t *)v78,  0x1Cu);
        swift_arrayDestroy(v79, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1LL, -1LL);
        swift_slowDealloc(v78, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v43, 2LL);
        swift_bridgeObjectRelease_n(v37, 2LL);
      }

      swift_bridgeObjectRetain_n(v37, 2LL);
      swift_bridgeObjectRetain(v73);
      __int128 v84 = (os_log_s *)Logger.logObject.getter(v83);
      os_log_type_t v85 = static os_log_type_t.default.getter(v84);
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = swift_slowAlloc(22LL, -1LL);
        uint64_t v87 = swift_slowAlloc(64LL, -1LL);
        uint64_t v316 = v87;
        *(_DWORD *)uint64_t v86 = v286.n128_u32[0];
        swift_bridgeObjectRetain(v37);
        uint64_t v88 = (uint64_t)v308;
        unint64_t aBlock = sub_1003F11D4((uint64_t)v308, v37, &v316);
        __int128 v89 = v284;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v284, v86 + 4, v86 + 12);
        swift_bridgeObjectRelease_n(v37, 3LL);
        *(_WORD *)(v86 + 12) = 2080;
        unint64_t aBlock = v304;
        uint64_t v311 = v73;
        swift_bridgeObjectRetain(v73);
        uint64_t v90 = String.init<A>(describing:)(&aBlock, v300);
        unint64_t aBlock = sub_1003F11D4(v90, v91, &v316);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v89, v86 + 14, v86 + 22);
        swift_bridgeObjectRelease_n(v73, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "SubscribeAndFetch request data for %s %s",  (uint8_t *)v86,  0x16u);
        swift_arrayDestroy(v87, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1LL, -1LL);
        swift_slowDealloc(v86, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v73, 2LL);
        swift_bridgeObjectRelease_n(v37, 2LL);
        uint64_t v88 = (uint64_t)v308;
      }

      uint64_t v92 = v88;
      a3 = v301;
      sub_10025896C(v92, v37, v301, v290, (uint64_t)v320);
      sub_100015750((uint64_t)v320, (uint64_t)v321, &qword_1009A9590);
      uint64_t v93 = v322;
      if (!v322) {
        goto LABEL_3;
      }
      uint64_t v94 = v321[0];
      uint64_t v95 = v321[1];
      char v96 = v323;
      id v97 = objc_msgSend(a3, "subscriptionMode", swift_bridgeObjectRetain(v322).n128_f64[0]);
      if ((swift_isUniquelyReferenced_nonNull_native(v306) & 1) != 0) {
        __int128 v98 = v306;
      }
      else {
        __int128 v98 = sub_1004C61D8(0LL, v306[2] + 1LL, 1, v306);
      }
      unint64_t v100 = v98[2];
      unint64_t v99 = v98[3];
      if (v100 >= v99 >> 1) {
        __int128 v98 = sub_1004C61D8((void *)(v99 > 1), v100 + 1, 1, v98);
      }
      v98[2] = v100 + 1;
      v306 = v98;
      uint64_t v101 = &v98[5 * v100];
      v101[4] = v94;
      v101[5] = v95;
      v101[6] = v93;
      v101[7] = v97;
      *((_BYTE *)v101 + 64) = v96;
      uint64_t v102 = *(void *)(v93 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v37);
      uint64_t v103 = v287;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v287 + 16));
      unint64_t aBlock = *(void *)(v103 + 16);
      *(void *)(v103 + 16) = 0x8000000000000000LL;
      uint64_t v105 = (uint64_t)v308;
      sub_10005E1DC(v102 == 0, (uint64_t)v308, v37, isUniquelyReferenced_nonNull_native);
      *(void *)(v103 + 16) = aBlock;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v102)
      {
LABEL_3:
        uint64_t v15 = v289;
        uint64_t v36 = v302;
        unint64_t v10 = v307;
      }

      else
      {
        id v106 = [a3 subscriptionMode];
        uint64_t v15 = v289;
        unint64_t v10 = v307;
        if (v106 == (id)4)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v210 = swift_bridgeObjectRelease();
          v211 = (os_log_s *)Logger.logObject.getter(v210);
          os_log_type_t v212 = static os_log_type_t.default.getter(v211);
          if (os_log_type_enabled(v211, v212))
          {
            v213 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)v213 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v211,  v212,  "SubscribeAndFetch - failed to get own keys for ownerProactive mode - not proceeding",  v213,  2u);
            swift_slowDealloc(v213, -1LL, -1LL);
          }

          [a3 subscriptionMode];
          id v214 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
          sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          id v216 = [v214 initWithExpiryTime:isa locations:15.0];

          type metadata accessor for SecureLocationsError(0LL);
          uint64_t v218 = v217;
          uint64_t v316 = 0LL;
          unint64_t v219 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v220 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
          _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v316, v219, v218, v220);
          v221 = (void *)aBlock;
          v272(v216, aBlock);
          swift_release();

          return;
        }

        if (v319 == 1) {
          sub_1003710AC(v105, v37, a3);
        }
        uint64_t v36 = v302;
      }

      uint64_t v35 = (unint64_t *)(v36 + 16);
      swift_bridgeObjectRelease();
      os_log_t v33 = (void *)((char *)v303 - 1);
      if (v303 == (void *)1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
    }

    uint64_t v49 = (uint64_t)v292;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v297 + 56))(v292, 1LL, 1LL, v298);
LABEL_10:
    sub_100015794(v49, &qword_10099D8A0);
LABEL_11:
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v53 = type metadata accessor for Logger(0LL);
    sub_10000A720(v53, (uint64_t)qword_100A2AE08);
    uint64_t v54 = swift_bridgeObjectRetain_n(v37, 2LL);
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.default.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      unint64_t aBlock = v58;
      *(_DWORD *)uint64_t v57 = v288.n128_u32[0];
      swift_bridgeObjectRetain(v37);
      uint64_t v316 = sub_1003F11D4((uint64_t)v308, v37, (uint64_t *)&aBlock);
      a3 = v301;
      uint64_t v38 = (uint64_t)v308;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v299, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease_n(v37, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "SubscribeAndFetch: cached location for id: %s- no cached location, moving on",  v57,  0xCu);
      swift_arrayDestroy(v58, 1LL, v282);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    else
    {

      uint64_t v59 = swift_bridgeObjectRelease_n(v37, 2LL);
    }

    goto LABEL_16;
  }

  v306 = _swiftEmptyArrayStorage;
LABEL_63:
  swift_beginAccess(&v319, &v316, 0LL, 0LL);
  if ((v319 & 1) != 0)
  {
    uint64_t v307 = v10;
    uint64_t v138 = v15;
    uint64_t v139 = type metadata accessor for FMNAccountType(0LL);
    uint64_t isEscapingClosureAtFileLocation = v276;
    (*(void (**)(void))(*(void *)(v139 - 8) + 104LL))();
    sub_1001C5870(isEscapingClosureAtFileLocation + *(int *)(Endpoint + 20));
    if (qword_10099B5E0 != -1) {
      goto LABEL_114;
    }
    while (1)
    {
      uint64_t v141 = type metadata accessor for Logger(0LL);
      uint64_t v142 = sub_10000A720(v141, (uint64_t)qword_100A2AE08);
      uint64_t v143 = v266;
      uint64_t v144 = sub_10001DC4C( isEscapingClosureAtFileLocation,  v266,  type metadata accessor for SecureLocationsFetchEndpoint);
      unint64_t v145 = (os_log_s *)Logger.logObject.getter(v144);
      os_log_type_t v146 = static os_log_type_t.default.getter(v145);
      if (os_log_type_enabled(v145, v146))
      {
        __int128 v147 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v148 = swift_slowAlloc(32LL, -1LL);
        unint64_t aBlock = v148;
        *(_DWORD *)__int128 v147 = 136315138;
        v308 = v147 + 4;
        sub_10001DC4C(v143, (uint64_t)v138, type metadata accessor for SecureLocationsFetchEndpoint);
        uint64_t v149 = String.init<A>(describing:)(v138, Endpoint);
        uint64_t v309 = sub_1003F11D4(v149, v150, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &aBlock, v308, v147 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v143, type metadata accessor for SecureLocationsFetchEndpoint);
        _os_log_impl((void *)&_mh_execute_header, v145, v146, "SubscribeAndFetch endpoint %s", v147, 0xCu);
        swift_arrayDestroy(v148, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v148, -1LL, -1LL);
        swift_slowDealloc(v147, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v143, type metadata accessor for SecureLocationsFetchEndpoint);
      }

      uint64_t MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0LL);
      swift_allocObject( MyAppURLSessionFactory,  *(unsigned int *)(MyAppURLSessionFactory + 48),  *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
      uint64_t v157 = type metadata accessor for FMNMockingPreferences(0LL);
      v158 = v267;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v157 - 8) + 56LL))(v267, 1LL, 1LL, v157);
      uint64_t v159 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v158);
      uint64_t v160 = type metadata accessor for ServerInteractionController(0LL);
      uint64_t v161 = swift_allocObject(v160, *(unsigned int *)(v160 + 48), *(unsigned __int16 *)(v160 + 52));
      sub_10001DC4C(v276, (uint64_t)v138, type metadata accessor for SecureLocationsFetchEndpoint);
      swift_retain();
      v162 = (void *)sub_100431964((uint64_t)v138, v159, v161);
      if (!v306[2])
      {
        uint64_t v202 = swift_bridgeObjectRelease();
        v198 = (os_log_s *)Logger.logObject.getter(v202);
        os_log_type_t v199 = static os_log_type_t.error.getter(v198);
        if (os_log_type_enabled(v198, v199))
        {
          v200 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v200 = 0;
          v201 = "No SubscribeAndFetch request data generated. Not sending request";
LABEL_86:
          _os_log_impl((void *)&_mh_execute_header, v198, v199, v201, v200, 2u);
          swift_slowDealloc(v200, -1LL, -1LL);
        }

LABEL_87:
        static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
        id v203 = objc_allocWithZone(&OBJC_CLASS___NSError);
        NSString v204 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v205 = [v203 initWithDomain:v204 code:0 userInfo:0];

        [a3 subscriptionMode];
        id v206 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
        sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
        Class v207 = Array._bridgeToObjectiveC()().super.isa;
        id v208 = [v206 initWithExpiryTime:v207 locations:15.0];

        id v209 = v205;
        v272(v208, (uint64_t)v205);
        swift_release();

LABEL_88:
        swift_release();
        goto LABEL_89;
      }

      id v163 = [(id)objc_opt_self(AKDevice) currentDevice];
      if (!v163
        || (v164 = v163,
            id v165 = [v163 uniqueDeviceIdentifier],
            v164,
            !v165))
      {
        uint64_t v197 = swift_bridgeObjectRelease();
        v198 = (os_log_s *)Logger.logObject.getter(v197);
        os_log_type_t v199 = static os_log_type_t.error.getter(v198);
        if (os_log_type_enabled(v198, v199))
        {
          v200 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v200 = 0;
          v201 = "Unable to get device identifier for server SubscribeAndFetch";
          goto LABEL_86;
        }

        goto LABEL_87;
      }

      v305 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
      uint64_t v167 = v166;

      uint64_t v168 = v280;
      uint64_t v169 = sub_100004AEC(&qword_1009A34B0);
      OS_dispatch_queue.sync<A>(execute:)(sub_100338BF0, v168, v169);
      uint64_t v170 = v311;
      if (!v311) {
        break;
      }
      v308 = (uint8_t *)v142;
      unint64_t v304 = v159;
      unint64_t v171 = aBlock;
      id v172 = [a3 clientApp];
      uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v172);
      uint64_t v175 = v174;

      uint64_t v176 = swift_allocObject(&unk_100950768, 152LL, 7LL);
      v177 = v306;
      *(void *)(v176 + 16) = v306;
      *(void *)(v176 + 24) = v171;
      uint64_t v178 = (uint64_t)v305;
      *(void *)(v176 + 32) = v170;
      *(void *)(v176 + 40) = v178;
      *(void *)(v176 + 48) = v167;
      *(void *)(v176 + 56) = v173;
      *(void *)(v176 + 64) = v175;
      *(void *)(v176 + 72) = &_swiftEmptyDictionarySingleton;
      *(_OWORD *)(v176 + 80) = 0u;
      *(_OWORD *)(v176 + 96) = 0u;
      *(_OWORD *)(v176 + 112) = 0u;
      *(_BYTE *)(v176 + 128) = 0;
      *(_DWORD *)(v176 + 129) = *(_DWORD *)v324;
      *(_DWORD *)(v176 + 132) = *(_DWORD *)&v324[3];
      *(void *)(v176 + 136) = _swiftEmptyArrayStorage;
      *(void *)(v176 + 144) = v168;
      swift_bridgeObjectRetain(v177);
      swift_retain();
      uint64_t v179 = sub_100004AEC(&qword_1009A95A8);
      unsafeFromAsyncTask<A>(_:)(&unk_1009A95A0, v176, v179);
      swift_release();
      uint64_t v180 = aBlock;
      if (!aBlock)
      {
        uint64_t v226 = swift_bridgeObjectRelease();
        v198 = (os_log_s *)Logger.logObject.getter(v226);
        uint64_t v227 = static os_log_type_t.error.getter(v198);
        if (os_log_type_enabled(v198, (os_log_type_t)v227))
        {
          v228 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v228 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v198,  (os_log_type_t)v227,  "Failed to create request for server SubscribeAndFetch",  v228,  2u);
          swift_slowDealloc(v228, -1LL, -1LL);
        }

        goto LABEL_87;
      }

      uint64_t v181 = v311;
      unint64_t v182 = (unint64_t)v312;
      swift_bridgeObjectRetain(aBlock);
      uint64_t v183 = sub_10001736C(v181, v182);
      v184 = (os_log_s *)Logger.logObject.getter(v183);
      os_log_type_t v185 = static os_log_type_t.default.getter(v184);
      if (os_log_type_enabled(v184, v185))
      {
        v186 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v186 = 0;
        _os_log_impl((void *)&_mh_execute_header, v184, v185, "Sending SubscribeAndFetch server request", v186, 2u);
        swift_slowDealloc(v186, -1LL, -1LL);
      }

      sub_100339CB4(v180, v181, v182);
      swift_bridgeObjectRetain(v180);
      uint64_t v187 = sub_10001736C(v181, v182);
      v188 = (os_log_s *)Logger.logObject.getter(v187);
      os_log_type_t v189 = static os_log_type_t.debug.getter(v188);
      BOOL v190 = os_log_type_enabled(v188, v189);
      uint64_t v307 = v182;
      v303 = v162;
      if (v190)
      {
        v191 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v192 = swift_slowAlloc(32LL, -1LL);
        unint64_t aBlock = v192;
        *(_DWORD *)v191 = 136315138;
        swift_bridgeObjectRetain(v180);
        uint64_t v194 = Dictionary.description.getter( v193,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
        unint64_t v196 = v195;
        swift_bridgeObjectRelease();
        uint64_t v309 = sub_1003F11D4(v194, v196, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &aBlock, v191 + 4, v191 + 12);
        unint64_t v182 = v307;
        swift_bridgeObjectRelease();
        sub_100117A58(v180, v181, v182);
        sub_100117A58(v180, v181, v182);
        _os_log_impl((void *)&_mh_execute_header, v188, v189, "SubscribeAndFetch request headers %s", v191, 0xCu);
        swift_arrayDestroy(v192, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v192, -1LL, -1LL);
        swift_slowDealloc(v191, -1LL, -1LL);
      }

      else
      {
        sub_100117A58(v180, v181, v182);
        sub_100117A58(v180, v181, v182);
      }

      swift_bridgeObjectRetain(v180);
      sub_10001736C(v181, v182);
      swift_bridgeObjectRetain(v180);
      uint64_t v229 = sub_10001736C(v181, v182);
      v230 = (os_log_s *)Logger.logObject.getter(v229);
      os_log_type_t v231 = static os_log_type_t.debug.getter(v230);
      BOOL v232 = os_log_type_enabled(v230, v231);
      v305 = (uint8_t *)v180;
      uint64_t v302 = v181;
      if (v232)
      {
        v233 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v234 = swift_slowAlloc(32LL, -1LL);
        unint64_t aBlock = v234;
        *(_DWORD *)v233 = 136315138;
        v235 = v295;
        static String.Encoding.utf8.getter(v234);
        uint64_t v236 = String.init(data:encoding:)(v181, v182, v235);
        if (v237)
        {
          unint64_t v238 = v237;
        }

        else
        {
          uint64_t v236 = 7104878LL;
          unint64_t v238 = 0xE300000000000000LL;
        }

        uint64_t v309 = sub_1003F11D4(v236, v238, (uint64_t *)&aBlock);
        unint64_t v239 = v307;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &aBlock, v233 + 4, v233 + 12);
        swift_bridgeObjectRelease();
        sub_100117A58(v180, v181, v239);
        sub_100117A58(v180, v181, v239);
        _os_log_impl((void *)&_mh_execute_header, v230, v231, "SubscribeAndFetch request body %s", v233, 0xCu);
        swift_arrayDestroy(v234, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v234, -1LL, -1LL);
        swift_slowDealloc(v233, -1LL, -1LL);
      }

      else
      {
        sub_100117A58(v180, v181, v182);
        sub_100117A58(v180, v181, v182);
      }

      uint64_t v240 = v280;
      uint64_t v241 = v275;
      v242 = v265;
      if (!v265)
      {
LABEL_112:
        swift_bridgeObjectRelease();
        uint64_t v251 = (uint64_t)v305;
        uint64_t v252 = v302;
        unint64_t v253 = v307;
        sub_100339CB4((uint64_t)v305, v302, v307);
        sub_1004322EC(v251, v252, v253, 0LL, v303);
        sub_100117A58(v251, v252, v253);
        v254 = (void *)swift_allocObject(&unk_100950808, 64LL, 7LL);
        v254[2] = v240;
        v254[3] = v241;
        v255 = v301;
        uint64_t v256 = v287;
        v254[4] = v301;
        v254[5] = v256;
        v257 = v272;
        uint64_t v258 = v273;
        v254[6] = v272;
        v254[7] = v258;
        swift_bridgeObjectRetain(v241);
        swift_retain();
        id v259 = v255;
        swift_retain();
        swift_retain();
        Future.addSuccess(block:)(sub_100338D3C, v254);
        swift_release();
        swift_release();
        v260 = (void *)swift_allocObject(&unk_100950830, 56LL, 7LL);
        v260[2] = v240;
        v260[3] = v241;
        v260[4] = v259;
        v260[5] = v257;
        v260[6] = v258;
        swift_bridgeObjectRetain(v241);
        swift_retain();
        id v261 = v259;
        swift_retain();
        Future.addFailure(block:)(sub_100338D70, v260);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        unint64_t v262 = v307;
        sub_100117A58(v251, v252, v307);
        sub_100117A58(v251, v252, v262);
        goto LABEL_88;
      }

      uint64_t v243 = *(void *)(v280 + 48);
      swift_bridgeObjectRetain(v275);
      v244 = (void **)(v241 + 40);
      uint64_t v138 = v301;
      while (1)
      {
        uint64_t v245 = (uint64_t)*(v244 - 1);
        a3 = *v244;
        v246 = *(dispatch_queue_s **)(v243 + 16);
        uint64_t v247 = swift_allocObject(&unk_100950790, 49LL, 7LL);
        *(void *)(v247 + 16) = v243;
        *(void *)(v247 + 24) = v245;
        *(void *)(v247 + 32) = a3;
        *(void *)(v247 + 40) = v138;
        *(_BYTE *)(v247 + 48) = 0;
        uint64_t v248 = swift_allocObject(&unk_1009507B8, 32LL, 7LL);
        *(void *)(v248 + 16) = sub_100338CE4;
        *(void *)(v248 + 24) = v247;
        v314 = sub_100154688;
        uint64_t v315 = v248;
        unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
        uint64_t v311 = 1107296256LL;
        v312 = sub_100025BD4;
        v313 = &unk_1009507D0;
        v249 = _Block_copy(&aBlock);
        swift_bridgeObjectRetain_n(a3, 2LL);
        id v250 = v138;
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync(v246, v249);
        _Block_release(v249);
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v248, "", 120LL, 101LL, 35LL, 1LL);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0) {
          break;
        }
        v244 += 2;
        v242 = (void *)((char *)v242 - 1);
        if (!v242)
        {
          swift_bridgeObjectRelease();
          uint64_t v241 = v275;
          uint64_t v240 = v280;
          goto LABEL_112;
        }
      }

      __break(1u);
LABEL_114:
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }

    swift_bridgeObjectRelease();
    uint64_t v222 = swift_bridgeObjectRelease();
    v223 = (os_log_s *)Logger.logObject.getter(v222);
    os_log_type_t v224 = static os_log_type_t.error.getter(v223);
    if (os_log_type_enabled(v223, v224))
    {
      v225 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v225 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v223,  v224,  "No APS token. Not proceeding with SubscribeAndFetch request",  v225,  2u);
      swift_slowDealloc(v225, -1LL, -1LL);
    }

    swift_release();
    swift_release();

LABEL_89:
    sub_100018C68(v276, type metadata accessor for SecureLocationsFetchEndpoint);
  }

  else
  {
    swift_bridgeObjectRelease();
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v151 = type metadata accessor for Logger(0LL);
    uint64_t v152 = sub_10000A720(v151, (uint64_t)qword_100A2AE08);
    v153 = (os_log_s *)Logger.logObject.getter(v152);
    os_log_type_t v154 = static os_log_type_t.default.getter(v153);
    if (os_log_type_enabled(v153, v154))
    {
      v155 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v155 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v153,  v154,  "SubscribeAndFetch - not proceeding with subscribe",  v155,  2u);
      swift_slowDealloc(v155, -1LL, -1LL);
    }

    sub_100319064(v275, 0LL, 0xF000000000000000LL, 0LL, a3, v272, v273);
  }

  swift_release();
}

        uint64_t v124 = (v133 - 1) & v133;
        unint64_t v128 = __clz(__rbit64(v133)) + (v126 << 6);
      }

      uint64_t v129 = (void ***)(*(void *)(v120 + 48) + 16 * v128);
      uint64_t v131 = *v129;
      uint64_t v130 = (uint64_t)v129[1];
      unint64_t aBlock = v131;
      v162 = v130;
      sub_10031A508((uint64_t *)&aBlock);
    }
  }

  __break(1u);
LABEL_99:
  swift_once(&qword_10099B5E0, sub_1005C6624);
LABEL_53:
  uint64_t v79 = type metadata accessor for Logger(0LL);
  sub_10000A720(v79, (uint64_t)qword_100A2AE08);
  uint64_t v80 = v145;
  swift_errorRetain(v145);
  uint64_t v81 = swift_errorRetain(v80);
  unint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
  uint64_t v83 = static os_log_type_t.default.getter(v82);
  if (os_log_type_enabled(v82, v83))
  {
    __int128 v84 = swift_slowAlloc(22LL, -1LL);
    os_log_type_t v85 = (void **)swift_slowAlloc(32LL, -1LL);
    unint64_t aBlock = v85;
    *(_DWORD *)__int128 v84 = 134218242;
    swift_beginAccess(&v167, &v159, 0LL, 0LL);
    if ((unint64_t)v167 >> 62)
    {
      if (v167 < 0) {
        uint64_t v141 = v167;
      }
      else {
        uint64_t v141 = v167 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v167);
      uint64_t v86 = _CocoaArrayWrapper.endIndex.getter(v141);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v86 = *(void *)((v167 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    v158 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v84 + 4, v84 + 12);
    *(_WORD *)(v84 + 12) = 2080;
    uint64_t v80 = v145;
    v158 = v145;
    swift_errorRetain(v145);
    uint64_t v87 = sub_100004AEC(&qword_10099C678);
    uint64_t v88 = String.init<A>(describing:)(&v158, v87);
    v158 = sub_1003F11D4(v88, v89, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v84 + 14, v84 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(v80);
    swift_errorRelease(v80);
    _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "SubscribeAndFetch - no response data. Returning locations from cache. count %ld error %s",  (uint8_t *)v84,  0x16u);
    swift_arrayDestroy(v85, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1LL, -1LL);
    swift_slowDealloc(v84, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v80);
    swift_errorRelease(v80);
  }

  uint64_t v90 = v144;
  unint64_t v91 = [v144 subscriptionMode];
  uint64_t v92 = (unint64_t)[v90 subscriptionMode];
  uint64_t v93 = 15.0;
  if (v91 == (id)5)
  {
    uint64_t v93 = 0.0;
    if (v92 <= 5) {
      uint64_t v93 = dbl_1007FBFC0[v92];
    }
  }

  swift_beginAccess(&v167, &aBlock, 0LL, 0LL);
  uint64_t v94 = v167;
  uint64_t v95 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
  swift_bridgeObjectRetain(v94);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v97 = [v95 initWithExpiryTime:isa locations:v93];

  v147(v97, v80);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_95:
  swift_bridgeObjectRelease();
}

        if ((v87 & 1) != 0) {
          goto LABEL_125;
        }
        uint64_t v95 = &v61[16 * v64];
        id v97 = *(void *)v95;
        char v96 = *((void *)v95 + 1);
        uint64_t v75 = __OFSUB__(v96, v97);
        __int128 v98 = v96 - v97;
        if (v75) {
          goto LABEL_128;
        }
        if (v98 < v86) {
          goto LABEL_14;
        }
LABEL_95:
        uint64_t v103 = v64 - 1;
        if (v64 - 1 >= v21)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }

        uint64_t v104 = *a1;
        if (!*a1) {
          goto LABEL_143;
        }
        uint64_t v105 = v19;
        id v106 = &v61[16 * v103];
        uint64_t v107 = *(void *)v106;
        uint64_t v108 = &v61[16 * v64];
        uint64_t v109 = *((void *)v108 + 1);
        sub_1003CAA40( v104 + *(void *)(v128 + 72) * *(void *)v106,  v104 + *(void *)(v128 + 72) * *(void *)v108,  v104 + *(void *)(v128 + 72) * v109,  v127);
        if (v2) {
          goto LABEL_115;
        }
        if (v109 < v107) {
          goto LABEL_118;
        }
        if (v64 > *((void *)v105 + 2)) {
          goto LABEL_119;
        }
        *(void *)id v106 = v107;
        *(void *)&v61[16 * v103 + 8] = v109;
        char v110 = *((void *)v105 + 2);
        if (v64 >= v110) {
          goto LABEL_120;
        }
        uint64_t v19 = v105;
        uint64_t v21 = v110 - 1;
        memmove(&v61[16 * v64], v108 + 16, 16 * (v110 - 1 - v64));
        *((void *)v105 + 2) = v110 - 1;
        a1 = v133;
        if (v110 <= 2) {
          goto LABEL_14;
        }
      }
    }

    uint64_t v21 = 1LL;
LABEL_14:
    uint64_t v12 = a1[1];
    uint64_t v20 = v135;
    uint64_t v4 = v128;
    if (v135 >= v12) {
      goto LABEL_104;
    }
  }

  if (__OFADD__(v20, v121)) {
    goto LABEL_140;
  }
  if (v20 + v121 >= v12) {
    uint64_t v44 = v12;
  }
  else {
    uint64_t v44 = v20 + v121;
  }
  if (v44 >= v20)
  {
    if (v35 != v44)
    {
      int v122 = v19;
      uint64_t v119 = v2;
      uint64_t v45 = *(void *)(v4 + 72);
      uint64_t v139 = v45 * (v35 - 1);
      uint64_t v129 = v45;
      unint64_t v46 = v35 * v45;
      uint64_t v124 = v44;
      do
      {
        os_log_type_t v48 = 0LL;
        uint64_t v135 = v35;
        while (1)
        {
          uint64_t v49 = *a1;
          unint64_t v50 = v46;
          uint64_t v51 = v46 + v48 + *a1;
          uint64_t v52 = v134;
          sub_10001DC4C(v51, v134, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          uint64_t v53 = v132;
          sub_10001DC4C(v139 + v48 + v49, v132, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          uint64_t v54 = *(int *)(v136 + 20);
          LODWORD(v138) = *(_DWORD *)(v131 + v54);
          LODWORD(v49) = *(_DWORD *)(v130 + v54);
          sub_100018C68(v53, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          sub_100018C68(v52, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          uint64_t v55 = *a1;
          if (!*a1) {
            goto LABEL_142;
          }
          unint64_t v46 = v50;
          os_log_type_t v56 = v55 + v50 + v48;
          uint64_t v57 = v55 + v139 + v48;
          sub_10002218C(v56, v137, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          swift_arrayInitWithTakeFrontToBack(v56, v57, 1LL, v136);
          sub_10002218C(v137, v57, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          v48 -= v129;
          ++v20;
          unint64_t v47 = v135;
          a1 = v133;
          if (v135 == v20) {
            goto LABEL_49;
          }
        }

        unint64_t v47 = v135;
        unint64_t v46 = v50;
LABEL_49:
        uint64_t v35 = v47 + 1;
        v139 += v129;
        v46 += v129;
        uint64_t v20 = v126;
      }

      while (v35 != v124);
      uint64_t v35 = v124;
      uint64_t v2 = v119;
      uint64_t v19 = v122;
    }

    goto LABEL_56;
  }

        if ((v86 & 1) != 0) {
          goto LABEL_125;
        }
        uint64_t v94 = &v60[16 * v63];
        char v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        uint64_t v74 = __OFSUB__(v95, v96);
        id v97 = v95 - v96;
        if (v74) {
          goto LABEL_128;
        }
        if (v97 < v85) {
          goto LABEL_14;
        }
LABEL_95:
        uint64_t v102 = v63 - 1;
        if (v63 - 1 >= v20)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }

        uint64_t v103 = *a1;
        if (!*a1) {
          goto LABEL_143;
        }
        uint64_t v104 = v18;
        uint64_t v105 = &v60[16 * v102];
        id v106 = *(void *)v105;
        uint64_t v107 = &v60[16 * v63];
        uint64_t v108 = *((void *)v107 + 1);
        sub_100495A84( v103 + *(void *)(v126 + 72) * *(void *)v105,  v103 + *(void *)(v126 + 72) * *(void *)v107,  v103 + *(void *)(v126 + 72) * v108,  v125);
        if (v2) {
          goto LABEL_115;
        }
        if (v108 < v106) {
          goto LABEL_118;
        }
        if (v63 > *((void *)v104 + 2)) {
          goto LABEL_119;
        }
        *(void *)uint64_t v105 = v106;
        *(void *)&v60[16 * v102 + 8] = v108;
        uint64_t v109 = *((void *)v104 + 2);
        if (v63 >= v109) {
          goto LABEL_120;
        }
        uint64_t v18 = v104;
        uint64_t v20 = v109 - 1;
        memmove(&v60[16 * v63], v107 + 16, 16 * (v109 - 1 - v63));
        *((void *)v104 + 2) = v109 - 1;
        a1 = v131;
        if (v109 <= 2) {
          goto LABEL_14;
        }
      }
    }

    uint64_t v20 = 1LL;
LABEL_14:
    uint64_t v12 = a1[1];
    uint64_t v19 = v133;
    if (v133 >= v12) {
      goto LABEL_104;
    }
  }

  uint64_t v115 = v90 + v93[11];
  uint64_t v116 = *(void *)(v115 + 8);
  if (v116 >> 60 != 15)
  {
    uint64_t v120 = *(void *)v115;
    sub_10001736C(*(void *)v115, *(void *)(v115 + 8));
    CKRecordKeyValueSetting.subscript.getter( &v139,  0xD00000000000001BLL,  0x800000010084E5A0LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
    os_log_type_t v121 = v139;
    if (*((void *)&v139 + 1) >> 60 == 15LL)
    {
      sub_10001736C(v120, v116);
      sub_1000182F0(v121, *((unint64_t *)&v121 + 1));
      sub_1000182F0(v120, v116);
    }

    else
    {
      sub_100018BE4(v120, v116);
      sub_100018BE4(v121, *((unint64_t *)&v121 + 1));
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v121, *((uint64_t *)&v121 + 1));
      uint64_t v123 = v122;
      sub_1000182F0(v120, v116);
      sub_1000182F0(v121, *((unint64_t *)&v121 + 1));
      sub_1000182F0(v121, *((unint64_t *)&v121 + 1));
      if ((v123 & 1) != 0)
      {
LABEL_94:
        sub_1000182F0(v120, v116);
        uint64_t v93 = v137;
        uint64_t v90 = v138;
        goto LABEL_95;
      }
    }

    *((void *)&v140 + 1) = &type metadata for Data;
    uint64_t v141 = &protocol witness table for Data;
    *(void *)&uint64_t v139 = v120;
    *((void *)&v139 + 1) = v116;
    sub_10001736C(v120, v116);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0xD00000000000001BLL, 0x800000010084E5A0LL, ObjectType);
    goto LABEL_94;
  }

  uint64_t v117 = String._bridgeToObjectiveC()();
  uint64_t v118 = [v26 objectForKeyedSubscript:v117];
  swift_unknownObjectRelease(v118);

  if (v118)
  {
    uint64_t v119 = String._bridgeToObjectiveC()();
    [v26 setObject:0 forKeyedSubscript:v119];
  }

uint64_t sub_100317A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100317A34, 0LL, 0LL);
}

uint64_t sub_100317A34()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = *(void *)(v0[5] + 320LL);
  swift_bridgeObjectRetain(v0[3]);
  sub_100338F74(v1);
  uint64_t v3 = unk_1009A5544;
  uint64_t v6 = (char *)&dword_1009A5540 + dword_1009A5540;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100317AC0;
  return ((uint64_t (*)(void, void, uint64_t))v6)(v0[3], v0[4], v2);
}

uint64_t sub_100317AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void **)v4;
  swift_task_dealloc(*(void *)(*(void *)v4 + 48LL));
  if (v3)
  {
    swift_errorRelease(v3);
    uint64_t v9 = sub_100317B6C;
  }

  else
  {
    v8[7] = a3;
    void v8[8] = a2;
    void v8[9] = a1;
    uint64_t v9 = sub_100317B4C;
  }

  return swift_task_switch(v9, 0LL, 0LL);
}

uint64_t sub_100317B4C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(int8x16_t **)(v0 + 16);
  *uint64_t v2 = vextq_s8(*(int8x16_t *)(v0 + 64), *(int8x16_t *)(v0 + 64), 8uLL);
  v2[1].i64[0] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100317B6C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  void *v1 = 0LL;
  v1[1] = 0LL;
  v1[2] = 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100317B80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  unint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v53 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v52 = v10;
  __chkstk_darwin(v10);
  unint64_t v47 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = *(void *)(a2 + 296);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  unint64_t v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v23 = swift_allocObject(&unk_100950920, v22 + 16, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v23 + v17, v15, v12);
  uint64_t v24 = v41;
  uint64_t v25 = v42;
  *(void *)(v23 + v18) = v42;
  uint64_t v26 = v43;
  *(void *)(v23 + v19) = v43;
  *(void *)(v23 + v20) = v24;
  uint64_t v27 = v45;
  *(void *)(v23 + v21) = v44;
  uint64_t v28 = (void *)(v23 + v22);
  uint64_t v29 = v46;
  void *v28 = v27;
  v28[1] = v29;
  aBlock[4] = sub_100338ED0;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100950938;
  uint64_t v30 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v25);
  id v31 = v26;
  swift_retain();
  swift_retain();
  uint64_t v32 = swift_retain();
  os_log_t v33 = v47;
  static DispatchQoS.unspecified.getter(v32);
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v34 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v36 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v38 = v49;
  uint64_t v37 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v35, v36, v50, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v33, v38, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v37);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v33, v52);
  return swift_release();
}

void sub_100317E6C( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(id, uint64_t), uint64_t a7)
{
  uint64_t v103 = a6;
  uint64_t v104 = a7;
  uint64_t v102 = a5;
  uint64_t v105 = a4;
  uint64_t v107 = a2;
  uint64_t v9 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v19 = (char *)&v99 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  unint64_t v22 = (char *)&v99 - v21;
  uint64_t v23 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v20);
  uint64_t isEscapingClosureAtFileLocation = *(void *)(v13 + 16);
  uint64_t v106 = a1;
  uint64_t v25 = ((uint64_t (*)(char *, uint64_t, uint64_t))isEscapingClosureAtFileLocation)(v22, a1, v12);
  if (v23 == 200)
  {
    uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
    v26(v22, v12);
    goto LABEL_4;
  }

  uint64_t v27 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v25);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v22, v12);
  if (v27 == 206)
  {
LABEL_4:
    if (qword_10099B5E0 != -1) {
      goto LABEL_37;
    }
    while (1)
    {
      uint64_t v28 = type metadata accessor for Logger(0LL);
      uint64_t v29 = sub_10000A720(v28, (uint64_t)qword_100A2AE08);
      ((void (*)(char *, uint64_t, uint64_t))isEscapingClosureAtFileLocation)(v19, v106, v12);
      uint64_t v30 = v107;
      swift_bridgeObjectRetain_n(v107, 2LL);
      id v31 = a3;
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter(v32);
      BOOL v34 = os_log_type_enabled(v32, v33);
      id v108 = v31;
      if (v34)
      {
        uint64_t v35 = swift_slowAlloc(42LL, -1LL);
        uint64_t v101 = v29;
        uint64_t v36 = v35;
        uint64_t v37 = (void **)swift_slowAlloc(64LL, -1LL);
        unint64_t v100 = v37;
        unint64_t aBlock = v37;
        *(_DWORD *)uint64_t v36 = 134218754;
        uint64_t v38 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v37);
        v26(v19, v12);
        uint64_t v109 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v36 + 4, v36 + 12);
        *(_WORD *)(v36 + 12) = 2048;
        uint64_t v109 = *(void *)(v107 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v36 + 14, v36 + 22);
        *(_WORD *)(v36 + 22) = 2080;
        id v39 = [v108 clientApp];
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        unint64_t v42 = v41;

        uint64_t v109 = sub_1003F11D4(v40, v42, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v36 + 24, v36 + 32);

        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 32) = 2080;
        id v31 = v108;
        swift_bridgeObjectRetain(v107);
        uint64_t v43 = Array.description.getter(v107, &type metadata for String);
        unint64_t v45 = v44;
        swift_bridgeObjectRelease();
        uint64_t v46 = v43;
        uint64_t v30 = v107;
        uint64_t v109 = sub_1003F11D4(v46, v45, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v36 + 34, v36 + 42);
        swift_bridgeObjectRelease_n(v30, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "SubscribeAndFetch received status %ld for %ld IDs for clientApp %s ids %s. Now decoding...",  (uint8_t *)v36,  0x2Au);
        unint64_t v47 = v100;
        swift_arrayDestroy(v100, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      else
      {
        v26(v19, v12);

        swift_bridgeObjectRelease_n(v30, 2LL);
      }

      uint64_t v49 = FMNServerInteractionController.FMNResponseFields.data.getter(v48);
      unint64_t v51 = v50;
      static String.Encoding.utf8.getter(v49);
      uint64_t v52 = String.init(data:encoding:)(v49, v51, v11);
      unint64_t v54 = v53;
      sub_100016F9C(v49, v51);
      if (v54)
      {
        swift_bridgeObjectRetain(v54);
        os_log_type_t v56 = (os_log_s *)Logger.logObject.getter(v55);
        os_log_type_t v57 = static os_log_type_t.debug.getter(v56);
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v59 = (void **)swift_slowAlloc(32LL, -1LL);
          unint64_t aBlock = v59;
          *(_DWORD *)uint64_t v58 = 136315138;
          id v31 = v108;
          swift_bridgeObjectRetain(v54);
          uint64_t v109 = sub_1003F11D4(v52, v54, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v58 + 4, v58 + 12);
          swift_bridgeObjectRelease_n(v54, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Received responseString %s", v58, 0xCu);
          swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v60 = v59;
          uint64_t v30 = v107;
          swift_slowDealloc(v60, -1LL, -1LL);
          swift_slowDealloc(v58, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v54, 2LL);
        }
      }

      id v73 = [v31 subscriptionMode];
      if (!v73)
      {
        id v74 = [v31 clientApp];
        uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        uint64_t v77 = v76;

        if (v75 != 0xD000000000000015LL || v77 != 0x800000010085B0A0LL)
        {
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v77, 0xD000000000000015LL, 0x800000010085B0A0LL, 0LL);
          id v73 = (id)swift_bridgeObjectRelease();
          if ((v78 & 1) != 0) {
            goto LABEL_23;
          }
          uint64_t v79 = (uint64_t *)(v102 + 16);
          swift_beginAccess(v102 + 16, &v109, 0LL, 0LL);
          uint64_t v80 = *v79;
          swift_bridgeObjectRetain(v80);
          sub_10031BB4C(v30, v80);
        }

        id v73 = (id)swift_bridgeObjectRelease();
      }

uint64_t sub_100318A40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)(a2 + 296);
  uint64_t v18 = (void *)swift_allocObject(&unk_100950858, 64LL, 7LL);
  v18[2] = a1;
  v18[3] = a3;
  v18[4] = a2;
  v18[5] = a4;
  v18[6] = a5;
  v18[7] = a6;
  aBlock[4] = sub_100338DE0;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100950870;
  unint64_t v19 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a3);
  swift_retain();
  id v20 = a4;
  uint64_t v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v24 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v27);
  return swift_release();
}

void sub_100318C68( uint64_t *a1, uint64_t a2, void *a3, void *a4, void (*a5)(id, uint64_t), uint64_t a6)
{
  if (qword_10099B5E0 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_10000A720(v11, (uint64_t)qword_100A2AE08);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a2);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter(v13);
    uint64_t v34 = a6;
    uint64_t v32 = (uint64_t)a1;
    if (!os_log_type_enabled(v13, v14)) {
      break;
    }
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v31 = swift_slowAlloc(64LL, -1LL);
    uint64_t v35 = (uint64_t)a1;
    aBlock[0] = v31;
    *(_DWORD *)uint64_t v15 = 136315394;
    swift_errorRetain(a1);
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v17 = String.init<A>(describing:)(&v35, v16);
    uint64_t v35 = sub_1003F11D4(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, aBlock, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    uint64_t v20 = Array.description.getter(v19, &type metadata for String);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v23 = v20;
    a6 = v34;
    uint64_t v35 = sub_1003F11D4(v23, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, aBlock, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "subscribeAndFetch failed %s forIds %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    uint64_t v24 = *(void *)(a2 + 16);
    if (!v24) {
      goto LABEL_10;
    }
LABEL_6:
    uint64_t v25 = a3[6];
    swift_bridgeObjectRetain(a2);
    uint64_t v30 = a2;
    a1 = (uint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v26 = *(a1 - 1);
      a2 = *a1;
      uint64_t v27 = *(dispatch_queue_s **)(v25 + 16);
      uint64_t v28 = swift_allocObject(&unk_1009508A8, 49LL, 7LL);
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v26;
      *(void *)(v28 + 32) = a2;
      *(void *)(v28 + 40) = a4;
      *(_BYTE *)(v28 + 48) = 2;
      a6 = swift_allocObject(&unk_1009508D0, 32LL, 7LL);
      *(void *)(a6 + 16) = sub_100338CE4;
      *(void *)(a6 + 24) = v28;
      aBlock[4] = (uint64_t)sub_100154688;
      aBlock[5] = a6;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_100025BD4;
      aBlock[3] = (uint64_t)&unk_1009508E8;
      a3 = _Block_copy(aBlock);
      swift_bridgeObjectRetain_n(a2, 2LL);
      swift_retain();
      id v29 = a4;
      swift_retain();
      swift_release();
      dispatch_sync(v27, a3);
      _Block_release(a3);
      LOBYTE(v27) = swift_isEscapingClosureAtFileLocation(a6, "", 120LL, 101LL, 35LL, 1LL);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      a1 += 2;
      if (!--v24)
      {
        a2 = v30;
        swift_bridgeObjectRelease();
        a6 = v34;
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_12:
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }

  swift_errorRelease(a1);
  swift_errorRelease(a1);

  swift_bridgeObjectRelease_n(a2, 2LL);
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    goto LABEL_6;
  }
LABEL_10:
  sub_100319064(a2, 0LL, 0xF000000000000000LL, v32, a4, a5, a6);
}

void sub_100319064( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, void (*a6)(id, uint64_t), uint64_t a7)
{
  uint64_t v146 = a7;
  __int128 v147 = a6;
  id v144 = a5;
  uint64_t v145 = a4;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v155 = *(void ***)(v11 - 8);
  v156 = (void **)v11;
  __chkstk_darwin(v11);
  os_log_type_t v154 = (void **)((char *)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v152 = *(void *)(v13 - 8);
  v153 = (void **)v13;
  __chkstk_darwin(v13);
  uint64_t v151 = (char *)&v142 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (uint64_t *)((char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  int64_t v157 = v7;
  uint64_t v19 = *(void **)(v7 + 296);
  *unint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for JSONDecoder(0LL);
    uint64_t v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    uint64_t v148 = JSONDecoder.init()(v22);
    int64_t v23 = *(void *)(a1 + 16);
    if (v23)
    {
      uint64_t v149 = a2;
      uint64_t v150 = a3;
      unint64_t aBlock = (void **)_swiftEmptyArrayStorage;
      sub_100032800(0, v23, 0);
      uint64_t v24 = aBlock;
      uint64_t v25 = (void **)(a1 + 40);
      do
      {
        uint64_t v27 = *(v25 - 1);
        uint64_t v26 = *v25;
        unint64_t aBlock = v24;
        unint64_t v29 = (unint64_t)v24[2];
        unint64_t v28 = (unint64_t)v24[3];
        swift_bridgeObjectRetain(v26);
        if (v29 >= v28 >> 1)
        {
          sub_100032800(v28 > 1, v29 + 1, 1);
          uint64_t v24 = aBlock;
        }

        v25 += 2;
        v24[2] = (void *)(v29 + 1);
        uint64_t v30 = &v24[2 * v29];
        v30[4] = v27;
        v30[5] = v26;
        --v23;
      }

      while (v23);
      a3 = v150;
      a2 = v149;
    }

    else
    {
      uint64_t v24 = (void **)_swiftEmptyArrayStorage;
    }

    uint64_t v31 = sub_1006F0FB0((uint64_t)v24);
    swift_bridgeObjectRelease();
    v168[0] = v31;
    if (a3 >> 60 == 15)
    {
      swift_bridgeObjectRetain(v31);
      uint64_t v33 = sub_10025E090(v32);
      swift_bridgeObjectRelease();
      uint64_t v167 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v34 = *(void ***)(v33 + 16);
      uint64_t v35 = &unk_1007E3000;
      if (v34)
      {
        uint64_t v35 = *(void **)(type metadata accessor for SecureLocation(0LL) - 8);
        uint64_t v36 = v33 + ((*((unsigned __int8 *)v35 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v35 + 80));
        uint64_t v37 = qword_10099B5E8;
        uint64_t v143 = v33;
        swift_bridgeObjectRetain(v33);
        if (v37 == -1) {
          goto LABEL_12;
        }
        goto LABEL_101;
      }

      swift_bridgeObjectRelease();
LABEL_26:
      uint64_t v57 = *(void *)(v31 + 56);
      uint64_t v149 = v31 + 56;
      uint64_t v58 = 1LL << *(_BYTE *)(v31 + 32);
      uint64_t v59 = -1LL;
      if (v58 < 64) {
        uint64_t v59 = ~(-1LL << v58);
      }
      uint64_t v36 = v59 & v57;
      uint64_t v150 = (unint64_t)(v58 + 63) >> 6;
      swift_bridgeObjectRetain_n(v31, 2LL);
      int64_t v60 = 0LL;
      uint64_t v61 = v35[477];
      uint64_t v62 = v151;
      uint64_t v34 = v154;
      if (v36)
      {
LABEL_29:
        unint64_t v63 = __clz(__rbit64(v36));
        v36 &= v36 - 1;
        unint64_t v64 = v63 | (v60 << 6);
        goto LABEL_48;
      }

      while (1)
      {
        int64_t v65 = v60 + 1;
        if (__OFADD__(v60, 1LL))
        {
          __break(1u);
          goto LABEL_97;
        }

        if (v65 >= v150) {
          goto LABEL_52;
        }
        unint64_t v66 = *(void *)(v149 + 8 * v65);
        ++v60;
        if (!v66)
        {
          int64_t v60 = v65 + 1;
          if (v65 + 1 >= v150) {
            goto LABEL_52;
          }
          unint64_t v66 = *(void *)(v149 + 8 * v60);
          if (!v66)
          {
            int64_t v60 = v65 + 2;
            if (v65 + 2 >= v150) {
              goto LABEL_52;
            }
            unint64_t v66 = *(void *)(v149 + 8 * v60);
            if (!v66)
            {
              int64_t v60 = v65 + 3;
              if (v65 + 3 >= v150) {
                goto LABEL_52;
              }
              unint64_t v66 = *(void *)(v149 + 8 * v60);
              if (!v66)
              {
                int64_t v60 = v65 + 4;
                if (v65 + 4 >= v150) {
                  goto LABEL_52;
                }
                unint64_t v66 = *(void *)(v149 + 8 * v60);
                if (!v66)
                {
                  int64_t v67 = v65 + 5;
                  if (v67 >= v150)
                  {
LABEL_52:
                    swift_release();
                    swift_bridgeObjectRelease();
                    if (qword_10099B5E0 != -1) {
                      goto LABEL_99;
                    }
                    goto LABEL_53;
                  }

                  unint64_t v66 = *(void *)(v149 + 8 * v67);
                  if (!v66)
                  {
                    while (1)
                    {
                      int64_t v60 = v67 + 1;
                      if (__OFADD__(v67, 1LL)) {
                        break;
                      }
                      if (v60 >= v150) {
                        goto LABEL_52;
                      }
                      unint64_t v66 = *(void *)(v149 + 8 * v60);
                      ++v67;
                      if (v66) {
                        goto LABEL_47;
                      }
                    }

                    __break(1u);
LABEL_101:
                    swift_once(&qword_10099B5E8, sub_1005C66A4);
LABEL_12:
                    uint64_t v38 = v35[9];
                    uint64_t v149 = v38;
                    id v39 = v151;
                    do
                    {
                      swift_retain();
                      char v51 = sub_1005C7E64(v36);
                      swift_release();
                      if ((v51 & 1) != 0)
                      {
                        id v52 = sub_1005EE368();
                        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
                        unint64_t v54 = *(void *)((v167 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
                        unint64_t v53 = *(void *)((v167 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
                        if (v54 >= v53 >> 1) {
                          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v53 > 1,  v54 + 1,  1LL);
                        }
                        uint64_t v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v52);
                        specialized Array._endMutation()(v55);
                        if (qword_10099B850 != -1) {
                          swift_once(&qword_10099B850, sub_1006BAC84);
                        }
                        uint64_t v41 = *(void *)v36;
                        uint64_t v42 = *(void *)(v36 + 8);
                        swift_retain();
                        sub_1006BC458(v41, v42, 1);
                        swift_release();
                      }

                      else
                      {
                        int64_t v157 = (int64_t)v34;
                        if (qword_10099B850 != -1) {
                          swift_once(&qword_10099B850, sub_1006BAC84);
                        }
                        uint64_t v40 = qword_100A2B210;
                        uint64_t v41 = *(void *)v36;
                        uint64_t v42 = *(void *)(v36 + 8);
                        uint64_t v150 = *(void *)(qword_100A2B210 + 16);
                        uint64_t v43 = swift_allocObject(&unk_100951398, 41LL, 7LL);
                        *(void *)(v43 + 16) = v40;
                        *(void *)(v43 + 24) = v41;
                        *(void *)(v43 + 32) = v42;
                        *(_BYTE *)(v43 + 40) = 2;
                        id v165 = sub_1000A6EE4;
                        uint64_t v166 = (void *)v43;
                        unint64_t aBlock = _NSConcreteStackBlock;
                        uint64_t v162 = 1107296256LL;
                        id v163 = sub_1001C31E8;
                        v164 = (void **)&unk_1009513B0;
                        unint64_t v44 = _Block_copy(&aBlock);
                        swift_retain_n(v40, 2LL);
                        swift_bridgeObjectRetain(v42);
                        static DispatchQoS.unspecified.getter(v45);
                        uint64_t v159 = _swiftEmptyArrayStorage;
                        uint64_t v46 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
                        uint64_t v47 = sub_100004AEC((uint64_t *)&unk_1009AB860);
                        uint64_t v48 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
                        uint64_t v49 = v154;
                        unint64_t v50 = v156;
                        dispatch thunk of SetAlgebra.init<A>(_:)(&v159, v47, v48, v156, v46);
                        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v39, v49, v44);
                        _Block_release(v44);
                        ((void (*)(void **, void **))v155[1])(v49, v50);
                        (*(void (**)(char *, void **))(v152 + 8))(v39, v153);
                        swift_release();
                        swift_release();
                        uint64_t v34 = (void **)v157;
                        uint64_t v38 = v149;
                      }

                      swift_bridgeObjectRetain(v42);
                      sub_1003D026C(v41, v42);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v36 += v38;
                      uint64_t v34 = (void **)((char *)v34 - 1);
                    }

                    while (v34);
                    swift_bridgeObjectRelease_n(v143, 2LL);
                    uint64_t v31 = v168[0];
                    uint64_t v35 = (void *)&unk_1007E3000;
                    goto LABEL_26;
                  }

                  int64_t v60 = v67;
                }
              }
            }
          }
        }

void sub_10031A508(uint64_t *a1)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  if (qword_10099B850 != -1) {
    swift_once(&qword_10099B850, sub_1006BAC84);
  }
  swift_retain();
  sub_1006BC458(v3, v2, 0);
  uint64_t v4 = swift_release();
  if (qword_10099B5E8 != -1) {
    uint64_t v4 = swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v5 = qword_100A2AE20;
  __chkstk_darwin(v4);
  v18[2] = v5;
  v18[3] = v3;
  v18[4] = v2;
  swift_retain();
  uint64_t v6 = sub_100004AEC(&qword_1009A34B0);
  OS_dispatch_queue.sync<A>(execute:)(sub_10033A594, v18, v6);
  swift_release();
  uint64_t v8 = v22;
  uint64_t v7 = v23;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain(v7);
  uint64_t v10 = swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc(42LL, -1LL);
    uint64_t v14 = swift_slowAlloc(64LL, -1LL);
    uint64_t v19 = v6;
    uint64_t v20 = v14;
    uint64_t v24 = v14;
    *(_DWORD *)uint64_t v13 = 141558787;
    uint64_t v21 = v1;
    uint64_t v22 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    swift_bridgeObjectRetain(v2);
    uint64_t v22 = sub_1003F11D4(v3, v2, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease_n(v2, 3LL);
    *(_WORD *)(v13 + 22) = 2160;
    uint64_t v22 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 24, v13 + 32);
    *(_WORD *)(v13 + 32) = 2081;
    uint64_t v22 = v8;
    uint64_t v23 = v7;
    swift_bridgeObjectRetain(v7);
    uint64_t v15 = String.init<A>(describing:)(&v22, v19);
    uint64_t v22 = sub_1003F11D4(v15, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 34, v13 + 42);
    swift_bridgeObjectRelease_n(v7, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "subscribeAndFetch: No Location Found for %{private,mask.hash}s %{private,mask.hash}s",  (uint8_t *)v13,  0x2Au);
    uint64_t v17 = v20;
    swift_arrayDestroy(v20, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v7, 2LL);
    swift_bridgeObjectRelease_n(v2, 2LL);
  }

uint64_t sub_10031A870(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13 = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100331E04(a3, 0, a2, v13, a2, a5, a6, a7, a1);

  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_10031A93C( uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(void, void), uint64_t a7, uint64_t a8)
{
  id v37 = a5;
  uint64_t v38 = a7;
  uint64_t v13 = type metadata accessor for SecureLocation(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v18 = (uint64_t *)(a4 + 16);
  if ((a2 & 1) != 0)
  {
    __chkstk_darwin(v15);
    *(&v36 - 4) = v19;
    *(&v36 - 3) = (uint64_t)DeviceInformationProviderFactory.init();
    *(&v36 - 2) = 0LL;
    *(&v36 - 1) = a1;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.receivedUpdatedLocations",  70LL,  2LL,  sub_10033A46C);
  }

  swift_beginAccess(v18, v40, 33LL, 0LL);
  swift_bridgeObjectRetain(a1);
  sub_100185634(v20);
  swift_endAccess(v40);
  *(void *)&double v21 = swift_beginAccess(v18, v40, 0LL, 0LL).n128_u64[0];
  uint64_t v22 = *v18;
  uint64_t v23 = *(void *)(*v18 + 16);
  if (v23)
  {
    uint64_t v36 = a8;
    uint64_t v24 = a6;
    id v39 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v22);
    specialized ContiguousArray.reserveCapacity(_:)(v23);
    uint64_t v25 = v22 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v26 = *(void *)(v14 + 72);
    do
    {
      sub_10001DC4C(v25, (uint64_t)v17, type metadata accessor for SecureLocation);
      id v27 = sub_1005EE368();
      uint64_t v28 = sub_100018C68((uint64_t)v17, type metadata accessor for SecureLocation);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
      uint64_t v29 = v39[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
      uint64_t v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
      specialized ContiguousArray._endMutation()(v30);
      v25 += v26;
      --v23;
    }

    while (v23);
    swift_bridgeObjectRelease();
    a6 = v24;
  }

  unint64_t v31 = (unint64_t)objc_msgSend(v37, "subscriptionMode", v21);
  double v32 = 0.0;
  if (v31 < 6) {
    double v32 = dbl_1007FBFC0[v31];
  }
  id v33 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v35 = [v33 initWithExpiryTime:isa locations:v32];

  a6(v35, 0LL);
  Transaction.capture()();
}

void *sub_10031ABE8(uint64_t a1)
{
  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v2 = qword_100A2AE20;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v2, &type metadata for SecureLocationsConfig);
  swift_release();
  v14[10] = v13[10];
  v14[11] = v13[11];
  v14[12] = v13[12];
  v14[6] = v13[6];
  v14[7] = v13[7];
  v14[8] = v13[8];
  void v14[9] = v13[9];
  v14[2] = v13[2];
  v14[3] = v13[3];
  v14[4] = v13[4];
  v14[5] = v13[5];
  v14[0] = v13[0];
  v14[1] = v13[1];
  if (qword_10099B2F0 != -1) {
    swift_once(&qword_10099B2F0, sub_100313A34);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000A720(v3, (uint64_t)qword_1009A9150);
  uint64_t v4 = sub_1002E9D14(v14);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v13[0] = v8;
    *(_DWORD *)uint64_t v7 = 136446722;
    uint64_t v11 = sub_1003F11D4(0xD000000000000034LL, 0x800000010085E280LL, (uint64_t *)v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2048;
    uint64_t v11 = *(void *)&v14[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v7 + 14, v7 + 22);
    sub_100246384(v14);
    *(_WORD *)(v7 + 22) = 2048;
    uint64_t v11 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v7 + 24, v7 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "%{public}s local version: %ld - server: %ld",  (uint8_t *)v7,  0x20u);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    sub_100246384(v14);
  }

  uint64_t result = sub_100246384(v14);
  if (*(uint64_t *)&v14[0] < a1)
  {
    uint64_t v10 = swift_allocObject(&unk_100951348, 24LL, 7LL);
    *(void *)(v10 + 16) = a1;
    sub_100313AC4((uint64_t)sub_100339FE8, v10);
    return (void *)swift_release();
  }

  return result;
}

uint64_t sub_10031AEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject(&unk_1009506C8, 64LL, 7LL);
  void v12[2] = a3;
  void v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a2;
  v12[7] = a1;
  swift_bridgeObjectRetain(a4);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10025DC10(a3, a4, (uint64_t)sub_100338AF8, (uint64_t)v12);
  return swift_release();
}

void sub_10031AF68( uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void, void), uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v55 = *a7;
  uint64_t v56 = a5;
  uint64_t v12 = sub_100004AEC(&qword_1009A7118);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SecureLocation(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100338B04(a1, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) != 1)
  {
    sub_10002218C((uint64_t)v14, (uint64_t)v18, type metadata accessor for SecureLocation);
    if (qword_10099B5E8 != -1) {
      swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    swift_retain();
    char v25 = sub_1005C7E64((uint64_t)v18);
    swift_release();
    if ((v25 & 1) == 0)
    {
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v36 = type metadata accessor for Logger(0LL);
      sub_10000A720(v36, (uint64_t)qword_100A2AE08);
      swift_bridgeObjectRetain_n(a3, 2LL);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v39 = static os_log_type_t.default.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = swift_slowAlloc(12LL, -1LL);
        unint64_t v54 = a4;
        uint64_t v41 = (uint8_t *)v40;
        uint64_t v42 = swift_slowAlloc(32LL, -1LL);
        uint64_t v58 = v42;
        *(_DWORD *)uint64_t v41 = 136315138;
        swift_bridgeObjectRetain(a3);
        uint64_t v57 = sub_1003F11D4(a2, a3, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v41 + 4, v41 + 12);
        swift_bridgeObjectRelease_n(a3, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "latestLocationFromCache - location is older than acceptable threshold. Returning nil for %s",  v41,  0xCu);
        swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1LL, -1LL);
        uint64_t v43 = v41;
        a4 = v54;
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a3, 2LL);
      }

      if (qword_10099B850 != -1) {
        swift_once(&qword_10099B850, sub_1006BAC84);
      }
      sub_1006BE254(3);
      a4(0LL, 0LL);
      goto LABEL_42;
    }

    swift_retain();
    char v26 = sub_1005C825C((uint64_t)v18);
    swift_release();
    if ((v26 & 1) != 0)
    {
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v27 = type metadata accessor for Logger(0LL);
      sub_10000A720(v27, (uint64_t)qword_100A2AE08);
      swift_bridgeObjectRetain_n(a3, 2LL);
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc(12LL, -1LL);
        unint64_t v54 = a4;
        double v32 = (uint8_t *)v31;
        uint64_t v33 = swift_slowAlloc(32LL, -1LL);
        uint64_t v58 = v33;
        *(_DWORD *)double v32 = 136315138;
        unint64_t v53 = v32 + 4;
        swift_bridgeObjectRetain(a3);
        uint64_t v57 = sub_1003F11D4(a2, a3, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v53, v32 + 12);
        swift_bridgeObjectRelease_n(a3, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "latestLocationFromCache - location is valid but aging. Returning it for now and requesting a refetch for %s",  v32,  0xCu);
        swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1LL, -1LL);
        uint64_t v34 = v32;
        a4 = v54;
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      else
      {

        uint64_t v35 = swift_bridgeObjectRelease_n(a3, 2LL);
      }

      __chkstk_darwin(v35);
      *(&v52 - 4) = a6;
      *(&v52 - 3) = a2;
      *(&v52 - 2) = a3;
      static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocationsSubscribeExpiringLocation",  70LL,  2LL,  sub_100338B6C);
      if (qword_10099B850 != -1) {
        swift_once(&qword_10099B850, sub_1006BAC84);
      }
      char v50 = 2;
    }

    else
    {
      if ((sub_10031B7F8(a2, a3) & 1) != 0)
      {
        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v44 = type metadata accessor for Logger(0LL);
        uint64_t v45 = sub_10000A720(v44, (uint64_t)qword_100A2AE08);
        uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
        os_log_type_t v47 = static os_log_type_t.default.getter(v46);
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v48 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "latestLocationFromCache - proactive subscription needs renewal",  v48,  2u);
          swift_slowDealloc(v48, -1LL, -1LL);
        }

        if (qword_10099B850 != -1) {
          swift_once(&qword_10099B850, sub_1006BAC84);
        }
        sub_1006BE254(1);
        __chkstk_darwin(v49);
        *(&v52 - 6) = a6;
        *(&v52 - 5) = a2;
        *(&v52 - 4) = a3;
        *(&v52 - 3) = (uint64_t)a4;
        *(&v52 - 2) = v56;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocationsProactiveSubscriptionRenewal",  73LL,  2LL,  sub_100338B4C);
        goto LABEL_42;
      }

      if (qword_10099B850 != -1) {
        swift_once(&qword_10099B850, sub_1006BAC84);
      }
      char v50 = 0;
    }

    sub_1006BE254(v50);
    id v51 = sub_1005EE368();
    a4(v51, 0LL);

LABEL_42:
    sub_100018C68((uint64_t)v18, type metadata accessor for SecureLocation);
    goto LABEL_43;
  }

  sub_100015794((uint64_t)v14, &qword_1009A7118);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_10000A720(v19, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain_n(a3, 2LL);
  double v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v58 = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v57 = sub_1003F11D4(a2, a3, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "latestLocationFromCache - no cached location for %s",  v23,  0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  if (qword_10099B850 != -1) {
    swift_once(&qword_10099B850, sub_1006BAC84);
  }
  sub_1006BE254(4);
  a4(0LL, 0LL);
LABEL_43:
  Transaction.capture()();
}

uint64_t sub_10031B7F8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v4);
  os_log_type_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28 - v12;
  sub_10025A3A4(a1, a2, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_100015794((uint64_t)v6, (uint64_t *)&unk_10099D720);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2AE08);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "proactiveSubscriptionNeedsRenewal is true since there is no last proactive subscribtion time.",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    return 1LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    static Date.trustedNow.getter((uint64_t)v11);
    double v20 = Date.timeIntervalSince(_:)(v13);
    double v21 = *(void (**)(char *, uint64_t))(v8 + 8);
    v21(v11, v7);
    BOOL v19 = v20 >= 64800.0;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_10000A720(v22, (uint64_t)qword_100A2AE08);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(28LL, -1LL);
      *(_DWORD *)uint64_t v26 = 67109632;
      LODWORD(v29) = v20 >= 64800.0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4, v26 + 4, v26 + 8);
      *(_WORD *)(v26 + 8) = 2048;
      uint64_t v29 = 0x40EFA40000000000LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26 + 10, v26 + 18);
      *(_WORD *)(v26 + 18) = 2048;
      uint64_t v29 = *(void *)&v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26 + 20, v26 + 28);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "proactiveSubscriptionNeedsRenewal %{BOOL}d threshold %f timeSinceLastSubscribe %f",  (uint8_t *)v26,  0x1Cu);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    v21(v13, v7);
  }

  return v19;
}

uint64_t sub_10031BB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Date.trustedNow.getter((uint64_t)v7);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v16 = v4;
    swift_bridgeObjectRetain(a1);
    uint64_t v9 = (unint64_t *)(a1 + 40);
    do
    {
      if (*(void *)(a2 + 16))
      {
        uint64_t v11 = *(v9 - 1);
        unint64_t v10 = *v9;
        swift_bridgeObjectRetain(*v9);
        uint64_t v12 = sub_10030CF14(v11, v10);
        if ((v13 & 1) != 0 && (*(_BYTE *)(*(void *)(a2 + 56) + v12) & 1) == 0) {
          sub_10025A818(v11, v10, (uint64_t)v7);
        }
        swift_bridgeObjectRelease();
      }

      v9 += 2;
      --v8;
    }

    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v4 = v16;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10031BC70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6)
{
  id v12 = [objc_allocWithZone(SPSecureLocationsSubscriptionContext) init];
  [v12 setSubscriptionMode:0];
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 setClientApp:v13];

  [v12 setFetchMode:0];
  uint64_t v14 = sub_100004AEC(&qword_1009AF520);
  uint64_t v15 = swift_allocObject(v14, 48LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1007E67D0;
  *(void *)(v15 + 32) = a3;
  *(void *)(v15 + 40) = a4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(a4);
  sub_10032FD10(v15, v12, 0, a2, a5, a6, a1);

  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void sub_10031BDC0(void *a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  id v5 = [a1 locations];
  uint64_t v6 = sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v8 = (void *)_CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (!v8) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v8 = *(void **)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v8)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      a3(v8, a2);

      Transaction.capture()();
      return;
    }
  }

  if ((v7 & 0xC000000000000001LL) != 0)
  {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v7);
    goto LABEL_6;
  }

  if (*(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v9 = *(id *)(v7 + 32);
LABEL_6:
    uint64_t v8 = v9;
    goto LABEL_7;
  }

  __break(1u);
}

uint64_t sub_10031BED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = [objc_allocWithZone(SPSecureLocationsSubscriptionContext) init];
  [v8 setSubscriptionMode:0];
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 setClientApp:v9];

  [v8 setFetchMode:0];
  uint64_t v10 = sub_100004AEC(&qword_1009AF520);
  uint64_t v11 = swift_allocObject(v10, 48LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_1007E67D0;
  *(void *)(v11 + 32) = a3;
  *(void *)(v11 + 40) = a4;
  swift_retain();
  swift_bridgeObjectRetain(a4);
  sub_1003305D4(v11, v8, 1, a2, a1);

  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_10031BFFC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v7 = &off_10099B000;
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_10000A720(v9, (uint64_t)qword_100A2AE08);
    swift_errorRetain(a2);
    uint64_t v10 = swift_errorRetain(a2);
    uint64_t v11 = (void *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter(v11);
    if (!os_log_type_enabled((os_log_t)v11, v12))
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      if (*(void *)(a1 + 16)) {
        goto LABEL_7;
      }
      goto LABEL_9;
    }

    NSString v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = a2;
    uint64_t v26 = v14;
    *(_DWORD *)NSString v13 = 136315138;
    swift_errorRetain(a2);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v16 = String.init<A>(describing:)(&v25, v15);
    uint64_t v25 = sub_1003F11D4(v16, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v13 + 4, v13 + 12);
    uint64_t v7 = &off_10099B000;
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  v12,  "Error resolving label before publish. Proceeding without label. Error %s",  v13,  0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    swift_errorRelease(a2);
  }

  if (*(void *)(a1 + 16))
  {
LABEL_7:
    uint64_t v18 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SecureLocation(0LL) - 8) + 80LL);
    sub_10031C2F8(a1 + ((v18 + 32) & ~v18), 0, a4, a5);
    return;
  }

void sub_10031C2F8(uint64_t a1, int a2, void (*a3)(void), uint64_t a4)
{
  LODWORD(v109) = a2;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v7);
  os_log_type_t v106 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = type metadata accessor for SecureLocationsSubmitEndpoint(0LL);
  uint64_t v9 = __chkstk_darwin(v110);
  uint64_t v111 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v105 = (uint64_t)&v101 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v101 - v13;
  uint64_t v15 = type metadata accessor for SecureLocation(0LL);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v101 - v19;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = sub_10000A720(v21, (uint64_t)qword_100A2AE08);
  sub_10001DC4C(a1, (uint64_t)v20, type metadata accessor for SecureLocation);
  uint64_t v23 = sub_10001DC4C(a1, (uint64_t)v18, type metadata accessor for SecureLocation);
  uint64_t v112 = v22;
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v103 = v15;
  uint64_t v104 = a1;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    uint64_t v108 = a4;
    uint64_t v28 = v27;
    uint64_t v29 = swift_slowAlloc(64LL, -1LL);
    uint64_t v102 = a3;
    uint64_t v30 = v29;
    uint64_t v115 = (char *)v29;
    *(_DWORD *)uint64_t v28 = 136446466;
    unint64_t v31 = sub_1005EECA8(*(void *)&v20[*(int *)(v15 + 60)]);
    uint64_t v113 = sub_1003F11D4(v31, v32, (uint64_t *)&v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v20, type metadata accessor for SecureLocation);
    *(_WORD *)(v28 + 12) = 2080;
    uint64_t v33 = sub_1005EE53C();
    uint64_t v113 = sub_1003F11D4(v33, v34, (uint64_t *)&v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v18, type metadata accessor for SecureLocation);
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "publishLocation with reason %{public}s location: %s",  (uint8_t *)v28,  0x16u);
    swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v35 = v30;
    a3 = v102;
    swift_slowDealloc(v35, -1LL, -1LL);
    uint64_t v36 = v28;
    a4 = v108;
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v20, type metadata accessor for SecureLocation);
    sub_100018C68((uint64_t)v18, type metadata accessor for SecureLocation);
  }

  uint64_t v38 = v110;
  uint64_t v37 = (uint64_t)v111;
  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  swift_retain();
  char v39 = sub_1005C7C90();
  uint64_t v40 = swift_release();
  if ((v39 & 1) != 0 || (v109 & 1) != 0)
  {
    uint64_t v48 = enum case for FMNAccountType.searchParty(_:);
    uint64_t v49 = type metadata accessor for FMNAccountType(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 104LL))(v14, v48, v49);
    sub_100128210((uint64_t)&v14[*(int *)(v38 + 20)]);
    uint64_t v50 = v105;
    uint64_t v51 = sub_10001DC4C((uint64_t)v14, v105, type metadata accessor for SecureLocationsSubmitEndpoint);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = static os_log_type_t.default.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v109 = v14;
      unint64_t v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v55 = swift_slowAlloc(32LL, -1LL);
      uint64_t v108 = a4;
      uint64_t v56 = v55;
      uint64_t v115 = (char *)v55;
      *(_DWORD *)unint64_t v54 = 136315138;
      sub_10001DC4C(v50, v37, type metadata accessor for SecureLocationsSubmitEndpoint);
      uint64_t v57 = String.init<A>(describing:)(v37, v38);
      uint64_t v58 = v37;
      uint64_t v113 = sub_1003F11D4(v57, v59, (uint64_t *)&v115);
      uint64_t v14 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v50, type metadata accessor for SecureLocationsSubmitEndpoint);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "SubmitLocation endpoint %s", v54, 0xCu);
      swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v60 = v56;
      a4 = v108;
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);

      uint64_t v61 = v107;
    }

    else
    {
      sub_100018C68(v50, type metadata accessor for SecureLocationsSubmitEndpoint);

      uint64_t v61 = v107;
      uint64_t v58 = v37;
    }

    uint64_t v62 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
    swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
    uint64_t v63 = type metadata accessor for FMNMockingPreferences(0LL);
    unint64_t v64 = v106;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56LL))(v106, 1LL, 1LL, v63);
    uint64_t v65 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v64);
    uint64_t v66 = type metadata accessor for ServerInteractionController(0LL);
    uint64_t v67 = swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
    sub_10001DC4C((uint64_t)v14, v58, type metadata accessor for SecureLocationsSubmitEndpoint);
    uint64_t v68 = sub_10043199C(v58, v65, v67);
    id v69 = [(id)objc_opt_self(AKDevice) currentDevice];
    if (v69
      && (uint64_t v70 = v69,
          id v71 = [v69 uniqueDeviceIdentifier],
          v70,
          v71))
    {
      uint64_t v109 = v14;
      uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      uint64_t v74 = v73;

      uint64_t v75 = sub_100004AEC(&qword_1009A34B0);
      OS_dispatch_queue.sync<A>(execute:)(sub_100338BF0, v61, v75);
      uint64_t v76 = v116;
      if (v116)
      {
        uint64_t v111 = v115;
        uint64_t v77 = swift_allocBox(v103);
        uint64_t v112 = 0LL;
        uint64_t v78 = v77;
        uint64_t v80 = (void *)v79;
        uint64_t v110 = v68;
        uint64_t v81 = v104;
        sub_10001DC4C(v104, v79, type metadata accessor for SecureLocation);
        *uint64_t v80 = v72;
        v80[1] = v74;
        swift_bridgeObjectRetain(v74);
        swift_bridgeObjectRelease();
        uint64_t v82 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v82);
        *(&v101 - 10) = v61;
        *(&v101 - 9) = v78;
        *(&v101 - 8) = (uint64_t)a3;
        *(&v101 - 7) = a4;
        os_log_type_t v83 = v111;
        *(&v101 - 6) = v81;
        *(&v101 - 5) = (uint64_t)v83;
        *(&v101 - 4) = v76;
        *(&v101 - 3) = v72;
        uint64_t v84 = v110;
        *(&v101 - 2) = v74;
        *(&v101 - 1) = v84;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.publishEncodedPayload",  51LL,  2LL,  sub_10033968C);
        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v109, type metadata accessor for SecureLocationsSubmitEndpoint);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }

      uint64_t v93 = swift_bridgeObjectRelease();
      uint64_t v94 = (os_log_s *)Logger.logObject.getter(v93);
      os_log_type_t v95 = static os_log_type_t.error.getter(v94);
      if (os_log_type_enabled(v94, v95))
      {
        NSString v96 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)NSString v96 = 0;
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "No APS token. Not proceeding", v96, 2u);
        swift_slowDealloc(v96, -1LL, -1LL);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
      id v97 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v98 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v99 = [v97 initWithDomain:v98 code:13 userInfo:0];

      id v100 = v99;
      a3(v99);

      swift_release();
      uint64_t v92 = (uint64_t)v109;
    }

    else
    {
      os_log_type_t v85 = (os_log_s *)Logger.logObject.getter(v69);
      os_log_type_t v86 = static os_log_type_t.error.getter(v85);
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v87 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  v86,  "Unable to get device identifier for server SubscribeAndFetch",  v87,  2u);
        swift_slowDealloc(v87, -1LL, -1LL);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
      id v88 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v89 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v90 = [v88 initWithDomain:v89 code:0 userInfo:0];

      id v91 = v90;
      a3(v90);

      swift_release();
      uint64_t v92 = (uint64_t)v14;
    }

    sub_100018C68(v92, type metadata accessor for SecureLocationsSubmitEndpoint);
  }

  else
  {
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Not a location publishing device. Not publishing location",  v43,  2u);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    id v44 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v46 = [v44 initWithDomain:v45 code:12 userInfo:0];

    id v47 = v46;
    a3(v46);
  }

uint64_t sub_10031CD90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v45 = a8;
  uint64_t v44 = a7;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v47 = a3;
  uint64_t v36 = a1;
  uint64_t v41 = a10;
  uint64_t v42 = a11;
  uint64_t v40 = a9;
  uint64_t v14 = type metadata accessor for SecureLocation(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v37 = (uint64_t)&v36 - v19;
  uint64_t v21 = swift_projectBox(a3);
  uint64_t v43 = *(void *)(a2 + 16);
  swift_beginAccess(v21, v46, 0LL, 0LL);
  sub_10001DC4C(v21, (uint64_t)v20, type metadata accessor for SecureLocation);
  sub_10001DC4C(a6, (uint64_t)v18, type metadata accessor for SecureLocation);
  uint64_t v22 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v23 = (v22 + 56) & ~v22;
  unint64_t v24 = (v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v26 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v27 = (void *)swift_allocObject(&unk_100950F10, v26 + 8, v22 | 7);
  uint64_t v28 = v38;
  uint64_t v29 = v39;
  v27[2] = v36;
  v27[3] = v28;
  v27[4] = v29;
  v27[5] = a2;
  v27[6] = v47;
  sub_10002218C((uint64_t)v18, (uint64_t)v27 + v23, type metadata accessor for SecureLocation);
  uint64_t v30 = (void *)((char *)v27 + v24);
  uint64_t v31 = v45;
  *uint64_t v30 = v44;
  v30[1] = v31;
  unint64_t v32 = (void *)((char *)v27 + v25);
  uint64_t v33 = v41;
  void *v32 = v40;
  v32[1] = v33;
  *(void *)((char *)v27 + v26) = v42;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v33);
  swift_retain();
  uint64_t v34 = v37;
  sub_10025EC74(v37, (uint64_t)sub_1003397A8, (uint64_t)v27);
  swift_release();
  return sub_100018C68(v34, type metadata accessor for SecureLocation);
}

void sub_10031CFA0( uint64_t a1, void *a2, void (*a3)(id), void (*a4)(id), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  id v116 = a2;
  uint64_t v109 = a12;
  uint64_t v113 = a10;
  uint64_t v114 = a8;
  uint64_t v18 = type metadata accessor for SecureLocation(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v110 = v20;
  uint64_t v111 = (uint64_t)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v21);
  if (*(void *)(a1 + 16))
  {
    uint64_t v105 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v115 = a3;
    uint64_t v112 = a4;
    uint64_t v23 = swift_projectBox(a6);
    uint64_t v24 = sub_100004AEC(&qword_10099D540);
    uint64_t v25 = *(void *)(v19 + 72);
    uint64_t v26 = *(unsigned __int8 *)(v19 + 80);
    uint64_t v27 = (v26 + 32) & ~v26;
    uint64_t v108 = v26;
    uint64_t v106 = v26 | 7;
    uint64_t v28 = swift_allocObject(v24, v27 + v25, v26 | 7);
    *(_OWORD *)(v28 + 16) = xmmword_1007E67D0;
    swift_beginAccess(v23, v118, 0LL, 0LL);
    sub_10001DC4C(v23, v28 + v27, type metadata accessor for SecureLocation);
    sub_10025C0EC(v28, 1, (uint64_t)DeviceInformationProviderFactory.init(), 0LL);
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)(a7 + *(int *)(v18 + 60));
    if (v29 == 7)
    {
      __int128 v30 = *(_OWORD *)(a1 + 48);
      __int128 v119 = *(_OWORD *)(a1 + 32);
      __int128 v120 = v30;
      __int128 v121 = *(_OWORD *)(a1 + 64);
      uint64_t v122 = *(void *)(a1 + 80);
      sub_10020F818((uint64_t *)&v119);
      sub_10031DAB8((uint64_t)&v119);
      sub_10020F948((uint64_t)&v119);
      v115(0LL);
      Transaction.capture()();
    }

    else
    {
      uint64_t v104 = a7;
      uint64_t v107 = a5;
      uint64_t v39 = v115;
      if (qword_10099B5E8 != -1) {
        swift_once(&qword_10099B5E8, sub_1005C66A4);
      }
      uint64_t v40 = sub_100004AEC(&qword_1009AED50);
      unsafeFromAsyncTask<A>(_:)(&unk_1009A95D8, 0LL, v40);
      uint64_t v41 = v119;
      unint64_t v42 = sub_1005EECA8(v29);
      uint64_t v44 = v43;
      uint64_t v45 = swift_allocObject(&unk_100950F38, 112LL, 7LL);
      uint64_t v46 = v114;
      *(void *)(v45 + 16) = a1;
      *(void *)(v45 + 24) = v46;
      uint64_t v47 = v113;
      *(void *)(v45 + 32) = a9;
      *(void *)(v45 + 40) = v47;
      *(void *)(v45 + 48) = a11;
      strcpy((char *)(v45 + 56), "searchpartyd");
      *(_BYTE *)(v45 + 69) = 0;
      *(_WORD *)(v45 + 70) = -5120;
      *(_BYTE *)(v45 + 72) = 0;
      *(void *)(v45 + 80) = v42;
      *(void *)(v45 + 88) = v44;
      uint64_t v48 = v107;
      *(void *)(v45 + 96) = v41;
      *(void *)(v45 + 104) = v48;
      swift_bridgeObjectRetain(a9);
      swift_bridgeObjectRetain(a11);
      swift_bridgeObjectRetain(a1);
      swift_retain();
      uint64_t v49 = sub_100004AEC(&qword_1009A95F0);
      unsafeFromAsyncTask<A>(_:)(&unk_1009A95E8, v45, v49);
      swift_release();
      uint64_t v50 = v119;
      uint64_t v51 = v108;
      if ((void)v119)
      {
        uint64_t v52 = *((void *)&v119 + 1);
        unint64_t v53 = v120;
        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v54 = type metadata accessor for Logger(0LL);
        uint64_t v55 = sub_10000A720(v54, (uint64_t)qword_100A2AE08);
        uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
        os_log_type_t v57 = static os_log_type_t.default.getter(v56);
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Sending SubmitLocation server request", v58, 2u);
          swift_slowDealloc(v58, -1LL, -1LL);
        }

        sub_100339CB4(v50, v52, v53);
        swift_bridgeObjectRetain(v50);
        uint64_t v59 = sub_10001736C(v52, v53);
        uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
        os_log_type_t v61 = static os_log_type_t.debug.getter(v60);
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = swift_slowAlloc(12LL, -1LL);
          uint64_t v114 = v55;
          uint64_t v63 = (uint8_t *)v62;
          uint64_t v113 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v119 = v113;
          *(_DWORD *)uint64_t v63 = 136315138;
          uint64_t v103 = v63 + 4;
          swift_bridgeObjectRetain(v50);
          uint64_t v65 = v51;
          uint64_t v66 = Dictionary.description.getter( v64,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
          unint64_t v68 = v67;
          swift_bridgeObjectRelease();
          uint64_t v69 = v66;
          uint64_t v51 = v65;
          uint64_t v117 = sub_1003F11D4(v69, v68, (uint64_t *)&v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v103, v63 + 12);
          swift_bridgeObjectRelease();
          sub_100117A58(v50, v52, v53);
          sub_100117A58(v50, v52, v53);
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "SubmitLocation request headers %s", v63, 0xCu);
          uint64_t v70 = v113;
          swift_arrayDestroy(v113, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v70, -1LL, -1LL);
          swift_slowDealloc(v63, -1LL, -1LL);
        }

        else
        {
          sub_100117A58(v50, v52, v53);
          sub_100117A58(v50, v52, v53);
        }

        uint64_t v80 = ~v51;
        swift_bridgeObjectRetain(v50);
        sub_10001736C(v52, v53);
        swift_bridgeObjectRetain(v50);
        uint64_t v81 = sub_10001736C(v52, v53);
        uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
        os_log_type_t v83 = static os_log_type_t.debug.getter(v82);
        if (os_log_type_enabled(v82, v83))
        {
          uint64_t v84 = swift_slowAlloc(12LL, -1LL);
          uint64_t v114 = ~v51;
          os_log_type_t v85 = (uint8_t *)v84;
          uint64_t v86 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v119 = v86;
          *(_DWORD *)os_log_type_t v85 = 136315138;
          uint64_t v87 = v105;
          static String.Encoding.utf8.getter(v86);
          uint64_t v88 = String.init(data:encoding:)(v52, v53, v87);
          if (v89)
          {
            unint64_t v90 = v89;
          }

          else
          {
            uint64_t v88 = 7104878LL;
            unint64_t v90 = 0xE300000000000000LL;
          }

          uint64_t v117 = sub_1003F11D4(v88, v90, (uint64_t *)&v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v85 + 4, v85 + 12);
          uint64_t v51 = v108;
          swift_bridgeObjectRelease();
          sub_100117A58(v50, v52, v53);
          sub_100117A58(v50, v52, v53);
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "SubmitLocation request body %s", v85, 0xCu);
          swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v86, -1LL, -1LL);
          id v91 = v85;
          uint64_t v80 = v114;
          swift_slowDealloc(v91, -1LL, -1LL);
        }

        else
        {
          sub_100117A58(v50, v52, v53);
          sub_100117A58(v50, v52, v53);
        }

        swift_bridgeObjectRetain(v50);
        sub_10001736C(v52, v53);
        sub_10043280C(v50, v52, v53, 0LL, v109);
        sub_100117A58(v50, v52, v53);
        uint64_t v114 = v52;
        uint64_t v92 = v111;
        sub_10001DC4C(v104, v111, type metadata accessor for SecureLocation);
        uint64_t v93 = (v51 + 16) & v80;
        unint64_t v94 = (v110 + v93 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v95 = (v94 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v96 = (v95 + 23) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v97 = swift_allocObject(&unk_100950F60, v96 + 8, v106);
        sub_10002218C(v92, v97 + v93, type metadata accessor for SecureLocation);
        *(void *)(v97 + v94) = v107;
        NSString v98 = (void (**)(id))(v97 + v95);
        id v99 = v115;
        id v100 = v116;
        uint64_t v101 = v112;
        *NSString v98 = v115;
        v98[1] = v101;
        *(void *)(v97 + v96) = v100;
        swift_retain();
        swift_retain();
        swift_retain();
        Future.addSuccess(block:)(sub_1003399E8, v97);
        swift_release();
        swift_release();
        uint64_t v102 = (void *)swift_allocObject(&unk_100950F88, 40LL, 7LL);
        v102[2] = v99;
        v102[3] = v101;
        v102[4] = v100;
        swift_retain();
        swift_retain();
        Future.addFailure(block:)(sub_100339A60, v102);
        swift_release();
        swift_release();
        swift_release();
        sub_100117A58(v50, v114, v53);
      }

      else
      {
        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v71 = type metadata accessor for Logger(0LL);
        uint64_t v72 = sub_10000A720(v71, (uint64_t)qword_100A2AE08);
        uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
        os_log_type_t v74 = static os_log_type_t.default.getter(v73);
        if (os_log_type_enabled(v73, v74))
        {
          uint64_t v75 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v75 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "Failed to create request for server SubscribeAndFetch",  v75,  2u);
          swift_slowDealloc(v75, -1LL, -1LL);
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
        id v76 = objc_allocWithZone(&OBJC_CLASS___NSError);
        NSString v77 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v78 = [v76 initWithDomain:v77 code:0 userInfo:0];

        id v79 = v78;
        v39(v78);

        Transaction.capture()();
      }
    }
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    uint64_t v32 = sub_10000A720(v31, (uint64_t)qword_100A2AE08);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Encoded payload to submit locations is empty.", v35, 2u);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    Transaction.capture()();
    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    id v36 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v38 = [v36 initWithDomain:v37 code:14 userInfo:0];

    id v116 = v38;
    a3(v38);
  }

void sub_10031DAB8(uint64_t a1)
{
  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  swift_retain();
  id v3 = [v2 standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  unsigned __int8 v5 = [v3 BOOLForKey:v4];
  swift_release();

  if ((v5 & 1) != 0)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2AE08);
    oslog = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v8 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "autoMe is active - not publishing live location", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }
  }

  else
  {
    swift_retain();
    sub_1001F00E4(a1);
    swift_release();
  }

uint64_t sub_10031DC80(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(sub_10031DC98, 0LL, 0LL);
}

uint64_t sub_10031DC98()
{
  uint64_t v1 = type metadata accessor for PairedAutoMeCapableWatches();
  uint64_t v2 = swift_allocObject(v1, 112LL, 15LL);
  *(void *)(v0 + 24) = v2;
  swift_defaultActor_initialize(v2);
  id v3 = (void *)swift_task_alloc(dword_1009BAA64);
  *(void *)(v0 + 32) = v3;
  *id v3 = v0;
  v3[1] = sub_10031DCFC;
  return sub_10068AEF8();
}

uint64_t sub_10031DCFC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 4Hasher.init(_seed:)(v2, 0LL) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_10033A498, 0LL, 0LL);
}

uint64_t sub_10031DD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_10031DD7C, 0LL, 0LL);
}

uint64_t sub_10031DD7C()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = *(void *)(v0[5] + 312LL);
  swift_bridgeObjectRetain(v0[3]);
  sub_100339A6C(v1);
  uint64_t v3 = unk_1009A1D7C;
  uint64_t v6 = (char *)&dword_1009A1D78 + dword_1009A1D78;
  swift_retain();
  NSString v4 = (void *)swift_task_alloc(v3);
  v0[6] = v4;
  *NSString v4 = v0;
  v4[1] = sub_10031DE08;
  return ((uint64_t (*)(void, void, uint64_t))v6)(v0[3], v0[4], v2);
}

uint64_t sub_10031DE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 48LL);
  v4[7] = a1;
  v4[8] = a2;
  void v4[9] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_10031DE68, 0LL, 0LL);
}

uint64_t sub_10031DE68()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v0 + 56);
  *(void *)(v2 + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10031DE84(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id), uint64_t a5, uint64_t a6)
{
  uint64_t v73 = a4;
  uint64_t v74 = a6;
  uint64_t v72 = a5;
  uint64_t v69 = a3;
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v8);
  unint64_t v68 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = type metadata accessor for SecureLocation(0LL);
  uint64_t v10 = __chkstk_darwin(v70);
  uint64_t v75 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v64 - v12;
  uint64_t v14 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v64 - v19;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = sub_10000A720(v21, (uint64_t)qword_100A2AE08);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v23(v20, a1, v14);
  sub_10001DC4C(a2, (uint64_t)v13, type metadata accessor for SecureLocation);
  sub_10001DC4C(a2, v75, type metadata accessor for SecureLocation);
  uint64_t v71 = a1;
  uint64_t v24 = ((uint64_t (*)(char *, uint64_t, uint64_t))v23)(v18, a1, v14);
  uint64_t v67 = v22;
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.default.getter(v25);
  int v27 = v26;
  uint64_t v28 = v18;
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v29 = swift_slowAlloc(42LL, -1LL);
    uint64_t v30 = swift_slowAlloc(96LL, -1LL);
    uint64_t v66 = v30;
    uint64_t v77 = v30;
    *(_DWORD *)uint64_t v29 = 134218754;
    int v65 = v27;
    uint64_t v31 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v30);
    uint64_t v64 = *(void (**)(char *, uint64_t))(v15 + 8);
    v64(v20, v14);
    uint64_t v76 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v29 + 4, v29 + 12);
    *(_WORD *)(v29 + 12) = 2082;
    unint64_t v32 = sub_1005EECA8(*(void *)&v13[*(int *)(v70 + 60)]);
    uint64_t v76 = sub_1003F11D4(v32, v33, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v13, type metadata accessor for SecureLocation);
    *(_WORD *)(v29 + 22) = 2080;
    uint64_t v34 = v75;
    uint64_t v35 = sub_1005EE53C();
    uint64_t v76 = sub_1003F11D4(v35, v36, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v29 + 24, v29 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68(v34, type metadata accessor for SecureLocation);
    *(_WORD *)(v29 + 32) = 2080;
    uint64_t v37 = sub_100007864( &qword_1009A6DC0,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v14, v37);
    uint64_t v76 = sub_1003F11D4(v38, v39, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v29 + 34, v29 + 42);
    swift_bridgeObjectRelease();
    v64(v28, v14);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  (os_log_type_t)v65,  "SubmitLocation received status %ld for reason %{public}s location: %s. response: %s",  (uint8_t *)v29,  0x2Au);
    uint64_t v40 = v66;
    swift_arrayDestroy(v66, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    uint64_t v41 = *(void (**)(char *, uint64_t))(v15 + 8);
    v41(v20, v14);
    sub_100018C68((uint64_t)v13, type metadata accessor for SecureLocation);
    sub_100018C68(v75, type metadata accessor for SecureLocation);
    v41(v18, v14);
  }

  uint64_t v43 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v42);
  if (v43 == 428) {
    goto LABEL_14;
  }
  if (v43 == 200)
  {
    uint64_t v44 = FMNServerInteractionController.FMNResponseFields.data.getter(200LL);
    unint64_t v46 = v45;
    uint64_t v47 = v68;
    static String.Encoding.utf8.getter(v44);
    uint64_t v48 = String.init(data:encoding:)(v44, v46, v47);
    unint64_t v50 = v49;
    uint64_t v51 = sub_100016F9C(v44, v46);
    if (v50)
    {
      swift_bridgeObjectRetain(v50);
      unint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v54 = static os_log_type_t.default.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v56 = swift_slowAlloc(32LL, -1LL);
        uint64_t v77 = v56;
        *(_DWORD *)uint64_t v55 = 136315138;
        swift_bridgeObjectRetain(v50);
        uint64_t v76 = sub_1003F11D4(v48, v50, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v55 + 4, v55 + 12);
        swift_bridgeObjectRelease_n(v50, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "SubmitLocation Received responseString %s", v55, 0xCu);
        swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1LL, -1LL);
        swift_slowDealloc(v55, -1LL, -1LL);
      }

      else
      {

        uint64_t v51 = swift_bridgeObjectRelease_n(v50, 2LL);
      }
    }

    uint64_t v61 = FMNServerInteractionController.FMNResponseFields.data.getter(v51);
    unint64_t v63 = v62;
    sub_10031ED10(v61, v62);
    sub_100016F9C(v61, v63);
LABEL_14:
    v73(0LL);
    goto LABEL_15;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
  id v57 = objc_allocWithZone(&OBJC_CLASS___NSError);
  NSString v58 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v59 = [v57 initWithDomain:v58 code:0 userInfo:0];

  id v60 = v59;
  v73(v59);

LABEL_15:
  Transaction.capture()();
}

void sub_10031E4E4(uint64_t a1, void (*a2)(uint64_t))
{
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AE08);
  swift_errorRetain(a1);
  uint64_t v5 = swift_errorRetain(a1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138543362;
    swift_errorRetain(a1);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v12 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v8 + 4, v8 + 12);
    uint64_t *v9 = v10;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SubmitLocation failed %{public}@", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  a2(a1);
  Transaction.capture()();
}

void sub_10031E6C4()
{
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AE08);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "republishLastLocation requested", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  id v5 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (v5
    && (uint64_t v6 = v5,
        id v7 = [v5 uniqueDeviceIdentifier],
        v6,
        v7))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

    uint64_t v8 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v8);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.republishLocation", 47LL, 2LL, sub_100339FF0);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v9 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v9,  "Unable to get device identifier for server Republish",  v10,  2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }
  }

uint64_t sub_10031E900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = swift_allocObject(&unk_100951370, 40LL, 7LL);
  *(void *)(v10 + 16) = a2;
  *(_BYTE *)(v10 + 24) = a5;
  *(void *)(v10 + 32) = a1;
  swift_retain();
  swift_retain();
  sub_10025DC10(a3, a4, (uint64_t)sub_10033A024, v10);
  return swift_release();
}

void sub_10031E9A4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  int v34 = a3;
  uint64_t v35 = a2;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = sub_100004AEC(&qword_1009A7118);
  uint64_t v10 = __chkstk_darwin(v33);
  uint64_t v32 = (uint64_t)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v32 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v32 - v15;
  uint64_t v17 = type metadata accessor for SecureLocation(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100338B04(a1, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) == 1)
  {
    sub_100015794((uint64_t)v16, &qword_1009A7118);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2AE08);
    uint64_t v22 = sub_100338B04(a1, (uint64_t)v14);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v27 = v32;
      sub_100338B04((uint64_t)v14, v32);
      uint64_t v28 = String.init<A>(describing:)(v27, v33);
      uint64_t v36 = sub_1003F11D4(v28, v29, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      sub_100015794((uint64_t)v14, &qword_1009A7118);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to get location for republish %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
      sub_100015794((uint64_t)v14, &qword_1009A7118);
    }

    Transaction.capture()();
  }

  else
  {
    uint64_t v30 = sub_10002218C((uint64_t)v16, (uint64_t)v20, type metadata accessor for SecureLocation);
    uint64_t v31 = &v20[*(int *)(v17 + 52)];
    Date.addingTimeInterval(_:)(v30, 1.0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v31, v9, v6);
    swift_retain();
    sub_100335710((uint64_t)v20, v34 & 1, v35, a4);
    swift_release();
    sub_100018C68((uint64_t)v20, type metadata accessor for SecureLocation);
  }

uint64_t sub_10031ED10(uint64_t a1, uint64_t a2)
{
  if (qword_10099B2F0 != -1) {
    swift_once(&qword_10099B2F0, sub_100313A34);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_1009A9150);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v9;
    *(_DWORD *)uint64_t v8 = 136446210;
    uint64_t v14 = sub_1003F11D4(0xD00000000000002FLL, 0x800000010085E250LL, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v10 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  JSONDecoder.init()(v11);
  unint64_t v12 = sub_100339F94();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for SecureLocationsSubmitResponseBody,  a1,  a2,  &type metadata for SecureLocationsSubmitResponseBody,  v12);
  if (v17 != 1) {
    sub_10031ABE8(v16);
  }
  return swift_release();
}

void sub_10031EFC4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v55 = v10;
  uint64_t v56 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v58 = *(void *)(v14 - 8);
  uint64_t v59 = v14;
  __chkstk_darwin(v14);
  id v57 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10000A720(v16, (uint64_t)qword_100A2AE08);
  id v17 = a2;
  swift_bridgeObjectRetain(a1);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter(v19);
  int v54 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v52 = a3;
    uint64_t v22 = v21;
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = v23;
    *(_DWORD *)uint64_t v22 = 134218242;
    id v60 = *(void **)(a1 + 16);
    aBlock[0] = v23;
    uint64_t v53 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, aBlock, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v49 = v22 + 14;
    id v24 = [v17 clientApp];
    id v25 = v17;
    uint64_t v26 = v13;
    id v27 = v24;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v51 = a1;
    uint64_t v29 = v28;
    unint64_t v31 = v30;

    uint64_t v13 = v26;
    id v17 = v25;
    uint64_t v32 = v29;
    uint64_t v5 = v4;
    a1 = v51;
    id v60 = (void *)sub_1003F11D4(v32, v31, aBlock);
    a4 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, aBlock, v49, v22 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v19,  (os_log_type_t)v54,  "Unsubscribe for %ld IDs for clientApp %s",  (uint8_t *)v22,  0x16u);
    uint64_t v33 = v50;
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    uint64_t v34 = v22;
    a3 = v52;
    swift_slowDealloc(v34, -1LL, -1LL);

    if (*(void *)(a1 + 16))
    {
LABEL_5:
      uint64_t v36 = (void *)swift_allocObject(&unk_100951118, 56LL, 7LL);
      v36[2] = a1;
      v36[3] = v5;
      v36[4] = v17;
      v36[5] = a3;
      v36[6] = a4;
      aBlock[4] = (uint64_t)sub_100339C94;
      aBlock[5] = (uint64_t)v36;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1001C31E8;
      aBlock[3] = (uint64_t)&unk_100951130;
      uint64_t v37 = _Block_copy(aBlock);
      id v38 = v17;
      swift_bridgeObjectRetain(a1);
      swift_retain();
      uint64_t v39 = swift_retain();
      uint64_t v40 = v57;
      static DispatchQoS.unspecified.getter(v39);
      id v60 = _swiftEmptyArrayStorage;
      uint64_t v41 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v42 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v43 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v44 = v42;
      uint64_t v45 = v55;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v44, v43, v55, v41);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v40, v13, v37);
      _Block_release(v37);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v13, v45);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v59);
      swift_release();
      return;
    }
  }

  else
  {

    uint64_t v35 = swift_bridgeObjectRelease();
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
  }

  unint64_t v46 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v47 = static os_log_type_t.default.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "No findMyIds specified for Unsubscribe - not proceeding",  v48,  2u);
    swift_slowDealloc(v48, -1LL, -1LL);
  }
}

uint64_t sub_10031F450(void *a1, uint64_t a2, char *a3, void (*a4)(id), uint64_t a5)
{
  uint64_t v164 = a5;
  id v163 = a4;
  id v172 = a3;
  uint64_t v168 = a2;
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v6);
  uint64_t v162 = (char *)&v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SecureLocationsUnsubscribeEndpoint(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v152 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  id v17 = (char *)&v152 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v152 - v18;
  uint64_t v20 = enum case for FMNAccountType.searchParty(_:);
  uint64_t v21 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104LL))(v19, v20, v21);
  sub_10057255C((uint64_t)&v19[*(int *)(v11 + 20)]);
  if (qword_10099B5E0 != -1) {
    goto LABEL_64;
  }
  while (1)
  {
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = (dispatch_queue_s *)sub_10000A720(v22, (uint64_t)qword_100A2AE08);
    uint64_t v24 = sub_10001DC4C((uint64_t)v19, (uint64_t)v17, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
    dispatch_queue_t v171 = v23;
    id v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter(v25);
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v170 = v19;
    uint64_t v169 = a1;
    if (v27)
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v177 = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      sub_10001DC4C((uint64_t)v17, (uint64_t)v14, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
      uint64_t v30 = String.init<A>(describing:)(v14, v11);
      uint64_t aBlock = sub_1003F11D4(v30, v31, (uint64_t *)&v177);
      a1 = v169;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v175, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v17, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unsubscribe endpoint %s", v28, 0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v32 = v29;
      uint64_t v19 = v170;
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v17, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
    }

    uint64_t MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0LL);
    swift_allocObject( MyAppURLSessionFactory,  *(unsigned int *)(MyAppURLSessionFactory + 48),  *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
    uint64_t v34 = type metadata accessor for FMNMockingPreferences(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v10, 1LL, 1LL, v34);
    uint64_t v35 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v10);
    uint64_t v36 = type metadata accessor for ServerInteractionController(0LL);
    uint64_t v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    sub_10001DC4C((uint64_t)v19, (uint64_t)v14, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
    swift_retain();
    id v38 = (void *)sub_1004319B8((uint64_t)v14, v35, v37);
    uint64_t v39 = v38;
    uint64_t v40 = a1[2];
    uint64_t v41 = _swiftEmptyArrayStorage;
    if (v40)
    {
      id v165 = v38;
      uint64_t v166 = v35;
      swift_bridgeObjectRetain(a1);
      uint64_t v42 = a1 + 5;
      uint64_t v167 = v40;
      uint64_t v43 = v40;
      do
      {
        uint64_t v45 = *(v42 - 1);
        unint64_t v46 = *v42;
        swift_bridgeObjectRetain(*v42);
        uint64_t v47 = sub_10025B650(v45, v46);
        uint64_t v49 = v48;
        uint64_t v51 = v50;
        swift_bridgeObjectRelease();
        if (v51)
        {
          id v52 = [v172 subscriptionMode];
          if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0) {
            uint64_t v41 = sub_1004C61EC(0LL, v41[2] + 1LL, 1, v41);
          }
          unint64_t v54 = v41[2];
          unint64_t v53 = v41[3];
          if (v54 >= v53 >> 1) {
            uint64_t v41 = sub_1004C61EC((void *)(v53 > 1), v54 + 1, 1, v41);
          }
          v41[2] = v54 + 1;
          uint64_t v44 = &v41[4 * v54];
          v44[4] = v47;
          v44[5] = v49;
          v44[6] = v51;
          v44[7] = v52;
        }

        v42 += 2;
        --v43;
      }

      while (v43);
      swift_bridgeObjectRelease();
      uint64_t v19 = v170;
      uint64_t v35 = v166;
      uint64_t v39 = v165;
      uint64_t v40 = v167;
    }

    if (!v41[2])
    {
      uint64_t v81 = swift_bridgeObjectRelease();
      uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
      os_log_type_t v83 = static os_log_type_t.error.getter(v82);
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v84 = 0;
        os_log_type_t v85 = "No Unsubscribe request data generated. Not sending request";
        goto LABEL_28;
      }

uint64_t sub_10032083C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v39 = a4;
  uint64_t v37 = a3;
  uint64_t v44 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v47 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v43 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v46 = v9;
  __chkstk_darwin(v9);
  id v38 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = *(void *)(a2 + 296);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 16) & ~v15;
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_100951280, v20 + 16, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v21 + v16, v14, v11);
  uint64_t v22 = v37;
  *(void *)(v21 + v17) = v37;
  uint64_t v24 = v39;
  uint64_t v23 = v40;
  *(void *)(v21 + v18) = v39;
  *(void *)(v21 + v19) = a2;
  id v25 = (void *)(v21 + v20);
  uint64_t v26 = v41;
  *id v25 = v23;
  v25[1] = v26;
  aBlock[4] = sub_100339EC8;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100951298;
  BOOL v27 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v22);
  id v28 = v24;
  swift_retain();
  uint64_t v29 = swift_retain();
  uint64_t v30 = v38;
  static DispatchQoS.unspecified.getter(v29);
  uint64_t v48 = _swiftEmptyArrayStorage;
  uint64_t v31 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v33 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v35 = v43;
  uint64_t v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v32, v33, v44, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v30, v35, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v35, v34);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v46);
  return swift_release();
}

void sub_100320B10(uint64_t a1, void *a2, id a3, void *a4, void (*a5)(void), void **a6)
{
  uint64_t v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter(v14) == 200)
  {
    if (qword_10099B5E0 != -1) {
      goto LABEL_22;
    }
    while (1)
    {
      uint64_t v71 = a6;
      uint64_t v72 = a5;
      uint64_t v17 = type metadata accessor for Logger(0LL);
      uint64_t v18 = sub_10000A720(v17, (uint64_t)qword_100A2AE08);
      swift_bridgeObjectRetain_n(a2, 2LL);
      a3 = a3;
      uint64_t v70 = v18;
      unint64_t v19 = a2;
      unint64_t v20 = (os_log_s *)Logger.logObject.getter(a3);
      os_log_type_t v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc(32LL, -1LL);
        uint64_t v68 = (void **)swift_slowAlloc(64LL, -1LL);
        uint64_t aBlock = v68;
        *(_DWORD *)uint64_t v22 = 134218498;
        uint64_t v76 = v19[2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v22 + 4, v22 + 12);
        *(_WORD *)(v22 + 12) = 2080;
        id v69 = a4;
        id v23 = [a3 clientApp];
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        unint64_t v26 = v25;

        uint64_t v76 = sub_1003F11D4(v24, v26, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v22 + 14, v22 + 22);

        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 22) = 2080;
        swift_bridgeObjectRetain(v19);
        uint64_t v28 = Array.description.getter(v27, &type metadata for String);
        unint64_t v30 = v29;
        swift_bridgeObjectRelease();
        uint64_t v31 = v28;
        a4 = v69;
        uint64_t v76 = sub_1003F11D4(v31, v30, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v22 + 24, v22 + 32);
        swift_bridgeObjectRelease_n(v19, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Unsubscribe received status 200 - Success for %ld IDs for clientApp %s ids %s",  (uint8_t *)v22,  0x20u);
        uint64_t v32 = v68;
        swift_arrayDestroy(v68, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v19, 2LL);
      }

      id v52 = v19;
      a6 = (void **)v19[2];
      if (!a6) {
        break;
      }
      a5 = (void (*)(void))a4[6];
      swift_bridgeObjectRetain(v19);
      id v69 = v19;
      unint64_t v53 = v19 + 5;
      uint64_t v68 = a6;
      while (1)
      {
        uint64_t v54 = *(v53 - 1);
        uint64_t v55 = *v53;
        uint64_t v56 = (dispatch_queue_s *)*((void *)a5 + 2);
        id v57 = (void *)swift_allocObject(&unk_1009512D0, 48LL, 7LL);
        v57[2] = a5;
        v57[3] = v54;
        v57[4] = v55;
        v57[5] = a3;
        a4 = (void *)swift_allocObject(&unk_1009512F8, 32LL, 7LL);
        a4[2] = sub_100339F78;
        a4[3] = v57;
        v74[3] = sub_100154688;
        os_log_type_t v75 = a4;
        uint64_t aBlock = _NSConcreteStackBlock;
        v74[0] = 1107296256LL;
        v74[1] = sub_100025BD4;
        v74[2] = &unk_100951310;
        uint64_t v58 = _Block_copy(&aBlock);
        a2 = v75;
        swift_bridgeObjectRetain_n(v55, 2LL);
        id v59 = a3;
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync(v56, v58);
        _Block_release(v58);
        LOBYTE(v56) = swift_isEscapingClosureAtFileLocation(a4, "", 120LL, 116LL, 35LL, 1LL);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v53 += 2;
        a6 = (void **)((char *)a6 - 1);
        if (!a6)
        {
          id v52 = v69;
          swift_bridgeObjectRelease();
          a6 = v68;
          goto LABEL_15;
        }
      }

      __break(1u);
LABEL_22:
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }

uint64_t sub_100321324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (void *)swift_allocObject(&unk_100951230, 40LL, 7LL);
  v14[2] = a1;
  v14[3] = a3;
  v14[4] = a4;
  aBlock[4] = sub_100339DEC;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100951248;
  uint64_t v15 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  uint64_t v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v19 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

double sub_10032152C@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v23 - v9;
  uint64_t v11 = *(void *)(a1 + 120);
  if (v11)
  {
    *a2 = *(void *)(a1 + 112);
    a2[1] = v11;
  }

  else
  {
    uint64_t v12 = dispatch_group_create();
    dispatch_group_enter(v12);
    static DispatchTime.now()(v13);
    + infix(_:_:)(v8, 10.0);
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    uint64_t v15 = OS_dispatch_group.wait(timeout:)(v10) & 1;
    v14(v10, v4);
    if ((static DispatchTimeoutResult.== infix(_:_:)(v15, 1LL) & 1) != 0)
    {
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v16 = type metadata accessor for Logger(0LL);
      uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2AE08);
      uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.default.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        unint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Timed out waiting for APS token call to return", v20, 2u);
        swift_slowDealloc(v20, -1LL, -1LL);
      }
    }

    uint64_t v21 = *(void *)(a1 + 120);
    *a2 = *(void *)(a1 + 112);
    a2[1] = v21;
    swift_bridgeObjectRetain(v21);
  }

  *(void *)&double result = swift_bridgeObjectRetain(v11).n128_u64[0];
  return result;
}

uint64_t sub_100321704()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  sub_100339200( *(void *)(v0 + 184),  *(void *)(v0 + 192),  *(void *)(v0 + 200),  *(void *)(v0 + 208),  *(void *)(v0 + 216),  *(void *)(v0 + 224),  *(void *)(v0 + 232),  *(void *)(v0 + 240),  *(void *)(v0 + 248),  *(void *)(v0 + 256),  *(void *)(v0 + 264),  *(void *)(v0 + 272),  *(void *)(v0 + 280));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100321818()
{
  return swift_deallocClassInstance(v0, 328LL, 7LL);
}

uint64_t sub_100321838(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100321874 + 4 * byte_1007FBB70[a1]))( 0xD000000000000014LL,  0x800000010084E130LL);
}

uint64_t sub_100321874()
{
  return v0 + 7;
}

uint64_t sub_1003218AC()
{
  return 0x5F454D5F4F545541LL;
}

unint64_t sub_1003218D0()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1003218EC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100321924 + 4 * byte_1007FBB76[a1]))( 0x54646E6553706174LL,  0xE900000000000053LL);
}

uint64_t sub_100321924()
{
  return 0x6449646D63LL;
}

uint64_t sub_100321938()
{
  return 6581603LL;
}

uint64_t sub_100321948()
{
  return 0x6143654D6F747561LL;
}

uint64_t sub_10032196C()
{
  return 0x6449794D646E6966LL;
}

uint64_t sub_100321984()
{
  return 7562345LL;
}

uint64_t sub_100321994()
{
  return 1701080941LL;
}

uint64_t sub_1003219A4()
{
  return 0x6E65644968737570LL;
}

uint64_t sub_1003219C8()
{
  return 0x6544656D6F747561LL;
}

uint64_t sub_1003219E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100321A20 + 4 * byte_1007FBB7F[a1]))( 0x54646E6553706174LL,  0xE900000000000053LL);
}

uint64_t sub_100321A20()
{
  return 0x6449646D63LL;
}

uint64_t sub_100321A34()
{
  return 6581603LL;
}

uint64_t sub_100321A44()
{
  return 0x6143654D6F747561LL;
}

uint64_t sub_100321A68()
{
  return 0x6449794D646E6966LL;
}

uint64_t sub_100321A80()
{
  return 7562345LL;
}

uint64_t sub_100321A90()
{
  return 1701080941LL;
}

uint64_t sub_100321AA0()
{
  return 0x6E65644968737570LL;
}

uint64_t sub_100321AC4()
{
  return 0x6544656D6F747561LL;
}

void sub_100321AE4(char *a1)
{
}

void sub_100321AF0()
{
}

void sub_100321AF8(uint64_t a1)
{
}

void sub_100321B00(uint64_t a1)
{
}

unint64_t sub_100321B08@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10033656C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100321B34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100321838(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100321B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100336E10();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100321BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100336E10();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100321C04(char *a1)
{
}

Swift::Int sub_100321C10()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_100309990((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_100321C54(uint64_t a1)
{
}

Swift::Int sub_100321C5C(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_100309990((uint64_t)v4, v2);
  return Hasher._finalize()();
}

unint64_t sub_100321C9C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1003365B4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100321CC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003218EC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100321CF0()
{
  return sub_1003219E8(*v0);
}

unint64_t sub_100321CF8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1003365B4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100321D1C(uint64_t a1)
{
  unint64_t v2 = sub_100336C44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100321D44(uint64_t a1)
{
  unint64_t v2 = sub_100336C44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100321D6C(void *a1)
{
  os_log_type_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A9568);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100336C44();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys,  &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  v26[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v26, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    v26[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v26, v5);
    v26[0] = *((_BYTE *)v3 + 32);
    char v27 = 2;
    unint64_t v16 = sub_100336D4C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v27, v5, &type metadata for SecureLocationsPushCommands, v16);
    uint64_t v17 = v3[5];
    uint64_t v18 = v3[6];
    v26[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v26, v5);
    sub_100015750((uint64_t)(v3 + 7), (uint64_t)v31, &qword_1009A56D0);
    sub_100015750((uint64_t)v31, (uint64_t)v26, &qword_1009A56D0);
    char v27 = 4;
    uint64_t v19 = sub_100004AEC(&qword_1009AED50);
    uint64_t v20 = sub_1001C89D8( (unint64_t *)&qword_1009B0650,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v19, v20);
    sub_100015750((uint64_t)(v3 + 8), (uint64_t)v30, &qword_1009A56D0);
    sub_100015750((uint64_t)v30, (uint64_t)v26, &qword_1009A56D0);
    char v27 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v19, v20);
    uint64_t v21 = v3[9];
    uint64_t v22 = v3[10];
    v26[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, v26, v5);
    sub_100015750((uint64_t)(v3 + 11), (uint64_t)v29, &qword_1009A9578);
    sub_100015750((uint64_t)v29, (uint64_t)v26, &qword_1009A9578);
    char v27 = 7;
    uint64_t v23 = sub_100004AEC(&qword_1009A9558);
    unint64_t v24 = sub_100336D90();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v23, v24);
    sub_100015750((uint64_t)(v3 + 12), (uint64_t)v28, &qword_1009A56D0);
    sub_100015750((uint64_t)v28, (uint64_t)v26, &qword_1009A56D0);
    char v27 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v19, v20);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 sub_1003220B4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(void *)(a2 + 96) = v8;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }

  return result;
}

uint64_t sub_100322110(void *a1)
{
  return sub_100321D6C(a1);
}

uint64_t sub_100322158(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  return swift_release();
}

void sub_1003221C4(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = dispatch_group_create();
  dispatch_group_enter(v12);
  uint64_t v13 = swift_allocObject(&unk_100950DF8, 33LL, 7LL);
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = v2;
  *(_BYTE *)(v13 + 32) = a2;
  uint64_t v14 = v12;
  swift_retain();
  sub_10025C0EC(a1, 1, (uint64_t)sub_1003395C8, v13);
  uint64_t v15 = swift_release();
  static DispatchTime.now()(v15);
  + infix(_:_:)(v9, 10.0);
  unint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  uint64_t v17 = OS_dispatch_group.wait(timeout:)(v11) & 1;
  v16(v11, v5);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v17, 1LL) & 1) != 0)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_10000A720(v18, (uint64_t)qword_100A2AE08);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "saveLocation - timed out waiting to save locations", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
      uint64_t v23 = (os_log_s *)v14;
      uint64_t v14 = (dispatch_group_s *)v20;
    }

    else
    {
      uint64_t v23 = v20;
    }
  }
}

void sub_1003223D4(uint64_t a1, dispatch_group_s *a2)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v3 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v3);
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.receivedUpdatedLocations",  70LL,  2LL,  sub_10033A46C);
    dispatch_group_leave(a2);
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2AE08);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "saveLocation - No locations were updated. Not posting notification",  v8,  2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    dispatch_group_leave(a2);
  }

uint64_t sub_10032254C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *(void *)(v4 + 288);
  uint64_t v15 = (void *)swift_allocObject(&unk_100950AD8, 56LL, 7LL);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = v4;
  v15[5] = a3;
  v15[6] = a4;
  aBlock[4] = sub_100339034;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100950AF0;
  unint64_t v16 = _Block_copy(aBlock);
  sub_10001736C(a1, a2);
  swift_retain();
  uint64_t v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  unint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v20 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v9, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v23);
  return swift_release();
}

void sub_10032276C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a5;
  uint64_t v33 = a3;
  uint64_t v41 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v37 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v36 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v35 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for String.Encoding(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v15);
  uint64_t v18 = String.init(data:encoding:)(a1, a2, v17);
  id v34 = v10;
  if (v19)
  {
    unint64_t v20 = v19;
    uint64_t v32 = v18;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2AE08);
    swift_bridgeObjectRetain(v20);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.debug.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v31[2] = v8;
      unint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      v31[1] = a4;
      uint64_t v27 = v26;
      *(void *)&aBlock[0] = v26;
      *(_DWORD *)unint64_t v25 = 136315138;
      swift_bridgeObjectRetain(v20);
      *(void *)&v42[0] = sub_1003F11D4(v32, v20, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v42, (char *)v42 + 8, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease_n(v20, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "jsonString %s", v25, 0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v20, 2LL);
    }
  }

  uint64_t v28 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v29 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  JSONDecoder.init()(v29);
  unint64_t v30 = sub_100339040();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload,  a1,  a2,  &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload,  v30);
  aBlock[3] = v44;
  aBlock[4] = v45;
  aBlock[5] = v46;
  aBlock[0] = v42[0];
  uint64_t v49 = v47;
  aBlock[1] = v42[1];
  aBlock[2] = v43;
  __asm { BR              X10 }

void sub_1003235A8(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v86 = a1[2];
  uint64_t v85 = a1[3];
  uint64_t v6 = *((unsigned __int8 *)a1 + 32);
  uint64_t v84 = a1[5];
  uint64_t v83 = a1[6];
  uint64_t v7 = a1[7];
  id v88 = a1 + 7;
  uint64_t v82 = v7;
  uint64_t v8 = (uint64_t)(a1 + 8);
  uint64_t v81 = a1[8];
  uint64_t v80 = a1[9];
  uint64_t v79 = a1[10];
  uint64_t v78 = a1[11];
  uint64_t v77 = a1[12];
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = (void *)v2[36];
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    uint64_t v74 = v5;
    uint64_t v75 = v4;
    if (qword_10099B2F0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B2F0, sub_100313A34);
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10000A720(v15, (uint64_t)qword_1009A9150);
  sub_100339140(a1);
  uint64_t v16 = sub_100339140(a1);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v76 = v6;
  if (v19)
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v87 = v2;
    uint64_t v22 = v21;
    uint64_t v99 = v21;
    *(_DWORD *)unint64_t v20 = 136315138;
    __int128 v23 = *((_OWORD *)a1 + 5);
    __int128 v93 = *((_OWORD *)a1 + 4);
    __int128 v94 = v23;
    uint64_t v95 = a1[12];
    __int128 v24 = *((_OWORD *)a1 + 1);
    __int128 aBlock = *(_OWORD *)a1;
    __int128 v90 = v24;
    __int128 v25 = *((_OWORD *)a1 + 3);
    __int128 v91 = *((_OWORD *)a1 + 2);
    __int128 v92 = v25;
    sub_100339140(a1);
    uint64_t v26 = String.init<A>(describing:)( &aBlock,  &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload);
    *(void *)&__int128 aBlock = sub_1003F11D4(v26, v27, (uint64_t *)&v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    sub_100339090(a1);
    sub_100339090(a1);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received startLocate command %s", v20, 0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v28 = v22;
    uint64_t v2 = v87;
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    sub_100339090(a1);
    sub_100339090(a1);
  }

  sub_100015750(v8, (uint64_t)v97, &qword_1009A56D0);
  sub_100015750((uint64_t)v97, (uint64_t)&v98, &qword_1009A56D0);
  if (v98)
  {
    if (v98[2])
    {
      uint64_t v30 = v98[4];
      uint64_t v29 = v98[5];
      sub_100015750((uint64_t)v88, (uint64_t)v96, &qword_1009A56D0);
      sub_100015750((uint64_t)v96, (uint64_t)&v99, &qword_1009A56D0);
      if (v99)
      {
        if (v99[2])
        {
          uint64_t v73 = v30;
          uint64_t v87 = v2;
          uint64_t v31 = v2 + 23;
          uint64_t v71 = v2[23];
          uint64_t v32 = v99[5];
          uint64_t v72 = v99[4];
          uint64_t v33 = v29;
          uint64_t v34 = v2[24];
          uint64_t v35 = v2[25];
          uint64_t v36 = v2[26];
          uint64_t v37 = v2[27];
          uint64_t v38 = v2[28];
          uint64_t v39 = v31[6];
          uint64_t v70 = v31[7];
          __int128 v69 = *((_OWORD *)v31 + 4);
          __int128 v68 = *((_OWORD *)v31 + 5);
          uint64_t v40 = v31[12];
          uint64_t v41 = v74;
          *uint64_t v31 = v75;
          v31[1] = v41;
          uint64_t v42 = v85;
          v31[2] = v86;
          void v31[3] = v42;
          uint64_t v43 = v84;
          v31[4] = v76;
          v31[5] = v43;
          uint64_t v44 = v82;
          v31[6] = v83;
          v31[7] = v44;
          uint64_t v45 = v80;
          _BYTE v31[8] = v81;
          v31[9] = v45;
          uint64_t v46 = v78;
          v31[10] = v79;
          v31[11] = v46;
          v31[12] = v77;
          sub_100339140(a1);
          id v88 = (uint64_t *)v33;
          swift_bridgeObjectRetain(v33);
          uint64_t v86 = v32;
          swift_bridgeObjectRetain(v32);
          sub_100339200( v71,  v34,  v35,  v36,  v37,  v38,  v39,  v70,  v69,  *((uint64_t *)&v69 + 1),  v68,  *((uint64_t *)&v68 + 1),  v40);
          uint64_t v47 = a1[10];
          if (v47)
          {
            uint64_t v48 = a1[9];
            unint64_t v49 = a1[10];
          }

          else
          {
            unint64_t v49 = 0xE900000000000065LL;
            uint64_t v48 = 0x76697463616F7270LL;
          }

          uint64_t v59 = type metadata accessor for Transaction(0LL);
          __chkstk_darwin(v59);
          uint64_t v60 = (uint64_t)v88;
          uint64_t v61 = v73;
          *((void *)&v68 - 8) = v87;
          *((void *)&v68 - 7) = v61;
          uint64_t v62 = v60;
          uint64_t v63 = v72;
          uint64_t v64 = v86;
          NSString v65 = a1;
          uint64_t v66 = v48;
          unint64_t v67 = v49;
          swift_bridgeObjectRetain(v47);
          static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocationsVerifyAndStartLocate",  65LL,  2LL,  sub_10033928C);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
  }

  if (qword_10099B850 != -1) {
    swift_once(&qword_10099B850, sub_1006BAC84);
  }
  uint64_t v50 = qword_100A2B210;
  uint64_t v51 = *(dispatch_queue_s **)(qword_100A2B210 + 16);
  id v52 = (void *)swift_allocObject(&unk_100950BC8, 40LL, 7LL);
  v52[2] = v50;
  v52[3] = 0xD00000000000001BLL;
  v52[4] = 0x800000010085DFC0LL;
  uint64_t v53 = swift_allocObject(&unk_100950BF0, 32LL, 7LL);
  *(void *)(v53 + 16) = sub_1003391E4;
  *(void *)(v53 + 24) = v52;
  *(void *)&__int128 v91 = sub_100154688;
  *((void *)&v91 + 1) = v53;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  *(void *)&__int128 v90 = sub_100025BD4;
  *((void *)&v90 + 1) = &unk_100950C08;
  uint64_t v54 = _Block_copy(&aBlock);
  swift_retain_n(v50, 2LL);
  swift_retain();
  swift_release();
  dispatch_sync(v51, v54);
  _Block_release(v54);
  LOBYTE(v54) = swift_isEscapingClosureAtFileLocation(v53, "", 110LL, 308LL, 38LL, 1LL);
  swift_release();
  swift_release();
  swift_release();
  if ((v54 & 1) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }

  sub_100324A44((__int128 *)a1);
  if (qword_10099B5E0 != -1) {
LABEL_24:
  }
    swift_once(&qword_10099B5E0, sub_1005C6624);
  uint64_t v55 = sub_10000A720(v15, (uint64_t)qword_100A2AE08);
  uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
  os_log_type_t v57 = static os_log_type_t.default.getter(v56);
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v58 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "startLocate - no locationId or findMyId specified in push. Cannot start locate",  v58,  2u);
    swift_slowDealloc(v58, -1LL, -1LL);
  }
}

void sub_100323D68(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void **)(v1 + 288);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (qword_10099B5E0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B5E0, sub_1005C6624);
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A2AE08);
  sub_100339140((void *)a1);
  uint64_t v10 = sub_100339140((void *)a1);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v13 = 136315138;
    __int128 v15 = *(_OWORD *)(a1 + 80);
    v24[4] = *(_OWORD *)(a1 + 64);
    v24[5] = v15;
    uint64_t v25 = *(void *)(a1 + 96);
    uint64_t v26 = v14;
    __int128 v16 = *(_OWORD *)(a1 + 16);
    v24[0] = *(_OWORD *)a1;
    v24[1] = v16;
    __int128 v17 = *(_OWORD *)(a1 + 48);
    v24[2] = *(_OWORD *)(a1 + 32);
    v24[3] = v17;
    sub_100339140((void *)a1);
    uint64_t v18 = String.init<A>(describing:)(v24, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload);
    *(void *)&v24[0] = sub_1003F11D4(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, (char *)v24 + 8, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    sub_100339090((void *)a1);
    sub_100339090((void *)a1);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Received stopLocate %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    sub_100339090((void *)a1);
    sub_100339090((void *)a1);
  }

  sub_100015750(a1 + 56, (uint64_t)&v26, &qword_1009A56D0);
  uint64_t v20 = sub_100015750((uint64_t)&v26, (uint64_t)v24, &qword_1009A56D0);
  if (*(void *)&v24[0] && *(void *)(*(void *)&v24[0] + 16LL))
  {
    swift_bridgeObjectRetain(*(void *)(a1 + 80));
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      __int128 v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No findMyId specified for StopLocate", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }
  }

uint64_t sub_10032408C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint8_t **)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v8 = *(void **)(v2 + 288);
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    if (qword_10099B5E0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B5E0, sub_1005C6624);
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2AE08);
  os_log_type_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received distributeKeys command", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  sub_100015750(a1 + 56, (uint64_t)&v41, &qword_1009A56D0);
  uint64_t result = sub_100015750((uint64_t)&v41, (uint64_t)&v42, &qword_1009A56D0);
  uint64_t v16 = (uint64_t)v42;
  if (v42 && v42[2])
  {
    uint64_t v17 = v42[4];
    uint64_t v18 = v42[5];
    uint64_t v19 = *(void *)(a1 + 88);
    if (v19) {
      uint64_t v20 = *(void **)(a1 + 88);
    }
    else {
      uint64_t v20 = _swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRetain_n(v20, 2LL);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    os_log_type_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      __int128 v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v36;
      uint64_t v37 = v18;
      *(_DWORD *)__int128 v24 = 136315138;
      uint64_t v35 = v24 + 4;
      swift_bridgeObjectRetain(v20);
      uint64_t v25 = sub_100004AEC(&qword_1009AED50);
      uint64_t v26 = Dictionary.description.getter(v20, &type metadata for String, v25, &protocol witness table for String);
      uint64_t v38 = v17;
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      uint64_t v39 = sub_1003F11D4(v26, v28, &v40);
      uint64_t v18 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v35, v24 + 12);
      swift_bridgeObjectRelease_n(v20, 2LL);
      uint64_t v17 = v38;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "shareKey pushIdentifiers %s", v24, 0xCu);
      uint64_t v29 = v36;
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v20, 2LL);
    }

    uint64_t v30 = swift_allocObject(&unk_100950D58, 152LL, 7LL);
    __int128 v31 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v30 + 88) = *(_OWORD *)(a1 + 48);
    __int128 v32 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v30 + 104) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v30 + 120) = v32;
    __int128 v33 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v30 + 40) = *(_OWORD *)a1;
    *(_OWORD *)(v30 + 56) = v33;
    *(void *)(v30 + 16) = v2;
    *(void *)(v30 + 24) = v17;
    *(void *)(v30 + 32) = v18;
    uint64_t v34 = *(void *)(a1 + 96);
    *(_OWORD *)(v30 + 72) = v31;
    *(void *)(v30 + 136) = v34;
    *(void *)(v30 + 144) = v16;
    sub_1001B1998(&v41);
    swift_retain();
    sub_100339140((void *)a1);
    sub_10058AC6C(v16, (uint64_t)v20, 0, (uint64_t)sub_1003394E0, v30);
    swift_bridgeObjectRelease();
    return swift_release();
  }

  return result;
}

uint64_t sub_10032446C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void **)(v1 + 288);
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_10099B5E0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B5E0, sub_1005C6624);
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A2AE08);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Handling FetchLabelledLocations command", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  sub_10026104C();
  sub_10032F184(0);
  type metadata accessor for Transaction(0LL);
  return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty.secureLocationHandleLabelFetch",  59LL,  2LL,  sub_1003394F4);
}

void sub_10032461C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)(v0 + 288);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_10099B5E8 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B5E8, sub_1005C66A4);
LABEL_3:
  id v7 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  swift_retain();
  id v8 = [v7 standardUserDefaults];
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v10 = String._bridgeToObjectiveC()();
  [v8 setValue:isa forKey:v10];
  swift_release();

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2AE08);
  os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    __int128 v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)__int128 v15 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Received autoMeIsActive command. Set autoMeActive to true",  v15,  2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }
}

void sub_100324830()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)(v0 + 288);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_10099B5E8 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B5E8, sub_1005C66A4);
LABEL_3:
  id v7 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  swift_retain();
  id v8 = [v7 standardUserDefaults];
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v10 = String._bridgeToObjectiveC()();
  [v8 setValue:isa forKey:v10];
  swift_release();

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2AE08);
  os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    __int128 v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)__int128 v15 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Received autoMeIsInactive command. Set autoMeActive to false",  v15,  2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }
}

uint64_t sub_100324A44(__int128 *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v39 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_10000A720(v10, (uint64_t)qword_100A2AE08);
  sub_100339140(a1);
  uint64_t v11 = sub_100339140(a1);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v35 = v2;
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = v8;
    uint64_t v16 = v15;
    v47[0] = v15;
    *(_DWORD *)os_log_type_t v14 = 136315138;
    uint64_t v37 = v7;
    __int128 v17 = a1[5];
    __int128 v44 = a1[4];
    __int128 v45 = v17;
    uint64_t v46 = *((void *)a1 + 12);
    __int128 v18 = a1[1];
    __int128 aBlock = *a1;
    __int128 v41 = v18;
    __int128 v19 = a1[3];
    __int128 v42 = a1[2];
    __int128 v43 = v19;
    sub_100339140(a1);
    uint64_t v20 = String.init<A>(describing:)( &aBlock,  &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload);
    *(void *)&__int128 aBlock = sub_1003F11D4(v20, v21, v47);
    id v7 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v14 + 4, v14 + 12);
    uint64_t v2 = v35;
    swift_bridgeObjectRelease();
    sub_100339090(a1);
    sub_100339090(a1);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "PushAck: Sending ACK for %s", v14, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v22 = v16;
    uint64_t v8 = v36;
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    sub_100339090(a1);
    sub_100339090(a1);
  }

  uint64_t v23 = swift_allocObject(&unk_100950D08, 128LL, 7LL);
  __int128 v24 = a1[2];
  *(_OWORD *)(v23 + 72) = a1[3];
  __int128 v25 = a1[5];
  *(_OWORD *)(v23 + 88) = a1[4];
  *(_OWORD *)(v23 + 104) = v25;
  __int128 v26 = a1[1];
  *(_OWORD *)(v23 + 24) = *a1;
  *(_OWORD *)(v23 + 40) = v26;
  *(void *)(v23 + 16) = v2;
  *(void *)(v23 + 120) = *((void *)a1 + 12);
  *(_OWORD *)(v23 + 56) = v24;
  *(void *)&__int128 v42 = sub_100339444;
  *((void *)&v42 + 1) = v23;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  *(void *)&__int128 v41 = sub_1001C31E8;
  *((void *)&v41 + 1) = &unk_100950D20;
  unint64_t v27 = _Block_copy(&aBlock);
  sub_100339140(a1);
  uint64_t v28 = swift_retain();
  uint64_t v29 = v38;
  static DispatchQoS.unspecified.getter(v28);
  v47[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v47, v31, v32, v4, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v29, v7, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v8);
  return swift_release();
}

uint64_t sub_100324E30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = swift_allocObject(&unk_100950C40, 168LL, 7LL);
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  __int128 v17 = *(_OWORD *)(a7 + 80);
  *(_OWORD *)(v16 + 96) = *(_OWORD *)(a7 + 64);
  *(_OWORD *)(v16 + 112) = v17;
  uint64_t v18 = *(void *)(a7 + 96);
  __int128 v19 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(v16 + 32) = *(_OWORD *)a7;
  *(_OWORD *)(v16 + 48) = v19;
  __int128 v20 = *(_OWORD *)(a7 + 48);
  *(_OWORD *)(v16 + 64) = *(_OWORD *)(a7 + 32);
  *(_OWORD *)(v16 + 80) = v20;
  *(void *)(v16 + 128) = v18;
  *(void *)(v16 + 136) = a5;
  *(void *)(v16 + 144) = a6;
  *(void *)(v16 + 152) = a8;
  *(void *)(v16 + 160) = a9;
  unint64_t v21 = (void *)swift_allocObject(&unk_100950C68, 72LL, 7LL);
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v21[5] = a6;
  v21[6] = v15;
  v21[7] = sub_100339338;
  v21[8] = v16;
  swift_bridgeObjectRetain_n(a6, 2LL);
  swift_retain();
  swift_retain();
  sub_100339140((void *)a7);
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(a4);
  swift_retain();
  swift_retain();
  sub_100585AC0();
  swift_release();
  return swift_release();
}

void sub_100324F74( uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  if (!a1)
  {
    sub_100336178(a5, a6, a7, a8, 0);
LABEL_11:
    sub_100324A44(a4);
    Transaction.capture()();
    return;
  }

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_10000A720(v10, (uint64_t)qword_100A2AE08);
  swift_errorRetain(a1);
  uint64_t v11 = swift_errorRetain(a1);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = a1;
    aBlock[0] = v15;
    *(_DWORD *)os_log_type_t v14 = 136315138;
    swift_errorRetain(a1);
    uint64_t v16 = sub_100004AEC(&qword_10099C678);
    uint64_t v17 = String.init<A>(describing:)(&v24, v16);
    uint64_t v24 = sub_1003F11D4(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, aBlock, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "startLocate - unable to verify locationId. Cannot start monitor %s",  v14,  0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  if (qword_10099B850 != -1) {
    swift_once(&qword_10099B850, sub_1006BAC84);
  }
  uint64_t v19 = qword_100A2B210;
  __int128 v20 = *(dispatch_queue_s **)(qword_100A2B210 + 16);
  unint64_t v21 = (void *)swift_allocObject(&unk_100950C90, 40LL, 7LL);
  v21[2] = v19;
  v21[3] = 0xD00000000000001ELL;
  v21[4] = 0x800000010085E030LL;
  uint64_t v22 = swift_allocObject(&unk_100950CB8, 32LL, 7LL);
  *(void *)(v22 + 16) = sub_10033A57C;
  *(void *)(v22 + 24) = v21;
  aBlock[4] = (uint64_t)sub_100154688;
  aBlock[5] = v22;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100025BD4;
  aBlock[3] = (uint64_t)&unk_100950CD0;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain_n(v19, 2LL);
  swift_retain();
  swift_release();
  dispatch_sync(v20, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation(v22, "", 110LL, 308LL, 38LL, 1LL);
  swift_release();
  swift_release();
  swift_release();
  __break(1u);
}

uint64_t sub_1003252CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  id v7 = (__int128 *)a5;
  if (!a1)
  {
    uint64_t v11 = *(void *)(a5 + 80);
    if (v11)
    {
      uint64_t v12 = *(void *)(a5 + 72);
      unint64_t v13 = *(void *)(a5 + 80);
    }

    else
    {
      unint64_t v13 = 0xE900000000000065LL;
      uint64_t v12 = 0x76697463616F7270LL;
    }

    swift_bridgeObjectRetain(v11);
    sub_100336178(a3, a4, v12, v13, 0);
    swift_bridgeObjectRelease();
    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    sub_1006BE600();
  }

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain(a6);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a6);
  uint64_t v15 = swift_errorRetain(a1);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v18 = 141558531;
    uint64_t v29 = 1752392040LL;
    uint64_t v30 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2081;
    swift_bridgeObjectRetain(a6);
    uint64_t v28 = v7;
    uint64_t v21 = Array.description.getter(v20, &type metadata for String);
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v29 = sub_1003F11D4(v21, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease_n(a6, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 22) = 2080;
    uint64_t v29 = a1;
    swift_errorRetain(a1);
    uint64_t v24 = sub_100004AEC(&qword_10099C678);
    uint64_t v25 = String.init<A>(describing:)(&v29, v24);
    uint64_t v29 = sub_1003F11D4(v25, v26, &v30);
    id v7 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v18 + 24, v18 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "completed shareKey to %{private,mask.hash}s Error %s",  (uint8_t *)v18,  0x20u);
    swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a6, 2LL);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return sub_100324A44(v7);
}

uint64_t sub_1003255F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject(&unk_100950D80, 32LL, 7LL);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  swift_retain();
  sub_1003258B0((uint64_t)sub_100339510, v4);
  return swift_release();
}

void sub_100325664(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_10000A720(v3, (uint64_t)qword_100A2AE08);
    swift_errorRetain(a2);
    uint64_t v4 = swift_errorRetain(a2);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      uint64_t v13 = a2;
      v14[0] = v8;
      *(_DWORD *)id v7 = 136315138;
      swift_errorRetain(a2);
      uint64_t v9 = sub_100004AEC(&qword_10099C678);
      uint64_t v10 = String.init<A>(describing:)(&v13, v9);
      uint64_t v13 = sub_1003F11D4(v10, v11, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "LabelledLocations: Error fetching labels after receiving a fetch labels push %s",  v7,  0xCu);
      swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
  }

  else
  {
    sub_10025EA78();
    uint64_t v12 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v12);
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocationsResolveLabels",  58LL,  2LL,  sub_100339584);
    swift_bridgeObjectRelease();
  }

  Transaction.capture()();
}

uint64_t sub_1003258B0(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = a1;
  uint64_t v77 = a2;
  uint64_t v2 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v2);
  uint64_t v74 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v4);
  os_log_type_t v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SecureLocationsLabelledLocationsEndpoint(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v69 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v69 - v14;
  uint64_t v16 = enum case for FMNAccountType.fmfApp(_:);
  uint64_t v17 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104LL))(v15, v16, v17);
  sub_10068FAE8((uint64_t)&v15[*(int *)(v7 + 20)]);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v19 = sub_10000A720(v18, (uint64_t)qword_100A2AE08);
  uint64_t v20 = sub_10001DC4C((uint64_t)v15, (uint64_t)v13, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v78 = v15;
  if (v23)
  {
    uint64_t v73 = v6;
    uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v80 = v25;
    *(_DWORD *)uint64_t v24 = 136315138;
    sub_10001DC4C((uint64_t)v13, (uint64_t)v10, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
    uint64_t v26 = String.init<A>(describing:)(v10, v7);
    uint64_t v79 = sub_1003F11D4(v26, v27, &v80);
    os_log_type_t v6 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v13, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "FetchLabelledLocations: Endpoint %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v28 = v24;
    uint64_t v15 = v78;
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v13, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
  }

  uint64_t MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0LL);
  swift_allocObject( MyAppURLSessionFactory,  *(unsigned int *)(MyAppURLSessionFactory + 48),  *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
  uint64_t v30 = type metadata accessor for FMNMockingPreferences(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v6, 1LL, 1LL, v30);
  uint64_t v31 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v6);
  uint64_t v32 = type metadata accessor for ServerInteractionController(0LL);
  uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  sub_10001DC4C((uint64_t)v15, (uint64_t)v10, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
  swift_retain();
  uint64_t v34 = (void *)sub_100431980((uint64_t)v10, v31, v33);
  id v35 = sub_1006908DC();
  if (v35)
  {
    uint64_t v38 = (uint64_t)v35;
    uint64_t v39 = v36;
    unint64_t v40 = v37;
    sub_100339CB4((uint64_t)v35, v36, v37);
    swift_bridgeObjectRetain(v38);
    uint64_t v41 = sub_10001736C(v39, v40);
    uint64_t v71 = v19;
    __int128 v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.debug.getter(v42);
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v72 = v34;
    uint64_t v73 = (char *)v31;
    if (v44)
    {
      __int128 v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      uint64_t v80 = v46;
      *(_DWORD *)__int128 v45 = 136315138;
      uint64_t v70 = v45 + 4;
      swift_bridgeObjectRetain(v38);
      uint64_t v48 = Dictionary.description.getter( v47,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      uint64_t v79 = sub_1003F11D4(v48, v50, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v70, v45 + 12);
      swift_bridgeObjectRelease();
      sub_100117A58(v38, v39, v40);
      sub_100117A58(v38, v39, v40);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "FetchLabelledLocations request headers %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {
      sub_100117A58(v38, v39, v40);
      sub_100117A58(v38, v39, v40);
    }

    swift_bridgeObjectRetain(v38);
    sub_10001736C(v39, v40);
    swift_bridgeObjectRetain(v38);
    uint64_t v54 = sub_10001736C(v39, v40);
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.debug.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      os_log_type_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      uint64_t v80 = v58;
      *(_DWORD *)os_log_type_t v57 = 136315138;
      uint64_t v59 = v74;
      static String.Encoding.utf8.getter(v58);
      uint64_t v60 = String.init(data:encoding:)(v39, v40, v59);
      if (v61)
      {
        unint64_t v62 = v61;
      }

      else
      {
        uint64_t v60 = 7104878LL;
        unint64_t v62 = 0xE300000000000000LL;
      }

      uint64_t v79 = sub_1003F11D4(v60, v62, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease();
      sub_100117A58(v38, v39, v40);
      sub_100117A58(v38, v39, v40);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "FetchLabelledLocations request body %s", v57, 0xCu);
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    else
    {
      sub_100117A58(v38, v39, v40);
      sub_100117A58(v38, v39, v40);
    }

    uint64_t v63 = v77;
    uint64_t v15 = v78;
    uint64_t v65 = v75;
    uint64_t v64 = v76;
    swift_bridgeObjectRetain(v38);
    sub_10001736C(v39, v40);
    sub_10043257C(v38, v39, v40, 0LL, v72);
    sub_100117A58(v38, v39, v40);
    uint64_t v66 = (void *)swift_allocObject(&unk_100950DA8, 40LL, 7LL);
    v66[2] = v65;
    v66[3] = v64;
    v66[4] = v63;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_10033952C, v66);
    swift_release();
    swift_release();
    uint64_t v67 = swift_allocObject(&unk_100950DD0, 32LL, 7LL);
    *(void *)(v67 + 16) = v64;
    *(void *)(v67 + 24) = v63;
    swift_retain();
    Future.addFailure(block:)(sub_100339538, v67);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100117A58(v38, v39, v40);
  }

  else
  {
    uint64_t v51 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v52 = static os_log_type_t.default.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "#FetchLabelledLocations - failed to create request", v53, 2u);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    swift_release();
  }

  swift_release();
  return sub_100018C68((uint64_t)v15, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
}

uint64_t sub_100326110(uint64_t a1, uint64_t *a2)
{
  uint64_t v113 = a2;
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  uint64_t v107 = (char *)v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = type metadata accessor for Date(0LL);
  uint64_t v112 = *(void *)(v110 - 8);
  uint64_t v5 = __chkstk_darwin(v110);
  uint64_t v109 = (uint64_t)v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v108 = (uint64_t)v104 - v7;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SecureLocationsPushAckEndpoint(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v104 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v104 - v18;
  uint64_t v20 = enum case for FMNAccountType.searchParty(_:);
  uint64_t v21 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104LL))(v19, v20, v21);
  sub_1005A9FB0((uint64_t)&v19[*(int *)(v11 + 20)]);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_10000A720(v22, (uint64_t)qword_100A2AE08);
  uint64_t v24 = sub_10001DC4C((uint64_t)v19, (uint64_t)v17, type metadata accessor for SecureLocationsPushAckEndpoint);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v106 = a1;
    uint64_t v27 = swift_slowAlloc(12LL, -1LL);
    BOOL v105 = v10;
    uint64_t v28 = (uint8_t *)v27;
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    os_log_type_t v111 = v19;
    uint64_t v30 = v29;
    uint64_t v116 = v29;
    *(_DWORD *)uint64_t v28 = 136315138;
    sub_10001DC4C((uint64_t)v17, (uint64_t)v14, type metadata accessor for SecureLocationsPushAckEndpoint);
    uint64_t v31 = String.init<A>(describing:)(v14, v11);
    uint64_t v114 = sub_1003F11D4(v31, v32, &v116);
    a1 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v17, type metadata accessor for SecureLocationsPushAckEndpoint);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "PushAck endpoint %s", v28, 0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v33 = v30;
    uint64_t v19 = v111;
    swift_slowDealloc(v33, -1LL, -1LL);
    uint64_t v34 = v28;
    uint64_t v10 = v105;
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v17, type metadata accessor for SecureLocationsPushAckEndpoint);
  }

  uint64_t MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0LL);
  swift_allocObject( MyAppURLSessionFactory,  *(unsigned int *)(MyAppURLSessionFactory + 48),  *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
  uint64_t v36 = type metadata accessor for FMNMockingPreferences(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v10, 1LL, 1LL, v36);
  uint64_t v37 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v10);
  uint64_t v38 = type metadata accessor for ServerInteractionController(0LL);
  uint64_t v39 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  sub_10001DC4C((uint64_t)v19, (uint64_t)v14, type metadata accessor for SecureLocationsPushAckEndpoint);
  swift_retain();
  uint64_t v40 = sub_1004319D4((uint64_t)v14, v37, v39);
  id v41 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (v41
    && (__int128 v42 = v41,
        id v43 = [v41 uniqueDeviceIdentifier],
        v42,
        v43))
  {
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    uint64_t v46 = v45;

    uint64_t v47 = sub_100004AEC(&qword_1009A34B0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100338BF0, a1, v47);
    if (v117)
    {
      v104[6] = 0LL;
      v104[3] = v117;
      v104[2] = v116;
      uint64_t v48 = sub_100004AEC(&qword_1009AED50);
      unsafeFromAsyncTask<A>(_:)(&unk_1009A95B8, 0LL, v48);
      uint64_t v49 = v116;
      swift_bridgeObjectRetain(v116);
      unint64_t v50 = v113;
      sub_100339140(v113);
      sub_100339140(v50);
      swift_bridgeObjectRetain(v49);
      os_log_type_t v52 = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v53 = static os_log_type_t.default.getter(v52);
      BOOL v54 = os_log_type_enabled(v52, v53);
      uint64_t v106 = v49;
      BOOL v105 = (char *)v37;
      v104[1] = v40;
      v104[5] = v46;
      v104[4] = v44;
      if (v54)
      {
        uint64_t v55 = swift_slowAlloc(42LL, -1LL);
        uint64_t v56 = swift_slowAlloc(64LL, -1LL);
        uint64_t v116 = v56;
        *(_DWORD *)uint64_t v55 = 141558787;
        uint64_t v114 = 1752392040LL;
        v104[0] = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v55 + 4, v55 + 12);
        *(_WORD *)(v55 + 12) = 2081;
        uint64_t v57 = v113[12];
        if (v57) {
          uint64_t v58 = (void *)v113[12];
        }
        else {
          uint64_t v58 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRetain(v57);
        uint64_t v59 = Array.description.getter(v58, &type metadata for String);
        unint64_t v61 = v60;
        swift_bridgeObjectRelease();
        uint64_t v114 = sub_1003F11D4(v59, v61, &v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v55 + 14, v55 + 22);
        swift_bridgeObjectRelease();
        sub_100339090(v113);
        sub_100339090(v113);
        *(_WORD *)(v55 + 22) = 2160;
        uint64_t v114 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v55 + 24, v55 + 32);
        *(_WORD *)(v55 + 32) = 2081;
        swift_bridgeObjectRetain(v106);
        uint64_t v62 = Array.description.getter(v106, &type metadata for String);
        unint64_t v64 = v63;
        swift_bridgeObjectRelease();
        uint64_t v114 = sub_1003F11D4(v62, v64, &v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v55 + 34, v55 + 42);
        swift_bridgeObjectRelease_n(v106, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "Watch Monitoring: Watches to check connection got through Server are %{private,mask.hash}s. Watches connected now sending to pushAck are %{private,mask.hash}s",  (uint8_t *)v55,  0x2Au);
        swift_arrayDestroy(v56, 2LL, (char *)&type metadata for Any + 8);
        uint64_t v65 = v56;
        unint64_t v50 = v113;
        swift_slowDealloc(v65, -1LL, -1LL);
        swift_slowDealloc(v55, -1LL, -1LL);
      }

      else
      {
        sub_100339090(v50);
        sub_100339090(v50);

        uint64_t v66 = swift_bridgeObjectRelease_n(v49, 2LL);
      }

      uint64_t v73 = v110;
      if (qword_10099B850 != -1) {
        uint64_t v66 = swift_once(&qword_10099B850, sub_1006BAC84);
      }
      uint64_t v74 = qword_100A2B210;
      __chkstk_darwin(v66);
      v104[-2] = v74;
      LOBYTE(v104[-1]) = 1;
      swift_retain();
      uint64_t v75 = sub_100004AEC(&qword_1009A95C0);
      OS_dispatch_queue.sync<A>(execute:)(sub_100339450, &v104[-4], v75);
      swift_release();
      uint64_t v76 = *v50;
      unint64_t v77 = v50[1];
      uint64_t v78 = HIBYTE(v77) & 0xF;
      uint64_t v79 = v76 & 0xFFFFFFFFFFFFLL;
      if ((v77 & 0x2000000000000000LL) != 0) {
        uint64_t v80 = HIBYTE(v77) & 0xF;
      }
      else {
        uint64_t v80 = v76 & 0xFFFFFFFFFFFFLL;
      }
      if (!v80) {
        goto LABEL_57;
      }
      if ((v77 & 0x1000000000000000LL) != 0)
      {
        swift_bridgeObjectRetain(v77);
        sub_1001B93AC(v76, v77, 10LL);
        char v103 = v102;
        swift_bridgeObjectRelease();
        if ((v103 & 1) == 0) {
          goto LABEL_58;
        }
      }

      else
      {
        if ((v77 & 0x2000000000000000LL) != 0)
        {
          uint64_t v116 = v76;
          uint64_t v117 = v77 & 0xFFFFFFFFFFFFFFLL;
          if (v76 == 43)
          {
            if (v78)
            {
              if (v78 != 1 && (BYTE1(v76) - 48) <= 9u)
              {
                uint64_t v88 = (BYTE1(v76) - 48);
                uint64_t v89 = v78 - 2;
                if (v78 == 2) {
                  goto LABEL_58;
                }
                __int128 v90 = (unsigned __int8 *)&v116 + 2;
                while (1)
                {
                  unsigned int v91 = *v90 - 48;
                  if (v91 > 9) {
                    break;
                  }
                  uint64_t v92 = 10 * v88;
                  uint64_t v88 = v92 + v91;
                  ++v90;
                  if (!--v89) {
                    goto LABEL_58;
                  }
                }
              }

              goto LABEL_57;
            }
          }

          else
          {
            if (v76 != 45)
            {
              if (v78 && (v76 - 48) <= 9u)
              {
                uint64_t v97 = (v76 - 48);
                uint64_t v98 = v78 - 1;
                if (v78 == 1) {
                  goto LABEL_58;
                }
                uint64_t v99 = (unsigned __int8 *)&v116 + 1;
                while (1)
                {
                  unsigned int v100 = *v99 - 48;
                  if (v100 > 9) {
                    break;
                  }
                  uint64_t v101 = 10 * v97;
                  uint64_t v97 = v101 + v100;
                  ++v99;
                  if (!--v98) {
                    goto LABEL_58;
                  }
                }
              }

              goto LABEL_57;
            }

            if (v78)
            {
              if (v78 != 1 && (BYTE1(v76) - 48) <= 9u)
              {
                uint64_t v83 = -(uint64_t)(BYTE1(v76) - 48);
                uint64_t v84 = v78 - 2;
                if (v78 == 2) {
                  goto LABEL_58;
                }
                uint64_t v85 = (unsigned __int8 *)&v116 + 2;
                while (1)
                {
                  unsigned int v86 = *v85 - 48;
                  if (v86 > 9) {
                    break;
                  }
                  uint64_t v87 = 10 * v83;
                  uint64_t v83 = v87 - v86;
                  ++v85;
                  if (!--v84) {
                    goto LABEL_58;
                  }
                }
              }

              goto LABEL_57;
            }

            __break(1u);
          }

          __break(1u);
          JUMPOUT(0x100327364LL);
        }

        if ((v76 & 0x1000000000000000LL) != 0) {
          uint64_t v81 = (unsigned __int8 *)((v77 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t v81 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v76, v77);
        }
        sub_1001B91C8(v81, v79, 10LL);
        if ((v82 & 1) == 0)
        {
LABEL_58:
          uint64_t v95 = v109;
          uint64_t v96 = static Date.trustedNow.getter(v109);
          Date.epoch.getter(v96);
          (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v95, v73);
          __asm { BR              X12 }
        }
      }

uint64_t sub_10032737C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(sub_100327394, 0LL, 0LL);
}

uint64_t sub_100327394()
{
  uint64_t v1 = type metadata accessor for PairedAutoMeCapableWatches();
  uint64_t v2 = swift_allocObject(v1, 112LL, 15LL);
  *(void *)(v0 + 24) = v2;
  swift_defaultActor_initialize(v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009BAA64);
  *(void *)(v0 + 32) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1003273F8;
  return sub_10068AEF8();
}

uint64_t sub_1003273F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 4Hasher.init(_seed:)(v2, 0LL) = a1;
  swift_task_dealloc(v2);
  swift_release();
  return swift_task_switch(sub_10032745C, 0LL, 0LL);
}

uint64_t sub_10032745C()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100327470(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2AE08);
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v10 = 134217984;
    uint64_t v11 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v10);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v13 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "PushAck received status %ld", v10, 0xCu);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void sub_100327610(uint64_t a1)
{
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AE08);
  swift_errorRetain(a1);
  uint64_t v3 = swift_errorRetain(a1);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v4 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v11 = a1;
    uint64_t v12 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_errorRetain(a1);
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v8 = String.init<A>(describing:)(&v11, v7);
    uint64_t v11 = sub_1003F11D4(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "PushAck request failed %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

uint64_t sub_1003277EC(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v44 = a2;
  uint64_t v45 = a4;
  id v43 = a3;
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AE08);
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v42[0] = v13;
    uint64_t v18 = v17;
    v42[1] = a1;
    *(_DWORD *)uint64_t v17 = 134217984;
    uint64_t v19 = v17 + 12;
    uint64_t v20 = v17 + 4;
    uint64_t v21 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v17);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v46 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v20, v19);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "FetchLabelledLocations - response code %ld", v18, 0xCu);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  uint64_t v23 = FMNServerInteractionController.FMNResponseFields.data.getter(v22);
  unint64_t v25 = v24;
  static String.Encoding.utf8.getter(v23);
  uint64_t v26 = String.init(data:encoding:)(v23, v25, v7);
  uint64_t v28 = v27;
  sub_100016F9C(v23, v25);
  swift_bridgeObjectRetain(v28);
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    unint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v28;
    uint64_t v48 = v33;
    *(_DWORD *)unint64_t v32 = 136315138;
    uint64_t v46 = v26;
    swift_bridgeObjectRetain(v28);
    uint64_t v34 = sub_100004AEC(&qword_1009A34B0);
    uint64_t v35 = String.init<A>(describing:)(&v46, v34);
    uint64_t v46 = sub_1003F11D4(v35, v36, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease_n(v28, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "FetchLabelledLocations %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {

    uint64_t v37 = swift_bridgeObjectRelease_n(v28, 2LL);
  }

  uint64_t v38 = FMNServerInteractionController.FMNResponseFields.data.getter(v37);
  unint64_t v40 = v39;
  sub_100327B78(v38, v39, v43);
  return sub_100016F9C(v38, v40);
}

uint64_t sub_100327B78(uint64_t a1, uint64_t a2, void (*a3)(void, void))
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  JSONDecoder.init()(v9);
  unint64_t v10 = sub_100339540();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for SecureLocationLoadLabelledLocationsResponse,  a1,  a2,  &type metadata for SecureLocationLoadLabelledLocationsResponse,  v10);
  uint64_t v11 = v33;
  if (v33)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_10000A720(v12, (uint64_t)qword_100A2AE08);
    uint64_t v13 = swift_bridgeObjectRetain_n(v33, 3LL);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc(22LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = v30;
      *(_DWORD *)uint64_t v16 = 134218242;
      uint64_t v31 = *(void *)(v11 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain(v11);
      uint64_t v18 = a3;
      uint64_t v19 = Array.description.getter(v17, &type metadata for SecureLocationLabel);
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      uint64_t v22 = v19;
      a3 = v18;
      uint64_t v31 = sub_1003F11D4(v22, v21, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease_n(v11, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "FetchLabelledLocations - fetched labels %ld %s",  (uint8_t *)v16,  0x16u);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v33, 3LL);
    }

    uint64_t v28 = *(void *)(v4 + 16);
    swift_bridgeObjectRetain(v11);
    swift_retain();
    sub_1002637B0(v11, v28, v4, v11);
    swift_release();
    swift_bridgeObjectRelease();
    a3(v11, 0LL);
    swift_bridgeObjectRelease();
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2AE08);
    unint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "FetchLabelledLocations Error decoding labels", v27, 2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    a3(_swiftEmptyArrayStorage, 0LL);
  }

  return swift_release();
}

uint64_t sub_1003280DC(uint64_t a1, uint64_t (*a2)(void *, uint64_t))
{
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AE08);
  swift_errorRetain(a1);
  uint64_t v5 = swift_errorRetain(a1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = a1;
    uint64_t v15 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_errorRetain(a1);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v11 = String.init<A>(describing:)(&v14, v10);
    uint64_t v14 = sub_1003F11D4(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "FetchLabelledLocations - error fetching labels %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return a2(_swiftEmptyArrayStorage, a1);
}

void sub_1003282BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1003282C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_release();
}

uint64_t sub_100328330(uint64_t a1, int a2, uint64_t (*a3)(uint64_t, void), uint64_t a4)
{
  uint64_t v113 = a4;
  uint64_t v114 = a3;
  int v135 = a2;
  uint64_t v115 = a1;
  uint64_t v5 = type metadata accessor for SecureLocation(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v117 = (uint64_t *)((char *)&v111 - v9);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v137 = (unint64_t *)((char *)v111.n128_u64 - v11);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v133 = (char *)&v111 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v119 = (char *)&v111 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v21 = (double *)((char *)v111.n128_f64 - v20);
  uint64_t v124 = v4;
  if (*(void *)(*(void *)(v4 + 104) + 16LL))
  {
    uint64_t v143 = v19;
    uint64_t v118 = v18;
    uint64_t v116 = v17;
    if (qword_10099B5E8 != -1) {
      swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    uint64_t v22 = qword_100A2AE20;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v22, &type metadata for SecureLocationsConfig);
    swift_release();
    __int128 v161 = v150[10];
    __int128 v162 = v150[11];
    __int128 v163 = v150[12];
    __int128 v157 = v150[6];
    __int128 v158 = v150[7];
    __int128 v159 = v150[8];
    __int128 v160 = v150[9];
    __int128 v153 = v150[2];
    __int128 v154 = v150[3];
    __int128 v155 = v150[4];
    __int128 v156 = v150[5];
    __int128 v151 = v150[0];
    __int128 v152 = v150[1];
    sub_100246384(&v151);
    uint64_t v123 = *(void *)(v115 + 16);
    if (v123)
    {
      double v23 = *(double *)&v152;
      unint64_t v122 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v121 = v115 + v122;
      uint64_t v24 = *(void *)(v6 + 72);
      uint64_t v112 = &v147;
      __n128 v25 = swift_bridgeObjectRetain(v115);
      uint64_t v26 = 0LL;
      uint64_t v27 = _swiftEmptyArrayStorage;
      v25.n128_u64[0] = 136315906LL;
      __n128 v130 = v25;
      uint64_t v129 = (char *)&type metadata for Any + 8;
      v25.n128_u64[0] = 136315650LL;
      __n128 v128 = v25;
      v25.n128_u64[0] = 136315394LL;
      __n128 v111 = v25;
      uint64_t v28 = v118;
      uint64_t v29 = (uint64_t)v119;
      uint64_t v139 = v21;
      uint64_t v120 = v24;
      while (1)
      {
        uint64_t v127 = v26;
        sub_10001DC4C(v121 + v24 * v26, (uint64_t)v21, type metadata accessor for SecureLocation);
        sub_10001DC4C((uint64_t)v21, v29, type metadata accessor for SecureLocation);
        uint64_t v30 = *(void *)(v124 + 104);
        if (!*(void *)(v30 + 16)) {
          goto LABEL_50;
        }
        uint64_t v141 = *(void *)(v30 + 16);
        NSString v125 = v27;
        swift_bridgeObjectRetain(v30);
        uint64_t v126 = v31;
        uint64_t v32 = (unint64_t *)(v31 + 56);
        while (1)
        {
          uint64_t v34 = *(v32 - 2);
          uint64_t v33 = *(v32 - 1);
          unint64_t v35 = *v32;
          double v36 = *((double *)v32 + 3);
          double v37 = *((double *)v32 + 4);
          unint64_t v38 = v32[5];
          unint64_t v39 = v32[7];
          uint64_t v142 = v32[6];
          unint64_t v40 = v32[2];
          uint64_t v41 = qword_10099B5E0;
          swift_bridgeObjectRetain(v34);
          swift_bridgeObjectRetain(v35);
          swift_bridgeObjectRetain(v40);
          swift_bridgeObjectRetain(v39);
          if (v41 != -1) {
            swift_once(&qword_10099B5E0, sub_1005C6624);
          }
          uint64_t v42 = type metadata accessor for Logger(0LL);
          uint64_t v43 = sub_10000A720(v42, (uint64_t)qword_100A2AE08);
          uint64_t v44 = (uint64_t)v21;
          uint64_t v45 = v143;
          sub_10001DC4C(v44, (uint64_t)v143, type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n(v34, 4LL);
          swift_bridgeObjectRetain_n(v35, 4LL);
          swift_bridgeObjectRetain_n(v40, 4LL);
          uint64_t v46 = swift_bridgeObjectRetain_n(v39, 4LL);
          uint64_t v140 = v43;
          uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
          os_log_type_t v48 = static os_log_type_t.info.getter(v47);
          LODWORD(v144) = v48;
          BOOL v49 = os_log_type_enabled(v47, v48);
          uint64_t v145 = v34;
          uint64_t v136 = v33;
          if (v49)
          {
            uint64_t v50 = swift_slowAlloc(42LL, -1LL);
            uint64_t v138 = swift_slowAlloc(96LL, -1LL);
            uint64_t v146 = v138;
            *(_DWORD *)uint64_t v50 = v130.n128_u32[0];
            swift_bridgeObjectRetain(v35);
            *(void *)(v50 + 4) = sub_1003F11D4(v33, v35, &v146);
            swift_bridgeObjectRelease();
            *(_WORD *)(v50 + 12) = 2080;
            if (v39) {
              uint64_t v51 = v142;
            }
            else {
              uint64_t v51 = 1818848800LL;
            }
            if (v39) {
              unint64_t v52 = v39;
            }
            else {
              unint64_t v52 = 0xE400000000000000LL;
            }
            swift_bridgeObjectRetain(v39);
            *(void *)(v50 + 14) = sub_1003F11D4(v51, v52, &v146);
            swift_bridgeObjectRelease_n(v39, 2LL);
            swift_bridgeObjectRelease_n(v40, 2LL);
            swift_bridgeObjectRelease_n(v35, 2LL);
            swift_bridgeObjectRelease_n(v34, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v50 + 22) = 2080;
            uint64_t v53 = *v143;
            unint64_t v54 = v143[1];
            swift_bridgeObjectRetain(v54);
            *(void *)(v50 + 24) = sub_1003F11D4(v53, v54, &v146);
            swift_bridgeObjectRelease();
            sub_100018C68((uint64_t)v143, type metadata accessor for SecureLocation);
            *(_WORD *)(v50 + 32) = 2048;
            *(void *)(v50 + 34) = v38;
            swift_bridgeObjectRelease_n(v39, 2LL);
            uint64_t v55 = v40;
            swift_bridgeObjectRelease_n(v40, 2LL);
            swift_bridgeObjectRelease_n(v35, 2LL);
            swift_bridgeObjectRelease_n(v34, 2LL);
            _os_log_impl( (void *)&_mh_execute_header,  v47,  (os_log_type_t)v144,  "LabelledLocations Checking label %s %s %s %f",  (uint8_t *)v50,  0x2Au);
            uint64_t v56 = v138;
            swift_arrayDestroy(v138, 3LL, v129);
            uint64_t v57 = v56;
            uint64_t v58 = (uint64_t)v133;
            swift_slowDealloc(v57, -1LL, -1LL);
            uint64_t v59 = v50;
            unint64_t v21 = v139;
            swift_slowDealloc(v59, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v39, 2LL);
            swift_bridgeObjectRelease_n(v40, 2LL);
            swift_bridgeObjectRelease_n(v35, 2LL);
            swift_bridgeObjectRelease_n(v34, 2LL);
            sub_100018C68((uint64_t)v45, type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n(v39, 2LL);
            uint64_t v55 = v40;
            swift_bridgeObjectRelease_n(v40, 2LL);
            swift_bridgeObjectRelease_n(v35, 2LL);
            swift_bridgeObjectRelease_n(v34, 2LL);
            uint64_t v58 = (uint64_t)v133;
            unint64_t v21 = v139;
          }

          sub_10001DC4C((uint64_t)v21, v58, type metadata accessor for SecureLocation);
          unint64_t v144 = v39;
          if (!v39 && (v135 & 1) != 0)
          {
            uint64_t v138 = v55;
            sub_100018C68(v58, type metadata accessor for SecureLocation);
            goto LABEL_25;
          }

          sub_10001DC4C(v58, (uint64_t)v137, type metadata accessor for SecureLocation);
          if ((v135 & 1) == 0) {
            break;
          }
          sub_100018C68((uint64_t)v137, type metadata accessor for SecureLocation);
          sub_100018C68(v58, type metadata accessor for SecureLocation);
LABEL_9:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 += 11;
          if (!--v141)
          {
            swift_bridgeObjectRelease();
            uint64_t v28 = v118;
            uint64_t v29 = (uint64_t)v119;
            goto LABEL_49;
          }
        }

        uint64_t v138 = v55;
        unint64_t v80 = v35;
        uint64_t v81 = v137[1];
        unint64_t v82 = v144;
        if (!v144)
        {
          swift_bridgeObjectRetain(v137[1]);
          sub_100018C68((uint64_t)v137, type metadata accessor for SecureLocation);
          sub_100018C68(v58, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v145 = v81;
          goto LABEL_10;
        }

        if (v142 == *v137 && v144 == v81)
        {
          swift_bridgeObjectRetain(v144);
          sub_100018C68((uint64_t)v137, type metadata accessor for SecureLocation);
          sub_100018C68(v58, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          unint64_t v35 = v80;
        }

        else
        {
          char v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v142, v144, *v137, v137[1], 0LL);
          swift_bridgeObjectRetain(v82);
          sub_100018C68((uint64_t)v137, type metadata accessor for SecureLocation);
          sub_100018C68(v58, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          unint64_t v35 = v80;
          if ((v83 & 1) == 0) {
            goto LABEL_9;
          }
        }

uint64_t sub_100329138(uint64_t a1, uint64_t a2, void (*a3)(id), uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v7 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_100A2AE08);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v27[0] = a1;
    uint64_t v16 = v15;
    v27[1] = a2;
    uint64_t v17 = a4;
    *(_DWORD *)uint64_t v15 = 134217984;
    uint64_t v18 = v15 + 12;
    uint64_t v19 = v15 + 4;
    uint64_t v20 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v15);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v29 = v20;
    unint64_t v21 = v18;
    a4 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v19, v21);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "FetchConfig - response code %ld", v16, 0xCu);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  uint64_t v23 = FMNServerInteractionController.FMNResponseFields.data.getter(v22);
  unint64_t v25 = v24;
  sub_100329324(v23, v24, v28, a4);
  return sub_100016F9C(v23, v25);
}

void sub_100329324(uint64_t a1, uint64_t a2, void (*a3)(id), uint64_t a4)
{
  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&__int128 v282 = 0LL;
  id v240 = v7;
  id v9 = [v7 JSONObjectWithData:isa options:0 error:&v282];

  uint64_t v10 = v282;
  if (v9)
  {
    id v11 = (id)v282;
    _bridgeAnyObjectToAny(_:)(&v282, v9);
    swift_unknownObjectRelease(v9);
    uint64_t v235 = sub_100004AEC(&qword_1009A0CE8);
    if (swift_dynamicCast(&v248, &v282, (char *)&type metadata for Any + 8, v235, 6LL))
    {
      uint64_t v234 = a4;
      uint64_t v12 = v248;
      uint64_t v214 = *(void *)(v4 + 16);
      sub_10026158C((uint64_t)&v248);
      uint64_t v230 = v248;
      int v231 = v249;
      v247[0] = *(_DWORD *)v250;
      *(_DWORD *)((char *)v247 + 3) = *(_DWORD *)&v250[3];
      uint64_t v14 = v251;
      uint64_t v13 = v252;
      uint64_t v232 = v253;
      uint64_t v16 = v254;
      uint64_t v15 = v255;
      int v233 = v256;
      v246[0] = *(_DWORD *)v257;
      *(_DWORD *)((char *)v246 + 3) = *(_DWORD *)&v257[3];
      uint64_t v17 = v259;
      int v236 = v260;
      *(_DWORD *)&v245[3] = *(_DWORD *)&v261[3];
      *(_DWORD *)uint64_t v245 = *(_DWORD *)v261;
      uint64_t v18 = v262;
      uint64_t v237 = v263;
      unint64_t v238 = v258;
      uint64_t v20 = v264;
      uint64_t v19 = v265;
      int v218 = v267;
      int v219 = v266;
      int v216 = v269;
      int v217 = v268;
      int v215 = v270;
      uint64_t v221 = v273;
      uint64_t v222 = v272;
      int v220 = v274;
      *(_DWORD *)&v244[3] = *(_DWORD *)&v275[3];
      *(_DWORD *)v244 = *(_DWORD *)v275;
      uint64_t v225 = v278;
      uint64_t v226 = v276;
      id v228 = v279;
      uint64_t v229 = v277;
      uint64_t v223 = v271;
      uint64_t v224 = v280;
      uint64_t v227 = v281;
      uint64_t v21 = *(void *)(v12 + 16);
      unint64_t v239 = a3;
      if (v21
        && (uint64_t v22 = sub_10030CF14(0x6556747065636361LL, 0xED00006E6F697372LL), (v23 & 1) != 0)
        && (sub_10006A650(*(void *)(v12 + 56) + 32 * v22, (uint64_t)&v282),
            (swift_dynamicCast(&v242, &v282, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0))
      {
        char v24 = 0;
        uint64_t v230 = v242;
        if (!*(void *)(v12 + 16)) {
          goto LABEL_26;
        }
      }

      else
      {
        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v46 = type metadata accessor for Logger(0LL);
        uint64_t v47 = sub_10000A720(v46, (uint64_t)qword_100A2AE08);
        os_log_type_t v48 = (os_log_s *)Logger.logObject.getter(v47);
        os_log_type_t v49 = static os_log_type_t.error.getter(v48);
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v50 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "FetchConfig Unable to parse acceptVersion from config response",  v50,  2u);
          swift_slowDealloc(v50, -1LL, -1LL);
        }

        char v24 = 1;
        if (!*(void *)(v12 + 16)) {
          goto LABEL_26;
        }
      }

      uint64_t v51 = sub_10030CF14(0x4565727574616566LL, 0xEE0064656C62616ELL);
      if ((v52 & 1) != 0)
      {
        sub_10006A650(*(void *)(v12 + 56) + 32 * v51, (uint64_t)&v282);
        if ((swift_dynamicCast(&v242, &v282, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) != 0)
        {
          int v231 = v242;
          if (!*(void *)(v12 + 16)) {
            goto LABEL_51;
          }
LABEL_31:
          uint64_t v58 = sub_10030CF14(0xD00000000000001ELL, 0x800000010084DF30LL);
          if ((v59 & 1) == 0) {
            goto LABEL_51;
          }
          sub_10006A650(*(void *)(v12 + 56) + 32 * v58, (uint64_t)&v282);
          uint64_t v60 = swift_dynamicCast(&v242, &v282, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
          if ((v60 & 1) == 0) {
            goto LABEL_51;
          }
          uint64_t v61 = v243;
          uint64_t v242 = 0LL;
          __chkstk_darwin(v60);
          v213 = &v242;
          if ((v61 & 0x1000000000000000LL) != 0 || !(v61 & 0x2000000000000000LL | v62 & 0x1000000000000000LL))
          {
            _StringGuts._slowWithCString<A>(_:)(&v241, sub_1003389C4, v212);
          }

          else
          {
            if ((v61 & 0x2000000000000000LL) != 0)
            {
              *(void *)&__int128 v282 = v62;
              *((void *)&v282 + 1) = v61 & 0xFFFFFFFFFFFFFFLL;
              BOOL v65 = (v62 >= 0x21u || ((0x100003E01uLL >> v62) & 1) == 0)
                 && (uint64_t v64 = (_BYTE *)_swift_stdlib_strtod_clocale(&v282, &v242)) != 0LL
                 && *v64 == 0;
              char v241 = v65;
              swift_bridgeObjectRelease();
LABEL_49:
              if ((v241 & 1) != 0)
              {
                uint64_t v14 = v242;
                goto LABEL_56;
              }

LABEL_108:
                      if (qword_10099B5E0 != -1) {
                        swift_once(&qword_10099B5E0, sub_1005C6624);
                      }
                      uint64_t v99 = type metadata accessor for Logger(0LL);
                      uint64_t v100 = sub_10000A720(v99, (uint64_t)qword_100A2AE08);
                      unint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
                      os_log_type_t v102 = static os_log_type_t.error.getter(v101);
                      if (os_log_type_enabled(v101, v102))
                      {
                        uint64_t v103 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                        *(_WORD *)uint64_t v103 = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v101,  v102,  "FetchConfig unable to parse locationAgingThreshold from server config response",  v103,  2u);
                        swift_slowDealloc(v103, -1LL, -1LL);
                      }

                      char v24 = 1;
LABEL_113:
                      if (!*(void *)(v12 + 16)) {
                        goto LABEL_132;
                      }
                      uint64_t v104 = sub_10030CF14(0xD000000000000019LL, 0x800000010084DFB0LL);
                      if ((v105 & 1) == 0) {
                        goto LABEL_132;
                      }
                      sub_10006A650(*(void *)(v12 + 56) + 32 * v104, (uint64_t)&v282);
                      uint64_t v106 = swift_dynamicCast( &v242,  &v282,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL);
                      if ((v106 & 1) == 0) {
                        goto LABEL_132;
                      }
                      uint64_t v107 = v243;
                      uint64_t v242 = 0LL;
                      __chkstk_darwin(v106);
                      v213 = &v242;
                      if ((v107 & 0x1000000000000000LL) != 0
                        || !(v107 & 0x2000000000000000LL | v108 & 0x1000000000000000LL))
                      {
                        _StringGuts._slowWithCString<A>(_:)(&v241, sub_1003389C4, v212);
                      }

                      else
                      {
                        if ((v107 & 0x2000000000000000LL) != 0)
                        {
                          *(void *)&__int128 v282 = v108;
                          *((void *)&v282 + 1) = v107 & 0xFFFFFFFFFFFFFFLL;
                          BOOL v111 = (v108 >= 0x21u || ((0x100003E01uLL >> v108) & 1) == 0)
                              && (uint64_t v110 = (_BYTE *)_swift_stdlib_strtod_clocale(&v282, &v242)) != 0LL
                              && *v110 == 0;
                          char v241 = v111;
                          swift_bridgeObjectRelease();
LABEL_130:
                          if ((v241 & 1) != 0)
                          {
                            uint64_t v15 = v242;
                            goto LABEL_137;
                          }

LABEL_132:
                          if (qword_10099B5E0 != -1) {
                            swift_once(&qword_10099B5E0, sub_1005C6624);
                          }
                          uint64_t v112 = type metadata accessor for Logger(0LL);
                          uint64_t v113 = sub_10000A720(v112, (uint64_t)qword_100A2AE08);
                          uint64_t v114 = (os_log_s *)Logger.logObject.getter(v113);
                          os_log_type_t v115 = static os_log_type_t.error.getter(v114);
                          if (os_log_type_enabled(v114, v115))
                          {
                            uint64_t v116 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                            *(_WORD *)uint64_t v116 = 0;
                            _os_log_impl( (void *)&_mh_execute_header,  v114,  v115,  "FetchConfig unable to parse subscriptionThrottleInSec from server config response ",  v116,  2u);
                            swift_slowDealloc(v116, -1LL, -1LL);
                          }

LABEL_137:
                          if (*(void *)(v12 + 16)
                            && (uint64_t v117 = sub_10030CF14(0xD00000000000001ELL, 0x800000010084DFD0LL), (v118 & 1) != 0)
                            && (sub_10006A650(*(void *)(v12 + 56) + 32 * v117, (uint64_t)&v282),
                                (swift_dynamicCast( &v242,  &v282,  (char *)&type metadata for Any + 8,  &type metadata for Bool,  6LL) & 1) != 0))
                          {
                            int v233 = v242;
                          }

                          else
                          {
                            if (qword_10099B5E0 != -1) {
                              swift_once(&qword_10099B5E0, sub_1005C6624);
                            }
                            uint64_t v119 = type metadata accessor for Logger(0LL);
                            uint64_t v120 = sub_10000A720(v119, (uint64_t)qword_100A2AE08);
                            uint64_t v121 = (os_log_s *)Logger.logObject.getter(v120);
                            os_log_type_t v122 = static os_log_type_t.error.getter(v121);
                            if (os_log_type_enabled(v121, v122))
                            {
                              uint64_t v123 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                              *(_WORD *)uint64_t v123 = 0;
                              _os_log_impl( (void *)&_mh_execute_header,  v121,  v122,  "FetchConfig unable to parse overridePendingKeyRequestCheck from server config response",  v123,  2u);
                              swift_slowDealloc(v123, -1LL, -1LL);
                            }

                            char v24 = 1;
                          }

                          sub_10067483C(0xD00000000000001DLL, 0x800000010084DFF0LL, v12, &v282);
                          if (v284)
                          {
                            uint64_t v124 = sub_100004AEC(&qword_1009AED50);
                            if ((swift_dynamicCast(&v242, &v282, (char *)&type metadata for Any + 8, v124, 6LL) & 1) != 0)
                            {
                              uint64_t v125 = sub_1006F0FB0(v242);
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              unint64_t v238 = (void *)v125;
                              goto LABEL_155;
                            }
                          }

                          else
                          {
                            sub_100015794((uint64_t)&v282, &qword_10099E200);
                          }

                          if (qword_10099B5E0 != -1) {
                            swift_once(&qword_10099B5E0, sub_1005C6624);
                          }
                          uint64_t v126 = type metadata accessor for Logger(0LL);
                          uint64_t v127 = sub_10000A720(v126, (uint64_t)qword_100A2AE08);
                          __n128 v128 = (os_log_s *)Logger.logObject.getter(v127);
                          os_log_type_t v129 = static os_log_type_t.error.getter(v128);
                          if (os_log_type_enabled(v128, v129))
                          {
                            __n128 v130 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                            *(_WORD *)__n128 v130 = 0;
                            _os_log_impl( (void *)&_mh_execute_header,  v128,  v129,  "FetchConfig unable to parse ownerProactiveSupportedModels from server config response",  v130,  2u);
                            swift_slowDealloc(v130, -1LL, -1LL);
                          }

                          char v24 = 1;
LABEL_155:
                          sub_10067483C(0xD000000000000017LL, 0x800000010084E010LL, v12, &v282);
                          if (!v284)
                          {
                            sub_100015794((uint64_t)&v282, &qword_10099E200);
                            goto LABEL_174;
                          }

                          uint64_t v131 = swift_dynamicCast( &v242,  &v282,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL);
                          if ((v131 & 1) == 0) {
                            goto LABEL_174;
                          }
                          uint64_t v132 = v243;
                          uint64_t v242 = 0LL;
                          __chkstk_darwin(v131);
                          v213 = &v242;
                          if ((v132 & 0x1000000000000000LL) != 0
                            || !(v132 & 0x2000000000000000LL | v133 & 0x1000000000000000LL))
                          {
                            _StringGuts._slowWithCString<A>(_:)(&v241, sub_1003389C4, v212);
                          }

                          else
                          {
                            if ((v132 & 0x2000000000000000LL) != 0)
                            {
                              *(void *)&__int128 v282 = v133;
                              *((void *)&v282 + 1) = v132 & 0xFFFFFFFFFFFFFFLL;
                              BOOL v136 = (v133 >= 0x21u || ((0x100003E01uLL >> v133) & 1) == 0)
                                  && (int v135 = (_BYTE *)_swift_stdlib_strtod_clocale(&v282, &v242)) != 0LL
                                  && *v135 == 0;
                              char v241 = v136;
                              swift_bridgeObjectRelease();
LABEL_172:
                              if ((v241 & 1) != 0)
                              {
                                uint64_t v17 = v242;
                                goto LABEL_179;
                              }

LABEL_174:
                              if (qword_10099B5E0 != -1) {
                                swift_once(&qword_10099B5E0, sub_1005C6624);
                              }
                              uint64_t v137 = type metadata accessor for Logger(0LL);
                              uint64_t v138 = sub_10000A720(v137, (uint64_t)qword_100A2AE08);
                              uint64_t v139 = (os_log_s *)Logger.logObject.getter(v138);
                              os_log_type_t v140 = static os_log_type_t.error.getter(v139);
                              if (os_log_type_enabled(v139, v140))
                              {
                                uint64_t v141 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                                *(_WORD *)uint64_t v141 = 0;
                                _os_log_impl( (void *)&_mh_execute_header,  v139,  v140,  "FetchConfig unable to parse keyDistributionThrottle from server config response",  v141,  2u);
                                swift_slowDealloc(v141, -1LL, -1LL);
                              }

                              char v24 = 1;
LABEL_179:
                              sub_10067483C(0xD00000000000001DLL, 0x800000010084E030LL, v12, &v282);
                              if (v284)
                              {
                                if ((swift_dynamicCast( &v242,  &v282,  (char *)&type metadata for Any + 8,  &type metadata for Bool,  6LL) & 1) != 0)
                                {
                                  int v236 = v242;
                                  goto LABEL_188;
                                }
                              }

                              else
                              {
                                sub_100015794((uint64_t)&v282, &qword_10099E200);
                              }

                              if (qword_10099B5E0 != -1) {
                                swift_once(&qword_10099B5E0, sub_1005C6624);
                              }
                              uint64_t v142 = type metadata accessor for Logger(0LL);
                              uint64_t v143 = sub_10000A720(v142, (uint64_t)qword_100A2AE08);
                              unint64_t v144 = (os_log_s *)Logger.logObject.getter(v143);
                              os_log_type_t v145 = static os_log_type_t.error.getter(v144);
                              if (os_log_type_enabled(v144, v145))
                              {
                                uint64_t v146 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                                *(_WORD *)uint64_t v146 = 0;
                                _os_log_impl( (void *)&_mh_execute_header,  v144,  v145,  "FetchConfig unable to parse offlineLocationsUploadEnabled from server config response",  v146,  2u);
                                swift_slowDealloc(v146, -1LL, -1LL);
                              }

                              char v24 = 1;
LABEL_188:
                              sub_10067483C(0xD000000000000020LL, 0x800000010084E050LL, v12, &v282);
                              if (v284)
                              {
                                if ((swift_dynamicCast( &v242,  &v282,  (char *)&type metadata for Any + 8,  &type metadata for Double,  6LL) & 1) != 0)
                                {
                                  uint64_t v18 = v242;
                                  goto LABEL_197;
                                }
                              }

                              else
                              {
                                sub_100015794((uint64_t)&v282, &qword_10099E200);
                              }

                              if (qword_10099B5E0 != -1) {
                                swift_once(&qword_10099B5E0, sub_1005C6624);
                              }
                              uint64_t v147 = type metadata accessor for Logger(0LL);
                              uint64_t v148 = sub_10000A720(v147, (uint64_t)qword_100A2AE08);
                              uint64_t v149 = (os_log_s *)Logger.logObject.getter(v148);
                              os_log_type_t v150 = static os_log_type_t.error.getter(v149);
                              if (os_log_type_enabled(v149, v150))
                              {
                                __int128 v151 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                                *(_WORD *)__int128 v151 = 0;
                                _os_log_impl( (void *)&_mh_execute_header,  v149,  v150,  "FetchConfig unable to parse offlineProactiveAlertIntervalSec from server config response",  v151,  2u);
                                swift_slowDealloc(v151, -1LL, -1LL);
                              }

                              char v24 = 1;
LABEL_197:
                              sub_10067483C(0xD000000000000025LL, 0x800000010084E080LL, v12, &v282);
                              if (v284)
                              {
                                if ((swift_dynamicCast( &v242,  &v282,  (char *)&type metadata for Any + 8,  &type metadata for Int,  6LL) & 1) != 0)
                                {
                                  uint64_t v237 = v242;
                                  goto LABEL_206;
                                }
                              }

                              else
                              {
                                sub_100015794((uint64_t)&v282, &qword_10099E200);
                              }

                              if (qword_10099B5E0 != -1) {
                                swift_once(&qword_10099B5E0, sub_1005C6624);
                              }
                              uint64_t v152 = type metadata accessor for Logger(0LL);
                              uint64_t v153 = sub_10000A720(v152, (uint64_t)qword_100A2AE08);
                              __int128 v154 = (os_log_s *)Logger.logObject.getter(v153);
                              os_log_type_t v155 = static os_log_type_t.error.getter(v154);
                              if (os_log_type_enabled(v154, v155))
                              {
                                __int128 v156 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                                *(_WORD *)__int128 v156 = 0;
                                _os_log_impl( (void *)&_mh_execute_header,  v154,  v155,  "FetchConfig unable to parse offlineProactiveAlertNoOfTimesDisplay from server config response",  v156,  2u);
                                swift_slowDealloc(v156, -1LL, -1LL);
                              }

                              char v24 = 1;
LABEL_206:
                              sub_10067483C(0xD00000000000001FLL, 0x800000010084E0B0LL, v12, &v282);
                              if (v284)
                              {
                                if ((swift_dynamicCast( &v242,  &v282,  (char *)&type metadata for Any + 8,  &type metadata for Double,  6LL) & 1) != 0)
                                {
                                  uint64_t v20 = v242;
                                  goto LABEL_215;
                                }
                              }

                              else
                              {
                                sub_100015794((uint64_t)&v282, &qword_10099E200);
                              }

                              if (qword_10099B5E0 != -1) {
                                swift_once(&qword_10099B5E0, sub_1005C6624);
                              }
                              uint64_t v157 = type metadata accessor for Logger(0LL);
                              uint64_t v158 = sub_10000A720(v157, (uint64_t)qword_100A2AE08);
                              __int128 v159 = (os_log_s *)Logger.logObject.getter(v158);
                              os_log_type_t v160 = static os_log_type_t.error.getter(v159);
                              if (os_log_type_enabled(v159, v160))
                              {
                                __int128 v161 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                                *(_WORD *)__int128 v161 = 0;
                                _os_log_impl( (void *)&_mh_execute_header,  v159,  v160,  "FetchConfig unable to parse offlineLocationsPublishThrottle from server config response",  v161,  2u);
                                swift_slowDealloc(v161, -1LL, -1LL);
                              }

                              char v24 = 1;
LABEL_215:
                              sub_10067483C(0xD00000000000002ELL, 0x800000010084E0D0LL, v12, &v282);
                              if (v284)
                              {
                                if ((swift_dynamicCast( &v242,  &v282,  (char *)&type metadata for Any + 8,  &type metadata for Double,  6LL) & 1) != 0)
                                {
                                  uint64_t v19 = v242;
                                  goto LABEL_224;
                                }
                              }

                              else
                              {
                                sub_100015794((uint64_t)&v282, &qword_10099E200);
                              }

                              if (qword_10099B5E0 != -1) {
                                swift_once(&qword_10099B5E0, sub_1005C6624);
                              }
                              uint64_t v162 = type metadata accessor for Logger(0LL);
                              uint64_t v163 = sub_10000A720(v162, (uint64_t)qword_100A2AE08);
                              uint64_t v164 = (os_log_s *)Logger.logObject.getter(v163);
                              os_log_type_t v165 = static os_log_type_t.error.getter(v164);
                              if (os_log_type_enabled(v164, v165))
                              {
                                uint64_t v166 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                                *(_WORD *)uint64_t v166 = 0;
                                _os_log_impl( (void *)&_mh_execute_header,  v164,  v165,  "FetchConfig unable to parse offlineProactiveAlertDistanceThresholdInMeters from server config response",  v166,  2u);
                                swift_slowDealloc(v166, -1LL, -1LL);
                              }

                              char v24 = 1;
LABEL_224:
                              uint64_t My = type metadata accessor for Feature.FindMy(0LL);
                              uint64_t v284 = My;
                              uint64_t v285 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
                              uint64_t v168 = sub_10000A7C8(&v282);
                              (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v168,  enum case for Feature.FindMy.networkScalingImprovements(_:),  My);
                              LOBYTE(My) = isFeatureEnabled(_:)(&v282);
                              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v282);
                              if ((My & 1) == 0)
                              {
                                swift_bridgeObjectRelease();
                                if ((v24 & 1) == 0)
                                {
LABEL_252:
                                  if (qword_10099B5E0 != -1) {
                                    swift_once(&qword_10099B5E0, sub_1005C6624);
                                  }
                                  uint64_t v207 = type metadata accessor for Logger(0LL);
                                  uint64_t v208 = sub_10000A720(v207, (uint64_t)qword_100A2AE08);
                                  id v209 = (os_log_s *)Logger.logObject.getter(v208);
                                  os_log_type_t v210 = static os_log_type_t.default.getter(v209);
                                  if (os_log_type_enabled(v209, v210))
                                  {
                                    v211 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                                    *(_WORD *)v211 = 0;
                                    _os_log_impl( (void *)&_mh_execute_header,  v209,  v210,  "FetchConfig successfully updated config values from server. Now saving config",  v211,  2u);
                                    swift_slowDealloc(v211, -1LL, -1LL);
                                  }

                                  *(void *)&__int128 v282 = v230;
                                  BYTE8(v282) = v231;
                                  *(_DWORD *)((char *)&v282 + 9) = v247[0];
                                  HIDWORD(v282) = *(_DWORD *)((char *)v247 + 3);
                                  uint64_t v283 = v14;
                                  uint64_t v284 = v13;
                                  uint64_t v285 = v232;
                                  uint64_t v286 = v16;
                                  uint64_t v287 = v15;
                                  LOBYTE(v288) = v233;
                                  *(_DWORD *)((char *)&v288 + 1) = v246[0];
                                  HIDWORD(v288) = *(_DWORD *)((char *)v246 + 3);
                                  v289 = v238;
                                  uint64_t v290 = v17;
                                  LOBYTE(v291) = v236;
                                  HIDWORD(v291) = *(_DWORD *)&v245[3];
                                  *(_DWORD *)((char *)&v291 + 1) = *(_DWORD *)v245;
                                  uint64_t v292 = v18;
                                  uint64_t v293 = v237;
                                  uint64_t v294 = v20;
                                  uint64_t v295 = v19;
                                  char v296 = v219;
                                  char v297 = v218;
                                  char v298 = v217;
                                  char v299 = v216;
                                  int v300 = v215;
                                  uint64_t v301 = v223;
                                  uint64_t v302 = v222;
                                  uint64_t v303 = v221;
                                  char v304 = v220;
                                  *(_DWORD *)&v305[3] = *(_DWORD *)&v244[3];
                                  *(_DWORD *)v305 = *(_DWORD *)v244;
                                  uint64_t v306 = v226;
                                  uint64_t v307 = v229;
                                  uint64_t v308 = v225;
                                  id v309 = v228;
                                  uint64_t v310 = v224;
                                  uint64_t v311 = v227;
                                  sub_1002E9D14(&v282);
                                  sub_1006B3588((uint64_t)&v282, (uint64_t)sub_10026197C, 0LL);
                                  sub_100338768(&v282);
                                  sub_100246384(&v282);
LABEL_257:
                                  sub_100246384(&v282);
                                  return;
                                }

                                goto LABEL_230;
                              }

                              sub_10067483C(0xD000000000000012LL, 0x800000010084E100LL, v12, &v282);
                              swift_bridgeObjectRelease();
                              if (v284)
                              {
                                if ((swift_dynamicCast(&v242, &v282, (char *)&type metadata for Any + 8, v235, 6LL) & 1) != 0)
                                {
                                  Class v169 = Dictionary._bridgeToObjectiveC()().super.isa;
                                  swift_bridgeObjectRelease();
                                  *(void *)&__int128 v282 = 0LL;
                                  id v170 =  objc_msgSend( v240,  "dataWithJSONObject:options:error:",  v169,  0,  &v282,  v214);

                                  id v171 = (id)v282;
                                  if (v170)
                                  {
                                    uint64_t v172 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v170);
                                    unint64_t v174 = v173;

                                    uint64_t v175 = type metadata accessor for JSONDecoder(0LL);
                                    uint64_t v176 = swift_allocObject( v175,  *(unsigned int *)(v175 + 48),  *(unsigned __int16 *)(v175 + 52));
                                    JSONDecoder.init()(v176);
                                    unint64_t v177 = sub_1002E9CD0();
                                    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for OwnedDeviceConfig,  v172,  v174,  &type metadata for OwnedDeviceConfig,  v177);
                                    int v218 = BYTE1(v282);
                                    int v219 = v282;
                                    int v216 = BYTE3(v282);
                                    int v217 = BYTE2(v282);
                                    uint64_t v221 = v284;
                                    uint64_t v222 = v283;
                                    int v220 = v285;
                                    uint64_t v199 = v287;
                                    uint64_t v225 = v288;
                                    uint64_t v226 = v286;
                                    id v240 = v289;
                                    uint64_t v223 = *((void *)&v282 + 1);
                                    uint64_t v224 = v290;
                                    uint64_t v235 = v291;
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    if (qword_10099BA30 != -1) {
                                      swift_once(&qword_10099BA30, sub_100795FD8);
                                    }
                                    uint64_t v200 = type metadata accessor for Logger(0LL);
                                    uint64_t v201 = sub_10000A720(v200, (uint64_t)qword_100A2B7D8);
                                    uint64_t v202 = (os_log_s *)Logger.logObject.getter(v201);
                                    os_log_type_t v203 = static os_log_type_t.default.getter(v202);
                                    if (os_log_type_enabled(v202, v203))
                                    {
                                      NSString v204 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                                      uint64_t v229 = v199;
                                      id v205 = v204;
                                      *(_WORD *)NSString v204 = 0;
                                      _os_log_impl( (void *)&_mh_execute_header,  v202,  v203,  "FetchConfig successfully parse the ownedDeviceConfig",  v204,  2u);
                                      id v206 = v205;
                                      uint64_t v199 = v229;
                                      swift_slowDealloc(v206, -1LL, -1LL);
                                    }

                                    swift_release();
                                    sub_100016F9C(v172, v174);

                                    id v228 = v240;
                                    uint64_t v229 = v199;
                                    uint64_t v227 = v235;
                                    if ((v24 & 1) == 0) {
                                      goto LABEL_252;
                                    }
LABEL_230:
                                    __int128 v178 = v239;
LABEL_242:
                                    if (qword_10099B5E0 != -1) {
                                      swift_once(&qword_10099B5E0, sub_1005C6624);
                                    }
                                    uint64_t v191 = type metadata accessor for Logger(0LL);
                                    uint64_t v192 = sub_10000A720(v191, (uint64_t)qword_100A2AE08);
                                    uint64_t v193 = (os_log_s *)Logger.logObject.getter(v192);
                                    os_log_type_t v194 = static os_log_type_t.default.getter(v193);
                                    if (os_log_type_enabled(v193, v194))
                                    {
                                      unint64_t v195 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                                      *(_WORD *)unint64_t v195 = 0;
                                      _os_log_impl( (void *)&_mh_execute_header,  v193,  v194,  "FetchConfig update failed - not saving configs",  v195,  2u);
                                      swift_slowDealloc(v195, -1LL, -1LL);
                                    }

                                    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
                                    id v196 = objc_allocWithZone(&OBJC_CLASS___NSError);
                                    NSString v197 = String._bridgeToObjectiveC()();
                                    swift_bridgeObjectRelease();
                                    id v198 = [v196 initWithDomain:v197 code:5 userInfo:0];

                                    v178(v198);
                                    *(void *)&__int128 v282 = v230;
                                    BYTE8(v282) = v231;
                                    *(_DWORD *)((char *)&v282 + 9) = v247[0];
                                    HIDWORD(v282) = *(_DWORD *)((char *)v247 + 3);
                                    uint64_t v283 = v14;
                                    uint64_t v284 = v13;
                                    uint64_t v285 = v232;
                                    uint64_t v286 = v16;
                                    uint64_t v287 = v15;
                                    LOBYTE(v288) = v233;
                                    *(_DWORD *)((char *)&v288 + 1) = v246[0];
                                    HIDWORD(v288) = *(_DWORD *)((char *)v246 + 3);
                                    v289 = v238;
                                    uint64_t v290 = v17;
                                    LOBYTE(v291) = v236;
                                    HIDWORD(v291) = *(_DWORD *)&v245[3];
                                    *(_DWORD *)((char *)&v291 + 1) = *(_DWORD *)v245;
                                    uint64_t v292 = v18;
                                    uint64_t v293 = v237;
                                    uint64_t v294 = v20;
                                    uint64_t v295 = v19;
                                    char v296 = v219;
                                    char v297 = v218;
                                    char v298 = v217;
                                    char v299 = v216;
                                    int v300 = v215;
                                    uint64_t v301 = v223;
                                    uint64_t v302 = v222;
                                    uint64_t v303 = v221;
                                    char v304 = v220;
                                    *(_DWORD *)&v305[3] = *(_DWORD *)&v244[3];
                                    *(_DWORD *)v305 = *(_DWORD *)v244;
                                    uint64_t v306 = v226;
                                    uint64_t v307 = v229;
                                    uint64_t v308 = v225;
                                    id v309 = v228;
                                    uint64_t v310 = v224;
                                    uint64_t v311 = v227;
                                    goto LABEL_257;
                                  }

                                  char v184 = v171;
                                  uint64_t v185 = _convertNSErrorToError(_:)(v171);

                                  swift_willThrow(v186);
                                  if (qword_10099BA30 != -1) {
                                    swift_once(&qword_10099BA30, sub_100795FD8);
                                  }
                                  uint64_t v187 = type metadata accessor for Logger(0LL);
                                  uint64_t v188 = sub_10000A720(v187, (uint64_t)qword_100A2B7D8);
                                  __int128 v181 = (os_log_s *)Logger.logObject.getter(v188);
                                  os_log_type_t v189 = static os_log_type_t.error.getter(v181);
                                  if (os_log_type_enabled(v181, v189))
                                  {
                                    BOOL v190 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                                    *(_WORD *)BOOL v190 = 0;
                                    _os_log_impl( (void *)&_mh_execute_header,  v181,  v189,  "FetchConfig unable to parse ownedDeviceConfig from server config response.",  v190,  2u);
                                    swift_slowDealloc(v190, -1LL, -1LL);
                                  }

                                  swift_errorRelease(v185);
                                  __int128 v178 = v239;
LABEL_241:

                                  goto LABEL_242;
                                }
                              }

                              else
                              {
                                sub_100015794((uint64_t)&v282, &qword_10099E200);
                              }

                              __int128 v178 = v239;
                              if (qword_10099BA30 != -1) {
                                swift_once(&qword_10099BA30, sub_100795FD8);
                              }
                              uint64_t v179 = type metadata accessor for Logger(0LL);
                              uint64_t v180 = sub_10000A720(v179, (uint64_t)qword_100A2B7D8);
                              __int128 v181 = (os_log_s *)Logger.logObject.getter(v180);
                              os_log_type_t v182 = static os_log_type_t.error.getter(v181);
                              if (os_log_type_enabled(v181, v182))
                              {
                                __int128 v183 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                                *(_WORD *)__int128 v183 = 0;
                                _os_log_impl( (void *)&_mh_execute_header,  v181,  v182,  "FetchConfig unable to parse ownedDeviceConfig from server config response.",  v183,  2u);
                                swift_slowDealloc(v183, -1LL, -1LL);
                              }

                              goto LABEL_241;
                            }

                            if ((v133 & 0x1000000000000000LL) != 0) {
                              id v134 = (_BYTE *)((v132 & 0xFFFFFFFFFFFFFFFLL) + 32);
                            }
                            else {
                              id v134 = (_BYTE *)_StringObject.sharedUTF8.getter(v133, v132);
                            }
                            sub_1003389C4(v134, (BOOL *)&v282);
                            char v241 = v282;
                          }

                          swift_bridgeObjectRelease();
                          goto LABEL_172;
                        }

                        if ((v108 & 0x1000000000000000LL) != 0) {
                          uint64_t v109 = (_BYTE *)((v107 & 0xFFFFFFFFFFFFFFFLL) + 32);
                        }
                        else {
                          uint64_t v109 = (_BYTE *)_StringObject.sharedUTF8.getter(v108, v107);
                        }
                        sub_1003389C4(v109, (BOOL *)&v282);
                        char v241 = v282;
                      }

                      swift_bridgeObjectRelease();
                      goto LABEL_130;
                    }

                    if ((v95 & 0x1000000000000000LL) != 0) {
                      uint64_t v96 = (_BYTE *)((v94 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    }
                    else {
                      uint64_t v96 = (_BYTE *)_StringObject.sharedUTF8.getter(v95, v94);
                    }
                    sub_1003389C4(v96, (BOOL *)&v282);
                    char v241 = v282;
                  }

                  swift_bridgeObjectRelease();
                  goto LABEL_106;
                }

                if ((v82 & 0x1000000000000000LL) != 0) {
                  char v83 = (_BYTE *)((v81 & 0xFFFFFFFFFFFFFFFLL) + 32);
                }
                else {
                  char v83 = (_BYTE *)_StringObject.sharedUTF8.getter(v82, v81);
                }
                sub_1003389C4(v83, (BOOL *)&v282);
                char v241 = v282;
              }

              swift_bridgeObjectRelease();
              goto LABEL_82;
            }

            if ((v62 & 0x1000000000000000LL) != 0) {
              uint64_t v63 = (_BYTE *)((v61 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else {
              uint64_t v63 = (_BYTE *)_StringObject.sharedUTF8.getter(v62, v61);
            }
            sub_1003389C4(v63, (BOOL *)&v282);
            char v241 = v282;
          }

          swift_bridgeObjectRelease();
          goto LABEL_49;
        }
      }

  swift_release();
LABEL_175:
  os_log_type_t v140 = v185;
  sub_100601474(v190 + RequestBeacon[5], v185);
  uint64_t v142 = v187;
  uint64_t v141 = v188;
  uint64_t v143 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v187 + 48);
  unint64_t v144 = v143(v140, 1LL, v188);
  os_log_type_t v145 = v180;
  if (v144 == 1)
  {
    sub_100015794(v140, &qword_1009AC570);
  }

  else
  {
    uint64_t v146 = v178;
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 32))(v178, v140, v141);
    v195._countAndFlagsBits = 0LL;
    v195._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(30LL);
    uint64_t v147 = swift_bridgeObjectRelease();
    v195._countAndFlagsBits = 0xD000000000000015LL;
    v195._object = (void *)0x800000010086AE70LL;
    uint64_t v148 = v184;
    DateInterval.start.getter(v147);
    uint64_t v149 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    v150._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v145, v149);
    String.append(_:)(v150);
    swift_bridgeObjectRelease();
    __int128 v151 = *(void (**)(char *, uint64_t))(v182 + 8);
    v151(v148, v145);
    v152._countAndFlagsBits = 2108704LL;
    v152._object = (void *)0xE300000000000000LL;
    String.append(_:)(v152);
    DateInterval.end.getter();
    v153._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v145, v149);
    String.append(_:)(v153);
    swift_bridgeObjectRelease();
    v151(v148, v145);
    v154._countAndFlagsBits = 8236LL;
    v154._object = (void *)0xE200000000000000LL;
    String.append(_:)(v154);
    String.append(_:)(v195);
    uint64_t v142 = v187;
    uint64_t v141 = v188;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v146, v141);
  }

  os_log_type_t v155 = v181;
  sub_100601474(v190 + RequestBeacon[6], v181);
  if (v143(v155, 1LL, v141) == 1)
  {
    sub_100015794(v155, &qword_1009AC570);
  }

  else
  {
    __int128 v156 = v179;
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 32))(v179, v155, v141);
    v195._countAndFlagsBits = 0LL;
    v195._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    uint64_t v157 = swift_bridgeObjectRelease();
    v195._countAndFlagsBits = 0xD000000000000017LL;
    v195._object = (void *)0x800000010086AE50LL;
    uint64_t v158 = v184;
    DateInterval.start.getter(v157);
    __int128 v159 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    v160._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v145, v159);
    String.append(_:)(v160);
    swift_bridgeObjectRelease();
    __int128 v161 = *(void (**)(char *, uint64_t))(v182 + 8);
    v161(v158, v145);
    v162._countAndFlagsBits = 2108704LL;
    v162._object = (void *)0xE300000000000000LL;
    String.append(_:)(v162);
    DateInterval.end.getter();
    v163._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v145, v159);
    String.append(_:)(v163);
    swift_bridgeObjectRelease();
    v161(v158, v145);
    v164._countAndFlagsBits = 8236LL;
    v164._object = (void *)0xE200000000000000LL;
    String.append(_:)(v164);
    String.append(_:)(v195);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v156, v141);
  }

  v195._countAndFlagsBits = 0x203A736469LL;
  v195._object = (void *)0xE500000000000000LL;
  os_log_type_t v165 = v190;
  uint64_t v193 = *(void *)(*(void *)(v190 + v183) + 16LL);
  v166._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v166);
  swift_bridgeObjectRelease();
  v167._countAndFlagsBits = 8236LL;
  v167._object = (void *)0xE200000000000000LL;
  String.append(_:)(v167);
  String.append(_:)(v195);
  swift_bridgeObjectRelease();
  v195._countAndFlagsBits = 0LL;
  v195._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(17LL);
  swift_bridgeObjectRelease();
  v195._countAndFlagsBits = 0x6F43686372616573LL;
  v195._object = (void *)0xEF203A747865746ELL;
  uint64_t v168 = RequestBeacon;
  Class v169 = (unsigned __int8 *)(v165 + RequestBeacon[8]);
  id v170 = *v169;
  id v171 = *((void *)v169 + 1);
  if (v169[1]) {
    uint64_t v172 = 256;
  }
  else {
    uint64_t v172 = 0;
  }
  v173._countAndFlagsBits = sub_1005FC15C(v172 | v170, v171);
  String.append(_:)(v173);
  swift_bridgeObjectRelease();
  String.append(_:)(v195);
  swift_bridgeObjectRelease();
  v195._countAndFlagsBits = 0LL;
  v195._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(18LL);
  swift_bridgeObjectRelease();
  v195._countAndFlagsBits = 0xD000000000000010LL;
  v195._object = (void *)0x800000010086AE30LL;
  uint64_t v193 = *(void *)(*(void *)(v165 + v168[9]) + 16LL);
  v174._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v174);
  swift_bridgeObjectRelease();
  String.append(_:)(v195);
  swift_bridgeObjectRelease();
  uint64_t v175 = v197;
  uint64_t v176 = v186;
  uint8_t *v186 = v196;
  v176[1] = v175;
}

uint64_t sub_10032B7DC(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, const char *a4)
{
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AE08);
  swift_errorRetain(a1);
  uint64_t v8 = swift_errorRetain(a1);
  id v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v17 = a1;
    uint64_t v18 = v12;
    *(_DWORD *)id v11 = 136315138;
    swift_errorRetain(a1);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v14 = String.init<A>(describing:)(&v17, v13);
    uint64_t v17 = sub_1003F11D4(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a4, v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return a2(a1);
}

void sub_10032B9B8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_10000A720(v4, (uint64_t)qword_100A2AE08);
    swift_errorRetain(a1);
    uint64_t v5 = swift_errorRetain(a1);
    oslog = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v6 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = swift_slowAlloc(22LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      uint64_t v13 = a2;
      uint64_t v14 = v8;
      *(_DWORD *)uint64_t v7 = 134218242;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4, v7 + 12);
      *(_WORD *)(v7 + 12) = 2080;
      uint64_t v13 = a1;
      swift_errorRetain(a1);
      uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v10 = String.init<A>(describing:)(&v13, v9);
      uint64_t v13 = sub_1003F11D4(v10, v11, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 14, v7 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v6,  "FetchConfig - error fetching configs after checking response version %ld  %s",  (uint8_t *)v7,  0x16u);
      swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }

uint64_t sub_10032BBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  v27[0] = a6;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v28 = *(void *)(v16 - 8);
  uint64_t v29 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v27[1] = *(void *)(a2 + 144);
  uint64_t v19 = (void *)swift_allocObject(&unk_100951078, 72LL, 7LL);
  void v19[2] = a2;
  v19[3] = a3;
  _DWORD v19[4] = a4;
  v19[5] = a5;
  v19[6] = v27[0];
  v19[7] = a7;
  v19[8] = a1;
  aBlock[4] = sub_100339B94;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100951090;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a4);
  id v21 = a5;
  swift_retain();
  uint64_t v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v13, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v18, v15, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
  return swift_release();
}

uint64_t sub_10032BE08(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (qword_10099B850 != -1) {
    swift_once(&qword_10099B850, sub_1006BAC84);
  }
  swift_retain();
  sub_1006BB4C0();
  swift_release();
  uint64_t v14 = (void *)swift_allocObject(&unk_1009510C8, 72LL, 7LL);
  uint64_t v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  v14[6] = a5;
  v14[7] = a6;
  v14[8] = a7;
  swift_retain();
  swift_bridgeObjectRetain(a3);
  id v15 = a4;
  swift_retain();
  swift_retain();
  sub_1005802E0(a2, a3, v15, (uint64_t)sub_100339BF0, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_10032BF14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_allocObject(&unk_1009510F0, 80LL, 7LL);
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = a5;
  v16[7] = a6;
  v16[8] = a7;
  void v16[9] = a8;
  swift_bridgeObjectRetain(a4);
  swift_errorRetain(a1);
  swift_retain();
  id v17 = a5;
  swift_retain();
  swift_retain();
  sub_10025DC10(a3, a4, (uint64_t)sub_100339C50, (uint64_t)v16);
  return swift_release();
}

void sub_10032BFE0( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t), uint64_t a8, void *a9)
{
  uint64_t v63 = a5;
  uint64_t v64 = a6;
  uint64_t v14 = a9;
  uint64_t v65 = *a9;
  uint64_t v66 = a7;
  uint64_t v15 = sub_100004AEC(&qword_1009A7118);
  __chkstk_darwin(v15);
  id v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for SecureLocation(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100338B04(a1, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18) == 1)
  {
    sub_100015794((uint64_t)v17, &qword_1009A7118);
  }

  else
  {
    sub_10002218C((uint64_t)v17, (uint64_t)v21, type metadata accessor for SecureLocation);
    if (qword_10099B5E8 != -1) {
      swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    swift_retain();
    char v22 = sub_1005C7E64((uint64_t)v21);
    swift_release();
    if ((v22 & 1) != 0)
    {
      uint64_t v23 = sub_100004AEC(&qword_1009B0610);
      uint64_t v24 = swift_allocObject(v23, 40LL, 7LL);
      *(_OWORD *)(v24 + 16) = xmmword_1007F8BB0;
      id v25 = sub_1005EE368();
      *(void *)(v24 + 32) = v25;
      uint64_t v68 = v24;
      specialized Array._endMutation()(v25);
      if (qword_10099B178 != -1) {
        swift_once(&qword_10099B178, sub_100189C64);
      }
      uint64_t v26 = type metadata accessor for Logger(0LL);
      sub_10000A720(v26, (uint64_t)qword_100A2A290);
      swift_bridgeObjectRetain_n(a3, 2LL);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      unint64_t v29 = a3;
      os_log_type_t v30 = static os_log_type_t.default.getter(v28);
      if (os_log_type_enabled(v28, v30))
      {
        uint64_t v31 = swift_slowAlloc(12LL, -1LL);
        uint64_t v61 = a8;
        uint64_t v32 = (uint8_t *)v31;
        uint64_t v33 = swift_slowAlloc(32LL, -1LL);
        uint64_t v62 = a9;
        unint64_t v60 = a2;
        uint64_t v34 = v33;
        uint64_t v68 = v33;
        *(_DWORD *)uint64_t v32 = 136315138;
        swift_bridgeObjectRetain(v29);
        uint64_t v67 = sub_1003F11D4(v60, v29, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v32 + 4, v32 + 12);
        swift_bridgeObjectRelease_n(v29, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v28,  v30,  "SubscribeAndFetch - livelocations returning cached location for %s in completion",  v32,  0xCu);
        swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v35 = v34;
        a2 = v60;
        uint64_t v14 = v62;
        swift_slowDealloc(v35, -1LL, -1LL);
        unint64_t v36 = v32;
        a8 = v61;
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(v29, 2LL);
      }

      sub_100018C68((uint64_t)v21, type metadata accessor for SecureLocation);
      a3 = v29;
    }

    else
    {
      sub_100018C68((uint64_t)v21, type metadata accessor for SecureLocation);
    }
  }

  id v37 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v39 = [v37 initWithExpiryTime:isa locations:120.0];

  if (a4)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v62 = v14;
    uint64_t v40 = type metadata accessor for Logger(0LL);
    sub_10000A720(v40, (uint64_t)qword_100A2AE08);
    swift_errorRetain(a4);
    uint64_t v41 = swift_errorRetain(a4);
    id v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.debug.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v61 = a8;
      id v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v45 = swift_slowAlloc(32LL, -1LL);
      unint64_t v60 = a3;
      uint64_t v46 = v45;
      uint64_t v67 = a4;
      uint64_t v68 = v45;
      *(_DWORD *)id v44 = 136315138;
      swift_errorRetain(a4);
      uint64_t v47 = sub_100004AEC(&qword_10099C678);
      uint64_t v48 = String.init<A>(describing:)(&v67, v47);
      uint64_t v67 = sub_1003F11D4(v48, v49, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a4);
      swift_errorRelease(a4);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "analytics: Error occurred during startLive %s", v44, 0xCu);
      swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v50 = v46;
      a3 = v60;
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a4);
      swift_errorRelease(a4);
    }

    __chkstk_darwin(v58);
    *(&v60 - 4) = v63;
    *(&v60 - 3) = a2;
    uint64_t v59 = v64;
    *(&v60 - 2) = a3;
    *(&v60 - 1) = v59;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.liveUnsubscribe",  61LL,  2LL,  sub_10033A480);
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v51 = type metadata accessor for Logger(0LL);
    sub_10000A720(v51, (uint64_t)qword_100A2AE08);
    swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.debug.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = swift_slowAlloc(22LL, -1LL);
      uint64_t v56 = swift_slowAlloc(32LL, -1LL);
      unint64_t v60 = a2;
      uint64_t v65 = v56;
      *(_DWORD *)uint64_t v55 = 141558275;
      uint64_t v67 = 1752392040LL;
      uint64_t v68 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v55 + 4, v55 + 12);
      *(_WORD *)(v55 + 12) = 2081;
      swift_bridgeObjectRetain(a3);
      uint64_t v67 = sub_1003F11D4(v60, a3, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "analytics: startlive success for %{private,mask.hash}s",  (uint8_t *)v55,  0x16u);
      uint64_t v57 = v65;
      swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
    }
  }

  v66(v39, a4);
  Transaction.capture()();
}

uint64_t sub_10032C758(uint64_t a1, void *a2, void *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v98 = a5;
  uint64_t v100 = a4;
  uint64_t v95 = type metadata accessor for BeaconSharingSessionContext(0LL);
  __chkstk_darwin(v95);
  uint64_t v96 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099E468);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for SecureLocationsSubscription(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v111[0] = 0uLL;
  uint64_t v99 = v5;
  uint64_t v103 = *(void *)(v5 + 48);
  uint64_t v104 = a1;
  uint64_t v101 = a1;
  uint64_t v20 = a2;
  char v105 = a2;
  uint64_t v106 = a3;
  uint64_t v97 = a3;
  OS_dispatch_queue.sync<A>(execute:)(sub_100339AD0, v102, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    sub_100015794((uint64_t)v15, &qword_10099E468);
LABEL_13:
    uint64_t v34 = v99;
    uint64_t v35 = v100;
    goto LABEL_21;
  }

  sub_10002218C((uint64_t)v15, (uint64_t)v19, type metadata accessor for SecureLocationsSubscription);
  id v21 = &v19[*(int *)(v16 + 32)];
  uint64_t v22 = *((void *)v21 + 1);
  if (!v22)
  {
    sub_100018C68((uint64_t)v19, type metadata accessor for SecureLocationsSubscription);
    goto LABEL_13;
  }

  uint64_t v23 = *(void *)v21;
  uint64_t v24 = qword_10099B5E8;
  swift_bridgeObjectRetain(v22);
  if (v24 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  swift_retain();
  uint64_t v25 = Data.init(base64Encoded:options:)(v23, v22, 0LL);
  if (v26 >> 60 == 15)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_10000A720(v27, (uint64_t)qword_100A2AE08);
    unint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "failed to decode server provided push identifier", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
  }

  else
  {
    uint64_t v36 = v25;
    unint64_t v37 = v26;
    static String.Encoding.utf8.getter(v25);
    uint64_t v32 = String.init(data:encoding:)(v36, v37, v12);
    uint64_t v33 = v38;
    sub_1000182F0(v36, v37);
    swift_release();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  *(void *)&v111[0] = v32;
  *((void *)&v111[0] + 1) = v33;
  if (qword_10099B178 != -1) {
    swift_once(&qword_10099B178, sub_100189C64);
  }
  uint64_t v39 = type metadata accessor for Logger(0LL);
  sub_10000A720(v39, (uint64_t)qword_100A2A290);
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = swift_slowAlloc(42LL, -1LL);
    id v44 = v19;
    uint64_t v45 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v109 = v45;
    *(_DWORD *)uint64_t v43 = 141558787;
    *(void *)&v110[0] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, (char *)v110 + 8, v43 + 4, v43 + 12);
    *(_WORD *)(v43 + 12) = 2081;
    swift_beginAccess(v111, v107, 0LL, 0LL);
    v110[0] = v111[0];
    swift_bridgeObjectRetain(*((void *)&v111[0] + 1));
    uint64_t v46 = sub_100004AEC(&qword_1009A34B0);
    uint64_t v47 = String.init<A>(describing:)(v110, v46);
    *(void *)&v110[0] = sub_1003F11D4(v47, v48, (uint64_t *)&v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, (char *)v110 + 8, v43 + 14, v43 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 22) = 2160;
    *(void *)&v110[0] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, (char *)v110 + 8, v43 + 24, v43 + 32);
    *(_WORD *)(v43 + 32) = 2081;
    swift_bridgeObjectRetain(v20);
    *(void *)&v110[0] = sub_1003F11D4(v101, (unint64_t)v20, (uint64_t *)&v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, (char *)v110 + 8, v43 + 34, v43 + 42);
    swift_bridgeObjectRelease_n(v20, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "stopLiveLocations: Got handle from server %{private,mask.hash}s for findMyId %{private,mask.hash}s",  (uint8_t *)v43,  0x2Au);
    swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);

    uint64_t v49 = (uint64_t)v44;
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);

    uint64_t v49 = (uint64_t)v19;
  }

  sub_100018C68(v49, type metadata accessor for SecureLocationsSubscription);
  uint64_t v35 = v100;
  uint64_t v34 = v99;
LABEL_21:
  swift_beginAccess(v111, v110, 1LL, 0LL);
  uint64_t v51 = *((void *)&v111[0] + 1);
  if (!*((void *)&v111[0] + 1))
  {
    if (qword_10099B5E8 != -1) {
      uint64_t v50 = swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    uint64_t v52 = qword_100A2AE20;
    __chkstk_darwin(v50);
    uint64_t v53 = v101;
    *(&v94 - 4) = v52;
    *(&v94 - 3) = v53;
    *(&v94 - 2) = (uint64_t)v20;
    swift_retain();
    uint64_t v54 = sub_100004AEC(&qword_1009A34B0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100339B1C, &v94 - 6, v54);
    swift_release();
    v111[0] = v109;
    swift_bridgeObjectRelease();
    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v55 = type metadata accessor for Logger(0LL);
    sub_10000A720(v55, (uint64_t)qword_100A2A290);
    __int128 v56 = v111[0];
    swift_bridgeObjectRetain_n(*((void *)&v111[0] + 1), 2LL);
    swift_bridgeObjectRetain_n(v20, 2LL);
    uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.default.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = swift_slowAlloc(42LL, -1LL);
      uint64_t v61 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v60 = 141558787;
      uint64_t v108 = v61;
      *(void *)&__int128 v109 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v60 + 4, v60 + 12);
      *(_WORD *)(v60 + 12) = 2081;
      __int128 v109 = v56;
      swift_bridgeObjectRetain(*((void *)&v56 + 1));
      uint64_t v62 = String.init<A>(describing:)(&v109, v54);
      *(void *)&__int128 v109 = sub_1003F11D4(v62, v63, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v60 + 14, v60 + 22);
      swift_bridgeObjectRelease_n(*((void *)&v56 + 1), 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 22) = 2160;
      *(void *)&__int128 v109 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v60 + 24, v60 + 32);
      *(_WORD *)(v60 + 32) = 2081;
      swift_bridgeObjectRetain(v20);
      *(void *)&__int128 v109 = sub_1003F11D4(v101, (unint64_t)v20, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v60 + 34, v60 + 42);
      swift_bridgeObjectRelease_n(v20, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "stopLiveLocations: Got handle from fmf following %{private,mask.hash}s for findMyId %{private,mask.hash}s",  (uint8_t *)v60,  0x2Au);
      swift_arrayDestroy(v61, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v64 = v61;
      uint64_t v34 = v99;
      uint64_t v35 = v100;
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v60, -1LL, -1LL);

      uint64_t v51 = *((void *)&v111[0] + 1);
      if (!*((void *)&v111[0] + 1)) {
        goto LABEL_33;
      }
    }

    else
    {

      swift_bridgeObjectRelease_n(v20, 2LL);
      swift_bridgeObjectRelease_n(*((void *)&v56 + 1), 2LL);
      uint64_t v51 = *((void *)&v111[0] + 1);
      if (!*((void *)&v111[0] + 1))
      {
LABEL_33:
        uint64_t v99 = 0LL;
        *(void *)&__int128 v109 = 0LL;
        *((void *)&v109 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(67LL);
        v81._countAndFlagsBits = 0xD000000000000031LL;
        v81._object = (void *)0x800000010085E170LL;
        String.append(_:)(v81);
        v82._countAndFlagsBits = v101;
        v82._object = v20;
        String.append(_:)(v82);
        v83._object = (void *)0x800000010085E1B0LL;
        v83._countAndFlagsBits = 0xD000000000000010LL;
        String.append(_:)(v83);
        __int128 v84 = v109;
        if (qword_10099B178 != -1) {
          swift_once(&qword_10099B178, sub_100189C64);
        }
        uint64_t v85 = type metadata accessor for Logger(0LL);
        sub_10000A720(v85, (uint64_t)qword_100A2A290);
        swift_bridgeObjectRetain_n(*((void *)&v84 + 1), 2LL);
        uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
        os_log_type_t v88 = static os_log_type_t.error.getter(v87);
        if (os_log_type_enabled(v87, v88))
        {
          os_log_type_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v90 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v109 = v90;
          *(_DWORD *)os_log_type_t v89 = 136315138;
          swift_bridgeObjectRetain(*((void *)&v84 + 1));
          uint64_t v108 = sub_1003F11D4(v84, *((unint64_t *)&v84 + 1), (uint64_t *)&v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v89 + 4, v89 + 12);
          swift_bridgeObjectRelease_n(*((void *)&v84 + 1), 3LL);
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "LiveLocations: %s", v89, 0xCu);
          swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v90, -1LL, -1LL);
          swift_slowDealloc(v89, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(*((void *)&v84 + 1), 2LL);
        }

        if (qword_10099B850 != -1) {
          swift_once(&qword_10099B850, sub_1006BAC84);
        }
        swift_retain();
        sub_1006BB764(v84, *((uint64_t *)&v84 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v91 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v91);
        uint64_t v92 = v101;
        *(&v94 - 4) = v34;
        *(&v94 - 3) = v92;
        uint64_t v93 = (uint64_t)v97;
        *(&v94 - 2) = (uint64_t)v20;
        *(&v94 - 1) = v93;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.liveUnsubscribe",  61LL,  2LL,  sub_100339AEC);
        uint64_t v35 = v100;
        goto LABEL_41;
      }
    }
  }

  uint64_t v65 = *(void *)&v111[0];
  swift_bridgeObjectRetain(v51);
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v65, v51);
  if (!v68) {
    goto LABEL_33;
  }
  uint64_t v69 = v68;
  uint64_t v70 = *(void *)(v34 + 32);
  uint64_t v71 = (uint64_t)v96;
  *uint64_t v96 = v66;
  *(void *)(v71 + 8) = v67;
  *(void *)(v71 + 16) = v68;
  uint64_t result = swift_storeEnumTagMultiPayload(v71, v95, 1LL);
  if (*(void *)(v70 + 352))
  {
    swift_bridgeObjectRetain(v69);
    swift_retain();
    uint64_t v73 = dispatch thunk of AsynchronousCache.value(for:)(v71);
    swift_release();
    *(void *)&__int128 v109 = v73;
    uint64_t v74 = sub_100004AEC(&qword_1009A48F8);
    uint64_t v75 = sub_1000372EC( &qword_1009A4900,  &qword_1009A48F8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v76 = Publisher.eraseToAnyPublisher()(v74, v75);
    swift_release();
    sub_100018C68(v71, type metadata accessor for BeaconSharingSessionContext);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v109 = v76;
    unint64_t v77 = (void *)swift_allocObject(&unk_100950FB0, 48LL, 7LL);
    uint64_t v78 = v101;
    v77[2] = v34;
    v77[3] = v78;
    char v79 = v97;
    v77[4] = v20;
    v77[5] = v79;
    swift_bridgeObjectRetain(v20);
    swift_retain();
    id v80 = v79;
    Publisher.oneshot(_:)(sub_100339B10, v77, v74, v75);
    swift_release();
    swift_release();
LABEL_41:
    v35(0LL);
    return swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

uint64_t sub_10032D430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = *(void *)a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 8);
  uint64_t v23 = *(void *)(a2 + 144);
  uint64_t v17 = swift_allocObject(&unk_100950FD8, 64LL, 7LL);
  *(void *)(v17 + 16) = v16;
  *(_BYTE *)(v17 + 24) = a1;
  *(void *)(v17 + 32) = a2;
  *(void *)(v17 + 40) = a3;
  *(void *)(v17 + 48) = a4;
  *(void *)(v17 + 56) = a5;
  aBlock[4] = sub_100339B78;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100950FF0;
  uint64_t v18 = _Block_copy(aBlock);
  sub_1001B1B94(v16, a1);
  swift_retain();
  swift_bridgeObjectRetain(a4);
  static DispatchQoS.unspecified.getter(a5);
  unint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v10, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  return swift_release();
}

uint64_t sub_10032D65C(unint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    v26[0] = 0LL;
    v26[1] = 0xE000000000000000LL;
    sub_1000A4D58(a1);
    _StringGuts.grow(_:)(57LL);
    v4._object = (void *)0x800000010085E210LL;
    v4._countAndFlagsBits = 0xD000000000000037LL;
    String.append(_:)(v4);
    v5._countAndFlagsBits = sub_1000A4BC4(a1);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2A290);
    swift_bridgeObjectRetain_n(0xE000000000000000LL, 2LL);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      v26[0] = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      swift_bridgeObjectRetain(0xE000000000000000LL);
      uint64_t v24 = sub_1003F11D4(0LL, 0xE000000000000000LL, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease_n(0xE000000000000000LL, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "LiveLocations: %{public}s", v10, 0xCu);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(0xE000000000000000LL, 2LL);
    }

    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    swift_retain();
    sub_1006BB05C(0, 0LL, 0xE000000000000000LL);
    swift_bridgeObjectRelease();
    swift_release();
  }

  else
  {
    uint64_t v12 = qword_10099B178;
    swift_retain();
    if (v12 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000A720(v13, (uint64_t)qword_100A2A290);
    sub_1001B1B94(a1, 0);
    uint64_t v14 = swift_retain();
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      v26[0] = v18;
      *(_DWORD *)uint64_t v17 = 136446210;
      swift_retain();
      uint64_t v19 = sub_1001DFE98();
      unint64_t v21 = v20;
      sub_1001B1B88(a1, 0);
      uint64_t v24 = sub_1003F11D4(v19, v21, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      sub_1001B1B88(a1, 0);
      sub_1001B1B88(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "LiveLocations: Ending session: %{public}s", v17, 0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {
      sub_1001B1B88(a1, 0);
      sub_1001B1B88(a1, 0);
    }

    sub_1001E1124();
    [*(id *)(a1 + 56) endSession];
    sub_1001E02B4(a1);
  }

  sub_1001B1B88(a1, a2 & 1);
  uint64_t v22 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v22);
  return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.liveUnsubscribe",  61LL,  2LL,  sub_10033A480);
}

uint64_t sub_10032DB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = sub_100004AEC(&qword_1009AF520);
  uint64_t v10 = swift_allocObject(v9, 48LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1007E67D0;
  *(void *)(v10 + 32) = a3;
  *(void *)(v10 + 40) = a4;
  swift_bridgeObjectRetain(a4);
  swift_retain();
  sub_10031EFC4(v10, a5, (uint64_t)j___s10FindMyBase11TransactionC7captureyyF, a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

Swift::Int sub_10032DBFC(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_139;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v91 = *v2;
      uint64_t v92 = *v2 + 160LL;
      uint64_t v93 = -1LL;
      for (uint64_t i = 1LL; i != v3; ++i)
      {
        double v95 = *(double *)(v91 + 88 * i + 64);
        uint64_t v96 = v93;
        uint64_t v97 = v92;
        do
        {
          if (!v91) {
            goto LABEL_143;
          }
          uint64_t v98 = (_OWORD *)(v97 - 72);
          uint64_t v99 = *(void *)(v97 - 72);
          uint64_t v100 = *(void *)(v97 - 64);
          Swift::Int result = *(void *)(v97 - 56);
          uint64_t v101 = *(void *)(v97 - 48);
          __int128 v102 = *(_OWORD *)(v97 - 24);
          __int128 v103 = *(_OWORD *)(v97 - 40);
          __int128 v104 = *(_OWORD *)v97;
          __int128 v105 = *(_OWORD *)(v97 - 112);
          v98[2] = *(_OWORD *)(v97 - 128);
          v98[3] = v105;
          v98[4] = *(_OWORD *)(v97 - 96);
          *(void *)(v97 + 8) = *(void *)(v97 - 80);
          __int128 v106 = *(_OWORD *)(v97 - 144);
          *uint64_t v98 = *(_OWORD *)(v97 - 160);
          v98[1] = v106;
          *(_OWORD *)(v97 - 88) = v104;
          v97 -= 88LL;
          *(void *)(v97 - 72) = v99;
          *(void *)(v97 - 64) = v100;
          *(void *)(v97 - 56) = result;
          *(void *)(v97 - 48) = v101;
          *(_OWORD *)(v97 - 40) = v103;
          *(_OWORD *)(v97 - 24) = v102;
          *(double *)(v97 - 8) = v95;
        }

        while (!__CFADD__(v96++, 1LL));
        v92 += 88LL;
        --v93;
      }
    }

    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_148;
  }
  Swift::Int v119 = result;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v125 = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      uint64_t v108 = (char *)_swiftEmptyArrayStorage;
LABEL_105:
      char v118 = v8;
      if (v11 >= 2)
      {
        uint64_t v109 = *v2;
        do
        {
          unint64_t v110 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_134;
          }
          if (!v109) {
            goto LABEL_147;
          }
          BOOL v111 = v108;
          uint64_t v112 = *(void *)&v108[16 * v110 + 32];
          uint64_t v113 = *(void *)&v108[16 * v11 + 24];
          sub_10032E3CC( (double *)(v109 + 88 * v112),  (double *)(v109 + 88LL * *(void *)&v108[16 * v11 + 16]),  v109 + 88 * v113,  v125);
          if (v1) {
            break;
          }
          if (v113 < v112) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v111) & 1) == 0) {
            BOOL v111 = sub_1003CBA90((uint64_t)v111);
          }
          if (v110 >= *((void *)v111 + 2)) {
            goto LABEL_136;
          }
          uint64_t v114 = &v111[16 * v110 + 32];
          *(void *)uint64_t v114 = v112;
          *((void *)v114 + 1) = v113;
          unint64_t v115 = *((void *)v111 + 2);
          if (v11 > v115) {
            goto LABEL_137;
          }
          memmove(&v111[16 * v11 + 16], &v111[16 * v11 + 32], 16 * (v115 - v11));
          uint64_t v108 = v111;
          *((void *)v111 + 2) = v115 - 1;
          unint64_t v11 = v115 - 1;
        }

        while (v115 > 2);
      }

LABEL_95:
      swift_bridgeObjectRelease();
      v118[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    char v118 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for SecureLocationLabel);
    *(void *)(v7 + 16) = v6;
    char v118 = (void *)v7;
    uint64_t v125 = (double *)(v7 + 32);
  }

  Swift::Int v9 = 0LL;
  uint64_t v117 = v2;
  uint64_t v10 = *v2;
  uint64_t v126 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v120 = v3;
  while (1)
  {
    Swift::Int v12 = v9++;
    if (v9 < v3)
    {
      double v13 = *(double *)(v10 + 88 * v9 + 64);
      double v14 = *(double *)(v10 + 88 * v12 + 64);
      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        uint64_t v15 = (double *)(v10 + 240 + 88 * v12);
        double v16 = v13;
        while (1)
        {
          double v17 = v16;
          double v16 = *v15;
          if (v14 < v13 == v17 >= *v15) {
            break;
          }
          ++v9;
          v15 += 11;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }

      if (v14 < v13)
      {
        if (v9 < v12) {
          goto LABEL_140;
        }
        if (v12 < v9)
        {
          uint64_t v18 = 88 * v9;
          Swift::Int v19 = v9;
          Swift::Int v20 = v12;
          Swift::Int v116 = v12;
          uint64_t v21 = 88 * v12;
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_146;
              }
              uint64_t v22 = v10 + v18;
              uint64_t v23 = *(void *)(v10 + v21 + 16);
              uint64_t v24 = *(void *)(v10 + v21 + 24);
              uint64_t v25 = *(void *)(v10 + v21 + 64);
              __int128 v123 = *(_OWORD *)(v10 + v21 + 48);
              __int128 v124 = *(_OWORD *)(v10 + v21);
              __int128 v121 = *(_OWORD *)(v10 + v21 + 32);
              __int128 v122 = *(_OWORD *)(v10 + v21 + 72);
              memmove((void *)(v10 + v21), (const void *)(v10 + v18 - 88), 0x58uLL);
              *(_OWORD *)(v22 - 88) = v124;
              *(void *)(v22 - 72) = v23;
              *(void *)(v22 - 64) = v24;
              *(_OWORD *)(v22 - 56) = v121;
              *(_OWORD *)(v22 - 40) = v123;
              *(void *)(v22 - 24) = v25;
              *(_OWORD *)(v22 - 16) = v122;
            }

            ++v20;
            v18 -= 88LL;
            v21 += 88LL;
          }

          while (v20 < v19);
          Swift::Int v3 = v120;
          Swift::Int v12 = v116;
        }
      }
    }

    if (v9 >= v3) {
      goto LABEL_39;
    }
    if (__OFSUB__(v9, v12)) {
      goto LABEL_138;
    }
    if (v9 - v12 >= v119) {
      goto LABEL_39;
    }
    Swift::Int v26 = v12 + v119;
    if (__OFADD__(v12, v119)) {
      goto LABEL_141;
    }
    if (v26 >= v3) {
      Swift::Int v26 = v3;
    }
    if (v26 < v12) {
      break;
    }
    if (v9 != v26)
    {
      uint64_t v77 = v10 + 72 + 88 * v9;
      uint64_t v27 = v126;
      do
      {
        double v78 = *(double *)(v10 + 88 * v9 + 64);
        Swift::Int v79 = v12;
        uint64_t v80 = v77;
        do
        {
          if (!v10) {
            goto LABEL_144;
          }
          Swift::String v81 = (_OWORD *)(v80 - 72);
          uint64_t v82 = *(void *)(v80 - 72);
          uint64_t v83 = *(void *)(v80 - 64);
          uint64_t v84 = *(void *)(v80 - 56);
          uint64_t v85 = *(void *)(v80 - 48);
          __int128 v86 = *(_OWORD *)(v80 - 24);
          __int128 v87 = *(_OWORD *)(v80 - 40);
          __int128 v88 = *(_OWORD *)v80;
          __int128 v89 = *(_OWORD *)(v80 - 112);
          v81[2] = *(_OWORD *)(v80 - 128);
          v81[3] = v89;
          v81[4] = *(_OWORD *)(v80 - 96);
          *(void *)(v80 + 8) = *(void *)(v80 - 80);
          __int128 v90 = *(_OWORD *)(v80 - 144);
          *Swift::String v81 = *(_OWORD *)(v80 - 160);
          v81[1] = v90;
          *(_OWORD *)(v80 - 88) = v88;
          v80 -= 88LL;
          *(void *)(v80 - 72) = v82;
          *(void *)(v80 - 64) = v83;
          *(void *)(v80 - 56) = v84;
          *(void *)(v80 - 48) = v85;
          *(_OWORD *)(v80 - 40) = v87;
          *(_OWORD *)(v80 - 24) = v86;
          ++v79;
          *(double *)(v80 - 8) = v78;
        }

        while (v9 != v79);
        ++v9;
        v77 += 88LL;
      }

      while (v9 != v26);
      Swift::Int v9 = v26;
      if (v26 < v12) {
        goto LABEL_133;
      }
      goto LABEL_40;
    }

  CKRecordKeyValueSetting.subscript.getter( &v139,  0x7375655A7369LL,  0xE600000000000000LL,  ObjectType,  &type metadata for Bool,  &protocol witness table for Bool);
  __int128 v124 = *(unsigned __int8 *)(v90 + v93[20]);
  if (v139 == 2 || ((v124 ^ v139) & 1) != 0)
  {
    *((void *)&v140 + 1) = &type metadata for Bool;
    uint64_t v141 = &protocol witness table for Bool;
    LOBYTE(v139) = v124;
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x7375655A7369LL, 0xE600000000000000LL, ObjectType);
  }

  return swift_unknownObjectRelease(v26);
}

uint64_t sub_10032E3CC(double *__dst, double *__src, unint64_t a3, double *a4)
{
  Swift::String v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = ((char *)__src - (char *)__dst) / 88;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 88;
  uint64_t v23 = __dst;
  uint64_t v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -87)
    {
      if (a4 != __src || &__src[11 * v11] <= a4) {
        memmove(a4, __src, 88 * v11);
      }
      double v16 = &v4[11 * v11];
      uint64_t v21 = (char *)v16;
      uint64_t v23 = v6;
      if (v7 < v6 && v10 >= 88)
      {
        double v17 = (double *)(a3 - 88);
        do
        {
          uint64_t v18 = v17 + 11;
          if (*(v6 - 3) >= *(v16 - 3))
          {
            uint64_t v21 = (char *)(v16 - 11);
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              memmove(v17, v16 - 11, 0x58uLL);
            }
            Swift::Int v19 = v6;
            v16 -= 11;
            if (v6 <= v7) {
              break;
            }
          }

          else
          {
            Swift::Int v19 = v6 - 11;
            if (v18 != v6 || v17 >= v6) {
              memmove(v17, v6 - 11, 0x58uLL);
            }
            uint64_t v23 = v6 - 11;
            if (v19 <= v7) {
              break;
            }
          }

          v17 -= 11;
          uint64_t v6 = v19;
        }

        while (v16 > v4);
      }

unint64_t sub_10032E688(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0LL;
    swift_stdlib_random(&v3, 8LL);
    uint64_t result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0LL;
          swift_stdlib_random(&v3, 8LL);
        }

        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_10032E710(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v4 = type metadata accessor for SecureLocation(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (double *)((char *)&v27 - v9);
  __chkstk_darwin(v8);
  double v13 = (char *)&v27 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v27 = v2;
    uint64_t v16 = *(void *)(v11 + 72);
    unint64_t v30 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = a1 + v30;
    uint64_t v18 = _swiftEmptyArrayStorage;
    unint64_t v28 = v10;
    uint64_t v29 = v16;
    while (1)
    {
      sub_10001DC4C(v17, (uint64_t)v13, type metadata accessor for SecureLocation);
      double v19 = *((double *)v13 + 2);
      sub_10001DC4C((uint64_t)v13, (uint64_t)v10, type metadata accessor for SecureLocation);
      if (v19 != 0.0) {
        break;
      }
      double v20 = v10[3];
      sub_100018C68((uint64_t)v10, type metadata accessor for SecureLocation);
      if (v20 != 0.0) {
        goto LABEL_9;
      }
      sub_100018C68((uint64_t)v13, type metadata accessor for SecureLocation);
LABEL_4:
      v17 += v16;
      if (!--v15) {
        return v32;
      }
    }

    sub_100018C68((uint64_t)v10, type metadata accessor for SecureLocation);
LABEL_9:
    uint64_t v22 = *(void *)v13;
    uint64_t v21 = *((void *)v13 + 1);
    swift_bridgeObjectRetain(v21);
    sub_1003D026C(v22, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = (uint64_t)v7;
    sub_10002218C((uint64_t)v13, (uint64_t)v7, type metadata accessor for SecureLocation);
    if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0) {
      sub_100033078(0, v18[2] + 1LL, 1);
    }
    uint64_t v18 = v32;
    unint64_t v25 = v32[2];
    unint64_t v24 = v32[3];
    if (v25 >= v24 >> 1)
    {
      sub_100033078(v24 > 1, v25 + 1, 1);
      uint64_t v18 = v32;
    }

    v18[2] = v25 + 1;
    uint64_t v16 = v29;
    uint64_t v26 = (uint64_t)v18 + v30 + v25 * v29;
    uint64_t v7 = (char *)v23;
    sub_10002218C(v23, v26, type metadata accessor for SecureLocation);
    uint64_t v10 = v28;
    goto LABEL_4;
  }

  return result;
}

void *sub_10032E964(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  __chkstk_darwin(v4);
  uint64_t v48 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SecureLocation(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  double v14 = (uint64_t *)((char *)&v41 - v13);
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v58 = _swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    uint64_t v41 = v2;
    unint64_t v42 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v17 = a1 + v42;
    uint64_t v18 = &off_10099B000;
    uint64_t v19 = *(void *)(v12 + 72);
    BOOL v43 = (uint64_t *)((char *)&v41 - v13);
    unint64_t v44 = v11;
    uint64_t v55 = v19;
    do
    {
      sub_10001DC4C(v17, (uint64_t)v14, type metadata accessor for SecureLocation);
      if (v18[189] != (_UNKNOWN *)-1LL) {
        swift_once(&qword_10099B5E8, sub_1005C66A4);
      }
      swift_retain();
      char v21 = sub_1005C7E64((uint64_t)v14);
      swift_release();
      if ((v21 & 1) != 0)
      {
        uint64_t v54 = v16;
        if (qword_10099B850 != -1) {
          swift_once(&qword_10099B850, sub_1006BAC84);
        }
        uint64_t v22 = qword_100A2B210;
        uint64_t v23 = *v14;
        uint64_t v24 = v14[1];
        uint64_t v52 = *(void *)(qword_100A2B210 + 16);
        uint64_t v53 = v23;
        uint64_t v25 = swift_allocObject(&unk_1009514D8, 41LL, 7LL);
        *(void *)(v25 + 16) = v22;
        *(void *)(v25 + 24) = v23;
        *(void *)(v25 + 32) = v24;
        *(_BYTE *)(v25 + 40) = 1;
        aBlock[4] = sub_10033A494;
        aBlock[5] = v25;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_1001C31E8;
        aBlock[3] = &unk_1009514F0;
        uint64_t v26 = _Block_copy(aBlock);
        swift_retain_n(v22, 2LL);
        swift_bridgeObjectRetain(v24);
        uint64_t v27 = v45;
        static DispatchQoS.unspecified.getter(v28);
        __int128 v56 = _swiftEmptyArrayStorage;
        uint64_t v29 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v31 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        unint64_t v32 = v48;
        uint64_t v33 = v50;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v30, v31, v50, v29);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v27, v32, v26);
        _Block_release(v26);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v33);
        uint64_t v34 = v27;
        double v14 = v43;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v47);
        swift_release();
        swift_release();
        swift_bridgeObjectRetain(v24);
        sub_1003D026C(v53, v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v35 = (uint64_t)v44;
        sub_10002218C((uint64_t)v14, (uint64_t)v44, type metadata accessor for SecureLocation);
        char v36 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
        {
          sub_100033078(0, v36[2] + 1LL, 1);
          char v36 = v58;
        }

        unint64_t v38 = v36[2];
        unint64_t v37 = v36[3];
        uint64_t v18 = &off_10099B000;
        if (v38 >= v37 >> 1)
        {
          sub_100033078(v37 > 1, v38 + 1, 1);
          char v36 = v58;
        }

        v36[2] = v38 + 1;
        uint64_t v39 = (char *)v36 + v42;
        uint64_t v20 = v55;
        sub_10002218C(v35, (uint64_t)&v39[v38 * v55], type metadata accessor for SecureLocation);
        uint64_t v16 = v54;
      }

      else
      {
        sub_100018C68((uint64_t)v14, type metadata accessor for SecureLocation);
        uint64_t v20 = v55;
      }

      v17 += v20;
      --v16;
    }

    while (v16);
    return v58;
  }

  return v15;
}

void *sub_10032EDD4(uint64_t a1, char *a2)
{
  unint64_t v37 = a2;
  uint64_t v4 = type metadata accessor for SecureLocation(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v44 = (uint64_t)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v43 = (uint64_t)&v36 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  double v14 = (double *)((char *)&v36 - v13);
  __chkstk_darwin(v12);
  uint64_t v17 = (double *)((char *)&v36 - v16);
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v45 = _swiftEmptyArrayStorage;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    uint64_t v20 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v38 = v2;
    uint64_t v39 = (v20 + 32) & ~v20;
    uint64_t v21 = a1 + v39;
    uint64_t v22 = _swiftEmptyArrayStorage;
    char v36 = (char *)&type metadata for () + 8;
    uint64_t v23 = *(void *)(v15 + 72);
    uint64_t v40 = v11;
    uint64_t v41 = v4;
    uint64_t v42 = v23;
    while (1)
    {
      sub_10001DC4C(v21, (uint64_t)v17, type metadata accessor for SecureLocation);
      double v24 = v17[2];
      sub_10001DC4C((uint64_t)v17, (uint64_t)v14, type metadata accessor for SecureLocation);
      if (v24 != 0.0) {
        break;
      }
      double v25 = v14[3];
      sub_100018C68((uint64_t)v14, type metadata accessor for SecureLocation);
      if (v25 != 0.0) {
        goto LABEL_9;
      }
      sub_100018C68((uint64_t)v17, type metadata accessor for SecureLocation);
LABEL_4:
      v21 += v23;
      if (!--v19) {
        return v45;
      }
    }

    sub_100018C68((uint64_t)v14, type metadata accessor for SecureLocation);
LABEL_9:
    uint64_t v26 = *(void *)((char *)v17 + *(int *)(v4 + 60));
    sub_10001DC4C((uint64_t)v17, (uint64_t)v11, type metadata accessor for SecureLocation);
    if (v26 == 1)
    {
      sub_100018C68((uint64_t)v11, type metadata accessor for SecureLocation);
      sub_10001DC4C((uint64_t)v17, v43, type metadata accessor for SecureLocation);
    }

    else
    {
      uint64_t v27 = *(void *)&v11[*(int *)(v4 + 60)];
      sub_100018C68((uint64_t)v11, type metadata accessor for SecureLocation);
      sub_10001DC4C((uint64_t)v17, v43, type metadata accessor for SecureLocation);
      if (v27 != 3)
      {
        sub_100018C68(v43, type metadata accessor for SecureLocation);
LABEL_17:
        uint64_t v23 = v42;
        sub_10002218C((uint64_t)v17, v44, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
        {
          sub_100033078(0, v22[2] + 1LL, 1);
          uint64_t v23 = v42;
        }

        uint64_t v22 = v45;
        unint64_t v35 = v45[2];
        unint64_t v34 = v45[3];
        if (v35 >= v34 >> 1)
        {
          sub_100033078(v34 > 1, v35 + 1, 1);
          uint64_t v23 = v42;
          uint64_t v22 = v45;
        }

        v22[2] = v35 + 1;
        sub_10002218C(v44, (uint64_t)v22 + v39 + v35 * v23, type metadata accessor for SecureLocation);
        uint64_t v11 = v40;
        uint64_t v4 = v41;
        goto LABEL_4;
      }
    }

    if (qword_10099B5E8 != -1) {
      swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    swift_retain();
    uint64_t v28 = v43;
    char v29 = sub_1005C825C(v43);
    swift_release();
    sub_100018C68(v28, type metadata accessor for SecureLocation);
    if ((v29 & 1) != 0)
    {
      uint64_t v30 = *(char **)v17;
      uint64_t v31 = (char *)*((void *)v17 + 1);
      uint64_t v32 = type metadata accessor for Transaction(0LL);
      __chkstk_darwin(v32);
      *(&v36 - 4) = v37;
      *(&v36 - 3) = v30;
      *(&v36 - 2) = v31;
      uint64_t v33 = v38;
      static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocationsSubscribeExpiringLocation",  70LL,  2LL,  sub_10033A580);
      uint64_t v38 = v33;
      uint64_t v22 = v45;
    }

    goto LABEL_17;
  }

  return result;
}

void sub_10032F184(char a1)
{
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v4 = String._bridgeToObjectiveC()();
  [v2 setValue:isa forKey:v4];

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_10000A720(v5, (uint64_t)qword_100A2AE08);
  oslog = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v7 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 67109120;
    int v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 8);
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, "LabelledLocations - Updating fetch done to %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

void sub_10032F318(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  swift_bridgeObjectRetain(a2);
  sub_100313810(&v8);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  sub_10032F184(1);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AE08);
  oslog = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v5 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v5,  "FetchLabelledLocations - Completed fetching location labels using decoder and saving them",  v6,  2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }
}

uint64_t sub_10032F430(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (uint64_t)sub_100012ED8(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v15, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v16;
    uint64_t v7 = v17;
    sub_100012ED8(v15, v16);
    uint64_t v8 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v6, v7);
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    BOOL v12 = v8 == 0x76697463616F7270LL && v9 == 0xE900000000000065LL;
    if (v12
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x76697463616F7270LL, 0xE900000000000065LL, v8, v9, 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      if (v10 == 0x776F6C6C616873LL && v11 == 0xE700000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x776F6C6C616873LL, 0xE700000000000000LL, v10, v11, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = 1LL;
        goto LABEL_10;
      }

      if (v10 == 1702259052 && v11 == 0xE400000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(1702259052LL, 0xE400000000000000LL, v10, v11, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = 2LL;
        goto LABEL_10;
      }

      if (v10 == 0xD000000000000013LL && v11 == 0x800000010085DAE0LL)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = 5LL;
        goto LABEL_10;
      }

      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010085DAE0LL, v10, v11, 0LL);
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
      {
        uint64_t v5 = 5LL;
        goto LABEL_10;
      }
    }

    uint64_t v5 = 0LL;
LABEL_10:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return v5;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v5;
}

uint64_t type metadata accessor for SecureLocationsCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd26SecureLocationsCoordinator);
}

uint64_t destroy for SecureLocationsCoordinator.SecureLocationsCommandPayload(void *a1)
{
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for SecureLocationsCoordinator.SecureLocationsCommandPayload( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v19 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  return a1;
}

__n128 initializeWithTake for SecureLocationsCoordinator.SecureLocationsCommandPayload( uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(*(void *)(a1 + 48));
  uint64_t v8 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(*(void *)(a1 + 80));
  uint64_t v10 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsCoordinator.SecureLocationsCommandPayload( uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsCoordinator.SecureLocationsCommandPayload( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCoordinator.SecureLocationsCommandPayload()
{
  return &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPushCommands( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10032FA94 + 4 * byte_1007FBB8D[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10032FAC8 + 4 * byte_1007FBB88[v4]))();
}

uint64_t sub_10032FAC8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10032FAD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10032FAD8LL);
  }
  return result;
}

uint64_t sub_10032FAE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10032FAECLL);
  }
  *(_BYTE *)__n128 result = a2 + 5;
  return result;
}

uint64_t sub_10032FAF0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10032FAF8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPushCommands()
{
  return &type metadata for SecureLocationsPushCommands;
}

unint64_t sub_10032FB18()
{
  unint64_t result = qword_1009A9538;
  if (!qword_1009A9538)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FBDF4, &type metadata for SecureLocationsPushCommands);
    atomic_store(result, (unint64_t *)&qword_1009A9538);
  }

  return result;
}

id sub_10032FB5C()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 BOOLForKey:v1];

  if ((_DWORD)v2)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AE08);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      uint64_t v8 = "FetchConfig: simulateFeatureDisabled is ON. secureLocations will be disabled";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_10000A720(v9, (uint64_t)qword_100A2AE08);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v6 = static os_log_type_t.debug.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      uint64_t v8 = "FetchConfig: simulateFeatureDisabled is false";
      goto LABEL_10;
    }
  }

  return v2;
}

void sub_10032FD10( uint64_t a1, void *a2, int a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v79 = a4;
  int v85 = a3;
  uint64_t v78 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v84 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v83 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v81 = *(void *)(v13 - 8);
  uint64_t v82 = v13;
  __chkstk_darwin(v13);
  uint64_t v80 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (void *)swift_allocObject(&unk_100950A60, 40LL, 7LL);
  __int128 v88 = a5;
  v15[2] = a5;
  void v15[3] = a6;
  v15[4] = a7;
  uint64_t v16 = qword_10099B5E0;
  uint64_t v86 = a6;
  swift_retain();
  swift_retain();
  if (v16 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_10000A720(v17, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain_n(a1, 2LL);
  id v19 = a2;
  uint64_t v87 = v18;
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc(38LL, -1LL);
    uint64_t v75 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v103[0] = v75;
    *(_DWORD *)uint64_t v22 = 134218754;
    *(void *)&__int128 v90 = *(void *)(a1 + 16);
    uint64_t v76 = a7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 8, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2082;
    uint64_t v74 = v22 + 14;
    id v23 = [v19 clientApp];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v77 = v15;
    uint64_t v25 = v24;
    uint64_t v26 = v19;
    unint64_t v28 = v27;

    *(void *)&__int128 v90 = sub_1003F11D4(v25, v28, (uint64_t *)v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 8, v74, v22 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    swift_bridgeObjectRetain(a1);
    uint64_t v30 = Array.description.getter(v29, &type metadata for String);
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    uint64_t v33 = v30;
    id v19 = v26;
    *(void *)&__int128 v90 = sub_1003F11D4(v33, v32, (uint64_t *)v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 8, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease_n(a1, 2LL);
    uint64_t v15 = v77;
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 32) = 1024;
    LODWORD(v90) = v85 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 4, v22 + 34, v22 + 38);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "SubscribeAndFetch location for %ld IDs for clientApp %{public}s ids %s forceKeyRefresh %{BOOL}d",  (uint8_t *)v22,  0x26u);
    uint64_t v34 = v75;
    swift_arrayDestroy(v75, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    unint64_t v35 = sub_10032FB5C();
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
    unint64_t v35 = sub_10032FB5C();
    if ((v35 & 1) != 0)
    {
LABEL_12:
      uint64_t v51 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe",  v53,  2u);
        swift_slowDealloc(v53, -1LL, -1LL);
      }

      [v19 subscriptionMode];
      id v54 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
      sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v56 = [v54 initWithExpiryTime:isa locations:15.0];

      type metadata accessor for SecureLocationsError(0LL);
      uint64_t v58 = v57;
      *(void *)&__int128 v90 = 6LL;
      unint64_t v59 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v60 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
      _BridgedStoredNSError.init(_:userInfo:)(v103, &v90, v59, v58, v60);
      uint64_t v61 = *(void **)&v103[0];
      sub_10031BDC0(v56, *(uint64_t *)&v103[0], v88);
      swift_release();

      return;
    }
  }

  uint64_t v36 = a1;
  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v37 = qword_100A2AE20;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v37, &type metadata for SecureLocationsConfig);
  swift_release();
  v103[10] = v100;
  v103[11] = v101;
  v103[12] = v102;
  v103[6] = v96;
  v103[7] = v97;
  v103[8] = v98;
  v103[9] = v99;
  v103[2] = v92;
  v103[3] = v93;
  v103[4] = v94;
  v103[5] = v95;
  v103[0] = v90;
  v103[1] = v91;
  unint64_t v35 = sub_100246384(v103);
  if ((BYTE8(v103[0]) & 1) == 0) {
    goto LABEL_12;
  }
  if (*(void *)(v36 + 16))
  {
    uint64_t v38 = v79;
    uint64_t v39 = swift_allocObject(&unk_100950A88, 64LL, 7LL);
    *(void *)(v39 + 16) = v36;
    *(void *)(v39 + 24) = v38;
    *(void *)(v39 + 32) = v19;
    *(_BYTE *)(v39 + 40) = v85 & 1;
    *(void *)(v39 + 48) = sub_100338FF0;
    *(void *)(v39 + 56) = v15;
    *(void *)&__int128 v92 = sub_100338B90;
    *((void *)&v92 + 1) = v39;
    *(void *)&__int128 v90 = _NSConcreteStackBlock;
    *((void *)&v90 + 1) = 1107296256LL;
    *(void *)&__int128 v91 = sub_1001C31E8;
    *((void *)&v91 + 1) = &unk_100950AA0;
    uint64_t v40 = v19;
    uint64_t v41 = _Block_copy(&v90);
    swift_bridgeObjectRetain(v36);
    id v42 = v40;
    swift_retain();
    uint64_t v43 = swift_retain();
    uint64_t v44 = v80;
    static DispatchQoS.unspecified.getter(v43);
    __int128 v89 = _swiftEmptyArrayStorage;
    uint64_t v45 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v46 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v47 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v48 = v83;
    uint64_t v49 = v46;
    uint64_t v50 = v78;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v89, v49, v47, v78, v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v44, v48, v41);
    _Block_release(v41);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v48, v50);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v44, v82);
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v62 = v19;
    unint64_t v63 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v64 = static os_log_type_t.default.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "No findMyIds specified for SubscribeAndFetch - not proceeding",  v65,  2u);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    id v66 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v68 = [v66 initWithDomain:v67 code:0 userInfo:0];

    [v62 subscriptionMode];
    id v69 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
    Class v70 = Array._bridgeToObjectiveC()().super.isa;
    id v71 = [v69 initWithExpiryTime:v70 locations:15.0];

    id v72 = v68;
    sub_10031BDC0(v71, (uint64_t)v68, v88);
    swift_release();
  }

void sub_1003305D4(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  int v83 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v82 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v80 = *(void *)(v12 - 8);
  uint64_t v81 = v12;
  __chkstk_darwin(v12);
  uint64_t v79 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = qword_10099B5E0;
  swift_retain();
  if (v14 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain_n(a1, 2LL);
  id v17 = a2;
  uint64_t v84 = v16;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc(38LL, -1LL);
    int v75 = v20;
    uint64_t v22 = v21;
    uint64_t v74 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v99[0] = v74;
    *(_DWORD *)uint64_t v22 = 134218754;
    *(void *)&__int128 v86 = *(void *)(a1 + 16);
    uint64_t v77 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 8, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2082;
    id v23 = [v17 clientApp];
    os_log_t v73 = v18;
    uint64_t v24 = a1;
    uint64_t v25 = v10;
    id v26 = v17;
    id v27 = v23;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v76 = a4;
    uint64_t v29 = v28;
    uint64_t v78 = a5;
    unint64_t v31 = v30;

    id v17 = v26;
    uint64_t v10 = v25;
    a1 = v24;
    *(void *)&__int128 v86 = sub_1003F11D4(v29, v31, (uint64_t *)v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 8, v22 + 14, v22 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    swift_bridgeObjectRetain(v24);
    uint64_t v33 = Array.description.getter(v32, &type metadata for String);
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v36 = v33;
    a4 = v76;
    *(void *)&__int128 v86 = sub_1003F11D4(v36, v35, (uint64_t *)v99);
    uint64_t v9 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 8, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease_n(v24, 2LL);
    a5 = v78;
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 32) = 1024;
    LODWORD(v86) = v83 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 4, v22 + 34, v22 + 38);
    os_log_t v37 = v73;
    _os_log_impl( (void *)&_mh_execute_header,  v73,  (os_log_type_t)v75,  "SubscribeAndFetch location for %ld IDs for clientApp %{public}s ids %s forceKeyRefresh %{BOOL}d",  (uint8_t *)v22,  0x26u);
    uint64_t v38 = v74;
    swift_arrayDestroy(v74, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    uint64_t v39 = sub_10032FB5C();
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
    uint64_t v39 = sub_10032FB5C();
    if ((v39 & 1) != 0)
    {
LABEL_12:
      os_log_type_t v52 = (os_log_s *)Logger.logObject.getter(v39);
      os_log_type_t v53 = static os_log_type_t.default.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        id v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v54 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe",  v54,  2u);
        swift_slowDealloc(v54, -1LL, -1LL);
      }

      [v17 subscriptionMode];
      id v55 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
      sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v57 = [v55 initWithExpiryTime:isa locations:15.0];

      type metadata accessor for SecureLocationsError(0LL);
      uint64_t v59 = v58;
      *(void *)&__int128 v86 = 6LL;
      unint64_t v60 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v61 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
      _BridgedStoredNSError.init(_:userInfo:)(v99, &v86, v60, v59, v61);
      uint64_t v62 = *(void **)&v99[0];
      Transaction.capture()();
      swift_release();

      return;
    }
  }

  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v40 = qword_100A2AE20;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v40, &type metadata for SecureLocationsConfig);
  swift_release();
  v99[10] = v96;
  v99[11] = v97;
  v99[12] = v98;
  v99[6] = v92;
  v99[7] = v93;
  v99[8] = v94;
  v99[9] = v95;
  v99[2] = v88;
  v99[3] = v89;
  v99[4] = v90;
  v99[5] = v91;
  v99[0] = v86;
  v99[1] = v87;
  uint64_t v39 = sub_100246384(v99);
  if ((BYTE8(v99[0]) & 1) == 0) {
    goto LABEL_12;
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v84 = *(void *)(a4 + 296);
    uint64_t v41 = swift_allocObject(&unk_1009506F0, 64LL, 7LL);
    *(void *)(v41 + 16) = a1;
    *(void *)(v41 + 24) = a4;
    *(void *)(v41 + 32) = v17;
    *(_BYTE *)(v41 + 40) = v83 & 1;
    *(void *)(v41 + 48) = j___s10FindMyBase11TransactionC7captureyyF;
    *(void *)(v41 + 56) = a5;
    *(void *)&__int128 v88 = sub_100338B90;
    *((void *)&v88 + 1) = v41;
    *(void *)&__int128 v86 = _NSConcreteStackBlock;
    *((void *)&v86 + 1) = 1107296256LL;
    *(void *)&__int128 v87 = sub_1001C31E8;
    *((void *)&v87 + 1) = &unk_100950708;
    id v42 = _Block_copy(&v86);
    uint64_t v43 = a1;
    uint64_t v44 = v42;
    swift_bridgeObjectRetain(v43);
    id v45 = v17;
    swift_retain();
    uint64_t v46 = swift_retain();
    uint64_t v47 = v79;
    static DispatchQoS.unspecified.getter(v46);
    int v85 = _swiftEmptyArrayStorage;
    uint64_t v48 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v49 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v50 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v51 = v82;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v85, v49, v50, v9, v48);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v47, v51, v44);
    _Block_release(v44);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v51, v9);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v47, v81);
    swift_release();
    swift_release();
  }

  else
  {
    unint64_t v63 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v64 = static os_log_type_t.default.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "No findMyIds specified for SubscribeAndFetch - not proceeding",  v65,  2u);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    id v66 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v68 = [v66 initWithDomain:v67 code:0 userInfo:0];

    [v17 subscriptionMode];
    id v69 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
    Class v70 = Array._bridgeToObjectiveC()().super.isa;
    id v71 = [v69 initWithExpiryTime:v70 locations:15.0];

    id v72 = v68;
    Transaction.capture()();
    swift_release();
  }

uint64_t sub_100330E44(uint64_t a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v14 = [a2 clientApp];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  if (v15 == 0xD000000000000017LL && v17 == 0x800000010085B0C0LL)
  {
    swift_bridgeObjectRelease();
    char v18 = 1;
  }

  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, 0xD000000000000017LL, 0x800000010085B0C0LL, 0LL);
    swift_bridgeObjectRelease();
  }

  uint64_t v19 = swift_allocObject(&unk_1009514B0, 72LL, 7LL);
  char v20 = v18 & 1;
  *(_BYTE *)(v19 + 16) = v20;
  *(void *)(v19 + 24) = a3;
  *(void *)(v19 + 32) = a4;
  *(void *)(v19 + 40) = a2;
  *(void *)(v19 + 48) = a5;
  *(void *)(v19 + 56) = a6;
  *(void *)(v19 + 64) = a7;
  swift_retain();
  swift_retain();
  id v21 = a2;
  swift_retain();
  swift_retain();
  sub_10025C0EC(a1, v20, (uint64_t)sub_10033A200, v19);
  return swift_release();
}

uint64_t sub_100330F98( uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v112 = a7;
  uint64_t v113 = a8;
  uint64_t v111 = a6;
  id v108 = a4;
  uint64_t v109 = a5;
  int v134 = a2;
  uint64_t v114 = a1;
  uint64_t v110 = a9;
  uint64_t v10 = type metadata accessor for SecureLocation(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = __chkstk_darwin(v12);
  BOOL v136 = (unint64_t *)((char *)v106.n128_u64 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v132 = (char *)&v106 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v144 = (uint64_t *)((char *)&v106 - v18);
  uint64_t v19 = __chkstk_darwin(v17);
  id v21 = (char *)&v106 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v106 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v123 = a3;
  if (*(void *)(*(void *)(a3 + 104) + 16LL))
  {
    uint64_t v138 = (uint64_t)&v106 - v26;
    unint64_t v115 = (uint64_t *)v27;
    uint64_t v116 = v25;
    if (qword_10099B5E8 != -1) {
      swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    uint64_t v28 = qword_100A2AE20;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v28, &type metadata for SecureLocationsConfig);
    swift_release();
    __int128 v160 = v149[10];
    __int128 v161 = v149[11];
    __int128 v162 = v149[12];
    __int128 v156 = v149[6];
    __int128 v157 = v149[7];
    __int128 v158 = v149[8];
    __int128 v159 = v149[9];
    __int128 v152 = v149[2];
    __int128 v153 = v149[3];
    __int128 v154 = v149[4];
    __int128 v155 = v149[5];
    __int128 v150 = v149[0];
    __int128 v151 = v149[1];
    sub_100246384(&v150);
    uint64_t v122 = *(void *)(v114 + 16);
    if (v122)
    {
      double v29 = *(double *)&v151;
      unint64_t v120 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v119 = v114 + v120;
      uint64_t v30 = *(void *)(v11 + 72);
      uint64_t v107 = &v146;
      __n128 v31 = swift_bridgeObjectRetain(v114);
      uint64_t v32 = 0LL;
      uint64_t v33 = _swiftEmptyArrayStorage;
      v31.n128_u64[0] = 136315906LL;
      __n128 v129 = v31;
      __n128 v128 = (char *)&type metadata for Any + 8;
      v31.n128_u64[0] = 136315650LL;
      __n128 v127 = v31;
      v31.n128_u64[0] = 136315394LL;
      __n128 v106 = v31;
      uint64_t v34 = (uint64_t)v132;
      uint64_t v35 = v138;
      uint64_t v117 = v21;
      char v118 = v24;
      uint64_t v121 = v30;
      while (1)
      {
        uint64_t v126 = v32;
        sub_10001DC4C(v119 + v30 * v32, v35, type metadata accessor for SecureLocation);
        sub_10001DC4C(v35, (uint64_t)v24, type metadata accessor for SecureLocation);
        uint64_t v36 = *(void *)(v123 + 104);
        if (!*(void *)(v36 + 16)) {
          goto LABEL_48;
        }
        uint64_t v140 = *(void *)(v36 + 16);
        __int128 v124 = v33;
        swift_bridgeObjectRetain(v36);
        uint64_t v125 = v37;
        uint64_t v38 = (unint64_t *)(v37 + 56);
        while (1)
        {
          uint64_t v39 = v34;
          uint64_t v40 = v35;
          uint64_t v42 = *(v38 - 2);
          uint64_t v41 = *(v38 - 1);
          unint64_t v43 = *v38;
          double v44 = *((double *)v38 + 3);
          double v45 = *((double *)v38 + 4);
          unint64_t v46 = v38[5];
          unint64_t v47 = v38[7];
          uint64_t v141 = v38[6];
          uint64_t v139 = v38;
          unint64_t v48 = v38[2];
          uint64_t v49 = qword_10099B5E0;
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v43);
          swift_bridgeObjectRetain(v48);
          swift_bridgeObjectRetain(v47);
          if (v49 != -1) {
            swift_once(&qword_10099B5E0, sub_1005C6624);
          }
          uint64_t v50 = type metadata accessor for Logger(0LL);
          uint64_t v51 = sub_10000A720(v50, (uint64_t)qword_100A2AE08);
          sub_10001DC4C(v40, (uint64_t)v144, type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n(v42, 4LL);
          swift_bridgeObjectRetain_n(v43, 4LL);
          swift_bridgeObjectRetain_n(v48, 4LL);
          uint64_t v52 = swift_bridgeObjectRetain_n(v47, 4LL);
          uint64_t v137 = v51;
          os_log_type_t v53 = (os_log_s *)Logger.logObject.getter(v52);
          os_log_type_t v54 = static os_log_type_t.info.getter(v53);
          BOOL v55 = os_log_type_enabled(v53, v54);
          unint64_t v142 = v48;
          uint64_t v143 = v42;
          uint64_t v135 = v41;
          if (v55)
          {
            uint64_t v56 = swift_slowAlloc(42LL, -1LL);
            id v133 = (id)swift_slowAlloc(96LL, -1LL);
            uint64_t v145 = (uint64_t)v133;
            *(_DWORD *)uint64_t v56 = v129.n128_u32[0];
            swift_bridgeObjectRetain(v43);
            *(void *)(v56 + 4) = sub_1003F11D4(v41, v43, &v145);
            swift_bridgeObjectRelease();
            *(_WORD *)(v56 + 12) = 2080;
            if (v47) {
              uint64_t v57 = v141;
            }
            else {
              uint64_t v57 = 1818848800LL;
            }
            if (v47) {
              unint64_t v58 = v47;
            }
            else {
              unint64_t v58 = 0xE400000000000000LL;
            }
            swift_bridgeObjectRetain(v47);
            *(void *)(v56 + 14) = sub_1003F11D4(v57, v58, &v145);
            swift_bridgeObjectRelease_n(v47, 2LL);
            swift_bridgeObjectRelease_n(v48, 2LL);
            swift_bridgeObjectRelease_n(v43, 2LL);
            swift_bridgeObjectRelease_n(v42, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v56 + 22) = 2080;
            uint64_t v59 = *v144;
            unint64_t v60 = v144[1];
            swift_bridgeObjectRetain(v60);
            *(void *)(v56 + 24) = sub_1003F11D4(v59, v60, &v145);
            uint64_t v61 = v132;
            swift_bridgeObjectRelease();
            sub_100018C68((uint64_t)v144, type metadata accessor for SecureLocation);
            *(_WORD *)(v56 + 32) = 2048;
            *(void *)(v56 + 34) = v46;
            swift_bridgeObjectRelease_n(v47, 2LL);
            swift_bridgeObjectRelease_n(v48, 2LL);
            swift_bridgeObjectRelease_n(v43, 2LL);
            swift_bridgeObjectRelease_n(v42, 2LL);
            uint64_t v34 = (uint64_t)v61;
            uint64_t v35 = v138;
            _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "LabelledLocations Checking label %s %s %s %f",  (uint8_t *)v56,  0x2Au);
            id v62 = v133;
            swift_arrayDestroy(v133, 3LL, v128);
            swift_slowDealloc(v62, -1LL, -1LL);
            swift_slowDealloc(v56, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v47, 2LL);
            swift_bridgeObjectRelease_n(v48, 2LL);
            swift_bridgeObjectRelease_n(v43, 2LL);
            swift_bridgeObjectRelease_n(v42, 2LL);
            sub_100018C68((uint64_t)v144, type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n(v47, 2LL);
            swift_bridgeObjectRelease_n(v48, 2LL);
            swift_bridgeObjectRelease_n(v43, 2LL);
            swift_bridgeObjectRelease_n(v42, 2LL);
            uint64_t v35 = v40;
            uint64_t v34 = v39;
          }

          sub_10001DC4C(v35, v34, type metadata accessor for SecureLocation);
          if (!v47 && (v134 & 1) != 0)
          {
            sub_100018C68(v34, type metadata accessor for SecureLocation);
            goto LABEL_24;
          }

          sub_10001DC4C(v34, (uint64_t)v136, type metadata accessor for SecureLocation);
          if ((v134 & 1) != 0)
          {
            sub_100018C68((uint64_t)v136, type metadata accessor for SecureLocation);
            sub_100018C68(v34, type metadata accessor for SecureLocation);
            swift_bridgeObjectRelease();
            goto LABEL_9;
          }

          if (v47) {
            break;
          }
          swift_bridgeObjectRetain(v136[1]);
          sub_100018C68((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_100018C68(v34, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_9:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v38 = v139 + 11;
          if (!--v140)
          {
            swift_bridgeObjectRelease();
            id v21 = v117;
            uint64_t v24 = v118;
            uint64_t v33 = v124;
            goto LABEL_48;
          }
        }

        if (v141 == *v136 && v47 == v136[1])
        {
          swift_bridgeObjectRetain(v47);
          sub_100018C68((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_100018C68(v34, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
        }

        else
        {
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v47, *v136, v136[1], 0LL);
          swift_bridgeObjectRetain(v47);
          sub_100018C68((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_100018C68(v34, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          if ((v78 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v35 = v138;
            goto LABEL_9;
          }
        }

uint64_t sub_100331E04( uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = (void *)swift_allocObject(&unk_100951460, 64LL, 7LL);
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  uint64_t v35 = a7;
  v16[6] = a8;
  v16[7] = a9;
  uint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v34 = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v18 = [v17 standardUserDefaults];
  NSString v19 = String._bridgeToObjectiveC()();
  unsigned int v20 = [v18 BOOLForKey:v19];

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = sub_10000A720(v21, (uint64_t)qword_100A2AE08);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v33 = a5;
    uint64_t v25 = a6;
    uint64_t v26 = a8;
    uint64_t v27 = a1;
    uint64_t v28 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v28 = 67109120;
    LODWORD(v37) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 4, v28 + 4, v28 + 8);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "LabelledLocations Resolve Label isfetchdone %{BOOL}d", v28, 8u);
    double v29 = v28;
    a1 = v27;
    a8 = v26;
    a6 = v25;
    a5 = v33;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  if (v20)
  {
    if (!*(void *)(*(void *)(a3 + 104) + 16LL))
    {
      uint64_t v37 = sub_100577748();
      swift_bridgeObjectRetain(v37);
      sub_100313810((uint64_t *)&v37);
      swift_bridgeObjectRelease();
      *(void *)(a3 + 104) = v37;
      swift_bridgeObjectRelease();
    }

    id v30 = v34;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100330F98(a1, a2 & 1, a3, v30, a5, a6, v35, a8, a9);
    swift_release();

    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v31 = swift_allocObject(&unk_100951488, 56LL, 7LL);
    *(void *)(v31 + 16) = a3;
    *(void *)(v31 + 24) = a1;
    *(_BYTE *)(v31 + 32) = a2 & 1;
    *(void *)(v31 + 40) = sub_10033A148;
    *(void *)(v31 + 48) = v16;
    swift_retain();
    swift_bridgeObjectRetain(a1);
    swift_retain();
    sub_1003258B0((uint64_t)sub_100339640, v31);
  }

  swift_release();
  return swift_release();
}

void sub_10033218C(uint64_t a1, char a2, uint64_t a3, void (**a4)(const void *, void *))
{
  uint64_t v99 = a3;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v7);
  uint64_t v98 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v101 = type metadata accessor for SecureLocationsSubmitEndpoint(0LL);
  uint64_t v9 = __chkstk_darwin(v101);
  __int128 v104 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v97 = (uint64_t)&v94 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v94 - v13;
  uint64_t v15 = type metadata accessor for SecureLocation(0LL);
  uint64_t v16 = __chkstk_darwin(v15);
  id v18 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  unsigned int v20 = (char *)&v94 - v19;
  uint64_t v21 = swift_allocObject(&unk_100950EE8, 24LL, 7LL);
  __int128 v102 = a4;
  uint64_t v103 = v21;
  *(void *)(v21 + 16) = a4;
  _Block_copy(a4);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_10000A720(v22, (uint64_t)qword_100A2AE08);
  sub_10001DC4C(a1, (uint64_t)v20, type metadata accessor for SecureLocation);
  uint64_t v96 = a1;
  uint64_t v24 = sub_10001DC4C(a1, (uint64_t)v18, type metadata accessor for SecureLocation);
  uint64_t v105 = v23;
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.default.getter(v25);
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v95 = v15;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    uint64_t v100 = v14;
    uint64_t v29 = v28;
    uint64_t v30 = swift_slowAlloc(64LL, -1LL);
    uint64_t v108 = v30;
    *(_DWORD *)uint64_t v29 = 136446466;
    unint64_t v31 = sub_1005EECA8(*(void *)&v20[*(int *)(v15 + 60)]);
    uint64_t v106 = sub_1003F11D4(v31, v32, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v20, type metadata accessor for SecureLocation);
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v33 = sub_1005EE53C();
    uint64_t v106 = sub_1003F11D4(v33, v34, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v18, type metadata accessor for SecureLocation);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "publishLocation with reason %{public}s location: %s",  (uint8_t *)v29,  0x16u);
    swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    uint64_t v14 = v100;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v20, type metadata accessor for SecureLocation);
    sub_100018C68((uint64_t)v18, type metadata accessor for SecureLocation);
  }

  uint64_t v35 = (uint64_t)v104;
  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  swift_retain();
  char v36 = sub_1005C7C90();
  uint64_t v37 = swift_release();
  if ((v36 & 1) != 0 || (a2 & 1) != 0)
  {
    uint64_t v46 = enum case for FMNAccountType.searchParty(_:);
    uint64_t v47 = type metadata accessor for FMNAccountType(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104LL))(v14, v46, v47);
    sub_100128210((uint64_t)&v14[*(int *)(v101 + 20)]);
    uint64_t v48 = v97;
    uint64_t v49 = sub_10001DC4C((uint64_t)v14, v97, type metadata accessor for SecureLocationsSubmitEndpoint);
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.default.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      uint64_t v108 = v53;
      *(_DWORD *)uint64_t v52 = 136315138;
      uint64_t v100 = v14;
      sub_10001DC4C(v48, v35, type metadata accessor for SecureLocationsSubmitEndpoint);
      uint64_t v54 = String.init<A>(describing:)(v35, v101);
      uint64_t v106 = sub_1003F11D4(v54, v55, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v52 + 4, v52 + 12);
      uint64_t v35 = (uint64_t)v104;
      swift_bridgeObjectRelease();
      uint64_t v14 = v100;
      sub_100018C68(v48, type metadata accessor for SecureLocationsSubmitEndpoint);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "SubmitLocation endpoint %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v48, type metadata accessor for SecureLocationsSubmitEndpoint);
    }

    uint64_t v56 = v99;
    uint64_t v57 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
    swift_allocObject(v57, *(unsigned int *)(v57 + 48), *(unsigned __int16 *)(v57 + 52));
    uint64_t v58 = type metadata accessor for FMNMockingPreferences(0LL);
    uint64_t v59 = v98;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56LL))(v98, 1LL, 1LL, v58);
    uint64_t v60 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v59);
    uint64_t v61 = type metadata accessor for ServerInteractionController(0LL);
    uint64_t v62 = swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
    sub_10001DC4C((uint64_t)v14, v35, type metadata accessor for SecureLocationsSubmitEndpoint);
    uint64_t v63 = sub_10043199C(v35, v60, v62);
    id v64 = [(id)objc_opt_self(AKDevice) currentDevice];
    if (v64
      && (double v65 = v64,
          id v66 = [v64 uniqueDeviceIdentifier],
          v65,
          v66))
    {
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
      uint64_t v69 = v68;

      uint64_t v70 = sub_100004AEC(&qword_1009A34B0);
      OS_dispatch_queue.sync<A>(execute:)(sub_100338BF0, v56, v70);
      uint64_t v71 = v109;
      if (v109)
      {
        uint64_t v100 = v14;
        uint64_t v105 = 0LL;
        uint64_t v72 = v108;
        uint64_t v73 = swift_allocBox(v95);
        unint64_t v75 = (void *)v74;
        uint64_t v76 = v63;
        uint64_t v77 = v96;
        sub_10001DC4C(v96, v74, type metadata accessor for SecureLocation);
        *unint64_t v75 = v67;
        v75[1] = v69;
        swift_bridgeObjectRetain(v69);
        swift_bridgeObjectRelease();
        uint64_t v78 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v78);
        *(&v94 - 10) = v56;
        *(&v94 - 9) = v73;
        uint64_t v79 = v103;
        *(&v94 - 8) = (uint64_t)sub_10009C9E4;
        *(&v94 - 7) = v79;
        *(&v94 - 6) = v77;
        *(&v94 - 5) = v72;
        *(&v94 - 4) = v71;
        *(&v94 - 3) = v67;
        *(&v94 - 2) = v69;
        *(&v94 - 1) = v76;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.publishEncodedPayload",  51LL,  2LL,  sub_10033968C);
        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v100, type metadata accessor for SecureLocationsSubmitEndpoint);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }

      uint64_t v89 = swift_bridgeObjectRelease();
      unint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
      os_log_type_t v91 = static os_log_type_t.error.getter(v90);
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "No APS token. Not proceeding", v92, 2u);
        swift_slowDealloc(v92, -1LL, -1LL);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
      id v93 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v84 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v85 = [v93 initWithDomain:v84 code:13 userInfo:0];
    }

    else
    {
      uint64_t v80 = (os_log_s *)Logger.logObject.getter(v64);
      os_log_type_t v81 = static os_log_type_t.error.getter(v80);
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v82 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v82 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v80,  v81,  "Unable to get device identifier for server SubscribeAndFetch",  v82,  2u);
        swift_slowDealloc(v82, -1LL, -1LL);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
      id v83 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v84 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v85 = [v83 initWithDomain:v84 code:0 userInfo:0];
    }

    __int128 v86 = v85;

    id v87 = v86;
    uint64_t v88 = (void *)_convertErrorToNSError(_:)(v87);
    v102[2](v102, v88);

    swift_release();
    sub_100018C68((uint64_t)v14, type metadata accessor for SecureLocationsSubmitEndpoint);
    swift_release();
  }

  else
  {
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Not a location publishing device. Not publishing location",  v40,  2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    id v41 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v43 = [v41 initWithDomain:v42 code:12 userInfo:0];

    id v44 = v43;
    double v45 = (void *)_convertErrorToNSError(_:)(v44);
    v102[2](v102, v45);
    swift_release();
  }

void sub_100332C10(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v125 = a4;
  int v148 = a2;
  uint64_t v127 = a1;
  uint64_t v7 = type metadata accessor for SecureLocation(0LL);
  uint64_t v126 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v149 = (uint64_t *)((char *)&v121 - v10);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v145 = (char *)&v121 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  __int128 v155 = (uint64_t *)((char *)&v121 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v121 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v121 - v22;
  uint64_t v136 = a3;
  uint64_t v24 = &off_10099B000;
  if (*(void *)(*(void *)(a3 + 104) + 16LL))
  {
    uint64_t v131 = v21;
    __n128 v128 = (uint64_t *)v20;
    uint64_t v129 = v19;
    _Block_copy(a5);
    uint64_t v122 = a5;
    _Block_copy(a5);
    if (qword_10099B5E8 != -1) {
      swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    uint64_t v25 = qword_100A2AE20;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v25, &type metadata for SecureLocationsConfig);
    swift_release();
    __int128 v172 = v161[10];
    __int128 v173 = v161[11];
    __int128 v174 = v161[12];
    __int128 v168 = v161[6];
    __int128 v169 = v161[7];
    __int128 v170 = v161[8];
    __int128 v171 = v161[9];
    __int128 v164 = v161[2];
    __int128 v165 = v161[3];
    __int128 v166 = v161[4];
    __int128 v167 = v161[5];
    __int128 v162 = v161[0];
    __int128 v163 = v161[1];
    sub_100246384(&v162);
    uint64_t v135 = *(void *)(v127 + 16);
    if (v135)
    {
      double v26 = *(double *)&v163;
      unint64_t v134 = (*(unsigned __int8 *)(v126 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
      uint64_t v133 = v127 + v134;
      uint64_t v27 = *(void *)(v126 + 72);
      __int128 v124 = &v158;
      __n128 v28 = swift_bridgeObjectRetain(v127);
      uint64_t v29 = 0LL;
      uint64_t v30 = (uint64_t)v23;
      unint64_t v31 = _swiftEmptyArrayStorage;
      v28.n128_u64[0] = 136315906LL;
      __n128 v142 = v28;
      uint64_t v141 = (char *)&type metadata for Any + 8;
      v28.n128_u64[0] = 136315650LL;
      __n128 v140 = v28;
      v28.n128_u64[0] = 136315394LL;
      __n128 v123 = v28;
      uint64_t v32 = v131;
      id v130 = v17;
      uint64_t v151 = v30;
      uint64_t v132 = v27;
      while (1)
      {
        uint64_t v139 = v29;
        sub_10001DC4C(v133 + v27 * v29, v30, type metadata accessor for SecureLocation);
        sub_10001DC4C(v30, v32, type metadata accessor for SecureLocation);
        uint64_t v33 = *(void *)(v136 + 104);
        uint64_t v34 = (uint64_t)v155;
        if (!*(void *)(v33 + 16)) {
          goto LABEL_49;
        }
        uint64_t v153 = *(void *)(v33 + 16);
        uint64_t v138 = v31;
        swift_bridgeObjectRetain(v33);
        uint64_t v137 = v35;
        char v36 = (unint64_t *)(v35 + 56);
        uint64_t v37 = v151;
        while (1)
        {
          uint64_t v38 = *(v36 - 2);
          uint64_t v152 = *(v36 - 1);
          unint64_t v39 = *v36;
          double v40 = *((double *)v36 + 3);
          double v41 = *((double *)v36 + 4);
          unint64_t v42 = v36[5];
          unint64_t v43 = v36[7];
          uint64_t v154 = v36[6];
          id v44 = v24[188];
          uint64_t v45 = v36[2];
          swift_bridgeObjectRetain(v38);
          swift_bridgeObjectRetain(v39);
          swift_bridgeObjectRetain(v45);
          swift_bridgeObjectRetain(v43);
          uint64_t v46 = type metadata accessor for Logger(0LL);
          uint64_t v47 = sub_10000A720(v46, (uint64_t)qword_100A2AE08);
          sub_10001DC4C(v37, v34, type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n(v38, 4LL);
          swift_bridgeObjectRetain_n(v39, 4LL);
          swift_bridgeObjectRetain_n(v45, 4LL);
          swift_bridgeObjectRetain_n(v43, 4LL);
          uint64_t v150 = v47;
          uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
          os_log_type_t v50 = static os_log_type_t.info.getter(v49);
          int v51 = v50;
          BOOL v52 = os_log_type_enabled(v49, v50);
          uint64_t v156 = v45;
          if (v52)
          {
            uint64_t v53 = swift_slowAlloc(42LL, -1LL);
            id v147 = (id)swift_slowAlloc(96LL, -1LL);
            uint64_t v157 = (uint64_t)v147;
            *(_DWORD *)uint64_t v53 = v142.n128_u32[0];
            swift_bridgeObjectRetain(v39);
            *(void *)(v53 + 4) = sub_1003F11D4(v152, v39, &v157);
            swift_bridgeObjectRelease();
            *(_WORD *)(v53 + 12) = 2080;
            if (v43) {
              uint64_t v54 = v154;
            }
            else {
              uint64_t v54 = 1818848800LL;
            }
            LODWORD(v146) = v51;
            if (v43) {
              unint64_t v55 = v43;
            }
            else {
              unint64_t v55 = 0xE400000000000000LL;
            }
            swift_bridgeObjectRetain(v43);
            *(void *)(v53 + 14) = sub_1003F11D4(v54, v55, &v157);
            swift_bridgeObjectRelease_n(v43, 2LL);
            swift_bridgeObjectRelease_n(v45, 2LL);
            swift_bridgeObjectRelease_n(v39, 2LL);
            swift_bridgeObjectRelease_n(v38, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v53 + 22) = 2080;
            uint64_t v56 = *v155;
            unint64_t v57 = v155[1];
            swift_bridgeObjectRetain(v57);
            uint64_t v58 = v56;
            uint64_t v34 = (uint64_t)v155;
            *(void *)(v53 + 24) = sub_1003F11D4(v58, v57, &v157);
            swift_bridgeObjectRelease();
            sub_100018C68(v34, type metadata accessor for SecureLocation);
            *(_WORD *)(v53 + 32) = 2048;
            *(void *)(v53 + 34) = v42;
            swift_bridgeObjectRelease_n(v43, 2LL);
            swift_bridgeObjectRelease_n(v156, 2LL);
            unint64_t v59 = v39;
            swift_bridgeObjectRelease_n(v39, 2LL);
            swift_bridgeObjectRelease_n(v38, 2LL);
            _os_log_impl( (void *)&_mh_execute_header,  v49,  (os_log_type_t)v146,  "LabelledLocations Checking label %s %s %s %f",  (uint8_t *)v53,  0x2Au);
            id v60 = v147;
            swift_arrayDestroy(v147, 3LL, v141);
            swift_slowDealloc(v60, -1LL, -1LL);
            uint64_t v61 = (uint64_t)v145;
            swift_slowDealloc(v53, -1LL, -1LL);

            uint64_t v62 = v38;
          }

          else
          {
            swift_bridgeObjectRelease_n(v43, 2LL);
            swift_bridgeObjectRelease_n(v45, 2LL);
            swift_bridgeObjectRelease_n(v39, 2LL);
            swift_bridgeObjectRelease_n(v38, 2LL);
            sub_100018C68(v34, type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n(v43, 2LL);
            swift_bridgeObjectRelease_n(v45, 2LL);
            unint64_t v59 = v39;
            swift_bridgeObjectRelease_n(v39, 2LL);
            swift_bridgeObjectRelease_n(v38, 2LL);
            uint64_t v62 = v38;
            uint64_t v61 = (uint64_t)v145;
          }

          uint64_t v37 = v151;
          sub_10001DC4C(v151, v61, type metadata accessor for SecureLocation);
          if (!v43 && (v148 & 1) != 0)
          {
            sub_100018C68(v61, type metadata accessor for SecureLocation);
            goto LABEL_25;
          }

          sub_10001DC4C(v61, (uint64_t)v149, type metadata accessor for SecureLocation);
          if ((v148 & 1) != 0)
          {
            sub_100018C68((uint64_t)v149, type metadata accessor for SecureLocation);
            sub_100018C68(v61, type metadata accessor for SecureLocation);
            swift_bridgeObjectRelease();
            goto LABEL_9;
          }

          if (!v43)
          {
            swift_bridgeObjectRetain(v149[1]);
            sub_100018C68((uint64_t)v149, type metadata accessor for SecureLocation);
            sub_100018C68(v61, type metadata accessor for SecureLocation);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v156 = v59;
            goto LABEL_9;
          }

          if (v154 == *v149 && v43 == v149[1]) {
            break;
          }
          char v80 = _stringCompareWithSmolCheck(_:_:expecting:)(v154, v43, *v149, v149[1], 0LL);
          swift_bridgeObjectRetain(v43);
          sub_100018C68((uint64_t)v149, type metadata accessor for SecureLocation);
          sub_100018C68(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          if ((v80 & 1) != 0) {
            goto LABEL_25;
          }
          swift_bridgeObjectRelease();
          uint64_t v34 = (uint64_t)v155;
LABEL_9:
          uint64_t v24 = &off_10099B000;
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v36 += 11;
          if (!--v153)
          {
            swift_bridgeObjectRelease();
            unint64_t v31 = v138;
            uint64_t v17 = v130;
            uint64_t v32 = v131;
            goto LABEL_49;
          }
        }

        swift_bridgeObjectRetain(v43);
        sub_100018C68((uint64_t)v149, type metadata accessor for SecureLocation);
        sub_100018C68(v61, type metadata accessor for SecureLocation);
        swift_bridgeObjectRelease();
LABEL_25:
        id v63 = [objc_allocWithZone(CLLocation) initWithLatitude:v40 longitude:v41];
        id v64 = [objc_allocWithZone(CLLocation) initWithLatitude:*(double *)(v37 + 24) longitude:*(double *)(v37 + 16)];
        id v147 = v63;
        [v63 distanceFromLocation:v64];
        double v66 = v65;
        swift_bridgeObjectRetain_n(v62, 2LL);
        unint64_t v67 = v59;
        swift_bridgeObjectRetain_n(v59, 2LL);
        uint64_t v68 = v156;
        swift_bridgeObjectRetain_n(v156, 2LL);
        swift_bridgeObjectRetain_n(v43, 2LL);
        uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
        os_log_type_t v71 = static os_log_type_t.info.getter(v70);
        BOOL v72 = os_log_type_enabled(v70, v71);
        id v146 = v64;
        if (v72)
        {
          uint64_t v73 = swift_slowAlloc(32LL, -1LL);
          uint64_t v144 = v62;
          uint64_t v74 = v73;
          id v143 = (id)swift_slowAlloc(64LL, -1LL);
          uint64_t v157 = (uint64_t)v143;
          *(_DWORD *)uint64_t v74 = v140.n128_u32[0];
          swift_bridgeObjectRetain(v67);
          *(void *)(v74 + 4) = sub_1003F11D4(v152, v67, &v157);
          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 12) = 2080;
          if (v43) {
            uint64_t v75 = v154;
          }
          else {
            uint64_t v75 = 0x206C696E20LL;
          }
          uint64_t v76 = v68;
          if (v43) {
            unint64_t v77 = v43;
          }
          else {
            unint64_t v77 = 0xE500000000000000LL;
          }
          swift_bridgeObjectRetain(v43);
          *(void *)(v74 + 14) = sub_1003F11D4(v75, v77, &v157);
          swift_bridgeObjectRelease_n(v43, 2LL);
          swift_bridgeObjectRelease_n(v76, 2LL);
          swift_bridgeObjectRelease_n(v67, 2LL);
          swift_bridgeObjectRelease_n(v144, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 22) = 2048;
          *(double *)(v74 + 24) = v66;
          _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "LabelledLocations %s %s Label Distance %f",  (uint8_t *)v74,  0x20u);
          id v78 = v143;
          swift_arrayDestroy(v143, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v78, -1LL, -1LL);
          uint64_t v24 = &off_10099B000;
          swift_slowDealloc(v74, -1LL, -1LL);

          unint64_t v79 = v67;
        }

        else
        {

          swift_bridgeObjectRelease_n(v43, 2LL);
          swift_bridgeObjectRelease_n(v68, 2LL);
          swift_bridgeObjectRelease_n(v67, 2LL);
          swift_bridgeObjectRelease_n(v62, 2LL);
          unint64_t v79 = v67;
          uint64_t v24 = &off_10099B000;
        }

        uint64_t v34 = (uint64_t)v155;
        uint64_t v37 = v151;
        if (v66 > v26)
        {

          swift_bridgeObjectRelease();
          goto LABEL_10;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v32 = v131;
        swift_beginAccess(v131, &v160, 1LL, 0LL);
        uint64_t v81 = v129;
        uint64_t v82 = (void *)(v32 + *(int *)(v129 + 64));
        *uint64_t v82 = v152;
        v82[1] = v79;
        swift_bridgeObjectRelease();
        id v83 = v128;
        uint64_t v84 = sub_10001DC4C(v37, (uint64_t)v128, type metadata accessor for SecureLocation);
        id v85 = (os_log_s *)Logger.logObject.getter(v84);
        os_log_type_t v86 = static os_log_type_t.default.getter(v85);
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = swift_slowAlloc(22LL, -1LL);
          uint64_t v156 = swift_slowAlloc(64LL, -1LL);
          uint64_t v159 = v156;
          *(_DWORD *)uint64_t v87 = v123.n128_u32[0];
          uint64_t v88 = (uint64_t *)(v32 + *(int *)(v81 + 64));
          uint64_t v89 = v88[1];
          uint64_t v157 = *v88;
          uint64_t v158 = v89;
          swift_bridgeObjectRetain(v89);
          uint64_t v90 = sub_100004AEC(&qword_1009A34B0);
          uint64_t v91 = String.init<A>(describing:)(&v157, v90);
          uint64_t v157 = sub_1003F11D4(v91, v92, &v159);
          id v93 = v124;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v124, v87 + 4, v87 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v87 + 12) = 2080;
          uint64_t v94 = *v83;
          unint64_t v95 = v83[1];
          swift_bridgeObjectRetain(v95);
          uint64_t v157 = sub_1003F11D4(v94, v95, &v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v93, v87 + 14, v87 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68((uint64_t)v83, type metadata accessor for SecureLocation);
          _os_log_impl( (void *)&_mh_execute_header,  v85,  v86,  "LabelledLocations Adding label %s to location %s",  (uint8_t *)v87,  0x16u);
          uint64_t v96 = v156;
          swift_arrayDestroy(v156, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v96, -1LL, -1LL);
          swift_slowDealloc(v87, -1LL, -1LL);
        }

        else
        {
          sub_100018C68((uint64_t)v83, type metadata accessor for SecureLocation);
        }

        uint64_t v24 = &off_10099B000;
        unint64_t v31 = v138;
        uint64_t v17 = v130;
LABEL_49:
        swift_beginAccess(v32, v161, 0LL, 0LL);
        sub_10001DC4C(v32, (uint64_t)v17, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0) {
          unint64_t v31 = (void *)sub_1004C6004(0, v31[2] + 1LL, 1, (unint64_t)v31);
        }
        unint64_t v98 = v31[2];
        unint64_t v97 = v31[3];
        uint64_t v99 = v139;
        if (v98 >= v97 >> 1)
        {
          uint64_t v101 = sub_1004C6004(v97 > 1, v98 + 1, 1, (unint64_t)v31);
          uint64_t v99 = v139;
          unint64_t v31 = (void *)v101;
        }

        uint64_t v29 = v99 + 1;
        v31[2] = v98 + 1;
        uint64_t v100 = (uint64_t)v31 + v134 + v98 * v132;
        uint64_t v27 = v132;
        sub_10002218C((uint64_t)v17, v100, type metadata accessor for SecureLocation);
        uint64_t v30 = v151;
        sub_100018C68(v151, type metadata accessor for SecureLocation);
        sub_100018C68(v32, type metadata accessor for SecureLocation);
        if (v29 == v135)
        {
          swift_bridgeObjectRelease();
          if (v31[2]) {
            goto LABEL_55;
          }
LABEL_63:
          uint64_t v111 = v122;
          _Block_copy(v122);
          _Block_copy(v111);
          if (v24[188] != (_UNKNOWN *)-1LL) {
            swift_once(&qword_10099B5E0, sub_1005C6624);
          }
          uint64_t v112 = type metadata accessor for Logger(0LL);
          uint64_t v113 = sub_10000A720(v112, (uint64_t)qword_100A2AE08);
          uint64_t v114 = (os_log_s *)Logger.logObject.getter(v113);
          os_log_type_t v115 = static os_log_type_t.error.getter(v114);
          if (os_log_type_enabled(v114, v115))
          {
            uint64_t v116 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v116 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v114,  v115,  "Got empty locations after resolving labels. This shouldn't happen",  v116,  2u);
            swift_slowDealloc(v116, -1LL, -1LL);
          }

          uint64_t v103 = (void (**)(const void *, void *))v122;
          _Block_release(v122);
          goto LABEL_68;
        }
      }
    }

    unint64_t v31 = _swiftEmptyArrayStorage;
    if (!_swiftEmptyArrayStorage[2]) {
      goto LABEL_63;
    }
LABEL_55:
    uint64_t v102 = (uint64_t)v31
         + ((*(unsigned __int8 *)(v126 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
    uint64_t v103 = (void (**)(const void *, void *))v122;
    _Block_copy(v122);
    sub_10033218C(v102, 0, v125, v103);
LABEL_68:
    _Block_release(v103);
    swift_bridgeObjectRelease();
  }

  else
  {
    _Block_copy(a5);
    __int128 v104 = (void (**)(const void *, void *))a5;
    _Block_copy(a5);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v105 = type metadata accessor for Logger(0LL);
    uint64_t v106 = sub_10000A720(v105, (uint64_t)qword_100A2AE08);
    uint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
    os_log_type_t v108 = static os_log_type_t.info.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      uint64_t v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v109 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v107,  v108,  "LabelledLocations - No labels - nothing to resolve",  v109,  2u);
      swift_slowDealloc(v109, -1LL, -1LL);
    }

    if (*(void *)(v127 + 16))
    {
      uint64_t v110 = v127 + ((*(unsigned __int8 *)(v126 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
      uint64_t v103 = v104;
      _Block_copy(v104);
      sub_10033218C(v110, 0, v125, v104);
    }

    else
    {
      uint64_t v103 = (void (**)(const void *, void *))a5;
      _Block_copy(a5);
      uint64_t v117 = _Block_copy(a5);
      char v118 = (os_log_s *)Logger.logObject.getter(v117);
      os_log_type_t v119 = static os_log_type_t.error.getter(v118);
      if (os_log_type_enabled(v118, v119))
      {
        unint64_t v120 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v120 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v118,  v119,  "Got empty locations after resolving labels. This shouldn't happen",  v120,  2u);
        swift_slowDealloc(v120, -1LL, -1LL);
      }

      _Block_release(v104);
    }

    _Block_release(v103);
  }

  swift_release();
  _Block_release(v103);
  _Block_release(v103);
}

uint64_t sub_100333C78(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = swift_allocObject(&unk_100950E70, 24LL, 7LL);
  *(void *)(v10 + 16) = a5;
  uint64_t v11 = (void *)swift_allocObject(&unk_100950E98, 40LL, 7LL);
  v11[2] = a4;
  v11[3] = sub_10009C044;
  v11[4] = v10;
  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  _Block_copy(a5);
  swift_retain();
  swift_retain();
  id v13 = [v12 standardUserDefaults];
  NSString v14 = String._bridgeToObjectiveC()();
  unsigned int v15 = [v13 BOOLForKey:v14];

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2AE08);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = a5;
    uint64_t v21 = a4;
    char v22 = a2;
    uint64_t v23 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v23 = 67109120;
    LODWORD(v27) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4, v23 + 4, v23 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "LabelledLocations Resolve Label isfetchdone %{BOOL}d", v23, 8u);
    uint64_t v24 = v23;
    a2 = v22;
    a4 = v21;
    a5 = v20;
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  if (v15)
  {
    if (!*(void *)(*(void *)(a3 + 104) + 16LL))
    {
      uint64_t v27 = sub_100577748();
      swift_bridgeObjectRetain(v27);
      sub_100313810((uint64_t *)&v27);
      swift_bridgeObjectRelease();
      *(void *)(a3 + 104) = v27;
      swift_bridgeObjectRelease();
    }

    _Block_copy(a5);
    swift_retain();
    swift_retain();
    sub_100332C10(a1, a2 & 1, a3, a4, a5);
    _Block_release(a5);
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v25 = swift_allocObject(&unk_100950EC0, 56LL, 7LL);
    *(void *)(v25 + 16) = a3;
    *(void *)(v25 + 24) = a1;
    *(_BYTE *)(v25 + 32) = a2 & 1;
    *(void *)(v25 + 40) = sub_10033967C;
    *(void *)(v25 + 48) = v11;
    swift_retain();
    swift_bridgeObjectRetain(a1);
    swift_retain();
    sub_1003258B0((uint64_t)sub_100339640, v25);
    swift_release();
    swift_release();
  }

  swift_release();
  return swift_release();
}

void sub_100333FCC(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SecureLocation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = *((void *)a1 + 2);
  if (v33)
  {
    v26[1] = a2;
    uint64_t v26[2] = a3;
    unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v11 = qword_10099B5E0;
    __n128 v12 = swift_bridgeObjectRetain(a1);
    if (v11 != -1) {
LABEL_12:
    }
      swift_once(&qword_10099B5E0, sub_1005C6624);
    uint64_t v13 = 0LL;
    v26[0] = a1;
    NSString v14 = (char *)a1 + v10;
    uint64_t v29 = &v35;
    v12.n128_u64[0] = 136315138LL;
    __n128 v28 = v12;
    uint64_t v27 = (char *)&type metadata for Any + 8;
    uint64_t v30 = (char *)a1 + v10;
    uint64_t v31 = v7;
    do
    {
      uint64_t v15 = v13 + 1;
      if (__OFADD__(v13, 1LL))
      {
        __break(1u);
        goto LABEL_12;
      }

      uint64_t v16 = (uint64_t)&v14[*(void *)(v7 + 72) * v13];
      uint64_t v17 = type metadata accessor for Logger(0LL);
      uint64_t v18 = sub_10000A720(v17, (uint64_t)qword_100A2AE08);
      uint64_t v19 = sub_10001DC4C(v16, (uint64_t)v9, type metadata accessor for SecureLocation);
      unint64_t v10 = v18;
      a1 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v20 = static os_log_type_t.default.getter(a1);
      if (os_log_type_enabled(a1, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v22 = swift_slowAlloc(32LL, -1LL);
        uint64_t v35 = v22;
        *(_DWORD *)uint64_t v21 = v28.n128_u32[0];
        uint64_t v32 = v21 + 4;
        uint64_t v23 = sub_1005EE53C();
        unint64_t v10 = v24;
        uint64_t v34 = sub_1003F11D4(v23, v24, &v35);
        uint64_t v7 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v29, v32, v21 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v9, type metadata accessor for SecureLocation);
        _os_log_impl((void *)&_mh_execute_header, a1, v20, "Received location via push %s", v21, 0xCu);
        swift_arrayDestroy(v22, 1LL, v27);
        swift_slowDealloc(v22, -1LL, -1LL);
        uint64_t v25 = v21;
        NSString v14 = v30;
        swift_slowDealloc(v25, -1LL, -1LL);
      }

      else
      {
        sub_100018C68((uint64_t)v9, type metadata accessor for SecureLocation);
      }

      ++v13;
    }

    while (v15 != v33);
    a1 = (os_log_s *)v26[0];
    swift_bridgeObjectRelease();
  }

  sub_1003221C4((uint64_t)a1, 1);
  Transaction.capture()();
}

void sub_100334264(os_log_s *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v112 = a4;
  uint64_t v113 = a5;
  int v134 = a2;
  uint64_t v114 = a1;
  uint64_t v6 = type metadata accessor for SecureLocation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v136 = (unint64_t *)((char *)v110.n128_u64 - v10);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v110 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v110 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  unint64_t v24 = (double *)((char *)v110.n128_f64 - v23);
  uint64_t v123 = a3;
  if (*(void *)(*(void *)(a3 + 104) + 16LL))
  {
    uint64_t v141 = v22;
    uint64_t v131 = v21;
    os_log_type_t v115 = (uint64_t *)v20;
    uint64_t v116 = v19;
    if (qword_10099B5E8 != -1) {
      swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    uint64_t v25 = qword_100A2AE20;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v25, &type metadata for SecureLocationsConfig);
    swift_release();
    __int128 v158 = v147[10];
    __int128 v159 = v147[11];
    __int128 v160 = v147[12];
    __int128 v154 = v147[6];
    __int128 v155 = v147[7];
    __int128 v156 = v147[8];
    __int128 v157 = v147[9];
    __int128 v150 = v147[2];
    __int128 v151 = v147[3];
    __int128 v152 = v147[4];
    __int128 v153 = v147[5];
    __int128 v148 = v147[0];
    __int128 v149 = v147[1];
    sub_100246384(&v148);
    uint64_t v122 = *((void *)v114 + 2);
    if (v122)
    {
      double v26 = *(double *)&v149;
      unint64_t v121 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      unint64_t v120 = (char *)v114 + v121;
      uint64_t v27 = *(void *)(v7 + 72);
      uint64_t v111 = &v144;
      __n128 v28 = swift_bridgeObjectRetain(v114);
      uint64_t v29 = 0LL;
      uint64_t v30 = (os_log_s *)_swiftEmptyArrayStorage;
      v28.n128_u64[0] = 136315906LL;
      __n128 v129 = v28;
      __n128 v128 = (char *)&type metadata for Any + 8;
      v28.n128_u64[0] = 136315650LL;
      __n128 v127 = v28;
      v28.n128_u64[0] = 136315394LL;
      __n128 v110 = v28;
      uint64_t v132 = v24;
      uint64_t v117 = v18;
      char v118 = v15;
      uint64_t v119 = v27;
      while (1)
      {
        uint64_t v126 = v29;
        sub_10001DC4C((uint64_t)&v120[v27 * v29], (uint64_t)v24, type metadata accessor for SecureLocation);
        sub_10001DC4C((uint64_t)v24, (uint64_t)v18, type metadata accessor for SecureLocation);
        uint64_t v31 = *(void *)(v123 + 104);
        uint64_t v32 = (uint64_t)v141;
        if (!*(void *)(v31 + 16)) {
          goto LABEL_50;
        }
        uint64_t v139 = *(void *)(v31 + 16);
        __int128 v124 = v30;
        swift_bridgeObjectRetain(v31);
        uint64_t v125 = v33;
        uint64_t v34 = (unint64_t *)(v33 + 56);
        while (1)
        {
          uint64_t v35 = *(v34 - 2);
          uint64_t v36 = *(v34 - 1);
          unint64_t v37 = *v34;
          double v38 = *((double *)v34 + 3);
          double v39 = *((double *)v34 + 4);
          unint64_t v40 = v34[5];
          unint64_t v41 = v34[7];
          uint64_t v140 = v34[6];
          uint64_t v138 = v34;
          unint64_t v42 = v34[2];
          uint64_t v43 = qword_10099B5E0;
          uint64_t v142 = v35;
          swift_bridgeObjectRetain(v35);
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v41);
          if (v43 != -1) {
            swift_once(&qword_10099B5E0, sub_1005C6624);
          }
          uint64_t v44 = type metadata accessor for Logger(0LL);
          uint64_t v45 = sub_10000A720(v44, (uint64_t)qword_100A2AE08);
          sub_10001DC4C((uint64_t)v24, v32, type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n(v142, 4LL);
          swift_bridgeObjectRetain_n(v37, 4LL);
          swift_bridgeObjectRetain_n(v42, 4LL);
          swift_bridgeObjectRetain_n(v41, 4LL);
          uint64_t v137 = v45;
          uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
          os_log_type_t v48 = static os_log_type_t.info.getter(v47);
          int v49 = v48;
          BOOL v50 = os_log_type_enabled(v47, v48);
          uint64_t v135 = v36;
          if (v50)
          {
            uint64_t v51 = swift_slowAlloc(42LL, -1LL);
            id v133 = (id)swift_slowAlloc(96LL, -1LL);
            uint64_t v143 = (uint64_t)v133;
            *(_DWORD *)uint64_t v51 = v129.n128_u32[0];
            swift_bridgeObjectRetain(v37);
            *(void *)(v51 + 4) = sub_1003F11D4(v36, v37, &v143);
            swift_bridgeObjectRelease();
            *(_WORD *)(v51 + 12) = 2080;
            if (v41) {
              uint64_t v52 = v140;
            }
            else {
              uint64_t v52 = 1818848800LL;
            }
            if (v41) {
              unint64_t v53 = v41;
            }
            else {
              unint64_t v53 = 0xE400000000000000LL;
            }
            swift_bridgeObjectRetain(v41);
            *(void *)(v51 + 14) = sub_1003F11D4(v52, v53, &v143);
            swift_bridgeObjectRelease_n(v41, 2LL);
            swift_bridgeObjectRelease_n(v42, 2LL);
            swift_bridgeObjectRelease_n(v37, 2LL);
            LODWORD(v130) = v49;
            uint64_t v54 = v142;
            swift_bridgeObjectRelease_n(v142, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v51 + 22) = 2080;
            uint64_t v55 = *v141;
            unint64_t v56 = v141[1];
            swift_bridgeObjectRetain(v56);
            uint64_t v57 = v55;
            uint64_t v32 = (uint64_t)v141;
            *(void *)(v51 + 24) = sub_1003F11D4(v57, v56, &v143);
            swift_bridgeObjectRelease();
            sub_100018C68(v32, type metadata accessor for SecureLocation);
            *(_WORD *)(v51 + 32) = 2048;
            *(void *)(v51 + 34) = v40;
            swift_bridgeObjectRelease_n(v41, 2LL);
            unint64_t v58 = v42;
            swift_bridgeObjectRelease_n(v42, 2LL);
            swift_bridgeObjectRelease_n(v37, 2LL);
            swift_bridgeObjectRelease_n(v54, 2LL);
            _os_log_impl( (void *)&_mh_execute_header,  v47,  (os_log_type_t)v130,  "LabelledLocations Checking label %s %s %s %f",  (uint8_t *)v51,  0x2Au);
            id v59 = v133;
            swift_arrayDestroy(v133, 3LL, v128);
            id v60 = v59;
            uint64_t v61 = v131;
            swift_slowDealloc(v60, -1LL, -1LL);
            uint64_t v62 = v51;
            unint64_t v24 = v132;
            swift_slowDealloc(v62, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v41, 2LL);
            swift_bridgeObjectRelease_n(v42, 2LL);
            swift_bridgeObjectRelease_n(v37, 2LL);
            uint64_t v63 = v142;
            swift_bridgeObjectRelease_n(v142, 2LL);
            sub_100018C68(v32, type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n(v41, 2LL);
            unint64_t v58 = v42;
            swift_bridgeObjectRelease_n(v42, 2LL);
            swift_bridgeObjectRelease_n(v37, 2LL);
            swift_bridgeObjectRelease_n(v63, 2LL);
            uint64_t v61 = v131;
          }

          sub_10001DC4C((uint64_t)v24, v61, type metadata accessor for SecureLocation);
          if (!v41 && (v134 & 1) != 0)
          {
            sub_100018C68(v61, type metadata accessor for SecureLocation);
            goto LABEL_25;
          }

          sub_10001DC4C(v61, (uint64_t)v136, type metadata accessor for SecureLocation);
          if ((v134 & 1) == 0) {
            break;
          }
          sub_100018C68((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_100018C68(v61, type metadata accessor for SecureLocation);
LABEL_9:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v34 = v138 + 11;
          if (!--v139)
          {
            swift_bridgeObjectRelease();
            uint64_t v18 = v117;
            uint64_t v15 = v118;
            goto LABEL_49;
          }
        }

        unint64_t v79 = v37;
        uint64_t v80 = v136[1];
        if (!v41)
        {
          swift_bridgeObjectRetain(v136[1]);
          sub_100018C68((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_100018C68(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v142 = v80;
          goto LABEL_10;
        }

        if (v140 == *v136 && v41 == v80)
        {
          swift_bridgeObjectRetain(v41);
          sub_100018C68((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_100018C68(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          unint64_t v37 = v79;
        }

        else
        {
          char v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v140, v41, *v136, v136[1], 0LL);
          swift_bridgeObjectRetain(v41);
          sub_100018C68((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_100018C68(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          unint64_t v37 = v79;
          if ((v81 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v32 = (uint64_t)v141;
            goto LABEL_10;
          }
        }

uint64_t sub_100335070(os_log_s *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_100950E20, 32LL, 7LL);
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  swift_retain();
  swift_retain();
  id v12 = [v11 standardUserDefaults];
  NSString v13 = String._bridgeToObjectiveC()();
  unsigned int v14 = [v12 BOOLForKey:v13];

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AE08);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v19 = 67109120;
    LODWORD(v22) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 4, v19 + 4, v19 + 8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "LabelledLocations Resolve Label isfetchdone %{BOOL}d", v19, 8u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  if (v14)
  {
    if (!*(void *)(*(void *)(a3 + 104) + 16LL))
    {
      uint64_t v22 = sub_100577748();
      swift_bridgeObjectRetain(v22);
      sub_100313810((uint64_t *)&v22);
      swift_bridgeObjectRelease();
      *(void *)(a3 + 104) = v22;
      swift_bridgeObjectRelease();
    }

    swift_retain();
    swift_retain();
    sub_100334264(a1, a2 & 1, a3, a4, a5);
    swift_release();
  }

  else
  {
    uint64_t v20 = swift_allocObject(&unk_100950E48, 56LL, 7LL);
    *(void *)(v20 + 16) = a3;
    *(void *)(v20 + 24) = a1;
    *(_BYTE *)(v20 + 32) = a2 & 1;
    *(void *)(v20 + 40) = sub_100339634;
    *(void *)(v20 + 48) = v10;
    swift_retain();
    swift_bridgeObjectRetain(a1);
    swift_retain();
    sub_1003258B0((uint64_t)sub_100339640, v20);
  }

  swift_release();
  return swift_release();
}

void sub_100335344(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = type metadata accessor for SecureLocation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _Block_copy(a3);
  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v10 = qword_100A2AE20;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v10, &type metadata for SecureLocationsConfig);
  swift_release();
  v33[10] = v32[10];
  v33[11] = v32[11];
  v33[12] = v32[12];
  v33[6] = v32[6];
  v33[7] = v32[7];
  v33[8] = v32[8];
  v33[9] = v32[9];
  v33[2] = v32[2];
  v33[3] = v32[3];
  v33[4] = v32[4];
  v33[5] = v32[5];
  v33[0] = v32[0];
  v33[1] = v32[1];
  sub_100246384(v33);
  if ((BYTE8(v33[0]) & 1) == 0)
  {
LABEL_10:
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2AE08);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "publishLocation: secureLocations feature is disabled. Not publishing location",  v24,  2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    type metadata accessor for SecureLocationsError(0LL);
    uint64_t v26 = v25;
    *(void *)&v32[0] = 6LL;
    unint64_t v27 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v28 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
    _BridgedStoredNSError.init(_:userInfo:)(v33, v32, v27, v26, v28);
    uint64_t v29 = *(void **)&v33[0];
    uint64_t v30 = (void *)_convertErrorToNSError(_:)(*(void *)&v33[0]);
    ((void (**)(void, void *))a3)[2](a3, v30);
  }

  else
  {
    sub_1005EE928(a1, (uint64_t)v9);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2AE08);
    NSString v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Resolving labels for publish", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = sub_100004AEC(&qword_10099D540);
    uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v18 = (v17 + 32) & ~v17;
    uint64_t v19 = swift_allocObject(v16, v18 + *(void *)(v7 + 72), v17 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_1007E67D0;
    sub_10001DC4C((uint64_t)v9, v19 + v18, type metadata accessor for SecureLocation);
    _Block_copy(a3);
    swift_retain();
    sub_100333C78(v19, 1, a2, a2, a3);
    _Block_release(a3);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v9, type metadata accessor for SecureLocation);
  }

  _Block_release(a3);
}

void sub_100335710(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  LODWORD(v101) = a2;
  uint64_t v96 = *a4;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v7);
  unint64_t v97 = (char *)v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = type metadata accessor for SecureLocationsSubmitEndpoint(0LL);
  uint64_t v9 = __chkstk_darwin(v102);
  uint64_t v98 = (uint64_t)v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v103 = (char *)v94 - v12;
  __chkstk_darwin(v11);
  uint64_t v104 = (uint64_t)v94 - v13;
  uint64_t v100 = type metadata accessor for SecureLocation(0LL);
  uint64_t v14 = __chkstk_darwin(v100);
  uint64_t v16 = (char *)v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v94 - v17;
  uint64_t v19 = qword_10099B5E0;
  swift_retain();
  if (v19 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2AE08);
  sub_10001DC4C(a1, (uint64_t)v18, type metadata accessor for SecureLocation);
  uint64_t v22 = sub_10001DC4C(a1, (uint64_t)v16, type metadata accessor for SecureLocation);
  os_log_type_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter(v23);
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v95 = a1;
  uint64_t v99 = a3;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc(22LL, -1LL);
    uint64_t v27 = swift_slowAlloc(64LL, -1LL);
    v94[1] = v21;
    uint64_t v28 = v27;
    uint64_t v107 = v27;
    *(_DWORD *)uint64_t v26 = 136446466;
    unint64_t v29 = sub_1005EECA8(*(void *)&v18[*(int *)(v100 + 60)]);
    uint64_t v105 = sub_1003F11D4(v29, v30, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v18, type metadata accessor for SecureLocation);
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v31 = sub_1005EE53C();
    uint64_t v105 = sub_1003F11D4(v31, v32, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v16, type metadata accessor for SecureLocation);
    _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "publishLocation with reason %{public}s location: %s",  (uint8_t *)v26,  0x16u);
    swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v18, type metadata accessor for SecureLocation);
    sub_100018C68((uint64_t)v16, type metadata accessor for SecureLocation);
  }

  uint64_t v34 = v102;
  uint64_t v33 = (uint64_t)v103;
  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  swift_retain();
  char v35 = sub_1005C7C90();
  uint64_t v36 = swift_release();
  if ((v35 & 1) != 0 || (v101 & 1) != 0)
  {
    uint64_t v44 = enum case for FMNAccountType.searchParty(_:);
    uint64_t v45 = type metadata accessor for FMNAccountType(0LL);
    uint64_t v46 = v104;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 104LL))(v104, v44, v45);
    sub_100128210(v46 + *(int *)(v34 + 20));
    uint64_t v47 = sub_10001DC4C(v46, v33, type metadata accessor for SecureLocationsSubmitEndpoint);
    os_log_type_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.default.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v101 = v4;
      BOOL v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v51 = swift_slowAlloc(32LL, -1LL);
      uint64_t v107 = v51;
      *(_DWORD *)BOOL v50 = 136315138;
      uint64_t v52 = v98;
      sub_10001DC4C(v33, v98, type metadata accessor for SecureLocationsSubmitEndpoint);
      uint64_t v53 = String.init<A>(describing:)(v52, v34);
      uint64_t v105 = sub_1003F11D4(v53, v54, &v107);
      uint64_t v4 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v33, type metadata accessor for SecureLocationsSubmitEndpoint);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "SubmitLocation endpoint %s", v50, 0xCu);
      swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v33, type metadata accessor for SecureLocationsSubmitEndpoint);

      uint64_t v52 = v98;
    }

    uint64_t v55 = v99;
    uint64_t v56 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
    swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
    uint64_t v57 = type metadata accessor for FMNMockingPreferences(0LL);
    unint64_t v58 = v97;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL))(v97, 1LL, 1LL, v57);
    uint64_t v59 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v58);
    uint64_t v60 = type metadata accessor for ServerInteractionController(0LL);
    uint64_t v61 = swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
    sub_10001DC4C(v104, v52, type metadata accessor for SecureLocationsSubmitEndpoint);
    uint64_t v62 = sub_10043199C(v52, v59, v61);
    id v63 = [(id)objc_opt_self(AKDevice) currentDevice];
    if (v63
      && (id v64 = v63,
          id v65 = [v63 uniqueDeviceIdentifier],
          v64,
          v65))
    {
      uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      uint64_t v68 = v67;

      uint64_t v69 = sub_100004AEC(&qword_1009A34B0);
      OS_dispatch_queue.sync<A>(execute:)(sub_100338BF0, v55, v69);
      uint64_t v70 = v108;
      if (v108)
      {
        uint64_t v102 = v107;
        uint64_t v71 = swift_allocBox(v100);
        uint64_t v103 = 0LL;
        uint64_t v72 = v62;
        uint64_t v73 = v4;
        uint64_t v74 = v71;
        uint64_t v76 = (void *)v75;
        uint64_t v77 = v55;
        uint64_t v78 = v95;
        sub_10001DC4C(v95, v75, type metadata accessor for SecureLocation);
        *uint64_t v76 = v66;
        v76[1] = v68;
        swift_bridgeObjectRetain(v68);
        uint64_t v79 = swift_bridgeObjectRelease();
        __chkstk_darwin(v79);
        v94[-10] = v77;
        v94[-9] = v74;
        v94[-8] = j___s10FindMyBase11TransactionC7captureyyF;
        v94[-7] = v73;
        uint64_t v80 = v102;
        v94[-6] = v78;
        v94[-5] = v80;
        v94[-4] = v70;
        v94[-3] = v66;
        v94[-2] = v68;
        v94[-1] = v72;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.publishEncodedPayload",  51LL,  2LL,  sub_10033968C);
        swift_bridgeObjectRelease();
        sub_100018C68(v104, type metadata accessor for SecureLocationsSubmitEndpoint);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }

      uint64_t v89 = swift_bridgeObjectRelease();
      uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
      os_log_type_t v91 = static os_log_type_t.error.getter(v90);
      if (os_log_type_enabled(v90, v91))
      {
        unint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "No APS token. Not proceeding", v92, 2u);
        swift_slowDealloc(v92, -1LL, -1LL);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
      id v93 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v85 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v86 = [v93 initWithDomain:v85 code:13 userInfo:0];
    }

    else
    {
      char v81 = (os_log_s *)Logger.logObject.getter(v63);
      os_log_type_t v82 = static os_log_type_t.error.getter(v81);
      if (os_log_type_enabled(v81, v82))
      {
        id v83 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v83 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "Unable to get device identifier for server SubscribeAndFetch",  v83,  2u);
        swift_slowDealloc(v83, -1LL, -1LL);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
      id v84 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v85 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v86 = [v84 initWithDomain:v85 code:0 userInfo:0];
    }

    uint64_t v87 = v86;

    id v88 = v87;
    Transaction.capture()();

    swift_release();
    sub_100018C68(v104, type metadata accessor for SecureLocationsSubmitEndpoint);
    swift_release();
  }

  else
  {
    unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      double v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)double v39 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Not a location publishing device. Not publishing location",  v39,  2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    id v40 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v42 = [v40 initWithDomain:v41 code:12 userInfo:0];

    id v43 = v42;
    Transaction.capture()();
    swift_release();
  }

void sub_100336178(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if (qword_10099B2F0 != -1) {
    swift_once(&qword_10099B2F0, sub_100313A34);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_10000A720(v10, (uint64_t)qword_1009A9150);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v22 = v10;
    uint64_t v14 = swift_slowAlloc(38LL, -1LL);
    uint64_t v15 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v24[0] = v15;
    *(_DWORD *)uint64_t v14 = 141558787;
    *(void *)&v23[0] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, (char *)v23 + 8, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    swift_bridgeObjectRetain(a2);
    *(void *)&v23[0] = sub_1003F11D4(a1, a2, (uint64_t *)v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, (char *)v23 + 8, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v14 + 22) = 2082;
    swift_bridgeObjectRetain(a4);
    *(void *)&v23[0] = sub_1003F11D4(a3, a4, (uint64_t *)v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, (char *)v23 + 8, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease_n(a4, 3LL);
    *(_WORD *)(v14 + 32) = 1026;
    LODWORD(v23[0]) = a5 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, (char *)v23 + 4, v14 + 34, v14 + 38);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "startLocationMonitoring findmyId: %{private,mask.hash}s. Policy: %{public}s. forcePublish: %{BOOL,public}d",  (uint8_t *)v14,  0x26u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    uint64_t v16 = v14;
    uint64_t v10 = v22;
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v17 = qword_100A2AE20;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v17, &type metadata for SecureLocationsConfig);
  swift_release();
  v24[10] = v23[10];
  v24[11] = v23[11];
  v24[12] = v23[12];
  _OWORD v24[6] = v23[6];
  v24[7] = v23[7];
  v24[8] = v23[8];
  v24[9] = v23[9];
  v24[2] = v23[2];
  v24[3] = v23[3];
  v24[4] = v23[4];
  v24[5] = v23[5];
  v24[0] = v23[0];
  v24[1] = v23[1];
  sub_100246384(v24);
  if ((BYTE8(v24[0]) & 1) != 0)
  {
    swift_retain();
    sub_1005C7C90();
    swift_release();
    return;
  }

unint64_t sub_10033656C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100934478, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_1003365B4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100934528, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9) {
    return 9LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1003365FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A9540);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100336C44();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys,  &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    LOBYTE(v48) = 0;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v5);
    uint64_t v14 = v13;
    LOBYTE(v48) = 1;
    swift_bridgeObjectRetain(v13);
    uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v5);
    uint64_t v46 = v12;
    char v50 = 2;
    uint64_t v16 = v15;
    unint64_t v17 = sub_100336C88();
    swift_bridgeObjectRetain(v16);
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v48,  &type metadata for SecureLocationsPushCommands,  &v50,  v5,  &type metadata for SecureLocationsPushCommands,  v17);
    uint64_t v47 = v16;
    LODWORD(v16) = v48;
    LOBYTE(v48) = 3;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
    uint64_t v20 = v19;
    uint64_t v42 = v18;
    int v49 = v16;
    uint64_t v21 = sub_100004AEC(&qword_1009AED50);
    char v50 = 4;
    uint64_t v22 = sub_1001C89D8( (unint64_t *)&qword_1009A56C0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    uint64_t v44 = v20;
    swift_bridgeObjectRetain(v20);
    uint64_t v43 = v22;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, &v50, v5, v21, v22);
    char v50 = 5;
    uint64_t v41 = v48;
    swift_bridgeObjectRetain(v48);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, &v50, v5, v21, v43);
    double v39 = a2;
    uint64_t v40 = v21;
    uint64_t v23 = v48;
    LOBYTE(v48) = 6;
    swift_bridgeObjectRetain(v23);
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
    uint64_t v26 = v25;
    uint64_t v38 = v24;
    uint64_t v27 = sub_100004AEC(&qword_1009A9558);
    char v50 = 7;
    unint64_t v28 = sub_100336CCC();
    swift_bridgeObjectRetain(v26);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v50, v5, v27, v28);
    uint64_t v37 = v14;
    uint64_t v29 = v48;
    char v50 = 8;
    swift_bridgeObjectRetain(v48);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v40, &v50, v5, v40, v43);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v30 = v48;
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = v41;
    swift_bridgeObjectRelease();
    uint64_t v32 = v44;
    swift_bridgeObjectRelease();
    uint64_t v33 = v47;
    swift_bridgeObjectRelease();
    uint64_t v34 = v37;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v36 = v39;
    *double v39 = v46;
    v36[1] = v34;
    v36[2] = v45;
    v36[3] = v33;
    *((_BYTE *)v36 + 32) = v49;
    v36[5] = v42;
    v36[6] = v32;
    v36[7] = v31;
    v36[8] = v23;
    v36[9] = v38;
    v36[10] = v26;
    v36[11] = v29;
    v36[12] = v30;
  }

  return result;
}

unint64_t sub_100336C44()
{
  unint64_t result = qword_1009A9548;
  if (!qword_1009A9548)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FBF68,  &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9548);
  }

  return result;
}

unint64_t sub_100336C88()
{
  unint64_t result = qword_1009A9550;
  if (!qword_1009A9550)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FBD54, &type metadata for SecureLocationsPushCommands);
    atomic_store(result, (unint64_t *)&qword_1009A9550);
  }

  return result;
}

unint64_t sub_100336CCC()
{
  unint64_t result = qword_1009A9560;
  if (!qword_1009A9560)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A9558);
    sub_1001C89D8( (unint64_t *)&qword_1009A56C0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009A9560);
  }

  return result;
}

unint64_t sub_100336D4C()
{
  unint64_t result = qword_1009A9570;
  if (!qword_1009A9570)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FBD2C, &type metadata for SecureLocationsPushCommands);
    atomic_store(result, (unint64_t *)&qword_1009A9570);
  }

  return result;
}

unint64_t sub_100336D90()
{
  unint64_t result = qword_1009A9580;
  if (!qword_1009A9580)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A9558);
    sub_1001C89D8( (unint64_t *)&qword_1009B0650,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009A9580);
  }

  return result;
}

unint64_t sub_100336E10()
{
  unint64_t result = qword_1009A9588;
  if (!qword_1009A9588)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FBD7C, &type metadata for SecureLocationsPushCommands);
    atomic_store(result, (unint64_t *)&qword_1009A9588);
  }

  return result;
}

uint64_t sub_100336E54()
{
  return sub_10033A22C((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_100336E68(uint64_t a1)
{
  return sub_100329138(a1, *(void *)(v1 + 16), *(void (**)(id))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100336E74(uint64_t a1)
{
  return sub_10032B7DC(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "FetchConfig - error %s");
}

uint64_t sub_100336E94(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v9);
  uint64_t v12 = String.init(data:encoding:)(a1, a2, v11);
  uint64_t v14 = &off_10099B000;
  if (v13)
  {
    uint64_t v15 = v12;
    unint64_t v16 = v13;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_10000A720(v17, (uint64_t)qword_100A2AE08);
    swift_bridgeObjectRetain(v16);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.debug.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v41 = a3;
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v42 = a4;
      uint64_t v23 = v22;
      v45[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain(v16);
      uint64_t v43 = sub_1003F11D4(v15, v16, v45);
      a3 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(v16, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "jsonString %s", v21, 0xCu);
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v24 = v23;
      a4 = v42;
      swift_slowDealloc(v24, -1LL, -1LL);
      uint64_t v25 = v21;
      uint64_t v14 = &off_10099B000;
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v16, 2LL);
    }
  }

  uint64_t v26 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  JSONDecoder.init()(v27);
  unint64_t v28 = sub_1003395D4();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for SecureLocationsEncodedPushPayload,  a1,  a2,  &type metadata for SecureLocationsEncodedPushPayload,  v28);
  uint64_t v29 = v45[2];
  if (v14[188] != (_UNKNOWN *)-1LL) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v30 = type metadata accessor for Logger(0LL);
  uint64_t v31 = sub_10000A720(v30, (uint64_t)qword_100A2AE08);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.debug.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Decoded push location payload successfully", v34, 2u);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  char v35 = sub_10025FA5C(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v36 = a3;
  uint64_t v37 = sub_10032EDD4((uint64_t)v35, a3);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v38 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v38);
  *(&v40 - 2) = (uint64_t)v36;
  *(&v40 - 1) = (uint64_t)v37;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.savePushedLocations", 49LL, 2LL, sub_100339618);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(a4 + 16))(a4, 0LL);
  return swift_release();
}

void sub_100337430(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v121 = a5;
  uint64_t v122 = a4;
  int v143 = a2;
  uint64_t v123 = a1;
  uint64_t v6 = type metadata accessor for SecureLocation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v145 = (unint64_t *)((char *)v119.n128_u64 - v10);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v119 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v119 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v24 = (double *)((char *)v119.n128_f64 - v23);
  uint64_t v132 = a3;
  if (*(void *)(*(void *)(a3 + 104) + 16LL))
  {
    __int128 v150 = v22;
    uint64_t v140 = v21;
    __int128 v124 = (uint64_t *)v20;
    uint64_t v125 = v19;
    if (qword_10099B5E8 != -1) {
      swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    uint64_t v25 = qword_100A2AE20;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v25, &type metadata for SecureLocationsConfig);
    swift_release();
    __int128 v167 = v156[10];
    __int128 v168 = v156[11];
    __int128 v169 = v156[12];
    __int128 v163 = v156[6];
    __int128 v164 = v156[7];
    __int128 v165 = v156[8];
    __int128 v166 = v156[9];
    __int128 v159 = v156[2];
    __int128 v160 = v156[3];
    __int128 v161 = v156[4];
    __int128 v162 = v156[5];
    __int128 v157 = v156[0];
    __int128 v158 = v156[1];
    sub_100246384(&v157);
    uint64_t v131 = *(void *)(v123 + 16);
    if (v131)
    {
      double v26 = *(double *)&v158;
      unint64_t v130 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v129 = v123 + v130;
      uint64_t v27 = *(void *)(v7 + 72);
      unint64_t v120 = &v153;
      __n128 v28 = swift_bridgeObjectRetain(v123);
      uint64_t v29 = 0LL;
      uint64_t v30 = _swiftEmptyArrayStorage;
      v28.n128_u64[0] = 136315906LL;
      __n128 v138 = v28;
      uint64_t v137 = (char *)&type metadata for Any + 8;
      v28.n128_u64[0] = 136315650LL;
      __n128 v136 = v28;
      v28.n128_u64[0] = 136315394LL;
      __n128 v119 = v28;
      uint64_t v141 = v24;
      uint64_t v126 = v18;
      __n128 v127 = v15;
      uint64_t v128 = v27;
      while (1)
      {
        uint64_t v135 = v29;
        sub_10001DC4C(v129 + v27 * v29, (uint64_t)v24, type metadata accessor for SecureLocation);
        sub_10001DC4C((uint64_t)v24, (uint64_t)v18, type metadata accessor for SecureLocation);
        uint64_t v31 = *(void *)(v132 + 104);
        uint64_t v32 = (uint64_t)v150;
        if (!*(void *)(v31 + 16)) {
          goto LABEL_50;
        }
        uint64_t v148 = *(void *)(v31 + 16);
        id v133 = v30;
        swift_bridgeObjectRetain(v31);
        uint64_t v134 = v33;
        uint64_t v34 = (unint64_t *)(v33 + 56);
        while (1)
        {
          uint64_t v35 = *(v34 - 2);
          uint64_t v36 = *(v34 - 1);
          unint64_t v37 = *v34;
          double v38 = *((double *)v34 + 3);
          double v39 = *((double *)v34 + 4);
          unint64_t v40 = v34[5];
          unint64_t v41 = v34[7];
          uint64_t v149 = v34[6];
          id v147 = v34;
          unint64_t v42 = v34[2];
          uint64_t v43 = qword_10099B5E0;
          uint64_t v151 = v35;
          swift_bridgeObjectRetain(v35);
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v41);
          if (v43 != -1) {
            swift_once(&qword_10099B5E0, sub_1005C6624);
          }
          uint64_t v44 = type metadata accessor for Logger(0LL);
          uint64_t v45 = sub_10000A720(v44, (uint64_t)qword_100A2AE08);
          sub_10001DC4C((uint64_t)v24, v32, type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n(v151, 4LL);
          swift_bridgeObjectRetain_n(v37, 4LL);
          swift_bridgeObjectRetain_n(v42, 4LL);
          swift_bridgeObjectRetain_n(v41, 4LL);
          uint64_t v146 = v45;
          uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
          os_log_type_t v48 = static os_log_type_t.info.getter(v47);
          int v49 = v48;
          BOOL v50 = os_log_type_enabled(v47, v48);
          uint64_t v144 = v36;
          if (v50)
          {
            uint64_t v51 = swift_slowAlloc(42LL, -1LL);
            id v142 = (id)swift_slowAlloc(96LL, -1LL);
            uint64_t v152 = (uint64_t)v142;
            *(_DWORD *)uint64_t v51 = v138.n128_u32[0];
            swift_bridgeObjectRetain(v37);
            *(void *)(v51 + 4) = sub_1003F11D4(v36, v37, &v152);
            swift_bridgeObjectRelease();
            *(_WORD *)(v51 + 12) = 2080;
            if (v41) {
              uint64_t v52 = v149;
            }
            else {
              uint64_t v52 = 1818848800LL;
            }
            if (v41) {
              unint64_t v53 = v41;
            }
            else {
              unint64_t v53 = 0xE400000000000000LL;
            }
            swift_bridgeObjectRetain(v41);
            *(void *)(v51 + 14) = sub_1003F11D4(v52, v53, &v152);
            swift_bridgeObjectRelease_n(v41, 2LL);
            swift_bridgeObjectRelease_n(v42, 2LL);
            swift_bridgeObjectRelease_n(v37, 2LL);
            LODWORD(v139) = v49;
            uint64_t v54 = v151;
            swift_bridgeObjectRelease_n(v151, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v51 + 22) = 2080;
            uint64_t v55 = *v150;
            unint64_t v56 = v150[1];
            swift_bridgeObjectRetain(v56);
            uint64_t v57 = v55;
            uint64_t v32 = (uint64_t)v150;
            *(void *)(v51 + 24) = sub_1003F11D4(v57, v56, &v152);
            swift_bridgeObjectRelease();
            sub_100018C68(v32, type metadata accessor for SecureLocation);
            *(_WORD *)(v51 + 32) = 2048;
            *(void *)(v51 + 34) = v40;
            swift_bridgeObjectRelease_n(v41, 2LL);
            unint64_t v58 = v42;
            swift_bridgeObjectRelease_n(v42, 2LL);
            swift_bridgeObjectRelease_n(v37, 2LL);
            swift_bridgeObjectRelease_n(v54, 2LL);
            _os_log_impl( (void *)&_mh_execute_header,  v47,  (os_log_type_t)v139,  "LabelledLocations Checking label %s %s %s %f",  (uint8_t *)v51,  0x2Au);
            id v59 = v142;
            swift_arrayDestroy(v142, 3LL, v137);
            id v60 = v59;
            uint64_t v61 = v140;
            swift_slowDealloc(v60, -1LL, -1LL);
            uint64_t v62 = v51;
            uint64_t v24 = v141;
            swift_slowDealloc(v62, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v41, 2LL);
            swift_bridgeObjectRelease_n(v42, 2LL);
            swift_bridgeObjectRelease_n(v37, 2LL);
            uint64_t v63 = v151;
            swift_bridgeObjectRelease_n(v151, 2LL);
            sub_100018C68(v32, type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n(v41, 2LL);
            unint64_t v58 = v42;
            swift_bridgeObjectRelease_n(v42, 2LL);
            swift_bridgeObjectRelease_n(v37, 2LL);
            swift_bridgeObjectRelease_n(v63, 2LL);
            uint64_t v61 = v140;
          }

          sub_10001DC4C((uint64_t)v24, v61, type metadata accessor for SecureLocation);
          if (!v41 && (v143 & 1) != 0)
          {
            sub_100018C68(v61, type metadata accessor for SecureLocation);
            goto LABEL_25;
          }

          sub_10001DC4C(v61, (uint64_t)v145, type metadata accessor for SecureLocation);
          if ((v143 & 1) == 0) {
            break;
          }
          sub_100018C68((uint64_t)v145, type metadata accessor for SecureLocation);
          sub_100018C68(v61, type metadata accessor for SecureLocation);
LABEL_9:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v34 = v147 + 11;
          if (!--v148)
          {
            swift_bridgeObjectRelease();
            uint64_t v18 = v126;
            uint64_t v15 = v127;
            goto LABEL_49;
          }
        }

        unint64_t v79 = v37;
        uint64_t v80 = v145[1];
        if (!v41)
        {
          swift_bridgeObjectRetain(v145[1]);
          sub_100018C68((uint64_t)v145, type metadata accessor for SecureLocation);
          sub_100018C68(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v151 = v80;
          goto LABEL_10;
        }

        if (v149 == *v145 && v41 == v80)
        {
          swift_bridgeObjectRetain(v41);
          sub_100018C68((uint64_t)v145, type metadata accessor for SecureLocation);
          sub_100018C68(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          unint64_t v37 = v79;
        }

        else
        {
          char v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v149, v41, *v145, v145[1], 0LL);
          swift_bridgeObjectRetain(v41);
          sub_100018C68((uint64_t)v145, type metadata accessor for SecureLocation);
          sub_100018C68(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          unint64_t v37 = v79;
          if ((v81 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v32 = (uint64_t)v150;
            goto LABEL_10;
          }
        }

uint64_t sub_10033836C()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = &v36[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = &v36[-v6];
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = &v36[-v9];
  __chkstk_darwin(v8);
  uint64_t v12 = &v36[-v11];
  unint64_t v13 = sub_10032E688(0x20000000000001uLL);
  if (v13 == 0x20000000000000LL) {
    double v14 = 950400.0;
  }
  else {
    double v14 = ((double)v13 * 1.11022302e-16 * 4.0 + 7.0) * 86400.0;
  }
  uint64_t v15 = static Date.trustedNow.getter((uint64_t)v12);
  Date.addingTimeInterval(_:)(v15, v14);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10000A720(v16, (uint64_t)qword_100A2AE08);
  uint64_t v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16);
  v17(v7, v10, v0);
  uint64_t v18 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v17)(v4, v12, v0);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter(v19);
  int v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    unint64_t v40 = v10;
    uint64_t v23 = v22;
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    uint64_t v42 = v38;
    *(_DWORD *)uint64_t v23 = 136315394;
    double v39 = v12;
    uint64_t v24 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    int v37 = v21;
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v0, v24);
    uint64_t v41 = sub_1003F11D4(v25, v26, &v42);
    uint64_t v12 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
    v27(v7, v0);
    *(_WORD *)(v23 + 12) = 2080;
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v0, v24);
    uint64_t v41 = sub_1003F11D4(v28, v29, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    v27(v4, v0);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  (os_log_type_t)v37,  "CheckAndFetchConfig: Setting up next check data %s  CurrentTime %s",  (uint8_t *)v23,  0x16u);
    uint64_t v30 = v38;
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    uint64_t v31 = v23;
    uint64_t v10 = v40;
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    uint64_t v27 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
    v27(v7, v0);
    v27(v4, v0);
  }

  id v32 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  Date.timeIntervalSince1970.getter(v32);
  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  NSString v34 = String._bridgeToObjectiveC()();
  [v32 setValue:isa forKey:v34];

  v27(v10, v0);
  return ((uint64_t (*)(_BYTE *, uint64_t))v27)(v12, v0);
}

uint64_t sub_100338768(__int128 *a1)
{
  if (qword_10099B5E8 != -1) {
    swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v2 = qword_100A2AE20;
  uint64_t v3 = *(dispatch_queue_s **)(qword_100A2AE20 + 144);
  uint64_t v4 = swift_allocObject(&unk_100950650, 232LL, 7LL);
  __int128 v5 = a1[8];
  *(_OWORD *)(v4 + 168) = a1[9];
  __int128 v6 = a1[11];
  *(_OWORD *)(v4 + 184) = a1[10];
  *(_OWORD *)(v4 + 200) = v6;
  *(_OWORD *)(v4 + 216) = a1[12];
  __int128 v7 = a1[4];
  *(_OWORD *)(v4 + 104) = a1[5];
  __int128 v8 = a1[7];
  *(_OWORD *)(v4 + 120) = a1[6];
  *(_OWORD *)(v4 + 136) = v8;
  *(_OWORD *)(v4 + 152) = v5;
  __int128 v9 = *a1;
  *(_OWORD *)(v4 + 40) = a1[1];
  __int128 v10 = a1[3];
  *(_OWORD *)(v4 + 56) = a1[2];
  *(_OWORD *)(v4 + 72) = v10;
  *(_OWORD *)(v4 + 88) = v7;
  *(void *)(v4 + 16) = v2;
  *(_OWORD *)(v4 + 24) = v9;
  uint64_t v11 = swift_allocObject(&unk_100950678, 32LL, 7LL);
  *(void *)(v11 + 16) = sub_100338A88;
  *(void *)(v11 + 24) = v4;
  *(void *)&__int128 v31 = sub_100095030;
  *((void *)&v31 + 1) = v11;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  *(void *)&__int128 v30 = sub_100025BD4;
  *((void *)&v30 + 1) = &unk_100950690;
  uint64_t v12 = _Block_copy(&aBlock);
  swift_retain_n(v2, 2LL);
  sub_1002E9D14(a1);
  swift_retain();
  swift_release();
  dispatch_sync(v3, v12);
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v11, "", 105LL, 553LL, 32LL, 1LL);
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v15 = qword_100A2AE20;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v15, &type metadata for SecureLocationsConfig);
    swift_release();
    __int128 v39 = v26;
    __int128 v40 = v27;
    __int128 v41 = v28;
    __int128 v35 = v22;
    __int128 v36 = v23;
    __int128 v37 = v24;
    __int128 v38 = v25;
    __int128 v31 = v18;
    __int128 v32 = v19;
    __int128 v33 = v20;
    __int128 v34 = v21;
    __int128 aBlock = v16;
    __int128 v30 = v17;
    uint64_t result = (uint64_t)sub_100246384(&aBlock);
    if ((BYTE8(aBlock) & 1) == 0) {
      return sub_10033836C();
    }
  }

  return result;
}

_BYTE *sub_1003389C4@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1003389D8(a1, a2);
}

_BYTE *sub_1003389D8@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1LL << v3) & 0x100003E01LL;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0LL && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100338A44()
{
  return swift_deallocObject(v0, 232LL, 7LL);
}

void *sub_100338A88()
{
  return sub_1005C8AB4(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_100338A94()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100338AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100338AB4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100338ABC()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100338AF8(uint64_t a1)
{
  return sub_100338D48( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_10031AF68);
}

uint64_t sub_100338B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100338B4C(uint64_t a1)
{
  return sub_10031BC70( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void (**)(void *, uint64_t))(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100338B6C(uint64_t a1)
{
  return sub_10031BED4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100338B94()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100338BB8@<X0>(void *a1@<X8>)
{
  return sub_1005C7AD8(v1[2], v1[3], v1[4], a1);
}

void sub_100338BD4(_BYTE *a1@<X8>)
{
}

double sub_100338BF0@<D0>(void *a1@<X8>)
{
  return sub_10032152C(v1, a1);
}

uint64_t sub_100338C08()
{
  return swift_deallocObject(v0, 152LL, 7LL);
}

uint64_t sub_100338C64(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 144);
  BOOL v7 = (void *)swift_task_alloc(dword_1009A959C);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100015D58;
  _OWORD v7[4] = v5;
  _OWORD v7[5] = v6;
  _OWORD v7[2] = a1;
  _OWORD v7[3] = v4;
  return swift_task_switch(sub_100317A34, 0LL, 0LL);
}

uint64_t sub_100338CDC()
{
  return sub_100339F38(49LL);
}

uint64_t sub_100338CE8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100338CF8()
{
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100338D3C(uint64_t a1)
{
  return sub_100338D48( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_100317B80);
}

uint64_t sub_100338D48( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_100338D5C()
{
  return sub_100339D24( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100338D70(uint64_t a1)
{
  return sub_100318A40( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100338D80(uint64_t a1)
{
  return sub_1000A6404(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100338D9C()
{
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100338DE0()
{
}

uint64_t sub_100338DF0()
{
  return sub_100339F38(49LL);
}

uint64_t sub_100338DF8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100338E08()
{
  uint64_t v1 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6));

  swift_release(*(void *)(v0 + v8));
  swift_release(*(void *)(v0 + v9));
  swift_release(*(void *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v5);
}

void sub_100338ED0()
{
  uint64_t v1 = *(void *)(type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100317E6C( v0 + v2,  *(void *)(v0 + v3),  *(void **)(v0 + v4),  *(void *)(v0 + v5),  *(void *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void (**)(id, uint64_t))(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100338F44()
{
  return sub_100339F38(49LL);
}

uint64_t sub_100338F4C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100338F5C()
{
  return sub_100339F38(49LL);
}

uint64_t sub_100338F64()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_100338F74(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[14];
  swift_bridgeObjectRetain(a1[11]);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_100338FE4()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

void sub_100338FF0(void *a1, uint64_t a2)
{
}

uint64_t sub_100339000()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100339034()
{
  return sub_100339CA0((uint64_t (*)(void, void, void, void, void))sub_10032276C);
}

unint64_t sub_100339040()
{
  unint64_t result = qword_1009A95B0;
  if (!qword_1009A95B0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FBE44,  &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A95B0);
  }

  return result;
}

uint64_t sub_100339084()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

void *sub_100339090(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_10033911C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_100339140(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[10];
  uint64_t v8 = a1[11];
  swift_bridgeObjectRetain(a1[12]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_1003391CC()
{
  return sub_10033A22C( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease,  40LL);
}

void sub_1003391E4()
{
}

uint64_t sub_1003391F0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100339200( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a12);
    return swift_bridgeObjectRelease(a13);
  }

  return result;
}

uint64_t sub_10033928C(uint64_t a1)
{
  return sub_100324E30(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_1003392BC()
{
  return swift_deallocObject(v0, 168LL, 7LL);
}

void sub_100339338(uint64_t a1)
{
}

uint64_t sub_10033934C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100339388(uint64_t a1, uint64_t a2)
{
  return sub_10058A3E0( a1,  a2,  *(void *)(v2 + 16),  *(void **)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(uint64_t (**)(uint64_t))(v2 + 56),  *(void *)(v2 + 64));
}

uint64_t sub_1003393B8()
{
  return sub_10033A22C( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease,  40LL);
}

uint64_t sub_1003393D0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003393E0()
{
  return swift_deallocObject(v0, 128LL, 7LL);
}

uint64_t sub_100339444()
{
  return sub_100326110(*(void *)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_100339450@<X0>(void *a1@<X8>)
{
  return sub_1006BD574(*(void *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_10033946C()
{
  return swift_deallocObject(v0, 152LL, 7LL);
}

uint64_t sub_1003394E0(uint64_t a1)
{
  return sub_1003252CC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  v1 + 40,  *(void *)(v1 + 144));
}

uint64_t sub_1003394F4(uint64_t a1)
{
  return sub_1003255F0(a1, v1);
}

void sub_100339510(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100339518()
{
  return sub_10033A22C((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_10033952C(uint64_t a1)
{
  return sub_1003277EC(a1, *(void *)(v1 + 16), *(void (**)(void, void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100339538(uint64_t a1)
{
  return sub_1003280DC(a1, *(uint64_t (**)(void *, uint64_t))(v1 + 16));
}

unint64_t sub_100339540()
{
  unint64_t result = qword_1009A95C8;
  if (!qword_1009A95C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081376C, &type metadata for SecureLocationLoadLabelledLocationsResponse);
    atomic_store(result, (unint64_t *)&qword_1009A95C8);
  }

  return result;
}

uint64_t sub_100339584(uint64_t a1)
{
  return sub_1003282C8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10033959C()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 33LL, 7LL);
}

void sub_1003395C8(uint64_t a1)
{
}

unint64_t sub_1003395D4()
{
  unint64_t result = qword_1009A95D0;
  if (!qword_1009A95D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8368, &type metadata for SecureLocationsEncodedPushPayload);
    atomic_store(result, (unint64_t *)&qword_1009A95D0);
  }

  return result;
}

uint64_t sub_100339618(uint64_t a1)
{
  return sub_100322158(a1, *(void *)(v1 + 16), *(os_log_s **)(v1 + 24));
}

void sub_100339634(os_log_s *a1)
{
}

uint64_t sub_100339644()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100339668()
{
  return sub_10033A22C((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

void sub_10033967C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10033968C(uint64_t a1)
{
  return sub_10033A034(a1);
}

uint64_t sub_1003396A0()
{
  uint64_t v1 = type metadata accessor for SecureLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 52);
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1003397A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SecureLocation(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10031CFA0( a1,  *(void **)(v1 + 16),  *(void (**)(id))(v1 + 24),  *(void (**)(id))(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + v5 + 8),  *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void **)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100339838()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_10033988C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 104);
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A95E4);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000159BC;
  _OWORD v7[4] = v5;
  _OWORD v7[5] = v6;
  _OWORD v7[2] = a1;
  _OWORD v7[3] = v4;
  return swift_task_switch(sub_10031DD7C, 0LL, 0LL);
}

uint64_t sub_100339904()
{
  uint64_t v1 = type metadata accessor for SecureLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + *(int *)(v1 + 52);
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1003399E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SecureLocation(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10031DE84( a1,  v1 + v4,  *(void *)(v1 + v5),  *(void (**)(id))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100339A54()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

void sub_100339A60(uint64_t a1)
{
}

void *sub_100339A6C(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_100339AD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100370864(*(id *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_100339AEC(uint64_t a1)
{
  return sub_10032DB48(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100339B08()
{
  return sub_100339F38(48LL);
}

uint64_t sub_100339B10(uint64_t a1)
{
  return sub_10032D430(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100339B1C@<X0>(void *a1@<X8>)
{
  return sub_1005C7A30(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100339B38()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100339B78()
{
  return sub_10032D65C(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100339B94()
{
  return sub_10032BE08( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void **)(v0 + 32),  *(void **)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64));
}

uint64_t sub_100339BAC()
{
  swift_release(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100339BF0(uint64_t a1)
{
  return sub_10032BF14( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void **)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64));
}

uint64_t sub_100339C04()
{
  swift_release(*(void *)(v0 + 64));
  swift_release(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

void sub_100339C50(uint64_t a1)
{
}

uint64_t sub_100339C80()
{
  return sub_100339D24( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release);
}

uint64_t sub_100339C94()
{
  return sub_100339CA0((uint64_t (*)(void, void, void, void, void))sub_10031F450);
}

uint64_t sub_100339CA0(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100339CB4(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return sub_10001736C(a2, a3);
  }

  return result;
}

uint64_t sub_100339CE8()
{
  return sub_100339F38(49LL);
}

uint64_t sub_100339CF0()
{
  return sub_1003701D0( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void **)(v0 + 32),  *(void **)(v0 + 40),  *(unsigned __int8 *)(v0 + 48));
}

uint64_t sub_100339D00()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100339D10()
{
  return sub_100339D24( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100339D24(void (*a1)(void), void (*a2)(void))
{
  swift_release(*(void *)(v2 + 48));
  return swift_deallocObject(v2, 56LL, 7LL);
}

uint64_t sub_100339D70(uint64_t a1)
{
  return sub_10032083C( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100339D80()
{
  return sub_10033A22C((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_100339D94(uint64_t a1)
{
  return sub_100321324(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100339DA0@<X0>(uint64_t a1@<X8>)
{
  return sub_1006BBA5C(v1, a1);
}

uint64_t sub_100339DB8@<X0>(void *a1@<X8>)
{
  return sub_1006BC8E0(*(void *)(v1 + 16), *(void *)(v1 + 24), *(_BYTE *)(v1 + 32), a1);
}

uint64_t sub_100339DD4()
{
  return sub_10033A22C( (void (*)(void))&_swift_errorRelease,  (void (*)(void))&_swift_release,  40LL);
}

uint64_t sub_100339DEC()
{
  return sub_10032B7DC( *(void *)(v0 + 16),  *(uint64_t (**)(uint64_t))(v0 + 24),  *(void *)(v0 + 32),  "Unsubscribe failed %s");
}

uint64_t sub_100339E10()
{
  uint64_t v1 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6));

  swift_release(*(void *)(v0 + v8));
  swift_release(*(void *)(v0 + v9 + 8));
  return swift_deallocObject(v0, v9 + 16, v5);
}

void sub_100339EC8()
{
  uint64_t v1 = *(void *)(type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100320B10( v0 + v2,  *(void **)(v0 + v3),  *(id *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void **)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void (**)(void))(v0 + ((((((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void ***)(v0 + ((((((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
              + 8));
}

uint64_t sub_100339F30()
{
  return sub_100339F38(48LL);
}

uint64_t sub_100339F38(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

void sub_100339F78()
{
}

uint64_t sub_100339F84()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_100339F94()
{
  unint64_t result = qword_1009A95F8;
  if (!qword_1009A95F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED5A0, &type metadata for SecureLocationsSubmitResponseBody);
    atomic_store(result, (unint64_t *)&qword_1009A95F8);
  }

  return result;
}

uint64_t sub_100339FD8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100339FE8(uint64_t a1)
{
}

uint64_t sub_100339FF0(uint64_t a1)
{
  return sub_10031E900(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

uint64_t sub_10033A010()
{
  return sub_10033A22C((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40LL);
}

void sub_10033A024(uint64_t a1)
{
}

uint64_t sub_10033A034(uint64_t a1)
{
  return sub_10031CD90(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11]);
}

uint64_t sub_10033A070()
{
  return sub_10033A22C( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease,  41LL);
}

uint64_t sub_10033A088()
{
  return sub_10033A22C( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease,  41LL);
}

unint64_t sub_10033A0A0()
{
  unint64_t result = qword_1009A9600;
  if (!qword_1009A9600)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F562C, &type metadata for SecureLocationsFetchResponseBody);
    atomic_store(result, (unint64_t *)&qword_1009A9600);
  }

  return result;
}

uint64_t sub_10033A0E4(uint64_t a1)
{
  return sub_10031A870( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56));
}

uint64_t sub_10033A104()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10033A148(uint64_t a1)
{
  return sub_100330E44( a1,  *(id *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56));
}

uint64_t sub_10033A15C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10033A190()
{
  return sub_100328330( *(void *)(v0 + 24),  *(unsigned __int8 *)(v0 + 32),  *(uint64_t (**)(uint64_t, void))(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_10033A1BC()
{
  swift_release(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_10033A200(uint64_t a1)
{
}

uint64_t sub_10033A214()
{
  return sub_10033A22C( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease,  41LL);
}

uint64_t sub_10033A22C(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  return swift_deallocObject(v3, a3, 7LL);
}

uint64_t sub_10033A278()
{
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_10033A2B4()
{
}

uint64_t storeEnumTagSinglePayload for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_10033A314 + 4 * byte_1007FBB97[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10033A348 + 4 * byte_1007FBB92[v4]))();
}

uint64_t sub_10033A348(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10033A350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10033A358LL);
  }
  return result;
}

uint64_t sub_10033A364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10033A36CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_10033A370(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10033A378(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys()
{
  return &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys;
}

unint64_t sub_10033A398()
{
  unint64_t result = qword_1009A9608;
  if (!qword_1009A9608)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FBF40,  &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9608);
  }

  return result;
}

unint64_t sub_10033A3E0()
{
  unint64_t result = qword_1009A9610;
  if (!qword_1009A9610)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FBE78,  &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9610);
  }

  return result;
}

unint64_t sub_10033A428()
{
  unint64_t result = qword_1009A9618;
  if (!qword_1009A9618)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007FBEA0,  &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9618);
  }

  return result;
}

uint64_t sub_10033A46C(uint64_t a1)
{
  return sub_100338D80(a1);
}

uint64_t sub_10033A480(uint64_t a1)
{
  return sub_100339AEC(a1);
}

uint64_t sub_10033A580(uint64_t a1)
{
  return sub_100338B6C(a1);
}

uint64_t sub_10033A594@<X0>(void *a1@<X8>)
{
  return sub_100338BB8(a1);
}

uint64_t sub_10033A5A8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_10033A5C0, 0LL, 0LL);
}

uint64_t sub_10033A5C0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  uint64_t v4 = type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v5 = sub_100007864(&qword_1009A9820, type metadata accessor for ObservedAdvertisement, (uint64_t)&unk_1007E9F5C);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  uint64_t v8 = v7;
  v0[4] = v6;
  v0[5] = v7;
  swift_release();
  uint64_t v9 = v0[3];
  unint64_t v10 = (void *)swift_task_alloc(48LL);
  v0[6] = v10;
  v10[2] = v9;
  void v10[3] = v6;
  v10[4] = v8;
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10033A708;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v11,  0LL,  0LL,  0x5F28747265736E69LL,  0xEA0000000000293ALL,  sub_100340114,  v10,  (char *)&type metadata for () + 8);
}

uint64_t sub_10033A708()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1003401A8;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 48));
    uint64_t v4 = sub_100340254;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

void sub_10033A774(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100951D70, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033F934;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033A8C4;
  aBlock[3] = &unk_100951D88;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 insertWithAdvertisementData:isa completion:v11];
  _Block_release(v11);
}

void sub_10033A8C4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

uint64_t sub_10033A918(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return swift_task_switch(sub_10033A930, 0LL, 0LL);
}

uint64_t sub_10033A930()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v0[2] = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A9758);
  uint64_t v5 = sub_10033FD7C( &qword_1009A9818,  &qword_1009A9820,  (uint64_t)&unk_1007E9F5C,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2, v4, v5);
  v0[5] = v6;
  v0[6] = v7;
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = v0[4];
  swift_release();
  uint64_t v11 = (void *)swift_task_alloc(48LL);
  v0[7] = v11;
  v11[2] = v10;
  v11[3] = v8;
  v11[4] = v9;
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[8] = v12;
  void *v12 = v0;
  v12[1] = sub_10033AA90;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v12,  0LL,  0LL,  0x5F286574656C6564LL,  0xEA0000000000293ALL,  sub_1003400FC,  v11,  (char *)&type metadata for () + 8);
}

uint64_t sub_10033AA90()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1003401A4;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 56));
    uint64_t v4 = sub_100340250;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

void sub_10033AAFC(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100951D20, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_100340084;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_100951D38;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 deleteObservedAdvertisementsWithAdvertisementsData:isa completion:v11];
  _Block_release(v11);
}

uint64_t sub_10033AC4C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    unint64_t v8 = v7;
  }

  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000LL;
  }

  id v9 = a3;
  v5(v4, v8, a3);

  sub_1000182F0((uint64_t)v4, v8);
  return swift_release();
}

uint64_t sub_10033ACE0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return swift_task_switch(sub_10033ACF8, 0LL, 0LL);
}

uint64_t sub_10033ACF8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v0[2] = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A9758);
  uint64_t v5 = sub_10033FD7C( &qword_1009A9818,  &qword_1009A9820,  (uint64_t)&unk_1007E9F5C,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2, v4, v5);
  v0[5] = v6;
  v0[6] = v7;
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = v0[4];
  swift_release();
  uint64_t v11 = (void *)swift_task_alloc(48LL);
  v0[7] = v11;
  v11[2] = v10;
  v11[3] = v8;
  v11[4] = v9;
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[8] = v12;
  void *v12 = v0;
  v12[1] = sub_10033AE58;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v12,  0LL,  0LL,  0xD000000000000011LL,  0x800000010085E610LL,  sub_1003400E4,  v11,  (char *)&type metadata for () + 8);
}

uint64_t sub_10033AE58()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10033AEF8;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 56));
    uint64_t v4 = sub_10033AEC4;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033AEC4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10033AEF8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_100016F9C(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10033AF38(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100951CD0, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_100340084;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_100951CE8;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 markObservedAdvertisementsPublishedWithAdvertisementsData:isa completion:v11];
  _Block_release(v11);
}

uint64_t sub_10033B088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = a3;
    swift_errorRetain(a3);
    uint64_t v3 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(throwing:)(&v6, v3);
  }

  else
  {
    uint64_t v5 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(returning:)(v5, v5);
  }

uint64_t sub_10033B0EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = a4;
  *(_BYTE *)(v4 + 96) = a3;
  *(void *)(v4 + 32) = a1;
  return swift_task_switch(sub_10033B10C, 0LL, 0LL);
}

uint64_t sub_10033B10C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  *(void *)(v0 + 16) = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A9800);
  unint64_t v5 = sub_10033FFA8();
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 16, v4, v5);
  *(void *)(v0 + 56) = v6;
  *(void *)(v0 + 64) = v7;
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  char v10 = *(_BYTE *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 40);
  uint64_t v11 = *(void *)(v0 + 48);
  swift_release();
  uint64_t v13 = swift_task_alloc(64LL);
  *(void *)(v0 + 72) = v13;
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v8;
  *(void *)(v13 + 32) = v9;
  *(void *)(v13 + 40) = v12;
  *(_BYTE *)(v13 + 48) = v10;
  double v14 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 80) = v14;
  uint64_t v15 = sub_100004AEC(&qword_1009A9758);
  *double v14 = v0;
  v14[1] = sub_10033B270;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 24,  0LL,  0LL,  0xD000000000000040LL,  0x800000010085E590LL,  sub_100340024,  v13,  v15);
}

uint64_t sub_10033B270()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10033B314;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 72));
    uint64_t v4 = sub_10033B2DC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033B2DC()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 24));
}

uint64_t sub_10033B314()
{
  uint64_t v1 = *(void *)(v0 + 72);
  sub_100016F9C(*(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10033B354(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10 = sub_100004AEC(&qword_1009A9760);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = (v14 + 16) & ~v14;
  uint64_t v16 = swift_allocObject(&unk_100951C30, v15 + v12, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))( v16 + v15,  (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  aBlock[4] = sub_10033FD1C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_100951C48;
  __int128 v17 = _Block_copy(aBlock);
  swift_release();
  [a2 reverseChronologicalObservationsWithIdentifierData:isa limit:a5 isPublished:a6 & 1 completion:v17];
  _Block_release(v17);
}

uint64_t sub_10033B4BC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_task_switch(sub_10033B4D4, 0LL, 0LL);
}

uint64_t sub_10033B4D4()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v0[2] = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A97C0);
  uint64_t v5 = sub_1001C8A7C( &qword_1009A97C8,  &qword_1009A97C0,  (void (*)(void))sub_1000AB9FC,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2, v4, v5);
  v0[6] = v6;
  v0[7] = v7;
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = v0[5];
  swift_release();
  uint64_t v11 = (void *)swift_task_alloc(48LL);
  v0[8] = v11;
  v11[2] = v10;
  v11[3] = v8;
  v11[4] = v9;
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v12;
  uint64_t v13 = sub_100004AEC(&qword_1009A9758);
  void *v12 = v0;
  v12[1] = sub_10033B644;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 3,  0LL,  0LL,  0xD00000000000001DLL,  0x800000010085E570LL,  sub_10033FF90,  v11,  v13);
}

uint64_t sub_10033B644()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10033B6E8;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 64));
    uint64_t v4 = sub_10033B6B0;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033B6B0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 24));
}

uint64_t sub_10033B6E8()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_100016F9C(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10033B728(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9760);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100951BE0, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033FD1C;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_100951BF8;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 observationsWithAdvertisementsData:isa completion:v11];
  _Block_release(v11);
}

void sub_10033B878(uint64_t a1, void *a2, double a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A97E8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v6);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_100951B90, v10 + v8, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v11 + v10,  (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  aBlock[4] = sub_10033FF20;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_100951BA8;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  [a2 nearbyBeaconsWithSeconds:v12 completion:a3];
  _Block_release(v12);
}

uint64_t sub_10033B9B8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v39 - v15;
  if (a3)
  {
    uint64_t v17 = swift_errorRetain(a3);
LABEL_5:
    swift_willThrow(v17);
    v43[0] = a3;
    uint64_t v20 = sub_100004AEC(&qword_1009A97E8);
    return CheckedContinuation.resume(throwing:)(v43, v20);
  }

  if (a2 >> 60 == 15)
  {
    unint64_t v18 = sub_1000867D4();
    uint64_t v17 = swift_allocError(&type metadata for ObservationStoreService.Error, v18, 0LL, 0LL);
    a3 = v17;
    *__int128 v19 = 2;
    goto LABEL_5;
  }

  uint64_t v42 = v14;
  uint64_t v22 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  uint64_t v23 = sub_10001736C(a1, a2);
  PropertyListDecoder.init()(v23);
  uint64_t v24 = sub_100004AEC(&qword_1009AED50);
  unint64_t v25 = sub_10033FF34();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v43, v24, a1, a2, v24, v25);
  uint64_t v40 = a1;
  unint64_t v41 = a2;
  swift_release();
  uint64_t v26 = v43[0];
  uint64_t v27 = *(void *)(v43[0] + 16LL);
  if (v27)
  {
    v39[2] = a4;
    swift_bridgeObjectRetain(v43[0]);
    v39[1] = v26;
    __int128 v28 = (void *)(v26 + 40);
    unint64_t v29 = _swiftEmptyArrayStorage;
    __int128 v30 = v42;
    do
    {
      uint64_t v31 = *(v28 - 1);
      uint64_t v32 = *v28;
      swift_bridgeObjectRetain(*v28);
      UUID.init(uuidString:)(v31, v32);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
      {
        sub_100015794((uint64_t)v10, &qword_10099D8A0);
      }

      else
      {
        __int128 v33 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
        v33(v16, v10, v11);
        v33(v30, v16, v11);
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0) {
          unint64_t v29 = (void *)sub_1004C44BC(0, v29[2] + 1LL, 1, (unint64_t)v29);
        }
        unint64_t v35 = v29[2];
        unint64_t v34 = v29[3];
        if (v35 >= v34 >> 1) {
          unint64_t v29 = (void *)sub_1004C44BC(v34 > 1, v35 + 1, 1, (unint64_t)v29);
        }
        v29[2] = v35 + 1;
        unint64_t v36 = (unint64_t)v29
        __int128 v30 = v42;
        v33((char *)v36, v42, v11);
      }

      v28 += 2;
      --v27;
    }

    while (v27);
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v29 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  uint64_t v37 = sub_1006F1060((uint64_t)v29);
  swift_bridgeObjectRelease();
  v43[0] = v37;
  swift_bridgeObjectRetain(v37);
  uint64_t v38 = sub_100004AEC(&qword_1009A97E8);
  CheckedContinuation.resume(returning:)(v43, v38);
  sub_1000182F0(v40, v41);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10033BD48(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_task_switch(sub_10033BD60, 0LL, 0LL);
}

uint64_t sub_10033BD60()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v0[2] = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A97C0);
  uint64_t v5 = sub_1001C8A7C( &qword_1009A97C8,  &qword_1009A97C0,  (void (*)(void))sub_1000AB9FC,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2, v4, v5);
  v0[6] = v6;
  v0[7] = v7;
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = v0[5];
  swift_release();
  uint64_t v11 = (void *)swift_task_alloc(48LL);
  v0[8] = v11;
  v11[2] = v10;
  v11[3] = v8;
  v11[4] = v9;
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v12;
  uint64_t v13 = sub_100004AEC(&qword_1009A97D0);
  void *v12 = v0;
  v12[1] = sub_10033BED0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 3,  0LL,  0LL,  0xD00000000000001ALL,  0x800000010085E530LL,  sub_10033FE58,  v11,  v13);
}

uint64_t sub_10033BED0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1003401A0;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 64));
    uint64_t v4 = sub_100340258;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

void sub_10033BF3C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A97D8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100951B40, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033FE70;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_100951B58;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 locationsWithAdvertisementsData:isa completion:v11];
  _Block_release(v11);
}

uint64_t sub_10033C08C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_10033C0A4, 0LL, 0LL);
}

uint64_t sub_10033C0A4()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  uint64_t v4 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v5 = sub_100007864(&qword_1009A96D8, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_1007FE0D4);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  v0[4] = v6;
  v0[5] = v7;
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = v0[3];
  swift_release();
  uint64_t v11 = (void *)swift_task_alloc(48LL);
  v0[6] = v11;
  v11[2] = v10;
  v11[3] = v8;
  v11[4] = v9;
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v12;
  uint64_t v13 = sub_100004AEC(&qword_1009A9798);
  void *v12 = v0;
  v12[1] = sub_10033C200;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 9,  0LL,  0LL,  0xD000000000000013LL,  0x800000010085E510LL,  sub_10033FE2C,  v11,  v13);
}

uint64_t sub_10033C200()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10033C2AC;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 48));
    uint64_t v4 = sub_10033C26C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033C26C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 72) | (*(unsigned __int8 *)(v0 + 73) << 8));
}

uint64_t sub_10033C2AC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_100016F9C(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10033C2EC(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A97A0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100951AF0, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033FE44;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_100951B08;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 latestStatusWithIdentifierData:isa completion:v11];
  _Block_release(v11);
}

uint64_t sub_10033C43C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = swift_errorRetain(a3);
LABEL_5:
    swift_willThrow(v4);
    v19[0] = v3;
    uint64_t v8 = sub_100004AEC(&qword_1009A97A0);
    return CheckedContinuation.resume(throwing:)(v19, v8);
  }

  if (a2 >> 60 == 15)
  {
    unint64_t v6 = sub_1000867D4();
    uint64_t v4 = swift_allocError(&type metadata for ObservationStoreService.Error, v6, 0LL, 0LL);
    uint64_t v3 = v4;
    _BYTE *v7 = 2;
    goto LABEL_5;
  }

  uint64_t v11 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = sub_10001736C(a1, a2);
  PropertyListDecoder.init()(v12);
  uint64_t v13 = sub_100004AEC(&qword_1009A97A8);
  uint64_t v14 = sub_1001C8A7C( &qword_1009A97B0,  &qword_1009A97A8,  (void (*)(void))sub_1000AB930,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v19, v13, a1, a2, v13, v14);
  swift_release();
  uint64_t v15 = *(void *)(v19[0] + 16LL);
  if (v15) {
    char v16 = *(_BYTE *)(v19[0] + 32LL);
  }
  else {
    char v16 = 0;
  }
  BOOL v17 = v15 == 0;
  swift_bridgeObjectRelease();
  LOBYTE(v19[0]) = v16;
  BYTE1(v19[0]) = v17;
  uint64_t v18 = sub_100004AEC(&qword_1009A97A0);
  CheckedContinuation.resume(returning:)(v19, v18);
  return sub_1000182F0(a1, a2);
}

uint64_t sub_10033C5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_10033C60C, 0LL, 0LL);
}

uint64_t sub_10033C60C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  uint64_t v4 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v5 = sub_100007864(&qword_1009A96D8, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_1007FE0D4);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  uint64_t v8 = v7;
  v0[5] = v6;
  v0[6] = v7;
  swift_release();
  uint64_t v9 = v0[4];
  uint64_t v10 = (void *)swift_task_alloc(48LL);
  v0[7] = v10;
  v10[2] = v9;
  void v10[3] = v6;
  v10[4] = v8;
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[8] = v11;
  uint64_t v12 = sub_100004AEC(&qword_10099FB70);
  *uint64_t v11 = v0;
  v11[1] = sub_10033AA90;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0[2],  0LL,  0LL,  0xD000000000000013LL,  0x800000010085E510LL,  sub_10033FE00,  v10,  v12);
}

void sub_10033C760(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9780);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100951AA0, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033FE18;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_100951AB8;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 latestObservedAdvertisementWithIdentifierData:isa completion:v11];
  _Block_release(v11);
}

uint64_t sub_10033C8B0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100004AEC(&qword_1009A9788);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v38 - v12;
  uint64_t v14 = sub_100004AEC(&qword_10099FB70);
  uint64_t v15 = __chkstk_darwin(v14);
  BOOL v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  __int128 v19 = (char *)v38 - v18;
  if (a3)
  {
    uint64_t v20 = swift_errorRetain(a3);
LABEL_5:
    swift_willThrow(v20);
    v39[0] = a3;
    uint64_t v23 = sub_100004AEC(&qword_1009A9780);
    return CheckedContinuation.resume(throwing:)(v39, v23);
  }

  if (a2 >> 60 == 15)
  {
    unint64_t v21 = sub_1000867D4();
    uint64_t v20 = swift_allocError(&type metadata for ObservationStoreService.Error, v21, 0LL, 0LL);
    a3 = v20;
    _BYTE *v22 = 2;
    goto LABEL_5;
  }

  v38[1] = a4;
  uint64_t v25 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  uint64_t v26 = sub_10001736C(a1, a2);
  PropertyListDecoder.init()(v26);
  uint64_t v27 = sub_100004AEC(&qword_1009A9758);
  uint64_t v28 = sub_10033FD7C( &qword_1009A9768,  &qword_1009A9770,  (uint64_t)&unk_1007E9F84,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v39, v27, a1, a2, v27, v28);
  v38[0] = a1;
  swift_release();
  uint64_t v29 = v39[0];
  uint64_t v30 = *(void *)(v39[0] + 16LL);
  uint64_t v31 = type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 - 8);
  if (v30)
  {
    uint64_t v34 = *(void *)(v31 - 8);
    sub_10001DC4C( v29 + ((*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80)),  (uint64_t)v19,  type metadata accessor for ObservedAdvertisement);
    uint64_t v33 = v34;
    uint64_t v35 = 0LL;
  }

  else
  {
    uint64_t v35 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v19, v35, 1LL, v32);
  swift_bridgeObjectRelease();
  sub_10001581C((uint64_t)v19, (uint64_t)v13, &qword_10099FB70);
  swift_storeEnumTagMultiPayload(v13, v8, 0LL);
  sub_10001581C((uint64_t)v13, (uint64_t)v11, &qword_1009A9788);
  if (swift_getEnumCaseMultiPayload(v11, v8) == 1)
  {
    v39[0] = *v11;
    uint64_t v36 = sub_100004AEC(&qword_1009A9780);
    CheckedContinuation.resume(throwing:)(v39, v36);
  }

  else
  {
    sub_100015750((uint64_t)v11, (uint64_t)v17, &qword_10099FB70);
    uint64_t v37 = sub_100004AEC(&qword_1009A9780);
    CheckedContinuation.resume(returning:)(v17, v37);
  }

  sub_1000182F0(v38[0], a2);
  sub_100015794((uint64_t)v13, &qword_1009A9788);
  return sub_100015794((uint64_t)v19, &qword_10099FB70);
}

uint64_t sub_10033CC14(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  *(_BYTE *)(v5 + 96) = a3;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return swift_task_switch(sub_10033CC34, 0LL, 0LL);
}

uint64_t sub_10033CC34()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  uint64_t v4 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v5 = sub_100007864(&qword_1009A96D8, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_1007FE0D4);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  uint64_t v8 = v7;
  *(void *)(v0 + 48) = v6;
  *(void *)(v0 + 56) = v7;
  swift_release();
  uint64_t v9 = *(unsigned __int8 *)(v0 + 96);
  if ((_DWORD)v9 == 6) {
    id v10 = 0LL;
  }
  else {
    id v10 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:v9];
  }
  *(void *)(v0 + 64) = v10;
  uint64_t v12 = *(void *)(v0 + 32);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v13 = (void *)swift_task_alloc(64LL);
  *(void *)(v0 + 72) = v13;
  v13[2] = v11;
  v13[3] = v6;
  v13[4] = v8;
  v13[5] = v10;
  v13[6] = v12;
  uint64_t v14 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 80) = v14;
  uint64_t v15 = sub_100004AEC(&qword_1009A96E0);
  *uint64_t v14 = v0;
  v14[1] = sub_10033CDD0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 16),  0LL,  0LL,  0xD000000000000029LL,  0x800000010085E370LL,  sub_10033F958,  v13,  v15);
}

uint64_t sub_10033CDD0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10033CE80;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 72));
    uint64_t v4 = sub_10033CE3C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033CE3C()
{
  unint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);

  sub_100016F9C(v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10033CE80()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  unint64_t v2 = *(void *)(v0 + 56);

  sub_100016F9C(v3, v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10033CED4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v22 = a2;
  uint64_t v23 = a5;
  uint64_t v8 = sub_100004AEC(&qword_1009A96E8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001581C(a6, (uint64_t)v13, &qword_10099D8A0);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1LL, v15) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v8);
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  uint64_t v20 = swift_allocObject(&unk_1009517D0, v19 + v10, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))( v20 + v19,  (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v8);
  aBlock[4] = sub_10033F974;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_1009517E8;
  unint64_t v21 = _Block_copy(aBlock);
  swift_release();
  [v22 latestDeviceEventWithIdentifierData:v14.super.isa source:v23 attachedDevice:isa completion:v21];
  _Block_release(v21);
}

uint64_t sub_10033D0D0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = a4;
  uint64_t v7 = type metadata accessor for DeviceEvent(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = sub_100004AEC(&qword_1009A96E0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_1009A96F0);
  uint64_t v15 = __chkstk_darwin(v14);
  BOOL v17 = (uint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v19 = __chkstk_darwin(v18);
  unint64_t v21 = (uint64_t *)((char *)&v43 - v20);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v25 = (char *)&v43 - v23;
  if (a3)
  {
    uint64_t v26 = swift_errorRetain(a3);
    swift_willThrow(v26);
    uint64_t v47 = a3;
    uint64_t v27 = sub_100004AEC(&qword_1009A96E8);
    return CheckedContinuation.resume(throwing:)(&v47, v27);
  }

  else
  {
    uint64_t v44 = v13;
    uint64_t v45 = v8;
    if (a2 >> 60 == 15)
    {
      uint64_t v29 = v22;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))((char *)&v43 - v23, 1LL, 1LL, v7);
      swift_storeEnumTagMultiPayload(v25, v29, 0LL);
      sub_10001581C((uint64_t)v25, (uint64_t)v21, &qword_1009A96F0);
      if (swift_getEnumCaseMultiPayload(v21, v29) == 1)
      {
        uint64_t v47 = *v21;
        uint64_t v30 = sub_100004AEC(&qword_1009A96E8);
        CheckedContinuation.resume(throwing:)(&v47, v30);
      }

      else
      {
        uint64_t v35 = (uint64_t)v44;
        sub_100015750((uint64_t)v21, (uint64_t)v44, &qword_1009A96E0);
        uint64_t v36 = sub_100004AEC(&qword_1009A96E8);
        CheckedContinuation.resume(returning:)(v35, v36);
      }

      return sub_100015794((uint64_t)v25, &qword_1009A96F0);
    }

    else
    {
      uint64_t v31 = v22;
      uint64_t v43 = v24;
      uint64_t v32 = type metadata accessor for PropertyListDecoder(0LL);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      uint64_t v33 = sub_10001736C(a1, a2);
      PropertyListDecoder.init()(v33);
      uint64_t v34 = sub_100007864(&qword_1009A96F8, type metadata accessor for DeviceEvent, (uint64_t)&unk_1008105CC);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v10, v7, a1, a2, v7, v34);
      swift_release();
      uint64_t v37 = v43;
      sub_10001DC4C((uint64_t)v10, v43, type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v37, 0LL, 1LL, v7);
      swift_storeEnumTagMultiPayload(v37, v31, 0LL);
      sub_10001581C(v37, (uint64_t)v17, &qword_1009A96F0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v31);
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v47 = *v17;
        uint64_t v39 = sub_100004AEC(&qword_1009A96E8);
        CheckedContinuation.resume(throwing:)(&v47, v39);
      }

      else
      {
        uint64_t v40 = (uint64_t)v17;
        uint64_t v41 = (uint64_t)v44;
        sub_100015750(v40, (uint64_t)v44, &qword_1009A96E0);
        uint64_t v42 = sub_100004AEC(&qword_1009A96E8);
        CheckedContinuation.resume(returning:)(v41, v42);
      }

      sub_1000182F0(a1, a2);
      sub_100015794(v43, &qword_1009A96F0);
      return sub_10033F988((uint64_t)v10);
    }
  }

uint64_t sub_10033D4B4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_10033D4CC, 0LL, 0LL);
}

uint64_t sub_10033D4CC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  uint64_t v4 = type metadata accessor for DeviceEvent(0LL);
  uint64_t v5 = sub_100007864(&qword_1009A96C8, type metadata accessor for DeviceEvent, (uint64_t)&unk_1008105A4);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  uint64_t v8 = v7;
  v0[4] = v6;
  v0[5] = v7;
  swift_release();
  uint64_t v9 = v0[3];
  uint64_t v10 = (void *)swift_task_alloc(48LL);
  v0[6] = v10;
  v10[2] = v9;
  void v10[3] = v6;
  v10[4] = v8;
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10033D614;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v11,  0LL,  0LL,  0xD000000000000013LL,  0x800000010085E330LL,  sub_10033F91C,  v10,  (char *)&type metadata for () + 8);
}

uint64_t sub_10033D614()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10033C2AC;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 48));
    uint64_t v4 = sub_10033D680;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033D680()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10033D6B4(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100951780, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033F934;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033A8C4;
  aBlock[3] = &unk_100951798;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 storeDeviceEventWithDeviceEvent:isa completion:v11];
  _Block_release(v11);
}

void sub_10033D804(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A9760);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v6);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_100951A50, v10 + v8, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v11 + v10,  (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  aBlock[4] = sub_10033FD1C;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_100951A68;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  [a2 latestAnonymousObservationsWithLimit:a3 completion:v12];
  _Block_release(v12);
}

uint64_t sub_10033D93C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = swift_errorRetain(a3);
  }

  else
  {
    if (a2 >> 60 != 15)
    {
      uint64_t v11 = type metadata accessor for PropertyListDecoder(0LL);
      swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
      uint64_t v12 = sub_10001736C(a1, a2);
      PropertyListDecoder.init()(v12);
      uint64_t v13 = sub_100004AEC(&qword_1009A9758);
      uint64_t v14 = sub_10033FD7C( &qword_1009A9768,  &qword_1009A9770,  (uint64_t)&unk_1007E9F84,  (uint64_t)&protocol conformance descriptor for <A> [A]);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v16, v13, a1, a2, v13, v14);
      swift_release();
      swift_bridgeObjectRetain(v16[0]);
      uint64_t v15 = sub_100004AEC(&qword_1009A9760);
      CheckedContinuation.resume(returning:)(v16, v15);
      sub_1000182F0(a1, a2);
      return swift_bridgeObjectRelease();
    }

    unint64_t v6 = sub_1000867D4();
    uint64_t v4 = swift_allocError(&type metadata for ObservationStoreService.Error, v6, 0LL, 0LL);
    uint64_t v3 = v4;
    _BYTE *v7 = 2;
  }

  swift_willThrow(v4);
  v16[0] = v3;
  uint64_t v8 = sub_100004AEC(&qword_1009A9760);
  return CheckedContinuation.resume(throwing:)(v16, v8);
}

void sub_10033DADC(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9750);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_1009519B0, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v9 + v8,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033FBFC;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000AFD0;
  aBlock[3] = &unk_1009519C8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 anonymousObservationCountWithCompletion:v10];
  _Block_release(v10);
}

uint64_t sub_10033DC0C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = swift_errorRetain(a2);
    swift_willThrow(v3);
    uint64_t v7 = a2;
    uint64_t v4 = sub_100004AEC(&qword_1009A9750);
    return CheckedContinuation.resume(throwing:)(&v7, v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v6 = sub_100004AEC(&qword_1009A9750);
    return CheckedContinuation.resume(returning:)(&v7, v6);
  }

void sub_10033DC8C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v12 = sub_100004AEC(&qword_1009AF860);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))( (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v12);
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v15 + 16) & ~v15;
  uint64_t v17 = swift_allocObject(a3, v16 + v14, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))( v17 + v16,  (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12);
  aBlock[4] = a4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = a5;
  uint64_t v18 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, *a6, v18);
  _Block_release(v18);
}

uint64_t sub_10033DDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = swift_errorRetain(a3);
    swift_willThrow(v4);
    uint64_t v8 = a3;
    uint64_t v5 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(throwing:)(&v8, v5);
  }

  else
  {
    uint64_t v7 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(returning:)(v7, v7);
  }

uint64_t sub_10033DE34(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_10033DE4C, 0LL, 0LL);
}

uint64_t sub_10033DE4C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  uint64_t v4 = type metadata accessor for KeySyncMetadata(0LL);
  uint64_t v5 = sub_100007864(&qword_1009A9748, type metadata accessor for KeySyncMetadata, (uint64_t)&unk_100802470);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  uint64_t v8 = v7;
  v0[4] = v6;
  v0[5] = v7;
  swift_release();
  uint64_t v9 = v0[3];
  uint64_t v10 = (void *)swift_task_alloc(48LL);
  v0[6] = v10;
  v10[2] = v9;
  void v10[3] = v6;
  v10[4] = v8;
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10033A708;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v11,  0LL,  0LL,  0xD000000000000017LL,  0x800000010085E460LL,  sub_10033FBD0,  v10,  (char *)&type metadata for () + 8);
}

void sub_10033DF94(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100951960, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033F934;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033A8C4;
  aBlock[3] = &unk_100951978;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 storeWithKeySyncMetadataData:isa completion:v11];
  _Block_release(v11);
}

uint64_t sub_10033E0E4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v4 = a1;
    swift_errorRetain(a1);
    uint64_t v1 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(throwing:)(&v4, v1);
  }

  else
  {
    uint64_t v3 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(returning:)(v3, v3);
  }

void sub_10033E144(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9728);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100951910, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033FAA4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_100951928;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 metadataWithBeaconIdentifier:isa completion:v11];
  _Block_release(v11);
}

uint64_t sub_10033E288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  return swift_task_switch(sub_10033E2A4, 0LL, 0LL);
}

uint64_t sub_10033E2A4()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v0[2] = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A9708);
  uint64_t v5 = sub_1001C8A7C( &qword_1009A9710,  &qword_1009A9708,  (void (*)(void))sub_10033FA48,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2, v4, v5);
  v0[7] = v6;
  v0[8] = v7;
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  uint64_t v10 = v0[6];
  uint64_t v11 = v0[4];
  swift_release();
  uint64_t v12 = (void *)swift_task_alloc(48LL);
  v0[9] = v12;
  void v12[2] = v10;
  void v12[3] = v11;
  v12[4] = v8;
  v12[5] = v9;
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[10] = v13;
  uint64_t v14 = sub_100004AEC(&qword_1009A9720);
  *uint64_t v13 = v0;
  v13[1] = sub_10033B270;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 3,  0LL,  0LL,  0xD000000000000021LL,  0x800000010085E410LL,  sub_10033FA8C,  v12,  v14);
}

void sub_10033E424(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9728);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v8 = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_1009518C0, v10 + v6, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v11 + v10,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033FAA4;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033AC4C;
  aBlock[3] = &unk_1009518D8;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  [a2 metadataWithBeaconIdentifier:isa typesData:v8 completion:v12];
  _Block_release(v12);
}

uint64_t sub_10033E590( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t *a7)
{
  if (a3)
  {
    uint64_t v8 = a3;
    uint64_t v9 = swift_errorRetain(a3);
  }

  else
  {
    if (a2 >> 60 != 15)
    {
      uint64_t v18 = type metadata accessor for PropertyListDecoder(0LL);
      swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
      uint64_t v19 = sub_10001736C(a1, a2);
      PropertyListDecoder.init()(v19);
      uint64_t v20 = sub_100004AEC(a5);
      uint64_t v21 = a6();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v23, v20, a1, a2, v20, v21);
      swift_release();
      swift_bridgeObjectRetain(v23[0]);
      uint64_t v22 = sub_100004AEC(a7);
      CheckedContinuation.resume(returning:)(v23, v22);
      sub_1000182F0(a1, a2);
      return swift_bridgeObjectRelease();
    }

    unint64_t v11 = sub_1000867D4();
    uint64_t v9 = swift_allocError(&type metadata for ObservationStoreService.Error, v11, 0LL, 0LL);
    uint64_t v8 = v9;
    _BYTE *v12 = 2;
  }

  swift_willThrow(v9);
  v23[0] = v8;
  uint64_t v13 = sub_100004AEC(a7);
  return CheckedContinuation.resume(throwing:)(v23, v13);
}

void sub_10033E718(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100951870, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033F9D8;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033A8C4;
  aBlock[3] = &unk_100951888;
  unint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 deleteMetadataWithBeaconIdentifier:isa completion:v11];
  _Block_release(v11);
}

void sub_10033E85C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_100951820, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v9 + v8,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_10033F9D8;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10033A8C4;
  aBlock[3] = &unk_100951838;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 removeOrphanedKeySyncMetaDataWithCompletion:v10];
  _Block_release(v10);
}

uint64_t sub_10033E98C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = swift_errorRetain(a1);
    swift_willThrow(v2);
    uint64_t v6 = a1;
    uint64_t v3 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(throwing:)(&v6, v3);
  }

  else
  {
    uint64_t v5 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(returning:)(v5, v5);
  }

uint64_t sub_10033EA00(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A9834);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100015D58;
  void v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_10033A5C0, 0LL, 0LL);
}

uint64_t sub_10033EA64(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A982C);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100015D58;
  v5[3] = a1;
  __int128 v5[4] = v4;
  return swift_task_switch(sub_10033A930, 0LL, 0LL);
}

uint64_t sub_10033EAC8(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A9814);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000159BC;
  v5[3] = a1;
  __int128 v5[4] = v4;
  return swift_task_switch(sub_10033ACF8, 0LL, 0LL);
}

uint64_t sub_10033EB2C()
{
  *(void *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10033EB48, 0LL, 0LL);
}

uint64_t sub_10033EB48()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[3] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[4] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10033EBE0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v3,  0LL,  0LL,  0xD000000000000020LL,  0x800000010085E5E0LL,  sub_100340040,  v2,  (char *)&type metadata for () + 8);
}

uint64_t sub_10033EBE0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 40) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10034024C;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 24));
    uint64_t v4 = sub_1003401FC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033EC4C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = swift_task_alloc(dword_1009A97FC);
  *(void *)(v4 + 16) = v9;
  *(void *)uint64_t v9 = v4;
  *(void *)(v9 + 8) = sub_1003401F8;
  *(void *)(v9 + 40) = a2;
  *(void *)(v9 + 48) = v8;
  *(_BYTE *)(v9 + 96) = a3;
  *(void *)(v9 + 32) = a1;
  return swift_task_switch(sub_10033B10C, 0LL, 0LL);
}

uint64_t sub_10033ECC8(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A97F4);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10033ED2C;
  __int128 v5[4] = a1;
  v5[5] = v4;
  return swift_task_switch(sub_10033B4D4, 0LL, 0LL);
}

uint64_t sub_10033ED2C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_10033ED80(double a1)
{
  *(double *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = *v1;
  return swift_task_switch(sub_10033EDA0, 0LL, 0LL);
}

uint64_t sub_10033EDA0()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  uint64_t v3 = swift_task_alloc(32LL);
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009A0B30);
  *uint64_t v4 = v0;
  v4[1] = sub_10033EE58;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000017LL,  0x800000010085E550LL,  sub_10033FF08,  v3,  v5);
}

uint64_t sub_10033EE58()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10033EEC4;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 40));
    uint64_t v4 = sub_10034019C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033EEC4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10033EEF8(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A97BC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1003401F8;
  __int128 v5[4] = a1;
  v5[5] = v4;
  return swift_task_switch(sub_10033BD60, 0LL, 0LL);
}

uint64_t sub_10033EF5C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A9794);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10033EFC0;
  void v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_10033C0A4, 0LL, 0LL);
}

uint64_t sub_10033EFC0(__int16 a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  else {
    return (*(uint64_t (**)(void))(v5 + 8))(a1 & 0x1FF);
  }
}

uint64_t sub_10033F034(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A977C);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100015D58;
  _OWORD v7[3] = a2;
  _OWORD v7[4] = v6;
  _OWORD v7[2] = a1;
  return swift_task_switch(sub_10033C60C, 0LL, 0LL);
}

uint64_t sub_10033F0A8(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v3;
  return swift_task_switch(sub_10033F0C4, 0LL, 0LL);
}

uint64_t sub_10033F0C4()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc(32LL);
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009A9758);
  *uint64_t v4 = v0;
  v4[1] = sub_10033F174;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000023LL,  0x800000010085E4E0LL,  sub_10033FD08,  v3,  v5);
}

uint64_t sub_10033F174()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100340198;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 40));
    uint64_t v4 = sub_10034019C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033F1E0()
{
  *(void *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10033F1FC, 0LL, 0LL);
}

uint64_t sub_10033F1FC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[3] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[4] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10033F294;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v3,  0LL,  0LL,  0xD00000000000001ELL,  0x800000010085E4C0LL,  sub_10033FC4C,  v2,  (char *)&type metadata for () + 8);
}

uint64_t sub_10033F294()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 40) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10033F300;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 24));
    uint64_t v4 = sub_1003401FC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033F300()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10033F334()
{
  *(void *)(v1 + 24) = *v0;
  return swift_task_switch(sub_10033F350, 0LL, 0LL);
}

uint64_t sub_10033F350()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10033F3F8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD00000000000001BLL,  0x800000010085E480LL,  sub_10033FBE8,  v2,  &type metadata for Int64);
}

uint64_t sub_10033F3F8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 40);
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10033F470;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 32));
    uint64_t v4 = sub_10033F464;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033F464()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_10033F470()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10033F4A4(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A9744);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100015D58;
  void v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_10033DE4C, 0LL, 0LL);
}

uint64_t sub_10033F508(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v3;
  return swift_task_switch(sub_10033F524, 0LL, 0LL);
}

uint64_t sub_10033F524()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = sub_100004AEC(&qword_1009A9720);
  *uint64_t v2 = v0;
  v2[1] = sub_10033F174;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0xD00000000000001BLL,  0x800000010085E440LL,  sub_10033FBBC,  v1,  v3);
}

uint64_t sub_10033F5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A9704);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_1003401F8;
  _OWORD v7[5] = a2;
  _OWORD v7[6] = v6;
  _OWORD v7[4] = a1;
  return swift_task_switch(sub_10033E2A4, 0LL, 0LL);
}

uint64_t sub_10033F64C(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return swift_task_switch(sub_10033F668, 0LL, 0LL);
}

uint64_t sub_10033F668()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc(32LL);
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  uint64_t v2 = (int8x16_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[2].i64[1] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (int8x16_t *)sub_10033F704;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v2,  0LL,  0LL,  0xD000000000000021LL,  0x800000010085E3E0LL,  sub_10033FA34,  v1,  (char *)&type metadata for () + 8);
}

uint64_t sub_10033F704()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 40);
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10033F470;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 32));
    uint64_t v4 = sub_10033F770;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10033F770()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10033F77C()
{
  *(void *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10033F798, 0LL, 0LL);
}

uint64_t sub_10033F798()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[3] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[4] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10033EBE0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v3,  0LL,  0LL,  0xD00000000000001FLL,  0x800000010085E3C0LL,  sub_10033F9C4,  v2,  (char *)&type metadata for () + 8);
}

uint64_t sub_10033F830(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v10 = *v4;
  uint64_t v11 = swift_task_alloc(dword_1009A96D4);
  *(void *)(v5 + 16) = v11;
  *(void *)uint64_t v11 = v5;
  *(void *)(v11 + 8) = sub_100015D58;
  *(void *)(v11 + 32) = a4;
  *(void *)(v11 + 40) = v10;
  *(_BYTE *)(v11 + 96) = a3;
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  return swift_task_switch(sub_10033CC34, 0LL, 0LL);
}

uint64_t sub_10033F8B8(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A96C4);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100015D58;
  void v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_10033D4CC, 0LL, 0LL);
}

void sub_10033F91C(uint64_t a1)
{
}

uint64_t sub_10033F928()
{
  return sub_10034012C(&qword_1009AF860);
}

uint64_t sub_10033F934(uint64_t a1)
{
  return sub_10033F9E4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10033E0E4);
}

uint64_t sub_10033F940(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10033F950(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10033F958(uint64_t a1)
{
}

uint64_t sub_10033F968()
{
  return sub_10034012C(&qword_1009A96E8);
}

uint64_t sub_10033F974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10033FCA4( a1,  a2,  a3,  &qword_1009A96E8,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10033D0D0);
}

uint64_t sub_10033F988(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeviceEvent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_10033F9C4(uint64_t a1)
{
}

uint64_t sub_10033F9CC()
{
  return sub_10034012C(&qword_1009AF860);
}

uint64_t sub_10033F9D8(uint64_t a1)
{
  return sub_10033F9E4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10033E98C);
}

uint64_t sub_10033F9E4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009AF860) - 8) + 80LL);
  return a2(a1, v2 + ((v5 + 16) & ~v5));
}

void sub_10033FA34(uint64_t a1)
{
}

uint64_t sub_10033FA3C()
{
  return sub_10034012C(&qword_1009AF860);
}

unint64_t sub_10033FA48()
{
  unint64_t result = qword_1009A9718;
  if (!qword_1009A9718)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802890, &type metadata for KeySyncMetadata.MetadataType);
    atomic_store(result, (unint64_t *)&qword_1009A9718);
  }

  return result;
}

void sub_10033FA8C(uint64_t a1)
{
}

uint64_t sub_10033FA98()
{
  return sub_10034012C(&qword_1009A9728);
}

uint64_t sub_10033FAA4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10033FAC0(a1, a2, a3, &qword_1009A9728, &qword_1009A9720, (uint64_t (*)(void))sub_10033FB40);
}

uint64_t sub_10033FAC0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(a4) - 8) + 80LL);
  return sub_10033E590(a1, a2, a3, v6 + ((v13 + 16) & ~v13), a5, a6, a4);
}

unint64_t sub_10033FB40()
{
  unint64_t result = qword_1009A9730;
  if (!qword_1009A9730)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A9720);
    sub_100007864(&qword_1009A9738, type metadata accessor for KeySyncMetadata, (uint64_t)&unk_100802498);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A9730);
  }

  return result;
}

void sub_10033FBBC(uint64_t a1)
{
}

uint64_t sub_10033FBC4()
{
  return sub_10034012C(&qword_1009A9728);
}

void sub_10033FBD0(uint64_t a1)
{
}

uint64_t sub_10033FBDC()
{
  return sub_10034012C(&qword_1009AF860);
}

void sub_10033FBE8(uint64_t a1)
{
}

uint64_t sub_10033FBF0()
{
  return sub_10034012C(&qword_1009A9750);
}

uint64_t sub_10033FBFC(uint64_t a1, uint64_t a2)
{
  return sub_10033DC0C(a1, a2);
}

void sub_10033FC4C(uint64_t a1)
{
}

uint64_t sub_10033FC84()
{
  return sub_10034012C(&qword_1009AF860);
}

uint64_t sub_10033FC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10033FCA4( a1,  a2,  a3,  &qword_1009AF860,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10033DDBC);
}

uint64_t sub_10033FCA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(a4) - 8) + 80LL);
  return a5(a1, a2, a3, v5 + ((v9 + 16) & ~v9));
}

void sub_10033FD08(uint64_t a1)
{
}

uint64_t sub_10033FD10()
{
  return sub_10034012C(&qword_1009A9760);
}

uint64_t sub_10033FD20(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10033D93C(a1, a2, a3);
}

uint64_t sub_10033FD7C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100004B78(&qword_1009A9758);
    sub_100007864(a2, type metadata accessor for ObservedAdvertisement, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

void sub_10033FE00(uint64_t a1)
{
}

uint64_t sub_10033FE0C()
{
  return sub_10034012C(&qword_1009A9780);
}

uint64_t sub_10033FE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10033FCA4( a1,  a2,  a3,  &qword_1009A9780,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10033C8B0);
}

void sub_10033FE2C(uint64_t a1)
{
}

uint64_t sub_10033FE38()
{
  return sub_10034012C(&qword_1009A97A0);
}

uint64_t sub_10033FE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10033FCA4( a1,  a2,  a3,  &qword_1009A97A0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10033C43C);
}

void sub_10033FE58(uint64_t a1)
{
}

uint64_t sub_10033FE64()
{
  return sub_10034012C(&qword_1009A97D8);
}

uint64_t sub_10033FE70(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10033FAC0(a1, a2, a3, &qword_1009A97D8, &qword_1009A97D0, (uint64_t (*)(void))sub_10033FE8C);
}

unint64_t sub_10033FE8C()
{
  unint64_t result = qword_1009A97E0;
  if (!qword_1009A97E0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A97D0);
    sub_100007864(&qword_1009A02F0, type metadata accessor for ObservedAdvertisement.Location, (uint64_t)&unk_1007E9D9C);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A97E0);
  }

  return result;
}

void sub_10033FF08(uint64_t a1)
{
}

uint64_t sub_10033FF14()
{
  return sub_10034012C(&qword_1009A97E8);
}

uint64_t sub_10033FF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10033FCA4( a1,  a2,  a3,  &qword_1009A97E8,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10033B9B8);
}

unint64_t sub_10033FF34()
{
  unint64_t result = qword_1009A56C0;
  if (!qword_1009A56C0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009AED50);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A56C0);
  }

  return result;
}

void sub_10033FF90(uint64_t a1)
{
}

uint64_t sub_10033FF9C()
{
  return sub_10034012C(&qword_1009A9760);
}

unint64_t sub_10033FFA8()
{
  unint64_t result = qword_1009A9808;
  if (!qword_1009A9808)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A9800);
    sub_100007864(&qword_1009A96D8, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_1007FE0D4);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, &qword_1009A9808);
  }

  return result;
}

void sub_100340024(uint64_t a1)
{
}

uint64_t sub_100340034()
{
  return sub_10034012C(&qword_1009A9760);
}

void sub_100340040(uint64_t a1)
{
}

uint64_t sub_100340078()
{
  return sub_10034012C(&qword_1009AF860);
}

uint64_t sub_100340088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10033B088(a1, a2, a3);
}

void sub_1003400E4(uint64_t a1)
{
}

uint64_t sub_1003400F0()
{
  return sub_10034012C(&qword_1009AF860);
}

void sub_1003400FC(uint64_t a1)
{
}

uint64_t sub_100340108()
{
  return sub_10034012C(&qword_1009AF860);
}

void sub_100340114(uint64_t a1)
{
}

uint64_t sub_100340120()
{
  return sub_10034012C(&qword_1009AF860);
}

uint64_t sub_10034012C(uint64_t *a1)
{
  uint64_t v2 = sub_100004AEC(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

ValueMetadata *type metadata accessor for ObservationServiceClientTrampoline()
{
  return &type metadata for ObservationServiceClientTrampoline;
}

uint64_t sub_10034025C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v3);
  uint64_t v52 = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v5);
  uint64_t v48 = (uint64_t)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v44 - v12;
  __chkstk_darwin(v11);
  uint64_t v47 = (uint64_t)v44 - v14;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for MACAddress(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v22 = [a1 address];
  uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  MACAddress.init(data:type:)(v23, v25, 1LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18) == 1)
  {
    sub_100015794((uint64_t)v17, (uint64_t *)&unk_1009AE480);
    uint64_t v26 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))( v50,  1LL,  1LL,  v26);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    uint64_t v28 = sub_10050BC4C();
    uint64_t v29 = v28[2];
    uint64_t v45 = v19;
    uint64_t v46 = v18;
    if (v29)
    {
      uint64_t v30 = *(unsigned __int8 *)(v49 + 80);
      v44[1] = v28;
      uint64_t v31 = (uint64_t)v28 + ((v30 + 32) & ~v30);
      uint64_t v32 = *(void *)(v49 + 72);
      uint64_t v51 = v32;
      uint64_t v33 = (uint64_t)v52;
      do
      {
        sub_1000E55BC(v31, (uint64_t)v13);
        char v34 = static MACAddress.== infix(_:_:)(&v13[*(int *)(v7 + 28)], v21);
        sub_1000E55BC((uint64_t)v13, (uint64_t)v10);
        if ((v34 & 1) != 0)
        {
          sub_10001581C((uint64_t)&v10[*(int *)(v7 + 44)], v33, (uint64_t *)&unk_10099D720);
          sub_100018C68((uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
          uint64_t v35 = type metadata accessor for Date(0LL);
          int v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48LL))(v33, 1LL, v35);
          uint64_t v32 = v51;
          sub_100015794(v33, (uint64_t *)&unk_10099D720);
          if (v36 != 1)
          {
            uint64_t v37 = v48;
            sub_10002218C((uint64_t)v13, v48, type metadata accessor for WildModeAssociationRecord);
            uint64_t v38 = 0LL;
            uint64_t v39 = v50;
            goto LABEL_12;
          }
        }

        else
        {
          sub_100018C68((uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
        }

        sub_100018C68((uint64_t)v13, type metadata accessor for WildModeAssociationRecord);
        v31 += v32;
        --v29;
      }

      while (v29);
      uint64_t v38 = 1LL;
      uint64_t v39 = v50;
      uint64_t v37 = v48;
    }

    else
    {
      uint64_t v38 = 1LL;
      uint64_t v39 = v50;
      uint64_t v37 = v48;
    }

uint64_t sub_1003406C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v58 = a1;
  uint64_t v1 = type metadata accessor for Calendar.SearchDirection(0LL);
  uint64_t v56 = *(void *)(v1 - 8);
  uint64_t v57 = v1;
  __chkstk_darwin(v1);
  uint64_t v55 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for Calendar.RepeatedTimePolicy(0LL);
  uint64_t v49 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v48 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = type metadata accessor for Calendar.MatchingPolicy(0LL);
  uint64_t v44 = *(void *)(v59 - 8);
  uint64_t v4 = v44;
  __chkstk_darwin(v59);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A99E0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A99E8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DateComponents(0LL);
  uint64_t v52 = *(void *)(v13 - 8);
  uint64_t v53 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v50 = *(void *)(v16 - 8);
  uint64_t v51 = v16;
  __chkstk_darwin(v16);
  uint64_t v45 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Calendar(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v47 = v19;
  uint64_t v20 = __chkstk_darwin(v18);
  id v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = static Calendar.current.getter(v20);
  Date.init()(v23);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v12, 1LL, 1LL, v18);
  uint64_t v24 = type metadata accessor for TimeZone(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v9, 1LL, 1LL, v24);
  char v43 = 1;
  char v42 = 1;
  char v41 = 1;
  char v40 = 1;
  char v39 = 1;
  char v38 = 1;
  char v37 = 1;
  char v36 = 1;
  char v35 = 1;
  char v34 = 0;
  char v33 = 1;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v12,  v9,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL,  0LL,  v33,  4LL,  v34,  0LL,  v35,  0LL,  v36,  0LL,  v37,  0LL,  v38,  0LL,  v39,  0LL,  v40,  0LL,  v41,  0LL,  v42,  0LL,  v43);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Calendar.MatchingPolicy.nextTime(_:),  v59);
  uint64_t v25 = v48;
  uint64_t v26 = v49;
  uint64_t v27 = v54;
  (*(void (**)(char *, void, uint64_t))(v49 + 104))( v48,  enum case for Calendar.RepeatedTimePolicy.first(_:),  v54);
  uint64_t v29 = v55;
  uint64_t v28 = v56;
  uint64_t v30 = v57;
  (*(void (**)(char *, void, uint64_t))(v56 + 104))( v55,  enum case for Calendar.SearchDirection.forward(_:),  v57);
  uint64_t v31 = v45;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v45, v15, v6, v25, v29);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v27);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v59);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v53);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v22, v46);
}

uint64_t sub_100340AA8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A6B0);
  sub_10000A720(v0, (uint64_t)qword_100A2A6B0);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000014LL,  0x800000010085E830LL);
}

uint64_t sub_100340B2C(void *a1)
{
  id v12 = a1;
  type metadata accessor for TrackingAvoidanceError(0LL);
  uint64_t v3 = v2;
  uint64_t v4 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
  _BridgedStoredNSError.code.getter(&v13, v3, v4);
  uint64_t result = 2LL;
  switch(v13)
  {
    case 1LL:
    case 2LL:
    case 3LL:
    case 4LL:
    case 6LL:
    case 9LL:
    case 10LL:
    case 12LL:
    case 13LL:
      goto LABEL_2;
    case 5LL:
      uint64_t result = 1LL;
      break;
    case 7LL:
      return result;
    case 8LL:
      uint64_t result = 4LL;
      break;
    case 11LL:
      uint64_t result = 3LL;
      break;
    default:
      if (qword_10099B2F8 != -1) {
        swift_once(&qword_10099B2F8, sub_100340AA8);
      }
      uint64_t v6 = type metadata accessor for Logger(0LL);
      sub_10000A720(v6, (uint64_t)qword_100A2A6B0);
      id v7 = a1;
      uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
      os_log_type_t v9 = static os_log_type_t.error.getter(v8);
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v10 = 134217984;
        id v12 = v7;
        _BridgedStoredNSError.code.getter(&v11, v3, v4);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v10 + 4, v10 + 12);

        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unexpected TrackingAvoidanceError %ld!", v10, 0xCu);
        swift_slowDealloc(v10, -1LL, -1LL);
      }

      else
      {
      }

LABEL_2:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

  (*(void (**)(char *, uint64_t))(v146 + 8))(v160, v147);
  uint64_t v46 = (uint64_t)v157;
  uint64_t v47 = (uint64_t)v153;
  uint64_t v48 = (uint64_t)v150;
  uint64_t v49 = v149;
  if ((v148 & 1) != 0)
  {
    uint64_t v50 = v143;
    sub_10001581C((uint64_t)v157, v143, (uint64_t *)&unk_1009A34D0);
    if (v162(v50, 1LL, v27) != 1)
    {
      char v42 = (uint64_t)v142;
      ((void (*)(char *, uint64_t, uint64_t))v28[4])(v142, v50, v27);
      uint64_t v49 = objc_autoreleasePoolPush();
      sub_1003D5810(v42);
      uint64_t v121 = v120;
      uint64_t v122 = (void (*)(char *, void *, uint64_t))HIDWORD(v120);
      objc_autoreleasePoolPop(v49);

      uint64_t v114 = (void (*)(uint64_t, uint64_t))v28[1];
      v114(v42, v27);
      os_log_type_t v112 = (void (*)(char *, void *, uint64_t))&unk_1009A34D0;
      sub_100015794((uint64_t)v153, (uint64_t *)&unk_1009A34D0);
      sub_100015794((uint64_t)v157, (uint64_t *)&unk_1009A34D0);
      v114((uint64_t)v154, v27);
      goto LABEL_70;
    }

    sub_100015794(v50, (uint64_t *)&unk_1009A34D0);
  }

  sub_10001581C(v47, (uint64_t)v49, (uint64_t *)&unk_1009A34D0);
  if (v162((uint64_t)v49, 1LL, v27) == 1)
  {

    sub_100015794(v47, (uint64_t *)&unk_1009A34D0);
    sub_100015794(v46, (uint64_t *)&unk_1009A34D0);
    ((void (*)(char *, uint64_t))v28[1])(v154, v27);
    sub_100015794((uint64_t)v49, (uint64_t *)&unk_1009A34D0);
    return 0LL;
  }

  os_log_type_t v112 = (void (*)(char *, void *, uint64_t))v28[4];
  uint64_t v113 = (uint64_t)v144;
  v112(v144, v49, v27);
  uint64_t v114 = 0LL;
  sub_10078F6AC(v113);
  os_log_type_t v117 = v115;
  uint64_t v122 = (void (*)(char *, void *, uint64_t))HIDWORD(v115);
  if (HIDWORD(v115) < v115)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }

  char v42 = v115;
  char v118 = (uint64_t)v157;
  sub_10001581C((uint64_t)v157, v48, (uint64_t *)&unk_1009A34D0);
  if (v162(v48, 1LL, v27) == 1)
  {

    __n128 v119 = (void (*)(char *, uint64_t))v28[1];
    v119(v144, v27);
    sub_100015794((uint64_t)v153, (uint64_t *)&unk_1009A34D0);
    sub_100015794(v118, (uint64_t *)&unk_1009A34D0);
    v119(v154, v27);
    sub_100015794(v48, (uint64_t *)&unk_1009A34D0);
    return v42;
  }

  uint64_t v123 = v141;
  v112(v141, (void *)v48, v27);
  __int128 v124 = (uint64_t)v123;
  uint64_t v125 = objc_autoreleasePoolPush();
  sub_1003D5810(v124);
  __n128 v127 = v126;
  uint64_t v114 = (void (*)(uint64_t, uint64_t))v124;
  os_log_type_t v112 = (void (*)(char *, void *, uint64_t))HIDWORD(v126);
  objc_autoreleasePoolPop(v125);
  uint64_t v49 = (void *)v28[1];
  uint64_t v128 = ((uint64_t (*)(void, uint64_t))v49)(v114, v27);
  uint64_t v114 = (void (*)(uint64_t, uint64_t))v127;
  if (v122 < v127 || v112 < v117)
  {
    __int128 v163 = (char *)v27;
    LODWORD(v162) = static os_log_type_t.error.getter(v128);
    if (qword_10099B3E8 == -1)
    {
LABEL_68:
      __int128 v161 = (uint64_t (*)(char *, char *, uint64_t))qword_100A2A8F0;
      uint64_t v129 = sub_100004AEC((uint64_t *)&unk_10099D740);
      unint64_t v130 = swift_allocObject(v129, 112LL, 7LL);
      *(_OWORD *)(v130 + 16) = xmmword_1007E4750;
      __int128 v166 = v112;
      v167[0] = v114;
      __int128 v164 = 0LL;
      __int128 v165 = 0xE000000000000000LL;
      _print_unlocked<A, B>(_:_:)( v167,  &v164,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      v131._countAndFlagsBits = 3026478LL;
      v131._object = (void *)0xE300000000000000LL;
      String.append(_:)(v131);
      _print_unlocked<A, B>(_:_:)( &v166,  &v164,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      uint64_t v132 = v164;
      id v133 = v165;
      *(void *)(v130 + 56) = &type metadata for String;
      uint64_t v134 = sub_1000226F4();
      *(void *)(v130 + 64) = v134;
      *(void *)(v130 + 32) = v132;
      *(void *)(v130 + 40) = v133;
      __int128 v166 = v122;
      v167[0] = v42;
      __int128 v164 = 0LL;
      __int128 v165 = 0xE000000000000000LL;
      _print_unlocked<A, B>(_:_:)( v167,  &v164,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      v135._countAndFlagsBits = 3026478LL;
      v135._object = (void *)0xE300000000000000LL;
      String.append(_:)(v135);
      _print_unlocked<A, B>(_:_:)( &v166,  &v164,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      __n128 v136 = v164;
      uint64_t v137 = v165;
      *(void *)(v130 + 96) = &type metadata for String;
      *(void *)(v130 + 104) = v134;
      *(void *)(v130 + 72) = v136;
      *(void *)(v130 + 80) = v137;
      os_log(_:dso:log:_:_:)( v162,  &_mh_execute_header,  v161,  "Expected keyMap and key ranges to overlap: %@/%@",  48LL,  2LL,  v130);

      swift_bridgeObjectRelease();
      __n128 v138 = v163;
      ((void (*)(char *, char *))v49)(v144, v163);
      sub_100015794((uint64_t)v153, (uint64_t *)&unk_1009A34D0);
      sub_100015794((uint64_t)v157, (uint64_t *)&unk_1009A34D0);
      ((void (*)(char *, char *))v49)(v154, v138);
      return 0LL;
    }

  (*(void (**)(char *, uint64_t))(v96 + 8))(v107, v97);
}

uint64_t SPUnauthorizedTrackingObservationType.description.getter(uint64_t a1)
{
  if (!a1) {
    return 0x746C75616665642ELL;
  }
  if (a1 == 1) {
    return 0x4D6E4F706565622ELL;
  }
  v8[1] = v2;
  _OWORD v8[2] = v1;
  _OWORD v8[3] = v3;
  _BYTE v8[4] = v4;
  type metadata accessor for TrackingObservationType(0LL);
  v8[0] = a1;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v7, v8, v7, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_100340D98(uint64_t a1)
{
  if (!*v1) {
    return 0x746C75616665642ELL;
  }
  if (*v1 == 1) {
    return 0x4D6E4F706565622ELL;
  }
  uint64_t v3 = *v1;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(a1, &v3, a1, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t SPUnauthorizedTrackingObservationAction.description.getter(uint64_t a1)
{
  uint64_t result = 0x6465676174732ELL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 0x796669746F6E2ELL;
      break;
    case 2LL:
      uint64_t result = 0x6574616470752ELL;
      break;
    case 3LL:
      uint64_t result = 0x65676174736E752ELL;
      break;
    case 4LL:
      uint64_t result = 0x617264687469772ELL;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E752ELL;
      break;
  }

  return result;
}

uint64_t sub_100340EC8()
{
  uint64_t result = 0x6465676174732ELL;
  switch(*v0)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 0x796669746F6E2ELL;
      break;
    case 2LL:
      uint64_t result = 0x6574616470752ELL;
      break;
    case 3LL:
      uint64_t result = 0x65676174736E752ELL;
      break;
    case 4LL:
      uint64_t result = 0x617264687469772ELL;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E752ELL;
      break;
  }

  return result;
}

void *sub_100340F80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v16 = (*(uint64_t (**)(char *, void, uint64_t))(v13 + 104))( v15,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v12);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  unint64_t v19 = sub_100004B2C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v6, v17);
  uint64_t v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000041LL,  0x800000010085E680LL,  v11,  v8,  v15,  0LL);
  v3[2] = a1;
  v3[3] = v20;
  v3[4] = &_swiftEmptySetSingleton;
  v3[5] = a2;
  return v3;
}

void sub_100341150(void *a1, uint64_t a2, void (*a3)(uint64_t, void *))
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v47[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (a2
    && (uint64_t v50 = a2,
        swift_errorRetain(a2),
        uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A5470),
        type metadata accessor for TrackingAvoidanceError(0LL),
        (swift_dynamicCast(&v49, &v50, v10, v11, 6LL) & 1) != 0))
  {
    uint64_t v12 = v49;
    uint64_t v13 = sub_100340B2C(v49);
    if ((v14 & 1) != 0)
    {
      id v35 = [a1 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

      id v36 = objc_allocWithZone(&OBJC_CLASS___SPTrackingAvoidanceResult);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      sub_100022898(0LL, &qword_1009A99D0, &OBJC_CLASS___SPTrackingAvoidancePolicy_ptr);
      Class v38 = Array._bridgeToObjectiveC()().super.isa;
      id v39 = [v36 initWithIdentifier:isa type:5 policies:v38];

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v40 = sub_100004AEC(&qword_1009B0610);
      uint64_t inited = swift_initStackObject(v40, v48);
      *(_OWORD *)(inited + 16) = xmmword_1007F8BB0;
      *(void *)(inited + 32) = v39;
      uint64_t v50 = inited;
      specialized Array._endMutation()(inited);
      uint64_t v42 = v50;
      id v43 = v39;
      uint64_t v44 = sub_1006F1B80(v42);
      swift_bridgeObjectRelease();
      id v45 = v12;
      a3(v44, v12);

      swift_bridgeObjectRelease();
      return;
    }

    uint64_t v15 = v13;
    id v16 = [a1 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

    id v17 = objc_allocWithZone(&OBJC_CLASS___SPTrackingAvoidanceResult);
    Class v18 = UUID._bridgeToObjectiveC()().super.isa;
    sub_100022898(0LL, &qword_1009A99D0, &OBJC_CLASS___SPTrackingAvoidancePolicy_ptr);
    Class v19 = Array._bridgeToObjectiveC()().super.isa;
    id v20 = [v17 initWithIdentifier:v18 type:v15 policies:v19];

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v21 = sub_100004AEC(&qword_1009B0610);
    uint64_t v22 = swift_initStackObject(v21, v47);
    *(_OWORD *)(v22 + 16) = xmmword_1007F8BB0;
    *(void *)(v22 + 32) = v20;
    uint64_t v50 = v22;
    specialized Array._endMutation()(v22);
    uint64_t v23 = v50;
    id v24 = v20;
    uint64_t v25 = sub_1006F1B80(v23);
    swift_bridgeObjectRelease();
    a3(v25, 0LL);
  }

  else
  {
    id v26 = [a1 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

    id v27 = objc_allocWithZone(&OBJC_CLASS___SPTrackingAvoidanceResult);
    Class v28 = UUID._bridgeToObjectiveC()().super.isa;
    sub_100022898(0LL, &qword_1009A99D0, &OBJC_CLASS___SPTrackingAvoidancePolicy_ptr);
    Class v29 = Array._bridgeToObjectiveC()().super.isa;
    id v30 = [v27 initWithIdentifier:v28 type:0 policies:v29];

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v31 = sub_100004AEC(&qword_1009B0610);
    uint64_t v32 = swift_initStackObject(v31, v51);
    *(_OWORD *)(v32 + 16) = xmmword_1007F8BB0;
    *(void *)(v32 + 32) = v30;
    uint64_t v50 = v32;
    specialized Array._endMutation()(v32);
    uint64_t v33 = v50;
    id v24 = v30;
    uint64_t v34 = sub_1006F1B80(v33);
    swift_bridgeObjectRelease();
    a3(v34, (void *)a2);
  }

  swift_bridgeObjectRelease();
}

uint64_t sub_100341570(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v83 = a4;
  int v89 = (void (*)(void))a3;
  uint64_t v77 = a2;
  uint64_t v7 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v7);
  uint64_t v81 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v79 = *(void *)(v9 - 8);
  uint64_t v80 = v9;
  __chkstk_darwin(v9);
  uint64_t v76 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v88 = type metadata accessor for MACAddress(0LL);
  uint64_t v14 = *(void *)(v88 - 8);
  uint64_t v15 = __chkstk_darwin(v88);
  uint64_t v82 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v87 = static os_log_type_t.default.getter(v15);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v86 = qword_100A2B030;
  uint64_t v84 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v84, 152LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_1007E4050;
  uint64_t v90 = *v5;
  uint64_t v18 = sub_100004AEC(&qword_1009A99C0);
  uint64_t v19 = String.init<A>(describing:)(&v90, v18);
  id v78 = v5;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v23 = sub_1000226F4();
  *(void *)(v17 + 32) = v20;
  *(void *)(v17 + 40) = v22;
  *(void *)(v17 + 96) = &type metadata for String;
  *(void *)(v17 + 104) = v23;
  *(void *)(v17 + 64) = v23;
  *(void *)(v17 + 72) = 0xD00000000000002FLL;
  *(void *)(v17 + 80) = 0x800000010085EA60LL;
  id v24 = [a1 data];
  uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
  unint64_t v27 = v26;

  uint64_t v28 = Data.hexString.getter(v25, v27);
  uint64_t v30 = v29;
  sub_100016F9C(v25, v27);
  *(void *)(v17 + 136) = &type metadata for String;
  *(void *)(v17 + 144) = v23;
  unint64_t v85 = v23;
  *(void *)(v17 + 112) = v28;
  *(void *)(v17 + 120) = v30;
  os_log(_:dso:log:_:_:)(v87, &_mh_execute_header, v86, "%{public}@: %{public}@ ignoring device %@", 41LL, 2LL, v17);
  swift_bridgeObjectRelease();
  uint64_t v31 = a1;
  id v32 = [a1 address];
  uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v35 = v34;

  MACAddress.init(data:type:)(v33, v35, 1LL);
  uint64_t v36 = v88;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1LL, v88) == 1)
  {
    uint64_t v37 = sub_100015794((uint64_t)v13, (uint64_t *)&unk_1009AE480);
    uint64_t v38 = static os_log_type_t.default.getter(v37);
    if (qword_10099B788 != -1) {
      swift_once(&qword_10099B788, sub_1006517A0);
    }
    uint64_t v39 = qword_100A2B098;
    uint64_t v40 = swift_allocObject(v84, 72LL, 7LL);
    *(_OWORD *)(v40 + 16) = xmmword_1007E67D0;
    id v41 = [a1 data];
    uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
    unint64_t v44 = v43;

    uint64_t v45 = Data.hexString.getter(v42, v44);
    uint64_t v47 = v46;
    sub_100016F9C(v42, v44);
    unint64_t v48 = v85;
    *(void *)(v40 + 56) = &type metadata for String;
    *(void *)(v40 + 64) = v48;
    *(void *)(v40 + 32) = v45;
    *(void *)(v40 + 40) = v47;
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "Invalid advertisement: %@", 25LL, 2LL, v40);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v50 = v89;
    if (v89)
    {
      unint64_t v51 = sub_100345680();
      uint64_t v52 = swift_allocError(&type metadata for UTError, v51, 0LL, 0LL);
      *uint64_t v53 = 1;
      v50();
      return swift_errorRelease(v52);
    }
  }

  else
  {
    uint64_t v54 = (uint64_t)v82;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v82, v13, v36);
    uint64_t v55 = v81;
    sub_100782D20(v54, v81);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v55, 1LL, v80) == 1)
    {
      uint64_t v56 = v14;
      uint64_t v57 = sub_100015794(v55, &qword_1009A4890);
      uint64_t v58 = static os_log_type_t.default.getter(v57);
      if (qword_10099B788 != -1) {
        swift_once(&qword_10099B788, sub_1006517A0);
      }
      uint64_t v59 = qword_100A2B098;
      uint64_t v60 = swift_allocObject(v84, 72LL, 7LL);
      *(_OWORD *)(v60 + 16) = xmmword_1007E67D0;
      id v61 = [v31 data];
      uint64_t v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);
      unint64_t v64 = v63;

      uint64_t v65 = Data.hexString.getter(v62, v64);
      uint64_t v67 = v66;
      sub_100016F9C(v62, v64);
      unint64_t v68 = v85;
      *(void *)(v60 + 56) = &type metadata for String;
      *(void *)(v60 + 64) = v68;
      *(void *)(v60 + 32) = v65;
      *(void *)(v60 + 40) = v67;
      os_log(_:dso:log:_:_:)( v58,  &_mh_execute_header,  v59,  "WildModeAssociationRecord not found for advertisement: %@",  57LL,  2LL,  v60);
      swift_bridgeObjectRelease();
      uint64_t v69 = v89;
      if (v89)
      {
        unint64_t v70 = sub_100345680();
        uint64_t v71 = swift_allocError(&type metadata for UTError, v70, 0LL, 0LL);
        *unint64_t v72 = 0;
        v69();
        swift_errorRelease(v71);
      }

      return (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v54, v36);
    }

    else
    {
      uint64_t v73 = v55;
      uint64_t v74 = v76;
      sub_10002218C(v73, v76, type metadata accessor for WildModeAssociationRecord);
      sub_1003426CC(v74, v77, (void (*)(uint64_t))v89, v83);
      sub_100018C68(v74, type metadata accessor for WildModeAssociationRecord);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v54, v36);
    }
  }

  return result;
}

uint64_t sub_100341B84(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v31 = a2;
  uint64_t v32 = a4;
  uint64_t v35 = a1;
  uint64_t v36 = (void (*)(void))a3;
  uint64_t v5 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v8 = *(void *)(v34 - 8);
  uint64_t v9 = __chkstk_darwin(v34);
  uint64_t v11 = (void (*)(uint64_t))((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unsigned int v33 = static os_log_type_t.default.getter(v9);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v12 = qword_100A2B030;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v14 = swift_allocObject(v13, 152LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_1007E4050;
  uint64_t v37 = *v4;
  uint64_t v15 = sub_100004AEC(&qword_1009A99C0);
  uint64_t v16 = String.init<A>(describing:)(&v37, v15);
  uint64_t v18 = v17;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000226F4();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v18;
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v19;
  *(void *)(v14 + 64) = v19;
  *(void *)(v14 + 72) = 0xD00000000000002ALL;
  *(void *)(v14 + 80) = 0x800000010085E9E0LL;
  uint64_t v20 = v35;
  uint64_t v21 = UUID.uuidString.getter(v19);
  *(void *)(v14 + 136) = &type metadata for String;
  *(void *)(v14 + 144) = v19;
  *(void *)(v14 + 112) = v21;
  *(void *)(v14 + 120) = v22;
  os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v12, "%{public}@: %{public}@ ignoring device %@", 41LL, 2LL, v14);
  swift_bridgeObjectRelease();
  sub_10050C17C(v20, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1LL, v34) == 1)
  {
    uint64_t v23 = sub_100015794((uint64_t)v7, &qword_1009A4890);
    uint64_t v24 = static os_log_type_t.default.getter(v23);
    uint64_t v25 = v36;
    if (qword_10099B788 != -1) {
      swift_once(&qword_10099B788, sub_1006517A0);
    }
    uint64_t result = os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_100A2B098,  "No UT found for the given beacon UUID.",  38LL,  2LL,  _swiftEmptyArrayStorage);
    if (v25)
    {
      unint64_t v27 = sub_100345680();
      uint64_t v28 = swift_allocError(&type metadata for UTError, v27, 0LL, 0LL);
      *uint64_t v29 = 0;
      v25();
      return swift_errorRelease(v28);
    }
  }

  else
  {
    sub_10002218C((uint64_t)v7, (uint64_t)v11, type metadata accessor for WildModeAssociationRecord);
    sub_100342134(v11, v31, (void (*)(uint64_t))v36, v32);
    return sub_100018C68((uint64_t)v11, type metadata accessor for WildModeAssociationRecord);
  }

  return result;
}

uint64_t sub_100341E5C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v31 = a2;
  uint64_t v32 = a4;
  uint64_t v35 = a1;
  uint64_t v36 = (void (*)(void))a3;
  uint64_t v5 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v8 = *(void *)(v34 - 8);
  uint64_t v9 = __chkstk_darwin(v34);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v33 = static os_log_type_t.default.getter(v9);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v12 = qword_100A2B030;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v14 = swift_allocObject(v13, 152LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_1007E4050;
  uint64_t v37 = *v4;
  uint64_t v15 = sub_100004AEC(&qword_1009A99C0);
  uint64_t v16 = String.init<A>(describing:)(&v37, v15);
  uint64_t v18 = v17;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000226F4();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v18;
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v19;
  *(void *)(v14 + 64) = v19;
  *(void *)(v14 + 72) = 0xD00000000000002ALL;
  *(void *)(v14 + 80) = 0x800000010085E9E0LL;
  uint64_t v20 = v35;
  uint64_t v21 = UUID.uuidString.getter(v19);
  *(void *)(v14 + 136) = &type metadata for String;
  *(void *)(v14 + 144) = v19;
  *(void *)(v14 + 112) = v21;
  *(void *)(v14 + 120) = v22;
  os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v12, "%{public}@: %{public}@ ignoring device %@", 41LL, 2LL, v14);
  swift_bridgeObjectRelease();
  sub_10050BDEC(v20, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1LL, v34) == 1)
  {
    uint64_t v23 = sub_100015794((uint64_t)v7, &qword_1009A4890);
    uint64_t v24 = static os_log_type_t.default.getter(v23);
    uint64_t v25 = v36;
    if (qword_10099B788 != -1) {
      swift_once(&qword_10099B788, sub_1006517A0);
    }
    uint64_t result = os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_100A2B098,  "No UT found for the UUID.",  25LL,  2LL,  _swiftEmptyArrayStorage);
    if (v25)
    {
      unint64_t v27 = sub_100345680();
      uint64_t v28 = swift_allocError(&type metadata for UTError, v27, 0LL, 0LL);
      *uint64_t v29 = 0;
      v25();
      return swift_errorRelease(v28);
    }
  }

  else
  {
    sub_10002218C((uint64_t)v7, (uint64_t)v11, type metadata accessor for WildModeAssociationRecord);
    sub_1003426CC((uint64_t)v11, v31, (void (*)(uint64_t))v36, v32);
    return sub_100018C68((uint64_t)v11, type metadata accessor for WildModeAssociationRecord);
  }

  return result;
}

uint64_t sub_100342134( void (*a1)(uint64_t), uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v51 = a1;
  uint64_t v52 = a4;
  uint64_t v49 = sub_100004AEC(&qword_1009A99D8);
  __chkstk_darwin(v49);
  uint64_t v50 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v46 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v45 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for Date(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v45 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v45 - v24;
  uint64_t v47 = *(void *)(v5 + 16);
  unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v26((char *)&v45 - v24, a2, v20);
  sub_1000E55BC((uint64_t)v51, (uint64_t)v19);
  v19[v17[9]] = 2;
  uint64_t v27 = (uint64_t)&v19[v17[11]];
  unint64_t v51 = a3;
  sub_1000372DC((uint64_t)a3, v52);
  sub_100015794(v27, (uint64_t *)&unk_10099D720);
  unint64_t v48 = v25;
  v26((char *)v27, (uint64_t)v25, v20);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v28(v27, 0LL, 1LL, v20);
  static Date.trustedNow.getter((uint64_t)v16);
  v28((uint64_t)v16, 0LL, 1LL, v20);
  sub_100345620((uint64_t)v16, (uint64_t)&v19[v17[18]]);
  static Date.trustedNow.getter((uint64_t)v14);
  v28((uint64_t)v14, 0LL, 1LL, v20);
  uint64_t v29 = v17[17];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1LL, v20) == 1)
  {
    sub_100015794((uint64_t)v14, (uint64_t *)&unk_10099D720);
    swift_bridgeObjectRetain(*(void *)&v19[v29]);
    unint64_t v30 = sub_10030CEE4(6LL);
    char v32 = v31;
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)&v19[v29]);
      uint64_t v34 = *(void *)&v19[v29];
      uint64_t v53 = v34;
      *(void *)&v19[v29] = 0x8000000000000000LL;
      uint64_t v35 = (uint64_t)v46;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100063030();
        uint64_t v34 = v53;
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(v21 + 32))( v35,  *(void *)(v34 + 56) + *(void *)(v21 + 72) * v30,  v20);
      sub_100058B04(v30, v34);
      *(void *)&v19[v29] = v34;
      swift_bridgeObjectRelease();
      uint64_t v36 = 0LL;
    }

    else
    {
      uint64_t v36 = 1LL;
      uint64_t v35 = (uint64_t)v46;
    }

    v28(v35, v36, 1LL, v20);
    uint64_t v39 = sub_100015794(v35, (uint64_t *)&unk_10099D720);
    uint64_t v40 = (uint64_t)v50;
  }

  else
  {
    uint64_t v37 = (uint64_t)v45;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v45, v14, v20);
    char v38 = swift_isUniquelyReferenced_nonNull_native(*(void *)&v19[v29]);
    uint64_t v53 = *(void *)&v19[v29];
    *(void *)&v19[v29] = 0x8000000000000000LL;
    sub_10005C818(v37, 6LL, v38);
    *(void *)&v19[v29] = v53;
    uint64_t v39 = swift_bridgeObjectRelease();
    uint64_t v40 = (uint64_t)v50;
  }

  v19[v17[16]] = 6;
  __chkstk_darwin(v39);
  *(&v45 - 2) = v41;
  *(&v45 - 1) = v19;
  OS_dispatch_queue.sync<A>(execute:)(sub_1003457D8, &v45 - 4, (char *)&type metadata for () + 8);
  sub_1004E97E0();
  sub_1000E55BC((uint64_t)v19, v40);
  swift_storeEnumTagMultiPayload(v40, v49, 0LL);
  unint64_t v43 = v51;
  uint64_t v42 = v52;
  sub_100342E90(v40, v51);
  sub_100015794(v40, &qword_1009A99D8);
  sub_100018C68((uint64_t)v19, type metadata accessor for WildModeAssociationRecord);
  sub_10002214C((uint64_t)v43, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v48, v20);
}

uint64_t sub_1003426CC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v55 = a1;
  uint64_t v60 = a3;
  uint64_t v57 = sub_100004AEC(&qword_1009A99D8);
  __chkstk_darwin(v57);
  uint64_t v58 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v53 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v19 = (char *)&v52 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v52 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v52 - v23;
  uint64_t v59 = v8;
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v26 = v25((char *)&v52 - v23, 1LL, 1LL, v7);
  uint64_t v54 = v16;
  if (a2)
  {
    if (a2 == 2)
    {
      uint64_t v30 = static os_log_type_t.default.getter(v26);
      if (qword_10099B788 != -1) {
        swift_once(&qword_10099B788, sub_1006517A0);
      }
      char v28 = 2;
      uint64_t v31 = os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_100A2B098,  "Got request to ignore forever.",  30LL,  2LL,  _swiftEmptyArrayStorage);
      static Date.distantFuture.getter(v31);
      v25(v22, 0LL, 1LL, v7);
      goto LABEL_13;
    }

    if (a2 == 1)
    {
      uint64_t v27 = static os_log_type_t.default.getter(v26);
      if (qword_10099B788 != -1) {
        swift_once(&qword_10099B788, sub_1006517A0);
      }
      char v28 = 2;
      os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B098,  "Got request to ignore till end of day.",  38LL,  2LL,  _swiftEmptyArrayStorage);
      sub_1003406C4((uint64_t)v22);
LABEL_13:
      sub_100345620((uint64_t)v22, (uint64_t)v24);
      goto LABEL_17;
    }

    uint64_t v32 = static os_log_type_t.default.getter(v26);
    if (qword_10099B788 != -1) {
      swift_once(&qword_10099B788, sub_1006517A0);
    }
    os_log(_:dso:log:_:_:)( v32,  &_mh_execute_header,  qword_100A2B098,  "No valid option to ignore until.",  32LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100015794((uint64_t)v24, (uint64_t *)&unk_10099D720);
    v25(v24, 1LL, 1LL, v7);
    char v28 = 4;
  }

  else
  {
    uint64_t v29 = static os_log_type_t.default.getter(v26);
    if (qword_10099B788 != -1) {
      swift_once(&qword_10099B788, sub_1006517A0);
    }
    os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  qword_100A2B098,  "Got request to not ignore this UT. Clearing out ignore.",  55LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100015794((uint64_t)v24, (uint64_t *)&unk_10099D720);
    char v28 = 1;
    v25(v24, 1LL, 1LL, v7);
  }

uint64_t sub_100342E90(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_100004AEC(&qword_1009A99D8);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v6, &qword_1009A99D8);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v4);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = *v6;
    uint64_t v9 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B788 != -1) {
      swift_once(&qword_10099B788, sub_1006517A0);
    }
    uint64_t v10 = qword_100A2B098;
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
    *(_OWORD *)(v12 + 16) = xmmword_1007E67D0;
    uint64_t v20 = v8;
    swift_errorRetain(v8);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v14 = String.init<A>(describing:)(&v20, v13);
    uint64_t v16 = v15;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_1000226F4();
    *(void *)(v12 + 32) = v14;
    *(void *)(v12 + 40) = v16;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Failed to ignore beacon record. Error - %@", 42LL, 2LL, v12);
    swift_bridgeObjectRelease();
    if (a2)
    {
      swift_errorRetain(v8);
      a2(v8);
      swift_errorRelease(v8);
    }

    return swift_errorRelease(v8);
  }

  else
  {
    uint64_t v18 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_10099B788 != -1) {
      swift_once(&qword_10099B788, sub_1006517A0);
    }
    os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_100A2B098,  "Successfully ignored beacon record.",  35LL,  2LL,  _swiftEmptyArrayStorage);
    if (a2) {
      a2(0LL);
    }
    return sub_100015794((uint64_t)v6, &qword_1009A99D8);
  }

uint64_t sub_1003430B4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for UnauthorizedTracking()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd20UnauthorizedTracking);
}

void sub_100343110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

void sub_1003431AC(void *a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v2);
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v3);
  uint64_t v4 = sub_100004AEC(&qword_1009AC230);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  __chkstk_darwin(v5);
  id v6 = [a1 data];
  static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v8 = v7;

  __asm { BR              X10 }

void sub_100343304()
{
  if (BYTE6(v5) == 28LL)
  {
    *(void *)(v9 - 216) = v1;
    *(void *)(v9 - 208) = v4;
    uint64_t v10 = *(void *)(*(void *)(v9 - 192) + 16LL);
    uint64_t v11 = *(void *)(v10 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    uint64_t v12 = type metadata accessor for BeaconKeyManager(0LL);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v10, v11, (char *)&type metadata for () + 8, v12);
    sub_10079C18C(v6, v5, v3);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v0) == 1)
    {
      sub_100015794(v3, &qword_1009AC230);
    }

    else
    {
      sub_10002218C(v3, v8, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_100504F30(v8, v7);
      uint64_t v24 = type metadata accessor for OwnedBeaconRecord(0LL);
      int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48LL))(v7, 1LL, v24);
      sub_100015794(v7, (uint64_t *)&unk_1009A9C30);
      if (v25 != 1)
      {
        (*(void (**)(void))(*(void *)(v9 - 208) + 16LL))();
        sub_100016F9C(v6, v5);
        sub_100018C68(v8, type metadata accessor for BeaconKeyManager.IndexInformation);
        return;
      }

      sub_100018C68(v8, type metadata accessor for BeaconKeyManager.IndexInformation);
    }

    uint64_t v27 = *(void *)(v9 - 216);
    uint64_t v26 = *(void *)(v9 - 208);
    sub_10034025C(*(void **)(v9 - 200), v27);
    uint64_t v28 = type metadata accessor for Date(0LL);
    int v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48LL))(v27, 1LL, v28);
    sub_100015794(v27, (uint64_t *)&unk_10099D720);
    if (v29 == 1) {
      uint64_t v30 = 3LL;
    }
    else {
      uint64_t v30 = 2LL;
    }
    (*(void (**)(uint64_t, uint64_t, void))(v26 + 16))(v26, v30, 0LL);
    sub_100016F9C(v6, v5);
  }

  else
  {
    uint64_t v13 = sub_100016F9C(v6, v5);
    uint64_t v14 = static os_log_type_t.error.getter(v13);
    if (qword_10099B788 != -1) {
      swift_once(&qword_10099B788, sub_1006517A0);
    }
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_100A2B098,  "received an advertisement of unexpected length or format",  56LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for TrackingAvoidanceError(0LL);
    uint64_t v16 = v15;
    *(void *)(v9 - 96) = 3LL;
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
    uint64_t inited = swift_initStackObject(v17, v9 - 176);
    *(_OWORD *)(inited + 16) = xmmword_1007E67D0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(inited + 40) = v19;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD00000000000001ALL;
    *(void *)(inited + 56) = 0x800000010085E710LL;
    unint64_t v20 = sub_100412CF8(inited);
    uint64_t v21 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
    _BridgedStoredNSError.init(_:userInfo:)((void *)(v9 - 88), v9 - 96, v20, v16, v21);
    uint64_t v22 = *(void **)(v9 - 88);
    uint64_t v23 = (void *)_convertErrorToNSError(_:)(v22);
    (*(void (**)(uint64_t, uint64_t, void *))(v4 + 16))(v4, 3LL, v23);
  }

void sub_100343670(void **a1, uint64_t a2)
{
}

void sub_10034368C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v47[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (!a2
    || (uint64_t v50 = a2,
        swift_errorRetain(a2),
        uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A5470),
        type metadata accessor for TrackingAvoidanceError(0LL),
        !swift_dynamicCast(&v49, &v50, v10, v11, 6LL)))
  {
    id v26 = [a1 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

    id v27 = objc_allocWithZone(&OBJC_CLASS___SPTrackingAvoidanceResult);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    sub_100022898(0LL, &qword_1009A99D0, &OBJC_CLASS___SPTrackingAvoidancePolicy_ptr);
    Class v29 = Array._bridgeToObjectiveC()().super.isa;
    id v30 = [v27 initWithIdentifier:isa type:0 policies:v29];

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v31 = sub_100004AEC(&qword_1009B0610);
    uint64_t inited = swift_initStackObject(v31, v51);
    *(_OWORD *)(inited + 16) = xmmword_1007F8BB0;
    *(void *)(inited + 32) = v30;
    uint64_t v50 = inited;
    specialized Array._endMutation()(inited);
    uint64_t v33 = v50;
    id v34 = v30;
    sub_1006F1B80(v33);
    swift_bridgeObjectRelease();
    sub_100022898(0LL, (unint64_t *)&unk_1009A0C80, &OBJC_CLASS___SPTrackingAvoidanceResult_ptr);
    sub_1003455C8();
    v35.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    if (a2) {
      v25.super.Class isa = (Class)_convertErrorToNSError(_:)(a2);
    }
    else {
      v25.super.Class isa = 0LL;
    }
    (*(void (**)(uint64_t, Class, Class))(a3 + 16))(a3, v35.super.isa, v25.super.isa);

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  uint64_t v12 = v49;
  uint64_t v13 = sub_100340B2C(v49);
  if ((v14 & 1) != 0)
  {
    id v36 = [a1 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

    id v37 = objc_allocWithZone(&OBJC_CLASS___SPTrackingAvoidanceResult);
    Class v38 = UUID._bridgeToObjectiveC()().super.isa;
    sub_100022898(0LL, &qword_1009A99D0, &OBJC_CLASS___SPTrackingAvoidancePolicy_ptr);
    Class v39 = Array._bridgeToObjectiveC()().super.isa;
    id v40 = [v37 initWithIdentifier:v38 type:5 policies:v39];

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v41 = sub_100004AEC(&qword_1009B0610);
    uint64_t v42 = swift_initStackObject(v41, v48);
    *(_OWORD *)(v42 + 16) = xmmword_1007F8BB0;
    *(void *)(v42 + 32) = v40;
    uint64_t v50 = v42;
    specialized Array._endMutation()(v42);
    uint64_t v43 = v50;
    id v44 = v40;
    sub_1006F1B80(v43);
    swift_bridgeObjectRelease();
    sub_100022898(0LL, (unint64_t *)&unk_1009A0C80, &OBJC_CLASS___SPTrackingAvoidanceResult_ptr);
    sub_1003455C8();
    id v45 = v12;
    v35.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    v25.super.Class isa = (Class)_convertErrorToNSError(_:)(v45);
    (*(void (**)(uint64_t, Class, Class))(a3 + 16))(a3, v35.super.isa, v25.super.isa);

    swift_bridgeObjectRelease();
LABEL_9:

    goto LABEL_10;
  }

  uint64_t v15 = v13;
  id v16 = [a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

  id v17 = objc_allocWithZone(&OBJC_CLASS___SPTrackingAvoidanceResult);
  Class v18 = UUID._bridgeToObjectiveC()().super.isa;
  sub_100022898(0LL, &qword_1009A99D0, &OBJC_CLASS___SPTrackingAvoidancePolicy_ptr);
  Class v19 = Array._bridgeToObjectiveC()().super.isa;
  id v20 = [v17 initWithIdentifier:v18 type:v15 policies:v19];

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v21 = sub_100004AEC(&qword_1009B0610);
  uint64_t v22 = swift_initStackObject(v21, v47);
  *(_OWORD *)(v22 + 16) = xmmword_1007F8BB0;
  *(void *)(v22 + 32) = v20;
  uint64_t v50 = v22;
  specialized Array._endMutation()(v22);
  uint64_t v23 = v50;
  id v24 = v20;
  sub_1006F1B80(v23);
  swift_bridgeObjectRelease();
  sub_100022898(0LL, (unint64_t *)&unk_1009A0C80, &OBJC_CLASS___SPTrackingAvoidanceResult_ptr);
  sub_1003455C8();
  v25.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(a3 + 16))(a3, v25.super.isa, 0LL);

  swift_bridgeObjectRelease();
LABEL_10:
}

uint64_t sub_100343B8C(uint64_t a1, void *a2, void (*a3)(uint64_t, void *), uint64_t a4)
{
  uint64_t v8 = qword_10099B7A8;
  swift_retain();
  if (v8 != -1) {
    swift_once(&qword_10099B7A8, sub_100651904);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A2B0C8);
  uint64_t v10 = swift_retain_n(a1, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    NSSet v25 = a3;
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = swift_slowAlloc(64LL, -1LL);
    uint64_t v26 = a1;
    id v27 = (void *)v14;
    *(_DWORD *)uint64_t v13 = 136446466;
    uint64_t v15 = type metadata accessor for UnauthorizedTracking();
    swift_retain();
    uint64_t v16 = String.init<A>(describing:)(&v26, v15);
    uint64_t v26 = sub_1003F11D4(v16, v17, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v13 + 4, v13 + 12);
    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2082;
    uint64_t v26 = sub_1003F11D4(0xD000000000000038LL, 0x800000010085E850LL, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v13 + 14, v13 + 22);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    uint64_t v18 = v13;
    a3 = v25;
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 2LL);
  }

  type metadata accessor for TrackingAvoidanceError(0LL);
  uint64_t v20 = v19;
  uint64_t v26 = 6LL;
  unint64_t v21 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
  _BridgedStoredNSError.init(_:userInfo:)(&v27, &v26, v21, v20, v22);
  uint64_t v23 = v27;
  swift_retain();
  sub_100341150(a2, (uint64_t)v23, a3);

  return swift_release_n(a4, 2LL);
}

void sub_100343E2C(uint64_t a1, uint64_t *a2, const void *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = swift_allocObject(&unk_100951E00, 24LL, 7LL);
  *(void *)(v10 + 16) = a3;
  _Block_copy(a3);
  _Block_copy(a3);
  swift_retain();
  _Block_copy(a3);
  swift_retain();
  _Block_copy(a3);
  swift_retain();
  swift_bridgeObjectRetain(a1);
  os_log_type_t v12 = (void *)sub_1006F2D5C(v11);
  swift_bridgeObjectRelease();
  if (!v12)
  {
    if (qword_10099B2F8 != -1) {
      swift_once(&qword_10099B2F8, sub_100340AA8);
    }
    uint64_t v23 = sub_10000A720(v6, (uint64_t)qword_100A2A6B0);
    id v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Empty observations!", v26, 2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1007688D0((uint64_t)_swiftEmptyArrayStorage);
    }

    type metadata accessor for TrackingAvoidanceError(0LL);
    uint64_t v28 = v27;
    uint64_t v143 = 1LL;
    unint64_t v29 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v30 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
    _BridgedStoredNSError.init(_:userInfo:)(&v141, &v143, v29, v28, v30);
    id v31 = v141;
    sub_100022898(0LL, (unint64_t *)&unk_1009A0C80, &OBJC_CLASS___SPTrackingAvoidanceResult_ptr);
    sub_1003455C8();
    v32.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v33 = (void *)_convertErrorToNSError(_:)(v31);
    (*((void (**)(const void *, Class, void *))a3 + 2))(a3, v32.super.isa, v33);

    goto LABEL_42;
  }

  id v139 = a2;
  if (qword_10099B2F8 != -1) {
    swift_once(&qword_10099B2F8, sub_100340AA8);
  }
  uint64_t v13 = sub_10000A720(v6, (uint64_t)qword_100A2A6B0);
  uint64_t v14 = *(void (**)(char *))(v7 + 16);
  uint64_t v138 = v13;
  v14(v9);
  id v15 = v12;
  swift_bridgeObjectRetain(a1);
  id v16 = v15;
  unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  BOOL v19 = os_log_type_enabled(v17, v18);
  id v140 = v16;
  if (!v19)
  {

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_29:
    if ([v16 type] != (id)1)
    {
LABEL_34:
      switch((unint64_t)[v16 action])
      {
        case 0uLL:
          swift_retain();
          id v98 = v16;
          sub_100343B8C((uint64_t)v139, v98, (void (*)(uint64_t, void *))sub_1003455C0, v10);

          swift_release_n(v10, 5LL);
          break;
        case 1uLL:
          uint64_t v137 = v10;
          swift_bridgeObjectRetain(a1);
          uint64_t v100 = sub_1002FEA04(v99);
          swift_bridgeObjectRelease();
          id v48 = v16;
          uint64_t v101 = static os_log_type_t.default.getter(v48);
          if (qword_10099B720 != -1) {
            swift_once(&qword_10099B720, sub_10065128C);
          }
          uint64_t v102 = qword_100A2B030;
          uint64_t v103 = sub_100004AEC((uint64_t *)&unk_10099D740);
          uint64_t v104 = swift_allocObject(v103, 112LL, 7LL);
          *(_OWORD *)(v104 + 16) = xmmword_1007E4750;
          id v141 = (id)*v139;
          uint64_t v105 = sub_100004AEC(&qword_1009A99C0);
          uint64_t v106 = String.init<A>(describing:)(&v141, v105);
          uint64_t v108 = v107;
          *(void *)(v104 + 56) = &type metadata for String;
          unint64_t v109 = sub_1000226F4();
          *(void *)(v104 + 32) = v106;
          *(void *)(v104 + 40) = v108;
          *(void *)(v104 + 96) = &type metadata for String;
          *(void *)(v104 + 104) = v109;
          *(void *)(v104 + 64) = v109;
          *(void *)(v104 + 72) = 0xD000000000000039LL;
          *(void *)(v104 + 80) = 0x800000010085E7B0LL;
          os_log(_:dso:log:_:_:)(v101, &_mh_execute_header, v102, "%{public}@: %{public}@", 22LL, 2LL, v104);
          uint64_t v110 = swift_bridgeObjectRelease();
          uint64_t v111 = static os_log_type_t.default.getter(v110);
          if (qword_10099B788 != -1) {
            swift_once(&qword_10099B788, sub_1006517A0);
          }
          uint64_t v112 = qword_100A2B098;
          uint64_t v113 = swift_allocObject(v103, 72LL, 7LL);
          *(_OWORD *)(v113 + 16) = xmmword_1007E67D0;
          if (((unint64_t)v100 & 0x8000000000000000LL) != 0
            || ((unint64_t)v100 & 0x4000000000000000LL) != 0)
          {
            swift_bridgeObjectRetain(v100);
            uint64_t v114 = _CocoaArrayWrapper.endIndex.getter(v130);
            swift_release();
          }

          else
          {
            uint64_t v114 = (uint64_t)v100[2];
          }

          *(void *)(v113 + 56) = &type metadata for Int;
          *(void *)(v113 + 64) = &protocol witness table for Int;
          *(void *)(v113 + 32) = v114;
          os_log(_:dso:log:_:_:)( v111,  &_mh_execute_header,  v112,  "received %d unauthorized tracking observation(s)",  v134);
          swift_bridgeObjectRelease();
          type metadata accessor for TrackingAvoidanceError(0LL);
          uint64_t v116 = v115;
          uint64_t v143 = 6LL;
          unint64_t v117 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v118 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
          _BridgedStoredNSError.init(_:userInfo:)(&v141, &v143, v117, v116, v118);
          uint64_t v62 = v141;
          _Block_copy(a3);
          sub_10034368C(v48, (uint64_t)v62, (uint64_t)a3);
          _Block_release(a3);
          swift_release();
          uint64_t v63 = v137;
          goto LABEL_61;
        case 2uLL:
        case 3uLL:
          id v48 = v16;
          uint64_t v49 = static os_log_type_t.default.getter(v48);
          if (qword_10099B720 != -1) {
            swift_once(&qword_10099B720, sub_10065128C);
          }
          uint64_t v50 = qword_100A2B030;
          uint64_t v51 = sub_100004AEC((uint64_t *)&unk_10099D740);
          uint64_t v52 = swift_allocObject(v51, 112LL, 7LL);
          *(_OWORD *)(v52 + 16) = xmmword_1007E4750;
          id v141 = (id)*v139;
          uint64_t v53 = sub_100004AEC(&qword_1009A99C0);
          uint64_t v54 = String.init<A>(describing:)(&v141, v53);
          uint64_t v56 = v55;
          *(void *)(v52 + 56) = &type metadata for String;
          unint64_t v57 = sub_1000226F4();
          *(void *)(v52 + 32) = v54;
          *(void *)(v52 + 40) = v56;
          *(void *)(v52 + 96) = &type metadata for String;
          *(void *)(v52 + 104) = v57;
          *(void *)(v52 + 64) = v57;
          *(void *)(v52 + 72) = 0xD000000000000039LL;
          *(void *)(v52 + 80) = 0x800000010085E770LL;
          os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v50, "%{public}@: %{public}@", 22LL, 2LL, v52);
          swift_bridgeObjectRelease();
          type metadata accessor for TrackingAvoidanceError(0LL);
          uint64_t v59 = v58;
          uint64_t v143 = 6LL;
          unint64_t v60 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v61 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
          _BridgedStoredNSError.init(_:userInfo:)(&v141, &v143, v60, v59, v61);
          uint64_t v62 = v141;
          _Block_copy(a3);
          sub_10034368C(v48, (uint64_t)v62, (uint64_t)a3);
          _Block_release(a3);
          uint64_t v63 = v10;
LABEL_61:
          swift_release_n(v63, 4LL);

          break;
        case 4uLL:
          swift_bridgeObjectRetain(a1);
          sub_1002FEA04(v80);
          swift_bridgeObjectRelease();
          uint64_t v81 = swift_retain();
          uint64_t v82 = static os_log_type_t.default.getter(v81);
          if (qword_10099B720 != -1) {
            swift_once(&qword_10099B720, sub_10065128C);
          }
          uint64_t v83 = qword_100A2B030;
          uint64_t v84 = sub_100004AEC((uint64_t *)&unk_10099D740);
          uint64_t v85 = swift_allocObject(v84, 112LL, 7LL);
          *(_OWORD *)(v85 + 16) = xmmword_1007E4750;
          id v141 = (id)*v139;
          uint64_t v86 = sub_100004AEC(&qword_1009A99C0);
          uint64_t v87 = String.init<A>(describing:)(&v141, v86);
          uint64_t v89 = v88;
          *(void *)(v85 + 56) = &type metadata for String;
          unint64_t v90 = sub_1000226F4();
          *(void *)(v85 + 32) = v87;
          *(void *)(v85 + 40) = v89;
          *(void *)(v85 + 96) = &type metadata for String;
          *(void *)(v85 + 104) = v90;
          *(void *)(v85 + 64) = v90;
          *(void *)(v85 + 72) = 0xD00000000000003BLL;
          *(void *)(v85 + 80) = 0x800000010085E730LL;
          os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v83, "%{public}@: %{public}@", 22LL, 2LL, v85);
          swift_bridgeObjectRelease();
          type metadata accessor for TrackingAvoidanceError(0LL);
          uint64_t v92 = v91;
          uint64_t v143 = 6LL;
          unint64_t v93 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v94 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
          _BridgedStoredNSError.init(_:userInfo:)(&v141, &v143, v93, v92, v94);
          id v95 = v141;
          if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
            && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
          {
            sub_1007688D0((uint64_t)_swiftEmptyArrayStorage);
          }

          sub_100022898(0LL, (unint64_t *)&unk_1009A0C80, &OBJC_CLASS___SPTrackingAvoidanceResult_ptr);
          sub_1003455C8();
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          unint64_t v97 = (void *)_convertErrorToNSError(_:)(v95);
          (*((void (**)(const void *, Class, void *))a3 + 2))(a3, isa, v97);
          swift_release();

          swift_release_n(v10, 5LL);
          swift_bridgeObjectRelease();

          break;
        default:
          id v119 = v16;
          unint64_t v120 = (os_log_s *)Logger.logObject.getter(v119);
          os_log_type_t v121 = static os_log_type_t.error.getter(v120);
          if (os_log_type_enabled(v120, v121))
          {
            uint64_t v122 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            *(_DWORD *)uint64_t v122 = 134217984;
            id v141 = [v119 action];
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v122 + 4, v122 + 12);

            _os_log_impl((void *)&_mh_execute_header, v120, v121, "Unknown action %ld", v122, 0xCu);
            swift_slowDealloc(v122, -1LL, -1LL);
          }

          else
          {

            unint64_t v120 = (os_log_s *)v119;
          }

          if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
            && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
          {
            sub_1007688D0((uint64_t)_swiftEmptyArrayStorage);
          }

          type metadata accessor for TrackingAvoidanceError(0LL);
          uint64_t v124 = v123;
          uint64_t v143 = 1LL;
          unint64_t v125 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v126 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
          _BridgedStoredNSError.init(_:userInfo:)(&v141, &v143, v125, v124, v126);
          id v127 = v141;
          sub_100022898(0LL, (unint64_t *)&unk_1009A0C80, &OBJC_CLASS___SPTrackingAvoidanceResult_ptr);
          sub_1003455C8();
          Class v128 = Set._bridgeToObjectiveC()().super.isa;
          uint64_t v129 = (void *)_convertErrorToNSError(_:)(v127);
          (*((void (**)(const void *, Class, void *))a3 + 2))(a3, v128, v129);

          swift_bridgeObjectRelease();
          swift_release_n(v10, 4LL);

          break;
      }

      goto LABEL_67;
    }

    uint64_t My = type metadata accessor for Feature.FindMy(0LL);
    v142[2] = My;
    v142[3] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    id v44 = sub_10000A7C8(&v141);
    (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v44,  enum case for Feature.FindMy.beepOnMove(_:),  My);
    LOBYTE(My) = isFeatureEnabled(_:)(&v141);
    uint64_t v45 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
    if ((My & 1) != 0)
    {
      if (qword_10099B318 != -1) {
        swift_once(&qword_10099B318, sub_100352F58);
      }
      OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
      char v46 = sub_1006A1274((uint64_t)v141);
      uint64_t v47 = swift_bridgeObjectRelease();
      if ((v46 & 1) != 0) {
        goto LABEL_34;
      }
      unint64_t v72 = (os_log_s *)Logger.logObject.getter(v47);
      os_log_type_t v73 = static os_log_type_t.error.getter(v72);
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v74 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  v73,  "isBeepOnMoveEnabled is false. Skipping observations.",  v74,  2u);
        swift_slowDealloc(v74, -1LL, -1LL);
      }

      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
        && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1007688D0((uint64_t)_swiftEmptyArrayStorage);
      }

      type metadata accessor for TrackingAvoidanceError(0LL);
      uint64_t v76 = v75;
      uint64_t v143 = 6LL;
      unint64_t v77 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v78 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
      _BridgedStoredNSError.init(_:userInfo:)(&v141, &v143, v77, v76, v78);
      id v79 = v141;
      sub_100022898(0LL, (unint64_t *)&unk_1009A0C80, &OBJC_CLASS___SPTrackingAvoidanceResult_ptr);
      sub_1003455C8();
      v32.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
      uint64_t v33 = (void *)_convertErrorToNSError(_:)(v79);
      (*((void (**)(const void *, Class, void *))a3 + 2))(a3, v32.super.isa, v33);

      swift_release_n(v10, 4LL);
      swift_bridgeObjectRelease();
LABEL_43:

LABEL_67:
      _Block_release(a3);
      _Block_release(a3);
      _Block_release(a3);
      return;
    }

    unint64_t v64 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v65 = static os_log_type_t.error.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "Internal Settings -> Feature Flags -> FindMy -> beepOnMove is disabled.",  v66,  2u);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1007688D0((uint64_t)_swiftEmptyArrayStorage);
    }

    type metadata accessor for TrackingAvoidanceError(0LL);
    uint64_t v68 = v67;
    uint64_t v143 = 6LL;
    unint64_t v69 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v70 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
    _BridgedStoredNSError.init(_:userInfo:)(&v141, &v143, v69, v68, v70);
    id v71 = v141;
    sub_100022898(0LL, (unint64_t *)&unk_1009A0C80, &OBJC_CLASS___SPTrackingAvoidanceResult_ptr);
    sub_1003455C8();
    v32.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v33 = (void *)_convertErrorToNSError(_:)(v71);
    (*((void (**)(const void *, Class, void *))a3 + 2))(a3, v32.super.isa, v33);

LABEL_42:
    swift_bridgeObjectRelease();
    swift_release_n(v10, 4LL);
    goto LABEL_43;
  }

  __n128 v136 = a3;
  uint64_t v20 = swift_slowAlloc(32LL, -1LL);
  id v135 = (id)swift_slowAlloc(64LL, -1LL);
  id v141 = v135;
  *(_DWORD *)uint64_t v20 = 134218498;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v21 = a1;
    }
    else {
      uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v22 = __CocoaSet.count.getter(v21);
  }

  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
  }

  uint64_t v137 = v10;
  uint64_t v143 = v22;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v20 + 4, v20 + 12);
  swift_bridgeObjectRelease();
  *(_WORD *)(v20 + 12) = 2082;
  id v34 = [v16 action];
  unint64_t v35 = 0xE700000000000000LL;
  uint64_t v36 = 0x6465676174732ELL;
  switch((unint64_t)v34)
  {
    case 0uLL:
      break;
    case 1uLL:
      uint64_t v36 = 0x796669746F6E2ELL;
      break;
    case 2uLL:
      uint64_t v36 = 0x6574616470752ELL;
      break;
    case 3uLL:
      uint64_t v36 = 0x65676174736E752ELL;
      unint64_t v35 = 0xE900000000000064LL;
      break;
    case 4uLL:
      unint64_t v35 = 0xE900000000000077LL;
      uint64_t v36 = 0x617264687469772ELL;
      break;
    default:
      unint64_t v35 = 0xE800000000000000LL;
      uint64_t v36 = 0x6E776F6E6B6E752ELL;
      break;
  }

  uint64_t v143 = sub_1003F11D4(v36, v35, (uint64_t *)&v141);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v20 + 14, v20 + 22);
  id v37 = v140;

  swift_bridgeObjectRelease();
  *(_WORD *)(v20 + 22) = 2082;
  id v38 = [v37 type];
  if (!v38)
  {
    unint64_t v39 = 0xE800000000000000LL;
    uint64_t v40 = 0x746C75616665642ELL;
LABEL_28:
    uint64_t v143 = sub_1003F11D4(v40, v39, (uint64_t *)&v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v20 + 24, v20 + 32);
    id v16 = v140;

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Observed [%ld] observations. Action: %{public}s. Type: %{public}s.",  (uint8_t *)v20,  0x20u);
    id v42 = v135;
    swift_arrayDestroy(v135, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    a3 = v136;
    uint64_t v10 = v137;
    goto LABEL_29;
  }

  uint64_t v41 = (uint64_t)v38;
  if (v38 == (id)1)
  {
    unint64_t v39 = 0xEB0000000065766FLL;
    uint64_t v40 = 0x4D6E4F706565622ELL;
    goto LABEL_28;
  }

  swift_release_n(v137, 3LL);
  type metadata accessor for TrackingObservationType(0LL);
  uint64_t v132 = v131;
  id v133 = v136;
  _Block_release(v136);
  _Block_release(v133);
  _Block_release(v133);
  _Block_release(v133);
  uint64_t v143 = v41;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v132, &v143, v132, &type metadata for Int);
  __break(1u);
}

void sub_100345134(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v7 = qword_100A2B030;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1007E4750;
  uint64_t v28 = *a2;
  uint64_t v10 = sub_100004AEC(&qword_1009A99C0);
  uint64_t v11 = String.init<A>(describing:)(&v28, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v14 = sub_1000226F4();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v14;
  *(void *)(v9 + 64) = v14;
  *(void *)(v9 + 72) = 0xD000000000000039LL;
  *(void *)(v9 + 80) = 0x800000010085E7B0LL;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}@", 22LL, 2LL, v9);
  uint64_t v15 = swift_bridgeObjectRelease();
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  if (qword_10099B788 != -1) {
    swift_once(&qword_10099B788, sub_1006517A0);
  }
  uint64_t v17 = qword_100A2B098;
  uint64_t v18 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1007E67D0;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v26 = a1;
    }
    else {
      uint64_t v26 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  *(void *)(v18 + 56) = &type metadata for Int;
  *(void *)(v18 + 64) = &protocol witness table for Int;
  *(void *)(v18 + 32) = v19;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "received %d unauthorized tracking observation(s)", v27);
  swift_bridgeObjectRelease();
  type metadata accessor for TrackingAvoidanceError(0LL);
  uint64_t v21 = v20;
  uint64_t v27 = 6LL;
  unint64_t v22 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v23 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
  _BridgedStoredNSError.init(_:userInfo:)(&v28, &v27, v22, v21, v23);
  id v24 = v28;
  os_log_type_t v25 = (void *)_convertErrorToNSError(_:)(v28);
  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v25);
}

void sub_1003453D4(void **a1, uint64_t a2)
{
}

void sub_1003453F0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v9 = qword_100A2B030;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_1007E4750;
  id v24 = *a1;
  uint64_t v12 = sub_100004AEC(&qword_1009A99C0);
  uint64_t v13 = String.init<A>(describing:)(&v24, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 72) = a3;
  *(void *)(v11 + 80) = a4;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}@", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  type metadata accessor for TrackingAvoidanceError(0LL);
  uint64_t v18 = v17;
  uint64_t v23 = 6LL;
  unint64_t v19 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v20 = sub_100007864( &qword_10099C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError,  (uint64_t)&unk_1007E2E74);
  _BridgedStoredNSError.init(_:userInfo:)(&v24, &v23, v19, v18, v20);
  uint64_t v21 = v24;
  unint64_t v22 = (void *)_convertErrorToNSError(_:)(v24);
  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v22);
}

uint64_t sub_10034559C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1003455C0(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_1003455C8()
{
  unint64_t result = qword_1009A99C8;
  if (!qword_1009A99C8)
  {
    uint64_t v1 = sub_100022898(255LL, (unint64_t *)&unk_1009A0C80, &OBJC_CLASS___SPTrackingAvoidanceResult_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1009A99C8);
  }

  return result;
}

uint64_t sub_100345620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_100345668()
{
}

unint64_t sub_100345680()
{
  unint64_t result = qword_1009A99F0;
  if (!qword_1009A99F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC1C8, &type metadata for UTError);
    atomic_store(result, (unint64_t *)&qword_1009A99F0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for UTError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100345710 + 4 * byte_1007FC07B[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100345744 + 4 * byte_1007FC076[v4]))();
}

uint64_t sub_100345744(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10034574C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100345754LL);
  }
  return result;
}

uint64_t sub_100345760(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100345768LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10034576C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100345774(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTError()
{
  return &type metadata for UTError;
}

unint64_t sub_100345794()
{
  unint64_t result = qword_1009A99F8;
  if (!qword_1009A99F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC1A0, &type metadata for UTError);
    atomic_store(result, (unint64_t *)&qword_1009A99F8);
  }

  return result;
}

void sub_1003457D8()
{
}

void sub_1003457EC(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A9B78);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[3] = _swiftEmptyArrayStorage;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v10 = 0LL;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }

    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v16 >= v9) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    ++v10;
    if (!v17)
    {
      int64_t v10 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v5 + 8 * v10);
      if (!v17)
      {
        int64_t v10 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v10);
        if (!v17)
        {
          int64_t v10 = v16 + 3;
          if (v16 + 3 >= v9) {
            goto LABEL_23;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v10);
          if (!v17) {
            break;
          }
        }
      }
    }

uint64_t sub_1003459EC()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B308 != -1) {
    swift_once(&qword_10099B308, sub_100345AC4);
  }
  sub_10000A720(v0, (uint64_t)qword_100A2A6D0);
  URL.appendingPathComponent(_:)(0xD000000000000012LL, 0x800000010085EBD0LL);
  uint64_t v3 = type metadata accessor for BeaconObservationStore(0LL);
  uint64_t v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t result = sub_1003461E4((uint64_t)v2);
  qword_100A2A6C8 = v4;
  return result;
}

uint64_t sub_100345AC4()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2A6D0);
  sub_10000A720(v0, (uint64_t)qword_100A2A6D0);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000016LL, 0x80000001007FC210LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100345B94@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( v8,  a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL,  v5);
  id v9 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL.path.getter(v9);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v11 = [v9 fileExistsAtPath:v10];

  if ((v11 & 1) != 0)
  {
    uint64_t v37 = a1;
    uint64_t v12 = Data.init(contentsOf:options:)(v8, 0LL);
    if (v2)
    {
      unint64_t v35 = a2;
      uint64_t v36 = 0LL;
      unsigned int v34 = static os_log_type_t.error.getter(v12);
      if (qword_10099B310 != -1) {
        swift_once(&qword_10099B310, sub_100348BDC);
      }
      uint64_t v33 = qword_100A2A6E8;
      uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v21 = swift_allocObject(v20, 112LL, 7LL);
      *(_OWORD *)(v21 + 16) = xmmword_1007E4750;
      uint64_t v22 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v5, v22);
      uint64_t v25 = v24;
      *(void *)(v21 + 56) = &type metadata for String;
      unint64_t v26 = sub_1000226F4();
      *(void *)(v21 + 64) = v26;
      *(void *)(v21 + 32) = v23;
      *(void *)(v21 + 40) = v25;
      id v38 = v2;
      swift_errorRetain(v2);
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v28 = String.init<A>(describing:)(&v38, v27);
      *(void *)(v21 + 96) = &type metadata for String;
      *(void *)(v21 + 104) = v26;
      *(void *)(v21 + 72) = v28;
      *(void *)(v21 + 80) = v29;
      os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  v33,  "Error reading observations, url %@, error, %@",  45LL,  2LL,  v21);
      swift_errorRelease(v2);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      id v31 = &_swiftEmptyDictionarySingleton;
      a2 = v35;
    }

    else
    {
      uint64_t v14 = v12;
      unint64_t v15 = v13;
      uint64_t v16 = type metadata accessor for PropertyListDecoder(0LL);
      swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
      uint64_t v17 = PropertyListDecoder.init()();
      uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AF790);
      unint64_t v19 = sub_100348C50();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v38, v18, v14, v15, v18, v19);
      uint64_t v36 = 0LL;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_release(v17);
      sub_100016F9C(v14, v15);
      id v31 = v38;
    }

    *(void *)(v37 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap) = v31;
    swift_bridgeObjectRetain(v31);
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    id v31 = &_swiftEmptyDictionarySingleton;
  }

  *a2 = v31;
  return result;
}

uint64_t sub_100345EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v38 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  unsigned __int8 v11 = (char *)&v37 - v10;
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v37 - v12;
  sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
  uint64_t v14 = a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL;
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v15 = v37(v11, a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL, v5);
  URL.deletingLastPathComponent()(v15);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v11, v5);
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0LL);
  v16(v13, v5);
  uint64_t v17 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v19 = PropertyListEncoder.init()(v18);
  uint64_t v39 = a2;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  unint64_t v21 = sub_1003490D4();
  uint64_t v22 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v39, v20, v21);
  if (v2)
  {
    uint64_t v24 = swift_release(v19);
    uint64_t v28 = static os_log_type_t.error.getter(v24);
    if (qword_10099B310 != -1) {
      swift_once(&qword_10099B310, sub_100348BDC);
    }
    uint64_t v29 = qword_100A2A6E8;
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
    *(_OWORD *)(v31 + 16) = xmmword_1007E67D0;
    uint64_t v39 = v2;
    swift_errorRetain(v2);
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v33 = String.init<A>(describing:)(&v39, v32);
    uint64_t v35 = v34;
    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 64) = sub_1000226F4();
    *(void *)(v31 + 32) = v33;
    *(void *)(v31 + 40) = v35;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Error saving observations: %@", 29LL, 2LL, v31);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v2);
  }

  else
  {
    uint64_t v25 = v22;
    unint64_t v26 = v23;
    uint64_t v27 = v38;
    v37(v38, v14, v5);
    Data.write(to:excludeFromBackup:options:)(v27, 1LL, 0LL, 1LL, v25, v26);
    v16(v27, v5);
    sub_100016F9C(v25, v26);
    return swift_release(v19);
  }

uint64_t sub_1003461E4(uint64_t a1)
{
  uint64_t v57 = a1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = v12;
  uint64_t v59 = v1;
  *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_systemClockChangedSubscription) = 0LL;
  PressuredExitTransactionManager.init()(v10);
  uint64_t v56 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionQueue;
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  unsigned int v54 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v55 = *(uint64_t (**)(char *))(v9 + 104);
  uint64_t v13 = v55(v12);
  uint64_t v14 = v7;
  static DispatchQoS.unspecified.getter(v13);
  unint64_t v60 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v58 = v15;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v17 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v18 = v4;
  uint64_t v19 = v16;
  uint64_t v50 = v16;
  uint64_t v51 = v17;
  uint64_t v52 = v2;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v16, v17, v2, v15);
  uint64_t v20 = v18;
  unint64_t v21 = v53;
  uint64_t v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000041LL,  0x800000010085EBF0LL,  v14,  v18,  v53,  0LL);
  uint64_t v23 = v59;
  uint64_t v24 = v55;
  *(void *)(v59 + v56) = v22;
  *(void *)(v23 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions) = _swiftEmptyArrayStorage;
  uint64_t v56 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionPublishQueue;
  uint64_t v25 = v54;
  uint64_t v26 = ((uint64_t (*)(char *, void, uint64_t))v24)(v21, v54, v8);
  static DispatchQoS.unspecified.getter(v26);
  unint64_t v60 = _swiftEmptyArrayStorage;
  uint64_t v27 = v19;
  uint64_t v28 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v27, v17, v52, v58);
  uint64_t v29 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000049LL,  0x800000010085EC40LL,  v14,  v18,  v21,  0LL);
  uint64_t v30 = v59;
  *(void *)(v59 + v56) = v29;
  uint64_t v56 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue;
  uint64_t v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v21, v25, v8);
  static DispatchQoS.unspecified.getter(v31);
  unint64_t v60 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v50, v51, v28, v58);
  uint64_t v32 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000050LL,  0x800000010085EC90LL,  v14,  v20,  v21,  0LL);
  *(void *)(v30 + v56) = v32;
  *(void *)(v30 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap) = 0LL;
  uint64_t v33 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_automaticTimeEnabled;
  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  uint64_t v34 = *(void *)(qword_100A2B838 + 48);
  uint64_t v35 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v60, v35);
  swift_release(v34);
  *(_BYTE *)(v30 + v33) = (_BYTE)v60;
  uint64_t v36 = v30 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL;
  uint64_t v37 = type metadata accessor for URL(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = v57;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v36, v57, v37);
  uint64_t v40 = *(void *)(qword_100A2B838 + 48);
  uint64_t v41 = swift_retain();
  uint64_t v42 = AnyCurrentValuePublisher.publisher.getter(v41);
  swift_release(v40);
  unint64_t v60 = (void *)v42;
  uint64_t v43 = swift_allocObject(&unk_100951F40, 24LL, 7LL);
  swift_weakInit(v43 + 16, v30);
  uint64_t v44 = sub_100004AEC(&qword_1009A39E0);
  uint64_t v45 = sub_1000372EC( &qword_1009A39E8,  &qword_1009A39E0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v46 = Publisher<>.sink(receiveValue:)(sub_100348DC8, v43, v44, v45);
  swift_release(v43);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v37);
  swift_release(v60);
  uint64_t v47 = *(void *)(v30 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_systemClockChangedSubscription);
  *(void *)(v30 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_systemClockChangedSubscription) = v46;
  swift_release(v47);
  return v30;
}

uint64_t sub_1003466C4(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v12 = *a1;
  a2 += 16LL;
  swift_beginAccess(a2, v23, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v14 = result;
    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v15 = swift_allocObject(&unk_100951F40, 24LL, 7LL);
    swift_weakInit(v15 + 16, v14);
    uint64_t v16 = swift_allocObject(&unk_100951F68, 25LL, 7LL);
    *(void *)(v16 + 16) = v15;
    *(_BYTE *)(v16 + 24) = v12;
    aBlock[4] = sub_100348DF4;
    uint64_t v22 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100951F80;
    uint64_t v17 = _Block_copy(aBlock);
    uint64_t v18 = swift_retain();
    static DispatchQoS.unspecified.getter(v18);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v11, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_release(v14);
    uint64_t v19 = v22;
    swift_release(v15);
    return swift_release(v19);
  }

  return result;
}

uint64_t sub_1003468A8(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    sub_100346904(a2 & 1);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_100346904(char a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v2 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_automaticTimeEnabled;
  int v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_automaticTimeEnabled);
  uint64_t v4 = static os_log_type_t.default.getter(v10);
  if (v11 != (a1 & 1))
  {
    if (qword_10099B310 == -1)
    {
LABEL_4:
      uint64_t v12 = qword_100A2A6E8;
      os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_100A2A6E8,  "Automatic time value changed. Clearing all observations.",  56LL,  2LL,  _swiftEmptyArrayStorage);
      *(_BYTE *)(v1 + v2) = a1 & 1;
      sub_100348FD0((uint64_t)&_swiftEmptyDictionarySingleton);
      uint64_t v14 = static os_log_type_t.default.getter(v13);
      return os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  v12,  "All observations removed.",  25LL,  2LL,  _swiftEmptyArrayStorage);
    }

uint64_t sub_100346B24@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, a1, v10);
  if (*(void *)(v18 + 16) && (unint64_t v11 = sub_10030D124(a2), (v12 & 1) != 0))
  {
    uint64_t v13 = *(void *)(*(void *)(v18 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease();
    uint64_t v14 = sub_1002FE5F8(v13);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v14);
    uint64_t v16 = v15;
    uint64_t result = swift_release(v14);
    if (a3)
    {
      swift_retain();
      uint64_t v16 = (void *)sub_100023AB0(a3, a4, (uint64_t)v16);
      uint64_t result = sub_10002214C((uint64_t)a3, (uint64_t)a4);
    }
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v16 = _swiftEmptyArrayStorage;
  }

  *a5 = v16;
  return result;
}

void sub_100346C4C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (void *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
LABEL_6:
    *a2 = v10;
    swift_bridgeObjectRetain(v9);
    return;
  }

  unint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  *uint64_t v8 = v11;
  (*(void (**)(void *, void, void *))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, void *))(v6 + 8))(v8, v5);
  if ((v11 & 1) != 0)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    sub_100345B94(a1, &v14);
    if (!v2)
    {
      objc_autoreleasePoolPop(v5);
      uint64_t v9 = 0LL;
      uint64_t v10 = v14;
      goto LABEL_6;
    }
  }

  else
  {
    __break(1u);
  }

  objc_autoreleasePoolPop(v5);
  __break(1u);
}

uint64_t sub_100346D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v23 = *(void *)(v10 - 8);
  uint64_t v24 = v10;
  __chkstk_darwin(v10);
  id v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v13 = *(void *)(v22 - 8);
  uint64_t v14 = __chkstk_darwin(v22);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  static DispatchWorkItemFlags.barrier.getter(v14);
  uint64_t v17 = (void *)swift_allocObject(&unk_100952008, 56LL, 7LL);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a1;
  v17[5] = a4;
  v17[6] = a5;
  aBlock[4] = sub_100349470;
  uint64_t v26 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100952020;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a3);
  swift_retain();
  uint64_t v19 = sub_1000372DC(a4, a5);
  static DispatchQoS.unspecified.getter(v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v16, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v24);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v22);
  return swift_release(v26);
}

uint64_t sub_100346F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v97 = a4;
  uint64_t v98 = a5;
  uint64_t v96 = a3;
  uint64_t v73 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v94 = *(void *)(v6 - 8);
  uint64_t v95 = v6;
  __chkstk_darwin(v6);
  unint64_t v93 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  unint64_t v90 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = type metadata accessor for UUID(0LL);
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v87 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v10 = *(void *)(v86 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v86);
  uint64_t v85 = (uint64_t)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v76 = (uint64_t)&v72 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v72 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
  uint64_t v99 = a1;
  if (v21)
  {
    uint64_t v22 = v21;
  }

  else
  {
    uint64_t v23 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
    *uint64_t v20 = v23;
    (*(void (**)(void *, void, uint64_t))(v18 + 104))( v20,  enum case for DispatchPredicate.onQueue(_:),  v17);
    id v24 = v23;
    LOBYTE(v23) = _dispatchPreconditionTest(_:)(v20);
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v20, v17);
    if ((v23 & 1) == 0)
    {
      __break(1u);
      return result;
    }

    uint64_t v26 = objc_autoreleasePoolPush();
    sub_100345B94(a1, aBlock);
    objc_autoreleasePoolPop(v26);
    uint64_t v22 = aBlock[0];
  }

  uint64_t v27 = *(void *)(v73 + 16);
  if (v27)
  {
    uint64_t v84 = *(void *)(v99 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
    uint64_t v28 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v29 = (v28 + 32) & ~v28;
    uint64_t v30 = v73 + v29;
    uint64_t v31 = *(void *)(v10 + 72);
    uint64_t v75 = v29 + 2 * v31;
    uint64_t v101 = v28 | 7;
    uint64_t v79 = v29;
    uint64_t v100 = v31;
    uint64_t v78 = v31 + v29;
    uint64_t v83 = (v28 + 24) & ~v28;
    unint64_t v82 = (v11 + v83 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v81 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v80 = v81 + 16;
    uint64_t v32 = v73;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v32);
    __int128 v77 = xmmword_1007E67D0;
    __int128 v74 = xmmword_1007E4750;
    uint64_t v102 = v16;
    do
    {
      sub_1003493A4(v30, (uint64_t)v16);
      if (*(void *)(v22 + 16) && (unint64_t v56 = sub_10030D124((uint64_t)v16), (v57 & 1) != 0))
      {
        unint64_t v58 = *(void *)(*(void *)(v22 + 56) + 8 * v56);
        swift_bridgeObjectRetain(v58);
      }

      else
      {
        unint64_t v58 = sub_100421FC8((uint64_t)_swiftEmptyArrayStorage);
      }

      uint64_t v59 = v101;
      char v60 = v16[*(int *)(v86 + 24)];
      if (*(void *)(v58 + 16)
        && (unint64_t v61 = sub_10030D6BC(v16[*(int *)(v86 + 24)]), (v62 & 1) != 0)
        && (uint64_t v63 = *(void *)(*(void *)(v58 + 56) + 8 * v61), *(void *)(v63 + 16)))
      {
        uint64_t v64 = v79;
        uint64_t v65 = v76;
        sub_1003493A4(v63 + v79, v76);
        uint64_t v66 = sub_100004AEC(&qword_10099D318);
        uint64_t v67 = swift_allocObject(v66, v75, v59);
        *(_OWORD *)(v67 + 16) = v74;
        sub_1003493A4((uint64_t)v102, v67 + v64);
        sub_1003493A4(v65, v67 + v64 + v100);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
        aBlock[0] = v58;
        uint64_t v69 = v67;
        uint64_t v59 = v101;
        sub_10005E340(v69, v60, isUniquelyReferenced_nonNull_native);
        uint64_t v36 = aBlock[0];
        swift_bridgeObjectRelease();
        uint64_t v70 = v65;
        uint64_t v16 = v102;
        sub_100303000(v70);
      }

      else
      {
        uint64_t v33 = sub_100004AEC(&qword_10099D318);
        uint64_t v34 = swift_allocObject(v33, v78, v59);
        *(_OWORD *)(v34 + 16) = v77;
        sub_1003493A4((uint64_t)v16, v34 + v79);
        char v35 = swift_isUniquelyReferenced_nonNull_native(v58);
        aBlock[0] = v58;
        sub_10005E340(v34, v60, v35);
        uint64_t v36 = aBlock[0];
        swift_bridgeObjectRelease();
      }

      uint64_t v37 = v88;
      uint64_t v38 = (uint64_t)v87;
      uint64_t v39 = v16;
      uint64_t v40 = v89;
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v87, v39, v89);
      swift_bridgeObjectRetain(v36);
      char v41 = swift_isUniquelyReferenced_nonNull_native(v22);
      aBlock[0] = v22;
      sub_10005E334(v36, v38, v41);
      uint64_t v22 = aBlock[0];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v40);
      uint64_t v42 = v85;
      sub_1003493A4((uint64_t)v102, v85);
      uint64_t v43 = swift_allocObject(&unk_100952058, v80, v59);
      *(void *)(v43 + 16) = v99;
      sub_1003493E8(v42, v43 + v83);
      uint64_t v44 = v97;
      *(void *)(v43 + v82) = v96;
      uint64_t v45 = (uint64_t *)(v43 + v81);
      uint64_t v46 = v98;
      *uint64_t v45 = v44;
      v45[1] = v46;
      aBlock[4] = sub_100349550;
      uint64_t v105 = v43;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      aBlock[3] = &unk_100952070;
      uint64_t v47 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      uint64_t v48 = sub_1000372DC(v44, v46);
      uint64_t v49 = v90;
      static DispatchQoS.unspecified.getter(v48);
      uint64_t v103 = _swiftEmptyArrayStorage;
      uint64_t v50 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v51 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v52 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v53 = v93;
      uint64_t v54 = v95;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v103, v51, v52, v95, v50);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v49, v53, v47);
      _Block_release(v47);
      uint64_t v55 = v54;
      uint64_t v16 = v102;
      (*(void (**)(char *, uint64_t))(v94 + 8))(v53, v55);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v49, v92);
      sub_100303000((uint64_t)v16);
      swift_release(v105);
      swift_bridgeObjectRelease();
      v30 += v100;
      --v27;
    }

    while (v27);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain(v21);
  }

  swift_bridgeObjectRetain(v22);
  sub_100348FD0(v71);
  return swift_bridgeObjectRelease_n(v22, 2LL);
}

uint64_t sub_1003476A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)swift_allocObject(&unk_1009520A8, 40LL, 7LL);
  v9[2] = a3;
  v9[3] = a4;
  _OWORD v9[4] = a5;
  swift_retain();
  sub_1000372DC(a4, a5);
  sub_100347730(a2, (uint64_t)sub_1003495D8, (uint64_t)v9);
  return swift_release(v9);
}

uint64_t sub_100347730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a2;
  uint64_t v54 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v44 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  __chkstk_darwin(v8);
  char v57 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v53 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v51 = (uint64_t)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = v11;
  uint64_t v12 = sub_100004AEC(&qword_1009B0800);
  uint64_t v56 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v56 + 64);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A9B70);
  OS_dispatch_queue.sync<A>(execute:)(sub_100349614, v3, v15);
  uint64_t v16 = (char *)aBlock[2];
  uint64_t v42 = v3;
  if (v16)
  {
    uint64_t v41 = a3;
    uint64_t v50 = *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionPublishQueue);
    uint64_t v17 = *(unsigned __int8 *)(v56 + 80);
    uint64_t v55 = v6;
    uint64_t v18 = v5;
    v40[1] = aBlock;
    uint64_t v19 = (char *)aBlock + ((v17 + 32) & ~v17);
    uint64_t v48 = *(void *)(v56 + 72);
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    uint64_t v49 = v17;
    uint64_t v46 = (v17 + 16) & ~v17;
    uint64_t v45 = v46 + v13;
    uint64_t v20 = v44;
    do
    {
      v47(v14, v19, v12);
      uint64_t v21 = v51;
      sub_1003493A4(v54, v51);
      uint64_t v22 = *(unsigned __int8 *)(v53 + 80);
      uint64_t v23 = (v45 + v22) & ~v22;
      uint64_t v24 = swift_allocObject(&unk_1009520D0, v23 + v52, v49 | v22 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v24 + v46, v14, v12);
      sub_1003493E8(v21, v24 + v23);
      uint64_t v65 = sub_100349758;
      uint64_t v66 = v24;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v62 = 1107296256LL;
      uint64_t v63 = sub_1001C31E8;
      uint64_t v64 = &unk_1009520E8;
      uint64_t v25 = _Block_copy(&aBlock);
      static DispatchQoS.unspecified.getter(v25);
      char v60 = _swiftEmptyArrayStorage;
      uint64_t v26 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v28 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v29 = v26;
      uint64_t v30 = v57;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v27, v28, v18, v29);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v30, v20, v25);
      _Block_release(v25);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v20, v18);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v30, v59);
      swift_release(v66);
      v19 += v48;
      --v16;
    }

    while (v16);
    swift_bridgeObjectRelease();
    uint64_t v5 = v18;
    uint64_t v6 = v55;
    a3 = v41;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = v57;
  }

  uint64_t v31 = swift_allocObject(&unk_100952120, 32LL, 7LL);
  *(void *)(v31 + 16) = v43;
  *(void *)(v31 + 24) = a3;
  uint64_t v65 = sub_1000228F4;
  uint64_t v66 = v31;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v62 = 1107296256LL;
  uint64_t v63 = sub_1001C31E8;
  uint64_t v64 = &unk_100952138;
  uint64_t v32 = _Block_copy(&aBlock);
  uint64_t v33 = swift_retain();
  static DispatchQoS.unspecified.getter(v33);
  char v60 = _swiftEmptyArrayStorage;
  uint64_t v34 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  char v35 = v30;
  uint64_t v36 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v37 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v38 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v36, v37, v5, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v35, v38, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v38, v5);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v35, v59);
  return swift_release(v66);
}

void sub_100347C98(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (void *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
LABEL_6:
    swift_bridgeObjectRetain(v9);
    sub_1003457EC(v10);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    *a2 = v14;
    return;
  }

  uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  *uint64_t v8 = v11;
  (*(void (**)(void *, void, void *))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, void *))(v6 + 8))(v8, v5);
  if ((v11 & 1) != 0)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    sub_100345B94(a1, &v16);
    if (!v2)
    {
      objc_autoreleasePoolPop(v5);
      uint64_t v9 = 0LL;
      uint64_t v10 = v16;
      goto LABEL_6;
    }
  }

  else
  {
    __break(1u);
  }

  objc_autoreleasePoolPop(v5);
  __break(1u);
}

void sub_100347DE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v56 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v55 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  id v12 = (uint64_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
  if (!v13)
  {
    uint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
    void *v12 = v14;
    (*(void (**)(void *, void, void *))(v10 + 104))( v12,  enum case for DispatchPredicate.onQueue(_:),  v9);
    id v15 = v14;
    LOBYTE(v14) = _dispatchPreconditionTest(_:)(v12);
    (*(void (**)(void *, void *))(v10 + 8))(v12, v9);
    if ((v14 & 1) != 0)
    {
      uint64_t v9 = objc_autoreleasePoolPush();
      sub_100345B94(a1, &v61);
      if (!v4)
      {
        objc_autoreleasePoolPop(v9);
        uint64_t v9 = v61;
        goto LABEL_6;
      }
    }

    else
    {
LABEL_48:
      __break(1u);
LABEL_49:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for BeaconObservation.ObservationType);
      __break(1u);
    }

    objc_autoreleasePoolPop(v9);
    __break(1u);
    return;
  }

  uint64_t v9 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
LABEL_6:
  unint64_t v61 = v9;
  uint64_t v16 = v9[2];
  swift_bridgeObjectRetain(v13);
  if (!v16) {
    goto LABEL_44;
  }
  swift_bridgeObjectRetain(v9);
  unint64_t v17 = sub_10030D124(a2);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }

  uint64_t v51 = v7;
  uint64_t v52 = a2;
  uint64_t v53 = a1;
  uint64_t v19 = *(void *)(v9[7] + 8 * v17);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  unint64_t v57 = sub_100421FC8((uint64_t)_swiftEmptyArrayStorage);
  int64_t v20 = 0LL;
  uint64_t v21 = v19 + 64;
  uint64_t v22 = 1LL << *(_BYTE *)(v19 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & *(void *)(v19 + 64);
  int64_t v25 = (unint64_t)(v22 + 63) >> 6;
  if (!v24) {
    goto LABEL_14;
  }
LABEL_11:
  unint64_t v26 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  for (unint64_t i = v26 | (v20 << 6); ; unint64_t i = __clz(__rbit64(v31)) + (v20 << 6))
  {
    char v28 = *(_BYTE *)(*(void *)(v19 + 48) + i);
    uint64_t v29 = swift_bridgeObjectRetain(*(void *)(*(void *)(v19 + 56) + 8 * i));
    uint64_t v9 = sub_100348E18(v29, v58);
    swift_bridgeObjectRelease();
    if (v9[2])
    {
      uint64_t v33 = (void *)v57;
      LODWORD(v54) = swift_isUniquelyReferenced_nonNull_native(v57);
      char v60 = v33;
      unint64_t v35 = sub_10030D6BC(v28);
      uint64_t v36 = v33[2];
      BOOL v37 = (v34 & 1) == 0;
      uint64_t v38 = v36 + v37;
      if (__OFADD__(v36, v37)) {
        goto LABEL_47;
      }
      if (v33[3] >= v38)
      {
        if ((v54 & 1) == 0)
        {
          LODWORD(v57) = v34;
          unint64_t v54 = v35;
          sub_100065AA0();
          unint64_t v35 = v54;
          LOBYTE(v34) = v57;
        }
      }

      else
      {
        LODWORD(v57) = v34;
        sub_10005168C(v38, v54);
        unint64_t v39 = sub_10030D6BC(v28);
        int v40 = v34 & 1;
        LOBYTE(v34) = v57;
        if ((v57 & 1) != v40) {
          goto LABEL_49;
        }
        unint64_t v35 = v39;
      }

      unint64_t v57 = (unint64_t)v60;
      if ((v34 & 1) != 0)
      {
        uint64_t v41 = v60[7];
        uint64_t v42 = 8 * v35;
        swift_bridgeObjectRelease();
        *(void *)(v41 + v42) = v9;
      }

      else
      {
        sub_100060E70(v35, v28, (uint64_t)v9, v60);
      }

      swift_bridgeObjectRelease();
      if (v24) {
        goto LABEL_11;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      if (v24) {
        goto LABEL_11;
      }
    }

uint64_t sub_10034828C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B0800);
  Subscription.subscriber.getter(v7, v3);
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  sub_100012ED8(v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a2, v4, v5);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
}

uint64_t sub_100348300()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_systemClockChangedSubscription));
  uint64_t v3 = v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_transactionManager;
  uint64_t v4 = type metadata accessor for PressuredExitTransactionManager(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);

  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions));
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap));
  return v0;
}

uint64_t sub_1003483CC()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1003483F0()
{
  return type metadata accessor for BeaconObservationStore(0LL);
}

uint64_t type metadata accessor for BeaconObservationStore(uint64_t a1)
{
  uint64_t result = qword_1009A9A50;
  if (!qword_1009A9A50) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconObservationStore);
  }
  return result;
}

uint64_t sub_100348434(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = "\b";
    uint64_t result = type metadata accessor for PressuredExitTransactionManager(319LL);
    if (v4 <= 0x3F)
    {
      void v5[2] = *(void *)(result - 8) + 64LL;
      v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      __int128 v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[7] = "\b";
      void v5[8] = &unk_1007FC260;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1003484F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004AEC(&qword_1009B0800);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100013044(a1, (uint64_t)v19);
  uint64_t v10 = swift_allocObject(&unk_100951F40, 24LL, 7LL);
  swift_weakInit(v10 + 16, a2);
  uint64_t v11 = sub_100004AEC(&qword_1009A9B60);
  Subscription.init(subscriber:unsubscribeBlock:)(v19, sub_1003492C4, v10, v11);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  id v12 = (unint64_t *)(a2 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess(v12, v19, 33LL, 0LL);
  unint64_t v13 = *v12;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
  unint64_t *v12 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v13 = sub_1004C630C(0, *(void *)(v13 + 16) + 1LL, 1, v13);
    unint64_t *v12 = v13;
  }

  unint64_t v16 = *(void *)(v13 + 16);
  unint64_t v15 = *(void *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    unint64_t v13 = sub_1004C630C(v15 > 1, v16 + 1, 1, v13);
    unint64_t *v12 = v13;
  }

  *(void *)(v13 + 16) = v16 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v7 + 32))( v13 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v16,
    v9,
    v6);
  return swift_endAccess(v19);
}

uint64_t sub_1003486A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_100348714(a1);
    return swift_release();
  }

  return result;
}

uint64_t sub_100348714(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009B0800);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  v21[1] = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionQueue);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v9);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_100951FB8, v13 + v11, v12 | 7);
  *(void *)(v14 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v14 + v13,  (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9);
  aBlock[4] = sub_100349354;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100951FD0;
  unint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  int64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v19 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  return swift_release();
}

uint64_t sub_100348984(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions, v7, 1LL, 0LL);
  uint64_t v4 = *v3;
  _OWORD v6[2] = a2;
  swift_bridgeObjectRetain(v4);
  *uint64_t v3 = sub_100023DD8((uint64_t (*)(char *))sub_100349388, (uint64_t)v6, v4);
  return swift_bridgeObjectRelease();
}

BOOL sub_100348A08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B0800);
  uint64_t v5 = sub_1000372EC(&qword_1009A9B68, &qword_1009B0800, (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_100348A8C()
{
  uint64_t v1 = (void *)(*v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess(v1, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_100348AD8(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(*v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_100348B2C(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_100348B74(uint64_t a1)
{
  uint64_t v2 = *v1;
  void v5[2] = a1;
  v5[3] = v2;
  uint64_t v3 = sub_100004AEC(&qword_1009B0800);
  return OS_dispatch_queue.sync<A>(execute:)(sub_1003492AC, v5, v3);
}

uint64_t sub_100348BDC()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000016LL,  0x800000010085EBB0LL);
  qword_100A2A6E8 = result;
  return result;
}

unint64_t sub_100348C50()
{
  unint64_t result = qword_1009A9B18;
  if (!qword_1009A9B18)
  {
    uint64_t v1 = sub_100004B78((uint64_t *)&unk_1009AF790);
    sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    sub_100348CD4();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009A9B18);
  }

  return result;
}

unint64_t sub_100348CD4()
{
  unint64_t result = qword_1009A9B20;
  if (!qword_1009A9B20)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A9B28);
    sub_100348D60();
    sub_100349228( (unint64_t *)&qword_1009A9B38,  &qword_1009A9B40,  (uint64_t)&unk_100800FC8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009A9B20);
  }

  return result;
}

unint64_t sub_100348D60()
{
  unint64_t result = qword_1009A9B30;
  if (!qword_1009A9B30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800E28, &type metadata for BeaconObservation.ObservationType);
    atomic_store(result, (unint64_t *)&qword_1009A9B30);
  }

  return result;
}

uint64_t sub_100348DA4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100348DC8(char *a1)
{
  return sub_1003466C4(a1, v1);
}

uint64_t sub_100348DD0()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_100348DF4()
{
  return sub_1003468A8(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100348E00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100348E10(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_100348E18(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v21 - v10;
  unint64_t result = _swiftEmptyArrayStorage;
  int64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v21 = v2;
    uint64_t v14 = *(void *)(v9 + 72);
    unint64_t v23 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v15 = a1 + v23;
    uint64_t v16 = v14;
    uint64_t v17 = _swiftEmptyArrayStorage;
    uint64_t v24 = a2;
    uint64_t v22 = v14;
    do
    {
      sub_1003493A4(v15, (uint64_t)v11);
      if ((a2(v11) & 1) != 0)
      {
        sub_100303000((uint64_t)v11);
      }

      else
      {
        sub_1003493E8((uint64_t)v11, (uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
          sub_100032AA8(0, v17[2] + 1LL, 1);
        }
        uint64_t v17 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_100032AA8(v18 > 1, v19 + 1, 1);
          uint64_t v17 = v25;
        }

        v17[2] = v19 + 1;
        uint64_t v20 = (uint64_t)v17 + v23 + v19 * v22;
        uint64_t v16 = v22;
        sub_1003493E8((uint64_t)v8, v20);
        a2 = v24;
      }

      v15 += v16;
      --v13;
    }

    while (v13);
    return v25;
  }

  return result;
}

void sub_100348FD0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (*(void *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap))
  {
    *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap) = a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    uint64_t v9 = objc_autoreleasePoolPush();
    sub_100345EE0(v1, a1);
    objc_autoreleasePoolPop(v9);
  }

  else
  {
    __break(1u);
  }

unint64_t sub_1003490D4()
{
  unint64_t result = qword_1009A9B48;
  if (!qword_1009A9B48)
  {
    uint64_t v1 = sub_100004B78((uint64_t *)&unk_1009AF790);
    sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    sub_100349158();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009A9B48);
  }

  return result;
}

unint64_t sub_100349158()
{
  unint64_t result = qword_1009A9B50;
  if (!qword_1009A9B50)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A9B28);
    sub_1003491E4();
    sub_100349228( (unint64_t *)&qword_1009A6008,  &qword_1009A6010,  (uint64_t)&unk_100800FA0,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009A9B50);
  }

  return result;
}

unint64_t sub_1003491E4()
{
  unint64_t result = qword_1009A9B58;
  if (!qword_1009A9B58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800E00, &type metadata for BeaconObservation.ObservationType);
    atomic_store(result, (unint64_t *)&qword_1009A9B58);
  }

  return result;
}

uint64_t sub_100349228(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100004B78(&qword_1009B1500);
    sub_100007864(a2, type metadata accessor for BeaconObservation, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1003492AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1003484F0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1003492C4(uint64_t a1)
{
  return sub_1003486A4(a1, v1);
}

uint64_t sub_1003492DC()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B0800);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100349354()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009B0800) - 8) + 80LL);
  return sub_100348984(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

BOOL sub_100349388(uint64_t a1)
{
  return sub_100348A08(a1, *(void *)(v1 + 16));
}

uint64_t sub_1003493A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconObservation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003493E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconObservation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10034942C()
{
  if (v0[5]) {
    swift_release(v0[6]);
  }
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100349470()
{
  return sub_100346F34(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_100349480()
{
  uint64_t v1 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  uint64_t v6 = v0 + v4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  uint64_t v8 = v6 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_release();
  if (*(void *)(v0 + v5)) {
    swift_release();
  }
  return swift_deallocObject(v0, v5 + 16, v3 | 7);
}

uint64_t sub_100349550()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconObservation(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1003476A4( *(void *)(v0 + 16),  v0 + v2,  *(void *)(v0 + v3),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1003495A4()
{
  if (v0[3]) {
    swift_release(v0[4]);
  }
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1003495D8()
{
  uint64_t v1 = *(void (**)(void))(v0 + 24);
  Transaction.capture()();
  if (v1) {
    v1();
  }
}

uint64_t sub_100349614@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = *v3;
  *a1 = *v3;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_100349674()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B0800);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v0 + v9, v12);
  uint64_t v13 = v0 + v9 + *(int *)(v6 + 20);
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100349758()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009B0800) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for BeaconObservation(0LL) - 8) + 80LL);
  return sub_10034828C(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_1003497BC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003497E0(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A9B78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

Swift::Int sub_100349848()
{
  return Hasher._finalize()();
}

uint64_t sub_10034989C(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD00000000000002ALL, 0x800000010084E230LL);
}

Swift::Int sub_1003498B8(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100349908@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100934710, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100349958(void *a1@<X8>)
{
  *a1 = 0xD00000000000002ALL;
  a1[1] = 0x800000010084E230LL;
}

uint64_t sub_100349BEC(int a1, void *aBlock, void *a3)
{
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v3 + 24) = _Block_copy(aBlock);
  id v5 = a3;
  return swift_task_switch(sub_100349C38, 0LL, 0LL);
}

uint64_t sub_100349C38()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1009A7F60 + dword_1009A7F60);
  uint64_t v1 = (void *)swift_task_alloc(unk_1009A7F64);
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_100349CB0;
  return v3();
}

uint64_t sub_100349CB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 4Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100349D0C, 0LL, 0LL);
}

uint64_t sub_100349D0C()
{
  uint64_t v1 = *(void (***)(void, void))(v0 + 24);

  sub_100022898(0LL, &qword_1009A0C70, &OBJC_CLASS___SPStandaloneBeacon_ptr);
  sub_10014EFD4(&qword_1009A9D28, &qword_1009A0C70, &OBJC_CLASS___SPStandaloneBeacon_ptr);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class))v1)[2](v1, isa);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100349DCC(void (*a1)(void, uint64_t))
{
  unint64_t v2 = sub_1001B25CC();
  uint64_t v3 = swift_allocError(&type metadata for BeaconManagerCommandError, v2, 0LL, 0LL);
  *uint64_t v4 = 0;
  a1(0LL, v3);
  return swift_errorRelease(v3);
}

void sub_100349F18( void *a1, int a2, void *a3, void *aBlock, void (*a5)(uint64_t, unint64_t, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  id v9 = a3;
  id v13 = a1;
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v12 = v11;

  _Block_copy(v8);
  a5(v10, v12, v13, v8);
  _Block_release(v8);
  _Block_release(v8);
  sub_100016F9C(v10, v12);
}

uint64_t sub_100349FC0(void (*a1)(void))
{
  unint64_t v2 = sub_1001B25CC();
  uint64_t v3 = swift_allocError(&type metadata for BeaconManagerCommandError, v2, 0LL, 0LL);
  *uint64_t v4 = 0;
  a1();
  return swift_errorRelease(v3);
}

uint64_t sub_10034A0D8( char *a1, uint64_t a2, uint64_t a3, const void *a4, void (*a5)(char *, uint64_t, void *))
{
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v14 = *sub_100012ED8( &a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  _Block_copy(v13);
  uint64_t v15 = a1;
  a5(v12, v14, v13);
  _Block_release(v13);
  _Block_release(v13);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void sub_10034A284(uint64_t a1, uint64_t a2)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

void sub_10034A658(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a1, (uint64_t)v6, (uint64_t *)&unk_1009A34D0);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    uint64_t v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }

  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v10);
}

uint64_t sub_10034A734(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_10099B2F8 != -1) {
    swift_once(&qword_10099B2F8, sub_100340AA8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2A6B0);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v11;
    *(_DWORD *)uint64_t v10 = 136446210;
    uint64_t v13 = sub_1003F11D4(0xD000000000000035LL, 0x800000010085C8E0LL, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  sub_100012ED8( (void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_100294BBC(a1, a2);
}

void sub_10034AB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

uint64_t sub_10034B1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_10099B788 != -1) {
    swift_once(&qword_10099B788, sub_1006517A0);
  }
  uint64_t v7 = qword_100A2B098;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v10 = UUID.uuidString.getter(v9);
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1000226F4();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "received ignore beacon for %@", 29LL, 2LL, v9);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1004AC0BC();
  sub_100341E5C(a1, a2, 0LL, 0LL);
  return swift_release();
}

uint64_t sub_10034B3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v20 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v4 = qword_100A2B030;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v25 = ObjectType;
  uint64_t v8 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v21 = v3;
  uint64_t v9 = String.init<A>(describing:)(&v25, v8);
  uint64_t v11 = v10;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000226F4();
  *(void *)(v6 + 32) = v9;
  *(void *)(v6 + 40) = v11;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v12;
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = 0xD00000000000001FLL;
  *(void *)(v6 + 80) = 0x800000010085C850LL;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v4, "%{public}@: %{public}@", 22LL, 2LL, v6);
  uint64_t v13 = swift_bridgeObjectRelease();
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v15 = qword_100A2B008;
  uint64_t v16 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v25 = ObjectType;
  uint64_t v17 = String.init<A>(describing:)(&v25, v8);
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = v12;
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v18;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v12;
  *(void *)(v16 + 72) = 0xD00000000000001FLL;
  *(void *)(v16 + 80) = 0x800000010085C850LL;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "%{public}@: %{public}s", 22LL, 2LL, v16);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v21 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v21 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_100293798(a1, a2, a3);
}

uint64_t sub_10034B7D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v4 = qword_100A2B030;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v7 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v8 = String.init<A>(describing:)(&ObjectType, v7);
  uint64_t v10 = v9;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v11 = sub_1000226F4();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v11;
  *(void *)(v6 + 64) = v11;
  *(void *)(v6 + 72) = 0xD000000000000018LL;
  *(void *)(v6 + 80) = 0x800000010085F0D0LL;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "%{public}@: %{public}@", 22LL, 2LL, v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10034BA64(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v9 = qword_100A2B030;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 72) = 0xD00000000000002CLL;
  *(void *)(v11 + 80) = 0x800000010085F070LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}@", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1004AC0BC();
  sub_100341E5C(a1, a2, a3, a4);
  return swift_release();
}

uint64_t sub_10034BCEC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v9 = qword_100A2B030;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 72) = 0xD000000000000028LL;
  *(void *)(v11 + 80) = 0x800000010085F040LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}@", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1004AC0BC();
  sub_100341B84(a1, a2, a3, a4);
  return swift_release();
}

uint64_t sub_10034BFD0(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v9 = qword_100A2B030;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 72) = 0xD00000000000002FLL;
  *(void *)(v11 + 80) = 0x800000010085EA60LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}@", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1004AC0BC();
  sub_100341570(a1, a2, a3, a4);
  return swift_release();
}

uint64_t sub_10034C4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a5;
  uint64_t v7 = a4;
  uint64_t v8 = a2;
  int64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    sub_100033154(0, v10, 0);
    uint64_t result = sub_1006F6728(a3);
    uint64_t v13 = result;
    uint64_t v15 = v14;
    char v17 = v16 & 1;
    while ((v13 & 0x8000000000000000LL) == 0 && v13 < 1LL << *(_BYTE *)(a3 + 32))
    {
      if (*(_DWORD *)(a3 + 36) != (_DWORD)v15) {
        goto LABEL_14;
      }
      id v18 = *(id *)(*(void *)(a3 + 48) + 8 * v13);
      char v19 = sub_1006D32D4((uint64_t)v18);

      unint64_t v21 = _swiftEmptyArrayStorage[2];
      unint64_t v20 = _swiftEmptyArrayStorage[3];
      if (v21 >= v20 >> 1) {
        sub_100033154(v20 > 1, v21 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v21 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v21) = v19;
      uint64_t result = sub_1001FE5FC(v13, v15, v17 & 1, a3);
      uint64_t v13 = result;
      uint64_t v15 = v22;
      char v17 = v23 & 1;
      if (!--v10)
      {
        sub_100086B14(result, v22, v23 & 1);
        uint64_t v7 = a4;
        uint64_t v6 = a5;
        a1 = v26;
        uint64_t v8 = a2;
        uint64_t v5 = v25;
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }

  else
  {
LABEL_11:
    uint64_t v24 = sub_1006F1BA4((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    sub_100012ED8( (void *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    sub_10018AF88(a1, v8, v24, 1, v7, v6);
    return swift_bridgeObjectRelease();
  }

  return result;
}

void sub_10034C854(uint64_t a1, uint64_t a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

void sub_10034CD74(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
  _Block_release(v8);
}

void sub_10034CE28(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = _Block_copy(aBlock);
  id v9 = a1;
  sub_100351CC4(a4, a5);
  _Block_release(v8);
}

void sub_10034D000(uint64_t a1, NSString a2, uint64_t a3)
{
  if (a2) {
    a2 = String._bridgeToObjectiveC()();
  }
  id v4 = a2;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
}

uint64_t sub_10034D1CC( uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t))
{
  uint64_t v11 = sub_100004AEC(a4);
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = a5(0LL);
  __chkstk_darwin(v14);
  char v16 = (char *)&v22 - v15;
  sub_10001581C(a1, (uint64_t)v13, a4);
  if (swift_getEnumCaseMultiPayload(v13, v11) == 1)
  {
    uint64_t v23 = *v13;
    uint64_t v17 = v23;
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_willThrowTypedImpl(&v23, v18, &protocol self-conformance witness table for Error);
    swift_errorRetain(v17);
    a2(0LL, v17);
    swift_errorRelease(v17);
    return swift_errorRelease(v17);
  }

  else
  {
    uint64_t v20 = sub_10002218C((uint64_t)v13, (uint64_t)v16, a5);
    unint64_t v21 = (void *)a6(v20);
    a2(v21, 0LL);

    return sub_100018C68((uint64_t)v16, a5);
  }

void sub_10034D348( void *a1, int a2, void *a3, uint64_t a4, void *aBlock, void (*a6)(uint64_t, unint64_t, uint64_t, void *))
{
  id v10 = _Block_copy(aBlock);
  id v11 = a3;
  id v15 = a1;
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v14 = v13;

  _Block_copy(v10);
  a6(v12, v14, a4, v10);
  _Block_release(v10);
  _Block_release(v10);
  sub_100016F9C(v12, v14);
}

uint64_t sub_10034D3F4(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  return sub_10034D1CC( a1,  a2,  a3,  &qword_1009A7EF0,  type metadata accessor for RawAccessoryMetadata,  (uint64_t (*)(uint64_t))sub_10008B3A8);
}

uint64_t sub_10034D50C(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  return sub_10034D1CC( a1,  a2,  a3,  &qword_1009A7ED8,  type metadata accessor for AccessoryMetadata,  (uint64_t (*)(uint64_t))sub_10008A0A8);
}

uint64_t sub_10034D624(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(0LL);
  }
  swift_errorRetain(a1);
  a3(a1);
  return sub_10006A58C(a1, 1);
}

uint64_t sub_10034D77C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10034D7A0(uint64_t a1, char a2)
{
  return sub_10034D624(a1, a2 & 1, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_10034D7AC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  id v4 = (void *)swift_task_alloc(dword_1009A7ECC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *id v4 = v1;
  v4[1] = sub_100015D58;
  return sub_1002B2634(v2, v3);
}

uint64_t sub_10034D7FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  id v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v4;
  *id v4 = v3;
  v4[1] = sub_100015D58;
  return v6();
}

uint64_t sub_10034D850(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_100015D58;
  return v7();
}

uint64_t sub_10034D8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100015794(a1, &qword_1009A9BF0);
    uint64_t v9 = 7168LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      uint64_t v11 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      uint64_t v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v9 = v16 | 0x1C00LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v17 = swift_allocObject(&unk_100952970, 32LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    uint64_t v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  return swift_task_create(v9, v18, (char *)&type metadata for () + 8, &unk_1009A9D18, v17);
}

void *sub_10034D9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    uint64_t v6 = (void *)(a1 + 32);
    uint64_t v7 = *(void *)(a2 + 256);
    do
    {
      uint64_t v8 = v6[3];
      uint64_t v9 = v6[4];
      uint64_t v10 = sub_100012ED8(v6, v8);
      uint64_t v11 = sub_10054A858((uint64_t)v10, v7, v8, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      uint64_t v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      uint64_t v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
      specialized ContiguousArray._endMutation()(v13);
      v6 += 5;
      --v3;
    }

    while (v3);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void sub_10034DAC0(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v14);
  unsigned __int8 v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for MACAddress(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _Block_copy(a4);
  sub_10001736C(a1, a2);
  MACAddress.init(data:type:)(a1, a2, 0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) == 1)
  {
    sub_100015794((uint64_t)v16, (uint64_t *)&unk_1009AE480);
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2B0B0);
    sub_10001736C(a1, a2);
    uint64_t v22 = sub_10001736C(a1, a2);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = v26;
      int v34 = v11;
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v33 = v25 + 4;
      uint64_t v27 = Data.hexString.getter(a1, a2);
      uint64_t v35 = sub_1003F11D4(v27, v28, &v36);
      uint64_t v11 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v33, v25 + 12);
      swift_bridgeObjectRelease();
      sub_100016F9C(a1, a2);
      sub_100016F9C(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "beaconingIdentifier: invalid MAC address %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
      sub_100016F9C(a1, a2);
      sub_100016F9C(a1, a2);
    }

    uint64_t v30 = type metadata accessor for UUID(0LL);
    uint64_t v31 = *(void *)(v30 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v13, 1LL, 1LL, v30);
    sub_10001581C((uint64_t)v13, (uint64_t)v11, &qword_10099D8A0);
    Class isa = 0LL;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v11, 1LL, v30) != 1)
    {
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
    }

    ((void (**)(void, Class))a4)[2](a4, isa);

    sub_100015794((uint64_t)v13, &qword_10099D8A0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    uint64_t v29 = *sub_100012ED8( (void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    _Block_copy(a4);
    sub_1002C838C((uint64_t)v20, v29, (uint64_t)a4);
    _Block_release(a4);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }

  _Block_release(a4);
}

uint64_t sub_10034DEC4(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v54 = v8;
  __chkstk_darwin(v8);
  uint64_t v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v51 = v10;
  __chkstk_darwin(v10);
  uint64_t v49 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v47 = *(void *)(v12 - 8);
  uint64_t v48 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for MACAddress(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = swift_allocObject(&unk_100952880, 24LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = a4;
  _Block_copy(a4);
  sub_10001736C(a1, a2);
  MACAddress.init(data:type:)(a1, a2, 0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18) == 1)
  {
    uint64_t v46 = v22;
    sub_100015794((uint64_t)v17, (uint64_t *)&unk_1009AE480);
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_10000A720(v23, (uint64_t)qword_100A2B0B0);
    sub_10001736C(a1, a2);
    uint64_t v24 = sub_10001736C(a1, a2);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v29 = Data.hexString.getter(a1, a2);
      uint64_t v55 = (void *)sub_1003F11D4(v29, v30, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, aBlock, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      sub_100016F9C(a1, a2);
      sub_100016F9C(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "fetchFindMyNetworkStatus: invalid MAC address %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      sub_100016F9C(a1, a2);
      sub_100016F9C(a1, a2);
    }

    uint64_t v32 = v46;
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v34 = v47;
    uint64_t v33 = v48;
    (*(void (**)(char *, void, uint64_t))(v47 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v48);
    uint64_t v35 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v33);
    uint64_t v36 = swift_allocObject(&unk_1009528A8, 32LL, 7LL);
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = sub_1002DAFF8;
    *(void *)(v36 + 24) = v32;
    aBlock[4] = (uint64_t)sub_100352B5C;
    void aBlock[5] = v36;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1001C31E8;
    aBlock[3] = (uint64_t)&unk_1009528C0;
    BOOL v37 = _Block_copy(aBlock);
    uint64_t v38 = swift_retain();
    unint64_t v39 = v49;
    static DispatchQoS.unspecified.getter(v38);
    uint64_t v55 = _swiftEmptyArrayStorage;
    uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    unint64_t v42 = sub_100012FF8();
    uint64_t v43 = v52;
    uint64_t v44 = v54;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v41, v42, v54, v40);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v39, v43, v37);
    _Block_release(v37);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v43, v44);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v51);
    swift_release();
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    uint64_t v31 = *sub_100012ED8( (void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    _Block_copy(a4);
    sub_1002C8B54((uint64_t)v21, v31, (uint64_t)a4);
    _Block_release(a4);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }

  return swift_release();
}

uint64_t sub_10034E42C( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t v29 = a3;
  unint64_t v30 = a4;
  uint64_t v10 = type metadata accessor for MACAddress(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = swift_allocObject(&unk_100952830, 24LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a6;
  _Block_copy(a6);
  sub_10001736C(a1, a2);
  MACAddress.init(dataRepresentation:)(a1, a2);
  uint64_t v18 = *sub_100012ED8( (void *)(a5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v28 = type metadata accessor for Transaction(0LL);
  uint64_t v19 = v10;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = (v20 + 40) & ~v20;
  unint64_t v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v23 = (char *)swift_allocObject(&unk_100952858, v22 + 16, v20 | 7);
  *((void *)v23 + 2) = v18;
  *((void *)v23 + 3) = sub_10009C9E4;
  *((void *)v23 + 4) = v17;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v23[v21], v14, v10);
  uint64_t v24 = (uint64_t *)&v23[v22];
  uint64_t v26 = v29;
  unint64_t v25 = v30;
  uint64_t *v24 = v29;
  v24[1] = v25;
  swift_retain();
  swift_retain();
  sub_10001736C(v26, v25);
  static Transaction.asyncTask(name:block:)( "BeaconManagerService.connectUsingMACAndLTK",  42LL,  2LL,  &unk_1009A9CD8,  v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v19);
  return swift_release();
}

uint64_t sub_10034E7E0(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8 = type metadata accessor for MACAddress(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = swift_allocObject(&unk_1009527E0, 24LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a4;
  _Block_copy(a4);
  sub_10001736C(a1, a2);
  MACAddress.init(dataRepresentation:)(a1, a2);
  uint64_t v16 = *sub_100012ED8( (void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  type metadata accessor for Transaction(0LL);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = (v17 + 40) & ~v17;
  uint64_t v19 = (char *)swift_allocObject(&unk_100952808, v18 + v10, v17 | 7);
  *((void *)v19 + 2) = v16;
  *((void *)v19 + 3) = sub_10009C9E4;
  *((void *)v19 + 4) = v15;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v19[v18], v12, v8);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)( "BeaconManagerService.disconnectFromMACAddress",  45LL,  2LL,  &unk_1009A9CD0,  v19);
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  return swift_release();
}

uint64_t sub_10034EB60(uint64_t a1, unint64_t a2, int a3, uint64_t a4, void *a5)
{
  LODWORD(v47) = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v54 = *(void *)(v9 - 8);
  uint64_t v55 = v9;
  __chkstk_darwin(v9);
  uint64_t v53 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v51 = *(void *)(v11 - 8);
  uint64_t v52 = v11;
  __chkstk_darwin(v11);
  uint64_t v50 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v49 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for MACAddress(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  unint64_t v22 = (uint64_t *)((char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v23 = swift_allocObject(&unk_100952768, 24LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = a5;
  _Block_copy(a5);
  sub_10001736C(a1, a2);
  MACAddress.init(data:type:)(a1, a2, 0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19) == 1)
  {
    uint64_t v47 = v23;
    sub_100015794((uint64_t)v18, (uint64_t *)&unk_1009AE480);
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000A720(v24, (uint64_t)qword_100A2B0B0);
    sub_10001736C(a1, a2);
    uint64_t v25 = sub_10001736C(a1, a2);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v30 = Data.hexString.getter(a1, a2);
      uint64_t v56 = (void *)sub_1003F11D4(v30, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, aBlock, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_100016F9C(a1, a2);
      sub_100016F9C(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "setFindMyNetworkStatus: invalid MAC address %s", v28, 0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      sub_100016F9C(a1, a2);
      sub_100016F9C(a1, a2);
    }

    uint64_t v33 = v47;
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v35 = v48;
    uint64_t v34 = v49;
    (*(void (**)(char *, void, uint64_t))(v48 + 104))( v15,  enum case for DispatchQoS.QoSClass.default(_:),  v49);
    uint64_t v36 = (void *)static OS_dispatch_queue.global(qos:)(v15);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v34);
    uint64_t v37 = swift_allocObject(&unk_100952790, 32LL, 7LL);
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = sub_10009C9E4;
    *(void *)(v37 + 24) = v33;
    aBlock[4] = (uint64_t)sub_100352914;
    void aBlock[5] = v37;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1001C31E8;
    aBlock[3] = (uint64_t)&unk_1009527A8;
    uint64_t v38 = _Block_copy(aBlock);
    uint64_t v39 = swift_retain();
    uint64_t v40 = v50;
    static DispatchQoS.unspecified.getter(v39);
    uint64_t v56 = _swiftEmptyArrayStorage;
    uint64_t v41 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v42 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    unint64_t v43 = sub_100012FF8();
    uint64_t v44 = v53;
    uint64_t v45 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v42, v43, v55, v41);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v40, v44, v38);
    _Block_release(v38);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v45);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v40, v52);
    swift_release();
  }

  else
  {
    (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    uint64_t v32 = *sub_100012ED8( (void *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    _Block_copy(a5);
    sub_1002C9080(v22, v47 & 1, v32, a5);
    _Block_release(a5);
    (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(v22, v19);
  }

  return swift_release();
}

void sub_10034F0D4(char a1, uint64_t a2, uint64_t a3)
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v5 = sub_1006A0F10(v38);
  swift_bridgeObjectRelease();
  sub_100024954();
  id v6 = sub_10061EC7C();
  id v7 = [v6 stringForKey:SPSettingsServiceStateKey];

  if (!v7)
  {
    if (qword_10099B428 != -1) {
      swift_once(&qword_10099B428, sub_10041E30C);
    }
    id v7 = (id)qword_100A2A980;
  }

  swift_release();
  if (*(void *)(v5 + 16))
  {
    id v8 = SPDisabledReasonNone;
    char v9 = sub_1000BAD00((uint64_t)v8, v5);

    if ((v9 & 1) == 0) {
      goto LABEL_14;
    }
  }

  uint64_t v10 = SPServiceStateEnabled;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  if (v11 == v14 && v13 == v15)
  {
    swift_bridgeObjectRelease_n(v13, 2LL);
  }

  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
LABEL_14:
      uint64_t v18 = (id *)&SPOwnerDataStateNotAvailable;
      BOOL v19 = (a1 & 1) == 0;
      goto LABEL_15;
    }
  }

  if ((a1 & 1) == 0)
  {
    uint64_t v18 = (id *)&SPOwnerDataStateInitializing;
    goto LABEL_25;
  }

  uint64_t v20 = sub_1004F730C();
  if ((*(_BYTE *)(v20 + 184) & 1) != 0
    || *(void *)(v20 + 136) && (swift_retain(), char v21 = sub_1001C1E00(), swift_release(), (v21 & 1) != 0))
  {
    swift_release();
    uint64_t v18 = (id *)&SPOwnerDataStateUpdating;
    goto LABEL_25;
  }

  char v37 = sub_100171780();
  swift_release();
  uint64_t v18 = (id *)&SPOwnerDataStateUpdating;
  BOOL v19 = (v37 & 1) == 0;
LABEL_15:
  if (!v19) {
    uint64_t v18 = (id *)&SPOwnerDataStateUpToDate;
  }
LABEL_25:
  id v22 = *v18;
  id v23 = v7;
  sub_1006F124C(v5);
  swift_bridgeObjectRelease();
  id v24 = objc_allocWithZone(&OBJC_CLASS___SPOwnerSessionState);
  type metadata accessor for SPDisabledReason(0LL);
  sub_100007864( (unint64_t *)&unk_1009A9CB0,  (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason,  (uint64_t)&unk_1007E0894);
  id v25 = v22;
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v27 = [v24 initWithServiceState:v23 disabledReasons:isa ownerDataState:v25];

  uint64_t v29 = static os_log_type_t.default.getter(v28);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v30 = qword_100A2B008;
  uint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v32 = swift_allocObject(v31, 72LL, 7LL);
  *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  id v33 = [v27 description];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  uint64_t v36 = v35;

  *(void *)(v32 + 56) = &type metadata for String;
  *(void *)(v32 + 64) = sub_1000226F4();
  *(void *)(v32 + 32) = v34;
  *(void *)(v32 + 40) = v36;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "ownerSessionState(completion:) %@", 33LL, 2LL, v32);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, id))(a3 + 16))(a3, v27);
}

void sub_10034F4F4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v6);
  id v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001736C(a1, a2);
  MACAddress.init(data:type:)(a1, a2, 1LL);
  uint64_t v9 = type metadata accessor for MACAddress(0LL);
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  uint64_t v11 = sub_100015794((uint64_t)v8, (uint64_t *)&unk_1009AE480);
  if (v10 == 1)
  {
    uint64_t v12 = static os_log_type_t.error.getter(v11);
    if (qword_10099B6E0 != -1) {
      swift_once(&qword_10099B6E0, sub_100650FD0);
    }
    uint64_t v13 = qword_100A2AFE0;
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v16 = Data.hexString.getter(a1, a2);
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_1000226F4();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Unable to parse MAC address %@", 30LL, 2LL, v15);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v20 = v19;
    v29[0] = 5LL;
    unint64_t v21 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v22 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&v31, v29, v21, v20, v22);
    id v23 = (void *)v31;
    id v24 = (void *)_convertErrorToNSError(_:)(v31);
    (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v24);
  }

  else
  {
    uint64_t v31 = 2LL;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    char v34 = 11;
    sub_10001581C((uint64_t)&v31, (uint64_t)v29, (uint64_t *)&unk_1009A9C90);
    if (v30 == 255)
    {
      uint64_t v28 = 0LL;
      uint64_t v26 = 0LL;
    }

    else
    {
      unint64_t v25 = sub_100122CD4();
      uint64_t v26 = swift_allocError(&type metadata for CentralManager.Error, v25, 0LL, 0LL);
      sub_100254338((uint64_t)v29, v27);
      uint64_t v28 = (void *)_convertErrorToNSError(_:)(v26);
    }

    (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v28);

    swift_errorRelease(v26);
    sub_100015794((uint64_t)&v31, (uint64_t *)&unk_1009A9C90);
  }

void sub_10034F7B0(char **p_name, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v7 = sub_100012ED8(v19, v19[3]);
  if ((unint64_t)a2 >> 62)
  {
LABEL_18:
    if (a2 < 0) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    _Block_copy(a4);
    swift_bridgeObjectRetain(a2);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    _Block_copy(a4);
  }

  if (v8)
  {
    sub_100032A84(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
    {
      __break(1u);
LABEL_23:
      _Block_release(a4);
      _Block_release(a4);
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    }

    else
    {
      uint64_t v17 = v7;
      uint64_t v18 = p_name;
      uint64_t v9 = 0LL;
      p_name = &stru_100995FF8.name;
      while (1)
      {
        if (v8 == v9)
        {
          __break(1u);
          goto LABEL_18;
        }

        if ((a2 & 0xC000000000000001LL) != 0) {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a2);
        }
        else {
          id v10 = *(id *)(a2 + 8 * v9 + 32);
        }
        uint64_t v11 = v10;
        unint64_t v12 = (unint64_t)[v10 integerValue];
        if ((v12 & 0x8000000000000000LL) != 0) {
          goto LABEL_23;
        }
        char v13 = v12;
        if (v12 >= 0x100) {
          break;
        }

        uint64_t v7 = (uint64_t *)_swiftEmptyArrayStorage[2];
        unint64_t v14 = _swiftEmptyArrayStorage[3];
        ++v9;
        _swiftEmptyArrayStorage[2] = (char *)v7 + 1;
        *((_BYTE *)&_swiftEmptyArrayStorage[4] + (void)v7) = v13;
        if (v8 == v9)
        {
          uint64_t v7 = v17;
          p_name = v18;
          goto LABEL_16;
        }
      }

      _Block_release(a4);
      _Block_release(a4);
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    }

    __break(1u);
  }

  else
  {
LABEL_16:
    uint64_t v15 = *v7;
    _Block_copy(a4);
    sub_1001B0990((uint64_t)p_name, (uint64_t)_swiftEmptyArrayStorage, v15, (uint64_t)a4);
    _Block_release(a4);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
    _Block_release(a4);
  }

void sub_10034FA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v5 = qword_100A2B008;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v8 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v9 = String.init<A>(describing:)(&ObjectType, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000226F4();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v12;
  *(void *)(v7 + 64) = v12;
  *(void *)(v7 + 72) = 0xD00000000000001ELL;
  *(void *)(v7 + 80) = 0x800000010085F230LL;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%{public}@:%{public}@", 21LL, 2LL, v7);
  swift_bridgeObjectRelease();
  uint64_t v13 = *sub_100012ED8( (void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  swift_retain();
  unint64_t v14 = sub_10034D9F0((uint64_t)_swiftEmptyArrayStorage, v13);
  swift_release();
  sub_1006F16D4((uint64_t)v14);
  swift_bridgeObjectRelease();
  sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
  sub_10014EFD4((unint64_t *)&qword_1009A4A10, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
  swift_bridgeObjectRelease();
}

uint64_t sub_10034FC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_10099B788 != -1) {
    swift_once(&qword_10099B788, sub_1006517A0);
  }
  uint64_t v7 = os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  qword_100A2B098,  "detected unauthorized tracking",  30LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v9 = qword_100A2B030;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v12 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v13 = String.init<A>(describing:)(&ObjectType, v12);
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 72) = 0xD000000000000039LL;
  *(void *)(v11 + 80) = 0x800000010085E7B0LL;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}@", 22LL, 2LL, v11);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v17 = (void **)sub_1004AC0BC();
  sub_100345134(a1, v17, a3);
  return swift_release();
}

uint64_t sub_10034FE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B788 != -1) {
    swift_once(&qword_10099B788, sub_1006517A0);
  }
  uint64_t v5 = os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_100A2B098,  "update unauthorized tracking",  28LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v7 = qword_100A2B030;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v10 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v11 = String.init<A>(describing:)(&ObjectType, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v14 = sub_1000226F4();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v14;
  *(void *)(v9 + 64) = v14;
  *(void *)(v9 + 72) = 0xD000000000000039LL;
  *(void *)(v9 + 80) = 0x800000010085E770LL;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}@", 22LL, 2LL, v9);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v15 = (void **)sub_1004AC0BC();
  sub_1003453D4(v15, a2);
  return swift_release();
}

uint64_t sub_10034FFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B788 != -1) {
    swift_once(&qword_10099B788, sub_1006517A0);
  }
  uint64_t v5 = os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_100A2B098,  "withdrawn unauthorized tracking",  31LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v7 = qword_100A2B030;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v10 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v11 = String.init<A>(describing:)(&ObjectType, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v14 = sub_1000226F4();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v14;
  *(void *)(v9 + 64) = v14;
  *(void *)(v9 + 72) = 0xD00000000000003BLL;
  *(void *)(v9 + 80) = 0x800000010085E730LL;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}@", 22LL, 2LL, v9);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v15 = (void **)sub_1004AC0BC();
  sub_100343670(v15, a2);
  return swift_release();
}

uint64_t sub_100350198(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v25 = a1;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = static os_log_type_t.default.getter(v9);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v13 = qword_100A2B030;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 112LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v16 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v17 = String.init<A>(describing:)(&ObjectType, v16);
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v20 = sub_1000226F4();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 40) = v19;
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v20;
  *(void *)(v15 + 64) = v20;
  *(void *)(v15 + 72) = 0xD000000000000038LL;
  *(void *)(v15 + 80) = 0x800000010085F130LL;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%{public}@: %{public}@", 22LL, 2LL, v15);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1004AC0BC();
  sub_10034025C(v25, (uint64_t)v11);
  swift_release();
  sub_10001581C((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_10099D720);
  uint64_t v21 = type metadata accessor for Date(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1LL, v21) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v21);
  }

  (*(void (**)(uint64_t, Class, void))(a3 + 16))(a3, isa, 0LL);

  return sub_100015794((uint64_t)v11, (uint64_t *)&unk_10099D720);
}

uint64_t sub_1003503EC(void *a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v5 = qword_100A2B030;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v8 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v9 = String.init<A>(describing:)(&ObjectType, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000226F4();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v12;
  *(void *)(v7 + 64) = v12;
  *(void *)(v7 + 72) = 0xD000000000000034LL;
  *(void *)(v7 + 80) = 0x800000010085F0F0LL;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%{public}@: %{public}@", 22LL, 2LL, v7);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1004AC0BC();
  sub_1003431AC(a1);
  return swift_release();
}

uint64_t sub_100350568(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v23 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = (uint64_t)a3;
  uint64_t v9 = _Block_copy(a3);
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v11 = qword_100A2B030;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v14 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v15 = String.init<A>(describing:)(&ObjectType, v14);
  uint64_t v17 = v16;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v18 = sub_1000226F4();
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + 40) = v17;
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v18;
  *(void *)(v13 + 64) = v18;
  *(void *)(v13 + 72) = 0xD00000000000002DLL;
  *(void *)(v13 + 80) = 0x800000010085F0A0LL;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "%{public}@: %{public}@", 22LL, 2LL, v13);
  uint64_t v19 = swift_bridgeObjectRelease();
  UUID.init()(v19);
  unint64_t v20 = sub_100012ED8( (void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_10019E7C0((uint64_t)v8, v23, 2LL, *v20, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100350730(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _Block_copy(a3);
  id v10 = [a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  sub_100504C28((uint64_t)v9, (uint64_t)v22);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10001581C((uint64_t)v22, (uint64_t)&v19, (uint64_t *)&unk_1009A9C40);
  if (v20)
  {
    sub_100012EC0(&v19, (uint64_t)v21);
    uint64_t v11 = *sub_100012ED8( (void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    _Block_copy(a3);
    sub_1001AE25C((uint64_t)v21, v11, a3);
    _Block_release(a3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
  }

  else
  {
    sub_100015794((uint64_t)&v19, (uint64_t *)&unk_1009A9C40);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v13 = v12;
    *(void *)&__int128 v19 = 2LL;
    unint64_t v14 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v15 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(v21, &v19, v14, v13, v15);
    uint64_t v16 = (void *)v21[0];
    uint64_t v17 = (void *)_convertErrorToNSError(_:)(v21[0]);
    ((void (**)(void, void *))a3)[2](a3, v17);
  }

  sub_100015794((uint64_t)v22, (uint64_t *)&unk_1009A9C40);
  _Block_release(a3);
}

void sub_100350930(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = a2;
  _Block_copy(a3);
  id v17 = [a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

  sub_100504F30((uint64_t)v9, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A9C30);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v19 = v18;
    uint64_t v27 = 2LL;
    unint64_t v20 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v21 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&v28, &v27, v20, v19, v21);
    uint64_t v22 = v28;
    uint64_t v23 = (void *)_convertErrorToNSError(_:)(v28);
    ((void (**)(void, void *))a3)[2](a3, v23);
  }

  else
  {
    sub_10002218C((uint64_t)v12, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
    uint64_t v24 = *sub_100012ED8( (void *)(v26 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v26 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    _Block_copy(a3);
    sub_1001AE600((uint64_t)v16, v24, a3);
    _Block_release(a3);
    sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  }

  _Block_release(a3);
}

void sub_100350BA4(void *a1, char *a2, const void *a3)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v153 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v158 = *(void *)(v9 - 8);
  uint64_t v159 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v154 = (char *)&v153 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v153 = (char *)&v153 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v155 = (char *)&v153 - v15;
  __chkstk_darwin(v14);
  __int128 v156 = (char *)&v153 - v16;
  uint64_t v160 = swift_allocObject(&unk_1009523D0, 24LL, 7LL);
  *(void *)(v160 + swift_weakDestroy(v0 + 16) = a3;
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  __int128 v161 = a3;
  id v17 = _Block_copy(a3);
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v19 = qword_100A2B030;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v21 = swift_allocObject(v20, 152LL, 7LL);
  *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  __int128 v157 = a2;
  __int128 aBlock = (void **)swift_getObjectType(a2);
  uint64_t v22 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v23 = String.init<A>(describing:)(&aBlock, v22);
  uint64_t v25 = v24;
  *(void *)(v21 + 56) = &type metadata for String;
  unint64_t v26 = sub_1000226F4();
  *(void *)(v21 + 32) = v23;
  *(void *)(v21 + 40) = v25;
  *(void *)(v21 + 96) = &type metadata for String;
  *(void *)(v21 + 104) = v26;
  *(void *)(v21 + 64) = v26;
  *(void *)(v21 + 72) = 0xD000000000000016LL;
  *(void *)(v21 + 80) = 0x800000010085EFA0LL;
  __int128 aBlock = (void **)[a1 type];
  uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  *(void *)(v21 + 136) = &type metadata for String;
  *(void *)(v21 + 144) = v26;
  *(void *)(v21 + 112) = v27;
  *(void *)(v21 + 120) = v28;
  os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  v19,  "%{public}@: %{public}@ - received command type - %{public}@",  59LL,  2LL,  v21);
  swift_bridgeObjectRelease();
  switch((unint64_t)[a1 type])
  {
    case 0uLL:
      sub_100012ED8( &v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
      uint64_t v36 = v158;
      uint64_t v37 = *(unsigned __int8 *)(v158 + 80);
      uint64_t v38 = (v37 + 32) & ~v37;
      uint64_t v39 = swift_allocObject(v35, v38 + *(void *)(v158 + 72), v37 | 7);
      *(_OWORD *)(v39 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      id v40 = [a1 beaconIdentifier];
      uint64_t v41 = v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

      (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v39 + v38, v41, v159);
      uint64_t v42 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v8, 1LL, 1LL, v42);
      uint64_t v43 = swift_allocObject(&unk_100952498, 32LL, 7LL);
      uint64_t v44 = v160;
      *(void *)(v43 + swift_weakDestroy(v0 + 16) = sub_10009C9E4;
      *(void *)(v43 + 24) = v44;
      swift_retain();
      sub_10018AF88(v39, (uint64_t)v8, (uint64_t)&_swiftEmptySetSingleton, 1, (uint64_t)sub_10020CE78, v43);
      swift_bridgeObjectRelease();
      swift_release();
      sub_100015794((uint64_t)v8, (uint64_t *)&unk_10099D720);
      goto LABEL_27;
    case 1uLL:
      sub_100012ED8( &v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      id v45 = [a1 identifier];
      uint64_t v46 = (uint64_t)v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);

      id v47 = [a1 beaconIdentifier];
      uint64_t v48 = (uint64_t)v155;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v47);

      sub_1001A2B24(v46, v48, (uint64_t)sub_10009C9E4, v160);
      goto LABEL_26;
    case 2uLL:
      sub_100012ED8( &v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      id v49 = [a1 identifier];
      uint64_t v46 = (uint64_t)v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

      id v50 = [a1 beaconIdentifier];
      uint64_t v48 = (uint64_t)v155;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v50);

      sub_1001A3248(v46, v48, (uint64_t)sub_10009C9E4, v160);
      goto LABEL_26;
    case 3uLL:
      uint64_t v51 = sub_100012ED8( &v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      id v52 = [a1 identifier];
      uint64_t v53 = (uint64_t)v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v52);

      id v54 = [a1 beaconIdentifier];
      uint64_t v55 = (uint64_t)v155;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v54);

      id v56 = [a1 playSoundContext];
      uint64_t v57 = *v51;
      char v34 = v161;
      _Block_copy(v161);
      sub_10019E7C0(v53, v55, (uint64_t)v56, v57, (uint64_t)v34);
      uint64_t v58 = v159;
      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v158 + 8);
      v59(v55, v159);
      v59(v53, v58);
      goto LABEL_10;
    case 4uLL:
      sub_100012ED8( &v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      id v61 = [a1 identifier];
      uint64_t v46 = (uint64_t)v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v61);

      id v62 = [a1 beaconIdentifier];
      uint64_t v48 = (uint64_t)v155;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v62);

      sub_10019F9E4(v46, v48, (uint64_t)sub_10009C9E4, v160);
      goto LABEL_26;
    case 5uLL:
      sub_1003525CC( (uint64_t)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  (uint64_t)&aBlock);
      uint64_t v63 = sub_100012ED8(&aBlock, (uint64_t)v165);
      id v64 = [a1 beaconIdentifier];
      uint64_t v65 = (uint64_t)v153;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v64);

      id v66 = [a1 lostModeMessage];
      if (v66)
      {
        uint64_t v67 = v66;
        uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        uint64_t v70 = v69;
      }

      else
      {
        uint64_t v68 = 0LL;
        uint64_t v70 = 0LL;
      }

      id v128 = [a1 lostModePhoneNumber];
      if (v128)
      {
        uint64_t v129 = v128;
        uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
        uint64_t v132 = v131;
      }

      else
      {
        uint64_t v130 = 0LL;
        uint64_t v132 = 0LL;
      }

      id v140 = [a1 lostModeEmail];
      if (v140)
      {
        id v141 = v140;
        uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
        uint64_t v144 = v143;
      }

      else
      {
        uint64_t v142 = 0LL;
        uint64_t v144 = 0LL;
      }

      uint64_t v150 = *v63;
      uint64_t v151 = v161;
      _Block_copy(v161);
      sub_1001B015C(v65, 1, v68, v70, v130, v132, v142, v144, v150, v151);
      goto LABEL_47;
    case 6uLL:
      sub_1003525CC( (uint64_t)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  (uint64_t)&aBlock);
      uint64_t v71 = sub_100012ED8(&aBlock, (uint64_t)v165);
      id v72 = [a1 beaconIdentifier];
      uint64_t v65 = (uint64_t)v154;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v72);

      id v73 = [a1 lostModeMessage];
      if (v73)
      {
        __int128 v74 = v73;
        uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
        uint64_t v77 = v76;
      }

      else
      {
        uint64_t v75 = 0LL;
        uint64_t v77 = 0LL;
      }

      id v133 = [a1 lostModePhoneNumber];
      if (v133)
      {
        int v134 = v133;
        uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
        uint64_t v137 = v136;
      }

      else
      {
        uint64_t v135 = 0LL;
        uint64_t v137 = 0LL;
      }

      id v145 = [a1 lostModeEmail];
      if (v145)
      {
        uint64_t v146 = v145;
        uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
        uint64_t v149 = v148;
      }

      else
      {
        uint64_t v147 = 0LL;
        uint64_t v149 = 0LL;
      }

      uint64_t v152 = *v71;
      uint64_t v151 = v161;
      _Block_copy(v161);
      sub_1001B015C(v65, 0, v75, v77, v135, v137, v147, v149, v152, v151);
LABEL_47:
      _Block_release(v151);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v65, v159);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      swift_release();
      _Block_release(v151);
      _Block_release(v151);
      char v60 = v151;
      goto LABEL_29;
    case 7uLL:
      uint64_t v78 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
      uint64_t v79 = v158;
      uint64_t v80 = *(unsigned __int8 *)(v158 + 80);
      uint64_t v81 = (v80 + 32) & ~v80;
      uint64_t v82 = swift_allocObject(v78, v81 + *(void *)(v158 + 72), v80 | 7);
      *(_OWORD *)(v82 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v83 = v82 + v81;
      id v84 = [a1 beaconIdentifier];
      uint64_t v85 = v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v84);

      (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v83, v85, v159);
      v86.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v87 = swift_allocObject(&unk_100952448, 32LL, 7LL);
      uint64_t v88 = v160;
      *(void *)(v87 + swift_weakDestroy(v0 + 16) = sub_10009C9E4;
      *(void *)(v87 + 24) = v88;
      __int128 v166 = sub_100352638;
      uint64_t v167 = v87;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v163 = 1107296256LL;
      __int128 v164 = sub_10000AFD0;
      __int128 v165 = &unk_100952460;
      uint64_t v89 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v157 enableSeparationMonitoringForBeacons:v86.super.isa completion:v89];
      goto LABEL_18;
    case 8uLL:
      uint64_t v90 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
      uint64_t v91 = v158;
      uint64_t v92 = *(unsigned __int8 *)(v158 + 80);
      uint64_t v93 = (v92 + 32) & ~v92;
      uint64_t v94 = swift_allocObject(v90, v93 + *(void *)(v158 + 72), v92 | 7);
      *(_OWORD *)(v94 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v95 = v94 + v93;
      id v96 = [a1 beaconIdentifier];
      uint64_t v97 = v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v96);

      (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v95, v97, v159);
      v86.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v98 = swift_allocObject(&unk_1009523F8, 32LL, 7LL);
      uint64_t v99 = v160;
      *(void *)(v98 + swift_weakDestroy(v0 + 16) = sub_10009C9E4;
      *(void *)(v98 + 24) = v99;
      __int128 v166 = sub_100352EAC;
      uint64_t v167 = v98;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v163 = 1107296256LL;
      __int128 v164 = sub_10000AFD0;
      __int128 v165 = &unk_100952410;
      uint64_t v89 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v157 disableSeparationMonitoringForBeacons:v86.super.isa completion:v89];
LABEL_18:
      _Block_release(v89);
      swift_release();

      goto LABEL_28;
    case 9uLL:
      sub_100012ED8( &v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      id v100 = [a1 identifier];
      uint64_t v46 = (uint64_t)v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v100);

      id v101 = [a1 beaconIdentifier];
      uint64_t v48 = (uint64_t)v155;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v101);

      sub_1001A1AB0(v46, v48, (uint64_t)sub_10009C9E4, v160);
      goto LABEL_26;
    case 0xAuLL:
      sub_100012ED8( &v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v157[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      id v102 = [a1 beaconIdentifier];
      uint64_t v103 = (uint64_t)v156;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v102);

      sub_1001A0414(v103, (uint64_t)sub_10009C9E4, v160);
      (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v103, v159);
      goto LABEL_27;
    case 0xBuLL:
      id v104 = [a1 obfuscatedIdentifier];
      if (v104)
      {
        uint64_t v105 = v104;
        uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        uint64_t v108 = v107;

        uint64_t v110 = static os_log_type_t.default.getter(v109);
        uint64_t v111 = qword_100A2B030;
        uint64_t v112 = swift_allocObject(v20, 72LL, 7LL);
        *(_OWORD *)(v112 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        *(void *)(v112 + 56) = &type metadata for String;
        *(void *)(v112 + 64) = v26;
        *(void *)(v112 + 32) = v106;
        *(void *)(v112 + 40) = v108;
        *(void *)&double v113 = swift_bridgeObjectRetain(v108).n128_u64[0];
        os_log(_:dso:log:_:_:)( v110,  &_mh_execute_header,  v111,  "#Durian: Command setObfuscated identifier: %@",  45LL,  2LL,  v112,  v113);
        swift_bridgeObjectRelease();
        unint64_t v114 = sub_10014A2C0();
        uint64_t v115 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v114, 0LL, 0LL);
        *uint64_t v116 = 1;
        unint64_t v117 = (void *)_convertErrorToNSError(_:)(v115);
        uint64_t v118 = v161;
        (*((void (**)(const void *, void *))v161 + 2))(v161, v117);

        swift_errorRelease(v115);
        swift_release();
        swift_bridgeObjectRelease();
        _Block_release(v118);
        _Block_release(v118);
        char v60 = v118;
      }

      else
      {
        unint64_t v138 = sub_100352588();
        uint64_t v30 = swift_allocError(&type metadata for BeaconManagerTrampoline.BeaconManagerTrampolineError, v138, 0LL, 0LL);
        uint64_t v31 = v30;
        *id v139 = 0;
LABEL_5:
        __int128 v33 = (void *)_convertErrorToNSError(_:)(v30);
        char v34 = v161;
        (*((void (**)(const void *, void *))v161 + 2))(v161, v33);

        swift_errorRelease(v31);
LABEL_10:
        swift_release();
        _Block_release(v34);
        _Block_release(v34);
        char v60 = v34;
      }

uint64_t sub_100351CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_10099B738 != -1) {
    swift_once(&qword_10099B738, sub_1006513B0);
  }
  uint64_t v7 = qword_100A2B048;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v10 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v11 = String.init<A>(describing:)(&ObjectType, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v14 = sub_1000226F4();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v14;
  *(void *)(v9 + 64) = v14;
  *(void *)(v9 + 72) = a1;
  *(void *)(v9 + 80) = a2;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}@", 22LL, 2LL, v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100351DE4(uint64_t a1, unint64_t a2, int a3, const void *a4)
{
  int v28 = a3;
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  uint64_t v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for MACAddress(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  unint64_t v14 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v13);
  uint64_t v16 = &v27[-v15];
  uint64_t v17 = swift_allocObject(&unk_1009522E0, 24LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a4;
  _Block_copy(a4);
  sub_10001736C(a1, a2);
  MACAddress.init(dataRepresentation:)(a1, a2);
  uint64_t v18 = swift_allocObject(&unk_100952308, 32LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = sub_100352EA4;
  *(void *)(v18 + 24) = v17;
  uint64_t v19 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v9, 1LL, 1LL, v19);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v14, v16, v10);
  uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = (v20 + 33) & ~v20;
  unint64_t v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v23 = swift_allocObject(&unk_100952330, v22 + 16, v20 | 7);
  char v24 = v28 & 1;
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v23 + 24) = 0LL;
  *(_BYTE *)(v23 + 32) = v24;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(v23 + v21, v14, v10);
  uint64_t v25 = (uint64_t (**)(uint64_t))(v23 + v22);
  *uint64_t v25 = sub_1003523BC;
  v25[1] = (uint64_t (*)(uint64_t))v18;
  swift_retain();
  swift_retain();
  sub_1003EDB00((uint64_t)v9, (uint64_t)&unk_1009A9C00, v23);
  swift_release();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v16, v10);
  return swift_release();
}

uint64_t sub_100352058(uint64_t a1, unint64_t a2, int a3, const void *a4)
{
  int v28 = a3;
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  uint64_t v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for MACAddress(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  unint64_t v14 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v13);
  uint64_t v16 = &v27[-v15];
  uint64_t v17 = swift_allocObject(&unk_100952268, 24LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a4;
  _Block_copy(a4);
  sub_10001736C(a1, a2);
  MACAddress.init(dataRepresentation:)(a1, a2);
  uint64_t v18 = swift_allocObject(&unk_100952290, 32LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = sub_100352EA4;
  *(void *)(v18 + 24) = v17;
  uint64_t v19 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v9, 1LL, 1LL, v19);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v14, v16, v10);
  uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = (v20 + 33) & ~v20;
  unint64_t v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v23 = swift_allocObject(&unk_1009522B8, v22 + 16, v20 | 7);
  char v24 = v28 & 1;
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v23 + 24) = 0LL;
  *(_BYTE *)(v23 + 32) = v24;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(v23 + v21, v14, v10);
  uint64_t v25 = (uint64_t (**)(uint64_t))(v23 + v22);
  *uint64_t v25 = sub_1003522CC;
  v25[1] = (uint64_t (*)(uint64_t))v18;
  swift_retain();
  swift_retain();
  sub_1003EDB00((uint64_t)v9, (uint64_t)&unk_1009A9BF8, v23);
  swift_release();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v16, v10);
  return swift_release();
}

uint64_t sub_1003522CC(uint64_t a1)
{
  return sub_10034D1CC( a1,  *(void (**)(void *, uint64_t))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A7ED8,  type metadata accessor for AccessoryMetadata,  (uint64_t (*)(uint64_t))sub_10008A0A8);
}

uint64_t sub_100352300(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MACAddress(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 33LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  char v8 = *(_BYTE *)(v1 + 32);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc(dword_1009A7F0C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_100015D58;
  return sub_1002B206C(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1003523BC(uint64_t a1)
{
  return sub_10034D1CC( a1,  *(void (**)(void *, uint64_t))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A7EF0,  type metadata accessor for RawAccessoryMetadata,  (uint64_t (*)(uint64_t))sub_10008B3A8);
}

uint64_t sub_1003523F0()
{
  uint64_t v1 = type metadata accessor for MACAddress(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 33) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100352484(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MACAddress(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 33LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  char v8 = *(_BYTE *)(v1 + 32);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc(dword_1009A7F14);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_100015D58;
  return sub_1002B1F3C(a1, v6, v7, v8, v9, v11, v12);
}

void sub_100352540(uint64_t a1, void *a2)
{
}

uint64_t sub_100352548()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10035256C(uint64_t a1)
{
  return sub_1001A4344( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(void, void))(v1 + 32),  *(void *)(v1 + 40));
}

unint64_t sub_100352588()
{
  unint64_t result = qword_1009A9C18;
  if (!qword_1009A9C18)
  {
    unint64_t result = swift_getWitnessTable( &unk_1008123D8,  &type metadata for BeaconManagerTrampoline.BeaconManagerTrampolineError);
    atomic_store(result, (unint64_t *)&qword_1009A9C18);
  }

  return result;
}

uint64_t sub_1003525CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  __int128 v4 = *(_OWORD *)(a1 + 48);
  __int128 v5 = *(_OWORD *)(a1 + 64);
  __int128 v6 = *(_OWORD *)(a1 + 80);
  __int128 v7 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 96) = v7;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100352620(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100352630(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100352638(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

void sub_10035265C(uint64_t a1)
{
}

uint64_t sub_100352684(uint64_t a1)
{
  return sub_100199E20( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(void *))(v1 + 32),  *(void *)(v1 + 40));
}

void sub_1003526A0(uint64_t a1, uint64_t a2)
{
}

void sub_1003526B8(uint64_t a1)
{
}

void sub_1003526C0(uint64_t a1)
{
}

uint64_t sub_1003526E8()
{
  return sub_100664004(*(void *)(v0 + 16));
}

uint64_t sub_1003526F0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(void *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v10);
}

uint64_t sub_1003527D8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = (uint64_t)v1 + v5;
  uint64_t v13 = *(void *)((char *)v1 + v6);
  uint64_t v14 = (uint64_t)v1 + v8;
  uint64_t v15 = *(void *)((char *)v1 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v16 = (void *)swift_task_alloc(dword_1009A4A24);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v16;
  void *v16 = v2;
  v16[1] = sub_100015D58;
  return sub_1001A3BA4(a1, v9, v10, v11, v12, v13, v14, v15);
}

void sub_1003528D8(uint64_t a1, uint64_t a2)
{
}

void sub_1003528E0(uint64_t a1)
{
}

void sub_1003528E8(uint64_t a1)
{
}

uint64_t sub_1003528F0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100352914()
{
  return sub_100349FC0(*(void (**)(void))(v0 + 16));
}

uint64_t sub_10035291C()
{
  uint64_t v1 = type metadata accessor for MACAddress(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100352998()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MACAddress(0LL) - 8) + 80LL);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((v2 + 40) & ~v2);
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A7F54);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_1000159BC;
  return sub_10029036C(v3, v4, v5, v6);
}

uint64_t sub_100352A18()
{
  uint64_t v1 = type metadata accessor for MACAddress(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100016F9C(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100352AB4()
{
  uint64_t v2 = *(void *)(type metadata accessor for MACAddress(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = (uint64_t)v0 + v3;
  unint64_t v8 = (void *)((char *)v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = (void *)swift_task_alloc(dword_1009A7F5C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v11;
  *uint64_t v11 = v1;
  v11[1] = sub_100015D58;
  return sub_10028FE38(v4, v5, v6, v7, v9, v10);
}

uint64_t sub_100352B5C()
{
  return sub_100349DCC(*(void (**)(void, uint64_t))(v0 + 16));
}

uint64_t sub_100352B64()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100352B98()
{
  uint64_t v2 = v0[2];
  unint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A9CE4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100015D58;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1009A9CE0 + dword_1009A9CE0))(v2, v3, v4);
}

uint64_t sub_100352C08()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A9CF4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100015D58;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1009A9CF0 + dword_1009A9CF0))(v2, v3, v4);
}

uint64_t sub_100352C84(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A9D04);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100015D58;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1009A9D00 + dword_1009A9D00))( a1,  v4,  v5,  v6);
}

uint64_t sub_100352D08(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A9D14);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000159BC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1009A9D10 + dword_1009A9D10))(a1, v4);
}

uint64_t storeEnumTagSinglePayload for OwnerSessionEntitlement(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100352DB8 + 4 * byte_1007FC300[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100352DD8 + 4 * byte_1007FC305[v4]))();
  }
}

_BYTE *sub_100352DB8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100352DD8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100352DE0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100352DE8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100352DF0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100352DF8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OwnerSessionEntitlement()
{
  return &type metadata for OwnerSessionEntitlement;
}

unint64_t sub_100352E18()
{
  unint64_t result = qword_1009A9D38;
  if (!qword_1009A9D38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC3C0, &type metadata for OwnerSessionEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009A9D38);
  }

  return result;
}

unint64_t sub_100352E60()
{
  unint64_t result = qword_1009A9D40;
  if (!qword_1009A9D40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC348, &type metadata for OwnerSessionEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009A9D40);
  }

  return result;
}

void *sub_100352F58()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100650C80((uint64_t)v2);
  uint64_t v3 = type metadata accessor for ConfigurationCoordinator(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  unint64_t result = sub_100024DDC((uint64_t)v2);
  qword_100A2A710 = (uint64_t)result;
  return result;
}

uint64_t sub_100352FD8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A14C8);
  uint64_t v3 = OS_dispatch_queue.sync<A>(execute:)(sub_1000F9588, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.host.setter(v7[2], v7[3]);
  URLComponents.path.setter(v7[0], v7[1]);
  uint64_t v4 = (uint64_t (*)(void *, void))URLComponents.path.modify(v7);
  v5._countAndFlagsBits = 0x6F666E6974752FLL;
  v5._object = (void *)0xE700000000000000LL;
  String.append(_:)(v5);
  return v4(v7, 0LL);
}

uint64_t sub_1003530B4(char *a1, char *a2)
{
  return sub_10030726C(*a1, *a2);
}

Swift::Int sub_1003530C0()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x7354746E657665LL;
  }
  else {
    uint64_t v2 = 0x746E657665LL;
  }
  if (v1) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  else {
    unint64_t v3 = 0xE500000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10035313C(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x7354746E657665LL;
  }
  else {
    uint64_t v2 = 0x746E657665LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  else {
    unint64_t v3 = 0xE500000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100353194(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x7354746E657665LL;
  }
  else {
    uint64_t v3 = 0x746E657665LL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xE500000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10035320C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100934748;
  return sub_1003545BC(v2, a1, a2);
}

void sub_100353218(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x746E657665LL;
  if (*v1) {
    uint64_t v2 = 0x7354746E657665LL;
  }
  unint64_t v3 = 0xE500000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100353254()
{
  if (*v0) {
    return 0x7354746E657665LL;
  }
  else {
    return 0x746E657665LL;
  }
}

uint64_t sub_10035328C@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100934748, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1003532EC(uint64_t a1)
{
  unint64_t v2 = sub_100356E10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100353314(uint64_t a1)
{
  unint64_t v2 = sub_100356E10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10035333C(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A9F30);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100356E10();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for UTInfoPublishRequestBody.State.CodingKeys,  &type metadata for UTInfoPublishRequestBody.State.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v20, v5);
  if (!v2)
  {
    uint64_t v14 = (char *)v3 + *(int *)(type metadata accessor for UTInfoPublishRequestBody.State(0LL) + 20);
    char v19 = 1;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100353490(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003534D0 + 4 * byte_1007FC410[a1]))( 0x6E6F437261435462LL,  0xEE0064657463656ELL);
}

unint64_t sub_1003534D0()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1003534EC()
{
  return 0x74536E6F69746F6DLL;
}

uint64_t sub_10035350C()
{
  return 0x7954656369766564LL;
}

uint64_t sub_100353528()
{
  return 0x496B726F7774656ELL;
}

uint64_t sub_100353544()
{
  return 0x657264644163616DLL;
}

uint64_t sub_100353564()
{
  return 0x6E72657478457369LL;
}

uint64_t sub_100353584(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int v26 = a5;
  uint64_t v24 = a4;
  uint64_t v9 = sub_100004AEC(&qword_1009A9F10);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_100356D44();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys,  &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys,  v15,  v14,  v13);
  LOBYTE(v25[0]) = 0;
  unint64_t v16 = a2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, v25, v9);
  if (!v5)
  {
    uint64_t v17 = v24;
    LOBYTE(v25[0]) = BYTE1(v16);
    char v27 = 1;
    unint64_t v18 = sub_100356D88();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( v25,  &v27,  v9,  &type metadata for UTInfoPublishRequestBody.KnownLocationMode,  v18);
    LOBYTE(v25[0]) = BYTE2(v16);
    char v27 = 2;
    unint64_t v19 = sub_100356DCC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( v25,  &v27,  v9,  &type metadata for UTInfoPublishRequestBody.MotionState,  v19);
    LOBYTE(v25[0]) = BYTE3(v16);
    char v27 = 3;
    unint64_t v20 = sub_1000E62D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v27, v9, &type metadata for Type18Status.DeviceType, v20);
    LOBYTE(v25[0]) = 4;
    char v27 = BYTE5(v16) & 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(BYTE4(v16) | (((v16 >> 40) & 1) << 8), v25, v9);
    v25[0] = a3;
    v25[1] = v17;
    char v27 = 5;
    unint64_t v21 = sub_1000170A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v27, v9, &type metadata for Data, v21);
    LOBYTE(v25[0]) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v25, v9);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1003537F4(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A9ED8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100356BF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for UTInfoPublishRequestBody.Record.CodingKeys,  &type metadata for UTInfoPublishRequestBody.Record.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v20[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v20, v5);
  if (!v2)
  {
    v20[0] = v3[2];
    char v21 = 1;
    uint64_t v14 = sub_100004AEC(&qword_1009A9EE8);
    unint64_t v15 = sub_100356C3C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v5, v14, v15);
    uint64_t v16 = v3[3];
    uint64_t v17 = v3[4];
    LOBYTE(v20[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v20, v5);
    sub_100356CB8((uint64_t)(v3 + 5), (uint64_t)v22);
    sub_100356CB8((uint64_t)v22, (uint64_t)v20);
    char v21 = 3;
    unint64_t v18 = sub_100356D00();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( v20,  &v21,  v5,  &type metadata for UTInfoPublishRequestBody.EventContext,  v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003539A4(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A9EA8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v13 = sub_100356B2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for UTInfoPublishRequestBody.CodingKeys,  &type metadata for UTInfoPublishRequestBody.CodingKeys,  v13,  v11,  v12);
  char v22 = a2;
  char v21 = 0;
  unint64_t v14 = sub_100356B70();
  KeyedEncodingContainer.encode<A>(_:forKey:)( &v22,  &v21,  v7,  &type metadata for UTInfoPublishRequestBody.ClientContext,  v14);
  if (!v3)
  {
    uint64_t v19 = a3;
    char v20 = 1;
    uint64_t v15 = sub_100004AEC(&qword_1009A9EC0);
    uint64_t v16 = sub_1001C8A7C( &qword_1009A9EC8,  &qword_1009A9EC0,  (void (*)(void))sub_100356BB4,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100353B18(void *a1)
{
  return sub_10035333C(a1);
}

uint64_t sub_100353B2C(char *a1, char *a2)
{
  return sub_10030730C(*a1, *a2);
}

Swift::Int sub_100353B38()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  if (v1) {
    uint64_t v2 = 1802661751LL;
  }
  else {
    uint64_t v2 = 1701670760LL;
  }
  String.hash(into:)(v4, v2, 0xE400000000000000LL);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_100353B9C(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 1802661751LL;
  }
  else {
    uint64_t v2 = 1701670760LL;
  }
  String.hash(into:)(a1, v2, 0xE400000000000000LL);
  return swift_bridgeObjectRelease(0xE400000000000000LL);
}

Swift::Int sub_100353BD4(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2) {
    uint64_t v3 = 1802661751LL;
  }
  else {
    uint64_t v3 = 1701670760LL;
  }
  String.hash(into:)(v5, v3, 0xE400000000000000LL);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_100353C34@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100934798;
  return sub_1003545BC(v2, a1, a2);
}

void sub_100353C40(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701670760LL;
  if (*v1) {
    uint64_t v2 = 1802661751LL;
  }
  *a1 = v2;
  a1[1] = 0xE400000000000000LL;
}

uint64_t sub_100353C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100357910();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100353CB4(char *a1)
{
}

void sub_100353CC0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_100353D0C()
{
  return Hasher._finalize()();
}

void sub_100353D70()
{
  __asm { BR              X10 }

uint64_t sub_100353DAC(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

void sub_100353DFC(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_100353E44()
{
  return Hasher._finalize()();
}

unint64_t sub_100353EA8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1003548C8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100353ED4()
{
  return ((uint64_t (*)(void))((char *)sub_100353F04 + 4 * byte_1007FC423[*v0]))();
}

void sub_100353F04(void *a1@<X8>)
{
  *a1 = 0x676E696C637963LL;
  a1[1] = v1;
}

void sub_100353F1C(void *a1@<X8>)
{
  *a1 = 0x676E6976697264LL;
  a1[1] = v1;
}

void sub_100353F34(void *a1@<X8>)
{
  *a1 = 0x616E6F6974617473LL;
  a1[1] = 0xEA00000000007972LL;
}

uint64_t sub_100353F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100357954();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100353FA0()
{
  return sub_100353490(*v0);
}

uint64_t sub_100353FA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100354910(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100353FCC(uint64_t a1)
{
  unint64_t v2 = sub_100356D44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100353FF4(uint64_t a1)
{
  unint64_t v2 = sub_100356D44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10035401C(void *a1)
{
  return sub_100353584( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40),  *((void *)v1 + 1),  *((void *)v1 + 2),  *((unsigned __int8 *)v1 + 24));
}

uint64_t sub_10035405C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100354084 + 4 * byte_1007FC427[*v0]))( 1953916001LL,  0xE400000000000000LL);
}

uint64_t sub_100354084()
{
  return 0x6574617473LL;
}

uint64_t sub_100354098()
{
  return 0x7069726373627573LL;
}

uint64_t sub_1003540BC()
{
  return 0x787443746E657665LL;
}

uint64_t sub_1003540D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100354C40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003540F8(uint64_t a1)
{
  unint64_t v2 = sub_100356BF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100354120(uint64_t a1)
{
  unint64_t v2 = sub_100356BF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100354148(void *a1)
{
  return sub_1003537F4(a1);
}

uint64_t sub_100354188()
{
  return 0x6572616853736168LL;
}

uint64_t sub_1003541AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6572616853736168LL && a2 == 0xEE00736D65744964LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xEE00736D65744964LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6572616853736168LL, 0xEE00736D65744964LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100354264(uint64_t a1)
{
  unint64_t v2 = sub_1003578CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035428C(uint64_t a1)
{
  unint64_t v2 = sub_1003578CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003542B4(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A9FE0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  unint64_t v10 = sub_1003578CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys,  &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys,  v10,  v8,  v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10035439C()
{
  if (*v0) {
    return 7562345LL;
  }
  else {
    return 0x7443746E65696C63LL;
  }
}

uint64_t sub_1003543D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100354E04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003543F8(uint64_t a1)
{
  unint64_t v2 = sub_100356B2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100354420(uint64_t a1)
{
  unint64_t v2 = sub_100356B2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100354448(void *a1)
{
  return sub_1003539A4(a1, *(_BYTE *)v1, *(void *)(v1 + 8));
}

uint64_t sub_100354464(char *a1, char *a2)
{
  return sub_100307D84(*a1, *a2);
}

Swift::Int sub_100354470()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x657669746361LL;
  }
  else {
    uint64_t v2 = 0x7472656E69LL;
  }
  if (v1) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  else {
    unint64_t v3 = 0xE500000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1003544E8(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x657669746361LL;
  }
  else {
    uint64_t v2 = 0x7472656E69LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  else {
    unint64_t v3 = 0xE500000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10035453C(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x657669746361LL;
  }
  else {
    uint64_t v3 = 0x7472656E69LL;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000LL;
  }
  else {
    unint64_t v4 = 0xE500000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1003545B0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100934868;
  return sub_1003545BC(v2, a1, a2);
}

uint64_t sub_1003545BC@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  v4._countAndFlagsBits = *a2;
  uint64_t v5 = (void *)a2[1];
  v4._object = v5;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

void sub_100354614(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7472656E69LL;
  if (*v1) {
    uint64_t v2 = 0x657669746361LL;
  }
  unint64_t v3 = 0xE500000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10035464C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100357DC4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1003546A8()
{
  uint64_t v1 = 1953916001LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x746C75736572LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7069726373627573LL;
  }
}

uint64_t sub_100354704@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100354EF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100354728(uint64_t a1)
{
  unint64_t v2 = sub_100357844();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100354750(uint64_t a1)
{
  unint64_t v2 = sub_100357844();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100354778@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }

  return result;
}

uint64_t sub_1003547BC()
{
  return 7562345LL;
}

uint64_t sub_1003547CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 7562345 && a2 == 0xE300000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE300000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(7562345LL, 0xE300000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100354850(uint64_t a1)
{
  unint64_t v2 = sub_100356AA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100354878(uint64_t a1)
{
  unint64_t v2 = sub_100356AA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1003548A0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10035528C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_1003548C8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009347E8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100354910(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F437261435462LL && a2 == 0xEE0064657463656ELL)
  {
    unint64_t v5 = 0xEE0064657463656ELL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F437261435462LL, 0xEE0064657463656ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v7 = 0x800000010085F350LL;
    if (a2 == 0x800000010085F350LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010085F350LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0x74536E6F69746F6DLL && a2 == 0xEB00000000657461LL)
  {
    unint64_t v8 = 0xEB00000000657461LL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74536E6F69746F6DLL, 0xEB00000000657461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_19;
  }

  if (a1 == 0x7954656369766564LL && a2 == 0xEA00000000006570LL)
  {
    unint64_t v9 = 0xEA00000000006570LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954656369766564LL, 0xEA00000000006570LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x496B726F7774656ELL && a2 == 0xE900000000000064LL)
  {
    unint64_t v10 = 0xE900000000000064LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496B726F7774656ELL, 0xE900000000000064LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373LL)
  {
    unint64_t v11 = 0xEA00000000007373LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0x6E72657478457369LL && a2 == 0xEA00000000006C61LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006C61LL);
    return 6LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E72657478457369LL, 0xEA00000000006C61LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

uint64_t sub_100354C40(uint64_t a1, unint64_t a2)
{
  if (a1 == 1953916001 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953916001LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6574617473LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v7 = 0xE500000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x7069726373627573LL && a2 == 0xEE0064496E6F6974LL)
  {
    unint64_t v8 = 0xEE0064496E6F6974LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7069726373627573LL, 0xEE0064496E6F6974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x787443746E657665LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x787443746E657665LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_100354E04(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7443746E65696C63LL && a2 == 0xE900000000000078LL)
  {
    unint64_t v5 = 0xE900000000000078LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7443746E65696C63LL, 0xE900000000000078LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 7562345 && a2 == 0xE300000000000000LL)
  {
    swift_bridgeObjectRelease(0xE300000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(7562345LL, 0xE300000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100354EF0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7069726373627573LL && a2 == 0xEE0064496E6F6974LL)
  {
    unint64_t v5 = 0xEE0064496E6F6974LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7069726373627573LL, 0xEE0064496E6F6974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1953916001 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953916001LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x746C75736572LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746C75736572LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100355050@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A9FC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100357844();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for UTInfoPublishResponse.Subscription.CodingKeys,  &type metadata for UTInfoPublishResponse.Subscription.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  BYTE2(v26) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v26 + 2, v5);
  uint64_t v14 = v13;
  uint64_t v24 = v12;
  BYTE1(v26) = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v26 + 1, v5);
  uint64_t v17 = v16;
  uint64_t v22 = v15;
  char v25 = 2;
  unint64_t v18 = sub_100357888();
  swift_bridgeObjectRetain(v17);
  uint64_t v23 = v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v26,  &type metadata for UTInfoPublishResponse.Result,  &v25,  v5,  &type metadata for UTInfoPublishResponse.Result,  v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v17) = v26;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  uint64_t v19 = v23;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v24;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v22;
  *(void *)(a2 + 24) = v19;
  *(_BYTE *)(a2 + 32) = v17;
  return result;
}

void *sub_10035528C(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A9E80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100012ED8(a1, v7);
  unint64_t v10 = sub_100356AA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for UTInfoPublishResponse.CodingKeys,  &type metadata for UTInfoPublishResponse.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = sub_100004AEC(&qword_1009A9E90);
    uint64_t v12 = sub_1001C8A7C( &qword_1009A9E98,  &qword_1009A9E90,  (void (*)(void))sub_100356AE8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v16;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v9;
}

uint64_t sub_1003553D8(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 208) = a2;
  *(void *)(v3 + 2swift_weakDestroy(v0 + 16) = a3;
  *(_BYTE *)(v3 + 392) = a1;
  uint64_t v4 = type metadata accessor for HashAlgorithm(0LL);
  *(void *)(v3 + 224) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 232) = v5;
  *(void *)(v3 + 240) = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0LL);
  *(void *)(v3 + 248) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v3 + 256) = v7;
  *(void *)(v3 + 264) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for TimeZone(0LL);
  *(void *)(v3 + 272) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v3 + 280) = v9;
  *(void *)(v3 + 288) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  *(void *)(v3 + 296) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v3 + 304) = v11;
  *(void *)(v3 + 312) = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003554B4, 0LL, 0LL);
}

uint64_t sub_1003554B4()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v5 = *(void **)(v0 + 264);
  uint64_t v37 = *(void *)(v0 + 280);
  uint64_t v38 = *(void *)(v0 + 272);
  uint64_t v39 = *(void *)(v0 + 256);
  uint64_t v40 = *(void *)(v0 + 248);
  uint64_t v42 = *(void *)(v0 + 208);
  char v41 = *(_BYTE *)(v0 + 392);
  uint64_t v6 = sub_100004AEC(&qword_1009B9A10);
  uint64_t inited = swift_initStackObject(v6, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E8290;
  *(void *)(inited + 32) = 0x747065636341LL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  *(void *)(inited + 48) = 0xD000000000000010LL;
  *(void *)(inited + 56) = 0x8000000100854B80LL;
  strcpy((char *)(inited + 64), "content-type");
  *(_BYTE *)(inited + 77) = 0;
  *(_WORD *)(inited + 78) = -5120;
  *(void *)(inited + 80) = 0xD000000000000010LL;
  *(void *)(inited + 88) = 0x8000000100854B80LL;
  *(void *)(inited + 96) = 0xD000000000000015LL;
  *(void *)(inited + 104) = 0x8000000100854BA0LL;
  uint64_t v8 = Date.init()(inited);
  uint64_t v9 = Date.epoch.getter(v8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v10(v2, v4);
  *(void *)(v0 + 192) = v9;
  *(void *)(inited + 112) = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  *(void *)(inited + 120) = v11;
  *(void *)(inited + 128) = 0xD000000000000012LL;
  *(void *)(inited + 136) = 0x800000010085F330LL;
  uint64_t v12 = static TimeZone.current.getter();
  Date.init()(v12);
  uint64_t v13 = TimeZone.abbreviation(for:)(v2);
  unint64_t v15 = v14;
  v10(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v3, v38);
  if (v15) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = 0LL;
  }
  unint64_t v17 = 0xE000000000000000LL;
  if (v15) {
    unint64_t v17 = v15;
  }
  *(void *)(inited + 144) = v16;
  *(void *)(inited + 152) = v17;
  unint64_t v18 = sub_100412D14(inited);
  uint64_t v19 = sub_1003F3498(v18);
  uint64_t v21 = v20;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
  sub_10005C260(v19, v21, 0x6567412D72657355LL, 0xEA0000000000746ELL, isUniquelyReferenced_nonNull_native);
  *(void *)(v0 + 320) = v18;
  swift_bridgeObjectRelease();
  uint64_t v23 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  *(void *)(v0 + 328) = JSONEncoder.init()();
  void *v5 = sub_1001559A4;
  v5[1] = 0LL;
  (*(void (**)(void *, void, uint64_t))(v39 + 104))( v5,  enum case for JSONEncoder.DateEncodingStrategy.custom(_:),  v40);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v5);
  *(_BYTE *)(v0 + 176) = v41;
  *(void *)(v0 + 184) = v42;
  unint64_t v24 = sub_100355C0C();
  uint64_t v25 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 176, &type metadata for UTInfoPublishRequestBody, v24);
  *(void *)(v0 + 336) = v25;
  *(void *)(v0 + 344) = v26;
  uint64_t v27 = v25;
  uint64_t v28 = v26;
  uint64_t v30 = *(void *)(v0 + 232);
  uint64_t v29 = *(void *)(v0 + 240);
  uint64_t v31 = *(void *)(v0 + 224);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v30 + 104))(v29, enum case for HashAlgorithm.sha256(_:), v31);
  uint64_t v32 = Data.hash(algorithm:)(v29, v27, v28);
  uint64_t v34 = v33;
  *(void *)(v0 + 352) = v32;
  *(void *)(v0 + 360) = v33;
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1009AD080 + dword_1009AD080);
  uint64_t v35 = (void *)swift_task_alloc(unk_1009AD084);
  *(void *)(v0 + 368) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_100355874;
  return v43(v32, v34, *(void *)(v0 + 216));
}

uint64_t sub_100355874(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 368LL);
  *(void *)(*(void *)v2 + 376LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1003559D4;
  }

  else
  {
    uint64_t v7 = v4[44];
    unint64_t v8 = v4[45];
    v4[48] = a1;
    sub_100016F9C(v7, v8);
    uint64_t v6 = sub_1003558F0;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1003558F0()
{
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 320);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  uint64_t v10 = v3;
  sub_100129198(v1, (uint64_t)sub_1003F68BC, 0LL, isUniquelyReferenced_nonNull_native, &v10);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = v10;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v9 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(uint64_t, void, void))(v0 + 8))(v6, *(void *)(v0 + 336), *(void *)(v0 + 344));
}

uint64_t sub_1003559D4()
{
  if (qword_10099B6E8 != -1) {
    swift_once(&qword_10099B6E8, sub_100651020);
  }
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AFE8);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 376);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138543362;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 200) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v8 + 4, v8 + 12);
    uint64_t *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Failed to generate utInfo attestation header: %{public}@.",  v8,  0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_release();
    swift_release();

    swift_errorRelease(v7);
  }

  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_release();
  }

  uint64_t v12 = *(void *)(v0 + 320);
  uint64_t v13 = *(void *)(v0 + 288);
  uint64_t v14 = *(void *)(v0 + 264);
  uint64_t v15 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(uint64_t, void, void))(v0 + 8))( v12,  *(void *)(v0 + 336),  *(void *)(v0 + 344));
}

unint64_t sub_100355C0C()
{
  unint64_t result = qword_1009A9D58;
  if (!qword_1009A9D58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC590, &type metadata for UTInfoPublishRequestBody);
    atomic_store(result, (unint64_t *)&qword_1009A9D58);
  }

  return result;
}

uint64_t destroy for UTInfoPublishRequestBody.Record(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (*(_BYTE *)(a1 + 40) != 3LL)
  {
    unint64_t v3 = *(void *)(a1 + 56);
    if (v3 >> 60 != 15) {
      return sub_100016F9C(*(void *)(a1 + 48), v3);
    }
  }

  return result;
}

uint64_t initializeWithCopy for UTInfoPublishRequestBody.Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v7;
  uint64_t v9 = (_OWORD *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8 == 3LL)
  {
    *(_OWORD *)(a1 + 40) = *v9;
    *(_OWORD *)(a1 + 49) = *(_OWORD *)((char *)v9 + 9);
  }

  else
  {
    *(_WORD *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 42) = BYTE2(v8);
    *(_BYTE *)(a1 + 43) = BYTE3(v8);
    *(_WORD *)(a1 + 44) = WORD2(v8);
    uint64_t v10 = (uint64_t *)(a2 + 48);
    unint64_t v11 = *(void *)(a2 + 56);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v12 = *v10;
      sub_10001736C(*v10, *(void *)(a2 + 56));
      *(void *)(a1 + 48) = v12;
      *(void *)(a1 + 56) = v11;
    }

    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }

  return a1;
}

uint64_t assignWithCopy for UTInfoPublishRequestBody.Record(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = (_OWORD *)(a1 + 40);
  uint64_t v9 = (_OWORD *)(a2 + 40);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40) != 3LL)
  {
    if (v8 == 3)
    {
      sub_100355F84(a1 + 40);
      __int128 v11 = *(_OWORD *)(a2 + 49);
      _OWORD *v7 = *v9;
      *(_OWORD *)(a1 + 49) = v11;
      return a1;
    }

    *(_BYTE *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
    *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
    *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
    *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
    uint64_t v14 = (uint64_t *)(a2 + 48);
    unint64_t v13 = *(void *)(a2 + 56);
    if (*(void *)(a1 + 56) >> 60 == 15LL)
    {
      if (v13 >> 60 != 15)
      {
        uint64_t v15 = *v14;
        goto LABEL_12;
      }
    }

    else
    {
      if (v13 >> 60 != 15)
      {
        uint64_t v16 = *v14;
        sub_10001736C(*v14, *(void *)(a2 + 56));
        uint64_t v17 = *(void *)(a1 + 48);
        unint64_t v18 = *(void *)(a1 + 56);
        *(void *)(a1 + 48) = v16;
        *(void *)(a1 + 56) = v13;
        sub_100016F9C(v17, v18);
        goto LABEL_17;
      }

      sub_100041D4C(a1 + 48);
    }

    *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
    goto LABEL_17;
  }

  if (v8 != 3)
  {
    *(_BYTE *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
    *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
    *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
    *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
    uint64_t v12 = (_OWORD *)(a2 + 48);
    unint64_t v13 = *(void *)(a2 + 56);
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *v12;
LABEL_17:
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      return a1;
    }

    uint64_t v15 = *(void *)v12;
LABEL_12:
    sub_10001736C(v15, v13);
    *(void *)(a1 + 48) = v15;
    *(void *)(a1 + 56) = v13;
    goto LABEL_17;
  }

  __int128 v10 = *v9;
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  _OWORD *v7 = v10;
  return a1;
}

uint64_t sub_100355F84(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >> 60 != 15) {
    sub_100016F9C(*(void *)(a1 + 8), v2);
  }
  return a1;
}

__n128 initializeWithTake for TagUserStatistics(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t assignWithTake for UTInfoPublishRequestBody.Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40) == 3LL) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 40) != 3LL)
  {
    *(_WORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 42) = BYTE2(v6);
    *(_BYTE *)(a1 + 43) = BYTE3(v6);
    *(_WORD *)(a1 + 44) = WORD2(v6);
    uint64_t v7 = (void *)(a2 + 48);
    unint64_t v8 = *(void *)(a1 + 56);
    if (v8 >> 60 != 15)
    {
      unint64_t v9 = *(void *)(a2 + 56);
      if (v9 >> 60 != 15)
      {
        uint64_t v10 = *(void *)(a1 + 48);
        *(void *)(a1 + 48) = *v7;
        *(void *)(a1 + 56) = v9;
        sub_100016F9C(v10, v8);
        goto LABEL_10;
      }

      sub_100041D4C(a1 + 48);
    }

    *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
LABEL_10:
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    return a1;
  }

  sub_100355F84(a1 + 40);
LABEL_4:
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  return a1;
}

uint64_t getEnumTagSinglePayload for UTInfoPublishRequestBody.Record(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UTInfoPublishRequestBody.Record(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 65) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.Record()
{
  return &type metadata for UTInfoPublishRequestBody.Record;
}

uint64_t destroy for UTInfoPublishRequestBody.EventContext(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1 >> 60 != 15) {
    return sub_100016F9C(*(void *)(result + 8), v1);
  }
  return result;
}

uint64_t initializeWithCopy for UTInfoPublishRequestBody.EventContext(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v4 = (uint64_t *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }

  else
  {
    uint64_t v6 = *v4;
    sub_10001736C(*v4, *(void *)(a2 + 16));
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  }

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for UTInfoPublishRequestBody.EventContext(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = (uint64_t *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 != 15LL)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v8 = *v5;
      sub_10001736C(*v5, *(void *)(a2 + 16));
      uint64_t v9 = *(void *)(a1 + 8);
      unint64_t v10 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
      sub_100016F9C(v9, v10);
      goto LABEL_8;
    }

    sub_100041D4C(a1 + 8);
    goto LABEL_6;
  }

  if (v6 >> 60 == 15)
  {
LABEL_6:
    *uint64_t v4 = *(_OWORD *)v5;
    goto LABEL_8;
  }

  uint64_t v7 = *v5;
  sub_10001736C(*v5, *(void *)(a2 + 16));
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
LABEL_8:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for UTInfoPublishRequestBody.EventContext(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = (void *)(a2 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 16);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *v5;
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v7;
      sub_100016F9C(v8, v6);
      goto LABEL_6;
    }

    sub_100041D4C(a1 + 8);
  }

  *uint64_t v4 = *(_OWORD *)v5;
LABEL_6:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for UTInfoPublishRequestBody.EventContext( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && a1[25]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UTInfoPublishRequestBody.EventContext( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)__n128 result = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.EventContext()
{
  return &type metadata for UTInfoPublishRequestBody.EventContext;
}

ValueMetadata *type metadata accessor for UTInfoPublishResponse()
{
  return &type metadata for UTInfoPublishResponse;
}

ValueMetadata *type metadata accessor for SubmitUTInfo()
{
  return &type metadata for SubmitUTInfo;
}

uint64_t initializeBufferWithCopyOfBuffer for UTInfoPublishRequestBody(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for UTInfoPublishRequestBody(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for UTInfoPublishRequestBody(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody()
{
  return &type metadata for UTInfoPublishRequestBody;
}

uint64_t *sub_10035653C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    unint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Date(0LL);
    unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t sub_1003565D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_100356620(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

void *sub_100356690(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

_OWORD *sub_10035670C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *sub_100356768(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_1003567D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003567E0);
}

uint64_t sub_1003567E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t sub_10035685C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100356868);
}

uint64_t sub_100356868(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for UTInfoPublishRequestBody.State(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A9DB8, (uint64_t)&nominal type descriptor for UTInfoPublishRequestBody.State);
}

uint64_t sub_1003568F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100356A38( a1,  a2,  a3,  (uint64_t)&unk_1007FC4D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
}

uint64_t sub_100356904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100356910);
}

uint64_t sub_100356910(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_10035698C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100356998);
}

char *sub_100356998(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)__n128 result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for SubmitUTInfoEndpoint(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A9E48, (uint64_t)&nominal type descriptor for SubmitUTInfoEndpoint);
}

uint64_t sub_100356A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100356A38( a1,  a2,  a3,  (uint64_t)&value witness table for Builtin.NativeObject + 64,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNAccountType);
}

uint64_t sub_100356A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  v8[0] = a4;
  uint64_t result = a5(319LL);
  if (v7 <= 0x3F)
  {
    v8[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v8, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_100356AA4()
{
  unint64_t result = qword_1009A9E88;
  if (!qword_1009A9E88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCDA0, &type metadata for UTInfoPublishResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9E88);
  }

  return result;
}

unint64_t sub_100356AE8()
{
  unint64_t result = qword_1009A9EA0;
  if (!qword_1009A9EA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCD78, &type metadata for UTInfoPublishResponse.Subscription);
    atomic_store(result, (unint64_t *)&qword_1009A9EA0);
  }

  return result;
}

unint64_t sub_100356B2C()
{
  unint64_t result = qword_1009A9EB0;
  if (!qword_1009A9EB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCD28, &type metadata for UTInfoPublishRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9EB0);
  }

  return result;
}

unint64_t sub_100356B70()
{
  unint64_t result = qword_1009A9EB8;
  if (!qword_1009A9EB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCD00, &type metadata for UTInfoPublishRequestBody.ClientContext);
    atomic_store(result, (unint64_t *)&qword_1009A9EB8);
  }

  return result;
}

unint64_t sub_100356BB4()
{
  unint64_t result = qword_1009A9ED0;
  if (!qword_1009A9ED0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC568, &type metadata for UTInfoPublishRequestBody.Record);
    atomic_store(result, (unint64_t *)&qword_1009A9ED0);
  }

  return result;
}

unint64_t sub_100356BF8()
{
  unint64_t result = qword_1009A9EE0;
  if (!qword_1009A9EE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCCB0, &type metadata for UTInfoPublishRequestBody.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9EE0);
  }

  return result;
}

unint64_t sub_100356C3C()
{
  unint64_t result = qword_1009A9EF0;
  if (!qword_1009A9EF0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A9EE8);
    sub_100007864(&qword_1009A9EF8, type metadata accessor for UTInfoPublishRequestBody.State, (uint64_t)&unk_1007FC508);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A9EF0);
  }

  return result;
}

uint64_t sub_100356CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9F00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100356D00()
{
  unint64_t result = qword_1009A9F08;
  if (!qword_1009A9F08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC540, &type metadata for UTInfoPublishRequestBody.EventContext);
    atomic_store(result, (unint64_t *)&qword_1009A9F08);
  }

  return result;
}

unint64_t sub_100356D44()
{
  unint64_t result = qword_1009A9F18;
  if (!qword_1009A9F18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCC60, &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F18);
  }

  return result;
}

unint64_t sub_100356D88()
{
  unint64_t result = qword_1009A9F20;
  if (!qword_1009A9F20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCC38, &type metadata for UTInfoPublishRequestBody.KnownLocationMode);
    atomic_store(result, (unint64_t *)&qword_1009A9F20);
  }

  return result;
}

unint64_t sub_100356DCC()
{
  unint64_t result = qword_1009A9F28;
  if (!qword_1009A9F28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCC10, &type metadata for UTInfoPublishRequestBody.MotionState);
    atomic_store(result, (unint64_t *)&qword_1009A9F28);
  }

  return result;
}

unint64_t sub_100356E10()
{
  unint64_t result = qword_1009A9F38;
  if (!qword_1009A9F38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCBC0, &type metadata for UTInfoPublishRequestBody.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F38);
  }

  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.State.CodingKeys()
{
  return &type metadata for UTInfoPublishRequestBody.State.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UTInfoPublishRequestBody.EventContext.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100356EB4 + 4 * byte_1007FC430[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100356EE8 + 4 * byte_1007FC42B[v4]))();
}

uint64_t sub_100356EE8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100356EF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100356EF8LL);
  }
  return result;
}

uint64_t sub_100356F04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100356F0CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_100356F10(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100356F18(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.EventContext.CodingKeys()
{
  return &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.Record.CodingKeys()
{
  return &type metadata for UTInfoPublishRequestBody.Record.CodingKeys;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.CodingKeys()
{
  return &type metadata for UTInfoPublishRequestBody.CodingKeys;
}

ValueMetadata *type metadata accessor for UTInfoPublishResponse.CodingKeys()
{
  return &type metadata for UTInfoPublishResponse.CodingKeys;
}

uint64_t _s12searchpartyd24UTInfoPublishRequestBodyV11MotionStateOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100356FB8 + 4 * byte_1007FC43A[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100356FEC + 4 * byte_1007FC435[v4]))();
}

uint64_t sub_100356FEC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100356FF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100356FFCLL);
  }
  return result;
}

uint64_t sub_100357008(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100357010LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100357014(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10035701C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.MotionState()
{
  return &type metadata for UTInfoPublishRequestBody.MotionState;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.KnownLocationMode()
{
  return &type metadata for UTInfoPublishRequestBody.KnownLocationMode;
}

uint64_t destroy for UTInfoPublishResponse.Subscription(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for UTInfoPublishResponse.Subscription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for UTInfoPublishResponse.Subscription(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for UTInfoPublishResponse.Subscription(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for UTInfoPublishResponse.Subscription(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UTInfoPublishResponse.Subscription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishResponse.Subscription()
{
  return &type metadata for UTInfoPublishResponse.Subscription;
}

uint64_t getEnumTagSinglePayload for VerifyFindMyNetworkIdResponsePayload( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for UTInfoPublishRequestBody.ClientContext( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1003572FC + 4 * byte_1007FC444[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100357330 + 4 * byte_1007FC43F[v4]))();
}

uint64_t sub_100357330(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100357338(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100357340LL);
  }
  return result;
}

uint64_t sub_10035734C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100357354LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100357358(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100357360(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.ClientContext()
{
  return &type metadata for UTInfoPublishRequestBody.ClientContext;
}

unint64_t sub_100357380()
{
  unint64_t result = qword_1009A9F40;
  if (!qword_1009A9F40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC728, &type metadata for UTInfoPublishRequestBody.KnownLocationMode);
    atomic_store(result, (unint64_t *)&qword_1009A9F40);
  }

  return result;
}

unint64_t sub_1003573C8()
{
  unint64_t result = qword_1009A9F48;
  if (!qword_1009A9F48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC7C8, &type metadata for UTInfoPublishRequestBody.MotionState);
    atomic_store(result, (unint64_t *)&qword_1009A9F48);
  }

  return result;
}

unint64_t sub_100357410()
{
  unint64_t result = qword_1009A9F50;
  if (!qword_1009A9F50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC880, &type metadata for UTInfoPublishResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F50);
  }

  return result;
}

unint64_t sub_100357458()
{
  unint64_t result = qword_1009A9F58;
  if (!qword_1009A9F58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC938, &type metadata for UTInfoPublishRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F58);
  }

  return result;
}

unint64_t sub_1003574A0()
{
  unint64_t result = qword_1009A9F60;
  if (!qword_1009A9F60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC9F0, &type metadata for UTInfoPublishRequestBody.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F60);
  }

  return result;
}

unint64_t sub_1003574E8()
{
  unint64_t result = qword_1009A9F68;
  if (!qword_1009A9F68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCAA8, &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F68);
  }

  return result;
}

unint64_t sub_100357530()
{
  unint64_t result = qword_1009A9F70;
  if (!qword_1009A9F70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCB98, &type metadata for UTInfoPublishRequestBody.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F70);
  }

  return result;
}

unint64_t sub_100357578()
{
  unint64_t result = qword_1009A9F78;
  if (!qword_1009A9F78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCAD0, &type metadata for UTInfoPublishRequestBody.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F78);
  }

  return result;
}

unint64_t sub_1003575C0()
{
  unint64_t result = qword_1009A9F80;
  if (!qword_1009A9F80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCAF8, &type metadata for UTInfoPublishRequestBody.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F80);
  }

  return result;
}

unint64_t sub_100357608()
{
  unint64_t result = qword_1009A9F88;
  if (!qword_1009A9F88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCA18, &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F88);
  }

  return result;
}

unint64_t sub_100357650()
{
  unint64_t result = qword_1009A9F90;
  if (!qword_1009A9F90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCA40, &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F90);
  }

  return result;
}

unint64_t sub_100357698()
{
  unint64_t result = qword_1009A9F98;
  if (!qword_1009A9F98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC960, &type metadata for UTInfoPublishRequestBody.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9F98);
  }

  return result;
}

unint64_t sub_1003576E0()
{
  unint64_t result = qword_1009A9FA0;
  if (!qword_1009A9FA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC988, &type metadata for UTInfoPublishRequestBody.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9FA0);
  }

  return result;
}

unint64_t sub_100357728()
{
  unint64_t result = qword_1009A9FA8;
  if (!qword_1009A9FA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC8A8, &type metadata for UTInfoPublishRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9FA8);
  }

  return result;
}

unint64_t sub_100357770()
{
  unint64_t result = qword_1009A9FB0;
  if (!qword_1009A9FB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC8D0, &type metadata for UTInfoPublishRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9FB0);
  }

  return result;
}

unint64_t sub_1003577B8()
{
  unint64_t result = qword_1009A9FB8;
  if (!qword_1009A9FB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC7F0, &type metadata for UTInfoPublishResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9FB8);
  }

  return result;
}

unint64_t sub_100357800()
{
  unint64_t result = qword_1009A9FC0;
  if (!qword_1009A9FC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC818, &type metadata for UTInfoPublishResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9FC0);
  }

  return result;
}

unint64_t sub_100357844()
{
  unint64_t result = qword_1009A9FD0;
  if (!qword_1009A9FD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FD080, &type metadata for UTInfoPublishResponse.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9FD0);
  }

  return result;
}

unint64_t sub_100357888()
{
  unint64_t result = qword_1009A9FD8;
  if (!qword_1009A9FD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FD058, &type metadata for UTInfoPublishResponse.Result);
    atomic_store(result, (unint64_t *)&qword_1009A9FD8);
  }

  return result;
}

unint64_t sub_1003578CC()
{
  unint64_t result = qword_1009A9FE8;
  if (!qword_1009A9FE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FD008, &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A9FE8);
  }

  return result;
}

unint64_t sub_100357910()
{
  unint64_t result = qword_1009A9FF0;
  if (!qword_1009A9FF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC6B0, &type metadata for UTInfoPublishRequestBody.KnownLocationMode);
    atomic_store(result, (unint64_t *)&qword_1009A9FF0);
  }

  return result;
}

unint64_t sub_100357954()
{
  unint64_t result = qword_1009A9FF8;
  if (!qword_1009A9FF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC750, &type metadata for UTInfoPublishRequestBody.MotionState);
    atomic_store(result, (unint64_t *)&qword_1009A9FF8);
  }

  return result;
}

uint64_t _s12searchpartyd21UTInfoPublishResponseV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1003579D8 + 4 * byte_1007FC449[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1003579F8 + 4 * byte_1007FC44E[v4]))();
  }
}

_BYTE *sub_1003579D8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1003579F8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100357A00(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100357A08(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100357A10(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100357A18(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.ClientContext.CodingKeys()
{
  return &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UTInfoPublishResponse.Subscription.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100357A80 + 4 * byte_1007FC458[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100357AB4 + 4 * byte_1007FC453[v4]))();
}

uint64_t sub_100357AB4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100357ABC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100357AC4LL);
  }
  return result;
}

uint64_t sub_100357AD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100357AD8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100357ADC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100357AE4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishResponse.Subscription.CodingKeys()
{
  return &type metadata for UTInfoPublishResponse.Subscription.CodingKeys;
}

uint64_t _s12searchpartyd24UTInfoPublishRequestBodyV17KnownLocationModeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100357B4C + 4 * byte_1007FC462[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100357B80 + 4 * byte_1007FC45D[v4]))();
}

uint64_t sub_100357B80(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100357B88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100357B90LL);
  }
  return result;
}

uint64_t sub_100357B9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100357BA4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100357BA8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100357BB0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishResponse.Result()
{
  return &type metadata for UTInfoPublishResponse.Result;
}

unint64_t sub_100357BD0()
{
  unint64_t result = qword_1009AA000;
  if (!qword_1009AA000)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCE70, &type metadata for UTInfoPublishResponse.Result);
    atomic_store(result, (unint64_t *)&qword_1009AA000);
  }

  return result;
}

unint64_t sub_100357C18()
{
  unint64_t result = qword_1009AA008;
  if (!qword_1009AA008)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCF28, &type metadata for UTInfoPublishResponse.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AA008);
  }

  return result;
}

unint64_t sub_100357C60()
{
  unint64_t result = qword_1009AA010;
  if (!qword_1009AA010)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCFE0, &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AA010);
  }

  return result;
}

unint64_t sub_100357CA8()
{
  unint64_t result = qword_1009AA018;
  if (!qword_1009AA018)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCF50, &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AA018);
  }

  return result;
}

unint64_t sub_100357CF0()
{
  unint64_t result = qword_1009AA020;
  if (!qword_1009AA020)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCF78, &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AA020);
  }

  return result;
}

unint64_t sub_100357D38()
{
  unint64_t result = qword_1009AA028;
  if (!qword_1009AA028)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCE98, &type metadata for UTInfoPublishResponse.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AA028);
  }

  return result;
}

unint64_t sub_100357D80()
{
  unint64_t result = qword_1009AA030;
  if (!qword_1009AA030)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCEC0, &type metadata for UTInfoPublishResponse.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AA030);
  }

  return result;
}

unint64_t sub_100357DC4()
{
  unint64_t result = qword_1009AA038;
  if (!qword_1009AA038)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FCDF8, &type metadata for UTInfoPublishResponse.Result);
    atomic_store(result, (unint64_t *)&qword_1009AA038);
  }

  return result;
}

uint64_t ConnectionPair.readConnection.getter()
{
  return swift_retain(*(void *)(v0 + 16));
}

uint64_t ConnectionPair.writeConnection.getter()
{
  return swift_retain(*(void *)(v0 + 24));
}

uint64_t ConnectionPair.__allocating_init(_:readonly:key:)( uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, 32LL, 7LL);
  ConnectionPair.init(_:readonly:key:)(a1, a2, a3, a4);
  return v9;
}

uint64_t ConnectionPair.init(_:readonly:key:)(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  unint64_t v46 = a4;
  int v44 = a2;
  uint64_t v50 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v50 - 8);
  uint64_t v7 = __chkstk_darwin(v50);
  uint64_t v43 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v42 - v10;
  __chkstk_darwin(v9);
  id v49 = (char *)&v42 - v12;
  uint64_t v13 = type metadata accessor for Connection.Location(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)((char *)&v42 - v18);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v47 = a1;
  v20((char *)&v42 - v18, a1, v13);
  int v21 = (*(uint64_t (**)(void *, uint64_t))(v14 + 88))(v19, v13);
  if (v21 != enum case for Connection.Location.uri(_:))
  {
    char v27 = v44;
    uint64_t v28 = v45;
    unint64_t v24 = v46;
    uint64_t v43 = (char *)a3;
    if (v21 != enum case for Connection.Location.inMemory(_:) && v21 != enum case for Connection.Location.temporary(_:))
    {
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v13, v13);
      __break(1u);
      return result;
    }

    uint64_t v30 = v47;
    v20(v17, v47, v13);
    uint64_t v31 = type metadata accessor for Connection(0LL);
    swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    uint64_t v32 = Connection.init(_:readonly:)(v17, v27 & 1);
    if (v28)
    {
      sub_1000182F0((uint64_t)v43, v24);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v30, v13);
      goto LABEL_11;
    }

    uint64_t v33 = v48;
    *(void *)(v48 + swift_weakDestroy(v0 + 16) = v32;
    *(void *)(v33 + 24) = v32;
    swift_retain();
LABEL_14:
    uint64_t v39 = swift_retain();
    Connection.busyTimeout.setter(v39, 1.0);
    uint64_t v40 = swift_release();
    Connection.busyTimeout.setter(v40, 1.0);
    sub_1000182F0((uint64_t)v43, v24);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v30, v13);
    return v33;
  }

  (*(void (**)(void *, uint64_t))(v14 + 96))(v19, v13);
  uint64_t v22 = v49;
  URL.init(fileURLWithPath:)(*v19, v19[1]);
  swift_bridgeObjectRelease();
  type metadata accessor for Connection(0LL);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v23(v11, v22, v50);
  unint64_t v24 = v46;
  sub_100018BE4(a3, v46);
  uint64_t v25 = v45;
  uint64_t v26 = Connection.init(_:readonly:key:)(v11, v44 & 1, a3, v24);
  if (!v25)
  {
    uint64_t v45 = v6;
    uint64_t v35 = a3;
    uint64_t v33 = v48;
    uint64_t v36 = v49;
    *(void *)(v48 + 24) = v26;
    uint64_t v37 = v43;
    v23(v43, v36, v50);
    sub_100018BE4(v35, v24);
    uint64_t v38 = Connection.init(_:readonly:key:)(v37, 1LL, v35, v24);
    uint64_t v43 = (char *)v35;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v49, v50);
    *(void *)(v33 + swift_weakDestroy(v0 + 16) = v38;
    uint64_t v30 = v47;
    goto LABEL_14;
  }

  sub_1000182F0(a3, v24);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v47, v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v49, v50);
LABEL_11:
  uint64_t v33 = v48;
  uint64_t v34 = type metadata accessor for ConnectionPair();
  swift_deallocPartialClassInstance(v33, v34, 32LL, 7LL);
  return v33;
}

uint64_t type metadata accessor for ConnectionPair()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd14ConnectionPair);
}

uint64_t ConnectionPair.deinit()
{
  return v0;
}

uint64_t ConnectionPair.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t ConnectionPair.description.getter()
{
  return Connection.description.getter();
}

uint64_t sub_1003582E8()
{
  return Connection.description.getter();
}

uint64_t sub_10035830C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A718);
  sub_10000A720(v0, (uint64_t)qword_100A2A718);
  return Logger.init(subsystem:category:)(0xD000000000000010LL, 0x80000001008506D0LL, 7106931LL, 0xE300000000000000LL);
}

uint64_t sub_100358378(uint64_t *a1)
{
  uint64_t v2 = a1[11];
  uint64_t v3 = a1[12];
  uint64_t result = type metadata accessor for VariableGroupingSequence(319LL, a1[10], v2, v3);
  if (v5 <= 0x3F)
  {
    v7[0] = *(void *)(result - 8) + 64LL;
    v7[1] = (char *)&value witness table for Builtin.Int64 + 64;
    _OWORD v7[2] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = swift_getAssociatedTypeWitness( 319LL,  v3,  v2,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Iterator);
    if (v6 <= 0x3F)
    {
      void v7[3] = *(void *)(result - 8) + 64LL;
      uint64_t result = swift_initClassMetadata2(a1, 0LL, 4LL, v7, a1 + 13);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100358440()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)v0;
  uint64_t v3 = *(void *)(v0 + *(void *)(*(void *)v0 + 104LL));
  swift_beginAccess(v0 + *(void *)(*(void *)v0 + 128LL), &v34, 33LL, 0LL);
  uint64_t v5 = v2[11];
  uint64_t v4 = v2[12];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v4,  v5,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Iterator);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v5,  AssociatedTypeWitness,  &protocol requirements base descriptor for Sequence,  &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  dispatch thunk of IteratorProtocol.next()(&v40, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t result = swift_endAccess(&v34);
  if (v41) {
    uint64_t v9 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 120LL));
  }
  else {
    uint64_t v9 = &v40;
  }
  uint64_t v10 = *v9;
  *(void *)(v0 + *(void *)(*(void *)v0 + 120LL)) = v10;
  uint64_t v11 = *(void *)(*(void *)v0 + 112LL);
  uint64_t v12 = *(void *)(v0 + v11);
  uint64_t v13 = v12 + v10;
  if (__OFADD__(v12, v10))
  {
    __break(1u);
    goto LABEL_22;
  }

  if (v13 < v12)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v40 = v3;
  uint64_t v14 = v2[10];
  uint64_t v15 = type metadata accessor for Array(0LL);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  RandomAccessCollection<>.indices.getter(&v34, v15, WitnessTable, &protocol witness table for Int);
  uint64_t v17 = v34;
  if (v35 >= v12) {
    uint64_t v18 = v12;
  }
  else {
    uint64_t v18 = v35;
  }
  if (v12 >= v34) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v34;
  }
  if (v13 > v34) {
    uint64_t v17 = v13;
  }
  if (v35 >= v13) {
    uint64_t v20 = v17;
  }
  else {
    uint64_t v20 = v35;
  }
  uint64_t v21 = *(void *)(v1 + v11);
  uint64_t v22 = 0LL;
  if (v21 < Array.count.getter(v3, v14))
  {
    uint64_t v34 = Array.subscript.getter(v19, v20, v3, v14);
    uint64_t v35 = v23;
    uint64_t v36 = v24;
    uint64_t v37 = v25;
    uint64_t v26 = type metadata accessor for ArraySlice(0LL, v14);
    uint64_t v27 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v26);
    uint64_t v22 = Array.init<A>(_:)(&v34, v14, v26, v27);
  }

  uint64_t v34 = v19;
  uint64_t v35 = v20;
  uint64_t v28 = sub_100004AEC(&qword_1009AA1E8);
  unint64_t v29 = sub_100359040();
  uint64_t v38 = &protocol witness table for Int;
  unint64_t v39 = v29;
  uint64_t v30 = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v28);
  uint64_t result = Collection.count.getter(v28, v30);
  uint64_t v31 = *(void *)(v1 + v11);
  BOOL v32 = __OFADD__(v31, result);
  uint64_t v33 = v31 + result;
  if (!v32)
  {
    *(void *)(v1 + v11) = v33;
    return v22;
  }

uint64_t sub_100358688()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96LL);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 104LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 88LL);
  uint64_t v4 = type metadata accessor for VariableGroupingSequence(0LL, *(void *)(*(void *)v0 + 80LL), v3, v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2, v4);
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 128LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v1,  v3,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(v5, AssociatedTypeWitness);
  return v0;
}

uint64_t sub_100358720()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for VariableGroupingSequence.VariableGroupingSequenceIterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for VariableGroupingSequence.VariableGroupingSequenceIterator);
}

uint64_t type metadata accessor for VariableGroupingSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VariableGroupingSequence);
}

uint64_t sub_10035875C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 2LL, v4, a1 + 40);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1003587D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }

  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v9);
    v14(v12, v13, v4);
  }

  return a1;
}

uint64_t sub_100358894(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))(((unint64_t)a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL));
}

uint64_t *sub_1003588D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain(v4);
  v10(v8, v9, v5);
  return a1;
}

uint64_t *sub_100358948(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))( ((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

void *sub_1003589B8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))( ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t *sub_100358A08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))( ((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_100358A70(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  int v8 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_22;
  }
  uint64_t v9 = ((v7 + 8) & ~v7) + *(void *)(v4 + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      goto LABEL_15;
    }

    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      }
      uint64_t v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }

  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9)) {
    goto LABEL_22;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (!(_DWORD)v9) {
    return v6 + v14 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_100358B44 + 4 * byte_1007FD130[(v9 - 1)]))();
}

void sub_100358BB4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  size_t v7 = ((*(unsigned __int8 *)(v5 + 80) + 8LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(void *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      unsigned int v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        unsigned int v8 = &dword_100000004;
      }

      else if (v10 >= 0x100)
      {
        unsigned int v8 = 2;
      }

      else
      {
        unsigned int v8 = v10 > 1;
      }
    }

    else
    {
      unsigned int v8 = &_mh_execute_header.magic + 1;
    }
  }

  else
  {
    unsigned int v8 = 0;
  }

  if (v6 < a2)
  {
    int v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        int v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }

        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }

        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }

    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

uint64_t sub_100358DA8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1007FD228, a1);
}

uint64_t sub_100358DB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100358440();
  *a1 = result;
  return result;
}

uint64_t **sub_100358DE0(uint64_t *a1)
{
  return sub_100358FFC(v1);
}

uint64_t sub_100358E18@<X0>(uint64_t *a1@<X0>, uint64_t ***a2@<X8>)
{
  uint64_t v5 = sub_100358DE0(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(a1 - 1) + 8))(v2, a1);
  *a2 = v5;
  return result;
}

uint64_t sub_100358E60()
{
  return 2LL;
}

uint64_t sub_100358E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t **sub_100358E90(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v19 = a1;
  unint64_t v3 = *v1;
  uint64_t v4 = (*v1)[11];
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  size_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = v3[12];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v8,  v4,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Iterator);
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v12 = (char *)&v18 - v11;
  *(uint64_t **)((char *)v2 + v3[14]) = 0LL;
  uint64_t v13 = (uint64_t)v2 + (*v2)[13];
  uint64_t v14 = type metadata accessor for VariableGroupingSequence(0LL, v3[10], v4, v8);
  uint64_t v15 = v13;
  uint64_t v16 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v15, v19, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16 + *(int *)(v14 + 44), v4);
  dispatch thunk of Sequence.makeIterator()(v4, v8);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v2 + (*v2)[16], v12, AssociatedTypeWitness);
  *(uint64_t **)((char *)v2 + (*v2)[15]) = 0LL;
  return v2;
}

uint64_t **sub_100358FFC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for VariableGroupingSequence.VariableGroupingSequenceIterator(0LL, v1[10], v1[11], v1[12]);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  return sub_100358E90(a1);
}

unint64_t sub_100359040()
{
  unint64_t result = qword_1009AA1F0;
  if (!qword_1009AA1F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1009AA1F0);
  }

  return result;
}

uint64_t *sub_100359084(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v13);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    uint64_t v8 = *(int *)(a3 + 28);
    int v9 = (char *)a2 + v8;
    uint64_t v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v11 = type metadata accessor for URL(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v12(v10, v9, v11);
  }

  return v3;
}

uint64_t sub_100359148(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_1003591A0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a2 + v7;
  int v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v9, v8, v10);
  return a1;
}

void *sub_100359238(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  return a1;
}

_OWORD *sub_1003592F4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

void *sub_100359358(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40LL))(v13, v14, v15);
  return a1;
}

uint64_t sub_1003593E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003593F0);
}

uint64_t sub_1003593F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t sub_10035946C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100359478);
}

uint64_t sub_100359478(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for SearchpartyAccount(uint64_t a1)
{
  uint64_t result = qword_1009AA250;
  if (!qword_1009AA250) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchpartyAccount);
  }
  return result;
}

uint64_t sub_100359528(uint64_t a1)
{
  v4[0] = &unk_1007FD278;
  v4[1] = &unk_1007FD278;
  void v4[2] = &unk_1007FD278;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003595A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003595AC);
}

uint64_t sub_1003595AC(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_100359628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100359634);
}

char *sub_100359634(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for AirPodsLostModeEndPoint(uint64_t a1)
{
  uint64_t result = qword_1009AA2E8;
  if (!qword_1009AA2E8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsLostModeEndPoint);
  }
  return result;
}

void sub_1003596E4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A14C8);
  uint64_t v3 = OS_dispatch_queue.sync<A>(execute:)(sub_1000F9588, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.host.setter(v14[2], v14[3]);
  URLComponents.path.setter(v14[0], v14[1]);
  uint64_t v4 = (void (*)(void *, void))URLComponents.path.modify(v14);
  v5._countAndFlagsBits = 0xD000000000000013LL;
  v5._object = (void *)0x800000010085F410LL;
  String.append(_:)(v5);
  v4(v14, 0LL);
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v6 = (void *)qword_100A2AF38;
  id v7 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v8 = [v7 isInternalBuild];

  if (v8)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v6 stringForKey:v9];

    if (v10)
    {
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v13 = v12;

      URLComponents.host.setter(v11, v13);
    }
  }

uint64_t sub_1003598A8(uint64_t a1)
{
  uint64_t v92 = sub_100004AEC(&qword_1009AA650);
  uint64_t v2 = __chkstk_darwin(v92);
  uint64_t v76 = &v69[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v75 = &v69[-v5];
  uint64_t v6 = __chkstk_darwin(v4);
  __int128 v74 = &v69[-v7];
  __chkstk_darwin(v6);
  uint64_t v91 = &v69[-v8];
  int64_t v9 = *(void *)(a1 + 16);
  id v10 = _swiftEmptyArrayStorage;
  if (!v9) {
    return (uint64_t)v10;
  }
  uint64_t v94 = _swiftEmptyArrayStorage;
  sub_100033178(0, v9, 0);
  uint64_t result = sub_10036D718(a1);
  unint64_t v13 = result;
  uint64_t v14 = 0LL;
  uint64_t v15 = a1 + 64;
  uint64_t v77 = a1 + 80;
  uint64_t v73 = a1;
  int64_t v70 = v9;
  uint64_t v71 = v12;
  uint64_t v72 = a1 + 64;
  while ((v13 & 0x8000000000000000LL) == 0 && (uint64_t)v13 < 1LL << *(_BYTE *)(a1 + 32))
  {
    if ((*(void *)(v15 + 8 * (v13 >> 6)) & (1LL << v13)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v12) {
      goto LABEL_26;
    }
    uint64_t v79 = 1LL << v13;
    unint64_t v80 = v13 >> 6;
    uint64_t v78 = v14;
    uint64_t v17 = v91;
    uint64_t v18 = &v91[*(int *)(v92 + 48)];
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v93 = type metadata accessor for UUID(0LL);
    uint64_t v88 = *(void **)(v93 - 8);
    uint64_t v20 = v19 + v88[9] * v13;
    uint64_t v90 = (void (*)(_BYTE *, uint64_t, uint64_t))v88[2];
    v90(v17, v20, v93);
    uint64_t v21 = *(void *)(a1 + 56);
    int64_t v89 = v13;
    uint64_t v22 = (uint64_t *)(v21 + 104 * v13);
    uint64_t v23 = *v22;
    unsigned __int8 v24 = *((_BYTE *)v22 + 8);
    LODWORD(v87) = v24;
    uint64_t v26 = v22[2];
    uint64_t v25 = v22[3];
    uint64_t v28 = v22[4];
    uint64_t v27 = v22[5];
    uint64_t v30 = v22[7];
    uint64_t v86 = v22[6];
    uint64_t v29 = v86;
    char v31 = *((_BYTE *)v22 + 64);
    unsigned __int8 v32 = *((_BYTE *)v22 + 65);
    LODWORD(v85) = v32;
    uint64_t v34 = v22[9];
    uint64_t v33 = v22[10];
    uint64_t v83 = v22[11];
    uint64_t v35 = v83;
    uint64_t v84 = v33;
    LODWORD(v22) = *((unsigned __int8 *)v22 + 96);
    int v82 = (int)v22;
    *(void *)uint64_t v18 = v23;
    v18[8] = v24;
    *((void *)v18 + 2) = v26;
    *((void *)v18 + 3) = v25;
    *((void *)v18 + 4) = v28;
    *((void *)v18 + 5) = v27;
    *((void *)v18 + 6) = v29;
    *((void *)v18 + 7) = v30;
    v18[64] = v31;
    v18[65] = v32;
    *((void *)v18 + 9) = v34;
    *((void *)v18 + 10) = v33;
    *((void *)v18 + 11) = v35;
    v18[96] = (_BYTE)v22;
    uint64_t v36 = (uint64_t)v74;
    v90(v74, (uint64_t)v91, v93);
    uint64_t v37 = v36 + *(int *)(v92 + 48);
    *(void *)uint64_t v37 = v23;
    *(_BYTE *)(v37 + 8) = v87;
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = v26;
    *(void *)(v37 + 24) = v25;
    *(void *)(v37 + 32) = v28;
    *(void *)(v37 + 40) = v27;
    *(void *)(v37 + 48) = v86;
    *(void *)(v37 + 56) = v30;
    *(_BYTE *)(v37 + 64) = v31;
    *(_BYTE *)(v37 + 65) = v85;
    uint64_t v38 = v84;
    *(void *)(v37 + 72) = v34;
    *(void *)(v37 + 80) = v38;
    *(void *)(v37 + 88) = v83;
    *(_BYTE *)(v37 + 96) = v82;
    unint64_t v39 = v75;
    sub_100015750(v36, (uint64_t)v75, &qword_1009AA650);
    swift_bridgeObjectRetain_n(v30, 2LL);
    swift_bridgeObjectRetain_n(v34, 2LL);
    swift_retain_n(v23, 2LL);
    swift_bridgeObjectRetain_n(v26, 2LL);
    swift_bridgeObjectRetain_n(v25, 2LL);
    swift_bridgeObjectRetain_n(v28, 2LL);
    swift_bridgeObjectRetain_n(v27, 2LL);
    sub_100015794((uint64_t)v91, &qword_1009AA650);
    uint64_t v40 = *(int *)(v92 + 48);
    char v41 = v76;
    uint64_t v42 = &v76[v40];
    uint64_t v43 = &v39[v40];
    v90(v76, (uint64_t)v39, v93);
    *(void *)uint64_t v42 = *(void *)v43;
    int v44 = (void *)*((void *)v43 + 2);
    uint64_t v45 = *((void *)v43 + 3);
    uint64_t v46 = *((void *)v43 + 4);
    uint64_t v47 = *((void *)v43 + 5);
    uint64_t v48 = *((void *)v43 + 6);
    uint64_t v49 = *((void *)v43 + 7);
    int v50 = v43[64];
    int v51 = v43[65];
    uint64_t v53 = *((void *)v43 + 9);
    uint64_t v52 = *((void *)v43 + 10);
    uint64_t v54 = *((void *)v43 + 11);
    int v55 = v43[96];
    LODWORD(v90) = v43[8];
    v42[8] = (_BYTE)v90;
    *((void *)v42 + 2) = v44;
    *((void *)v42 + 3) = v45;
    *((void *)v42 + 4) = v46;
    *((void *)v42 + 5) = v47;
    uint64_t v85 = v52;
    uint64_t v86 = v48;
    *((void *)v42 + 6) = v48;
    *((void *)v42 + 7) = v49;
    int v81 = v51;
    int v82 = v50;
    v42[64] = v50;
    v42[65] = v51;
    *((void *)v42 + 9) = v53;
    *((void *)v42 + 10) = v52;
    uint64_t v84 = v54;
    *((void *)v42 + 11) = v54;
    LODWORD(v83) = v55;
    v42[96] = v55;
    id v56 = (void (*)(_BYTE *, uint64_t, __n128))v88[1];
    uint64_t v88 = v44;
    swift_bridgeObjectRetain(v44);
    uint64_t v87 = v45;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v49);
    __n128 v57 = swift_bridgeObjectRetain(v53);
    v56(v41, v93, v57);
    sub_100015794((uint64_t)v39, &qword_1009AA650);
    id v10 = v94;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v94);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_100033178(0, v10[2] + 1LL, 1);
      id v10 = v94;
    }

    unint64_t v59 = v10[2];
    unint64_t v58 = v10[3];
    if (v59 >= v58 >> 1)
    {
      uint64_t result = sub_100033178(v58 > 1, v59 + 1, 1);
      id v10 = v94;
    }

    v10[2] = v59 + 1;
    char v60 = &v10[12 * v59];
    *((_BYTE *)v60 + 32) = (_BYTE)v90;
    uint64_t v61 = v87;
    v60[5] = v88;
    v60[6] = v61;
    v60[7] = v46;
    v60[8] = v47;
    v60[9] = v86;
    v60[10] = v49;
    *((_BYTE *)v60 + 88) = v82;
    *((_BYTE *)v60 + 89) = v81;
    uint64_t v62 = v85;
    v60[12] = v53;
    v60[13] = v62;
    v60[14] = v84;
    *((_BYTE *)v60 + 120) = v83;
    a1 = v73;
    unint64_t v13 = 1LL << *(_BYTE *)(v73 + 32);
    uint64_t v15 = v72;
    unint64_t v63 = v80;
    uint64_t v64 = *(void *)(v72 + 8 * v80);
    if ((v64 & v79) == 0) {
      goto LABEL_28;
    }
    LODWORD(v12) = v71;
    if (*(_DWORD *)(v73 + 36) != (_DWORD)v71) {
      goto LABEL_29;
    }
    unint64_t v65 = v64 & (-2LL << (v89 & 0x3F));
    if (v65)
    {
      unint64_t v13 = __clz(__rbit64(v65)) | v89 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v16 = v70;
    }

    else
    {
      unint64_t v66 = v80 + 1;
      unint64_t v67 = (v13 + 63) >> 6;
      int64_t v16 = v70;
      if (v80 + 1 < v67)
      {
        unint64_t v68 = *(void *)(v72 + 8 * v66);
        if (v68)
        {
LABEL_22:
          unint64_t v13 = __clz(__rbit64(v68)) + (v66 << 6);
        }

        else
        {
          while (v67 - 2 != v63)
          {
            unint64_t v68 = *(void *)(v77 + 8 * v63++);
            if (v68)
            {
              unint64_t v66 = v63 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }

    uint64_t v14 = v78 + 1;
    if (v78 + 1 == v16) {
      return (uint64_t)v10;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *sub_100359E4C(uint64_t a1)
{
  uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AA760);
  uint64_t v3 = *(void *)(v41 - 8);
  uint64_t v4 = __chkstk_darwin(v41);
  uint64_t v37 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v40 = (char *)v32 - v6;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009AA7A0);
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  __chkstk_darwin(v7);
  int64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v32[1] = v1;
    uint64_t v43 = _swiftEmptyArrayStorage;
    sub_1000331DC(0, v10, 0);
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v36 = *(void *)(v3 + 72);
    uint64_t v13 = type metadata accessor for UUID(0LL);
    uint64_t v34 = *(void *)(v13 - 8);
    uint64_t v35 = v13;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
    uint64_t v14 = v40;
    uint64_t v15 = (uint64_t)v37;
    do
    {
      int64_t v42 = v10;
      uint64_t v16 = v41;
      uint64_t v17 = *(int *)(v41 + 48);
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = v39;
      uint64_t v20 = *(int *)(v39 + 48);
      uint64_t v21 = v35;
      v33(v14, v12, v35);
      uint64_t v22 = *(void **)(v12 + v20);
      uint64_t v23 = *(void **)(v12 + v17);
      uint64_t v24 = *(int *)(v16 + 48);
      uint64_t v25 = *(int *)(v19 + 48);
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v15, v14, v21);
      *(void *)(v15 + v25) = v22;
      int64_t v9 = (char *)v18;
      *(void *)(v15 + v24) = v23;
      sub_10001581C(v15, v18, (uint64_t *)&unk_1009AA7A0);
      id v26 = v22;
      id v27 = v23;
      sub_100015794(v15, (uint64_t *)&unk_1009AA760);
      uint64_t v11 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_1000331DC(0, v11[2] + 1LL, 1);
        uint64_t v11 = v43;
      }

      unint64_t v29 = v11[2];
      unint64_t v28 = v11[3];
      int64_t v30 = v42;
      if (v29 >= v28 >> 1)
      {
        sub_1000331DC(v28 > 1, v29 + 1, 1);
        uint64_t v11 = v43;
      }

      v11[2] = v29 + 1;
      sub_100015750( v18,  (uint64_t)v11 + ((*(unsigned __int8 *)(v38 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))
      + *(void *)(v38 + 72) * v29,
        (uint64_t *)&unk_1009AA7A0);
      v12 += v36;
      int64_t v10 = v30 - 1;
    }

    while (v10);
  }

  return v11;
}

uint64_t sub_10035A0D4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A730);
  sub_10000A720(v0, (uint64_t)qword_100A2A730);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000014LL,  0x800000010085F590LL);
}

uint64_t sub_10035A158@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 160);
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = sub_100004AEC(&qword_1009AA648);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10036DBB4, v3, v4, (char *)&type metadata for () + 8, v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10035A1CC(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10035A228, a1, 0LL);
}

uint64_t sub_10035A228()
{
  if (*(void *)(*(void *)(v0 + 16) + 176LL))
  {
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A730);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.info.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Already subscribed to device events.", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_1009AA364);
  *(void *)(v0 + 40) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10035A330;
  return sub_1003649F0();
}

uint64_t sub_10035A330()
{
  return swift_task_switch(sub_10035A384, 0LL, 0LL);
}

uint64_t sub_10035A384()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  uint64_t v4 = swift_allocObject(&unk_1009536B0, 24LL, 7LL);
  swift_weakInit(v4 + 16, v3);
  uint64_t v5 = swift_allocObject(&unk_100953CA0, 113LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v4;
  __int128 v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)v2;
  *(_OWORD *)(v5 + 40) = v6;
  __int128 v8 = *(_OWORD *)(v2 + 48);
  __int128 v7 = *(_OWORD *)(v2 + 64);
  __int128 v9 = *(_OWORD *)(v2 + 73);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v5 + 97) = v9;
  *(_OWORD *)(v5 + 88) = v7;
  *(_OWORD *)(v5 + 72) = v8;
  swift_retain();
  int64_t v10 = sub_1001B142C((void *)v2);
  UUID.init()(v10);
  uint64_t v11 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v1,  &unk_1009AA710,  v5,  &unk_1009AA718,  0LL);
  swift_release();
  dispatch thunk of WorkItemQueue.enqueue(_:)(v11);
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035A49C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 160) = a1;
  *(void *)(v2 + 168) = a2;
  return swift_task_switch(sub_10035A4B4, 0LL, 0LL);
}

uint64_t sub_10035A4B4()
{
  uint64_t v1 = *(void *)(v0 + 160) + 16LL;
  swift_beginAccess(v1, v0 + 96, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 176) = Strong;
  if (!Strong) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v3 = (void *)swift_task_alloc(dword_1009AA34C);
  *(void *)(v0 + 184) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10035A53C;
  return sub_10035ADE4();
}

uint64_t sub_10035A53C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 184LL));
  return swift_task_switch(sub_10035A590, v1, 0LL);
}

uint64_t sub_10035A590()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 120, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 192) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10035A684;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10035A684(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 20Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10035A6E4, v3, 0LL);
}

uint64_t sub_10035A6E4()
{
  uint64_t v1 = *(void *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 200);
    uint64_t v3 = sub_10035A738;
  }

  else
  {
    uint64_t v3 = sub_10035A8D0;
    uint64_t v2 = 0LL;
  }

  return swift_task_switch(v3, v2, 0LL);
}

uint64_t sub_10035A738()
{
  *(void *)(v0 + 208) = *(void *)(*(void *)(v0 + 200) + 136LL);
  swift_retain();
  return swift_task_switch(sub_10035A77C, 0LL, 0LL);
}

uint64_t sub_10035A77C()
{
  uint64_t v2 = v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[27] = v3;
  v3[2] = v1;
  v3[3] = sub_10036E12C;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[28] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10035A828;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10036F1E4,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_10035A828()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 216);
  swift_task_dealloc(*(void *)(*v0 + 224));
  swift_release();
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10035A894, *(void *)(v1 + 200), 0LL);
}

uint64_t sub_10035A894()
{
  return swift_task_switch(sub_10036F2CC, 0LL, 0LL);
}

uint64_t sub_10035A8D0()
{
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2A730);
  sub_1001B142C(v1);
  uint64_t v3 = sub_1001B142C(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 141558275;
    *(void *)(v0 + 144) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    unint64_t v9 = *(void *)(v6 + 48);
    int64_t v10 = *(void **)(v0 + 168);
    if (v9)
    {
      uint64_t v11 = v10[5];
      unint64_t v12 = v9;
    }

    else
    {
      unint64_t v12 = 0xE700000000000000LL;
      uint64_t v11 = 0x6E776F6E6B6E75LL;
    }

    swift_bridgeObjectRetain(v9);
    *(void *)(v0 + 152) = sub_1003F11D4(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    sub_1001B1498(v10);
    sub_1001B1498(v10);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Finished adding connection for context %{private,mask.hash}s.",  (uint8_t *)v7,  0x16u);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    uint64_t v13 = *(void **)(v0 + 168);
    sub_1001B1498(v13);
    sub_1001B1498(v13);
  }

  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10035AAF8()
{
  if (*(void *)(v0 + 192))
  {
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A730);
    oslog = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v3 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Location monitor already started - no-op.", v4, 2u);
      swift_slowDealloc(v4, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v5 = v0;
    *(_BYTE *)(v0 + 200) = 1;
    id v6 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
    uint64_t v7 = (char *)CurrentLocationMonitor.init(mode:desiredAccuracy:)( 0,  *(uint64_t *)&kCLLocationAccuracyNearestTenMeters,  0);
    uint64_t v8 = &v7[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate];
    swift_beginAccess(&v7[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate], v24, 1LL, 0LL);
    *((void *)v8 + 1) = &off_100953660;
    swift_unknownObjectWeakAssign(v8, v5);
    CurrentLocationMonitor.startMonitor()();
    unint64_t v9 = *(void **)(v5 + 192);
    *(void *)(v5 + 192) = v7;
    int64_t v10 = v7;

    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2A730);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Location monitor started.", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = (void **)&v10[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation];
    swift_beginAccess(&v10[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation], v23, 0LL, 0LL);
    uint64_t v17 = *v16;
    if (*v16)
    {
      type metadata accessor for Transaction(0LL);
      uint64_t v18 = swift_allocObject(&unk_100954268, 32LL, 7LL);
      *(void *)(v18 + swift_weakDestroy(v0 + 16) = v5;
      *(void *)(v18 + 24) = v17;
      id v19 = v17;
      uint64_t v20 = v10;
      id v21 = v19;
      swift_retain();
      static Transaction.asyncTask(name:block:)( "LocationFetchService.locationMonitorDidUpdate",  45LL,  2LL,  &unk_1009AA8F0,  v18);
      swift_release();
    }

    else
    {
    }
  }

uint64_t sub_10035ADE4()
{
  v1[16] = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  v1[17] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[18] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[19] = swift_task_alloc(v4);
  v1[20] = swift_task_alloc(v4);
  v1[21] = swift_task_alloc(v4);
  uint64_t Configuration = type metadata accessor for LocationFetchConfiguration(0LL);
  v1[22] = Configuration;
  unint64_t v6 = (*(void *)(*(void *)(Configuration - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[23] = swift_task_alloc(v6);
  v1[24] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v1[25] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v1[26] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[27] = swift_task_alloc(v9);
  v1[28] = swift_task_alloc(v9);
  v1[29] = swift_task_alloc(v9);
  unint64_t v10 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099D8A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[30] = swift_task_alloc(v10);
  v1[31] = swift_task_alloc(v10);
  return swift_task_switch(sub_10035AF0C, v0, 0LL);
}

uint64_t sub_10035AF0C()
{
  if (*(void *)(*(void *)(v0 + 128) + 144LL))
  {
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A730);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetch task pending, not creating a new fetch task.", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    uint64_t v6 = *(void *)(v0 + 240);
    uint64_t v8 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 216);
    uint64_t v11 = *(void *)(v0 + 184);
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v13 = *(void *)(v0 + 160);
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v14 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 248));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v16 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc(v16);
    *(void *)(v0 + 256) = v17;
    uint64_t v18 = sub_100004AEC(&qword_1009AA648);
    void *v17 = v0;
    v17[1] = sub_10035B0E4;
    return unsafeBlocking<A>(_:)(v0 + 112, sub_10036D274, *(void *)(v0 + 128), v18);
  }

uint64_t sub_10035B0E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 256LL));
  swift_release();
  return swift_task_switch(sub_10035B144, v1, 0LL);
}

uint64_t sub_10035B144()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v137 = *(void *)(v1 + 16);
  if (v137)
  {
    uint64_t v139 = *(void *)(v0 + 112);
    int v3 = *(unsigned __int8 *)(v1 + 32);
    uint64_t v2 = (void *)(v1 + 32);
    int v143 = v3;
    uint64_t v5 = (void *)v2[1];
    uint64_t v4 = v2[2];
    uint64_t v7 = (void *)v2[3];
    uint64_t v6 = (void *)v2[4];
    uint64_t v8 = v2[6];
    uint64_t v136 = v2;
    uint64_t v9 = v2[8];
    uint64_t v10 = qword_10099B328;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v7);
    uint64_t v146 = v6;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v10 != -1) {
      goto LABEL_78;
    }
LABEL_3:
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2A730);
    *(void *)(v0 + 264) = v12;
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Scheduling next fetch.", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = *(void *)(v0 + 208);
    uint64_t v138 = *(void *)(v0 + 176);

    id v135 = (id)objc_opt_self(&OBJC_CLASS___NSBundle);
    unint64_t v17 = 0LL;
    uint64_t v159 = v16;
    while (1)
    {
      if (v17 >= *(void *)(v139 + 16))
      {
        __break(1u);
LABEL_78:
        swift_once(&qword_10099B328, sub_10035A0D4);
        goto LABEL_3;
      }

      id v145 = v7;
      unint64_t v142 = v17;
      id v21 = (unsigned __int8 *)&v136[12 * v17];
      int v140 = *v21;
      uint64_t v22 = *((void *)v21 + 1);
      uint64_t v23 = *((void *)v21 + 2);
      uint64_t v24 = *((void *)v21 + 3);
      uint64_t v25 = *((void *)v21 + 4);
      unsigned __int8 v133 = v21[57];
      unsigned __int8 v134 = v21[56];
      uint64_t v26 = *((void *)v21 + 8);
      *(void *)(v0 + 272) = v26;
      uint64_t v27 = *((void *)v21 + 6);
      unint64_t v28 = v5;
      uint64_t v29 = v5[2];
      uint64_t v148 = v22;
      uint64_t v149 = v28;
      uint64_t v30 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      uint64_t v144 = v24;
      swift_bridgeObjectRetain(v24);
      uint64_t v147 = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v27);
      uint64_t v141 = v26;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v149);
      uint64_t v156 = v30;
      __int128 v161 = (void *)Set.init(minimumCapacity:)(v29);
      uint64_t v152 = v29;
      if (v29)
      {
        uint64_t v31 = 0LL;
        uint64_t v150 = (uint64_t)v149
             + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
        uint64_t v32 = *(void *)(v16 + 72);
        uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
        while (1)
        {
          uint64_t v39 = *(void *)(v0 + 248);
          uint64_t v40 = *(void *)(v0 + 200);
          v33(v39, v150 + v31 * v32, v40);
          __int128 v157 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
          v157(v39, 0LL, 1LL, v40);
          uint64_t v154 = v31;
          uint64_t v41 = *(void *)(v0 + 200);
          (*(void (**)(void, void, uint64_t))(v16 + 32))( *(void *)(v0 + 232),  *(void *)(v0 + 248),  v41);
          uint64_t v42 = v161[5];
          swift_bridgeObjectRetain(v161);
          uint64_t v43 = dispatch thunk of Hashable._rawHashValue(seed:)(v42, v41, v156);
          uint64_t v44 = -1LL << *((_BYTE *)v161 + 32);
          unint64_t v45 = v43 & ~v44;
          if (((*(void *)((char *)v161 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v45) & 1) != 0)
          {
            uint64_t v46 = ~v44;
            while (1)
            {
              uint64_t v48 = *(void *)(v0 + 224);
              uint64_t v47 = *(void *)(v0 + 232);
              uint64_t v49 = *(void *)(v0 + 200);
              v33(v48, v161[6] + v45 * v32, v49);
              uint64_t v50 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              LOBYTE(v47) = dispatch thunk of static Equatable.== infix(_:_:)(v48, v47, v49, v50);
              uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
              v38(v48, v49);
              if ((v47 & 1) != 0) {
                break;
              }
              unint64_t v45 = (v45 + 1) & v46;
              uint64_t v16 = v159;
            }

            swift_bridgeObjectRelease();
          }

          else
          {
LABEL_11:
            uint64_t v35 = *(void *)(v0 + 224);
            uint64_t v34 = *(void *)(v0 + 232);
            uint64_t v36 = *(void *)(v0 + 200);
            swift_bridgeObjectRelease();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v161);
            v33(v35, v34, v36);
            v164[0] = v161;
            sub_1000C9164(v35, v45, isUniquelyReferenced_nonNull_native);
            __int128 v161 = v164[0];
            swift_bridgeObjectRelease();
            uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
          }

          uint64_t v31 = v154 + 1;
          v38(*(void *)(v0 + 232), *(void *)(v0 + 200));
          uint64_t v16 = v159;
          if (v154 + 1 == v152) {
            goto LABEL_21;
          }
        }
      }

      else
      {
        __int128 v157 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
LABEL_21:
        v157(*(void *)(v0 + 248), 1LL, 1LL, *(void *)(v0 + 200));
      }

      swift_bridgeObjectRelease();
      uint64_t v153 = *(void *)(v148 + 16);
      if (v153)
      {
        uint64_t v151 = v148 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
        __n128 v51 = swift_bridgeObjectRetain(v148);
        uint64_t v52 = 0LL;
        uint64_t v53 = *(void *)(v16 + 72);
        uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v16 + 16);
        while (1)
        {
          uint64_t v60 = *(void *)(v0 + 240);
          uint64_t v61 = *(void *)(v0 + 200);
          v54(v60, v151 + v52 * v53, v61, v51);
          v157(v60, 0LL, 1LL, v61);
          uint64_t v155 = v52;
          uint64_t v62 = *(void *)(v0 + 200);
          (*(void (**)(void, void, uint64_t))(v16 + 32))( *(void *)(v0 + 216),  *(void *)(v0 + 240),  v62);
          uint64_t v63 = v161[5];
          swift_bridgeObjectRetain(v161);
          uint64_t v64 = dispatch thunk of Hashable._rawHashValue(seed:)(v63, v62, v156);
          uint64_t v65 = -1LL << *((_BYTE *)v161 + 32);
          unint64_t v66 = v64 & ~v65;
          if (((*(void *)((char *)v161 + ((v66 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v66) & 1) != 0)
          {
            uint64_t v67 = ~v65;
            while (1)
            {
              uint64_t v68 = *(void *)(v0 + 216);
              uint64_t v69 = *(void *)(v0 + 224);
              uint64_t v70 = *(void *)(v0 + 200);
              ((void (*)(uint64_t, unint64_t, uint64_t))v54)(v69, v161[6] + v66 * v53, v70);
              uint64_t v71 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              LOBYTE(v68) = dispatch thunk of static Equatable.== infix(_:_:)(v69, v68, v70, v71);
              unint64_t v59 = *(void (**)(uint64_t, uint64_t))(v159 + 8);
              v59(v69, v70);
              if ((v68 & 1) != 0) {
                break;
              }
              unint64_t v66 = (v66 + 1) & v67;
            }

            swift_bridgeObjectRelease();
            uint64_t v16 = v159;
          }

          else
          {
LABEL_24:
            uint64_t v55 = *(void *)(v0 + 216);
            uint64_t v56 = *(void *)(v0 + 224);
            uint64_t v57 = *(void *)(v0 + 200);
            swift_bridgeObjectRelease();
            char v58 = swift_isUniquelyReferenced_nonNull_native(v161);
            ((void (*)(uint64_t, uint64_t, uint64_t))v54)(v56, v55, v57);
            v164[0] = v161;
            sub_1000C9164(v56, v66, v58);
            __int128 v161 = v164[0];
            swift_bridgeObjectRelease();
            uint64_t v16 = v159;
            unint64_t v59 = *(void (**)(uint64_t, uint64_t))(v159 + 8);
          }

          uint64_t v52 = v155 + 1;
          v59(*(void *)(v0 + 216), *(void *)(v0 + 200));
          if (v155 + 1 == v153) {
            goto LABEL_34;
          }
        }
      }

      else
      {
        __n128 v51 = swift_bridgeObjectRetain(v148);
LABEL_34:
        ((void (*)(void, uint64_t, uint64_t, void, __n128))v157)( *(void *)(v0 + 240),  1LL,  1LL,  *(void *)(v0 + 200),  v51);
      }

      swift_bridgeObjectRelease();
      uint64_t v72 = v145[2];
      type metadata accessor for SPBeaconType(0LL);
      sub_100007864( &qword_10099BC78,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType,  (uint64_t)&unk_1007E09EC);
      swift_bridgeObjectRetain(v145);
      uint64_t v73 = Set.init(minimumCapacity:)(v72);
      uint64_t v163 = v73;
      uint64_t v74 = v145[2];
      if (v74)
      {
        for (uint64_t i = 0LL; i != v74; ++i)
        {
          uint64_t v76 = (void *)v145[i + 4];
          sub_1000BF788(v164, v76);
        }

        swift_bridgeObjectRelease();
        uint64_t v77 = v163;
      }

      else
      {
        uint64_t v77 = v73;
        swift_bridgeObjectRelease();
      }

      uint64_t v78 = *(void *)(v144 + 16);
      if (v78)
      {
        swift_bridgeObjectRetain(v144);
        for (uint64_t j = 0LL; j != v78; ++j)
        {
          unint64_t v80 = *(void **)(v144 + 8 * j + 32);
          sub_1000BF788(v164, v80);
        }

        swift_bridgeObjectRelease();
      }

      uint64_t v158 = v77;
      uint64_t v81 = v146[2];
      sub_1001B1D78();
      swift_bridgeObjectRetain(v146);
      uint64_t v82 = Set.init(minimumCapacity:)(v81);
      uint64_t v83 = (void *)v82;
      uint64_t v84 = v146[2];
      if (v84)
      {
        uint64_t v85 = 0LL;
        uint64_t v86 = (char *)(v82 + 56);
        while (1)
        {
          Swift::UInt v87 = *((unsigned __int8 *)v146 + v85++ + 32);
          Hasher.init(_seed:)(v164, v83[5]);
          Hasher._combine(_:)(v87);
          Swift::Int v88 = Hasher._finalize()();
          uint64_t v89 = -1LL << *((_BYTE *)v83 + 32);
          unint64_t v90 = v88 & ~v89;
          if (((*(void *)&v86[(v90 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v90) & 1) == 0) {
            goto LABEL_53;
          }
          uint64_t v91 = v83[6];
          if (*(unsigned __int8 *)(v91 + v90) == (_DWORD)v87)
          {
LABEL_46:
            if (v85 == v84) {
              break;
            }
          }

          else
          {
            uint64_t v92 = ~v89;
            while (1)
            {
              unint64_t v90 = (v90 + 1) & v92;
              if (((*(void *)&v86[(v90 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v90) & 1) == 0) {
                break;
              }
            }

uint64_t sub_10035BF24()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 320LL));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10035BFCC, v1, 0LL);
}

uint64_t sub_10035BFCC()
{
  uint64_t v1 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 144) + 16LL))( *(void *)(v0 + 152),  *(void *)(v0 + 168),  *(void *)(v0 + 136));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 136);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v7 = 134217984;
    *(double *)(v0 + 120) = Date.timeIntervalSinceNow.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v7 + 4, v7 + 12);
    v4(v5, v6);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Next fetch scheduled in %f seconds.", v7, 0xCu);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v10 = *(void *)(v0 + 136);

    v8(v9, v10);
  }

  (*(void (**)(void, void))(v0 + 312))(*(void *)(v0 + 168), *(void *)(v0 + 136));
  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v13 = *(void *)(v0 + 224);
  uint64_t v12 = *(void *)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 216);
  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 192);
  uint64_t v18 = *(void *)(v0 + 160);
  uint64_t v17 = *(void *)(v0 + 168);
  uint64_t v19 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035C174(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[5] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  v3[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[7] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v3[8] = v7;
  void v3[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10035C1FC, v2, 0LL);
}

uint64_t sub_10035C1FC()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v27 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  unint64_t v10 = (v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = swift_allocObject(&unk_100954218, v11 + 89, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v9, v1, v3);
  *(void *)(v12 + v10) = v5;
  uint64_t v13 = (_OWORD *)(v12 + v11);
  __int128 v14 = *(_OWORD *)(v6 + 16);
  *uint64_t v13 = *(_OWORD *)v6;
  v13[1] = v14;
  __int128 v16 = *(_OWORD *)(v6 + 48);
  __int128 v15 = *(_OWORD *)(v6 + 64);
  __int128 v17 = *(_OWORD *)(v6 + 32);
  *(_OWORD *)((char *)v13 + 73) = *(_OWORD *)(v6 + 73);
  v13[3] = v16;
  v13[4] = v15;
  v13[2] = v17;
  swift_retain();
  uint64_t v18 = sub_1001B142C((void *)v6);
  UUID.init()(v18);
  uint64_t v19 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v27,  &unk_1009AA8A8,  v12,  &unk_1009AA8B0,  0LL);
  *(void *)(v0 + 80) = v19;
  uint64_t v20 = *(void *)(v5 + 144);
  *(void *)(v0 + 88) = v20;
  if (v20)
  {
    uint64_t v21 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel() + 1);
    swift_retain();
    uint64_t v22 = (void *)swift_task_alloc(v21);
    *(void *)(v0 + 96) = v22;
    void *v22 = v0;
    v22[1] = sub_10035C3D0;
    return v28();
  }

  else
  {
    uint64_t v24 = *(void *)(v0 + 72);
    uint64_t v25 = *(void *)(v0 + 40);
    *(void *)(*(void *)(v0 + 32) + 144LL) = v19;
    uint64_t v26 = swift_retain();
    dispatch thunk of WorkItemQueue.enqueue(_:)(v26);
    swift_release();
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10035C3D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 96LL));
  swift_release();
  return swift_task_switch(sub_10035C430, v1, 0LL);
}

uint64_t sub_10035C430()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v2 + 144);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  *(void *)(v2 + 144) = v4;
  swift_retain(v4);
  swift_release(v3);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v4);
  swift_release(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035C4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a3;
  v4[5] = a4;
  void v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  void v4[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ContinuousClock(0LL);
  v4[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[8] = v7;
  void v4[9] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10035C530, 0LL, 0LL);
}

uint64_t sub_10035C530(uint64_t a1)
{
  double v2 = Date.timeIntervalSinceNow.getter(a1);
  uint64_t v3 = static Duration.milliseconds(_:)(v2 * 1000.0);
  uint64_t v5 = v4;
  ContinuousClock.init()(v3);
  uint64_t v8 = (char *)&dword_1009A61C0 + dword_1009A61C0;
  uint64_t v6 = (void *)swift_task_alloc(unk_1009A61C4);
  *(void *)(v1 + 80) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10035C5DC;
  return ((uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t))v8)(v3, v5, 0LL, 0LL, 1LL);
}

uint64_t sub_10035C5DC()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(*v1 + 56);
  uint64_t v6 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if (v0)
  {
    uint64_t v7 = sub_10035C7EC;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v10 = type metadata accessor for WorkItemQueue.WorkItem(0LL);
    *(void *)(v2 + 96) = v10;
    uint64_t v11 = sub_100007864( &qword_1009AA8B8,  (uint64_t (*)(uint64_t))&type metadata accessor for WorkItemQueue.WorkItem,  (uint64_t)&protocol conformance descriptor for WorkItemQueue.WorkItem);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(v10, v11);
    uint64_t v14 = v13;
    uint64_t v7 = sub_10035C6B0;
    uint64_t v8 = v12;
    uint64_t v9 = v14;
  }

  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_10035C6B0()
{
  *(_BYTE *)(v0 + 104) = dispatch thunk of WorkItemQueue.WorkItem.isCancelled.getter() & 1;
  return swift_task_switch(sub_10035C6F4, 0LL, 0LL);
}

uint64_t sub_10035C6F4()
{
  if ((*(_BYTE *)(v0 + 104) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = swift_allocObject(&unk_100954240, 113LL, 7LL);
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = v3;
    __int128 v5 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)v2;
    *(_OWORD *)(v4 + 40) = v5;
    __int128 v7 = *(_OWORD *)(v2 + 48);
    __int128 v6 = *(_OWORD *)(v2 + 64);
    __int128 v8 = *(_OWORD *)(v2 + 73);
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v4 + 97) = v8;
    *(_OWORD *)(v4 + 88) = v6;
    *(_OWORD *)(v4 + 72) = v7;
    swift_retain();
    uint64_t v9 = sub_1001B142C((void *)v2);
    UUID.init()(v9);
    uint64_t v10 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v1,  &unk_1009AA8C8,  v4,  &unk_1009AA8D0,  0LL);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v10);
    swift_release();
  }

  uint64_t v11 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035C7EC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035C82C(uint64_t a1, uint64_t a2)
{
  __int128 v5 = (void *)swift_task_alloc(dword_1009AA35C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000136E8;
  v5[16] = a2;
  v5[17] = a1;
  return swift_task_switch(sub_10035C8A8, a1, 0LL);
}

uint64_t sub_10035C890(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return swift_task_switch(sub_10035C8A8, v1, 0LL);
}

uint64_t sub_10035C8A8()
{
  uint64_t v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 144) = v2;
  uint64_t v3 = sub_100004AEC(&qword_1009AA648);
  *uint64_t v2 = v0;
  v2[1] = sub_10035C924;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_10036D274, *(void *)(v0 + 136), v3);
}

uint64_t sub_10035C924()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 144LL));
  swift_release();
  return swift_task_switch(sub_10035C980, v1, 0LL);
}

uint64_t sub_10035C980()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v32 = (__int128 *)(v0 + 7);
    uint64_t v30 = v0 + 2;
    uint64_t v31 = v0 + 12;
    swift_bridgeObjectRetain(v1);
    uint64_t v33 = v1;
    uint64_t v3 = (uint64_t *)(v1 + 48);
    while (1)
    {
      uint64_t v5 = v3[4];
      if (v5)
      {
        uint64_t v7 = *(v3 - 1);
        uint64_t v6 = *v3;
        uint64_t v8 = v3[1];
        uint64_t v9 = v3[2];
        uint64_t v10 = v3[3];
        uint64_t v11 = v3[6];
        if (v10 == 0xD000000000000017LL && v5 == 0x800000010085F570LL) {
          break;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v3[3], v3[4], 0xD000000000000017LL, 0x800000010085F570LL, 0LL) & 1) != 0) {
          break;
        }
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRetain(v6);
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v5);
        swift_bridgeObjectRetain(v11);
        BOOL v4 = sub_1006E6970(v10, v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4) {
          break;
        }
      }

      v3 += 12;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        uint64_t v0 = v34;
        goto LABEL_23;
      }
    }

    swift_bridgeObjectRelease_n(v33, 2LL);
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2A730);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      __int128 v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Location fetch service running fetch task - fetching locations.",  v16,  2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    uint64_t v17 = v34[17];

    sub_10035AAF8();
    if (*(void *)(v17 + 176))
    {
      uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
      os_log_type_t v20 = static os_log_type_t.info.getter(v19);
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Already subscribed to device events.", v21, 2u);
        swift_slowDealloc(v21, -1LL, -1LL);
      }
    }

    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v31, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v32, (uint64_t *)&unk_10099FA80);
    if (v34[10])
    {
      sub_100012EC0(v32, (uint64_t)v30);
      sub_100012ED8(v30, v34[5]);
      uint64_t v35 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
      uint64_t v23 = (uint64_t **)swift_task_alloc(unk_10099C894);
      v34[19] = (uint64_t)v23;
      *uint64_t v23 = v34;
      v23[1] = (uint64_t *)sub_10035CFAC;
      return v35();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
LABEL_23:
    swift_bridgeObjectRelease();
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2A730);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v28 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Location fetch service fetch task running while all clients suspended - not fetching locations.",  v28,  2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    sub_1003648F8();
    sub_100365200();
    *(void *)(v0[17] + 144) = 0LL;
    swift_release();
    uint64_t v29 = (uint64_t **)swift_task_alloc(dword_1009AA34C);
    v0[27] = (uint64_t)v29;
    *uint64_t v29 = v0;
    v29[1] = (uint64_t *)sub_10035D42C;
    return sub_10035ADE4();
  }

  return result;
}

uint64_t sub_10035CFAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 16Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10035D00C, v3, 0LL);
}

uint64_t sub_10035D00C()
{
  uint64_t v1 = v0[20];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  if (v1) {
    return swift_task_switch(sub_10035D104, v0[20], 0LL);
  }
  uint64_t v3 = (void *)v0[17];
  BOOL v4 = (int *)v3[14];
  v0[24] = v4;
  if (v4)
  {
    v0[25] = v3[15];
    uint64_t v5 = v4[1];
    uint64_t v8 = (uint64_t (*)(void))((char *)v4 + *v4);
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc(v5);
    v0[26] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10035D364;
    return v8(v0[16]);
  }

  else
  {
    v3[18] = 0LL;
    swift_release();
    uint64_t v7 = (void *)swift_task_alloc(dword_1009AA34C);
    v0[27] = v7;
    void *v7 = v0;
    v7[1] = sub_10035D42C;
    return sub_10035ADE4();
  }

uint64_t sub_10035D104()
{
  *(void *)(v0 + 168) = *(void *)(*(void *)(v0 + 160) + 136LL);
  swift_retain();
  return swift_task_switch(sub_10035D148, 0LL, 0LL);
}

uint64_t sub_10035D148()
{
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[22] = v3;
  v3[2] = v1;
  v3[3] = sub_10036E12C;
  v3[4] = v2;
  BOOL v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[23] = v4;
  *BOOL v4 = v0;
  v4[1] = sub_10035D1F4;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10036F1E4,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_10035D1F4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176);
  swift_task_dealloc(*(void *)(*v0 + 184));
  swift_release();
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10035D260, *(void *)(v1 + 160), 0LL);
}

uint64_t sub_10035D260()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_release();
  return swift_task_switch(sub_10035D2A0, v1, 0LL);
}

uint64_t sub_10035D2A0()
{
  uint64_t v1 = (void *)v0[17];
  uint64_t v2 = (int *)v1[14];
  v0[24] = v2;
  if (v2)
  {
    v0[25] = v1[15];
    uint64_t v3 = v2[1];
    uint64_t v7 = (uint64_t (*)(void))((char *)v2 + *v2);
    swift_retain();
    BOOL v4 = (void *)swift_task_alloc(v3);
    v0[26] = v4;
    *BOOL v4 = v0;
    v4[1] = sub_10035D364;
    return v7(v0[16]);
  }

  else
  {
    v1[18] = 0LL;
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc(dword_1009AA34C);
    v0[27] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10035D42C;
    return sub_10035ADE4();
  }

uint64_t sub_10035D364()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 192LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 136LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 208LL));
  sub_10002214C(v2, v1);
  return swift_task_switch(sub_10035D3D4, v3, 0LL);
}

uint64_t sub_10035D3D4()
{
  *(void *)(*(void *)(v0 + 136) + 144LL) = 0LL;
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc(dword_1009AA34C);
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10035D42C;
  return sub_10035ADE4();
}

uint64_t sub_10035D42C()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 216));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10035D474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v16, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v11 = result;
    sub_100013044(a2, (uint64_t)v15);
    sub_10001DC4C( a1,  (uint64_t)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  type metadata accessor for BeaconEstimatedLocation);
    uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v13 = (v12 + 64) & ~v12;
    uint64_t v14 = swift_allocObject(&unk_100953D18, v13 + v8, v12 | 7);
    *(void *)(v14 + swift_weakDestroy(v0 + 16) = v11;
    sub_100012EC0(v15, v14 + 24);
    sub_10002218C((uint64_t)v9, v14 + v13, type metadata accessor for BeaconEstimatedLocation);
    swift_retain();
    unsafeFromAsyncTask<A>(_:)(&unk_1009AA758, v14, (char *)&type metadata for () + 8);
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_10035D5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[122] = a4;
  v4[121] = a3;
  v4[120] = a2;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009AA760);
  v4[123] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[124] = v7;
  v4[125] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A48E0);
  v4[126] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BeaconEstimatedLocation(0LL);
  v4[127] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[128] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[129] = swift_task_alloc(v11);
  v4[130] = swift_task_alloc(v11);
  v4[131] = swift_task_alloc(v11);
  v4[132] = swift_task_alloc(v11);
  v4[133] = swift_task_alloc(v11);
  v4[134] = swift_task_alloc(v11);
  v4[135] = swift_task_alloc(v11);
  v4[136] = swift_task_alloc(v11);
  v4[137] = swift_task_alloc(v11);
  v4[138] = swift_task_alloc(v11);
  v4[139] = swift_task_alloc(v11);
  unint64_t v12 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099D8A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[140] = swift_task_alloc(v12);
  v4[141] = swift_task_alloc(v12);
  v4[142] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  v4[143] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v4[144] = v14;
  uint64_t v15 = *(void *)(v14 + 64);
  v4[145] = v15;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[146] = swift_task_alloc(v16);
  v4[147] = swift_task_alloc(v16);
  v4[148] = swift_task_alloc(v16);
  v4[149] = swift_task_alloc(v16);
  v4[150] = swift_task_alloc(v16);
  v4[151] = swift_task_alloc(v16);
  uint64_t v17 = type metadata accessor for Date(0LL);
  v4[152] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v4[153] = v18;
  v4[154] = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10035D7B4, a2, 0LL);
}

uint64_t sub_10035D7B4()
{
  *(_BYTE *)(v0 + 1568) = *(_BYTE *)(*(void *)(v0 + 960) + 200LL);
  return swift_task_switch(sub_10035D7D4, 0LL, 0LL);
}

uint64_t sub_10035D7D4()
{
  if (*(_BYTE *)(v0 + 1568) == 1) {
    return swift_task_switch(sub_10035DB8C, *(void *)(v0 + 960), 0LL);
  }
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v2 = *(void *)(v0 + 968);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000A720(v3, (uint64_t)qword_100A2A730);
  uint64_t v4 = sub_100013044(v2, v0 + 408);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 1200);
    uint64_t v37 = *(void *)(v0 + 1152);
    uint64_t v8 = *(void *)(v0 + 1144);
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = v10;
    *(_DWORD *)uint64_t v9 = 141558275;
    *(void *)(v0 + 912) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 912, v0 + 920, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v12 = *(void *)(v0 + 432);
    uint64_t v11 = *(void *)(v0 + 440);
    sub_100012ED8((void *)(v0 + 408), v12);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 8) + 8LL) + 32LL))(v12);
    uint64_t v13 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v8, v13);
    unint64_t v16 = v15;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v7, v8);
    *(void *)(v0 + 904) = sub_1003F11D4(v14, v16, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 904, v0 + 912, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 408));
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Ignoring beacon location updates while not processing - beacon: %{private,mask.hash}s.",  (uint8_t *)v9,  0x16u);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 408));
  }

  uint64_t v17 = *(void *)(v0 + 1208);
  uint64_t v18 = *(void *)(v0 + 1200);
  uint64_t v19 = *(void *)(v0 + 1192);
  uint64_t v20 = *(void *)(v0 + 1184);
  uint64_t v21 = *(void *)(v0 + 1176);
  uint64_t v22 = *(void *)(v0 + 1168);
  uint64_t v23 = *(void *)(v0 + 1136);
  uint64_t v24 = *(void *)(v0 + 1128);
  uint64_t v25 = *(void *)(v0 + 1120);
  uint64_t v26 = *(void *)(v0 + 1112);
  uint64_t v27 = *(void *)(v0 + 1104);
  uint64_t v28 = *(void *)(v0 + 1096);
  uint64_t v29 = *(void *)(v0 + 1088);
  uint64_t v30 = *(void *)(v0 + 1080);
  uint64_t v31 = *(void *)(v0 + 1072);
  uint64_t v32 = *(void *)(v0 + 1064);
  uint64_t v33 = *(void *)(v0 + 1056);
  uint64_t v34 = *(void *)(v0 + 1048);
  uint64_t v35 = *(void *)(v0 + 1040);
  uint64_t v36 = *(void *)(v0 + 1032);
  uint64_t v38 = *(void *)(v0 + 1008);
  uint64_t v39 = *(void *)(v0 + 1000);
  swift_task_dealloc(*(void *)(v0 + 1232));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035DB8C()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 848, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 248, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 272))
  {
    sub_100012EC0((__int128 *)(v0 + 248), v0 + 168);
    sub_100012ED8((void *)(v0 + 168), *(void *)(v0 + 192));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 1240) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10035DC78;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10035DC78(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1240LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 960LL);
  *(void *)(*(void *)v1 + 1248LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10035DCD8, v3, 0LL);
}

uint64_t sub_10035DCD8()
{
  uint64_t v1 = v0 + 21;
  if (v0[156])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1009B639C);
    v0[157] = (uint64_t)v2;
    *uint64_t v2 = v0;
    v2[1] = (uint64_t *)sub_10035DD58;
    return sub_1005EBBC8(v0[121]);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_10035E678, 0LL, 0LL);
  }

uint64_t sub_10035DD58(double a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1256LL);
  *(double *)(*(void *)v1 + 1264LL) = a1;
  swift_task_dealloc(v2);
  swift_release();
  return swift_task_switch(sub_10035DDB8, 0LL, 0LL);
}

uint64_t sub_10035DDB8()
{
  double v1 = *(double *)(v0 + 1264);
  uint64_t v2 = *(void *)(v0 + 1016);
  uint64_t v3 = *(void *)(v0 + 976);
  uint64_t v4 = *(void **)(v0 + 968);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AA770);
  uint64_t inited = swift_initStackObject(v5, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 56) = v2;
  *(void *)(inited + 64) = &off_10093F780;
  uint64_t v7 = sub_10000A7C8((void *)(inited + 32));
  sub_10001DC4C(v3, (uint64_t)v7, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v9 = v4[3];
  uint64_t v8 = v4[4];
  sub_100012ED8(v4, v9);
  uint64_t v10 = sub_1006D3204(v9, v8);
  id v11 = sub_1006D4564(inited, v10, v1);
  *(void *)(v0 + 1272) = v11;
  swift_setDeallocating(inited);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009B1380);
  swift_arrayDestroy(inited + 32, 1LL, v12);
  if (v11)
  {
    uint64_t v13 = *(void *)(v0 + 1232);
    uint64_t v14 = *(void *)(v0 + 1224);
    uint64_t v98 = *(void *)(v0 + 1216);
    uint64_t v101 = *(void *)(v0 + 1152);
    uint64_t v103 = *(void *)(v0 + 1144);
    uint64_t v15 = *(void *)(v0 + 1136);
    uint64_t v16 = *(void *)(v0 + 1016);
    uint64_t v17 = *(void *)(v0 + 976);
    uint64_t v18 = *(void **)(v0 + 968);
    id v19 = [v11 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v19);

    [v11 coordinate];
    double v21 = v20;
    [v11 coordinate];
    double v23 = v22;
    [v11 horizontalAccuracy];
    double v25 = v24;
    uint64_t v26 = *(int *)(v16 + 44);
    *(_DWORD *)(v0 + 1560) = v26;
    uint64_t v27 = (void *)sub_1006D4870(*(_BYTE *)(v17 + v26));
    id v28 = objc_allocWithZone(&OBJC_CLASS___SPBeaconLocation);
    id v29 = v27;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 1280) = [v28 initWithTimestamp:isa latitude:v29 longitude:v21 horizontalAccuracy:v23 source:v25];

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v98);
    uint64_t v31 = v4[3];
    uint64_t v32 = v4[4];
    sub_100012ED8(v18, v31);
    (*(void (**)(uint64_t, uint64_t))(v32 + 192))(v31, v32);
    uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
    *(void *)(v0 + 1288) = v33;
    if (v33(v15, 1LL, v103) != 1)
    {
      uint64_t v66 = *(void *)(v0 + 1208);
      uint64_t v67 = *(void *)(v0 + 1144);
      uint64_t v68 = *(void *)(v0 + 1136);
      uint64_t v69 = *(void *)(v0 + 960);
      uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1152) + 32LL);
      *(void *)(v0 + 1296) = v70;
      v70(v66, v68, v67);
      return swift_task_switch(sub_10035E9F4, v69, 0LL);
    }

    uint64_t v34 = (__int128 *)(v0 + 488);
    sub_100015794(*(void *)(v0 + 1136), &qword_10099D8A0);
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v35 = *(void *)(v0 + 968);
    uint64_t v36 = type metadata accessor for Logger(0LL);
    sub_10000A720(v36, (uint64_t)qword_100A2A730);
    uint64_t v37 = sub_100013044(v35, v0 + 448);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.info.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = *(void *)(v0 + 1200);
      uint64_t v99 = *(void *)(v0 + 1152);
      uint64_t v41 = *(void *)(v0 + 1144);
      uint64_t v42 = swift_slowAlloc(22LL, -1LL);
      uint64_t v106 = swift_slowAlloc(32LL, -1LL);
      uint64_t v43 = v106;
      *(_DWORD *)uint64_t v42 = 141558275;
      *(void *)(v0 + 928) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v42 + 4, v42 + 12);
      *(_WORD *)(v42 + 12) = 2081;
      uint64_t v45 = *(void *)(v0 + 472);
      uint64_t v44 = *(void *)(v0 + 480);
      sub_100012ED8((void *)(v0 + 448), v45);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v44 + 8) + 8LL) + 32LL))(v45);
      uint64_t v46 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v41, v46);
      unint64_t v49 = v48;
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v40, v41);
      *(void *)(v0 + 920) = sub_1003F11D4(v47, v49, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v42 + 14, v42 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.",  (uint8_t *)v42,  0x16u);
      swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v50 = v43;
      uint64_t v34 = (__int128 *)(v0 + 488);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
    }

    uint64_t v72 = *(void **)(v0 + 1280);
    uint64_t v73 = *(void **)(v0 + 1272);
    uint64_t v74 = *(void *)(v0 + 968);
    uint64_t v75 = *(void *)(*(void *)(v0 + 960) + 160LL);
    char v76 = *(_BYTE *)(*(void *)(v0 + 976) + *(int *)(v0 + 1560));
    type metadata accessor for Transaction(0LL);
    sub_100013044(v74, (uint64_t)v34);
    uint64_t v77 = swift_allocObject(&unk_100953D40, 73LL, 7LL);
    sub_100012EC0(v34, v77 + 16);
    *(void *)(v77 + 56) = v75;
    *(void *)(v77 + 64) = v72;
    *(_BYTE *)(v77 + 72) = v76;
    id v78 = v72;
    swift_retain();
    static Transaction.asyncTask(name:block:)( "LocationFetchServiceConnections.updateLocations:beacon:",  55LL,  2LL,  &unk_1009AA788,  v77);
    swift_release();
  }

  else
  {
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v51 = *(void *)(v0 + 968);
    uint64_t v52 = type metadata accessor for Logger(0LL);
    sub_10000A720(v52, (uint64_t)qword_100A2A730);
    uint64_t v53 = sub_100013044(v51, v0 + 288);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = *(void *)(v0 + 1200);
      uint64_t v104 = *(void *)(v0 + 1152);
      uint64_t v57 = *(void *)(v0 + 1144);
      uint64_t v58 = swift_slowAlloc(22LL, -1LL);
      uint64_t v59 = swift_slowAlloc(32LL, -1LL);
      uint64_t v106 = v59;
      *(_DWORD *)uint64_t v58 = 141558275;
      *(void *)(v0 + 944) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 944, v0 + 952, v58 + 4, v58 + 12);
      *(_WORD *)(v58 + 12) = 2081;
      uint64_t v61 = *(void *)(v0 + 312);
      uint64_t v60 = *(void *)(v0 + 320);
      sub_100012ED8((void *)(v0 + 288), v61);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v60 + 8) + 8LL) + 32LL))(v61);
      uint64_t v62 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v57, v62);
      unint64_t v65 = v64;
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v56, v57);
      *(void *)(v0 + 936) = sub_1003F11D4(v63, v65, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 288));
      _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "Could not produce filtered location for beacon %{private,mask.hash}s.",  (uint8_t *)v58,  0x16u);
      swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 288));
    }
  }

  uint64_t v79 = *(void *)(v0 + 1208);
  uint64_t v80 = *(void *)(v0 + 1200);
  uint64_t v81 = *(void *)(v0 + 1192);
  uint64_t v82 = *(void *)(v0 + 1184);
  uint64_t v83 = *(void *)(v0 + 1176);
  uint64_t v84 = *(void *)(v0 + 1168);
  uint64_t v85 = *(void *)(v0 + 1136);
  uint64_t v86 = *(void *)(v0 + 1128);
  uint64_t v87 = *(void *)(v0 + 1120);
  uint64_t v88 = *(void *)(v0 + 1112);
  uint64_t v89 = *(void *)(v0 + 1104);
  uint64_t v90 = *(void *)(v0 + 1096);
  uint64_t v91 = *(void *)(v0 + 1088);
  uint64_t v92 = *(void *)(v0 + 1080);
  uint64_t v93 = *(void *)(v0 + 1072);
  uint64_t v94 = *(void *)(v0 + 1064);
  uint64_t v95 = *(void *)(v0 + 1056);
  uint64_t v96 = *(void *)(v0 + 1048);
  uint64_t v97 = *(void *)(v0 + 1040);
  uint64_t v100 = *(void *)(v0 + 1032);
  uint64_t v102 = *(void *)(v0 + 1008);
  uint64_t v105 = *(void *)(v0 + 1000);
  swift_task_dealloc(*(void *)(v0 + 1232));
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v105);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035E678()
{
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v1 = *(void *)(v0 + 968);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2A730);
  uint64_t v3 = sub_100013044(v1, v0 + 288);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 1200);
    uint64_t v37 = *(void *)(v0 + 1152);
    uint64_t v7 = *(void *)(v0 + 1144);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = v9;
    *(_DWORD *)uint64_t v8 = 141558275;
    *(void *)(v0 + 944) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 944, v0 + 952, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    uint64_t v11 = *(void *)(v0 + 312);
    uint64_t v10 = *(void *)(v0 + 320);
    sub_100012ED8((void *)(v0 + 288), v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8LL) + 32LL))(v11);
    uint64_t v12 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v7, v12);
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v6, v7);
    *(void *)(v0 + 936) = sub_1003F11D4(v13, v15, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 288));
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Could not produce filtered location for beacon %{private,mask.hash}s.",  (uint8_t *)v8,  0x16u);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 288));
  }

  uint64_t v16 = *(void *)(v0 + 1208);
  uint64_t v17 = *(void *)(v0 + 1200);
  uint64_t v18 = *(void *)(v0 + 1192);
  uint64_t v19 = *(void *)(v0 + 1184);
  uint64_t v20 = *(void *)(v0 + 1176);
  uint64_t v21 = *(void *)(v0 + 1168);
  uint64_t v22 = *(void *)(v0 + 1136);
  uint64_t v23 = *(void *)(v0 + 1128);
  uint64_t v24 = *(void *)(v0 + 1120);
  uint64_t v26 = *(void *)(v0 + 1112);
  uint64_t v27 = *(void *)(v0 + 1104);
  uint64_t v28 = *(void *)(v0 + 1096);
  uint64_t v29 = *(void *)(v0 + 1088);
  uint64_t v30 = *(void *)(v0 + 1080);
  uint64_t v31 = *(void *)(v0 + 1072);
  uint64_t v32 = *(void *)(v0 + 1064);
  uint64_t v33 = *(void *)(v0 + 1056);
  uint64_t v34 = *(void *)(v0 + 1048);
  uint64_t v35 = *(void *)(v0 + 1040);
  uint64_t v36 = *(void *)(v0 + 1032);
  uint64_t v38 = *(void *)(v0 + 1008);
  uint64_t v39 = *(void *)(v0 + 1000);
  swift_task_dealloc(*(void *)(v0 + 1232));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035E9F4()
{
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 128, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 152))
  {
    sub_100012EC0((__int128 *)(v0 + 128), v0 + 88);
    sub_100012ED8((void *)(v0 + 88), *(void *)(v0 + 112));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 1304) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10035EA98;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10035EA98(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1304LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 960LL);
  *(void *)(*(void *)v1 + 1312LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10035EAF8, v3, 0LL);
}

uint64_t sub_10035EAF8()
{
  uint64_t v1 = *(void *)(v0 + 1312);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 88));
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 1312);
    uint64_t v3 = sub_10035EB4C;
  }

  else
  {
    uint64_t v3 = sub_10035F9A4;
    uint64_t v2 = 0LL;
  }

  return swift_task_switch(v3, v2, 0LL);
}

uint64_t sub_10035EB4C()
{
  uint64_t v1 = *(void *)(v0 + 1312);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1296);
  uint64_t v3 = *(void *)(v0 + 1208);
  uint64_t v4 = *(void *)(v0 + 1200);
  uint64_t v5 = *(void *)(v0 + 1160);
  uint64_t v6 = *(void *)(v0 + 1152);
  uint64_t v7 = *(void *)(v0 + 1144);
  *(void *)(v0 + 1320) = *(void *)(v1 + 136);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 1328) = v8;
  v8(v4, v3, v7);
  LODWORD(v9) = *(_DWORD *)(v6 + 80);
  *(_DWORD *)(v0 + 1564) = v9;
  uint64_t v9 = v9;
  uint64_t v10 = (v9 + 24) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_100953D68, v10 + v5, v9 | 7LL);
  *(void *)(v0 + 1336) = v11;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v1;
  v2(v11 + v10, v4, v7);
  swift_retain();
  return swift_task_switch(sub_10035EC10, 0LL, 0LL);
}

uint64_t sub_10035EC10()
{
  uint64_t v1 = v0[167];
  uint64_t v2 = v0[165];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[168] = v3;
  v3[2] = v2;
  v3[3] = sub_10036E57C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[169] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AA790);
  *uint64_t v4 = v0;
  v4[1] = sub_10035ECD0;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 81,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10036E588,  v3,  v5);
}

uint64_t sub_10035ECD0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1344LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1352LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10035ED50, 0LL, 0LL);
}

uint64_t sub_10035ED50()
{
  if (!*(void *)(v0 + 672))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 1152) + 8LL))( *(void *)(v0 + 1208),  *(void *)(v0 + 1144));
    sub_100015794(v0 + 648, (uint64_t *)&unk_1009AA790);
    goto LABEL_38;
  }

  sub_100012EC0((__int128 *)(v0 + 648), v0 + 608);
  uint64_t v1 = *(void *)(v0 + 632);
  uint64_t v2 = *(void *)(v0 + 640);
  sub_100012ED8((void *)(v0 + 608), v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  *(void *)(v0 + 1360) = v3;
  char v4 = *(_BYTE *)(v3 + 32);
  *(_BYTE *)(v0 + 1569) = v4;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << v4;
  uint64_t v7 = *(void *)(v3 + 56);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  *(_BYTE *)(v0 + 1570) = 0;
  unint64_t v8 = v5 & v7;
  if (v8)
  {
    uint64_t v9 = 0LL;
    unint64_t v10 = __clz(__rbit64(v8));
    uint64_t v11 = (v8 - 1) & v8;
    goto LABEL_6;
  }

  unint64_t v19 = 63 - v6;
  if (v19 > 0x7F)
  {
    unint64_t v20 = *(void *)(v3 + 64);
    if (v20)
    {
      uint64_t v9 = 1LL;
LABEL_13:
      uint64_t v11 = (v20 - 1) & v20;
      unint64_t v10 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_6:
      *(void *)(v0 + 1376) = v11;
      *(void *)(v0 + 1368) = v9;
      uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1288);
      uint64_t v13 = *(void *)(v0 + 1152);
      uint64_t v14 = *(void *)(v0 + 1144);
      uint64_t v15 = *(void *)(v0 + 1128);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1328))( v15,  *(void *)(v3 + 48) + *(void *)(v13 + 72) * v10,  v14);
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
      *(void *)(v0 + 1384) = v16;
      v16(v15, 0LL, 1LL, v14);
      if (v12(v15, 1LL, v14) != 1)
      {
        uint64_t v17 = *(void *)(v0 + 960);
        (*(void (**)(void, void, void))(v0 + 1296))( *(void *)(v0 + 1192),  *(void *)(v0 + 1128),  *(void *)(v0 + 1144));
        uint64_t v18 = sub_10035FE00;
        return swift_task_switch(v18, v17, 0LL);
      }

      goto LABEL_30;
    }

    if (v19 >= 0xC0)
    {
      unint64_t v20 = *(void *)(v3 + 72);
      if (v20)
      {
        uint64_t v9 = 2LL;
        goto LABEL_13;
      }

      if (v19 >= 0x100)
      {
        unint64_t v20 = *(void *)(v3 + 80);
        if (v20)
        {
          uint64_t v9 = 3LL;
          goto LABEL_13;
        }

        if (v19 >= 0x140)
        {
          unint64_t v20 = *(void *)(v3 + 88);
          if (v20)
          {
            uint64_t v9 = 4LL;
            goto LABEL_13;
          }

          uint64_t v21 = 0LL;
          uint64_t v22 = v19 >> 6;
          if (v22 <= 5) {
            uint64_t v22 = 5LL;
          }
          uint64_t v23 = v22 - 5;
          while (v23 != v21)
          {
            unint64_t v20 = *(void *)(v3 + 96 + 8 * v21++);
            if (v20)
            {
              uint64_t v9 = v21 + 4;
              goto LABEL_13;
            }
          }
        }
      }
    }
  }

  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1152) + 56LL);
  v16(*(void *)(v0 + 1128), 1LL, 1LL, *(void *)(v0 + 1144));
LABEL_30:
  swift_release();
  *(void *)(v0 + 1448) = v16;
  if ((*(_BYTE *)(v0 + 1570) & 1) != 0)
  {
    uint64_t v24 = *(void *)(v0 + 632);
    uint64_t v25 = *(void *)(v0 + 640);
    sub_100012ED8((void *)(v0 + 608), v24);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
    *(void *)(v0 + 1456) = v26;
    char v27 = *(_BYTE *)(v26 + 32);
    *(_BYTE *)(v0 + 1571) = v27;
    uint64_t v28 = -1LL;
    uint64_t v29 = -1LL << v27;
    uint64_t v30 = *(void *)(v26 + 56);
    if (-v29 < 64) {
      uint64_t v28 = ~(-1LL << -(char)v29);
    }
    *(void *)(v0 + 1464) = _swiftEmptyArrayStorage;
    unint64_t v31 = v28 & v30;
    if (v31)
    {
      uint64_t v32 = 0LL;
      unint64_t v33 = __clz(__rbit64(v31));
      uint64_t v34 = (v31 - 1) & v31;
LABEL_35:
      *(void *)(v0 + 1480) = v34;
      *(void *)(v0 + 1472) = v32;
      uint64_t v35 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1448);
      uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1288);
      uint64_t v37 = *(void *)(v0 + 1144);
      uint64_t v38 = *(void *)(v0 + 1120);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1328))( v38,  *(void *)(v26 + 48) + *(void *)(*(void *)(v0 + 1152) + 72LL) * v33,  v37);
      v35(v38, 0LL, 1LL, v37);
      if (v36(v38, 1LL, v37) == 1) {
        goto LABEL_66;
      }
      uint64_t v17 = *(void *)(v0 + 960);
      (*(void (**)(void, void, void))(v0 + 1296))( *(void *)(v0 + 1176),  *(void *)(v0 + 1120),  *(void *)(v0 + 1144));
      uint64_t v18 = sub_100361CC4;
      return swift_task_switch(v18, v17, 0LL);
    }

    unint64_t v71 = 63 - v29;
    if (v71 > 0x7F)
    {
      unint64_t v72 = *(void *)(v26 + 64);
      if (v72)
      {
        uint64_t v32 = 1LL;
LABEL_49:
        uint64_t v34 = (v72 - 1) & v72;
        unint64_t v33 = __clz(__rbit64(v72)) + (v32 << 6);
        goto LABEL_35;
      }

      if (v71 >= 0xC0)
      {
        unint64_t v72 = *(void *)(v26 + 72);
        if (v72)
        {
          uint64_t v32 = 2LL;
          goto LABEL_49;
        }

        if (v71 >= 0x100)
        {
          unint64_t v72 = *(void *)(v26 + 80);
          if (v72)
          {
            uint64_t v32 = 3LL;
            goto LABEL_49;
          }

          if (v71 >= 0x140)
          {
            unint64_t v72 = *(void *)(v26 + 88);
            if (v72)
            {
              uint64_t v32 = 4LL;
              goto LABEL_49;
            }

            uint64_t v73 = 0LL;
            uint64_t v74 = v71 >> 6;
            if (v74 <= 5) {
              uint64_t v74 = 5LL;
            }
            uint64_t v75 = v74 - 5;
            while (v75 != v73)
            {
              unint64_t v72 = *(void *)(v26 + 96 + 8 * v73++);
              if (v72)
              {
                uint64_t v32 = v73 + 4;
                goto LABEL_49;
              }
            }
          }
        }
      }
    }

    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 1448))( *(void *)(v0 + 1120),  1LL,  1LL,  *(void *)(v0 + 1144));
LABEL_66:
    swift_release();
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    char v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1328);
    uint64_t v77 = *(void *)(v0 + 1208);
    uint64_t v78 = *(void *)(v0 + 1184);
    uint64_t v79 = *(void *)(v0 + 1144);
    uint64_t v80 = *(void *)(v0 + 968);
    uint64_t v81 = type metadata accessor for Logger(0LL);
    sub_10000A720(v81, (uint64_t)qword_100A2A730);
    v76(v78, v77, v79);
    uint64_t v82 = sub_100013044(v80, v0 + 768);
    uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
    os_log_type_t v84 = static os_log_type_t.info.getter(v83);
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v115 = *(void *)(v0 + 1200);
      os_log_type_t v121 = v84;
      uint64_t v85 = *(void *)(v0 + 1184);
      uint64_t v113 = *(void *)(v0 + 1152);
      uint64_t v86 = *(void *)(v0 + 1144);
      uint64_t v87 = swift_slowAlloc(42LL, -1LL);
      uint64_t v119 = swift_slowAlloc(64LL, -1LL);
      uint64_t v122 = v119;
      *(_DWORD *)uint64_t v87 = 141558787;
      *(void *)(v0 + 872) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 880, v87 + 4, v87 + 12);
      *(_WORD *)(v87 + 12) = 2081;
      uint64_t v110 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter(v86, v110);
      *(void *)(v0 + 880) = sub_1003F11D4(v88, v89, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 880, v0 + 888, v87 + 14, v87 + 22);
      swift_bridgeObjectRelease();
      uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
      v90(v85, v86);
      *(_WORD *)(v87 + 22) = 2160;
      *(void *)(v0 + 888) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 888, v0 + 896, v87 + 24, v87 + 32);
      *(_WORD *)(v87 + 32) = 2081;
      uint64_t v91 = *(void *)(v0 + 792);
      uint64_t v92 = *(void *)(v0 + 800);
      sub_100012ED8((void *)(v0 + 768), v91);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v92 + 8) + 8LL) + 32LL))(v91);
      uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter(v86, v110);
      unint64_t v95 = v94;
      v90(v115, v86);
      *(void *)(v0 + 896) = sub_1003F11D4(v93, v95, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 896, v0 + 904, v87 + 34, v87 + 42);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 768));
      _os_log_impl( (void *)&_mh_execute_header,  v83,  v121,  "Updating location for subscribers - from beacon store update for beacongroup: %{private,mask.hash}s, beacon: %{p rivate,mask.hash}s.",  (uint8_t *)v87,  0x2Au);
      swift_arrayDestroy(v119, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v119, -1LL, -1LL);
      swift_slowDealloc(v87, -1LL, -1LL);
    }

    else
    {
      uint64_t v90 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 1152) + 8LL);
      v90(*(void *)(v0 + 1184), *(void *)(v0 + 1144));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 768));
    }

    *(void *)(v0 + 1536) = v90;
    uint64_t v96 = *(void **)(v0 + 1280);
    uint64_t v97 = *(void *)(v0 + 968);
    uint64_t v98 = *(void *)(v0 + 960);
    sub_100013044(v0 + 608, v0 + 808);
    sub_100013044(v97, v0 + 208);
    uint64_t v99 = (void *)swift_allocObject(&unk_100953D90, 120LL, 7LL);
    *(void *)(v0 + 1544) = v99;
    v99[2] = v98;
    v99[3] = _swiftEmptyArrayStorage;
    sub_100012EC0((__int128 *)(v0 + 808), (uint64_t)(v99 + 4));
    sub_100012EC0((__int128 *)(v0 + 208), (uint64_t)(v99 + 9));
    _OWORD v99[14] = v96;
    uint64_t v100 = async function pointer to unsafeBlocking<A>(_:)[1];
    id v101 = v96;
    swift_retain();
    uint64_t v102 = (void *)swift_task_alloc(v100);
    *(void *)(v0 + 1552) = v102;
    *uint64_t v102 = v0;
    v102[1] = sub_100362D48;
    return unsafeBlocking<A>(_:)(v102, sub_10036E608, v99, (char *)&type metadata for () + 8);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 1152) + 8LL))( *(void *)(v0 + 1208),  *(void *)(v0 + 1144));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 608));
LABEL_38:
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v39 = *(void *)(v0 + 968);
  uint64_t v40 = type metadata accessor for Logger(0LL);
  sub_10000A720(v40, (uint64_t)qword_100A2A730);
  uint64_t v41 = sub_100013044(v39, v0 + 448);
  uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v43 = static os_log_type_t.info.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = *(void *)(v0 + 1200);
    uint64_t v117 = *(void *)(v0 + 1152);
    uint64_t v45 = *(void *)(v0 + 1144);
    uint64_t v46 = swift_slowAlloc(22LL, -1LL);
    uint64_t v47 = swift_slowAlloc(32LL, -1LL);
    uint64_t v122 = v47;
    *(_DWORD *)uint64_t v46 = 141558275;
    *(void *)(v0 + 928) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v46 + 4, v46 + 12);
    *(_WORD *)(v46 + 12) = 2081;
    uint64_t v49 = *(void *)(v0 + 472);
    uint64_t v48 = *(void *)(v0 + 480);
    sub_100012ED8((void *)(v0 + 448), v49);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v48 + 8) + 8LL) + 32LL))(v49);
    uint64_t v50 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v45, v50);
    unint64_t v53 = v52;
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v44, v45);
    *(void *)(v0 + 920) = sub_1003F11D4(v51, v53, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v46 + 14, v46 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
    _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.",  (uint8_t *)v46,  0x16u);
    swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v46, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
  }

  uint64_t v54 = *(void **)(v0 + 1280);
  os_log_type_t v55 = *(void **)(v0 + 1272);
  uint64_t v56 = *(void *)(v0 + 968);
  uint64_t v57 = *(void *)(*(void *)(v0 + 960) + 160LL);
  char v58 = *(_BYTE *)(*(void *)(v0 + 976) + *(int *)(v0 + 1560));
  type metadata accessor for Transaction(0LL);
  sub_100013044(v56, v0 + 488);
  uint64_t v59 = swift_allocObject(&unk_100953D40, 73LL, 7LL);
  sub_100012EC0((__int128 *)(v0 + 488), v59 + 16);
  *(void *)(v59 + 56) = v57;
  *(void *)(v59 + 64) = v54;
  *(_BYTE *)(v59 + 72) = v58;
  id v60 = v54;
  swift_retain();
  static Transaction.asyncTask(name:block:)( "LocationFetchServiceConnections.updateLocations:beacon:",  55LL,  2LL,  &unk_1009AA788,  v59);
  swift_release();

  uint64_t v61 = *(void *)(v0 + 1208);
  uint64_t v62 = *(void *)(v0 + 1200);
  uint64_t v63 = *(void *)(v0 + 1192);
  uint64_t v64 = *(void *)(v0 + 1184);
  uint64_t v65 = *(void *)(v0 + 1176);
  uint64_t v66 = *(void *)(v0 + 1168);
  uint64_t v67 = *(void *)(v0 + 1136);
  uint64_t v68 = *(void *)(v0 + 1128);
  uint64_t v69 = *(void *)(v0 + 1120);
  uint64_t v103 = *(void *)(v0 + 1112);
  uint64_t v104 = *(void *)(v0 + 1104);
  uint64_t v105 = *(void *)(v0 + 1096);
  uint64_t v106 = *(void *)(v0 + 1088);
  uint64_t v107 = *(void *)(v0 + 1080);
  uint64_t v108 = *(void *)(v0 + 1072);
  uint64_t v109 = *(void *)(v0 + 1064);
  uint64_t v111 = *(void *)(v0 + 1056);
  uint64_t v112 = *(void *)(v0 + 1048);
  uint64_t v114 = *(void *)(v0 + 1040);
  os_log_t log = *(os_log_t *)(v0 + 1032);
  uint64_t v118 = *(void *)(v0 + 1008);
  uint64_t v120 = *(void *)(v0 + 1000);
  swift_task_dealloc(*(void *)(v0 + 1232));
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(log);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035F9A4()
{
  *(void *)(v0 + 680) = 0LL;
  *(_OWORD *)(v0 + 648) = 0u;
  *(_OWORD *)(v0 + 664) = 0u;
  (*(void (**)(void, void))(*(void *)(v0 + 1152) + 8LL))( *(void *)(v0 + 1208),  *(void *)(v0 + 1144));
  sub_100015794(v0 + 648, (uint64_t *)&unk_1009AA790);
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v1 = *(void *)(v0 + 968);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2A730);
  uint64_t v3 = sub_100013044(v1, v0 + 448);
  char v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 1200);
    uint64_t v44 = *(void *)(v0 + 1152);
    uint64_t v7 = *(void *)(v0 + 1144);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v9;
    *(_DWORD *)uint64_t v8 = 141558275;
    *(void *)(v0 + 928) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    uint64_t v11 = *(void *)(v0 + 472);
    uint64_t v10 = *(void *)(v0 + 480);
    sub_100012ED8((void *)(v0 + 448), v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8LL) + 32LL))(v11);
    uint64_t v12 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v7, v12);
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v6, v7);
    *(void *)(v0 + 920) = sub_1003F11D4(v13, v15, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.",  (uint8_t *)v8,  0x16u);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
  }

  uint64_t v16 = *(void **)(v0 + 1280);
  uint64_t v17 = *(void **)(v0 + 1272);
  uint64_t v18 = *(void *)(v0 + 968);
  uint64_t v19 = *(void *)(*(void *)(v0 + 960) + 160LL);
  char v20 = *(_BYTE *)(*(void *)(v0 + 976) + *(int *)(v0 + 1560));
  type metadata accessor for Transaction(0LL);
  sub_100013044(v18, v0 + 488);
  uint64_t v21 = swift_allocObject(&unk_100953D40, 73LL, 7LL);
  sub_100012EC0((__int128 *)(v0 + 488), v21 + 16);
  *(void *)(v21 + 56) = v19;
  *(void *)(v21 + 64) = v16;
  *(_BYTE *)(v21 + 72) = v20;
  id v22 = v16;
  swift_retain();
  static Transaction.asyncTask(name:block:)( "LocationFetchServiceConnections.updateLocations:beacon:",  55LL,  2LL,  &unk_1009AA788,  v21);
  swift_release();

  uint64_t v23 = *(void *)(v0 + 1208);
  uint64_t v24 = *(void *)(v0 + 1200);
  uint64_t v25 = *(void *)(v0 + 1192);
  uint64_t v26 = *(void *)(v0 + 1184);
  uint64_t v27 = *(void *)(v0 + 1176);
  uint64_t v28 = *(void *)(v0 + 1168);
  uint64_t v29 = *(void *)(v0 + 1136);
  uint64_t v30 = *(void *)(v0 + 1128);
  uint64_t v31 = *(void *)(v0 + 1120);
  uint64_t v33 = *(void *)(v0 + 1112);
  uint64_t v34 = *(void *)(v0 + 1104);
  uint64_t v35 = *(void *)(v0 + 1096);
  uint64_t v36 = *(void *)(v0 + 1088);
  uint64_t v37 = *(void *)(v0 + 1080);
  uint64_t v38 = *(void *)(v0 + 1072);
  uint64_t v39 = *(void *)(v0 + 1064);
  uint64_t v40 = *(void *)(v0 + 1056);
  uint64_t v41 = *(void *)(v0 + 1048);
  uint64_t v42 = *(void *)(v0 + 1040);
  uint64_t v43 = *(void *)(v0 + 1032);
  uint64_t v45 = *(void *)(v0 + 1008);
  uint64_t v46 = *(void *)(v0 + 1000);
  swift_task_dealloc(*(void *)(v0 + 1232));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035FE00()
{
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 328, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 352))
  {
    sub_100012EC0((__int128 *)(v0 + 328), v0 + 368);
    sub_100012ED8((void *)(v0 + 368), *(void *)(v0 + 392));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 1392) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10035FEA4;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10035FEA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1392LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 960LL);
  *(void *)(*(void *)v1 + 140Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10035FF04, v3, 0LL);
}

uint64_t sub_10035FF04()
{
  uint64_t v1 = *(void *)(v0 + 1400);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 368));
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 1400);
    uint64_t v3 = sub_10035FF58;
  }

  else
  {
    uint64_t v3 = sub_100361254;
    uint64_t v2 = 0LL;
  }

  return swift_task_switch(v3, v2, 0LL);
}

uint64_t sub_10035FF58()
{
  uint64_t v1 = *(void *)(v0 + 1400);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 1564);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1328);
  char v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1296);
  uint64_t v5 = *(void *)(v0 + 1200);
  uint64_t v6 = *(void *)(v0 + 1192);
  uint64_t v7 = *(void *)(v0 + 1144);
  uint64_t v8 = (v2 + 24) & ~v2;
  uint64_t v9 = *(void *)(v0 + 1160) + v8;
  uint64_t v10 = v2 | 7;
  *(void *)(v0 + 1408) = *(void *)(v1 + 136);
  v3(v5, v6, v7);
  uint64_t v11 = swift_allocObject(&unk_100953DE0, v9, v10);
  *(void *)(v0 + 14swift_weakDestroy(v0 + 16) = v11;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v1;
  v4(v11 + v8, v5, v7);
  swift_retain();
  return swift_task_switch(sub_10036001C, 0LL, 0LL);
}

uint64_t sub_10036001C()
{
  uint64_t v1 = v0[177];
  uint64_t v2 = v0[176];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[178] = v3;
  v3[2] = v2;
  v3[3] = sub_10036E66C;
  v3[4] = v1;
  char v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[179] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009A6670);
  *char v4 = v0;
  v4[1] = sub_1003600DC;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 119,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10036E6AC,  v3,  v5);
}

uint64_t sub_1003600DC()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 1424LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1432LL));
  swift_release();
  swift_task_dealloc(v2);
  v1[180] = v1[119];
  return swift_task_switch(sub_100360154, v1[175], 0LL);
}

uint64_t sub_100360154()
{
  return swift_task_switch(sub_100360190, 0LL, 0LL);
}

uint64_t sub_100360190()
{
  uint64_t v192 = (void *)(v0 + 608);
  uint64_t v1 = *(void *)(v0 + 1440);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(*(void *)(v0 + 1024) + 80LL);
    uint64_t v4 = (v3 + 32) & ~v3;
    sub_10001DC4C(v1 + v4, *(void *)(v0 + 1104), type metadata accessor for BeaconEstimatedLocation);
    swift_bridgeObjectRetain(v1);
    uint64_t v5 = v2 - 1;
    if (v2 != 1)
    {
      uint64_t v81 = *(void *)(*(void *)(v0 + 1024) + 72LL);
      uint64_t v82 = v1 + v81 + v4;
      do
      {
        uint64_t v83 = *(void *)(v0 + 1104);
        uint64_t v84 = *(void *)(v0 + 1096);
        uint64_t v85 = *(void *)(v0 + 1016);
        sub_10001DC4C(v82, v84, type metadata accessor for BeaconEstimatedLocation);
        if ((static Date.< infix(_:_:)(v83 + *(int *)(v85 + 40), v84 + *(int *)(v85 + 40)) & 1) != 0)
        {
          uint64_t v86 = *(void *)(v0 + 1104);
          uint64_t v87 = *(void *)(v0 + 1096);
          sub_100018C68(v86, type metadata accessor for BeaconEstimatedLocation);
          sub_10002218C(v87, v86, type metadata accessor for BeaconEstimatedLocation);
        }

        else
        {
          sub_100018C68(*(void *)(v0 + 1096), type metadata accessor for BeaconEstimatedLocation);
        }

        v82 += v81;
        --v5;
      }

      while (v5);
    }

    uint64_t v6 = *(void *)(v0 + 1104);
    uint64_t v7 = *(void *)(v0 + 1024);
    uint64_t v8 = *(void *)(v0 + 1016);
    uint64_t v9 = *(void *)(v0 + 1008);
    swift_bridgeObjectRelease();
    sub_10002218C(v6, v9, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0LL, 1LL, v8);
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1024) + 56LL))( *(void *)(v0 + 1008),  1LL,  1LL,  *(void *)(v0 + 1016));
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v0 + 1016);
  uint64_t v11 = *(void *)(v0 + 1008);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1024) + 48LL))(v11, 1LL, v10) != 1)
  {
    uint64_t v28 = *(void *)(v0 + 1112);
    uint64_t v29 = *(void *)(v0 + 1088);
    uint64_t v30 = *(void *)(v0 + 1080);
    uint64_t v31 = *(void *)(v0 + 976);
    sub_10002218C(v11, v28, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v32 = *(int *)(v10 + 28);
    double v33 = *(double *)(v31 + v32);
    double v34 = *(double *)(v28 + v32);
    sub_10001DC4C(v31, v29, type metadata accessor for BeaconEstimatedLocation);
    sub_10001DC4C(v28, v30, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v35 = *(void *)(v0 + 1112);
    uint64_t v36 = *(void *)(v0 + 1088);
    uint64_t v37 = *(void *)(v0 + 1080);
    uint64_t v38 = *(void *)(v0 + 1072);
    uint64_t v39 = *(void *)(v0 + 1064);
    if (v33 == v34)
    {
      uint64_t v40 = *(void *)(v0 + 1016);
      uint64_t v41 = *(void *)(v0 + 976);
      double v42 = *(double *)(v36 + *(int *)(v40 + 32));
      sub_100018C68(*(void *)(v0 + 1088), type metadata accessor for BeaconEstimatedLocation);
      double v43 = *(double *)(v37 + *(int *)(v40 + 32));
      sub_100018C68(v37, type metadata accessor for BeaconEstimatedLocation);
      sub_10001DC4C(v41, v38, type metadata accessor for BeaconEstimatedLocation);
      sub_10001DC4C(v35, v39, type metadata accessor for BeaconEstimatedLocation);
      if (v42 == v43)
      {
        uint64_t v44 = *(void *)(v0 + 1112);
        uint64_t v45 = *(void *)(v0 + 1072);
        uint64_t v46 = *(void *)(v0 + 1064);
        uint64_t v47 = *(void *)(v0 + 1056);
        uint64_t v48 = *(void *)(v0 + 1048);
        uint64_t v49 = *(void *)(v0 + 1016);
        uint64_t v50 = *(void *)(v0 + 976);
        double v51 = *(double *)(v45 + *(int *)(v49 + 36));
        sub_100018C68(v45, type metadata accessor for BeaconEstimatedLocation);
        double v52 = *(double *)(v46 + *(int *)(v49 + 36));
        sub_100018C68(v46, type metadata accessor for BeaconEstimatedLocation);
        sub_10001DC4C(v50, v47, type metadata accessor for BeaconEstimatedLocation);
        sub_10001DC4C(v44, v48, type metadata accessor for BeaconEstimatedLocation);
        if (v51 == v52)
        {
          uint64_t v53 = *(void *)(v0 + 1112);
          uint64_t v54 = *(void *)(v0 + 1056);
          uint64_t v55 = *(void *)(v0 + 1048);
          uint64_t v56 = *(void *)(v0 + 1040);
          uint64_t v57 = *(void *)(v0 + 1032);
          uint64_t v58 = *(void *)(v0 + 976);
          uint64_t v59 = *(int *)(*(void *)(v0 + 1016) + 40LL);
          char v60 = static Date.== infix(_:_:)(v54 + v59, v55 + v59);
          sub_100018C68(v55, type metadata accessor for BeaconEstimatedLocation);
          sub_100018C68(v54, type metadata accessor for BeaconEstimatedLocation);
          sub_10001DC4C(v58, v56, type metadata accessor for BeaconEstimatedLocation);
          sub_10001DC4C(v53, v57, type metadata accessor for BeaconEstimatedLocation);
          if ((v60 & 1) != 0)
          {
            uint64_t v61 = *(void *)(v0 + 1192);
            uint64_t v62 = *(void *)(v0 + 1152);
            uint64_t v63 = *(void *)(v0 + 1144);
            uint64_t v64 = *(void *)(v0 + 1112);
            uint64_t v65 = *(void *)(v0 + 1040);
            uint64_t v66 = *(void *)(v0 + 1032);
            uint64_t v67 = *(int *)(*(void *)(v0 + 1016) + 44LL);
            int v68 = *(unsigned __int8 *)(v65 + v67);
            int v69 = *(unsigned __int8 *)(v66 + v67);
            sub_100018C68(v66, type metadata accessor for BeaconEstimatedLocation);
            sub_100018C68(v65, type metadata accessor for BeaconEstimatedLocation);
            sub_100018C68(v64, type metadata accessor for BeaconEstimatedLocation);
            uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t))(v62 + 8);
            uint64_t result = v70(v61, v63);
            if (v68 == v69)
            {
              unint64_t v72 = *(void *)(v0 + 1376);
              int64_t v73 = *(void *)(v0 + 1368);
              *(_BYTE *)(v0 + 1570) = 1;
              if (v72)
              {
                uint64_t v74 = (v72 - 1) & v72;
                unint64_t v75 = __clz(__rbit64(v72)) | (v73 << 6);
                uint64_t v76 = *(void *)(v0 + 1360);
                goto LABEL_21;
              }

              int64_t v139 = v73 + 1;
              if (__OFADD__(v73, 1LL))
              {
                __break(1u);
              }

              else
              {
                int64_t v140 = (unint64_t)((1LL << *(_BYTE *)(v0 + 1569)) + 63) >> 6;
                uint64_t v76 = *(void *)(v0 + 1360);
                if (v139 >= v140) {
                  goto LABEL_71;
                }
                uint64_t v141 = v76 + 56;
                unint64_t v142 = *(void *)(v76 + 56 + 8 * v139);
                ++v73;
                if (v142)
                {
LABEL_54:
                  uint64_t v74 = (v142 - 1) & v142;
                  unint64_t v75 = __clz(__rbit64(v142)) + (v73 << 6);
LABEL_21:
                  *(void *)(v0 + 1376) = v74;
                  *(void *)(v0 + 1368) = v73;
                  uint64_t v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1288);
                  uint64_t v78 = *(void *)(v0 + 1152);
                  uint64_t v79 = *(void *)(v0 + 1144);
                  uint64_t v80 = *(void *)(v0 + 1128);
                  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1328))( v80,  *(void *)(v76 + 48) + *(void *)(v78 + 72) * v75,  v79);
                  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56);
                  *(void *)(v0 + 1384) = v12;
                  v12(v80, 0LL, 1LL, v79);
                  if (v77(v80, 1LL, v79) != 1)
                  {
                    uint64_t v135 = *(void *)(v0 + 960);
                    (*(void (**)(void, void, void))(v0 + 1296))( *(void *)(v0 + 1192),  *(void *)(v0 + 1128),  *(void *)(v0 + 1144));
                    uint64_t v136 = sub_10035FE00;
                    return swift_task_switch(v136, v135, 0LL);
                  }

                  goto LABEL_72;
                }

                int64_t v73 = v139 + 1;
                if (v139 + 1 >= v140) {
                  goto LABEL_71;
                }
                unint64_t v142 = *(void *)(v141 + 8 * v73);
                if (v142) {
                  goto LABEL_54;
                }
                int64_t v73 = v139 + 2;
                if (v139 + 2 >= v140) {
                  goto LABEL_71;
                }
                unint64_t v142 = *(void *)(v141 + 8 * v73);
                if (v142) {
                  goto LABEL_54;
                }
                int64_t v143 = v139 + 3;
                if (v143 >= v140)
                {
LABEL_71:
                  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1152) + 56LL);
                  v12(*(void *)(v0 + 1128), 1LL, 1LL, *(void *)(v0 + 1144));
LABEL_72:
                  swift_release();
                  goto LABEL_7;
                }

                unint64_t v142 = *(void *)(v141 + 8 * v143);
                if (v142)
                {
                  int64_t v73 = v143;
                  goto LABEL_54;
                }

                while (1)
                {
                  int64_t v73 = v143 + 1;
                  if (__OFADD__(v143, 1LL)) {
                    break;
                  }
                  if (v73 >= v140) {
                    goto LABEL_71;
                  }
                  unint64_t v142 = *(void *)(v141 + 8 * v73);
                  ++v143;
                  if (v142) {
                    goto LABEL_54;
                  }
                }
              }

              __break(1u);
              return result;
            }

uint64_t sub_100361254()
{
  uint64_t v1 = v0 + 608;
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1024) + 56LL))( *(void *)(v0 + 1008),  1LL,  1LL,  *(void *)(v0 + 1016));
  uint64_t v2 = *(void *)(v0 + 1008);
  (*(void (**)(void, void))(*(void *)(v0 + 1152) + 8LL))( *(void *)(v0 + 1192),  *(void *)(v0 + 1144));
  swift_release();
  sub_100015794(v2, &qword_1009A48E0);
  *(void *)(v0 + 1448) = *(void *)(v0 + 1384);
  if ((*(_BYTE *)(v0 + 1570) & 1) != 0)
  {
    uint64_t v3 = *(void *)(v0 + 632);
    uint64_t v4 = *(void *)(v0 + 640);
    sub_100012ED8((void *)(v0 + 608), v3);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
    *(void *)(v0 + 1456) = v5;
    char v6 = *(_BYTE *)(v5 + 32);
    *(_BYTE *)(v0 + 1571) = v6;
    uint64_t v7 = -1LL;
    uint64_t v8 = -1LL << v6;
    uint64_t v9 = *(void *)(v5 + 56);
    if (-v8 < 64) {
      uint64_t v7 = ~(-1LL << -(char)v8);
    }
    *(void *)(v0 + 1464) = _swiftEmptyArrayStorage;
    unint64_t v10 = v7 & v9;
    if (v10)
    {
      uint64_t v11 = 0LL;
      unint64_t v12 = __clz(__rbit64(v10));
      uint64_t v13 = (v10 - 1) & v10;
      goto LABEL_6;
    }

    unint64_t v51 = 63 - v8;
    if (v51 > 0x7F)
    {
      unint64_t v52 = *(void *)(v5 + 64);
      if (v52)
      {
        uint64_t v11 = 1LL;
LABEL_18:
        uint64_t v13 = (v52 - 1) & v52;
        unint64_t v12 = __clz(__rbit64(v52)) + (v11 << 6);
LABEL_6:
        *(void *)(v0 + 1480) = v13;
        *(void *)(v0 + 1472) = v11;
        uint64_t v14 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1448);
        uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1288);
        uint64_t v16 = *(void *)(v0 + 1144);
        uint64_t v17 = *(void *)(v0 + 1120);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1328))( v17,  *(void *)(v5 + 48) + *(void *)(*(void *)(v0 + 1152) + 72LL) * v12,  v16);
        v14(v17, 0LL, 1LL, v16);
        if (v15(v17, 1LL, v16) != 1)
        {
          uint64_t v50 = *(void *)(v0 + 960);
          (*(void (**)(void, void, void))(v0 + 1296))( *(void *)(v0 + 1176),  *(void *)(v0 + 1120),  *(void *)(v0 + 1144));
          return swift_task_switch(sub_100361CC4, v50, 0LL);
        }

        goto LABEL_35;
      }

      if (v51 >= 0xC0)
      {
        unint64_t v52 = *(void *)(v5 + 72);
        if (v52)
        {
          uint64_t v11 = 2LL;
          goto LABEL_18;
        }

        if (v51 >= 0x100)
        {
          unint64_t v52 = *(void *)(v5 + 80);
          if (v52)
          {
            uint64_t v11 = 3LL;
            goto LABEL_18;
          }

          if (v51 >= 0x140)
          {
            unint64_t v52 = *(void *)(v5 + 88);
            if (v52)
            {
              uint64_t v11 = 4LL;
              goto LABEL_18;
            }

            uint64_t v53 = 0LL;
            uint64_t v54 = v51 >> 6;
            if (v54 <= 5) {
              uint64_t v54 = 5LL;
            }
            uint64_t v55 = v54 - 5;
            while (v55 != v53)
            {
              unint64_t v52 = *(void *)(v5 + 96 + 8 * v53++);
              if (v52)
              {
                uint64_t v11 = v53 + 4;
                goto LABEL_18;
              }
            }
          }
        }
      }
    }

    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 1448))( *(void *)(v0 + 1120),  1LL,  1LL,  *(void *)(v0 + 1144));
LABEL_35:
    swift_release();
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1328);
    uint64_t v57 = *(void *)(v0 + 1208);
    uint64_t v58 = *(void *)(v0 + 1184);
    uint64_t v59 = *(void *)(v0 + 1144);
    uint64_t v60 = *(void *)(v0 + 968);
    uint64_t v61 = type metadata accessor for Logger(0LL);
    sub_10000A720(v61, (uint64_t)qword_100A2A730);
    v56(v58, v57, v59);
    uint64_t v62 = sub_100013044(v60, v0 + 768);
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v64 = static os_log_type_t.info.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      os_log_type_t typeb = v64;
      uint64_t v65 = *(void *)(v0 + 1184);
      uint64_t v93 = *(void *)(v0 + 1152);
      uint64_t v95 = *(void *)(v0 + 1200);
      uint64_t v66 = *(void *)(v0 + 1144);
      uint64_t v67 = swift_slowAlloc(42LL, -1LL);
      uint64_t v98 = swift_slowAlloc(64LL, -1LL);
      uint64_t v103 = v98;
      *(_DWORD *)uint64_t v67 = 141558787;
      *(void *)(v0 + 872) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 880, v67 + 4, v67 + 12);
      *(_WORD *)(v67 + 12) = 2081;
      uint64_t v91 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter(v66, v91);
      *(void *)(v0 + 880) = sub_1003F11D4(v68, v69, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 880, v0 + 888, v67 + 14, v67 + 22);
      swift_bridgeObjectRelease();
      uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
      v70(v65, v66);
      *(_WORD *)(v67 + 22) = 2160;
      *(void *)(v0 + 888) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 888, v0 + 896, v67 + 24, v67 + 32);
      *(_WORD *)(v67 + 32) = 2081;
      uint64_t v71 = *(void *)(v0 + 792);
      uint64_t v72 = *(void *)(v0 + 800);
      sub_100012ED8((void *)(v0 + 768), v71);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v72 + 8) + 8LL) + 32LL))(v71);
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter(v66, v91);
      unint64_t v75 = v74;
      uint64_t v76 = v66;
      uint64_t v1 = v0 + 608;
      v70(v95, v76);
      *(void *)(v0 + 896) = sub_1003F11D4(v73, v75, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 896, v0 + 904, v67 + 34, v67 + 42);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 768));
      _os_log_impl( (void *)&_mh_execute_header,  v63,  typeb,  "Updating location for subscribers - from beacon store update for beacongroup: %{private,mask.hash}s, beacon: %{p rivate,mask.hash}s.",  (uint8_t *)v67,  0x2Au);
      swift_arrayDestroy(v98, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1LL, -1LL);
      swift_slowDealloc(v67, -1LL, -1LL);
    }

    else
    {
      uint64_t v70 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 1152) + 8LL);
      v70(*(void *)(v0 + 1184), *(void *)(v0 + 1144));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 768));
    }

    *(void *)(v0 + 1536) = v70;
    uint64_t v77 = *(void **)(v0 + 1280);
    uint64_t v78 = *(void *)(v0 + 968);
    uint64_t v79 = *(void *)(v0 + 960);
    sub_100013044(v1, v0 + 808);
    sub_100013044(v78, v0 + 208);
    uint64_t v80 = (void *)swift_allocObject(&unk_100953D90, 120LL, 7LL);
    *(void *)(v0 + 1544) = v80;
    v80[2] = v79;
    v80[3] = _swiftEmptyArrayStorage;
    sub_100012EC0((__int128 *)(v0 + 808), (uint64_t)(v80 + 4));
    sub_100012EC0((__int128 *)(v0 + 208), (uint64_t)(v80 + 9));
    v80[14] = v77;
    uint64_t v81 = async function pointer to unsafeBlocking<A>(_:)[1];
    id v82 = v77;
    swift_retain();
    uint64_t v83 = (void *)swift_task_alloc(v81);
    *(void *)(v0 + 1552) = v83;
    *uint64_t v83 = v0;
    v83[1] = sub_100362D48;
    return unsafeBlocking<A>(_:)(v83, sub_10036E608, v80, (char *)&type metadata for () + 8);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 1152) + 8LL))( *(void *)(v0 + 1208),  *(void *)(v0 + 1144));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 608));
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v18 = *(void *)(v0 + 968);
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_10000A720(v19, (uint64_t)qword_100A2A730);
  uint64_t v20 = sub_100013044(v18, v0 + 448);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.info.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = *(void *)(v0 + 1200);
    *(void *)type = *(void *)(v0 + 1152);
    uint64_t v24 = *(void *)(v0 + 1144);
    uint64_t v25 = swift_slowAlloc(22LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v103 = v26;
    *(_DWORD *)uint64_t v25 = 141558275;
    *(void *)(v0 + 928) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v25 + 4, v25 + 12);
    *(_WORD *)(v25 + 12) = 2081;
    uint64_t v28 = *(void *)(v0 + 472);
    uint64_t v27 = *(void *)(v0 + 480);
    sub_100012ED8((void *)(v0 + 448), v28);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v27 + 8) + 8LL) + 32LL))(v28);
    uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v24, v29);
    unint64_t v32 = v31;
    (*(void (**)(uint64_t, uint64_t))(*(void *)type + 8LL))(v23, v24);
    *(void *)(v0 + 920) = sub_1003F11D4(v30, v32, &v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.",  (uint8_t *)v25,  0x16u);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
  }

  double v33 = *(void **)(v0 + 1280);
  double v34 = *(void **)(v0 + 1272);
  uint64_t v35 = *(void *)(v0 + 968);
  uint64_t v36 = *(void *)(*(void *)(v0 + 960) + 160LL);
  char v37 = *(_BYTE *)(*(void *)(v0 + 976) + *(int *)(v0 + 1560));
  type metadata accessor for Transaction(0LL);
  sub_100013044(v35, v0 + 488);
  uint64_t v38 = swift_allocObject(&unk_100953D40, 73LL, 7LL);
  sub_100012EC0((__int128 *)(v0 + 488), v38 + 16);
  *(void *)(v38 + 56) = v36;
  *(void *)(v38 + 64) = v33;
  *(_BYTE *)(v38 + 72) = v37;
  id v39 = v33;
  swift_retain();
  static Transaction.asyncTask(name:block:)( "LocationFetchServiceConnections.updateLocations:beacon:",  55LL,  2LL,  &unk_1009AA788,  v38);
  swift_release();

  uint64_t v40 = *(void *)(v0 + 1208);
  uint64_t v41 = *(void *)(v0 + 1200);
  uint64_t v42 = *(void *)(v0 + 1192);
  uint64_t v43 = *(void *)(v0 + 1184);
  uint64_t v44 = *(void *)(v0 + 1176);
  uint64_t v45 = *(void *)(v0 + 1168);
  uint64_t v46 = *(void *)(v0 + 1136);
  uint64_t v47 = *(void *)(v0 + 1128);
  uint64_t v48 = *(void *)(v0 + 1120);
  uint64_t v84 = *(void *)(v0 + 1112);
  uint64_t v85 = *(void *)(v0 + 1104);
  uint64_t v86 = *(void *)(v0 + 1096);
  uint64_t v87 = *(void *)(v0 + 1088);
  uint64_t v88 = *(void *)(v0 + 1080);
  uint64_t v89 = *(void *)(v0 + 1072);
  uint64_t v90 = *(void *)(v0 + 1064);
  uint64_t v92 = *(void *)(v0 + 1056);
  uint64_t v94 = *(void *)(v0 + 1048);
  os_log_t log = *(os_log_t *)(v0 + 1040);
  uint64_t v97 = *(void *)(v0 + 1032);
  *(void *)typea = *(void *)(v0 + 1008);
  uint64_t v102 = *(void *)(v0 + 1000);
  swift_task_dealloc(*(void *)(v0 + 1232));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(log);
  swift_task_dealloc(v97);
  swift_task_dealloc(*(void *)typea);
  swift_task_dealloc(v102);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100361CC4()
{
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 528, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 552))
  {
    sub_100012EC0((__int128 *)(v0 + 528), v0 + 568);
    sub_100012ED8((void *)(v0 + 568), *(void *)(v0 + 592));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 1488) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100361D68;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100361D68(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1488LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 960LL);
  *(void *)(*(void *)v1 + 1496LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100361DC8, v3, 0LL);
}

uint64_t sub_100361DC8()
{
  uint64_t v1 = *(void *)(v0 + 1496);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 568));
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 1496);
    uint64_t v3 = sub_100361E1C;
  }

  else
  {
    uint64_t v3 = sub_100362770;
    uint64_t v2 = 0LL;
  }

  return swift_task_switch(v3, v2, 0LL);
}

uint64_t sub_100361E1C()
{
  uint64_t v1 = *(void *)(v0 + 1496);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 1564);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1328);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1296);
  uint64_t v5 = *(void *)(v0 + 1200);
  uint64_t v6 = *(void *)(v0 + 1176);
  uint64_t v7 = *(void *)(v0 + 1144);
  uint64_t v8 = (v2 + 24) & ~v2;
  uint64_t v9 = *(void *)(v0 + 1160) + v8;
  uint64_t v10 = v2 | 7;
  *(void *)(v0 + 1504) = *(void *)(v1 + 136);
  v3(v5, v6, v7);
  uint64_t v11 = swift_allocObject(&unk_100953DB8, v9, v10);
  *(void *)(v0 + 1512) = v11;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v1;
  v4(v11 + v8, v5, v7);
  swift_retain();
  return swift_task_switch(sub_100361EE0, 0LL, 0LL);
}

uint64_t sub_100361EE0()
{
  uint64_t v1 = v0[189];
  uint64_t v2 = v0[188];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[190] = v3;
  v3[2] = v2;
  v3[3] = sub_10036E620;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[191] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C40);
  *uint64_t v4 = v0;
  v4[1] = sub_100361FA0;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 86,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10036E62C,  v3,  v5);
}

uint64_t sub_100361FA0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1520LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1528LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100362020, 0LL, 0LL);
}

uint64_t sub_100362020()
{
  if (*(void *)(v0 + 712))
  {
    unint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1296);
    *(void *)type = *(void *)(v0 + 1464);
    uint64_t v1 = *(void **)(v0 + 1280);
    uint64_t v2 = *(void *)(v0 + 1168);
    uint64_t v3 = *(void *)(v0 + 1144);
    uint64_t v4 = *(void *)(v0 + 1000);
    uint64_t v5 = *(void *)(v0 + 984);
    sub_100012EC0((__int128 *)(v0 + 688), v0 + 728);
    uint64_t v6 = *(void *)(v0 + 752);
    uint64_t v7 = *(void *)(v0 + 760);
    sub_100012ED8((void *)(v0 + 728), v6);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v7 + 8) + 8LL) + 32LL))(v6);
    uint64_t v8 = *(void *)(v0 + 752);
    uint64_t v9 = *(void *)(v0 + 760);
    sub_100012ED8((void *)(v0 + 728), v8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 176))(v8, v9);
    uint64_t v11 = *(int *)(v5 + 48);
    uint64_t v12 = *(int *)(sub_100004AEC((uint64_t *)&unk_1009AA7A0) + 48);
    v69(v4, v2, v3);
    *(void *)(v4 + v12) = v10;
    *(void *)(v4 + v11) = v1;
    id v13 = v1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)type);
    unint64_t v15 = *(void *)(v0 + 1464);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v15 = sub_1004C6334(0, *(void *)(v15 + 16) + 1LL, 1, *(void *)(v0 + 1464));
    }
    unint64_t v17 = *(void *)(v15 + 16);
    unint64_t v16 = *(void *)(v15 + 24);
    if (v17 >= v16 >> 1) {
      unint64_t v15 = sub_1004C6334(v16 > 1, v17 + 1, 1, v15);
    }
    uint64_t v18 = *(void *)(v0 + 1176);
    uint64_t v19 = *(void *)(v0 + 1152);
    uint64_t v20 = *(void *)(v0 + 1144);
    uint64_t v21 = *(void *)(v0 + 1000);
    uint64_t v22 = *(void *)(v0 + 992);
    *(void *)(v15 + swift_weakDestroy(v0 + 16) = v17 + 1;
    sub_100015750( v21,  v15 + ((*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))
    + *(void *)(v22 + 72) * v17,
      (uint64_t *)&unk_1009AA760);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 728));
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 1152) + 8LL))( *(void *)(v0 + 1176),  *(void *)(v0 + 1144));
    uint64_t result = sub_100015794(v0 + 688, (uint64_t *)&unk_1009A9C40);
    unint64_t v15 = *(void *)(v0 + 1464);
  }

  unint64_t v24 = *(void *)(v0 + 1480);
  int64_t v25 = *(void *)(v0 + 1472);
  *(void *)(v0 + 1464) = v15;
  if (v24)
  {
    uint64_t v26 = (v24 - 1) & v24;
    unint64_t v27 = __clz(__rbit64(v24)) | (v25 << 6);
    uint64_t v28 = *(void *)(v0 + 1456);
    goto LABEL_10;
  }

  int64_t v34 = v25 + 1;
  if (__OFADD__(v25, 1LL))
  {
    __break(1u);
    goto LABEL_34;
  }

  int64_t v35 = (unint64_t)((1LL << *(_BYTE *)(v0 + 1571)) + 63) >> 6;
  uint64_t v28 = *(void *)(v0 + 1456);
  if (v34 < v35)
  {
    uint64_t v36 = v28 + 56;
    unint64_t v37 = *(void *)(v28 + 56 + 8 * v34);
    ++v25;
    if (v37)
    {
LABEL_15:
      uint64_t v26 = (v37 - 1) & v37;
      unint64_t v27 = __clz(__rbit64(v37)) + (v25 << 6);
LABEL_10:
      *(void *)(v0 + 1480) = v26;
      *(void *)(v0 + 1472) = v25;
      uint64_t v29 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1448);
      uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1288);
      uint64_t v31 = *(void *)(v0 + 1144);
      uint64_t v32 = *(void *)(v0 + 1120);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1328))( v32,  *(void *)(v28 + 48) + *(void *)(*(void *)(v0 + 1152) + 72LL) * v27,  v31);
      v29(v32, 0LL, 1LL, v31);
      if (v30(v32, 1LL, v31) != 1)
      {
        uint64_t v33 = *(void *)(v0 + 960);
        (*(void (**)(void, void, void))(v0 + 1296))( *(void *)(v0 + 1176),  *(void *)(v0 + 1120),  *(void *)(v0 + 1144));
        return swift_task_switch(sub_100361CC4, v33, 0LL);
      }

      goto LABEL_27;
    }

    int64_t v25 = v34 + 1;
    if (v34 + 1 < v35)
    {
      unint64_t v37 = *(void *)(v36 + 8 * v25);
      if (v37) {
        goto LABEL_15;
      }
      int64_t v25 = v34 + 2;
      if (v34 + 2 < v35)
      {
        unint64_t v37 = *(void *)(v36 + 8 * v25);
        if (v37) {
          goto LABEL_15;
        }
        int64_t v38 = v34 + 3;
        if (v38 < v35)
        {
          unint64_t v37 = *(void *)(v36 + 8 * v38);
          if (v37)
          {
            int64_t v25 = v38;
            goto LABEL_15;
          }

          while (1)
          {
            int64_t v25 = v38 + 1;
            if (__OFADD__(v38, 1LL)) {
              break;
            }
            if (v25 >= v35) {
              goto LABEL_26;
            }
            unint64_t v37 = *(void *)(v36 + 8 * v25);
            ++v38;
            if (v37) {
              goto LABEL_15;
            }
          }

uint64_t sub_100362770()
{
  *(void *)(v0 + 720) = 0LL;
  *(_OWORD *)(v0 + 688) = 0u;
  *(_OWORD *)(v0 + 704) = 0u;
  (*(void (**)(void, void))(*(void *)(v0 + 1152) + 8LL))( *(void *)(v0 + 1176),  *(void *)(v0 + 1144));
  uint64_t result = sub_100015794(v0 + 688, (uint64_t *)&unk_1009A9C40);
  uint64_t v2 = *(void *)(v0 + 1464);
  unint64_t v3 = *(void *)(v0 + 1480);
  int64_t v4 = *(void *)(v0 + 1472);
  if (v3)
  {
    uint64_t v5 = (v3 - 1) & v3;
    unint64_t v6 = __clz(__rbit64(v3)) | (v4 << 6);
    uint64_t v7 = *(void *)(v0 + 1456);
    goto LABEL_3;
  }

  int64_t v13 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
    goto LABEL_27;
  }

  int64_t v14 = (unint64_t)((1LL << *(_BYTE *)(v0 + 1571)) + 63) >> 6;
  uint64_t v7 = *(void *)(v0 + 1456);
  if (v13 < v14)
  {
    uint64_t v15 = v7 + 56;
    unint64_t v16 = *(void *)(v7 + 56 + 8 * v13);
    ++v4;
    if (v16)
    {
LABEL_8:
      uint64_t v5 = (v16 - 1) & v16;
      unint64_t v6 = __clz(__rbit64(v16)) + (v4 << 6);
LABEL_3:
      *(void *)(v0 + 1480) = v5;
      *(void *)(v0 + 1472) = v4;
      uint64_t v8 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1448);
      uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1288);
      uint64_t v10 = *(void *)(v0 + 1144);
      uint64_t v11 = *(void *)(v0 + 1120);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1328))( v11,  *(void *)(v7 + 48) + *(void *)(*(void *)(v0 + 1152) + 72LL) * v6,  v10);
      v8(v11, 0LL, 1LL, v10);
      if (v9(v11, 1LL, v10) != 1)
      {
        uint64_t v12 = *(void *)(v0 + 960);
        (*(void (**)(void, void, void))(v0 + 1296))( *(void *)(v0 + 1176),  *(void *)(v0 + 1120),  *(void *)(v0 + 1144));
        return swift_task_switch(sub_100361CC4, v12, 0LL);
      }

      goto LABEL_20;
    }

    int64_t v4 = v13 + 1;
    if (v13 + 1 < v14)
    {
      unint64_t v16 = *(void *)(v15 + 8 * v4);
      if (v16) {
        goto LABEL_8;
      }
      int64_t v4 = v13 + 2;
      if (v13 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * v4);
        if (v16) {
          goto LABEL_8;
        }
        int64_t v17 = v13 + 3;
        if (v17 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * v17);
          if (v16)
          {
            int64_t v4 = v17;
            goto LABEL_8;
          }

          while (1)
          {
            int64_t v4 = v17 + 1;
            if (__OFADD__(v17, 1LL)) {
              break;
            }
            if (v4 >= v14) {
              goto LABEL_19;
            }
            unint64_t v16 = *(void *)(v15 + 8 * v4);
            ++v17;
            if (v16) {
              goto LABEL_8;
            }
          }

uint64_t sub_100362D48()
{
  return swift_task_switch(sub_100362DA8, 0LL, 0LL);
}

uint64_t sub_100362DA8()
{
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v1 = *(void *)(v0 + 968);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2A730);
  uint64_t v3 = sub_100013044(v1, v0 + 448);
  int64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 1200);
    uint64_t v44 = *(void *)(v0 + 1152);
    uint64_t v7 = *(void *)(v0 + 1144);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v9;
    *(_DWORD *)uint64_t v8 = 141558275;
    *(void *)(v0 + 928) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    uint64_t v11 = *(void *)(v0 + 472);
    uint64_t v10 = *(void *)(v0 + 480);
    sub_100012ED8((void *)(v0 + 448), v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8LL) + 32LL))(v11);
    uint64_t v12 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v7, v12);
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v6, v7);
    *(void *)(v0 + 920) = sub_1003F11D4(v13, v15, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.",  (uint8_t *)v8,  0x16u);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 448));
  }

  unint64_t v16 = *(void **)(v0 + 1280);
  int64_t v17 = *(void **)(v0 + 1272);
  uint64_t v18 = *(void *)(v0 + 968);
  uint64_t v19 = *(void *)(*(void *)(v0 + 960) + 160LL);
  char v20 = *(_BYTE *)(*(void *)(v0 + 976) + *(int *)(v0 + 1560));
  type metadata accessor for Transaction(0LL);
  sub_100013044(v18, v0 + 488);
  uint64_t v21 = swift_allocObject(&unk_100953D40, 73LL, 7LL);
  sub_100012EC0((__int128 *)(v0 + 488), v21 + 16);
  *(void *)(v21 + 56) = v19;
  *(void *)(v21 + 64) = v16;
  *(_BYTE *)(v21 + 72) = v20;
  id v22 = v16;
  swift_retain();
  static Transaction.asyncTask(name:block:)( "LocationFetchServiceConnections.updateLocations:beacon:",  55LL,  2LL,  &unk_1009AA788,  v21);
  swift_release();

  uint64_t v23 = *(void *)(v0 + 1208);
  uint64_t v24 = *(void *)(v0 + 1200);
  uint64_t v25 = *(void *)(v0 + 1192);
  uint64_t v26 = *(void *)(v0 + 1184);
  uint64_t v27 = *(void *)(v0 + 1176);
  uint64_t v28 = *(void *)(v0 + 1168);
  uint64_t v29 = *(void *)(v0 + 1136);
  uint64_t v30 = *(void *)(v0 + 1128);
  uint64_t v31 = *(void *)(v0 + 1120);
  uint64_t v33 = *(void *)(v0 + 1112);
  uint64_t v34 = *(void *)(v0 + 1104);
  uint64_t v35 = *(void *)(v0 + 1096);
  uint64_t v36 = *(void *)(v0 + 1088);
  uint64_t v37 = *(void *)(v0 + 1080);
  uint64_t v38 = *(void *)(v0 + 1072);
  uint64_t v39 = *(void *)(v0 + 1064);
  uint64_t v40 = *(void *)(v0 + 1056);
  uint64_t v41 = *(void *)(v0 + 1048);
  uint64_t v42 = *(void *)(v0 + 1040);
  uint64_t v43 = *(void *)(v0 + 1032);
  uint64_t v45 = *(void *)(v0 + 1008);
  uint64_t v46 = *(void *)(v0 + 1000);
  swift_task_dealloc(*(void *)(v0 + 1232));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003631EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(void *)(a1 + 160);
  uint64_t v10 = sub_100004AEC(&qword_1009AA7B0);
  uint64_t v11 = swift_allocObject(v10, 88LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_100013044(a3, v11 + 32);
  uint64_t v12 = a4[3];
  uint64_t v13 = a4[4];
  sub_100012ED8(a4, v12);
  *(void *)(v11 + 72) = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 176))(v12, v13);
  *(void *)(v11 + 80) = a5;
  uint64_t v14 = *(void *)(v9 + 56);
  id v15 = a5;
  uint64_t v16 = sub_100004AEC(&qword_1009AA7B8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10036E6E8, v9, v14, (char *)&type metadata for () + 8, v16);
  int64_t v17 = sub_100359E4C(a2);
  type metadata accessor for Transaction(0LL);
  uint64_t v18 = swift_allocObject(&unk_100953E08, 64LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v9;
  *(void *)(v18 + 24) = v20;
  *(void *)(v18 + 32) = v17;
  *(_BYTE *)(v18 + 40) = 2;
  *(void *)(v18 + 48) = v11;
  *(void *)(v18 + 56) = a2;
  swift_retain();
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(a2);
  static Transaction.asyncTask(name:block:)( "LocationFetchServiceConnections.updateLocations",  47LL,  2LL,  &unk_1009AA7C8,  v18);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10036336C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[25] = a4;
  uint64_t v5 = type metadata accessor for BeaconEstimatedLocation(0LL);
  v4[26] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[27] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v4[28] = v7;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[29] = swift_task_alloc(v8);
  v4[30] = swift_task_alloc(v8);
  uint64_t v9 = sub_100004AEC(&qword_10099E770);
  v4[31] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  v4[32] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[33] = v11;
  v4[34] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009AA730);
  v4[35] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  v4[36] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  v4[37] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[38] = v15;
  uint64_t v16 = *(void *)(v15 + 64);
  v4[39] = v16;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[40] = swift_task_alloc(v17);
  v4[41] = swift_task_alloc(v17);
  v4[42] = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for ObservedAdvertisement(0LL);
  v4[43] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v4[44] = v19;
  v4[45] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100004AEC(&qword_10099FB70);
  v4[46] = swift_task_alloc((*(void *)(*(void *)(v20 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC(&qword_1009AA738);
  v4[47] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v4[48] = v22;
  v4[49] = swift_task_alloc((*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100004AEC(&qword_1009AA740);
  v4[50] = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  v4[51] = v24;
  v4[52] = swift_task_alloc((*(void *)(v24 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100004AEC(&qword_1009AA748);
  v4[53] = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  v4[54] = v26;
  v4[55] = swift_task_alloc((*(void *)(v26 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10036358C, 0LL, 0LL);
}

uint64_t sub_10036358C()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 448) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100363678;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100363678(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 448LL);
  *(void *)(*(void *)v1 + 456LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003636D4, 0LL, 0LL);
}

uint64_t sub_1003636D4()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 456);
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 408);
    uint64_t v3 = *(void *)(v0 + 416);
    uint64_t v6 = *(void *)(v0 + 392);
    uint64_t v5 = *(void *)(v0 + 400);
    uint64_t v7 = *(void *)(v0 + 376);
    uint64_t v8 = *(void *)(v0 + 384);
    uint64_t v9 = *(void *)(v0 + 344);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))( v6,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v7);
    AsyncStream.init(_:bufferingPolicy:_:)(v9, v6, sub_10036E134, v2, v9);
    AsyncStream.makeAsyncIterator()(v5);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v10 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 464) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1003638A0;
    return AsyncStream.Iterator.next(isolation:)(*(void *)(v0 + 368), 0LL, 0LL, *(void *)(v0 + 424));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v12 = *(void *)(v0 + 416);
    uint64_t v13 = *(void *)(v0 + 392);
    uint64_t v15 = *(void *)(v0 + 360);
    uint64_t v14 = *(void *)(v0 + 368);
    uint64_t v17 = *(void *)(v0 + 328);
    uint64_t v16 = *(void *)(v0 + 336);
    uint64_t v18 = *(void *)(v0 + 320);
    uint64_t v20 = *(void *)(v0 + 280);
    uint64_t v19 = *(void *)(v0 + 288);
    uint64_t v21 = *(void *)(v0 + 272);
    uint64_t v22 = *(void *)(v0 + 248);
    uint64_t v23 = *(void *)(v0 + 240);
    uint64_t v24 = *(void *)(v0 + 232);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003638A0()
{
  return swift_task_switch(sub_1003638F4, 0LL, 0LL);
}

uint64_t sub_1003638F4()
{
  uint64_t v1 = *(void *)(v0 + 368);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 352) + 48LL))( v1,  1LL,  *(void *)(v0 + 344)) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 432) + 8LL))(*(void *)(v0 + 440), *(void *)(v0 + 424));
    swift_release();
    uint64_t v2 = *(void *)(v0 + 416);
    uint64_t v3 = *(void *)(v0 + 392);
    uint64_t v5 = *(void *)(v0 + 360);
    uint64_t v4 = *(void *)(v0 + 368);
    uint64_t v7 = *(void *)(v0 + 328);
    uint64_t v6 = *(void *)(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 320);
    uint64_t v10 = *(void *)(v0 + 280);
    uint64_t v9 = *(void *)(v0 + 288);
    uint64_t v13 = *(void *)(v0 + 272);
    uint64_t v14 = *(void *)(v0 + 248);
    uint64_t v15 = *(void *)(v0 + 240);
    uint64_t v16 = *(void *)(v0 + 232);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v12 = *(void *)(v0 + 200);
    sub_10002218C(v1, *(void *)(v0 + 360), type metadata accessor for ObservedAdvertisement);
    return swift_task_switch(sub_100363A64, v12, 0LL);
  }

uint64_t sub_100363A64()
{
  *(_BYTE *)(v0 + 560) = *(_BYTE *)(*(void *)(v0 + 200) + 200LL);
  return swift_task_switch(sub_100363A84, 0LL, 0LL);
}

uint64_t sub_100363A84()
{
  uint64_t v1 = *(void *)(v0 + 360);
  if ((*(_BYTE *)(v0 + 560) & 1) == 0)
  {
    sub_100018C68(v1, type metadata accessor for ObservedAdvertisement);
LABEL_8:
    uint64_t v13 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 464) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1003638A0;
    return AsyncStream.Iterator.next(isolation:)(*(void *)(v0 + 368), 0LL, 0LL, *(void *)(v0 + 424));
  }

  uint64_t v2 = *(void *)(v0 + 280);
  sub_10001581C(v1 + *(int *)(*(void *)(v0 + 344) + 52LL), v2, &qword_1009AA730);
  uint64_t v3 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48LL))(v2, 1LL, v3);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 304);
  uint64_t v8 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 288);
  if (v4 == 1)
  {
    sub_100015794(*(void *)(v0 + 280), &qword_1009AA730);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1LL, 1LL, v5);
LABEL_6:
    uint64_t v10 = *(void *)(v0 + 288);
    sub_100018C68(*(void *)(v0 + 360), type metadata accessor for ObservedAdvertisement);
    uint64_t v11 = &qword_10099D8A0;
    uint64_t v12 = v10;
LABEL_7:
    sub_100015794(v12, v11);
    goto LABEL_8;
  }

  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 472) = v9;
  v9(v7, v8, v5);
  sub_100018C68(v8, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0LL, 1LL, v5);
  uint64_t v15 = *(void *)(v0 + 360);
  uint64_t v16 = *(void *)(v0 + 336);
  uint64_t v17 = *(void *)(v0 + 344);
  uint64_t v18 = *(void *)(v0 + 296);
  uint64_t v19 = *(void *)(v0 + 288);
  uint64_t v20 = *(void *)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 264);
  uint64_t v22 = *(void *)(v0 + 248);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 304) + 32LL);
  *(void *)(v0 + 480) = v23;
  v23(v16, v19, v18);
  sub_10001581C(v15 + *(int *)(v17 + 48), v22, &qword_10099E770);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1LL, v20) == 1)
  {
    uint64_t v24 = *(void *)(v0 + 360);
    uint64_t v25 = *(void *)(v0 + 248);
    (*(void (**)(void, void))(*(void *)(v0 + 304) + 8LL))(*(void *)(v0 + 336), *(void *)(v0 + 296));
    sub_100018C68(v24, type metadata accessor for ObservedAdvertisement);
    uint64_t v11 = &qword_10099E770;
    uint64_t v12 = v25;
    goto LABEL_7;
  }

  uint64_t v26 = *(void *)(v0 + 336);
  uint64_t v27 = *(void *)(v0 + 296);
  uint64_t v28 = *(uint64_t **)(v0 + 272);
  uint64_t v29 = *(void *)(v0 + 256);
  uint64_t v30 = *(_OWORD **)(v0 + 240);
  uint64_t v31 = *(int **)(v0 + 208);
  uint64_t v32 = sub_10002218C(*(void *)(v0 + 248), (uint64_t)v28, type metadata accessor for ObservedAdvertisement.Location);
  UUID.init()(v32);
  v9((uint64_t)v30 + v31[6], v26, v27);
  uint64_t v33 = *v28;
  uint64_t v34 = v28[1];
  uint64_t v35 = v28[2];
  uint64_t v36 = (char *)v28 + *(int *)(v29 + 28);
  uint64_t v37 = (char *)v30 + v31[10];
  uint64_t v38 = type metadata accessor for Date(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v40(v37, v36, v38);
  uint64_t v41 = (char *)v30 + v31[12];
  v40(v41, v36, v38);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v41, 0LL, 1LL, v38);
  *uint64_t v30 = xmmword_1007E4480;
  *(void *)((char *)v30 + v31[7]) = v33;
  *(void *)((char *)v30 + v31[8]) = v34;
  *(void *)((char *)v30 + v31[9]) = v35;
  *((_BYTE *)v30 + v31[11]) = 2;
  *(void *)((char *)v30 + v31[13]) = 0LL;
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v42 = *(void *)(v0 + 328);
  uint64_t v43 = *(void *)(v0 + 336);
  uint64_t v44 = *(void *)(v0 + 296);
  uint64_t v45 = type metadata accessor for Logger(0LL);
  sub_10000A720(v45, (uint64_t)qword_100A2A730);
  uint64_t v46 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v42, v43, v44);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = static os_log_type_t.info.getter(v47);
  BOOL v49 = os_log_type_enabled(v47, v48);
  uint64_t v50 = *(void *)(v0 + 328);
  uint64_t v51 = *(void *)(v0 + 296);
  uint64_t v52 = *(void *)(v0 + 304);
  if (v49)
  {
    uint64_t v53 = swift_slowAlloc(22LL, -1LL);
    uint64_t v54 = swift_slowAlloc(32LL, -1LL);
    uint64_t v59 = v54;
    *(_DWORD *)uint64_t v53 = 141558275;
    *(void *)(v53 + 4) = 1752392040LL;
    *(_WORD *)(v53 + 12) = 2081;
    uint64_t v55 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter(v51, v55);
    *(void *)(v53 + 14) = sub_1003F11D4(v56, v57, &v59);
    swift_bridgeObjectRelease();
    unint64_t v58 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v58(v50, v51);
    _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "Saving location for beacon - from observation store update: beacon: %{private,mask.hash}s.",  (uint8_t *)v53,  0x16u);
    swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {
    unint64_t v58 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v58(*(void *)(v0 + 328), *(void *)(v0 + 296));
  }

  *(void *)(v0 + 488) = v58;
  return swift_task_switch(sub_100363F64, *(void *)(v0 + 200), 0LL);
}

uint64_t sub_100363F64()
{
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
    sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 496) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100364008;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100364008(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 496LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 200LL);
  *(void *)(*(void *)v1 + 504LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100364068, v3, 0LL);
}

uint64_t sub_100364068()
{
  uint64_t v1 = v0[63];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 12);
  if (v1)
  {
    uint64_t v2 = sub_1003640F0;
  }

  else
  {
    unint64_t v3 = sub_10036D134();
    uint64_t v4 = swift_allocError(&type metadata for LocationFetchService.Error, v3, 0LL, 0LL);
    v0[69] = v4;
    _BYTE *v5 = 1;
    swift_willThrow(v4);
    uint64_t v2 = sub_100364484;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1003640F0()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 304);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 472))(v2, *(void *)(v0 + 336), v4);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 16) & ~v6;
  uint64_t v8 = swift_allocObject(&unk_100953CC8, v7 + v3, v6 | 7);
  *(void *)(v0 + 512) = v8;
  v1(v8 + v7, v2, v4);
  return swift_task_switch(sub_100364184, *(void *)(v0 + 504), 0LL);
}

uint64_t sub_100364184()
{
  uint64_t v1 = v0[63];
  uint64_t v2 = (void (*)(uint64_t))v0[64];
  uint64_t v4 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v6 = v0[27];
  uint64_t v5 = v0[28];
  v0[65] = *(void *)(v1 + 136);
  sub_10001DC4C(v3, v4, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  unint64_t v9 = (v5 + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v10 = swift_allocObject(&unk_100953CF0, v9 + 16, v7 | 7);
  v0[66] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v1;
  sub_10002218C(v4, v10 + v8, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v11 = (void (**)(uint64_t))(v10 + v9);
  *uint64_t v11 = sub_10036E19C;
  v11[1] = v2;
  swift_retain();
  swift_retain();
  return swift_task_switch(sub_100364260, 0LL, 0LL);
}

uint64_t sub_100364260()
{
  uint64_t v1 = v0[66];
  uint64_t v2 = v0[65];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[67] = v3;
  v3[2] = v2;
  v3[3] = sub_10036D234;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[68] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100364310;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10036F1E4,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_100364310()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 536);
  swift_task_dealloc(*(void *)(*v0 + 544));
  swift_release();
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100364380, *(void *)(v1 + 504), 0LL);
}

uint64_t sub_100364380()
{
  return swift_task_switch(sub_1003643C4, 0LL, 0LL);
}

uint64_t sub_1003643C4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[61];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[34];
  sub_100018C68(v0[30], type metadata accessor for BeaconEstimatedLocation);
  sub_100018C68(v5, type metadata accessor for ObservedAdvertisement.Location);
  v1(v3, v4);
  sub_100018C68(v2, type metadata accessor for ObservedAdvertisement);
  uint64_t v6 = (uint64_t **)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[58] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = (uint64_t *)sub_1003638A0;
  return AsyncStream.Iterator.next(isolation:)(v0[46], 0LL, 0LL, v0[53]);
}

uint64_t sub_100364484()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 424);
  uint64_t v11 = *(void *)(v0 + 416);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v5 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 328);
  uint64_t v7 = *(void *)(v0 + 296);
  uint64_t v15 = *(void *)(v0 + 320);
  uint64_t v16 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 272);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v17 = *(void *)(v0 + 280);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 232);
  swift_release();
  sub_100018C68(v9, type metadata accessor for BeaconEstimatedLocation);
  sub_100018C68(v8, type metadata accessor for ObservedAdvertisement.Location);
  v1(v6, v7);
  sub_100018C68(v5, type metadata accessor for ObservedAdvertisement);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v8);
  swift_task_dealloc(v18);
  swift_task_dealloc(v9);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003645D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A6628);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  uint64_t v9 = &v28[-v8];
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_100A2A730);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  uint64_t v15 = sub_10001581C(a1, (uint64_t)v9, &qword_1009A6628);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter(v16);
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v30 = v4;
    uint64_t v20 = v19;
    uint64_t v21 = swift_slowAlloc(64LL, -1LL);
    uint64_t v31 = v21;
    *(_DWORD *)uint64_t v20 = 141558531;
    uint64_t v32 = 1752392040LL;
    uint64_t v33 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    int v29 = v18;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v10, v22);
    uint64_t v32 = sub_1003F11D4(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    *(_WORD *)(v20 + 22) = 2080;
    sub_10001581C((uint64_t)v9, (uint64_t)v7, &qword_1009A6628);
    uint64_t v25 = String.init<A>(describing:)(v7, v30);
    uint64_t v32 = sub_1003F11D4(v25, v26, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v9, &qword_1009A6628);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  (os_log_type_t)v29,  "Done saving location for beacon (from observation store update): %{private,mask.hash}s,\nresult: %s.",  (uint8_t *)v20,  0x20u);
    uint64_t v27 = v31;
    swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    sub_100015794((uint64_t)v9, &qword_1009A6628);
  }
}

void sub_1003648F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 192);
  if (v2)
  {
    id v3 = v2;
    CurrentLocationMonitor.forceStopMonitor()();

    uint64_t v2 = *(void **)(v1 + 192);
  }

  *(void *)(v1 + 192) = 0LL;

  *(_BYTE *)(v1 + 200) = 0;
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A730);
  osos_log_t log = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v6 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Location monitor stopped.", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }
}

uint64_t sub_1003649F0()
{
  v1[22] = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  v1[23] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[24] = v3;
  v1[25] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for BeaconIdentifier(0LL);
  v1[26] = v4;
  v1[27] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100364A74, v0, 0LL);
}

uint64_t sub_100364A74()
{
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A730);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    *(void *)(v0 + 168) = sub_1003F11D4(0xD000000000000019LL, 0x800000010085F640LL, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v8 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 224) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100364CB0;
    return v9();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100364CB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 232LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100364D10, v3, 0LL);
}

uint64_t sub_100364D10()
{
  uint64_t v1 = *(void *)(v0 + 232);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1) {
    return swift_task_switch(sub_100364D7C, *(void *)(v0 + 232), 0LL);
  }
  uint64_t v3 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100364D7C()
{
  *(void *)(v0 + 240) = *(void *)(*(void *)(v0 + 232) + 136LL);
  swift_retain();
  return swift_task_switch(sub_100364DC0, 0LL, 0LL);
}

uint64_t sub_100364DC0()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[31] = v3;
  v3[2] = v1;
  v3[3] = sub_100117B74;
  v3[4] = v2;
  os_log_type_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[32] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE510);
  *os_log_type_t v4 = v0;
  v4[1] = sub_100364E7C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 20,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10036F1E8,  v3,  v5);
}

uint64_t sub_100364E7C()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 248LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 256LL));
  swift_release();
  swift_task_dealloc(v2);
  v1[33] = v1[20];
  return swift_task_switch(sub_100364EF0, v1[29], 0LL);
}

uint64_t sub_100364EF0()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_release();
  return swift_task_switch(sub_100364F30, v1, 0LL);
}

uint64_t sub_100364F30()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 272) = v2;
  if (v2)
  {
    *(void *)(v0 + 280) = 0LL;
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v4 = *(void *)(v0 + 200);
    uint64_t v6 = *(void *)(v0 + 184);
    sub_100013044(v1 + 32, v0 + 96);
    uid_t v7 = getuid();
    sub_1005E2270(v7);
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 128);
    sub_100012ED8((void *)(v0 + 96), v8);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8LL) + 32LL))(v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v4, v6);
    uint64_t v10 = (void *)swift_task_alloc(dword_1009AA36C);
    *(void *)(v0 + 288) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100365054;
    return sub_10036541C(*(void *)(v0 + 216), v0 + 96);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v0 + 200);
    swift_task_dealloc(*(void *)(v0 + 216));
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100365054()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 288LL));
  return swift_task_switch(sub_1003650AC, v1, 0LL);
}

uint64_t sub_1003650AC()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280) + 1LL;
  sub_100018C68(*(void *)(v0 + 216), type metadata accessor for BeaconIdentifier);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v0 + 200);
    swift_task_dealloc(*(void *)(v0 + 216));
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 280) + 1LL;
    *(void *)(v0 + 280) = v5;
    uint64_t v6 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v7 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 184);
    sub_100013044(*(void *)(v0 + 264) + 40 * v5 + 32, v0 + 96);
    uid_t v10 = getuid();
    sub_1005E2270(v10);
    uint64_t v11 = *(void *)(v0 + 120);
    uint64_t v12 = *(void *)(v0 + 128);
    sub_100012ED8((void *)(v0 + 96), v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v12 + 8) + 8LL) + 32LL))(v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v7, v9);
    uint64_t v13 = (void *)swift_task_alloc(dword_1009AA36C);
    *(void *)(v0 + 288) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_100365054;
    return sub_10036541C(*(void *)(v0 + 216), v0 + 96);
  }

uint64_t sub_100365200()
{
  uint64_t v1 = v0;
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2A730);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    uint64_t v9 = sub_1003F11D4(0xD00000000000001FLL, 0x800000010085F620LL, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s.", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  if (*(void *)(v1 + 176))
  {
    swift_retain();
    sub_100004AEC((uint64_t *)&unk_1009A5470);
    Task.cancel()();
    swift_release();
  }

  *(void *)(v1 + 176) = 0LL;
  swift_release();
  if (*(void *)(v1 + 184))
  {
    swift_retain();
    sub_100004AEC((uint64_t *)&unk_1009A5470);
    Task.cancel()();
    swift_release();
  }

  *(void *)(v1 + 184) = 0LL;
  return swift_release();
}

uint64_t sub_10036541C(uint64_t a1, uint64_t a2)
{
  v3[39] = a2;
  v3[40] = v2;
  v3[38] = a1;
  uint64_t v4 = type metadata accessor for BeaconIdentifier(0LL);
  v3[41] = v4;
  v3[42] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A48E0);
  v3[43] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for BeaconEstimatedLocation(0LL);
  v3[44] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[45] = v7;
  v3[46] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AA880);
  v3[47] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DeviceEvent.Location(0LL);
  v3[48] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[49] = v10;
  v3[50] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  v3[51] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A96E0);
  v3[52] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DeviceEvent(0LL);
  v3[53] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[54] = v14;
  v3[55] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100365584, v2, 0LL);
}

uint64_t sub_100365584()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 256, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 448) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100365670;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100365670(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 448LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 320LL);
  *(void *)(*(void *)v1 + 456LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003656D0, v3, 0LL);
}

uint64_t sub_1003656D0()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 456))
  {
    uint64_t v2 = *(void *)(v0 + 408);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
    uint64_t v4 = (void *)swift_task_alloc(dword_1009BCDA4);
    *(void *)(v0 + 464) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100365AD0;
    return sub_1006D5E10(*(void *)(v0 + 416), *(void *)(v0 + 304), 6, *(void *)(v0 + 408));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v6 = sub_10036D134();
    uint64_t v7 = swift_allocError(&type metadata for LocationFetchService.Error, v6, 0LL, 0LL);
    *uint64_t v8 = 0;
    swift_willThrow(v7);
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v9 = *(void *)(v0 + 336);
    uint64_t v10 = *(void *)(v0 + 304);
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_10000A720(v11, (uint64_t)qword_100A2A730);
    sub_10001DC4C(v10, v9, type metadata accessor for BeaconIdentifier);
    swift_errorRetain(v7);
    uint64_t v12 = swift_errorRetain(v7);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter(v13);
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void *)(v0 + 336);
    if (v15)
    {
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      int v18 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = v32;
      *(_DWORD *)uint64_t v17 = 138543875;
      swift_errorRetain(v7);
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v7);
      *(void *)(v0 + 288) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v17 + 4, v17 + 12);
      *int v18 = v19;
      swift_errorRelease(v7);
      swift_errorRelease(v7);
      *(_WORD *)(v17 + 12) = 2160;
      *(void *)(v0 + 280) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v17 + 14, v17 + 22);
      *(_WORD *)(v17 + 22) = 2081;
      uint64_t v20 = type metadata accessor for UUID(0LL);
      uint64_t v21 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
      *(void *)(v0 + 296) = sub_1003F11D4(v22, v23, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v17 + 24, v17 + 32);
      swift_bridgeObjectRelease();
      sub_100018C68(v16, type metadata accessor for BeaconIdentifier);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Failed to send the updated location from a device event: %{public}@for beacon: %{private,mask.hash}s",  (uint8_t *)v17,  0x20u);
      uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v18, 1LL, v24);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      swift_errorRelease(v7);
    }

    else
    {
      swift_errorRelease(v7);
      swift_errorRelease(v7);
      swift_errorRelease(v7);
      sub_100018C68(v16, type metadata accessor for BeaconIdentifier);
    }

    uint64_t v25 = *(void *)(v0 + 408);
    uint64_t v26 = *(void *)(v0 + 416);
    uint64_t v27 = *(void *)(v0 + 400);
    uint64_t v29 = *(void *)(v0 + 368);
    uint64_t v28 = *(void *)(v0 + 376);
    uint64_t v31 = *(void *)(v0 + 336);
    uint64_t v30 = *(void *)(v0 + 344);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v26);
    swift_task_dealloc(v25);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100365AD0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 464);
  *(void *)(*v1 + 472) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 408);
  uint64_t v5 = *(void *)(v2 + 320);
  sub_100015794(v4, &qword_10099D8A0);
  swift_release();
  if (v0) {
    unint64_t v6 = sub_100366578;
  }
  else {
    unint64_t v6 = sub_100365B5C;
  }
  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_100365B5C()
{
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 416);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 432) + 48LL))(v2, 1LL, v1) == 1)
  {
    uint64_t v3 = (uint64_t *)&unk_1009A96E0;
LABEL_5:
    sub_100015794(v2, v3);
    uint64_t v10 = *(void *)(v0 + 408);
    uint64_t v11 = *(void *)(v0 + 416);
    uint64_t v12 = *(void *)(v0 + 400);
    uint64_t v14 = *(void *)(v0 + 368);
    uint64_t v13 = *(void *)(v0 + 376);
    uint64_t v16 = *(void *)(v0 + 336);
    uint64_t v15 = *(void *)(v0 + 344);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v11);
    swift_task_dealloc(v10);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v4 = *(void *)(v0 + 440);
  uint64_t v5 = *(void *)(v0 + 384);
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v7 = *(void *)(v0 + 376);
  sub_10002218C(v2, v4, type metadata accessor for DeviceEvent);
  sub_10001581C(v4 + *(int *)(v1 + 28), v7, (uint64_t *)&unk_1009AA880);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1LL, v5);
  uint64_t v9 = *(void *)(v0 + 440);
  if (v8 == 1)
  {
    uint64_t v2 = *(void *)(v0 + 376);
    sub_100018C68(*(void *)(v0 + 440), type metadata accessor for DeviceEvent);
    uint64_t v3 = (uint64_t *)&unk_1009AA880;
    goto LABEL_5;
  }

  sub_10002218C(*(void *)(v0 + 376), *(void *)(v0 + 400), type metadata accessor for DeviceEvent.Location);
  unint64_t v18 = 0x10F0F040200uLL >> (8 * *(_BYTE *)(v9 + 9));
  *(_BYTE *)(v0 + 524) = v18;
  uint64_t v19 = *(double **)(v0 + 400);
  *(_DWORD *)(v0 + 520) = *(_DWORD *)(*(void *)(v0 + 384) + 28LL);
  double v20 = *v19;
  double v21 = v19[1];
  double v22 = v19[2];
  unint64_t v23 = (void *)sub_1006D4870(v18);
  id v24 = objc_allocWithZone(&OBJC_CLASS___SPBeaconLocation);
  id v25 = v23;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 480) = [v24 initWithTimestamp:isa latitude:v25 longitude:v20 horizontalAccuracy:v21 source:v22];

  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 176);
    sub_100012ED8((void *)(v0 + 176), *(void *)(v0 + 200));
    uint64_t v28 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v27 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 488) = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_100365DEC;
    return v28();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100365DEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 488LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 320LL);
  *(void *)(*(void *)v1 + 496LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100365E4C, v3, 0LL);
}

uint64_t sub_100365E4C()
{
  uint64_t v1 = (void *)(v0 + 176);
  if (*(void *)(v0 + 496))
  {
    uint64_t v2 = *(void *)(v0 + 328);
    uint64_t v3 = *(void *)(v0 + 304);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = v3 + *(int *)(v2 + 20);
    uint64_t v5 = (void *)swift_task_alloc(dword_1009B6394);
    *(void *)(v0 + 504) = v5;
    void *v5 = v0;
    v5[1] = sub_10036625C;
    return sub_1005EB9CC(v4);
  }

  else
  {
    uint64_t v7 = *(void **)(v0 + 480);
    uint64_t v8 = *(void *)(v0 + 440);
    uint64_t v9 = *(void *)(v0 + 400);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v10 = sub_10036D134();
    uint64_t v11 = swift_allocError(&type metadata for LocationFetchService.Error, v10, 0LL, 0LL);
    _BYTE *v12 = 1;
    swift_willThrow(v11);

    sub_100018C68(v9, type metadata accessor for DeviceEvent.Location);
    sub_100018C68(v8, type metadata accessor for DeviceEvent);
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v13 = *(void *)(v0 + 336);
    uint64_t v14 = *(void *)(v0 + 304);
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2A730);
    sub_10001DC4C(v14, v13, type metadata accessor for BeaconIdentifier);
    swift_errorRetain(v11);
    uint64_t v16 = swift_errorRetain(v11);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void *)(v0 + 336);
    if (v19)
    {
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      double v22 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = v36;
      *(_DWORD *)uint64_t v21 = 138543875;
      swift_errorRetain(v11);
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError(v11);
      *(void *)(v0 + 288) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v21 + 4, v21 + 12);
      uint64_t *v22 = v23;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      *(_WORD *)(v21 + 12) = 2160;
      *(void *)(v0 + 280) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v21 + 14, v21 + 22);
      *(_WORD *)(v21 + 22) = 2081;
      uint64_t v24 = type metadata accessor for UUID(0LL);
      uint64_t v25 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
      *(void *)(v0 + 296) = sub_1003F11D4(v26, v27, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v21 + 24, v21 + 32);
      swift_bridgeObjectRelease();
      sub_100018C68(v20, type metadata accessor for BeaconIdentifier);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Failed to send the updated location from a device event: %{public}@for beacon: %{private,mask.hash}s",  (uint8_t *)v21,  0x20u);
      uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v22, 1LL, v28);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);

      swift_errorRelease(v11);
    }

    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      sub_100018C68(v20, type metadata accessor for BeaconIdentifier);
    }

    uint64_t v29 = *(void *)(v0 + 408);
    uint64_t v30 = *(void *)(v0 + 416);
    uint64_t v31 = *(void *)(v0 + 400);
    uint64_t v33 = *(void *)(v0 + 368);
    uint64_t v32 = *(void *)(v0 + 376);
    uint64_t v35 = *(void *)(v0 + 336);
    uint64_t v34 = *(void *)(v0 + 344);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v30);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10036625C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 504LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 320LL);
  *(void *)(*(void *)v1 + 512LL) = a1;
  swift_task_dealloc(v2);
  swift_release();
  return swift_task_switch(sub_1003662C4, v3, 0LL);
}

uint64_t sub_1003662C4()
{
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 344);
  sub_1000F0BF0(*(void *)(v0 + 512), v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    uint64_t v4 = *(void **)(v0 + 480);
    char v5 = *(_BYTE *)(v0 + 524);
    uint64_t v6 = *(void *)(v0 + 440);
    uint64_t v7 = *(void *)(v0 + 400);
    uint64_t v8 = *(void *)(v0 + 312);
    uint64_t v9 = *(void *)(v0 + 320);
    sub_100015794(*(void *)(v0 + 344), &qword_1009A48E0);
    uint64_t v10 = *(void *)(v9 + 160);
    type metadata accessor for Transaction(0LL);
    sub_100013044(v8, v0 + 56);
    uint64_t v11 = swift_allocObject(&unk_1009541C8, 73LL, 7LL);
    sub_100012EC0((__int128 *)(v0 + 56), v11 + 16);
    *(void *)(v11 + 56) = v10;
    *(void *)(v11 + 64) = v4;
    *(_BYTE *)(v11 + 72) = v5;
    id v12 = v4;
    swift_retain();
    static Transaction.asyncTask(name:block:)( "LocationFetchServiceConnections.updateLocations:beacon:",  55LL,  2LL,  &unk_1009AA890,  v11);
    swift_release();
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 368);
    uint64_t v14 = *(void *)(v0 + 352);
    uint64_t v15 = *(void *)(v0 + 400) + *(int *)(v0 + 520);
    sub_10002218C(*(void *)(v0 + 344), v13, type metadata accessor for BeaconEstimatedLocation);
    char v16 = static Date.> infix(_:_:)(v15, v13 + *(int *)(v14 + 40));
    uint64_t v17 = *(void **)(v0 + 480);
    if ((v16 & 1) != 0)
    {
      char v18 = *(_BYTE *)(v0 + 524);
      uint64_t v6 = *(void *)(v0 + 440);
      uint64_t v7 = *(void *)(v0 + 400);
      uint64_t v19 = *(void *)(v0 + 368);
      uint64_t v20 = *(void *)(v0 + 312);
      uint64_t v21 = *(void *)(*(void *)(v0 + 320) + 160LL);
      type metadata accessor for Transaction(0LL);
      sub_100013044(v20, v0 + 216);
      uint64_t v22 = swift_allocObject(&unk_1009541F0, 73LL, 7LL);
      sub_100012EC0((__int128 *)(v0 + 216), v22 + 16);
      *(void *)(v22 + 56) = v21;
      *(void *)(v22 + 64) = v17;
      *(_BYTE *)(v22 + 72) = v18;
      swift_retain();
      id v23 = v17;
      static Transaction.asyncTask(name:block:)( "LocationFetchServiceConnections.updateLocations:beacon:",  55LL,  2LL,  &unk_1009AA898,  v22);
      swift_release();

      uint64_t v24 = v19;
    }

    else
    {
      uint64_t v6 = *(void *)(v0 + 440);
      uint64_t v7 = *(void *)(v0 + 400);
      uint64_t v25 = *(void *)(v0 + 368);

      uint64_t v24 = v25;
    }

    sub_100018C68(v24, type metadata accessor for BeaconEstimatedLocation);
  }

  sub_100018C68(v7, type metadata accessor for DeviceEvent.Location);
  sub_100018C68(v6, type metadata accessor for DeviceEvent);
  uint64_t v26 = *(void *)(v0 + 408);
  uint64_t v27 = *(void *)(v0 + 416);
  uint64_t v28 = *(void *)(v0 + 400);
  uint64_t v30 = *(void *)(v0 + 368);
  uint64_t v29 = *(void *)(v0 + 376);
  uint64_t v32 = *(void *)(v0 + 336);
  uint64_t v31 = *(void *)(v0 + 344);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100366578()
{
  uint64_t v1 = *(void *)(v0 + 472);
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2A730);
  sub_10001DC4C(v3, v2, type metadata accessor for BeaconIdentifier);
  swift_errorRetain(v1);
  uint64_t v5 = swift_errorRetain(v1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 336);
  if (v8)
  {
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v26;
    *(_DWORD *)uint64_t v10 = 138543875;
    swift_errorRetain(v1);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 288) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v10 + 4, v10 + 12);
    *uint64_t v11 = v12;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    *(_WORD *)(v10 + 12) = 2160;
    *(void *)(v0 + 280) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2081;
    uint64_t v13 = type metadata accessor for UUID(0LL);
    uint64_t v14 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    *(void *)(v0 + 296) = sub_1003F11D4(v15, v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68(v9, type metadata accessor for BeaconIdentifier);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Failed to send the updated location from a device event: %{public}@for beacon: %{private,mask.hash}s",  (uint8_t *)v10,  0x20u);
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v17);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    sub_100018C68(v9, type metadata accessor for BeaconIdentifier);
  }

  uint64_t v18 = *(void *)(v0 + 408);
  uint64_t v19 = *(void *)(v0 + 416);
  uint64_t v20 = *(void *)(v0 + 400);
  uint64_t v22 = *(void *)(v0 + 368);
  uint64_t v21 = *(void *)(v0 + 376);
  uint64_t v24 = *(void *)(v0 + 336);
  uint64_t v23 = *(void *)(v0 + 344);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003668C4()
{
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100366930()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LocationFetchService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd20LocationFetchService);
}

uint64_t sub_100366968(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003669C0, 0LL, 0LL);
}

uint64_t sub_1003669C0()
{
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  uint64_t v4 = swift_allocObject(&unk_1009536B0, 24LL, 7LL);
  swift_weakInit(v4 + 16, v3);
  uint64_t v5 = swift_allocObject(&unk_1009536D8, 32LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v5 + 24) = v2;
  id v6 = v2;
  uint64_t v7 = swift_retain(v4);
  UUID.init()(v7);
  uint64_t v8 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v1,  &unk_1009AA608,  v5,  &unk_1009AA610,  0LL);
  swift_release(v4);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v8);
  swift_release(v8);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100366AB0(uint64_t a1, uint64_t a2)
{
  v2[50] = a1;
  v2[51] = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[52] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[53] = v4;
  v2[54] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for BeaconEstimatedLocation(0LL);
  v2[55] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[56] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v2[57] = v7;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[58] = swift_task_alloc(v8);
  v2[59] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for Date(0LL);
  v2[60] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[61] = v10;
  v2[62] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100366B74, 0LL, 0LL);
}

uint64_t sub_100366B74()
{
  uint64_t v1 = *(void *)(v0 + 400) + 16LL;
  swift_beginAccess(v1, v0 + 296, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 504) = Strong;
  if (Strong) {
    return swift_task_switch(sub_100366C20, Strong, 0LL);
  }
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v5 = *(void *)(v0 + 472);
  uint64_t v6 = *(void *)(v0 + 432);
  swift_task_dealloc(*(void *)(v0 + 496));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100366C20()
{
  *(_BYTE *)(v0 + 696) = *(_BYTE *)(*(void *)(v0 + 504) + 200LL);
  return swift_task_switch(sub_100366C40, 0LL, 0LL);
}

uint64_t sub_100366C40()
{
  if (*(_BYTE *)(v0 + 696) == 1)
  {
    if (qword_10099B328 != -1) {
      swift_once(&qword_10099B328, sub_10035A0D4);
    }
    uint64_t v1 = *(void **)(v0 + 408);
    uint64_t v2 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 512) = sub_10000A720(v2, (uint64_t)qword_100A2A730);
    id v3 = v1;
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.info.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(v0 + 408);
      uint64_t v7 = swift_slowAlloc(22LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = v27;
      *(_DWORD *)uint64_t v7 = 136446466;
      if (v6) {
        uint64_t v8 = 0x61636F6C20736168LL;
      }
      else {
        uint64_t v8 = 7104878LL;
      }
      if (v6) {
        unint64_t v9 = 0xEC0000006E6F6974LL;
      }
      else {
        unint64_t v9 = 0xE300000000000000LL;
      }
      *(void *)(v0 + 384) = sub_1003F11D4(v8, v9, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v7 + 4, v7 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2048;
      if (v6)
      {
        uint64_t v11 = *(void *)(v0 + 488);
        uint64_t v10 = *(void *)(v0 + 496);
        uint64_t v12 = *(void *)(v0 + 480);
        id v13 = [v3 timestamp];
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

        double v15 = Date.timeIntervalSinceNow.getter(v14);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      }

      else
      {
        double v15 = 1.0;
      }

      *(double *)(v0 + 392) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v7 + 14, v7 + 22);

      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Location monitor did update location: %{public}s,age: %f.",  (uint8_t *)v7,  0x16u);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v21 = *(void *)(v0 + 504);
    if (*(void *)(v0 + 408))
    {
      id v22 = v3;
      return swift_task_switch(sub_100366FF4, v21, 0LL);
    }

    goto LABEL_23;
  }

  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2A730);
  uint64_t v18 = (void *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  if (!os_log_type_enabled((os_log_t)v18, v19))
  {

LABEL_23:
    swift_release();
    goto LABEL_24;
  }

  uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v20 = 0;
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v18,  v19,  "Ignoring location updates while not processing.",  v20,  2u);
  swift_slowDealloc(v20, -1LL, -1LL);
  swift_release();

LABEL_24:
  uint64_t v24 = *(void *)(v0 + 464);
  uint64_t v25 = *(void *)(v0 + 472);
  uint64_t v26 = *(void *)(v0 + 432);
  swift_task_dealloc(*(void *)(v0 + 496));
  swift_task_dealloc(v25);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100366FF4()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 320, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 56);
    sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
    id v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 520) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003670E0;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003670E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 520LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 504LL);
  *(void *)(*(void *)v1 + 528LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100367140, v3, 0LL);
}

uint64_t sub_100367140()
{
  uint64_t v1 = v0[66];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7);
  if (v1)
  {
    uint64_t v2 = v0[66];
    uint64_t v3 = sub_1003671CC;
  }

  else
  {
    unint64_t v4 = sub_10036D134();
    uint64_t v5 = swift_allocError(&type metadata for LocationFetchService.Error, v4, 0LL, 0LL);
    v0[75] = v5;
    *uint64_t v6 = 1;
    swift_willThrow(v5);
    uint64_t v3 = sub_100367480;
    uint64_t v2 = 0LL;
  }

  return swift_task_switch(v3, v2, 0LL);
}

uint64_t sub_1003671CC()
{
  *(void *)(v0 + 536) = *(void *)(*(void *)(v0 + 528) + 136LL);
  swift_retain();
  return swift_task_switch(sub_100367210, 0LL, 0LL);
}

uint64_t sub_100367210()
{
  uint64_t v1 = v0[67];
  uint64_t v2 = v0[66];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[68] = v3;
  v3[2] = v1;
  v3[3] = sub_100117B74;
  v3[4] = v2;
  unint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[69] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE510);
  v0[70] = v5;
  *unint64_t v4 = v0;
  v4[1] = sub_1003672D4;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 43,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10036D178,  v3,  v5);
}

uint64_t sub_1003672D4()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 544LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 552LL));
  swift_release();
  swift_task_dealloc(v2);
  v1[71] = v1[43];
  return swift_task_switch(sub_10036734C, v1[66], 0LL);
}

uint64_t sub_10036734C()
{
  return swift_task_switch(sub_100367388, 0LL, 0LL);
}

uint64_t sub_100367388()
{
  v0[44] = v0[71];
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  v0[72] = v1;
  uint64_t v2 = sub_100090114(&qword_1009AA640, (uint64_t *)&unk_1009AE510);
  void *v1 = v0;
  v1[1] = sub_100367408;
  return Sequence.asyncFilter(_:)(&unk_1009AA638, v0[63], v0[70], v2);
}

uint64_t sub_100367408(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 576);
  *(void *)(v3 + 584) = a1;
  *(void *)(v3 + 592) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v5 = sub_1003686B4;
  }
  else {
    uint64_t v5 = sub_1003674EC;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100367480()
{
  uint64_t v1 = *(void **)(v0 + 408);
  swift_release(*(void *)(v0 + 504));

  uint64_t v3 = *(void *)(v0 + 464);
  uint64_t v2 = *(void *)(v0 + 472);
  uint64_t v4 = *(void *)(v0 + 432);
  swift_task_dealloc(*(void *)(v0 + 496));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003674EC()
{
  uint64_t v1 = v0[73];
  uint64_t v2 = *(void *)(v1 + 16);
  v0[76] = v2;
  if (v2)
  {
    uint64_t v4 = v0[60];
    uint64_t v3 = v0[61];
    uint64_t v6 = v0[54];
    uint64_t v5 = (int *)v0[55];
    v0[78] = 0LL;
    uint64_t v7 = (char *)v0[59];
    uint64_t v37 = v3;
    uint64_t v38 = v0[53];
    uint64_t v8 = (void *)v0[51];
    uint64_t v39 = v0[52];
    uint64_t v9 = sub_100013044(v1 + 32, (uint64_t)(v0 + 32));
    UUID.init()(v9);
    uint64_t v11 = v0[35];
    uint64_t v10 = v0[36];
    sub_100012ED8(v0 + 32, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8LL) + 32LL))(v11);
    [v8 coordinate];
    uint64_t v13 = v12;
    [v8 coordinate];
    uint64_t v15 = v14;
    [v8 horizontalAccuracy];
    uint64_t v17 = v16;
    id v18 = [v8 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

    os_log_type_t v19 = &v7[v5[12]];
    id v20 = [v8 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v19, 0LL, 1LL, v4);
    *(_OWORD *)uint64_t v7 = xmmword_1007E4480;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(&v7[v5[5]], v6, v39);
    *(void *)&v7[v5[7]] = v13;
    *(void *)&v7[v5[8]] = v15;
    *(void *)&v7[v5[9]] = v17;
    v7[v5[11]] = 2;
    *(void *)&v7[v5[13]] = 0LL;
    uint64_t v21 = sub_100013044((uint64_t)(v0 + 32), (uint64_t)(v0 + 27));
    id v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = v0[54];
      uint64_t v40 = v0[53];
      uint64_t v25 = v0[52];
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v27;
      *(_DWORD *)uint64_t v26 = 141558275;
      v0[46] = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 46, v0 + 47, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      uint64_t v29 = v0[30];
      uint64_t v28 = v0[31];
      sub_100012ED8(v0 + 27, v29);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v28 + 8) + 8LL) + 32LL))(v29);
      uint64_t v30 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v25, v30);
      unint64_t v33 = v32;
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v24, v25);
      v0[47] = sub_1003F11D4(v31, v33, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 47, v0 + 48, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 27);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Saving location for connected beacons - from location monitor update:beacon: %{private,mask.hash}s.",  (uint8_t *)v26,  0x16u);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 27);
    }

    uint64_t v34 = v0[63];
    uint64_t v35 = sub_100367DB0;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v34 = v0[63];
    uint64_t v35 = sub_1003678A4;
  }

  return swift_task_switch(v35, v34, 0LL);
}

uint64_t sub_1003678A4()
{
  uint64_t v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = v2;
  uint64_t v3 = sub_100004AEC(&qword_1009AA648);
  *uint64_t v2 = v0;
  v2[1] = sub_100367920;
  return unsafeBlocking<A>(_:)(v0 + 360, sub_10036D274, *(void *)(v0 + 504), v3);
}

uint64_t sub_100367920()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 504LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 616LL));
  swift_release();
  return swift_task_switch(sub_100367980, v1, 0LL);
}

uint64_t sub_100367980()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v24 + 592);
    swift_bridgeObjectRetain(v1);
    uint64_t v23 = v4;
    uint64_t v5 = (uint64_t *)(v4 + 48);
    do
    {
      uint64_t v7 = v5[4];
      if (v7)
      {
        uint64_t v9 = *(v5 - 1);
        uint64_t v8 = *v5;
        uint64_t v10 = v5[1];
        uint64_t v25 = v5[2];
        uint64_t v11 = v5[3];
        uint64_t v12 = v5[6];
        if (v11 == 0xD000000000000017LL && v7 == 0x800000010085F570LL
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v5[3], v7, 0xD000000000000017LL, 0x800000010085F570LL, 0LL) & 1) != 0)
        {
LABEL_16:
          swift_bridgeObjectRelease_n(v23, 2LL);
          uint64_t v21 = sub_100367D44;
          return swift_task_switch(v21, 0LL, 0LL);
        }

        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRetain(v12);
        BOOL v13 = sub_1006E6970(v11, v7);
        if (v3)
        {
          swift_errorRetain(v3);
          uint64_t v14 = swift_errorRetain(v3);
          uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
          os_log_type_t v16 = static os_log_type_t.fault.getter(v15);
          if (os_log_type_enabled(v15, v16))
          {
            uint64_t v17 = swift_slowAlloc(12LL, -1LL);
            id v18 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
            *(_DWORD *)uint64_t v17 = 138543362;
            swift_errorRetain(v3);
            uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v3);
            *(void *)(v17 + 4) = v19;
            *id v18 = v19;
            swift_errorRelease(v3);
            swift_errorRelease(v3);
            _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "RunningBoardProcess threw an error: %{public}@",  (uint8_t *)v17,  0xCu);
            uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099FB20);
            swift_arrayDestroy(v18, 1LL, v20);
            swift_slowDealloc(v18, -1LL, -1LL);
            swift_slowDealloc(v17, -1LL, -1LL);

            swift_errorRelease(v3);
          }

          else
          {
            swift_errorRelease(v3);
            swift_errorRelease(v3);
            swift_errorRelease(v3);
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          BOOL v6 = v13;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v6) {
            goto LABEL_16;
          }
        }

        uint64_t v3 = 0LL;
      }

      v5 += 12;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease_n(v23, 2LL);
    uint64_t v21 = sub_10036F1EC;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = sub_100367C94;
  }

  return swift_task_switch(v21, 0LL, 0LL);
}

uint64_t sub_100367C94(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "                    No more running clients. Pausing location updates.",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void *)(v1 + 504);

  return swift_task_switch(sub_100368674, v5, 0LL);
}

uint64_t sub_100367D44()
{
  uint64_t v1 = *(void **)(v0 + 408);
  swift_release(*(void *)(v0 + 504));

  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v4 = *(void *)(v0 + 432);
  swift_task_dealloc(*(void *)(v0 + 496));
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100367DB0()
{
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 176, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 200))
  {
    sub_100012EC0((__int128 *)(v0 + 176), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 632) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100367E54;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100367E54(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 632LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 504LL);
  *(void *)(*(void *)v1 + 64Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100367EB4, v3, 0LL);
}

uint64_t sub_100367EB4()
{
  uint64_t v1 = v0 + 2;
  if (v0[80])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = sub_100367F4C;
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v3 = sub_10036D134();
    uint64_t v4 = swift_allocError(&type metadata for LocationFetchService.Error, v3, 0LL, 0LL);
    v0[86] = v4;
    _BYTE *v5 = 1;
    swift_willThrow(v4);
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1003685E8;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100367F4C()
{
  uint64_t v1 = swift_allocObject(&unk_100953700, 56LL, 7LL);
  *(void *)(v0 + 648) = v1;
  sub_100012EC0((__int128 *)(v0 + 96), v1 + 16);
  return swift_task_switch(sub_100367FB4, *(void *)(v0 + 640), 0LL);
}

uint64_t sub_100367FB4()
{
  uint64_t v1 = (void (*)(uint64_t))v0[81];
  uint64_t v2 = v0[80];
  uint64_t v4 = v0[58];
  uint64_t v3 = v0[59];
  uint64_t v6 = v0[56];
  uint64_t v5 = v0[57];
  v0[82] = *(void *)(v2 + 136);
  sub_10001DC4C(v3, v4, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  unint64_t v9 = (v5 + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v10 = swift_allocObject(&unk_100953728, v9 + 16, v7 | 7);
  v0[83] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v2;
  sub_10002218C(v4, v10 + v8, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v11 = (void (**)(uint64_t))(v10 + v9);
  *uint64_t v11 = sub_10036D228;
  v11[1] = v1;
  swift_retain();
  swift_retain();
  return swift_task_switch(sub_100368094, 0LL, 0LL);
}

uint64_t sub_100368094()
{
  uint64_t v1 = v0[83];
  uint64_t v2 = v0[82];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[84] = v3;
  v3[2] = v2;
  v3[3] = sub_10036D234;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[85] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100368144;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10036D238,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_100368144()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 672);
  swift_task_dealloc(*(void *)(*v0 + 680));
  swift_release();
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003681B4, *(void *)(v1 + 640), 0LL);
}

uint64_t sub_1003681B4()
{
  return swift_task_switch(sub_1003681FC, 0LL, 0LL);
}

uint64_t sub_1003681FC()
{
  uint64_t v1 = v0[76];
  uint64_t v2 = v0[78] + 1LL;
  sub_100018C68(v0[59], type metadata accessor for BeaconEstimatedLocation);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = v0[63];
    uint64_t v4 = sub_1003678A4;
  }

  else
  {
    uint64_t v5 = v0[78] + 1LL;
    v0[78] = v5;
    uint64_t v6 = v0[61];
    uint64_t v37 = v0[60];
    uint64_t v7 = (char *)v0[59];
    uint64_t v9 = v0[54];
    uint64_t v8 = (int *)v0[55];
    uint64_t v38 = v0[53];
    uint64_t v10 = (void *)v0[51];
    uint64_t v39 = v0[52];
    uint64_t v11 = sub_100013044(v0[73] + 40 * v5 + 32, (uint64_t)(v0 + 32));
    UUID.init()(v11);
    uint64_t v12 = v0[35];
    uint64_t v13 = v0[36];
    sub_100012ED8(v0 + 32, v12);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v13 + 8) + 8LL) + 32LL))(v12);
    [v10 coordinate];
    uint64_t v15 = v14;
    [v10 coordinate];
    uint64_t v17 = v16;
    [v10 horizontalAccuracy];
    uint64_t v19 = v18;
    id v20 = [v10 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

    uint64_t v21 = &v7[v8[12]];
    id v22 = [v10 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v22);

    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0LL, 1LL, v37);
    *(_OWORD *)uint64_t v7 = xmmword_1007E4480;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(&v7[v8[5]], v9, v39);
    *(void *)&v7[v8[7]] = v15;
    *(void *)&v7[v8[8]] = v17;
    *(void *)&v7[v8[9]] = v19;
    v7[v8[11]] = 2;
    *(void *)&v7[v8[13]] = 0LL;
    uint64_t v23 = sub_100013044((uint64_t)(v0 + 32), (uint64_t)(v0 + 27));
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.info.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = v0[54];
      uint64_t v40 = v0[53];
      uint64_t v27 = v0[52];
      uint64_t v28 = swift_slowAlloc(22LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v29;
      *(_DWORD *)uint64_t v28 = 141558275;
      v0[46] = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 46, v0 + 47, v28 + 4, v28 + 12);
      *(_WORD *)(v28 + 12) = 2081;
      uint64_t v31 = v0[30];
      uint64_t v30 = v0[31];
      sub_100012ED8(v0 + 27, v31);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v30 + 8) + 8LL) + 32LL))(v31);
      uint64_t v32 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v27, v32);
      unint64_t v35 = v34;
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v26, v27);
      v0[47] = sub_1003F11D4(v33, v35, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 47, v0 + 48, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 27);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Saving location for connected beacons - from location monitor update:beacon: %{private,mask.hash}s.",  (uint8_t *)v28,  0x16u);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 27);
    }

    uint64_t v3 = v0[63];
    uint64_t v4 = sub_100367DB0;
  }

  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_1003685E8()
{
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = *(void **)(v0 + 408);
  swift_release();

  sub_100018C68(v1, type metadata accessor for BeaconEstimatedLocation);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 256));
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v5 = *(void *)(v0 + 432);
  swift_task_dealloc(*(void *)(v0 + 496));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100368674()
{
  return swift_task_switch(sub_10036F1E0, 0LL, 0LL);
}

uint64_t sub_1003686B4()
{
  uint64_t v1 = *(void **)(v0 + 408);
  swift_release(*(void *)(v0 + 504));

  uint64_t v3 = *(void *)(v0 + 464);
  uint64_t v2 = *(void *)(v0 + 472);
  uint64_t v4 = *(void *)(v0 + 432);
  swift_task_dealloc(*(void *)(v0 + 496));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100368720(uint64_t a1, uint64_t a2)
{
  v2[15] = a1;
  v2[16] = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v2[17] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[18] = v5;
  v2[19] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  v2[20] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003687A8, a2, 0LL);
}

uint64_t sub_1003687A8()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 168) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100368894;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100368894(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 176LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003688F4, v3, 0LL);
}

uint64_t sub_1003688F4()
{
  uint64_t v1 = v0[22];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  if (v1)
  {
    uint64_t v2 = sub_10036897C;
  }

  else
  {
    unint64_t v3 = sub_10036D134();
    uint64_t v4 = swift_allocError(&type metadata for LocationFetchService.Error, v3, 0LL, 0LL);
    v0[24] = v4;
    _BYTE *v5 = 1;
    swift_willThrow(v4);
    uint64_t v2 = sub_100368AE8;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10036897C()
{
  uint64_t v1 = (void *)v0[15];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100012ED8(v1, v2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 8) + 8LL) + 32LL))(v2);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009B637C);
  v0[23] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100368A0C;
  return sub_1005EB0F0(v0[20], v0[19], 1);
}

uint64_t sub_100368A0C(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 152LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 160LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 136LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 144LL);
  *(_BYTE *)(*(void *)v1 + 20Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_100015794(v3, (uint64_t *)&unk_10099D720);
  return swift_task_switch(sub_100368AA8, 0LL, 0LL);
}

uint64_t sub_100368AA8()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 200));
}

uint64_t sub_100368AE8()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

void sub_100368B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A6628);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v31 - v12;
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_100A2A730);
  sub_100013044(a2, (uint64_t)v38);
  uint64_t v15 = sub_10001581C(a1, (uint64_t)v13, &qword_1009A6628);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter(v16);
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v33 = v8;
    uint64_t v20 = v19;
    uint64_t v21 = swift_slowAlloc(64LL, -1LL);
    uint64_t v35 = v21;
    *(_DWORD *)uint64_t v20 = 141558531;
    uint64_t v36 = 1752392040LL;
    uint64_t v37 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    uint64_t v32 = v20 + 14;
    int v34 = v18;
    uint64_t v23 = v39;
    uint64_t v22 = v40;
    sub_100012ED8(v38, v39);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v22 + 8) + 8LL) + 32LL))(v23);
    uint64_t v24 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v4, v24);
    unint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v36 = sub_1003F11D4(v25, v27, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v32, v20 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
    *(_WORD *)(v20 + 22) = 2080;
    sub_10001581C((uint64_t)v13, (uint64_t)v11, &qword_1009A6628);
    uint64_t v28 = String.init<A>(describing:)(v11, v33);
    uint64_t v36 = sub_1003F11D4(v28, v29, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v13, &qword_1009A6628);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  (os_log_type_t)v34,  "Done saving location for connected beacon: %{private,mask.hash}s, result: %s.",  (uint8_t *)v20,  0x20u);
    uint64_t v30 = v35;
    swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
    sub_100015794((uint64_t)v13, &qword_1009A6628);
  }
}

uint64_t sub_100368E80(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = swift_allocObject(&unk_100953688, 32LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v5 + 24) = a3;
  id v6 = a3;
  swift_retain(v3);
  static Transaction.asyncTask(name:block:)( "LocationFetchService.locationMonitorDidUpdate",  45LL,  2LL,  &unk_1009AA5F8,  v5);
  return swift_release(v5);
}

uint64_t sub_100368F04()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009AA5F4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100015D58;
  return sub_100366968(v2, v3);
}

uint64_t sub_100368F54()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100368F7C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009AA604);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100015D58;
  return sub_100366AB0(v2, v3);
}

uint64_t sub_100368FCC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v4 + 284) = a4;
  *(void *)(v4 + 152) = a2;
  *(void *)(v4 + 160) = a3;
  *(void *)(v4 + 144) = a1;
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  *(void *)(v4 + 168) = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  *(void *)(v4 + 176) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v4 + 184) = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  *(void *)(v4 + 192) = v10;
  *(void *)(v4 + 200) = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)swift_task_alloc(dword_1009AA7FC);
  *(void *)(v4 + 208) = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_10036907C;
  return sub_100369904(a1, a2);
}

uint64_t sub_10036907C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208LL);
  *(void *)(*(void *)v1 + 216LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003690D8, 0LL, 0LL);
}

uint64_t sub_1003690D8()
{
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void **)(v0 + 160);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2A730);
  sub_100013044(v1, v0 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain_n(v2, 2LL);
  id v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.info.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 216);
  if (v8)
  {
    os_log_type_t v57 = v7;
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v50 = *(void *)(v0 + 184);
    os_log_t log = v6;
    uint64_t v11 = *(void *)(v0 + 176);
    uint64_t v12 = *(void **)(v0 + 160);
    unsigned __int8 v51 = *(_BYTE *)(v0 + 284);
    uint64_t v13 = swift_slowAlloc(62LL, -1LL);
    uint64_t v53 = swift_slowAlloc(64LL, -1LL);
    uint64_t v59 = v53;
    *(_DWORD *)uint64_t v13 = 141559299;
    *(void *)(v0 + sub_100013044(v0 + 256, v0 + 96) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    uint64_t v15 = *(void *)(v0 + 40);
    uint64_t v14 = *(void *)(v0 + 48);
    sub_100012ED8((void *)(v0 + 16), v15);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v14 + 8) + 8LL) + 32LL))(v15);
    uint64_t v16 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v11, v16);
    unint64_t v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v10, v11);
    *(void *)(v0 + 104) = sub_1003F11D4(v17, v19, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
    *(_WORD *)(v13 + 22) = 2048;
    uint64_t v20 = *(void *)(v9 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 112) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 32) = 2049;
    [v12 latitude];
    *(void *)(v0 + 120) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v13 + 34, v13 + 42);

    *(_WORD *)(v13 + 42) = 2049;
    [v12 longitude];
    *(void *)(v0 + 128) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v13 + 44, v13 + 52);

    *(_WORD *)(v13 + 52) = 2080;
    uint64_t v23 = sub_100167394(v51);
    *(void *)(v0 + 136) = sub_1003F11D4(v23, v24, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v13 + 54, v13 + 62);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  log,  v57,  "Update location for beacon: %{private,mask.hash}s,\n clientBeaconIdentifiers %ld,\n Loc: lat: %{private}f, lon: %{private}f source: %s.",  (uint8_t *)v13,  0x3Eu);
    swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    uint64_t v25 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
    swift_bridgeObjectRelease();
  }

  uint64_t v26 = *(void *)(v0 + 216);
  uint64_t v27 = *(void *)(v26 + 16);
  *(void *)(v0 + 224) = v27;
  uint64_t v28 = *(void *)(v0 + 184);
  if (v27)
  {
    int v29 = *(_DWORD *)(v28 + 80);
    *(_DWORD *)(v0 + 280) = v29;
    *(void *)(v0 + 232) = *(void *)(v28 + 72);
    uint64_t v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16);
    *(void *)(v0 + 240) = v30;
    *(void *)(v0 + 248) = 0LL;
    uint64_t v31 = *(void *)(v0 + 168);
    uint64_t v32 = *(void *)(v0 + 176);
    v30(v31, v26 + ((v29 + 32LL) & ~(unint64_t)v29), v32);
    uint64_t v33 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56);
    *(void *)(v0 + 256) = v33;
    v33(v31, 0LL, 1LL, v32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v31, 1LL, v32) != 1)
    {
      uint64_t v34 = *(unsigned __int8 *)(v0 + 280);
      uint64_t v52 = *(void *)(v0 + 200);
      uint64_t v35 = *(void *)(v0 + 176);
      char v58 = *(_BYTE *)(v0 + 284);
      os_log_t loga = *(os_log_t *)(v0 + 160);
      uint64_t v36 = *(void *)(v0 + 144);
      uint64_t v54 = *(void *)(v0 + 152);
      uint64_t v37 = (v34 + 24) & ~v34;
      unint64_t v38 = (*(void *)(v0 + 192) + v37 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v39 = (v38 + 47) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v40 = v34 | 7;
      uint64_t v41 = *(void (**)(void))(*(void *)(v0 + 184) + 32LL);
      v41();
      sub_100013044(v36, v0 + 56);
      uint64_t v42 = swift_allocObject(&unk_100953ED0, v39 + 9, v40);
      *(void *)(v0 + 264) = v42;
      *(void *)(v42 + swift_weakDestroy(v0 + 16) = v54;
      ((void (*)(uint64_t, uint64_t, uint64_t))v41)(v42 + v37, v52, v35);
      sub_100012EC0((__int128 *)(v0 + 56), v42 + v38);
      unint64_t v43 = v42 + v39;
      *(void *)unint64_t v43 = loga;
      *(_BYTE *)(v43 + 8) = v58;
      uint64_t v44 = async function pointer to unsafeBlocking<A>(_:)[1];
      uint64_t v45 = loga;
      swift_retain();
      uint64_t v46 = (void *)swift_task_alloc(v44);
      *(void *)(v0 + 272) = v46;
      *uint64_t v46 = v0;
      v46[1] = sub_100369688;
      return unsafeBlocking<A>(_:)(v46, sub_10036EB94, v42, (char *)&type metadata for () + 8);
    }
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v28 + 56))( *(void *)(v0 + 168),  1LL,  1LL,  *(void *)(v0 + 176));
  }

  uint64_t v48 = *(void *)(v0 + 200);
  uint64_t v49 = *(void *)(v0 + 168);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100369688()
{
  return swift_task_switch(sub_1003696E4, 0LL, 0LL);
}

uint64_t sub_1003696E4()
{
  uint64_t v1 = *(void *)(v0 + 248) + 1LL;
  if (v1 == *(void *)(v0 + 224))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 256))( *(void *)(v0 + 168),  1LL,  1LL,  *(void *)(v0 + 176));
LABEL_4:
    uint64_t v6 = *(void *)(v0 + 200);
    uint64_t v7 = *(void *)(v0 + 168);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(void *)(v0 + 248) = v1;
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 168);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 240))( v4,  *(void *)(v0 + 216)
  + ((*(unsigned __int8 *)(v0 + 280) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 280))
  + *(void *)(v0 + 232) * v1,
    v2);
  id v5 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56);
  *(void *)(v0 + 256) = v5;
  v5(v4, 0LL, 1LL, v2);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 280);
  uint64_t v10 = *(void *)(v0 + 176);
  char v25 = *(_BYTE *)(v0 + 284);
  unint64_t v24 = *(void **)(v0 + 160);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v22 = *(void *)(v0 + 200);
  uint64_t v23 = *(void *)(v0 + 152);
  uint64_t v12 = (v9 + 24) & ~v9;
  unint64_t v13 = (*(void *)(v0 + 192) + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v13 + 47) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = v9 | 7;
  uint64_t v16 = *(void (**)(void))(*(void *)(v0 + 184) + 32LL);
  v16();
  sub_100013044(v11, v0 + 56);
  uint64_t v17 = swift_allocObject(&unk_100953ED0, v14 + 9, v15);
  *(void *)(v0 + 264) = v17;
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = v23;
  ((void (*)(uint64_t, uint64_t, uint64_t))v16)(v17 + v12, v22, v10);
  sub_100012EC0((__int128 *)(v0 + 56), v17 + v13);
  unint64_t v18 = v17 + v14;
  *(void *)unint64_t v18 = v24;
  *(_BYTE *)(v18 + 8) = v25;
  uint64_t v19 = async function pointer to unsafeBlocking<A>(_:)[1];
  id v20 = v24;
  swift_retain();
  uint64_t v21 = (void *)swift_task_alloc(v19);
  *(void *)(v0 + 272) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_100369688;
  return unsafeBlocking<A>(_:)(v21, sub_10036EB94, v17, (char *)&type metadata for () + 8);
}

uint64_t sub_100369904(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100369964, 0LL, 0LL);
}

uint64_t sub_100369964()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v4 = *(void *)(v1 + 72);
  *(void *)(v0 + 56) = v4;
  int v5 = *(_DWORD *)(v1 + 80);
  *(_DWORD *)(v0 + 80) = v5;
  uint64_t v6 = swift_allocObject( v3,  ((v5 + 32LL) & ~(unint64_t)v5) + v4,  v5 | 7LL);
  *(void *)(v0 + 64) = v6;
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  sub_100012ED8(v2, v7);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8LL) + 32LL))(v7);
  uint64_t v9 = v2[3];
  uint64_t v10 = v2[4];
  sub_100012ED8(v2, v9);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v9, v10) & 1) != 0)
  {
    unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009AA818 + dword_1009AA818);
    uint64_t v11 = (void *)swift_task_alloc(unk_1009AA81C);
    *(void *)(v0 + 72) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100369AA8;
    return v13(*(void *)(v0 + 48), *(void *)(v0 + 16));
  }

  else
  {
    swift_task_dealloc(*(void *)(v0 + 48));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
  }

uint64_t sub_100369AA8()
{
  return swift_task_switch(sub_100369AFC, 0LL, 0LL);
}

uint64_t sub_100369AFC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  unint64_t v3 = *(void *)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_1004C44BC(v2 > 1, v3 + 1, 1, *(void *)(v0 + 64));
  }
  uint64_t v4 = *(unsigned __int8 *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = *(void *)(v0 + 40);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(v1 + ((v4 + 32) & ~v4) + v6 * v3, v5, v7);
  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100369B94(uint64_t a1, uint64_t a2, void *a3, void *a4, char a5)
{
  uint64_t v10 = sub_100004AEC(&qword_1009AA800);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AA760);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v17 = v16 + v15;
  uint64_t v18 = *(int *)(v11 + 48);
  uint64_t v19 = *(int *)(sub_100004AEC((uint64_t *)&unk_1009AA7A0) + 48);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v17, a2, v20);
  uint64_t v21 = a3[3];
  uint64_t v22 = a3[4];
  sub_100012ED8(a3, v21);
  *(void *)(v17 + v19) = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 176))(v21, v22);
  *(void *)(v17 + v18) = a4;
  uint64_t v23 = *(void *)(a1 + 56);
  id v24 = a4;
  uint64_t v25 = sub_100004AEC(&qword_1009AA7B8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10036E6E8, a1, v23, (char *)&type metadata for () + 8, v25);
  uint64_t v26 = sub_100359E4C(v16);
  type metadata accessor for Transaction(0LL);
  uint64_t v27 = swift_allocObject(&unk_100953EF8, 64LL, 7LL);
  *(void *)(v27 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v27 + 24) = v29;
  *(void *)(v27 + 32) = v26;
  *(_BYTE *)(v27 + 40) = a5;
  *(void *)(v27 + 48) = _swiftEmptyArrayStorage;
  *(void *)(v27 + 56) = v16;
  swift_retain();
  swift_bridgeObjectRetain(v16);
  static Transaction.asyncTask(name:block:)( "LocationFetchServiceConnections.updateLocations",  47LL,  2LL,  &unk_1009AA808,  v27);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100369D74(uint64_t a1, uint64_t a2)
{
  v2[15] = a1;
  v2[16] = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[17] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[18] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[19] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[20] = swift_task_alloc(v6);
  v2[21] = swift_task_alloc(v6);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  v2[22] = v7;
  v2[23] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100369E10, 0LL, 0LL);
}

uint64_t sub_100369E10()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    unint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 192) = v2;
    *unint64_t v2 = v0;
    v2[1] = sub_100369EFC;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100369EFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  *(void *)(*(void *)v1 + 20Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100369F58, 0LL, 0LL);
}

uint64_t sub_100369F58()
{
  uint64_t v1 = *(void **)(v0 + 128);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100012ED8(v1, v2);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v3) & 1) != 0)
  {
    if (*(void *)(v0 + 200))
    {
      uint64_t v4 = v1[3];
      uint64_t v5 = v1[4];
      sub_100012ED8(*(void **)(v0 + 128), v4);
      uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8LL);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
      swift_retain();
      v7(v4, v6);
      return swift_task_switch(sub_10036A0B0, *(void *)(v0 + 200), 0LL);
    }

    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 144) + 56LL))( *(void *)(v0 + 184),  1LL,  1LL,  *(void *)(v0 + 136));
    sub_100015794(*(void *)(v0 + 184), &qword_10099D8A0);
  }

  uint64_t v9 = *(void **)(v0 + 128);
  uint64_t v10 = v9[3];
  uint64_t v11 = v9[4];
  sub_100012ED8(v9, v10);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 8) + 8LL) + 32LL))(v10);
  swift_release();
  uint64_t v12 = *(void *)(v0 + 160);
  uint64_t v13 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10036A0B0()
{
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v5 = v0[18];
  uint64_t v4 = v0[19];
  uint64_t v6 = v0[17];
  v0[26] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v6);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_100953F20, v8 + v4, v7 | 7);
  v0[27] = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v0[28] = v10;
  v10(v9 + v8, v3, v6);
  swift_retain();
  return swift_task_switch(sub_10036A164, 0LL, 0LL);
}

uint64_t sub_10036A164()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[29] = v3;
  v3[2] = v2;
  v3[3] = sub_10036EC94;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[30] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10036A20C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[23],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10036ECD4,  v3,  v0[22]);
}

uint64_t sub_10036A20C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 168LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 136LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 144LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 240LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch(sub_10036A2A8, 0LL, 0LL);
}

uint64_t sub_10036A2A8()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 144) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, &qword_10099D8A0);
    uint64_t v3 = *(void **)(v0 + 128);
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[4];
    sub_100012ED8(v3, v4);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 8) + 8LL) + 32LL))(v4);
    swift_release();
  }

  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 120);
    swift_release();
    v6(v7, v1, v2);
  }

  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v9 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10036A384(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = a6;
  *(_BYTE *)(v6 + 64) = a4;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  *(void *)(v6 + 56) = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10036A3E8, 0LL, 0LL);
}

uint64_t sub_10036A3E8()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  char v3 = *(_BYTE *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  uint64_t v7 = swift_allocObject(&unk_100953E30, 56LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  *(_BYTE *)(v7 + 32) = v3;
  *(void *)(v7 + 40) = v4;
  *(void *)(v7 + 48) = v2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  uint64_t v8 = swift_bridgeObjectRetain(v2);
  UUID.init()(v8);
  uint64_t v9 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v1,  &unk_1009AA7D8,  v7,  &unk_1009B5680,  0LL);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v9);
  swift_release(v9);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10036A4DC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 56) = a4;
  *(void *)(v5 + 64) = a5;
  *(_BYTE *)(v5 + 193) = a3;
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = a2;
  uint64_t v6 = sub_100004AEC(&qword_1009AA650);
  *(void *)(v5 + 72) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 80) = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  *(void *)(v5 + 88) = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + sub_100013044(v0 + 256, v0 + 96) = swift_task_alloc(v9);
  *(void *)(v5 + 104) = swift_task_alloc(v9);
  *(void *)(v5 + 112) = swift_task_alloc(v9);
  *(void *)(v5 + 120) = swift_task_alloc(v9);
  *(void *)(v5 + 128) = swift_task_alloc(v9);
  *(void *)(v5 + 136) = swift_task_alloc(v9);
  return swift_task_switch(sub_10036A58C, 0LL, 0LL);
}

void sub_10036A58C()
{
  unint64_t v75 = v0 + 4;
  uint64_t v1 = v0[5];
  char v2 = *(_BYTE *)(v1 + 32);
  *((_BYTE *)v0 + 194) = v2;
  uint64_t v3 = 1LL << v2;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  swift_bridgeObjectRetain(v1);
  int64_t v6 = 0LL;
  uint64_t v76 = v0;
  uint64_t v85 = 0LL;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v7 = __clz(__rbit64(v5));
  uint64_t v8 = (v5 - 1) & v5;
  unint64_t v9 = v7 | (v6 << 6);
  uint64_t v10 = v0[5];
  while (1)
  {
    unint64_t v77 = v8;
    int64_t v78 = v6;
    v0[18] = v6;
    v0[19] = v8;
    uint64_t v16 = v0[17];
    uint64_t v103 = v0[16];
    uint64_t v87 = v0[15];
    uint64_t v17 = v0[9];
    char v90 = *((_BYTE *)v0 + 193);
    uint64_t v81 = v0[14];
    uint64_t v82 = v0[7];
    uint64_t v80 = v0[6];
    uint64_t v18 = *(void *)(v10 + 48);
    uint64_t v19 = type metadata accessor for UUID(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v101 = *(void (**)(void))(v20 + 16);
    uint64_t v102 = v19;
    ((void (*)(uint64_t, unint64_t, uint64_t))v101)(v16, v18 + *(void *)(v20 + 72) * v9, v19);
    uint64_t v21 = v17;
    uint64_t v22 = *(void *)(v10 + 56) + 104 * v9;
    uint64_t v23 = v16 + *(int *)(v17 + 48);
    uint64_t v107 = *(void *)v22;
    char v24 = *(_BYTE *)(v22 + 8);
    uint64_t v25 = *(void *)(v22 + 24);
    uint64_t v108 = *(void *)(v22 + 16);
    uint64_t v26 = *(void *)(v22 + 32);
    uint64_t v27 = *(void *)(v22 + 40);
    uint64_t v29 = *(void *)(v22 + 48);
    uint64_t v28 = *(void *)(v22 + 56);
    char v30 = *(_BYTE *)(v22 + 64);
    char v98 = v30;
    char v31 = *(_BYTE *)(v22 + 65);
    char v97 = v31;
    uint64_t v32 = *(void *)(v22 + 72);
    uint64_t v95 = *(void *)(v22 + 88);
    uint64_t v96 = *(void *)(v22 + 80);
    char v94 = *(_BYTE *)(v22 + 96);
    *(void *)uint64_t v23 = *(void *)v22;
    *(_BYTE *)(v23 + 8) = v24;
    char v33 = v24;
    char v100 = v24;
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = v108;
    *(void *)(v23 + 24) = v25;
    *(void *)(v23 + 32) = v26;
    *(void *)(v23 + 40) = v27;
    uint64_t v34 = v26;
    uint64_t v93 = v26;
    *(void *)(v23 + 48) = v29;
    *(void *)(v23 + 56) = v28;
    uint64_t v35 = v29;
    uint64_t v99 = v29;
    uint64_t v36 = v28;
    uint64_t v84 = v28;
    *(_BYTE *)(v23 + 64) = v30;
    *(_BYTE *)(v23 + 65) = v31;
    *(void *)(v23 + 72) = v32;
    *(void *)(v23 + 80) = v96;
    uint64_t v79 = v32;
    *(void *)(v23 + 88) = v95;
    *(_BYTE *)(v23 + sub_100013044(v0 + 256, v0 + 96) = v94;
    uint64_t v37 = v103 + *(int *)(v21 + 48);
    (*(void (**)(void))(v20 + 32))();
    *(void *)uint64_t v37 = v107;
    *(_BYTE *)(v37 + 8) = v33;
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = v108;
    *(void *)(v37 + 24) = v25;
    *(void *)(v37 + 32) = v34;
    *(void *)(v37 + 40) = v27;
    *(void *)(v37 + 48) = v35;
    *(void *)(v37 + 56) = v36;
    *(_BYTE *)(v37 + 64) = v98;
    *(_BYTE *)(v37 + 65) = v97;
    *(void *)(v37 + 72) = v32;
    *(void *)(v37 + 80) = v96;
    *(void *)(v37 + 88) = v95;
    *(_BYTE *)(v37 + sub_100013044(v0 + 256, v0 + 96) = v94;
    uint64_t v38 = v87 + *(int *)(v21 + 48);
    v101();
    *(void *)uint64_t v38 = v107;
    *(_BYTE *)(v38 + 8) = v100;
    *(void *)(v38 + swift_weakDestroy(v0 + 16) = v108;
    *(void *)(v38 + 24) = v25;
    *(void *)(v38 + 32) = v93;
    *(void *)(v38 + 40) = v27;
    *(void *)(v38 + 48) = v99;
    *(void *)(v38 + 56) = v84;
    *(_BYTE *)(v38 + 64) = v98;
    *(_BYTE *)(v38 + 65) = v97;
    *(void *)(v38 + 72) = v79;
    *(void *)(v38 + 80) = v96;
    *(void *)(v38 + 88) = v95;
    *(_BYTE *)(v38 + sub_100013044(v0 + 256, v0 + 96) = v94;
    uint64_t v39 = swift_task_alloc(32LL);
    *(void *)(v39 + swift_weakDestroy(v0 + 16) = v87;
    *(_BYTE *)(v39 + 24) = v90;
    swift_bridgeObjectRetain_n(v84, 3LL);
    swift_bridgeObjectRetain_n(v79, 3LL);
    swift_retain_n(v107, 3LL);
    swift_bridgeObjectRetain_n(v108, 3LL);
    swift_bridgeObjectRetain_n(v25, 3LL);
    swift_bridgeObjectRetain_n(v93, 3LL);
    swift_bridgeObjectRetain_n(v27, 3LL);
    swift_bridgeObjectRetain(v80);
    uint64_t v40 = v85;
    uint64_t v86 = sub_100023DFC((uint64_t (*)(char *))sub_10036E82C, v39, v80);
    swift_task_dealloc(v39);
    sub_100015794(v87, &qword_1009AA650);
    uint64_t v41 = v81 + *(int *)(v21 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v101)(v81, v103, v102);
    *(void *)uint64_t v41 = v107;
    *(_BYTE *)(v41 + 8) = v100;
    *(void *)(v41 + swift_weakDestroy(v0 + 16) = v108;
    *(void *)(v41 + 24) = v25;
    *(void *)(v41 + 32) = v93;
    *(void *)(v41 + 40) = v27;
    *(void *)(v41 + 48) = v99;
    *(void *)(v41 + 56) = v84;
    *(_BYTE *)(v41 + 64) = v98;
    *(_BYTE *)(v41 + 65) = v97;
    *(void *)(v41 + 72) = v79;
    *(void *)(v41 + 80) = v96;
    *(void *)(v41 + 88) = v95;
    *(_BYTE *)(v41 + sub_100013044(v0 + 256, v0 + 96) = v94;
    uint64_t v42 = swift_task_alloc(32LL);
    *(void *)(v42 + swift_weakDestroy(v0 + 16) = v81;
    *(_BYTE *)(v42 + 24) = v90;
    swift_retain();
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v82);
    uint64_t v43 = sub_100024008((uint64_t)sub_10036E84C, v42, v82);
    swift_task_dealloc(v42);
    sub_100015794(v81, &qword_1009AA650);
    uint64_t v44 = *(void *)(v86 + 16);
    swift_bridgeObjectRelease();
    if (v44 || *(void *)(v43 + 16)) {
      break;
    }
    uint64_t v0 = v76;
    sub_100015794(v76[16], &qword_1009AA650);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v5 = v77;
    int64_t v6 = v78;
    uint64_t v85 = v40;
    if (v77) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return;
    }

    int64_t v12 = (unint64_t)((1LL << *((_BYTE *)v0 + 194)) + 63) >> 6;
    uint64_t v10 = v0[5];
    if (v11 >= v12) {
      goto LABEL_28;
    }
    uint64_t v13 = v10 + 64;
    unint64_t v14 = *(void *)(v10 + 64 + 8 * v11);
    ++v6;
    if (!v14)
    {
      int64_t v6 = v11 + 1;
      if (v11 + 1 >= v12) {
        goto LABEL_28;
      }
      unint64_t v14 = *(void *)(v13 + 8 * v6);
      if (!v14)
      {
        int64_t v6 = v11 + 2;
        if (v11 + 2 >= v12) {
          goto LABEL_28;
        }
        unint64_t v14 = *(void *)(v13 + 8 * v6);
        if (!v14)
        {
          int64_t v15 = v11 + 3;
          if (v15 >= v12)
          {
LABEL_28:
            uint64_t v70 = v0[16];
            uint64_t v69 = v0[17];
            uint64_t v72 = v0[14];
            uint64_t v71 = v0[15];
            uint64_t v74 = v0[12];
            uint64_t v73 = v0[13];
            swift_release();
            swift_task_dealloc(v69);
            swift_task_dealloc(v70);
            swift_task_dealloc(v71);
            swift_task_dealloc(v72);
            swift_task_dealloc(v73);
            swift_task_dealloc(v74);
            ((void (*)(void))v0[1])();
            return;
          }

          unint64_t v14 = *(void *)(v13 + 8 * v15);
          if (!v14)
          {
            while (1)
            {
              int64_t v6 = v15 + 1;
              if (__OFADD__(v15, 1LL)) {
                goto LABEL_30;
              }
              if (v6 >= v12) {
                goto LABEL_28;
              }
              unint64_t v14 = *(void *)(v13 + 8 * v6);
              ++v15;
              if (v14) {
                goto LABEL_19;
              }
            }
          }

          int64_t v6 = v15;
        }
      }
    }

uint64_t sub_10036AFE8()
{
  return swift_task_switch(sub_10036B044, 0LL, 0LL);
}

uint64_t sub_10036B044()
{
  uint64_t v74 = v0 + 4;
  uint64_t v73 = v0 + 24;
  uint64_t v1 = v0[16];

  uint64_t result = sub_100015794(v1, &qword_1009AA650);
  unint64_t v3 = v0[19];
  int64_t v4 = v0[18];
  unint64_t v75 = v0;
  uint64_t v84 = v0[20];
  if (!v3) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v5 = __clz(__rbit64(v3));
  uint64_t v6 = (v3 - 1) & v3;
  unint64_t v7 = v5 | (v4 << 6);
  uint64_t v8 = v0[5];
  while (1)
  {
    unint64_t v76 = v6;
    int64_t v77 = v4;
    v0[18] = v4;
    v0[19] = v6;
    uint64_t v14 = v0[17];
    uint64_t v102 = v0[16];
    uint64_t v86 = v0[15];
    uint64_t v15 = v0[9];
    char v89 = *((_BYTE *)v0 + 193);
    uint64_t v81 = v0[14];
    uint64_t v82 = v0[7];
    uint64_t v80 = v0[6];
    uint64_t v16 = *(void *)(v8 + 48);
    uint64_t v17 = type metadata accessor for UUID(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    char v100 = *(void (**)(void))(v18 + 16);
    uint64_t v101 = v17;
    ((void (*)(uint64_t, unint64_t, uint64_t))v100)(v14, v16 + *(void *)(v18 + 72) * v7, v17);
    uint64_t v19 = *(void *)(v8 + 56);
    uint64_t v20 = v15;
    uint64_t v21 = (uint64_t *)(v19 + 104 * v7);
    uint64_t v22 = v14 + *(int *)(v15 + 48);
    uint64_t v106 = *v21;
    char v23 = *((_BYTE *)v21 + 8);
    uint64_t v24 = v21[3];
    uint64_t v107 = v21[2];
    uint64_t v25 = v21[4];
    uint64_t v26 = v21[5];
    uint64_t v28 = v21[6];
    uint64_t v27 = v21[7];
    char v97 = *((_BYTE *)v21 + 64);
    char v29 = *((_BYTE *)v21 + 65);
    char v96 = v29;
    uint64_t v30 = v21[9];
    uint64_t v94 = v21[11];
    uint64_t v95 = v21[10];
    char v93 = *((_BYTE *)v21 + 96);
    *(void *)uint64_t v22 = *v21;
    *(_BYTE *)(v22 + 8) = v23;
    char v31 = v23;
    char v99 = v23;
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v107;
    *(void *)(v22 + 24) = v24;
    *(void *)(v22 + 32) = v25;
    *(void *)(v22 + 40) = v26;
    uint64_t v32 = v25;
    uint64_t v92 = v25;
    *(void *)(v22 + 48) = v28;
    *(void *)(v22 + 56) = v27;
    uint64_t v33 = v28;
    uint64_t v98 = v28;
    uint64_t v34 = v27;
    uint64_t v78 = v27;
    uint64_t v79 = v30;
    *(_BYTE *)(v22 + 64) = v97;
    *(_BYTE *)(v22 + 65) = v29;
    *(void *)(v22 + 72) = v30;
    *(void *)(v22 + 80) = v95;
    *(void *)(v22 + 88) = v94;
    *(_BYTE *)(v22 + sub_100013044(v0 + 256, v0 + 96) = v93;
    uint64_t v35 = v102 + *(int *)(v20 + 48);
    (*(void (**)(void))(v18 + 32))();
    *(void *)uint64_t v35 = v106;
    *(_BYTE *)(v35 + 8) = v31;
    *(void *)(v35 + swift_weakDestroy(v0 + 16) = v107;
    *(void *)(v35 + 24) = v24;
    *(void *)(v35 + 32) = v32;
    *(void *)(v35 + 40) = v26;
    *(void *)(v35 + 48) = v33;
    *(void *)(v35 + 56) = v34;
    *(_BYTE *)(v35 + 64) = v97;
    *(_BYTE *)(v35 + 65) = v96;
    *(void *)(v35 + 72) = v30;
    *(void *)(v35 + 80) = v95;
    *(void *)(v35 + 88) = v94;
    *(_BYTE *)(v35 + sub_100013044(v0 + 256, v0 + 96) = v93;
    uint64_t v36 = v86 + *(int *)(v20 + 48);
    v100();
    *(void *)uint64_t v36 = v106;
    *(_BYTE *)(v36 + 8) = v99;
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = v107;
    *(void *)(v36 + 24) = v24;
    *(void *)(v36 + 32) = v92;
    *(void *)(v36 + 40) = v26;
    *(void *)(v36 + 48) = v98;
    *(void *)(v36 + 56) = v78;
    *(_BYTE *)(v36 + 64) = v97;
    *(_BYTE *)(v36 + 65) = v96;
    *(void *)(v36 + 72) = v79;
    *(void *)(v36 + 80) = v95;
    *(void *)(v36 + 88) = v94;
    *(_BYTE *)(v36 + sub_100013044(v0 + 256, v0 + 96) = v93;
    uint64_t v37 = swift_task_alloc(32LL);
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = v86;
    *(_BYTE *)(v37 + 24) = v89;
    swift_bridgeObjectRetain_n(v78, 3LL);
    swift_bridgeObjectRetain_n(v79, 3LL);
    swift_retain_n(v106, 3LL);
    swift_bridgeObjectRetain_n(v107, 3LL);
    swift_bridgeObjectRetain_n(v24, 3LL);
    swift_bridgeObjectRetain_n(v92, 3LL);
    swift_bridgeObjectRetain_n(v26, 3LL);
    swift_bridgeObjectRetain(v80);
    uint64_t v38 = v84;
    uint64_t v85 = sub_100023DFC((uint64_t (*)(char *))sub_10036E82C, v37, v80);
    swift_task_dealloc(v37);
    sub_100015794(v86, &qword_1009AA650);
    uint64_t v39 = v81 + *(int *)(v20 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v100)(v81, v102, v101);
    *(void *)uint64_t v39 = v106;
    *(_BYTE *)(v39 + 8) = v99;
    *(void *)(v39 + swift_weakDestroy(v0 + 16) = v107;
    *(void *)(v39 + 24) = v24;
    *(void *)(v39 + 32) = v92;
    *(void *)(v39 + 40) = v26;
    *(void *)(v39 + 48) = v98;
    *(void *)(v39 + 56) = v78;
    *(_BYTE *)(v39 + 64) = v97;
    *(_BYTE *)(v39 + 65) = v96;
    *(void *)(v39 + 72) = v79;
    *(void *)(v39 + 80) = v95;
    *(void *)(v39 + 88) = v94;
    *(_BYTE *)(v39 + sub_100013044(v0 + 256, v0 + 96) = v93;
    uint64_t v40 = swift_task_alloc(32LL);
    *(void *)(v40 + swift_weakDestroy(v0 + 16) = v81;
    *(_BYTE *)(v40 + 24) = v89;
    swift_retain();
    swift_bridgeObjectRetain(v107);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v82);
    uint64_t v41 = sub_100024008((uint64_t)sub_10036E84C, v40, v82);
    swift_task_dealloc(v40);
    sub_100015794(v81, &qword_1009AA650);
    uint64_t v42 = *(void *)(v85 + 16);
    swift_bridgeObjectRelease();
    if (v42 || *(void *)(v41 + 16)) {
      break;
    }
    uint64_t v0 = v75;
    sub_100015794(v75[16], &qword_1009AA650);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    unint64_t v3 = v76;
    int64_t v4 = v77;
    uint64_t v84 = v38;
    if (v76) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }

    int64_t v10 = (unint64_t)((1LL << *((_BYTE *)v0 + 194)) + 63) >> 6;
    uint64_t v8 = v0[5];
    if (v9 >= v10) {
      goto LABEL_27;
    }
    uint64_t v11 = v8 + 64;
    unint64_t v12 = *(void *)(v8 + 64 + 8 * v9);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v9 + 1;
      if (v9 + 1 >= v10) {
        goto LABEL_27;
      }
      unint64_t v12 = *(void *)(v11 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v9 + 2;
        if (v9 + 2 >= v10) {
          goto LABEL_27;
        }
        unint64_t v12 = *(void *)(v11 + 8 * v4);
        if (!v12)
        {
          int64_t v13 = v9 + 3;
          if (v13 >= v10)
          {
LABEL_27:
            uint64_t v68 = v0[16];
            uint64_t v67 = v0[17];
            uint64_t v70 = v0[14];
            uint64_t v69 = v0[15];
            uint64_t v72 = v0[12];
            uint64_t v71 = v0[13];
            swift_release();
            swift_task_dealloc(v67);
            swift_task_dealloc(v68);
            swift_task_dealloc(v69);
            swift_task_dealloc(v70);
            swift_task_dealloc(v71);
            swift_task_dealloc(v72);
            return ((uint64_t (*)(void))v0[1])();
          }

          unint64_t v12 = *(void *)(v11 + 8 * v13);
          if (!v12)
          {
            while (1)
            {
              int64_t v4 = v13 + 1;
              if (__OFADD__(v13, 1LL)) {
                goto LABEL_29;
              }
              if (v4 >= v10) {
                goto LABEL_27;
              }
              unint64_t v12 = *(void *)(v11 + 8 * v4);
              ++v13;
              if (v12) {
                goto LABEL_16;
              }
            }
          }

          int64_t v4 = v13;
        }
      }
    }

uint64_t sub_10036BA88(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AA7A0);
  return sub_1006E57B8(a1, *(void *)(a1 + *(int *)(v5 + 48)), a3) & 1;
}

id sub_10036BB28(char *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v105 = a4;
  char v100 = a1;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v88 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009AA650);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v87 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v103 = (uint64_t)&v87 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_t v104 = (os_log_t)((char *)&v87 - v17);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v87 - v18;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AA7A0);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v98 = (char *)&v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v102 = (uint64_t)&v87 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v101 = (os_log_s *)((char *)&v87 - v26);
  uint64_t v27 = __chkstk_darwin(v25);
  char v29 = (char *)&v87 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)&v87 - v31;
  char v96 = (void (*)(char *, os_log_t, uint64_t))v30;
  uint64_t v33 = *(int *)(v30 + 48);
  uint64_t v99 = v9;
  uint64_t v34 = a2;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v35((char *)&v87 - v31, v34, v8);
  uint64_t v97 = v33;
  *(void *)&v32[v33] = a3;
  uint64_t v36 = qword_10099B328;
  uint64_t v94 = a3;
  if (v36 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v37 = type metadata accessor for Logger(0LL);
  uint64_t v93 = sub_10000A720(v37, (uint64_t)qword_100A2A730);
  uint64_t v38 = *(int *)(v11 + 48);
  uint64_t v39 = &v19[v38];
  uint64_t v40 = a5 + v38;
  v35(v19, a5, v8);
  *(void *)uint64_t v39 = *(void *)v40;
  char v41 = *(_BYTE *)(v40 + 8);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v40 + 24);
  uint64_t v89 = *(void *)(v40 + 16);
  uint64_t v43 = v89;
  uint64_t v90 = v42;
  uint64_t v44 = *(void *)(v40 + 40);
  uint64_t v91 = *(void (**)(void, void, void))(v40 + 32);
  uint64_t v45 = v91;
  uint64_t v92 = v44;
  uint64_t v46 = *(void *)(v40 + 48);
  uint64_t v47 = *(void *)(v40 + 56);
  char v48 = *(_BYTE *)(v40 + 64);
  char v49 = *(_BYTE *)(v40 + 65);
  uint64_t v50 = *(void *)(v40 + 72);
  char v51 = *(_BYTE *)(v40 + 96);
  v39[8] = v41;
  *((void *)v39 + 2) = v43;
  *((void *)v39 + 3) = v42;
  *((void *)v39 + 4) = v45;
  *((void *)v39 + 5) = v44;
  *((void *)v39 + 6) = v46;
  *((void *)v39 + 7) = v47;
  v39[64] = v48;
  v39[65] = v49;
  *((void *)v39 + 9) = v50;
  *((_OWORD *)v39 + 5) = *(_OWORD *)(v40 + 80);
  v39[96] = v51;
  sub_10001581C((uint64_t)v19, (uint64_t)v104, &qword_1009AA650);
  uint64_t v52 = (uint64_t)v19;
  uint64_t v53 = v103;
  sub_100015750(v52, v103, &qword_1009AA650);
  uint64_t v54 = *((int *)v96 + 12);
  uint64_t v95 = v8;
  char v96 = (void (*)(char *, os_log_t, uint64_t))v35;
  v35(v29, (uint64_t)v32, v8);
  uint64_t v55 = v94;
  *(void *)&v29[v54] = v94;
  uint64_t v56 = (uint64_t)v101;
  sub_10001581C((uint64_t)v29, (uint64_t)v101, (uint64_t *)&unk_1009AA7A0);
  uint64_t v57 = v102;
  sub_100015750((uint64_t)v29, v102, (uint64_t *)&unk_1009AA7A0);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v50);
  id v58 = v105;
  id v59 = v55;
  id v105 = v58;
  swift_retain();
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v92);
  unint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
  os_log_type_t v62 = static os_log_type_t.info.getter(v61);
  int v63 = v62;
  id v64 = v32;
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v65 = swift_slowAlloc(62LL, -1LL);
    uint64_t v66 = swift_slowAlloc(64LL, -1LL);
    uint64_t v93 = v66;
    *(_DWORD *)uint64_t v65 = 141559299;
    uint64_t v106 = 1752392040LL;
    v107[0] = v66;
    uint64_t v94 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 4, v65 + 12);
    *(_WORD *)(v65 + 12) = 2081;
    LODWORD(v92) = v63;
    uint64_t v67 = v87;
    os_log_t v68 = v104;
    uint64_t v69 = v95;
    v96(v87, v104, v95);
    uint64_t v70 = v99;
    uint64_t v91 = *(void (**)(void, void, void))(v99 + 32);
    uint64_t v71 = v88;
    v91(v88, v67, v69);
    sub_100015794((uint64_t)v68, &qword_1009AA650);
    uint64_t v72 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter(v69, v72);
    unint64_t v75 = v74;
    os_log_t v104 = v61;
    uint64_t v90 = *(void (**)(char *, uint64_t))(v70 + 8);
    v90(v71, v69);
    uint64_t v106 = sub_1003F11D4(v73, v75, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 14, v65 + 22);
    swift_bridgeObjectRelease();
    sub_100015794(v103, &qword_1009AA650);
    *(_WORD *)(v65 + 22) = 2160;
    uint64_t v106 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 24, v65 + 32);
    *(_WORD *)(v65 + 32) = 2081;
    unint64_t v76 = v98;
    uint64_t v77 = (uint64_t)v101;
    v96(v98, v101, v69);
    v91(v71, v76, v69);
    uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter(v69, v72);
    unint64_t v80 = v79;
    v90(v71, v69);
    uint64_t v106 = sub_1003F11D4(v78, v80, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 34, v65 + 42);
    swift_bridgeObjectRelease();
    sub_100015794(v102, (uint64_t *)&unk_1009AA7A0);
    sub_100015794(v77, (uint64_t *)&unk_1009AA7A0);
    *(_WORD *)(v65 + 42) = 2049;
    [v105 latitude];
    uint64_t v106 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 44, v65 + 52);

    *(_WORD *)(v65 + 52) = 2049;
    [v105 longitude];
    uint64_t v106 = v82;
    id v64 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 54, v65 + 62);

    os_log_t v83 = v104;
    _os_log_impl( (void *)&_mh_execute_header,  v104,  (os_log_type_t)v92,  "Received location update for subscription: %{private,mask.hash}s, beaconID: %{private,mask.hash}s.\n Loc: lat: %{private}f, lon: %{private}f.",  (uint8_t *)v65,  0x3Eu);
    uint64_t v84 = v93;
    swift_arrayDestroy(v93, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1LL, -1LL);
    swift_slowDealloc(v65, -1LL, -1LL);
  }

  else
  {
    sub_100015794((uint64_t)v104, &qword_1009AA650);
    sub_100015794(v53, &qword_1009AA650);
    sub_100015794(v57, (uint64_t *)&unk_1009AA7A0);
    sub_100015794(v56, (uint64_t *)&unk_1009AA7A0);

    uint64_t v69 = v95;
    unint64_t v76 = v98;
    uint64_t v70 = v99;
  }

  uint64_t v85 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
  v85(v76, v64, v69);

  v85(v100, v76, v69);
  return v105;
}

id sub_10036C2A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v75 = a4;
  uint64_t v72 = a1;
  uint64_t v73 = (void *)a2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v69 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009AA650);
  uint64_t v10 = __chkstk_darwin(v9);
  os_log_t v67 = (os_log_t)((char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v71 = (uint64_t)&v64 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v74 = (uint64_t)&v64 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v64 - v16;
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v70 = sub_10000A720(v18, (uint64_t)qword_100A2A730);
  uint64_t v19 = *(int *)(v9 + 48);
  uint64_t v20 = &v17[v19];
  uint64_t v21 = a5 + v19;
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v65(v17, a5, v6);
  *(void *)uint64_t v20 = *(void *)v21;
  char v22 = *(_BYTE *)(v21 + 8);
  uint64_t v23 = *(void *)(v21 + 16);
  uint64_t v24 = *(void *)(v21 + 24);
  uint64_t v66 = v7;
  uint64_t v26 = *(void *)(v21 + 32);
  uint64_t v25 = *(void *)(v21 + 40);
  uint64_t v27 = *(void *)(v21 + 48);
  uint64_t v28 = *(void *)(v21 + 56);
  char v29 = *(_BYTE *)(v21 + 64);
  char v30 = *(_BYTE *)(v21 + 65);
  uint64_t v68 = v6;
  uint64_t v31 = *(void *)(v21 + 72);
  char v32 = *(_BYTE *)(v21 + 96);
  v20[8] = v22;
  *((void *)v20 + 2) = v23;
  *((void *)v20 + 3) = v24;
  *((void *)v20 + 4) = v26;
  *((void *)v20 + 5) = v25;
  *((void *)v20 + 6) = v27;
  *((void *)v20 + 7) = v28;
  v20[64] = v29;
  v20[65] = v30;
  *((void *)v20 + 9) = v31;
  *((_OWORD *)v20 + 5) = *(_OWORD *)(v21 + 80);
  v20[96] = v32;
  sub_10001581C((uint64_t)v17, v74, &qword_1009AA650);
  uint64_t v33 = v71;
  sub_100015750((uint64_t)v17, v71, &qword_1009AA650);
  uint64_t v34 = v73;
  sub_100013044((uint64_t)v73, (uint64_t)v78);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v31);
  id v75 = v75;
  swift_retain();
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v25);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.info.getter(v36);
  int v38 = v37;
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v39 = swift_slowAlloc(62LL, -1LL);
    uint64_t v40 = swift_slowAlloc(64LL, -1LL);
    uint64_t v70 = v40;
    *(_DWORD *)uint64_t v39 = 141559299;
    uint64_t v76 = 1752392040LL;
    uint64_t v77 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 4, v39 + 12);
    *(_WORD *)(v39 + 12) = 2081;
    uint64_t v64 = v39 + 14;
    os_log_t v42 = v67;
    uint64_t v41 = v68;
    uint64_t v43 = v74;
    v65((char *)v67, v74, v68);
    uint64_t v44 = v66;
    uint64_t v45 = v69;
    (*(void (**)(char *, os_log_t, uint64_t))(v66 + 32))(v69, v42, v41);
    sub_100015794(v43, &qword_1009AA650);
    uint64_t v46 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    LODWORD(v74) = v38;
    uint64_t v47 = v46;
    os_log_t v67 = v36;
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v41, v46);
    unint64_t v50 = v49;
    char v51 = *(void (**)(char *, uint64_t))(v44 + 8);
    v51(v45, v41);
    uint64_t v76 = sub_1003F11D4(v48, v50, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v64, v39 + 22);
    swift_bridgeObjectRelease();
    sub_100015794(v33, &qword_1009AA650);
    *(_WORD *)(v39 + 22) = 2160;
    uint64_t v76 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 24, v39 + 32);
    *(_WORD *)(v39 + 32) = 2081;
    uint64_t v52 = v79;
    uint64_t v53 = v80;
    sub_100012ED8(v78, v79);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
    uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v41, v47);
    unint64_t v56 = v55;
    v51(v45, v41);
    uint64_t v76 = sub_1003F11D4(v54, v56, &v77);
    uint64_t v34 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 34, v39 + 42);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v78);
    *(_WORD *)(v39 + 42) = 2049;
    [v75 latitude];
    uint64_t v76 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 44, v39 + 52);

    *(_WORD *)(v39 + 52) = 2049;
    [v75 longitude];
    uint64_t v76 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 54, v39 + 62);

    os_log_t v59 = v67;
    _os_log_impl( (void *)&_mh_execute_header,  v67,  (os_log_type_t)v74,  "Received location update for subscription: %{private,mask.hash}s, beaconGroupID: %{private,mask.hash}s.\n Loc: lat: %{private}f, lon: %{private}f.",  (uint8_t *)v39,  0x3Eu);
    uint64_t v60 = v70;
    swift_arrayDestroy(v70, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {
    sub_100015794(v74, &qword_1009AA650);
    sub_100015794(v33, &qword_1009AA650);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v78);
  }

  uint64_t v61 = v34[3];
  uint64_t v62 = v34[4];
  sub_100012ED8(v34, v61);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v62);
  return v75;
}

BOOL sub_10036C898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AA650);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(int *)(v5 + 48);
  uint64_t v9 = &v7[v8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
  *(void *)uint64_t v9 = *(void *)v10;
  char v13 = *(_BYTE *)(v10 + 64);
  char v14 = *(_BYTE *)(v10 + 65);
  uint64_t v15 = *(void *)(v10 + 72);
  char v16 = *(_BYTE *)(v10 + 96);
  v9[8] = *(_BYTE *)(v10 + 8);
  __int128 v17 = *(_OWORD *)(v10 + 32);
  *((_OWORD *)v9 + 1) = *(_OWORD *)(v10 + 16);
  *((_OWORD *)v9 + 2) = v17;
  *((_OWORD *)v9 + 3) = *(_OWORD *)(v10 + 48);
  v9[64] = v13;
  v9[65] = v14;
  *((void *)v9 + 9) = v15;
  *((_OWORD *)v9 + 5) = *(_OWORD *)(v10 + 80);
  v9[96] = v16;
  uint64_t v18 = swift_retain();
  XPCSession.proxy.getter(v18);
  swift_release();
  id v19 = v22;
  if (v22)
  {
    [v22 receivedUpdatedLocation:a2];
    swift_unknownObjectRelease(v19);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v11);
  return v19 == 0LL;
}

uint64_t sub_10036C9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009AA6F0,  (uint64_t)&unk_100953C50,  (uint64_t)sub_10036E0B8,  (uint64_t)&unk_100953C68);
}

uint64_t sub_10036CA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA658,  (uint64_t)&unk_1009537A0,  (uint64_t)sub_10036DC70,  (uint64_t)&unk_1009537B8);
}

uint64_t sub_10036CA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA6D0,  (uint64_t)&unk_100953B60,  (uint64_t)sub_10036DFF0,  (uint64_t)&unk_100953B78);
}

uint64_t sub_10036CA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009B1040,  (uint64_t)&unk_100953750,  (uint64_t)sub_10036DBD8,  (uint64_t)&unk_100953768);
}

uint64_t sub_10036CA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009AA668,  (uint64_t)&unk_100953840,  (uint64_t)sub_10036DCA0,  (uint64_t)&unk_100953858);
}

uint64_t sub_10036CA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA6D8,  (uint64_t)&unk_100953BB0,  (uint64_t)sub_10036E008,  (uint64_t)&unk_100953BC8);
}

uint64_t sub_10036CAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA878,  (uint64_t)&unk_100954178,  (uint64_t)sub_10036EE28,  (uint64_t)&unk_100954190);
}

uint64_t sub_10036CADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA660,  (uint64_t)&unk_1009537F0,  (uint64_t)sub_10036DC88,  (uint64_t)&unk_100953808);
}

uint64_t sub_10036CB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA8F8,  (uint64_t)&unk_100954290,  (uint64_t)sub_10036F02C,  (uint64_t)&unk_1009542A8);
}

uint64_t sub_10036CB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA678,  (uint64_t)&unk_100953890,  (uint64_t)sub_10036DCC0,  (uint64_t)&unk_1009538A8);
}

uint64_t sub_10036CB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA690,  (uint64_t)&unk_100953930,  (uint64_t)sub_10036DD5C,  (uint64_t)&unk_100953948);
}

uint64_t sub_10036CB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA828,  (uint64_t)&unk_100953F98,  (uint64_t)sub_10036ED3C,  (uint64_t)&unk_100953FB0);
}

uint64_t sub_10036CB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009AA6C0,  (uint64_t)&unk_100953B10,  (uint64_t)sub_10036DFD0,  (uint64_t)&unk_100953B28);
}

uint64_t sub_10036CBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA908,  (uint64_t)&unk_1009542E0,  (uint64_t)sub_10036F0C0,  (uint64_t)&unk_1009542F8);
}

uint64_t sub_10036CBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA698,  (uint64_t)&unk_100953980,  (uint64_t)sub_10036DD74,  (uint64_t)&unk_100953998);
}

uint64_t sub_10036CBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA6A8,  (uint64_t)&unk_100953A20,  (uint64_t)sub_10036DE98,  (uint64_t)&unk_100953A38);
}

uint64_t sub_10036CC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA6A0,  (uint64_t)&unk_1009539D0,  (uint64_t)sub_10036DE08,  (uint64_t)&unk_1009539E8);
}

uint64_t sub_10036CC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA820,  (uint64_t)&unk_100953F48,  (uint64_t)sub_10036ED1C,  (uint64_t)&unk_100953F60);
}

uint64_t sub_10036CC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009AA680,  (uint64_t)&unk_1009538E0,  (uint64_t)sub_10036DCD8,  (uint64_t)&unk_1009538F8);
}

uint64_t sub_10036CC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA838,  (uint64_t)&unk_100953FE8,  (uint64_t)sub_10036ED5C,  (uint64_t)&unk_100954000);
}

uint64_t sub_10036CCB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA868,  (uint64_t)&unk_100954128,  (uint64_t)sub_10036EE08,  (uint64_t)&unk_100954140);
}

uint64_t sub_10036CCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA848,  (uint64_t)&unk_100954038,  (uint64_t)sub_10036ED7C,  (uint64_t)&unk_100954050);
}

uint64_t sub_10036CCF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA6B8,  (uint64_t)&unk_100953AC0,  (uint64_t)sub_10036DF40,  (uint64_t)&unk_100953AD8);
}

uint64_t sub_10036CD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009AA850,  (uint64_t)&unk_100954088,  (uint64_t)sub_10036ED94,  (uint64_t)&unk_1009540A0);
}

uint64_t sub_10036CD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA860,  (uint64_t)&unk_1009540D8,  (uint64_t)sub_10036EDB4,  (uint64_t)&unk_1009540F0);
}

uint64_t sub_10036CD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  &qword_1009AA6B0,  (uint64_t)&unk_100953A70,  (uint64_t)sub_10036DEB0,  (uint64_t)&unk_100953A88);
}

uint64_t sub_10036CD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10036CDAC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009AA6E0,  (uint64_t)&unk_100953C00,  (uint64_t)sub_10036E098,  (uint64_t)&unk_100953C18);
}

uint64_t sub_10036CDAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v39 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v37 = *(void *)(v14 - 8);
  uint64_t v38 = v14;
  __chkstk_darwin(v14);
  char v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(a5);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, v17);
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v21 + 16) & ~v21;
  unint64_t v23 = (v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = swift_allocObject(a6, v23 + 16, v21 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v24 + v22, v20, v17);
  uint64_t v25 = (void *)(v24 + v23);
  uint64_t v26 = v34;
  *uint64_t v25 = v33;
  v25[1] = v26;
  aBlock[4] = v35;
  uint64_t v42 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = v36;
  uint64_t v27 = _Block_copy(aBlock);
  uint64_t v28 = swift_retain();
  static DispatchQoS.unspecified.getter(v28);
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v29 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v31 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v30, v31, v11, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v38);
  return swift_release(v42);
}

uint64_t sub_10036D01C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2(v4);
  uint64_t v7 = sub_100004AEC(&qword_1009AA860);
  return CheckedContinuation.resume(returning:)(v6, v7);
}

uint64_t sub_10036D0A4(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7 = sub_100004AEC(a4);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2(v8);
  uint64_t v11 = sub_100004AEC(a5);
  return CheckedContinuation.resume(returning:)(v10, v11);
}

unint64_t sub_10036D134()
{
  unint64_t result = qword_1009AA620;
  if (!qword_1009AA620)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FD418, &type metadata for LocationFetchService.Error);
    atomic_store(result, (unint64_t *)&qword_1009AA620);
  }

  return result;
}

uint64_t sub_10036D178(uint64_t a1)
{
  return sub_10036CDAC( a1,  v1[2],  v1[3],  v1[4],  &qword_1009AA658,  (uint64_t)&unk_1009537A0,  (uint64_t)sub_10036DC70,  (uint64_t)&unk_1009537B8);
}

uint64_t sub_10036D1B4(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_1009AA634);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10020D500;
  return sub_100368720(a1, v1);
}

uint64_t sub_10036D204()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_10036D228(uint64_t a1)
{
}

uint64_t sub_10036D238(uint64_t a1)
{
  return sub_10036CDAC( a1,  v1[2],  v1[3],  v1[4],  &qword_1009B1040,  (uint64_t)&unk_100953750,  (uint64_t)sub_10036DBD8,  (uint64_t)&unk_100953768);
}

uint64_t sub_10036D274@<X0>(void *a1@<X8>)
{
  return sub_10035A158(v1, a1);
}

uint64_t sub_10036D27C(uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AA7E0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  LODWORD(v58) = a2;
  uint64_t v55 = v3;
  uint64_t v17 = *(int *)(v12 + 48);
  unint64_t v54 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = a1 + v54;
  uint64_t v60 = *(void *)(v13 + 72);
  uint64_t v57 = a1;
  swift_bridgeObjectRetain(a1);
  sub_10001581C(v18, (uint64_t)v15, (uint64_t *)&unk_1009AA7E0);
  uint64_t v56 = v8;
  uint64_t v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v61 = v7;
  uint64_t v62 = v19;
  v19((unint64_t)v10, v15, v7);
  uint64_t v59 = v17;
  uint64_t v20 = *(void **)&v15[v17];
  uint64_t v21 = (void *)*a3;
  unint64_t v23 = sub_10030D124((uint64_t)v10);
  uint64_t v24 = v21[2];
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_24;
  }
  uint64_t v8 = v22;
  if (v21[3] >= v26)
  {
    if ((v58 & 1) != 0)
    {
      if ((v22 & 1) != 0) {
        goto LABEL_10;
      }
    }

    else
    {
      sub_1000636FC();
      if ((v8 & 1) != 0) {
        goto LABEL_10;
      }
    }

uint64_t sub_10036D718(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_10036D7A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1003598A8(v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

void *sub_10036D818(uint64_t a1, uint64_t (*a2)(char *, uint64_t, void, void), uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AA7E0);
  uint64_t v5 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v18[1] = v3;
    unint64_t v23 = _swiftEmptyArrayStorage;
    sub_100033194(0, v8, 0);
    uint64_t v9 = v23;
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AA760);
    uint64_t v10 = *(void *)(v19 - 8);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v12 = *(void *)(v10 + 72);
    do
    {
      uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009AA7A0);
      uint64_t v14 = *(int *)(v20 + 48);
      *(void *)&v7[v14] = v21(v7, v11, *(void *)(v11 + *(int *)(v13 + 48)), *(void *)(v11 + *(int *)(v19 + 48)));
      unint64_t v23 = v9;
      unint64_t v16 = v9[2];
      unint64_t v15 = v9[3];
      if (v16 >= v15 >> 1)
      {
        sub_100033194(v15 > 1, v16 + 1, 1);
        uint64_t v9 = v23;
      }

      v9[2] = v16 + 1;
      sub_100015750( (uint64_t)v7,  (uint64_t)v9 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 72) * v16,
        (uint64_t *)&unk_1009AA7E0);
      v11 += v12;
      --v8;
    }

    while (v8);
  }

  return v9;
}

void *sub_10036D9B0(uint64_t a1, uint64_t (*a2)(char *, void *, void, void), uint64_t a3)
{
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AA7E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v16[1] = v3;
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_100033194(0, v9, 0);
    uint64_t v10 = v19;
    uint64_t v11 = (void *)(a1 + 80);
    do
    {
      uint64_t v12 = *(int *)(v5 + 48);
      *(void *)&v8[v12] = v17(v8, v11 - 6, *(v11 - 1), *v11);
      uint64_t v19 = v10;
      unint64_t v14 = v10[2];
      unint64_t v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_100033194(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v19;
      }

      v10[2] = v14 + 1;
      sub_100015750( (uint64_t)v8,  (uint64_t)v10 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v14,
        (uint64_t *)&unk_1009AA7E0);
      v11 += 7;
      --v9;
    }

    while (v9);
  }

  return v10;
}

uint64_t sub_10036DB04()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A7D78);
  uint64_t v1 = swift_allocObject(v0, 72LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_1007E8280;
  uint64_t v2 = (void *)SPBeaconTypeDurian;
  uint64_t v3 = (void *)SPBeaconTypeAccessory;
  *(void *)(v1 + 32) = SPBeaconTypeDurian;
  *(void *)(v1 + 40) = v3;
  uint64_t v4 = (void *)SPBeaconTypeHele;
  uint64_t v5 = (void *)SPBeaconTypeSelfBeaconing;
  *(void *)(v1 + 48) = SPBeaconTypeHele;
  *(void *)(v1 + 56) = v5;
  uint64_t v6 = (void *)SPBeaconTypeVirtualMeDevice;
  *(void *)(v1 + 64) = SPBeaconTypeVirtualMeDevice;
  id v7 = v2;
  id v8 = v3;
  id v9 = v4;
  id v10 = v5;
  id v11 = v6;
  return v1;
}

uint64_t sub_10036DBB4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10036D7A0(v1, a1);
}

uint64_t sub_10036DBCC()
{
  return sub_10036F04C(&qword_1009B1040);
}

uint64_t sub_10036DBD8()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009B1040) - 8);
  (*(void (**)(void))(v0
                    + ((*(void *)(v1 + 64)
  uint64_t v2 = sub_100004AEC(&qword_1009B1040);
  return CheckedContinuation.resume(returning:)(v2, v2);
}

uint64_t sub_10036DC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10036DC5C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10036DC64()
{
  return sub_10036F04C(&qword_1009AA658);
}

uint64_t sub_10036DC70()
{
  return sub_10036DD80(&qword_1009AA658);
}

uint64_t sub_10036DC7C()
{
  return sub_10036F04C(&qword_1009AA660);
}

uint64_t sub_10036DC88()
{
  return sub_10036EA78(&qword_1009AA660);
}

uint64_t sub_10036DC94()
{
  return sub_10036F04C((uint64_t *)&unk_1009AA668);
}

uint64_t sub_10036DCA0()
{
  return sub_10036DCEC((uint64_t *)&unk_1009AA668, (uint64_t *)&unk_1009A9C30);
}

uint64_t sub_10036DCB4()
{
  return sub_10036F04C(&qword_1009AA678);
}

uint64_t sub_10036DCC0()
{
  return sub_10036DD80(&qword_1009AA678);
}

uint64_t sub_10036DCCC()
{
  return sub_10036F04C((uint64_t *)&unk_1009AA680);
}

uint64_t sub_10036DCD8()
{
  return sub_10036DCEC((uint64_t *)&unk_1009AA680, &qword_1009AE490);
}

uint64_t sub_10036DCEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(sub_100004AEC(a1) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_10036D0A4(v2 + v6, *(void (**)(uint64_t))v7, *(void *)(v7 + 8), a2, a1);
}

uint64_t sub_10036DD50()
{
  return sub_10036F04C(&qword_1009AA690);
}

uint64_t sub_10036DD5C()
{
  return sub_10036DD80(&qword_1009AA690);
}

uint64_t sub_10036DD68()
{
  return sub_10036F04C(&qword_1009AA698);
}

uint64_t sub_10036DD74()
{
  return sub_10036DD80(&qword_1009AA698);
}

uint64_t sub_10036DD80(uint64_t *a1)
{
  uint64_t v3 = *(void *)(sub_100004AEC(a1) - 8);
  (*(void (**)(uint64_t *__return_ptr))(v1
                                                + ((*(void *)(v3 + 64)
  uint64_t v4 = sub_100004AEC(a1);
  return CheckedContinuation.resume(returning:)(&v6, v4);
}

uint64_t sub_10036DDFC()
{
  return sub_10036F04C(&qword_1009AA6A0);
}

uint64_t sub_10036DE08()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009AA6A0) - 8);
  (*(void (**)(uint64_t *__return_ptr))(v0
                                                + ((*(void *)(v1 + 64)
  uint64_t v2 = sub_100004AEC(&qword_1009AA6A0);
  return CheckedContinuation.resume(returning:)(&v4, v2);
}

uint64_t sub_10036DE8C()
{
  return sub_10036F04C(&qword_1009AA6A8);
}

uint64_t sub_10036DE98()
{
  return sub_10036DD80(&qword_1009AA6A8);
}

uint64_t sub_10036DEA4()
{
  return sub_10036F04C(&qword_1009AA6B0);
}

uint64_t sub_10036DEB0()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009AA6B0) - 8);
  (*(void (**)(void *__return_ptr))(v0
                                               + ((*(void *)(v1 + 64)
  uint64_t v2 = sub_100004AEC(&qword_1009AA6B0);
  return CheckedContinuation.resume(returning:)(v4, v2);
}

uint64_t sub_10036DF34()
{
  return sub_10036F04C(&qword_1009AA6B8);
}

uint64_t sub_10036DF40()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009AA6B8) - 8);
  (*(void (**)(uint64_t *__return_ptr))(v0
                                                + ((*(void *)(v1 + 64)
  uint64_t v2 = sub_100004AEC(&qword_1009AA6B8);
  return CheckedContinuation.resume(returning:)(&v4, v2);
}

uint64_t sub_10036DFC4()
{
  return sub_10036F04C((uint64_t *)&unk_1009AA6C0);
}

uint64_t sub_10036DFD0()
{
  return sub_10036DCEC((uint64_t *)&unk_1009AA6C0, &qword_1009A1800);
}

uint64_t sub_10036DFE4()
{
  return sub_10036F04C(&qword_1009AA6D0);
}

uint64_t sub_10036DFF0()
{
  return sub_10036DD80(&qword_1009AA6D0);
}

uint64_t sub_10036DFFC()
{
  return sub_10036F04C(&qword_1009AA6D8);
}

uint64_t sub_10036E008()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009AA6D8) - 8);
  (*(void (**)(uint64_t *__return_ptr))(v0
                                                + ((*(void *)(v1 + 64)
  uint64_t v2 = sub_100004AEC(&qword_1009AA6D8);
  return CheckedContinuation.resume(returning:)(&v4, v2);
}

uint64_t sub_10036E08C()
{
  return sub_10036F04C((uint64_t *)&unk_1009AA6E0);
}

uint64_t sub_10036E098()
{
  return sub_10036DCEC((uint64_t *)&unk_1009AA6E0, &qword_1009A2430);
}

uint64_t sub_10036E0AC()
{
  return sub_10036F04C((uint64_t *)&unk_1009AA6F0);
}

uint64_t sub_10036E0B8()
{
  return sub_10036DD80((uint64_t *)&unk_1009AA6F0);
}

uint64_t sub_10036E0C8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009AA70C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  v3[20] = v2;
  v3[21] = v0 + 24;
  return swift_task_switch(sub_10035A4B4, 0LL, 0LL);
}

uint64_t sub_10036E12C()
{
  return sub_1005EAAA0(v0);
}

uint64_t sub_10036E134(uint64_t a1)
{
  return sub_1006D91F4(a1, v1);
}

uint64_t sub_10036E13C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10036E19C(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  sub_1003645D4(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10036E1DC()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  id v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[10];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[12];
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_10036E30C()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconEstimatedLocation(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_1005EAB18(*(void *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_10036E364()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 24));
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  id v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[10];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[12];
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10036E484(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for BeaconEstimatedLocation(0LL) - 8) + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + 24;
  uint64_t v7 = v1 + ((v4 + 64) & ~v4);
  id v8 = (void *)swift_task_alloc(dword_1009AA754);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *id v8 = v2;
  v8[1] = sub_1000159BC;
  return sub_10035D5A8(a1, v5, v6, v7);
}

uint64_t sub_10036E510()
{
  uint64_t v2 = v0 + 16;
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  char v5 = *(_BYTE *)(v0 + 72);
  uint64_t v6 = (void *)swift_task_alloc(dword_1009AA784);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100015D58;
  return sub_100368FCC(v2, v3, v4, v5);
}

uint64_t sub_10036E57C()
{
  return sub_1001187D4((uint64_t (*)(void, uint64_t))sub_1005EAAF4);
}

uint64_t sub_10036E588(uint64_t a1)
{
  return sub_10036CDAC( a1,  v1[2],  v1[3],  v1[4],  &qword_1009AA7F0,  (uint64_t)&unk_100953E80,  (uint64_t)sub_10036EA6C,  (uint64_t)&unk_100953E98);
}

uint64_t sub_10036E5C4()
{
  return swift_deallocObject(v0, 120LL, 7LL);
}

uint64_t sub_10036E608()
{
  return sub_1003631EC(*(void *)(v0 + 16), *(void *)(v0 + 24), v0 + 32, (void *)(v0 + 72), *(void **)(v0 + 112));
}

uint64_t sub_10036E620()
{
  return sub_1001187D4((uint64_t (*)(void, uint64_t))sub_1005EA6DC);
}

uint64_t sub_10036E62C(uint64_t a1)
{
  return sub_10036CDAC( a1,  v1[2],  v1[3],  v1[4],  &qword_1009AA660,  (uint64_t)&unk_1009537F0,  (uint64_t)sub_10036DC88,  (uint64_t)&unk_100953808);
}

void *sub_10036E66C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1005EBB98(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_10036E6AC(uint64_t a1)
{
  return sub_10036CDAC( a1,  v1[2],  v1[3],  v1[4],  &qword_1009AA6A8,  (uint64_t)&unk_100953A20,  (uint64_t)sub_10036DE98,  (uint64_t)&unk_100953A38);
}

uint64_t sub_10036E6E8@<X0>(void *a1@<X8>)
{
  return sub_10036EBFC(a1);
}

uint64_t sub_10036E700()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  char v7 = *(_BYTE *)(v0 + 40);
  id v8 = (void *)swift_task_alloc(dword_1009AA7C4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v8;
  *id v8 = v1;
  v8[1] = sub_100015D58;
  return sub_10036A384(v2, v3, v4, v7, v5, v6);
}

uint64_t sub_10036E77C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10036E7B8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  char v6 = *(_BYTE *)(v0 + 32);
  char v7 = (void *)swift_task_alloc(dword_1009AA7D4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_100015D58;
  return sub_10036A4DC(v2, v3, v6, v4, v5);
}

uint64_t sub_10036E82C(uint64_t a1)
{
  return sub_10036BA88(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24)) & 1;
}

uint64_t sub_10036E84C(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(v1 + 24);
  sub_100004AEC(&qword_1009AA650);
  return sub_1006E5B58(a1, v3, *(void *)(a1 + 40)) & 1;
}

id sub_10036E8E4(char *a1, uint64_t a2, void *a3, void *a4)
{
  return sub_10036BB28(a1, a2, a3, a4, *(void *)(v4 + 16));
}

id sub_10036E8EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10036C2A8(a1, a2, a3, a4, *(void *)(v4 + 16));
}

unint64_t sub_10036E8F4()
{
  unint64_t result = qword_1009A9C60;
  if (!qword_1009A9C60)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SPBeaconLocation);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009A9C60);
  }

  return result;
}

uint64_t sub_10036E930()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009AA650) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v5 + 8, v4);
}

BOOL sub_10036EA04@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v3 = *(void *)(sub_100004AEC(&qword_1009AA650) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  BOOL result = sub_10036C898(v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
  *a1 = result;
  return result;
}

uint64_t sub_10036EA60()
{
  return sub_10036F04C(&qword_1009AA7F0);
}

uint64_t sub_10036EA6C()
{
  return sub_10036EA78(&qword_1009AA7F0);
}

uint64_t sub_10036EA78(uint64_t *a1)
{
  uint64_t v3 = *(void *)(sub_100004AEC(a1) - 8);
  (*(void (**)(void *__return_ptr))(v1
                                               + ((*(void *)(v3 + 64)
  uint64_t v4 = sub_100004AEC(a1);
  return CheckedContinuation.resume(returning:)(v6, v4);
}

uint64_t sub_10036EAF4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v6));

  return swift_deallocObject(v0, v7 + 9, v5);
}

uint64_t sub_10036EB94()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_100369B94( *(void *)(v0 + 16),  v0 + v2,  (void *)(v0 + v3),  *(void **)(v0 + ((v3 + 47) & 0xFFFFFFFFFFFFFFF8LL)),  *(_BYTE *)(v0 + ((v3 + 47) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_10036EBFC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 80);
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_10036EC4C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10036EC94()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1005EAFEC(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_10036ECD4(uint64_t a1)
{
  return sub_10036CDAC( a1,  v1[2],  v1[3],  v1[4],  &qword_1009AA820,  (uint64_t)&unk_100953F48,  (uint64_t)sub_10036ED1C,  (uint64_t)&unk_100953F60);
}

uint64_t sub_10036ED10()
{
  return sub_10036F04C(&qword_1009AA820);
}

uint64_t sub_10036ED1C()
{
  return sub_10036DCEC(&qword_1009AA820, &qword_10099D8A0);
}

uint64_t sub_10036ED30()
{
  return sub_10036F04C(&qword_1009AA828);
}

uint64_t sub_10036ED3C()
{
  return sub_10036DCEC(&qword_1009AA828, &qword_1009AA830);
}

uint64_t sub_10036ED50()
{
  return sub_10036F04C(&qword_1009AA838);
}

uint64_t sub_10036ED5C()
{
  return sub_10036DCEC(&qword_1009AA838, &qword_1009AA840);
}

uint64_t sub_10036ED70()
{
  return sub_10036F04C(&qword_1009AA848);
}

uint64_t sub_10036ED7C()
{
  return sub_10036DD80(&qword_1009AA848);
}

uint64_t sub_10036ED88()
{
  return sub_10036F04C((uint64_t *)&unk_1009AA850);
}

uint64_t sub_10036ED94()
{
  return sub_10036DCEC((uint64_t *)&unk_1009AA850, (uint64_t *)&unk_1009AE450);
}

uint64_t sub_10036EDA8()
{
  return sub_10036F04C(&qword_1009AA860);
}

uint64_t sub_10036EDB4()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009AA860) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10036D01C( v0 + v2,  *(void (**)(uint64_t))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10036EDFC()
{
  return sub_10036F04C(&qword_1009AA868);
}

uint64_t sub_10036EE08()
{
  return sub_10036DCEC(&qword_1009AA868, &qword_1009AA870);
}

uint64_t sub_10036EE1C()
{
  return sub_10036F04C(&qword_1009AA878);
}

uint64_t sub_10036EE28()
{
  return sub_10036DD80(&qword_1009AA878);
}

uint64_t sub_10036EE3C()
{
  return swift_deallocObject(v0, 73LL, 7LL);
}

uint64_t sub_10036EE70()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 64));
  return swift_deallocObject(v0, v7 + 89, v5);
}

uint64_t sub_10036EF28(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v1 + v5;
  uint64_t v8 = *(void *)(v1 + v6);
  uint64_t v9 = v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = (void *)swift_task_alloc(dword_1009AA8A4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1000159BC;
  return sub_10035C4AC(a1, v7, v8, v9);
}

uint64_t sub_10036EFC8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009AA8C4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  return sub_10035C82C(v2, v0 + 24);
}

uint64_t sub_10036F020()
{
  return sub_10036F04C(&qword_1009AA8F8);
}

uint64_t sub_10036F02C()
{
  return sub_10036DCEC(&qword_1009AA8F8, &qword_1009AA900);
}

uint64_t sub_10036F040()
{
  return sub_10036F04C(&qword_1009AA908);
}

uint64_t sub_10036F04C(uint64_t *a1)
{
  uint64_t v2 = sub_100004AEC(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = ((*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_release();
  return swift_deallocObject(v1, v7, v6);
}

uint64_t sub_10036F0C0()
{
  return sub_10036DD80(&qword_1009AA908);
}

uint64_t storeEnumTagSinglePayload for LocationFetchService.Error( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10036F118 + 4 * byte_1007FD2E5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10036F14C + 4 * byte_1007FD2E0[v4]))();
}

uint64_t sub_10036F14C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036F154(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10036F15CLL);
  }
  return result;
}

uint64_t sub_10036F168(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10036F170LL);
  }
  *(_BYTE *)BOOL result = a2 + 3;
  return result;
}

uint64_t sub_10036F174(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036F17C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationFetchService.Error()
{
  return &type metadata for LocationFetchService.Error;
}

unint64_t sub_10036F19C()
{
  unint64_t result = qword_1009AA910;
  if (!qword_1009AA910)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FD3F0, &type metadata for LocationFetchService.Error);
    atomic_store(result, (unint64_t *)&qword_1009AA910);
  }

  return result;
}

uint64_t sub_10036F2D0()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10036F300 + 4 * byte_1007FD460[*v0]))( 0x746867696C666E69LL,  0xE800000000000000LL);
}

uint64_t sub_10036F300()
{
  return 0x6574656C706D6F63LL;
}

uint64_t sub_10036F31C()
{
  return 0x64656C696166LL;
}

uint64_t sub_10036F330()
{
  return 0x676E69766F6D6572LL;
}

void sub_10036F344()
{
  uint64_t v1 = type metadata accessor for SecureLocationsSubscription(0LL);
  uint64_t v2 = type metadata accessor for Date(0LL);
  unint64_t v3 = sub_100371D68();
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x2065646F6D20LL;
  v5._object = (void *)0xE600000000000000LL;
  String.append(_:)(v5);
  unint64_t v6 = 0xE900000000000065LL;
  unint64_t v7 = 0x76697463616F7270LL;
  switch(*(void *)(v0 + *(int *)(v1 + 24)))
  {
    case 0LL:
      break;
    case 1LL:
      unint64_t v6 = 0xE700000000000000LL;
      unint64_t v7 = 0x776F6C6C616873LL;
      break;
    case 2LL:
      unint64_t v6 = 0xE400000000000000LL;
      unint64_t v7 = 1702259052LL;
      break;
    case 3LL:
      unint64_t v6 = 0xE500000000000000LL;
      unint64_t v7 = 0x72656E776FLL;
      break;
    case 4LL:
      unint64_t v6 = 0xEE00657669746361LL;
      unint64_t v7 = 0x6F725072656E776FLL;
      break;
    case 5LL:
      unint64_t v6 = 0x800000010085DAE0LL;
      unint64_t v7 = 0xD000000000000013LL;
      break;
    default:
      unint64_t v6 = 0xE700000000000000LL;
      unint64_t v7 = 0x6E776F6E6B6E75LL;
      break;
  }

  unint64_t v8 = v6;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x20657461747320LL;
  v9._object = (void *)0xE700000000000000LL;
  String.append(_:)(v9);
  __asm { BR              X10 }

uint64_t sub_10036F52C()
{
  v0._countAndFlagsBits = 0x746867696C666E69LL;
  v0._object = (void *)0xE800000000000000LL;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(0xE800000000000000LL);
  v1._countAndFlagsBits = 93LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return v3;
}

void sub_10036F5B4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x617453656D697420LL;
  v4._object = (void *)0xEB0000000020706DLL;
  String.append(_:)(v4);
  uint64_t v5 = type metadata accessor for SecureLocationsSubscription(0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  unint64_t v7 = sub_100371D68();
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x2065646F6D20LL;
  v9._object = (void *)0xE600000000000000LL;
  String.append(_:)(v9);
  unint64_t v10 = 0xE900000000000065LL;
  unint64_t v11 = 0x76697463616F7270LL;
  switch(*(uint64_t *)((char *)v0 + *(int *)(v5 + 24)))
  {
    case 0LL:
      break;
    case 1LL:
      unint64_t v10 = 0xE700000000000000LL;
      unint64_t v11 = 0x776F6C6C616873LL;
      break;
    case 2LL:
      unint64_t v10 = 0xE400000000000000LL;
      unint64_t v11 = 1702259052LL;
      break;
    case 3LL:
      unint64_t v10 = 0xE500000000000000LL;
      unint64_t v11 = 0x72656E776FLL;
      break;
    case 4LL:
      unint64_t v10 = 0xEE00657669746361LL;
      unint64_t v11 = 0x6F725072656E776FLL;
      break;
    case 5LL:
      unint64_t v10 = 0x800000010085DAE0LL;
      unint64_t v11 = 0xD000000000000013LL;
      break;
    default:
      unint64_t v10 = 0xE700000000000000LL;
      unint64_t v11 = 0x6E776F6E6B6E75LL;
      break;
  }

  unint64_t v12 = v10;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x20657461747320LL;
  v13._object = (void *)0xE700000000000000LL;
  String.append(_:)(v13);
  __asm { BR              X10 }

uint64_t sub_10036F7E0()
{
  v0._countAndFlagsBits = 0x746867696C666E69LL;
  v0._object = (void *)0xE800000000000000LL;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(0xE800000000000000LL);
  v1._countAndFlagsBits = 93LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return v3;
}

void sub_10036F870(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v37 = a5;
  uint64_t v9 = type metadata accessor for Date(0LL);
  v35[1] = *(void *)(v9 - 8);
  v35[2] = v9;
  __chkstk_darwin(v9);
  v35[3] = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099E468);
  __chkstk_darwin(v11);
  Swift::String v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SecureLocationsSubscription(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  v35[0] = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v36 = (uint64_t)v35 - v18;
  uint64_t v19 = sub_100371DB0(a2, a3, a4);
  uint64_t v21 = v20;
  __n128 v22 = swift_beginAccess(a1 + 24, v41, 0LL, 0LL);
  uint64_t v23 = *(void *)(a1 + 24);
  if (*(void *)(v23 + 16))
  {
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
    uint64_t v24 = sub_10030CF14(v19, v21);
    if ((v25 & 1) != 0)
    {
      sub_100371FB0(*(void *)(v23 + 56) + *(void *)(v15 + 72) * v24, (uint64_t)v13);
      uint64_t v26 = 0LL;
    }

    else
    {
      uint64_t v26 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v26, 1LL, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) != 1)
    {
      uint64_t v33 = (uint64_t)v13;
      uint64_t v34 = v36;
      sub_100372070(v33, v36);
      __asm { BR              X10 }
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v13, 1LL, 1LL, v14, v22);
  }

  swift_bridgeObjectRelease();
  sub_100372030((uint64_t)v13);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  sub_10000A720(v27, (uint64_t)qword_100A2AE08);
  uint64_t v28 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc(22LL, -1LL);
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    v40[0] = v32;
    *(_DWORD *)uint64_t v31 = 141558275;
    uint64_t v38 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2081;
    swift_bridgeObjectRetain(a3);
    uint64_t v38 = sub_1003F11D4(a2, (unint64_t)a3, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "subscribeAndFetch - no cached subscription for %{private,mask.hash}s",  (uint8_t *)v31,  0x16u);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  *uint64_t v37 = 1;
}

uint64_t sub_1003701D0(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v40 = a1;
  uint64_t v9 = sub_100004AEC(&qword_10099E468);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (int *)type metadata accessor for SecureLocationsSubscription(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v41 = sub_100371DB0(a2, a3, a4);
  unint64_t v17 = v16;
  uint64_t v18 = (uint64_t)v15 + v12[5];
  swift_bridgeObjectRetain(a3);
  static Date.trustedNow.getter(v18);
  id v19 = [a4 subscriptionMode];
  *uint64_t v15 = a2;
  v15[1] = (uint64_t)a3;
  *(uint64_t *)((char *)v15 + v12[6]) = (uint64_t)v19;
  uint64_t v20 = v12[7];
  uint64_t v39 = a5;
  *((_BYTE *)v15 + v20) = a5;
  uint64_t v21 = (uint64_t *)((char *)v15 + v12[8]);
  *uint64_t v21 = 0LL;
  v21[1] = 0LL;
  id v22 = objc_msgSend(a4, "pushIdentifiers", swift_bridgeObjectRetain(a3).n128_f64[0]);
  uint64_t v23 = sub_100004AEC(&qword_1009AED50);
  uint64_t v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v22,  &type metadata for String,  v23,  &protocol witness table for String);

  if (*(void *)(v24 + 16) && (uint64_t v25 = sub_10030CF14(a2, (uint64_t)a3), (v26 & 1) != 0))
  {
    uint64_t v27 = *(void **)(*(void *)(v24 + 56) + 8 * v25);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v27[2])
    {
      uint64_t v29 = v27[4];
      uint64_t v28 = v27[5];
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease();
      *uint64_t v21 = v29;
      v21[1] = v28;
      goto LABEL_7;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v30 = v40;
  uint64_t v31 = v41;
  sub_100371FB0((uint64_t)v15, (uint64_t)v11);
  (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v11, 0LL, 1LL, v12);
  swift_beginAccess(v30 + 24, v43, 33LL, 0LL);
  swift_bridgeObjectRetain(v17);
  sub_100045828((uint64_t)v11, v31, v17);
  swift_endAccess(v43);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v32 = type metadata accessor for Logger(0LL);
  sub_10000A720(v32, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain(v17);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc(22LL, -1LL);
    v43[0] = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v36 = 136315394;
    swift_bridgeObjectRetain(v17);
    uint64_t v42 = sub_1003F11D4(v31, v17, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease_n(v17, 3LL);
    *(_WORD *)(v36 + 12) = 2080;
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease_n(v17, 2LL);
  return sub_100371FF4((uint64_t)v15);
}

void sub_10037063C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = sub_100004AEC(&qword_10099E468);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100371DB0(a2, a3, a4);
  unint64_t v13 = v12;
  swift_beginAccess(a1 + 24, v21, 33LL, 0LL);
  sub_10004884C(v11, v13, (uint64_t)v10);
  sub_100372030((uint64_t)v10);
  swift_endAccess(v21);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain(v13);
  unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    v21[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain(v13);
    uint64_t v20 = sub_1003F11D4(v11, v13, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(v13, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "SubscribeAndFetch - removed subscription %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v13, 2LL);
  }

uint64_t sub_100370864@<X0>(id a1@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, void *a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t v7 = sub_100371DB0(a3, a4, a1);
  uint64_t v9 = v8;
  swift_beginAccess(a2 + 24, v20, 0LL, 0LL);
  uint64_t v10 = *(void *)(a2 + 24);
  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRetain(v10);
    uint64_t v11 = sub_10030CF14(v7, v9);
    if ((v12 & 1) != 0)
    {
      uint64_t v13 = v11;
      uint64_t v14 = *(void *)(v10 + 56);
      uint64_t v15 = type metadata accessor for SecureLocationsSubscription(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      sub_100371FB0(v14 + *(void *)(v16 + 72) * v13, a5);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a5, 0LL, 1LL, v15);
    }

    else
    {
      uint64_t v18 = type metadata accessor for SecureLocationsSubscription(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(a5, 1LL, 1LL, v18);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v17 = type metadata accessor for SecureLocationsSubscription(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(a5, 1LL, 1LL, v17);
  }

  return swift_bridgeObjectRelease();
}

void sub_10037099C(uint64_t a1@<X0>, unsigned __int8 *a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v65 = type metadata accessor for SecureLocationsSubscription(0LL);
  uint64_t v63 = *(void *)(v65 - 8);
  uint64_t v3 = __chkstk_darwin(v65);
  uint64_t v59 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v58 = (uint64_t *)((char *)&v56 - v6);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v56 - v7;
  uint64_t v9 = sub_100004AEC(&qword_1009AAB10);
  uint64_t v10 = __chkstk_darwin(v9);
  char v12 = (uint64_t *)((char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v56 - v13);
  unsigned __int8 v69 = 0;
  swift_beginAccess(a1 + 24, v68, 0LL, 0LL);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v61 = v15 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(v15 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v62 = (unint64_t)(v17 + 63) >> 6;
  int64_t v57 = v62 - 1;
  uint64_t v64 = v15;
  swift_bridgeObjectRetain(v15);
  int64_t v20 = 0LL;
  if (!v19) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v21 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v22 = v21 | (v20 << 6);
LABEL_5:
  uint64_t v23 = *(void *)(v64 + 56);
  uint64_t v24 = (void *)(*(void *)(v64 + 48) + 16 * v22);
  uint64_t v25 = v24[1];
  void *v12 = *v24;
  v12[1] = v25;
  uint64_t v26 = v23 + *(void *)(v63 + 72) * v22;
  uint64_t v27 = sub_100004AEC(&qword_1009AAB18);
  sub_100371FB0(v26, (uint64_t)v12 + *(int *)(v27 + 48));
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v12, 0LL, 1LL, v27);
  swift_bridgeObjectRetain(v25);
  while (1)
  {
    sub_1003720B4((uint64_t)v12, (uint64_t)v14);
    uint64_t v32 = sub_100004AEC(&qword_1009AAB18);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48LL))(v14, 1LL, v32) == 1)
    {
      swift_release();
      goto LABEL_35;
    }

    uint64_t v34 = *v14;
    unint64_t v33 = v14[1];
    sub_100372070((uint64_t)v14 + *(int *)(v32 + 48), (uint64_t)v8);
    if (*(void *)&v8[*(int *)(v65 + 24)] == 1LL)
    {
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v35 = type metadata accessor for Logger(0LL);
      sub_10000A720(v35, (uint64_t)qword_100A2AE08);
      uint64_t v36 = v58;
      sub_100371FB0((uint64_t)v8, (uint64_t)v58);
      uint64_t v37 = v59;
      sub_100371FB0((uint64_t)v8, v59);
      swift_bridgeObjectRetain(v33);
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.default.getter(v39);
      int v41 = v40;
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v42 = swift_slowAlloc(52LL, -1LL);
        uint64_t v43 = swift_slowAlloc(96LL, -1LL);
        uint64_t v65 = v43;
        *(_DWORD *)uint64_t v42 = 141559043;
        uint64_t v66 = 1752392040LL;
        v67[0] = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v42 + 4, v42 + 12);
        *(_WORD *)(v42 + 12) = 2081;
        LODWORD(v63) = v41;
        swift_bridgeObjectRetain(v33);
        uint64_t v66 = sub_1003F11D4(v34, v33, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v42 + 14, v42 + 22);
        swift_bridgeObjectRelease_n(v33, 3LL);
        *(_WORD *)(v42 + 22) = 2160;
        uint64_t v66 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v42 + 24, v42 + 32);
        *(_WORD *)(v42 + 32) = 2081;
        uint64_t v44 = *v36;
        unint64_t v45 = v36[1];
        swift_bridgeObjectRetain(v45);
        uint64_t v66 = sub_1003F11D4(v44, v45, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v42 + 34, v42 + 42);
        swift_bridgeObjectRelease();
        sub_100371FF4((uint64_t)v36);
        *(_WORD *)(v42 + 42) = 2082;
        uint64_t v46 = v59;
        sub_10036F344();
        uint64_t v66 = sub_1003F11D4(v47, v48, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v42 + 44, v42 + 52);
        swift_bridgeObjectRelease();
        sub_100371FF4(v46);
        _os_log_impl( (void *)&_mh_execute_header,  v39,  (os_log_type_t)v63,  "SubscribeAndFetch - Found an active shallow subscription with key %{private,mask.hash}s -> %{private,mask.hash}s  %{public}s",  (uint8_t *)v42,  0x34u);
        uint64_t v49 = v65;
        swift_arrayDestroy(v65, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1LL, -1LL);
        swift_slowDealloc(v42, -1LL, -1LL);
      }

      else
      {

        sub_100371FF4(v37);
        sub_100371FF4((uint64_t)v36);
        swift_bridgeObjectRelease_n(v33, 2LL);
      }

      sub_100371FF4((uint64_t)v8);
      swift_release();
      unsigned __int8 v69 = 1;
LABEL_35:
      if (qword_10099B5E0 != -1) {
        goto LABEL_40;
      }
      goto LABEL_36;
    }

    sub_100371FF4((uint64_t)v8);
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v28 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v28 < v62)
    {
      unint64_t v29 = *(void *)(v61 + 8 * v28);
      if (v29) {
        goto LABEL_9;
      }
      int64_t v30 = v20 + 2;
      ++v20;
      if (v28 + 1 < v62)
      {
        unint64_t v29 = *(void *)(v61 + 8 * v30);
        if (v29) {
          goto LABEL_12;
        }
        int64_t v20 = v28 + 1;
        if (v28 + 2 < v62)
        {
          unint64_t v29 = *(void *)(v61 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2LL;
            goto LABEL_9;
          }

          int64_t v30 = v28 + 3;
          int64_t v20 = v28 + 2;
          if (v28 + 3 < v62)
          {
            unint64_t v29 = *(void *)(v61 + 8 * v30);
            if (!v29)
            {
              while (1)
              {
                int64_t v28 = v30 + 1;
                if (__OFADD__(v30, 1LL)) {
                  break;
                }
                if (v28 >= v62)
                {
                  int64_t v20 = v57;
                  goto LABEL_23;
                }

                unint64_t v29 = *(void *)(v61 + 8 * v28);
                ++v30;
                if (v29) {
                  goto LABEL_9;
                }
              }

              __break(1u);
              return;
            }

uint64_t sub_1003710AC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(dispatch_queue_s **)(v4 + 16);
  uint64_t v9 = (void *)swift_allocObject(&unk_100954440, 48LL, 7LL);
  v9[2] = a1;
  v9[3] = a2;
  _OWORD v9[4] = a3;
  v9[5] = v4;
  uint64_t v10 = swift_allocObject(&unk_100954468, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_100372130;
  *(void *)(v10 + 24) = v9;
  void v14[4] = sub_100095030;
  v14[5] = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  uint64_t v14[2] = sub_100025BD4;
  v14[3] = &unk_100954480;
  uint64_t v11 = _Block_copy(v14);
  swift_bridgeObjectRetain(a2);
  id v12 = a3;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v10, "", 120LL, 173LL, 35LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  return result;
}

uint64_t sub_1003711F8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v40 = a4;
  uint64_t v7 = sub_100004AEC(&qword_10099E468);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (int *)type metadata accessor for SecureLocationsSubscription(0LL);
  uint64_t v39 = *((void *)v10 - 1);
  __chkstk_darwin(v10);
  id v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_10000A720(v13, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v15 = a3;
  uint64_t v38 = v14;
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  uint64_t v18 = &selRef_initWithCoder_;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v36 = v9;
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = swift_slowAlloc(64LL, -1LL);
    uint64_t v35 = v20;
    *(_DWORD *)uint64_t v19 = 141558531;
    uint64_t v41 = 1752392040LL;
    v42[0] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    swift_bridgeObjectRetain(a2);
    uint64_t v37 = a1;
    uint64_t v41 = sub_1003F11D4(a1, a2, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v19 + 22) = 2082;
    id v21 = [v15 subscriptionMode];
    unint64_t v22 = 0xE900000000000065LL;
    uint64_t v23 = 0x76697463616F7270LL;
    switch((unint64_t)v21)
    {
      case 0uLL:
        break;
      case 1uLL:
        unint64_t v22 = 0xE700000000000000LL;
        uint64_t v23 = 0x776F6C6C616873LL;
        break;
      case 2uLL:
        unint64_t v22 = 0xE400000000000000LL;
        uint64_t v23 = 1702259052LL;
        break;
      case 3uLL:
        unint64_t v22 = 0xE500000000000000LL;
        uint64_t v23 = 0x72656E776FLL;
        break;
      case 4uLL:
        unint64_t v22 = 0xEE00657669746361LL;
        uint64_t v23 = 0x6F725072656E776FLL;
        break;
      case 5uLL:
        unint64_t v22 = 0x800000010085DAE0LL;
        uint64_t v23 = 0xD000000000000013LL;
        break;
      default:
        unint64_t v22 = 0xE700000000000000LL;
        uint64_t v23 = 0x6E776F6E6B6E75LL;
        break;
    }

    uint64_t v41 = sub_1003F11D4(v23, v22, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v19 + 24, v19 + 32);

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "SubscribeAndFetch - adding pending key subscription %{private,mask.hash}s in mode %{public}s",  (uint8_t *)v19,  0x20u);
    uint64_t v24 = v35;
    swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

    uint64_t v9 = v36;
    a1 = v37;
    uint64_t v18 = &selRef_initWithCoder_;
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v25 = (uint64_t)v12 + v10[5];
  swift_bridgeObjectRetain(a2);
  static Date.trustedNow.getter(v25);
  id v26 = [v15 v18[110]];
  uint64_t *v12 = a1;
  v12[1] = a2;
  *(uint64_t *)((char *)v12 + v10[6]) = (uint64_t)v26;
  *((_BYTE *)v12 + v10[7]) = 0;
  uint64_t v27 = (uint64_t *)((char *)v12 + v10[8]);
  *uint64_t v27 = 0LL;
  v27[1] = 0LL;
  id v28 = [v15 v18[110]];
  switch((unint64_t)v28)
  {
    case 0uLL:
    case 5uLL:
      sub_100371FB0((uint64_t)v12, (uint64_t)v9);
      (*(void (**)(char *, void, uint64_t, int *))(v39 + 56))(v9, 0LL, 1LL, v10);
      uint64_t v29 = v40 + 32;
      goto LABEL_16;
    case 1uLL:
      sub_100371FB0((uint64_t)v12, (uint64_t)v9);
      (*(void (**)(char *, void, uint64_t, int *))(v39 + 56))(v9, 0LL, 1LL, v10);
      uint64_t v29 = v40 + 40;
LABEL_16:
      swift_beginAccess(v29, v42, 33LL, 0LL);
      swift_bridgeObjectRetain(a2);
      sub_100045828((uint64_t)v9, a1, a2);
      swift_endAccess(v42);
      return sub_100371FF4((uint64_t)v12);
    case 2uLL:
      int64_t v30 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v31 = static os_log_type_t.error.getter(v30);
      if (!os_log_type_enabled(v30, v31)) {
        goto LABEL_22;
      }
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      unint64_t v33 = "SubscribeAndFetch - key request in live - we don't currently do this. This is an anomaly";
      break;
    default:
      int64_t v30 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v31 = static os_log_type_t.error.getter(v30);
      if (!os_log_type_enabled(v30, v31)) {
        goto LABEL_22;
      }
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      unint64_t v33 = "SubscribeAndFetch unknown mode specified";
      break;
  }

  _os_log_impl((void *)&_mh_execute_header, v30, v31, v33, v32, 2u);
  swift_slowDealloc(v32, -1LL, -1LL);
LABEL_22:

  return sub_100371FF4((uint64_t)v12);
}

uint64_t sub_100371758()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for SecureLocationsSubscriptionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd34SecureLocationsSubscriptionManager);
}

void *sub_1003717B4(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    id v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    uint64_t v14 = a3[8];
    id v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *id v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain(v17);
  }

  return v4;
}

uint64_t sub_10037188C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 32) + 8));
}

void *sub_1003718EC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)((char *)a1 + v13);
  id v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  return a1;
}

void *sub_100371998(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

_OWORD *sub_100371A60(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

void *sub_100371AEC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_100371B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100371B9C);
}

uint64_t sub_100371B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t sub_100371C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100371C24);
}

uint64_t sub_100371C24(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for SecureLocationsSubscription(uint64_t a1)
{
  uint64_t result = qword_1009AAAC8;
  if (!qword_1009AAAC8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsSubscription);
  }
  return result;
}

uint64_t sub_100371CD4(uint64_t a1)
{
  v4[0] = &unk_1007FD510;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_1007FD528;
    void v4[4] = &unk_1007FD540;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_100371D68()
{
  unint64_t result = qword_1009AFB20;
  if (!qword_1009AFB20)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1009AFB20);
  }

  return result;
}

uint64_t sub_100371DB0(uint64_t a1, void *a2, id a3)
{
  id v6 = [a3 clientApp];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = 12079LL;
  v10._object = (void *)0xE200000000000000LL;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  uint64_t v11 = v7;
  uint64_t v12 = v9;
  id v13 = [a3 subscriptionMode];
  uint64_t v14 = (void *)0xE900000000000065LL;
  uint64_t v15 = 0x76697463616F7270LL;
  switch((unint64_t)v13)
  {
    case 0uLL:
      break;
    case 1uLL:
      uint64_t v14 = (void *)0xE700000000000000LL;
      uint64_t v15 = 0x776F6C6C616873LL;
      break;
    case 2uLL:
      uint64_t v14 = (void *)0xE400000000000000LL;
      uint64_t v15 = 1702259052LL;
      break;
    case 3uLL:
      uint64_t v14 = (void *)0xE500000000000000LL;
      uint64_t v15 = 0x72656E776FLL;
      break;
    case 4uLL:
      uint64_t v14 = (void *)0xEE00657669746361LL;
      uint64_t v15 = 0x6F725072656E776FLL;
      break;
    case 5uLL:
      uint64_t v14 = (void *)0x800000010085DAE0LL;
      uint64_t v15 = 0xD000000000000013LL;
      break;
    default:
      uint64_t v14 = (void *)0xE700000000000000LL;
      uint64_t v15 = 0x6E776F6E6B6E75LL;
      break;
  }

  swift_bridgeObjectRetain(v12);
  v16._countAndFlagsBits = v15;
  v16._object = v14;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRetain(v12);
  v17._countAndFlagsBits = 12079LL;
  v17._object = (void *)0xE200000000000000LL;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRetain(v12);
  v18._countAndFlagsBits = a1;
  v18._object = a2;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_100371FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SecureLocationsSubscription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100371FF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SecureLocationsSubscription(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100372030(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099E468);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100372070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SecureLocationsSubscription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003720B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AAB10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003720FC()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100372130()
{
  return sub_1003711F8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10037213C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10037214C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10037215C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t storeEnumTagSinglePayload for SecureLocationsSubscriptionRequestState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1003721B0 + 4 * byte_1007FD491[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1003721E4 + 4 * byte_1007FD48C[v4]))();
}

uint64_t sub_1003721E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003721EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003721F4LL);
  }
  return result;
}

uint64_t sub_100372200(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100372208LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10037220C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100372214(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubscriptionRequestState()
{
  return &type metadata for SecureLocationsSubscriptionRequestState;
}

unint64_t sub_100372234()
{
  unint64_t result = qword_1009AAB20;
  if (!qword_1009AAB20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FD638, &type metadata for SecureLocationsSubscriptionRequestState);
    atomic_store(result, (unint64_t *)&qword_1009AAB20);
  }

  return result;
}

uint64_t sub_100372278()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd24CryptoKeyStreamInspector_delay;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1003722E8()
{
  return type metadata accessor for CryptoKeyStreamInspector(0LL);
}

uint64_t type metadata accessor for CryptoKeyStreamInspector(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009AAB58, (uint64_t)&nominal type descriptor for CryptoKeyStreamInspector);
}

uint64_t sub_100372304(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_100372398(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v41 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v41 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v6 = *a2;
    unint64_t v7 = a2[1];
    sub_10001736C(*a2, v7);
    *a1 = v6;
    a1[1] = v7;
    uint64_t v8 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
    uint64_t v9 = v8[5];
    Swift::String v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v54 = *(void *)(v12 - 8);
    id v13 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    v13(v10, v11, v12);
    uint64_t v53 = v13;
    v13((char *)a1 + v8[6], (char *)a2 + v8[6], v12);
    uint64_t v14 = v8[7];
    uint64_t v15 = (char *)a1 + v14;
    Swift::String v16 = (char *)a2 + v14;
    *uint64_t v15 = *v16;
    uint64_t v57 = *((void *)v16 + 2);
    *((void *)v15 + 1) = *((void *)v16 + 1);
    *((void *)v15 + 2) = v57;
    uint64_t v17 = v8[8];
    Swift::String v18 = (uint64_t *)((char *)a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v55 = v19[1];
    *Swift::String v18 = *v19;
    v18[1] = v55;
    uint64_t v20 = v8[9];
    id v21 = (uint64_t *)((char *)a1 + v20);
    unint64_t v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = v22[1];
    *id v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = v8[10];
    uint64_t v25 = (uint64_t *)((char *)a1 + v24);
    id v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    *(uint64_t *)((char *)a1 + v8[11]) = *(uint64_t *)((char *)a2 + v8[11]);
    *(uint64_t *)((char *)a1 + v8[12]) = *(uint64_t *)((char *)a2 + v8[12]);
    *((_BYTE *)a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
    *((_BYTE *)a1 + v8[14]) = *((_BYTE *)a2 + v8[14]);
    *(uint64_t *)((char *)a1 + v8[15]) = *(uint64_t *)((char *)a2 + v8[15]);
    *((_BYTE *)a1 + v8[16]) = *((_BYTE *)a2 + v8[16]);
    *(uint64_t *)((char *)a1 + v8[17]) = *(uint64_t *)((char *)a2 + v8[17]);
    uint64_t v28 = v8[18];
    uint64_t v29 = (char *)a1 + v28;
    int64_t v30 = (char *)a2 + v28;
    uint64_t v31 = type metadata accessor for Date(0LL);
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16LL);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v23);
    __n128 v33 = swift_bridgeObjectRetain(v27);
    uint64_t v56 = v32;
    uint64_t v58 = v31;
    uint64_t v34 = v31;
    uint64_t v35 = v12;
    ((void (*)(char *, char *, uint64_t, __n128))v32)(v29, v30, v34, v33);
    uint64_t v36 = v8[19];
    uint64_t v37 = (char *)a1 + v36;
    uint64_t v38 = (char *)a2 + v36;
    uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
    if (v39((char *)a2 + v36, 1LL, v35))
    {
      uint64_t v40 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64LL));
    }

    else
    {
      v53(v37, v38, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v37, 0LL, 1LL, v35);
    }

    uint64_t v42 = v8[20];
    uint64_t v43 = (_DWORD *)((char *)a1 + v42);
    uint64_t v44 = (_DWORD *)((char *)a2 + v42);
    uint64_t v45 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v46 + 48))(v44, 1LL, v45))
    {
      uint64_t v47 = sub_100004AEC(&qword_1009AE600);
      memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      *uint64_t v43 = *v44;
      uint64_t v48 = *(int *)(v45 + 20);
      uint64_t v49 = (char *)v43 + v48;
      uint64_t v50 = (char *)v44 + v48;
      if (v39(v50, 1LL, v35))
      {
        uint64_t v51 = sub_100004AEC(&qword_10099D8A0);
        memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
      }

      else
      {
        v53(v49, v50, v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v49, 0LL, 1LL, v35);
      }

      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0LL, 1LL, v45);
    }

    v56((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20), v58);
  }

  return a1;
}

uint64_t sub_100372704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v5 = a1 + v4[5];
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(a1 + v4[6], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + v4[18];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL);
  v17(v9, v10);
  uint64_t v11 = a1 + v4[19];
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v12(v11, 1LL, v6)) {
    v8(v11, v6);
  }
  uint64_t v13 = a1 + v4[20];
  uint64_t v14 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v13, 1LL, v14))
  {
    uint64_t v15 = v13 + *(int *)(v14 + 20);
    if (!v12(v15, 1LL, v6)) {
      v8(v15, v6);
    }
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v17)(a1 + *(int *)(a2 + 20), v10);
}

uint64_t *sub_100372894(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  sub_10001736C(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  uint64_t v7 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v8 = v7[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v12(v9, v10, v11);
  uint64_t v51 = v12;
  v12((char *)a1 + v7[6], (char *)a2 + v7[6], v11);
  uint64_t v13 = v7[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  *uint64_t v14 = *v15;
  uint64_t v55 = *((void *)v15 + 2);
  *((void *)v14 + 1) = *((void *)v15 + 1);
  *((void *)v14 + 2) = v55;
  uint64_t v16 = v7[8];
  uint64_t v17 = (uint64_t *)((char *)a1 + v16);
  Swift::String v18 = (uint64_t *)((char *)a2 + v16);
  uint64_t v53 = v18[1];
  void *v17 = *v18;
  v17[1] = v53;
  uint64_t v19 = v7[9];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  id v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = v7[10];
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  uint64_t v26 = v25[1];
  void *v24 = *v25;
  v24[1] = v26;
  *(uint64_t *)((char *)a1 + v7[11]) = *(uint64_t *)((char *)a2 + v7[11]);
  *(uint64_t *)((char *)a1 + v7[12]) = *(uint64_t *)((char *)a2 + v7[12]);
  *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
  *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
  *(uint64_t *)((char *)a1 + v7[15]) = *(uint64_t *)((char *)a2 + v7[15]);
  *((_BYTE *)a1 + v7[16]) = *((_BYTE *)a2 + v7[16]);
  *(uint64_t *)((char *)a1 + v7[17]) = *(uint64_t *)((char *)a2 + v7[17]);
  uint64_t v27 = v7[18];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  uint64_t v30 = type metadata accessor for Date(0LL);
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v22);
  __n128 v32 = swift_bridgeObjectRetain(v26);
  uint64_t v54 = v31;
  uint64_t v56 = v30;
  uint64_t v33 = v30;
  uint64_t v34 = v11;
  ((void (*)(char *, char *, uint64_t, __n128))v31)(v28, v29, v33, v32);
  uint64_t v35 = v7[19];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
  if (v38((char *)a2 + v35, 1LL, v34))
  {
    uint64_t v39 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    v51(v36, v37, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v36, 0LL, 1LL, v34);
  }

  uint64_t v40 = v7[20];
  uint64_t v41 = (_DWORD *)((char *)a1 + v40);
  uint64_t v42 = (_DWORD *)((char *)a2 + v40);
  uint64_t v43 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  uint64_t v44 = *(void *)(v43 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v44 + 48))(v42, 1LL, v43))
  {
    uint64_t v45 = sub_100004AEC(&qword_1009AE600);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64LL));
  }

  else
  {
    *uint64_t v41 = *v42;
    uint64_t v46 = *(int *)(v43 + 20);
    uint64_t v47 = (char *)v41 + v46;
    uint64_t v48 = (char *)v42 + v46;
    if (v38(v48, 1LL, v34))
    {
      uint64_t v49 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
    }

    else
    {
      v51(v47, v48, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v47, 0LL, 1LL, v34);
    }

    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v43);
  }

  v54((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20), v56);
  return a1;
}

uint64_t *sub_100372BD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v11 = v10[5];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v15 + 24);
  v16(v12, v13, v14);
  uint64_t v66 = v16;
  v16((char *)a1 + v10[6], (char *)a2 + v10[6], v14);
  uint64_t v17 = v10[7];
  Swift::String v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  *Swift::String v18 = *v19;
  *((void *)v18 + 1) = *((void *)v19 + 1);
  uint64_t v20 = *((void *)v19 + 2);
  *((void *)v18 + 2) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  uint64_t v21 = v10[8];
  uint64_t v22 = (uint64_t *)((char *)a1 + v21);
  uint64_t v23 = (uint64_t *)((char *)a2 + v21);
  void *v22 = *v23;
  uint64_t v24 = v23[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease();
  uint64_t v25 = v10[9];
  uint64_t v26 = (uint64_t *)((char *)a1 + v25);
  uint64_t v27 = (uint64_t *)((char *)a2 + v25);
  *uint64_t v26 = *v27;
  uint64_t v28 = v27[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = v10[10];
  uint64_t v30 = (uint64_t *)((char *)a1 + v29);
  uint64_t v31 = (uint64_t *)((char *)a2 + v29);
  *uint64_t v30 = *v31;
  uint64_t v32 = v31[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v10[11]) = *(uint64_t *)((char *)a2 + v10[11]);
  *(uint64_t *)((char *)a1 + v10[12]) = *(uint64_t *)((char *)a2 + v10[12]);
  *((_BYTE *)a1 + v10[13]) = *((_BYTE *)a2 + v10[13]);
  *((_BYTE *)a1 + v10[14]) = *((_BYTE *)a2 + v10[14]);
  *(uint64_t *)((char *)a1 + v10[15]) = *(uint64_t *)((char *)a2 + v10[15]);
  *((_BYTE *)a1 + v10[16]) = *((_BYTE *)a2 + v10[16]);
  *(uint64_t *)((char *)a1 + v10[17]) = *(uint64_t *)((char *)a2 + v10[17]);
  uint64_t v33 = v10[18];
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = type metadata accessor for Date(0LL);
  uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 24LL);
  v68(v34, v35, v36);
  uint64_t v37 = v10[19];
  uint64_t v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  uint64_t v67 = v15;
  uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v15) = v40((char *)a1 + v37, 1LL, v14);
  int v41 = v40(v39, 1LL, v14);
  uint64_t v69 = a3;
  uint64_t v70 = v36;
  if ((_DWORD)v15)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v38, v39, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v38, 0LL, 1LL, v14);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v38, v14);
LABEL_6:
    uint64_t v42 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_7;
  }

  v66(v38, v39, v14);
LABEL_7:
  uint64_t v43 = v10[20];
  uint64_t v44 = (_DWORD *)((char *)a1 + v43);
  uint64_t v45 = (_DWORD *)((char *)a2 + v43);
  uint64_t v46 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v47 + 48);
  int v49 = v48(v44, 1LL, v46);
  int v50 = v48(v45, 1LL, v46);
  if (v49)
  {
    if (v50)
    {
      uint64_t v51 = sub_100004AEC(&qword_1009AE600);
      memcpy(v44, v45, *(void *)(*(void *)(v51 - 8) + 64LL));
      uint64_t v52 = v69;
    }

    else
    {
      *uint64_t v44 = *v45;
      uint64_t v55 = *(int *)(v46 + 20);
      uint64_t v56 = (char *)v44 + v55;
      uint64_t v57 = (char *)v45 + v55;
      uint64_t v52 = v69;
      if (v40(v57, 1LL, v14))
      {
        uint64_t v58 = sub_100004AEC(&qword_10099D8A0);
        memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v56, v57, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v56, 0LL, 1LL, v14);
      }

      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0LL, 1LL, v46);
    }

    uint64_t v53 = v70;
  }

  else
  {
    uint64_t v53 = v70;
    if (!v50)
    {
      *uint64_t v44 = *v45;
      uint64_t v59 = *(int *)(v46 + 20);
      uint64_t v60 = (char *)v44 + v59;
      uint64_t v61 = (char *)v45 + v59;
      int v62 = v40(v60, 1LL, v14);
      int v63 = v40(v61, 1LL, v14);
      if (v62)
      {
        uint64_t v52 = v69;
        if (!v63)
        {
          (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v60, v61, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v60, 0LL, 1LL, v14);
          goto LABEL_21;
        }
      }

      else
      {
        uint64_t v52 = v69;
        if (!v63)
        {
          v66(v60, v61, v14);
          goto LABEL_21;
        }

        (*(void (**)(char *, uint64_t))(v67 + 8))(v60, v14);
      }

      uint64_t v65 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v60, v61, *(void *)(*(void *)(v65 - 8) + 64LL));
      goto LABEL_21;
    }

    sub_1003730CC((uint64_t)v44);
    uint64_t v54 = sub_100004AEC(&qword_1009AE600);
    memcpy(v44, v45, *(void *)(*(void *)(v54 - 8) + 64LL));
    uint64_t v52 = v69;
  }

uint64_t sub_1003730CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

char *sub_100373108(char *a1, char *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v6 = v5[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v11(&a1[v5[6]], &a2[v5[6]], v9);
  uint64_t v12 = v5[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((void *)v13 + 2) = *((void *)v14 + 2);
  *(_OWORD *)&a1[v5[8]] = *(_OWORD *)&a2[v5[8]];
  *(_OWORD *)&a1[v5[9]] = *(_OWORD *)&a2[v5[9]];
  *(_OWORD *)&a1[v5[10]] = *(_OWORD *)&a2[v5[10]];
  *(void *)&a1[v5[11]] = *(void *)&a2[v5[11]];
  *(void *)&a1[v5[12]] = *(void *)&a2[v5[12]];
  a1[v5[13]] = a2[v5[13]];
  a1[v5[14]] = a2[v5[14]];
  *(void *)&a1[v5[15]] = *(void *)&a2[v5[15]];
  a1[v5[16]] = a2[v5[16]];
  *(void *)&a1[v5[17]] = *(void *)&a2[v5[17]];
  uint64_t v15 = v5[18];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL);
  v36(v16, v17, v18);
  uint64_t v19 = v5[19];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v35 = v10;
  if (v22(&a2[v19], 1LL, v9))
  {
    uint64_t v23 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    v11(v20, v21, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0LL, 1LL, v9);
  }

  uint64_t v24 = v5[20];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
  {
    uint64_t v29 = sub_100004AEC(&qword_1009AE600);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
    uint64_t v30 = *(int *)(v27 + 20);
    __dst = &v25[v30];
    uint64_t v31 = &v26[v30];
    if (v22(v31, 1LL, v9))
    {
      uint64_t v32 = sub_100004AEC(&qword_10099D8A0);
      memcpy(__dst, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
    }

    else
    {
      v11(__dst, v31, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0LL, 1LL, v9);
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  }

  v36(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v18);
  return a1;
}

uint64_t *sub_1003733F8(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v9 = v8[5];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 40);
  v14(v10, v11, v12);
  uint64_t v68 = v14;
  v14((char *)a1 + v8[6], &a2[v8[6]], v12);
  uint64_t v15 = v8[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = &a2[v15];
  char *v16 = *v17;
  uint64_t v19 = *((void *)v17 + 1);
  uint64_t v18 = *((void *)v17 + 2);
  *((void *)v16 + 1) = v19;
  *((void *)v16 + 2) = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = v8[8];
  uint64_t v21 = (uint64_t *)((char *)a1 + v20);
  uint64_t v22 = (uint64_t *)&a2[v20];
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = v8[9];
  uint64_t v26 = (uint64_t *)((char *)a1 + v25);
  uint64_t v27 = (uint64_t *)&a2[v25];
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = v8[10];
  uint64_t v31 = (uint64_t *)((char *)a1 + v30);
  uint64_t v32 = (uint64_t *)&a2[v30];
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v8[11]) = *(void *)&a2[v8[11]];
  *(uint64_t *)((char *)a1 + v8[12]) = *(void *)&a2[v8[12]];
  *((_BYTE *)a1 + v8[13]) = a2[v8[13]];
  *((_BYTE *)a1 + v8[14]) = a2[v8[14]];
  *(uint64_t *)((char *)a1 + v8[15]) = *(void *)&a2[v8[15]];
  *((_BYTE *)a1 + v8[16]) = a2[v8[16]];
  *(uint64_t *)((char *)a1 + v8[17]) = *(void *)&a2[v8[17]];
  uint64_t v35 = v8[18];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = &a2[v35];
  uint64_t v38 = type metadata accessor for Date(0LL);
  uint64_t v70 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 40LL);
  v70(v36, v37, v38);
  uint64_t v39 = v8[19];
  uint64_t v40 = (char *)a1 + v39;
  int v41 = &a2[v39];
  uint64_t v69 = v13;
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v13) = v42((char *)a1 + v39, 1LL, v12);
  int v43 = v42(v41, 1LL, v12);
  uint64_t v71 = a3;
  uint64_t v72 = v38;
  if ((_DWORD)v13)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v40, v41, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v40, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v69 + 8))(v40, v12);
LABEL_6:
    uint64_t v44 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
    goto LABEL_7;
  }

  v68(v40, v41, v12);
LABEL_7:
  uint64_t v45 = v8[20];
  uint64_t v46 = (char *)a1 + v45;
  uint64_t v47 = &a2[v45];
  uint64_t v48 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  uint64_t v49 = *(void *)(v48 - 8);
  int v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1LL, v48);
  int v52 = v50(v47, 1LL, v48);
  if (v51)
  {
    if (v52)
    {
      uint64_t v53 = sub_100004AEC(&qword_1009AE600);
      memcpy(v46, v47, *(void *)(*(void *)(v53 - 8) + 64LL));
      uint64_t v54 = v71;
    }

    else
    {
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
      uint64_t v57 = *(int *)(v48 + 20);
      uint64_t v58 = &v46[v57];
      uint64_t v59 = &v47[v57];
      uint64_t v54 = v71;
      if (v42(v59, 1LL, v12))
      {
        uint64_t v60 = sub_100004AEC(&qword_10099D8A0);
        memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v58, v59, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v58, 0LL, 1LL, v12);
      }

      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0LL, 1LL, v48);
    }

    uint64_t v55 = v72;
  }

  else
  {
    uint64_t v55 = v72;
    if (!v52)
    {
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
      uint64_t v61 = *(int *)(v48 + 20);
      int v62 = &v46[v61];
      int v63 = &v47[v61];
      int v64 = v42(v62, 1LL, v12);
      int v65 = v42(v63, 1LL, v12);
      if (v64)
      {
        uint64_t v54 = v71;
        if (!v65)
        {
          (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v62, v63, v12);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v62, 0LL, 1LL, v12);
          goto LABEL_21;
        }
      }

      else
      {
        uint64_t v54 = v71;
        if (!v65)
        {
          v68(v62, v63, v12);
          goto LABEL_21;
        }

        (*(void (**)(char *, uint64_t))(v69 + 8))(v62, v12);
      }

      uint64_t v67 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v62, v63, *(void *)(*(void *)(v67 - 8) + 64LL));
      goto LABEL_21;
    }

    sub_1003730CC((uint64_t)v46);
    uint64_t v56 = sub_100004AEC(&qword_1009AE600);
    memcpy(v46, v47, *(void *)(*(void *)(v56 - 8) + 64LL));
    uint64_t v54 = v71;
  }

uint64_t sub_1003738A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003738B4);
}

uint64_t sub_1003738B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_100373928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100373934);
}

uint64_t sub_100373934(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CryptoKeyStreamInspector.Event(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009AAC90, (uint64_t)&nominal type descriptor for CryptoKeyStreamInspector.Event);
}

uint64_t sub_1003739C4(uint64_t a1)
{
  uint64_t result = type metadata accessor for SharedBeaconRecord(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

void sub_100373A48(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v25 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v29 = *(void *)(v25 - 8);
  uint64_t v6 = __chkstk_darwin(v25);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v27 = a2 + 56;
  uint64_t v12 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v28 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v15 = 0LL;
  if (!v14) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    sub_10001DC4C( *(void *)(a2 + 48) + *(void *)(v29 + 72) * i,  (uint64_t)v10,  type metadata accessor for BeaconStatus);
    sub_10002218C((uint64_t)v10, (uint64_t)v8, type metadata accessor for BeaconStatus);
    char v21 = a1(v8);
    if (v3)
    {
      sub_100018C68((uint64_t)v8, type metadata accessor for BeaconStatus);
      swift_release();
      return;
    }

    if ((v21 & 1) != 0)
    {
      swift_release();
      uint64_t v22 = v26;
      sub_10002218C((uint64_t)v8, v26, type metadata accessor for BeaconStatus);
      uint64_t v23 = 0LL;
      uint64_t v24 = v25;
      goto LABEL_29;
    }

    sub_100018C68((uint64_t)v8, type metadata accessor for BeaconStatus);
    if (v14) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v15++, 1LL)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v27 + 8 * v15);
    if (!v19)
    {
      int64_t v20 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v27 + 8 * v20);
      if (v19) {
        goto LABEL_16;
      }
      int64_t v20 = v15 + 2;
      if (v15 + 2 >= v28) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v27 + 8 * v20);
      if (v19) {
        goto LABEL_16;
      }
      int64_t v20 = v15 + 3;
      if (v15 + 3 >= v28) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v27 + 8 * v20);
      if (v19)
      {
LABEL_16:
        int64_t v15 = v20;
        goto LABEL_17;
      }

      int64_t v20 = v15 + 4;
      if (v15 + 4 < v28)
      {
        unint64_t v19 = *(void *)(v27 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v15 = v20 + 1;
            if (__OFADD__(v20, 1LL)) {
              goto LABEL_31;
            }
            if (v15 >= v28) {
              goto LABEL_28;
            }
            unint64_t v19 = *(void *)(v27 + 8 * v15);
            ++v20;
            if (v19) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

void sub_100373D00(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
}

void sub_100373D2C(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
}

void sub_100373D58( uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v8 = a3;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (a3 < 0) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v14 = __CocoaSet.makeIterator()(v13);
    uint64_t v15 = a4(0LL);
    uint64_t v16 = sub_100007864(a5, a4, a6);
    uint64_t v17 = Set.Iterator.init(_cocoa:)(v40, v14, v15, v16);
    uint64_t v8 = v40[0];
    uint64_t v38 = v40[1];
    uint64_t v18 = v40[2];
    int64_t v19 = v40[3];
    unint64_t v20 = v40[4];
  }

  else
  {
    uint64_t v21 = -1LL << *(_BYTE *)(a3 + 32);
    uint64_t v38 = a3 + 56;
    uint64_t v22 = ~v21;
    uint64_t v23 = -v21;
    if (v23 < 64) {
      uint64_t v24 = ~(-1LL << v23);
    }
    else {
      uint64_t v24 = -1LL;
    }
    unint64_t v20 = v24 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain(a3);
    uint64_t v18 = v22;
    int64_t v19 = 0LL;
  }

  int64_t v37 = (unint64_t)(v18 + 64) >> 6;
  if ((v8 & 0x8000000000000000LL) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v25 = __CocoaSet.Iterator.next()(v17);
  if (!v25) {
    goto LABEL_39;
  }
  uint64_t v26 = v25;
  uint64_t v39 = v25;
  uint64_t v27 = a4(0LL);
  swift_unknownObjectRetain(v26);
  swift_dynamicCast(&v41, &v39, (char *)&type metadata for Swift.AnyObject + 8, v27, 7LL);
  uint64_t v28 = v41;
  swift_unknownObjectRelease(v26);
  int64_t v29 = v19;
  uint64_t v30 = v20;
  if (!v28) {
    goto LABEL_39;
  }
  while (1)
  {
    uint64_t v41 = v28;
    char v34 = a1(&v41);
    if (v7)
    {
      swift_release();
      goto LABEL_39;
    }

    if ((v34 & 1) != 0) {
      goto LABEL_39;
    }
    uint64_t v17 = (void *)swift_release();
    int64_t v19 = v29;
    unint64_t v20 = v30;
    if (v8 < 0) {
      goto LABEL_11;
    }
LABEL_14:
    if (!v20) {
      break;
    }
    uint64_t v30 = (v20 - 1) & v20;
    unint64_t v31 = __clz(__rbit64(v20)) | (v19 << 6);
    int64_t v29 = v19;
LABEL_27:
    uint64_t v28 = *(void *)(*(void *)(v8 + 48) + 8 * v31);
    swift_retain();
    if (!v28) {
      goto LABEL_39;
    }
  }

  int64_t v29 = v19 + 1;
  if (__OFADD__(v19, 1LL))
  {
    __break(1u);
    return;
  }

  if (v29 >= v37) {
    goto LABEL_39;
  }
  unint64_t v32 = *(void *)(v38 + 8 * v29);
  if (v32)
  {
LABEL_26:
    uint64_t v30 = (v32 - 1) & v32;
    unint64_t v31 = __clz(__rbit64(v32)) + (v29 << 6);
    goto LABEL_27;
  }

  int64_t v33 = v19 + 2;
  if (v19 + 2 >= v37) {
    goto LABEL_39;
  }
  unint64_t v32 = *(void *)(v38 + 8 * v33);
  if (v32) {
    goto LABEL_25;
  }
  int64_t v33 = v19 + 3;
  if (v19 + 3 >= v37) {
    goto LABEL_39;
  }
  unint64_t v32 = *(void *)(v38 + 8 * v33);
  if (v32) {
    goto LABEL_25;
  }
  int64_t v33 = v19 + 4;
  if (v19 + 4 >= v37) {
    goto LABEL_39;
  }
  unint64_t v32 = *(void *)(v38 + 8 * v33);
  if (v32)
  {
LABEL_25:
    int64_t v29 = v33;
    goto LABEL_26;
  }

  int64_t v29 = v19 + 5;
  if (v19 + 5 >= v37) {
    goto LABEL_39;
  }
  unint64_t v32 = *(void *)(v38 + 8 * v29);
  if (v32) {
    goto LABEL_26;
  }
  int64_t v35 = v19 + 6;
  while (v37 != v35)
  {
    unint64_t v32 = *(void *)(v38 + 8 * v35++);
    if (v32)
    {
      int64_t v29 = v35 - 1;
      goto LABEL_26;
    }
  }

uint64_t sub_100374078(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v12 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = *(void *)(*(void *)(a3 + 48) + 8 * i);
    uint64_t v20 = v18;
    swift_bridgeObjectRetain(v18);
    char v19 = a1(&v20);
    if (v3)
    {
      swift_release(a3);
      swift_bridgeObjectRelease(v18);
      return v18;
    }

    if ((v19 & 1) != 0)
    {
      swift_release(a3);
      return v18;
    }

    uint64_t result = swift_bridgeObjectRelease(v18);
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_28;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16)
    {
      int64_t v17 = v12 + 1;
      if (v12 + 1 >= v10) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16) {
        goto LABEL_16;
      }
      int64_t v17 = v12 + 2;
      if (v12 + 2 >= v10) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16) {
        goto LABEL_16;
      }
      int64_t v17 = v12 + 3;
      if (v12 + 3 >= v10) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16)
      {
LABEL_16:
        int64_t v12 = v17;
        goto LABEL_17;
      }

      int64_t v17 = v12 + 4;
      if (v12 + 4 < v10)
      {
        unint64_t v16 = *(void *)(v6 + 8 * v17);
        if (!v16)
        {
          while (1)
          {
            int64_t v12 = v17 + 1;
            if (__OFADD__(v17, 1LL)) {
              goto LABEL_31;
            }
            if (v12 >= v10) {
              goto LABEL_28;
            }
            unint64_t v16 = *(void *)(v6 + 8 * v12);
            ++v17;
            if (v16) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

unint64_t SPPlaySoundContext.description.getter(uint64_t a1)
{
  unint64_t result = 0x746C75616665642ELL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      unint64_t result = 0x676E69676E61722ELL;
      break;
    case 2LL:
    case 5LL:
      unint64_t result = 0x6E696B636172742ELL;
      break;
    case 3LL:
      unint64_t result = 0xD000000000000010LL;
      break;
    case 4LL:
      unint64_t result = 0x6F4365756575712ELL;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E75LL;
      break;
  }

  return result;
}

uint64_t sub_100374304()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A748);
  sub_10000A720(v0, (uint64_t)qword_100A2A748);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x6E614D646E756F73LL,  0xEC00000072656761LL);
}

unint64_t sub_100374380()
{
  return SPPlaySoundContext.description.getter(*v0);
}

void sub_100374388()
{
  qword_100A2A760 = (uint64_t)&off_1009348B8;
}

unint64_t sub_10037439C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10039A854(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003743C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10039BB48();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100374420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10039BB48();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10037446C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003744A4 + 4 * byte_1007FD6C6[*v0]))( 0x65755179616C702ELL,  0xEB00000000646575LL);
}

uint64_t sub_1003744A4()
{
  return 0x696E4979616C702ELL;
}

uint64_t sub_100374524()
{
  return 0x74756F656D69742ELL;
}

uint64_t sub_10037453C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009AACC8);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009AACC8);
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2A748);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

id sub_1003745CC()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager____lazy_storage___commandManager);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager____lazy_storage___commandManager);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager____lazy_storage___commandManager);
  }

  else
  {
    id v4 = [objc_allocWithZone(CLFindMyAccessoryManager) initWithDelegate:v0 delegateQueue:*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue)];
    uint64_t v5 = *v1;
    uint64_t *v1 = (uint64_t)v4;
    v1[1] = (uint64_t)&off_100978560;
    id v3 = v4;
    swift_unknownObjectRelease(v5);
    uint64_t v2 = 0LL;
  }

  swift_unknownObjectRetain(v2);
  return v3;
}

uint64_t sub_100374668( uint64_t a1, uint64_t a2, void (*a3)(void **), void (*a4)(void **))
{
  uint64_t v177 = a4;
  uint64_t v176 = a3;
  uint64_t v169 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v167 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  unint64_t v166 = &v146[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v168 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v165 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  uint64_t v164 = &v146[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v8);
  uint64_t v157 = &v146[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v158 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v10 = *(void *)(v158 - 8);
  uint64_t v11 = __chkstk_darwin(v158);
  uint64_t v153 = &v146[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v154 = &v146[-v14];
  uint64_t v152 = v15;
  __chkstk_darwin(v13);
  uint64_t v162 = &v146[-v16];
  uint64_t v17 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v17);
  os_log_t v171 = (os_log_t)&v146[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v172 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v170 = *(void *)(v172 - 8);
  uint64_t v19 = __chkstk_darwin(v172);
  uint64_t v149 = &v146[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v19);
  uint64_t v22 = &v146[-v21];
  uint64_t v23 = type metadata accessor for UUID(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v156 = &v146[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v160 = &v146[-v28];
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v150 = &v146[-v30];
  uint64_t v31 = __chkstk_darwin(v29);
  int64_t v33 = &v146[-v32];
  uint64_t v159 = v34;
  __chkstk_darwin(v31);
  uint64_t v36 = &v146[-v35];
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v37 = type metadata accessor for Logger(0LL);
  uint64_t v38 = sub_10000A720(v37, (uint64_t)qword_100A2A748);
  uint64_t v39 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v173 = a1;
  v39(v36, a1, v23);
  __int128 v174 = v39;
  uint64_t v175 = a2;
  uint64_t v40 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v39)(v33, a2, v23);
  uint64_t v155 = v38;
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.default.getter(v41);
  int v43 = v42;
  BOOL v44 = os_log_type_enabled(v41, v42);
  uint64_t v161 = v24;
  if (v44)
  {
    uint64_t v45 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = (void **)swift_slowAlloc(64LL, -1LL);
    uint64_t v148 = v46;
    *(_DWORD *)uint64_t v45 = 141558531;
    uint64_t v179 = 1752392040LL;
    __int128 aBlock = v46;
    uint64_t v151 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v45 + 4, v45 + 12);
    *(_WORD *)(v45 + 12) = 2081;
    uint64_t v47 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v163 = v22;
    uint64_t v48 = v47;
    int v147 = v43;
    uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v23, v47);
    uint64_t v179 = sub_1003F11D4(v49, v50, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease();
    int v51 = *(void (**)(_BYTE *, uint64_t))(v24 + 8);
    v51(v36, v23);
    *(_WORD *)(v45 + 22) = 2082;
    uint64_t v52 = v48;
    uint64_t v22 = v163;
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v23, v52);
    uint64_t v179 = sub_1003F11D4(v53, v54, (uint64_t *)&aBlock);
    uint64_t v10 = v151;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v45 + 24, v45 + 32);
    swift_bridgeObjectRelease();
    v51(v33, v23);
    _os_log_impl( (void *)&_mh_execute_header,  v41,  (os_log_type_t)v147,  "Connect to %{private,mask.hash}s commandId: %{public}s.",  (uint8_t *)v45,  0x20u);
    uint64_t v55 = v148;
    swift_arrayDestroy(v148, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  else
  {
    int v51 = *(void (**)(_BYTE *, uint64_t))(v24 + 8);
    v51(v36, v23);
    v51(v33, v23);
  }

  os_log_t v56 = v171;
  uint64_t v57 = v172;
  uint64_t v58 = v173;
  sub_10050F124(v173, (uint64_t)v171);
  if ((*(unsigned int (**)(os_log_t, uint64_t, uint64_t))(v170 + 48))(v56, 1LL, v57) == 1)
  {
    sub_100015794((uint64_t)v56, &qword_1009AA830);
    uint64_t v59 = v178;
    uint64_t v60 = v160;
    uint64_t v61 = v174;
    v174(v160, v58, v23);
    int v62 = v156;
    v61(v156, v175, v23);
    uint64_t v63 = v161;
    uint64_t v64 = *(unsigned __int8 *)(v161 + 80);
    uint64_t v65 = (v64 + 24) & ~v64;
    uint64_t v66 = v23;
    uint64_t v67 = (v159 + v64 + v65) & ~v64;
    unint64_t v68 = (v159 + v67 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v69 = swift_allocObject(&unk_1009552E0, v68 + 16, v64 | 7);
    *(void *)(v69 + swift_weakDestroy(v0 + 16) = v59;
    uint64_t v70 = v69 + v65;
    uint64_t v71 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v63 + 32);
    v71(v70, v60, v66);
    v71(v69 + v67, v62, v66);
    uint64_t v72 = (void (**)(void **))(v69 + v68);
    uint64_t v73 = v177;
    *uint64_t v72 = v176;
    v72[1] = v73;
    uint64_t v184 = sub_10039B62C;
    uint64_t v185 = v69;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v181 = 1107296256LL;
    uint64_t v182 = sub_1001C31E8;
    uint64_t v183 = &unk_1009552F8;
    uint64_t v74 = _Block_copy(&aBlock);
    id v75 = v59;
    uint64_t v76 = v74;
    id v77 = v75;
    uint64_t v78 = swift_retain();
    uint64_t v79 = v164;
    static DispatchQoS.unspecified.getter(v78);
    uint64_t v179 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v80 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v81 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v82 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    os_log_t v83 = v166;
    uint64_t v84 = v81;
    uint64_t v85 = v169;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v84, v82, v169, v80);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v79, v83, v76);
    _Block_release(v76);
    (*(void (**)(_BYTE *, uint64_t))(v167 + 8))(v83, v85);
    (*(void (**)(_BYTE *, uint64_t))(v165 + 8))(v79, v168);
    return swift_release();
  }

  sub_10002218C((uint64_t)v56, (uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
  uint64_t v86 = v157;
  sub_1004E8CAC((uint64_t)v22, (uint64_t)v157);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v86, 1LL, v158) != 1)
  {
    uint64_t v163 = v22;
    uint64_t v99 = v162;
    sub_10002218C((uint64_t)v86, (uint64_t)v162, type metadata accessor for OwnedBeaconRecord);
    sub_10001DC4C((uint64_t)v99, (uint64_t)v154, type metadata accessor for OwnedBeaconRecord);
    char v100 = v150;
    uint64_t v101 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v174)(v150, v175, v23);
    uint64_t v102 = (os_log_s *)Logger.logObject.getter(v101);
    os_log_type_t v103 = static os_log_type_t.default.getter(v102);
    int v104 = v103;
    if (os_log_type_enabled(v102, v103))
    {
      uint64_t v105 = swift_slowAlloc(32LL, -1LL);
      uint64_t v106 = (void **)swift_slowAlloc(64LL, -1LL);
      uint64_t v173 = (uint64_t)v106;
      *(_DWORD *)uint64_t v105 = 141558531;
      uint64_t v179 = 1752392040LL;
      __int128 aBlock = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v105 + 4, v105 + 12);
      *(_WORD *)(v105 + 12) = 2081;
      uint64_t v151 = v10;
      uint64_t v107 = v154;
      LODWORD(v172) = v104;
      uint64_t v108 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      os_log_t v171 = v102;
      uint64_t v109 = v108;
      uint64_t v110 = dispatch thunk of CustomStringConvertible.description.getter(v23, v108);
      uint64_t v179 = sub_1003F11D4(v110, v111, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v105 + 14, v105 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v107, type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v105 + 22) = 2082;
      uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter(v23, v109);
      uint64_t v179 = sub_1003F11D4(v112, v113, (uint64_t *)&aBlock);
      uint64_t v10 = v151;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v105 + 24, v105 + 32);
      swift_bridgeObjectRelease();
      v51(v100, v23);
      uint64_t v102 = v171;
      _os_log_impl( (void *)&_mh_execute_header,  v171,  (os_log_type_t)v172,  "Connect to primary beacon %{private,mask.hash}s commandId: %{public}s.",  (uint8_t *)v105,  0x20u);
      uint64_t v114 = v173;
      swift_arrayDestroy(v173, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1LL, -1LL);
      swift_slowDealloc(v105, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v154, type metadata accessor for OwnedBeaconRecord);
      v51(v100, v23);
    }

    uint64_t v121 = v178;
    uint64_t v173 = *(void *)&v178[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
    uint64_t v122 = v153;
    sub_10001DC4C((uint64_t)v162, (uint64_t)v153, type metadata accessor for OwnedBeaconRecord);
    char v123 = v160;
    v174(v160, v175, v23);
    uint64_t v124 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v125 = v23;
    uint64_t v126 = (v124 + 24) & ~v124;
    uint64_t v127 = v161;
    uint64_t v128 = *(unsigned __int8 *)(v161 + 80);
    uint64_t v129 = (v152 + v128 + v126) & ~v128;
    unint64_t v130 = (v159 + v129 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v131 = swift_allocObject(&unk_100955330, v130 + 16, v124 | v128 | 7);
    *(void *)(v131 + swift_weakDestroy(v0 + 16) = v121;
    sub_10002218C((uint64_t)v122, v131 + v126, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v127 + 32))(v131 + v129, v123, v125);
    uint64_t v132 = (void (**)(void **))(v131 + v130);
    uint64_t v133 = v177;
    *uint64_t v132 = v176;
    v132[1] = v133;
    uint64_t v184 = sub_10039B9B8;
    uint64_t v185 = v131;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v181 = 1107296256LL;
    uint64_t v182 = sub_1001C31E8;
    uint64_t v183 = &unk_100955348;
    uint64_t v134 = _Block_copy(&aBlock);
    uint64_t v135 = v121;
    uint64_t v136 = v134;
    id v137 = v135;
    uint64_t v138 = swift_retain();
    int64_t v139 = v164;
    static DispatchQoS.unspecified.getter(v138);
    uint64_t v179 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v140 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v141 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v142 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    int64_t v143 = v166;
    uint64_t v144 = v141;
    uint64_t v145 = v169;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v144, v142, v169, v140);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v139, v143, v136);
    _Block_release(v136);
    (*(void (**)(_BYTE *, uint64_t))(v167 + 8))(v143, v145);
    (*(void (**)(_BYTE *, uint64_t))(v165 + 8))(v139, v168);
    sub_100018C68((uint64_t)v162, type metadata accessor for OwnedBeaconRecord);
    sub_100018C68((uint64_t)v163, type metadata accessor for OwnedBeaconGroup);
    return swift_release();
  }

  uint64_t v87 = v23;
  sub_100015794((uint64_t)v86, (uint64_t *)&unk_1009A9C30);
  uint64_t v88 = v149;
  uint64_t v89 = sub_10001DC4C((uint64_t)v22, (uint64_t)v149, type metadata accessor for OwnedBeaconGroup);
  uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
  os_log_type_t v91 = static os_log_type_t.error.getter(v90);
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v92 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v93 = (void **)swift_slowAlloc(32LL, -1LL);
    uint64_t v163 = v22;
    uint64_t v94 = v93;
    __int128 aBlock = v93;
    *(_DWORD *)uint64_t v92 = 136446210;
    uint64_t v95 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter(v87, v95);
    uint64_t v179 = sub_1003F11D4(v96, v97, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v92 + 4, v92 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v88, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl( (void *)&_mh_execute_header,  v90,  v91,  "No primary beacon for group %{public}s. Cannot connect!",  v92,  0xCu);
    swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v98 = v94;
    uint64_t v22 = v163;
    swift_slowDealloc(v98, -1LL, -1LL);
    swift_slowDealloc(v92, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v88, type metadata accessor for OwnedBeaconGroup);
  }

  type metadata accessor for CommandError(0LL);
  uint64_t v116 = v115;
  uint64_t v179 = 3LL;
  unint64_t v117 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v118 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v179, v117, v116, v118);
  uint64_t v119 = aBlock;
  v176(aBlock);

  return sub_100018C68((uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_100375520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord(0LL);
  return sub_100285C1C(a2 + *(int *)(v9 + 20), a3, a4, a5);
}

uint64_t sub_100375594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v42 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v40 = *(void *)&v4[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)&v37 - v16, a1, v11);
  v18(v15, a2, v11);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = (v19 + 24) & ~v19;
  uint64_t v21 = (v13 + v19 + v20) & ~v19;
  unint64_t v22 = (v13 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v23 = swift_allocObject(&unk_100955240, v22 + 16, v19 | 7);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = v4;
  uint64_t v24 = v23 + v20;
  uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  v25(v24, v17, v11);
  v25(v23 + v21, v15, v11);
  uint64_t v26 = (void *)(v23 + v22);
  uint64_t v27 = v39;
  *uint64_t v26 = v38;
  v26[1] = v27;
  aBlock[4] = sub_10039B3C8;
  void aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100955258;
  uint64_t v28 = _Block_copy(aBlock);
  uint64_t v29 = v4;
  uint64_t v30 = swift_retain();
  static DispatchQoS.unspecified.getter(v30);
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v31 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v33 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v35 = v41;
  uint64_t v34 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v32, v33, v42, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v35, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v34);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
  return swift_release();
}

uint64_t sub_100375870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v27[1] = a5;
  uint64_t v28 = a3;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v27 - v14;
  uint64_t v16 = *sub_100012ED8( (void *)(a1 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager),  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager + 24));
  uint64_t v17 = swift_allocObject(&unk_100955290, 32LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  uint64_t v29 = type metadata accessor for Transaction(0LL);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18(v15, a2, v9);
  v18(v13, v28, v9);
  uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = (v19 + 24) & ~v19;
  unint64_t v21 = (v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = (v19 + v21 + 16) & ~v19;
  uint64_t v23 = swift_allocObject(&unk_1009552B8, v22 + v11, v19 | 7);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = v16;
  uint64_t v24 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v24(v23 + v20, v15, v9);
  uint64_t v25 = (uint64_t (**)(uint64_t))(v23 + v21);
  *uint64_t v25 = sub_100286A4C;
  v25[1] = (uint64_t (*)(uint64_t))v17;
  v24(v23 + v22, v13, v9);
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("OwnerCommandManager.disconnect", 30LL, 2LL, &unk_1009AAF30, v23);
  swift_release();
  return swift_release();
}

uint64_t sub_100375A3C( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, double a6)
{
  uint64_t v193 = a4;
  uint64_t v194 = a5;
  uint64_t v196 = a3;
  uint64_t v191 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v188 = *(void *)(v191 - 8);
  uint64_t v10 = __chkstk_darwin(v191);
  NSString v197 = (char *)v170 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v186 = (uint64_t)v170 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  os_log_type_t v189 = (char *)v170 - v15;
  __chkstk_darwin(v14);
  id v198 = (char *)v170 - v16;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v192 = (char *)v170 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v177 = (uint64_t)v170 - v21;
  __chkstk_darwin(v20);
  uint64_t v184 = (uint64_t)v170 - v22;
  uint64_t v23 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v23);
  uint64_t v180 = (uint64_t)v170 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v187 = type metadata accessor for UUID(0LL);
  unint64_t v195 = *(void *)(v187 - 8);
  uint64_t v25 = __chkstk_darwin(v187);
  uint64_t v178 = (char *)v170 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  BOOL v190 = (char *)v170 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v176 = (char *)v170 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v183 = (uint64_t)v170 - v32;
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)v170 - v33;
  uint64_t v35 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)v170 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v179 = (uint64_t)v170 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v44 = (char *)v170 - v43;
  __chkstk_darwin(v42);
  uint64_t v46 = (char *)v170 - v45;
  sub_10050F124(a2, (uint64_t)v37);
  uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  unint64_t v185 = v38;
  if (v47(v37, 1LL, v38) == 1)
  {
    sub_100015794((uint64_t)v37, &qword_1009AA830);
    return sub_100376F5C(a1, a2, v196, (uint64_t)v193, v194, a6);
  }

  id v175 = v6;
  uint64_t v174 = a2;
  uint64_t v182 = a1;
  sub_10002218C((uint64_t)v37, (uint64_t)v46, type metadata accessor for OwnedBeaconGroup);
  if (qword_10099B330 != -1) {
    goto LABEL_77;
  }
  while (1)
  {
    uint64_t v49 = type metadata accessor for Logger(0LL);
    uint64_t v50 = sub_10000A720(v49, (uint64_t)qword_100A2A748);
    uint64_t v181 = v46;
    sub_10001DC4C((uint64_t)v46, (uint64_t)v44, type metadata accessor for OwnedBeaconGroup);
    unint64_t v51 = v195;
    uint64_t v52 = v187;
    uint64_t v173 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v195 + 16);
    uint64_t v53 = v173(v34, v182, v187);
    unint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.default.getter(v54);
    BOOL v56 = os_log_type_enabled(v54, v55);
    uint64_t v57 = (uint64_t)v198;
    if (v56)
    {
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      uint64_t v171 = swift_slowAlloc(96LL, -1LL);
      v199[0] = v171;
      *(_DWORD *)uint64_t v58 = 136446722;
      uint64_t v59 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v52, v59);
      uint64_t v200 = (void *)sub_1003F11D4(v60, v61, v199);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v44, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v58 + 12) = 2080;
      unint64_t v62 = 0xE800000000000000LL;
      uint64_t v63 = 0x746C75616665642ELL;
      switch(v196)
      {
        case 0LL:
          break;
        case 1LL:
          uint64_t v63 = 0x676E69676E61722ELL;
          break;
        case 2LL:
          unint64_t v62 = 0xE900000000000067LL;
          goto LABEL_13;
        case 3LL:
          unint64_t v62 = 0x8000000100857490LL;
          uint64_t v63 = 0xD000000000000010LL;
          break;
        case 4LL:
          unint64_t v62 = 0xEF64656D7269666ELL;
          uint64_t v63 = 0x6F4365756575712ELL;
          break;
        case 5LL:
          unint64_t v62 = 0xEE0074726F685367LL;
LABEL_13:
          uint64_t v63 = 0x6E696B636172742ELL;
          break;
        default:
          unint64_t v62 = 0xE700000000000000LL;
          uint64_t v63 = 0x6E776F6E6B6E75LL;
          break;
      }

      uint64_t v200 = (void *)sub_1003F11D4(v63, v62, v199);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 22) = 2082;
      uint64_t v65 = v187;
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter(v187, v59);
      uint64_t v200 = (void *)sub_1003F11D4(v66, v67, v199);
      uint64_t v52 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v58 + 24, v58 + 32);
      swift_bridgeObjectRelease();
      uint64_t v172 = *(void (**)(char *, uint64_t))(v195 + 8);
      v172(v34, v65);
      _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "Play sound for group %{public}s with context %s. CommandId %{public}s",  (uint8_t *)v58,  0x20u);
      uint64_t v68 = v171;
      swift_arrayDestroy(v171, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1LL, -1LL);
      swift_slowDealloc(v58, -1LL, -1LL);

      uint64_t v64 = v175;
      uint64_t v57 = (uint64_t)v198;
    }

    else
    {
      sub_100018C68((uint64_t)v44, type metadata accessor for OwnedBeaconGroup);
      uint64_t v172 = *(void (**)(char *, uint64_t))(v51 + 8);
      v172(v34, v52);

      uint64_t v64 = v175;
    }

    uint64_t v69 = (uint64_t)v181;
    sub_1001CC778();
    uint64_t v71 = v70;
    id v72 = v64;
    sub_100398690(v71, (uint64_t)v72);
    char v74 = v73;
    swift_bridgeObjectRelease();

    uint64_t v34 = v197;
    if ((v74 & 1) == 0)
    {
      uint64_t v87 = v179;
      uint64_t v88 = sub_10001DC4C(v69, v179, type metadata accessor for OwnedBeaconGroup);
      uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
      os_log_type_t v90 = static os_log_type_t.default.getter(v89);
      if (os_log_type_enabled(v89, v90))
      {
        os_log_type_t v91 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v92 = swift_slowAlloc(32LL, -1LL);
        v199[0] = v92;
        *(_DWORD *)os_log_type_t v91 = 136446210;
        uint64_t v93 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter(v52, v93);
        uint64_t v200 = (void *)sub_1003F11D4(v94, v95, v199);
        uint64_t v69 = (uint64_t)v181;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v91 + 4, v91 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v87, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "Queue not needed for group %{public}s", v91, 0xCu);
        swift_arrayDestroy(v92, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v92, -1LL, -1LL);
        swift_slowDealloc(v91, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v87, type metadata accessor for OwnedBeaconGroup);
      }

      sub_100378714(v182, v69, v196, (uint64_t)v193, v194, a6);
      return sub_100018C68(v69, type metadata accessor for OwnedBeaconGroup);
    }

    sub_1001CC778();
    uint64_t v75 = v180;
    sub_1006F2C58(v76, v180);
    swift_bridgeObjectRelease();
    unint64_t v77 = v195;
    id v175 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v183, v75, v52);
    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    uint64_t v96 = qword_100A2A6C8;
    unint64_t v97 = objc_autoreleasePoolPush();
    uint64_t v98 = sub_100004AEC((uint64_t *)&unk_1009AF790);
    OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v96, v98);
    uint64_t v99 = v199[0];
    uint64_t v100 = *(void *)(v199[0] + 16);
    uint64_t v101 = (uint64_t)v189;
    v170[1] = v50;
    if (!v100)
    {
      swift_bridgeObjectRelease();
      uint64_t v108 = _swiftEmptyArrayStorage;
      uint64_t v46 = v190;
      uint64_t v44 = v192;
      goto LABEL_55;
    }

    unint64_t v102 = sub_10030D124(v183);
    uint64_t v44 = v192;
    if ((v103 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v108 = _swiftEmptyArrayStorage;
      uint64_t v46 = v190;
      goto LABEL_55;
    }

    uint64_t v104 = *(void *)(*(void *)(v99 + 56) + 8 * v102);
    swift_bridgeObjectRetain(v104);
    swift_bridgeObjectRelease();
    uint64_t v105 = sub_1002FE5F8(v104);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v105);
    uint64_t v46 = v106;
    swift_release();
    uint64_t v107 = v46;
    uint64_t v108 = _swiftEmptyArrayStorage;
    uint64_t v200 = _swiftEmptyArrayStorage;
    uint64_t v179 = *((void *)v46 + 2);
    if (!v179)
    {
      uint64_t v46 = v190;
LABEL_54:
      swift_release();
LABEL_55:
      objc_autoreleasePoolPop(v97);
      uint64_t v133 = v184;
      sub_1000F0A44((uint64_t)v108, v184);
      swift_bridgeObjectRelease();
      uint64_t v134 = v177;
      sub_10001581C(v133, v177, (uint64_t *)&unk_1009A5990);
      uint64_t v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48);
      uint64_t v136 = v191;
      if (v135(v134, 1LL, v191) == 1)
      {
        sub_100015794(v134, (uint64_t *)&unk_1009A5990);
      }

      else
      {
        sub_10002218C(v134, v57, type metadata accessor for BeaconObservation);
        uint64_t v137 = sub_10001DC4C(v57, (uint64_t)v34, type metadata accessor for BeaconObservation);
        uint64_t v138 = (os_log_s *)Logger.logObject.getter(v137);
        os_log_type_t v139 = static os_log_type_t.debug.getter(v138);
        if (os_log_type_enabled(v138, v139))
        {
          uint64_t v140 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v141 = swift_slowAlloc(32LL, -1LL);
          v199[0] = v141;
          *(_DWORD *)uint64_t v140 = 136315138;
          uint64_t v142 = sub_10042E164();
          uint64_t v200 = (void *)sub_1003F11D4(v142, v143, v199);
          uint64_t v69 = (uint64_t)v181;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v140 + 4, v140 + 12);
          swift_bridgeObjectRelease();
          sub_100018C68((uint64_t)v34, type metadata accessor for BeaconObservation);
          _os_log_impl((void *)&_mh_execute_header, v138, v139, "Found observation %s", v140, 0xCu);
          swift_arrayDestroy(v141, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v141, -1LL, -1LL);
          uint64_t v144 = v140;
          uint64_t v46 = v190;
          swift_slowDealloc(v144, -1LL, -1LL);
        }

        else
        {

          sub_100018C68((uint64_t)v34, type metadata accessor for BeaconObservation);
        }

        sub_100018C68(v57, type metadata accessor for BeaconObservation);
        uint64_t v136 = v191;
        uint64_t v44 = v192;
      }

      sub_10001581C(v184, (uint64_t)v44, (uint64_t *)&unk_1009A5990);
      unsigned int v145 = v135((uint64_t)v44, 1LL, v136);
      uint64_t v146 = v174;
      if (v145 == 1)
      {
        sub_100015794((uint64_t)v44, (uint64_t *)&unk_1009A5990);
        uint64_t v147 = v187;
        goto LABEL_66;
      }

      int v148 = v44[*(int *)(v136 + 24)];
      sub_100018C68((uint64_t)v44, type metadata accessor for BeaconObservation);
      uint64_t v147 = v187;
      if (v148 == 23)
      {
        uint64_t v149 = v173(v46, v146, v187);
        uint64_t v150 = (os_log_s *)Logger.logObject.getter(v149);
        os_log_type_t v151 = static os_log_type_t.error.getter(v150);
        if (os_log_type_enabled(v150, v151))
        {
          uint64_t v152 = v46;
          uint64_t v153 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v154 = swift_slowAlloc(32LL, -1LL);
          v199[0] = v154;
          *(_DWORD *)uint64_t v153 = 136315138;
          uint64_t v155 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v156 = dispatch thunk of CustomStringConvertible.description.getter(v147, v155);
          uint64_t v200 = (void *)sub_1003F11D4(v156, v157, v199);
          uint64_t v69 = (uint64_t)v181;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v153 + 4, v153 + 12);
          swift_bridgeObjectRelease();
          uint64_t v158 = (void (*)(uint64_t, uint64_t))v172;
          v172(v152, v147);
          os_log_type_t v159 = v151;
          uint64_t v160 = v158;
          _os_log_impl( (void *)&_mh_execute_header,  v150,  v159,  "Play Sound has already been queued for groupIdentifier: %s",  v153,  0xCu);
          swift_arrayDestroy(v154, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v154, -1LL, -1LL);
          swift_slowDealloc(v153, -1LL, -1LL);
        }

        else
        {
          uint64_t v160 = (void (*)(uint64_t, uint64_t))v172;
          v172(v46, v147);
        }

        type metadata accessor for CommandError(0LL);
        uint64_t v164 = v166;
        uint64_t v165 = 11LL;
LABEL_73:
        uint64_t v200 = (void *)v165;
        unint64_t v167 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v168 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
        _BridgedStoredNSError.init(_:userInfo:)(v199, &v200, v167, v164, v168);
        uint64_t v169 = (void *)v199[0];
        v193(v199[0]);
      }

      else
      {
LABEL_66:
        uint64_t v161 = (uint64_t)v176;
        v173(v176, v146, v147);
        if (v196 == 4)
        {
          uint64_t v160 = (void (*)(uint64_t, uint64_t))v172;
          v172((char *)v161, v147);
          sub_100399CEC(v146);
        }

        else
        {
          BOOL v162 = sub_1003998B0(v161);
          uint64_t v160 = (void (*)(uint64_t, uint64_t))v172;
          v172((char *)v161, v147);
          if (v162)
          {
            type metadata accessor for CommandError(0LL);
            uint64_t v164 = v163;
            uint64_t v165 = 10LL;
            goto LABEL_73;
          }
        }

        sub_100378714(v182, v69, v196, (uint64_t)v193, v194, a6);
      }

      sub_100015794(v184, (uint64_t *)&unk_1009A5990);
      v160(v183, v147);
      return sub_100018C68(v69, type metadata accessor for OwnedBeaconGroup);
    }

    uint64_t v171 = (uint64_t)v97;
    unint64_t v109 = 0LL;
    uint64_t v178 = v46;
LABEL_29:
    if (v109 < *((void *)v107 + 2))
    {
      unint64_t v110 = (*(unsigned __int8 *)(v188 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80);
      uint64_t v111 = *(void *)(v188 + 72);
      unint64_t v195 = v109 + 1;
      unint64_t v185 = v110;
      uint64_t v180 = v111;
      sub_10001DC4C((uint64_t)&v107[v110 + v111 * v109], v101, type metadata accessor for BeaconObservation);
      sub_1001D6134();
      uint64_t v112 = Set.init(minimumCapacity:)(7LL);
      uint64_t v113 = 0LL;
      uint64_t v114 = v112 + 56;
      while (1)
      {
        uint64_t v115 = *((char *)&off_100933B20 + v113++ + 32);
        Hasher.init(_seed:)(v199, *(void *)(v112 + 40));
        Swift::UInt v116 = qword_1007FDA00[v115];
        Hasher._combine(_:)(v116);
        Swift::Int v117 = Hasher._finalize()();
        uint64_t v118 = -1LL << *(_BYTE *)(v112 + 32);
        unint64_t v119 = v117 & ~v118;
        if (((*(void *)(v114 + ((v119 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v119) & 1) == 0) {
          goto LABEL_38;
        }
        uint64_t v120 = *(void *)(v112 + 48);
        if (qword_1007FDA00[*(char *)(v120 + v119)] == v116)
        {
LABEL_31:
          if (v113 == 7) {
            goto LABEL_40;
          }
        }

        else
        {
          uint64_t v121 = ~v118;
          while (1)
          {
            unint64_t v119 = (v119 + 1) & v121;
            if (((*(void *)(v114 + ((v119 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v119) & 1) == 0) {
              break;
            }
          }

uint64_t sub_100376F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v214 = a5;
  uint64_t v213 = a4;
  uint64_t v216 = a3;
  uint64_t v211 = a1;
  uint64_t v201 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v198 = *(void *)(v201 - 8);
  __chkstk_darwin(v201);
  NSString v197 = (char *)&v182 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v202 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v200 = *(void *)(v202 - 8);
  __chkstk_darwin(v202);
  uint64_t v199 = (char *)&v182 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v196 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v195 = *(void *)(v196 - 8);
  __chkstk_darwin(v196);
  uint64_t v194 = (char *)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v210 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v182 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v207 = (uint64_t)&v182 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v215 = (uint64_t)&v182 - v18;
  __chkstk_darwin(v17);
  uint64_t v193 = (char *)&v182 - v19;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v191 = (uint64_t)&v182 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v190 = (uint64_t)&v182 - v24;
  __chkstk_darwin(v23);
  uint64_t v203 = (uint64_t)&v182 - v25;
  uint64_t v26 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v182 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for UUID(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v192 = (char *)&v182 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v188 = (char *)&v182 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  os_log_type_t v189 = (char *)&v182 - v36;
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v182 - v37;
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v39 = type metadata accessor for Logger(0LL);
  uint64_t v40 = sub_10000A720(v39, (uint64_t)qword_100A2A748);
  NSString v204 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 16);
  uint64_t v41 = v204(v38, a2, v29);
  uint64_t v206 = v40;
  uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v43 = static os_log_type_t.default.getter(v42);
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v205 = v29;
  if (v44)
  {
    os_log_type_t v212 = v14;
    uint64_t v209 = v11;
    uint64_t v208 = a2;
    uint64_t v45 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = (void **)swift_slowAlloc(64LL, -1LL);
    __int128 aBlock = v46;
    *(_DWORD *)uint64_t v45 = 136315650;
    uint64_t v47 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v29, v47);
    uint64_t v223 = sub_1003F11D4(v48, v49, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease();
    uint64_t v50 = *(void (**)(char *, uint64_t))(v30 + 8);
    v50(v38, v29);
    *(_WORD *)(v45 + 12) = 2080;
    uint64_t v51 = 0x746C75616665642ELL;
    unint64_t v52 = 0xE800000000000000LL;
    switch(v216)
    {
      case 0LL:
        break;
      case 1LL:
        uint64_t v51 = 0x676E69676E61722ELL;
        break;
      case 2LL:
        uint64_t v51 = 0x6E696B636172742ELL;
        unint64_t v52 = 0xE900000000000067LL;
        break;
      case 3LL:
        unint64_t v52 = 0x8000000100857490LL;
        uint64_t v51 = 0xD000000000000010LL;
        break;
      case 4LL:
        unint64_t v52 = 0xEF64656D7269666ELL;
        uint64_t v51 = 0x6F4365756575712ELL;
        break;
      case 5LL:
        unint64_t v52 = 0xEE0074726F685367LL;
        uint64_t v51 = 0x6E696B636172742ELL;
        break;
      default:
        unint64_t v52 = 0xE700000000000000LL;
        uint64_t v51 = 0x6E776F6E6B6E75LL;
        break;
    }

    uint64_t v223 = sub_1003F11D4(v51, v52, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 22) = 2048;
    uint64_t v223 = *(void *)&a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v45 + 24, v45 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "playSoundSingle %s context %s timeout %f",  (uint8_t *)v45,  0x20u);
    swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);

    a2 = v208;
    uint64_t v11 = v209;
    uint64_t v14 = v212;
  }

  else
  {
    uint64_t v50 = *(void (**)(char *, uint64_t))(v30 + 8);
    v50(v38, v29);
  }

  sub_100504C28(a2, (uint64_t)&aBlock);
  uint64_t v53 = v220;
  sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
  if (v53)
  {
    if ((sub_10037E0F4(a2) & 1) != 0) {
      return sub_100389C70(v211, a2, v216, v213, v214, a6);
    }
    uint64_t v68 = v211;
    uint64_t v69 = a2;
    uint64_t v70 = v216;
    return sub_10038A344(v68, a6, v69, v70, v213, v214);
  }

  sub_10050BDEC(a2, (uint64_t)v28);
  uint64_t v55 = type metadata accessor for WildModeAssociationRecord(0LL);
  int v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48LL))(v28, 1LL, v55);
  uint64_t v57 = sub_100015794((uint64_t)v28, &qword_1009A4890);
  if (v56 == 1)
  {
    uint64_t v58 = v192;
    uint64_t v59 = v205;
    uint64_t v60 = v204(v192, a2, v205);
    unint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.error.getter(v61);
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v64 = (void **)swift_slowAlloc(32LL, -1LL);
      __int128 aBlock = v64;
      *(_DWORD *)uint64_t v63 = 136315138;
      uint64_t v65 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter(v59, v65);
      uint64_t v223 = sub_1003F11D4(v66, v67, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease();
      v50(v58, v59);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Invalid beacon %s", v63, 0xCu);
      swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    else
    {
      v50(v58, v59);
    }

    sub_100004AB0();
    uint64_t v106 = v195;
    uint64_t v107 = v194;
    uint64_t v108 = v196;
    (*(void (**)(char *, void, uint64_t))(v195 + 104))( v194,  enum case for DispatchQoS.QoSClass.default(_:),  v196);
    unint64_t v109 = (void *)static OS_dispatch_queue.global(qos:)(v107);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v108);
    uint64_t v110 = swift_allocObject(&unk_100954DB8, 32LL, 7LL);
    uint64_t v111 = v214;
    *(void *)(v110 + swift_weakDestroy(v0 + 16) = v213;
    *(void *)(v110 + 24) = v111;
    uint64_t v221 = sub_10039AB40;
    uint64_t v222 = v110;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v218 = 1107296256LL;
    uint64_t v112 = &unk_100954DD0;
LABEL_82:
    int v219 = sub_1001C31E8;
    int v220 = v112;
    uint64_t v173 = _Block_copy(&aBlock);
    uint64_t v174 = swift_retain();
    id v175 = v199;
    static DispatchQoS.unspecified.getter(v174);
    uint64_t v223 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v176 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v177 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v178 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v179 = v197;
    uint64_t v180 = v177;
    uint64_t v181 = v201;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v223, v180, v178, v201, v176);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v175, v179, v173);
    _Block_release(v173);

    (*(void (**)(char *, uint64_t))(v198 + 8))(v179, v181);
    (*(void (**)(char *, uint64_t))(v200 + 8))(v175, v202);
    return swift_release();
  }

  uint64_t v71 = v193;
  if (v216 != 2)
  {
    if (v216 == 5)
    {
      uint64_t v68 = v211;
      uint64_t v69 = a2;
      uint64_t v70 = 5LL;
      return sub_10038A344(v68, a6, v69, v70, v213, v214);
    }

    if (v216 != 4)
    {
      uint64_t v113 = (os_log_s *)Logger.logObject.getter(v57);
      os_log_type_t v114 = static os_log_type_t.error.getter(v113);
      if (os_log_type_enabled(v113, v114))
      {
        uint64_t v115 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        Swift::UInt v116 = (void **)swift_slowAlloc(32LL, -1LL);
        __int128 aBlock = v116;
        *(_DWORD *)uint64_t v115 = 136315138;
        uint64_t v117 = 0x746C75616665642ELL;
        unint64_t v118 = 0xE800000000000000LL;
        switch(v216)
        {
          case 0LL:
            break;
          case 1LL:
            uint64_t v117 = 0x676E69676E61722ELL;
            break;
          case 2LL:
            uint64_t v117 = 0x6E696B636172742ELL;
            unint64_t v118 = 0xE900000000000067LL;
            break;
          case 3LL:
            unint64_t v118 = 0x8000000100857490LL;
            uint64_t v117 = 0xD000000000000010LL;
            break;
          default:
            unint64_t v118 = 0xE700000000000000LL;
            uint64_t v117 = 0x6E776F6E6B6E75LL;
            break;
        }

        uint64_t v223 = sub_1003F11D4(v117, v118, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v115 + 4, v115 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v113, v114, "Invalid context for UT play sound %s", v115, 0xCu);
        swift_arrayDestroy(v116, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v116, -1LL, -1LL);
        swift_slowDealloc(v115, -1LL, -1LL);
      }

      sub_100004AB0();
      uint64_t v168 = v195;
      uint64_t v169 = v194;
      uint64_t v170 = v196;
      (*(void (**)(char *, void, uint64_t))(v195 + 104))( v194,  enum case for DispatchQoS.QoSClass.default(_:),  v196);
      unint64_t v109 = (void *)static OS_dispatch_queue.global(qos:)(v169);
      (*(void (**)(char *, uint64_t))(v168 + 8))(v169, v170);
      uint64_t v171 = swift_allocObject(&unk_100954E08, 32LL, 7LL);
      uint64_t v172 = v214;
      *(void *)(v171 + swift_weakDestroy(v0 + 16) = v213;
      *(void *)(v171 + 24) = v172;
      uint64_t v221 = sub_10039BBA8;
      uint64_t v222 = v171;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v218 = 1107296256LL;
      uint64_t v112 = &unk_100954E20;
      goto LABEL_82;
    }
  }

  os_log_type_t v212 = v14;
  if (qword_10099B300 != -1) {
    goto LABEL_85;
  }
LABEL_25:
  uint64_t v72 = qword_100A2A6C8;
  char v73 = objc_autoreleasePoolPush();
  uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v72, v74);
  uint64_t v75 = aBlock;
  uint64_t v76 = aBlock[2];
  unint64_t v185 = v50;
  if (!v76)
  {
    swift_bridgeObjectRelease();
    uint64_t v85 = _swiftEmptyArrayStorage;
    uint64_t v78 = (uint64_t)v212;
    goto LABEL_58;
  }

  unint64_t v77 = sub_10030D124(a2);
  uint64_t v78 = (uint64_t)v212;
  if ((v79 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v85 = _swiftEmptyArrayStorage;
    goto LABEL_58;
  }

  uint64_t v80 = *((void *)v75[7] + v77);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRelease();
  os_log_type_t v81 = sub_1002FE5F8(v80);
  swift_bridgeObjectRelease();
  sub_1002FFE1C((uint64_t)v81);
  uint64_t v83 = v82;
  swift_release();
  uint64_t v84 = v83;
  uint64_t v85 = _swiftEmptyArrayStorage;
  uint64_t v223 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v184 = *(char **)(v84 + 16);
  if (v184)
  {
    uint64_t v182 = v73;
    unint64_t v86 = 0LL;
    uint64_t v71 = qword_1007FDA00;
    uint64_t v208 = a2;
    uint64_t v209 = v11;
    uint64_t v183 = v84;
    while (1)
    {
      if ((unint64_t)v86 >= *(void *)(v84 + 16))
      {
        __break(1u);
LABEL_85:
        swift_once(&qword_10099B300, sub_1003459EC);
        goto LABEL_25;
      }

      unint64_t v87 = (*(unsigned __int8 *)(v210 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v210 + 80);
      uint64_t v88 = *(void *)(v210 + 72);
      uint64_t v192 = v86 + 1;
      unint64_t v187 = v87;
      uint64_t v186 = v88;
      sub_10001DC4C(v84 + v87 + v88 * (void)v86, v215, type metadata accessor for BeaconObservation);
      sub_1001D6134();
      uint64_t v89 = Set.init(minimumCapacity:)(7LL);
      uint64_t v90 = 0LL;
      for (uint64_t i = v89 + 56; ; uint64_t i = v89 + 56)
      {
        while (1)
        {
          uint64_t v92 = *((char *)&off_100933AF8 + v90++ + 32);
          Hasher.init(_seed:)(&aBlock, *(void *)(v89 + 40));
          Swift::UInt v93 = qword_1007FDA00[v92];
          Hasher._combine(_:)(v93);
          Swift::Int v94 = Hasher._finalize()();
          uint64_t v95 = -1LL << *(_BYTE *)(v89 + 32);
          unint64_t v96 = v94 & ~v95;
          if (((*(void *)(i + ((v96 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v96) & 1) == 0) {
            goto LABEL_40;
          }
          uint64_t v97 = *(void *)(v89 + 48);
LABEL_33:
          if (v90 == 7) {
            goto LABEL_42;
          }
        }

        uint64_t v98 = ~v95;
        while (1)
        {
          unint64_t v96 = (v96 + 1) & v98;
          if (((*(void *)(i + ((v96 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v96) & 1) == 0) {
            break;
          }
        }

void sub_100378714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v7 = v6;
  uint64_t v123 = a5;
  uint64_t v122 = a4;
  uint64_t v121 = a3;
  uint64_t v120 = a1;
  uint64_t v129 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v128 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  unint64_t v127 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v125 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v124 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v119 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v118 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v117 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v132 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v133 = v14;
  uint64_t v134 = (uint64_t)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v15);
  int v135 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v137 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v137);
  uint64_t v136 = (uint64_t)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v153 = type metadata accessor for Date(0LL);
  uint64_t v152 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v143 = (char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v149 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v147 = (char *)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v156 = (char *)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v116 - v24;
  uint64_t v26 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v26);
  uint64_t v150 = (char *)&v116 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001CC778();
  uint64_t v29 = v28;
  uint64_t v30 = v7;
  uint64_t v31 = 0LL;
  sub_100398690(v29, (uint64_t)v30);
  char v33 = v32;
  swift_bridgeObjectRelease();
  uint64_t v131 = v30;

  uint64_t v34 = v25;
  if ((v33 & 1) != 0) {
    int v35 = 23;
  }
  else {
    int v35 = 24;
  }
  int v145 = v35;
  uint64_t v130 = a2;
  sub_1001CC778();
  uint64_t v37 = *(void *)(v36 + 56);
  uint64_t v140 = v36 + 56;
  uint64_t v38 = 1LL << *(_BYTE *)(v36 + 32);
  uint64_t v39 = -1LL;
  if (v38 < 64) {
    uint64_t v39 = ~(-1LL << v38);
  }
  unint64_t v40 = v39 & v37;
  int64_t v141 = (unint64_t)(v38 + 63) >> 6;
  unsigned int v142 = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
  uint64_t v151 = v36;
  swift_bridgeObjectRetain(v36);
  int64_t v41 = 0LL;
  os_log_type_t v139 = (char *)&type metadata for () + 8;
  __int128 v144 = xmmword_1007E67D0;
  BOOL v146 = v25;
  while (1)
  {
    if (v40)
    {
      unint64_t v50 = __clz(__rbit64(v40));
      uint64_t v51 = (v40 - 1) & v40;
      unint64_t v52 = v50 | (v41 << 6);
      uint64_t v53 = v152;
      unint64_t v54 = v150;
      goto LABEL_26;
    }

    BOOL v55 = __OFADD__(v41++, 1LL);
    uint64_t v53 = v152;
    if (v55)
    {
      __break(1u);
      goto LABEL_62;
    }

    unint64_t v54 = v150;
    if (v41 >= v141) {
      goto LABEL_58;
    }
    unint64_t v56 = *(void *)(v140 + 8 * v41);
    if (!v56) {
      break;
    }
LABEL_25:
    uint64_t v51 = (v56 - 1) & v56;
    unint64_t v52 = __clz(__rbit64(v56)) + (v41 << 6);
LABEL_26:
    uint64_t v58 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
    v58(v54, *(void *)(v151 + 48) + *(void *)(v21 + 72) * v52, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v54, 0LL, 1LL, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v54, 1LL, v20) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v87 = v130;
LABEL_59:
      uint64_t v88 = v131;
      sub_1004E696C(0xAu);
      uint64_t v89 = *(dispatch_queue_s **)&v88[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
      uint64_t v90 = v134;
      sub_10001DC4C(v87, v134, type metadata accessor for OwnedBeaconGroup);
      uint64_t v91 = *(unsigned __int8 *)(v132 + 80);
      uint64_t v92 = (v91 + 16) & ~v91;
      uint64_t v93 = v87;
      unint64_t v94 = (v133 + v92 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v95 = swift_allocObject(&unk_100954AC0, v94 + 8, v91 | 7);
      sub_10002218C(v90, v95 + v92, type metadata accessor for OwnedBeaconGroup);
      *(void *)(v95 + v94) = v88;
      uint64_t v96 = swift_allocObject(&unk_100954AE8, 32LL, 7LL);
      *(void *)(v96 + swift_weakDestroy(v0 + 16) = sub_100399F78;
      *(void *)(v96 + 24) = v95;
      uint64_t v164 = (uint64_t)sub_100095030;
      uint64_t v165 = v96;
      double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
      uint64_t v161 = 1107296256LL;
      uint64_t v162 = sub_100025BD4;
      uint64_t v163 = &unk_100954B00;
      uint64_t v97 = _Block_copy(&aBlock);
      uint64_t v98 = v88;
      swift_retain();
      swift_release();
      dispatch_sync(v89, v97);
      _Block_release(v97);
      LOBYTE(v89) = swift_isEscapingClosureAtFileLocation(v96, "", 129LL, 426LL, 27LL, 1LL);
      swift_release();
      if ((v89 & 1) == 0)
      {
        uint64_t v99 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v99);
        *(&v116 - 6) = (uint64_t)v98;
        *(&v116 - 5) = v93;
        *((double *)&v116 - 4) = a6;
        uint64_t v100 = v121;
        *(&v116 - 3) = v120;
        *(&v116 - 2) = v100;
        static Transaction.named<A>(_:with:)("SoundPlaybackManager.queuePlaySound", 35LL, 2LL, sub_100399FF0, &v116 - 8);
        sub_100004AB0();
        uint64_t v101 = v118;
        uint64_t v102 = v117;
        uint64_t v103 = v119;
        (*(void (**)(char *, void, uint64_t))(v118 + 104))( v117,  enum case for DispatchQoS.QoSClass.default(_:),  v119);
        unint64_t v104 = (void *)static OS_dispatch_queue.global(qos:)(v102);
        (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v103);
        uint64_t v105 = swift_allocObject(&unk_100954B38, 32LL, 7LL);
        uint64_t v106 = v123;
        *(void *)(v105 + swift_weakDestroy(v0 + 16) = v122;
        *(void *)(v105 + 24) = v106;
        uint64_t v164 = (uint64_t)sub_10020CE78;
        uint64_t v165 = v105;
        double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
        uint64_t v161 = 1107296256LL;
        uint64_t v162 = sub_1001C31E8;
        uint64_t v163 = &unk_100954B50;
        uint64_t v107 = _Block_copy(&aBlock);
        uint64_t v108 = swift_retain();
        unint64_t v109 = v124;
        static DispatchQoS.unspecified.getter(v108);
        os_log_type_t v159 = _swiftEmptyArrayStorage;
        uint64_t v110 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v111 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v112 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v113 = v127;
        uint64_t v114 = v111;
        uint64_t v115 = v129;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v159, v114, v112, v129, v110);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v109, v113, v107);
        _Block_release(v107);

        (*(void (**)(char *, uint64_t))(v128 + 8))(v113, v115);
        (*(void (**)(char *, uint64_t))(v125 + 8))(v109, v126);
        swift_release();
        swift_release();
        return;
      }

uint64_t sub_1003796C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v53 = v11;
  __chkstk_darwin(v11);
  uint64_t v51 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v50 = (uint64_t)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v42 - v20;
  sub_10050F124(a2, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    sub_100015794((uint64_t)v15, &qword_1009AA830);
    return sub_100379AD8(a1, a2, a3, a4, a5);
  }

  else
  {
    uint64_t v48 = a4;
    uint64_t v49 = a3;
    uint64_t v47 = v5;
    sub_10002218C((uint64_t)v15, (uint64_t)v21, type metadata accessor for OwnedBeaconGroup);
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_10000A720(v23, (uint64_t)qword_100A2A748);
    uint64_t v24 = v50;
    sub_10001DC4C((uint64_t)v21, v50, type metadata accessor for OwnedBeaconGroup);
    uint64_t v26 = v51;
    uint64_t v25 = v52;
    uint64_t v27 = a1;
    uint64_t v28 = v53;
    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, a1, v53);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter(v30);
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v33 = swift_slowAlloc(22LL, -1LL);
      uint64_t v46 = v21;
      uint64_t v34 = v33;
      uint64_t v45 = swift_slowAlloc(64LL, -1LL);
      uint64_t v55 = v45;
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v43 = v34 + 4;
      int v44 = v32;
      uint64_t v35 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v28, v35);
      uint64_t v54 = sub_1003F11D4(v36, v37, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v43, v34 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v24, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v28, v35);
      uint64_t v54 = sub_1003F11D4(v38, v39, &v55);
      uint64_t v27 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v28);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  (os_log_type_t)v44,  "Stop sound for group %s. CommandId %s",  (uint8_t *)v34,  0x16u);
      uint64_t v40 = v45;
      swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      uint64_t v41 = v34;
      uint64_t v21 = v46;
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v24, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v28);
    }

    sub_100379DE0(v27, (uint64_t)v21, v49, v48, a5);
    return sub_100018C68((uint64_t)v21, type metadata accessor for OwnedBeaconGroup);
  }

uint64_t sub_100379AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v53 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v52 = v10;
  __chkstk_darwin(v10);
  uint64_t v45 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v43 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v48 = *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v18((char *)&v42 - v16, a2, v12);
  v18((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v12);
  uint64_t v19 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v20 = (v19 + 16) & ~v19;
  unint64_t v21 = (v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = (v19 + 16 + v23) & ~v19;
  uint64_t v25 = swift_allocObject(&unk_100954980, v24 + v14, v19 | 7);
  uint64_t v26 = v25 + v20;
  uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
  v27(v26, v17, v12);
  *(double *)(v25 + v21) = a5;
  uint64_t v28 = v43;
  uint64_t v29 = v44;
  *(void *)(v25 + v22) = v44;
  uint64_t v30 = (void *)(v25 + v23);
  uint64_t v31 = v47;
  *uint64_t v30 = v46;
  v30[1] = v31;
  v27(v25 + v24, v28, v12);
  aBlock[4] = sub_10039953C;
  void aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100954998;
  int v32 = _Block_copy(aBlock);
  id v33 = v29;
  uint64_t v34 = swift_retain();
  uint64_t v35 = v45;
  static DispatchQoS.unspecified.getter(v34);
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v36 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v37 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v38 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v40 = v49;
  uint64_t v39 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v37, v38, v50, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v35, v40, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v39);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v52);
  return swift_release();
}

uint64_t sub_100379DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v47 = a4;
  uint64_t v45 = a3;
  uint64_t v49 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v52 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v51 = v10;
  __chkstk_darwin(v10);
  int v44 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  sub_10001DC4C(a2, (uint64_t)v19, v20);
  uint64_t v21 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  uint64_t v22 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v23 = (v22 + 16) & ~v22;
  unint64_t v24 = (v18 + v23 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v26 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v27 = (v26 + v25 + 8) & ~v26;
  unint64_t v28 = (v14 + v27 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v29 = swift_allocObject(&unk_1009546D8, v28 + 16, v22 | v26 | 7);
  sub_10002218C((uint64_t)v19, v29 + v23, type metadata accessor for OwnedBeaconGroup);
  uint64_t v30 = v43;
  *(void *)(v29 + v24) = v43;
  *(double *)(v29 + v25) = a5;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v29 + v27, v15, v21);
  uint64_t v31 = (void *)(v29 + v28);
  uint64_t v32 = v47;
  *uint64_t v31 = v45;
  v31[1] = v32;
  aBlock[4] = sub_100398D40;
  void aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_1009546F0;
  id v33 = _Block_copy(aBlock);
  id v34 = v30;
  uint64_t v35 = swift_retain();
  uint64_t v36 = v44;
  static DispatchQoS.unspecified.getter(v35);
  uint64_t v53 = _swiftEmptyArrayStorage;
  uint64_t v37 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v38 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v39 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v41 = v48;
  uint64_t v40 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v38, v39, v49, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v36, v41, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v41, v40);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v36, v51);
  return swift_release();
}

uint64_t sub_10037A124@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v52 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  __chkstk_darwin(v8);
  uint64_t v51 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10050F124(a2, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    sub_100015794((uint64_t)v12, &qword_1009AA830);
    uint64_t result = (uint64_t)sub_10037A600(a2);
    id v18 = (id)result;
  }

  else
  {
    sub_10002218C((uint64_t)v12, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    sub_1001CC778();
    uint64_t v20 = v19;
    id v21 = a1;
    uint64_t v22 = (uint64_t)sub_1003996B0(v20, (uint64_t)v21, (uint64_t)v56, (uint64_t (*)(char *))sub_10037A600);
    swift_bridgeObjectRelease();

    uint64_t v50 = a3;
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v22);
    for (; v23; uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v43))
    {
      unint64_t v24 = v22 & 0xC000000000000001LL;
      uint64_t v25 = 4LL;
      do
      {
        if (v24) {
          id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v22);
        }
        else {
          id v26 = *(id *)(v22 + 8 * v25);
        }
        id v18 = v26;
        uint64_t v27 = v25 - 3;
        if (__OFADD__(v25 - 4, 1LL))
        {
          __break(1u);
          goto LABEL_40;
        }

        if (![v26 state])
        {
LABEL_37:
          swift_bridgeObjectRelease();
          sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_48;
        }

        ++v25;
      }

      while (v27 != v23);
      uint64_t v28 = 4LL;
      while (1)
      {
        id v29 = v24
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28 - 4, v22)
            : *(id *)(v22 + 8 * v28);
        id v18 = v29;
        uint64_t v30 = v28 - 3;
        if (__OFADD__(v28 - 4, 1LL)) {
          break;
        }
        if ([v29 state] == (id)1) {
          goto LABEL_37;
        }

        ++v28;
        if (v30 == v23)
        {
          uint64_t v31 = 4LL;
          while (1)
          {
            id v32 = v24
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31 - 4, v22)
                : *(id *)(v22 + 8 * v31);
            id v18 = v32;
            uint64_t v33 = v31 - 3;
            if (__OFADD__(v31 - 4, 1LL)) {
              goto LABEL_41;
            }
            if ([v32 state] == (id)4) {
              goto LABEL_37;
            }

            ++v31;
            if (v33 == v23)
            {
              uint64_t v34 = 4LL;
              uint64_t v48 = v4;
              uint64_t v49 = v16;
              while (1)
              {
                id v36 = v24
                    ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, v22)
                    : *(id *)(v22 + 8 * v34);
                id v18 = v36;
                uint64_t v16 = (char *)(v34 - 3);
                if (__OFADD__(v34 - 4, 1LL)) {
                  goto LABEL_42;
                }
                id v37 = [v36 error];
                if (v37
                  && (id v55 = v37,
                      uint64_t v38 = sub_100004AEC((uint64_t *)&unk_1009A5470),
                      type metadata accessor for CommandError(0LL),
                      uint64_t v40 = v39,
                      (swift_dynamicCast(&v54, &v55, v38, v39, 6LL) & 1) != 0))
                {
                  uint64_t v41 = v54;
                  uint64_t v42 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
                  _BridgedStoredNSError.code.getter(&v55, v40, v42);

                  if (v55 == (id)10)
                  {
                    swift_bridgeObjectRelease_n(v22, 2LL);
                    uint64_t result = sub_100018C68((uint64_t)v49, type metadata accessor for OwnedBeaconGroup);
                    goto LABEL_48;
                  }

                  uint64_t v4 = v48;
                }

                else
                {
                }

                ++v34;
                BOOL v35 = v16 == (char *)v23;
                uint64_t v16 = v49;
                if (v35) {
                  goto LABEL_47;
                }
              }
            }
          }
        }
      }

os_log_t sub_10037A600(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v329 = a1;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v3);
  uint64_t v303 = (uint64_t)&v289 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v304 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v302 = *(void *)(v304 - 8);
  uint64_t v5 = __chkstk_darwin(v304);
  char v296 = (uint64_t (*)(uint64_t))((char *)&v289 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5);
  uint64_t v299 = (uint64_t)&v289 - v7;
  uint64_t v8 = sub_100004AEC(&qword_10099E488);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v318 = (uint64_t)&v289 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v316 = (uint64_t)&v289 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v298 = (uint64_t)&v289 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v294 = (char *)&v289 - v16;
  __chkstk_darwin(v15);
  uint64_t v306 = (uint64_t)&v289 - v17;
  uint64_t v327 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  uint64_t v328 = *(void *)(v327 - 8);
  uint64_t v18 = __chkstk_darwin(v327);
  uint64_t v314 = (uint64_t)&v289 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v312 = (uint64_t)&v289 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v295 = (uint64_t)&v289 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  char v297 = (char *)&v289 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v300 = (uint64_t)&v289 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v291 = (uint64_t)&v289 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v292 = (uint64_t)&v289 - v31;
  __chkstk_darwin(v30);
  uint64_t v305 = (uint64_t)&v289 - v32;
  uint64_t v33 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v33);
  uint64_t v309 = (uint64_t)&v289 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v308 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v307 = *(void *)(v308 - 8);
  __chkstk_darwin(v308);
  uint64_t v310 = (uint64_t)&v289 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v37 = __chkstk_darwin(v36);
  uint64_t v317 = (char *)&v289 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v37);
  v313 = (char *)&v289 - v39;
  uint64_t v324 = type metadata accessor for UUID(0LL);
  uint64_t v325 = *(void *)(v324 - 8);
  uint64_t v40 = __chkstk_darwin(v324);
  unsigned __int8 v319 = (char *)&v289 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v293 = (char *)&v289 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  id v46 = (char *)&v289 - v45;
  __chkstk_darwin(v44);
  uint64_t v311 = (char *)&v289 - v47;
  uint64_t v48 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v48);
  char v323 = (char *)&v289 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = (int *)type metadata accessor for BeaconObservation(0LL);
  uint64_t v336 = *((void *)v50 - 1);
  uint64_t v51 = __chkstk_darwin(v50);
  uint64_t v334 = (uint64_t)&v289 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = __chkstk_darwin(v51);
  v335 = (char *)&v289 - v54;
  __chkstk_darwin(v53);
  uint64_t v315 = (uint64_t)&v289 - v55;
  uint64_t v56 = type metadata accessor for Date(0LL);
  uint64_t v57 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v59 = (char *)&v289 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v61 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v63 = (uint64_t *)((char *)&v289 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v64 = *(void **)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *uint64_t v63 = v64;
  (*(void (**)(void *, void, uint64_t))(v61 + 104))(v63, enum case for DispatchPredicate.onQueue(_:), v60);
  id v65 = v64;
  LOBYTE(v64) = _dispatchPreconditionTest(_:)(v63);
  uint64_t v66 = (*(uint64_t (**)(void *, uint64_t))(v61 + 8))(v63, v60);
  if ((v64 & 1) != 0)
  {
    Date.init()(v66);
    uint64_t v351 = 2LL;
    if (qword_10099B300 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B300, sub_1003459EC);
LABEL_3:
  uint64_t v67 = qword_100A2A6C8;
  v320 = objc_autoreleasePoolPush();
  uint64_t v68 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v67, v68);
  uint64_t v301 = 0LL;
  uint64_t v69 = v340;
  uint64_t v70 = v340[2];
  v326 = v59;
  uint64_t v322 = v56;
  uint64_t v321 = v57;
  if (v70)
  {
    unint64_t v71 = sub_10030D124(v329);
    uint64_t v72 = (uint64_t)v323;
    if ((v73 & 1) != 0)
    {
      uint64_t v74 = *(void *)(v69[7] + 8 * v71);
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease();
      uint64_t v75 = (uint64_t)sub_1002FE5F8(v74);
      swift_bridgeObjectRelease();
      sub_1002FFE1C(v75);
      uint64_t v77 = v76;
      swift_release();
      uint64_t v78 = _swiftEmptyArrayStorage;
      *(void *)&__int128 v348 = _swiftEmptyArrayStorage;
      os_log_t v333 = *(os_log_t *)(v77 + 16);
      if (v333)
      {
        uint64_t v290 = v2;
        os_log_t v79 = 0LL;
        uint64_t v80 = type metadata accessor for BeaconObservation;
        os_log_type_t v81 = &off_100932970;
        uint64_t v82 = -1LL;
        uint64_t v83 = qword_1007FDA00;
        uint64_t v84 = (uint64_t)v335;
        v332 = v46;
        v331 = v50;
        uint64_t v330 = v77;
        while (1)
        {
          if ((unint64_t)v79 >= *(void *)(v77 + 16))
          {
            __break(1u);
            goto LABEL_123;
          }

          unint64_t v85 = (*(unsigned __int8 *)(v336 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v336 + 80);
          uint64_t v86 = *(void *)(v336 + 72);
          os_log_t v339 = (os_log_t)((char *)v79 + 1);
          v338 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v85;
          uint64_t v337 = v86;
          sub_10001DC4C(v77 + v85 + v86 * (void)v79, v84, type metadata accessor for BeaconObservation);
          sub_1001D6134();
          uint64_t v78 = (void *)Set.init(minimumCapacity:)(7LL);
          uint64_t v87 = 0LL;
          for (uint64_t i = v78 + 7; ; uint64_t i = v78 + 7)
          {
            while (1)
            {
              uint64_t v89 = *((char *)&off_100932970 + v87++ + 32);
              Hasher.init(_seed:)(&v340, v78[5]);
              Swift::UInt v90 = qword_1007FDA00[v89];
              Hasher._combine(_:)(v90);
              Swift::Int v91 = Hasher._finalize()();
              uint64_t v92 = -1LL << *((_BYTE *)v78 + 32);
              unint64_t v93 = v91 & ~v92;
              uint64_t v94 = v78[6];
LABEL_11:
              if (v87 == 7) {
                goto LABEL_20;
              }
            }

            uint64_t v95 = ~v92;
            while (1)
            {
              unint64_t v93 = (v93 + 1) & v95;
            }

LABEL_153:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v340);
    return v339;
  }

uint64_t sub_10037D160@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10050F124(a2, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_100015794((uint64_t)v11, &qword_1009AA830);
    uint64_t result = (uint64_t)sub_10037D4D8(a2);
    id v17 = (id)result;
  }

  else
  {
    sub_10002218C((uint64_t)v11, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    sub_1001CC778();
    uint64_t v19 = v18;
    id v20 = a1;
    uint64_t v21 = (uint64_t)sub_1003996B0(v19, (uint64_t)v20, (uint64_t)v38, (uint64_t (*)(char *))sub_10037D4D8);
    swift_bridgeObjectRelease();

    uint64_t v34 = v3;
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v21);
    for (; v22; uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v33))
    {
      unint64_t v23 = v21 & 0xC000000000000001LL;
      uint64_t v24 = 4LL;
      do
      {
        if (v23) {
          id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, v21);
        }
        else {
          id v25 = *(id *)(v21 + 8 * v24);
        }
        id v17 = v25;
        uint64_t v26 = v24 - 3;
        if (__OFADD__(v24 - 4, 1LL))
        {
          __break(1u);
          goto LABEL_25;
        }

        if (![v25 state])
        {
          swift_bridgeObjectRelease();
          sub_100018C68((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_23;
        }

        ++v24;
      }

      while (v26 != v22);
      uint64_t v27 = 4LL;
      while (1)
      {
        id v28 = v23
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27 - 4, v21)
            : *(id *)(v21 + 8 * v27);
        id v17 = v28;
        uint64_t v29 = v27 - 3;
        if (__OFADD__(v27 - 4, 1LL)) {
          break;
        }
        if ([v28 state] == (id)1)
        {
          swift_bridgeObjectRelease_n(v21, 2LL);
          goto LABEL_22;
        }

        ++v27;
        if (v29 == v22) {
          goto LABEL_19;
        }
      }

id sub_10037D4D8(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_10099E488);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v108 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v106 = (uint64_t)&v99 - v9;
  uint64_t v113 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  uint64_t v112 = *(void *)(v113 - 8);
  uint64_t v10 = __chkstk_darwin(v113);
  uint64_t v103 = (uint64_t)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v102 = (uint64_t)&v99 - v12;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v13);
  uint64_t v111 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v118 = *(void *)(v15 - 8);
  uint64_t v119 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v116 = (uint64_t)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v117 = (char *)&v99 - v19;
  __chkstk_darwin(v18);
  uint64_t v104 = (uint64_t)&v99 - v20;
  uint64_t v21 = type metadata accessor for Date(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t (*)(uint64_t))((char *)&v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v25 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  id v28 = (uint64_t *)((char *)&v99 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v107 = v1;
  uint64_t v29 = *(void **)(v1 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  void *v28 = v29;
  (*(void (**)(void *, void, uint64_t))(v26 + 104))(v28, enum case for DispatchPredicate.onQueue(_:), v25);
  id v30 = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)(v28);
  uint64_t v31 = (*(uint64_t (**)(void *, uint64_t))(v26 + 8))(v28, v25);
  if ((v29 & 1) == 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  Date.init()(v31);
  if (qword_10099B300 != -1) {
LABEL_57:
  }
    swift_once(&qword_10099B300, sub_1003459EC);
  uint64_t v32 = qword_100A2A6C8;
  uint64_t v105 = objc_autoreleasePoolPush();
  uint64_t v33 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v32, v33);
  uint64_t v34 = v123[0];
  uint64_t v35 = *(void *)(v123[0] + 16LL);
  uint64_t v36 = v119;
  uint64_t v37 = (uint64_t)v111;
  uint64_t v110 = v21;
  uint64_t v109 = v22;
  if (v35 && (unint64_t v38 = sub_10030D124(a1), (v39 & 1) != 0))
  {
    uint64_t v40 = *(void *)(*(void *)(v34 + 56) + 8 * v38);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRelease();
    uint64_t v41 = sub_1002FE5F8(v40);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v41);
    uint64_t v43 = v42;
    swift_release();
    uint64_t v44 = _swiftEmptyArrayStorage;
    uint64_t v124 = _swiftEmptyArrayStorage;
    uint64_t v115 = *(void *)(v43 + 16);
    if (v115)
    {
      uint64_t v99 = a1;
      int v100 = v24;
      uint64_t v101 = v5;
      unint64_t v45 = 0LL;
      uint64_t v24 = type metadata accessor for BeaconObservation;
      a1 = -1LL;
      uint64_t v5 = (char *)qword_1007FDA00;
      uint64_t v21 = (uint64_t)v117;
      uint64_t v114 = v43;
      while (1)
      {
        if (v45 >= *(void *)(v43 + 16))
        {
          __break(1u);
          goto LABEL_56;
        }

        unint64_t v46 = (*(unsigned __int8 *)(v118 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
        uint64_t v121 = *(void *)(v118 + 72);
        unint64_t v122 = v45 + 1;
        unint64_t v120 = v46;
        sub_10001DC4C(v43 + v46 + v121 * v45, v21, type metadata accessor for BeaconObservation);
        sub_1001D6134();
        uint64_t v22 = Set.init(minimumCapacity:)(7LL);
        uint64_t v47 = 0LL;
        for (uint64_t i = v22 + 56; ; uint64_t i = v22 + 56)
        {
          while (1)
          {
            uint64_t v49 = *((char *)&off_100932998 + v47++ + 32);
            Hasher.init(_seed:)(v123, *(void *)(v22 + 40));
            Swift::UInt v50 = qword_1007FDA00[v49];
            Hasher._combine(_:)(v50);
            Swift::Int v51 = Hasher._finalize()();
            uint64_t v52 = -1LL << *(_BYTE *)(v22 + 32);
            unint64_t v53 = v51 & ~v52;
            if (((*(void *)(i + ((v53 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v53) & 1) == 0) {
              goto LABEL_18;
            }
            uint64_t v54 = *(void *)(v22 + 48);
LABEL_11:
            if (v47 == 7) {
              goto LABEL_20;
            }
          }

          uint64_t v55 = ~v52;
          while (1)
          {
            unint64_t v53 = (v53 + 1) & v55;
            if (((*(void *)(i + ((v53 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v53) & 1) == 0) {
              break;
            }
          }

id sub_10037E03C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SoundPlaybackManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10037E0F4(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10050BDEC(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_100015794((uint64_t)v4, &qword_1009A4890);
    sub_100504C28(a1, (uint64_t)v23);
    uint64_t v9 = v24;
    if (v24)
    {
      uint64_t v10 = v25;
      sub_100012ED8(v23, v24);
      uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 176))(v9, v10);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
      uint64_t v12 = (void *)SPBeaconTypeHele;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v15 = v14;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      if (v13 == v17 && v15 == v16) {
        char v18 = 1;
      }
      else {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v17, v16, 0LL);
      }
      id v20 = v12;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_100015794((uint64_t)v23, (uint64_t *)&unk_1009A9C40);
      char v18 = 0;
    }
  }

  else
  {
    sub_10002218C((uint64_t)v4, (uint64_t)v8, type metadata accessor for WildModeAssociationRecord);
    int v19 = v8[*(int *)(v5 + 52)];
    sub_100018C68((uint64_t)v8, type metadata accessor for WildModeAssociationRecord);
    char v18 = v19 == 3;
  }

  return v18 & 1;
}

uint64_t sub_10037E2F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2);
  uint64_t v34 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10050BDEC(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) == 1)
  {
    sub_100015794((uint64_t)v13, &qword_1009A4890);
    sub_100504C28(a1, (uint64_t)&v37);
    if (v38)
    {
      sub_100012EC0(&v37, (uint64_t)v39);
      sub_10050B884(a1, (uint64_t)v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
      {
        sub_100015794((uint64_t)v6, &qword_1009AA870);
        uint64_t v19 = v40;
        uint64_t v18 = v41;
        sub_100012ED8(v39, v40);
        LOBYTE(v19) = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 96))(v19, v18);
      }

      else
      {
        sub_10002218C((uint64_t)v6, (uint64_t)v10, type metadata accessor for BeaconProductInfoRecord);
        LODWORD(v19) = (*(_DWORD *)&v10[*(int *)(v7 + 68)] >> 8) & 1;
        sub_100018C68((uint64_t)v10, type metadata accessor for BeaconProductInfoRecord);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
    }

    else
    {
      sub_100015794((uint64_t)&v37, (uint64_t *)&unk_1009A9C40);
      if (qword_10099B340 != -1) {
        swift_once(&qword_10099B340, sub_10037453C);
      }
      uint64_t v20 = type metadata accessor for Logger(0LL);
      sub_10000A720(v20, (uint64_t)qword_1009AACC8);
      uint64_t v22 = v34;
      uint64_t v21 = v35;
      uint64_t v23 = v36;
      uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, a1, v36);
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc(22LL, -1LL);
        uint64_t v28 = swift_slowAlloc(32LL, -1LL);
        v39[0] = v28;
        *(_DWORD *)uint64_t v27 = 141558275;
        *(void *)&__int128 v37 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v27 + 4, v27 + 12);
        *(_WORD *)(v27 + 12) = 2081;
        uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v23, v29);
        *(void *)&__int128 v37 = sub_1003F11D4(v30, v31, v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v27 + 14, v27 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
        _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Missing beacon record for %{private,mask.hash}s!",  (uint8_t *)v27,  0x16u);
        swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
      }

      LOBYTE(v19) = 0;
    }
  }

  else
  {
    sub_10002218C((uint64_t)v13, (uint64_t)v17, type metadata accessor for WildModeAssociationRecord);
    LOBYTE(v19) = sub_1000E5DB4();
    sub_100018C68((uint64_t)v17, type metadata accessor for WildModeAssociationRecord);
  }

  return v19 & 1;
}

void sub_10037E75C(uint64_t a1, void *a2)
{
  uint64_t v4 = v3;
  id v5 = a2;
  sub_10039703C(v4, (uint64_t)v5);
  swift_bridgeObjectRelease();
}

uint64_t sub_10037E7B8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v48 = a5;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v46 = a1;
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v53 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v52 = v10;
  __chkstk_darwin(v10);
  unint64_t v45 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v41 = v12;
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v42 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = *(void *)&a2[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  sub_10001DC4C(v44, (uint64_t)v18, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))( (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a4,  v12);
  uint64_t v20 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v21 = (v20 + 16) & ~v20;
  unint64_t v22 = (v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v25 = (v24 + v23 + 8) & ~v24;
  unint64_t v26 = (v14 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v28 = swift_allocObject(&unk_100954BD8, v27 + 8, v20 | v24 | 7);
  sub_10002218C((uint64_t)v18, v28 + v21, type metadata accessor for OwnedBeaconGroup);
  uint64_t v29 = v42;
  uint64_t v30 = v43;
  *(void *)(v28 + v22) = v43;
  *(double *)(v28 + v23) = a6;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v28 + v25, v29, v41);
  *(void *)(v28 + v26) = v48;
  *(void *)(v28 + v27) = v46;
  aBlock[4] = sub_10039A174;
  void aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100954BF0;
  unint64_t v31 = _Block_copy(aBlock);
  id v32 = v30;
  uint64_t v33 = swift_retain();
  uint64_t v34 = v45;
  static DispatchQoS.unspecified.getter(v33);
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v35 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v36 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v37 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  char v39 = v49;
  uint64_t v38 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v36, v37, v50, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v34, v39, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v38);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v52);
  return swift_release();
}

uint64_t sub_10037EB0C( uint64_t a1, void *a2, void (*a3)(void, void, void), uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v296 = a5;
  uint64_t v292 = a4;
  uint64_t v300 = a3;
  uint64_t v264 = sub_100004AEC(&qword_1009AADF0);
  unint64_t v304 = *(void *)(v264 - 8);
  __chkstk_darwin(v264);
  uint64_t v263 = &v236[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v262 = sub_100004AEC(&qword_1009AADF8);
  uint64_t v261 = *(void *)(v262 - 8);
  __chkstk_darwin(v262);
  unsigned __int8 v260 = &v236[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v11);
  unint64_t v281 = &v236[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v272 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v271 = *(void *)(v272 - 8);
  __chkstk_darwin(v272);
  unsigned __int8 v269 = &v236[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v268 = sub_100004AEC(&qword_1009AAE00);
  uint64_t v267 = *(void *)(v268 - 8);
  __chkstk_darwin(v268);
  unint64_t v266 = &v236[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v274 = sub_100004AEC(&qword_1009AAE08);
  uint64_t v273 = *(void *)(v274 - 8);
  __chkstk_darwin(v274);
  int v270 = &v236[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v277 = sub_100004AEC(&qword_1009AAE10);
  uint64_t v276 = *(void *)(v277 - 8);
  __chkstk_darwin(v277);
  uint64_t v275 = &v236[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v280 = sub_100004AEC(&qword_1009AAE18);
  uint64_t v279 = *(void *)(v280 - 8);
  __chkstk_darwin(v280);
  uint64_t v278 = &v236[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v283 = sub_100004AEC(&qword_1009AAE20);
  uint64_t v282 = *(void *)(v283 - 8);
  __chkstk_darwin(v283);
  uint64_t v288 = &v236[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v19);
  uint64_t v289 = &v236[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v246 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v245 = *(void *)(v246 - 8);
  __chkstk_darwin(v246);
  v244 = &v236[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v243 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v242 = *(void *)(v243 - 8);
  __chkstk_darwin(v243);
  uint64_t v241 = &v236[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = type metadata accessor for OwnedBeaconGroup(0LL);
  unint64_t v284 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v291 = v24;
  char v297 = &v236[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v251 = type metadata accessor for DispatchTime(0LL);
  uint64_t v240 = *(void *)(v251 - 8);
  uint64_t v25 = __chkstk_darwin(v251);
  unint64_t v239 = &v236[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v25);
  id v250 = &v236[-v27];
  uint64_t v249 = type metadata accessor for Date(0LL);
  uint64_t v248 = *(void *)(v249 - 8);
  __chkstk_darwin(v249);
  uint64_t v247 = &v236[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v29 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v29);
  uint64_t v257 = &v236[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v258 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  uint64_t v256 = *(void *)(v258 - 8);
  uint64_t v31 = __chkstk_darwin(v258);
  uint64_t v253 = &v236[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v306 = &v236[-v34];
  __chkstk_darwin(v33);
  uint64_t v255 = &v236[-v35];
  uint64_t v36 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v36);
  uint64_t v303 = &v236[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v38 = type metadata accessor for UUID(0LL);
  uint64_t v39 = __chkstk_darwin(v38);
  unint64_t v287 = &v236[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v252 = &v236[-v42];
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v298 = &v236[-v44];
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v259 = &v236[-v46];
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v49 = &v236[-v48];
  uint64_t v50 = __chkstk_darwin(v47);
  uint64_t v52 = &v236[-v51];
  uint64_t v290 = v53;
  __chkstk_darwin(v50);
  uint64_t v55 = &v236[-v54];
  uint64_t v56 = a1 + *(int *)(v23 + 24);
  uint64_t v299 = v57;
  uint64_t v58 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v57 + 16);
  v58(&v236[-v54], v56, v38);
  sub_1001CC778();
  uint64_t v60 = v59;
  uint64_t v61 = a2;
  sub_100398690(v60, (uint64_t)v61);
  int v63 = v62;
  uint64_t v305 = 0LL;
  swift_bridgeObjectRelease();
  uint64_t v302 = v61;

  int v294 = v63;
  uint64_t v64 = 0x6575657551LL;
  if ((v63 & 1) == 0) {
    uint64_t v64 = 0LL;
  }
  uint64_t v285 = v64;
  if ((v63 & 1) != 0) {
    unint64_t v65 = 0xE500000000000000LL;
  }
  else {
    unint64_t v65 = 0xE000000000000000LL;
  }
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v66 = type metadata accessor for Logger(0LL);
  uint64_t v67 = sub_10000A720(v66, (uint64_t)qword_100A2A748);
  v58(v52, (uint64_t)v55, v38);
  uint64_t v293 = v58;
  v58(v49, (uint64_t)v300, v38);
  uint64_t v68 = swift_bridgeObjectRetain_n(v65, 2LL);
  uint64_t v254 = v67;
  unint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
  os_log_type_t v70 = static os_log_type_t.default.getter(v69);
  int v71 = v70;
  BOOL v72 = os_log_type_enabled(v69, v70);
  uint64_t v301 = v55;
  uint64_t v295 = a1;
  unint64_t v265 = v65;
  if (v72)
  {
    uint64_t v73 = swift_slowAlloc(42LL, -1LL);
    uint64_t v238 = swift_slowAlloc(96LL, -1LL);
    aBlock[0] = v238;
    *(_DWORD *)uint64_t v73 = 136446978;
    int v237 = v71;
    swift_bridgeObjectRetain(v65);
    uint64_t v308 = sub_1003F11D4(v285, v65, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v309, v73 + 4, v73 + 12);
    swift_bridgeObjectRelease_n(v65, 3LL);
    *(_WORD *)(v73 + 12) = 2082;
    uint64_t v74 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v38, v74);
    uint64_t v308 = sub_1003F11D4(v75, v76, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v309, v73 + 14, v73 + 22);
    swift_bridgeObjectRelease();
    uint64_t v77 = v299;
    uint64_t v78 = *(void (**)(_BYTE *, uint64_t))(v299 + 8);
    v78(v52, v38);
    *(_WORD *)(v73 + 22) = 2048;
    uint64_t v308 = *(void *)&a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v309, v73 + 24, v73 + 32);
    *(_WORD *)(v73 + 32) = 2082;
    uint64_t v79 = v74;
    a1 = v295;
    uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter(v38, v79);
    uint64_t v308 = sub_1003F11D4(v80, v81, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v309, v73 + 34, v73 + 42);
    swift_bridgeObjectRelease();
    v78(v49, v38);
    _os_log_impl( (void *)&_mh_execute_header,  v69,  (os_log_type_t)v237,  "%{public}s playSound for group %{public}s with timeout %f. CommandId %{public}s",  (uint8_t *)v73,  0x2Au);
    uint64_t v82 = v238;
    swift_arrayDestroy(v238, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1LL, -1LL);
    swift_slowDealloc(v73, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v65, 2LL);
    uint64_t v77 = v299;
    uint64_t v78 = *(void (**)(_BYTE *, uint64_t))(v299 + 8);
    v78(v52, v38);
    v78(v49, v38);
  }

  uint64_t v83 = (uint64_t)v306;
  if ((v294 & 1) == 0) {
    goto LABEL_22;
  }
  sub_1001CC778();
  unint64_t v84 = v303;
  sub_1006F2C58(v85, (uint64_t)v303);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v77 + 48))(v84, 1LL, v38) == 1)
  {
    sub_100015794((uint64_t)v84, &qword_10099D8A0);
LABEL_22:
    uint64_t v286 = v38;
    unint64_t v98 = v302;
    uint64_t v99 = v289;
    sub_1004E8CAC(a1, (uint64_t)v289);
    int v100 = sub_1004ED8A0(a1);
    double v101 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001CC778();
    uint64_t v103 = v102;
    __chkstk_darwin(v102);
    *(void *)&v236[-48] = v99;
    *(void *)&v236[-40] = v100;
    *(void *)&v236[-32] = aBlock;
    *(void *)&v236[-24] = v98;
    uint64_t v235 = v300;
    sub_1002188CC((void (*)(char *))sub_10039A210, (uint64_t)&v236[-64], v103);
    swift_bridgeObjectRelease();
    uint64_t v104 = swift_bridgeObjectRelease();
    uint64_t v306 = (_BYTE *)aBlock[0];
    uint64_t v305 = *(void *)(aBlock[0] + 16);
    if (v305)
    {
      double v311 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      swift_bridgeObjectRetain(v306);
      specialized ContiguousArray.reserveCapacity(_:)(v305);
      uint64_t v303 = (_BYTE *)sub_1000372EC( &qword_1009AAE38,  &qword_1009AAE28,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      uint64_t v105 = 0LL;
      uint64_t v106 = v264;
      uint64_t v107 = v263;
      uint64_t v108 = v262;
      uint64_t v109 = v261;
      uint64_t v110 = v260;
      do
      {
        uint64_t v111 = v105 + 1;
        uint64_t v310 = *(void *)&v306[8 * v105 + 32];
        swift_retain();
        uint64_t v112 = sub_100004AEC(&qword_1009AAE28);
        uint64_t v113 = sub_100004AEC(&qword_1009AAE30);
        Publisher.map<A>(_:)(sub_10038249C, 0LL, v112, v113, v303);
        uint64_t v114 = sub_100004AEC(&qword_1009AAE40);
        uint64_t v115 = sub_1000372EC( &qword_1009AAE48,  &qword_1009AADF0,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
        uint64_t v116 = sub_1000372EC(&qword_1009AAE50, &qword_1009AAE40, (uint64_t)&protocol conformance descriptor for Just<A>);
        Publisher.catch<A>(_:)(sub_1003824A0, 0LL, v106, v114, v115, v116);
        (*(void (**)(_BYTE *, uint64_t))(v304 + 8))(v107, v106);
        uint64_t v117 = sub_1000372EC( &qword_1009AAE58,  &qword_1009AADF8,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
        uint64_t v118 = Publisher.eraseToAnyPublisher()(v108, v117);
        (*(void (**)(_BYTE *, uint64_t))(v109 + 8))(v110, v108);
        uint64_t v119 = swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v119);
        uint64_t v120 = *(void *)(*(void *)&v311 + 16LL);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v120);
        uint64_t v121 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v120, v118);
        specialized ContiguousArray._endMutation()(v121);
        uint64_t v105 = v111;
      }

      while (v305 != v111);
      double v101 = v311;
      uint64_t v104 = swift_bridgeObjectRelease();
    }

    uint64_t v306 = (_BYTE *)Transaction.subscriptionCleaner.getter(v104);
    uint64_t v122 = swift_allocObject(&unk_100954C28, 25LL, 7LL);
    uint64_t v305 = v122;
    *(void *)(v122 + swift_weakDestroy(v0 + 16) = 2LL;
    *(_BYTE *)(v122 + 24) = 1;
    double v311 = v101;
    uint64_t v123 = sub_100004AEC(&qword_1009AAE60);
    uint64_t v124 = sub_1000372EC(&qword_1009AAE68, &qword_1009AAE60, (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v125 = sub_1000372EC( &qword_1009AAE70,  &qword_1009AAE78,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    double v126 = COERCE_DOUBLE(Sequence<>.merged()(v123, v124, v125));
    swift_bridgeObjectRelease();
    double v311 = v126;
    uint64_t v127 = sub_100004AEC(&qword_1009AAE78);
    unint64_t v128 = sub_100398E60();
    unint64_t v129 = v266;
    Publisher<>.setFailureType<A>(to:)( &type metadata for SoundPlaybackManager.SoundPlaybackManagerError,  v127,  &type metadata for SoundPlaybackManager.SoundPlaybackManagerError,  v125,  v128);
    uint64_t v130 = swift_release();
    uint64_t v131 = v269;
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v130, a6);
    double v311 = *(double *)&v302[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
    double v132 = v311;
    uint64_t v133 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
    unint64_t v304 = *(void *)(*(void *)(v133 - 8) + 56LL);
    uint64_t v134 = (uint64_t)v281;
    ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v304)(v281, 1LL, 1LL, v133);
    unint64_t v135 = sub_100004AB0();
    uint64_t v264 = v135;
    uint64_t v136 = sub_1000372EC( &qword_1009AAE88,  &qword_1009AAE00,  (uint64_t)&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
    int v137 = (_BYTE *)sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    uint64_t v303 = v137;
    double v138 = COERCE_DOUBLE(*(id *)&v132);
    os_log_type_t v139 = v270;
    uint64_t v140 = v268;
    Publisher.timeout<A>(_:scheduler:options:customError:)( v131,  &v311,  v134,  sub_1003824AC,  0LL,  v268,  v135,  v136,  v137);
    sub_100015794(v134, &qword_1009B0670);

    (*(void (**)(_BYTE *, uint64_t))(v271 + 8))(v131, v272);
    (*(void (**)(_BYTE *, uint64_t))(v267 + 8))(v129, v140);
    uint64_t v141 = sub_100004AEC(&qword_1009AAE90);
    uint64_t v142 = sub_1000372EC( &qword_1009AAE98,  &qword_1009AAE08,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
    uint64_t v143 = v275;
    uint64_t v144 = v274;
    Publisher.map<A>(_:)(sub_1003824B8, 0LL, v274, v141, v142);
    (*(void (**)(_BYTE *, uint64_t))(v273 + 8))(v139, v144);
    uint64_t v145 = sub_100004AEC(&qword_1009AAEA0);
    uint64_t v146 = sub_1000372EC( &qword_1009AAEA8,  &qword_1009AAE10,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v147 = sub_1000372EC(&qword_1009AAEB0, &qword_1009AAEA0, (uint64_t)&protocol conformance descriptor for Just<A>);
    uint64_t v148 = v278;
    uint64_t v149 = v277;
    Publisher.catch<A>(_:)(sub_1003824BC, 0LL, v277, v145, v146, v147);
    (*(void (**)(_BYTE *, uint64_t))(v276 + 8))(v143, v149);
    double v311 = v138;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v304)(v134, 1LL, 1LL, v133);
    uint64_t v150 = sub_1000372EC( &qword_1009AAEB8,  &qword_1009AAE18,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    unint64_t v151 = *(id *)&v138;
    uint64_t v152 = v280;
    Publisher.receive<A>(on:options:)(&v311, v134, v280, v264, v150, v303);
    sub_100015794(v134, &qword_1009B0670);

    (*(void (**)(_BYTE *, uint64_t))(v279 + 8))(v148, v152);
    uint64_t v153 = v286;
    unint64_t v154 = v293;
    v293(v298, v301, v286);
    uint64_t v155 = v153;
    v154(v287, v300, v153);
    sub_10001DC4C(v295, (uint64_t)v297, type metadata accessor for OwnedBeaconGroup);
    uint64_t v156 = v299;
    uint64_t v157 = *(unsigned __int8 *)(v299 + 80);
    uint64_t v158 = (v157 + 32) & ~v157;
    unint64_t v304 = (v158 + v290 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v159 = (v158 + v290 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v160 = (v157 + v159 + 8) & ~v157;
    uint64_t v161 = *(unsigned __int8 *)(v284 + 80);
    uint64_t v162 = (v290 + v161 + v160) & ~v161;
    uint64_t v303 = (_BYTE *)(v157 | v161 | 7);
    unint64_t v284 = (v291 + v162 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v163 = (v284 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v164 = swift_allocObject(&unk_100954C50, v163 + 8, v303);
    unsigned int v165 = v306;
    *(void *)(v164 + swift_weakDestroy(v0 + 16) = v296;
    *(void *)(v164 + 24) = v165;
    uint64_t v166 = v164 + v158;
    uint64_t v167 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v156 + 32);
    uint64_t v168 = v155;
    v167(v166, v298, v155);
    uint64_t v300 = (void (*)(void, void, void))v167;
    unint64_t v169 = v164 + v304;
    *(void *)unint64_t v169 = v305;
    LODWORD(v304) = v294 & 1;
    *(_BYTE *)(v169 + 8) = v294 & 1;
    uint64_t v170 = v302;
    *(void *)(v164 + v159) = v302;
    uint64_t v171 = v164 + v160;
    uint64_t v172 = v168;
    v167(v171, v287, v168);
    uint64_t v173 = v297;
    sub_10002218C((uint64_t)v297, v164 + v162, type metadata accessor for OwnedBeaconGroup);
    *(void *)(v164 + v284) = v292;
    *(double *)(v164 + v163) = a6;
    uint64_t v174 = swift_allocObject(&unk_100954890, 24LL, 7LL);
    swift_unknownObjectWeakInit(v174 + 16, v170);
    uint64_t v175 = v298;
    v293(v298, v301, v172);
    sub_10001DC4C(v295, (uint64_t)v173, type metadata accessor for OwnedBeaconGroup);
    uint64_t v176 = (v157 + 40) & ~v157;
    unint64_t v177 = (v290 + v176 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v178 = (v177 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v179 = (v178 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v180 = (v161 + v179 + 8) & ~v161;
    uint64_t v181 = v180 + v291;
    uint64_t v182 = (void *)swift_allocObject(&unk_100954C78, v180 + v291 + 1, v303);
    uint64_t v183 = v285;
    v182[2] = v174;
    v182[3] = v183;
    v182[4] = v265;
    uint64_t v184 = v175;
    uint64_t v185 = v286;
    v300((char *)v182 + v176, v184, v286);
    uint64_t v186 = v305;
    *(void *)((char *)v182 + v177) = v305;
    *(double *)((char *)v182 + v178) = a6;
    *(void *)((char *)v182 + v179) = v292;
    sub_10002218C((uint64_t)v297, (uint64_t)v182 + v180, type metadata accessor for OwnedBeaconGroup);
    *((_BYTE *)v182 + v181) = v304;
    uint64_t v187 = sub_1000372EC( &qword_1009AAEC0,  &qword_1009AAE20,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    swift_retain_n(v186, 2LL);
    uint64_t v188 = v302;
    uint64_t v189 = v296;
    swift_retain();
    uint64_t v190 = v306;
    swift_unknownObjectRetain(v306);
    uint64_t v191 = v283;
    uint64_t v192 = v288;
    Publisher.sink(receiveCompletion:receiveValue:)(sub_10039A3D0, v164, sub_10039A5E8, v182, v283, v187);
    swift_release();
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v282 + 8))(v192, v191);
    AnyCancellable.store(in:)(v189);
    swift_unknownObjectRelease(v190);
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v299 + 8))(v301, v185);
    sub_100015794((uint64_t)v289, (uint64_t *)&unk_1009A9C30);
    swift_release();
    return swift_bridgeObjectRelease();
  }

  uint64_t v86 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v77 + 32);
  uint64_t v87 = (uint64_t)v259;
  v86(v259, v84, v38);
  char v88 = &v302[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators];
  __n128 v89 = swift_beginAccess(&v302[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators], &v308, 0LL, 0LL);
  uint64_t v90 = *(void *)v88;
  if (!*(void *)(*(void *)v88 + 16LL))
  {
    uint64_t v95 = v257;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128))(v256 + 56))(v257, 1LL, 1LL, v258, v89);
    uint64_t v92 = v87;
LABEL_20:
    v78((_BYTE *)v92, v38);
    sub_100015794((uint64_t)v95, &qword_10099E488);
LABEL_21:
    a1 = v295;
    goto LABEL_22;
  }

  swift_bridgeObjectRetain(*(void *)v88);
  unint64_t v91 = sub_10030D124(v87);
  uint64_t v92 = v87;
  if ((v93 & 1) != 0)
  {
    uint64_t v94 = v256;
    uint64_t v95 = v257;
    sub_10001DC4C( *(void *)(v90 + 56) + *(void *)(v256 + 72) * v91,  (uint64_t)v257,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    uint64_t v96 = 0LL;
    uint64_t v97 = v258;
  }

  else
  {
    uint64_t v96 = 1LL;
    uint64_t v97 = v258;
    uint64_t v95 = v257;
    uint64_t v94 = v256;
  }

  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v95, v96, 1LL, v97);
  swift_bridgeObjectRelease();
  uint64_t v194 = (uint64_t)v95;
  uint64_t v195 = v255;
  sub_10002218C(v194, (uint64_t)v255, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if (!v195[*(int *)(v97 + 24)])
  {
    uint64_t v206 = v247;
    static Date.trustedNow.getter((uint64_t)v247);
    double v207 = Date.timeIntervalSince(_:)(&v195[*(int *)(v97 + 32)]);
    (*(void (**)(_BYTE *, uint64_t))(v248 + 8))(v206, v249);
    if (a6 * 0.5 >= v207)
    {
      swift_bridgeObjectRelease();
      uint64_t v208 = sub_10001DC4C((uint64_t)v195, v83, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      os_log_t v209 = (os_log_s *)Logger.logObject.getter(v208);
      os_log_type_t v210 = static os_log_type_t.error.getter(v209);
      if (os_log_type_enabled(v209, v210))
      {
        uint64_t v211 = swift_slowAlloc(22LL, -1LL);
        uint64_t v305 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v305;
        *(_DWORD *)uint64_t v211 = 136446466;
        uint64_t v212 = Date.localISO8601.getter();
        double v311 = COERCE_DOUBLE(sub_1003F11D4(v212, v213, aBlock));
        uint64_t v77 = v299;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v311, v312, v211 + 4, v211 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v83, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        *(_WORD *)(v211 + 12) = 2050;
        double v311 = v207;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v311, v312, v211 + 14, v211 + 22);
        _os_log_impl( (void *)&_mh_execute_header,  v209,  v210,  "Last retry %{public}s.\nTime since: %{public}f. Defer retry",  (uint8_t *)v211,  0x16u);
        uint64_t v214 = v305;
        swift_arrayDestroy(v305, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v214, -1LL, -1LL);
        swift_slowDealloc(v211, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v83, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      }

      uint64_t v305 = *(void *)&v302[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
      os_log_t v215 = v239;
      static DispatchTime.now()(v216);
      + infix(_:_:)(v215, a6 - v207);
      uint64_t v306 = *(_BYTE **)(v240 + 8);
      ((void (*)(_BYTE *, uint64_t))v306)(v215, v251);
      v293(v298, v300, v38);
      uint64_t v217 = v297;
      sub_10001DC4C(v295, (uint64_t)v297, type metadata accessor for OwnedBeaconGroup);
      uint64_t v218 = *(unsigned __int8 *)(v77 + 80);
      uint64_t v219 = (v218 + 24) & ~v218;
      uint64_t v220 = *(unsigned __int8 *)(v284 + 80);
      uint64_t v221 = (v290 + v220 + v219) & ~v220;
      unint64_t v222 = (v291 + v221 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v223 = (v222 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v224 = swift_allocObject(&unk_100954CA0, v223 + 8, v218 | v220 | 7);
      id v225 = v302;
      *(void *)(v224 + swift_weakDestroy(v0 + 16) = v302;
      v86((_BYTE *)(v224 + v219), v298, v38);
      sub_10002218C((uint64_t)v217, v224 + v221, type metadata accessor for OwnedBeaconGroup);
      *(void *)(v224 + v222) = v292;
      *(double *)(v224 + v223) = a6;
      aBlock[4] = (uint64_t)sub_10039A7B8;
      void aBlock[5] = v224;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1001C31E8;
      aBlock[3] = (uint64_t)&unk_100954CB8;
      uint64_t v226 = _Block_copy(aBlock);
      id v227 = v225;
      os_log_type_t v228 = v241;
      static DispatchQoS.unspecified.getter(v227);
      double v311 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      uint64_t v229 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v230 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v231 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v232 = v244;
      uint64_t v233 = v246;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v311, v230, v231, v246, v229);
      uint64_t v234 = v250;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v250, v228, v232, v226);
      _Block_release(v226);
      (*(void (**)(_BYTE *, uint64_t))(v245 + 8))(v232, v233);
      (*(void (**)(_BYTE *, uint64_t))(v242 + 8))(v228, v243);
      ((void (*)(_BYTE *, uint64_t))v306)(v234, v251);
      sub_100018C68((uint64_t)v255, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v78(v259, v38);
      v78(v301, v38);
      return swift_release();
    }

    sub_100018C68((uint64_t)v195, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v78(v259, v38);
    goto LABEL_21;
  }

  swift_bridgeObjectRelease();
  uint64_t v196 = v252;
  os_log_type_t v197 = v301;
  v293(v252, v301, v38);
  int v198 = v253;
  uint64_t v199 = sub_10001DC4C( (uint64_t)v195,  (uint64_t)v253,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  uint64_t v200 = (os_log_s *)Logger.logObject.getter(v199);
  os_log_type_t v201 = static os_log_type_t.error.getter(v200);
  if (os_log_type_enabled(v200, v201))
  {
    uint64_t v202 = swift_slowAlloc(22LL, -1LL);
    aBlock[0] = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v202 = 136315394;
    uint64_t v203 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v204 = dispatch thunk of CustomStringConvertible.description.getter(v38, v203);
    double v311 = COERCE_DOUBLE(sub_1003F11D4(v204, v205, aBlock));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v311, v312, v202 + 4, v202 + 12);
    swift_bridgeObjectRelease();
    v78(v196, v38);
    *(_WORD *)(v202 + 12) = 2080;
    __asm { BR              X10 }
  }

  sub_100018C68((uint64_t)v198, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v78(v196, v38);
  sub_100018C68((uint64_t)v195, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v78(v259, v38);
  return ((uint64_t (*)(_BYTE *, uint64_t))v78)(v197, v38);
}

uint64_t sub_100380968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v92 = a6;
  uint64_t v93 = a5;
  uint64_t v82 = a3;
  uint64_t v9 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v9);
  char v88 = &v79[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v86 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v86);
  uint64_t v87 = &v79[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v89 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v85 = &v79[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v91 = &v79[-v16];
  uint64_t v84 = v17;
  __chkstk_darwin(v15);
  unint64_t v81 = &v79[-v18];
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v19);
  uint64_t v21 = &v79[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v22 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = &v79[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10001581C(a2, (uint64_t)v21, (uint64_t *)&unk_1009A9C30);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22) == 1)
  {
    sub_100015794((uint64_t)v21, (uint64_t *)&unk_1009A9C30);
LABEL_5:
    uint64_t v29 = a1;
    uint64_t v30 = sub_100381194(a1, v92, 0LL);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
    unint64_t v32 = *(void *)(*(void *)a4 + 16LL);
    unint64_t v31 = *(void *)(*(void *)a4 + 24LL);
    if (v32 >= v31 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1LL);
    }
    uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
    specialized Array._endMutation()(v33);
    goto LABEL_21;
  }

  sub_10002218C((uint64_t)v21, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  uint64_t v26 = &v25[*(int *)(v22 + 20)];
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v28 = dispatch thunk of static Equatable.== infix(_:_:)(v26, a1, v12, v27);
  if ((v28 & 1) != 0)
  {
    sub_100018C68((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
    goto LABEL_5;
  }

  __chkstk_darwin(v28);
  *(void *)&v79[-16] = v25;
  uint64_t v34 = v90;
  uint64_t v35 = sub_100374078(sub_100398BE8, (uint64_t)&v79[-32], v82);
  uint64_t v90 = v34;
  if (v35) {
    uint64_t v36 = (void *)v35;
  }
  else {
    uint64_t v36 = &_swiftEmptySetSingleton;
  }
  char v37 = sub_1004E4BF0(a1, (uint64_t)v36);
  swift_bridgeObjectRelease();
  if ((v37 & 1) != 0)
  {
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_10000A720(v38, (uint64_t)qword_100A2A748);
    uint64_t v39 = v89;
    uint64_t v40 = v81;
    uint64_t v41 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v89 + 16))(v81, a1, v12);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.default.getter(v42);
    int v44 = v43;
    uint64_t v29 = a1;
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v45 = swift_slowAlloc(22LL, -1LL);
      uint64_t v82 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v82;
      *(_DWORD *)uint64_t v45 = 141558275;
      uint64_t v95 = 1752392040LL;
      int v80 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2081;
      uint64_t v46 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v47 = v42;
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v12, v46);
      uint64_t v95 = sub_1003F11D4(v48, v49, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v45 + 14, v45 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v89 + 8))(v40, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v42,  (os_log_type_t)v80,  "Ignoring nearby non-primary beacon %{private,mask.hash}s",  (uint8_t *)v45,  0x16u);
      uint64_t v50 = v82;
      swift_arrayDestroy(v82, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v40, v12);
    }
  }

  else
  {
    uint64_t v51 = sub_100381194(a1, v92, 0LL);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
    unint64_t v53 = *(void *)(*(void *)a4 + 16LL);
    unint64_t v52 = *(void *)(*(void *)a4 + 24LL);
    if (v53 >= v52 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1LL);
    }
    uint64_t v29 = a1;
    uint64_t v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v51);
    specialized Array._endMutation()(v54);
  }

  sub_100018C68((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
LABEL_21:
  uint64_t v82 = swift_allocObject(&unk_100954890, 24LL, 7LL);
  swift_unknownObjectWeakInit(v82 + 16, v93);
  uint64_t v55 = v89;
  uint64_t v56 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v89 + 16);
  uint64_t v57 = v91;
  uint64_t v83 = v29;
  v56(v91, v29, v12);
  uint64_t v58 = v85;
  v56(v85, v92, v12);
  uint64_t v59 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v60 = (v59 + 16) & ~v59;
  uint64_t v61 = (v84 + v59 + v60) & ~v59;
  unint64_t v62 = (v84 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v63 = swift_allocObject(&unk_100954CF0, v62 + 8, v59 | 7);
  uint64_t v64 = v63 + v60;
  unint64_t v65 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v55 + 32);
  v65(v64, v57, v12);
  v65(v63 + v61, v58, v12);
  *(void *)(v63 + v62) = v82;
  aBlock[4] = (uint64_t)sub_10039A874;
  void aBlock[5] = v63;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1001C31E8;
  aBlock[3] = (uint64_t)&unk_100954D08;
  uint64_t v66 = _Block_copy(aBlock);
  uint64_t v95 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v67 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain();
  uint64_t v68 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v69 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  os_log_type_t v70 = v87;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v95, v68, v69, v86, v67);
  uint64_t v71 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
  uint64_t v72 = DispatchWorkItem.init(flags:block:)(v70, v66);
  swift_release();
  swift_release();
  uint64_t v73 = (uint64_t)v91;
  uint64_t v74 = v83;
  v56(v91, v83, v12);
  uint64_t v75 = (uint64_t)v88;
  v56(v88, v92, v12);
  unint64_t v76 = (int *)type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  v56((_BYTE *)(v75 + v76[5]), v74, v12);
  uint64_t v77 = v75 + v76[8];
  swift_retain();
  static Date.trustedNow.getter(v77);
  *(_BYTE *)(v75 + v76[6]) = 0;
  *(void *)(v75 + v76[7]) = v72;
  *(void *)(v75 + v76[9]) = 0LL;
  *(_BYTE *)(v75 + v76[10]) = 0;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v76 - 1) + 56LL))(v75, 0LL, 1LL, v76);
  swift_beginAccess(v93 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, aBlock, 33LL, 0LL);
  sub_1000451A8(v75, v73);
  swift_endAccess(aBlock);
  return swift_release();
}

uint64_t sub_100381194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v75 = a3;
  uint64_t v76 = a1;
  uint64_t v72 = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v71 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v69 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v69 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (void (**)(char *, uint64_t))((char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v74 = v3;
  uint64_t v17 = *(void **)(v3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  void *v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) != 0)
  {
    if (qword_10099B330 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B330, sub_100374304);
LABEL_3:
  uint64_t v70 = type metadata accessor for Logger(0LL);
  sub_10000A720(v70, (uint64_t)qword_100A2A748);
  uint64_t v20 = v76;
  uint64_t v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v21 = v73(v12, v76, v4);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v69 = (void (*)(char *, uint64_t))swift_slowAlloc(64LL, -1LL);
    v77[0] = (uint64_t)v69;
    *(_DWORD *)uint64_t v24 = 141558531;
    uint64_t v78 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2081;
    uint64_t v25 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v4, v25);
    uint64_t v78 = sub_1003F11D4(v26, v27, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    uint64_t v28 = v12;
    uint64_t v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    v29(v28, v4);
    *(_WORD *)(v24 + 22) = 2082;
    unint64_t v30 = 0xE800000000000000LL;
    uint64_t v31 = 0x746C75616665642ELL;
    uint64_t v32 = v74;
    switch(v75)
    {
      case 0LL:
        break;
      case 1LL:
        uint64_t v31 = 0x676E69676E61722ELL;
        break;
      case 2LL:
        unint64_t v30 = 0xE900000000000067LL;
        goto LABEL_12;
      case 3LL:
        unint64_t v30 = 0x8000000100857490LL;
        uint64_t v31 = 0xD000000000000010LL;
        break;
      case 4LL:
        unint64_t v30 = 0xEF64656D7269666ELL;
        uint64_t v31 = 0x6F4365756575712ELL;
        break;
      case 5LL:
        unint64_t v30 = 0xEE0074726F685367LL;
LABEL_12:
        uint64_t v31 = 0x6E696B636172742ELL;
        break;
      default:
        unint64_t v30 = 0xE700000000000000LL;
        uint64_t v31 = 0x6E776F6E6B6E75LL;
        uint64_t v32 = v74;
        break;
    }

    uint64_t v78 = sub_1003F11D4(v31, v30, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v24 + 24, v24 + 32);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Calling play sound on device %{private,mask.hash}s with context %{public}s",  (uint8_t *)v24,  0x20u);
    uint64_t v34 = v69;
    swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);

    uint64_t v20 = v76;
  }

  else
  {
    uint64_t v33 = v12;
    uint64_t v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    v29(v33, v4);

    uint64_t v32 = v74;
  }

  uint64_t v35 = sub_100004AEC(&qword_1009AAEC8);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  uint64_t v36 = PassthroughSubject.init()();
  char v37 = v73;
  v73(v10, v20, v4);
  uint64_t v38 = (uint64_t *)(v32 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects);
  swift_beginAccess(v32 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects, v77, 33LL, 0LL);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
  uint64_t v78 = *v38;
  *uint64_t v38 = 0x8000000000000000LL;
  sub_10005E5BC(v36, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v38 = v78;
  swift_bridgeObjectRelease();
  v29(v10, v4);
  swift_endAccess(v77);
  char v40 = sub_10037E2F0(v20);
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v77[3] = My;
  v77[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v42 = sub_10000A7C8(v77);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v42,  enum case for Feature.FindMy.spPlaySoundAll(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(v77);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v77);
  if ((My & 1) == 0 || (v40 & 1) != 0)
  {
    if (v75 == 5)
    {
      id v52 = sub_1003745CC();
      uint64_t v58 = v57;
      swift_getObjectType(v52);
      id v59 = [(id)objc_opt_self(CLFindMyAccessorySoundSequence) shortSequence];
      uint64_t v60 = *(void (**)(void))(v58 + 56);
    }

    else
    {
      if (v75 == 2)
      {
        id v61 = sub_1003745CC();
        uint64_t v63 = v62;
        uint64_t ObjectType = swift_getObjectType(v61);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v20, ObjectType, v63);
        swift_unknownObjectRelease(v61);
LABEL_31:
        v77[0] = v36;
        uint64_t v66 = sub_1000372EC( &qword_1009AAED0,  &qword_1009AAEC8,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        uint64_t v56 = Publisher.eraseToAnyPublisher()(v35, v66);
        goto LABEL_32;
      }

      if (v75 == 1)
      {
        id v52 = sub_1003745CC();
        uint64_t v54 = v53;
        swift_getObjectType(v52);
        id v55 = [(id)objc_opt_self(CLFindMyAccessorySoundSequence) rangingSequence];
      }

      else
      {
        id v52 = sub_1003745CC();
        uint64_t v54 = v65;
        swift_getObjectType(v52);
        id v55 = [(id)objc_opt_self(CLFindMyAccessorySoundSequence) defaultSequence];
      }

      id v59 = v55;
      uint64_t v60 = *(void (**)(void))(v54 + 40);
    }

    v60();
    swift_unknownObjectRelease(v52);

    goto LABEL_31;
  }

  uint64_t v69 = v29;
  if (qword_10099B340 != -1) {
    swift_once(&qword_10099B340, sub_10037453C);
  }
  sub_10000A720(v70, (uint64_t)qword_1009AACC8);
  os_log_type_t v43 = v71;
  uint64_t v44 = v37(v71, v20, v4);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.default.getter(v45);
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = swift_slowAlloc(64LL, -1LL);
    v77[0] = v48;
    *(_DWORD *)uint64_t v47 = 136315651;
    uint64_t v78 = sub_1003F11D4(0xD000000000000024LL, 0x800000010085F970LL, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v47 + 4, v47 + 12);
    *(_WORD *)(v47 + 12) = 2160;
    uint64_t v78 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v47 + 14, v47 + 22);
    *(_WORD *)(v47 + 22) = 2081;
    uint64_t v49 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v4, v49);
    uint64_t v78 = sub_1003F11D4(v50, v51, v77);
    uint64_t v20 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v47 + 24, v47 + 32);
    swift_bridgeObjectRelease();
    v69(v43, v4);
    _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "%s SPPlaySoundAll: %{private,mask.hash}s does NOT support ranging",  (uint8_t *)v47,  0x20u);
    swift_arrayDestroy(v48, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  else
  {
    v69(v43, v4);
  }

  uint64_t v56 = sub_100392294(v20, v72, v75, v36);
LABEL_32:
  uint64_t v67 = v56;
  swift_release();
  return v67;
}

void sub_100381A9C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v95 = a3;
  int v94 = a2;
  uint64_t v103 = a1;
  uint64_t v5 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v5);
  uint64_t v99 = (uint64_t)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v96 = v7;
  uint64_t v97 = v8;
  __chkstk_darwin(v7);
  unint64_t v98 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v91 = *(void *)(v10 - 8);
  uint64_t v92 = v10;
  __chkstk_darwin(v10);
  uint64_t v89 = (uint64_t)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v102 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v93 = (char *)&v83 - v17;
  __chkstk_darwin(v16);
  int v100 = (char *)&v83 - v18;
  uint64_t v19 = sub_100004AEC(&qword_10099E488);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v90 = (uint64_t)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  os_log_type_t v23 = (char *)&v83 - v22;
  uint64_t v24 = (int *)type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  uint64_t v25 = *((void *)v24 - 1);
  __chkstk_darwin(v24);
  uint64_t v101 = (uint64_t)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  unint64_t v30 = (uint64_t *)((char *)&v83 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v31 = *(void **)(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *unint64_t v30 = v31;
  (*(void (**)(void *, void, uint64_t))(v28 + 104))(v30, enum case for DispatchPredicate.onQueue(_:), v27);
  id v32 = v31;
  LOBYTE(v31) = _dispatchPreconditionTest(_:)(v30);
  (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v27);
  if ((v31 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v33 = (void *)(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  __n128 v34 = swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v106, 0LL, 0LL);
  uint64_t v35 = *v33;
  if (!*(void *)(*v33 + 16LL))
  {
    (*(void (**)(char *, uint64_t, uint64_t, int *, __n128))(v25 + 56))(v23, 1LL, 1LL, v24, v34);
    uint64_t v28 = v103;
    goto LABEL_8;
  }

  swift_bridgeObjectRetain(*v33);
  uint64_t v28 = v103;
  unint64_t v36 = sub_10030D124(v103);
  if ((v37 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v35 + 56) + *(void *)(v25 + 72) * v36,  (uint64_t)v23,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, int *))(v25 + 56);
    v38(v23, 0LL, 1LL, v24);
  }

  else
  {
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, int *))(v25 + 56);
    v38(v23, 1LL, 1LL, v24);
  }

  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(v23, 1LL, v24) == 1)
  {
LABEL_8:
    sub_100015794((uint64_t)v23, &qword_10099E488);
    if (qword_10099B330 == -1)
    {
LABEL_9:
      uint64_t v39 = type metadata accessor for Logger(0LL);
      sub_10000A720(v39, (uint64_t)qword_100A2A748);
      uint64_t v40 = v102;
      uint64_t v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 16))(v15, v28, v12);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc(22LL, -1LL);
        uint64_t v45 = v12;
        uint64_t v46 = swift_slowAlloc(32LL, -1LL);
        v104[0] = v46;
        *(_DWORD *)uint64_t v44 = 141558275;
        uint64_t v105 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v44 + 4, v44 + 12);
        *(_WORD *)(v44 + 12) = 2081;
        uint64_t v47 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v45, v47);
        uint64_t v105 = sub_1003F11D4(v48, v49, v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v44 + 14, v44 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v45);
        _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "No coordinator for %{private,mask.hash}s. Cannot complete!",  (uint8_t *)v44,  0x16u);
        swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1LL, -1LL);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v12);
      }

      return;
    }

uint64_t sub_1003824A0(unint64_t *a1)
{
  return sub_100391AE4(a1, &qword_1009AAE30);
}

void sub_1003824AC(void *a1@<X8>)
{
  *a1 = 3LL;
}

uint64_t sub_1003824BC(unint64_t *a1)
{
  return sub_100391AE4(a1, &qword_1009AAE90);
}

void sub_1003824C8( double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v42 = a7;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = a6 + 16;
  Transaction.capture()();
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_10000A720(v20, (uint64_t)qword_100A2A748);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a5, v16);
  uint64_t v21 = swift_retain_n(a6, 2LL);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc(22LL, -1LL);
    uint64_t v40 = a9;
    uint64_t v25 = v24;
    uint64_t v26 = swift_slowAlloc(64LL, -1LL);
    v45[0] = v26;
    *(_DWORD *)uint64_t v25 = 136446466;
    uint64_t v41 = a8;
    uint64_t v27 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v16, v27);
    unint64_t v46 = sub_1003F11D4(v28, v29, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    *(_WORD *)(v25 + 12) = 2082;
    uint64_t v30 = v43;
    swift_beginAccess(v43, v44, 0LL, 0LL);
    char v31 = *(_BYTE *)(a6 + 24);
    unint64_t v46 = *(void *)(a6 + 16);
    v47[0] = v31;
    sub_10039A864(v46, v31);
    uint64_t v32 = sub_100004AEC(&qword_1009AAF28);
    uint64_t v33 = String.init<A>(describing:)(&v46, v32);
    unint64_t v46 = sub_1003F11D4(v33, v34, v45);
    a8 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v25 + 14, v25 + 22);
    swift_release_n(a6, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "playSound for group %{public}s) completion. Result: %{public}s",  (uint8_t *)v25,  0x16u);
    swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v35 = v25;
    a9 = v40;
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);

    swift_release_n(a6, 2LL);
    uint64_t v30 = v43;
  }

  swift_beginAccess(v30, &v46, 0LL, 0LL);
  if (*(_BYTE *)(a6 + 24) == 1)
  {
    unint64_t v36 = *(void *)(a6 + 16);
    sub_100399234(v36);
    if ((v42 & 1) != 0)
    {
      sub_100382868(a9, a10, a11, a1);
      sub_10039A258(v36, 1);
    }

    else
    {
      sub_1001CC778();
      uint64_t v38 = v37;
      sub_10039A864(v36, 1);
      id v39 = a8;
      sub_100397590(v38, (uint64_t)v39, v36);
      sub_10039A258(v36, 1);

      sub_10039A258(v36, 1);
      swift_bridgeObjectRelease();
    }
  }

uint64_t sub_100382868(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v102 = a1;
  uint64_t v103 = a3;
  uint64_t v113 = a2;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v107 = *(void *)(v6 - 8);
  uint64_t v108 = v6;
  __chkstk_darwin(v6);
  uint64_t v106 = (uint64_t)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v8);
  uint64_t v111 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v117 = *(void *)(v115 - 8);
  uint64_t v10 = __chkstk_darwin(v115);
  uint64_t v109 = (uint64_t)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v116 = (uint64_t)&v96 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v114 = (char *)&v96 - v15;
  __chkstk_darwin(v14);
  uint64_t v110 = (uint64_t)&v96 - v16;
  uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v104 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v112 = (char *)&v96 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v96 - v26;
  unint64_t v28 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  char v31 = (unint64_t *)((char *)&v96 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v105 = v4;
  unint64_t v32 = *(void *)&v4[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  *char v31 = v32;
  (*(void (**)(unint64_t *, void, unint64_t))(v29 + 104))( v31,  enum case for DispatchPredicate.onQueue(_:),  v28);
  id v33 = (id)v32;
  char v34 = _dispatchPreconditionTest(_:)(v31);
  (*(void (**)(unint64_t *, unint64_t))(v29 + 8))(v31, v28);
  if ((v34 & 1) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  uint64_t v35 = type metadata accessor for OwnedBeaconGroup(0LL);
  unint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v36(v27, v113 + *(int *)(v35 + 24), v20);
  sub_1001CC778();
  sub_1006F2C58(v37, (uint64_t)v19);
  swift_bridgeObjectRelease();
  unint64_t v32 = (unint64_t)v27;
  uint64_t v29 = v21;
  unint64_t v28 = v20;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20) == 1)
  {
    uint64_t v38 = &qword_10099D8A0;
    uint64_t v39 = (uint64_t)v19;
    goto LABEL_24;
  }

  uint64_t v99 = (uint64_t (*)(char *, unint64_t, unint64_t))v36;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v41 = (uint64_t)v112;
  v40(v112, v19, v20);
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v42 = qword_100A2A6C8;
  uint64_t v43 = objc_autoreleasePoolPush();
  uint64_t v44 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v42, v44);
  uint64_t v45 = v120[0];
  uint64_t v46 = v115;
  uint64_t v47 = (uint64_t)v111;
  if (*(void *)(v120[0] + 16) && (unint64_t v48 = sub_10030D124(v41), (v49 & 1) != 0))
  {
    uint64_t v100 = v29;
    uint64_t v50 = *(void *)(*(void *)(v45 + 56) + 8 * v48);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRelease();
    uint64_t v51 = sub_1002FE5F8(v50);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v51);
    uint64_t v53 = v52;
    swift_release();
    uint64_t v54 = _swiftEmptyArrayStorage;
    v120[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v55 = *(void *)(v53 + 16);
    if (v55)
    {
      uint64_t v97 = v43;
      unint64_t v98 = v32;
      unint64_t v101 = v28;
      unint64_t v32 = 0LL;
      uint64_t v56 = (uint64_t)v114;
      while (v32 < *(void *)(v53 + 16))
      {
        unint64_t v28 = (*(unsigned __int8 *)(v117 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
        uint64_t v29 = *(void *)(v117 + 72);
        sub_10001DC4C(v53 + v28 + v29 * v32, v56, type metadata accessor for BeaconObservation);
        if (*(_BYTE *)(v56 + *(int *)(v46 + 24)) == 23)
        {
          sub_10002218C(v56, v116, type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0) {
            sub_100032AA8(0, v54[2] + 1LL, 1);
          }
          uint64_t v54 = (void *)v120[0];
          unint64_t v58 = *(void *)(v120[0] + 16);
          unint64_t v57 = *(void *)(v120[0] + 24);
          if (v58 >= v57 >> 1)
          {
            sub_100032AA8(v57 > 1, v58 + 1, 1);
            uint64_t v54 = (void *)v120[0];
          }

          v54[2] = v58 + 1;
          sub_10002218C(v116, (uint64_t)v54 + v28 + v58 * v29, type metadata accessor for BeaconObservation);
          uint64_t v56 = (uint64_t)v114;
          uint64_t v46 = v115;
        }

        else
        {
          sub_100018C68(v56, type metadata accessor for BeaconObservation);
        }

        if (v55 == ++v32)
        {
          uint64_t v54 = (void *)v120[0];
          unint64_t v28 = v101;
          unint64_t v32 = v98;
          uint64_t v47 = (uint64_t)v111;
          uint64_t v43 = v97;
          goto LABEL_21;
        }
      }

      __break(1u);
      goto LABEL_41;
    }