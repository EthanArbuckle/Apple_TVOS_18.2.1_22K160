uint64_t sub_10041D27C()
{
  unsigned __int8 *v0;
  return sub_10041746C(*v0);
}

uint64_t sub_10041D284@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10042868C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10041D2A8(_BYTE *a1@<X8>)
{
  *a1 = -81;
}

uint64_t sub_10041D2B4(uint64_t a1)
{
  unint64_t v2 = sub_100427F04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10041D2DC(uint64_t a1)
{
  unint64_t v2 = sub_100427F04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10041D304()
{
  uint64_t v1 = *(void *)v0;
  sub_100018BE4(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_10041D334()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_10041D340()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_10041D34C()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_10041D358()
{
  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t sub_10041D360()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 64));
}

uint64_t sub_10041D368()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t sub_10041D370()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain(*(void *)(v0 + 88));
  return v1;
}

uint64_t sub_10041D39C()
{
  return *(unsigned __int8 *)(v0 + 105);
}

uint64_t sub_10041D3A4()
{
  return *(void *)(v0 + 96);
}

uint64_t sub_10041D3B0()
{
  return *(unsigned __int8 *)(v0 + 106);
}

uint64_t sub_10041D3B8()
{
  return *(void *)(v0 + 112);
}

uint64_t sub_10041D3C4()
{
  return *(void *)(v0 + 128);
}

uint64_t sub_10041D3D0()
{
  return *(void *)(v0 + 144);
}

uint64_t sub_10041D3DC()
{
  return *(void *)(v0 + 160);
}

uint64_t sub_10041D3E8()
{
  return *(void *)(v0 + 176);
}

uint64_t sub_10041D3F4()
{
  return *(void *)(v0 + 192);
}

uint64_t sub_10041D400()
{
  return *(void *)(v0 + 208);
}

uint64_t sub_10041D40C()
{
  return *(void *)(v0 + 224);
}

uint64_t sub_10041D418()
{
  return *(void *)(v0 + 240);
}

uint64_t sub_10041D424()
{
  return *(void *)(v0 + 256);
}

uint64_t sub_10041D434()
{
  return *(unsigned __int8 *)(v0 + 265);
}

uint64_t sub_10041D43C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 272));
}

uint64_t sub_10041D444()
{
  return *(void *)(v0 + 280);
}

uint64_t sub_10041D454()
{
  return *(void *)(v0 + 296);
}

uint64_t sub_10041D464()
{
  return *(void *)(v0 + 312);
}

uint64_t sub_10041D474()
{
  return *(void *)(v0 + 328);
}

uint64_t sub_10041D484()
{
  return *(void *)(v0 + 344);
}

uint64_t sub_10041D494()
{
  return *(void *)(v0 + 360);
}

uint64_t sub_10041D4A4()
{
  return *(void *)(v0 + 376);
}

uint64_t sub_10041D4B4()
{
  return *(void *)(v0 + 392);
}

uint64_t sub_10041D4C4()
{
  return *(void *)(v0 + 408);
}

uint64_t sub_10041D4D4()
{
  return *(void *)(v0 + 424);
}

uint64_t sub_10041D4E4()
{
  return *(unsigned __int8 *)(v0 + 433);
}

uint64_t sub_10041D4EC()
{
  return *(void *)(v0 + 440);
}

uint64_t sub_10041D4FC()
{
  return *(void *)(v0 + 456);
}

uint64_t sub_10041D50C()
{
  return *(void *)(v0 + 472);
}

uint64_t sub_10041D51C()
{
  return *(void *)(v0 + 488);
}

uint64_t sub_10041D52C()
{
  return *(void *)(v0 + 504);
}

uint64_t sub_10041D53C()
{
  return *(void *)(v0 + 520);
}

uint64_t sub_10041D54C()
{
  return *(void *)(v0 + 536);
}

uint64_t sub_10041D55C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 552));
}

uint64_t sub_10041D564()
{
  return *(void *)(v0 + 560);
}

uint64_t sub_10041D574()
{
  return *(void *)(v0 + 576);
}

void *sub_10041D584()
{
  uint64_t v1 = *(void **)(v0 + 592);
  id v2 = v1;
  return v1;
}

uint64_t sub_10041D5A8()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 600));
}

uint64_t sub_10041D5B0()
{
  return *(void *)(v0 + 608);
}

uint64_t sub_10041D5C0()
{
  return *(void *)(v0 + 624);
}

uint64_t sub_10041D5D0()
{
  return *(void *)(v0 + 640);
}

uint64_t sub_10041D5E0()
{
  return *(void *)(v0 + 656);
}

uint64_t sub_10041D5F0()
{
  return *(void *)(v0 + 672);
}

uint64_t sub_10041D600()
{
  return *(unsigned __int8 *)(v0 + 681);
}

uint64_t sub_10041D608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001581C(v2 + *(int *)(a1 + 228), a2, &qword_10099D8A0);
}

uint64_t sub_10041D630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001581C(v2 + *(int *)(a1 + 232), a2, (uint64_t *)&unk_10099D720);
}

uint64_t sub_10041D658(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 236));
}

uint64_t sub_10041D66C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001581C(v2 + *(int *)(a1 + 240), a2, (uint64_t *)&unk_10099D720);
}

uint64_t sub_10041D694(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 244));
}

uint64_t sub_10041D6A8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 248));
}

uint64_t sub_10041D6BC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 252));
}

uint64_t sub_10041D6D0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 256));
}

uint64_t sub_10041D6E4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 260));
}

uint64_t sub_10041D6F8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 264));
}

uint64_t sub_10041D70C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001581C(v2 + *(int *)(a1 + 268), a2, (uint64_t *)&unk_1009B9A80);
}

uint64_t sub_10041D734(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 272));
}

uint64_t sub_10041D740(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 276));
}

uint64_t sub_10041D74C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 280));
}

uint64_t sub_10041D758(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 284));
}

uint64_t sub_10041D76C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 288));
}

uint64_t sub_10041D780(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 292));
}

uint64_t sub_10041D794(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 296));
}

uint64_t sub_10041D7A8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 300));
}

uint64_t sub_10041D7BC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 304));
}

uint64_t sub_10041D7D0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 308));
}

uint64_t sub_10041D7E4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 312));
}

uint64_t sub_10041D7F8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 316));
}

uint64_t sub_10041D80C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 320));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10041D840(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 324));
}

uint64_t sub_10041D854(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 328));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10041D888(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 332));
}

uint64_t sub_10041D89C(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + *(int *)(a1 + 336)));
}

uint64_t sub_10041D8A8(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 340));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10041D8DC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 344));
}

uint64_t sub_10041D8F0(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 348));
}

uint64_t sub_10041D8FC(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 352));
}

uint64_t sub_10041D908(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 356));
}

uint64_t sub_10041D914(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 360));
}

uint64_t sub_10041D920(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 364));
}

uint64_t sub_10041D934(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 368));
}

uint64_t sub_10041D948(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 372));
}

uint64_t sub_10041D95C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 376));
}

uint64_t sub_10041D970(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 380));
}

uint64_t sub_10041D984(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 384));
}

uint64_t sub_10041D998(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 388));
}

uint64_t sub_10041D9AC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 392));
}

uint64_t sub_10041D9C0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 396));
}

uint64_t sub_10041D9D4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 400));
}

uint64_t sub_10041D9E8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 404));
}

uint64_t sub_10041D9FC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 408));
}

uint64_t sub_10041DA10(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 412));
}

uint64_t sub_10041DA24(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 416));
}

uint64_t sub_10041DA38(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 420));
}

uint64_t sub_10041DA4C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 424));
}

uint64_t sub_10041DA60(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 428));
}

uint64_t sub_10041DA74(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 432));
}

uint64_t sub_10041DA88(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 436));
}

uint64_t sub_10041DA9C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 440));
}

uint64_t sub_10041DAB0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 444));
}

uint64_t sub_10041DAC4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 448));
}

uint64_t sub_10041DAD8(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 452));
}

uint64_t sub_10041DAE4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 456));
}

uint64_t sub_10041DAF8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 460));
}

uint64_t sub_10041DB0C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 464));
}

uint64_t sub_10041DB20(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 468));
}

uint64_t sub_10041DB2C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 472));
}

uint64_t sub_10041DB38(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 476));
}

uint64_t sub_10041DB44(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 480));
}

uint64_t sub_10041DB58(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 484));
}

uint64_t sub_10041DB6C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 488));
}

uint64_t sub_10041DB80(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 492));
}

uint64_t sub_10041DB94(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 496));
}

uint64_t sub_10041DBA8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 500));
}

uint64_t sub_10041DBBC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 504));
}

uint64_t sub_10041DBD0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 508));
}

uint64_t sub_10041DBE4(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 512));
}

uint64_t sub_10041DBF0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 516));
}

uint64_t sub_10041DC04(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + *(int *)(a1 + 520)));
}

uint64_t sub_10041DC10(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 524));
}

uint64_t sub_10041DC24(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 528));
}

uint64_t sub_10041DC30(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + *(int *)(a1 + 532)));
}

uint64_t sub_10041DC3C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 536));
}

uint64_t sub_10041DC48(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 540));
}

uint64_t sub_10041DC5C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 544));
}

uint64_t sub_10041DC70(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 548));
}

uint64_t sub_10041DC7C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 552));
}

uint64_t sub_10041DC88(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 556));
}

uint64_t sub_10041DC9C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 560));
}

uint64_t sub_10041DCB0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 564));
}

uint64_t sub_10041DCC4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 568));
}

uint64_t sub_10041DCD8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 572));
}

uint64_t sub_10041DCEC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 576));
}

uint64_t sub_10041DD00(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 580));
}

uint64_t sub_10041DD14(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 584));
}

uint64_t sub_10041DD28(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 588));
}

uint64_t sub_10041DD3C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 592));
}

uint64_t sub_10041DD50(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 596));
}

uint64_t sub_10041DD64(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 600));
}

uint64_t sub_10041DD78(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 604));
}

uint64_t sub_10041DD8C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 608));
}

uint64_t sub_10041DDA0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 612));
}

uint64_t sub_10041DDB4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 616));
}

uint64_t sub_10041DDC8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 620));
}

uint64_t sub_10041DDDC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 624));
}

uint64_t sub_10041DDF0(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 628));
}

uint64_t sub_10041DDFC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 632));
}

uint64_t sub_10041DE10(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 636));
}

uint64_t sub_10041DE24(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 640));
}

uint64_t sub_10041DE38(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 644));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10041DE6C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 648));
}

uint64_t sub_10041DE80(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 652));
}

uint64_t sub_10041DE8C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 656));
}

uint64_t sub_10041DE98(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 660));
}

uint64_t sub_10041DEAC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 664));
}

uint64_t sub_10041DEC0(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 668));
}

unint64_t sub_10041DECC(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 672)) | ((unint64_t)*(unsigned __int8 *)(v1 + *(int *)(a1 + 672) + 4) << 32);
}

uint64_t sub_10041DEF4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 676));
}

uint64_t sub_10041DF08(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 680));
}

uint64_t sub_10041DF1C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 684));
}

uint64_t sub_10041DF30(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 688));
}

uint64_t sub_10041DF44(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 692));
}

uint64_t sub_10041DF58(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 696));
}

uint64_t sub_10041DF6C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 700));
}

uint64_t sub_10041DF80(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 704));
}

uint64_t sub_10041DF8C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 708));
}

uint64_t sub_10041DFA0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 712));
}

void sub_10041DFB4(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_10041DFC8(void *a1)
{
  return sub_100418024(a1);
}

uint64_t sub_10041DFE0()
{
  unint64_t v0 = sub_1004120A4((uint64_t)&off_1009323D8);
  uint64_t v1 = Dictionary<>.dataRepresentation.getter( v0,  &type metadata for String,  &type metadata for Bool,  &protocol witness table for String,  &protocol witness table for String,  &protocol witness table for String,  &protocol witness table for Bool,  &protocol witness table for Bool);
  uint64_t v3 = v2;
  uint64_t result = swift_bridgeObjectRelease(v0);
  qword_100A2A960 = v1;
  *(void *)algn_100A2A968 = v3;
  return result;
}

void sub_10041E068()
{
  qword_100A2A970 = (uint64_t)&off_100932410;
}

unint64_t sub_10041E07C()
{
  uint64_t v0 = sub_100004AEC(&qword_1009AD488);
  uint64_t v1 = sub_100004AEC(&qword_1009AD490);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v23 = swift_allocObject(v0, v5 + v3, v4 | 7);
  *(_OWORD *)(v23 + 16) = xmmword_1007E67D0;
  uint64_t v6 = v23 + v5 + *(int *)(v1 + 48);
  *(_BYTE *)(v23 + v5) = 1;
  unint64_t v22 = sub_1004121B4((uint64_t)&off_100932470);
  uint64_t v7 = sub_100004AEC(&qword_1009AD498);
  uint64_t v8 = *(void *)(sub_100004AEC(&qword_1009AD4A0) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(v7, v11 + 5 * v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1007E8280;
  v13 = (void *)(v12 + v11);
  void *v13 = 0x656E6F685069LL;
  v13[1] = 0xE600000000000000LL;
  SystemVersionNumber.init(stringLiteral:)(809580849LL, 0xE400000000000000LL);
  v14 = (void *)(v12 + v11 + v9);
  void *v14 = 1684099177LL;
  v14[1] = 0xE400000000000000LL;
  SystemVersionNumber.init(stringLiteral:)(809580849LL, 0xE400000000000000LL);
  v15 = (void *)(v12 + v11 + 2 * v9);
  void *v15 = 0x506B6F6F4263614DLL;
  v15[1] = 0xEA00000000006F72LL;
  SystemVersionNumber.init(stringLiteral:)(809578802LL, 0xE400000000000000LL);
  v16 = (void *)(v12 + v11 + 3 * v9);
  void *v16 = 0x416B6F6F4263614DLL;
  v16[1] = 0xEA00000000007269LL;
  SystemVersionNumber.init(stringLiteral:)(809578802LL, 0xE400000000000000LL);
  v17 = (void *)(v12 + v11 + 4 * v9);
  void *v17 = 1685016681LL;
  v17[1] = 0xE400000000000000LL;
  SystemVersionNumber.init(stringLiteral:)(809580849LL, 0xE400000000000000LL);
  unint64_t v18 = sub_1004122C4(v12);
  *(_BYTE *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = v22;
  *(void *)(v6 + 16) = 0LL;
  *(void *)(v6 + 24) = v18;
  *(void *)(v6 + 32) = 0LL;
  type metadata accessor for FeatureSupportMatrix(0LL);
  unint64_t v19 = sub_1001D6068();
  unint64_t v20 = sub_1001D60AC();
  CustomCodableKeyDictionary.init(wrappedValue:)( 0LL,  &type metadata for FeatureSupportMatrixProductType,  &type metadata for Bool,  v19,  v20,  &protocol witness table for Bool,  &protocol witness table for Bool);
  unint64_t result = sub_100412464(v23);
  qword_100A2A978 = result;
  return result;
}

id sub_10041E30C()
{
  qword_100A2A980 = SPServiceStateEnabled;
  return SPServiceStateEnabled;
}

id sub_10041E324()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A8E60);
  uint64_t v1 = swift_allocObject(v0, 40LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1007E67D0;
  uint64_t v2 = (void *)SPDisabledReasoniCloudSignedOut;
  *(void *)(v1 + 32) = SPDisabledReasoniCloudSignedOut;
  qword_100A2A988 = v1;
  return v2;
}

double sub_10041E370()
{
  xmmword_100A2A990 = xmmword_100800B80;
  xmmword_100A2A9A0 = xmmword_100800B90;
  xmmword_100A2A9B0 = xmmword_100800BA0;
  qword_100A2A9C0 = (uint64_t)&off_100932508;
  double result = 0.0;
  unk_100A2A9C8 = 0u;
  unk_100A2A9D8 = 0u;
  *(_OWORD *)&qword_100A2A9E8 = 0u;
  qword_100A2A9F8 = 0LL;
  return result;
}

void *sub_10041E3BC()
{
  double result = sub_1001D9508();
  qword_100A2AA00 = (uint64_t)result;
  return result;
}

void sub_10041E3D8()
{
  qword_100A2AA08 = 150LL;
}

void sub_10041E3E8()
{
  qword_100A2AA10 = 0x4122750000000000LL;
}

void sub_10041E3FC()
{
  qword_100A2AA18 = 0x408C200000000000LL;
}

void sub_10041E410()
{
  qword_100A2AA20 = 0x40F5180000000000LL;
}

void sub_10041E424()
{
  qword_100A2AA28 = 0x4143C68000000000LL;
}

void sub_10041E438()
{
  qword_100A2AA30 = (uint64_t)&off_100932560;
}

unint64_t sub_10041E44C()
{
  unint64_t result = sub_100412600((uint64_t)&off_100932598);
  qword_100A2AA38 = result;
  return result;
}

BOOL sub_10041E470(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v832 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v831 = (uint64_t)&v804 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v827 = sub_100004AEC((uint64_t *)&unk_10099D760);
  uint64_t v6 = __chkstk_darwin(v827);
  uint64_t v833 = (uint64_t)&v804 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v826 = (uint64_t)&v804 - v8;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v830 = (uint64_t)&v804 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v828 = (uint64_t)&v804 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v829 = (uint64_t)&v804 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v825 = (uint64_t)&v804 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v823 = (uint64_t)&v804 - v19;
  __chkstk_darwin(v18);
  uint64_t v824 = (uint64_t)&v804 - v20;
  uint64_t v822 = type metadata accessor for UUID(0LL);
  uint64_t v820 = *(void *)(v822 - 8);
  __chkstk_darwin(v822);
  uint64_t v819 = (uint64_t)&v804 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v22);
  uint64_t v821 = (uint64_t)&v804 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v26 = __chkstk_darwin(v25);
  v28 = (char *)&v804 - v27;
  __chkstk_darwin(v26);
  v31 = (char *)&v804 - v30;
  uint64_t v33 = *a1;
  unint64_t v32 = a1[1];
  v834 = a1;
  uint64_t v35 = *a2;
  unint64_t v34 = a2[1];
  if (v32 >> 60 == 15)
  {
    if (v34 >> 60 == 15)
    {
      uint64_t v817 = v29;
      uint64_t v818 = v4;
      v36 = a2;
      sub_100018BE4(v33, v32);
      sub_100018BE4(v35, v34);
      sub_1000182F0(v33, v32);
      goto LABEL_7;
    }

void *sub_100421918()
{
  uint64_t v0 = sub_1004C437C(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  unint64_t v3 = v1 >> 1;
  unint64_t v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    uint64_t v0 = sub_1004C437C((void *)(v1 > 1), v2 + 1, 1, v0);
    unint64_t v1 = v0[3];
    unint64_t v3 = v1 >> 1;
  }

  v0[2] = v4;
  uint64_t v5 = &v0[5 * v2];
  *((_OWORD *)v5 + 2) = xmmword_100800BB0;
  v5[6] = 0xE800000000000000LL;
  v5[7] = 2458820592LL;
  v5[8] = 0xA400000000000000LL;
  int64_t v6 = v2 + 2;
  if (v3 <= v4) {
    uint64_t v0 = sub_1004C437C((void *)(v1 > 1), v6, 1, v0);
  }
  v0[2] = v6;
  uint64_t v7 = &v0[5 * v4];
  *((_OWORD *)v7 + 2) = xmmword_100800BC0;
  v7[6] = 0xE400000000000000LL;
  v7[7] = 2996477936LL;
  v7[8] = 0xA400000000000000LL;
  unint64_t v9 = v0[2];
  unint64_t v8 = v0[3];
  unint64_t v10 = v8 >> 1;
  unint64_t v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    uint64_t v0 = sub_1004C437C((void *)(v8 > 1), v9 + 1, 1, v0);
    unint64_t v8 = v0[3];
    unint64_t v10 = v8 >> 1;
  }

  v0[2] = v11;
  uint64_t v12 = &v0[5 * v9];
  *((_OWORD *)v12 + 2) = xmmword_100800BD0;
  v12[6] = 0xE600000000000000LL;
  v12[7] = 3079905264LL;
  v12[8] = 0xA400000000000000LL;
  int64_t v13 = v9 + 2;
  if (v10 <= v11) {
    uint64_t v0 = sub_1004C437C((void *)(v8 > 1), v13, 1, v0);
  }
  v0[2] = v13;
  uint64_t v14 = &v0[5 * v11];
  *((_OWORD *)v14 + 2) = xmmword_100800BE0;
  v14[6] = 0xE700000000000000LL;
  v14[7] = 2626789360LL;
  v14[8] = 0xA400000000000000LL;
  unint64_t v16 = v0[2];
  unint64_t v15 = v0[3];
  unint64_t v17 = v15 >> 1;
  unint64_t v18 = v16 + 1;
  if (v15 >> 1 <= v16)
  {
    uint64_t v0 = sub_1004C437C((void *)(v15 > 1), v16 + 1, 1, v0);
    unint64_t v15 = v0[3];
    unint64_t v17 = v15 >> 1;
  }

  v0[2] = v18;
  uint64_t v19 = &v0[5 * v16];
  *((_OWORD *)v19 + 2) = xmmword_100800BF0;
  v19[6] = 0xE600000000000000LL;
  v19[7] = 2779226096LL;
  v19[8] = 0xA400000000000000LL;
  int64_t v20 = v16 + 2;
  if (v17 <= v18) {
    uint64_t v0 = sub_1004C437C((void *)(v15 > 1), v20, 1, v0);
  }
  v0[2] = v20;
  uint64_t v21 = &v0[5 * v18];
  *((_OWORD *)v21 + 2) = xmmword_100800C00;
  v21[6] = 0xE400000000000000LL;
  v21[7] = 2442436592LL;
  v21[8] = 0xA400000000000000LL;
  unint64_t v23 = v0[2];
  unint64_t v22 = v0[3];
  unint64_t v24 = v22 >> 1;
  unint64_t v25 = v23 + 1;
  if (v22 >> 1 <= v23)
  {
    uint64_t v0 = sub_1004C437C((void *)(v22 > 1), v23 + 1, 1, v0);
    unint64_t v22 = v0[3];
    unint64_t v24 = v22 >> 1;
  }

  v0[2] = v25;
  uint64_t v26 = &v0[5 * v23];
  *((_OWORD *)v26 + 2) = xmmword_100800C10;
  v26[6] = 0xE700000000000000LL;
  v26[7] = 3014107120LL;
  v26[8] = 0xA400000000000000LL;
  int64_t v27 = v23 + 2;
  if (v24 <= v25) {
    uint64_t v0 = sub_1004C437C((void *)(v22 > 1), v27, 1, v0);
  }
  v0[2] = v27;
  v28 = &v0[5 * v25];
  *((_OWORD *)v28 + 2) = xmmword_100800C20;
  v28[6] = 0xE800000000000000LL;
  v28[7] = 0x8FB8EF8298E2LL;
  v28[8] = 0xA600000000000000LL;
  unint64_t v30 = v0[2];
  unint64_t v29 = v0[3];
  unint64_t v31 = v29 >> 1;
  unint64_t v32 = v30 + 1;
  if (v29 >> 1 <= v30)
  {
    uint64_t v0 = sub_1004C437C((void *)(v29 > 1), v30 + 1, 1, v0);
    unint64_t v29 = v0[3];
    unint64_t v31 = v29 >> 1;
  }

  v0[2] = v32;
  uint64_t v33 = &v0[5 * v30];
  *((_OWORD *)v33 + 2) = xmmword_100800C30;
  v33[6] = 0xE600000000000000LL;
  v33[7] = 3012730864LL;
  v33[8] = 0xA400000000000000LL;
  int64_t v34 = v30 + 2;
  if (v31 <= v32) {
    uint64_t v0 = sub_1004C437C((void *)(v29 > 1), v34, 1, v0);
  }
  v0[2] = v34;
  uint64_t v35 = &v0[5 * v32];
  *((_OWORD *)v35 + 2) = xmmword_100800C40;
  v35[6] = 0xEB00000000656D61LL;
  v35[7] = 2157486064LL;
  v35[8] = 0xA400000000000000LL;
  v36 = sub_1004C4270(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v38 = v36[2];
  unint64_t v37 = v36[3];
  if (v38 >= v37 >> 1) {
    v36 = sub_1004C4270((void *)(v37 > 1), v38 + 1, 1, v36);
  }
  v36[2] = v38 + 1;
  char v39 = &v36[4 * v38];
  *((_OWORD *)v39 + 2) = xmmword_100800C50;
  v39[6] = 0xE500000000000000LL;
  v39[7] = v0;
  return v36;
}

uint64_t type metadata accessor for DefaultConfigurationLayer(uint64_t a1)
{
  uint64_t result = qword_1009AD5B8;
  if (!qword_1009AD5B8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DefaultConfigurationLayer);
  }
  return result;
}

unint64_t sub_100421DD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100004AEC(&qword_10099E238);
  unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  unsigned __int8 v4 = *(_BYTE *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 48);
  unint64_t result = sub_10030D190(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  unint64_t v9 = (unint64_t *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_BYTE *)(v3[6] + result) = v4;
    unint64_t v10 = (uint64_t *)(v3[7] + 16 * result);
    *unint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    sub_10001736C(v5, v6);
    if (!--v1) {
      return (unint64_t)v3;
    }
    unsigned __int8 v4 = *((_BYTE *)v9 - 16);
    uint64_t v5 = *(v9 - 1);
    unint64_t v6 = *v9;
    unint64_t result = sub_10030D190(v4);
    v9 += 3;
    if ((v14 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_100421ED4(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_100004AEC(&qword_10099E3A0);
  unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)a1[5];
  unint64_t result = sub_10030D384(v4, v6);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v19 = v5;
    return (unint64_t)v3;
  }

  unint64_t v9 = (void **)(a1 + 7);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v10 = 8 * result;
    *(void *)(v3[6] + v10) = v4;
    *(void *)(v3[7] + v10) = v5;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    char v14 = v9 + 2;
    uint64_t v4 = (uint64_t)*(v9 - 1);
    unint64_t v15 = *v9;
    id v16 = v5;
    unint64_t result = sub_10030D384(v4, v17);
    unint64_t v9 = v14;
    uint64_t v5 = v15;
    if ((v18 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_100421FC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100004AEC(&qword_10099E1C8);
  unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  char v4 = *(_BYTE *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_10030D6BC(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }

  char v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1LL);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    BOOL v12 = v8 + 2;
    char v4 = *((_BYTE *)v8 - 8);
    uint64_t v13 = *v8;
    swift_bridgeObjectRetain(v5);
    unint64_t result = sub_10030D6BC(v4);
    char v8 = v12;
    uint64_t v5 = v13;
    if ((v14 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1004220C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a7)
  {
    swift_bridgeObjectRetain(a14);
    return swift_bridgeObjectRetain(a7);
  }

  return result;
}

uint64_t sub_1004220F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 168);
  __int128 v12 = *(_OWORD *)(a1 + 192);
  __int128 v13 = *(_OWORD *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 208);
  uint64_t v9 = *(void *)(a1 + 216);
  sub_1004221C0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104));
  sub_1004221C0(v14, v2, v3, v4, v5, v6, v7, v8, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10, v9);
  return a1;
}

uint64_t sub_1004221C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a7)
  {
    swift_bridgeObjectRelease(a7);
    return swift_bridgeObjectRelease(a14);
  }

  return result;
}

_OWORD *sub_1004221F0(_OWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (_OWORD *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }

    else
    {
      uint64_t v9 = *(void *)a2;
      sub_10001736C(*(void *)a2, *(void *)(a2 + 8));
      *(void *)uint64_t v4 = v9;
      *((void *)v4 + 1) = v7;
    }

    *((void *)v4 + 2) = *(void *)(a2 + 16);
    *((_WORD *)v4 + 12) = *(_WORD *)(a2 + 24);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
    *((_BYTE *)v4 + 40) = *(_BYTE *)(a2 + 40);
    *((void *)v4 + 6) = *(void *)(a2 + 48);
    *((_WORD *)v4 + 28) = *(_WORD *)(a2 + 56);
    uint64_t v375 = *(void *)(a2 + 64);
    *((void *)v4 + 8) = v375;
    *((_BYTE *)v4 + 72) = *(_BYTE *)(a2 + 72);
    uint64_t v374 = *(void *)(a2 + 88);
    *((void *)v4 + 10) = *(void *)(a2 + 80);
    *((void *)v4 + 11) = v374;
    *((void *)v4 + 12) = *(void *)(a2 + 96);
    *((_BYTE *)v4 + 104) = *(_BYTE *)(a2 + 104);
    *(_WORD *)((char *)v4 + 105) = *(_WORD *)(a2 + 105);
    *((void *)v4 + 14) = *(void *)(a2 + 112);
    *((_BYTE *)v4 + 120) = *(_BYTE *)(a2 + 120);
    *((void *)v4 + 16) = *(void *)(a2 + 128);
    *((_BYTE *)v4 + 136) = *(_BYTE *)(a2 + 136);
    uint64_t v10 = *(void *)(a2 + 144);
    *((_BYTE *)v4 + 152) = *(_BYTE *)(a2 + 152);
    *((void *)v4 + 18) = v10;
    *((_BYTE *)v4 + 168) = *(_BYTE *)(a2 + 168);
    *((void *)v4 + 20) = *(void *)(a2 + 160);
    *((_BYTE *)v4 + 184) = *(_BYTE *)(a2 + 184);
    *((void *)v4 + 22) = *(void *)(a2 + 176);
    *((_BYTE *)v4 + 200) = *(_BYTE *)(a2 + 200);
    *((void *)v4 + 24) = *(void *)(a2 + 192);
    *((_BYTE *)v4 + 216) = *(_BYTE *)(a2 + 216);
    *((void *)v4 + 26) = *(void *)(a2 + 208);
    uint64_t v11 = *(void *)(a2 + 224);
    *((_BYTE *)v4 + 232) = *(_BYTE *)(a2 + 232);
    *((void *)v4 + 28) = v11;
    uint64_t v12 = *(void *)(a2 + 240);
    *((_BYTE *)v4 + 248) = *(_BYTE *)(a2 + 248);
    *((void *)v4 + 30) = v12;
    uint64_t v13 = *(void *)(a2 + 256);
    *((_BYTE *)v4 + 264) = *(_BYTE *)(a2 + 264);
    *((void *)v4 + 32) = v13;
    *((_BYTE *)v4 + 265) = *(_BYTE *)(a2 + 265);
    uint64_t v14 = *(void *)(a2 + 280);
    uint64_t v373 = *(void *)(a2 + 272);
    *((_BYTE *)v4 + 288) = *(_BYTE *)(a2 + 288);
    *((void *)v4 + 34) = v373;
    *((void *)v4 + 35) = v14;
    uint64_t v15 = *(void *)(a2 + 296);
    *((_BYTE *)v4 + 304) = *(_BYTE *)(a2 + 304);
    *((void *)v4 + 37) = v15;
    uint64_t v16 = *(void *)(a2 + 312);
    *((_BYTE *)v4 + 320) = *(_BYTE *)(a2 + 320);
    *((void *)v4 + 39) = v16;
    uint64_t v17 = *(void *)(a2 + 328);
    *((_BYTE *)v4 + 336) = *(_BYTE *)(a2 + 336);
    *((void *)v4 + 41) = v17;
    uint64_t v18 = *(void *)(a2 + 344);
    *((_BYTE *)v4 + 352) = *(_BYTE *)(a2 + 352);
    *((void *)v4 + 43) = v18;
    uint64_t v19 = *(void *)(a2 + 360);
    *((_BYTE *)v4 + 368) = *(_BYTE *)(a2 + 368);
    *((void *)v4 + 45) = v19;
    uint64_t v20 = *(void *)(a2 + 376);
    *((_BYTE *)v4 + 384) = *(_BYTE *)(a2 + 384);
    *((void *)v4 + 47) = v20;
    uint64_t v21 = *(void *)(a2 + 392);
    *((_BYTE *)v4 + 400) = *(_BYTE *)(a2 + 400);
    *((void *)v4 + 49) = v21;
    uint64_t v22 = *(void *)(a2 + 408);
    *((_BYTE *)v4 + 416) = *(_BYTE *)(a2 + 416);
    *((void *)v4 + 51) = v22;
    uint64_t v23 = *(void *)(a2 + 424);
    *((_BYTE *)v4 + 432) = *(_BYTE *)(a2 + 432);
    *((void *)v4 + 53) = v23;
    *((_BYTE *)v4 + 433) = *(_BYTE *)(a2 + 433);
    uint64_t v24 = *(void *)(a2 + 440);
    *((_BYTE *)v4 + 448) = *(_BYTE *)(a2 + 448);
    *((void *)v4 + 55) = v24;
    uint64_t v25 = *(void *)(a2 + 456);
    *((_BYTE *)v4 + 464) = *(_BYTE *)(a2 + 464);
    *((void *)v4 + 57) = v25;
    uint64_t v26 = *(void *)(a2 + 472);
    *((_BYTE *)v4 + 480) = *(_BYTE *)(a2 + 480);
    *((void *)v4 + 59) = v26;
    uint64_t v27 = *(void *)(a2 + 488);
    *((_BYTE *)v4 + 496) = *(_BYTE *)(a2 + 496);
    *((void *)v4 + 61) = v27;
    uint64_t v28 = *(void *)(a2 + 504);
    *((_BYTE *)v4 + 512) = *(_BYTE *)(a2 + 512);
    *((void *)v4 + 63) = v28;
    uint64_t v29 = *(void *)(a2 + 520);
    *((_BYTE *)v4 + 528) = *(_BYTE *)(a2 + 528);
    *((void *)v4 + 65) = v29;
    uint64_t v30 = *(void *)(a2 + 536);
    *((_BYTE *)v4 + 544) = *(_BYTE *)(a2 + 544);
    *((void *)v4 + 67) = v30;
    uint64_t v31 = *(void *)(a2 + 552);
    *((void *)v4 + 69) = v31;
    uint64_t v32 = *(void *)(a2 + 560);
    *((_BYTE *)v4 + 568) = *(_BYTE *)(a2 + 568);
    *((void *)v4 + 70) = v32;
    uint64_t v33 = *(void *)(a2 + 576);
    *((_BYTE *)v4 + 584) = *(_BYTE *)(a2 + 584);
    *((void *)v4 + 72) = v33;
    int64_t v34 = *(void **)(a2 + 592);
    *((void *)v4 + 74) = v34;
    uint64_t v35 = *(void *)(a2 + 600);
    uint64_t v36 = *(void *)(a2 + 608);
    *((_BYTE *)v4 + 616) = *(_BYTE *)(a2 + 616);
    *((void *)v4 + 76) = v36;
    uint64_t v37 = *(void *)(a2 + 624);
    *((_BYTE *)v4 + 632) = *(_BYTE *)(a2 + 632);
    *((void *)v4 + 78) = v37;
    uint64_t v38 = *(void *)(a2 + 640);
    *((_BYTE *)v4 + 648) = *(_BYTE *)(a2 + 648);
    *((void *)v4 + 80) = v38;
    uint64_t v39 = *(void *)(a2 + 656);
    *((_BYTE *)v4 + 664) = *(_BYTE *)(a2 + 664);
    *((void *)v4 + 82) = v39;
    uint64_t v40 = *(void *)(a2 + 672);
    *((_BYTE *)v4 + 680) = *(_BYTE *)(a2 + 680);
    *((void *)v4 + 84) = v40;
    *((_BYTE *)v4 + 681) = *(_BYTE *)(a2 + 681);
    uint64_t v41 = a3[57];
    __dst = (char *)v4 + v41;
    v42 = (const void *)(a2 + v41);
    *((void *)v4 + 75) = v35;
    uint64_t v43 = type metadata accessor for UUID(0LL);
    uint64_t v44 = *(void *)(v43 - 8);
    char v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v44 + 48);
    swift_bridgeObjectRetain(v375);
    swift_bridgeObjectRetain(v374);
    swift_bridgeObjectRetain(v373);
    swift_bridgeObjectRetain(v31);
    id v46 = v34;
    __n128 v47 = swift_bridgeObjectRetain(v35);
    if (v45(v42, 1LL, v43, v47))
    {
      uint64_t v48 = sub_100004AEC(&qword_10099D8A0);
      memcpy(__dst, v42, *(void *)(*(void *)(v48 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v44 + 16))(__dst, v42, v43);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(__dst, 0LL, 1LL, v43);
    }

    uint64_t v49 = a3[58];
    v50 = (char *)v4 + v49;
    int v51 = (const void *)(a2 + v49);
    uint64_t v52 = type metadata accessor for Date(0LL);
    uint64_t v53 = *(void *)(v52 - 8);
    uint64_t v54 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v53 + 48);
    if (v54(v51, 1LL, v52))
    {
      uint64_t v55 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v50, v51, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v53 + 16))(v50, v51, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0LL, 1LL, v52);
    }

    uint64_t v56 = a3[59];
    uint64_t v57 = a3[60];
    char v58 = (char *)v4 + v56;
    uint64_t v59 = a2 + v56;
    *(void *)char v58 = *(void *)v59;
    v58[8] = *(_BYTE *)(v59 + 8);
    int v60 = (char *)v4 + v57;
    int v61 = (const void *)(a2 + v57);
    if (v54((const void *)(a2 + v57), 1LL, v52))
    {
      uint64_t v62 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v53 + 16))(v60, v61, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v60, 0LL, 1LL, v52);
    }

    uint64_t v63 = a3[61];
    uint64_t v64 = a3[62];
    int v65 = (char *)v4 + v63;
    uint64_t v66 = a2 + v63;
    *(void *)int v65 = *(void *)v66;
    v65[8] = *(_BYTE *)(v66 + 8);
    char v67 = (char *)v4 + v64;
    uint64_t v68 = a2 + v64;
    *(void *)char v67 = *(void *)v68;
    v67[8] = *(_BYTE *)(v68 + 8);
    uint64_t v69 = a3[63];
    uint64_t v70 = a3[64];
    char v71 = (char *)v4 + v69;
    uint64_t v72 = a2 + v69;
    *(void *)char v71 = *(void *)v72;
    v71[8] = *(_BYTE *)(v72 + 8);
    char v73 = (char *)v4 + v70;
    uint64_t v74 = a2 + v70;
    *(void *)char v73 = *(void *)v74;
    v73[8] = *(_BYTE *)(v74 + 8);
    uint64_t v75 = a3[65];
    char v76 = (char *)v4 + v75;
    v77 = (uint64_t *)(a2 + v75);
    uint64_t v78 = *v77;
    v76[8] = *((_BYTE *)v77 + 8);
    *(void *)char v76 = v78;
    uint64_t v79 = a3[66];
    int v80 = (char *)v4 + v79;
    uint64_t v81 = a2 + v79;
    v80[8] = *(_BYTE *)(v81 + 8);
    *(void *)int v80 = *(void *)v81;
    uint64_t v82 = a3[67];
    uint64_t v83 = (char *)v4 + v82;
    uint64_t v84 = a2 + v82;
    uint64_t v85 = *(void *)(v84 + 48);
    if (v85)
    {
      __int128 v86 = *(_OWORD *)(v84 + 16);
      *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
      *((_OWORD *)v83 + 1) = v86;
      *((_OWORD *)v83 + 2) = *(_OWORD *)(v84 + 32);
      *((void *)v83 + 6) = v85;
      *(_OWORD *)(v83 + 56) = *(_OWORD *)(v84 + 56);
      *(_OWORD *)(v83 + 72) = *(_OWORD *)(v84 + 72);
      *(_OWORD *)(v83 + 88) = *(_OWORD *)(v84 + 88);
      uint64_t v87 = *(void *)(v84 + 104);
      *((void *)v83 + 13) = v87;
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(v87);
    }

    else
    {
      __int128 v88 = *(_OWORD *)(v84 + 80);
      *((_OWORD *)v83 + 4) = *(_OWORD *)(v84 + 64);
      *((_OWORD *)v83 + 5) = v88;
      *((_OWORD *)v83 + 6) = *(_OWORD *)(v84 + 96);
      __int128 v89 = *(_OWORD *)(v84 + 16);
      *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
      *((_OWORD *)v83 + 1) = v89;
      __int128 v90 = *(_OWORD *)(v84 + 48);
      *((_OWORD *)v83 + 2) = *(_OWORD *)(v84 + 32);
      *((_OWORD *)v83 + 3) = v90;
    }

    *((_BYTE *)v4 + a3[68]) = *(_BYTE *)(a2 + a3[68]);
    *((_BYTE *)v4 + a3[69]) = *(_BYTE *)(a2 + a3[69]);
    *((_BYTE *)v4 + a3[70]) = *(_BYTE *)(a2 + a3[70]);
    uint64_t v91 = a3[71];
    char v92 = (char *)v4 + v91;
    uint64_t v93 = a2 + v91;
    *(void *)char v92 = *(void *)v93;
    v92[8] = *(_BYTE *)(v93 + 8);
    uint64_t v94 = a3[72];
    char v95 = (char *)v4 + v94;
    uint64_t v96 = a2 + v94;
    *(void *)char v95 = *(void *)v96;
    v95[8] = *(_BYTE *)(v96 + 8);
    uint64_t v97 = a3[73];
    BOOL v98 = (char *)v4 + v97;
    uint64_t v99 = a2 + v97;
    *(void *)BOOL v98 = *(void *)v99;
    v98[8] = *(_BYTE *)(v99 + 8);
    uint64_t v100 = a3[74];
    char v101 = (char *)v4 + v100;
    uint64_t v102 = a2 + v100;
    *(void *)char v101 = *(void *)v102;
    v101[8] = *(_BYTE *)(v102 + 8);
    uint64_t v103 = a3[75];
    char v104 = (char *)v4 + v103;
    char v105 = (uint64_t *)(a2 + v103);
    uint64_t v106 = *v105;
    v104[8] = *((_BYTE *)v105 + 8);
    *(void *)char v104 = v106;
    uint64_t v107 = a3[76];
    char v108 = (char *)v4 + v107;
    uint64_t v109 = a2 + v107;
    *(void *)char v108 = *(void *)v109;
    v108[8] = *(_BYTE *)(v109 + 8);
    uint64_t v110 = a3[77];
    v111 = (char *)v4 + v110;
    uint64_t v112 = a2 + v110;
    *(void *)v111 = *(void *)v112;
    v111[8] = *(_BYTE *)(v112 + 8);
    uint64_t v113 = a3[78];
    char v114 = (char *)v4 + v113;
    uint64_t v115 = a2 + v113;
    *(void *)char v114 = *(void *)v115;
    v114[8] = *(_BYTE *)(v115 + 8);
    uint64_t v116 = a3[79];
    uint64_t v117 = (char *)v4 + v116;
    uint64_t v118 = a2 + v116;
    *(void *)uint64_t v117 = *(void *)v118;
    v117[8] = *(_BYTE *)(v118 + 8);
    uint64_t v119 = a3[80];
    char v120 = (void *)((char *)v4 + v119);
    char v121 = (void *)(a2 + v119);
    uint64_t v122 = v121[1];
    *char v120 = *v121;
    v120[1] = v122;
    uint64_t v123 = a3[81];
    int v124 = (char *)v4 + v123;
    uint64_t v125 = a2 + v123;
    *(void *)int v124 = *(void *)v125;
    v124[8] = *(_BYTE *)(v125 + 8);
    uint64_t v126 = a3[82];
    uint64_t v127 = (void *)((char *)v4 + v126);
    uint64_t v128 = (void *)(a2 + v126);
    uint64_t v129 = v128[1];
    *uint64_t v127 = *v128;
    v127[1] = v129;
    uint64_t v130 = a3[83];
    v131 = (char *)v4 + v130;
    uint64_t v132 = a2 + v130;
    *(void *)v131 = *(void *)v132;
    v131[8] = *(_BYTE *)(v132 + 8);
    uint64_t v133 = a3[84];
    uint64_t v134 = *(void *)(a2 + v133);
    *(void *)((char *)v4 + v133) = v134;
    uint64_t v135 = a3[85];
    uint64_t v136 = (void *)((char *)v4 + v135);
    uint64_t v137 = (void *)(a2 + v135);
    uint64_t v138 = v137[1];
    *uint64_t v136 = *v137;
    v136[1] = v138;
    uint64_t v139 = a3[86];
    v140 = (char *)v4 + v139;
    uint64_t v141 = a2 + v139;
    *(void *)v140 = *(void *)v141;
    v140[8] = *(_BYTE *)(v141 + 8);
    *((_BYTE *)v4 + a3[87]) = *(_BYTE *)(a2 + a3[87]);
    *((_BYTE *)v4 + a3[88]) = *(_BYTE *)(a2 + a3[88]);
    *((_BYTE *)v4 + a3[89]) = *(_BYTE *)(a2 + a3[89]);
    *((_BYTE *)v4 + a3[90]) = *(_BYTE *)(a2 + a3[90]);
    uint64_t v142 = a3[91];
    uint64_t v143 = (char *)v4 + v142;
    uint64_t v144 = a2 + v142;
    *(void *)uint64_t v143 = *(void *)v144;
    v143[8] = *(_BYTE *)(v144 + 8);
    uint64_t v145 = a3[92];
    uint64_t v146 = (char *)v4 + v145;
    uint64_t v147 = a2 + v145;
    *(void *)uint64_t v146 = *(void *)v147;
    v146[8] = *(_BYTE *)(v147 + 8);
    uint64_t v148 = a3[93];
    uint64_t v149 = (char *)v4 + v148;
    uint64_t v150 = a2 + v148;
    *(void *)uint64_t v149 = *(void *)v150;
    v149[8] = *(_BYTE *)(v150 + 8);
    uint64_t v151 = a3[94];
    v152 = (char *)v4 + v151;
    uint64_t v153 = a2 + v151;
    *(void *)v152 = *(void *)v153;
    v152[8] = *(_BYTE *)(v153 + 8);
    uint64_t v154 = a3[95];
    char v155 = (char *)v4 + v154;
    v156 = (uint64_t *)(a2 + v154);
    uint64_t v157 = *v156;
    v155[8] = *((_BYTE *)v156 + 8);
    *(void *)char v155 = v157;
    uint64_t v158 = a3[96];
    uint64_t v159 = (char *)v4 + v158;
    uint64_t v160 = a2 + v158;
    *(void *)uint64_t v159 = *(void *)v160;
    v159[8] = *(_BYTE *)(v160 + 8);
    uint64_t v161 = a3[97];
    uint64_t v162 = (char *)v4 + v161;
    uint64_t v163 = a2 + v161;
    *(void *)uint64_t v162 = *(void *)v163;
    v162[8] = *(_BYTE *)(v163 + 8);
    uint64_t v164 = a3[98];
    uint64_t v165 = (char *)v4 + v164;
    uint64_t v166 = a2 + v164;
    *(void *)uint64_t v165 = *(void *)v166;
    v165[8] = *(_BYTE *)(v166 + 8);
    uint64_t v167 = a3[99];
    char v168 = (char *)v4 + v167;
    uint64_t v169 = a2 + v167;
    *(void *)char v168 = *(void *)v169;
    v168[8] = *(_BYTE *)(v169 + 8);
    uint64_t v170 = a3[100];
    v171 = (char *)v4 + v170;
    uint64_t v172 = a2 + v170;
    *(void *)v171 = *(void *)v172;
    v171[8] = *(_BYTE *)(v172 + 8);
    uint64_t v173 = a3[101];
    int v174 = (char *)v4 + v173;
    uint64_t v175 = a2 + v173;
    *(void *)int v174 = *(void *)v175;
    v174[8] = *(_BYTE *)(v175 + 8);
    uint64_t v176 = a3[102];
    char v177 = (char *)v4 + v176;
    uint64_t v178 = a2 + v176;
    *(void *)char v177 = *(void *)v178;
    v177[8] = *(_BYTE *)(v178 + 8);
    uint64_t v179 = a3[103];
    uint64_t v180 = (char *)v4 + v179;
    uint64_t v181 = a2 + v179;
    *(void *)uint64_t v180 = *(void *)v181;
    v180[8] = *(_BYTE *)(v181 + 8);
    uint64_t v182 = a3[104];
    v183 = (char *)v4 + v182;
    uint64_t v184 = a2 + v182;
    *(void *)v183 = *(void *)v184;
    v183[8] = *(_BYTE *)(v184 + 8);
    uint64_t v185 = a3[105];
    v186 = (char *)v4 + v185;
    uint64_t v187 = a2 + v185;
    *(void *)v186 = *(void *)v187;
    v186[8] = *(_BYTE *)(v187 + 8);
    uint64_t v188 = a3[106];
    int v189 = (char *)v4 + v188;
    uint64_t v190 = a2 + v188;
    *(void *)int v189 = *(void *)v190;
    v189[8] = *(_BYTE *)(v190 + 8);
    uint64_t v191 = a3[107];
    char v192 = (char *)v4 + v191;
    uint64_t v193 = a2 + v191;
    *(void *)char v192 = *(void *)v193;
    v192[8] = *(_BYTE *)(v193 + 8);
    uint64_t v194 = a3[108];
    uint64_t v195 = (char *)v4 + v194;
    uint64_t v196 = a2 + v194;
    *(void *)uint64_t v195 = *(void *)v196;
    v195[8] = *(_BYTE *)(v196 + 8);
    uint64_t v197 = a3[109];
    v198 = (char *)v4 + v197;
    uint64_t v199 = a2 + v197;
    *(void *)v198 = *(void *)v199;
    v198[8] = *(_BYTE *)(v199 + 8);
    uint64_t v200 = a3[110];
    uint64_t v201 = (char *)v4 + v200;
    uint64_t v202 = a2 + v200;
    *(void *)uint64_t v201 = *(void *)v202;
    v201[8] = *(_BYTE *)(v202 + 8);
    uint64_t v203 = a3[111];
    uint64_t v204 = (char *)v4 + v203;
    uint64_t v205 = a2 + v203;
    *(void *)uint64_t v204 = *(void *)v205;
    v204[8] = *(_BYTE *)(v205 + 8);
    uint64_t v206 = a3[112];
    uint64_t v207 = (char *)v4 + v206;
    uint64_t v208 = a2 + v206;
    *(void *)uint64_t v207 = *(void *)v208;
    v207[8] = *(_BYTE *)(v208 + 8);
    *((_BYTE *)v4 + a3[113]) = *(_BYTE *)(a2 + a3[113]);
    uint64_t v209 = a3[114];
    uint64_t v210 = (char *)v4 + v209;
    uint64_t v211 = a2 + v209;
    *(void *)uint64_t v210 = *(void *)v211;
    v210[8] = *(_BYTE *)(v211 + 8);
    uint64_t v212 = a3[115];
    uint64_t v213 = (char *)v4 + v212;
    uint64_t v214 = a2 + v212;
    *(void *)uint64_t v213 = *(void *)v214;
    v213[8] = *(_BYTE *)(v214 + 8);
    uint64_t v215 = a3[116];
    uint64_t v216 = (char *)v4 + v215;
    uint64_t v217 = a2 + v215;
    *(void *)uint64_t v216 = *(void *)v217;
    v216[8] = *(_BYTE *)(v217 + 8);
    *((_BYTE *)v4 + a3[117]) = *(_BYTE *)(a2 + a3[117]);
    *((_BYTE *)v4 + a3[118]) = *(_BYTE *)(a2 + a3[118]);
    *((_BYTE *)v4 + a3[119]) = *(_BYTE *)(a2 + a3[119]);
    uint64_t v218 = a3[120];
    uint64_t v219 = (char *)v4 + v218;
    uint64_t v220 = a2 + v218;
    *(void *)uint64_t v219 = *(void *)v220;
    v219[8] = *(_BYTE *)(v220 + 8);
    uint64_t v221 = a3[121];
    uint64_t v222 = (char *)v4 + v221;
    uint64_t v223 = a2 + v221;
    *(void *)uint64_t v222 = *(void *)v223;
    v222[8] = *(_BYTE *)(v223 + 8);
    uint64_t v224 = a3[122];
    uint64_t v225 = (char *)v4 + v224;
    uint64_t v226 = a2 + v224;
    *(void *)uint64_t v225 = *(void *)v226;
    v225[8] = *(_BYTE *)(v226 + 8);
    uint64_t v227 = a3[123];
    uint64_t v228 = (char *)v4 + v227;
    uint64_t v229 = a2 + v227;
    *(void *)uint64_t v228 = *(void *)v229;
    v228[8] = *(_BYTE *)(v229 + 8);
    uint64_t v230 = a3[124];
    uint64_t v231 = (char *)v4 + v230;
    uint64_t v232 = (uint64_t *)(a2 + v230);
    uint64_t v233 = *v232;
    v231[8] = *((_BYTE *)v232 + 8);
    *(void *)uint64_t v231 = v233;
    uint64_t v234 = a3[125];
    uint64_t v235 = (char *)v4 + v234;
    uint64_t v236 = a2 + v234;
    *(void *)uint64_t v235 = *(void *)v236;
    v235[8] = *(_BYTE *)(v236 + 8);
    uint64_t v237 = a3[126];
    uint64_t v238 = (char *)v4 + v237;
    uint64_t v239 = a2 + v237;
    *(void *)uint64_t v238 = *(void *)v239;
    v238[8] = *(_BYTE *)(v239 + 8);
    uint64_t v240 = a3[127];
    uint64_t v241 = (char *)v4 + v240;
    uint64_t v242 = a2 + v240;
    *(void *)uint64_t v241 = *(void *)v242;
    v241[8] = *(_BYTE *)(v242 + 8);
    *((_BYTE *)v4 + a3[128]) = *(_BYTE *)(a2 + a3[128]);
    uint64_t v243 = a3[129];
    uint64_t v244 = (char *)v4 + v243;
    uint64_t v245 = a2 + v243;
    *(void *)uint64_t v244 = *(void *)v245;
    v244[8] = *(_BYTE *)(v245 + 8);
    uint64_t v246 = a3[130];
    uint64_t v247 = *(void *)(a2 + v246);
    *(void *)((char *)v4 + v246) = v247;
    uint64_t v248 = a3[131];
    uint64_t v249 = (char *)v4 + v248;
    uint64_t v250 = a2 + v248;
    *(void *)uint64_t v249 = *(void *)v250;
    v249[8] = *(_BYTE *)(v250 + 8);
    *((_BYTE *)v4 + a3[132]) = *(_BYTE *)(a2 + a3[132]);
    uint64_t v251 = a3[133];
    uint64_t v252 = *(void *)(a2 + v251);
    *(void *)((char *)v4 + v251) = v252;
    *((_BYTE *)v4 + a3[134]) = *(_BYTE *)(a2 + a3[134]);
    uint64_t v253 = a3[135];
    uint64_t v254 = (char *)v4 + v253;
    uint64_t v255 = a2 + v253;
    *(void *)uint64_t v254 = *(void *)v255;
    v254[8] = *(_BYTE *)(v255 + 8);
    uint64_t v256 = a3[136];
    uint64_t v257 = (char *)v4 + v256;
    uint64_t v258 = a2 + v256;
    *(void *)uint64_t v257 = *(void *)v258;
    v257[8] = *(_BYTE *)(v258 + 8);
    *((_BYTE *)v4 + a3[137]) = *(_BYTE *)(a2 + a3[137]);
    *((_BYTE *)v4 + a3[138]) = *(_BYTE *)(a2 + a3[138]);
    uint64_t v259 = a3[139];
    uint64_t v260 = (char *)v4 + v259;
    uint64_t v261 = a2 + v259;
    *(void *)uint64_t v260 = *(void *)v261;
    v260[8] = *(_BYTE *)(v261 + 8);
    uint64_t v262 = a3[140];
    BOOL v263 = (char *)v4 + v262;
    uint64_t v264 = a2 + v262;
    *(void *)BOOL v263 = *(void *)v264;
    v263[8] = *(_BYTE *)(v264 + 8);
    uint64_t v265 = a3[141];
    int v266 = (char *)v4 + v265;
    uint64_t v267 = a2 + v265;
    *(void *)int v266 = *(void *)v267;
    v266[8] = *(_BYTE *)(v267 + 8);
    uint64_t v268 = a3[142];
    int v269 = (char *)v4 + v268;
    uint64_t v270 = a2 + v268;
    *(void *)int v269 = *(void *)v270;
    v269[8] = *(_BYTE *)(v270 + 8);
    uint64_t v271 = a3[143];
    uint64_t v272 = (char *)v4 + v271;
    v273 = (uint64_t *)(a2 + v271);
    uint64_t v274 = *v273;
    v272[8] = *((_BYTE *)v273 + 8);
    *(void *)uint64_t v272 = v274;
    uint64_t v275 = a3[144];
    int v276 = (char *)v4 + v275;
    uint64_t v277 = a2 + v275;
    *(void *)int v276 = *(void *)v277;
    v276[8] = *(_BYTE *)(v277 + 8);
    uint64_t v278 = a3[145];
    char v279 = (char *)v4 + v278;
    uint64_t v280 = a2 + v278;
    *(void *)char v279 = *(void *)v280;
    v279[8] = *(_BYTE *)(v280 + 8);
    uint64_t v281 = a3[146];
    uint64_t v282 = (char *)v4 + v281;
    uint64_t v283 = a2 + v281;
    *(void *)uint64_t v282 = *(void *)v283;
    v282[8] = *(_BYTE *)(v283 + 8);
    uint64_t v284 = a3[147];
    v285 = (char *)v4 + v284;
    uint64_t v286 = a2 + v284;
    *(void *)v285 = *(void *)v286;
    v285[8] = *(_BYTE *)(v286 + 8);
    uint64_t v287 = a3[148];
    v288 = (char *)v4 + v287;
    uint64_t v289 = a2 + v287;
    *(void *)v288 = *(void *)v289;
    v288[8] = *(_BYTE *)(v289 + 8);
    uint64_t v290 = a3[149];
    int v291 = (char *)v4 + v290;
    uint64_t v292 = a2 + v290;
    *(void *)int v291 = *(void *)v292;
    v291[8] = *(_BYTE *)(v292 + 8);
    uint64_t v293 = a3[150];
    char v294 = (char *)v4 + v293;
    uint64_t v295 = a2 + v293;
    *(void *)char v294 = *(void *)v295;
    v294[8] = *(_BYTE *)(v295 + 8);
    uint64_t v296 = a3[151];
    uint64_t v297 = (char *)v4 + v296;
    uint64_t v298 = a2 + v296;
    *(void *)uint64_t v297 = *(void *)v298;
    v297[8] = *(_BYTE *)(v298 + 8);
    uint64_t v299 = a3[152];
    v300 = (char *)v4 + v299;
    uint64_t v301 = a2 + v299;
    *(void *)v300 = *(void *)v301;
    v300[8] = *(_BYTE *)(v301 + 8);
    uint64_t v302 = a3[153];
    v303 = (char *)v4 + v302;
    uint64_t v304 = a2 + v302;
    *(void *)v303 = *(void *)v304;
    v303[8] = *(_BYTE *)(v304 + 8);
    uint64_t v305 = a3[154];
    int v306 = (char *)v4 + v305;
    uint64_t v307 = a2 + v305;
    *(void *)int v306 = *(void *)v307;
    v306[8] = *(_BYTE *)(v307 + 8);
    uint64_t v308 = a3[155];
    char v309 = (char *)v4 + v308;
    uint64_t v310 = a2 + v308;
    *(void *)char v309 = *(void *)v310;
    v309[8] = *(_BYTE *)(v310 + 8);
    uint64_t v311 = a3[156];
    uint64_t v312 = (char *)v4 + v311;
    uint64_t v313 = a2 + v311;
    *(void *)uint64_t v312 = *(void *)v313;
    v312[8] = *(_BYTE *)(v313 + 8);
    *((_BYTE *)v4 + a3[157]) = *(_BYTE *)(a2 + a3[157]);
    uint64_t v314 = a3[158];
    v315 = (char *)v4 + v314;
    uint64_t v316 = a2 + v314;
    *(void *)v315 = *(void *)v316;
    v315[8] = *(_BYTE *)(v316 + 8);
    uint64_t v317 = a3[159];
    v318 = (char *)v4 + v317;
    uint64_t v319 = a2 + v317;
    *(void *)v318 = *(void *)v319;
    v318[8] = *(_BYTE *)(v319 + 8);
    uint64_t v320 = a3[160];
    uint64_t v321 = (char *)v4 + v320;
    uint64_t v322 = a2 + v320;
    *(void *)uint64_t v321 = *(void *)v322;
    v321[8] = *(_BYTE *)(v322 + 8);
    uint64_t v323 = a3[161];
    v324 = (void *)((char *)v4 + v323);
    char v325 = (void *)(a2 + v323);
    uint64_t v326 = v325[1];
    void *v324 = *v325;
    v324[1] = v326;
    uint64_t v327 = a3[162];
    uint64_t v328 = (char *)v4 + v327;
    uint64_t v329 = a2 + v327;
    *(void *)uint64_t v328 = *(void *)v329;
    uint64_t v330 = a3[163];
    char v331 = *(_BYTE *)(a2 + v330);
    v328[8] = *(_BYTE *)(v329 + 8);
    *((_BYTE *)v4 + v330) = v331;
    *((_BYTE *)v4 + a3[164]) = *(_BYTE *)(a2 + a3[164]);
    uint64_t v332 = a3[165];
    char v333 = (char *)v4 + v332;
    uint64_t v334 = a2 + v332;
    *(void *)char v333 = *(void *)v334;
    v333[8] = *(_BYTE *)(v334 + 8);
    uint64_t v335 = a3[166];
    char v336 = (char *)v4 + v335;
    uint64_t v337 = a2 + v335;
    *(void *)char v336 = *(void *)v337;
    uint64_t v338 = a3[167];
    char v339 = *(_BYTE *)(a2 + v338);
    v336[8] = *(_BYTE *)(v337 + 8);
    *((_BYTE *)v4 + v338) = v339;
    uint64_t v340 = a3[168];
    v341 = (char *)v4 + v340;
    uint64_t v342 = a2 + v340;
    *(_DWORD *)v341 = *(_DWORD *)v342;
    v341[4] = *(_BYTE *)(v342 + 4);
    uint64_t v343 = a3[169];
    uint64_t v344 = (char *)v4 + v343;
    uint64_t v345 = a2 + v343;
    *(void *)uint64_t v344 = *(void *)v345;
    v344[8] = *(_BYTE *)(v345 + 8);
    uint64_t v346 = a3[170];
    char v347 = (char *)v4 + v346;
    uint64_t v348 = a2 + v346;
    *(void *)char v347 = *(void *)v348;
    v347[8] = *(_BYTE *)(v348 + 8);
    uint64_t v349 = a3[171];
    char v350 = (char *)v4 + v349;
    uint64_t v351 = a2 + v349;
    *(void *)char v350 = *(void *)v351;
    v350[8] = *(_BYTE *)(v351 + 8);
    uint64_t v352 = a3[172];
    uint64_t v353 = (char *)v4 + v352;
    int v354 = (uint64_t *)(a2 + v352);
    uint64_t v355 = *v354;
    v353[8] = *((_BYTE *)v354 + 8);
    *(void *)uint64_t v353 = v355;
    uint64_t v356 = a3[173];
    uint64_t v357 = (char *)v4 + v356;
    uint64_t v358 = a2 + v356;
    *(void *)uint64_t v357 = *(void *)v358;
    v357[8] = *(_BYTE *)(v358 + 8);
    uint64_t v359 = a3[174];
    BOOL v360 = (char *)v4 + v359;
    uint64_t v361 = a2 + v359;
    *(void *)BOOL v360 = *(void *)v361;
    v360[8] = *(_BYTE *)(v361 + 8);
    uint64_t v362 = a3[175];
    int v363 = (char *)v4 + v362;
    uint64_t v364 = a2 + v362;
    *(void *)int v363 = *(void *)v364;
    v363[8] = *(_BYTE *)(v364 + 8);
    *((_BYTE *)v4 + a3[176]) = *(_BYTE *)(a2 + a3[176]);
    uint64_t v365 = a3[177];
    int v366 = (char *)v4 + v365;
    uint64_t v367 = a2 + v365;
    *(void *)int v366 = *(void *)v367;
    v366[8] = *(_BYTE *)(v367 + 8);
    uint64_t v368 = a3[178];
    uint64_t v369 = (char *)v4 + v368;
    uint64_t v370 = a2 + v368;
    *(void *)uint64_t v369 = *(void *)v370;
    v369[8] = *(_BYTE *)(v370 + 8);
    swift_bridgeObjectRetain(v122);
    swift_bridgeObjectRetain(v129);
    swift_bridgeObjectRetain(v134);
    swift_bridgeObjectRetain(v138);
    swift_bridgeObjectRetain(v247);
    swift_bridgeObjectRetain(v252);
    swift_bridgeObjectRetain(v326);
  }

  return v4;
}

uint64_t sub_1004232EC(uint64_t a1, int *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >> 60 != 15) {
    sub_100016F9C(*(void *)a1, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[57];
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = a1 + a2[58];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1LL, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = a1 + a2[60];
  if (!v11(v12, 1LL, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  if (*(void *)(a1 + a2[67] + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10042348C(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v7 = *a2;
    sub_10001736C(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }

  *(void *)(a1 + 16) = a2[2];
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(void *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(void *)(a1 + 48) = a2[6];
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  uint64_t v373 = a2[8];
  *(void *)(a1 + 64) = v373;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  uint64_t v372 = a2[11];
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = v372;
  *(void *)(a1 + 96) = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)((char *)a2 + 105);
  *(void *)(a1 + 112) = a2[14];
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(void *)(a1 + 128) = a2[16];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  uint64_t v8 = a2[18];
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(void *)(a1 + 144) = v8;
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  *(void *)(a1 + 160) = a2[20];
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  *(void *)(a1 + 176) = a2[22];
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  *(void *)(a1 + 192) = a2[24];
  *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
  *(void *)(a1 + 208) = a2[26];
  uint64_t v9 = a2[28];
  *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
  *(void *)(a1 + 224) = v9;
  uint64_t v10 = a2[30];
  *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
  *(void *)(a1 + 240) = v10;
  uint64_t v11 = a2[32];
  *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
  *(void *)(a1 + 256) = v11;
  *(_BYTE *)(a1 + 265) = *((_BYTE *)a2 + 265);
  uint64_t v12 = a2[35];
  uint64_t v371 = a2[34];
  *(_BYTE *)(a1 + 288) = *((_BYTE *)a2 + 288);
  *(void *)(a1 + 272) = v371;
  *(void *)(a1 + 280) = v12;
  uint64_t v13 = a2[37];
  *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
  *(void *)(a1 + 296) = v13;
  uint64_t v14 = a2[39];
  *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
  *(void *)(a1 + 312) = v14;
  uint64_t v15 = a2[41];
  *(_BYTE *)(a1 + 336) = *((_BYTE *)a2 + 336);
  *(void *)(a1 + 328) = v15;
  uint64_t v16 = a2[43];
  *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
  *(void *)(a1 + 344) = v16;
  uint64_t v17 = a2[45];
  *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 368);
  *(void *)(a1 + 360) = v17;
  uint64_t v18 = a2[47];
  *(_BYTE *)(a1 + 384) = *((_BYTE *)a2 + 384);
  *(void *)(a1 + 376) = v18;
  uint64_t v19 = a2[49];
  *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
  *(void *)(a1 + 392) = v19;
  uint64_t v20 = a2[51];
  *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 416);
  *(void *)(a1 + 408) = v20;
  uint64_t v21 = a2[53];
  *(_BYTE *)(a1 + 432) = *((_BYTE *)a2 + 432);
  *(void *)(a1 + 424) = v21;
  *(_BYTE *)(a1 + 433) = *((_BYTE *)a2 + 433);
  uint64_t v22 = a2[55];
  *(_BYTE *)(a1 + 448) = *((_BYTE *)a2 + 448);
  *(void *)(a1 + 440) = v22;
  uint64_t v23 = a2[57];
  *(_BYTE *)(a1 + 464) = *((_BYTE *)a2 + 464);
  *(void *)(a1 + 456) = v23;
  uint64_t v24 = a2[59];
  *(_BYTE *)(a1 + 480) = *((_BYTE *)a2 + 480);
  *(void *)(a1 + 472) = v24;
  uint64_t v25 = a2[61];
  *(_BYTE *)(a1 + 496) = *((_BYTE *)a2 + 496);
  *(void *)(a1 + 488) = v25;
  uint64_t v26 = a2[63];
  *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
  *(void *)(a1 + 504) = v26;
  uint64_t v27 = a2[65];
  *(_BYTE *)(a1 + 528) = *((_BYTE *)a2 + 528);
  *(void *)(a1 + 520) = v27;
  uint64_t v28 = a2[67];
  *(_BYTE *)(a1 + 544) = *((_BYTE *)a2 + 544);
  *(void *)(a1 + 536) = v28;
  uint64_t v29 = a2[69];
  *(void *)(a1 + 552) = v29;
  uint64_t v30 = a2[70];
  *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
  *(void *)(a1 + 560) = v30;
  uint64_t v31 = a2[72];
  *(_BYTE *)(a1 + 584) = *((_BYTE *)a2 + 584);
  *(void *)(a1 + 576) = v31;
  uint64_t v32 = (void *)a2[74];
  *(void *)(a1 + 592) = v32;
  uint64_t v33 = a2[75];
  uint64_t v34 = a2[76];
  *(_BYTE *)(a1 + 616) = *((_BYTE *)a2 + 616);
  *(void *)(a1 + 608) = v34;
  uint64_t v35 = a2[78];
  *(_BYTE *)(a1 + 632) = *((_BYTE *)a2 + 632);
  *(void *)(a1 + 624) = v35;
  uint64_t v36 = a2[80];
  *(_BYTE *)(a1 + 648) = *((_BYTE *)a2 + 648);
  *(void *)(a1 + 640) = v36;
  uint64_t v37 = a2[82];
  *(_BYTE *)(a1 + 664) = *((_BYTE *)a2 + 664);
  *(void *)(a1 + 656) = v37;
  uint64_t v38 = a2[84];
  *(_BYTE *)(a1 + 680) = *((_BYTE *)a2 + 680);
  *(void *)(a1 + 672) = v38;
  *(_BYTE *)(a1 + 681) = *((_BYTE *)a2 + 681);
  uint64_t v39 = a3[57];
  __dst = (void *)(a1 + v39);
  uint64_t v40 = (char *)a2 + v39;
  *(void *)(a1 + 600) = v33;
  uint64_t v41 = type metadata accessor for UUID(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v42 + 48);
  swift_bridgeObjectRetain(v373);
  swift_bridgeObjectRetain(v372);
  swift_bridgeObjectRetain(v371);
  swift_bridgeObjectRetain(v29);
  id v44 = v32;
  __n128 v45 = swift_bridgeObjectRetain(v33);
  if (v43(v40, 1LL, v41, v45))
  {
    uint64_t v46 = sub_100004AEC(&qword_10099D8A0);
    memcpy(__dst, v40, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v42 + 16))(__dst, v40, v41);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(__dst, 0LL, 1LL, v41);
  }

  uint64_t v47 = a3[58];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = type metadata accessor for Date(0LL);
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v51 + 48);
  if (v52(v49, 1LL, v50))
  {
    uint64_t v53 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0LL, 1LL, v50);
  }

  uint64_t v54 = a3[59];
  uint64_t v55 = a3[60];
  uint64_t v56 = a1 + v54;
  uint64_t v57 = (uint64_t)a2 + v54;
  *(void *)uint64_t v56 = *(void *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  char v58 = (void *)(a1 + v55);
  uint64_t v59 = (char *)a2 + v55;
  if (v52((char *)a2 + v55, 1LL, v50))
  {
    uint64_t v60 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v51 + 16))(v58, v59, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v58, 0LL, 1LL, v50);
  }

  uint64_t v61 = a3[61];
  uint64_t v62 = a3[62];
  uint64_t v63 = a1 + v61;
  uint64_t v64 = (uint64_t)a2 + v61;
  *(void *)uint64_t v63 = *(void *)v64;
  *(_BYTE *)(v63 + 8) = *(_BYTE *)(v64 + 8);
  uint64_t v65 = a1 + v62;
  uint64_t v66 = (uint64_t)a2 + v62;
  *(void *)uint64_t v65 = *(void *)v66;
  *(_BYTE *)(v65 + 8) = *(_BYTE *)(v66 + 8);
  uint64_t v67 = a3[63];
  uint64_t v68 = a3[64];
  uint64_t v69 = a1 + v67;
  uint64_t v70 = (uint64_t)a2 + v67;
  *(void *)uint64_t v69 = *(void *)v70;
  *(_BYTE *)(v69 + 8) = *(_BYTE *)(v70 + 8);
  uint64_t v71 = a1 + v68;
  uint64_t v72 = (uint64_t)a2 + v68;
  *(void *)uint64_t v71 = *(void *)v72;
  *(_BYTE *)(v71 + 8) = *(_BYTE *)(v72 + 8);
  uint64_t v73 = a3[65];
  uint64_t v74 = a1 + v73;
  uint64_t v75 = (uint64_t *)((char *)a2 + v73);
  uint64_t v76 = *v75;
  *(_BYTE *)(v74 + 8) = *((_BYTE *)v75 + 8);
  *(void *)uint64_t v74 = v76;
  uint64_t v77 = a3[66];
  uint64_t v78 = a1 + v77;
  uint64_t v79 = (uint64_t)a2 + v77;
  *(_BYTE *)(v78 + 8) = *(_BYTE *)(v79 + 8);
  *(void *)uint64_t v78 = *(void *)v79;
  uint64_t v80 = a3[67];
  uint64_t v81 = a1 + v80;
  uint64_t v82 = (uint64_t)a2 + v80;
  uint64_t v83 = *(void *)(v82 + 48);
  if (v83)
  {
    __int128 v84 = *(_OWORD *)(v82 + 16);
    *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
    *(_OWORD *)(v81 + 16) = v84;
    *(_OWORD *)(v81 + 32) = *(_OWORD *)(v82 + 32);
    *(void *)(v81 + 48) = v83;
    *(_OWORD *)(v81 + 56) = *(_OWORD *)(v82 + 56);
    *(_OWORD *)(v81 + 72) = *(_OWORD *)(v82 + 72);
    *(_OWORD *)(v81 + 88) = *(_OWORD *)(v82 + 88);
    uint64_t v85 = *(void *)(v82 + 104);
    *(void *)(v81 + 104) = v85;
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v85);
  }

  else
  {
    __int128 v86 = *(_OWORD *)(v82 + 80);
    *(_OWORD *)(v81 + 64) = *(_OWORD *)(v82 + 64);
    *(_OWORD *)(v81 + 80) = v86;
    *(_OWORD *)(v81 + 96) = *(_OWORD *)(v82 + 96);
    __int128 v87 = *(_OWORD *)(v82 + 16);
    *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
    *(_OWORD *)(v81 + 16) = v87;
    __int128 v88 = *(_OWORD *)(v82 + 48);
    *(_OWORD *)(v81 + 32) = *(_OWORD *)(v82 + 32);
    *(_OWORD *)(v81 + 48) = v88;
  }

  *(_BYTE *)(a1 + a3[68]) = *((_BYTE *)a2 + a3[68]);
  *(_BYTE *)(a1 + a3[69]) = *((_BYTE *)a2 + a3[69]);
  *(_BYTE *)(a1 + a3[70]) = *((_BYTE *)a2 + a3[70]);
  uint64_t v89 = a3[71];
  uint64_t v90 = a1 + v89;
  uint64_t v91 = (uint64_t)a2 + v89;
  *(void *)uint64_t v90 = *(void *)v91;
  *(_BYTE *)(v90 + 8) = *(_BYTE *)(v91 + 8);
  uint64_t v92 = a3[72];
  uint64_t v93 = a1 + v92;
  uint64_t v94 = (uint64_t)a2 + v92;
  *(void *)uint64_t v93 = *(void *)v94;
  *(_BYTE *)(v93 + 8) = *(_BYTE *)(v94 + 8);
  uint64_t v95 = a3[73];
  uint64_t v96 = a1 + v95;
  uint64_t v97 = (uint64_t)a2 + v95;
  *(void *)uint64_t v96 = *(void *)v97;
  *(_BYTE *)(v96 + 8) = *(_BYTE *)(v97 + 8);
  uint64_t v98 = a3[74];
  uint64_t v99 = a1 + v98;
  uint64_t v100 = (uint64_t)a2 + v98;
  *(void *)uint64_t v99 = *(void *)v100;
  *(_BYTE *)(v99 + 8) = *(_BYTE *)(v100 + 8);
  uint64_t v101 = a3[75];
  uint64_t v102 = a1 + v101;
  uint64_t v103 = (uint64_t *)((char *)a2 + v101);
  uint64_t v104 = *v103;
  *(_BYTE *)(v102 + 8) = *((_BYTE *)v103 + 8);
  *(void *)uint64_t v102 = v104;
  uint64_t v105 = a3[76];
  uint64_t v106 = a1 + v105;
  uint64_t v107 = (uint64_t)a2 + v105;
  *(void *)uint64_t v106 = *(void *)v107;
  *(_BYTE *)(v106 + 8) = *(_BYTE *)(v107 + 8);
  uint64_t v108 = a3[77];
  uint64_t v109 = a1 + v108;
  uint64_t v110 = (uint64_t)a2 + v108;
  *(void *)uint64_t v109 = *(void *)v110;
  *(_BYTE *)(v109 + 8) = *(_BYTE *)(v110 + 8);
  uint64_t v111 = a3[78];
  uint64_t v112 = a1 + v111;
  uint64_t v113 = (uint64_t)a2 + v111;
  *(void *)uint64_t v112 = *(void *)v113;
  *(_BYTE *)(v112 + 8) = *(_BYTE *)(v113 + 8);
  uint64_t v114 = a3[79];
  uint64_t v115 = a1 + v114;
  uint64_t v116 = (uint64_t)a2 + v114;
  *(void *)uint64_t v115 = *(void *)v116;
  *(_BYTE *)(v115 + 8) = *(_BYTE *)(v116 + 8);
  uint64_t v117 = a3[80];
  uint64_t v118 = (void *)(a1 + v117);
  uint64_t v119 = (uint64_t *)((char *)a2 + v117);
  uint64_t v120 = v119[1];
  *uint64_t v118 = *v119;
  v118[1] = v120;
  uint64_t v121 = a3[81];
  uint64_t v122 = a1 + v121;
  uint64_t v123 = (uint64_t)a2 + v121;
  *(void *)uint64_t v122 = *(void *)v123;
  *(_BYTE *)(v122 + 8) = *(_BYTE *)(v123 + 8);
  uint64_t v124 = a3[82];
  uint64_t v125 = (void *)(a1 + v124);
  uint64_t v126 = (uint64_t *)((char *)a2 + v124);
  uint64_t v127 = v126[1];
  *uint64_t v125 = *v126;
  v125[1] = v127;
  uint64_t v128 = a3[83];
  uint64_t v129 = a1 + v128;
  uint64_t v130 = (uint64_t)a2 + v128;
  *(void *)uint64_t v129 = *(void *)v130;
  *(_BYTE *)(v129 + 8) = *(_BYTE *)(v130 + 8);
  uint64_t v131 = a3[84];
  uint64_t v132 = *(uint64_t *)((char *)a2 + v131);
  *(void *)(a1 + v131) = v132;
  uint64_t v133 = a3[85];
  uint64_t v134 = (void *)(a1 + v133);
  uint64_t v135 = (uint64_t *)((char *)a2 + v133);
  uint64_t v136 = v135[1];
  *uint64_t v134 = *v135;
  v134[1] = v136;
  uint64_t v137 = a3[86];
  uint64_t v138 = a1 + v137;
  uint64_t v139 = (uint64_t)a2 + v137;
  *(void *)uint64_t v138 = *(void *)v139;
  *(_BYTE *)(v138 + 8) = *(_BYTE *)(v139 + 8);
  *(_BYTE *)(a1 + a3[87]) = *((_BYTE *)a2 + a3[87]);
  *(_BYTE *)(a1 + a3[88]) = *((_BYTE *)a2 + a3[88]);
  *(_BYTE *)(a1 + a3[89]) = *((_BYTE *)a2 + a3[89]);
  *(_BYTE *)(a1 + a3[90]) = *((_BYTE *)a2 + a3[90]);
  uint64_t v140 = a3[91];
  uint64_t v141 = a1 + v140;
  uint64_t v142 = (uint64_t)a2 + v140;
  *(void *)uint64_t v141 = *(void *)v142;
  *(_BYTE *)(v141 + 8) = *(_BYTE *)(v142 + 8);
  uint64_t v143 = a3[92];
  uint64_t v144 = a1 + v143;
  uint64_t v145 = (uint64_t)a2 + v143;
  *(void *)uint64_t v144 = *(void *)v145;
  *(_BYTE *)(v144 + 8) = *(_BYTE *)(v145 + 8);
  uint64_t v146 = a3[93];
  uint64_t v147 = a1 + v146;
  uint64_t v148 = (uint64_t)a2 + v146;
  *(void *)uint64_t v147 = *(void *)v148;
  *(_BYTE *)(v147 + 8) = *(_BYTE *)(v148 + 8);
  uint64_t v149 = a3[94];
  uint64_t v150 = a1 + v149;
  uint64_t v151 = (uint64_t)a2 + v149;
  *(void *)uint64_t v150 = *(void *)v151;
  *(_BYTE *)(v150 + 8) = *(_BYTE *)(v151 + 8);
  uint64_t v152 = a3[95];
  uint64_t v153 = a1 + v152;
  uint64_t v154 = (uint64_t *)((char *)a2 + v152);
  uint64_t v155 = *v154;
  *(_BYTE *)(v153 + 8) = *((_BYTE *)v154 + 8);
  *(void *)uint64_t v153 = v155;
  uint64_t v156 = a3[96];
  uint64_t v157 = a1 + v156;
  uint64_t v158 = (uint64_t)a2 + v156;
  *(void *)uint64_t v157 = *(void *)v158;
  *(_BYTE *)(v157 + 8) = *(_BYTE *)(v158 + 8);
  uint64_t v159 = a3[97];
  uint64_t v160 = a1 + v159;
  uint64_t v161 = (uint64_t)a2 + v159;
  *(void *)uint64_t v160 = *(void *)v161;
  *(_BYTE *)(v160 + 8) = *(_BYTE *)(v161 + 8);
  uint64_t v162 = a3[98];
  uint64_t v163 = a1 + v162;
  uint64_t v164 = (uint64_t)a2 + v162;
  *(void *)uint64_t v163 = *(void *)v164;
  *(_BYTE *)(v163 + 8) = *(_BYTE *)(v164 + 8);
  uint64_t v165 = a3[99];
  uint64_t v166 = a1 + v165;
  uint64_t v167 = (uint64_t)a2 + v165;
  *(void *)uint64_t v166 = *(void *)v167;
  *(_BYTE *)(v166 + 8) = *(_BYTE *)(v167 + 8);
  uint64_t v168 = a3[100];
  uint64_t v169 = a1 + v168;
  uint64_t v170 = (uint64_t)a2 + v168;
  *(void *)uint64_t v169 = *(void *)v170;
  *(_BYTE *)(v169 + 8) = *(_BYTE *)(v170 + 8);
  uint64_t v171 = a3[101];
  uint64_t v172 = a1 + v171;
  uint64_t v173 = (uint64_t)a2 + v171;
  *(void *)uint64_t v172 = *(void *)v173;
  *(_BYTE *)(v172 + 8) = *(_BYTE *)(v173 + 8);
  uint64_t v174 = a3[102];
  uint64_t v175 = a1 + v174;
  uint64_t v176 = (uint64_t)a2 + v174;
  *(void *)uint64_t v175 = *(void *)v176;
  *(_BYTE *)(v175 + 8) = *(_BYTE *)(v176 + 8);
  uint64_t v177 = a3[103];
  uint64_t v178 = a1 + v177;
  uint64_t v179 = (uint64_t)a2 + v177;
  *(void *)uint64_t v178 = *(void *)v179;
  *(_BYTE *)(v178 + 8) = *(_BYTE *)(v179 + 8);
  uint64_t v180 = a3[104];
  uint64_t v181 = a1 + v180;
  uint64_t v182 = (uint64_t)a2 + v180;
  *(void *)uint64_t v181 = *(void *)v182;
  *(_BYTE *)(v181 + 8) = *(_BYTE *)(v182 + 8);
  uint64_t v183 = a3[105];
  uint64_t v184 = a1 + v183;
  uint64_t v185 = (uint64_t)a2 + v183;
  *(void *)uint64_t v184 = *(void *)v185;
  *(_BYTE *)(v184 + 8) = *(_BYTE *)(v185 + 8);
  uint64_t v186 = a3[106];
  uint64_t v187 = a1 + v186;
  uint64_t v188 = (uint64_t)a2 + v186;
  *(void *)uint64_t v187 = *(void *)v188;
  *(_BYTE *)(v187 + 8) = *(_BYTE *)(v188 + 8);
  uint64_t v189 = a3[107];
  uint64_t v190 = a1 + v189;
  uint64_t v191 = (uint64_t)a2 + v189;
  *(void *)uint64_t v190 = *(void *)v191;
  *(_BYTE *)(v190 + 8) = *(_BYTE *)(v191 + 8);
  uint64_t v192 = a3[108];
  uint64_t v193 = a1 + v192;
  uint64_t v194 = (uint64_t)a2 + v192;
  *(void *)uint64_t v193 = *(void *)v194;
  *(_BYTE *)(v193 + 8) = *(_BYTE *)(v194 + 8);
  uint64_t v195 = a3[109];
  uint64_t v196 = a1 + v195;
  uint64_t v197 = (uint64_t)a2 + v195;
  *(void *)uint64_t v196 = *(void *)v197;
  *(_BYTE *)(v196 + 8) = *(_BYTE *)(v197 + 8);
  uint64_t v198 = a3[110];
  uint64_t v199 = a1 + v198;
  uint64_t v200 = (uint64_t)a2 + v198;
  *(void *)uint64_t v199 = *(void *)v200;
  *(_BYTE *)(v199 + 8) = *(_BYTE *)(v200 + 8);
  uint64_t v201 = a3[111];
  uint64_t v202 = a1 + v201;
  uint64_t v203 = (uint64_t)a2 + v201;
  *(void *)uint64_t v202 = *(void *)v203;
  *(_BYTE *)(v202 + 8) = *(_BYTE *)(v203 + 8);
  uint64_t v204 = a3[112];
  uint64_t v205 = a1 + v204;
  uint64_t v206 = (uint64_t)a2 + v204;
  *(void *)uint64_t v205 = *(void *)v206;
  *(_BYTE *)(v205 + 8) = *(_BYTE *)(v206 + 8);
  *(_BYTE *)(a1 + a3[113]) = *((_BYTE *)a2 + a3[113]);
  uint64_t v207 = a3[114];
  uint64_t v208 = a1 + v207;
  uint64_t v209 = (uint64_t)a2 + v207;
  *(void *)uint64_t v208 = *(void *)v209;
  *(_BYTE *)(v208 + 8) = *(_BYTE *)(v209 + 8);
  uint64_t v210 = a3[115];
  uint64_t v211 = a1 + v210;
  uint64_t v212 = (uint64_t)a2 + v210;
  *(void *)uint64_t v211 = *(void *)v212;
  *(_BYTE *)(v211 + 8) = *(_BYTE *)(v212 + 8);
  uint64_t v213 = a3[116];
  uint64_t v214 = a1 + v213;
  uint64_t v215 = (uint64_t)a2 + v213;
  *(void *)uint64_t v214 = *(void *)v215;
  *(_BYTE *)(v214 + 8) = *(_BYTE *)(v215 + 8);
  *(_BYTE *)(a1 + a3[117]) = *((_BYTE *)a2 + a3[117]);
  *(_BYTE *)(a1 + a3[118]) = *((_BYTE *)a2 + a3[118]);
  *(_BYTE *)(a1 + a3[119]) = *((_BYTE *)a2 + a3[119]);
  uint64_t v216 = a3[120];
  uint64_t v217 = a1 + v216;
  uint64_t v218 = (uint64_t)a2 + v216;
  *(void *)uint64_t v217 = *(void *)v218;
  *(_BYTE *)(v217 + 8) = *(_BYTE *)(v218 + 8);
  uint64_t v219 = a3[121];
  uint64_t v220 = a1 + v219;
  uint64_t v221 = (uint64_t)a2 + v219;
  *(void *)uint64_t v220 = *(void *)v221;
  *(_BYTE *)(v220 + 8) = *(_BYTE *)(v221 + 8);
  uint64_t v222 = a3[122];
  uint64_t v223 = a1 + v222;
  uint64_t v224 = (uint64_t)a2 + v222;
  *(void *)uint64_t v223 = *(void *)v224;
  *(_BYTE *)(v223 + 8) = *(_BYTE *)(v224 + 8);
  uint64_t v225 = a3[123];
  uint64_t v226 = a1 + v225;
  uint64_t v227 = (uint64_t)a2 + v225;
  *(void *)uint64_t v226 = *(void *)v227;
  *(_BYTE *)(v226 + 8) = *(_BYTE *)(v227 + 8);
  uint64_t v228 = a3[124];
  uint64_t v229 = a1 + v228;
  uint64_t v230 = (uint64_t *)((char *)a2 + v228);
  uint64_t v231 = *v230;
  *(_BYTE *)(v229 + 8) = *((_BYTE *)v230 + 8);
  *(void *)uint64_t v229 = v231;
  uint64_t v232 = a3[125];
  uint64_t v233 = a1 + v232;
  uint64_t v234 = (uint64_t)a2 + v232;
  *(void *)uint64_t v233 = *(void *)v234;
  *(_BYTE *)(v233 + 8) = *(_BYTE *)(v234 + 8);
  uint64_t v235 = a3[126];
  uint64_t v236 = a1 + v235;
  uint64_t v237 = (uint64_t)a2 + v235;
  *(void *)uint64_t v236 = *(void *)v237;
  *(_BYTE *)(v236 + 8) = *(_BYTE *)(v237 + 8);
  uint64_t v238 = a3[127];
  uint64_t v239 = a1 + v238;
  uint64_t v240 = (uint64_t)a2 + v238;
  *(void *)uint64_t v239 = *(void *)v240;
  *(_BYTE *)(v239 + 8) = *(_BYTE *)(v240 + 8);
  *(_BYTE *)(a1 + a3[128]) = *((_BYTE *)a2 + a3[128]);
  uint64_t v241 = a3[129];
  uint64_t v242 = a1 + v241;
  uint64_t v243 = (uint64_t)a2 + v241;
  *(void *)uint64_t v242 = *(void *)v243;
  *(_BYTE *)(v242 + 8) = *(_BYTE *)(v243 + 8);
  uint64_t v244 = a3[130];
  uint64_t v245 = *(uint64_t *)((char *)a2 + v244);
  *(void *)(a1 + v244) = v245;
  uint64_t v246 = a3[131];
  uint64_t v247 = a1 + v246;
  uint64_t v248 = (uint64_t)a2 + v246;
  *(void *)uint64_t v247 = *(void *)v248;
  *(_BYTE *)(v247 + 8) = *(_BYTE *)(v248 + 8);
  *(_BYTE *)(a1 + a3[132]) = *((_BYTE *)a2 + a3[132]);
  uint64_t v249 = a3[133];
  uint64_t v250 = *(uint64_t *)((char *)a2 + v249);
  *(void *)(a1 + v249) = v250;
  *(_BYTE *)(a1 + a3[134]) = *((_BYTE *)a2 + a3[134]);
  uint64_t v251 = a3[135];
  uint64_t v252 = a1 + v251;
  uint64_t v253 = (uint64_t)a2 + v251;
  *(void *)uint64_t v252 = *(void *)v253;
  *(_BYTE *)(v252 + 8) = *(_BYTE *)(v253 + 8);
  uint64_t v254 = a3[136];
  uint64_t v255 = a1 + v254;
  uint64_t v256 = (uint64_t)a2 + v254;
  *(void *)uint64_t v255 = *(void *)v256;
  *(_BYTE *)(v255 + 8) = *(_BYTE *)(v256 + 8);
  *(_BYTE *)(a1 + a3[137]) = *((_BYTE *)a2 + a3[137]);
  *(_BYTE *)(a1 + a3[138]) = *((_BYTE *)a2 + a3[138]);
  uint64_t v257 = a3[139];
  uint64_t v258 = a1 + v257;
  uint64_t v259 = (uint64_t)a2 + v257;
  *(void *)uint64_t v258 = *(void *)v259;
  *(_BYTE *)(v258 + 8) = *(_BYTE *)(v259 + 8);
  uint64_t v260 = a3[140];
  uint64_t v261 = a1 + v260;
  uint64_t v262 = (uint64_t)a2 + v260;
  *(void *)uint64_t v261 = *(void *)v262;
  *(_BYTE *)(v261 + 8) = *(_BYTE *)(v262 + 8);
  uint64_t v263 = a3[141];
  uint64_t v264 = a1 + v263;
  uint64_t v265 = (uint64_t)a2 + v263;
  *(void *)uint64_t v264 = *(void *)v265;
  *(_BYTE *)(v264 + 8) = *(_BYTE *)(v265 + 8);
  uint64_t v266 = a3[142];
  uint64_t v267 = a1 + v266;
  uint64_t v268 = (uint64_t)a2 + v266;
  *(void *)uint64_t v267 = *(void *)v268;
  *(_BYTE *)(v267 + 8) = *(_BYTE *)(v268 + 8);
  uint64_t v269 = a3[143];
  uint64_t v270 = a1 + v269;
  uint64_t v271 = (uint64_t *)((char *)a2 + v269);
  uint64_t v272 = *v271;
  *(_BYTE *)(v270 + 8) = *((_BYTE *)v271 + 8);
  *(void *)uint64_t v270 = v272;
  uint64_t v273 = a3[144];
  uint64_t v274 = a1 + v273;
  uint64_t v275 = (uint64_t)a2 + v273;
  *(void *)uint64_t v274 = *(void *)v275;
  *(_BYTE *)(v274 + 8) = *(_BYTE *)(v275 + 8);
  uint64_t v276 = a3[145];
  uint64_t v277 = a1 + v276;
  uint64_t v278 = (uint64_t)a2 + v276;
  *(void *)uint64_t v277 = *(void *)v278;
  *(_BYTE *)(v277 + 8) = *(_BYTE *)(v278 + 8);
  uint64_t v279 = a3[146];
  uint64_t v280 = a1 + v279;
  uint64_t v281 = (uint64_t)a2 + v279;
  *(void *)uint64_t v280 = *(void *)v281;
  *(_BYTE *)(v280 + 8) = *(_BYTE *)(v281 + 8);
  uint64_t v282 = a3[147];
  uint64_t v283 = a1 + v282;
  uint64_t v284 = (uint64_t)a2 + v282;
  *(void *)uint64_t v283 = *(void *)v284;
  *(_BYTE *)(v283 + 8) = *(_BYTE *)(v284 + 8);
  uint64_t v285 = a3[148];
  uint64_t v286 = a1 + v285;
  uint64_t v287 = (uint64_t)a2 + v285;
  *(void *)uint64_t v286 = *(void *)v287;
  *(_BYTE *)(v286 + 8) = *(_BYTE *)(v287 + 8);
  uint64_t v288 = a3[149];
  uint64_t v289 = a1 + v288;
  uint64_t v290 = (uint64_t)a2 + v288;
  *(void *)uint64_t v289 = *(void *)v290;
  *(_BYTE *)(v289 + 8) = *(_BYTE *)(v290 + 8);
  uint64_t v291 = a3[150];
  uint64_t v292 = a1 + v291;
  uint64_t v293 = (uint64_t)a2 + v291;
  *(void *)uint64_t v292 = *(void *)v293;
  *(_BYTE *)(v292 + 8) = *(_BYTE *)(v293 + 8);
  uint64_t v294 = a3[151];
  uint64_t v295 = a1 + v294;
  uint64_t v296 = (uint64_t)a2 + v294;
  *(void *)uint64_t v295 = *(void *)v296;
  *(_BYTE *)(v295 + 8) = *(_BYTE *)(v296 + 8);
  uint64_t v297 = a3[152];
  uint64_t v298 = a1 + v297;
  uint64_t v299 = (uint64_t)a2 + v297;
  *(void *)uint64_t v298 = *(void *)v299;
  *(_BYTE *)(v298 + 8) = *(_BYTE *)(v299 + 8);
  uint64_t v300 = a3[153];
  uint64_t v301 = a1 + v300;
  uint64_t v302 = (uint64_t)a2 + v300;
  *(void *)uint64_t v301 = *(void *)v302;
  *(_BYTE *)(v301 + 8) = *(_BYTE *)(v302 + 8);
  uint64_t v303 = a3[154];
  uint64_t v304 = a1 + v303;
  uint64_t v305 = (uint64_t)a2 + v303;
  *(void *)uint64_t v304 = *(void *)v305;
  *(_BYTE *)(v304 + 8) = *(_BYTE *)(v305 + 8);
  uint64_t v306 = a3[155];
  uint64_t v307 = a1 + v306;
  uint64_t v308 = (uint64_t)a2 + v306;
  *(void *)uint64_t v307 = *(void *)v308;
  *(_BYTE *)(v307 + 8) = *(_BYTE *)(v308 + 8);
  uint64_t v309 = a3[156];
  uint64_t v310 = a1 + v309;
  uint64_t v311 = (uint64_t)a2 + v309;
  *(void *)uint64_t v310 = *(void *)v311;
  *(_BYTE *)(v310 + 8) = *(_BYTE *)(v311 + 8);
  *(_BYTE *)(a1 + a3[157]) = *((_BYTE *)a2 + a3[157]);
  uint64_t v312 = a3[158];
  uint64_t v313 = a1 + v312;
  uint64_t v314 = (uint64_t)a2 + v312;
  *(void *)uint64_t v313 = *(void *)v314;
  *(_BYTE *)(v313 + 8) = *(_BYTE *)(v314 + 8);
  uint64_t v315 = a3[159];
  uint64_t v316 = a1 + v315;
  uint64_t v317 = (uint64_t)a2 + v315;
  *(void *)uint64_t v316 = *(void *)v317;
  *(_BYTE *)(v316 + 8) = *(_BYTE *)(v317 + 8);
  uint64_t v318 = a3[160];
  uint64_t v319 = a1 + v318;
  uint64_t v320 = (uint64_t)a2 + v318;
  *(void *)uint64_t v319 = *(void *)v320;
  *(_BYTE *)(v319 + 8) = *(_BYTE *)(v320 + 8);
  uint64_t v321 = a3[161];
  uint64_t v322 = (void *)(a1 + v321);
  uint64_t v323 = (uint64_t *)((char *)a2 + v321);
  uint64_t v324 = v323[1];
  *uint64_t v322 = *v323;
  v322[1] = v324;
  uint64_t v325 = a3[162];
  uint64_t v326 = a1 + v325;
  uint64_t v327 = (uint64_t)a2 + v325;
  *(void *)uint64_t v326 = *(void *)v327;
  uint64_t v328 = a3[163];
  char v329 = *((_BYTE *)a2 + v328);
  *(_BYTE *)(v326 + 8) = *(_BYTE *)(v327 + 8);
  *(_BYTE *)(a1 + v328) = v329;
  *(_BYTE *)(a1 + a3[164]) = *((_BYTE *)a2 + a3[164]);
  uint64_t v330 = a3[165];
  uint64_t v331 = a1 + v330;
  uint64_t v332 = (uint64_t)a2 + v330;
  *(void *)uint64_t v331 = *(void *)v332;
  *(_BYTE *)(v331 + 8) = *(_BYTE *)(v332 + 8);
  uint64_t v333 = a3[166];
  uint64_t v334 = a1 + v333;
  uint64_t v335 = (uint64_t)a2 + v333;
  *(void *)uint64_t v334 = *(void *)v335;
  uint64_t v336 = a3[167];
  char v337 = *((_BYTE *)a2 + v336);
  *(_BYTE *)(v334 + 8) = *(_BYTE *)(v335 + 8);
  *(_BYTE *)(a1 + v336) = v337;
  uint64_t v338 = a3[168];
  uint64_t v339 = a1 + v338;
  uint64_t v340 = (uint64_t)a2 + v338;
  *(_DWORD *)uint64_t v339 = *(_DWORD *)v340;
  *(_BYTE *)(v339 + 4) = *(_BYTE *)(v340 + 4);
  uint64_t v341 = a3[169];
  uint64_t v342 = a1 + v341;
  uint64_t v343 = (uint64_t)a2 + v341;
  *(void *)uint64_t v342 = *(void *)v343;
  *(_BYTE *)(v342 + 8) = *(_BYTE *)(v343 + 8);
  uint64_t v344 = a3[170];
  uint64_t v345 = a1 + v344;
  uint64_t v346 = (uint64_t)a2 + v344;
  *(void *)uint64_t v345 = *(void *)v346;
  *(_BYTE *)(v345 + 8) = *(_BYTE *)(v346 + 8);
  uint64_t v347 = a3[171];
  uint64_t v348 = a1 + v347;
  uint64_t v349 = (uint64_t)a2 + v347;
  *(void *)uint64_t v348 = *(void *)v349;
  *(_BYTE *)(v348 + 8) = *(_BYTE *)(v349 + 8);
  uint64_t v350 = a3[172];
  uint64_t v351 = a1 + v350;
  uint64_t v352 = (uint64_t *)((char *)a2 + v350);
  uint64_t v353 = *v352;
  *(_BYTE *)(v351 + 8) = *((_BYTE *)v352 + 8);
  *(void *)uint64_t v351 = v353;
  uint64_t v354 = a3[173];
  uint64_t v355 = a1 + v354;
  uint64_t v356 = (uint64_t)a2 + v354;
  *(void *)uint64_t v355 = *(void *)v356;
  *(_BYTE *)(v355 + 8) = *(_BYTE *)(v356 + 8);
  uint64_t v357 = a3[174];
  uint64_t v358 = a1 + v357;
  uint64_t v359 = (uint64_t)a2 + v357;
  *(void *)uint64_t v358 = *(void *)v359;
  *(_BYTE *)(v358 + 8) = *(_BYTE *)(v359 + 8);
  uint64_t v360 = a3[175];
  uint64_t v361 = a1 + v360;
  uint64_t v362 = (uint64_t)a2 + v360;
  *(void *)uint64_t v361 = *(void *)v362;
  *(_BYTE *)(v361 + 8) = *(_BYTE *)(v362 + 8);
  *(_BYTE *)(a1 + a3[176]) = *((_BYTE *)a2 + a3[176]);
  uint64_t v363 = a3[177];
  uint64_t v364 = a1 + v363;
  uint64_t v365 = (uint64_t)a2 + v363;
  *(void *)uint64_t v364 = *(void *)v365;
  *(_BYTE *)(v364 + 8) = *(_BYTE *)(v365 + 8);
  uint64_t v366 = a3[178];
  uint64_t v367 = a1 + v366;
  uint64_t v368 = (uint64_t)a2 + v366;
  *(void *)uint64_t v367 = *(void *)v368;
  *(_BYTE *)(v367 + 8) = *(_BYTE *)(v368 + 8);
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRetain(v132);
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRetain(v245);
  swift_bridgeObjectRetain(v250);
  swift_bridgeObjectRetain(v324);
  return a1;
}

uint64_t sub_10042455C(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >> 60 == 15LL)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)a2;
      sub_10001736C(*(void *)a2, *(void *)(a2 + 8));
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v6;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v6 >> 60 == 15)
  {
    sub_100041D4C(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  uint64_t v8 = *(void *)a2;
  sub_10001736C(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v6;
  sub_100016F9C(v9, v10);
LABEL_8:
  uint64_t v11 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  uint64_t v12 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v12;
  uint64_t v13 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = v13;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  uint64_t v14 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v16;
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  uint64_t v17 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v17;
  uint64_t v18 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = v18;
  uint64_t v19 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v19;
  uint64_t v20 = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = v20;
  uint64_t v21 = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = v21;
  uint64_t v22 = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = v22;
  uint64_t v23 = *(void *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = v23;
  uint64_t v24 = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = v24;
  uint64_t v25 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v25;
  uint64_t v26 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v26;
  *(_BYTE *)(a1 + 265) = *(_BYTE *)(a2 + 265);
  uint64_t v27 = *(void *)(a2 + 272);
  *(void *)(a1 + 272) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(void *)(a1 + 280) = v28;
  uint64_t v29 = *(void *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 296) = v29;
  uint64_t v30 = *(void *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(void *)(a1 + 312) = v30;
  uint64_t v31 = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(void *)(a1 + 328) = v31;
  uint64_t v32 = *(void *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(void *)(a1 + 344) = v32;
  uint64_t v33 = *(void *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(void *)(a1 + 360) = v33;
  uint64_t v34 = *(void *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(void *)(a1 + 376) = v34;
  uint64_t v35 = *(void *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(void *)(a1 + 392) = v35;
  uint64_t v36 = *(void *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(void *)(a1 + 408) = v36;
  uint64_t v37 = *(void *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(void *)(a1 + 424) = v37;
  *(_BYTE *)(a1 + 433) = *(_BYTE *)(a2 + 433);
  uint64_t v38 = *(void *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(void *)(a1 + 440) = v38;
  uint64_t v39 = *(void *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(void *)(a1 + 456) = v39;
  uint64_t v40 = *(void *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(void *)(a1 + 472) = v40;
  uint64_t v41 = *(void *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(void *)(a1 + 488) = v41;
  uint64_t v42 = *(void *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(void *)(a1 + 504) = v42;
  uint64_t v43 = *(void *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(void *)(a1 + 520) = v43;
  uint64_t v44 = *(void *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(void *)(a1 + 536) = v44;
  uint64_t v45 = *(void *)(a2 + 552);
  *(void *)(a1 + 552) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void *)(a2 + 560);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  *(void *)(a1 + 560) = v46;
  LOBYTE(v46) = *(_BYTE *)(a2 + 584);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_BYTE *)(a1 + 584) = v46;
  uint64_t v47 = *(void **)(a1 + 592);
  uint64_t v48 = *(void **)(a2 + 592);
  *(void *)(a1 + 592) = v48;
  id v49 = v48;

  uint64_t v50 = *(void *)(a2 + 600);
  *(void *)(a1 + 600) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease();
  uint64_t v51 = *(void *)(a2 + 608);
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
  *(void *)(a1 + 608) = v51;
  uint64_t v52 = *(void *)(a2 + 624);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(void *)(a1 + 624) = v52;
  uint64_t v53 = *(void *)(a2 + 640);
  *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
  *(void *)(a1 + 640) = v53;
  uint64_t v54 = *(void *)(a2 + 656);
  *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
  *(void *)(a1 + 656) = v54;
  uint64_t v55 = *(void *)(a2 + 672);
  *(_BYTE *)(a1 + 680) = *(_BYTE *)(a2 + 680);
  *(void *)(a1 + 672) = v55;
  *(_BYTE *)(a1 + 681) = *(_BYTE *)(a2 + 681);
  uint64_t v56 = a3[57];
  uint64_t v57 = (void *)(a1 + v56);
  char v58 = (void *)(a2 + v56);
  uint64_t v59 = type metadata accessor for UUID(0LL);
  uint64_t v60 = *(void *)(v59 - 8);
  uint64_t v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v60 + 48);
  int v62 = v61(v57, 1LL, v59);
  int v63 = v61(v58, 1LL, v59);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(void *, void *, uint64_t))(v60 + 16))(v57, v58, v59);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0LL, 1LL, v59);
      goto LABEL_14;
    }

    goto LABEL_13;
  }

  if (v63)
  {
    (*(void (**)(void *, uint64_t))(v60 + 8))(v57, v59);
LABEL_13:
    uint64_t v64 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v57, v58, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_14;
  }

  (*(void (**)(void *, void *, uint64_t))(v60 + 24))(v57, v58, v59);
LABEL_14:
  uint64_t v65 = a3[58];
  uint64_t v66 = (void *)(a1 + v65);
  uint64_t v67 = (void *)(a2 + v65);
  uint64_t v68 = type metadata accessor for Date(0LL);
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v70 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v69 + 48);
  int v71 = v70(v66, 1LL, v68);
  int v72 = v70(v67, 1LL, v68);
  if (v71)
  {
    if (!v72)
    {
      (*(void (**)(void *, void *, uint64_t))(v69 + 16))(v66, v67, v68);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0LL, 1LL, v68);
      goto LABEL_20;
    }

    goto LABEL_19;
  }

  if (v72)
  {
    (*(void (**)(void *, uint64_t))(v69 + 8))(v66, v68);
LABEL_19:
    uint64_t v73 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v66, v67, *(void *)(*(void *)(v73 - 8) + 64LL));
    goto LABEL_20;
  }

  (*(void (**)(void *, void *, uint64_t))(v69 + 24))(v66, v67, v68);
LABEL_20:
  uint64_t v74 = a3[59];
  uint64_t v75 = a1 + v74;
  uint64_t v76 = (uint64_t *)(a2 + v74);
  uint64_t v77 = *v76;
  *(_BYTE *)(v75 + 8) = *((_BYTE *)v76 + 8);
  *(void *)uint64_t v75 = v77;
  uint64_t v78 = a3[60];
  uint64_t v79 = (void *)(a1 + v78);
  uint64_t v80 = (void *)(a2 + v78);
  int v81 = v70((void *)(a1 + v78), 1LL, v68);
  int v82 = v70(v80, 1LL, v68);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v69 + 16))(v79, v80, v68);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v69 + 56))(v79, 0LL, 1LL, v68);
      goto LABEL_26;
    }

    goto LABEL_25;
  }

  if (v82)
  {
    (*(void (**)(void *, uint64_t))(v69 + 8))(v79, v68);
LABEL_25:
    uint64_t v83 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64LL));
    goto LABEL_26;
  }

  (*(void (**)(void *, void *, uint64_t))(v69 + 24))(v79, v80, v68);
LABEL_26:
  uint64_t v84 = a3[61];
  uint64_t v85 = a1 + v84;
  __int128 v86 = (uint64_t *)(a2 + v84);
  uint64_t v87 = *v86;
  *(_BYTE *)(v85 + 8) = *((_BYTE *)v86 + 8);
  *(void *)uint64_t v85 = v87;
  uint64_t v88 = a3[62];
  uint64_t v89 = a1 + v88;
  uint64_t v90 = (uint64_t *)(a2 + v88);
  uint64_t v91 = *v90;
  *(_BYTE *)(v89 + 8) = *((_BYTE *)v90 + 8);
  *(void *)uint64_t v89 = v91;
  uint64_t v92 = a3[63];
  uint64_t v93 = a1 + v92;
  uint64_t v94 = (uint64_t *)(a2 + v92);
  uint64_t v95 = *v94;
  *(_BYTE *)(v93 + 8) = *((_BYTE *)v94 + 8);
  *(void *)uint64_t v93 = v95;
  uint64_t v96 = a3[64];
  uint64_t v97 = a1 + v96;
  uint64_t v98 = (uint64_t *)(a2 + v96);
  uint64_t v99 = *v98;
  *(_BYTE *)(v97 + 8) = *((_BYTE *)v98 + 8);
  *(void *)uint64_t v97 = v99;
  uint64_t v100 = a3[65];
  uint64_t v101 = a1 + v100;
  uint64_t v102 = (uint64_t *)(a2 + v100);
  uint64_t v103 = *v102;
  *(_BYTE *)(v101 + 8) = *((_BYTE *)v102 + 8);
  *(void *)uint64_t v101 = v103;
  uint64_t v104 = a3[66];
  uint64_t v105 = a1 + v104;
  uint64_t v106 = (uint64_t *)(a2 + v104);
  uint64_t v107 = *v106;
  *(_BYTE *)(v105 + 8) = *((_BYTE *)v106 + 8);
  *(void *)uint64_t v105 = v107;
  uint64_t v108 = a3[67];
  uint64_t v109 = (void *)(a1 + v108);
  uint64_t v110 = (void *)(a2 + v108);
  uint64_t v111 = *(void *)(a1 + v108 + 48);
  uint64_t v112 = *(void *)(a2 + v108 + 48);
  if (v111)
  {
    if (v112)
    {
      *uint64_t v109 = *v110;
      v109[1] = v110[1];
      v109[2] = v110[2];
      v109[3] = v110[3];
      v109[4] = v110[4];
      v109[5] = v110[5];
      uint64_t v113 = v110[6];
      v109[6] = v113;
      swift_bridgeObjectRetain(v113);
      swift_bridgeObjectRelease();
      v109[7] = v110[7];
      v109[8] = v110[8];
      v109[9] = v110[9];
      v109[10] = v110[10];
      v109[11] = v110[11];
      v109[12] = v110[12];
      uint64_t v114 = v110[13];
      v109[13] = v114;
      swift_bridgeObjectRetain(v114);
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_1004258E0((uint64_t)v109);
      __int128 v118 = *((_OWORD *)v110 + 1);
      __int128 v117 = *((_OWORD *)v110 + 2);
      *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
      *((_OWORD *)v109 + 1) = v118;
      *((_OWORD *)v109 + 2) = v117;
      __int128 v119 = *((_OWORD *)v110 + 6);
      __int128 v121 = *((_OWORD *)v110 + 3);
      __int128 v120 = *((_OWORD *)v110 + 4);
      *((_OWORD *)v109 + 5) = *((_OWORD *)v110 + 5);
      *((_OWORD *)v109 + 6) = v119;
      *((_OWORD *)v109 + 3) = v121;
      *((_OWORD *)v109 + 4) = v120;
    }
  }

  else if (v112)
  {
    *uint64_t v109 = *v110;
    v109[1] = v110[1];
    v109[2] = v110[2];
    v109[3] = v110[3];
    v109[4] = v110[4];
    v109[5] = v110[5];
    uint64_t v115 = v110[6];
    v109[6] = v115;
    v109[7] = v110[7];
    v109[8] = v110[8];
    v109[9] = v110[9];
    v109[10] = v110[10];
    v109[11] = v110[11];
    v109[12] = v110[12];
    uint64_t v116 = v110[13];
    v109[13] = v116;
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRetain(v116);
  }

  else
  {
    __int128 v122 = *(_OWORD *)v110;
    __int128 v123 = *((_OWORD *)v110 + 2);
    *((_OWORD *)v109 + 1) = *((_OWORD *)v110 + 1);
    *((_OWORD *)v109 + 2) = v123;
    *(_OWORD *)uint64_t v109 = v122;
    __int128 v124 = *((_OWORD *)v110 + 3);
    __int128 v125 = *((_OWORD *)v110 + 4);
    __int128 v126 = *((_OWORD *)v110 + 6);
    *((_OWORD *)v109 + 5) = *((_OWORD *)v110 + 5);
    *((_OWORD *)v109 + 6) = v126;
    *((_OWORD *)v109 + 3) = v124;
    *((_OWORD *)v109 + 4) = v125;
  }

  *(_BYTE *)(a1 + a3[68]) = *(_BYTE *)(a2 + a3[68]);
  *(_BYTE *)(a1 + a3[69]) = *(_BYTE *)(a2 + a3[69]);
  *(_BYTE *)(a1 + a3[70]) = *(_BYTE *)(a2 + a3[70]);
  uint64_t v127 = a3[71];
  uint64_t v128 = a1 + v127;
  uint64_t v129 = (uint64_t *)(a2 + v127);
  uint64_t v130 = *v129;
  *(_BYTE *)(v128 + 8) = *((_BYTE *)v129 + 8);
  *(void *)uint64_t v128 = v130;
  uint64_t v131 = a3[72];
  uint64_t v132 = a1 + v131;
  uint64_t v133 = (uint64_t *)(a2 + v131);
  uint64_t v134 = *v133;
  *(_BYTE *)(v132 + 8) = *((_BYTE *)v133 + 8);
  *(void *)uint64_t v132 = v134;
  uint64_t v135 = a3[73];
  uint64_t v136 = a1 + v135;
  uint64_t v137 = (uint64_t *)(a2 + v135);
  uint64_t v138 = *v137;
  *(_BYTE *)(v136 + 8) = *((_BYTE *)v137 + 8);
  *(void *)uint64_t v136 = v138;
  uint64_t v139 = a3[74];
  uint64_t v140 = a1 + v139;
  uint64_t v141 = (uint64_t *)(a2 + v139);
  uint64_t v142 = *v141;
  *(_BYTE *)(v140 + 8) = *((_BYTE *)v141 + 8);
  *(void *)uint64_t v140 = v142;
  uint64_t v143 = a3[75];
  uint64_t v144 = a1 + v143;
  uint64_t v145 = (uint64_t *)(a2 + v143);
  uint64_t v146 = *v145;
  *(_BYTE *)(v144 + 8) = *((_BYTE *)v145 + 8);
  *(void *)uint64_t v144 = v146;
  uint64_t v147 = a3[76];
  uint64_t v148 = a1 + v147;
  uint64_t v149 = (uint64_t *)(a2 + v147);
  uint64_t v150 = *v149;
  *(_BYTE *)(v148 + 8) = *((_BYTE *)v149 + 8);
  *(void *)uint64_t v148 = v150;
  uint64_t v151 = a3[77];
  uint64_t v152 = a1 + v151;
  uint64_t v153 = (uint64_t *)(a2 + v151);
  uint64_t v154 = *v153;
  *(_BYTE *)(v152 + 8) = *((_BYTE *)v153 + 8);
  *(void *)uint64_t v152 = v154;
  uint64_t v155 = a3[78];
  uint64_t v156 = a1 + v155;
  uint64_t v157 = (uint64_t *)(a2 + v155);
  uint64_t v158 = *v157;
  *(_BYTE *)(v156 + 8) = *((_BYTE *)v157 + 8);
  *(void *)uint64_t v156 = v158;
  uint64_t v159 = a3[79];
  uint64_t v160 = a1 + v159;
  uint64_t v161 = (uint64_t *)(a2 + v159);
  uint64_t v162 = *v161;
  *(_BYTE *)(v160 + 8) = *((_BYTE *)v161 + 8);
  *(void *)uint64_t v160 = v162;
  uint64_t v163 = a3[80];
  uint64_t v164 = (void *)(a1 + v163);
  uint64_t v165 = (void *)(a2 + v163);
  *uint64_t v164 = *v165;
  uint64_t v166 = v165[1];
  v164[1] = v166;
  swift_bridgeObjectRetain(v166);
  swift_bridgeObjectRelease();
  uint64_t v167 = a3[81];
  uint64_t v168 = a1 + v167;
  uint64_t v169 = (uint64_t *)(a2 + v167);
  uint64_t v170 = *v169;
  *(_BYTE *)(v168 + 8) = *((_BYTE *)v169 + 8);
  *(void *)uint64_t v168 = v170;
  uint64_t v171 = a3[82];
  uint64_t v172 = (void *)(a1 + v171);
  uint64_t v173 = (void *)(a2 + v171);
  *uint64_t v172 = *v173;
  uint64_t v174 = v173[1];
  v172[1] = v174;
  swift_bridgeObjectRetain(v174);
  swift_bridgeObjectRelease();
  uint64_t v175 = a3[83];
  uint64_t v176 = a1 + v175;
  uint64_t v177 = (uint64_t *)(a2 + v175);
  uint64_t v178 = *v177;
  *(_BYTE *)(v176 + 8) = *((_BYTE *)v177 + 8);
  *(void *)uint64_t v176 = v178;
  uint64_t v179 = a3[84];
  uint64_t v180 = *(void *)(a2 + v179);
  *(void *)(a1 + v179) = v180;
  swift_bridgeObjectRetain(v180);
  swift_bridgeObjectRelease();
  uint64_t v181 = a3[85];
  uint64_t v182 = (void *)(a1 + v181);
  uint64_t v183 = (void *)(a2 + v181);
  *uint64_t v182 = *v183;
  uint64_t v184 = v183[1];
  v182[1] = v184;
  swift_bridgeObjectRetain(v184);
  swift_bridgeObjectRelease();
  uint64_t v185 = a3[86];
  uint64_t v186 = a1 + v185;
  uint64_t v187 = (uint64_t *)(a2 + v185);
  uint64_t v188 = *v187;
  *(_BYTE *)(v186 + 8) = *((_BYTE *)v187 + 8);
  *(void *)uint64_t v186 = v188;
  *(_BYTE *)(a1 + a3[87]) = *(_BYTE *)(a2 + a3[87]);
  *(_BYTE *)(a1 + a3[88]) = *(_BYTE *)(a2 + a3[88]);
  *(_BYTE *)(a1 + a3[89]) = *(_BYTE *)(a2 + a3[89]);
  *(_BYTE *)(a1 + a3[90]) = *(_BYTE *)(a2 + a3[90]);
  uint64_t v189 = a3[91];
  uint64_t v190 = a1 + v189;
  uint64_t v191 = (uint64_t *)(a2 + v189);
  uint64_t v192 = *v191;
  *(_BYTE *)(v190 + 8) = *((_BYTE *)v191 + 8);
  *(void *)uint64_t v190 = v192;
  uint64_t v193 = a3[92];
  uint64_t v194 = a1 + v193;
  uint64_t v195 = (uint64_t *)(a2 + v193);
  uint64_t v196 = *v195;
  *(_BYTE *)(v194 + 8) = *((_BYTE *)v195 + 8);
  *(void *)uint64_t v194 = v196;
  uint64_t v197 = a3[93];
  uint64_t v198 = a1 + v197;
  uint64_t v199 = (uint64_t *)(a2 + v197);
  uint64_t v200 = *v199;
  *(_BYTE *)(v198 + 8) = *((_BYTE *)v199 + 8);
  *(void *)uint64_t v198 = v200;
  uint64_t v201 = a3[94];
  uint64_t v202 = a1 + v201;
  uint64_t v203 = (uint64_t *)(a2 + v201);
  uint64_t v204 = *v203;
  *(_BYTE *)(v202 + 8) = *((_BYTE *)v203 + 8);
  *(void *)uint64_t v202 = v204;
  uint64_t v205 = a3[95];
  uint64_t v206 = a1 + v205;
  uint64_t v207 = (uint64_t *)(a2 + v205);
  uint64_t v208 = *v207;
  *(_BYTE *)(v206 + 8) = *((_BYTE *)v207 + 8);
  *(void *)uint64_t v206 = v208;
  uint64_t v209 = a3[96];
  uint64_t v210 = a1 + v209;
  uint64_t v211 = (uint64_t *)(a2 + v209);
  uint64_t v212 = *v211;
  *(_BYTE *)(v210 + 8) = *((_BYTE *)v211 + 8);
  *(void *)uint64_t v210 = v212;
  uint64_t v213 = a3[97];
  uint64_t v214 = a1 + v213;
  uint64_t v215 = (uint64_t *)(a2 + v213);
  uint64_t v216 = *v215;
  *(_BYTE *)(v214 + 8) = *((_BYTE *)v215 + 8);
  *(void *)uint64_t v214 = v216;
  uint64_t v217 = a3[98];
  uint64_t v218 = a1 + v217;
  uint64_t v219 = (uint64_t *)(a2 + v217);
  uint64_t v220 = *v219;
  *(_BYTE *)(v218 + 8) = *((_BYTE *)v219 + 8);
  *(void *)uint64_t v218 = v220;
  uint64_t v221 = a3[99];
  uint64_t v222 = a1 + v221;
  uint64_t v223 = (uint64_t *)(a2 + v221);
  uint64_t v224 = *v223;
  *(_BYTE *)(v222 + 8) = *((_BYTE *)v223 + 8);
  *(void *)uint64_t v222 = v224;
  uint64_t v225 = a3[100];
  uint64_t v226 = a1 + v225;
  uint64_t v227 = (uint64_t *)(a2 + v225);
  uint64_t v228 = *v227;
  *(_BYTE *)(v226 + 8) = *((_BYTE *)v227 + 8);
  *(void *)uint64_t v226 = v228;
  uint64_t v229 = a3[101];
  uint64_t v230 = a1 + v229;
  uint64_t v231 = (uint64_t *)(a2 + v229);
  uint64_t v232 = *v231;
  *(_BYTE *)(v230 + 8) = *((_BYTE *)v231 + 8);
  *(void *)uint64_t v230 = v232;
  uint64_t v233 = a3[102];
  uint64_t v234 = a1 + v233;
  uint64_t v235 = (uint64_t *)(a2 + v233);
  uint64_t v236 = *v235;
  *(_BYTE *)(v234 + 8) = *((_BYTE *)v235 + 8);
  *(void *)uint64_t v234 = v236;
  uint64_t v237 = a3[103];
  uint64_t v238 = a1 + v237;
  uint64_t v239 = (uint64_t *)(a2 + v237);
  uint64_t v240 = *v239;
  *(_BYTE *)(v238 + 8) = *((_BYTE *)v239 + 8);
  *(void *)uint64_t v238 = v240;
  uint64_t v241 = a3[104];
  uint64_t v242 = a1 + v241;
  uint64_t v243 = (uint64_t *)(a2 + v241);
  uint64_t v244 = *v243;
  *(_BYTE *)(v242 + 8) = *((_BYTE *)v243 + 8);
  *(void *)uint64_t v242 = v244;
  uint64_t v245 = a3[105];
  uint64_t v246 = a1 + v245;
  uint64_t v247 = (uint64_t *)(a2 + v245);
  uint64_t v248 = *v247;
  *(_BYTE *)(v246 + 8) = *((_BYTE *)v247 + 8);
  *(void *)uint64_t v246 = v248;
  uint64_t v249 = a3[106];
  uint64_t v250 = a1 + v249;
  uint64_t v251 = (uint64_t *)(a2 + v249);
  uint64_t v252 = *v251;
  *(_BYTE *)(v250 + 8) = *((_BYTE *)v251 + 8);
  *(void *)uint64_t v250 = v252;
  uint64_t v253 = a3[107];
  uint64_t v254 = a1 + v253;
  uint64_t v255 = (uint64_t *)(a2 + v253);
  uint64_t v256 = *v255;
  *(_BYTE *)(v254 + 8) = *((_BYTE *)v255 + 8);
  *(void *)uint64_t v254 = v256;
  uint64_t v257 = a3[108];
  uint64_t v258 = a1 + v257;
  uint64_t v259 = (uint64_t *)(a2 + v257);
  uint64_t v260 = *v259;
  *(_BYTE *)(v258 + 8) = *((_BYTE *)v259 + 8);
  *(void *)uint64_t v258 = v260;
  uint64_t v261 = a3[109];
  uint64_t v262 = a1 + v261;
  uint64_t v263 = (uint64_t *)(a2 + v261);
  uint64_t v264 = *v263;
  *(_BYTE *)(v262 + 8) = *((_BYTE *)v263 + 8);
  *(void *)uint64_t v262 = v264;
  uint64_t v265 = a3[110];
  uint64_t v266 = a1 + v265;
  uint64_t v267 = (uint64_t *)(a2 + v265);
  uint64_t v268 = *v267;
  *(_BYTE *)(v266 + 8) = *((_BYTE *)v267 + 8);
  *(void *)uint64_t v266 = v268;
  uint64_t v269 = a3[111];
  uint64_t v270 = a1 + v269;
  uint64_t v271 = (uint64_t *)(a2 + v269);
  uint64_t v272 = *v271;
  *(_BYTE *)(v270 + 8) = *((_BYTE *)v271 + 8);
  *(void *)uint64_t v270 = v272;
  uint64_t v273 = a3[112];
  uint64_t v274 = a1 + v273;
  uint64_t v275 = (uint64_t *)(a2 + v273);
  uint64_t v276 = *v275;
  *(_BYTE *)(v274 + 8) = *((_BYTE *)v275 + 8);
  *(void *)uint64_t v274 = v276;
  *(_BYTE *)(a1 + a3[113]) = *(_BYTE *)(a2 + a3[113]);
  uint64_t v277 = a3[114];
  uint64_t v278 = a1 + v277;
  uint64_t v279 = (uint64_t *)(a2 + v277);
  uint64_t v280 = *v279;
  *(_BYTE *)(v278 + 8) = *((_BYTE *)v279 + 8);
  *(void *)uint64_t v278 = v280;
  uint64_t v281 = a3[115];
  uint64_t v282 = a1 + v281;
  uint64_t v283 = (uint64_t *)(a2 + v281);
  uint64_t v284 = *v283;
  *(_BYTE *)(v282 + 8) = *((_BYTE *)v283 + 8);
  *(void *)uint64_t v282 = v284;
  uint64_t v285 = a3[116];
  uint64_t v286 = a1 + v285;
  uint64_t v287 = (uint64_t *)(a2 + v285);
  uint64_t v288 = *v287;
  *(_BYTE *)(v286 + 8) = *((_BYTE *)v287 + 8);
  *(void *)uint64_t v286 = v288;
  *(_BYTE *)(a1 + a3[117]) = *(_BYTE *)(a2 + a3[117]);
  *(_BYTE *)(a1 + a3[118]) = *(_BYTE *)(a2 + a3[118]);
  *(_BYTE *)(a1 + a3[119]) = *(_BYTE *)(a2 + a3[119]);
  uint64_t v289 = a3[120];
  uint64_t v290 = a1 + v289;
  uint64_t v291 = (uint64_t *)(a2 + v289);
  uint64_t v292 = *v291;
  *(_BYTE *)(v290 + 8) = *((_BYTE *)v291 + 8);
  *(void *)uint64_t v290 = v292;
  uint64_t v293 = a3[121];
  uint64_t v294 = a1 + v293;
  uint64_t v295 = (uint64_t *)(a2 + v293);
  uint64_t v296 = *v295;
  *(_BYTE *)(v294 + 8) = *((_BYTE *)v295 + 8);
  *(void *)uint64_t v294 = v296;
  uint64_t v297 = a3[122];
  uint64_t v298 = a1 + v297;
  uint64_t v299 = (uint64_t *)(a2 + v297);
  uint64_t v300 = *v299;
  *(_BYTE *)(v298 + 8) = *((_BYTE *)v299 + 8);
  *(void *)uint64_t v298 = v300;
  uint64_t v301 = a3[123];
  uint64_t v302 = a1 + v301;
  uint64_t v303 = (uint64_t *)(a2 + v301);
  uint64_t v304 = *v303;
  *(_BYTE *)(v302 + 8) = *((_BYTE *)v303 + 8);
  *(void *)uint64_t v302 = v304;
  uint64_t v305 = a3[124];
  uint64_t v306 = a1 + v305;
  uint64_t v307 = (uint64_t *)(a2 + v305);
  uint64_t v308 = *v307;
  *(_BYTE *)(v306 + 8) = *((_BYTE *)v307 + 8);
  *(void *)uint64_t v306 = v308;
  uint64_t v309 = a3[125];
  uint64_t v310 = a1 + v309;
  uint64_t v311 = (uint64_t *)(a2 + v309);
  uint64_t v312 = *v311;
  *(_BYTE *)(v310 + 8) = *((_BYTE *)v311 + 8);
  *(void *)uint64_t v310 = v312;
  uint64_t v313 = a3[126];
  uint64_t v314 = a1 + v313;
  uint64_t v315 = (uint64_t *)(a2 + v313);
  uint64_t v316 = *v315;
  *(_BYTE *)(v314 + 8) = *((_BYTE *)v315 + 8);
  *(void *)uint64_t v314 = v316;
  uint64_t v317 = a3[127];
  uint64_t v318 = a1 + v317;
  uint64_t v319 = (uint64_t *)(a2 + v317);
  uint64_t v320 = *v319;
  *(_BYTE *)(v318 + 8) = *((_BYTE *)v319 + 8);
  *(void *)uint64_t v318 = v320;
  *(_BYTE *)(a1 + a3[128]) = *(_BYTE *)(a2 + a3[128]);
  uint64_t v321 = a3[129];
  uint64_t v322 = a1 + v321;
  uint64_t v323 = (uint64_t *)(a2 + v321);
  uint64_t v324 = *v323;
  *(_BYTE *)(v322 + 8) = *((_BYTE *)v323 + 8);
  *(void *)uint64_t v322 = v324;
  uint64_t v325 = a3[130];
  uint64_t v326 = *(void *)(a2 + v325);
  *(void *)(a1 + v325) = v326;
  swift_bridgeObjectRetain(v326);
  swift_bridgeObjectRelease();
  uint64_t v327 = a3[131];
  uint64_t v328 = a1 + v327;
  char v329 = (uint64_t *)(a2 + v327);
  uint64_t v330 = *v329;
  *(_BYTE *)(v328 + 8) = *((_BYTE *)v329 + 8);
  *(void *)uint64_t v328 = v330;
  *(_BYTE *)(a1 + a3[132]) = *(_BYTE *)(a2 + a3[132]);
  uint64_t v331 = a3[133];
  uint64_t v332 = *(void *)(a2 + v331);
  *(void *)(a1 + v331) = v332;
  swift_bridgeObjectRetain(v332);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[134]) = *(_BYTE *)(a2 + a3[134]);
  uint64_t v333 = a3[135];
  uint64_t v334 = a1 + v333;
  uint64_t v335 = a2 + v333;
  char v336 = *(_BYTE *)(v335 + 8);
  *(void *)uint64_t v334 = *(void *)v335;
  *(_BYTE *)(v334 + 8) = v336;
  uint64_t v337 = a3[136];
  uint64_t v338 = a1 + v337;
  uint64_t v339 = (uint64_t *)(a2 + v337);
  uint64_t v340 = *v339;
  *(_BYTE *)(v338 + 8) = *((_BYTE *)v339 + 8);
  *(void *)uint64_t v338 = v340;
  *(_BYTE *)(a1 + a3[137]) = *(_BYTE *)(a2 + a3[137]);
  *(_BYTE *)(a1 + a3[138]) = *(_BYTE *)(a2 + a3[138]);
  uint64_t v341 = a3[139];
  uint64_t v342 = a1 + v341;
  uint64_t v343 = (uint64_t *)(a2 + v341);
  uint64_t v344 = *v343;
  *(_BYTE *)(v342 + 8) = *((_BYTE *)v343 + 8);
  *(void *)uint64_t v342 = v344;
  uint64_t v345 = a3[140];
  uint64_t v346 = a1 + v345;
  uint64_t v347 = (uint64_t *)(a2 + v345);
  uint64_t v348 = *v347;
  *(_BYTE *)(v346 + 8) = *((_BYTE *)v347 + 8);
  *(void *)uint64_t v346 = v348;
  uint64_t v349 = a3[141];
  uint64_t v350 = a1 + v349;
  uint64_t v351 = (uint64_t *)(a2 + v349);
  uint64_t v352 = *v351;
  *(_BYTE *)(v350 + 8) = *((_BYTE *)v351 + 8);
  *(void *)uint64_t v350 = v352;
  uint64_t v353 = a3[142];
  uint64_t v354 = a1 + v353;
  uint64_t v355 = (uint64_t *)(a2 + v353);
  uint64_t v356 = *v355;
  *(_BYTE *)(v354 + 8) = *((_BYTE *)v355 + 8);
  *(void *)uint64_t v354 = v356;
  uint64_t v357 = a3[143];
  uint64_t v358 = a1 + v357;
  uint64_t v359 = (uint64_t *)(a2 + v357);
  uint64_t v360 = *v359;
  *(_BYTE *)(v358 + 8) = *((_BYTE *)v359 + 8);
  *(void *)uint64_t v358 = v360;
  uint64_t v361 = a3[144];
  uint64_t v362 = a1 + v361;
  uint64_t v363 = (uint64_t *)(a2 + v361);
  uint64_t v364 = *v363;
  *(_BYTE *)(v362 + 8) = *((_BYTE *)v363 + 8);
  *(void *)uint64_t v362 = v364;
  uint64_t v365 = a3[145];
  uint64_t v366 = a1 + v365;
  uint64_t v367 = (uint64_t *)(a2 + v365);
  uint64_t v368 = *v367;
  *(_BYTE *)(v366 + 8) = *((_BYTE *)v367 + 8);
  *(void *)uint64_t v366 = v368;
  uint64_t v369 = a3[146];
  uint64_t v370 = a1 + v369;
  uint64_t v371 = (uint64_t *)(a2 + v369);
  uint64_t v372 = *v371;
  *(_BYTE *)(v370 + 8) = *((_BYTE *)v371 + 8);
  *(void *)uint64_t v370 = v372;
  uint64_t v373 = a3[147];
  uint64_t v374 = a1 + v373;
  uint64_t v375 = (uint64_t *)(a2 + v373);
  uint64_t v376 = *v375;
  *(_BYTE *)(v374 + 8) = *((_BYTE *)v375 + 8);
  *(void *)uint64_t v374 = v376;
  uint64_t v377 = a3[148];
  uint64_t v378 = a1 + v377;
  uint64_t v379 = (uint64_t *)(a2 + v377);
  uint64_t v380 = *v379;
  *(_BYTE *)(v378 + 8) = *((_BYTE *)v379 + 8);
  *(void *)uint64_t v378 = v380;
  uint64_t v381 = a3[149];
  uint64_t v382 = a1 + v381;
  int v383 = (uint64_t *)(a2 + v381);
  uint64_t v384 = *v383;
  *(_BYTE *)(v382 + 8) = *((_BYTE *)v383 + 8);
  *(void *)uint64_t v382 = v384;
  uint64_t v385 = a3[150];
  uint64_t v386 = a1 + v385;
  v387 = (uint64_t *)(a2 + v385);
  uint64_t v388 = *v387;
  *(_BYTE *)(v386 + 8) = *((_BYTE *)v387 + 8);
  *(void *)uint64_t v386 = v388;
  uint64_t v389 = a3[151];
  uint64_t v390 = a1 + v389;
  char v391 = (uint64_t *)(a2 + v389);
  uint64_t v392 = *v391;
  *(_BYTE *)(v390 + 8) = *((_BYTE *)v391 + 8);
  *(void *)uint64_t v390 = v392;
  uint64_t v393 = a3[152];
  uint64_t v394 = a1 + v393;
  v395 = (uint64_t *)(a2 + v393);
  uint64_t v396 = *v395;
  *(_BYTE *)(v394 + 8) = *((_BYTE *)v395 + 8);
  *(void *)uint64_t v394 = v396;
  uint64_t v397 = a3[153];
  uint64_t v398 = a1 + v397;
  uint64_t v399 = (uint64_t *)(a2 + v397);
  uint64_t v400 = *v399;
  *(_BYTE *)(v398 + 8) = *((_BYTE *)v399 + 8);
  *(void *)uint64_t v398 = v400;
  uint64_t v401 = a3[154];
  uint64_t v402 = a1 + v401;
  int v403 = (uint64_t *)(a2 + v401);
  uint64_t v404 = *v403;
  *(_BYTE *)(v402 + 8) = *((_BYTE *)v403 + 8);
  *(void *)uint64_t v402 = v404;
  uint64_t v405 = a3[155];
  uint64_t v406 = a1 + v405;
  v407 = (uint64_t *)(a2 + v405);
  uint64_t v408 = *v407;
  *(_BYTE *)(v406 + 8) = *((_BYTE *)v407 + 8);
  *(void *)uint64_t v406 = v408;
  uint64_t v409 = a3[156];
  uint64_t v410 = a1 + v409;
  char v411 = (uint64_t *)(a2 + v409);
  uint64_t v412 = *v411;
  *(_BYTE *)(v410 + 8) = *((_BYTE *)v411 + 8);
  *(void *)uint64_t v410 = v412;
  *(_BYTE *)(a1 + a3[157]) = *(_BYTE *)(a2 + a3[157]);
  uint64_t v413 = a3[158];
  uint64_t v414 = a1 + v413;
  v415 = (uint64_t *)(a2 + v413);
  uint64_t v416 = *v415;
  *(_BYTE *)(v414 + 8) = *((_BYTE *)v415 + 8);
  *(void *)uint64_t v414 = v416;
  uint64_t v417 = a3[159];
  uint64_t v418 = a1 + v417;
  uint64_t v419 = (uint64_t *)(a2 + v417);
  uint64_t v420 = *v419;
  *(_BYTE *)(v418 + 8) = *((_BYTE *)v419 + 8);
  *(void *)uint64_t v418 = v420;
  uint64_t v421 = a3[160];
  uint64_t v422 = a1 + v421;
  int v423 = (uint64_t *)(a2 + v421);
  uint64_t v424 = *v423;
  *(_BYTE *)(v422 + 8) = *((_BYTE *)v423 + 8);
  *(void *)uint64_t v422 = v424;
  uint64_t v425 = a3[161];
  char v426 = (void *)(a1 + v425);
  v427 = (void *)(a2 + v425);
  *char v426 = *v427;
  uint64_t v428 = v427[1];
  v426[1] = v428;
  swift_bridgeObjectRetain(v428);
  swift_bridgeObjectRelease();
  uint64_t v429 = a3[162];
  uint64_t v430 = a1 + v429;
  char v431 = (uint64_t *)(a2 + v429);
  uint64_t v432 = *v431;
  *(_BYTE *)(v430 + 8) = *((_BYTE *)v431 + 8);
  *(void *)uint64_t v430 = v432;
  *(_BYTE *)(a1 + a3[163]) = *(_BYTE *)(a2 + a3[163]);
  *(_BYTE *)(a1 + a3[164]) = *(_BYTE *)(a2 + a3[164]);
  uint64_t v433 = a3[165];
  uint64_t v434 = a1 + v433;
  v435 = (uint64_t *)(a2 + v433);
  uint64_t v436 = *v435;
  *(_BYTE *)(v434 + 8) = *((_BYTE *)v435 + 8);
  *(void *)uint64_t v434 = v436;
  uint64_t v437 = a3[166];
  uint64_t v438 = a1 + v437;
  uint64_t v439 = (uint64_t *)(a2 + v437);
  uint64_t v440 = *v439;
  *(_BYTE *)(v438 + 8) = *((_BYTE *)v439 + 8);
  *(void *)uint64_t v438 = v440;
  *(_BYTE *)(a1 + a3[167]) = *(_BYTE *)(a2 + a3[167]);
  uint64_t v441 = a3[168];
  uint64_t v442 = a1 + v441;
  uint64_t v443 = a2 + v441;
  LODWORD(v440) = *(_DWORD *)v443;
  *(_BYTE *)(v442 + 4) = *(_BYTE *)(v443 + 4);
  *(_DWORD *)uint64_t v442 = v440;
  uint64_t v444 = a3[169];
  uint64_t v445 = a1 + v444;
  char v446 = (uint64_t *)(a2 + v444);
  uint64_t v447 = *v446;
  *(_BYTE *)(v445 + 8) = *((_BYTE *)v446 + 8);
  *(void *)uint64_t v445 = v447;
  uint64_t v448 = a3[170];
  uint64_t v449 = a1 + v448;
  v450 = (uint64_t *)(a2 + v448);
  uint64_t v451 = *v450;
  *(_BYTE *)(v449 + 8) = *((_BYTE *)v450 + 8);
  *(void *)uint64_t v449 = v451;
  uint64_t v452 = a3[171];
  uint64_t v453 = a1 + v452;
  uint64_t v454 = (uint64_t *)(a2 + v452);
  uint64_t v455 = *v454;
  *(_BYTE *)(v453 + 8) = *((_BYTE *)v454 + 8);
  *(void *)uint64_t v453 = v455;
  uint64_t v456 = a3[172];
  uint64_t v457 = a1 + v456;
  int v458 = (uint64_t *)(a2 + v456);
  uint64_t v459 = *v458;
  *(_BYTE *)(v457 + 8) = *((_BYTE *)v458 + 8);
  *(void *)uint64_t v457 = v459;
  uint64_t v460 = a3[173];
  uint64_t v461 = a1 + v460;
  v462 = (uint64_t *)(a2 + v460);
  uint64_t v463 = *v462;
  *(_BYTE *)(v461 + 8) = *((_BYTE *)v462 + 8);
  *(void *)uint64_t v461 = v463;
  uint64_t v464 = a3[174];
  uint64_t v465 = a1 + v464;
  char v466 = (uint64_t *)(a2 + v464);
  uint64_t v467 = *v466;
  *(_BYTE *)(v465 + 8) = *((_BYTE *)v466 + 8);
  *(void *)uint64_t v465 = v467;
  uint64_t v468 = a3[175];
  uint64_t v469 = a1 + v468;
  v470 = (uint64_t *)(a2 + v468);
  uint64_t v471 = *v470;
  *(_BYTE *)(v469 + 8) = *((_BYTE *)v470 + 8);
  *(void *)uint64_t v469 = v471;
  *(_BYTE *)(a1 + a3[176]) = *(_BYTE *)(a2 + a3[176]);
  uint64_t v472 = a3[177];
  uint64_t v473 = a1 + v472;
  uint64_t v474 = (uint64_t *)(a2 + v472);
  uint64_t v475 = *v474;
  *(_BYTE *)(v473 + 8) = *((_BYTE *)v474 + 8);
  *(void *)uint64_t v473 = v475;
  uint64_t v476 = a3[178];
  uint64_t v477 = a1 + v476;
  int v478 = (uint64_t *)(a2 + v476);
  uint64_t v479 = *v478;
  *(_BYTE *)(v477 + 8) = *((_BYTE *)v478 + 8);
  *(void *)uint64_t v477 = v479;
  return a1;
}

uint64_t sub_1004258E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100425914(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  uint64_t v6 = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = v6;
  uint64_t v7 = *(void *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = v7;
  uint64_t v8 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v8;
  *(_BYTE *)(a1 + 265) = *(_BYTE *)(a2 + 265);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  uint64_t v9 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v9;
  uint64_t v10 = *(void *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 296) = v10;
  uint64_t v11 = *(void *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(void *)(a1 + 312) = v11;
  uint64_t v12 = *(void *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(void *)(a1 + 328) = v12;
  uint64_t v13 = *(void *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(void *)(a1 + 344) = v13;
  uint64_t v14 = *(void *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(void *)(a1 + 360) = v14;
  uint64_t v15 = *(void *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(void *)(a1 + 376) = v15;
  uint64_t v16 = *(void *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(void *)(a1 + 392) = v16;
  uint64_t v17 = *(void *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(void *)(a1 + 408) = v17;
  uint64_t v18 = *(void *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(void *)(a1 + 424) = v18;
  *(_BYTE *)(a1 + 433) = *(_BYTE *)(a2 + 433);
  uint64_t v19 = *(void *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(void *)(a1 + 440) = v19;
  uint64_t v20 = *(void *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(void *)(a1 + 456) = v20;
  uint64_t v21 = *(void *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(void *)(a1 + 472) = v21;
  uint64_t v22 = *(void *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(void *)(a1 + 488) = v22;
  uint64_t v23 = *(void *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(void *)(a1 + 504) = v23;
  uint64_t v24 = *(void *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(void *)(a1 + 520) = v24;
  uint64_t v25 = *(void *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(void *)(a1 + 536) = v25;
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  uint64_t v26 = *(void *)(a2 + 560);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  *(void *)(a1 + 560) = v26;
  uint64_t v27 = *(void *)(a2 + 576);
  *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
  *(void *)(a1 + 576) = v27;
  __int128 v28 = *(_OWORD *)(a2 + 592);
  uint64_t v29 = *(void *)(a2 + 608);
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
  *(void *)(a1 + 608) = v29;
  uint64_t v30 = *(void *)(a2 + 624);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(void *)(a1 + 624) = v30;
  uint64_t v31 = *(void *)(a2 + 640);
  *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
  *(void *)(a1 + 640) = v31;
  uint64_t v32 = *(void *)(a2 + 656);
  *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
  *(void *)(a1 + 656) = v32;
  uint64_t v33 = *(void *)(a2 + 672);
  *(_BYTE *)(a1 + 680) = *(_BYTE *)(a2 + 680);
  *(void *)(a1 + 672) = v33;
  *(_BYTE *)(a1 + 681) = *(_BYTE *)(a2 + 681);
  uint64_t v34 = a3[57];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (const void *)(a2 + v34);
  *(_OWORD *)(a1 + 592) = v28;
  uint64_t v37 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37))
  {
    uint64_t v39 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v38 + 32))(v35, v36, v37);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
  }

  uint64_t v40 = a3[58];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (const void *)(a2 + v40);
  uint64_t v43 = type metadata accessor for Date(0LL);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
  if (v45(v42, 1LL, v43))
  {
    uint64_t v46 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v44 + 32))(v41, v42, v43);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0LL, 1LL, v43);
  }

  uint64_t v47 = a3[59];
  uint64_t v48 = a3[60];
  uint64_t v49 = a1 + v47;
  uint64_t v50 = a2 + v47;
  *(void *)uint64_t v49 = *(void *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  uint64_t v51 = (void *)(a1 + v48);
  uint64_t v52 = (const void *)(a2 + v48);
  if (v45((const void *)(a2 + v48), 1LL, v43))
  {
    uint64_t v53 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v44 + 32))(v51, v52, v43);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v51, 0LL, 1LL, v43);
  }

  uint64_t v54 = a3[61];
  uint64_t v55 = a3[62];
  uint64_t v56 = a1 + v54;
  uint64_t v57 = a2 + v54;
  *(void *)uint64_t v56 = *(void *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  uint64_t v58 = a1 + v55;
  uint64_t v59 = a2 + v55;
  *(void *)uint64_t v58 = *(void *)v59;
  *(_BYTE *)(v58 + 8) = *(_BYTE *)(v59 + 8);
  uint64_t v60 = a3[63];
  uint64_t v61 = a3[64];
  uint64_t v62 = a1 + v60;
  uint64_t v63 = a2 + v60;
  *(void *)uint64_t v62 = *(void *)v63;
  *(_BYTE *)(v62 + 8) = *(_BYTE *)(v63 + 8);
  uint64_t v64 = a1 + v61;
  uint64_t v65 = a2 + v61;
  *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
  *(void *)uint64_t v64 = *(void *)v65;
  uint64_t v66 = a3[65];
  uint64_t v67 = a1 + v66;
  uint64_t v68 = a2 + v66;
  *(void *)uint64_t v67 = *(void *)v68;
  *(_BYTE *)(v67 + 8) = *(_BYTE *)(v68 + 8);
  uint64_t v69 = a3[66];
  uint64_t v70 = a1 + v69;
  uint64_t v71 = a2 + v69;
  *(void *)uint64_t v70 = *(void *)v71;
  *(_BYTE *)(v70 + 8) = *(_BYTE *)(v71 + 8);
  uint64_t v72 = a3[67];
  uint64_t v73 = (_OWORD *)(a1 + v72);
  uint64_t v74 = (_OWORD *)(a2 + v72);
  __int128 v75 = v74[1];
  *uint64_t v73 = *v74;
  v73[1] = v75;
  __int128 v76 = v74[6];
  __int128 v77 = v74[4];
  v73[5] = v74[5];
  v73[6] = v76;
  __int128 v78 = v74[3];
  v73[2] = v74[2];
  v73[3] = v78;
  v73[4] = v77;
  *(_BYTE *)(a1 + a3[68]) = *(_BYTE *)(a2 + a3[68]);
  *(_BYTE *)(a1 + a3[69]) = *(_BYTE *)(a2 + a3[69]);
  *(_BYTE *)(a1 + a3[70]) = *(_BYTE *)(a2 + a3[70]);
  uint64_t v79 = a3[71];
  uint64_t v80 = a1 + v79;
  uint64_t v81 = a2 + v79;
  *(void *)uint64_t v80 = *(void *)v81;
  *(_BYTE *)(v80 + 8) = *(_BYTE *)(v81 + 8);
  uint64_t v82 = a3[72];
  uint64_t v83 = a1 + v82;
  uint64_t v84 = a2 + v82;
  *(void *)uint64_t v83 = *(void *)v84;
  *(_BYTE *)(v83 + 8) = *(_BYTE *)(v84 + 8);
  uint64_t v85 = a3[73];
  uint64_t v86 = a1 + v85;
  uint64_t v87 = a2 + v85;
  *(void *)uint64_t v86 = *(void *)v87;
  *(_BYTE *)(v86 + 8) = *(_BYTE *)(v87 + 8);
  uint64_t v88 = a3[74];
  uint64_t v89 = a1 + v88;
  uint64_t v90 = a2 + v88;
  *(void *)uint64_t v89 = *(void *)v90;
  *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
  uint64_t v91 = a3[75];
  uint64_t v92 = a1 + v91;
  uint64_t v93 = (uint64_t *)(a2 + v91);
  uint64_t v94 = *v93;
  *(_BYTE *)(v92 + 8) = *((_BYTE *)v93 + 8);
  *(void *)uint64_t v92 = v94;
  uint64_t v95 = a3[76];
  uint64_t v96 = a1 + v95;
  uint64_t v97 = a2 + v95;
  *(void *)uint64_t v96 = *(void *)v97;
  *(_BYTE *)(v96 + 8) = *(_BYTE *)(v97 + 8);
  uint64_t v98 = a3[77];
  uint64_t v99 = a1 + v98;
  uint64_t v100 = a2 + v98;
  *(void *)uint64_t v99 = *(void *)v100;
  *(_BYTE *)(v99 + 8) = *(_BYTE *)(v100 + 8);
  uint64_t v101 = a3[78];
  uint64_t v102 = a1 + v101;
  uint64_t v103 = a2 + v101;
  *(void *)uint64_t v102 = *(void *)v103;
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(v103 + 8);
  uint64_t v104 = a3[79];
  uint64_t v105 = a1 + v104;
  uint64_t v106 = a2 + v104;
  *(void *)uint64_t v105 = *(void *)v106;
  *(_BYTE *)(v105 + 8) = *(_BYTE *)(v106 + 8);
  *(_OWORD *)(a1 + a3[80]) = *(_OWORD *)(a2 + a3[80]);
  uint64_t v107 = a3[81];
  uint64_t v108 = a1 + v107;
  uint64_t v109 = a2 + v107;
  *(void *)uint64_t v108 = *(void *)v109;
  *(_BYTE *)(v108 + 8) = *(_BYTE *)(v109 + 8);
  *(_OWORD *)(a1 + a3[82]) = *(_OWORD *)(a2 + a3[82]);
  uint64_t v110 = a3[83];
  uint64_t v111 = a1 + v110;
  uint64_t v112 = a2 + v110;
  *(void *)uint64_t v111 = *(void *)v112;
  *(_BYTE *)(v111 + 8) = *(_BYTE *)(v112 + 8);
  *(void *)(a1 + a3[84]) = *(void *)(a2 + a3[84]);
  *(_OWORD *)(a1 + a3[85]) = *(_OWORD *)(a2 + a3[85]);
  uint64_t v113 = a3[86];
  uint64_t v114 = a1 + v113;
  uint64_t v115 = a2 + v113;
  *(void *)uint64_t v114 = *(void *)v115;
  *(_BYTE *)(v114 + 8) = *(_BYTE *)(v115 + 8);
  *(_BYTE *)(a1 + a3[87]) = *(_BYTE *)(a2 + a3[87]);
  *(_BYTE *)(a1 + a3[88]) = *(_BYTE *)(a2 + a3[88]);
  *(_BYTE *)(a1 + a3[89]) = *(_BYTE *)(a2 + a3[89]);
  *(_BYTE *)(a1 + a3[90]) = *(_BYTE *)(a2 + a3[90]);
  uint64_t v116 = a3[91];
  uint64_t v117 = a1 + v116;
  uint64_t v118 = a2 + v116;
  *(void *)uint64_t v117 = *(void *)v118;
  *(_BYTE *)(v117 + 8) = *(_BYTE *)(v118 + 8);
  uint64_t v119 = a3[92];
  uint64_t v120 = a1 + v119;
  uint64_t v121 = a2 + v119;
  *(void *)uint64_t v120 = *(void *)v121;
  *(_BYTE *)(v120 + 8) = *(_BYTE *)(v121 + 8);
  uint64_t v122 = a3[93];
  uint64_t v123 = a1 + v122;
  uint64_t v124 = a2 + v122;
  *(void *)uint64_t v123 = *(void *)v124;
  *(_BYTE *)(v123 + 8) = *(_BYTE *)(v124 + 8);
  uint64_t v125 = a3[94];
  uint64_t v126 = a1 + v125;
  uint64_t v127 = a2 + v125;
  *(void *)uint64_t v126 = *(void *)v127;
  *(_BYTE *)(v126 + 8) = *(_BYTE *)(v127 + 8);
  uint64_t v128 = a3[95];
  uint64_t v129 = a1 + v128;
  uint64_t v130 = (uint64_t *)(a2 + v128);
  uint64_t v131 = *v130;
  *(_BYTE *)(v129 + 8) = *((_BYTE *)v130 + 8);
  *(void *)uint64_t v129 = v131;
  uint64_t v132 = a3[96];
  uint64_t v133 = a1 + v132;
  uint64_t v134 = a2 + v132;
  *(void *)uint64_t v133 = *(void *)v134;
  *(_BYTE *)(v133 + 8) = *(_BYTE *)(v134 + 8);
  uint64_t v135 = a3[97];
  uint64_t v136 = a1 + v135;
  uint64_t v137 = a2 + v135;
  *(void *)uint64_t v136 = *(void *)v137;
  *(_BYTE *)(v136 + 8) = *(_BYTE *)(v137 + 8);
  uint64_t v138 = a3[98];
  uint64_t v139 = a1 + v138;
  uint64_t v140 = a2 + v138;
  *(void *)uint64_t v139 = *(void *)v140;
  *(_BYTE *)(v139 + 8) = *(_BYTE *)(v140 + 8);
  uint64_t v141 = a3[99];
  uint64_t v142 = a1 + v141;
  uint64_t v143 = a2 + v141;
  *(void *)uint64_t v142 = *(void *)v143;
  *(_BYTE *)(v142 + 8) = *(_BYTE *)(v143 + 8);
  uint64_t v144 = a3[100];
  uint64_t v145 = a1 + v144;
  uint64_t v146 = a2 + v144;
  *(void *)uint64_t v145 = *(void *)v146;
  *(_BYTE *)(v145 + 8) = *(_BYTE *)(v146 + 8);
  uint64_t v147 = a3[101];
  uint64_t v148 = a1 + v147;
  uint64_t v149 = a2 + v147;
  *(void *)uint64_t v148 = *(void *)v149;
  *(_BYTE *)(v148 + 8) = *(_BYTE *)(v149 + 8);
  uint64_t v150 = a3[102];
  uint64_t v151 = a1 + v150;
  uint64_t v152 = a2 + v150;
  *(void *)uint64_t v151 = *(void *)v152;
  *(_BYTE *)(v151 + 8) = *(_BYTE *)(v152 + 8);
  uint64_t v153 = a3[103];
  uint64_t v154 = a1 + v153;
  uint64_t v155 = a2 + v153;
  *(void *)uint64_t v154 = *(void *)v155;
  *(_BYTE *)(v154 + 8) = *(_BYTE *)(v155 + 8);
  uint64_t v156 = a3[104];
  uint64_t v157 = a1 + v156;
  uint64_t v158 = a2 + v156;
  *(void *)uint64_t v157 = *(void *)v158;
  *(_BYTE *)(v157 + 8) = *(_BYTE *)(v158 + 8);
  uint64_t v159 = a3[105];
  uint64_t v160 = a1 + v159;
  uint64_t v161 = a2 + v159;
  *(void *)uint64_t v160 = *(void *)v161;
  *(_BYTE *)(v160 + 8) = *(_BYTE *)(v161 + 8);
  uint64_t v162 = a3[106];
  uint64_t v163 = a1 + v162;
  uint64_t v164 = a2 + v162;
  *(void *)uint64_t v163 = *(void *)v164;
  *(_BYTE *)(v163 + 8) = *(_BYTE *)(v164 + 8);
  uint64_t v165 = a3[107];
  uint64_t v166 = a1 + v165;
  uint64_t v167 = a2 + v165;
  *(void *)uint64_t v166 = *(void *)v167;
  *(_BYTE *)(v166 + 8) = *(_BYTE *)(v167 + 8);
  uint64_t v168 = a3[108];
  uint64_t v169 = a1 + v168;
  uint64_t v170 = a2 + v168;
  *(void *)uint64_t v169 = *(void *)v170;
  *(_BYTE *)(v169 + 8) = *(_BYTE *)(v170 + 8);
  uint64_t v171 = a3[109];
  uint64_t v172 = a1 + v171;
  uint64_t v173 = a2 + v171;
  *(void *)uint64_t v172 = *(void *)v173;
  *(_BYTE *)(v172 + 8) = *(_BYTE *)(v173 + 8);
  uint64_t v174 = a3[110];
  uint64_t v175 = a1 + v174;
  uint64_t v176 = a2 + v174;
  *(void *)uint64_t v175 = *(void *)v176;
  *(_BYTE *)(v175 + 8) = *(_BYTE *)(v176 + 8);
  uint64_t v177 = a3[111];
  uint64_t v178 = a1 + v177;
  uint64_t v179 = a2 + v177;
  *(void *)uint64_t v178 = *(void *)v179;
  *(_BYTE *)(v178 + 8) = *(_BYTE *)(v179 + 8);
  uint64_t v180 = a3[112];
  uint64_t v181 = a1 + v180;
  uint64_t v182 = a2 + v180;
  *(void *)uint64_t v181 = *(void *)v182;
  *(_BYTE *)(v181 + 8) = *(_BYTE *)(v182 + 8);
  *(_BYTE *)(a1 + a3[113]) = *(_BYTE *)(a2 + a3[113]);
  uint64_t v183 = a3[114];
  uint64_t v184 = a1 + v183;
  uint64_t v185 = a2 + v183;
  *(void *)uint64_t v184 = *(void *)v185;
  *(_BYTE *)(v184 + 8) = *(_BYTE *)(v185 + 8);
  uint64_t v186 = a3[115];
  uint64_t v187 = a1 + v186;
  uint64_t v188 = a2 + v186;
  *(void *)uint64_t v187 = *(void *)v188;
  *(_BYTE *)(v187 + 8) = *(_BYTE *)(v188 + 8);
  uint64_t v189 = a3[116];
  uint64_t v190 = a1 + v189;
  uint64_t v191 = a2 + v189;
  *(void *)uint64_t v190 = *(void *)v191;
  *(_BYTE *)(v190 + 8) = *(_BYTE *)(v191 + 8);
  *(_BYTE *)(a1 + a3[117]) = *(_BYTE *)(a2 + a3[117]);
  *(_BYTE *)(a1 + a3[118]) = *(_BYTE *)(a2 + a3[118]);
  *(_BYTE *)(a1 + a3[119]) = *(_BYTE *)(a2 + a3[119]);
  uint64_t v192 = a3[120];
  uint64_t v193 = a1 + v192;
  uint64_t v194 = a2 + v192;
  *(void *)uint64_t v193 = *(void *)v194;
  *(_BYTE *)(v193 + 8) = *(_BYTE *)(v194 + 8);
  uint64_t v195 = a3[121];
  uint64_t v196 = a1 + v195;
  uint64_t v197 = a2 + v195;
  *(void *)uint64_t v196 = *(void *)v197;
  *(_BYTE *)(v196 + 8) = *(_BYTE *)(v197 + 8);
  uint64_t v198 = a3[122];
  uint64_t v199 = a1 + v198;
  uint64_t v200 = a2 + v198;
  *(void *)uint64_t v199 = *(void *)v200;
  *(_BYTE *)(v199 + 8) = *(_BYTE *)(v200 + 8);
  uint64_t v201 = a3[123];
  uint64_t v202 = a1 + v201;
  uint64_t v203 = a2 + v201;
  *(void *)uint64_t v202 = *(void *)v203;
  *(_BYTE *)(v202 + 8) = *(_BYTE *)(v203 + 8);
  uint64_t v204 = a3[124];
  uint64_t v205 = a1 + v204;
  uint64_t v206 = (uint64_t *)(a2 + v204);
  uint64_t v207 = *v206;
  *(_BYTE *)(v205 + 8) = *((_BYTE *)v206 + 8);
  *(void *)uint64_t v205 = v207;
  uint64_t v208 = a3[125];
  uint64_t v209 = a1 + v208;
  uint64_t v210 = a2 + v208;
  *(void *)uint64_t v209 = *(void *)v210;
  *(_BYTE *)(v209 + 8) = *(_BYTE *)(v210 + 8);
  uint64_t v211 = a3[126];
  uint64_t v212 = a1 + v211;
  uint64_t v213 = a2 + v211;
  *(void *)uint64_t v212 = *(void *)v213;
  *(_BYTE *)(v212 + 8) = *(_BYTE *)(v213 + 8);
  uint64_t v214 = a3[127];
  uint64_t v215 = a1 + v214;
  uint64_t v216 = a2 + v214;
  *(void *)uint64_t v215 = *(void *)v216;
  *(_BYTE *)(v215 + 8) = *(_BYTE *)(v216 + 8);
  *(_BYTE *)(a1 + a3[128]) = *(_BYTE *)(a2 + a3[128]);
  uint64_t v217 = a3[129];
  uint64_t v218 = a1 + v217;
  uint64_t v219 = a2 + v217;
  *(void *)uint64_t v218 = *(void *)v219;
  *(_BYTE *)(v218 + 8) = *(_BYTE *)(v219 + 8);
  *(void *)(a1 + a3[130]) = *(void *)(a2 + a3[130]);
  uint64_t v220 = a3[131];
  uint64_t v221 = a1 + v220;
  uint64_t v222 = a2 + v220;
  *(void *)uint64_t v221 = *(void *)v222;
  *(_BYTE *)(v221 + 8) = *(_BYTE *)(v222 + 8);
  *(_BYTE *)(a1 + a3[132]) = *(_BYTE *)(a2 + a3[132]);
  *(void *)(a1 + a3[133]) = *(void *)(a2 + a3[133]);
  *(_BYTE *)(a1 + a3[134]) = *(_BYTE *)(a2 + a3[134]);
  uint64_t v223 = a3[135];
  uint64_t v224 = a1 + v223;
  uint64_t v225 = a2 + v223;
  *(void *)uint64_t v224 = *(void *)v225;
  *(_BYTE *)(v224 + 8) = *(_BYTE *)(v225 + 8);
  uint64_t v226 = a3[136];
  uint64_t v227 = a1 + v226;
  uint64_t v228 = a2 + v226;
  *(void *)uint64_t v227 = *(void *)v228;
  *(_BYTE *)(v227 + 8) = *(_BYTE *)(v228 + 8);
  *(_BYTE *)(a1 + a3[137]) = *(_BYTE *)(a2 + a3[137]);
  *(_BYTE *)(a1 + a3[138]) = *(_BYTE *)(a2 + a3[138]);
  uint64_t v229 = a3[139];
  uint64_t v230 = a1 + v229;
  uint64_t v231 = a2 + v229;
  *(void *)uint64_t v230 = *(void *)v231;
  *(_BYTE *)(v230 + 8) = *(_BYTE *)(v231 + 8);
  uint64_t v232 = a3[140];
  uint64_t v233 = a1 + v232;
  uint64_t v234 = a2 + v232;
  *(void *)uint64_t v233 = *(void *)v234;
  *(_BYTE *)(v233 + 8) = *(_BYTE *)(v234 + 8);
  uint64_t v235 = a3[141];
  uint64_t v236 = a1 + v235;
  uint64_t v237 = a2 + v235;
  *(void *)uint64_t v236 = *(void *)v237;
  *(_BYTE *)(v236 + 8) = *(_BYTE *)(v237 + 8);
  uint64_t v238 = a3[142];
  uint64_t v239 = a1 + v238;
  uint64_t v240 = a2 + v238;
  *(void *)uint64_t v239 = *(void *)v240;
  *(_BYTE *)(v239 + 8) = *(_BYTE *)(v240 + 8);
  uint64_t v241 = a3[143];
  uint64_t v242 = a1 + v241;
  uint64_t v243 = (uint64_t *)(a2 + v241);
  uint64_t v244 = *v243;
  *(_BYTE *)(v242 + 8) = *((_BYTE *)v243 + 8);
  *(void *)uint64_t v242 = v244;
  uint64_t v245 = a3[144];
  uint64_t v246 = a1 + v245;
  uint64_t v247 = a2 + v245;
  *(void *)uint64_t v246 = *(void *)v247;
  *(_BYTE *)(v246 + 8) = *(_BYTE *)(v247 + 8);
  uint64_t v248 = a3[145];
  uint64_t v249 = a1 + v248;
  uint64_t v250 = a2 + v248;
  *(void *)uint64_t v249 = *(void *)v250;
  *(_BYTE *)(v249 + 8) = *(_BYTE *)(v250 + 8);
  uint64_t v251 = a3[146];
  uint64_t v252 = a1 + v251;
  uint64_t v253 = a2 + v251;
  *(void *)uint64_t v252 = *(void *)v253;
  *(_BYTE *)(v252 + 8) = *(_BYTE *)(v253 + 8);
  uint64_t v254 = a3[147];
  uint64_t v255 = a1 + v254;
  uint64_t v256 = a2 + v254;
  *(void *)uint64_t v255 = *(void *)v256;
  *(_BYTE *)(v255 + 8) = *(_BYTE *)(v256 + 8);
  uint64_t v257 = a3[148];
  uint64_t v258 = a1 + v257;
  uint64_t v259 = a2 + v257;
  *(void *)uint64_t v258 = *(void *)v259;
  *(_BYTE *)(v258 + 8) = *(_BYTE *)(v259 + 8);
  uint64_t v260 = a3[149];
  uint64_t v261 = a1 + v260;
  uint64_t v262 = a2 + v260;
  *(void *)uint64_t v261 = *(void *)v262;
  *(_BYTE *)(v261 + 8) = *(_BYTE *)(v262 + 8);
  uint64_t v263 = a3[150];
  uint64_t v264 = a1 + v263;
  uint64_t v265 = a2 + v263;
  *(void *)uint64_t v264 = *(void *)v265;
  *(_BYTE *)(v264 + 8) = *(_BYTE *)(v265 + 8);
  uint64_t v266 = a3[151];
  uint64_t v267 = a1 + v266;
  uint64_t v268 = a2 + v266;
  *(void *)uint64_t v267 = *(void *)v268;
  *(_BYTE *)(v267 + 8) = *(_BYTE *)(v268 + 8);
  uint64_t v269 = a3[152];
  uint64_t v270 = a1 + v269;
  uint64_t v271 = a2 + v269;
  *(void *)uint64_t v270 = *(void *)v271;
  *(_BYTE *)(v270 + 8) = *(_BYTE *)(v271 + 8);
  uint64_t v272 = a3[153];
  uint64_t v273 = a1 + v272;
  uint64_t v274 = a2 + v272;
  *(void *)uint64_t v273 = *(void *)v274;
  *(_BYTE *)(v273 + 8) = *(_BYTE *)(v274 + 8);
  uint64_t v275 = a3[154];
  uint64_t v276 = a1 + v275;
  uint64_t v277 = a2 + v275;
  *(void *)uint64_t v276 = *(void *)v277;
  *(_BYTE *)(v276 + 8) = *(_BYTE *)(v277 + 8);
  uint64_t v278 = a3[155];
  uint64_t v279 = a1 + v278;
  uint64_t v280 = a2 + v278;
  *(void *)uint64_t v279 = *(void *)v280;
  *(_BYTE *)(v279 + 8) = *(_BYTE *)(v280 + 8);
  uint64_t v281 = a3[156];
  uint64_t v282 = a1 + v281;
  uint64_t v283 = a2 + v281;
  *(void *)uint64_t v282 = *(void *)v283;
  *(_BYTE *)(v282 + 8) = *(_BYTE *)(v283 + 8);
  *(_BYTE *)(a1 + a3[157]) = *(_BYTE *)(a2 + a3[157]);
  uint64_t v284 = a3[158];
  uint64_t v285 = a1 + v284;
  uint64_t v286 = a2 + v284;
  *(void *)uint64_t v285 = *(void *)v286;
  *(_BYTE *)(v285 + 8) = *(_BYTE *)(v286 + 8);
  uint64_t v287 = a3[159];
  uint64_t v288 = a1 + v287;
  uint64_t v289 = a2 + v287;
  *(void *)uint64_t v288 = *(void *)v289;
  *(_BYTE *)(v288 + 8) = *(_BYTE *)(v289 + 8);
  uint64_t v290 = a3[160];
  uint64_t v291 = a1 + v290;
  uint64_t v292 = a2 + v290;
  *(void *)uint64_t v291 = *(void *)v292;
  *(_BYTE *)(v291 + 8) = *(_BYTE *)(v292 + 8);
  *(_OWORD *)(a1 + a3[161]) = *(_OWORD *)(a2 + a3[161]);
  uint64_t v293 = a3[162];
  uint64_t v294 = a1 + v293;
  uint64_t v295 = a2 + v293;
  *(void *)uint64_t v294 = *(void *)v295;
  *(_BYTE *)(v294 + 8) = *(_BYTE *)(v295 + 8);
  *(_BYTE *)(a1 + a3[163]) = *(_BYTE *)(a2 + a3[163]);
  *(_BYTE *)(a1 + a3[164]) = *(_BYTE *)(a2 + a3[164]);
  uint64_t v296 = a3[165];
  uint64_t v297 = a1 + v296;
  uint64_t v298 = a2 + v296;
  *(void *)uint64_t v297 = *(void *)v298;
  *(_BYTE *)(v297 + 8) = *(_BYTE *)(v298 + 8);
  uint64_t v299 = a3[166];
  uint64_t v300 = a1 + v299;
  uint64_t v301 = a2 + v299;
  *(void *)uint64_t v300 = *(void *)v301;
  *(_BYTE *)(v300 + 8) = *(_BYTE *)(v301 + 8);
  *(_BYTE *)(a1 + a3[167]) = *(_BYTE *)(a2 + a3[167]);
  uint64_t v302 = a3[168];
  uint64_t v303 = a1 + v302;
  uint64_t v304 = a2 + v302;
  *(_DWORD *)uint64_t v303 = *(_DWORD *)v304;
  *(_BYTE *)(v303 + 4) = *(_BYTE *)(v304 + 4);
  uint64_t v305 = a3[169];
  uint64_t v306 = a1 + v305;
  uint64_t v307 = a2 + v305;
  *(void *)uint64_t v306 = *(void *)v307;
  *(_BYTE *)(v306 + 8) = *(_BYTE *)(v307 + 8);
  uint64_t v308 = a3[170];
  uint64_t v309 = a1 + v308;
  uint64_t v310 = a2 + v308;
  *(void *)uint64_t v309 = *(void *)v310;
  *(_BYTE *)(v309 + 8) = *(_BYTE *)(v310 + 8);
  uint64_t v311 = a3[171];
  uint64_t v312 = a1 + v311;
  uint64_t v313 = a2 + v311;
  *(void *)uint64_t v312 = *(void *)v313;
  *(_BYTE *)(v312 + 8) = *(_BYTE *)(v313 + 8);
  uint64_t v314 = a3[172];
  uint64_t v315 = a1 + v314;
  uint64_t v316 = (uint64_t *)(a2 + v314);
  uint64_t v317 = *v316;
  *(_BYTE *)(v315 + 8) = *((_BYTE *)v316 + 8);
  *(void *)uint64_t v315 = v317;
  uint64_t v318 = a3[173];
  uint64_t v319 = a1 + v318;
  uint64_t v320 = a2 + v318;
  *(void *)uint64_t v319 = *(void *)v320;
  *(_BYTE *)(v319 + 8) = *(_BYTE *)(v320 + 8);
  uint64_t v321 = a3[174];
  uint64_t v322 = a1 + v321;
  uint64_t v323 = a2 + v321;
  *(void *)uint64_t v322 = *(void *)v323;
  *(_BYTE *)(v322 + 8) = *(_BYTE *)(v323 + 8);
  uint64_t v324 = a3[175];
  uint64_t v325 = a1 + v324;
  uint64_t v326 = a2 + v324;
  *(void *)uint64_t v325 = *(void *)v326;
  uint64_t v327 = a3[176];
  char v328 = *(_BYTE *)(a2 + v327);
  *(_BYTE *)(v325 + 8) = *(_BYTE *)(v326 + 8);
  *(_BYTE *)(a1 + v327) = v328;
  uint64_t v329 = a3[177];
  uint64_t v330 = a1 + v329;
  uint64_t v331 = a2 + v329;
  *(void *)uint64_t v330 = *(void *)v331;
  *(_BYTE *)(v330 + 8) = *(_BYTE *)(v331 + 8);
  uint64_t v332 = a3[178];
  uint64_t v333 = a1 + v332;
  uint64_t v334 = a2 + v332;
  *(void *)uint64_t v333 = *(void *)v334;
  *(_BYTE *)(v333 + 8) = *(_BYTE *)(v334 + 8);
  return a1;
}

uint64_t sub_1004268C4(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_100041D4C(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }

  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_100016F9C(v8, v6);
LABEL_6:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  uint64_t v10 = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = v10;
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  uint64_t v11 = *(void *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(void *)(a1 + 344) = v11;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(_WORD *)(a1 + 432) = *(_WORD *)(a2 + 432);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  uint64_t v12 = *(void *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(void *)(a1 + 488) = v12;
  uint64_t v13 = *(void *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(void *)(a1 + 504) = v13;
  uint64_t v14 = *(void *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(void *)(a1 + 520) = v14;
  uint64_t v15 = *(void *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(void *)(a1 + 536) = v15;
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
  uint64_t v16 = *(void **)(a1 + 592);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);

  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
  *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  uint64_t v17 = *(void *)(a2 + 672);
  *(_BYTE *)(a1 + 680) = *(_BYTE *)(a2 + 680);
  *(void *)(a1 + 672) = v17;
  *(_BYTE *)(a1 + 681) = *(_BYTE *)(a2 + 681);
  uint64_t v18 = a3[57];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1LL, v21);
  int v25 = v23(v20, 1LL, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
      goto LABEL_12;
    }

    goto LABEL_11;
  }

  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
LABEL_11:
    uint64_t v26 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_12;
  }

  (*(void (**)(void *, void *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_12:
  uint64_t v27 = a3[58];
  __int128 v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = type metadata accessor for Date(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1LL, v30);
  int v34 = v32(v29, 1LL, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
      goto LABEL_18;
    }

    goto LABEL_17;
  }

  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v31 + 8))(v28, v30);
LABEL_17:
    uint64_t v35 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64LL));
    goto LABEL_18;
  }

  (*(void (**)(void *, void *, uint64_t))(v31 + 40))(v28, v29, v30);
LABEL_18:
  uint64_t v36 = a3[59];
  uint64_t v37 = a3[60];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = a2 + v36;
  *(void *)uint64_t v38 = *(void *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  uint64_t v40 = (void *)(a1 + v37);
  uint64_t v41 = (void *)(a2 + v37);
  int v42 = v32((void *)(a1 + v37), 1LL, v30);
  int v43 = v32(v41, 1LL, v30);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, void *, uint64_t))(v31 + 32))(v40, v41, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v40, 0LL, 1LL, v30);
      goto LABEL_24;
    }

    goto LABEL_23;
  }

  if (v43)
  {
    (*(void (**)(void *, uint64_t))(v31 + 8))(v40, v30);
LABEL_23:
    uint64_t v44 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
    goto LABEL_24;
  }

  (*(void (**)(void *, void *, uint64_t))(v31 + 40))(v40, v41, v30);
LABEL_24:
  uint64_t v45 = a3[61];
  uint64_t v46 = a3[62];
  uint64_t v47 = a1 + v45;
  uint64_t v48 = a2 + v45;
  *(void *)uint64_t v47 = *(void *)v48;
  *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
  uint64_t v49 = a1 + v46;
  uint64_t v50 = a2 + v46;
  *(void *)uint64_t v49 = *(void *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  uint64_t v51 = a3[63];
  uint64_t v52 = a3[64];
  uint64_t v53 = a1 + v51;
  uint64_t v54 = a2 + v51;
  *(void *)uint64_t v53 = *(void *)v54;
  *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
  uint64_t v55 = a1 + v52;
  uint64_t v56 = a2 + v52;
  *(void *)uint64_t v55 = *(void *)v56;
  *(_BYTE *)(v55 + 8) = *(_BYTE *)(v56 + 8);
  uint64_t v57 = a3[65];
  uint64_t v58 = a1 + v57;
  uint64_t v59 = (uint64_t *)(a2 + v57);
  uint64_t v60 = *v59;
  *(_BYTE *)(v58 + 8) = *((_BYTE *)v59 + 8);
  *(void *)uint64_t v58 = v60;
  uint64_t v61 = a3[66];
  uint64_t v62 = a1 + v61;
  uint64_t v63 = a2 + v61;
  *(_BYTE *)(v62 + 8) = *(_BYTE *)(v63 + 8);
  *(void *)uint64_t v62 = *(void *)v63;
  uint64_t v64 = a3[67];
  uint64_t v65 = a1 + v64;
  uint64_t v66 = a2 + v64;
  if (!*(void *)(a1 + v64 + 48))
  {
LABEL_28:
    __int128 v69 = *(_OWORD *)(v66 + 80);
    *(_OWORD *)(v65 + 64) = *(_OWORD *)(v66 + 64);
    *(_OWORD *)(v65 + 80) = v69;
    *(_OWORD *)(v65 + 96) = *(_OWORD *)(v66 + 96);
    __int128 v70 = *(_OWORD *)(v66 + 16);
    *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
    *(_OWORD *)(v65 + 16) = v70;
    __int128 v71 = *(_OWORD *)(v66 + 48);
    *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
    *(_OWORD *)(v65 + 48) = v71;
    goto LABEL_29;
  }

  uint64_t v67 = *(void *)(v66 + 48);
  if (!v67)
  {
    sub_1004258E0(v65);
    goto LABEL_28;
  }

  __int128 v68 = *(_OWORD *)(v66 + 16);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *(_OWORD *)(v65 + 16) = v68;
  *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
  *(void *)(v65 + 48) = v67;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v65 + 56) = *(_OWORD *)(v66 + 56);
  *(_OWORD *)(v65 + 72) = *(_OWORD *)(v66 + 72);
  *(_OWORD *)(v65 + 88) = *(_OWORD *)(v66 + 88);
  *(void *)(v65 + 104) = *(void *)(v66 + 104);
  swift_bridgeObjectRelease();
LABEL_29:
  *(_BYTE *)(a1 + a3[68]) = *(_BYTE *)(a2 + a3[68]);
  *(_BYTE *)(a1 + a3[69]) = *(_BYTE *)(a2 + a3[69]);
  *(_BYTE *)(a1 + a3[70]) = *(_BYTE *)(a2 + a3[70]);
  uint64_t v72 = a3[71];
  uint64_t v73 = a1 + v72;
  uint64_t v74 = a2 + v72;
  *(void *)uint64_t v73 = *(void *)v74;
  *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
  uint64_t v75 = a3[72];
  uint64_t v76 = a1 + v75;
  uint64_t v77 = a2 + v75;
  *(void *)uint64_t v76 = *(void *)v77;
  *(_BYTE *)(v76 + 8) = *(_BYTE *)(v77 + 8);
  uint64_t v78 = a3[73];
  uint64_t v79 = a1 + v78;
  uint64_t v80 = a2 + v78;
  *(void *)uint64_t v79 = *(void *)v80;
  *(_BYTE *)(v79 + 8) = *(_BYTE *)(v80 + 8);
  uint64_t v81 = a3[74];
  uint64_t v82 = a1 + v81;
  uint64_t v83 = a2 + v81;
  *(void *)uint64_t v82 = *(void *)v83;
  *(_BYTE *)(v82 + 8) = *(_BYTE *)(v83 + 8);
  uint64_t v84 = a3[75];
  uint64_t v85 = a1 + v84;
  uint64_t v86 = (uint64_t *)(a2 + v84);
  uint64_t v87 = *v86;
  *(_BYTE *)(v85 + 8) = *((_BYTE *)v86 + 8);
  *(void *)uint64_t v85 = v87;
  uint64_t v88 = a3[76];
  uint64_t v89 = a1 + v88;
  uint64_t v90 = a2 + v88;
  *(void *)uint64_t v89 = *(void *)v90;
  *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
  uint64_t v91 = a3[77];
  uint64_t v92 = a1 + v91;
  uint64_t v93 = a2 + v91;
  *(void *)uint64_t v92 = *(void *)v93;
  *(_BYTE *)(v92 + 8) = *(_BYTE *)(v93 + 8);
  uint64_t v94 = a3[78];
  uint64_t v95 = a1 + v94;
  uint64_t v96 = a2 + v94;
  *(void *)uint64_t v95 = *(void *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  uint64_t v97 = a3[79];
  uint64_t v98 = a1 + v97;
  uint64_t v99 = a2 + v97;
  *(void *)uint64_t v98 = *(void *)v99;
  *(_BYTE *)(v98 + 8) = *(_BYTE *)(v99 + 8);
  uint64_t v100 = a3[80];
  uint64_t v101 = (void *)(a1 + v100);
  uint64_t v102 = (uint64_t *)(a2 + v100);
  uint64_t v104 = *v102;
  uint64_t v103 = v102[1];
  *uint64_t v101 = v104;
  v101[1] = v103;
  swift_bridgeObjectRelease();
  uint64_t v105 = a3[81];
  uint64_t v106 = a1 + v105;
  uint64_t v107 = a2 + v105;
  *(void *)uint64_t v106 = *(void *)v107;
  *(_BYTE *)(v106 + 8) = *(_BYTE *)(v107 + 8);
  uint64_t v108 = a3[82];
  uint64_t v109 = (void *)(a1 + v108);
  uint64_t v110 = (uint64_t *)(a2 + v108);
  uint64_t v112 = *v110;
  uint64_t v111 = v110[1];
  *uint64_t v109 = v112;
  v109[1] = v111;
  swift_bridgeObjectRelease();
  uint64_t v113 = a3[83];
  uint64_t v114 = a1 + v113;
  uint64_t v115 = a2 + v113;
  *(void *)uint64_t v114 = *(void *)v115;
  *(_BYTE *)(v114 + 8) = *(_BYTE *)(v115 + 8);
  *(void *)(a1 + a3[84]) = *(void *)(a2 + a3[84]);
  swift_bridgeObjectRelease();
  uint64_t v116 = a3[85];
  uint64_t v117 = (void *)(a1 + v116);
  uint64_t v118 = (uint64_t *)(a2 + v116);
  uint64_t v120 = *v118;
  uint64_t v119 = v118[1];
  *uint64_t v117 = v120;
  v117[1] = v119;
  swift_bridgeObjectRelease();
  uint64_t v121 = a3[86];
  uint64_t v122 = a1 + v121;
  uint64_t v123 = a2 + v121;
  *(_BYTE *)(v122 + 8) = *(_BYTE *)(v123 + 8);
  uint64_t v124 = a3[87];
  char v125 = *(_BYTE *)(a2 + v124);
  *(void *)uint64_t v122 = *(void *)v123;
  *(_BYTE *)(a1 + v124) = v125;
  *(_BYTE *)(a1 + a3[88]) = *(_BYTE *)(a2 + a3[88]);
  *(_BYTE *)(a1 + a3[89]) = *(_BYTE *)(a2 + a3[89]);
  *(_BYTE *)(a1 + a3[90]) = *(_BYTE *)(a2 + a3[90]);
  uint64_t v126 = a3[91];
  uint64_t v127 = a1 + v126;
  uint64_t v128 = a2 + v126;
  *(void *)uint64_t v127 = *(void *)v128;
  *(_BYTE *)(v127 + 8) = *(_BYTE *)(v128 + 8);
  uint64_t v129 = a3[92];
  uint64_t v130 = a1 + v129;
  uint64_t v131 = a2 + v129;
  *(void *)uint64_t v130 = *(void *)v131;
  *(_BYTE *)(v130 + 8) = *(_BYTE *)(v131 + 8);
  uint64_t v132 = a3[93];
  uint64_t v133 = a1 + v132;
  uint64_t v134 = a2 + v132;
  *(void *)uint64_t v133 = *(void *)v134;
  *(_BYTE *)(v133 + 8) = *(_BYTE *)(v134 + 8);
  uint64_t v135 = a3[94];
  uint64_t v136 = a1 + v135;
  uint64_t v137 = a2 + v135;
  *(void *)uint64_t v136 = *(void *)v137;
  *(_BYTE *)(v136 + 8) = *(_BYTE *)(v137 + 8);
  uint64_t v138 = a3[95];
  uint64_t v139 = a1 + v138;
  uint64_t v140 = (uint64_t *)(a2 + v138);
  uint64_t v141 = *v140;
  *(_BYTE *)(v139 + 8) = *((_BYTE *)v140 + 8);
  *(void *)uint64_t v139 = v141;
  uint64_t v142 = a3[96];
  uint64_t v143 = a1 + v142;
  uint64_t v144 = a2 + v142;
  *(void *)uint64_t v143 = *(void *)v144;
  *(_BYTE *)(v143 + 8) = *(_BYTE *)(v144 + 8);
  uint64_t v145 = a3[97];
  uint64_t v146 = a1 + v145;
  uint64_t v147 = a2 + v145;
  *(void *)uint64_t v146 = *(void *)v147;
  *(_BYTE *)(v146 + 8) = *(_BYTE *)(v147 + 8);
  uint64_t v148 = a3[98];
  uint64_t v149 = a1 + v148;
  uint64_t v150 = a2 + v148;
  *(void *)uint64_t v149 = *(void *)v150;
  *(_BYTE *)(v149 + 8) = *(_BYTE *)(v150 + 8);
  uint64_t v151 = a3[99];
  uint64_t v152 = a1 + v151;
  uint64_t v153 = a2 + v151;
  *(void *)uint64_t v152 = *(void *)v153;
  *(_BYTE *)(v152 + 8) = *(_BYTE *)(v153 + 8);
  uint64_t v154 = a3[100];
  uint64_t v155 = a1 + v154;
  uint64_t v156 = a2 + v154;
  *(void *)uint64_t v155 = *(void *)v156;
  *(_BYTE *)(v155 + 8) = *(_BYTE *)(v156 + 8);
  uint64_t v157 = a3[101];
  uint64_t v158 = a1 + v157;
  uint64_t v159 = a2 + v157;
  *(void *)uint64_t v158 = *(void *)v159;
  *(_BYTE *)(v158 + 8) = *(_BYTE *)(v159 + 8);
  uint64_t v160 = a3[102];
  uint64_t v161 = a1 + v160;
  uint64_t v162 = a2 + v160;
  *(void *)uint64_t v161 = *(void *)v162;
  *(_BYTE *)(v161 + 8) = *(_BYTE *)(v162 + 8);
  uint64_t v163 = a3[103];
  uint64_t v164 = a1 + v163;
  uint64_t v165 = a2 + v163;
  *(void *)uint64_t v164 = *(void *)v165;
  *(_BYTE *)(v164 + 8) = *(_BYTE *)(v165 + 8);
  uint64_t v166 = a3[104];
  uint64_t v167 = a1 + v166;
  uint64_t v168 = a2 + v166;
  *(void *)uint64_t v167 = *(void *)v168;
  *(_BYTE *)(v167 + 8) = *(_BYTE *)(v168 + 8);
  uint64_t v169 = a3[105];
  uint64_t v170 = a1 + v169;
  uint64_t v171 = a2 + v169;
  *(void *)uint64_t v170 = *(void *)v171;
  *(_BYTE *)(v170 + 8) = *(_BYTE *)(v171 + 8);
  uint64_t v172 = a3[106];
  uint64_t v173 = a1 + v172;
  uint64_t v174 = a2 + v172;
  *(void *)uint64_t v173 = *(void *)v174;
  *(_BYTE *)(v173 + 8) = *(_BYTE *)(v174 + 8);
  uint64_t v175 = a3[107];
  uint64_t v176 = a1 + v175;
  uint64_t v177 = a2 + v175;
  *(void *)uint64_t v176 = *(void *)v177;
  *(_BYTE *)(v176 + 8) = *(_BYTE *)(v177 + 8);
  uint64_t v178 = a3[108];
  uint64_t v179 = a1 + v178;
  uint64_t v180 = a2 + v178;
  *(void *)uint64_t v179 = *(void *)v180;
  *(_BYTE *)(v179 + 8) = *(_BYTE *)(v180 + 8);
  uint64_t v181 = a3[109];
  uint64_t v182 = a1 + v181;
  uint64_t v183 = a2 + v181;
  *(void *)uint64_t v182 = *(void *)v183;
  *(_BYTE *)(v182 + 8) = *(_BYTE *)(v183 + 8);
  uint64_t v184 = a3[110];
  uint64_t v185 = a1 + v184;
  uint64_t v186 = a2 + v184;
  *(void *)uint64_t v185 = *(void *)v186;
  *(_BYTE *)(v185 + 8) = *(_BYTE *)(v186 + 8);
  uint64_t v187 = a3[111];
  uint64_t v188 = a1 + v187;
  uint64_t v189 = a2 + v187;
  *(void *)uint64_t v188 = *(void *)v189;
  *(_BYTE *)(v188 + 8) = *(_BYTE *)(v189 + 8);
  uint64_t v190 = a3[112];
  uint64_t v191 = a1 + v190;
  uint64_t v192 = a2 + v190;
  *(void *)uint64_t v191 = *(void *)v192;
  *(_BYTE *)(v191 + 8) = *(_BYTE *)(v192 + 8);
  *(_BYTE *)(a1 + a3[113]) = *(_BYTE *)(a2 + a3[113]);
  uint64_t v193 = a3[114];
  uint64_t v194 = a1 + v193;
  uint64_t v195 = a2 + v193;
  *(void *)uint64_t v194 = *(void *)v195;
  *(_BYTE *)(v194 + 8) = *(_BYTE *)(v195 + 8);
  uint64_t v196 = a3[115];
  uint64_t v197 = a1 + v196;
  uint64_t v198 = a2 + v196;
  *(void *)uint64_t v197 = *(void *)v198;
  *(_BYTE *)(v197 + 8) = *(_BYTE *)(v198 + 8);
  uint64_t v199 = a3[116];
  uint64_t v200 = a1 + v199;
  uint64_t v201 = a2 + v199;
  *(void *)uint64_t v200 = *(void *)v201;
  uint64_t v202 = a3[117];
  char v203 = *(_BYTE *)(a2 + v202);
  *(_BYTE *)(v200 + 8) = *(_BYTE *)(v201 + 8);
  *(_BYTE *)(a1 + v202) = v203;
  *(_BYTE *)(a1 + a3[118]) = *(_BYTE *)(a2 + a3[118]);
  *(_BYTE *)(a1 + a3[119]) = *(_BYTE *)(a2 + a3[119]);
  uint64_t v204 = a3[120];
  uint64_t v205 = a1 + v204;
  uint64_t v206 = a2 + v204;
  *(void *)uint64_t v205 = *(void *)v206;
  *(_BYTE *)(v205 + 8) = *(_BYTE *)(v206 + 8);
  uint64_t v207 = a3[121];
  uint64_t v208 = a1 + v207;
  uint64_t v209 = a2 + v207;
  *(void *)uint64_t v208 = *(void *)v209;
  *(_BYTE *)(v208 + 8) = *(_BYTE *)(v209 + 8);
  uint64_t v210 = a3[122];
  uint64_t v211 = a1 + v210;
  uint64_t v212 = a2 + v210;
  *(void *)uint64_t v211 = *(void *)v212;
  *(_BYTE *)(v211 + 8) = *(_BYTE *)(v212 + 8);
  uint64_t v213 = a3[123];
  uint64_t v214 = a1 + v213;
  uint64_t v215 = a2 + v213;
  *(void *)uint64_t v214 = *(void *)v215;
  *(_BYTE *)(v214 + 8) = *(_BYTE *)(v215 + 8);
  uint64_t v216 = a3[124];
  uint64_t v217 = a1 + v216;
  uint64_t v218 = (uint64_t *)(a2 + v216);
  uint64_t v219 = *v218;
  *(_BYTE *)(v217 + 8) = *((_BYTE *)v218 + 8);
  *(void *)uint64_t v217 = v219;
  uint64_t v220 = a3[125];
  uint64_t v221 = a1 + v220;
  uint64_t v222 = a2 + v220;
  *(void *)uint64_t v221 = *(void *)v222;
  *(_BYTE *)(v221 + 8) = *(_BYTE *)(v222 + 8);
  uint64_t v223 = a3[126];
  uint64_t v224 = a1 + v223;
  uint64_t v225 = a2 + v223;
  *(void *)uint64_t v224 = *(void *)v225;
  *(_BYTE *)(v224 + 8) = *(_BYTE *)(v225 + 8);
  uint64_t v226 = a3[127];
  uint64_t v227 = a1 + v226;
  uint64_t v228 = a2 + v226;
  *(void *)uint64_t v227 = *(void *)v228;
  *(_BYTE *)(v227 + 8) = *(_BYTE *)(v228 + 8);
  *(_BYTE *)(a1 + a3[128]) = *(_BYTE *)(a2 + a3[128]);
  uint64_t v229 = a3[129];
  uint64_t v230 = a1 + v229;
  uint64_t v231 = a2 + v229;
  *(void *)uint64_t v230 = *(void *)v231;
  *(_BYTE *)(v230 + 8) = *(_BYTE *)(v231 + 8);
  *(void *)(a1 + a3[130]) = *(void *)(a2 + a3[130]);
  swift_bridgeObjectRelease();
  uint64_t v232 = a3[131];
  uint64_t v233 = a1 + v232;
  uint64_t v234 = a2 + v232;
  *(void *)uint64_t v233 = *(void *)v234;
  *(_BYTE *)(v233 + 8) = *(_BYTE *)(v234 + 8);
  *(_BYTE *)(a1 + a3[132]) = *(_BYTE *)(a2 + a3[132]);
  *(void *)(a1 + a3[133]) = *(void *)(a2 + a3[133]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[134]) = *(_BYTE *)(a2 + a3[134]);
  uint64_t v235 = a3[135];
  uint64_t v236 = a1 + v235;
  uint64_t v237 = a2 + v235;
  *(void *)uint64_t v236 = *(void *)v237;
  *(_BYTE *)(v236 + 8) = *(_BYTE *)(v237 + 8);
  uint64_t v238 = a3[136];
  uint64_t v239 = a1 + v238;
  uint64_t v240 = a2 + v238;
  *(void *)uint64_t v239 = *(void *)v240;
  *(_BYTE *)(v239 + 8) = *(_BYTE *)(v240 + 8);
  *(_BYTE *)(a1 + a3[137]) = *(_BYTE *)(a2 + a3[137]);
  *(_BYTE *)(a1 + a3[138]) = *(_BYTE *)(a2 + a3[138]);
  uint64_t v241 = a3[139];
  uint64_t v242 = a1 + v241;
  uint64_t v243 = a2 + v241;
  *(void *)uint64_t v242 = *(void *)v243;
  *(_BYTE *)(v242 + 8) = *(_BYTE *)(v243 + 8);
  uint64_t v244 = a3[140];
  uint64_t v245 = a1 + v244;
  uint64_t v246 = a2 + v244;
  *(void *)uint64_t v245 = *(void *)v246;
  *(_BYTE *)(v245 + 8) = *(_BYTE *)(v246 + 8);
  uint64_t v247 = a3[141];
  uint64_t v248 = a1 + v247;
  uint64_t v249 = a2 + v247;
  *(void *)uint64_t v248 = *(void *)v249;
  *(_BYTE *)(v248 + 8) = *(_BYTE *)(v249 + 8);
  uint64_t v250 = a3[142];
  uint64_t v251 = a1 + v250;
  uint64_t v252 = a2 + v250;
  *(void *)uint64_t v251 = *(void *)v252;
  *(_BYTE *)(v251 + 8) = *(_BYTE *)(v252 + 8);
  uint64_t v253 = a3[143];
  uint64_t v254 = a1 + v253;
  uint64_t v255 = (uint64_t *)(a2 + v253);
  uint64_t v256 = *v255;
  *(_BYTE *)(v254 + 8) = *((_BYTE *)v255 + 8);
  *(void *)uint64_t v254 = v256;
  uint64_t v257 = a3[144];
  uint64_t v258 = a1 + v257;
  uint64_t v259 = a2 + v257;
  *(void *)uint64_t v258 = *(void *)v259;
  *(_BYTE *)(v258 + 8) = *(_BYTE *)(v259 + 8);
  uint64_t v260 = a3[145];
  uint64_t v261 = a1 + v260;
  uint64_t v262 = a2 + v260;
  *(void *)uint64_t v261 = *(void *)v262;
  *(_BYTE *)(v261 + 8) = *(_BYTE *)(v262 + 8);
  uint64_t v263 = a3[146];
  uint64_t v264 = a1 + v263;
  uint64_t v265 = a2 + v263;
  *(void *)uint64_t v264 = *(void *)v265;
  *(_BYTE *)(v264 + 8) = *(_BYTE *)(v265 + 8);
  uint64_t v266 = a3[147];
  uint64_t v267 = a1 + v266;
  uint64_t v268 = a2 + v266;
  *(void *)uint64_t v267 = *(void *)v268;
  *(_BYTE *)(v267 + 8) = *(_BYTE *)(v268 + 8);
  uint64_t v269 = a3[148];
  uint64_t v270 = a1 + v269;
  uint64_t v271 = a2 + v269;
  *(void *)uint64_t v270 = *(void *)v271;
  *(_BYTE *)(v270 + 8) = *(_BYTE *)(v271 + 8);
  uint64_t v272 = a3[149];
  uint64_t v273 = a1 + v272;
  uint64_t v274 = a2 + v272;
  *(void *)uint64_t v273 = *(void *)v274;
  *(_BYTE *)(v273 + 8) = *(_BYTE *)(v274 + 8);
  uint64_t v275 = a3[150];
  uint64_t v276 = a1 + v275;
  uint64_t v277 = a2 + v275;
  *(void *)uint64_t v276 = *(void *)v277;
  *(_BYTE *)(v276 + 8) = *(_BYTE *)(v277 + 8);
  uint64_t v278 = a3[151];
  uint64_t v279 = a1 + v278;
  uint64_t v280 = a2 + v278;
  *(void *)uint64_t v279 = *(void *)v280;
  *(_BYTE *)(v279 + 8) = *(_BYTE *)(v280 + 8);
  uint64_t v281 = a3[152];
  uint64_t v282 = a1 + v281;
  uint64_t v283 = a2 + v281;
  *(void *)uint64_t v282 = *(void *)v283;
  *(_BYTE *)(v282 + 8) = *(_BYTE *)(v283 + 8);
  uint64_t v284 = a3[153];
  uint64_t v285 = a1 + v284;
  uint64_t v286 = a2 + v284;
  *(void *)uint64_t v285 = *(void *)v286;
  *(_BYTE *)(v285 + 8) = *(_BYTE *)(v286 + 8);
  uint64_t v287 = a3[154];
  uint64_t v288 = a1 + v287;
  uint64_t v289 = a2 + v287;
  *(void *)uint64_t v288 = *(void *)v289;
  *(_BYTE *)(v288 + 8) = *(_BYTE *)(v289 + 8);
  uint64_t v290 = a3[155];
  uint64_t v291 = a1 + v290;
  uint64_t v292 = a2 + v290;
  *(void *)uint64_t v291 = *(void *)v292;
  *(_BYTE *)(v291 + 8) = *(_BYTE *)(v292 + 8);
  uint64_t v293 = a3[156];
  uint64_t v294 = a1 + v293;
  uint64_t v295 = a2 + v293;
  *(void *)uint64_t v294 = *(void *)v295;
  *(_BYTE *)(v294 + 8) = *(_BYTE *)(v295 + 8);
  *(_BYTE *)(a1 + a3[157]) = *(_BYTE *)(a2 + a3[157]);
  uint64_t v296 = a3[158];
  uint64_t v297 = a1 + v296;
  uint64_t v298 = a2 + v296;
  *(void *)uint64_t v297 = *(void *)v298;
  *(_BYTE *)(v297 + 8) = *(_BYTE *)(v298 + 8);
  uint64_t v299 = a3[159];
  uint64_t v300 = a1 + v299;
  uint64_t v301 = a2 + v299;
  *(void *)uint64_t v300 = *(void *)v301;
  *(_BYTE *)(v300 + 8) = *(_BYTE *)(v301 + 8);
  uint64_t v302 = a3[160];
  uint64_t v303 = a1 + v302;
  uint64_t v304 = a2 + v302;
  *(void *)uint64_t v303 = *(void *)v304;
  *(_BYTE *)(v303 + 8) = *(_BYTE *)(v304 + 8);
  uint64_t v305 = a3[161];
  uint64_t v306 = (void *)(a1 + v305);
  uint64_t v307 = (uint64_t *)(a2 + v305);
  uint64_t v309 = *v307;
  uint64_t v308 = v307[1];
  *uint64_t v306 = v309;
  v306[1] = v308;
  swift_bridgeObjectRelease();
  uint64_t v310 = a3[162];
  uint64_t v311 = a1 + v310;
  uint64_t v312 = a2 + v310;
  *(void *)uint64_t v311 = *(void *)v312;
  *(_BYTE *)(v311 + 8) = *(_BYTE *)(v312 + 8);
  *(_BYTE *)(a1 + a3[163]) = *(_BYTE *)(a2 + a3[163]);
  *(_BYTE *)(a1 + a3[164]) = *(_BYTE *)(a2 + a3[164]);
  uint64_t v313 = a3[165];
  uint64_t v314 = a1 + v313;
  uint64_t v315 = a2 + v313;
  *(void *)uint64_t v314 = *(void *)v315;
  *(_BYTE *)(v314 + 8) = *(_BYTE *)(v315 + 8);
  uint64_t v316 = a3[166];
  uint64_t v317 = a1 + v316;
  uint64_t v318 = a2 + v316;
  *(void *)uint64_t v317 = *(void *)v318;
  *(_BYTE *)(v317 + 8) = *(_BYTE *)(v318 + 8);
  *(_BYTE *)(a1 + a3[167]) = *(_BYTE *)(a2 + a3[167]);
  uint64_t v319 = a3[168];
  uint64_t v320 = a1 + v319;
  uint64_t v321 = a2 + v319;
  *(_DWORD *)uint64_t v320 = *(_DWORD *)v321;
  *(_BYTE *)(v320 + 4) = *(_BYTE *)(v321 + 4);
  uint64_t v322 = a3[169];
  uint64_t v323 = a1 + v322;
  uint64_t v324 = a2 + v322;
  *(void *)uint64_t v323 = *(void *)v324;
  *(_BYTE *)(v323 + 8) = *(_BYTE *)(v324 + 8);
  uint64_t v325 = a3[170];
  uint64_t v326 = a1 + v325;
  uint64_t v327 = a2 + v325;
  *(void *)uint64_t v326 = *(void *)v327;
  *(_BYTE *)(v326 + 8) = *(_BYTE *)(v327 + 8);
  uint64_t v328 = a3[171];
  uint64_t v329 = a1 + v328;
  uint64_t v330 = a2 + v328;
  *(void *)uint64_t v329 = *(void *)v330;
  *(_BYTE *)(v329 + 8) = *(_BYTE *)(v330 + 8);
  uint64_t v331 = a3[172];
  uint64_t v332 = a1 + v331;
  uint64_t v333 = (uint64_t *)(a2 + v331);
  uint64_t v334 = *v333;
  *(_BYTE *)(v332 + 8) = *((_BYTE *)v333 + 8);
  *(void *)uint64_t v332 = v334;
  uint64_t v335 = a3[173];
  uint64_t v336 = a1 + v335;
  uint64_t v337 = a2 + v335;
  *(void *)uint64_t v336 = *(void *)v337;
  *(_BYTE *)(v336 + 8) = *(_BYTE *)(v337 + 8);
  uint64_t v338 = a3[174];
  uint64_t v339 = a1 + v338;
  uint64_t v340 = a2 + v338;
  *(void *)uint64_t v339 = *(void *)v340;
  *(_BYTE *)(v339 + 8) = *(_BYTE *)(v340 + 8);
  uint64_t v341 = a3[175];
  uint64_t v342 = a1 + v341;
  uint64_t v343 = a2 + v341;
  *(void *)uint64_t v342 = *(void *)v343;
  uint64_t v344 = a3[176];
  char v345 = *(_BYTE *)(a2 + v344);
  *(_BYTE *)(v342 + 8) = *(_BYTE *)(v343 + 8);
  *(_BYTE *)(a1 + v344) = v345;
  uint64_t v346 = a3[177];
  uint64_t v347 = a1 + v346;
  uint64_t v348 = a2 + v346;
  *(void *)uint64_t v347 = *(void *)v348;
  *(_BYTE *)(v347 + 8) = *(_BYTE *)(v348 + 8);
  uint64_t v349 = a3[178];
  uint64_t v350 = a1 + v349;
  uint64_t v351 = a2 + v349;
  *(void *)uint64_t v350 = *(void *)v351;
  *(_BYTE *)(v350 + 8) = *(_BYTE *)(v351 + 8);
  return a1;
}

uint64_t sub_100427A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100427A74);
}

uint64_t sub_100427A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 64);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = *(int *)(a3 + 228);
    }

    else
    {
      uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
      uint64_t v10 = *(void *)(v11 - 8);
      uint64_t v12 = *(int *)(a3 + 232);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }

uint64_t sub_100427B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100427B34);
}

uint64_t sub_100427B34(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 64) = a2;
  }

  else
  {
    uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 228);
    }

    else
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D720);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 232);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_100427BD8(uint64_t a1)
{
  v6[0] = &unk_100800920;
  v6[1] = &unk_100800938;
  v6[2] = &unk_100800950;
  v6[3] = &unk_100800938;
  v6[4] = &unk_100800938;
  v6[5] = &unk_100800968;
  v6[6] = &unk_100800980;
  v6[7] = &unk_100800968;
  v6[8] = &unk_100800998;
  v6[9] = &unk_100800938;
  v6[10] = &unk_100800968;
  v6[11] = &unk_100800968;
  v6[12] = &unk_100800938;
  v6[13] = &unk_100800938;
  v6[14] = &unk_100800938;
  v6[15] = &unk_100800938;
  v6[16] = &unk_100800938;
  v6[17] = &unk_100800938;
  v6[18] = &unk_100800938;
  v6[19] = &unk_100800938;
  v6[20] = &unk_100800938;
  v6[21] = &unk_100800938;
  v6[22] = &unk_100800968;
  v6[23] = &unk_100800980;
  v6[24] = &unk_100800938;
  v6[25] = &unk_100800938;
  v6[26] = &unk_100800938;
  v6[27] = &unk_100800938;
  v6[28] = &unk_100800938;
  v6[29] = &unk_100800938;
  v6[30] = &unk_100800938;
  v6[31] = &unk_100800938;
  v6[32] = &unk_100800938;
  v6[33] = &unk_100800938;
  v6[34] = &unk_100800968;
  v6[35] = &unk_100800938;
  v6[36] = &unk_100800938;
  v6[37] = &unk_100800938;
  v6[38] = &unk_100800938;
  v6[39] = &unk_100800938;
  v6[40] = &unk_100800938;
  v6[41] = &unk_100800938;
  v6[42] = &unk_100800980;
  v6[43] = &unk_100800938;
  v6[44] = &unk_100800938;
  v6[45] = &unk_100800980;
  v6[46] = &unk_100800980;
  v6[47] = &unk_100800938;
  v6[48] = &unk_100800938;
  v6[49] = &unk_100800938;
  v6[50] = &unk_100800938;
  v6[51] = &unk_100800938;
  v6[52] = &unk_100800968;
  sub_10009361C( 319LL,  (unint64_t *)&qword_1009AFA50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v6[53] = *(void *)(v2 - 8) + 64LL;
    sub_10009361C( 319LL,  (unint64_t *)&qword_1009A09E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = &unk_100800938;
      uint64_t v9 = v7;
      uint64_t v10 = &unk_100800938;
      uint64_t v11 = &unk_100800938;
      uint64_t v12 = &unk_100800938;
      uint64_t v13 = &unk_100800938;
      uint64_t v14 = &unk_100800938;
      uint64_t v15 = &unk_100800938;
      uint64_t v16 = &unk_1008009B0;
      uint64_t v17 = &unk_100800968;
      uint64_t v18 = &unk_100800968;
      uint64_t v19 = &unk_100800968;
      uint64_t v20 = &unk_100800938;
      uint64_t v21 = &unk_100800938;
      uint64_t v22 = &unk_100800938;
      uint64_t v23 = &unk_100800938;
      int v24 = &unk_100800938;
      int v25 = &unk_100800938;
      uint64_t v26 = &unk_100800938;
      uint64_t v27 = &unk_100800938;
      __int128 v28 = &unk_100800938;
      uint64_t v29 = &unk_100800998;
      uint64_t v30 = &unk_100800938;
      uint64_t v31 = &unk_100800998;
      uint64_t v32 = &unk_100800938;
      int v33 = &unk_100800980;
      int v34 = &unk_100800998;
      uint64_t v35 = &unk_100800938;
      uint64_t v36 = &unk_100800968;
      uint64_t v37 = &unk_100800968;
      uint64_t v38 = &unk_100800968;
      uint64_t v39 = &unk_100800968;
      uint64_t v40 = &unk_100800938;
      uint64_t v41 = &unk_100800938;
      int v42 = &unk_100800938;
      int v43 = &unk_100800938;
      uint64_t v44 = &unk_100800938;
      uint64_t v45 = &unk_100800938;
      uint64_t v46 = &unk_100800938;
      uint64_t v47 = &unk_100800938;
      uint64_t v48 = &unk_100800938;
      uint64_t v49 = &unk_100800938;
      uint64_t v50 = &unk_100800938;
      uint64_t v51 = &unk_100800938;
      uint64_t v52 = &unk_100800938;
      uint64_t v53 = &unk_100800938;
      uint64_t v54 = &unk_100800938;
      uint64_t v55 = &unk_100800938;
      uint64_t v56 = &unk_100800938;
      uint64_t v57 = &unk_100800938;
      uint64_t v58 = &unk_100800938;
      uint64_t v59 = &unk_100800938;
      uint64_t v60 = &unk_100800938;
      uint64_t v61 = &unk_100800938;
      uint64_t v62 = &unk_100800968;
      uint64_t v63 = &unk_100800938;
      uint64_t v64 = &unk_100800938;
      uint64_t v65 = &unk_100800938;
      uint64_t v66 = &unk_100800968;
      uint64_t v67 = &unk_100800968;
      __int128 v68 = &unk_100800968;
      __int128 v69 = &unk_100800938;
      __int128 v70 = &unk_100800938;
      __int128 v71 = &unk_100800938;
      uint64_t v72 = &unk_100800938;
      uint64_t v73 = &unk_100800938;
      uint64_t v74 = &unk_100800938;
      uint64_t v75 = &unk_100800938;
      uint64_t v76 = &unk_100800938;
      uint64_t v77 = &unk_100800968;
      uint64_t v78 = &unk_100800938;
      uint64_t v79 = &unk_100800980;
      uint64_t v80 = &unk_100800938;
      uint64_t v81 = &unk_100800968;
      uint64_t v82 = &unk_100800980;
      uint64_t v83 = &unk_100800968;
      uint64_t v84 = &unk_100800938;
      uint64_t v85 = &unk_100800938;
      uint64_t v86 = &unk_100800968;
      uint64_t v87 = &unk_100800968;
      uint64_t v88 = &unk_100800938;
      uint64_t v89 = &unk_100800938;
      uint64_t v90 = &unk_100800938;
      uint64_t v91 = &unk_100800938;
      uint64_t v92 = &unk_100800938;
      uint64_t v93 = &unk_100800938;
      uint64_t v94 = &unk_100800938;
      uint64_t v95 = &unk_100800938;
      uint64_t v96 = &unk_100800938;
      uint64_t v97 = &unk_100800938;
      uint64_t v98 = &unk_100800938;
      uint64_t v99 = &unk_100800938;
      uint64_t v100 = &unk_100800938;
      uint64_t v101 = &unk_100800938;
      uint64_t v102 = &unk_100800938;
      uint64_t v103 = &unk_100800938;
      uint64_t v104 = &unk_100800938;
      uint64_t v105 = &unk_100800938;
      uint64_t v106 = &unk_100800968;
      uint64_t v107 = &unk_100800938;
      uint64_t v108 = &unk_100800938;
      uint64_t v109 = &unk_100800938;
      uint64_t v110 = &unk_100800998;
      uint64_t v111 = &unk_100800938;
      uint64_t v112 = &unk_100800968;
      uint64_t v113 = &unk_100800968;
      uint64_t v114 = &unk_100800938;
      uint64_t v115 = &unk_100800938;
      uint64_t v116 = &unk_100800968;
      uint64_t v117 = &unk_1008009C8;
      uint64_t v118 = &unk_100800938;
      uint64_t v119 = &unk_100800938;
      uint64_t v120 = &unk_100800938;
      uint64_t v121 = &unk_100800938;
      uint64_t v122 = &unk_100800938;
      uint64_t v123 = &unk_100800938;
      uint64_t v124 = &unk_100800938;
      char v125 = &unk_100800968;
      uint64_t v126 = &unk_100800938;
      uint64_t v127 = &unk_100800938;
      swift_initStructMetadata(a1, 256LL, 175LL, v6, a1 + 16);
    }
  }

unint64_t sub_100427F04()
{
  unint64_t result = qword_1009AD8B0;
  if (!qword_1009AD8B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800B2C, &type metadata for DefaultConfigurationLayer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AD8B0);
  }

  return result;
}

unint64_t sub_100427F48()
{
  unint64_t result = qword_1009AD8B8;
  if (!qword_1009AD8B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E66FC, &type metadata for ConfigurationCoordinator.ConfigurationSource);
    atomic_store(result, (unint64_t *)&qword_1009AD8B8);
  }

  return result;
}

unint64_t sub_100427F8C()
{
  unint64_t result = qword_1009AD8C0;
  if (!qword_1009AD8C0)
  {
    uint64_t v1 = sub_100004B78(&qword_10099D630);
    sub_100428010();
    sub_100007864(&qword_1009AD8D0, type metadata accessor for FeatureSupportMatrix, (uint64_t)&unk_10080D2BC);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009AD8C0);
  }

  return result;
}

unint64_t sub_100428010()
{
  unint64_t result = qword_1009AD8C8;
  if (!qword_1009AD8C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D174, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1009AD8C8);
  }

  return result;
}

uint64_t sub_100428054(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100004B78(&qword_10099D618);
    sub_100007864(a2, (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1004280D8()
{
  unint64_t result = qword_1009AD8F0;
  if (!qword_1009AD8F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AllMacBeaconConfigs,  &type metadata for AllMacBeaconConfigs);
    atomic_store(result, (unint64_t *)&qword_1009AD8F0);
  }

  return result;
}

uint64_t sub_10042811C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DefaultConfigurationLayer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100428160(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DefaultConfigurationLayer(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10042819C()
{
  unint64_t result = qword_1009AD908;
  if (!qword_1009AD908)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E66D4, &type metadata for ConfigurationCoordinator.ConfigurationSource);
    atomic_store(result, (unint64_t *)&qword_1009AD908);
  }

  return result;
}

unint64_t sub_1004281E0()
{
  unint64_t result = qword_1009AD910;
  if (!qword_1009AD910)
  {
    uint64_t v1 = sub_100004B78(&qword_10099D630);
    sub_100428264();
    sub_100007864(&qword_1009AD920, type metadata accessor for FeatureSupportMatrix, (uint64_t)&unk_10080D294);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009AD910);
  }

  return result;
}

unint64_t sub_100428264()
{
  unint64_t result = qword_1009AD918;
  if (!qword_1009AD918)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D14C, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1009AD918);
  }

  return result;
}

uint64_t sub_1004282A8(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100004B78(&qword_10099D640);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100428310()
{
  unint64_t result = qword_1009AD930;
  if (!qword_1009AD930)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F949C, &type metadata for RoleCategory);
    atomic_store(result, (unint64_t *)&qword_1009AD930);
  }

  return result;
}

unint64_t sub_100428354()
{
  unint64_t result = qword_1009AD950;
  if (!qword_1009AD950)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AllMacBeaconConfigs,  &type metadata for AllMacBeaconConfigs);
    atomic_store(result, (unint64_t *)&qword_1009AD950);
  }

  return result;
}

uint64_t sub_100428398(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100004B78(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1004283F4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100004B78(&qword_10099D5C8);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for DefaultConfigurationLayer.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0x52) {
    goto LABEL_17;
  }
  if (a2 + 174 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 174) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 174;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 174;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 174;
    }
  }

uint64_t storeEnumTagSinglePayload for DefaultConfigurationLayer.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 174 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 174) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0x52) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x51) {
    return ((uint64_t (*)(void))((char *)&loc_100428534 + 4 * byte_1008008F3[v4]))();
  }
  *a1 = a2 - 82;
  return ((uint64_t (*)(void))((char *)sub_100428568 + 4 * byte_1008008EE[v4]))();
}

uint64_t sub_100428568(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100428570(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100428578LL);
  }
  return result;
}

uint64_t sub_100428584(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10042858CLL);
  }
  *(_BYTE *)uint64_t result = a2 - 82;
  return result;
}

uint64_t sub_100428590(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100428598(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DefaultConfigurationLayer.CodingKeys()
{
  return &type metadata for DefaultConfigurationLayer.CodingKeys;
}

unint64_t sub_1004285B8()
{
  unint64_t result = qword_1009AD960;
  if (!qword_1009AD960)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800B04, &type metadata for DefaultConfigurationLayer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AD960);
  }

  return result;
}

unint64_t sub_100428600()
{
  unint64_t result = qword_1009AD968;
  if (!qword_1009AD968)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800A74, &type metadata for DefaultConfigurationLayer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AD968);
  }

  return result;
}

unint64_t sub_100428648()
{
  unint64_t result = qword_1009AD970;
  if (!qword_1009AD970)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800A9C, &type metadata for DefaultConfigurationLayer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AD970);
  }

  return result;
}

uint64_t sub_10042868C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084E7C0LL;
    if (a2 == 0x800000010084E7C0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084E7C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x754E6C6169726573LL && a2 == 0xEC0000007265626DLL)
  {
    unint64_t v6 = 0xEC0000007265626DLL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573LL, 0xEC0000007265626DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0x656372756F73LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v7 = 0xE600000000000000LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 0x496873696C627570LL && a2 == 0xEF6C61767265746ELL)
  {
    unint64_t v8 = 0xEF6C61767265746ELL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496873696C627570LL, 0xEF6C61767265746ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_23;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v9 = 0x8000000100861BD0LL;
    if (a2 == 0x8000000100861BD0LL) {
      goto LABEL_28;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100861BD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v10 = 0x8000000100861BF0LL;
    if (a2 == 0x8000000100861BF0LL) {
      goto LABEL_33;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100861BF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_33:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v11 = 0x800000010084E8A0LL;
    if (a2 == 0x800000010084E8A0LL) {
      goto LABEL_38;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010084E8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if (a1 == 0x74537265646E6966LL && a2 == 0xEB00000000657461LL)
  {
    unint64_t v12 = 0xEB00000000657461LL;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74537265646E6966LL, 0xEB00000000657461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_44;
  }

  if (a1 == 0x74736F486E736361LL && a2 == 0xEC000000656D614ELL)
  {
    unint64_t v13 = 0xEC000000656D614ELL;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74736F486E736361LL, 0xEC000000656D614ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_50;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v14 = 0x8000000100861C10LL;
    if (a2 == 0x8000000100861C10LL) {
      goto LABEL_55;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100861C10LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 9LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v15 = 0x8000000100861C30LL;
    if (a2 == 0x8000000100861C30LL) {
      goto LABEL_60;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100861C30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 10LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v16 = 0x800000010084EC20LL;
    if (a2 == 0x800000010084EC20LL) {
      goto LABEL_65;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084EC20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
LABEL_65:
    swift_bridgeObjectRelease(v16);
    return 11LL;
  }

  if (a1 == 0xD00000000000001FLL)
  {
    unint64_t v17 = 0x800000010084EC40LL;
    if (a2 == 0x800000010084EC40LL) {
      goto LABEL_70;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000010084EC40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
LABEL_70:
    swift_bridgeObjectRelease(v17);
    return 12LL;
  }

  if (a1 == 0xD000000000000021LL)
  {
    unint64_t v18 = 0x800000010084EC60LL;
    if (a2 == 0x800000010084EC60LL) {
      goto LABEL_75;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x800000010084EC60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_75:
    swift_bridgeObjectRelease(v18);
    return 13LL;
  }

  if (a1 == 0xD00000000000002ALL)
  {
    unint64_t v19 = 0x800000010084EC90LL;
    if (a2 == 0x800000010084EC90LL) {
      goto LABEL_80;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ALL, 0x800000010084EC90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
LABEL_80:
    swift_bridgeObjectRelease(v19);
    return 14LL;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v20 = 0x800000010084E860LL;
    if (a2 == 0x800000010084E860LL) {
      goto LABEL_85;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010084E860LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
LABEL_85:
    swift_bridgeObjectRelease(v20);
    return 15LL;
  }

  if (a1 == 0xD00000000000001ELL)
  {
    unint64_t v21 = 0x800000010084E8C0LL;
    if (a2 == 0x800000010084E8C0LL) {
      goto LABEL_90;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x800000010084E8C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v21 = a2;
LABEL_90:
    swift_bridgeObjectRelease(v21);
    return 16LL;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v22 = 0x800000010084E8E0LL;
    if (a2 == 0x800000010084E8E0LL) {
      goto LABEL_95;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x800000010084E8E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v22 = a2;
LABEL_95:
    swift_bridgeObjectRelease(v22);
    return 17LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v23 = 0x800000010084E900LL;
    if (a2 == 0x800000010084E900LL) {
      goto LABEL_100;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000010084E900LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v23 = a2;
LABEL_100:
    swift_bridgeObjectRelease(v23);
    return 18LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v24 = 0x800000010084E920LL;
    if (a2 == 0x800000010084E920LL) {
      goto LABEL_105;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010084E920LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v24 = a2;
LABEL_105:
    swift_bridgeObjectRelease(v24);
    return 19LL;
  }

  if (a1 == 0xD000000000000028LL)
  {
    unint64_t v25 = 0x800000010084E940LL;
    if (a2 == 0x800000010084E940LL) {
      goto LABEL_110;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000028LL, 0x800000010084E940LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v25 = a2;
LABEL_110:
    swift_bridgeObjectRelease(v25);
    return 20LL;
  }

  if (a1 == 0xD00000000000001FLL)
  {
    unint64_t v26 = 0x800000010084E970LL;
    if (a2 == 0x800000010084E970LL) {
      goto LABEL_115;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000010084E970LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v26 = a2;
LABEL_115:
    swift_bridgeObjectRelease(v26);
    return 21LL;
  }

  if (a1 == 0xD000000000000021LL)
  {
    unint64_t v27 = 0x800000010084E990LL;
    if (a2 == 0x800000010084E990LL) {
      goto LABEL_120;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x800000010084E990LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v27 = a2;
LABEL_120:
    swift_bridgeObjectRelease(v27);
    return 22LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v28 = 0x800000010084E9C0LL;
    if (a2 == 0x800000010084E9C0LL) {
      goto LABEL_125;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000010084E9C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v28 = a2;
LABEL_125:
    swift_bridgeObjectRelease(v28);
    return 23LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v29 = 0x800000010084E9E0LL;
    if (a2 == 0x800000010084E9E0LL) {
      goto LABEL_130;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010084E9E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v29 = a2;
LABEL_130:
    swift_bridgeObjectRelease(v29);
    return 24LL;
  }

  if (a1 == 0xD00000000000001FLL)
  {
    unint64_t v30 = 0x800000010084EA00LL;
    if (a2 == 0x800000010084EA00LL) {
      goto LABEL_135;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000010084EA00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v30 = a2;
LABEL_135:
    swift_bridgeObjectRelease(v30);
    return 25LL;
  }

  if (a1 == 0xD000000000000023LL)
  {
    unint64_t v31 = 0x800000010084EA20LL;
    if (a2 == 0x800000010084EA20LL) {
      goto LABEL_140;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x800000010084EA20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v31 = a2;
LABEL_140:
    swift_bridgeObjectRelease(v31);
    return 26LL;
  }

  if (a1 == 0xD000000000000021LL)
  {
    unint64_t v32 = 0x8000000100861C50LL;
    if (a2 == 0x8000000100861C50LL) {
      goto LABEL_145;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x8000000100861C50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v32 = a2;
LABEL_145:
    swift_bridgeObjectRelease(v32);
    return 27LL;
  }

  if (a1 == 0xD000000000000023LL)
  {
    unint64_t v33 = 0x8000000100861C80LL;
    if (a2 == 0x8000000100861C80LL) {
      goto LABEL_150;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x8000000100861C80LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v33 = a2;
LABEL_150:
    swift_bridgeObjectRelease(v33);
    return 28LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v34 = 0x8000000100861CB0LL;
    if (a2 == 0x8000000100861CB0LL) {
      goto LABEL_155;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100861CB0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v34 = a2;
LABEL_155:
    swift_bridgeObjectRelease(v34);
    return 29LL;
  }

  if (a1 == 0xD000000000000023LL)
  {
    unint64_t v35 = 0x800000010084EAD0LL;
    if (a2 == 0x800000010084EAD0LL) {
      goto LABEL_160;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x800000010084EAD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v35 = a2;
LABEL_160:
    swift_bridgeObjectRelease(v35);
    return 30LL;
  }

  if (a1 == 0xD00000000000002ALL)
  {
    unint64_t v36 = 0x800000010084EB00LL;
    if (a2 == 0x800000010084EB00LL) {
      goto LABEL_165;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ALL, 0x800000010084EB00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v36 = a2;
LABEL_165:
    swift_bridgeObjectRelease(v36);
    return 31LL;
  }

  if (a1 == 0xD000000000000025LL)
  {
    unint64_t v37 = 0x800000010084EB30LL;
    if (a2 == 0x800000010084EB30LL) {
      goto LABEL_170;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025LL, 0x800000010084EB30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v37 = a2;
LABEL_170:
    swift_bridgeObjectRelease(v37);
    return 32LL;
  }

  if (a1 == 0xD00000000000002CLL && a2 == 0x800000010084EB60LL)
  {
    unint64_t v38 = 0x800000010084EB60LL;
LABEL_176:
    swift_bridgeObjectRelease(v38);
    return 33LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002CLL, 0x800000010084EB60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v38 = a2;
    goto LABEL_176;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v39 = 0x800000010084EB90LL;
    if (a2 == 0x800000010084EB90LL) {
      goto LABEL_181;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084EB90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v39 = a2;
LABEL_181:
    swift_bridgeObjectRelease(v39);
    return 34LL;
  }

  if (a1 == 0xD000000000000021LL)
  {
    unint64_t v40 = 0x800000010084EBB0LL;
    if (a2 == 0x800000010084EBB0LL) {
      goto LABEL_186;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x800000010084EBB0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v40 = a2;
LABEL_186:
    swift_bridgeObjectRelease(v40);
    return 35LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v41 = 0x800000010084EBE0LL;
    if (a2 == 0x800000010084EBE0LL) {
      goto LABEL_191;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084EBE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v41 = a2;
LABEL_191:
    swift_bridgeObjectRelease(v41);
    return 36LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v42 = 0x800000010084EC00LL;
    if (a2 == 0x800000010084EC00LL) {
      goto LABEL_196;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000010084EC00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v42 = a2;
LABEL_196:
    swift_bridgeObjectRelease(v42);
    return 37LL;
  }

  if (a1 == 0xD000000000000021LL)
  {
    unint64_t v43 = 0x800000010084ECC0LL;
    if (a2 == 0x800000010084ECC0LL) {
      goto LABEL_201;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x800000010084ECC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v43 = a2;
LABEL_201:
    swift_bridgeObjectRelease(v43);
    return 38LL;
  }

  if (a1 == 0xD000000000000025LL)
  {
    unint64_t v44 = 0x800000010084ECF0LL;
    if (a2 == 0x800000010084ECF0LL) {
      goto LABEL_206;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025LL, 0x800000010084ECF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v44 = a2;
LABEL_206:
    swift_bridgeObjectRelease(v44);
    return 39LL;
  }

  if (a1 == 0xD000000000000023LL)
  {
    unint64_t v45 = 0x800000010084ED20LL;
    if (a2 == 0x800000010084ED20LL) {
      goto LABEL_211;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x800000010084ED20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v45 = a2;
LABEL_211:
    swift_bridgeObjectRelease(v45);
    return 40LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v46 = 0x800000010084ED50LL;
    if (a2 == 0x800000010084ED50LL) {
      goto LABEL_216;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010084ED50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v46 = a2;
LABEL_216:
    swift_bridgeObjectRelease(v46);
    return 41LL;
  }

  if (a1 == 0x65746143656C6F72LL && a2 == 0xEE00736569726F67LL)
  {
    unint64_t v47 = 0xEE00736569726F67LL;
LABEL_222:
    swift_bridgeObjectRelease(v47);
    return 42LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746143656C6F72LL, 0xEE00736569726F67LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v47 = a2;
    goto LABEL_222;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v48 = 0x800000010084ED70LL;
    if (a2 == 0x800000010084ED70LL) {
      goto LABEL_227;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010084ED70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v48 = a2;
LABEL_227:
    swift_bridgeObjectRelease(v48);
    return 43LL;
  }

  if (a1 == 0xD000000000000026LL && a2 == 0x800000010084ED90LL)
  {
    unint64_t v49 = 0x800000010084ED90LL;
LABEL_233:
    swift_bridgeObjectRelease(v49);
    return 44LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000026LL, 0x800000010084ED90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v49 = a2;
    goto LABEL_233;
  }

  if (a1 == 0x5365636976726573LL && a2 == 0xEC00000065746174LL)
  {
    unint64_t v50 = 0xEC00000065746174LL;
LABEL_239:
    swift_bridgeObjectRelease(v50);
    return 45LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5365636976726573LL, 0xEC00000065746174LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v50 = a2;
    goto LABEL_239;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v51 = 0x8000000100861CD0LL;
    if (a2 == 0x8000000100861CD0LL) {
      goto LABEL_244;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x8000000100861CD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v51 = a2;
LABEL_244:
    swift_bridgeObjectRelease(v51);
    return 46LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v52 = 0x800000010084EDE0LL;
    if (a2 == 0x800000010084EDE0LL) {
      goto LABEL_249;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000010084EDE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v52 = a2;
LABEL_249:
    swift_bridgeObjectRelease(v52);
    return 47LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v53 = 0x800000010084EE00LL;
    if (a2 == 0x800000010084EE00LL) {
      goto LABEL_254;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010084EE00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v53 = a2;
LABEL_254:
    swift_bridgeObjectRelease(v53);
    return 48LL;
  }

  if (a1 == 0xD00000000000001ALL)
  {
    unint64_t v54 = 0x800000010084EE20LL;
    if (a2 == 0x800000010084EE20LL) {
      goto LABEL_259;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010084EE20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v54 = a2;
LABEL_259:
    swift_bridgeObjectRelease(v54);
    return 49LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v55 = 0x800000010084EE40LL;
    if (a2 == 0x800000010084EE40LL) {
      goto LABEL_264;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010084EE40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v55 = a2;
LABEL_264:
    swift_bridgeObjectRelease(v55);
    return 50LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v56 = 0x800000010084EE60LL;
    if (a2 == 0x800000010084EE60LL) {
      goto LABEL_269;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010084EE60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v56 = a2;
LABEL_269:
    swift_bridgeObjectRelease(v56);
    return 51LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v57 = 0x800000010084EE80LL;
    if (a2 == 0x800000010084EE80LL) {
      goto LABEL_274;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010084EE80LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v57 = a2;
LABEL_274:
    swift_bridgeObjectRelease(v57);
    return 52LL;
  }

  if (a1 == 0x63616542666C6573LL && a2 == 0xEE00444955556E6FLL)
  {
    unint64_t v58 = 0xEE00444955556E6FLL;
LABEL_280:
    swift_bridgeObjectRelease(v58);
    return 53LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63616542666C6573LL, 0xEE00444955556E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v58 = a2;
    goto LABEL_280;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v59 = 0x8000000100861CF0LL;
    if (a2 == 0x8000000100861CF0LL) {
      goto LABEL_285;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x8000000100861CF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v59 = a2;
LABEL_285:
    swift_bridgeObjectRelease(v59);
    return 54LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v60 = 0x8000000100861D10LL;
    if (a2 == 0x8000000100861D10LL) {
      goto LABEL_290;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x8000000100861D10LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v60 = a2;
LABEL_290:
    swift_bridgeObjectRelease(v60);
    return 55LL;
  }

  if (a1 == 0x5279654B7473616CLL && a2 == 0xEF657461446C6C6FLL)
  {
    unint64_t v61 = 0xEF657461446C6C6FLL;
LABEL_296:
    swift_bridgeObjectRelease(v61);
    return 56LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5279654B7473616CLL, 0xEF657461446C6C6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v61 = a2;
    goto LABEL_296;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v62 = 0x800000010084EEA0LL;
    if (a2 == 0x800000010084EEA0LL) {
      goto LABEL_301;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084EEA0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v62 = a2;
LABEL_301:
    swift_bridgeObjectRelease(v62);
    return 57LL;
  }

  if (a1 == 0xD00000000000001ELL)
  {
    unint64_t v63 = 0x800000010084EEC0LL;
    if (a2 == 0x800000010084EEC0LL) {
      goto LABEL_306;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x800000010084EEC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v63 = a2;
LABEL_306:
    swift_bridgeObjectRelease(v63);
    return 58LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v64 = 0x800000010084EEE0LL;
    if (a2 == 0x800000010084EEE0LL) {
      goto LABEL_311;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010084EEE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v64 = a2;
LABEL_311:
    swift_bridgeObjectRelease(v64);
    return 59LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v65 = 0x800000010084EF00LL;
    if (a2 == 0x800000010084EF00LL) {
      goto LABEL_316;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010084EF00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v65 = a2;
LABEL_316:
    swift_bridgeObjectRelease(v65);
    return 60LL;
  }

  if (a1 == 0xD00000000000001ELL)
  {
    unint64_t v66 = 0x800000010084EF20LL;
    if (a2 == 0x800000010084EF20LL) {
      goto LABEL_321;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x800000010084EF20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v66 = a2;
LABEL_321:
    swift_bridgeObjectRelease(v66);
    return 61LL;
  }

  if (a1 == 0xD00000000000001ELL)
  {
    unint64_t v67 = 0x800000010084EF40LL;
    if (a2 == 0x800000010084EF40LL) {
      goto LABEL_326;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x800000010084EF40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v67 = a2;
LABEL_326:
    swift_bridgeObjectRelease(v67);
    return 62LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v68 = 0x8000000100861D30LL;
    if (a2 == 0x8000000100861D30LL) {
      goto LABEL_331;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x8000000100861D30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v68 = a2;
LABEL_331:
    swift_bridgeObjectRelease(v68);
    return 63LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v69 = 0x800000010084EF60LL;
    if (a2 == 0x800000010084EF60LL) {
      goto LABEL_336;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010084EF60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v69 = a2;
LABEL_336:
    swift_bridgeObjectRelease(v69);
    return 64LL;
  }

  if (a1 == 0x724473776F6C6C61LL && a2 == 0xEE00676E69746661LL)
  {
    unint64_t v70 = 0xEE00676E69746661LL;
LABEL_342:
    swift_bridgeObjectRelease(v70);
    return 65LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x724473776F6C6C61LL, 0xEE00676E69746661LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v70 = a2;
    goto LABEL_342;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v71 = 0x8000000100861D50LL;
    if (a2 == 0x8000000100861D50LL) {
      goto LABEL_347;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100861D50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v71 = a2;
LABEL_347:
    swift_bridgeObjectRelease(v71);
    return 66LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v72 = 0x800000010084EFB0LL;
    if (a2 == 0x800000010084EFB0LL) {
      goto LABEL_352;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010084EFB0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v72 = a2;
LABEL_352:
    swift_bridgeObjectRelease(v72);
    return 67LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v73 = 0x800000010084EFD0LL;
    if (a2 == 0x800000010084EFD0LL) {
      goto LABEL_357;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010084EFD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v73 = a2;
LABEL_357:
    swift_bridgeObjectRelease(v73);
    return 68LL;
  }

  if (a1 == 0xD000000000000025LL)
  {
    unint64_t v74 = 0x800000010084EFF0LL;
    if (a2 == 0x800000010084EFF0LL) {
      goto LABEL_362;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025LL, 0x800000010084EFF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v74 = a2;
LABEL_362:
    swift_bridgeObjectRelease(v74);
    return 69LL;
  }

  if (a1 == 0xD000000000000028LL)
  {
    unint64_t v75 = 0x800000010084F020LL;
    if (a2 == 0x800000010084F020LL) {
      goto LABEL_367;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000028LL, 0x800000010084F020LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v75 = a2;
LABEL_367:
    swift_bridgeObjectRelease(v75);
    return 70LL;
  }

  if (a1 == 0xD000000000000020LL)
  {
    unint64_t v76 = 0x800000010084F050LL;
    if (a2 == 0x800000010084F050LL) {
      goto LABEL_372;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020LL, 0x800000010084F050LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v76 = a2;
LABEL_372:
    swift_bridgeObjectRelease(v76);
    return 71LL;
  }

  if (a1 == 0xD000000000000021LL)
  {
    unint64_t v77 = 0x800000010084F080LL;
    if (a2 == 0x800000010084F080LL) {
      goto LABEL_377;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x800000010084F080LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v77 = a2;
LABEL_377:
    swift_bridgeObjectRelease(v77);
    return 72LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v78 = 0x800000010084F0B0LL;
    if (a2 == 0x800000010084F0B0LL) {
      goto LABEL_382;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000010084F0B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v78 = a2;
LABEL_382:
    swift_bridgeObjectRelease(v78);
    return 73LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v79 = 0x8000000100861D70LL;
    if (a2 == 0x8000000100861D70LL) {
      goto LABEL_387;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100861D70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v79 = a2;
LABEL_387:
    swift_bridgeObjectRelease(v79);
    return 74LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v80 = 0x8000000100861D90LL;
    if (a2 == 0x8000000100861D90LL) {
      goto LABEL_392;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100861D90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v80 = a2;
LABEL_392:
    swift_bridgeObjectRelease(v80);
    return 75LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v81 = 0x800000010084FC40LL;
    if (a2 == 0x800000010084FC40LL) {
      goto LABEL_397;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010084FC40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v81 = a2;
LABEL_397:
    swift_bridgeObjectRelease(v81);
    return 76LL;
  }

  if (a1 == 0xD000000000000022LL)
  {
    unint64_t v82 = 0x800000010084FC60LL;
    if (a2 == 0x800000010084FC60LL) {
      goto LABEL_402;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022LL, 0x800000010084FC60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v82 = a2;
LABEL_402:
    swift_bridgeObjectRelease(v82);
    return 77LL;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v83 = 0x800000010084FC90LL;
    if (a2 == 0x800000010084FC90LL) {
      goto LABEL_407;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010084FC90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v83 = a2;
LABEL_407:
    swift_bridgeObjectRelease(v83);
    return 78LL;
  }

  if (a1 == 0xD000000000000025LL)
  {
    unint64_t v84 = 0x800000010084FCB0LL;
    if (a2 == 0x800000010084FCB0LL) {
      goto LABEL_412;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025LL, 0x800000010084FCB0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v84 = a2;
LABEL_412:
    swift_bridgeObjectRelease(v84);
    return 79LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v85 = 0x800000010084FCE0LL;
    if (a2 == 0x800000010084FCE0LL) {
      goto LABEL_417;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010084FCE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v85 = a2;
LABEL_417:
    swift_bridgeObjectRelease(v85);
    return 80LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v86 = 0x8000000100861DB0LL;
    if (a2 == 0x8000000100861DB0LL) {
      goto LABEL_422;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100861DB0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v86 = a2;
LABEL_422:
    swift_bridgeObjectRelease(v86);
    return 81LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v87 = 0x8000000100861DD0LL;
    if (a2 == 0x8000000100861DD0LL) {
      goto LABEL_427;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x8000000100861DD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v87 = a2;
LABEL_427:
    swift_bridgeObjectRelease(v87);
    return 82LL;
  }

  if (a1 == 0xD00000000000002BLL)
  {
    unint64_t v88 = 0x8000000100861DF0LL;
    if (a2 == 0x8000000100861DF0LL) {
      goto LABEL_432;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x8000000100861DF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v88 = a2;
LABEL_432:
    swift_bridgeObjectRelease(v88);
    return 83LL;
  }

  if (a1 == 0x6941656C65487369LL && a2 == 0xED000073646F5072LL)
  {
    unint64_t v89 = 0xED000073646F5072LL;
LABEL_438:
    swift_bridgeObjectRelease(v89);
    return 84LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6941656C65487369LL, 0xED000073646F5072LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v89 = a2;
    goto LABEL_438;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v90 = 0x800000010084F2C0LL;
    if (a2 == 0x800000010084F2C0LL) {
      goto LABEL_443;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010084F2C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v90 = a2;
LABEL_443:
    swift_bridgeObjectRelease(v90);
    return 85LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v91 = 0x800000010084F2E0LL;
    if (a2 == 0x800000010084F2E0LL) {
      goto LABEL_448;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010084F2E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v91 = a2;
LABEL_448:
    swift_bridgeObjectRelease(v91);
    return 86LL;
  }

  if (a1 == 0xD000000000000021LL)
  {
    unint64_t v92 = 0x800000010084F0D0LL;
    if (a2 == 0x800000010084F0D0LL) {
      goto LABEL_453;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x800000010084F0D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v92 = a2;
LABEL_453:
    swift_bridgeObjectRelease(v92);
    return 87LL;
  }

  if (a1 == 0xD000000000000023LL)
  {
    unint64_t v93 = 0x800000010084F100LL;
    if (a2 == 0x800000010084F100LL) {
      goto LABEL_458;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x800000010084F100LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v93 = a2;
LABEL_458:
    swift_bridgeObjectRelease(v93);
    return 88LL;
  }

  if (a1 == 0xD000000000000024LL)
  {
    unint64_t v94 = 0x800000010084F130LL;
    if (a2 == 0x800000010084F130LL) {
      goto LABEL_463;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024LL, 0x800000010084F130LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v94 = a2;
LABEL_463:
    swift_bridgeObjectRelease(v94);
    return 89LL;
  }

  if (a1 == 0xD000000000000021LL)
  {
    unint64_t v95 = 0x800000010084F160LL;
    if (a2 == 0x800000010084F160LL) {
      goto LABEL_468;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x800000010084F160LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v95 = a2;
LABEL_468:
    swift_bridgeObjectRelease(v95);
    return 90LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v96 = 0x800000010084F190LL;
    if (a2 == 0x800000010084F190LL) {
      goto LABEL_473;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084F190LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v96 = a2;
LABEL_473:
    swift_bridgeObjectRelease(v96);
    return 91LL;
  }

  if (a1 == 0xD000000000000020LL)
  {
    unint64_t v97 = 0x800000010084F1B0LL;
    if (a2 == 0x800000010084F1B0LL) {
      goto LABEL_478;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020LL, 0x800000010084F1B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v97 = a2;
LABEL_478:
    swift_bridgeObjectRelease(v97);
    return 92LL;
  }

  if (a1 == 0xD000000000000019LL)
  {
    unint64_t v98 = 0x800000010084F1E0LL;
    if (a2 == 0x800000010084F1E0LL) {
      goto LABEL_483;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x800000010084F1E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v98 = a2;
LABEL_483:
    swift_bridgeObjectRelease(v98);
    return 93LL;
  }

  if (a1 == 0xD000000000000023LL)
  {
    unint64_t v99 = 0x800000010084F200LL;
    if (a2 == 0x800000010084F200LL) {
      goto LABEL_488;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x800000010084F200LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v99 = a2;
LABEL_488:
    swift_bridgeObjectRelease(v99);
    return 94LL;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v100 = 0x800000010084EDC0LL;
    if (a2 == 0x800000010084EDC0LL) {
      goto LABEL_493;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x800000010084EDC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v100 = a2;
LABEL_493:
    swift_bridgeObjectRelease(v100);
    return 95LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v101 = 0x800000010084F230LL;
    if (a2 == 0x800000010084F230LL) {
      goto LABEL_498;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010084F230LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v101 = a2;
LABEL_498:
    swift_bridgeObjectRelease(v101);
    return 96LL;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v102 = 0x800000010084F250LL;
    if (a2 == 0x800000010084F250LL) {
      goto LABEL_503;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010084F250LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v102 = a2;
LABEL_503:
    swift_bridgeObjectRelease(v102);
    return 97LL;
  }

  if (a1 == 0xD00000000000001ALL)
  {
    unint64_t v103 = 0x800000010084F270LL;
    if (a2 == 0x800000010084F270LL) {
      goto LABEL_508;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010084F270LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v103 = a2;
LABEL_508:
    swift_bridgeObjectRelease(v103);
    return 98LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v104 = 0x800000010084F290LL;
    if (a2 == 0x800000010084F290LL) {
      goto LABEL_513;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084F290LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v104 = a2;
LABEL_513:
    swift_bridgeObjectRelease(v104);
    return 99LL;
  }

  if (a1 == 0xD000000000000019LL)
  {
    unint64_t v105 = 0x800000010084F300LL;
    if (a2 == 0x800000010084F300LL) {
      goto LABEL_518;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x800000010084F300LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v105 = a2;
LABEL_518:
    swift_bridgeObjectRelease(v105);
    return 100LL;
  }

  if (a1 == 0xD000000000000023LL)
  {
    unint64_t v106 = 0x800000010084F320LL;
    if (a2 == 0x800000010084F320LL) {
      goto LABEL_523;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x800000010084F320LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v106 = a2;
LABEL_523:
    swift_bridgeObjectRelease(v106);
    return 101LL;
  }

  if (a1 == 0xD000000000000025LL)
  {
    unint64_t v107 = 0x800000010084F350LL;
    if (a2 == 0x800000010084F350LL) {
      goto LABEL_528;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025LL, 0x800000010084F350LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v107 = a2;
LABEL_528:
    swift_bridgeObjectRelease(v107);
    return 102LL;
  }

  if (a1 == 0xD00000000000001FLL)
  {
    unint64_t v108 = 0x800000010084F380LL;
    if (a2 == 0x800000010084F380LL) {
      goto LABEL_533;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000010084F380LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v108 = a2;
LABEL_533:
    swift_bridgeObjectRelease(v108);
    return 103LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v109 = 0x800000010084F3A0LL;
    if (a2 == 0x800000010084F3A0LL) {
      goto LABEL_538;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010084F3A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v109 = a2;
LABEL_538:
    swift_bridgeObjectRelease(v109);
    return 104LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v110 = 0x800000010084F3C0LL;
    if (a2 == 0x800000010084F3C0LL) {
      goto LABEL_543;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000010084F3C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v110 = a2;
LABEL_543:
    swift_bridgeObjectRelease(v110);
    return 105LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v111 = 0x800000010084F3E0LL;
    if (a2 == 0x800000010084F3E0LL) {
      goto LABEL_548;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084F3E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v111 = a2;
LABEL_548:
    swift_bridgeObjectRelease(v111);
    return 106LL;
  }

  if (a1 == 0xD00000000000001ALL)
  {
    unint64_t v112 = 0x800000010084F400LL;
    if (a2 == 0x800000010084F400LL) {
      goto LABEL_553;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010084F400LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v112 = a2;
LABEL_553:
    swift_bridgeObjectRelease(v112);
    return 107LL;
  }

  if (a1 == 0xD00000000000001ALL)
  {
    unint64_t v113 = 0x800000010084F420LL;
    if (a2 == 0x800000010084F420LL) {
      goto LABEL_558;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010084F420LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v113 = a2;
LABEL_558:
    swift_bridgeObjectRelease(v113);
    return 108LL;
  }

  if (a1 == 0xD000000000000020LL)
  {
    unint64_t v114 = 0x800000010084F440LL;
    if (a2 == 0x800000010084F440LL) {
      goto LABEL_563;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020LL, 0x800000010084F440LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v114 = a2;
LABEL_563:
    swift_bridgeObjectRelease(v114);
    return 109LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v115 = 0x800000010084F470LL;
    if (a2 == 0x800000010084F470LL) {
      goto LABEL_568;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010084F470LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v115 = a2;
LABEL_568:
    swift_bridgeObjectRelease(v115);
    return 110LL;
  }

  if (a1 == 0xD000000000000022LL)
  {
    unint64_t v116 = 0x800000010084F490LL;
    if (a2 == 0x800000010084F490LL) {
      goto LABEL_573;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022LL, 0x800000010084F490LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v116 = a2;
LABEL_573:
    swift_bridgeObjectRelease(v116);
    return 111LL;
  }

  if (a1 == 0xD00000000000001ALL)
  {
    unint64_t v117 = 0x800000010084F4C0LL;
    if (a2 == 0x800000010084F4C0LL) {
      goto LABEL_578;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010084F4C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v117 = a2;
LABEL_578:
    swift_bridgeObjectRelease(v117);
    return 112LL;
  }

  if (a1 == 0xD00000000000001FLL)
  {
    unint64_t v118 = 0x800000010084F4E0LL;
    if (a2 == 0x800000010084F4E0LL) {
      goto LABEL_583;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000010084F4E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v118 = a2;
LABEL_583:
    swift_bridgeObjectRelease(v118);
    return 113LL;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v119 = 0x800000010084F500LL;
    if (a2 == 0x800000010084F500LL) {
      goto LABEL_588;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010084F500LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v119 = a2;
LABEL_588:
    swift_bridgeObjectRelease(v119);
    return 114LL;
  }

  if (a1 == 0xD000000000000019LL)
  {
    unint64_t v120 = 0x800000010084F520LL;
    if (a2 == 0x800000010084F520LL) {
      goto LABEL_593;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x800000010084F520LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v120 = a2;
LABEL_593:
    swift_bridgeObjectRelease(v120);
    return 115LL;
  }

  if (a1 == 0xD00000000000002BLL)
  {
    unint64_t v121 = 0x800000010084F540LL;
    if (a2 == 0x800000010084F540LL) {
      goto LABEL_598;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x800000010084F540LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v121 = a2;
LABEL_598:
    swift_bridgeObjectRelease(v121);
    return 116LL;
  }

  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v122 = 0x800000010084F570LL;
    if (a2 == 0x800000010084F570LL) {
      goto LABEL_603;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010084F570LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v122 = a2;
LABEL_603:
    swift_bridgeObjectRelease(v122);
    return 117LL;
  }

  if (a1 == 0xD000000000000022LL)
  {
    unint64_t v123 = 0x800000010084F590LL;
    if (a2 == 0x800000010084F590LL) {
      goto LABEL_608;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022LL, 0x800000010084F590LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v123 = a2;
LABEL_608:
    swift_bridgeObjectRelease(v123);
    return 118LL;
  }

  if (a1 == 0xD000000000000032LL)
  {
    unint64_t v124 = 0x8000000100861E20LL;
    if (a2 == 0x8000000100861E20LL) {
      goto LABEL_613;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000032LL, 0x8000000100861E20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v124 = a2;
LABEL_613:
    swift_bridgeObjectRelease(v124);
    return 119LL;
  }

  if (a1 == 0xD000000000000031LL)
  {
    unint64_t v125 = 0x8000000100861E60LL;
    if (a2 == 0x8000000100861E60LL) {
      goto LABEL_618;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000031LL, 0x8000000100861E60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v125 = a2;
LABEL_618:
    swift_bridgeObjectRelease(v125);
    return 120LL;
  }

  if (a1 == 0xD000000000000032LL)
  {
    unint64_t v126 = 0x8000000100861EA0LL;
    if (a2 == 0x8000000100861EA0LL) {
      goto LABEL_623;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000032LL, 0x8000000100861EA0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v126 = a2;
LABEL_623:
    swift_bridgeObjectRelease(v126);
    return 121LL;
  }

  if (a1 == 0xD000000000000031LL)
  {
    unint64_t v127 = 0x8000000100861EE0LL;
    if (a2 == 0x8000000100861EE0LL) {
      goto LABEL_628;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000031LL, 0x8000000100861EE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v127 = a2;
LABEL_628:
    swift_bridgeObjectRelease(v127);
    return 122LL;
  }

  if (a1 == 0xD000000000000028LL)
  {
    unint64_t v128 = 0x800000010084F5C0LL;
    if (a2 == 0x800000010084F5C0LL) {
      goto LABEL_633;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000028LL, 0x800000010084F5C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v128 = a2;
LABEL_633:
    swift_bridgeObjectRelease(v128);
    return 123LL;
  }

  if (a1 == 0xD00000000000002BLL)
  {
    unint64_t v129 = 0x800000010084F5F0LL;
    if (a2 == 0x800000010084F5F0LL) {
      goto LABEL_638;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x800000010084F5F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v129 = a2;
LABEL_638:
    swift_bridgeObjectRelease(v129);
    return 124LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v130 = 0x800000010084F620LL;
    if (a2 == 0x800000010084F620LL) {
      goto LABEL_643;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084F620LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v130 = a2;
LABEL_643:
    swift_bridgeObjectRelease(v130);
    return 125LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v131 = 0x800000010084F640LL;
    if (a2 == 0x800000010084F640LL) {
      goto LABEL_648;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084F640LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v131 = a2;
LABEL_648:
    swift_bridgeObjectRelease(v131);
    return 126LL;
  }

  if (a1 == 0xD000000000000032LL)
  {
    unint64_t v132 = 0x800000010084F660LL;
    if (a2 == 0x800000010084F660LL) {
      goto LABEL_653;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000032LL, 0x800000010084F660LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v132 = a2;
LABEL_653:
    swift_bridgeObjectRelease(v132);
    return 127LL;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v133 = 0x800000010084F6A0LL;
    if (a2 == 0x800000010084F6A0LL) {
      goto LABEL_658;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010084F6A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v133 = a2;
LABEL_658:
    swift_bridgeObjectRelease(v133);
    return 128LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v134 = 0x800000010084F6C0LL;
    if (a2 == 0x800000010084F6C0LL) {
      goto LABEL_663;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084F6C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v134 = a2;
LABEL_663:
    swift_bridgeObjectRelease(v134);
    return 129LL;
  }

  if (a1 == 0xD000000000000022LL)
  {
    unint64_t v135 = 0x8000000100861F20LL;
    if (a2 == 0x8000000100861F20LL) {
      goto LABEL_668;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022LL, 0x8000000100861F20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v135 = a2;
LABEL_668:
    swift_bridgeObjectRelease(v135);
    return 130LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v136 = 0x800000010084F6E0LL;
    if (a2 == 0x800000010084F6E0LL) {
      goto LABEL_673;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084F6E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v136 = a2;
LABEL_673:
    swift_bridgeObjectRelease(v136);
    return 131LL;
  }

  if (a1 == 0xD000000000000020LL)
  {
    unint64_t v137 = 0x800000010084F700LL;
    if (a2 == 0x800000010084F700LL) {
      goto LABEL_678;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020LL, 0x800000010084F700LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v137 = a2;
LABEL_678:
    swift_bridgeObjectRelease(v137);
    return 132LL;
  }

  if (a1 == 0xD00000000000001FLL)
  {
    unint64_t v138 = 0x800000010084F730LL;
    if (a2 == 0x800000010084F730LL) {
      goto LABEL_683;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000010084F730LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v138 = a2;
LABEL_683:
    swift_bridgeObjectRelease(v138);
    return 133LL;
  }

  if (a1 == 0xD000000000000019LL)
  {
    unint64_t v139 = 0x800000010084F750LL;
    if (a2 == 0x800000010084F750LL) {
      goto LABEL_688;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x800000010084F750LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v139 = a2;
LABEL_688:
    swift_bridgeObjectRelease(v139);
    return 134LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v140 = 0x800000010084F770LL;
    if (a2 == 0x800000010084F770LL) {
      goto LABEL_693;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084F770LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v140 = a2;
LABEL_693:
    swift_bridgeObjectRelease(v140);
    return 135LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v141 = 0x800000010084F790LL;
    if (a2 == 0x800000010084F790LL) {
      goto LABEL_698;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084F790LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v141 = a2;
LABEL_698:
    swift_bridgeObjectRelease(v141);
    return 136LL;
  }

  if (a1 == 0x657261685378616DLL && a2 == 0xEF737265626D654DLL)
  {
    unint64_t v142 = 0xEF737265626D654DLL;
LABEL_704:
    swift_bridgeObjectRelease(v142);
    return 137LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261685378616DLL, 0xEF737265626D654DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v142 = a2;
    goto LABEL_704;
  }

  if (a1 == 0x657261685378616DLL && a2 == 0xEE00736D65744964LL)
  {
    unint64_t v143 = 0xEE00736D65744964LL;
LABEL_710:
    swift_bridgeObjectRelease(v143);
    return 138LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261685378616DLL, 0xEE00736D65744964LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v143 = a2;
    goto LABEL_710;
  }

  if (a1 == 0xD000000000000016LL)
  {
    unint64_t v144 = 0x800000010084F7C0LL;
    if (a2 == 0x800000010084F7C0LL) {
      goto LABEL_715;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x800000010084F7C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v144 = a2;
LABEL_715:
    swift_bridgeObjectRelease(v144);
    return 139LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v145 = 0x800000010084F7E0LL;
    if (a2 == 0x800000010084F7E0LL) {
      goto LABEL_720;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000010084F7E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v145 = a2;
LABEL_720:
    swift_bridgeObjectRelease(v145);
    return 140LL;
  }

  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v146 = 0x800000010084F800LL;
    if (a2 == 0x800000010084F800LL) {
      goto LABEL_725;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010084F800LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v146 = a2;
LABEL_725:
    swift_bridgeObjectRelease(v146);
    return 141LL;
  }

  if (a1 == 0xD00000000000001ALL)
  {
    unint64_t v147 = 0x800000010084F820LL;
    if (a2 == 0x800000010084F820LL) {
      goto LABEL_730;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010084F820LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v147 = a2;
LABEL_730:
    swift_bridgeObjectRelease(v147);
    return 142LL;
  }

  if (a1 == 0xD00000000000001CLL)
  {
    unint64_t v148 = 0x800000010084F840LL;
    if (a2 == 0x800000010084F840LL) {
      goto LABEL_735;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010084F840LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v148 = a2;
LABEL_735:
    swift_bridgeObjectRelease(v148);
    return 143LL;
  }

  if (a1 == 0xD000000000000022LL)
  {
    unint64_t v149 = 0x800000010084F860LL;
    if (a2 == 0x800000010084F860LL) {
      goto LABEL_740;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022LL, 0x800000010084F860LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v149 = a2;
LABEL_740:
    swift_bridgeObjectRelease(v149);
    return 144LL;
  }

  if (a1 == 0xD000000000000023LL)
  {
    unint64_t v150 = 0x800000010084F890LL;
    if (a2 == 0x800000010084F890LL) {
      goto LABEL_745;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x800000010084F890LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v150 = a2;
LABEL_745:
    swift_bridgeObjectRelease(v150);
    return 145LL;
  }

  if (a1 == 0xD000000000000023LL)
  {
    unint64_t v151 = 0x800000010084F8C0LL;
    if (a2 == 0x800000010084F8C0LL) {
      goto LABEL_750;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x800000010084F8C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v151 = a2;
LABEL_750:
    swift_bridgeObjectRelease(v151);
    return 146LL;
  }

  if (a1 == 0xD000000000000024LL)
  {
    unint64_t v152 = 0x800000010084F8F0LL;
    if (a2 == 0x800000010084F8F0LL) {
      goto LABEL_755;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024LL, 0x800000010084F8F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v152 = a2;
LABEL_755:
    swift_bridgeObjectRelease(v152);
    return 147LL;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v153 = 0x800000010084F920LL;
    if (a2 == 0x800000010084F920LL) {
      goto LABEL_760;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010084F920LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v153 = a2;
LABEL_760:
    swift_bridgeObjectRelease(v153);
    return 148LL;
  }

  if (a1 == 0xD00000000000002BLL)
  {
    unint64_t v154 = 0x800000010084F940LL;
    if (a2 == 0x800000010084F940LL) {
      goto LABEL_765;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x800000010084F940LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v154 = a2;
LABEL_765:
    swift_bridgeObjectRelease(v154);
    return 149LL;
  }

  if (a1 == 0xD00000000000002DLL)
  {
    unint64_t v155 = 0x800000010084F970LL;
    if (a2 == 0x800000010084F970LL) {
      goto LABEL_770;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002DLL, 0x800000010084F970LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v155 = a2;
LABEL_770:
    swift_bridgeObjectRelease(v155);
    return 150LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v156 = 0x800000010084F9A0LL;
    if (a2 == 0x800000010084F9A0LL) {
      goto LABEL_775;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084F9A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v156 = a2;
LABEL_775:
    swift_bridgeObjectRelease(v156);
    return 151LL;
  }

  if (a1 == 0xD000000000000023LL)
  {
    unint64_t v157 = 0x800000010084F9C0LL;
    if (a2 == 0x800000010084F9C0LL) {
      goto LABEL_780;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x800000010084F9C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v157 = a2;
LABEL_780:
    swift_bridgeObjectRelease(v157);
    return 152LL;
  }

  if (a1 == 0xD000000000000020LL)
  {
    unint64_t v158 = 0x800000010084F9F0LL;
    if (a2 == 0x800000010084F9F0LL) {
      goto LABEL_785;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020LL, 0x800000010084F9F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v158 = a2;
LABEL_785:
    swift_bridgeObjectRelease(v158);
    return 153LL;
  }

  if (a1 == 0xD00000000000001ELL)
  {
    unint64_t v159 = 0x8000000100861F50LL;
    if (a2 == 0x8000000100861F50LL) {
      goto LABEL_790;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100861F50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v159 = a2;
LABEL_790:
    swift_bridgeObjectRelease(v159);
    return 154LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v160 = 0x8000000100861F70LL;
    if (a2 == 0x8000000100861F70LL) {
      goto LABEL_795;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100861F70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v160 = a2;
LABEL_795:
    swift_bridgeObjectRelease(v160);
    return 155LL;
  }

  if (a1 == 0xD000000000000021LL)
  {
    unint64_t v161 = 0x8000000100861F90LL;
    if (a2 == 0x8000000100861F90LL) {
      goto LABEL_800;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x8000000100861F90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v161 = a2;
LABEL_800:
    swift_bridgeObjectRelease(v161);
    return 156LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v162 = 0x8000000100861FC0LL;
    if (a2 == 0x8000000100861FC0LL) {
      goto LABEL_805;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100861FC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v162 = a2;
LABEL_805:
    swift_bridgeObjectRelease(v162);
    return 157LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v163 = 0x8000000100861FE0LL;
    if (a2 == 0x8000000100861FE0LL) {
      goto LABEL_810;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100861FE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v163 = a2;
LABEL_810:
    swift_bridgeObjectRelease(v163);
    return 158LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v164 = 0x8000000100862000LL;
    if (a2 == 0x8000000100862000LL) {
      goto LABEL_815;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x8000000100862000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v164 = a2;
LABEL_815:
    swift_bridgeObjectRelease(v164);
    return 159LL;
  }

  if (a1 == 0xD00000000000001ELL)
  {
    unint64_t v165 = 0x800000010084FA20LL;
    if (a2 == 0x800000010084FA20LL) {
      goto LABEL_820;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x800000010084FA20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v165 = a2;
LABEL_820:
    swift_bridgeObjectRelease(v165);
    return 160LL;
  }

  if (a1 == 0xD00000000000001ALL)
  {
    unint64_t v166 = 0x800000010084FA40LL;
    if (a2 == 0x800000010084FA40LL) {
      goto LABEL_825;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010084FA40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v166 = a2;
LABEL_825:
    swift_bridgeObjectRelease(v166);
    return 161LL;
  }

  if (a1 == 0xD00000000000001ELL)
  {
    unint64_t v167 = 0x800000010084FA60LL;
    if (a2 == 0x800000010084FA60LL) {
      goto LABEL_830;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x800000010084FA60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v167 = a2;
LABEL_830:
    swift_bridgeObjectRelease(v167);
    return 162LL;
  }

  if (a1 == 0xD00000000000001FLL)
  {
    unint64_t v168 = 0x800000010084FA80LL;
    if (a2 == 0x800000010084FA80LL) {
      goto LABEL_835;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000010084FA80LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v168 = a2;
LABEL_835:
    swift_bridgeObjectRelease(v168);
    return 163LL;
  }

  if (a1 == 0xD00000000000001ALL)
  {
    unint64_t v169 = 0x800000010084FAA0LL;
    if (a2 == 0x800000010084FAA0LL) {
      goto LABEL_840;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010084FAA0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v169 = a2;
LABEL_840:
    swift_bridgeObjectRelease(v169);
    return 164LL;
  }

  if (a1 == 0xD00000000000002DLL)
  {
    unint64_t v170 = 0x800000010084FAC0LL;
    if (a2 == 0x800000010084FAC0LL) {
      goto LABEL_845;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002DLL, 0x800000010084FAC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v170 = a2;
LABEL_845:
    swift_bridgeObjectRelease(v170);
    return 165LL;
  }

  if (a1 == 0xD000000000000022LL)
  {
    unint64_t v171 = 0x800000010084FAF0LL;
    if (a2 == 0x800000010084FAF0LL) {
      goto LABEL_850;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022LL, 0x800000010084FAF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v171 = a2;
LABEL_850:
    swift_bridgeObjectRelease(v171);
    return 166LL;
  }

  if (a1 == 0xD00000000000001ELL)
  {
    unint64_t v172 = 0x800000010084FB20LL;
    if (a2 == 0x800000010084FB20LL) {
      goto LABEL_855;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x800000010084FB20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v172 = a2;
LABEL_855:
    swift_bridgeObjectRelease(v172);
    return 167LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v173 = 0x800000010084FB40LL;
    if (a2 == 0x800000010084FB40LL) {
      goto LABEL_860;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084FB40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v173 = a2;
LABEL_860:
    swift_bridgeObjectRelease(v173);
    return 168LL;
  }

  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v174 = 0x800000010084FB60LL;
    if (a2 == 0x800000010084FB60LL) {
      goto LABEL_865;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010084FB60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v174 = a2;
LABEL_865:
    swift_bridgeObjectRelease(v174);
    return 169LL;
  }

  if (a1 == 0xD000000000000023LL)
  {
    unint64_t v175 = 0x800000010084FB80LL;
    if (a2 == 0x800000010084FB80LL) {
      goto LABEL_870;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023LL, 0x800000010084FB80LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v175 = a2;
LABEL_870:
    swift_bridgeObjectRelease(v175);
    return 170LL;
  }

  if (a1 == 0xD000000000000029LL && a2 == 0x800000010084FBB0LL)
  {
    unint64_t v176 = 0x800000010084FBB0LL;
LABEL_876:
    swift_bridgeObjectRelease(v176);
    return 171LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000029LL, 0x800000010084FBB0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v176 = a2;
    goto LABEL_876;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v177 = 0x800000010084FBE0LL;
    if (a2 == 0x800000010084FBE0LL) {
      goto LABEL_881;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010084FBE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v177 = a2;
LABEL_881:
    swift_bridgeObjectRelease(v177);
    return 172LL;
  }

  if (a1 == 0xD00000000000001DLL)
  {
    unint64_t v178 = 0x800000010084FC00LL;
    if (a2 == 0x800000010084FC00LL) {
      goto LABEL_886;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084FC00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v178 = a2;
LABEL_886:
    swift_bridgeObjectRelease(v178);
    return 173LL;
  }

  if (a1 == 0xD00000000000001DLL && a2 == 0x800000010084FC20LL)
  {
    swift_bridgeObjectRelease(0x800000010084FC20LL);
    return 174LL;
  }

  else
  {
    char v179 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010084FC20LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v179 & 1) != 0) {
      return 4294967214LL;
    }
    else {
      return 4294967215LL;
    }
  }

void *sub_10042C240(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }

  return a1;
}

uint64_t sub_10042C2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t sub_10042C358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10042C3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10042C478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10042C508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10042C598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10042C5A4);
}

uint64_t sub_10042C5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0x2B) {
    return v14 - 42;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10042C648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10042C654);
}

uint64_t sub_10042C654(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 42;
  return result;
}

uint64_t type metadata accessor for BeaconObservation(uint64_t a1)
{
  uint64_t result = qword_1009AD9D0;
  if (!qword_1009AD9D0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconObservation);
  }
  return result;
}

uint64_t sub_10042C734(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      v5[2] = &unk_100800D78;
      swift_initStructMetadata(a1, 256LL, 3LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for BeaconObservation.ObservationType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xD6) {
    goto LABEL_17;
  }
  if (a2 + 42 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 42) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 42;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 42;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 42;
    }
  }

uint64_t storeEnumTagSinglePayload for BeaconObservation.ObservationType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 42 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 42) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xD6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xD5) {
    return ((uint64_t (*)(void))((char *)&loc_10042C89C + 4 * byte_100800C65[v4]))();
  }
  *a1 = a2 + 42;
  return ((uint64_t (*)(void))((char *)sub_10042C8D0 + 4 * byte_100800C60[v4]))();
}

uint64_t sub_10042C8D0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10042C8D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10042C8E0LL);
  }
  return result;
}

uint64_t sub_10042C8EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10042C8F4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 42;
  return result;
}

uint64_t sub_10042C8F8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10042C900(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconObservation.ObservationType()
{
  return &type metadata for BeaconObservation.ObservationType;
}

unint64_t sub_10042C920()
{
  unint64_t result = qword_1009ADA10;
  if (!qword_1009ADA10)
  {
    uint64_t v1 = sub_100004B78(&qword_1009ADA18);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009ADA10);
  }

  return result;
}

void sub_10042C96C(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10042C998()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0x64657461636F6C2ELL;
}

uint64_t sub_10042D500(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009ADA48);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10042E338();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BeaconObservation.CodingKeys,  &type metadata for BeaconObservation.CodingKeys,  v11,  v9,  v10);
  char v24 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v24, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = type metadata accessor for BeaconObservation(0LL);
    uint64_t v15 = v3 + *(int *)(v14 + 20);
    char v23 = 1;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v23, v5, v16, v17);
    char v22 = *(_BYTE *)(v3 + *(int *)(v14 + 24));
    char v21 = 2;
    unint64_t v18 = sub_1003491E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v22,  &v21,  v5,  &type metadata for BeaconObservation.ObservationType,  v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10042D6CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  __chkstk_darwin(v3);
  unint64_t v31 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  unint64_t v35 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = sub_100004AEC(&qword_1009ADA38);
  uint64_t v7 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconObservation(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_10042E338();
  unint64_t v37 = v9;
  uint64_t v16 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BeaconObservation.CodingKeys,  &type metadata for BeaconObservation.CodingKeys,  v15,  v14,  v13);
  if (v16) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v28 = v5;
  uint64_t v29 = v7;
  uint64_t v17 = (uint64_t)v12;
  unint64_t v38 = a1;
  unint64_t v19 = v31;
  uint64_t v18 = v32;
  uint64_t v20 = v33;
  BYTE2(v40) = 0;
  uint64_t v21 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v22 = v34;
  uint64_t v23 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v35, v34, (char *)&v40 + 2, v36, v34, v21);
  (*(void (**)(uint64_t, void *, uint64_t))(v28 + 32))(v17, v35, v22);
  BYTE1(v40) = 1;
  uint64_t v24 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v20, (char *)&v40 + 1, v23, v20, v24);
  (*(void (**)(uint64_t, void *, uint64_t))(v18 + 32))(v17 + *(int *)(v10 + 20), v19, v20);
  char v39 = 2;
  unint64_t v25 = sub_100348D60();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v40,  &type metadata for BeaconObservation.ObservationType,  &v39,  v36,  &type metadata for BeaconObservation.ObservationType,  v25);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v37, v36);
  *(_BYTE *)(v17 + *(int *)(v10 + 24)) = v40;
  sub_1003493A4(v17, v30);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  return sub_100303000(v17);
}

BOOL sub_10042DA28(char *a1, char *a2)
{
  return qword_100801178[*a1] == qword_100801178[*a2];
}

Swift::Int sub_10042DA4C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(qword_100801178[v1]);
  return Hasher._finalize()();
}

void sub_10042DA98()
{
}

Swift::Int sub_10042DACC(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_100801178[v2]);
  return Hasher._finalize()();
}

uint64_t sub_10042DB14@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10042E37C(*a1);
  *a2 = result;
  return result;
}

void sub_10042DB3C(void *a1@<X8>)
{
  *a1 = qword_100801178[*v1];
}

BOOL sub_10042DB54(char *a1, char *a2)
{
  return qword_100801178[*a1] < qword_100801178[*a2];
}

BOOL sub_10042DB78(char *a1, char *a2)
{
  return qword_100801178[*a2] >= qword_100801178[*a1];
}

BOOL sub_10042DB9C(char *a1, char *a2)
{
  return qword_100801178[*a1] >= qword_100801178[*a2];
}

BOOL sub_10042DBC0(char *a1, char *a2)
{
  return qword_100801178[*a2] < qword_100801178[*a1];
}

uint64_t sub_10042DBE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10042E558();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10042DC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10042E558();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10042DC8C()
{
}

void sub_10042DC94(void *a1@<X8>)
{
  *a1 = &off_100936D88;
}

unint64_t sub_10042DCA8()
{
  unint64_t result = qword_1009ADA20;
  if (!qword_1009ADA20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800F10, &type metadata for BeaconObservation.ObservationType);
    atomic_store(result, (unint64_t *)&qword_1009ADA20);
  }

  return result;
}

unint64_t sub_10042DCEC()
{
  uint64_t v1 = 1702125924LL;
  if (*v0 != 1) {
    uint64_t v1 = 1701869940LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_10042DD3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10042E740(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10042DD60(uint64_t a1)
{
  unint64_t v2 = sub_10042E338();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10042DD88(uint64_t a1)
{
  unint64_t v2 = sub_10042E338();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10042DDB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10042D6CC(a1, a2);
}

uint64_t sub_10042DDC4(void *a1)
{
  return sub_10042D500(a1);
}

Swift::Int sub_10042DDD8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v8, v5, v6);
  Hasher._combine(_:)(qword_100801178[*(char *)(v1 + *(int *)(a1 + 24))]);
  return Hasher._finalize()();
}

void sub_10042DEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  Hasher._combine(_:)(qword_100801178[*(char *)(v2 + *(int *)(a2 + 24))]);
}

Swift::Int sub_10042DF78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v4, v5);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  Hasher._combine(_:)(qword_100801178[*(char *)(v2 + *(int *)(a2 + 24))]);
  return Hasher._finalize()();
}

BOOL sub_10042E04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static UUID.== infix(_:_:)(a1, a2) & 1) != 0
      && (static Date.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0
      && qword_100801178[*(char *)(a1 + *(int *)(a3 + 24))] == qword_100801178[*(char *)(a2 + *(int *)(a3 + 24))];
}

uint64_t sub_10042E0C0()
{
  return sub_100007864(&qword_1009ADA28, type metadata accessor for BeaconObservation, (uint64_t)&unk_100800F38);
}

uint64_t sub_10042E0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20));
}

BOOL sub_10042E0FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a2 + *(int *)(a3 + 20), a1 + *(int *)(a3 + 20)) & 1) == 0;
}

BOOL sub_10042E128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) == 0;
}

uint64_t sub_10042E150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a2 + *(int *)(a3 + 20), a1 + *(int *)(a3 + 20));
}

uint64_t sub_10042E164()
{
  uint64_t v1 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v2 = sub_100007864(&qword_1009ADA30, type metadata accessor for BeaconObservation, (uint64_t)&unk_100800FF0);
  v3._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x6669746E65646920LL;
  v4._object = (void *)0xED0000203A726569LL;
  String.append(_:)(v4);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v6);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x203A6570797420LL;
  v8._object = (void *)0xE700000000000000LL;
  String.append(_:)(v8);
  sub_10042C96C(*(_BYTE *)(v0 + *(int *)(v1 + 24)));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x203A6574616420LL;
  v10._object = (void *)0xE700000000000000LL;
  String.append(_:)(v10);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 62LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  return 60LL;
}

unint64_t sub_10042E338()
{
  unint64_t result = qword_1009ADA40;
  if (!qword_1009ADA40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801124, &type metadata for BeaconObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADA40);
  }

  return result;
}

uint64_t sub_10042E37C(uint64_t a1)
{
  if (a1 > 399)
  {
    if (a1 > 600)
    {
      if (a1 > 699)
      {
        if (a1 == 700) {
          return 41LL;
        }
        if (a1 == 701) {
          return 42LL;
        }
      }

      else
      {
        if (a1 == 601) {
          return 39LL;
        }
        if (a1 == 602) {
          return 40LL;
        }
      }

      return 43LL;
    }

    else
    {
      uint64_t v2 = a1 - 400;
      uint64_t result = 1LL;
      switch(v2)
      {
        case 0LL:
          uint64_t result = 0LL;
          break;
        case 2LL:
          return result;
        case 3LL:
          uint64_t result = 2LL;
          break;
        case 5LL:
          uint64_t result = 3LL;
          break;
        case 6LL:
          uint64_t result = 4LL;
          break;
        case 7LL:
          uint64_t result = 5LL;
          break;
        case 100LL:
          uint64_t result = 32LL;
          break;
        case 101LL:
          uint64_t result = 33LL;
          break;
        case 102LL:
          uint64_t result = 34LL;
          break;
        case 103LL:
          uint64_t result = 35LL;
          break;
        case 104LL:
          uint64_t result = 36LL;
          break;
        case 105LL:
          uint64_t result = 37LL;
          break;
        case 106LL:
          uint64_t result = 38LL;
          break;
        default:
          return 43LL;
      }
    }
  }

  else
  {
    switch(a1)
    {
      case 2LL:
        uint64_t result = 6LL;
        break;
      case 3LL:
        uint64_t result = 7LL;
        break;
      case 4LL:
        uint64_t result = 8LL;
        break;
      case 5LL:
        uint64_t result = 9LL;
        break;
      case 6LL:
        uint64_t result = 14LL;
        break;
      case 7LL:
        uint64_t result = 15LL;
        break;
      case 8LL:
        uint64_t result = 16LL;
        break;
      case 9LL:
        uint64_t result = 17LL;
        break;
      case 10LL:
        uint64_t result = 18LL;
        break;
      case 11LL:
        uint64_t result = 19LL;
        break;
      case 16LL:
        uint64_t result = 10LL;
        break;
      case 17LL:
        uint64_t result = 11LL;
        break;
      case 18LL:
        uint64_t result = 12LL;
        break;
      case 19LL:
        uint64_t result = 30LL;
        break;
      case 20LL:
        uint64_t result = 31LL;
        break;
      case 22LL:
        uint64_t result = 20LL;
        break;
      case 23LL:
        uint64_t result = 21LL;
        break;
      case 24LL:
        uint64_t result = 23LL;
        break;
      case 25LL:
        uint64_t result = 24LL;
        break;
      case 26LL:
        uint64_t result = 25LL;
        break;
      case 27LL:
        uint64_t result = 26LL;
        break;
      case 28LL:
        uint64_t result = 27LL;
        break;
      case 29LL:
        uint64_t result = 28LL;
        break;
      case 31LL:
        uint64_t result = 13LL;
        break;
      case 32LL:
        uint64_t result = 29LL;
        break;
      case 33LL:
        uint64_t result = 22LL;
        break;
      default:
        return 43LL;
    }
  }

  return result;
}

unint64_t sub_10042E558()
{
  unint64_t result = qword_1009ADA50;
  if (!qword_1009ADA50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800E98, &type metadata for BeaconObservation.ObservationType);
    atomic_store(result, (unint64_t *)&qword_1009ADA50);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconObservation.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10042E5E8 + 4 * byte_100800D50[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10042E61C + 4 * byte_100800D4B[v4]))();
}

uint64_t sub_10042E61C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10042E624(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10042E62CLL);
  }
  return result;
}

uint64_t sub_10042E638(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10042E640LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10042E644(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10042E64C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconObservation.CodingKeys()
{
  return &type metadata for BeaconObservation.CodingKeys;
}

unint64_t sub_10042E66C()
{
  unint64_t result = qword_1009ADA58;
  if (!qword_1009ADA58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008010FC, &type metadata for BeaconObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADA58);
  }

  return result;
}

unint64_t sub_10042E6B4()
{
  unint64_t result = qword_1009ADA60;
  if (!qword_1009ADA60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080106C, &type metadata for BeaconObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADA60);
  }

  return result;
}

unint64_t sub_10042E6FC()
{
  unint64_t result = qword_1009ADA68;
  if (!qword_1009ADA68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801094, &type metadata for BeaconObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADA68);
  }

  return result;
}

uint64_t sub_10042E740(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 1702125924 && a2 == 0xE400000000000000LL)
  {
    unint64_t v6 = 0xE400000000000000LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

void *sub_10042E870(_WORD *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1 = *(_WORD *)a2;
    uint64_t v7 = *(int *)(a3 + 24);
    Swift::String v8 = (char *)a1 + v7;
    Swift::String v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for MACAddress(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
    {
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AE480);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    }

    *((_BYTE *)v4 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  }

  return v4;
}

uint64_t sub_10042E974(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for MACAddress(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  return result;
}

_WORD *sub_10042E9E0(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  Swift::String v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for MACAddress(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AE480);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

_BYTE *sub_10042EAB8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  Swift::String v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for MACAddress(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009AE480);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
LABEL_7:
  a1[*(int *)(a3 + 28)] = a2[*(int *)(a3 + 28)];
  return a1;
}

_WORD *sub_10042EBE4(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  Swift::String v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for MACAddress(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AE480);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

_WORD *sub_10042ECBC(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  Swift::String v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for MACAddress(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009AE480);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_10042EDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10042EDEC);
}

uint64_t sub_10042EDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 253)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 1);
    if (v4 >= 3) {
      return v4 - 2;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AE480);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_10042EE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10042EE70);
}

uint64_t sub_10042EE70(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 253)
  {
    *(_BYTE *)(result + 1) = a2 + 2;
  }

  else
  {
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009AE480);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for MultipartAccessoryPairingInfo(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009ADAC8, (uint64_t)&nominal type descriptor for MultipartAccessoryPairingInfo);
}

void sub_10042EEF8(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1] = &unk_1008013E0;
  sub_10009361C( 319LL,  (unint64_t *)&qword_1009A5AD0,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(v2 - 8) + 64LL;
    v4[3] = &unk_1008013E0;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

id sub_10042EF88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  unint64_t v85 = a3;
  uint64_t v82 = a2;
  uint64_t v73 = a1;
  uint64_t v5 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v5);
  unint64_t v83 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v78 = *(void *)(v7 - 8);
  uint64_t v79 = v7;
  __chkstk_darwin(v7);
  unint64_t v80 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v76);
  unint64_t v77 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v10);
  unint64_t v75 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v12);
  unint64_t v74 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for AirPodsUnpairEndPoint(0LL);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  unint64_t v81 = (uint64_t *)((char *)&v71 - v22);
  uint64_t v23 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v23);
  unint64_t v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (result)
  {
    uint64_t v27 = result;
    id v28 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v28)
    {
      uint64_t v72 = a4;

      uint64_t v30 = static os_log_type_t.default.getter(v29);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      uint64_t v31 = qword_100A2B0A8;
      uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v33 = swift_allocObject(v32, 72LL, 7LL);
      *(_OWORD *)(v33 + 16) = xmmword_1007E67D0;
      sub_10001581C(v73, (uint64_t)v25, &qword_10099D8A0);
      uint64_t v34 = String.init<A>(describing:)(v25, v23);
      uint64_t v36 = v35;
      *(void *)(v33 + 56) = &type metadata for String;
      *(void *)(v33 + 64) = sub_1000226F4();
      *(void *)(v33 + 32) = v34;
      *(void *)(v33 + 40) = v36;
      os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Removing pairing lock for UUID - %@", 35LL, 2LL, v33);
      swift_bridgeObjectRelease();
      uint64_t v37 = enum case for FMNAccountType.w2Accessory(_:);
      unint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
      v38(v17, enum case for FMNAccountType.w2Accessory(_:), v14);
      uint64_t v39 = type metadata accessor for AccountURLComponents();
      swift_allocObject(v39, 56LL, 7LL);
      uint64_t v40 = sub_1006C217C((uint64_t)v17);
      uint64_t v41 = (uint64_t)v81;
      *unint64_t v81 = v40;
      v38((char *)(v41 + *(int *)(v18 + 20)), v37, v14);
      uint64_t v42 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
      swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
      uint64_t v43 = type metadata accessor for FMNMockingPreferences(0LL);
      unint64_t v44 = v74;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))(v74, 1LL, 1LL, v43);
      uint64_t v45 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v44);
      uint64_t v46 = type metadata accessor for ServerInteractionController(0LL);
      uint64_t v47 = swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      sub_10001DC4C(v41, (uint64_t)v21, type metadata accessor for AirPodsUnpairEndPoint);
      uint64_t v48 = sub_100431A7C( (uint64_t)v21,  v45,  v47,  type metadata accessor for AirPodsUnpairEndPoint,  &qword_1009ADB28,  (uint64_t)&unk_1007F4DE8);
      uint64_t v49 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      unint64_t v50 = v75;
      static DispatchQoS.unspecified.getter(v49);
      unint64_t v86 = _swiftEmptyArrayStorage;
      uint64_t v51 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      uint64_t v52 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
      uint64_t v53 = sub_100090114((unint64_t *)&qword_10099BAB0, (uint64_t *)&unk_1009A0CD0);
      unint64_t v54 = v77;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v86, v52, v53, v76, v51);
      unint64_t v55 = v80;
      (*(void (**)(char *, void, uint64_t))(v78 + 104))( v80,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v79);
      unint64_t v56 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001DLL,  0x8000000100862610LL,  v50,  v54,  v55,  0LL);
      uint64_t v57 = type metadata accessor for TaskPriority(0LL);
      uint64_t v58 = (uint64_t)v83;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL))(v83, 1LL, 1LL, v57);
      uint64_t v59 = swift_allocObject(&unk_100958EC8, 152LL, 7LL);
      *(void *)(v59 + 16) = 0LL;
      *(void *)(v59 + 24) = 0LL;
      uint64_t v60 = v82;
      __int128 v61 = *(_OWORD *)(v82 + 48);
      *(_OWORD *)(v59 + 64) = *(_OWORD *)(v82 + 32);
      *(_OWORD *)(v59 + 80) = v61;
      *(_OWORD *)(v59 + 96) = *(_OWORD *)(v60 + 64);
      __int128 v62 = *(_OWORD *)(v60 + 16);
      *(_OWORD *)(v59 + 32) = *(_OWORD *)v60;
      *(_OWORD *)(v59 + 48) = v62;
      unint64_t v63 = v85;
      *(void *)(v59 + 112) = v84;
      *(void *)(v59 + 120) = v56;
      uint64_t v64 = v72;
      *(void *)(v59 + 128) = v63;
      *(void *)(v59 + 136) = v64;
      *(void *)(v59 + 144) = v48;
      sub_1004318A8((void *)v60);
      swift_retain();
      id v65 = v56;
      swift_retain();
      swift_retain();
      sub_1003EDB00(v58, (uint64_t)&unk_1009ADB10, v59);

      swift_release();
      swift_release();
      return (id)sub_100018C68(v41, type metadata accessor for AirPodsUnpairEndPoint);
    }

    else
    {
      if (qword_10099B7A0 != -1) {
        swift_once(&qword_10099B7A0, sub_1006518D8);
      }
      uint64_t v66 = type metadata accessor for Logger(0LL);
      uint64_t v67 = sub_10000A720(v66, (uint64_t)qword_100A2B0B0);
      unint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
      os_log_type_t v69 = static os_log_type_t.default.getter(v68);
      if (os_log_type_enabled(v68, v69))
      {
        unint64_t v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v70 = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "iCloud not signed in: Skip pairing lock removal.", v70, 2u);
        swift_slowDealloc(v70, -1LL, -1LL);
      }

      return (id)v85(0LL);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

Swift::Int sub_10042F678()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1 - 1);
  return Hasher._finalize()();
}

void sub_10042F6BC()
{
}

Swift::Int sub_10042F6E8(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 - 1);
  return Hasher._finalize()();
}

void *sub_10042F728@<X0>(void *result@<X0>, _BYTE *a2@<X8>)
{
  else {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_10042F744(void *a1@<X8>)
{
  *a1 = *v1 - 1LL;
}

uint64_t sub_10042F754()
{
  uint64_t v1 = 0x63697373616C632ELL;
  if (*v0 != 1) {
    uint64_t v1 = 0x72656E45776F6C2ELL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E776F6E6B6E752ELL;
  }
}

uint64_t sub_10042F7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100435404();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10042F810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100435404();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10042F85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1004353C0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10042F8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1004353C0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10042F904(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1004353C0();
  return RawRepresentable<>.codingKey.getter(a1, a2, v4);
}

uint64_t sub_10042F944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1004353C0();
  return RawRepresentable<>.init<A>(codingKey:)(a1, a4, a2, a5, v10, a3);
}

uint64_t sub_10042F9AC()
{
  uint64_t v1 = 0x6465726961702ELL;
  if (*v0 != 1) {
    uint64_t v1 = 0x64656B636F6C2ELL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E776F6E6B6E752ELL;
  }
}

uint64_t sub_10042FA08()
{
  uint64_t v1 = 0x6E776F6E6B6E752ELL;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v2);
  unint64_t v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v26 = 0LL;
  unint64_t v27 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(56LL);
  v5._countAndFlagsBits = 0x203A644974726170LL;
  v5._object = (void *)0xE800000000000000LL;
  String.append(_:)(v5);
  v25[15] = *v0;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0xED0000203A737574LL;
  v7._countAndFlagsBits = 0x617453636E797320LL;
  String.append(_:)(v7);
  uint64_t v8 = 0x6465726961702ELL;
  if (v0[1] != 1) {
    uint64_t v8 = 0x64656B636F6C2ELL;
  }
  if (v0[1]) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0x6E776F6E6B6E752ELL;
  }
  if (v0[1]) {
    unint64_t v10 = 0xE700000000000000LL;
  }
  else {
    unint64_t v10 = 0xE800000000000000LL;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x7264644163616D20LL;
  v12._object = (void *)0xED0000203A737365LL;
  String.append(_:)(v12);
  uint64_t v13 = type metadata accessor for MultipartAccessoryPairingInfo(0LL);
  sub_10001581C((uint64_t)&v0[*(int *)(v13 + 24)], (uint64_t)v4, (uint64_t *)&unk_1009AE480);
  uint64_t v14 = type metadata accessor for MACAddress(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v4, 1LL, v14);
  if ((_DWORD)v16 == 1)
  {
    sub_100433B9C((uint64_t)v4);
    uint64_t v17 = (void *)0xE400000000000000LL;
    uint64_t v18 = 1701736302LL;
  }

  else
  {
    uint64_t v18 = MACAddress.description.getter(v16);
    uint64_t v17 = v19;
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v4, v14);
  }

  v20._countAndFlagsBits = v18;
  v20._object = v17;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x676E697269617020LL;
  v21._object = (void *)0xEE00203A65707954LL;
  String.append(_:)(v21);
  if (v0[*(int *)(v13 + 28)])
  {
    if (v0[*(int *)(v13 + 28)] == 1)
    {
      uint64_t v22 = (void *)0xE800000000000000LL;
      uint64_t v1 = 0x63697373616C632ELL;
    }

    else
    {
      uint64_t v22 = (void *)0xEA00000000007967LL;
      uint64_t v1 = 0x72656E45776F6C2ELL;
    }
  }

  else
  {
    uint64_t v22 = (void *)0xE800000000000000LL;
  }

  v23._countAndFlagsBits = v1;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_10042FCC8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009ADB48);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100433B14();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MultipartAccessoryPairingInfo.CodingKeys,  &type metadata for MultipartAccessoryPairingInfo.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  v25[1] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12);
  if (!v2)
  {
    v25[0] = v3[1];
    char v24 = 1;
    unint64_t v13 = sub_100433BDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)( v25,  &v24,  v5,  &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus,  v13);
    uint64_t v14 = type metadata accessor for MultipartAccessoryPairingInfo(0LL);
    uint64_t v15 = &v3[*(int *)(v14 + 24)];
    char v23 = 2;
    uint64_t v16 = type metadata accessor for MACAddress(0LL);
    uint64_t v17 = sub_100007864( &qword_1009A5890,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v23, v5, v16, v17);
    unsigned __int8 v22 = v3[*(int *)(v14 + 28)];
    char v21 = 3;
    unint64_t v18 = sub_1001D80E0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for PairingTransportType, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10042FEA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100004AEC(&qword_1009ADB30);
  uint64_t v7 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for MultipartAccessoryPairingInfo(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  unint64_t v27 = a1;
  sub_100012ED8(a1, v13);
  unint64_t v15 = sub_100433B14();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MultipartAccessoryPairingInfo.CodingKeys,  &type metadata for MultipartAccessoryPairingInfo.CodingKeys,  v15,  v13,  v14);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  }
  uint64_t v16 = v7;
  BYTE4(v29) = 0;
  uint64_t v17 = (uint64_t)v12;
  *uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v29 + 4, v26);
  BYTE2(v29) = 1;
  unint64_t v18 = sub_100433B58();
  KeyedDecodingContainer.decode<A>(_:forKey:)( (uint64_t *)((char *)&v29 + 3),  &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus,  (char *)&v29 + 2,  v26,  &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus,  v18);
  v12[1] = BYTE3(v29);
  uint64_t v19 = type metadata accessor for MACAddress(0LL);
  BYTE1(v29) = 2;
  uint64_t v20 = sub_100007864( &qword_10099F598,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, (char *)&v29 + 1, v26, v19, v20);
  sub_100254B24((uint64_t)v6, (uint64_t)&v12[*(int *)(v10 + 24)]);
  char v28 = 3;
  unint64_t v21 = sub_1001D809C();
  uint64_t v22 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for PairingTransportType,  &v28,  v26,  &type metadata for PairingTransportType,  v21);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v22);
  *(_BYTE *)(v17 + *(int *)(v10 + 28)) = v29;
  sub_10001DC4C(v17, v25, type metadata accessor for MultipartAccessoryPairingInfo);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  return sub_100018C68(v17, type metadata accessor for MultipartAccessoryPairingInfo);
}

uint64_t sub_100430184()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004301B0 + 4 * byte_1008012D0[*v0]))( 0x644974726170LL,  0xE600000000000000LL);
}

uint64_t sub_1004301B0()
{
  return 0x74617453636E7973LL;
}

uint64_t sub_1004301D0()
{
  return 0x657264644163616DLL;
}

uint64_t sub_1004301EC()
{
  return 0x54676E6972696170LL;
}

uint64_t sub_10043020C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1004351E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100430230(uint64_t a1)
{
  unint64_t v2 = sub_100433B14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100430258(uint64_t a1)
{
  unint64_t v2 = sub_100433B14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100430280@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10042FEA4(a1, a2);
}

uint64_t sub_100430294(void *a1)
{
  return sub_10042FCC8(a1);
}

uint64_t sub_1004302AC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009ADD50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100435448();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys,  &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys,  v11,  v9,  v10);
  __int128 v26 = *v3;
  char v25 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
  if (!v2)
  {
    __int128 v26 = v3[1];
    char v25 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
    __int128 v26 = v3[2];
    char v25 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
    uint64_t v13 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0LL);
    uint64_t v14 = (char *)v3 + v13[7];
    LOBYTE(v26) = 3;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, &v26, v5, v15, v16);
    uint64_t v17 = (uint64_t *)((char *)v3 + v13[8]);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v26, v5);
    uint64_t v20 = (uint64_t *)((char *)v3 + v13[9]);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    LOBYTE(v26) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v26, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004304F8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009ADD10);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004350E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AirPodsUnpairData.CodingKeys,  &type metadata for AirPodsUnpairData.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v32 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v32, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v31 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v31, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v30 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v30, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    char v29 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v29, v5);
    char v28 = *((_BYTE *)v3 + 64);
    char v27 = 4;
    unint64_t v20 = sub_100435128();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for AirPodsUnpairContext, v20);
    uint64_t v26 = v3[9];
    char v25 = 5;
    uint64_t v21 = sub_100004AEC(&qword_1009ADD28);
    unint64_t v22 = sub_10043516C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, v21, v22);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004306E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100435D64();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100430734()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10043075C + 4 * byte_1008012D4[*v0]))( 1684628325LL,  0xE400000000000000LL);
}

uint64_t sub_10043075C()
{
  return 0x644970696863LL;
}

uint64_t sub_100430770()
{
  return 0x754E6C6169726573LL;
}

uint64_t sub_100430790()
{
  return 0x6449616E6D66LL;
}

uint64_t sub_1004307A4()
{
  return 0x49746375646F7270LL;
}

uint64_t sub_1004307C0()
{
  return 0x6449726F646E6576LL;
}

uint64_t sub_1004307D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100435830(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004307FC(uint64_t a1)
{
  unint64_t v2 = sub_100435448();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100430824(uint64_t a1)
{
  unint64_t v2 = sub_100435448();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10043084C(void *a1)
{
  return sub_1004302AC(a1);
}

uint64_t sub_100430860()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100430894 + 4 * byte_1008012DA[*v0]))( 0x69634572656E776FLL,  0xE900000000000064LL);
}

uint64_t sub_100430894()
{
  return 0x69684372656E776FLL;
}

unint64_t sub_1004308B4()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1004308D0()
{
  return 1684628597LL;
}

uint64_t sub_1004308E0()
{
  return 0x6F4365766F6D6572LL;
}

uint64_t sub_100430904()
{
  return 0x73656369766564LL;
}

uint64_t sub_10043091C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100435AB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100430940(uint64_t a1)
{
  unint64_t v2 = sub_1004350E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100430968(uint64_t a1)
{
  unint64_t v2 = sub_1004350E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100430990(void *a1)
{
  return sub_1004304F8(a1);
}

uint64_t sub_1004309A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a8;
  v8[18] = v14;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a4;
  v8[14] = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v8[19] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[20] = v10;
  v8[21] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  v8[22] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[23] = v12;
  v8[24] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100430A38, 0LL, 0LL);
}

uint64_t sub_100430A38()
{
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = *(void *)(v0[14] + 16LL);
  swift_retain();
  sub_1004318A8(v1);
  uint64_t v5 = (char *)&dword_1009AD040 + dword_1009AD040;
  uint64_t v3 = (void *)swift_task_alloc(unk_1009AD044);
  v0[25] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100430AB8;
  return ((uint64_t (*)(void, uint64_t))v5)(v0[13], v2);
}

uint64_t sub_100430AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)*v3;
  v4[8] = v3;
  void v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  uint64_t v5 = v4[25];
  v4[26] = a1;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100430B1C, 0LL, 0LL);
}

uint64_t sub_100430B1C(uint64_t a1)
{
  uint64_t v2 = v1[26];
  if (v2)
  {
    uint64_t v3 = v1[10];
    unint64_t v4 = v1[11];
    uint64_t v6 = v1[17];
    uint64_t v5 = (void *)v1[18];
    uint64_t v7 = (void *)v1[15];
    uint64_t v8 = v1[16];
    swift_bridgeObjectRetain(v1[26]);
    sub_10001736C(v3, v4);
    sub_100432FBC(v2, v3, v4, 0LL, v5);
    sub_100117A58(v2, v3, v4);
    uint64_t v9 = (void *)swift_allocObject(&unk_100958F40, 40LL, 7LL);
    v9[2] = v7;
    v9[3] = v8;
    v9[4] = v6;
    id v10 = v7;
    swift_retain();
    Future.addFailure(block:)(sub_1004339DC, v9);
    swift_release();
    swift_release();
    uint64_t v11 = (void *)swift_allocObject(&unk_100958F68, 40LL, 7LL);
    v11[2] = v10;
    v11[3] = v8;
    v11[4] = v6;
    id v12 = v10;
    swift_retain();
    Future.addSuccess(block:)(sub_100433A18, v11);
    swift_release();
    swift_release();
    swift_release();
    sub_100117A58(v2, v3, v4);
  }

  else
  {
    uint64_t v13 = static os_log_type_t.error.getter(a1);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v14 = v1[24];
    uint64_t v15 = v1[21];
    uint64_t v28 = v1[23];
    uint64_t v29 = v1[22];
    uint64_t v16 = v1[19];
    uint64_t v27 = v1[20];
    uint64_t v17 = v1[16];
    uint64_t v18 = v1[17];
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_100A2B0A8,  "Could not create unpair command",  31LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v19 = swift_allocObject(&unk_100958EF0, 32LL, 7LL);
    *(void *)(v19 + 16) = v17;
    *(void *)(v19 + 24) = v18;
    v1[6] = sub_1004339A4;
    v1[7] = v19;
    v1[2] = _NSConcreteStackBlock;
    v1[3] = 1107296256LL;
    v1[4] = sub_1001C31E8;
    v1[5] = &unk_100958F08;
    unint64_t v20 = _Block_copy(v1 + 2);
    uint64_t v21 = swift_retain();
    static DispatchQoS.unspecified.getter(v21);
    v1[12] = _swiftEmptyArrayStorage;
    uint64_t v22 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v24 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
    dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 12, v23, v24, v16, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v15, v20);
    _Block_release(v20);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v14, v29);
    swift_release();
  }

  uint64_t v25 = v1[21];
  swift_task_dealloc(v1[24]);
  swift_task_dealloc(v25);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_100430E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v32 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  id v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = static os_log_type_t.error.getter(v10);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  uint64_t v14 = qword_100A2B0A8;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_1007E67D0;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v18 = String.init<A>(describing:)(aBlock, v17);
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_1000226F4();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  v14,  "Remove pairing lock command failed. Error - %@",  46LL,  2LL,  v16);
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)swift_allocObject(&unk_100959030, 40LL, 7LL);
  v21[2] = v28;
  v21[3] = a4;
  v21[4] = a1;
  aBlock[4] = sub_1000D4F98;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100959048;
  uint64_t v22 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  uint64_t v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  uint64_t v33 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v26 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  return swift_release();
}

uint64_t sub_100431108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  uint64_t v54 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v57 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v56 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v55 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v53 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000A720(v12, (uint64_t)qword_100A2B0B0);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(12LL, -1LL);
    v49[1] = a1;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = (void **)swift_slowAlloc(32LL, -1LL);
    aBlock = v18;
    *(_DWORD *)uint64_t v17 = 136446210;
    uint64_t v50 = v5;
    uint64_t v19 = sub_100007864( &qword_1009A6DC0,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v8, v19);
    uint64_t v59 = (void *)sub_1003F11D4(v20, v21, (uint64_t *)&aBlock);
    uint64_t v5 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &aBlock, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Remove pairing lock response %{public}s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  uint64_t v23 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v22);
  uint64_t v24 = static os_log_type_t.default.getter(v23);
  if (v23 == 200)
  {
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_100A2B0A8,  "Remove pairing lock was successful.",  35LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v25 = swift_allocObject(&unk_100958FE0, 32LL, 7LL);
    uint64_t v26 = v52;
    *(void *)(v25 + 16) = v51;
    *(void *)(v25 + 24) = v26;
    uint64_t v64 = sub_10020CE78;
    uint64_t v65 = v25;
    aBlock = _NSConcreteStackBlock;
    uint64_t v61 = 1107296256LL;
    __int128 v62 = sub_1001C31E8;
    unint64_t v63 = &unk_100958FF8;
    uint64_t v27 = _Block_copy(&aBlock);
    uint64_t v28 = swift_retain();
    uint64_t v29 = v53;
    static DispatchQoS.unspecified.getter(v28);
    uint64_t v59 = _swiftEmptyArrayStorage;
    uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v32 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
    uint64_t v33 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v31, v32, v5, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v29, v33, v27);
    uint64_t v34 = v27;
  }

  else
  {
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v35 = qword_100A2B0A8;
    uint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v37 = swift_allocObject(v36, 72LL, 7LL);
    *(_OWORD *)(v37 + 16) = xmmword_1007E67D0;
    aBlock = (void **)FMNServerInteractionController.FMNResponseFields.statusCode.getter(v37);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v40 = v39;
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 64) = sub_1000226F4();
    *(void *)(v37 + 32) = v38;
    *(void *)(v37 + 40) = v40;
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  v35,  "Remove pairing lock failed. Status code - %@",  44LL,  2LL,  v37);
    swift_bridgeObjectRelease();
    uint64_t v41 = swift_allocObject(&unk_100958F90, 32LL, 7LL);
    uint64_t v42 = v52;
    *(void *)(v41 + 16) = v51;
    *(void *)(v41 + 24) = v42;
    uint64_t v64 = sub_100433A48;
    uint64_t v65 = v41;
    aBlock = _NSConcreteStackBlock;
    uint64_t v61 = 1107296256LL;
    __int128 v62 = sub_1001C31E8;
    unint64_t v63 = &unk_100958FA8;
    uint64_t v43 = _Block_copy(&aBlock);
    uint64_t v44 = swift_retain();
    uint64_t v29 = v53;
    static DispatchQoS.unspecified.getter(v44);
    uint64_t v59 = _swiftEmptyArrayStorage;
    uint64_t v45 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v46 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v47 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
    uint64_t v33 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v46, v47, v5, v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v29, v33, v43);
    uint64_t v34 = v43;
  }

  _Block_release(v34);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v5);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v29, v58);
  return swift_release();
}

void sub_100431720(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v5;
  uint64_t v10 = a3;
  unint64_t v7 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  _BridgedStoredNSError.init(_:userInfo:)(&v11, &v10, v7, v6, v8);
  uint64_t v9 = v11;
  a1(v11);
}

uint64_t sub_1004317C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for NotifyMeEndpoint,  &qword_1009ADC40,  (uint64_t)&unk_1007EE3F4);
}

uint64_t sub_1004317E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for AccessoryInfoEndPoint,  &qword_1009ADB68,  (uint64_t)&unk_100817108);
}

uint64_t sub_100431804(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[14];
  uint64_t v7 = v1[15];
  uint64_t v8 = v1[16];
  uint64_t v9 = v1[17];
  uint64_t v10 = (void *)swift_task_alloc(dword_1009ADB0C);
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100015D58;
  return sub_1004309A4(a1, v4, v5, (uint64_t)(v1 + 4), v6, v7, v8, v9);
}

void *sub_1004318A8(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[9];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_100431910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C(a1, a2, a3, type metadata accessor for FetchEndpoint, &qword_1009ADB80, (uint64_t)&unk_10080C258);
}

uint64_t sub_10043192C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for OwnedDeviceFetchEndpoint,  &qword_1009ADB78,  (uint64_t)&unk_1007F5704);
}

uint64_t sub_100431948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for SecureLocationsConfigEndpoint,  &qword_1009ADB98,  (uint64_t)&unk_1007F9D04);
}

uint64_t sub_100431964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for SecureLocationsFetchEndpoint,  &qword_1009ADBB0,  (uint64_t)&unk_1007F5654);
}

uint64_t sub_100431980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for SecureLocationsLabelledLocationsEndpoint,  &qword_1009ADBE0,  (uint64_t)&unk_1008136E4);
}

uint64_t sub_10043199C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for SecureLocationsSubmitEndpoint,  &qword_1009ADBF8,  (uint64_t)&unk_1007ED5F8);
}

uint64_t sub_1004319B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for SecureLocationsUnsubscribeEndpoint,  &qword_1009ADC38,  (uint64_t)&unk_100806D2C);
}

uint64_t sub_1004319D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for SecureLocationsPushAckEndpoint,  &qword_1009ADBC8,  (uint64_t)&unk_100808DC4);
}

uint64_t sub_1004319F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for OwnedDeviceSubmitEndpoint,  &qword_1009ADC18,  (uint64_t)&unk_1007ED5C8);
}

uint64_t sub_100431A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C(a1, a2, a3, type metadata accessor for SubmitEndpoint, &qword_1009ADC10, (uint64_t)&unk_1007ECDE0);
}

uint64_t sub_100431A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for RoleCategoriesEndpoint,  &qword_1009ADC00,  (uint64_t)&unk_1008128E8);
}

uint64_t sub_100431A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for ConfigurationEndpoint,  &qword_1009ADC08,  (uint64_t)&unk_100813238);
}

uint64_t sub_100431A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100431A7C( a1,  a2,  a3,  type metadata accessor for SubmitUTInfoEndpoint,  &qword_1009ADB70,  (uint64_t)&unk_1007FC5B8);
}

uint64_t sub_100431A7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v41 = a2;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v41 - v19;
  v44[3] = a4(0LL);
  v44[4] = sub_100007864(a5, a4, a6);
  unint64_t v21 = sub_10000A7C8(v44);
  sub_10002218C(a1, (uint64_t)v21, a4);
  uint64_t v22 = qword_1009A4BB8;
  uint64_t v23 = type metadata accessor for FMNAuthenticationProvider(0LL);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  uint64_t v24 = swift_retain();
  *(void *)(a3 + v22) = FMNAuthenticationProvider.init()(v24);
  uint64_t v25 = qword_1009A4BC8;
  if (qword_10099B1A0 != -1) {
    swift_once(&qword_10099B1A0, sub_1001B42D8);
  }
  *(void *)(a3 + v25) = qword_100A2A2F8;
  uint64_t v26 = swift_unownedRetain();
  UUID.init()(v26);
  uint64_t v27 = qword_1009A4BD0;
  id v28 = [objc_allocWithZone(NSLock) init];
  *(void *)(a3 + v27) = v28;
  *(_BYTE *)(a3 + qword_1009A4BD8) = 0;
  static SystemInfo.lockState.getter(v28);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v29 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v43, v14, v29);
  dispatch thunk of RawRepresentable.rawValue.getter(&v42, v14, v29);
  uint64_t v31 = v42;
  uint64_t v30 = v43;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v15 + 8);
  v32(v18, v14);
  v32(v20, v14);
  if (v30 == v31)
  {
    uint64_t v33 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v34 = (void *)static OS_os_log.default.getter(v33);
    uint64_t v35 = static os_log_type_t.default.getter(v34);
    os_log(_:dso:log:type:_:)( "ServerInteractionController preventing auto-renew credentials before first unlock.",  82LL,  2LL,  &_mh_execute_header,  v34,  v35,  _swiftEmptyArrayStorage);

    uint64_t v36 = *(void *)(a3 + v22);
    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter(0LL);
    swift_release(v36);
  }

  sub_100013044((uint64_t)v44, a3 + qword_1009A4BC0);
  swift_release(a3);
  uint64_t v37 = type metadata accessor for FMNMockingPreferences(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v13, 1LL, 1LL, v37);
  uint64_t v38 = swift_retain();
  uint64_t v39 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)( v38,  &protocol witness table for FMNAuthenticationProvider,  v13,  v41);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
  return v39;
}

uint64_t sub_100431DCC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = &type metadata for AccessoryInfoRequest;
  unint64_t v14 = sub_100433C20();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  uint64_t v15 = *(void **)((char *)a5 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v15 lock];
  *((_BYTE *)a5 + qword_1009A4BD8) = 0;
  [v15 unlock];
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v13, 1LL, 1LL, v16);
  uint64_t v17 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v17 + 16, a5);
  uint64_t v18 = (void *)swift_allocObject(&unk_1009590F8, 40LL, 7LL);
  v18[2] = 0LL;
  v18[3] = 0LL;
  v18[4] = v17;
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009ADB60, (uint64_t)v18);
  swift_release();
  uint64_t v19 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = Future.init()();
  sub_1001B8AE8((uint64_t)v28, (uint64_t)v27);
  uint64_t v21 = (uint64_t)a5 + qword_1009A4BC0;
  uint64_t v22 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v22 + 16, a5);
  sub_100013044(v21, (uint64_t)v26);
  sub_100013044((uint64_t)v27, (uint64_t)v25);
  uint64_t v23 = (void *)swift_allocObject(&unk_100959120, 120LL, 7LL);
  v23[2] = v20;
  v23[3] = v22;
  sub_100012EC0(v26, (uint64_t)(v23 + 4));
  sub_100012EC0(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v21,  v27,  0x6170686372616573LL,  0xEB00000000797472LL,  a4,  sub_100435DC8,  v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10043205C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = &type metadata for SecureLocationsConfigRequest;
  unint64_t v14 = sub_100433CD8();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  uint64_t v15 = *(void **)((char *)a5 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v15 lock];
  *((_BYTE *)a5 + qword_1009A4BD8) = 0;
  [v15 unlock];
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v13, 1LL, 1LL, v16);
  uint64_t v17 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v17 + 16, a5);
  uint64_t v18 = (void *)swift_allocObject(&unk_100959148, 40LL, 7LL);
  v18[2] = 0LL;
  v18[3] = 0LL;
  v18[4] = v17;
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009ADB90, (uint64_t)v18);
  swift_release();
  uint64_t v19 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = Future.init()();
  sub_1001B8AE8((uint64_t)v28, (uint64_t)v27);
  uint64_t v21 = (uint64_t)a5 + qword_1009A4BC0;
  uint64_t v22 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v22 + 16, a5);
  sub_100013044(v21, (uint64_t)v26);
  sub_100013044((uint64_t)v27, (uint64_t)v25);
  uint64_t v23 = (void *)swift_allocObject(&unk_100959170, 120LL, 7LL);
  v23[2] = v20;
  v23[3] = v22;
  sub_100012EC0(v26, (uint64_t)(v23 + 4));
  sub_100012EC0(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v21,  v27,  0x6170686372616573LL,  0xEB00000000797472LL,  a4,  sub_100435DC8,  v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_1004322EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = &type metadata for SecureLocationsFetchRequest;
  unint64_t v14 = sub_100433D24();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  uint64_t v15 = *(void **)((char *)a5 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v15 lock];
  *((_BYTE *)a5 + qword_1009A4BD8) = 0;
  [v15 unlock];
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v13, 1LL, 1LL, v16);
  uint64_t v17 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v17 + 16, a5);
  uint64_t v18 = (void *)swift_allocObject(&unk_100959198, 40LL, 7LL);
  v18[2] = 0LL;
  v18[3] = 0LL;
  v18[4] = v17;
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009ADBA8, (uint64_t)v18);
  swift_release();
  uint64_t v19 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = Future.init()();
  sub_1001B8AE8((uint64_t)v28, (uint64_t)v27);
  uint64_t v21 = (uint64_t)a5 + qword_1009A4BC0;
  uint64_t v22 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v22 + 16, a5);
  sub_100013044(v21, (uint64_t)v26);
  sub_100013044((uint64_t)v27, (uint64_t)v25);
  uint64_t v23 = (void *)swift_allocObject(&unk_1009591C0, 120LL, 7LL);
  v23[2] = v20;
  v23[3] = v22;
  sub_100012EC0(v26, (uint64_t)(v23 + 4));
  sub_100012EC0(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v21,  v27,  0x6170686372616573LL,  0xEB00000000797472LL,  a4,  sub_100435DC8,  v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10043257C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = &type metadata for SecureLocationsLabelledLocationsRequest;
  unint64_t v14 = sub_100433DBC();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  uint64_t v15 = *(void **)((char *)a5 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v15 lock];
  *((_BYTE *)a5 + qword_1009A4BD8) = 0;
  [v15 unlock];
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v13, 1LL, 1LL, v16);
  uint64_t v17 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v17 + 16, a5);
  uint64_t v18 = (void *)swift_allocObject(&unk_100959238, 40LL, 7LL);
  v18[2] = 0LL;
  v18[3] = 0LL;
  v18[4] = v17;
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009ADBD8, (uint64_t)v18);
  swift_release();
  uint64_t v19 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = Future.init()();
  sub_1001B8AE8((uint64_t)v28, (uint64_t)v27);
  uint64_t v21 = (uint64_t)a5 + qword_1009A4BC0;
  uint64_t v22 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v22 + 16, a5);
  sub_100013044(v21, (uint64_t)v26);
  sub_100013044((uint64_t)v27, (uint64_t)v25);
  uint64_t v23 = (void *)swift_allocObject(&unk_100959260, 120LL, 7LL);
  v23[2] = v20;
  v23[3] = v22;
  sub_100012EC0(v26, (uint64_t)(v23 + 4));
  sub_100012EC0(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v21,  v27,  0x6170686372616573LL,  0xEB00000000797472LL,  a4,  sub_100435DC8,  v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10043280C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = &type metadata for SecureLocationsSubmitRequest;
  unint64_t v14 = sub_100433E08();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  uint64_t v15 = *(void **)((char *)a5 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v15 lock];
  *((_BYTE *)a5 + qword_1009A4BD8) = 0;
  [v15 unlock];
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v13, 1LL, 1LL, v16);
  uint64_t v17 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v17 + 16, a5);
  uint64_t v18 = (void *)swift_allocObject(&unk_100959288, 40LL, 7LL);
  v18[2] = 0LL;
  v18[3] = 0LL;
  v18[4] = v17;
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009ADBF0, (uint64_t)v18);
  swift_release();
  uint64_t v19 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = Future.init()();
  sub_1001B8AE8((uint64_t)v28, (uint64_t)v27);
  uint64_t v21 = (uint64_t)a5 + qword_1009A4BC0;
  uint64_t v22 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v22 + 16, a5);
  sub_100013044(v21, (uint64_t)v26);
  sub_100013044((uint64_t)v27, (uint64_t)v25);
  uint64_t v23 = (void *)swift_allocObject(&unk_1009592B0, 120LL, 7LL);
  v23[2] = v20;
  v23[3] = v22;
  sub_100012EC0(v26, (uint64_t)(v23 + 4));
  sub_100012EC0(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v21,  v27,  0x6170686372616573LL,  0xEB00000000797472LL,  a4,  sub_100435DC8,  v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_100432A9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = &type metadata for SecureLocationsUnsubscribeRequest;
  unint64_t v14 = sub_100433F9C();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  uint64_t v15 = *(void **)((char *)a5 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v15 lock];
  *((_BYTE *)a5 + qword_1009A4BD8) = 0;
  [v15 unlock];
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v13, 1LL, 1LL, v16);
  uint64_t v17 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v17 + 16, a5);
  uint64_t v18 = (void *)swift_allocObject(&unk_100959328, 40LL, 7LL);
  v18[2] = 0LL;
  v18[3] = 0LL;
  v18[4] = v17;
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009ADC30, (uint64_t)v18);
  swift_release();
  uint64_t v19 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = Future.init()();
  sub_1001B8AE8((uint64_t)v28, (uint64_t)v27);
  uint64_t v21 = (uint64_t)a5 + qword_1009A4BC0;
  uint64_t v22 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v22 + 16, a5);
  sub_100013044(v21, (uint64_t)v26);
  sub_100013044((uint64_t)v27, (uint64_t)v25);
  uint64_t v23 = (void *)swift_allocObject(&unk_100959350, 120LL, 7LL);
  v23[2] = v20;
  v23[3] = v22;
  sub_100012EC0(v26, (uint64_t)(v23 + 4));
  sub_100012EC0(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v21,  v27,  0x6170686372616573LL,  0xEB00000000797472LL,  a4,  sub_100435DC8,  v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_100432D2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = &type metadata for SecureLocationsPushAckRequest;
  unint64_t v14 = sub_100433D70();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  uint64_t v15 = *(void **)((char *)a5 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v15 lock];
  *((_BYTE *)a5 + qword_1009A4BD8) = 0;
  [v15 unlock];
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v13, 1LL, 1LL, v16);
  uint64_t v17 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v17 + 16, a5);
  uint64_t v18 = (void *)swift_allocObject(&unk_1009591E8, 40LL, 7LL);
  v18[2] = 0LL;
  v18[3] = 0LL;
  v18[4] = v17;
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009ADBC0, (uint64_t)v18);
  swift_release();
  uint64_t v19 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = Future.init()();
  sub_1001B8AE8((uint64_t)v28, (uint64_t)v27);
  uint64_t v21 = (uint64_t)a5 + qword_1009A4BC0;
  uint64_t v22 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v22 + 16, a5);
  sub_100013044(v21, (uint64_t)v26);
  sub_100013044((uint64_t)v27, (uint64_t)v25);
  uint64_t v23 = (void *)swift_allocObject(&unk_100959210, 120LL, 7LL);
  v23[2] = v20;
  v23[3] = v22;
  sub_100012EC0(v26, (uint64_t)(v23 + 4));
  sub_100012EC0(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v21,  v27,  0x6170686372616573LL,  0xEB00000000797472LL,  a4,  sub_100435DC8,  v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_100432FBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = &type metadata for AirPodsUnpairRequest;
  unint64_t v14 = sub_100433A90();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  uint64_t v15 = *(void **)((char *)a5 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v15 lock];
  *((_BYTE *)a5 + qword_1009A4BD8) = 0;
  [v15 unlock];
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v13, 1LL, 1LL, v16);
  uint64_t v17 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v17 + 16, a5);
  uint64_t v18 = (void *)swift_allocObject(&unk_1009590A8, 40LL, 7LL);
  v18[2] = 0LL;
  v18[3] = 0LL;
  v18[4] = v17;
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009A4D38, (uint64_t)v18);
  swift_release();
  uint64_t v19 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = Future.init()();
  sub_1001B8AE8((uint64_t)v28, (uint64_t)v27);
  uint64_t v21 = (uint64_t)a5 + qword_1009A4BC0;
  uint64_t v22 = swift_allocObject(&unk_100959080, 24LL, 7LL);
  swift_weakInit(v22 + 16, a5);
  sub_100013044(v21, (uint64_t)v26);
  sub_100013044((uint64_t)v27, (uint64_t)v25);
  uint64_t v23 = (void *)swift_allocObject(&unk_1009590D0, 120LL, 7LL);
  v23[2] = v20;
  v23[3] = v22;
  sub_100012EC0(v26, (uint64_t)(v23 + 4));
  sub_100012EC0(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v21,  v27,  0x6170686372616573LL,  0xEB00000000797472LL,  a4,  sub_100433B00,  v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10043324C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v88 = a2;
  uint64_t v89 = a3;
  uint64_t v79 = a1;
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  unint64_t v90 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v84 = *(void *)(v9 - 8);
  uint64_t v85 = v9;
  __chkstk_darwin(v9);
  unint64_t v86 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v82 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v82);
  unint64_t v83 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v12);
  unint64_t v81 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v14);
  unint64_t v80 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for AirPodsUnpairEndPoint(0LL);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  unint64_t v87 = (uint64_t *)((char *)&v77 - v24);
  uint64_t v25 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v77 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = swift_allocObject(&unk_1009592D8, 32LL, 7LL);
  *(void *)(v28 + 16) = a4;
  *(void *)(v28 + 24) = a5;
  uint64_t v91 = v28;
  uint64_t v29 = (void *)objc_opt_self(&OBJC_CLASS___ACAccountStore);
  swift_retain();
  uint64_t v78 = a5;
  id v30 = [v29 defaultStore];
  if (v30)
  {
    uint64_t v31 = v30;
    id v32 = objc_msgSend(v30, "aa_primaryAppleAccount");

    if (v32)
    {

      uint64_t v34 = static os_log_type_t.default.getter(v33);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      uint64_t v35 = qword_100A2B0A8;
      uint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v37 = swift_allocObject(v36, 72LL, 7LL);
      *(_OWORD *)(v37 + 16) = xmmword_1007E67D0;
      sub_10001581C(v79, (uint64_t)v27, &qword_10099D8A0);
      uint64_t v38 = String.init<A>(describing:)(v27, v25);
      uint64_t v40 = v39;
      *(void *)(v37 + 56) = &type metadata for String;
      *(void *)(v37 + 64) = sub_1000226F4();
      *(void *)(v37 + 32) = v38;
      *(void *)(v37 + 40) = v40;
      os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Removing pairing lock for UUID - %@", 35LL, 2LL, v37);
      swift_bridgeObjectRelease();
      uint64_t v41 = enum case for FMNAccountType.w2Accessory(_:);
      uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 104);
      v42(v19, enum case for FMNAccountType.w2Accessory(_:), v16);
      uint64_t v43 = type metadata accessor for AccountURLComponents();
      swift_allocObject(v43, 56LL, 7LL);
      uint64_t v44 = sub_1006C217C((uint64_t)v19);
      uint64_t v45 = (uint64_t)v87;
      *unint64_t v87 = v44;
      v42((char *)(v45 + *(int *)(v20 + 20)), v41, v16);
      uint64_t v46 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
      swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      uint64_t v47 = type metadata accessor for FMNMockingPreferences(0LL);
      uint64_t v48 = v80;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))(v80, 1LL, 1LL, v47);
      uint64_t v49 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v48);
      uint64_t v50 = type metadata accessor for ServerInteractionController(0LL);
      uint64_t v51 = swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      sub_10001DC4C(v45, (uint64_t)v23, type metadata accessor for AirPodsUnpairEndPoint);
      uint64_t v52 = sub_100431A7C( (uint64_t)v23,  v49,  v51,  type metadata accessor for AirPodsUnpairEndPoint,  &qword_1009ADB28,  (uint64_t)&unk_1007F4DE8);
      uint64_t v53 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v54 = v81;
      static DispatchQoS.unspecified.getter(v53);
      v92[0] = _swiftEmptyArrayStorage;
      uint64_t v55 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      uint64_t v56 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
      uint64_t v57 = sub_100090114((unint64_t *)&qword_10099BAB0, (uint64_t *)&unk_1009A0CD0);
      uint64_t v58 = v83;
      dispatch thunk of SetAlgebra.init<A>(_:)(v92, v56, v57, v82, v55);
      uint64_t v59 = v86;
      (*(void (**)(char *, void, uint64_t))(v84 + 104))( v86,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v85);
      uint64_t v60 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001DLL,  0x8000000100862610LL,  v54,  v58,  v59,  0LL);
      uint64_t v61 = type metadata accessor for TaskPriority(0LL);
      uint64_t v62 = (uint64_t)v90;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v90, 1LL, 1LL, v61);
      uint64_t v63 = swift_allocObject(&unk_100959300, 152LL, 7LL);
      *(void *)(v63 + 16) = 0LL;
      *(void *)(v63 + 24) = 0LL;
      uint64_t v64 = v88;
      uint64_t v65 = v89;
      __int128 v66 = *(_OWORD *)(v88 + 48);
      *(_OWORD *)(v63 + 64) = *(_OWORD *)(v88 + 32);
      *(_OWORD *)(v63 + 80) = v66;
      *(_OWORD *)(v63 + 96) = *(_OWORD *)(v64 + 64);
      __int128 v67 = *(_OWORD *)(v64 + 16);
      *(_OWORD *)(v63 + 32) = *(_OWORD *)v64;
      *(_OWORD *)(v63 + 48) = v67;
      *(void *)(v63 + 112) = v65;
      *(void *)(v63 + 120) = v60;
      uint64_t v68 = v91;
      *(void *)(v63 + 128) = sub_100433E80;
      *(void *)(v63 + 136) = v68;
      *(void *)(v63 + 144) = v52;
      sub_1004318A8((void *)v64);
      swift_retain();
      id v69 = v60;
      swift_retain();
      swift_retain();
      sub_1003EDB00(v62, (uint64_t)&unk_1009ADC20, v63);

      swift_release();
      swift_release();
      sub_100018C68(v45, type metadata accessor for AirPodsUnpairEndPoint);
    }

    else
    {
      if (qword_10099B7A0 != -1) {
        swift_once(&qword_10099B7A0, sub_1006518D8);
      }
      uint64_t v70 = type metadata accessor for Logger(0LL);
      uint64_t v71 = sub_10000A720(v70, (uint64_t)qword_100A2B0B0);
      uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
      os_log_type_t v73 = static os_log_type_t.default.getter(v72);
      if (os_log_type_enabled(v72, v73))
      {
        unint64_t v74 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v74 = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "iCloud not signed in: Skip pairing lock removal.", v74, 2u);
        swift_slowDealloc(v74, -1LL, -1LL);
      }

      swift_beginAccess(a4 + 16, v92, 1LL, 0LL);
      uint64_t v75 = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = 0LL;
      swift_errorRelease(v75);
      dispatch_group_leave(v78);
    }

    return swift_release();
  }

  else
  {

    uint64_t result = swift_release();
    __break(1u);
  }

  return result;
}

void sub_1004339A4()
{
}

uint64_t sub_1004339C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004339D0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1004339DC(uint64_t a1)
{
  return sub_100430E38(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1004339EC()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100433A18(uint64_t a1)
{
  return sub_100431108(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100433A24()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100433A48()
{
}

uint64_t sub_100433A64()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

unint64_t sub_100433A90()
{
  unint64_t result = qword_1009ADB18;
  if (!qword_1009ADB18)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800364, &type metadata for AirPodsUnpairRequest);
    atomic_store(result, (unint64_t *)&qword_1009ADB18);
  }

  return result;
}

uint64_t sub_100433AD4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100433B00(uint64_t a1)
{
}

unint64_t sub_100433B14()
{
  unint64_t result = qword_1009ADB38;
  if (!qword_1009ADB38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801874, &type metadata for MultipartAccessoryPairingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADB38);
  }

  return result;
}

unint64_t sub_100433B58()
{
  unint64_t result = qword_1009ADB40;
  if (!qword_1009ADB40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080184C, &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus);
    atomic_store(result, (unint64_t *)&qword_1009ADB40);
  }

  return result;
}

uint64_t sub_100433B9C(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100433BDC()
{
  unint64_t result = qword_1009ADB50;
  if (!qword_1009ADB50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008017FC, &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus);
    atomic_store(result, (unint64_t *)&qword_1009ADB50);
  }

  return result;
}

unint64_t sub_100433C20()
{
  unint64_t result = qword_1009ADB58;
  if (!qword_1009ADB58)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080ED58, &type metadata for AccessoryInfoRequest);
    atomic_store(result, (unint64_t *)&qword_1009ADB58);
  }

  return result;
}

uint64_t sub_100433C68(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A4D1C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_1001B8C44(a1, v4, v5, v6);
}

unint64_t sub_100433CD8()
{
  unint64_t result = qword_1009ADB88;
  if (!qword_1009ADB88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9D34, &type metadata for SecureLocationsConfigRequest);
    atomic_store(result, (unint64_t *)&qword_1009ADB88);
  }

  return result;
}

unint64_t sub_100433D24()
{
  unint64_t result = qword_1009ADBA0;
  if (!qword_1009ADBA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F56AC, &type metadata for SecureLocationsFetchRequest);
    atomic_store(result, (unint64_t *)&qword_1009ADBA0);
  }

  return result;
}

unint64_t sub_100433D70()
{
  unint64_t result = qword_1009ADBB8;
  if (!qword_1009ADBB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808E1C, &type metadata for SecureLocationsPushAckRequest);
    atomic_store(result, (unint64_t *)&qword_1009ADBB8);
  }

  return result;
}

unint64_t sub_100433DBC()
{
  unint64_t result = qword_1009ADBD0;
  if (!qword_1009ADBD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100813714, &type metadata for SecureLocationsLabelledLocationsRequest);
    atomic_store(result, (unint64_t *)&qword_1009ADBD0);
  }

  return result;
}

unint64_t sub_100433E08()
{
  unint64_t result = qword_1009ADBE8;
  if (!qword_1009ADBE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED650, &type metadata for SecureLocationsSubmitRequest);
    atomic_store(result, (unint64_t *)&qword_1009ADBE8);
  }

  return result;
}

uint64_t sub_100433E54()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100433E80(uint64_t a1)
{
  return sub_10028EF0C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100433E8C()
{
  swift_release(*(void *)(v0 + 136));
  swift_release(*(void *)(v0 + 144));
  return swift_deallocObject(v0, 152LL, 7LL);
}

uint64_t sub_100433EF8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[14];
  uint64_t v7 = v1[15];
  uint64_t v8 = v1[16];
  uint64_t v9 = v1[17];
  uint64_t v10 = (void *)swift_task_alloc(dword_1009ADB0C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1000159BC;
  return sub_1004309A4(a1, v4, v5, (uint64_t)(v1 + 4), v6, v7, v8, v9);
}

unint64_t sub_100433F9C()
{
  unint64_t result = qword_1009ADC28;
  if (!qword_1009ADC28)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806D84, &type metadata for SecureLocationsUnsubscribeRequest);
    atomic_store(result, (unint64_t *)&qword_1009ADC28);
  }

  return result;
}

uint64_t sub_100433FE8()
{
  return swift_deallocObject(v0, 120LL, 7LL);
}

uint64_t storeEnumTagSinglePayload for MultipartAccessoryPairingInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100434070 + 4 * byte_1008012E5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1004340A4 + 4 * byte_1008012E0[v4]))();
}

uint64_t sub_1004340A4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004340AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004340B4LL);
  }
  return result;
}

uint64_t sub_1004340C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004340C8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1004340CC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004340D4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MultipartAccessoryPairingInfo.CodingKeys()
{
  return &type metadata for MultipartAccessoryPairingInfo.CodingKeys;
}

uint64_t destroy for AirPodsUnpairData(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for AirPodsUnpairData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for AirPodsUnpairData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for AirPodsUnpairData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsUnpairData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsUnpairData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AirPodsUnpairData()
{
  return &type metadata for AirPodsUnpairData;
}

_OWORD *sub_1004343A8(_OWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_OWORD *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    unint64_t v7 = a2[1];
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }

    else
    {
      uint64_t v9 = *a2;
      sub_10001736C(*a2, a2[1]);
      *(void *)uint64_t v4 = v9;
      *((void *)v4 + 1) = v7;
    }

    uint64_t v10 = a2 + 2;
    unint64_t v11 = a2[3];
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v12 = *v10;
      sub_10001736C(*v10, a2[3]);
      *((void *)v4 + 2) = v12;
      *((void *)v4 + 3) = v11;
    }

    uint64_t v13 = a2[4];
    unint64_t v14 = a2[5];
    sub_10001736C(v13, v14);
    *((void *)v4 + 4) = v13;
    *((void *)v4 + 5) = v14;
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }

    uint64_t v21 = a3[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = (void *)((char *)v4 + v21);
    uint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = (void *)((char *)v4 + v22);
    uint64_t v27 = (uint64_t *)((char *)a2 + v22);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v28);
  }

  return v4;
}

uint64_t sub_100434544(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_100016F9C(*a1, v4);
  }
  unint64_t v5 = a1[3];
  if (v5 >> 60 != 15) {
    sub_100016F9C(a1[2], v5);
  }
  sub_100016F9C(a1[4], a1[5]);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100434608(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v7 = *a2;
    sub_10001736C(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }

  uint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v10 = *v8;
    sub_10001736C(*v8, a2[3]);
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v10;
    *(void *)(a1 + 24) = v9;
  }

  uint64_t v11 = a2[4];
  unint64_t v12 = a2[5];
  sub_10001736C(v11, v12);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  uint64_t v13 = a3[7];
  unint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (void *)(a1 + v19);
  uint64_t v22 = (uint64_t *)((char *)a2 + v19);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = (void *)(a1 + v20);
  uint64_t v25 = (uint64_t *)((char *)a2 + v20);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v26);
  return a1;
}

uint64_t *sub_100434778(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = a2[1];
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *a2;
      sub_10001736C(*a2, a2[1]);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v6 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  uint64_t v8 = *a2;
  sub_10001736C(*a2, a2[1]);
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_100016F9C(v9, v10);
LABEL_8:
  uint64_t v11 = a2 + 2;
  unint64_t v12 = a2[3];
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = *v11;
      sub_10001736C(*v11, a2[3]);
      a1[2] = v13;
      a1[3] = v12;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v12 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)(a1 + 2));
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }

  uint64_t v14 = *v11;
  sub_10001736C(*v11, a2[3]);
  uint64_t v15 = a1[2];
  unint64_t v16 = a1[3];
  a1[2] = v14;
  a1[3] = v12;
  sub_100016F9C(v15, v16);
LABEL_15:
  uint64_t v17 = a2[4];
  unint64_t v18 = a2[5];
  sub_10001736C(v17, v18);
  uint64_t v19 = a1[4];
  unint64_t v20 = a1[5];
  a1[4] = v17;
  a1[5] = v18;
  sub_100016F9C(v19, v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for UUID(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1LL, v24);
  int v28 = v26(v23, 1LL, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v22, v23, v24);
      goto LABEL_21;
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_20;
  }

  if (v28)
  {
LABEL_20:
    uint64_t v29 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_21;
  }

  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
LABEL_21:
  uint64_t v30 = a3[8];
  uint64_t v31 = (uint64_t *)((char *)a1 + v30);
  id v32 = (uint64_t *)((char *)a2 + v30);
  void *v31 = *v32;
  uint64_t v33 = v32[1];
  v31[1] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[9];
  uint64_t v35 = (uint64_t *)((char *)a1 + v34);
  uint64_t v36 = (uint64_t *)((char *)a2 + v34);
  *uint64_t v35 = *v36;
  uint64_t v37 = v36[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1004349EC(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
  {
    uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v13 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

uint64_t sub_100434AD4(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_100041D4C(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }

  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_100016F9C(v8, v6);
LABEL_6:
  uint64_t v9 = (_OWORD *)(a2 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *v9;
    goto LABEL_11;
  }

  unint64_t v11 = *(void *)(a2 + 24);
  if (v11 >> 60 == 15)
  {
    sub_100041D4C(a1 + 16);
    goto LABEL_9;
  }

  uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)v9;
  *(void *)(a1 + 24) = v11;
  sub_100016F9C(v12, v10);
LABEL_11:
  uint64_t v13 = *(void *)(a1 + 32);
  unint64_t v14 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_100016F9C(v13, v14);
  uint64_t v15 = a3[7];
  unint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1LL, v18);
  int v22 = v20(v17, 1LL, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_17;
    }

    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_16;
  }

  if (v22)
  {
LABEL_16:
    uint64_t v23 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_17;
  }

  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
LABEL_17:
  uint64_t v24 = a3[8];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[9];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *uint64_t v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100434CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100434CC8);
}

uint64_t sub_100434CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_100434D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100434D68);
}

uint64_t sub_100434D68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100004AEC(&qword_10099D8A0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 28),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 32) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for AirPodsUnpairData.DeviceUnpairData(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009ADCA0, (uint64_t)&nominal type descriptor for AirPodsUnpairData.DeviceUnpairData);
}

void sub_100434E00(uint64_t a1)
{
  v4[0] = &unk_1008014B8;
  v4[1] = &unk_1008014B8;
  v4[2] = &unk_1008014D0;
  sub_10009361C( 319LL,  (unint64_t *)&qword_1009AFA50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(v2 - 8) + 64LL;
    void v4[4] = &unk_1008014E8;
    v4[5] = &unk_1008014E8;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
  }

ValueMetadata *type metadata accessor for PairingTransportType()
{
  return &type metadata for PairingTransportType;
}

uint64_t _s12searchpartyd20PairingTransportTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100434EFC + 4 * byte_1008012EF[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100434F30 + 4 * byte_1008012EA[v4]))();
}

uint64_t sub_100434F30(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100434F38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100434F40LL);
  }
  return result;
}

uint64_t sub_100434F4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100434F54LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100434F58(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100434F60(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MultipartAccessoryPairingInfo.CloudKitSyncStatus()
{
  return &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus;
}

unint64_t sub_100434F80()
{
  unint64_t result = qword_1009ADCE8;
  if (!qword_1009ADCE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801604, &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus);
    atomic_store(result, (unint64_t *)&qword_1009ADCE8);
  }

  return result;
}

unint64_t sub_100434FC8()
{
  unint64_t result = qword_1009ADCF0;
  if (!qword_1009ADCF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008016CC, &type metadata for PairingTransportType);
    atomic_store(result, (unint64_t *)&qword_1009ADCF0);
  }

  return result;
}

unint64_t sub_100435010()
{
  unint64_t result = qword_1009ADCF8;
  if (!qword_1009ADCF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008017AC, &type metadata for MultipartAccessoryPairingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADCF8);
  }

  return result;
}

unint64_t sub_100435058()
{
  unint64_t result = qword_1009ADD00;
  if (!qword_1009ADD00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080171C, &type metadata for MultipartAccessoryPairingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADD00);
  }

  return result;
}

unint64_t sub_1004350A0()
{
  unint64_t result = qword_1009ADD08;
  if (!qword_1009ADD08)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801744, &type metadata for MultipartAccessoryPairingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADD08);
  }

  return result;
}

unint64_t sub_1004350E4()
{
  unint64_t result = qword_1009ADD18;
  if (!qword_1009ADD18)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801B90, &type metadata for AirPodsUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADD18);
  }

  return result;
}

unint64_t sub_100435128()
{
  unint64_t result = qword_1009ADD20;
  if (!qword_1009ADD20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801B68, &type metadata for AirPodsUnpairContext);
    atomic_store(result, (unint64_t *)&qword_1009ADD20);
  }

  return result;
}

unint64_t sub_10043516C()
{
  unint64_t result = qword_1009ADD30;
  if (!qword_1009ADD30)
  {
    uint64_t v1 = sub_100004B78(&qword_1009ADD28);
    sub_100007864( &qword_1009ADD38,  type metadata accessor for AirPodsUnpairData.DeviceUnpairData,  (uint64_t)&unk_1008016F4);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009ADD30);
  }

  return result;
}

uint64_t sub_1004351E8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x644974726170LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644974726170LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x74617453636E7973LL && a2 == 0xEA00000000007375LL)
  {
    unint64_t v7 = 0xEA00000000007375LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617453636E7973LL, 0xEA00000000007375LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373LL)
  {
    unint64_t v8 = 0xEA00000000007373LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x54676E6972696170LL && a2 == 0xEB00000000657079LL)
  {
    swift_bridgeObjectRelease(0xEB00000000657079LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x54676E6972696170LL, 0xEB00000000657079LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

unint64_t sub_1004353C0()
{
  unint64_t result = qword_1009ADD40;
  if (!qword_1009ADD40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080158C, &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus);
    atomic_store(result, (unint64_t *)&qword_1009ADD40);
  }

  return result;
}

unint64_t sub_100435404()
{
  unint64_t result = qword_1009ADD48;
  if (!qword_1009ADD48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801654, &type metadata for PairingTransportType);
    atomic_store(result, (unint64_t *)&qword_1009ADD48);
  }

  return result;
}

unint64_t sub_100435448()
{
  unint64_t result = qword_1009ADD58;
  if (!qword_1009ADD58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801B18, &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADD58);
  }

  return result;
}

ValueMetadata *type metadata accessor for AirPodsUnpairData.DeviceUnpairData.CodingKeys()
{
  return &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys;
}

uint64_t _s12searchpartyd17AirPodsUnpairDataV16DeviceUnpairDataV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1004354EC + 4 * byte_1008012F9[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100435520 + 4 * byte_1008012F4[v4]))();
}

uint64_t sub_100435520(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100435528(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100435530LL);
  }
  return result;
}

uint64_t sub_10043553C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100435544LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100435548(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100435550(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsUnpairData.CodingKeys()
{
  return &type metadata for AirPodsUnpairData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AirPodsUnpairContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1004355B8 + 4 * byte_100801303[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004355EC + 4 * byte_1008012FE[v4]))();
}

uint64_t sub_1004355EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004355F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004355FCLL);
  }
  return result;
}

uint64_t sub_100435608(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100435610LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100435614(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10043561C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsUnpairContext()
{
  return &type metadata for AirPodsUnpairContext;
}

unint64_t sub_10043563C()
{
  unint64_t result = qword_1009ADD60;
  if (!qword_1009ADD60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801980, &type metadata for AirPodsUnpairContext);
    atomic_store(result, (unint64_t *)&qword_1009ADD60);
  }

  return result;
}

unint64_t sub_100435684()
{
  unint64_t result = qword_1009ADD68;
  if (!qword_1009ADD68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801A38, &type metadata for AirPodsUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADD68);
  }

  return result;
}

unint64_t sub_1004356CC()
{
  unint64_t result = qword_1009ADD70;
  if (!qword_1009ADD70)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801AF0, &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADD70);
  }

  return result;
}

unint64_t sub_100435714()
{
  unint64_t result = qword_1009ADD78;
  if (!qword_1009ADD78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801A60, &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADD78);
  }

  return result;
}

unint64_t sub_10043575C()
{
  unint64_t result = qword_1009ADD80;
  if (!qword_1009ADD80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801A88, &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADD80);
  }

  return result;
}

unint64_t sub_1004357A4()
{
  unint64_t result = qword_1009ADD88;
  if (!qword_1009ADD88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008019A8, &type metadata for AirPodsUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADD88);
  }

  return result;
}

unint64_t sub_1004357EC()
{
  unint64_t result = qword_1009ADD90;
  if (!qword_1009ADD90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008019D0, &type metadata for AirPodsUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ADD90);
  }

  return result;
}

uint64_t sub_100435830(uint64_t a1, unint64_t a2)
{
  if (a1 == 1684628325 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x644970696863LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v7 = 0xE600000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x754E6C6169726573LL && a2 == 0xEC0000007265626DLL)
  {
    unint64_t v8 = 0xEC0000007265626DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573LL, 0xEC0000007265626DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x6449616E6D66LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v9 = 0xE600000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449616E6D66LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x49746375646F7270LL && a2 == 0xE900000000000064LL)
  {
    unint64_t v10 = 0xE900000000000064LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270LL, 0xE900000000000064LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0x6449726F646E6576LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_100435AB4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064LL)
  {
    unint64_t v5 = 0xE900000000000064LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69634572656E776FLL, 0xE900000000000064LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970LL)
  {
    unint64_t v7 = 0xEB00000000644970LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69684372656E776FLL, 0xEB00000000644970LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v8 = 0x80000001008626E0LL;
    if (a2 == 0x80000001008626E0LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001008626E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 1684628597 && a2 == 0xE400000000000000LL)
  {
    unint64_t v9 = 0xE400000000000000LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628597LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x6F4365766F6D6572LL && a2 == 0xED0000747865746ELL)
  {
    unint64_t v10 = 0xED0000747865746ELL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F4365766F6D6572LL, 0xED0000747865746ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0x73656369766564LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

unint64_t sub_100435D64()
{
  unint64_t result = qword_1009ADD98;
  if (!qword_1009ADD98)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801908, &type metadata for AirPodsUnpairContext);
    atomic_store(result, (unint64_t *)&qword_1009ADD98);
  }

  return result;
}

uint64_t sub_100435DCC()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for PersistentConnectionObserver()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd28PersistentConnectionObserver);
}

uint64_t storeEnumTagSinglePayload for PersistentConnectionObserver.PersistentConnectionPolicy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100435E6C + 4 * byte_100801BE5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100435EA0 + 4 * byte_100801BE0[v4]))();
}

uint64_t sub_100435EA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100435EA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100435EB0LL);
  }
  return result;
}

uint64_t sub_100435EBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100435EC4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100435EC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100435ED0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PersistentConnectionObserver.PersistentConnectionPolicy()
{
  return &type metadata for PersistentConnectionObserver.PersistentConnectionPolicy;
}

unint64_t sub_100435EF0()
{
  unint64_t result = qword_1009ADE80;
  if (!qword_1009ADE80)
  {
    unint64_t result = swift_getWitnessTable( &unk_100801C8C,  &type metadata for PersistentConnectionObserver.PersistentConnectionPolicy);
    atomic_store(result, (unint64_t *)&qword_1009ADE80);
  }

  return result;
}

uint64_t sub_100435F34()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AA40);
  sub_10000A720(v0, (uint64_t)qword_100A2AA40);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD00000000000001BLL,  0x80000001008629E0LL);
}

uint64_t sub_100435FB4()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_100435FC0()
{
  return *(void *)(v0 + 56);
}

uint64_t sub_100435FCC()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_100435FD8()
{
  return *(unsigned __int8 *)(v0 + 88);
}

NSString sub_100435FE0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100A2AA58 = (uint64_t)result;
  return result;
}

uint64_t sub_100436014()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider____lazy_storage___darwinHelper;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider____lazy_storage___darwinHelper))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider____lazy_storage___darwinHelper);
  }

  else
  {
    uint64_t v2 = sub_100436078(v0);
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }

  swift_retain();
  return v2;
}

uint64_t sub_100436078(uint64_t a1)
{
  if (qword_10099B488 != -1) {
    swift_once(&qword_10099B488, sub_100435FE0);
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(qword_100A2AA58);
  uint64_t v4 = v3;
  uint64_t v5 = swift_allocObject(&unk_100959F18, 24LL, 7LL);
  swift_weakInit(v5 + 16, a1);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10005BCB8((uint64_t)sub_10043B358, v5, v2, v4, isUniquelyReferenced_nonNull_native);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v7 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10005BCB8((uint64_t)sub_100436278, 0LL, 0xD00000000000002BLL, 0x8000000100862AD0LL, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCurrentLocaleDidChangeNotification);
  uint64_t v10 = v9;
  char v11 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10005BCB8((uint64_t)sub_100436278, 0LL, v8, v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  return DarwinNotificationHelper.init(notificationHandlers:)(_swiftEmptyDictionarySingleton);
}

uint64_t sub_100436224(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_100436C8C();
    return swift_release();
  }

  return result;
}

uint64_t sub_10043627C()
{
  if (qword_10099B480 != -1) {
    swift_once(&qword_10099B480, sub_100435F34);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AA40);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "Language change notification received. Exiting at next opportunity.",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return xpc_transaction_exit_clean();
}

uint64_t sub_100436348()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v54 = v1;
  uint64_t v55 = v2;
  __chkstk_darwin(v1);
  uint64_t v53 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  __chkstk_darwin(v4);
  uint64_t v48 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  __chkstk_darwin(v9);
  uint64_t v44 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  unsigned int v45 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v46 = *(uint64_t (**)(char *))(v12 + 104);
  uint64_t v15 = v46(v14);
  static DispatchQoS.unspecified.getter(v15);
  aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v43 = v16;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v17, v18, v6, v16);
  uint64_t v19 = v44;
  uint64_t v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000031LL,  0x8000000100862B00LL,  v44,  v8,  v14,  0LL);
  int v21 = v46;
  uint64_t v22 = v47;
  *(void *)(v47 + 24) = v20;
  uint64_t v23 = ((uint64_t (*)(char *, void, uint64_t))v21)(v14, v45, v11);
  static DispatchQoS.unspecified.getter(v23);
  aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v17, v18, v6, v43);
  uint64_t v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003ELL,  0x8000000100862B40LL,  v19,  v8,  v14,  0LL);
  *(void *)(v22 + 32) = v24;
  PressuredExitTransactionManager.init()(v24);
  *(_BYTE *)(v22 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_rolesUpdateInProgress) = 0;
  *(_BYTE *)(v22 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_configurationUpdateInProgress) = 0;
  *(_BYTE *)(v22 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_macConfigUpdateInProgress) = 0;
  *(void *)(v22 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider____lazy_storage___darwinHelper) = 0LL;
  sub_100436014();
  swift_release();
  id v25 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v26 = swift_allocObject(&unk_100959F18, 24LL, 7LL);
  swift_weakInit(v26 + 16, v22);
  uint64_t v61 = sub_10043B358;
  uint64_t v62 = v26;
  aBlock = _NSConcreteStackBlock;
  uint64_t v58 = 1107296256LL;
  uint64_t v59 = sub_100630694;
  uint64_t v60 = &unk_10095A3E0;
  uint64_t v27 = _Block_copy(&aBlock);
  swift_release();
  id v28 =  [v25 addObserverForName:NSCurrentLocaleDidChangeNotification object:0 queue:0 usingBlock:v27];
  _Block_release(v27);
  swift_unknownObjectRelease(v28);

  uint64_t v30 = v48;
  uint64_t v29 = v49;
  uint64_t v31 = v50;
  (*(void (**)(char *, void, uint64_t))(v49 + 104))( v48,  enum case for DispatchQoS.QoSClass.default(_:),  v50);
  uint64_t v32 = (void *)static OS_dispatch_queue.global(qos:)(v30);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
  uint64_t v61 = sub_10043B52C;
  uint64_t v62 = v22;
  aBlock = _NSConcreteStackBlock;
  uint64_t v58 = 1107296256LL;
  uint64_t v59 = sub_1001C31E8;
  uint64_t v60 = &unk_10095A408;
  uint64_t v33 = _Block_copy(&aBlock);
  uint64_t v34 = swift_retain();
  static DispatchQoS.unspecified.getter(v34);
  uint64_t v56 = _swiftEmptyArrayStorage;
  uint64_t v35 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v36 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v37 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v38 = v53;
  uint64_t v39 = v36;
  uint64_t v40 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v39, v37, v54, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v38, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v55 + 8))(v38, v40);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v52);
  swift_release();
  return v22;
}

uint64_t sub_1004368D4()
{
  uint64_t v0 = type metadata accessor for Locale(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v38 - v5;
  id v7 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 stringForKey:v8];

  if (v9)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v13 = v12;
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v13 = 0LL;
  }

  uint64_t v14 = static Locale.current.getter(v10);
  uint64_t v15 = Locale.languageCode.getter(v14);
  uint64_t v17 = v16;
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  uint64_t result = v18(v6, v0);
  if (v17)
  {
    if (v13)
    {
      if (v15 == v11 && v17 == v13)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }

      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v11, v13, 0LL);
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0) {
        return swift_bridgeObjectRelease();
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }
  }

  else if (!v13)
  {
    return result;
  }

  if (qword_10099B480 != -1) {
    swift_once(&qword_10099B480, sub_100435F34);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  sub_10000A720(v22, (uint64_t)qword_100A2AA40);
  swift_bridgeObjectRetain(v13);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc(22LL, -1LL);
    uint64_t v27 = swift_slowAlloc(64LL, -1LL);
    uint64_t v40 = v27;
    uint64_t v43 = v27;
    *(_DWORD *)uint64_t v26 = 136446466;
    uint64_t v38 = v26 + 4;
    uint64_t v28 = static Locale.current.getter(v27);
    uint64_t v29 = Locale.languageCode.getter(v28);
    uint64_t v39 = v11;
    uint64_t v31 = v30;
    v18(v4, v0);
    uint64_t v41 = v29;
    uint64_t v42 = v31;
    uint64_t v32 = sub_100004AEC(&qword_1009A34B0);
    uint64_t v33 = String.init<A>(describing:)(&v41, v32);
    uint64_t v41 = sub_1003F11D4(v33, v34, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v38, v26 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2082;
    uint64_t v41 = v39;
    uint64_t v42 = v13;
    swift_bridgeObjectRetain(v13);
    uint64_t v35 = String.init<A>(describing:)(&v41, v32);
    uint64_t v41 = sub_1003F11D4(v35, v36, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease_n(v13, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Current locale (%{public}s) does not match last one we know (%{public}s). Updating configuration.",  (uint8_t *)v26,  0x16u);
    uint64_t v37 = v40;
    swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v13, 2LL);
  }

  return sub_100436C8C();
}

uint64_t sub_100436C8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v4);
  NSString v8 = &v25[-v7];
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = *(void **)(v1 + 24);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))( v12,  enum case for DispatchPredicate.notOnQueue(_:),  v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)(v12);
  uint64_t v16 = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  static SystemInfo.lockState.getter(v16);
  (*(void (**)(_BYTE *, void, uint64_t))(v3 + 104))( v6,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v2);
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v6, v2, v17);
  uint64_t v19 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v19(v6, v2);
  uint64_t v20 = ((uint64_t (*)(_BYTE *, uint64_t))v19)(v8, v2);
  if ((v18 & 1) != 0)
  {
    uint64_t v1 = static os_log_type_t.default.getter(v20);
    if (qword_10099B6E0 == -1) {
      return os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  qword_100A2AFE0,  "updateConfiguration aborted because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
    }
LABEL_11:
    swift_once(&qword_10099B6E0, sub_100650FD0);
    return os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  qword_100A2AFE0,  "updateConfiguration aborted because device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v22 = OS_dispatch_queue.sync<A>(execute:)(sub_10043AAC8, v1, &type metadata for Bool);
  if (v25[15] == 1)
  {
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.configuration", 43LL, 2LL, sub_10043AB0C);
    uint64_t v23 = sub_10043AB24();
    *(void *)&v25[-32] = __chkstk_darwin(v23);
    *(void *)&v25[-24] = v1;
    *(void *)&v25[-16] = v14;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.rolesConfiguration", 48LL, 2LL, sub_10043ADD8);
    return swift_release();
  }

  else
  {
    uint64_t v24 = static os_log_type_t.default.getter(v22);
    if (qword_10099B6E0 != -1) {
      swift_once(&qword_10099B6E0, sub_100650FD0);
    }
    return os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_100A2AFE0,  "updateConfiguration aborted because we already started updating.",  64LL,  2LL,  _swiftEmptyArrayStorage);
  }

uint64_t sub_100436FAC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (void *)swift_allocObject(&unk_100959FB8, 40LL, 7LL);
  v7[2] = a1;
  v7[3] = a3;
  v7[4] = a4;
  swift_retain();
  swift_retain();
  id v8 = a4;
  Future.addFailure(block:)(sub_10043ADF8, v7);
  swift_release();
  swift_release();
  uint64_t v9 = (void *)swift_allocObject(&unk_100959FE0, 40LL, 7LL);
  v9[2] = a1;
  v9[3] = a3;
  v9[4] = v8;
  swift_retain();
  swift_retain();
  id v10 = v8;
  Future.addSuccess(block:)(sub_10043AE08, v9);
  swift_release();
  return swift_release();
}

uint64_t sub_100437090(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v36 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  Transaction.capture()();
  unsigned int v32 = static os_log_type_t.error.getter(v12);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  aBlock[0] = *a3;
  uint64_t v15 = sub_100004AEC(&qword_1009AE060);
  uint64_t v16 = String.init<A>(describing:)(aBlock, v15);
  uint64_t v18 = v17;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000226F4();
  *(void *)(v14 + 64) = v19;
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + 40) = v18;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v21 = String.init<A>(describing:)(aBlock, v20);
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v19;
  *(void *)(v14 + 72) = v21;
  *(void *)(v14 + 80) = v22;
  uint64_t v23 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v24 = (void *)static OS_os_log.default.getter(v23);
  os_log(_:dso:log:_:_:)( v32,  &_mh_execute_header,  v24,  "%@: Error getting roles from server. Error - %@",  47LL,  2LL,  v14);
  swift_bridgeObjectRelease();

  aBlock[4] = sub_10043B590;
  aBlock[5] = a3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095A0C0;
  os_log_type_t v25 = _Block_copy(aBlock);
  uint64_t v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v29 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v28, v29, v6, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v25);
  _Block_release(v25);
  (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v8, v6);
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v11, v34);
  return swift_release();
}

uint64_t sub_100437368(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Locale(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (void *)*a1;
  Transaction.capture()();
  uint64_t v16 = static Locale.current.getter(v15);
  uint64_t v17 = Locale.languageCode.getter(v16);
  unint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v19) {
    uint64_t v20 = v17;
  }
  else {
    uint64_t v20 = 0x6E776F6E6B6E75LL;
  }
  if (v19) {
    unint64_t v21 = v19;
  }
  else {
    unint64_t v21 = 0xE700000000000000LL;
  }
  if (qword_10099B480 != -1) {
    swift_once(&qword_10099B480, sub_100435F34);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  sub_10000A720(v22, (uint64_t)qword_100A2AA40);
  swift_bridgeObjectRetain_n(v14, 2LL);
  swift_bridgeObjectRetain_n(v21, 2LL);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc(22LL, -1LL);
    uint64_t v27 = swift_slowAlloc(64LL, -1LL);
    unsigned int v45 = v7;
    uint64_t v28 = v27;
    aBlock[0] = v27;
    *(_DWORD *)uint64_t v26 = 136446466;
    uint64_t v46 = v5;
    swift_bridgeObjectRetain(v21);
    uint64_t v51 = (void *)sub_1003F11D4(v20, v21, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(v21, 3LL);
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v51 = v14;
    swift_bridgeObjectRetain(v14);
    uint64_t v29 = String.init<A>(describing:)(&v51, &type metadata for RolesResponse);
    uint64_t v44 = v20;
    uint64_t v51 = (void *)sub_1003F11D4(v29, v30, aBlock);
    uint64_t v5 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease_n(v14, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Received [%{public}s] roles from server %s",  (uint8_t *)v26,  0x16u);
    swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v31 = v28;
    uint64_t v7 = v45;
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v14, 2LL);
    swift_bridgeObjectRelease_n(v21, 2LL);
  }

  swift_bridgeObjectRetain(v14);
  uint64_t v32 = v47;
  sub_10043A2D8(v33, 2, v47);
  swift_bridgeObjectRelease();
  id v34 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v36 = String._bridgeToObjectiveC()();
  [v34 setObject:v35 forKey:v36];

  aBlock[4] = (uint64_t)sub_10043AE14;
  aBlock[5] = v32;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1001C31E8;
  aBlock[3] = (uint64_t)&unk_100959FF8;
  uint64_t v37 = _Block_copy(aBlock);
  uint64_t v38 = swift_retain();
  uint64_t v39 = v48;
  static DispatchQoS.unspecified.getter(v38);
  uint64_t v51 = _swiftEmptyArrayStorage;
  uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v41, v42, v4, v40);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v39, v7, v37);
  _Block_release(v37);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v50);
  return swift_release();
}

uint64_t sub_100437858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 24);
  sub_10043AFD4();
  uint64_t v5 = (void *)swift_allocObject(&unk_10095A198, 40LL, 7LL);
  v5[2] = a1;
  void v5[3] = v4;
  v5[4] = a2;
  swift_retain();
  id v6 = v4;
  swift_retain();
  Future.addFailure(block:)(sub_10043B2BC, v5);
  swift_release();
  swift_release();
  uint64_t v7 = (void *)swift_allocObject(&unk_10095A1C0, 40LL, 7LL);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v6;
  swift_retain();
  id v8 = v6;
  swift_retain();
  Future.addSuccess(block:)(sub_10043B300, v7);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100437950(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v36 = v10;
  __chkstk_darwin(v10);
  id v34 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  if (qword_10099B480 != -1) {
    swift_once(&qword_10099B480, sub_100435F34);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000A720(v12, (uint64_t)qword_100A2AA40);
  swift_errorRetain(a1);
  uint64_t v13 = swift_errorRetain(a1);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = a4;
    uint64_t v18 = v17;
    uint64_t v37 = a1;
    aBlock[0] = v17;
    uint64_t v32 = v9;
    uint64_t v33 = v7;
    *(_DWORD *)uint64_t v16 = 136446210;
    swift_errorRetain(a1);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v20 = String.init<A>(describing:)(&v37, v19);
    uint64_t v37 = (void *)sub_1003F11D4(v20, v21, aBlock);
    uint64_t v9 = v32;
    uint64_t v7 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, aBlock, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to update server config due to %{public}s", v16, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v22 = v18;
    a4 = v31;
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  aBlock[4] = (uint64_t)sub_10043B594;
  aBlock[5] = a4;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1001C31E8;
  aBlock[3] = (uint64_t)&unk_10095A250;
  uint64_t v23 = _Block_copy(aBlock);
  uint64_t v24 = swift_retain();
  os_log_type_t v25 = v34;
  static DispatchQoS.unspecified.getter(v24);
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v26 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v28 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v27, v28, v6, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v25, v9, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v36);
  return swift_release();
}

uint64_t sub_100437CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v46 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v45 = v10;
  __chkstk_darwin(v10);
  uint64_t v43 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for ConfigurationResponse(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  os_log_type_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v38 - v16;
  Transaction.capture()();
  if (qword_10099B480 != -1) {
    swift_once(&qword_10099B480, sub_100435F34);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10000A720(v18, (uint64_t)qword_100A2AA40);
  uint64_t v19 = sub_10001DC4C(a1, (uint64_t)v17, type metadata accessor for ConfigurationResponse);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v40 = a3;
    uint64_t v22 = swift_slowAlloc(12LL, -1LL);
    uint64_t v39 = a1;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = v8;
    uint64_t v25 = v24;
    aBlock[0] = v24;
    uint64_t v42 = a4;
    *(_DWORD *)uint64_t v23 = 136315138;
    sub_10001DC4C((uint64_t)v17, (uint64_t)v15, type metadata accessor for ConfigurationResponse);
    uint64_t v26 = String.init<A>(describing:)(v15, v12);
    uint64_t v47 = (void *)sub_1003F11D4(v26, v27, aBlock);
    a3 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, aBlock, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v17, type metadata accessor for ConfigurationResponse);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Received server config %s", v23, 0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v28 = v25;
    uint64_t v8 = v41;
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v29 = v23;
    a1 = v39;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v17, type metadata accessor for ConfigurationResponse);
  }

  sub_10043A54C(a1, 1, a3);
  aBlock[4] = (uint64_t)sub_10043B30C;
  aBlock[5] = a3;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1001C31E8;
  aBlock[3] = (uint64_t)&unk_10095A1D8;
  uint64_t v30 = _Block_copy(aBlock);
  uint64_t v31 = swift_retain();
  uint64_t v32 = v43;
  static DispatchQoS.unspecified.getter(v31);
  uint64_t v47 = _swiftEmptyArrayStorage;
  uint64_t v33 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v34 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v35 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v36 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v34, v35, v7, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v32, v36, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v36, v7);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v45);
  return swift_release();
}

uint64_t sub_1004380C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_100013044(a1, (uint64_t)aBlock);
  uint64_t v8 = swift_allocObject(&unk_100959F18, 24LL, 7LL);
  swift_weakInit(v8 + 16, v2);
  uint64_t v9 = sub_100004AEC(&qword_1009AE058);
  Subscription.init(subscriber:unsubscribeBlock:)(aBlock, sub_10043A9D4, v8, v9);
  uint64_t v10 = *(dispatch_queue_s **)(v2 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v5);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_100959F40, v12 + v7, v11 | 7);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v13 + v12,  (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
  uint64_t v14 = swift_allocObject(&unk_100959F68, 32LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = sub_10043AA68;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_100154688;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  aBlock[3] = &unk_100959F80;
  os_log_type_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 120LL, 196LL, 32LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004382C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_10043848C(a1);
    return swift_release();
  }

  return result;
}

uint64_t sub_100438344(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v8 = (unint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v15, 33LL, 0LL);
  unint64_t v9 = *(void *)(a1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_1004C663C(0, *(void *)(v9 + 16) + 1LL, 1, v9);
    *uint64_t v8 = v9;
  }

  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_1004C663C(v11 > 1, v12 + 1, 1, v9);
    *uint64_t v8 = v9;
  }

  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v12 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))( v9 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
  + *(void *)(v5 + 72) * v12,
    v7,
    v4);
  return swift_endAccess(v15);
}

uint64_t sub_10043848C(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = *(dispatch_queue_s **)(v1 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v3);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_100959EA0, v8 + v5, v7 | 7);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v9 + v8,  (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3);
  uint64_t v10 = swift_allocObject(&unk_100959EC8, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_10043A984;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_100095030;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  aBlock[3] = &unk_100959EE0;
  unint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 120LL, 204LL, 32LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10043863C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v6[2] = a2;
  swift_bridgeObjectRetain(v4);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = sub_1000241C4((uint64_t (*)(char *))sub_10043A9B8, (uint64_t)v6, v4);
  return swift_bridgeObjectRelease();
}

BOOL sub_1004386B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v5 = sub_1000372EC(&qword_1009AE050, &qword_1009B11D0, (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_10043873C(uint64_t a1, uint64_t a2, int a3)
{
  int v58 = a3;
  uint64_t v59 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v57 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v64 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v62 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v61 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v63 = *(void *)(v67 - 8);
  uint64_t v9 = *(void *)(v63 + 64);
  uint64_t v10 = __chkstk_darwin(v67);
  uint64_t v60 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  __int128 v66 = (char *)v42 - v11;
  a1 += 16LL;
  swift_beginAccess(a1, v72, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v53 = v6;
    uint64_t v14 = v4;
    swift_beginAccess(result + 16, v71, 0LL, 0LL);
    uint64_t v15 = *(void *)(v13 + 16);
    swift_bridgeObjectRetain(v15);
    swift_release();
    if (*(void *)(v15 + 16))
    {
      uint64_t v65 = *(void *)(v15 + 16);
      uint64_t v52 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v16 = *(unsigned __int8 *)(v63 + 80);
      v42[1] = v15;
      uint64_t v17 = (char *)(v15 + ((v16 + 32) & ~v16));
      uint64_t v51 = *(void *)(v63 + 72);
      uint64_t v49 = v16 | 7;
      uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
      uint64_t v50 = (v16 + 16) & ~v16;
      unsigned int v47 = enum case for DispatchQoS.QoSClass.default(_:);
      unint64_t v18 = (v9 + v50 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v45 = v18 + 40;
      unint64_t v46 = v18;
      unint64_t v44 = v18 + 41;
      uint64_t v43 = v14;
      uint64_t v19 = v63;
      uint64_t v20 = v67;
      do
      {
        os_log_type_t v21 = v66;
        uint64_t v22 = v48;
        v48(v66, v17, v20);
        uint64_t v23 = v62;
        uint64_t v24 = v61;
        uint64_t v25 = v54;
        (*(void (**)(char *, void, uint64_t))(v62 + 104))(v61, v47, v54);
        uint64_t v26 = static OS_dispatch_queue.global(qos:)(v24);
        (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
        unint64_t v27 = v60;
        v22(v60, v21, v67);
        sub_100013044(v59, (uint64_t)&v70);
        uint64_t v28 = swift_allocObject(&unk_10095A080, v44, v49);
        (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v28 + v50, v27, v67);
        sub_100012EC0(&v70, v28 + v46);
        *(_BYTE *)(v28 + v45) = v58;
        aBlock[4] = sub_10043AEB0;
        aBlock[5] = v28;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_1001C31E8;
        aBlock[3] = &unk_10095A098;
        uint64_t v29 = _Block_copy(aBlock);
        static DispatchQoS.unspecified.getter(v29);
        uint64_t v68 = _swiftEmptyArrayStorage;
        uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v33 = v53;
        uint64_t v34 = v43;
        uint64_t v35 = v30;
        uint64_t v36 = v56;
        uint64_t v37 = v64;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v31, v32, v43, v35);
        uint64_t v38 = (void *)v26;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v37, v33, v29);
        uint64_t v20 = v67;
        uint64_t v39 = v29;
        uint64_t v40 = v57;
        uint64_t v41 = v55;
        uint64_t v19 = v63;
        _Block_release(v39);

        (*(void (**)(char *, uint64_t))(v40 + 8))(v33, v34);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v37, v36);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v66, v20);
        swift_release();
        v17 += v51;
        --v65;
      }

      while (v65);
    }

    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_100438CB0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B11D0);
  Subscription.subscriber.getter(v11, v5);
  uint64_t v6 = *sub_100012ED8(v11, v11[3]);
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = sub_100012ED8(a2, v7);
  sub_1000371DC((uint64_t)v9, a3, 1LL, 0LL, 0LL, v6, v7, v8);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
}

uint64_t sub_100438D48(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = a2;
  uint64_t v3 = type metadata accessor for ConfigurationResponse(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for String.Encoding(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = a1;
  uint64_t v14 = FMNServerInteractionController.FMNResponseFields.data.getter(v11);
  unint64_t v16 = v15;
  static String.Encoding.utf8.getter(v14);
  uint64_t v17 = String.init(data:encoding:)(v14, v16, v13);
  unint64_t v19 = v18;
  sub_100016F9C(v14, v16);
  uint64_t v20 = &off_10099B000;
  if (v19)
  {
    if (qword_10099B480 != -1) {
      swift_once(&qword_10099B480, sub_100435F34);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2AA40);
    swift_bridgeObjectRetain(v19);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.info.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v50 = v7;
      uint64_t v25 = swift_slowAlloc(12LL, -1LL);
      uint64_t v51 = v3;
      uint64_t v26 = (uint8_t *)v25;
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v49 = v5;
      uint64_t v28 = v27;
      v55[0] = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      swift_bridgeObjectRetain(v19);
      uint64_t v54 = sub_1003F11D4(v17, v19, v55);
      uint64_t v7 = v50;
      uint64_t v20 = &off_10099B000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease_n(v19, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "serverConfiguration raw data: %s", v26, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v29 = v28;
      uint64_t v5 = v49;
      swift_slowDealloc(v29, -1LL, -1LL);
      uint64_t v30 = v26;
      uint64_t v3 = v51;
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v19, 2LL);
    }
  }

  if (v20[144] != (_UNKNOWN *)-1LL) {
    swift_once(&qword_10099B480, sub_100435F34);
  }
  uint64_t v31 = type metadata accessor for Logger(0LL);
  sub_10000A720(v31, (uint64_t)qword_100A2AA40);
  uint64_t v32 = v9;
  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v53, v6);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    v55[0] = v37;
    uint64_t v50 = v7;
    uint64_t v51 = v3;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v38 = sub_100007864( &qword_1009A6DC0,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v6, v38);
    uint64_t v54 = sub_1003F11D4(v39, v40, v55);
    uint64_t v3 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v6);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "serverConfiguration: %s", v36, 0xCu);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  uint64_t v41 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v42 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  uint64_t v43 = JSONDecoder.init()(v42);
  uint64_t v44 = FMNServerInteractionController.FMNResponseFields.data.getter(v43);
  unint64_t v46 = v45;
  uint64_t v47 = sub_100007864(&qword_1009AE088, type metadata accessor for ConfigurationResponse, (uint64_t)&unk_100803980);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v3, v44, v46, v3, v47);
  sub_100016F9C(v44, v46);
  Future.finish(result:)(v5);
  swift_release();
  return sub_100018C68((uint64_t)v5, type metadata accessor for ConfigurationResponse);
}

uint64_t sub_10043932C(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.error.getter(a1);
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v12 = a1;
  swift_errorRetain(a1);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v6 = String.init<A>(describing:)(&v12, v5);
  uint64_t v8 = v7;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000226F4();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  uint64_t v9 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v10 = (void *)static OS_os_log.default.getter(v9);
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  v10,  "Request to get roles from server failed with error - %@",  55LL,  2LL,  v4);
  swift_bridgeObjectRelease();

  return Future.finish(error:)(a1);
}

uint64_t sub_10043943C()
{
  uint64_t v0 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = JSONDecoder.init()(v1);
  uint64_t v3 = FMNServerInteractionController.FMNResponseFields.data.getter(v2);
  unint64_t v5 = v4;
  unint64_t v6 = sub_10043AF08();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for RolesResponse,  v3,  v5,  &type metadata for RolesResponse,  v6);
  sub_100016F9C(v3, v5);
  Future.finish(result:)(&v8);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10043958C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_transactionManager;
  uint64_t v2 = type metadata accessor for PressuredExitTransactionManager(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0
                          + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider____lazy_storage___darwinHelper));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100439604()
{
  return type metadata accessor for ServerConfigurationProvider(0LL);
}

uint64_t type metadata accessor for ServerConfigurationProvider(uint64_t a1)
{
  uint64_t result = qword_1009ADED0;
  if (!qword_1009ADED0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ServerConfigurationProvider);
  }
  return result;
}

uint64_t sub_100439648(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for PressuredExitTransactionManager(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    void v4[4] = &unk_100801D00;
    v4[5] = &unk_100801D00;
    void v4[6] = &unk_100801D00;
    v4[7] = &unk_100801D18;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1004396EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004380C8(a1, a2);
}

uint64_t sub_10043970C(uint64_t a1)
{
  uint64_t result = sub_100007864( &qword_1009AE048,  type metadata accessor for ServerConfigurationProvider,  (uint64_t)&unk_100801D30);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100439748(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = &type metadata for AirPodsLostModeRequest;
  unint64_t v12 = sub_10043B400();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v12;
  v28[2] = a3;
  uint64_t v13 = *(void **)((char *)a4 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v13 lock];
  *((_BYTE *)a4 + qword_1009A4BD8) = 0;
  [v13 unlock];
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v11, 1LL, 1LL, v14);
  uint64_t v15 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v15 + 16, a4);
  unint64_t v16 = (void *)swift_allocObject(&unk_10095A378, 40LL, 7LL);
  v16[2] = 0LL;
  v16[3] = 0LL;
  v16[4] = v15;
  sub_1003EDB00((uint64_t)v11, (uint64_t)&unk_1009AE0B8, (uint64_t)v16);
  swift_release();
  uint64_t v17 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = Future.init()();
  uint64_t v19 = (uint64_t)a4 + qword_1009A4BC0;
  uint64_t v20 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v20 + 16, a4);
  sub_100013044(v19, (uint64_t)v27);
  uint64_t v21 = swift_allocObject(&unk_10095A3A0, 72LL, 7LL);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = v18;
  sub_100012EC0(v27, v21 + 24);
  *(void *)(v21 + 64) = v20;
  swift_retain();
  swift_retain();
  sub_1001B8AE8((uint64_t)v28, (uint64_t)v26);
  uint64_t v22 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v22 + 16, a4);
  uint64_t v23 = swift_allocObject(&unk_10095A3C8, 56LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_10043B58C;
  *(void *)(v23 + 24) = v21;
  *(_BYTE *)(v23 + 32) = 0;
  *(void *)(v23 + 40) = v22;
  *(void *)(v23 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v19,  v26,  0x6170686372616573LL,  0xEC00000064797472LL,  0LL,  sub_10043AFD0,  v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v18;
}

uint64_t sub_100439A2C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = &type metadata for AccessoryLostModeRequest;
  unint64_t v12 = sub_10043B3B0();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v12;
  v28[2] = a3;
  uint64_t v13 = *(void **)((char *)a4 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v13 lock];
  *((_BYTE *)a4 + qword_1009A4BD8) = 0;
  [v13 unlock];
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v11, 1LL, 1LL, v14);
  uint64_t v15 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v15 + 16, a4);
  unint64_t v16 = (void *)swift_allocObject(&unk_10095A300, 40LL, 7LL);
  v16[2] = 0LL;
  v16[3] = 0LL;
  v16[4] = v15;
  sub_1003EDB00((uint64_t)v11, (uint64_t)&unk_1009AE0A8, (uint64_t)v16);
  swift_release();
  uint64_t v17 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = Future.init()();
  uint64_t v19 = (uint64_t)a4 + qword_1009A4BC0;
  uint64_t v20 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v20 + 16, a4);
  sub_100013044(v19, (uint64_t)v27);
  uint64_t v21 = swift_allocObject(&unk_10095A328, 72LL, 7LL);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = v18;
  sub_100012EC0(v27, v21 + 24);
  *(void *)(v21 + 64) = v20;
  swift_retain();
  swift_retain();
  sub_1001B8AE8((uint64_t)v28, (uint64_t)v26);
  uint64_t v22 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v22 + 16, a4);
  uint64_t v23 = swift_allocObject(&unk_10095A350, 56LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_10043B58C;
  *(void *)(v23 + 24) = v21;
  *(_BYTE *)(v23 + 32) = 0;
  *(void *)(v23 + 40) = v22;
  *(void *)(v23 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v19,  v26,  0x6170686372616573LL,  0xEC00000064797472LL,  0LL,  sub_10043AFD0,  v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v18;
}

uint64_t sub_100439D10(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[3] = &type metadata for LostModeRequest;
  unint64_t v12 = sub_10043B360();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v12;
  v28[2] = a3;
  uint64_t v13 = *(void **)((char *)a4 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v13 lock];
  *((_BYTE *)a4 + qword_1009A4BD8) = 0;
  [v13 unlock];
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v11, 1LL, 1LL, v14);
  uint64_t v15 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v15 + 16, a4);
  unint64_t v16 = (void *)swift_allocObject(&unk_10095A288, 40LL, 7LL);
  v16[2] = 0LL;
  v16[3] = 0LL;
  v16[4] = v15;
  sub_1003EDB00((uint64_t)v11, (uint64_t)&unk_1009AE098, (uint64_t)v16);
  swift_release();
  uint64_t v17 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = Future.init()();
  uint64_t v19 = (uint64_t)a4 + qword_1009A4BC0;
  uint64_t v20 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v20 + 16, a4);
  sub_100013044(v19, (uint64_t)v27);
  uint64_t v21 = swift_allocObject(&unk_10095A2B0, 72LL, 7LL);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = v18;
  sub_100012EC0(v27, v21 + 24);
  *(void *)(v21 + 64) = v20;
  swift_retain();
  swift_retain();
  sub_1001B8AE8((uint64_t)v28, (uint64_t)v26);
  uint64_t v22 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v22 + 16, a4);
  uint64_t v23 = swift_allocObject(&unk_10095A2D8, 56LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_10043B58C;
  *(void *)(v23 + 24) = v21;
  *(_BYTE *)(v23 + 32) = 0;
  *(void *)(v23 + 40) = v22;
  *(void *)(v23 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v19,  v26,  0x6170686372616573LL,  0xEC00000064797472LL,  0LL,  sub_10043AFD0,  v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v18;
}

uint64_t sub_100439FF4(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v27[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v29[3] = &type metadata for ConfigurationRequest;
  unint64_t v12 = sub_10043AF4C();
  v29[0] = a1;
  v29[1] = a2;
  v29[4] = v12;
  v29[2] = a3;
  uint64_t v13 = *(void **)((char *)a4 + qword_1009A4BD0);
  swift_bridgeObjectRetain(a1);
  sub_10001736C(a2, a3);
  [v13 lock];
  *((_BYTE *)a4 + qword_1009A4BD8) = 0;
  [v13 unlock];
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v11, 1LL, 1LL, v14);
  uint64_t v15 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v15 + 16, a4);
  unint64_t v16 = (void *)swift_allocObject(&unk_10095A120, 40LL, 7LL);
  v16[2] = 0LL;
  v16[3] = 0LL;
  v16[4] = v15;
  sub_1003EDB00((uint64_t)v11, (uint64_t)&unk_1009A4D38, (uint64_t)v16);
  swift_release();
  uint64_t v17 = sub_100004AEC(&qword_1009ADB20);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v19 = Future.init()(v18);
  uint64_t v20 = (uint64_t)a4 + qword_1009A4BC0;
  uint64_t v21 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v21 + 16, a4);
  sub_100013044(v20, (uint64_t)v28);
  uint64_t v22 = swift_allocObject(&unk_10095A148, 72LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v19;
  sub_100012EC0(v28, v22 + 24);
  *(void *)(v22 + 64) = v21;
  swift_retain();
  swift_retain();
  sub_1001B8AE8((uint64_t)v29, (uint64_t)v27);
  uint64_t v23 = swift_allocObject(&unk_10095A0F8, 24LL, 7LL);
  swift_weakInit(v23 + 16, a4);
  uint64_t v24 = swift_allocObject(&unk_10095A170, 56LL, 7LL);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = sub_10043AFBC;
  *(void *)(v24 + 24) = v22;
  *(_BYTE *)(v24 + 32) = 0;
  *(void *)(v24 + 40) = v23;
  *(void *)(v24 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)( v20,  v27,  0x6170686372616573LL,  0xEC00000064797472LL,  0LL,  sub_10043AFD0,  v24);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v29);
  return v19;
}

uint64_t sub_10043A2D8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v26[3] = &type metadata for RolesResponse;
  v26[4] = &off_10094EA98;
  v26[0] = a1;
  uint64_t v21 = *(void *)(a3 + 32);
  uint64_t v13 = swift_allocObject(&unk_100959F18, 24LL, 7LL);
  swift_weakInit(v13 + 16, a3);
  sub_100013044((uint64_t)v26, (uint64_t)v25);
  uint64_t v14 = swift_allocObject(&unk_10095A030, 65LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v13;
  sub_100012EC0(v25, v14 + 24);
  *(_BYTE *)(v14 + 64) = a2;
  aBlock[4] = sub_10043AE28;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095A048;
  uint64_t v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  uint64_t v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v19 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v6, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release();
  swift_release();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
}

uint64_t sub_10043A54C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v26[3] = type metadata accessor for ConfigurationResponse(0LL);
  v26[4] = &off_100959918;
  unint64_t v12 = sub_10000A7C8(v26);
  sub_10001DC4C(a1, (uint64_t)v12, type metadata accessor for ConfigurationResponse);
  uint64_t v13 = swift_allocObject(&unk_100959F18, 24LL, 7LL);
  swift_weakInit(v13 + 16, a3);
  sub_100013044((uint64_t)v26, (uint64_t)v25);
  uint64_t v14 = swift_allocObject(&unk_10095A210, 65LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v13;
  sub_100012EC0(v25, v14 + 24);
  *(_BYTE *)(v14 + 64) = a2;
  aBlock[4] = sub_10043B534;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095A228;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v19 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v6, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v21);
  swift_release();
  swift_release();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
}

void sub_10043A7D0(uint64_t a1)
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v2 = sub_1006A0B40(v11);
  swift_bridgeObjectRelease();
  if (v2 != a1)
  {
    unint64_t v3 = CFNotificationCenterGetDarwinNotifyCenter();
    if (v3)
    {
      unint64_t v4 = v3;
      if (qword_10099B488 != -1) {
        swift_once(&qword_10099B488, sub_100435FE0);
      }
      unint64_t v5 = (const __CFString *)qword_100A2AA58;
      uint64_t v6 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v7 = (void *)static OS_os_log.default.getter(v6);
      uint64_t v8 = static os_log_type_t.default.getter(v7);
      os_log(_:dso:log:type:_:)( "Posting com.apple.icloud.searchpartyd.fetchServerConfiguration Darwin notification",  82LL,  2LL,  &_mh_execute_header,  v7,  v8,  _swiftEmptyArrayStorage);

      CFNotificationCenterPostNotification(v4, v5, 0LL, 0LL, 1u);
    }

    else
    {
      uint64_t v9 = static os_log_type_t.error.getter(0LL);
      uint64_t v10 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
      unint64_t v4 = (__CFNotificationCenter *)static OS_os_log.default.getter(v10);
      os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v4,  "CFNotificationCenterGetDarwinNotifyCenter return nil!",  53LL,  2LL,  _swiftEmptyArrayStorage);
    }
  }

uint64_t sub_10043A984()
{
  return sub_10043AA74(sub_10043863C);
}

uint64_t sub_10043A990()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10043A9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10043A9B0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

BOOL sub_10043A9B8(uint64_t a1)
{
  return sub_1004386B8(a1, *(void *)(v1 + 16));
}

uint64_t sub_10043A9D4(uint64_t a1)
{
  return sub_1004382C4(a1, v1);
}

uint64_t sub_10043A9F0()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10043AA68()
{
  return sub_10043AA74(sub_100438344);
}

uint64_t sub_10043AA74(uint64_t (*a1)(void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009B11D0) - 8) + 80LL);
  return a1(*(void *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_10043AAB8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10043AAC8(_BYTE *a1@<X8>)
{
  uint64_t v2 = OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_rolesUpdateInProgress;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_rolesUpdateInProgress) & 1) != 0)
  {
    *a1 = 0;
  }

  else if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_configurationUpdateInProgress) & 1) != 0)
  {
    *a1 = 0;
  }

  else
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_configurationUpdateInProgress) = 1;
    *(_BYTE *)(v1 + v2) = 1;
    *a1 = 1;
  }

uint64_t sub_10043AB0C(uint64_t a1)
{
  return sub_100437858(a1, v1);
}

uint64_t sub_10043AB24()
{
  uint64_t v0 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for RoleCategoriesEndpoint(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = sub_100004AEC(&qword_1009AE068);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v15 = Future.init()(v14);
  uint64_t v16 = enum case for FMNAccountType.searchParty(_:);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v17(v6, enum case for FMNAccountType.searchParty(_:), v3);
  uint64_t v18 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v18, 56LL, 7LL);
  *(void *)unint64_t v12 = sub_1006C217C((uint64_t)v6);
  v17(&v12[*(int *)(v7 + 20)], v16, v3);
  uint64_t v19 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = type metadata accessor for FMNMockingPreferences(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v2, 1LL, 1LL, v20);
  uint64_t v21 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v2);
  uint64_t v22 = type metadata accessor for ServerInteractionController(0LL);
  uint64_t v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  sub_10001DC4C((uint64_t)v12, (uint64_t)v10, type metadata accessor for RoleCategoriesEndpoint);
  uint64_t v24 = (void *)sub_100431A28((uint64_t)v10, v21, v23);
  sub_100018C68((uint64_t)v12, type metadata accessor for RoleCategoriesEndpoint);
  sub_1007C8588();
  uint64_t v26 = v25;
  unint64_t v28 = v27;
  sub_100439FF4(v29, v25, v27, v24);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100016F9C(v26, v28);
  swift_retain();
  Future.addFailure(block:)(sub_10043AEF8, v15);
  swift_release();
  swift_release();
  swift_retain();
  Future.addSuccess(block:)(sub_10043AF00, v15);
  swift_release();
  swift_release();
  swift_release();
  return v15;
}

uint64_t sub_10043ADD8(uint64_t a1)
{
  return sub_100436FAC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10043ADF8(uint64_t a1)
{
  return sub_100437090(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10043AE08(void *a1)
{
  return sub_100437368(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_10043AE14()
{
  *(_BYTE *)(v0 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_rolesUpdateInProgress) = 0;
}

uint64_t sub_10043AE28()
{
  return sub_10043873C(*(void *)(v0 + 16), v0 + 24, *(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_10043AE38()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B11D0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 41, v5);
}

uint64_t sub_10043AEB0()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009B11D0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_100438CB0(v0 + v2, (void *)v3, *(unsigned __int8 *)(v3 + 40));
}

uint64_t sub_10043AEF8(uint64_t a1)
{
  return sub_10043932C(a1);
}

uint64_t sub_10043AF00()
{
  return sub_10043943C();
}

unint64_t sub_10043AF08()
{
  unint64_t result = qword_1009AE070;
  if (!qword_1009AE070)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9564, &type metadata for RolesResponse);
    atomic_store(result, (unint64_t *)&qword_1009AE070);
  }

  return result;
}

unint64_t sub_10043AF4C()
{
  unint64_t result = qword_1009AE078;
  if (!qword_1009AE078)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081D0F8, &type metadata for ConfigurationRequest);
    atomic_store(result, (unint64_t *)&qword_1009AE078);
  }

  return result;
}

uint64_t sub_10043AF90()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10043AFBC(uint64_t a1)
{
  return sub_1001B6C24(a1, *(void *)(v1 + 16), v1 + 24, *(void *)(v1 + 64));
}

uint64_t sub_10043AFD4()
{
  uint64_t v0 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v0);
  unint64_t v2 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ConfigurationEndpoint(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = sub_100004AEC(&qword_1009AE080);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v15 = Future.init()(v14);
  uint64_t v16 = enum case for FMNAccountType.searchParty(_:);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v17(v6, enum case for FMNAccountType.searchParty(_:), v3);
  uint64_t v18 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v18, 56LL, 7LL);
  *(void *)unint64_t v12 = sub_1006C217C((uint64_t)v6);
  v17(&v12[*(int *)(v7 + 20)], v16, v3);
  uint64_t v19 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = type metadata accessor for FMNMockingPreferences(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v2, 1LL, 1LL, v20);
  uint64_t v21 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v2);
  uint64_t v22 = type metadata accessor for ServerInteractionController(0LL);
  uint64_t v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  sub_10001DC4C((uint64_t)v12, (uint64_t)v10, type metadata accessor for ConfigurationEndpoint);
  uint64_t v24 = (void *)sub_100431A44((uint64_t)v10, v21, v23);
  sub_100018C68((uint64_t)v12, type metadata accessor for ConfigurationEndpoint);
  sub_1007C8588();
  uint64_t v26 = v25;
  unint64_t v28 = v27;
  sub_100439FF4(v29, v25, v27, v24);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100016F9C(v26, v28);
  swift_retain();
  Future.addFailure(block:)(j___s8SPShared6FutureC6finish5errorSbs5Error_p_tF, v15);
  swift_release();
  swift_release();
  swift_retain();
  Future.addSuccess(block:)(sub_10043B350, v15);
  swift_release();
  swift_release();
  swift_release();
  return v15;
}

uint64_t sub_10043B288()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10043B2BC(void *a1)
{
  return sub_100437950(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10043B2CC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10043B300(uint64_t a1)
{
  return sub_100437CD0(a1, v1[2], v1[3], v1[4]);
}

void sub_10043B30C()
{
  *(_BYTE *)(v0 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_configurationUpdateInProgress) = 0;
}

uint64_t sub_10043B320()
{
  return swift_deallocObject(v0, 65LL, 7LL);
}

uint64_t sub_10043B350(uint64_t a1)
{
  return sub_100438D48(a1, v1);
}

uint64_t sub_10043B358(uint64_t a1)
{
  return sub_100436224(a1, v1);
}

unint64_t sub_10043B360()
{
  unint64_t result = qword_1009AE090;
  if (!qword_1009AE090)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810A88, &type metadata for LostModeRequest);
    atomic_store(result, (unint64_t *)&qword_1009AE090);
  }

  return result;
}

unint64_t sub_10043B3B0()
{
  unint64_t result = qword_1009AE0A0;
  if (!qword_1009AE0A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811434, &type metadata for AccessoryLostModeRequest);
    atomic_store(result, (unint64_t *)&qword_1009AE0A0);
  }

  return result;
}

unint64_t sub_10043B400()
{
  unint64_t result = qword_1009AE0B0;
  if (!qword_1009AE0B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BA78, &type metadata for AirPodsLostModeRequest);
    atomic_store(result, (unint64_t *)&qword_1009AE0B0);
  }

  return result;
}

uint64_t sub_10043B448(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A4D1C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000159BC;
  return sub_1001B8C44(a1, v4, v5, v6);
}

uint64_t sub_10043B4B8()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10043B4F0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10043B51C(uint64_t a1)
{
  return sub_1001B67E4( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  *(unsigned __int8 *)(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t sub_10043B52C()
{
  return sub_1004368D4();
}

uint64_t sub_10043B598(uint64_t a1)
{
  v2[0] = &unk_100801DF0;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 3LL, v2, a1 + 224);
}

uint64_t sub_10043B5F4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AA68);
  sub_10000A720(v0, (uint64_t)qword_100A2AA68);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000012LL,  0x8000000100862C80LL);
}

uint64_t sub_10043B674(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100663C4C(a1);
  if (v13)
  {
    uint64_t v44 = *(void *)(v2 + 64);
    sub_100015750(a2 + 8, (uint64_t)v48, &qword_1009A34B0);
    uint64_t v47 = *(void *)(a2 + 32);
    uint64_t v14 = swift_allocObject(&unk_10095A6F8, 72LL, 7LL);
    *(void *)(v14 + swift_weakDestroy(v0 + 16) = v2;
    *(void *)(v14 + 24) = v13;
    __int128 v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v14 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v14 + 48) = v15;
    *(void *)(v14 + 64) = *(void *)(a2 + 32);
    aBlock[4] = sub_100450EB4;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_10095A710;
    uint64_t v16 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    sub_10020EE10((uint64_t)v48);
    uint64_t v17 = sub_1001B1998(&v47);
    static DispatchQoS.unspecified.getter(v17);
    unint64_t v45 = _swiftEmptyArrayStorage;
    uint64_t v18 = v13;
    uint64_t v19 = sub_100015C48( (unint64_t *)&qword_10099FAB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v43 = v9;
    uint64_t v21 = v6;
    uint64_t v22 = v20;
    uint64_t v23 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v24 = v19;
    uint64_t v13 = v18;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v22, v23, v5, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v43);
    swift_release();
  }

  else
  {
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_10000A720(v25, (uint64_t)qword_100A2AA68);
    uint64_t v26 = *(void *)(a2 + 8);
    unint64_t v27 = *(void *)(a2 + 16);
    aBlock[0] = *(void *)(a2 + 32);
    swift_bridgeObjectRetain(v27);
    id v28 = a1;
    sub_1001B1998(aBlock);
    id v29 = v28;
    swift_bridgeObjectRetain(v27);
    uint64_t v30 = sub_1001B1998(aBlock);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc(22LL, -1LL);
      uint64_t v43 = swift_slowAlloc(64LL, -1LL);
      v48[0] = v43;
      *(_DWORD *)uint64_t v33 = 136446466;
      id v34 = [v29 debugDescription];
      uint64_t v44 = 0LL;
      id v35 = v34;
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      unint64_t v38 = v37;

      uint64_t v47 = sub_1003F11D4(v36, v38, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v33 + 4, v33 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2082;
      if (v27) {
        uint64_t v39 = v26;
      }
      else {
        uint64_t v39 = 0x6E776F6E6B6E75LL;
      }
      if (v27) {
        unint64_t v40 = v27;
      }
      else {
        unint64_t v40 = 0xE700000000000000LL;
      }
      swift_bridgeObjectRetain(v27);
      uint64_t v47 = sub_1003F11D4(v39, v40, v48);
      uint64_t v13 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001B19C0(aBlock);
      swift_bridgeObjectRelease();
      sub_1001B19C0(aBlock);
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "Failed to add connection %{public}s, bundle: %{public}s.",  (uint8_t *)v33,  0x16u);
      uint64_t v41 = v43;
      swift_arrayDestroy(v43, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease();

      sub_1001B19C0(aBlock);
      swift_bridgeObjectRelease();
      sub_1001B19C0(aBlock);
    }
  }

  return v13;
}

uint64_t sub_10043BB28(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v18 = *a3;
  uint64_t v6 = (uint64_t)a3 + 8;
  uint64_t v7 = *((void *)a3 + 2);
  uint64_t v8 = *((void *)a3 + 4);
  char v9 = *((_BYTE *)a3 + 24) & 1;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  XPCSession.identifier.getter(v12);
  swift_beginAccess(a1 + 56, v25, 33LL, 0LL);
  sub_100015750(v6, (uint64_t)v27, &qword_1009A34B0);
  uint64_t v26 = *((void *)a3 + 4);
  swift_retain();
  sub_10020EE10((uint64_t)v27);
  sub_1001B1998(&v26);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + 56));
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v23 = v8;
  uint64_t v24 = v16;
  *(void *)(a1 + 56) = 0x8000000000000000LL;
  uint64_t v19 = a2;
  __int128 v20 = v18;
  uint64_t v21 = v7;
  char v22 = v9;
  sub_10005E84C(&v19, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 56) = v24;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_endAccess(v25);
}

void sub_10043BC80()
{
  uint64_t v1 = v0;
  if (qword_10099B490 != -1) {
    swift_once(&qword_10099B490, sub_10043B5F4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AA68);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "All sessions went away.", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = *(void (**)(uint64_t))(v1 + 40);
  if (v7)
  {
    uint64_t v8 = *(void *)(v1 + 48);
    uint64_t v9 = swift_retain();
    v7(v9);
    sub_10002214C((uint64_t)v7, v8);
  }

uint64_t sub_10043BD80(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(v1 + 64);
  uint64_t v11 = swift_allocObject(&unk_10095AE28, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_100451C74;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095AE40;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100015C48( (unint64_t *)&qword_10099FAB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v16 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_10043BF7C(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v38 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - v10;
  XPCSession.identifier.getter(v9);
  uint64_t v12 = a1 + 56;
  swift_beginAccess(a1 + 56, v44, 0LL, 0LL);
  uint64_t v13 = *(void *)(a1 + 56);
  __n128 v14 = swift_bridgeObjectRetain(v13);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2( 0LL,  v4,  &type metadata for SimpleBeaconUpdateContext,  "session context ",  0LL,  v14);
  uint64_t v16 = sub_100015C48( &qword_1009A58F0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  Dictionary.subscript.getter(&v41, v11, v13, v5, TupleTypeMetadata2, v16);
  swift_bridgeObjectRelease();
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  uint64_t v18 = v41;
  if ((void)v41)
  {
    unint64_t v19 = *((void *)&v42 + 1);
    uint64_t v37 = v42;
    uint64_t v20 = *((void *)&v43 + 1);
    uint64_t v21 = v38;
    XPCSession.identifier.getter(v17);
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v41 = 0u;
    __n128 v22 = swift_beginAccess(v12, &v39, 33LL, 0LL);
    uint64_t v23 = type metadata accessor for Dictionary(0LL, v5, TupleTypeMetadata2, v16, v22);
    Dictionary.subscript.setter(&v41, v21, v23);
    swift_endAccess(&v39);
    uint64_t v24 = a2;
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_10000A720(v25, (uint64_t)qword_100A2AA68);
    swift_bridgeObjectRetain_n(v19, 2LL);
    swift_bridgeObjectRetain_n(v20, 2LL);
    swift_retain_n(a2, 2LL);
    uint64_t v26 = swift_retain_n(v18, 2LL);
    unint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      uint64_t v30 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      unint64_t v38 = (char *)swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v41 = v38;
      *(_DWORD *)uint64_t v29 = 138543618;
      uint64_t v36 = v20;
      uint64_t v31 = XPCSession.connection.getter();
      uint64_t v39 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v29 + 4, v29 + 12);
      *uint64_t v30 = v31;
      swift_release_n(v24, 2LL);
      *(_WORD *)(v29 + 12) = 2082;
      if (v19) {
        uint64_t v32 = v37;
      }
      else {
        uint64_t v32 = 0x6E776F6E6B6E75LL;
      }
      if (v19) {
        unint64_t v33 = v19;
      }
      else {
        unint64_t v33 = 0xE700000000000000LL;
      }
      swift_bridgeObjectRetain(v19);
      uint64_t v39 = sub_1003F11D4(v32, v33, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease_n(v36, 2LL);
      swift_bridgeObjectRelease_n(v19, 2LL);
      swift_release_n(v18, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "Session went away %{public}@- bundle: %{public}s",  (uint8_t *)v29,  0x16u);
      uint64_t v34 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v30, 1LL, v34);
      swift_slowDealloc(v30, -1LL, -1LL);
      id v35 = v38;
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }

    else
    {

      swift_release_n(a2, 2LL);
      swift_bridgeObjectRelease_n(v20, 3LL);
      swift_bridgeObjectRelease_n(v19, 3LL);
      swift_release_n(v18, 3LL);
    }
  }

uint64_t sub_10043C3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AE538);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v25[1] = *(void *)(a2 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = swift_allocObject(&unk_10095AA40, v17 + v14, v16 | 7);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, v15, v12);
  aBlock[4] = sub_100451778;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095AA58;
  unint64_t v19 = _Block_copy(aBlock);
  uint64_t v20 = swift_retain();
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_100015C48( (unint64_t *)&qword_10099FAB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v23 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v6, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  return swift_release();
}

uint64_t sub_10043C63C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v5 = v4 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(v4 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain_n(v4, 2LL);
  int64_t v10 = 0LL;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = *(void *)(v4 + 56) + 48 * i;
    uint64_t v17 = *(void *)(v16 + 24);
    char v18 = *(_BYTE *)(v16 + 32);
    uint64_t v19 = *(void *)(v16 + 40);
    uint64_t v22 = *(void *)v16;
    __int128 v23 = *(_OWORD *)(v16 + 8);
    uint64_t v24 = v17;
    char v25 = v18;
    uint64_t v26 = v19;
    swift_retain();
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    sub_10043C8AC((uint64_t)&v27, &v22, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v10++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v10 >= v9) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    if (!v14) {
      break;
    }
LABEL_19:
    unint64_t v8 = (v14 - 1) & v14;
  }

  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v9) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v9) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v9) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  int64_t v15 = v10 + 4;
  if (v10 + 4 >= v9) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  int64_t v15 = v10 + 5;
  if (v10 + 5 >= v9)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AE538);
    return CheckedContinuation.resume(returning:)(&v27, v20);
  }

  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v10 = v15;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v9) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }

uint64_t sub_10043C8AC(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  if ((a3 & ~v3) == 0)
  {
    uint64_t v5 = (void **)result;
    uint64_t v6 = *a2;
    uint64_t v7 = a2[2];
    unint64_t v8 = a2[3];
    char v37 = *((_BYTE *)a2 + 32);
    uint64_t v9 = a2[5];
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_10000A720(v10, (uint64_t)qword_100A2AA68);
    swift_bridgeObjectRetain_n(v8, 2LL);
    swift_bridgeObjectRetain_n(v9, 2LL);
    uint64_t v11 = swift_retain_n(v6, 2LL);
    uint64_t v12 = v9;
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t type = static os_log_type_t.default.getter(v13);
    uint64_t v38 = v7;
    if (os_log_type_enabled(v13, type))
    {
      uint64_t v35 = v3;
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      uint64_t v34 = swift_slowAlloc(64LL, -1LL);
      uint64_t v41 = v34;
      *(_DWORD *)uint64_t v14 = 136446466;
      if (v8) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 0x6E776F6E6B6E75LL;
      }
      uint64_t v16 = v12;
      uint64_t v33 = v12;
      if (v8) {
        unint64_t v17 = v8;
      }
      else {
        unint64_t v17 = 0xE700000000000000LL;
      }
      swift_bridgeObjectRetain(v8);
      uint64_t v39 = sub_1003F11D4(v15, v17, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease_n(v16, 2LL);
      swift_bridgeObjectRelease_n(v8, 2LL);
      swift_release_n(v6, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      uint64_t v39 = a3;
      unint64_t v18 = sub_1004517C8();
      uint64_t v19 = FixedWidthInteger.data.getter(&type metadata for UInt, v18);
      unint64_t v21 = v20;
      uint64_t v22 = Data.hexString.getter(v19, v20);
      __int128 v23 = v5;
      unint64_t v25 = v24;
      sub_100016F9C(v19, v21);
      uint64_t v39 = sub_1003F11D4(v22, v25, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v14 + 14, v14 + 22);
      uint64_t v5 = v23;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v13,  type,  "Bundle: %{public}s is listening for updates to property mask: %{public}s.",  (uint8_t *)v14,  0x16u);
      swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      uint64_t v26 = v14;
      uint64_t v3 = v35;
      swift_slowDealloc(v26, -1LL, -1LL);

      uint64_t v27 = v6;
      uint64_t v28 = v33;
    }

    else
    {

      swift_bridgeObjectRelease_n(v12, 2LL);
      swift_bridgeObjectRelease_n(v8, 2LL);
      swift_release_n(v6, 2LL);
      uint64_t v27 = v6;
      uint64_t v28 = v12;
    }

    uint64_t v29 = *v5;
    swift_retain();
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v28);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v29);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1004C6650(0LL, v29[2] + 1LL, 1, v29);
      uint64_t v29 = (void *)result;
    }

    unint64_t v31 = v29[2];
    unint64_t v30 = v29[3];
    if (v31 >= v30 >> 1)
    {
      uint64_t result = (uint64_t)sub_1004C6650((void *)(v30 > 1), v31 + 1, 1, v29);
      uint64_t v29 = (void *)result;
    }

    v29[2] = v31 + 1;
    uint64_t v32 = &v29[6 * v31];
    v32[4] = v27;
    v32[5] = v3;
    v32[6] = v38;
    v32[7] = v8;
    *((_BYTE *)v32 + 64) = v37;
    v32[9] = v28;
    *uint64_t v5 = v29;
  }

  return result;
}

uint64_t sub_10043CC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AE538);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v25[1] = *(void *)(a2 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = swift_allocObject(&unk_10095A9A0, v17 + v14, v16 | 7);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, v15, v12);
  aBlock[4] = sub_100451544;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095A9B8;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_100015C48( (unint64_t *)&qword_10099FAB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v23 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v6, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  return swift_release();
}

uint64_t sub_10043CEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v4);
  sub_100450F78(_swiftEmptyArrayStorage, v4, a2);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v6;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009AE538);
  return CheckedContinuation.resume(returning:)(&v9, v7);
}

uint64_t sub_10043CF50(void **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v67 = a1;
  uint64_t v4 = *a2;
  uint64_t v61 = a2[1];
  unint64_t v5 = a2[3];
  uint64_t v65 = a2[2];
  int v62 = *((unsigned __int8 *)a2 + 32);
  uint64_t v6 = a2[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v77 = (char *)&v59 - v12;
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v71 = (char *)&v59 - v17;
  uint64_t v18 = *(void *)(v6 + 16);
  unint64_t v66 = v5;
  uint64_t v64 = v4;
  uint64_t v70 = v18;
  if (v18)
  {
    unint64_t v19 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v69 = v6 + v19;
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    uint64_t v74 = *(void *)(v8 + 72);
    uint64_t v75 = v20;
    uint64_t v63 = a3 + v19;
    uint64_t v60 = v6;
    swift_bridgeObjectRetain_n(v6, 2LL);
    __n128 v21 = swift_bridgeObjectRetain(a3);
    uint64_t v22 = 0LL;
    uint64_t v68 = a3;
    while (1)
    {
      uint64_t v23 = v71;
      v75(v71, v69 + v74 * v22, v7, v21);
      uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v76)(v23, 0LL, 1LL, v7);
      unint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
      if (v24(v23, 1LL, v7) == 1) {
        break;
      }
      unint64_t v25 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      uint64_t v72 = v22;
      os_log_type_t v73 = v25;
      v25(v77, v23, v7);
      uint64_t v26 = *(void *)(a3 + 16);
      __n128 v27 = swift_bridgeObjectRetain(a3);
      if (v26)
      {
        uint64_t v28 = v63;
        while (1)
        {
          v75(v16, v28, v7, v27);
          ((void (*)(char *, void, uint64_t, uint64_t))v76)(v16, 0LL, 1LL, v7);
          if (v24(v16, 1LL, v7) == 1) {
            break;
          }
          v73(v11, v16, v7);
          uint64_t v29 = sub_100015C48( (unint64_t *)&qword_1009A0A40,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v77, v7, v29);
          uint64_t v31 = v8;
          uint64_t v32 = *(void (**)(char *, uint64_t))(v8 + 8);
          v32(v11, v7);
          if ((v30 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v32(v77, v7);
            swift_bridgeObjectRelease();
            uint64_t v34 = v60;
            swift_bridgeObjectRelease();
            if (qword_10099B490 != -1) {
              swift_once(&qword_10099B490, sub_10043B5F4);
            }
            uint64_t v35 = type metadata accessor for Logger(0LL);
            sub_10000A720(v35, (uint64_t)qword_100A2AA68);
            unint64_t v5 = v66;
            swift_bridgeObjectRetain_n(v66, 2LL);
            swift_bridgeObjectRetain_n(v34, 3LL);
            uint64_t v36 = v64;
            uint64_t v37 = swift_retain_n(v64, 2LL);
            uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
            os_log_type_t v39 = static os_log_type_t.default.getter(v38);
            if (os_log_type_enabled(v38, v39))
            {
              uint64_t v40 = swift_slowAlloc(22LL, -1LL);
              uint64_t v41 = swift_slowAlloc(32LL, -1LL);
              uint64_t v80 = v41;
              *(_DWORD *)uint64_t v40 = 136446466;
              if (v5) {
                uint64_t v42 = v65;
              }
              else {
                uint64_t v42 = 0x6E776F6E6B6E75LL;
              }
              if (v5) {
                unint64_t v43 = v5;
              }
              else {
                unint64_t v43 = 0xE700000000000000LL;
              }
              swift_bridgeObjectRetain(v5);
              uint64_t v78 = sub_1003F11D4(v42, v43, &v80);
              uint64_t v36 = v64;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v40 + 4, v40 + 12);
              swift_bridgeObjectRelease_n(v34, 2LL);
              swift_bridgeObjectRelease_n(v66, 2LL);
              swift_release_n(v36, 2LL);
              swift_bridgeObjectRelease();
              *(_WORD *)(v40 + 12) = 2048;
              swift_bridgeObjectRelease();
              uint64_t v78 = v70;
              unint64_t v5 = v66;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v40 + 14, v40 + 22);
              swift_bridgeObjectRelease();
              _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Bundle: %{public}s is listening for updates to %ld beacons.",  (uint8_t *)v40,  0x16u);
              swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v41, -1LL, -1LL);
              swift_slowDealloc(v40, -1LL, -1LL);
            }

            else
            {

              swift_bridgeObjectRelease_n(v5, 2LL);
              swift_release_n(v36, 2LL);
              swift_bridgeObjectRelease_n(v34, 4LL);
            }

            uint64_t v52 = *v67;
            swift_bridgeObjectRetain(v34);
            swift_retain();
            swift_bridgeObjectRetain(v5);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native(v52);
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1004C6650(0LL, v52[2] + 1LL, 1, v52);
              uint64_t v52 = (void *)result;
            }

            unint64_t v54 = v52[2];
            unint64_t v53 = v52[3];
            if (v54 >= v53 >> 1)
            {
              uint64_t result = (uint64_t)sub_1004C6650((void *)(v53 > 1), v54 + 1, 1, v52);
              uint64_t v52 = (void *)result;
            }

            v52[2] = v54 + 1;
            uint64_t v55 = &v52[6 * v54];
            v55[4] = v36;
            goto LABEL_45;
          }

          v28 += v74;
          --v26;
          uint64_t v8 = v31;
          if (!v26) {
            goto LABEL_9;
          }
        }
      }

      else
      {
LABEL_9:
        v76(v16, 1LL, 1LL, v7, v27);
      }

      uint64_t v22 = v72 + 1;
      a3 = v68;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v77, v7);
      if (v22 == v70)
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v76)(v71, 1LL, 1LL, v7);
        break;
      }
    }

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n(v60, 2LL);
  }

  else
  {
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    sub_10000A720(v44, (uint64_t)qword_100A2AA68);
    swift_bridgeObjectRetain_n(v5, 2LL);
    uint64_t v34 = v6;
    swift_bridgeObjectRetain_n(v6, 2LL);
    uint64_t v45 = swift_retain_n(v4, 2LL);
    unint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      uint64_t v80 = v49;
      *(_DWORD *)uint64_t v48 = 136446210;
      if (v5) {
        uint64_t v50 = v65;
      }
      else {
        uint64_t v50 = 0x6E776F6E6B6E75LL;
      }
      if (v5) {
        unint64_t v51 = v5;
      }
      else {
        unint64_t v51 = 0xE700000000000000LL;
      }
      swift_bridgeObjectRetain(v66);
      uint64_t v78 = sub_1003F11D4(v50, v51, &v80);
      unint64_t v5 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease_n(v34, 2LL);
      swift_bridgeObjectRelease_n(v5, 2LL);
      swift_release_n(v64, 2LL);
      uint64_t v4 = v64;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "Bundle: %{public}s is listening for updates to any beacons.",  v48,  0xCu);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v34, 2LL);
      swift_bridgeObjectRelease_n(v5, 2LL);
      swift_release_n(v4, 2LL);
    }

    uint64_t v52 = *v67;
    swift_bridgeObjectRetain(v34);
    swift_retain();
    swift_bridgeObjectRetain(v5);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v52);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1004C6650(0LL, v52[2] + 1LL, 1, v52);
      uint64_t v52 = (void *)result;
    }

    unint64_t v57 = v52[2];
    unint64_t v56 = v52[3];
    if (v57 >= v56 >> 1)
    {
      uint64_t result = (uint64_t)sub_1004C6650((void *)(v56 > 1), v57 + 1, 1, v52);
      uint64_t v52 = (void *)result;
    }

    v52[2] = v57 + 1;
    uint64_t v55 = &v52[6 * v57];
    v55[4] = v4;
LABEL_45:
    uint64_t v58 = v65;
    v55[5] = v61;
    v55[6] = v58;
    v55[7] = v5;
    *((_BYTE *)v55 + 64) = v62;
    v55[9] = v34;
    *uint64_t v67 = v52;
  }

  return result;
}

uint64_t sub_10043D7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009AE6A8);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  v22[1] = *(void *)(a2 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_10095AD60, v14 + v12, v13 | 7);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))( v15 + v14,  (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  aBlock[4] = sub_100451B4C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095AD78;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100015C48( (unint64_t *)&qword_10099FAB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v20 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v19, v20, v4, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
  return swift_release();
}

void sub_10043DA4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (!v3)
  {
LABEL_24:
    uint64_t v24 = v4[2];
    if (v24)
    {
      if (v24 == 1)
      {
        uint64_t v25 = 0LL;
        unint64_t v26 = 0LL;
      }

      else
      {
        uint64_t v27 = 0LL;
        uint64_t v28 = 0LL;
        uint64_t v25 = v24 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v29 = v4 + 9;
        uint64_t v30 = v24 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v31 = *(v29 - 5);
          uint64_t v32 = *v29;
          v29 += 10;
          v27 |= v31;
          v28 |= v32;
          v30 -= 2LL;
        }

        while (v30);
        unint64_t v26 = v28 | v27;
        if (v24 == v25) {
          goto LABEL_33;
        }
      }

      uint64_t v33 = v24 - v25;
      uint64_t v34 = &v4[5 * v25 + 4];
      do
      {
        uint64_t v35 = *v34;
        v34 += 5;
        v26 |= v35;
        --v33;
      }

      while (v33);
    }

    else
    {
      unint64_t v26 = 0LL;
    }

void sub_10043DD78()
{
}

uint64_t sub_10043DD9C()
{
  uint64_t v0 = sub_1006DA50C();
  sub_10002214C(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_10043DDDC()
{
  uint64_t v0 = sub_10043DD9C();
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for SimpleBeaconUpdateConnections( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SimpleBeaconUpdateConnections);
}

uint64_t sub_10043DE04()
{
  return sub_10043DE2C((uint64_t)&unk_10095AE00, (uint64_t)&unk_1009AE6C8);
}

uint64_t sub_10043DE18()
{
  return sub_10043DE2C((uint64_t)&unk_10095ADD8, (uint64_t)&unk_1009AE6C0);
}

uint64_t sub_10043DE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1LL, 1LL, v9);
  int64_t v11 = (void *)swift_allocObject(a1, 40LL, 7LL);
  v11[2] = 0LL;
  unint64_t v12 = v11 + 2;
  v11[3] = 0LL;
  v11[4] = v5;
  int v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9);
  uint64_t v14 = swift_retain();
  if (v13 == 1)
  {
    sub_100015794((uint64_t)v8, &qword_1009A9BF0);
    uint64_t v15 = 7168LL;
LABEL_6:
    unint64_t v23 = 0LL;
    goto LABEL_7;
  }

  unsigned __int8 v16 = TaskPriority.rawValue.getter(v14);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  uint64_t v15 = v16 | 0x1C00LL;
  uint64_t v17 = *v12;
  if (!*v12) {
    goto LABEL_6;
  }
  uint64_t v18 = v11[3];
  uint64_t ObjectType = swift_getObjectType(*v12);
  swift_unknownObjectRetain(v17);
  uint64_t v20 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
  uint64_t v22 = v21;
  swift_unknownObjectRelease(v17);
  if (!(v22 | v20)) {
    goto LABEL_6;
  }
  v25[0] = 0LL;
  v25[1] = 0LL;
  unint64_t v23 = v25;
  void v25[2] = v20;
  v25[3] = v22;
LABEL_7:
  swift_task_create(v15, v23, (char *)&type metadata for () + 8, a2, v11);
  return swift_release();
}

uint64_t sub_10043DFEC(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[17] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10043E044, v1, 0LL);
}

uint64_t sub_10043E044()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 144) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10043E130;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10043E130(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 152LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10043E190, v3, 0LL);
}

uint64_t sub_10043E190()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 152);
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v5 = *(void *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for WorkItemQueue.WorkItem(0LL);
    uint64_t v6 = (void *)swift_allocObject(&unk_10095ADB0, 48LL, 7LL);
    v6[2] = v4;
    v6[3] = v5;
    v6[4] = 0LL;
    void v6[5] = v2;
    swift_retain();
    swift_bridgeObjectRetain(v5);
    uint64_t v7 = swift_retain();
    UUID.init()(v7);
    uint64_t v8 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v3,  &unk_1009AE6B0,  v6,  &unk_1009AE558,  0LL);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v8);
    swift_release();
    swift_release();
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }

  swift_task_dealloc(*(void *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10043E288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_1009AE1DC);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_1000159BC;
  v6[4] = a4;
  return swift_task_switch(sub_100442600, a4, 0LL);
}

uint64_t sub_10043E2E8()
{
  *(void *)(v1 + 256) = v0;
  return swift_task_switch(sub_10043E300, v0, 0LL);
}

uint64_t sub_10043E300()
{
  uint64_t v1 = *(void *)(v0 + 256);
  sub_100441948();
  *(void *)(v0 + 264) = *(void *)(v1 + 128);
  return swift_task_switch(sub_10043E344, 0LL, 0LL);
}

uint64_t sub_10043E344()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 272) = v1;
  type metadata accessor for SPSimpleBeaconProperty(0LL);
  *uint64_t v1 = v0;
  v1[1] = sub_10043E3D8;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 240,  0LL,  0LL,  0x65706F72506C6C61LL,  0xEF29287365697472LL,  sub_10045180C,  *(void *)(v0 + 264),  v2);
}

uint64_t sub_10043E3D8()
{
  return swift_task_switch(sub_10043E42C, 0LL, 0LL);
}

uint64_t sub_10043E42C()
{
  uint64_t v1 = v0[32];
  v0[35] = v0[30];
  return swift_task_switch(sub_10043E448, v1, 0LL);
}

uint64_t sub_10043E448()
{
  if ((*(_BYTE *)(v0 + 280) & 0x20) != 0)
  {
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 200, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 16, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 40))
    {
      sub_100012EC0((__int128 *)(v0 + 16), v0 + 136);
      sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C968 + dword_10099C968);
      uint64_t v2 = (void *)swift_task_alloc(unk_10099C96C);
      *(void *)(v0 + 288) = v2;
      uint64_t v3 = sub_10043E5F4;
      goto LABEL_10;
    }
  }

  else
  {
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 120))
    {
      sub_100012EC0((__int128 *)(v0 + 96), v0 + 56);
      sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
      uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 304) = v2;
      uint64_t v3 = sub_10043E8DC;
LABEL_10:
      *uint64_t v2 = v0;
      v2[1] = v3;
      return v4();
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10043E5F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 288LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 256LL);
  *(void *)(*(void *)v1 + 29sub_100431720(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), 6LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10043E654, v3, 0LL);
}

uint64_t sub_10043E654()
{
  uint64_t v1 = (void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 296);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 256);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(void *)(v0 + 248) = *(void *)(v2
                                      + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedSubject);
    uint64_t v4 = swift_allocObject(&unk_10095A900, 24LL, 7LL);
    swift_weakInit(v4 + 16, v3);
    swift_retain();
    uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B06A0);
    uint64_t v6 = sub_1000372EC( &qword_1009AE5D0,  (uint64_t *)&unk_1009B06A0,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    uint64_t v7 = Publisher<>.sink(receiveValue:)(sub_10045184C, v4, v5, v6);
    swift_release();
    swift_release();
    *(void *)(v3 + 136) = v7;
    swift_release();
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A2AA68);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Subscribed to connectableDeviceCount changes.", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_release();
    }

    else
    {

      swift_release();
    }
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }

  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 56);
    sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v15 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v14 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 304) = v14;
    void *v14 = v0;
    v14[1] = sub_10043E8DC;
    return v15();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10043E8DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 304LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 256LL);
  *(void *)(*(void *)v1 + 312LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10043E93C, v3, 0LL);
}

uint64_t sub_10043E93C()
{
  uint64_t v1 = *(void *)(v0 + 312);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
  if (v1) {
    return swift_task_switch(sub_10043E994, *(void *)(v0 + 312), 0LL);
  }
  else {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10043E994()
{
  uint64_t v1 = *(void *)(v0 + 256);
  *(void *)(v0 + 320) = sub_1004F76AC();
  return swift_task_switch(sub_10043E9DC, v1, 0LL);
}

uint64_t sub_10043E9DC()
{
  v0[29] = v0[40];
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[32];
  uint64_t v4 = swift_allocObject(&unk_10095A900, 24LL, 7LL);
  swift_weakInit(v4 + 16, v3);
  uint64_t v5 = (void *)swift_allocObject(&unk_10095AA90, 40LL, 7LL);
  v5[2] = v4;
  void v5[3] = v1;
  v5[4] = v2;
  swift_retain();
  uint64_t v6 = sub_100004AEC(&qword_1009A32D0);
  uint64_t v7 = sub_1000372EC( (unint64_t *)&unk_1009AE5B0,  &qword_1009A32D0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v8 = Publisher<>.sink(receiveValue:)(sub_100451824, v5, v6, v7);
  swift_release();
  swift_release();
  *(void *)(v3 + 144) = v8;
  swift_release();
  if (qword_10099B490 != -1) {
    swift_once(&qword_10099B490, sub_10043B5F4);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_10000A720(v9, (uint64_t)qword_100A2AA68);
  v0[41] = v10;
  os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    int v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Subscribed to record changes.", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return swift_task_switch(sub_10043EB98, v0[39], 0LL);
}

uint64_t sub_10043EB98()
{
  uint64_t v1 = v0[32];
  v0[42] = *(void *)(*(void *)(v0[39] + 128LL) + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher);
  swift_retain();
  return swift_task_switch(sub_10043EBF0, v1, 0LL);
}

uint64_t sub_10043EBF0()
{
  *(void *)(v0 + 224) = *(void *)(v0 + 336);
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = swift_allocObject(&unk_10095A900, 24LL, 7LL);
  swift_weakInit(v4 + 16, v3);
  uint64_t v5 = (void *)swift_allocObject(&unk_10095AAB8, 40LL, 7LL);
  v5[2] = v4;
  void v5[3] = v1;
  v5[4] = v2;
  swift_retain();
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009B0690);
  uint64_t v7 = sub_1000372EC( (unint64_t *)&unk_1009AE5C0,  (uint64_t *)&unk_1009B0690,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v8 = Publisher<>.sink(receiveValue:)(sub_100451840, v5, v6, v7);
  swift_release();
  swift_release();
  *(void *)(v3 + 152) = v8;
  uint64_t v9 = swift_release();
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Subscribed to record deletions.", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10043ED7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    type metadata accessor for Transaction(0LL);
    uint64_t v6 = swift_allocObject(&unk_10095AAE0, 32LL, 7LL);
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v5;
    *(void *)(v6 + 24) = v2;
    swift_retain(v5);
    static Transaction.asyncTask(name:block:)( "SimpleBeaconUpdates-connectableDevicesChangedSubject",  52LL,  2LL,  &unk_1009AE5E0,  v6);
    swift_release(v6);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_10043EE30(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  void v2[3] = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10043EE88, 0LL, 0LL);
}

uint64_t sub_10043EE88()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  uint64_t v4 = swift_allocObject(&unk_10095AB08, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = swift_retain(v3);
  UUID.init()(v5);
  uint64_t v6 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v1,  &unk_1009AE5F0,  v4,  &unk_1009AE5F8,  0LL);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v6);
  swift_release(v6);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10043EF44(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return swift_task_switch(sub_10043EF60, a1, 0LL);
}

uint64_t sub_10043EF60()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 40) = *(void *)(v1 + 184);
  *(_BYTE *)(v0 + 80) = *(_BYTE *)(v1 + 192);
  return swift_task_switch(sub_10043EF88, 0LL, 0LL);
}

uint64_t sub_10043EF88()
{
  if ((*(_BYTE *)(v0 + 80) & 1) == 0 && *(void *)(v0 + 40) == *(void *)(v0 + 32)) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (qword_10099B490 != -1) {
    swift_once(&qword_10099B490, sub_10043B5F4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AA68);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Updating sessions for connectableDeviceCount changes.", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v0 + 24);

  return swift_task_switch(sub_10043F0A4, v7, 0LL);
}

uint64_t sub_10043F0A4()
{
  return swift_task_switch(sub_10043F0E0, 0LL, 0LL);
}

uint64_t sub_10043F0E0()
{
  uint64_t v1 = *(void *)(v0[3] + 128LL);
  uint64_t v2 = swift_task_alloc(32LL);
  v0[6] = v2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v2 + 24) = 32LL;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v3;
  uint64_t v4 = sub_100004AEC(&qword_1009AE4E8);
  *uint64_t v3 = v0;
  v3[1] = sub_10043F198;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD00000000000001BLL,  0x8000000100862CE0LL,  sub_100451CB8,  v2,  v4);
}

uint64_t sub_10043F198()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 56LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10043F1F4, 0LL, 0LL);
}

uint64_t sub_10043F1F4()
{
  uint64_t v1 = v0[2];
  v0[8] = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_1009AE1E4);
  v0[9] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10043F258;
  uint64_t v3 = v0[3];
  v2[18] = v1;
  v2[19] = v3;
  return swift_task_switch(sub_100442B94, v3, 0LL);
}

uint64_t sub_10043F258()
{
  uint64_t v1 = *(void *)(*v0 + 64);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 72));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10043F2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v185 = a4;
  uint64_t v187 = a3;
  uint64_t v6 = sub_100004AEC(&qword_1009AA900);
  __chkstk_darwin(v6);
  unint64_t v172 = (char *)&v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  uint64_t v171 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v170 = (uint64_t)&v168 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  __chkstk_darwin(v9);
  unint64_t v176 = (char *)&v168 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v177 = type metadata accessor for SafeLocation(0LL);
  uint64_t v175 = *(void *)(v177 - 8);
  __chkstk_darwin(v177);
  uint64_t v173 = (uint64_t)&v168 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009AA840);
  __chkstk_darwin(v12);
  uint64_t v182 = (char *)&v168 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v181 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v178 = (uint64_t)&v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v168 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v183 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v19 = *(void *)(v183 - 8);
  uint64_t v20 = __chkstk_darwin(v183);
  uint64_t v179 = (uint64_t)&v168 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v180 = (uint64_t)&v168 - v22;
  uint64_t v23 = sub_100004AEC(&qword_1009A2430);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v168 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v168 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v188 = type metadata accessor for UUID(0LL);
  uint64_t v186 = *(void *)(v188 - 8);
  __chkstk_darwin(v188);
  uint64_t v31 = (char *)&v168 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v199, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (!result) {
    return result;
  }
  uint64_t v169 = v14;
  uint64_t v184 = result;
  uint64_t v33 = a1;
  sub_100013044(a1, (uint64_t)&v192);
  uint64_t v34 = sub_100004AEC(&qword_1009AE670);
  uint64_t v35 = sub_100004AEC(&qword_1009B0530);
  if ((swift_dynamicCast(v190, &v192, v34, v35, 6LL) & 1) != 0)
  {
    sub_100012EC0(v190, (uint64_t)&v196);
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    sub_10000A720(v36, (uint64_t)qword_100A2AA68);
    uint64_t v37 = sub_100013044((uint64_t)&v196, (uint64_t)&v192);
    int v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter(v38);
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = v188;
    if (v40)
    {
      uint64_t v42 = swift_slowAlloc(22LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v42 = 141558275;
      uint64_t v189 = 1752392040LL;
      *(void *)&v190[0] = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v190, v42 + 4, v42 + 12);
      *(_WORD *)(v42 + 12) = 2081;
      uint64_t v185 = v42 + 14;
      uint64_t v45 = v194;
      uint64_t v44 = v195;
      sub_100012ED8(&v192, v194);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v44 + 8) + 8LL) + 32LL))(v45);
      uint64_t v46 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v41, v46);
      unint64_t v49 = v48;
      uint64_t v50 = v186;
      (*(void (**)(char *, uint64_t))(v186 + 8))(v31, v41);
      uint64_t v189 = sub_1003F11D4(v47, v49, (uint64_t *)v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v190, v185, v42 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v192);
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Updating sessions for BeaconRecord changes. Beacon: %{private,mask.hash}s",  (uint8_t *)v42,  0x16u);
      swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);

      uint64_t v51 = v187;
      uint64_t v52 = v184;
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v192);

      uint64_t v51 = v187;
      uint64_t v52 = v184;
      uint64_t v50 = v186;
    }

    uint64_t v77 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
    uint64_t v78 = *(unsigned __int8 *)(v50 + 80);
    uint64_t v79 = (v78 + 32) & ~v78;
    uint64_t v80 = swift_allocObject(v77, v79 + *(void *)(v50 + 72), v78 | 7);
    *(_OWORD *)(v80 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v81 = v80 + v79;
    uint64_t v82 = v197;
    uint64_t v83 = v198;
    sub_100012ED8(&v196, v197);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v83 + 8) + 8LL) + 32LL))(v82);
    uint64_t v84 = sub_100768C98(v80);
    swift_setDeallocating(v80);
    swift_arrayDestroy(v81, 1LL, v41);
    swift_deallocClassInstance(v80, 32LL, 7LL);
    type metadata accessor for Transaction(0LL);
    uint64_t v85 = (void *)swift_allocObject(&unk_10095AD38, 48LL, 7LL);
    v85[2] = v52;
    v85[3] = v84;
    v85[4] = 0LL;
    v85[5] = v51;
    swift_retain();
    swift_bridgeObjectRetain(v84);
    swift_retain();
    static Transaction.asyncTask(name:block:)( "SimpleBeaconUpdate-receivedSimpleBeacons",  40LL,  2LL,  &unk_1009AE6A0,  v85);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v196);
  }

  uint64_t v191 = 0LL;
  memset(v190, 0, sizeof(v190));
  sub_100015794((uint64_t)v190, (uint64_t *)&unk_1009A9C40);
  __int16 v53 = v185;
  uint64_t v54 = v33;
  uint64_t v55 = v169;
  if ((v185 & 0x300) != 0)
  {
    sub_100013044(v54, (uint64_t)&v196);
    char v56 = swift_dynamicCast(v25, &v196, v34, v26, 6LL);
    unint64_t v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    if ((v56 & 1) != 0)
    {
      v57(v25, 0LL, 1LL, v26);
      uint64_t v58 = (uint64_t)v29;
      sub_10002218C((uint64_t)v25, (uint64_t)v29, type metadata accessor for KeyAlignmentRecord);
      if (qword_10099B490 != -1) {
        swift_once(&qword_10099B490, sub_10043B5F4);
      }
      uint64_t v59 = type metadata accessor for Logger(0LL);
      uint64_t v60 = sub_10000A720(v59, (uint64_t)qword_100A2AA68);
      uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
      os_log_type_t v62 = static os_log_type_t.default.getter(v61);
      BOOL v63 = os_log_type_enabled(v61, v62);
      uint64_t v64 = v187;
      uint64_t v65 = v184;
      uint64_t v66 = v186;
      if (v63)
      {
        uint64_t v67 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v67 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Updating sessions for KeySyncRecord changes.", v67, 2u);
        swift_slowDealloc(v67, -1LL, -1LL);
      }

      uint64_t v68 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
      uint64_t v69 = *(unsigned __int8 *)(v66 + 80);
      uint64_t v70 = (v69 + 32) & ~v69;
      uint64_t v71 = swift_allocObject(v68, v70 + *(void *)(v66 + 72), v69 | 7);
      *(_OWORD *)(v71 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v72 = v71 + v70;
      os_log_type_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16);
      uint64_t v74 = v188;
      v73(v71 + v70, v58 + *(int *)(v26 + 24), v188);
      uint64_t v75 = sub_100768C98(v71);
      swift_setDeallocating(v71);
      swift_arrayDestroy(v72, 1LL, v74);
      swift_deallocClassInstance(v71, 32LL, 7LL);
      type metadata accessor for Transaction(0LL);
      uint64_t v76 = (void *)swift_allocObject(&unk_10095AD10, 48LL, 7LL);
      v76[2] = v65;
      v76[3] = v75;
      v76[4] = 0LL;
      v76[5] = v64;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v75);
      static Transaction.asyncTask(name:block:)( "SimpleBeaconUpdate-receivedSimpleBeacons",  40LL,  2LL,  &unk_1009AE698,  v76);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return sub_100018C68(v58, type metadata accessor for KeyAlignmentRecord);
    }

    v57(v25, 1LL, 1LL, v26);
    sub_100015794((uint64_t)v25, &qword_1009A2430);
  }

  uint64_t v86 = v188;
  if ((v53 & 0x280) != 0)
  {
    sub_100013044(v54, (uint64_t)&v196);
    uint64_t v87 = v183;
    char v88 = swift_dynamicCast(v18, &v196, v34, v183, 6LL);
    uint64_t v89 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    if ((v88 & 1) != 0)
    {
      v89(v18, 0LL, 1LL, v87);
      uint64_t v90 = v180;
      sub_10002218C((uint64_t)v18, v180, type metadata accessor for BeaconNamingRecord);
      if (qword_10099B490 != -1) {
        swift_once(&qword_10099B490, sub_10043B5F4);
      }
      uint64_t v91 = type metadata accessor for Logger(0LL);
      sub_10000A720(v91, (uint64_t)qword_100A2AA68);
      uint64_t v92 = v179;
      uint64_t v93 = sub_10001DC4C(v90, v179, type metadata accessor for BeaconNamingRecord);
      unint64_t v94 = (os_log_s *)Logger.logObject.getter(v93);
      os_log_type_t v95 = static os_log_type_t.default.getter(v94);
      if (os_log_type_enabled(v94, v95))
      {
        uint64_t v96 = swift_slowAlloc(22LL, -1LL);
        uint64_t v97 = swift_slowAlloc(32LL, -1LL);
        uint64_t v196 = v97;
        *(_DWORD *)uint64_t v96 = 141558275;
        uint64_t v192 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v193, v96 + 4, v96 + 12);
        *(_WORD *)(v96 + 12) = 2081;
        uint64_t v98 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter(v86, v98);
        uint64_t v192 = sub_1003F11D4(v99, v100, &v196);
        uint64_t v87 = v183;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v193, v96 + 14, v96 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v92, type metadata accessor for BeaconNamingRecord);
        _os_log_impl( (void *)&_mh_execute_header,  v94,  v95,  "Updating sessions for Beacon Name changes. Beacon: %{private,mask.hash}s",  (uint8_t *)v96,  0x16u);
        swift_arrayDestroy(v97, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v97, -1LL, -1LL);
        swift_slowDealloc(v96, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v92, type metadata accessor for BeaconNamingRecord);
      }

      uint64_t v138 = v187;
      uint64_t v139 = v184;
      uint64_t v140 = v186;
      uint64_t v141 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
      uint64_t v142 = *(unsigned __int8 *)(v140 + 80);
      uint64_t v143 = (v142 + 32) & ~v142;
      uint64_t v144 = swift_allocObject(v141, v143 + *(void *)(v140 + 72), v142 | 7);
      *(_OWORD *)(v144 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v145 = v144 + v143;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v140 + 16))(v144 + v143, v90 + *(int *)(v87 + 24), v86);
      unint64_t v146 = sub_100768C98(v144);
      swift_setDeallocating(v144);
      swift_arrayDestroy(v145, 1LL, v86);
      swift_deallocClassInstance(v144, 32LL, 7LL);
      type metadata accessor for Transaction(0LL);
      unint64_t v147 = (void *)swift_allocObject(&unk_10095ACE8, 48LL, 7LL);
      v147[2] = v139;
      v147[3] = v146;
      v147[4] = 0LL;
      v147[5] = v138;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v146);
      static Transaction.asyncTask(name:block:)( "SimpleBeaconUpdate-receivedSimpleBeacons",  40LL,  2LL,  &unk_1009AE690,  v147);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return sub_100018C68(v90, type metadata accessor for BeaconNamingRecord);
    }

    v89(v18, 1LL, 1LL, v87);
    sub_100015794((uint64_t)v18, &qword_1009AE490);
    uint64_t v55 = v169;
  }

  if ((v53 & 0x200) == 0) {
    return swift_release();
  }
  sub_100013044(v54, (uint64_t)&v196);
  uint64_t v101 = (uint64_t)v182;
  int v102 = swift_dynamicCast(v182, &v196, v34, v55, 6LL);
  unint64_t v103 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v181 + 56);
  if (v102)
  {
    v103(v101, 0LL, 1LL, v55);
    uint64_t v104 = v178;
    sub_10002218C(v101, v178, type metadata accessor for LostModeRecord);
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v105 = type metadata accessor for Logger(0LL);
    uint64_t v106 = sub_10000A720(v105, (uint64_t)qword_100A2AA68);
    unint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
    os_log_type_t v108 = static os_log_type_t.default.getter(v107);
    BOOL v109 = os_log_type_enabled(v107, v108);
    uint64_t v110 = v187;
    uint64_t v111 = v184;
    uint64_t v112 = v186;
    if (v109)
    {
      unint64_t v113 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v113 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "Updating sessions for Lost Mode changes.", v113, 2u);
      swift_slowDealloc(v113, -1LL, -1LL);
    }

    uint64_t v114 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
    uint64_t v115 = *(unsigned __int8 *)(v112 + 80);
    uint64_t v116 = (v115 + 32) & ~v115;
    uint64_t v117 = swift_allocObject(v114, v116 + *(void *)(v112 + 72), v115 | 7);
    *(_OWORD *)(v117 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v118 = v117 + v116;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v117 + v116, v104 + *(int *)(v55 + 24), v86);
    unint64_t v119 = sub_100768C98(v117);
    swift_setDeallocating(v117);
    swift_arrayDestroy(v118, 1LL, v86);
    swift_deallocClassInstance(v117, 32LL, 7LL);
    type metadata accessor for Transaction(0LL);
    unint64_t v120 = (void *)swift_allocObject(&unk_10095ACC0, 48LL, 7LL);
    v120[2] = v111;
    v120[3] = v119;
    v120[4] = 0LL;
    v120[5] = v110;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v119);
    static Transaction.asyncTask(name:block:)( "SimpleBeaconUpdate-receivedSimpleBeacons",  40LL,  2LL,  &unk_1009AE688,  v120);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v121 = type metadata accessor for LostModeRecord;
    return sub_100018C68(v104, v121);
  }

  v103(v101, 1LL, 1LL, v55);
  sub_100015794(v101, &qword_1009AA840);
  sub_100013044(v54, (uint64_t)&v196);
  uint64_t v122 = (uint64_t)v176;
  uint64_t v123 = v177;
  int v124 = swift_dynamicCast(v176, &v196, v34, v177, 6LL);
  unint64_t v125 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v175 + 56);
  if (!v124)
  {
    v125(v122, 1LL, 1LL, v123);
    sub_100015794(v122, (uint64_t *)&unk_1009AF740);
    sub_100013044(v54, (uint64_t)&v196);
    uint64_t v148 = (uint64_t)v172;
    uint64_t v149 = found;
    char v150 = swift_dynamicCast(v172, &v196, v34, found, 6LL);
    unint64_t v151 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v171 + 56);
    if ((v150 & 1) == 0)
    {
      v151(v148, 1LL, 1LL, v149);
      swift_release();
      return sub_100015794(v148, &qword_1009AA900);
    }

    v151(v148, 0LL, 1LL, v149);
    uint64_t v104 = v170;
    sub_10002218C(v148, v170, type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v152 = v184;
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v153 = type metadata accessor for Logger(0LL);
    uint64_t v154 = sub_10000A720(v153, (uint64_t)qword_100A2AA68);
    unint64_t v155 = (os_log_s *)Logger.logObject.getter(v154);
    os_log_type_t v156 = static os_log_type_t.default.getter(v155);
    BOOL v157 = os_log_type_enabled(v155, v156);
    uint64_t v158 = v187;
    uint64_t v159 = v186;
    if (v157)
    {
      unint64_t v160 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v160 = 0;
      _os_log_impl((void *)&_mh_execute_header, v155, v156, "Updating sessions for NotifyWhenFound changes.", v160, 2u);
      swift_slowDealloc(v160, -1LL, -1LL);
    }

    uint64_t v161 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
    uint64_t v162 = *(unsigned __int8 *)(v159 + 80);
    uint64_t v163 = (v162 + 32) & ~v162;
    uint64_t v164 = swift_allocObject(v161, v163 + *(void *)(v159 + 72), v162 | 7);
    *(_OWORD *)(v164 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v165 = v164 + v163;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v159 + 16))(v164 + v163, v104 + *(int *)(found + 24), v86);
    unint64_t v166 = sub_100768C98(v164);
    swift_setDeallocating(v164);
    swift_arrayDestroy(v165, 1LL, v86);
    swift_deallocClassInstance(v164, 32LL, 7LL);
    type metadata accessor for Transaction(0LL);
    unint64_t v167 = (void *)swift_allocObject(&unk_10095AC70, 48LL, 7LL);
    v167[2] = v152;
    v167[3] = v166;
    v167[4] = 0LL;
    v167[5] = v158;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v166);
    static Transaction.asyncTask(name:block:)( "SimpleBeaconUpdate-receivedSimpleBeacons",  40LL,  2LL,  &unk_1009AE678,  v167);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v121 = type metadata accessor for NotifyWhenFoundRecord;
    return sub_100018C68(v104, v121);
  }

  v125(v122, 0LL, 1LL, v123);
  uint64_t v126 = v173;
  sub_10002218C(v122, v173, type metadata accessor for SafeLocation);
  if (qword_10099B490 != -1) {
    swift_once(&qword_10099B490, sub_10043B5F4);
  }
  uint64_t v127 = type metadata accessor for Logger(0LL);
  uint64_t v128 = sub_10000A720(v127, (uint64_t)qword_100A2AA68);
  unint64_t v129 = (os_log_s *)Logger.logObject.getter(v128);
  os_log_type_t v130 = static os_log_type_t.default.getter(v129);
  BOOL v131 = os_log_type_enabled(v129, v130);
  uint64_t v132 = v187;
  uint64_t v133 = v184;
  if (v131)
  {
    unint64_t v134 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v134 = 0;
    _os_log_impl((void *)&_mh_execute_header, v129, v130, "Updating sessions for Safe Location changes.", v134, 2u);
    swift_slowDealloc(v134, -1LL, -1LL);
  }

  swift_bridgeObjectRetain(*(void *)(v126 + *(int *)(v123 + 52)));
  uint64_t v136 = sub_1006F1060(v135);
  swift_bridgeObjectRelease();
  type metadata accessor for Transaction(0LL);
  unint64_t v137 = (void *)swift_allocObject(&unk_10095AC98, 48LL, 7LL);
  v137[2] = v133;
  v137[3] = v136;
  v137[4] = 0LL;
  v137[5] = v132;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v136);
  static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40LL, 2LL, &unk_1009AE680, v137);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_100018C68(v126, type metadata accessor for SafeLocation);
}

uint64_t sub_100440708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v157 = a4;
  uint64_t v159 = a3;
  uint64_t v6 = sub_100004AEC(&qword_1009AA900);
  __chkstk_darwin(v6);
  uint64_t v140 = (char *)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  uint64_t v8 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v139 = (uint64_t)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  __chkstk_darwin(v10);
  uint64_t v144 = (char *)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = type metadata accessor for SafeLocation(0LL);
  uint64_t v143 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v141 = (uint64_t)&v137 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009AA840);
  __chkstk_darwin(v13);
  unint64_t v151 = (char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v152 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v150 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v146 = (uint64_t)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v155 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v19 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  uint64_t v153 = (uint64_t)&v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC(&qword_1009AE600);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v24);
  uint64_t v154 = (uint64_t)&v137 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v158 = type metadata accessor for UUID(0LL);
  uint64_t v160 = *(void *)(v158 - 8);
  uint64_t v26 = __chkstk_darwin(v158);
  uint64_t v149 = (char *)&v137 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v148 = (uint64_t)&v137 - v29;
  __chkstk_darwin(v28);
  unint64_t v147 = (char *)&v137 - v30;
  uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v137 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v137 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v167, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v138 = v8;
    uint64_t v156 = result;
    uint64_t v39 = a1;
    sub_100013044(a1, (uint64_t)v163);
    uint64_t v40 = sub_100004AEC(&qword_1009A3308);
    uint64_t v41 = sub_100004AEC(&qword_1009B0530);
    if ((swift_dynamicCast(v161, v163, v40, v41, 6LL) & 1) != 0)
    {
      sub_100012EC0(v161, (uint64_t)&v164);
      uint64_t v42 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
      uint64_t v43 = *(unsigned __int8 *)(v160 + 80);
      uint64_t v44 = (v43 + 32) & ~v43;
      uint64_t v45 = swift_allocObject(v42, v44 + *(void *)(v160 + 72), v43 | 7);
      *(_OWORD *)(v45 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v46 = v45 + v44;
      uint64_t v48 = v165;
      uint64_t v47 = v166;
      sub_100012ED8(&v164, v165);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v47 + 8) + 8LL) + 32LL))(v48);
      uint64_t v49 = sub_1006F1060(v45);
      swift_setDeallocating(v45);
      uint64_t v50 = v158;
      swift_arrayDestroy(v46, 1LL, v158);
      swift_deallocClassInstance(v45, 32LL, 7LL);
      *(void *)&v161[0] = v49;
      sub_100013044((uint64_t)&v164, (uint64_t)v163);
      char v51 = swift_dynamicCast(v33, v163, v41, v34, 6LL);
      uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
      if ((v51 & 1) != 0)
      {
        v52(v33, 0LL, 1LL, v34);
        sub_10002218C((uint64_t)v33, (uint64_t)v37, type metadata accessor for SharedBeaconRecord);
        sub_10001581C((uint64_t)&v37[*(int *)(v34 + 80)], (uint64_t)v23, &qword_1009AE600);
        uint64_t v53 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
        int v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48LL))(v23, 1LL, v53);
        uint64_t v55 = v159;
        if (v54 == 1)
        {
          sub_100015794((uint64_t)v23, &qword_1009AE600);
          uint64_t v56 = v154;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v160 + 56))(v154, 1LL, 1LL, v50);
        }

        else
        {
          uint64_t v56 = v154;
          sub_10001581C((uint64_t)&v23[*(int *)(v53 + 20)], v154, &qword_10099D8A0);
          sub_100018C68((uint64_t)v23, type metadata accessor for SharedBeaconRecord.PropertyListContent);
          uint64_t v80 = v160;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v160 + 48))(v56, 1LL, v50) != 1)
          {
            unint64_t v100 = v147;
            (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v147, v56, v50);
            uint64_t v101 = v149;
            (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v149, v100, v50);
            uint64_t v102 = v148;
            sub_1000BD768(v148, v101);
            unint64_t v103 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
            v103(v102, v50);
            v103((uint64_t)v100, v50);
            sub_100018C68((uint64_t)v37, type metadata accessor for SharedBeaconRecord);
            goto LABEL_25;
          }
        }

        sub_100018C68((uint64_t)v37, type metadata accessor for SharedBeaconRecord);
        sub_100015794(v56, &qword_10099D8A0);
      }

      else
      {
        v52(v33, 1LL, 1LL, v34);
        sub_100015794((uint64_t)v33, (uint64_t *)&unk_1009AE470);
        uint64_t v55 = v159;
      }

void sub_100441824(uint64_t a1)
{
  *(void *)(v1 + 184) = a1;
  *(_BYTE *)(v1 + 192) = 0;
  if (qword_10099B490 != -1) {
    swift_once(&qword_10099B490, sub_10043B5F4);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AA68);
  oslog = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v5 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    uint64_t v8 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Stored last connectable device count %ld.", v6, 0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
  }

void sub_100441948()
{
  uint64_t v1 = (void *)v0;
  if (*(void *)(v0 + 136))
  {
    *(void *)(v0 + 136) = 0LL;
    swift_release();
    *(void *)(v0 + 184) = 0LL;
    *(_BYTE *)(v0 + 192) = 1;
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AA68);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Unsubscribed from connectable devices change publisher.",  v6,  2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }
  }

  if (v1[18])
  {
    v1[18] = 0LL;
    swift_release();
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_100A2AA68);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unsubscribed from recordPublisherSubject publisher.", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }
  }

  if (v1[19])
  {
    v1[19] = 0LL;
    swift_release();
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AA68);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Unsubscribed from beaconRecordDeletedSubject publisher.",  v16,  2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }
  }

  if (v1[22])
  {
    swift_retain();
    sub_100004AEC((uint64_t *)&unk_1009A5470);
    Task.cancel()();
    swift_release();
    v1[22] = 0LL;
    swift_release();
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_10000A720(v17, (uint64_t)qword_100A2AA68);
    oslog = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v19 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v19, "Unsubscribed from localFindableRecordUpdateTask.", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }
  }

uint64_t sub_100441CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[34] = a2;
  v3[35] = a3;
  v3[33] = a1;
  return swift_task_switch(sub_100441CE0, 0LL, 0LL);
}

uint64_t sub_100441CE0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 264) + 128LL);
  uint64_t v2 = sub_10043B674(*(void **)(v0 + 272), *(void *)(v0 + 280));
  *(void *)(v0 + 288) = v2;
  if (v2)
  {
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 296) = v3;
    uint64_t v4 = sub_100004AEC(&qword_1009AE410);
    *uint64_t v3 = v0;
    v3[1] = sub_10044204C;
    return withCheckedContinuation<A>(isolation:function:_:)( v0 + 216,  0LL,  0LL,  0x736553636E797361LL,  0xED0000736E6F6973LL,  sub_100450CC0,  v1,  v4);
  }

  else
  {
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v7 = *(void **)(v0 + 272);
    uint64_t v6 = *(void **)(v0 + 280);
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2AA68);
    uint64_t v10 = v6[1];
    unint64_t v9 = v6[2];
    *(void *)(v0 + 248) = v6[4];
    swift_bridgeObjectRetain(v9);
    id v11 = v7;
    sub_1001B1998((void *)(v0 + 248));
    id v12 = v11;
    swift_bridgeObjectRetain(v9);
    uint64_t v13 = sub_1001B1998((void *)(v0 + 248));
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter(v14);
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = *(void **)(v0 + 272);
    if (v16)
    {
      uint64_t v18 = swift_slowAlloc(22LL, -1LL);
      uint64_t v28 = swift_slowAlloc(64LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)uint64_t v18 = 136315394;
      id v19 = [v17 debugDescription];
      log = v14;
      uint64_t v20 = v10;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      os_log_type_t type = v15;
      unint64_t v23 = v22;

      *(void *)(v0 + 232) = sub_1003F11D4(v21, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();

      *(_WORD *)(v18 + 12) = 2082;
      if (v9) {
        uint64_t v24 = v20;
      }
      else {
        uint64_t v24 = 0x6E776F6E6B6E75LL;
      }
      if (v9) {
        unint64_t v25 = v9;
      }
      else {
        unint64_t v25 = 0xE700000000000000LL;
      }
      swift_bridgeObjectRetain(v9);
      *(void *)(v0 + 224) = sub_1003F11D4(v24, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001B19C0((void *)(v0 + 248));
      swift_bridgeObjectRelease();
      sub_1001B19C0((void *)(v0 + 248));
      _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "Failed to add connection %s, bundle: %{public}s.",  (uint8_t *)v18,  0x16u);
      swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease();
      sub_1001B19C0((void *)(v0 + 248));
      swift_bridgeObjectRelease();
      sub_1001B19C0((void *)(v0 + 248));
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10044204C()
{
  return swift_task_switch(sub_1004420A0, 0LL, 0LL);
}

uint64_t sub_1004420A0()
{
  uint64_t v1 = *(void *)(v0 + 216);
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    if (v1 < 0) {
      uint64_t v2 = *(void *)(v0 + 216);
    }
    else {
      uint64_t v2 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v3 = __CocoaSet.count.getter(v2);
  }

  else
  {
    uint64_t v3 = *(void *)(v1 + 16);
  }

  swift_bridgeObjectRelease();
  if (v3 == 1)
  {
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 120))
    {
      sub_100012EC0((__int128 *)(v0 + 96), v0 + 136);
      sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_10099C968 + dword_10099C968);
      os_log_type_t v5 = (void *)swift_task_alloc(unk_10099C96C);
      *(void *)(v0 + 304) = v5;
      *os_log_type_t v5 = v0;
      v5[1] = sub_100442210;
      return v8();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v6 = (void *)swift_task_alloc(dword_1009AE1D4);
    *(void *)(v0 + 328) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1004423C0;
    uint64_t v7 = *(void *)(v0 + 264);
    v6[32] = v7;
    return swift_task_switch(sub_10043E300, v7, 0LL);
  }

  return result;
}

uint64_t sub_100442210(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 304LL);
  *(void *)(*(void *)v1 + 312LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10044226C, 0LL, 0LL);
}

uint64_t sub_10044226C()
{
  uint64_t v1 = v0 + 17;
  if (v0[39])
  {
    uint64_t v2 = v0[33];
    uint64_t v3 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    CurrentValueSubject.value.getter(v0 + 32, v3);
    v0[40] = v0[32];
    uint64_t v4 = sub_10044231C;
    uint64_t v5 = v2;
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v6 = (void *)swift_task_alloc(dword_1009AE1D4);
    v0[41] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1004423C0;
    uint64_t v5 = v0[33];
    v6[32] = v5;
    uint64_t v4 = sub_10043E300;
  }

  return swift_task_switch(v4, v5, 0LL);
}

uint64_t sub_10044231C()
{
  return swift_task_switch(sub_10044235C, 0LL, 0LL);
}

uint64_t sub_10044235C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009AE1D4);
  *(void *)(v0 + 328) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1004423C0;
  uint64_t v2 = *(void *)(v0 + 264);
  v1[32] = v2;
  return swift_task_switch(sub_10043E300, v2, 0LL);
}

uint64_t sub_1004423C0()
{
  return swift_task_switch(sub_100442414, 0LL, 0LL);
}

uint64_t sub_100442414()
{
  uint64_t v2 = *(__int128 **)(v0 + 280);
  uint64_t v1 = *(void *)(v0 + 288);
  if ((*((_BYTE *)v2 + 24) & 1) != 0)
  {
    uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE418);
    uint64_t inited = swift_initStackObject(v4, v0 + 16);
    *(void *)(v0 + 336) = inited;
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(inited + 32) = v1;
    sub_100015750((uint64_t)v2 + 8, v0 + 200, &qword_1009A34B0);
    *(void *)(v0 + 240) = *((void *)v2 + 4);
    __int128 v7 = *v2;
    __int128 v6 = v2[1];
    *(void *)(inited + 72) = *((void *)v2 + 4);
    *(_OWORD *)(inited + 40) = v7;
    *(_OWORD *)(inited + 56) = v6;
    swift_retain();
    sub_10020EE10(v0 + 200);
    sub_1001B1998((void *)(v0 + 240));
    uint64_t v8 = (void *)swift_task_alloc(dword_1009AE1E4);
    *(void *)(v0 + 344) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100442534;
    uint64_t v9 = *(void *)(v0 + 264);
    v8[18] = inited;
    v8[19] = v9;
    return swift_task_switch(sub_100442B94, v9, 0LL);
  }

  else
  {
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100442534()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336LL);
  uint64_t v2 = v1 + 32;
  swift_task_dealloc(*(void *)(*(void *)v0 + 344LL));
  swift_setDeallocating(v1);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B1410);
  swift_arrayDestroy(v2, v3, v4);
  return swift_task_switch(sub_1004425B4, 0LL, 0LL);
}

uint64_t sub_1004425B4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004425E8()
{
  *(void *)(v1 + 32) = v0;
  return swift_task_switch(sub_100442600, v0, 0LL);
}

uint64_t sub_100442600()
{
  if (qword_10099B490 != -1) {
    swift_once(&qword_10099B490, sub_10043B5F4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2AA68);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Pre-throttle updateAllBeacons.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  v0[2] = 0xD000000000000010LL;
  v0[3] = 0x8000000100862CC0LL;
  swift_retain();
  __int128 v7 = (void *)swift_task_alloc(v6);
  v0[5] = v7;
  *__int128 v7 = v0;
  v7[1] = sub_100442764;
  return ((uint64_t (*)(void *, void *, void, void (__swiftcall *)(), void))v9)( v0 + 2,  &unk_1009AE580,  v0[4],  DeviceInformationProviderFactory.init(),  0LL);
}

uint64_t sub_100442764()
{
  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v3 = *v1;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (v0) {
    return swift_task_switch(sub_1004427EC, *(void *)(v3 + 32), 0LL);
  }
  else {
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
}

uint64_t sub_1004427EC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004427F8(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  *(void *)(v1 + 24) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100442850, 0LL, 0LL);
}

uint64_t sub_100442850()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  uint64_t v3 = swift_retain(v2);
  UUID.init()(v3);
  uint64_t v4 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v1,  &unk_1009AE590,  v2,  &unk_1009AE598,  0LL);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v4);
  swift_release(v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

uint64_t sub_1004428EC(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return swift_task_switch(sub_100442904, 0LL, 0LL);
}

uint64_t sub_100442904()
{
  if (qword_10099B490 != -1) {
    swift_once(&qword_10099B490, sub_10043B5F4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2AA68);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Post-throttle updateAllBeacons.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[3];

  uint64_t v7 = *(void *)(v6 + 128);
  uint64_t v8 = swift_task_alloc(32LL);
  v0[4] = v8;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v8 + 24) = 512LL;
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v9;
  uint64_t v10 = sub_100004AEC(&qword_1009AE4E8);
  *uint64_t v9 = v0;
  v9[1] = sub_100442A68;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD00000000000001BLL,  0x8000000100862CE0LL,  sub_1004516F8,  v8,  v10);
}

uint64_t sub_100442A68()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 40LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100442AC4, 0LL, 0LL);
}

uint64_t sub_100442AC4()
{
  uint64_t v1 = v0[2];
  v0[6] = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_1009AE1E4);
  v0[7] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100442B28;
  uint64_t v3 = v0[3];
  v2[18] = v1;
  v2[19] = v3;
  return swift_task_switch(sub_100442B94, v3, 0LL);
}

uint64_t sub_100442B28()
{
  uint64_t v1 = *(void *)(*v0 + 48);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 56));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100442B7C(uint64_t a1)
{
  *(void *)(v2 + 144) = a1;
  *(void *)(v2 + 152) = v1;
  return swift_task_switch(sub_100442B94, v1, 0LL);
}

uint64_t sub_100442B94()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 144) + 16LL);
  *(void *)(v0 + 160) = v1;
  if (!v1) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    os_log_type_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 168) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100442CA8;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100442CA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 17sub_100431720(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), 6LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100442D08, v3, 0LL);
}

uint64_t sub_100442D08()
{
  uint64_t v1 = *(void *)(v0 + 176);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_10000A720(v3, (uint64_t)qword_100A2AA68);
    swift_bridgeObjectRetain(v2);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(v0 + 160);
      uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v8 = 134217984;
      *(void *)(v0 + 136) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Updating all beacons for %ld session(s).", v8, 0xCu);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    return swift_task_switch(sub_100442F28, *(void *)(v0 + 176), 0LL);
  }

  else
  {
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_10000A720(v9, (uint64_t)qword_100A2AA68);
    id v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to get BeaconStore.", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100442F28()
{
  *(void *)(v0 + 184) = *(void *)(*(void *)(v0 + 176) + 136LL);
  swift_retain();
  return swift_task_switch(sub_100442F6C, 0LL, 0LL);
}

uint64_t sub_100442F6C()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[24] = v3;
  v3[2] = v1;
  v3[3] = sub_100117B74;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[25] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE510);
  v0[26] = v5;
  *uint64_t v4 = v0;
  v4[1] = sub_10044302C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 15,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100451C84,  v3,  v5);
}

uint64_t sub_10044302C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 192);
  uint64_t v3 = *(void *)(*v0 + 152);
  swift_task_dealloc(*(void *)(*v0 + 200));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 2swift_weakDestroy(v0 + 16) = *(void *)(v1 + 120);
  return swift_task_switch(sub_1004430A4, v3, 0LL);
}

uint64_t sub_1004430A4()
{
  uint64_t v1 = v0[22];
  v0[16] = v0[27];
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  v0[28] = v2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_1000372EC(&qword_1009AA640, (uint64_t *)&unk_1009AE510, (uint64_t)&protocol conformance descriptor for [A]);
  *uint64_t v2 = v0;
  v2[1] = sub_100443148;
  return Sequence.asyncMap<A>(_:)(&unk_1009AE568, v1, v0[26], v3, v4);
}

uint64_t sub_100443148(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 232LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1004431B0, v3, 0LL);
}

uint64_t sub_1004431B0()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[18];
  uint64_t v3 = sub_1006F1060(v0[29]);
  v0[30] = v3;
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)swift_task_alloc(dword_1009AE1F4);
  v0[31] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100443230;
  return sub_100444AAC(v3, v2, v1);
}

uint64_t sub_100443230()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 248LL));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100443290, v1, 0LL);
}

uint64_t sub_100443290()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004432C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  void v3[9] = a3;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v3[12] = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[13] = swift_task_alloc(v7);
  v3[14] = swift_task_alloc(v7);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  v3[15] = v8;
  v3[16] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100443360, 0LL, 0LL);
}

uint64_t sub_100443360()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  sub_100012ED8(v1, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8LL) + 32LL))(v3);
  return swift_task_switch(sub_1004433CC, v2, 0LL);
}

uint64_t sub_1004433CC()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  v0[17] = *(void *)(v6 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v5);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_10095AA18, v8 + v3, v7 | 7);
  v0[18] = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v6;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[19] = v10;
  v10(v9 + v8, v2, v5);
  swift_retain();
  return swift_task_switch(sub_10044347C, 0LL, 0LL);
}

uint64_t sub_10044347C()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[20] = v3;
  v3[2] = v2;
  v3[3] = sub_100451648;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[21] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100443524;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[16],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100451C88,  v3,  v0[15]);
}

uint64_t sub_100443524()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 112LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 88LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 168LL));
  swift_release();
  swift_task_dealloc(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch(sub_1004435B4, 0LL, 0LL);
}

uint64_t sub_1004435B4()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  sub_100013044(*(void *)(v0 + 64), v0 + 16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1LL, v2) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v6 = *(void *)(v0 + 40);
    sub_100012ED8((void *)(v0 + 16), v6);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 8) + 8LL) + 32LL))(v6);
    sub_100015794(v4, &qword_10099D8A0);
  }

  else
  {
    (*(void (**)(void, void, void))(v0 + 152))( *(void *)(v0 + 56),  *(void *)(v0 + 128),  *(void *)(v0 + 80));
  }

  uint64_t v7 = *(void *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 112);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004436A8(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  void v3[9] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[12] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[13] = v5;
  v3[14] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10044370C, v2, 0LL);
}

uint64_t sub_10044370C()
{
  if (qword_10099B490 != -1) {
    swift_once(&qword_10099B490, sub_10043B5F4);
  }
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AA68);
  uint64_t v3 = sub_100013044(v1, v0 + 16);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v34 = *(void *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = v35;
    *(_DWORD *)uint64_t v8 = 141558275;
    *(void *)(v0 + 56) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 48);
    sub_100012ED8((void *)(v0 + 16), v10);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8LL) + 32LL))(v10);
    uint64_t v11 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v7, v11);
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v6, v7);
    *(void *)(v0 + 64) = sub_1003F11D4(v12, v14, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "updateBeaconConnectedState. Beacon: %{private,mask.hash}s",  (uint8_t *)v8,  0x16u);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  }

  uint64_t v16 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v17 = *(void *)(v0 + 88);
  uint64_t v18 = *(void *)(v0 + 96);
  id v19 = *(void **)(v0 + 72);
  uint64_t v20 = *(void *)(v0 + 80);
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v22 = *(void *)(v16 + 72);
  uint64_t v23 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v24 = (v23 + 32) & ~v23;
  uint64_t v25 = swift_allocObject(v21, v24 + v22, v23 | 7);
  *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v26 = v25 + v24;
  uint64_t v27 = v19[3];
  uint64_t v28 = v19[4];
  sub_100012ED8(v19, v27);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v28 + 8) + 8LL) + 32LL))(v27);
  uint64_t v29 = sub_100768C98(v25);
  swift_setDeallocating(v25);
  swift_arrayDestroy(v26, 1LL, v18);
  swift_deallocClassInstance(v25, 32LL, 7LL);
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  uint64_t v30 = (void *)swift_allocObject(&unk_10095A9F0, 48LL, 7LL);
  v30[2] = v17;
  v30[3] = v29;
  v30[4] = 0LL;
  v30[5] = v20;
  swift_retain();
  swift_bridgeObjectRetain(v29);
  uint64_t v31 = swift_retain();
  UUID.init()(v31);
  uint64_t v32 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v15,  &unk_1009AE550,  v30,  &unk_1009AE558,  0LL);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v32);
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100443A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v3[8] = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  void v3[9] = swift_task_alloc(v7);
  v3[10] = swift_task_alloc(v7);
  v3[11] = swift_task_alloc(v7);
  v3[12] = swift_task_alloc(v7);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  v3[13] = v8;
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[14] = swift_task_alloc(v9);
  v3[15] = swift_task_alloc(v9);
  return swift_task_switch(sub_100443B60, 0LL, 0LL);
}

uint64_t sub_100443B60()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = *(void *)(v0 + 56);
  char v3 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 200) = v3;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << v3;
  if (-(-1LL << v3) < 64) {
    uint64_t v4 = ~(-1LL << -(char)(-1LL << v3));
  }
  unint64_t v6 = v4 & *(void *)(v1 + 56);
  __n128 v7 = swift_bridgeObjectRetain_n(v1, 2LL);
  if (v6)
  {
    uint64_t v8 = 0LL;
    unint64_t v9 = __clz(__rbit64(v6));
    uint64_t v10 = (v6 - 1) & v6;
    goto LABEL_5;
  }

  unint64_t v22 = 63 - v5;
  unint64_t v23 = *(void *)(v1 + 64);
  if (!v23)
  {
    if (v22 >= 0xC0)
    {
      unint64_t v23 = *(void *)(v1 + 72);
      if (v23)
      {
        uint64_t v8 = 2LL;
        goto LABEL_10;
      }

      if (v22 >= 0x100)
      {
        unint64_t v23 = *(void *)(v1 + 80);
        if (v23)
        {
          uint64_t v8 = 3LL;
          goto LABEL_10;
        }

        if (v22 >= 0x140)
        {
          unint64_t v23 = *(void *)(v1 + 88);
          if (v23)
          {
            uint64_t v8 = 4LL;
            goto LABEL_10;
          }

          uint64_t v24 = 0LL;
          uint64_t v25 = v22 >> 6;
          if (v25 <= 5) {
            uint64_t v25 = 5LL;
          }
          uint64_t v26 = v25 - 5;
          while (v26 != v24)
          {
            unint64_t v23 = *(void *)(v1 + 96 + 8 * v24++);
            if (v23)
            {
              uint64_t v8 = v24 + 4;
              goto LABEL_10;
            }
          }
        }
      }
    }

uint64_t sub_100443E60()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[20];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[18];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v6 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[4];
  v0[21] = *(void *)(v8 + 136);
  v2(v4, v3, v7);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v9 + 24) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_10095AC20, v10 + v5, v9 | 7);
  v0[22] = v11;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v8;
  v1(v11 + v10, v4, v7);
  swift_retain();
  return swift_task_switch(sub_100443F10, 0LL, 0LL);
}

uint64_t sub_100443F10()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[23] = v3;
  v3[2] = v2;
  v3[3] = sub_100451648;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[24] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100443FB8;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[14],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100451C88,  v3,  v0[13]);
}

uint64_t sub_100443FB8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 192LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100444020, 0LL, 0LL);
}

uint64_t sub_100444020()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 152))(v1, 1LL, v2) == 1)
  {
    (*(void (**)(void, uint64_t))(*(void *)(v0 + 56) + 8LL))(*(void *)(v0 + 88), v2);
    uint64_t result = sub_100015794(v1, &qword_10099D8A0);
    int64_t v4 = *(void *)(v0 + 128);
    unint64_t v5 = *(void *)(v0 + 136);
    if (v5)
    {
LABEL_3:
      uint64_t v6 = (v5 - 1) & v5;
      unint64_t v7 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v8 = *(void *)(v0 + 24);
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v16 = *(void *)(v0 + 96);
    uint64_t v19 = *(char **)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v20 = *(void *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 160))(v18, v1, v2);
    v15(v19, v18, v2);
    sub_1000BD768(v16, v19);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v21(v16, v2);
    v21(v18, v2);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v21)(v17, v2);
    int64_t v4 = *(void *)(v0 + 128);
    unint64_t v5 = *(void *)(v0 + 136);
    if (v5) {
      goto LABEL_3;
    }
  }

  int64_t v22 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
  }

  else
  {
    int64_t v23 = (unint64_t)((1LL << *(_BYTE *)(v0 + 200)) + 63) >> 6;
    uint64_t v8 = *(void *)(v0 + 24);
    if (v22 >= v23) {
      goto LABEL_22;
    }
    uint64_t v24 = v8 + 56;
    unint64_t v25 = *(void *)(v8 + 56 + 8 * v22);
    ++v4;
    if (v25)
    {
LABEL_10:
      uint64_t v6 = (v25 - 1) & v25;
      unint64_t v7 = __clz(__rbit64(v25)) + (v4 << 6);
LABEL_4:
      *(void *)(v0 + 128) = v4;
      *(void *)(v0 + 136) = v6;
      uint64_t v9 = *(void *)(v0 + 120);
      uint64_t v10 = *(void *)(v0 + 48);
      uint64_t v11 = *(void *)(v0 + 56);
      unint64_t v12 = *(void *)(v8 + 48) + *(void *)(v11 + 72) * v7;
      unint64_t v13 = *(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16);
      *(void *)(v0 + 144) = v13;
      v13(v9, v12, v10);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v9, 0LL, 1LL, v10);
      unint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      *(void *)(v0 + 152) = v14;
      if (v14(v9, 1LL, v10) != 1)
      {
        uint64_t v26 = *(void *)(v0 + 120);
        uint64_t v27 = *(void *)(v0 + 88);
        uint64_t v28 = *(void *)(v0 + 48);
        uint64_t v29 = *(void *)(v0 + 32);
        uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 56) + 32LL);
        *(void *)(v0 + 160) = v30;
        v30(v27, v26, v28);
        return swift_task_switch(sub_100443E60, v29, 0LL);
      }

      goto LABEL_23;
    }

    int64_t v4 = v22 + 1;
    if (v22 + 1 >= v23) {
      goto LABEL_22;
    }
    unint64_t v25 = *(void *)(v24 + 8 * v4);
    if (v25) {
      goto LABEL_10;
    }
    int64_t v4 = v22 + 2;
    if (v22 + 2 >= v23) {
      goto LABEL_22;
    }
    unint64_t v25 = *(void *)(v24 + 8 * v4);
    if (v25) {
      goto LABEL_10;
    }
    int64_t v31 = v22 + 3;
    if (v31 >= v23)
    {
LABEL_22:
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 56) + 56LL))( *(void *)(v0 + 120),  1LL,  1LL,  *(void *)(v0 + 48));
LABEL_23:
      swift_release();
      uint64_t v32 = *(void *)(v0 + 112);
      uint64_t v33 = *(void *)(v0 + 120);
      uint64_t v34 = *(void *)(v0 + 96);
      uint64_t v41 = *(void *)(v0 + 88);
      uint64_t v42 = *(void *)(v0 + 80);
      uint64_t v43 = *(void *)(v0 + 72);
      uint64_t v35 = *(void *)(v0 + 40);
      uint64_t v36 = *(void *)(v0 + 16);
      uint64_t v37 = *(void *)(v0 + 24);
      type metadata accessor for WorkItemQueue.WorkItem(0LL);
      uint64_t v38 = (void *)swift_allocObject(&unk_10095ABF8, 40LL, 7LL);
      v38[2] = v37;
      v38[3] = v35;
      v38[4] = v36;
      swift_bridgeObjectRetain(v37);
      uint64_t v39 = swift_retain();
      UUID.init()(v39);
      uint64_t v40 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v34,  &unk_1009AE648,  v38,  &unk_1009AE650,  0LL);
      dispatch thunk of WorkItemQueue.enqueue(_:)(v40);
      swift_release();
      swift_task_dealloc(v33);
      swift_task_dealloc(v32);
      swift_task_dealloc(v34);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    unint64_t v25 = *(void *)(v24 + 8 * v31);
    if (v25)
    {
      int64_t v4 = v31;
      goto LABEL_10;
    }

    while (1)
    {
      int64_t v4 = v31 + 1;
      if (__OFADD__(v31, 1LL)) {
        break;
      }
      if (v4 >= v23) {
        goto LABEL_22;
      }
      unint64_t v25 = *(void *)(v24 + 8 * v4);
      ++v31;
      if (v25) {
        goto LABEL_10;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1004443A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_1004443C0, 0LL, 0LL);
}

uint64_t sub_1004443C0()
{
  if (qword_10099B490 != -1) {
    swift_once(&qword_10099B490, sub_10043B5F4);
  }
  uint64_t v1 = v0[6];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AA68);
  swift_bridgeObjectRetain_n(v1, 2LL);
  int64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[6];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v9;
    *(_DWORD *)uint64_t v8 = 141558275;
    v0[4] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    uint64_t v10 = type metadata accessor for UUID(0LL);
    uint64_t v11 = sub_100015C48( &qword_1009A58F0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v7);
    uint64_t v13 = Set.description.getter(v12, v10, v11);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    v0[5] = sub_1003F11D4(v13, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v7, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Updating sessions for BeaconRecord removed. Beacons: %{private,mask.hash}s",  (uint8_t *)v8,  0x16u);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[6], 2LL);
  }

  uint64_t v16 = *(void *)(v0[7] + 128LL);
  swift_bridgeObjectRetain(v0[6]);
  uint64_t v18 = sub_1002FE60C(v17);
  v0[9] = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = swift_task_alloc(32LL);
  v0[10] = v19;
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v16;
  *(void *)(v19 + 24) = v18;
  uint64_t v20 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[11] = v20;
  uint64_t v21 = sub_100004AEC(&qword_1009AE4E8);
  *uint64_t v20 = v0;
  v20[1] = sub_10044468C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD00000000000001ELL,  0x8000000100862CA0LL,  sub_100451CBC,  v19,  v21);
}

uint64_t sub_10044468C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 88LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1004446E8, 0LL, 0LL);
}

uint64_t sub_1004446E8()
{
  uint64_t v20 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v20 + 16);
  if (!v1)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = (void **)(v0 + 24);
  uint64_t v21 = *(void *)(v0 + 64);
  uint64_t v3 = (uint64_t *)(v20 + 72);
  while (1)
  {
    uint64_t v5 = *v3;
    swift_bridgeObjectRetain(*(v3 - 2));
    swift_retain();
    swift_bridgeObjectRetain(v5);
    XPCSession.proxy.getter(v6);
    uint64_t v7 = *v2;
    if (!*v2) {
      goto LABEL_4;
    }
    uint64_t v8 = *(void *)(v21 + 16);
    if (v8) {
      break;
    }
LABEL_3:
    type metadata accessor for UUID(0LL);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    [v7 receivedSimpleBeaconRemovals:isa];
    swift_unknownObjectRelease(v7);

LABEL_4:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 += 6;
    if (!--v1) {
      goto LABEL_14;
    }
  }

  int64_t v22 = *v2;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v10 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  unint64_t v14 = (void *)swift_allocObject(v9, v13 + v11 * v8, v12 | 7);
  uint64_t result = j__malloc_size(v14);
  if (v11)
  {
    if (result - v13 == 0x8000000000000000LL && v11 == -1) {
      goto LABEL_17;
    }
    uint64_t v17 = v2;
    uint64_t v18 = *(void *)(v0 + 64);
    v14[2] = v8;
    v14[3] = 2 * ((result - v13) / v11);
    swift_bridgeObjectRetain_n(v18, 2LL);
    uint64_t v19 = sub_1003016FC(&v23, (uint64_t)v14 + v13, v8, v18);
    uint64_t result = sub_1000A6F30(v23);
    if (v19 != v8) {
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
    uint64_t v2 = v17;
    uint64_t v7 = v22;
    goto LABEL_3;
  }

  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1004448FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  void v4[6] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10044495C, a1, 0LL);
}

uint64_t sub_10044495C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  uint64_t v6 = (void *)swift_allocObject(&unk_10095AC48, 48LL, 7LL);
  v6[2] = v5;
  v6[3] = v4;
  v6[4] = v3;
  void v6[5] = v2;
  swift_bridgeObjectRetain(v3);
  swift_retain(v2);
  swift_retain(v5);
  uint64_t v7 = swift_bridgeObjectRetain(v4);
  UUID.init()(v7);
  uint64_t v8 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v1,  &unk_1009AE660,  v6,  &unk_1009AE558,  0LL);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v8);
  swift_release(v8);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100444A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_1009AE1F4);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1000136E8;
  return sub_100444AAC(a2, a3, a4);
}

uint64_t sub_100444AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[81] = v3;
  v4[80] = a3;
  v4[79] = a2;
  v4[78] = a1;
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  v4[82] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[83] = v6;
  v4[84] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v4[85] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[86] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[87] = swift_task_alloc(v9);
  v4[88] = swift_task_alloc(v9);
  unint64_t v10 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099D8A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[89] = swift_task_alloc(v10);
  v4[90] = swift_task_alloc(v10);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  v4[91] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SharedBeaconRecord(0LL);
  v4[92] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[93] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[94] = swift_task_alloc(v14);
  v4[95] = swift_task_alloc(v14);
  uint64_t v15 = type metadata accessor for ContinuousClock.Instant(0LL);
  v4[96] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v4[97] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[98] = swift_task_alloc(v17);
  v4[99] = swift_task_alloc(v17);
  v4[100] = swift_task_alloc(v17);
  v4[101] = swift_task_alloc(v17);
  v4[102] = swift_task_alloc(v17);
  v4[103] = swift_task_alloc(v17);
  v4[104] = swift_task_alloc(v17);
  v4[105] = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  v4[106] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v4[107] = v19;
  unint64_t v20 = (*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[108] = swift_task_alloc(v20);
  v4[109] = swift_task_alloc(v20);
  v4[110] = swift_task_alloc(v20);
  v4[111] = swift_task_alloc(v20);
  v4[112] = swift_task_alloc(v20);
  uint64_t v21 = type metadata accessor for ContinuousClock(0LL);
  v4[113] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v4[114] = v22;
  v4[115] = swift_task_alloc((*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100444CE4, v3, 0LL);
}

uint64_t sub_100444CE4()
{
  uint64_t v1 = v0[79];
  if (v1)
  {
    v0[121] = v1;
    v0[67] = v0[78];
    uint64_t v2 = async function pointer to Sequence.asyncMap<A>(_:)[1];
    swift_bridgeObjectRetain(v1);
    uint64_t v3 = (void *)swift_task_alloc(v2);
    v0[122] = v3;
    uint64_t v4 = sub_100004AEC(&qword_1009A0B30);
    uint64_t v5 = sub_1000372EC(&qword_1009AE508, &qword_1009A0B30, (uint64_t)&protocol conformance descriptor for Set<A>);
    *uint64_t v3 = v0;
    v3[1] = sub_100444FF8;
    return Sequence.asyncMap<A>(_:)(&unk_1009AE4F8, v0[80], v4, v0[106], v5);
  }

  else
  {
    uint64_t v7 = v0[78];
    v0[116] = *(void *)(v0[81] + 128LL);
    swift_bridgeObjectRetain(v7);
    v0[117] = sub_1002FE60C(v8);
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_100444DE8, 0LL, 0LL);
  }

uint64_t sub_100444DE8()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 944) = v1;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 928);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 952) = v2;
  uint64_t v3 = sub_100004AEC(&qword_1009AE4E8);
  *uint64_t v2 = v0;
  v2[1] = sub_100444E98;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 480,  0LL,  0LL,  0xD00000000000001ELL,  0x8000000100862CA0LL,  sub_100451400,  v1,  v3);
}

uint64_t sub_100444E98()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 944LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 952LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100444EF8, 0LL, 0LL);
}

uint64_t sub_100444EF8()
{
  uint64_t v1 = v0[81];
  swift_release();
  v0[120] = v0[60];
  return swift_task_switch(sub_100444F40, v1, 0LL);
}

uint64_t sub_100444F40()
{
  uint64_t v1 = v0[79];
  v0[121] = v0[120];
  v0[67] = v0[78];
  uint64_t v2 = async function pointer to Sequence.asyncMap<A>(_:)[1];
  swift_bridgeObjectRetain(v1);
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[122] = v3;
  uint64_t v4 = sub_100004AEC(&qword_1009A0B30);
  uint64_t v5 = sub_1000372EC(&qword_1009AE508, &qword_1009A0B30, (uint64_t)&protocol conformance descriptor for Set<A>);
  *uint64_t v3 = v0;
  v3[1] = sub_100444FF8;
  return Sequence.asyncMap<A>(_:)(&unk_1009AE4F8, v0[80], v4, v0[106], v5);
}

uint64_t sub_100444FF8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 976);
  uint64_t v5 = *(void *)(*v2 + 648);
  *(void *)(v3 + 984) = a1;
  *(void *)(v3 + 992) = v1;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10044505C, v5, 0LL);
}

uint64_t sub_10044505C()
{
  if (qword_10099B490 != -1) {
    swift_once(&qword_10099B490, sub_10043B5F4);
  }
  uint64_t v1 = v0[123];
  v0[125] = sub_10000A720(v0[85], (uint64_t)qword_100A2AA68);
  uint64_t v2 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter(v3);
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = v0[123];
  if (v5)
  {
    uint64_t v7 = v0[106];
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    uint64_t v11 = Array.description.getter(v10, v7);
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    v0[77] = sub_1003F11D4(v11, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 77, v0 + 78, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "receivedSimpleBeaconUpdates - updating beacon identifiers: %s",  v8,  0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v6, 2LL);
  }

  return swift_task_switch(sub_100445240, v0[80], 0LL);
}

uint64_t sub_100445240()
{
  uint64_t v1 = v0[123];
  uint64_t v2 = v0[80];
  v0[126] = *(void *)(v2 + 136);
  uint64_t v3 = swift_allocObject(&unk_10095A950, 32LL, 7LL);
  v0[127] = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_bridgeObjectRetain(v1);
  swift_retain();
  return swift_task_switch(sub_1004452B0, 0LL, 0LL);
}

uint64_t sub_1004452B0()
{
  uint64_t v1 = v0[127];
  uint64_t v2 = v0[126];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[128] = v3;
  v3[2] = v2;
  v3[3] = sub_10045147C;
  v3[4] = v1;
  os_log_type_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[129] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE510);
  *os_log_type_t v4 = v0;
  v4[1] = sub_100445370;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 66,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117B7C,  v3,  v5);
}

uint64_t sub_100445370()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1024);
  uint64_t v3 = *(void *)(*v0 + 640);
  swift_task_dealloc(*(void *)(*v0 + 1032));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 1040) = *(void *)(v1 + 528);
  return swift_task_switch(sub_1004453EC, v3, 0LL);
}

uint64_t sub_1004453EC()
{
  uint64_t v1 = *(void *)(v0 + 648);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10044542C, v1, 0LL);
}

uint64_t sub_10044542C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 968);
  uint64_t v3 = *(void *)(v1 + 648);
  ContinuousClock.init()(a1);
  swift_retain_n(v3, 2LL);
  uint64_t v4 = swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v1 + 968);
    uint64_t v8 = *(void *)(v1 + 648);
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v51 = swift_slowAlloc(32LL, -1LL);
    uint64_t v53 = v51;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v10 = *(void *)(v8 + 128);
    uint64_t v54 = 60LL;
    unint64_t v55 = 0xE100000000000000LL;
    *(void *)(v1 + 592) = v10;
    swift_retain();
    uint64_t v11 = sub_100004AEC(&qword_1009AE530);
    uint64_t v12 = sub_1000372EC((unint64_t *)&unk_1009B5AF0, &qword_1009AE530, (uint64_t)&unk_100817578);
    v13._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v11, v12);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 8250LL;
    v14._object = (void *)0xE200000000000000LL;
    String.append(_:)(v14);
    v15._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v11, v12);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 62LL;
    v16._object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    swift_release();
    *(void *)(v1 + 600) = sub_1003F11D4(v54, v55, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 600, v1 + 608, v9 + 4, v9 + 12);
    swift_release_n(v8, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2048;
    uint64_t v17 = *(void *)(v7 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v1 + 608) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 608, v1 + 616, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: Sending updates to %ld sessions", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    uint64_t v18 = *(void *)(v1 + 968);
    uint64_t v19 = *(void *)(v1 + 648);

    swift_release_n(v19, 2LL);
    swift_bridgeObjectRelease_n(v18, 2LL);
  }

  uint64_t v20 = *(void *)(v1 + 968);
  uint64_t v21 = *(void *)(v20 + 16);
  *(void *)(v1 + 1048) = v21;
  if (v21)
  {
    uint64_t v22 = *(void *)(v1 + 992);
    *(void *)(v1 + 1064) = 0LL;
    *(void *)(v1 + 1056) = v22;
    uint64_t v23 = *(void *)(v20 + 32);
    *(void *)(v1 + 1072) = v23;
    swift_bridgeObjectRetain(v20);
    uint64_t v24 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain_n(v23, 2LL);
    unint64_t v25 = (void *)swift_task_alloc(v24);
    *(void *)(v1 + 1080) = v25;
    uint64_t v26 = sub_100022898(0LL, (unint64_t *)&unk_1009AB840, &OBJC_CLASS___NSXPCConnection_ptr);
    *unint64_t v25 = v1;
    v25[1] = sub_1004458BC;
    return unsafeBlocking<A>(_:)(v1 + 520, sub_100451484, v23, v26);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(v1 + 920);
    uint64_t v29 = *(void *)(v1 + 912);
    uint64_t v30 = *(void *)(v1 + 904);
    uint64_t v31 = *(void *)(v1 + 896);
    uint64_t v32 = *(void *)(v1 + 888);
    uint64_t v33 = *(void *)(v1 + 880);
    uint64_t v34 = *(void *)(v1 + 872);
    uint64_t v35 = *(void *)(v1 + 864);
    uint64_t v36 = *(void *)(v1 + 840);
    uint64_t v37 = *(void *)(v1 + 832);
    uint64_t v38 = *(void *)(v1 + 824);
    uint64_t v39 = *(void *)(v1 + 816);
    uint64_t v40 = *(void *)(v1 + 808);
    uint64_t v41 = *(void *)(v1 + 800);
    uint64_t v42 = *(void *)(v1 + 792);
    uint64_t v43 = *(void *)(v1 + 784);
    uint64_t v44 = *(void *)(v1 + 760);
    uint64_t v45 = *(void *)(v1 + 752);
    uint64_t v46 = *(void *)(v1 + 728);
    uint64_t v47 = *(void *)(v1 + 720);
    uint64_t v48 = *(void *)(v1 + 712);
    uint64_t v49 = *(void *)(v1 + 704);
    uint64_t v50 = *(void *)(v1 + 696);
    uint64_t v52 = *(void *)(v1 + 672);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    swift_task_dealloc(v28);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_1004458BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 648LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1080LL));
  swift_release();
  return swift_task_switch(sub_100445920, v1, 0LL);
}

void sub_100445920()
{
  uint64_t v1 = *(void *)(v0 + 1056);
  uint64_t v2 = *(void **)(v0 + 520);
  uint64_t v3 = NSXPCConnection.codeSigningIdentity.getter();
  if (v1)
  {
    swift_errorRelease(v1);
    unint64_t v5 = 0xE90000000000003ELL;
    uint64_t v6 = 0x6E776F6E6B6E753CLL;
  }

  else
  {
    uint64_t v6 = v3;
    unint64_t v5 = v4;
  }

  uint64_t v7 = *(void *)(v0 + 1072);
  swift_retain_n(*(void *)(v0 + 648), 2LL);
  swift_retain_n(v7, 2LL);
  id v8 = v2;
  swift_bridgeObjectRetain(v5);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = *(void *)(v0 + 1072);
  if (v12)
  {
    os_log_type_t v212 = v11;
    uint64_t v187 = *(void *)(v0 + 1064);
    uint64_t v193 = *(void *)(v0 + 896);
    uint64_t v198 = *(void *)(v0 + 856);
    uint64_t v195 = *(void *)(v0 + 848);
    uint64_t v14 = *(void *)(v0 + 648);
    *(void *)typea = v14;
    uint64_t v208 = v10;
    uint64_t v15 = swift_slowAlloc(52LL, -1LL);
    uint64_t v201 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v210 = swift_slowAlloc(96LL, -1LL);
    v215[0] = v210;
    *(_DWORD *)uint64_t v15 = 136316162;
    uint64_t v16 = *(void *)(v14 + 128);
    *(void *)(v0 + 432) = 60LL;
    *(void *)(v0 + 440) = 0xE100000000000000LL;
    *(void *)(v0 + 544) = v16;
    swift_retain();
    uint64_t v182 = v13;
    uint64_t v17 = sub_100004AEC(&qword_1009AE530);
    uint64_t v18 = sub_1000372EC((unint64_t *)&unk_1009B5AF0, &qword_1009AE530, (uint64_t)&unk_100817578);
    v19._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v17, v18);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 8250LL;
    v20._object = (void *)0xE200000000000000LL;
    String.append(_:)(v20);
    v21._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v17, v18);
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 62LL;
    v22._object = (void *)0xE100000000000000LL;
    String.append(_:)(v22);
    swift_release();
    *(void *)(v0 + 552) = sub_1003F11D4(*(void *)(v0 + 432), *(void *)(v0 + 440), v215);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 552, v0 + 560, v15 + 4, v15 + 12);
    swift_release_n(*(void *)typea, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2048;
    *(void *)(v0 + 560) = v187;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2080;
    swift_bridgeObjectRetain(v5);
    *(void *)(v0 + 568) = sub_1003F11D4(v6, v5, v215);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 568, v0 + 576, v15 + 24, v15 + 32);
    uint64_t v23 = swift_bridgeObjectRelease_n(v5, 3LL);
    *(_WORD *)(v15 + 32) = 2080;
    XPCSession.identifier.getter(v23);
    uint64_t v24 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v195, v24);
    unint64_t v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v193, v195);
    *(void *)(v0 + 576) = sub_1003F11D4(v25, v27, v215);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 576, v0 + 584, v15 + 34, v15 + 42);
    swift_release_n(v182, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 42) = 2112;
    *(void *)(v0 + 584) = v8;
    id v28 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 584, v0 + 592, v15 + 44, v15 + 52);
    *uint64_t v201 = v8;

    _os_log_impl((void *)&_mh_execute_header, v208, v212, "%s: #%ld: %s [%s] %@", (uint8_t *)v15, 0x34u);
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v201, 1LL, v29);
    swift_slowDealloc(v201, -1LL, -1LL);
    swift_arrayDestroy(v210, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v210, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_release();
  }

  else
  {
    uint64_t v30 = *(void *)(v0 + 648);

    swift_bridgeObjectRelease_n(v5, 2LL);
    swift_release_n(v30, 2LL);

    swift_release_n(v13, 3LL);
  }

  uint64_t v31 = *(void *)(v0 + 1064) + 1LL;
  if (v31 != *(void *)(v0 + 1048))
  {
    *(void *)(v0 + 1064) = v31;
    *(void *)(v0 + 1056) = 0LL;
    uint64_t v158 = *(void *)(*(void *)(v0 + 968) + 48 * v31 + 32);
    *(void *)(v0 + 1072) = v158;
    uint64_t v159 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain_n(v158, 2LL);
    uint64_t v160 = (void *)swift_task_alloc(v159);
    *(void *)(v0 + 1080) = v160;
    uint64_t v161 = sub_100022898(0LL, (unint64_t *)&unk_1009AB840, &OBJC_CLASS___NSXPCConnection_ptr);
    *uint64_t v160 = v0;
    v160[1] = sub_1004458BC;
    unsafeBlocking<A>(_:)(v0 + 520, sub_100451484, v158, v161);
    return;
  }

  uint64_t v32 = (void *)(v0 + 56);
  uint64_t v196 = (void *)(v0 + 96);
  uint64_t v213 = v0 + 136;
  uint64_t v33 = (void *)(v0 + 176);
  uint64_t v34 = (void *)(v0 + 256);
  uint64_t v35 = (void *)(v0 + 296);
  uint64_t v36 = *(void *)(v0 + 1040);
  uint64_t v184 = (uint64_t *)(v0 + 448);
  uint64_t v202 = (uint64_t *)(v0 + 512);
  swift_bridgeObjectRelease();
  unint64_t v37 = 0LL;
  *(void *)(v0 + 1088) = *(void *)(v36 + 16);
  *(_DWORD *)(v0 + 1176) = enum case for Feature.FindMy.itemSharing(_:);
  while (1)
  {
    *(void *)(v0 + 1096) = v37;
    uint64_t v38 = *(void *)(v0 + 968);
    if (v37 >= *(void *)(v38 + 16)) {
      goto LABEL_72;
    }
    uint64_t v39 = *(void *)(v0 + 1088);
    uint64_t v40 = (void *)(v38 + 48 * v37);
    *(void *)(v0 + 1104) = v40[4];
    *(void *)(v0 + 1112) = v40[5];
    *(void *)(v0 + 1120) = v40[6];
    uint64_t v41 = v40[7];
    *(void *)(v0 + 1128) = v41;
    uint64_t v42 = v40[9];
    *(void *)(v0 + 1136) = v42;
    *(void *)(v0 + 512) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    uint64_t v43 = swift_retain();
    ContinuousClock.now.getter(v43);
    if (v39) {
      break;
    }
LABEL_45:
    uint64_t v107 = *(void *)(v0 + 1136);
    uint64_t v108 = *(void *)(v0 + 1128);
    swift_retain_n(*(void *)(v0 + 1104), 2LL);
    swift_bridgeObjectRetain_n(v108, 2LL);
    uint64_t v109 = swift_bridgeObjectRetain_n(v107, 2LL);
    uint64_t v110 = (os_log_s *)Logger.logObject.getter(v109);
    os_log_type_t v111 = static os_log_type_t.default.getter(v110);
    if (os_log_type_enabled(v110, v111))
    {
      uint64_t v112 = swift_slowAlloc(22LL, -1LL);
      uint64_t v204 = swift_slowAlloc(32LL, -1LL);
      *uint64_t v184 = v204;
      *(_DWORD *)uint64_t v112 = 134218242;
      swift_beginAccess(v202, v0 + 384, 0LL, 0LL);
      uint64_t v113 = *v202;
      if ((unint64_t)*v202 >> 62)
      {
        if (v113 < 0) {
          uint64_t v157 = *v202;
        }
        else {
          uint64_t v157 = v113 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v202);
        uint64_t v114 = _CocoaArrayWrapper.endIndex.getter(v157);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v114 = *(void *)((v113 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      uint64_t v115 = *(void *)(v0 + 1136);
      unint64_t v116 = *(void *)(v0 + 1128);
      uint64_t v117 = *(void *)(v0 + 1120);
      uint64_t v118 = *(void *)(v0 + 1104);
      *(void *)(v112 + 4) = v114;
      *(_WORD *)(v112 + 12) = 2082;
      if (v116) {
        uint64_t v119 = v117;
      }
      else {
        uint64_t v119 = 0x6E776F6E6B6E75LL;
      }
      if (v116) {
        unint64_t v120 = v116;
      }
      else {
        unint64_t v120 = 0xE700000000000000LL;
      }
      swift_bridgeObjectRetain(v116);
      *(void *)(v112 + 14) = sub_1003F11D4(v119, v120, v184);
      swift_bridgeObjectRelease_n(v115, 2LL);
      swift_bridgeObjectRelease_n(v116, 2LL);
      swift_release_n(v118, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v110,  v111,  "receivedSimpleBeaconUpdates - updating beacons (count) %ld to bundle: %{public}s.",  (uint8_t *)v112,  0x16u);
      swift_arrayDestroy(v204, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v204, -1LL, -1LL);
      swift_slowDealloc(v112, -1LL, -1LL);
    }

    else
    {
      uint64_t v121 = *(void *)(v0 + 1136);
      uint64_t v122 = *(void *)(v0 + 1128);
      uint64_t v123 = *(void *)(v0 + 1104);

      swift_bridgeObjectRelease_n(v121, 2LL);
      swift_release_n(v123, 2LL);
      swift_bridgeObjectRelease_n(v122, 2LL);
    }

    uint64_t v124 = swift_retain();
    XPCSession.proxy.getter(v124);
    uint64_t v125 = swift_release();
    uint64_t v126 = *(void **)(v0 + 504);
    if (v126)
    {
      swift_beginAccess(v202, v0 + 336, 0LL, 0LL);
      uint64_t v127 = *v202;
      sub_100022898(0LL, &qword_1009AE528, &OBJC_CLASS___SPInternalSimpleBeacon_ptr);
      swift_bridgeObjectRetain(v127);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v126 receivedSimpleBeaconUpdates:isa];

      uint64_t v125 = swift_unknownObjectRelease(v126);
    }

    uint64_t v129 = *(void *)(v0 + 1000);
    uint64_t v191 = *(void *)(v0 + 840);
    uint64_t v130 = *(void *)(v0 + 800);
    uint64_t v131 = *(void *)(v0 + 792);
    uint64_t v205 = *(void *)(v0 + 784);
    uint64_t v132 = *(void *)(v0 + 776);
    uint64_t v133 = *(void *)(v0 + 768);
    uint64_t v134 = *(void *)(v0 + 696);
    uint64_t v135 = *(void *)(v0 + 688);
    uint64_t v136 = *(void *)(v0 + 680);
    ContinuousClock.now.getter(v125);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 16))(v134, v129, v136);
    uint64_t v137 = *(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 16);
    v137(v131, v191, v133);
    uint64_t v138 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v137)(v205, v130, v133);
    uint64_t v139 = (os_log_s *)Logger.logObject.getter(v138);
    os_log_type_t type = static os_log_type_t.default.getter(v139);
    BOOL v140 = os_log_type_enabled(v139, type);
    uint64_t v141 = *(void *)(v0 + 840);
    uint64_t v142 = *(void *)(v0 + 800);
    uint64_t v143 = *(void *)(v0 + 792);
    uint64_t v144 = *(void *)(v0 + 784);
    uint64_t v145 = *(void *)(v0 + 776);
    uint64_t v146 = *(void *)(v0 + 768);
    uint64_t v147 = *(void *)(v0 + 696);
    uint64_t v189 = *(void *)(v0 + 688);
    uint64_t v206 = *(void *)(v0 + 680);
    if (v140)
    {
      log = v139;
      uint64_t v148 = *(void *)(v0 + 672);
      uint64_t v174 = *(void *)(v0 + 664);
      uint64_t v175 = *(void *)(v0 + 656);
      uint64_t v179 = *(void *)(v0 + 696);
      uint64_t v149 = swift_slowAlloc(12LL, -1LL);
      uint64_t v150 = swift_slowAlloc(32LL, -1LL);
      v215[0] = v150;
      *(_DWORD *)uint64_t v149 = 136446210;
      static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v150);
      uint64_t v151 = sub_100015C48( &qword_1009AE520,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
      uint64_t v177 = v142;
      uint64_t v178 = v141;
      uint64_t v152 = static Duration.description<A>(_:_:units:)(v143, v144, v148, v146, v151);
      unint64_t v154 = v153;
      (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v148, v175);
      *(void *)(v149 + 4) = sub_1003F11D4(v152, v154, v215);
      swift_bridgeObjectRelease();
      uint64_t v155 = *(void (**)(uint64_t, uint64_t))(v145 + 8);
      v155(v143, v146);
      v155(v144, v146);
      _os_log_impl((void *)&_mh_execute_header, log, type, "session processing time: %{public}s", (uint8_t *)v149, 0xCu);
      swift_arrayDestroy(v150, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v150, -1LL, -1LL);
      swift_slowDealloc(v149, -1LL, -1LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v179, v206);
      v155(v177, v146);
      v155(v178, v146);
    }

    else
    {

      uint64_t v156 = *(void (**)(uint64_t, uint64_t))(v145 + 8);
      v156(v143, v146);
      v156(v144, v146);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v147, v206);
      v156(v142, v146);
      v156(v141, v146);
    }

    swift_bridgeObjectRelease();
    uint64_t v34 = (void *)(v0 + 256);
    uint64_t v32 = (void *)(v0 + 56);
    unint64_t v37 = *(void *)(v0 + 1096) + 1LL;
    uint64_t v35 = (void *)(v0 + 296);
    uint64_t v33 = (void *)(v0 + 176);
    if (v37 == *(void *)(v0 + 1048))
    {
      swift_bridgeObjectRelease();
      uint64_t v165 = *(void *)(v0 + 920);
      uint64_t v166 = *(void *)(v0 + 912);
      uint64_t v167 = *(void *)(v0 + 904);
      uint64_t v168 = *(void *)(v0 + 896);
      uint64_t v169 = *(void *)(v0 + 888);
      uint64_t v170 = *(void *)(v0 + 880);
      uint64_t v171 = *(void *)(v0 + 872);
      uint64_t v172 = *(void *)(v0 + 864);
      uint64_t v173 = *(void *)(v0 + 840);
      uint64_t v183 = *(void *)(v0 + 832);
      uint64_t v185 = *(void *)(v0 + 824);
      uint64_t v186 = *(void *)(v0 + 816);
      uint64_t v188 = *(void *)(v0 + 808);
      uint64_t v190 = *(void *)(v0 + 800);
      uint64_t v192 = *(void *)(v0 + 792);
      uint64_t v194 = *(void *)(v0 + 784);
      uint64_t v197 = *(void *)(v0 + 760);
      uint64_t v199 = *(void *)(v0 + 752);
      uint64_t v200 = *(void *)(v0 + 728);
      uint64_t v203 = *(void *)(v0 + 720);
      uint64_t v207 = *(void *)(v0 + 712);
      uint64_t v209 = *(void *)(v0 + 704);
      uint64_t v211 = *(void *)(v0 + 696);
      uint64_t v214 = *(void *)(v0 + 672);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v165, v167);
      swift_task_dealloc(v165);
      swift_task_dealloc(v168);
      swift_task_dealloc(v169);
      swift_task_dealloc(v170);
      swift_task_dealloc(v171);
      swift_task_dealloc(v172);
      swift_task_dealloc(v173);
      swift_task_dealloc(v183);
      swift_task_dealloc(v185);
      swift_task_dealloc(v186);
      swift_task_dealloc(v188);
      swift_task_dealloc(v190);
      swift_task_dealloc(v192);
      swift_task_dealloc(v194);
      swift_task_dealloc(v197);
      swift_task_dealloc(v199);
      swift_task_dealloc(v200);
      swift_task_dealloc(v203);
      swift_task_dealloc(v207);
      swift_task_dealloc(v209);
      swift_task_dealloc(v211);
      swift_task_dealloc(v214);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
  }

  swift_bridgeObjectRetain(*(void *)(v0 + 1040));
  swift_beginAccess(v202, v0 + 360, 0LL, 0LL);
  *(void *)(v0 + 1144) = 0LL;
  uint64_t v44 = *(void *)(v0 + 1040);
  if (!*(void *)(v44 + 16))
  {
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    return;
  }

  unint64_t v45 = 0LL;
  while (1)
  {
    uint64_t v46 = sub_100013044(v44 + 40 * v45 + 32, (uint64_t)v34);
    ContinuousClock.now.getter(v46);
    uint64_t v47 = *(void *)(v0 + 280);
    uint64_t v48 = *(void *)(v0 + 288);
    sub_100012ED8(v34, v47);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v48 + 112))(v47, v48) & 1) != 0)
    {
      uint64_t v49 = *(void *)(v0 + 744);
      uint64_t v50 = *(void *)(v0 + 736);
      uint64_t v51 = *(void *)(v0 + 728);
      sub_100013044((uint64_t)v34, v213);
      uint64_t v52 = sub_100004AEC(&qword_1009B0530);
      int v53 = swift_dynamicCast(v51, v213, v52, v50, 6LL);
      uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v49 + 56);
      if (v53)
      {
        uint64_t v55 = *(unsigned int *)(v0 + 1176);
        uint64_t v56 = *(void *)(v0 + 760);
        uint64_t v57 = *(void *)(v0 + 728);
        v54(v57, 0LL, 1LL, *(void *)(v0 + 736));
        sub_10002218C(v57, v56, type metadata accessor for SharedBeaconRecord);
        uint64_t My = type metadata accessor for Feature.FindMy(0LL);
        *(void *)(v0 + 120) = My;
        *(void *)(v0 + 128) = sub_100015C48( (unint64_t *)&qword_1009B04D0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
        char v59 = sub_10000A7C8(v196);
        (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(My - 8) + 104LL))(v59, v55, My);
        LOBYTE(My) = isFeatureEnabled(_:)(v196);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v196);
        uint64_t v60 = *(void *)(v0 + 760);
        if ((My & 1) == 0) {
          goto LABEL_37;
        }
        unsigned int v61 = *(unsigned __int8 *)(v60 + *(int *)(*(void *)(v0 + 736) + 64LL));
        sub_10001DC4C(*(void *)(v0 + 760), *(void *)(v0 + 752), type metadata accessor for SharedBeaconRecord);
        uint64_t v60 = *(void *)(v0 + 760);
        uint64_t v62 = *(void *)(v0 + 752);
        if (v61 >= 3)
        {
          sub_100018C68(v62, type metadata accessor for SharedBeaconRecord);
LABEL_37:
          sub_100018C68(v60, type metadata accessor for SharedBeaconRecord);
          goto LABEL_38;
        }

        int v63 = *(unsigned __int8 *)(v62 + *(int *)(*(void *)(v0 + 736) + 64LL));
        sub_100018C68(v62, type metadata accessor for SharedBeaconRecord);
        sub_100018C68(v60, type metadata accessor for SharedBeaconRecord);
        if (v63 == 1) {
          goto LABEL_38;
        }
      }

      else
      {
        uint64_t v64 = *(void *)(v0 + 728);
        v54(v64, 1LL, 1LL, *(void *)(v0 + 736));
        sub_100015794(v64, (uint64_t *)&unk_1009AE470);
      }
    }

    uint64_t v65 = *(void *)(v0 + 280);
    uint64_t v66 = *(void *)(v0 + 288);
    sub_100012ED8(v34, v65);
LABEL_38:
    (*(void (**)(void, void))(*(void *)(v0 + 776) + 8LL))(*(void *)(v0 + 832), *(void *)(v0 + 768));
LABEL_39:
    uint64_t v102 = *(void *)(v0 + 1088);
    uint64_t v103 = *(void *)(v0 + 1144) + 1LL;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
    if (v103 == v102)
    {
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }

    unint64_t v45 = *(void *)(v0 + 1144) + 1LL;
    *(void *)(v0 + 1144) = v45;
    uint64_t v44 = *(void *)(v0 + 1040);
    if (v45 >= *(void *)(v44 + 16)) {
      goto LABEL_71;
    }
  }

  uint64_t v67 = *(void *)(v0 + 1112);
  uint64_t v68 = *(void *)(v0 + 280);
  uint64_t v69 = *(void *)(v0 + 288);
  sub_100012ED8(v34, v68);
  if ((v67 & 0x200) == 0)
  {
    goto LABEL_38;
  }

  char v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 88))(v68, v69);
  sub_100013044((uint64_t)v34, (uint64_t)v35);
  if ((v70 & 1) == 0)
  {
    uint64_t v71 = *(void *)(v0 + 320);
    uint64_t v72 = *(void *)(v0 + 328);
    sub_100012ED8(v35, v71);
    char v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 112))(v71, v72);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
    sub_100013044((uint64_t)v34, (uint64_t)v33);
    if ((v73 & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v104 = *(void *)(v0 + 200);
    uint64_t v105 = *(void *)(v0 + 208);
    sub_100012ED8(v33, v104);
    char v106 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 96))(v104, v105);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
    if ((v106 & 1) != 0) {
      goto LABEL_28;
    }
    goto LABEL_38;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
  sub_100013044((uint64_t)v34, (uint64_t)v33);
LABEL_27:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
LABEL_28:
  uint64_t v74 = *(void *)(v0 + 1136);
  uint64_t v75 = *(void *)(v0 + 512);
  *(void *)(v0 + 1152) = v75;
  uint64_t v76 = *(void *)(v74 + 16);
  sub_100013044((uint64_t)v34, (uint64_t)v32);
  if (v76)
  {
    uint64_t v77 = *(void *)(v0 + 1136);
    uint64_t v78 = *(void *)(v0 + 856);
    uint64_t v79 = *(void *)(v0 + 80);
    uint64_t v80 = *(void *)(v0 + 88);
    sub_100012ED8(v32, v79);
    uint64_t v81 = *(void *)(*(void *)(v80 + 8) + 8LL);
    uint64_t v82 = *(void (**)(uint64_t, uint64_t, __n128))(v81 + 32);
    swift_bridgeObjectRetain(v77);
    __n128 v83 = swift_bridgeObjectRetain(v75);
    v82(v79, v81, v83);
    uint64_t v84 = v77 + ((*(unsigned __int8 *)(v78 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80));
    __n128 v85 = swift_bridgeObjectRetain(v77);
    uint64_t v86 = *(void *)(v78 + 72);
    uint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v78 + 16);
    while (1)
    {
      uint64_t v88 = *(void *)(v0 + 856);
      uint64_t v89 = *(void *)(v0 + 848);
      uint64_t v90 = *(void *)(v0 + 720);
      v87(v90, v84, v89, v85);
      uint64_t v91 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
      v91(v90, 0LL, 1LL, v89);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v90, 1LL, v89) == 1)
      {
        uint64_t v98 = *(void *)(v0 + 856);
        swift_bridgeObjectRelease();
        uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
        goto LABEL_35;
      }

      uint64_t v92 = *(void *)(v0 + 888);
      uint64_t v93 = *(void *)(v0 + 880);
      uint64_t v94 = *(void *)(v0 + 856);
      uint64_t v95 = *(void *)(v0 + 848);
      (*(void (**)(uint64_t, void, uint64_t))(v94 + 32))(v93, *(void *)(v0 + 720), v95);
      uint64_t v96 = sub_100015C48( (unint64_t *)&qword_1009A0A40,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      LOBYTE(v92) = dispatch thunk of static Equatable.== infix(_:_:)(v93, v92, v95, v96);
      uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
      v97(v93, v95);
      if ((v92 & 1) != 0) {
        break;
      }
      v84 += v86;
      if (!--v76)
      {
        v91(*(void *)(v0 + 720), 1LL, 1LL, *(void *)(v0 + 848));
        swift_bridgeObjectRelease();
LABEL_35:
        uint64_t v99 = *(void *)(v0 + 832);
        uint64_t v100 = *(void *)(v0 + 776);
        uint64_t v101 = *(void *)(v0 + 768);
        v97(*(void *)(v0 + 888), *(void *)(v0 + 848));
        swift_bridgeObjectRelease();
        uint64_t v32 = (void *)(v0 + 56);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v99, v101);
        swift_bridgeObjectRelease();
        uint64_t v34 = (void *)(v0 + 256);
        uint64_t v35 = (void *)(v0 + 296);
        uint64_t v33 = (void *)(v0 + 176);
        goto LABEL_39;
      }
    }

    uint64_t v162 = *(void *)(v0 + 888);
    uint64_t v163 = *(void *)(v0 + 848);
    swift_bridgeObjectRelease();
    v97(v162, v163);
    swift_bridgeObjectRelease();
    uint64_t v34 = (void *)(v0 + 256);
    uint64_t v32 = (void *)(v0 + 56);
  }

  else
  {
    swift_bridgeObjectRetain(v75);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
  uint64_t v164 = (void *)swift_task_alloc(dword_1009AE204);
  *(void *)(v0 + 1160) = v164;
  *uint64_t v164 = v0;
  v164[1] = sub_100446C68;
  sub_100448C50((uint64_t)v34, *(void *)(v0 + 640), *(void *)(v0 + 1112));
}

uint64_t sub_100446C68(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1160LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 648LL);
  *(void *)(*(void *)v1 + 1168LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100446CC8, v3, 0LL);
}

uint64_t sub_100446CC8()
{
  uint64_t v213 = v0 + 7;
  uint64_t v214 = v0 + 22;
  uint64_t v2 = v0 + 32;
  uint64_t v215 = v0 + 37;
  uint64_t v216 = v0 + 12;
  uint64_t v223 = v0 + 42;
  unint64_t v3 = v0[144];
  uint64_t v217 = v0 + 45;
  uint64_t v218 = (uint64_t)(v0 + 17);
  uint64_t v220 = v0 + 48;
  uint64_t v246 = v0 + 63;
  id v4 = [(id)v0[146] identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v4);

  uint64_t v5 = v0[144];
  if (v3 >> 62)
  {
LABEL_89:
    if (v5 < 0) {
      uint64_t v209 = v5;
    }
    else {
      uint64_t v209 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v209);
  }

  else
  {
    uint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v5);
  }

  uint64_t v219 = (uint64_t)v2;
  uint64_t v244 = v0 + 56;
  uint64_t v248 = v0 + 64;
  uint64_t v272 = v0;
  if (v6)
  {
    uint64_t v7 = 0LL;
    uint64_t v250 = v0 + 62;
    uint64_t v254 = v0 + 2;
    uint64_t v258 = v0[144] + 32LL;
    unint64_t v263 = v3 & 0xC000000000000001LL;
    while (1)
    {
      if (v263) {
        id v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v0[144]);
      }
      else {
        id v8 = *(id *)(v258 + 8 * v7);
      }
      uint64_t v9 = v8;
      if (__OFADD__(v7, 1LL))
      {
LABEL_86:
        __break(1u);
LABEL_87:
        swift_bridgeObjectRetain(v1);
        goto LABEL_84;
      }

      uint64_t v266 = v7 + 1;
      uint64_t v10 = v0[112];
      uint64_t v1 = v0[107];
      uint64_t v11 = v0[106];
      uint64_t v12 = v0[89];
      id v13 = [v8 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
      v14(v12, v10, v11);

      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
      v15(v12, 0LL, 1LL, v11);
      uint64_t v16 = v0[109];
      uint64_t v17 = v0[108];
      uint64_t v2 = (void *)v0[107];
      uint64_t v18 = v0[106];
      v14(v17, v0[89], v18);
      uint64_t v19 = sub_100015C48( (unint64_t *)&qword_1009A0A40,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      LOBYTE(vswift_weakDestroy(v0 + 16) = dispatch thunk of static Equatable.== infix(_:_:)(v17, v16, v18, v19);
      Swift::String v20 = (void (*)(uint64_t, uint64_t))v2[1];
      v20(v17, v18);
      if ((v16 & 1) != 0)
      {
        uint64_t v60 = v0[109];
        uint64_t v61 = v0[106];
        swift_bridgeObjectRelease();
        v20(v60, v61);
        uint64_t v62 = sub_100013044(v219, (uint64_t)v254);
        int v63 = (os_log_s *)Logger.logObject.getter(v62);
        os_log_type_t v64 = static os_log_type_t.error.getter(v63);
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v1 = v0[112];
          uint64_t v229 = v0[106];
          uint64_t v260 = v0[97];
          uint64_t v264 = v0[96];
          uint64_t v268 = v0[104];
          uint64_t v235 = (void *)v0[146];
          uint64_t v65 = swift_slowAlloc(22LL, -1LL);
          uint64_t type = swift_slowAlloc(32LL, -1LL);
          v273[0] = type;
          *(_DWORD *)uint64_t v65 = 141558275;
          v0[61] = 1752392040LL;
          unint64_t v3 = (unint64_t)(v0 + 62);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 61, v250, v65 + 4, v65 + 12);
          *(_WORD *)(v65 + 12) = 2081;
          uint64_t v67 = v0[5];
          uint64_t v66 = v0[6];
          sub_100012ED8(v254, v67);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v66 + 8) + 8LL) + 32LL))(v67);
          uint64_t v68 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v229, v68);
          unint64_t v71 = v70;
          v20(v1, v229);
          v0[62] = sub_1003F11D4(v69, v71, v273);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v250, v246, v65 + 14, v65 + 22);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v254);
          _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "Beacon to insert already exists: %{private,mask.hash}s.",  (uint8_t *)v65,  0x16u);
          swift_arrayDestroy(type, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(type, -1LL, -1LL);
          swift_slowDealloc(v65, -1LL, -1LL);

          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v268, v264);
        }

        else
        {
          uint64_t v79 = v0[104];
          unint64_t v3 = v0[97];
          uint64_t v80 = v0[96];

          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v254);
          (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v79, v80);
        }

        goto LABEL_25;
      }

      ++v7;
      if (v266 == v6) {
        goto LABEL_14;
      }
    }
  }

  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[107] + 56LL);
LABEL_14:
    v15(v0[89], 1LL, 1LL, v0[106]);
  }

  Swift::String v21 = (void *)v0[146];
  uint64_t v22 = v0[109];
  uint64_t v23 = v0[107];
  uint64_t v24 = v0[106];
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v23 + 8);
  ((void (*)(uint64_t, uint64_t))v1)(v22, v24);
  swift_beginAccess(v248, v0 + 51, 33LL, 0LL);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
  unint64_t v26 = *(void *)((v0[64] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v25 = *(void *)((v0[64] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v26 >= v25 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1LL);
  }
  uint64_t v27 = v0[103];
  uint64_t v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v0[146]);
  specialized Array._endMutation()(v28);
  uint64_t v29 = swift_endAccess(v0 + 51);
  ContinuousClock.now.getter(v29);
  uint64_t v30 = ContinuousClock.Instant.duration(to:)(v27);
  uint64_t v31 = Duration.milliseconds.getter(v30);
  uint64_t v32 = v0[104];
  uint64_t v33 = v0[103];
  if (v31 < 101)
  {
    uint64_t v58 = v0[97];
    uint64_t v59 = v0[96];

    swift_bridgeObjectRelease();
    unint64_t v3 = *(void *)(v58 + 8);
    ((void (*)(uint64_t, uint64_t))v3)(v33, v59);
    ((void (*)(uint64_t, uint64_t))v3)(v32, v59);
  }

  else
  {
    uint64_t v34 = v0[102];
    uint64_t v35 = v0[101];
    uint64_t v36 = v0[97];
    uint64_t v37 = v0[96];
    (*(void (**)(void, void, void))(v0[86] + 16LL))(v0[88], v0[125], v0[85]);
    sub_100013044(v219, (uint64_t)(v0 + 27));
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
    v38(v34, v32, v37);
    uint64_t v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v38)(v35, v33, v37);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.error.getter(v40);
    uint64_t v267 = v40;
    BOOL v42 = os_log_type_enabled(v40, v41);
    uint64_t v259 = (void *)v0[146];
    if (v42)
    {
      uint64_t v43 = v0[112];
      uint64_t v44 = v0[106];
      uint64_t v251 = v0[103];
      uint64_t v255 = v0[104];
      uint64_t v211 = v0[102];
      uint64_t v212 = v0[101];
      uint64_t v228 = v0[97];
      uint64_t v210 = v0[96];
      uint64_t v234 = v0[86];
      uint64_t v238 = v0[85];
      uint64_t v241 = v0[88];
      uint64_t v45 = v0[84];
      uint64_t v221 = v0[83];
      uint64_t v222 = v0[82];
      unint64_t v3 = swift_slowAlloc(32LL, -1LL);
      uint64_t v225 = swift_slowAlloc(64LL, -1LL);
      v273[0] = v225;
      *(_DWORD *)unint64_t v3 = 141558531;
      v0[57] = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 57, v0 + 58, v3 + 4, v3 + 12);
      *(_WORD *)(v3 + 12) = 2081;
      uint64_t v47 = v0[30];
      uint64_t v46 = v0[31];
      sub_100012ED8(v0 + 27, v47);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v46 + 8) + 8LL) + 32LL))(v47);
      uint64_t v48 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v44, v48);
      unint64_t v51 = v50;
      ((void (*)(uint64_t, uint64_t))v1)(v43, v44);
      v0[58] = sub_1003F11D4(v49, v51, v273);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 58, v0 + 59, v3 + 14, v3 + 22);
      swift_bridgeObjectRelease();
      uint64_t v52 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 27);
      *(_WORD *)(v3 + 22) = 2082;
      static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v52);
      uint64_t v53 = sub_100015C48( &qword_1009AE520,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
      uint64_t v1 = v211;
      uint64_t v54 = static Duration.description<A>(_:_:units:)(v211, v212, v45, v210, v53);
      unint64_t v56 = v55;
      (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v45, v222);
      v0[59] = sub_1003F11D4(v54, v56, v273);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 59, v0 + 60, v3 + 24, v3 + 32);
      swift_bridgeObjectRelease();
      uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v228 + 8);
      v57(v211, v210);
      v57(v212, v210);
      _os_log_impl( (void *)&_mh_execute_header,  v267,  v41,  "Slow beacon processing time for %{private,mask.hash}s: %{public}s",  (uint8_t *)v3,  0x20u);
      swift_arrayDestroy(v225, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v225, -1LL, -1LL);
      swift_slowDealloc(v3, -1LL, -1LL);

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v234 + 8))(v241, v238);
      v57(v251, v210);
      v57(v255, v210);
    }

    else
    {
      uint64_t v256 = v0[104];
      unint64_t v3 = v0[103];
      uint64_t v72 = v0[102];
      uint64_t v73 = v0[101];
      uint64_t v74 = v0[97];
      uint64_t v75 = v0[96];
      uint64_t v1 = v0[88];
      uint64_t v76 = v0[86];
      uint64_t v77 = v0[85];

      swift_bridgeObjectRelease();
      uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
      v78(v72, v75);
      v78(v73, v75);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 27);

      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v1, v77);
      v78(v3, v75);
      v78(v256, v75);
    }
  }

uint64_t sub_100448438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v3[5] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[6] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v3[7] = v7;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[8] = swift_task_alloc(v8);
  void v3[9] = swift_task_alloc(v8);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  v3[10] = v9;
  v3[11] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1004484DC, a3, 0LL);
}

uint64_t sub_1004484DC()
{
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = v0[3];
  v0[12] = *(void *)(v5 + 136);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[13] = v7;
  v7(v1, v6, v4);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10095A978, v9 + v2, v8 | 7);
  v0[14] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v5;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v0[15] = v11;
  v11(v10 + v9, v1, v4);
  swift_retain();
  return swift_task_switch(sub_100448594, 0LL, 0LL);
}

uint64_t sub_100448594()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[16] = v3;
  v3[2] = v2;
  v3[3] = sub_1004514AC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[17] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100448640;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[11],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1004514B8,  v3,  v0[10]);
}

uint64_t sub_100448640()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 136LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1004486A8, 0LL, 0LL);
}

uint64_t sub_1004486A8()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  (*(void (**)(void, void, uint64_t))(v0 + 104))(*(void *)(v0 + 64), *(void *)(v0 + 24), v2);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1LL, v2);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 88);
  if (v4 == 1)
  {
    v5(*(void *)(v0 + 16), *(void *)(v0 + 64), *(void *)(v0 + 40));
    sub_100015794(v6, &qword_10099D8A0);
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 16);
    (*(void (**)(void, uint64_t))(*(void *)(v0 + 48) + 8LL))(*(void *)(v0 + 64), v7);
    v5(v8, v6, v7);
  }

  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v10 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100448784(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  v3[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[19] = v5;
  v3[20] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v3[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[22] = v7;
  v3[23] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100448810, v2, 0LL);
}

uint64_t sub_100448810()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 192) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1004488FC;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004488FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 20Hasher.init(_seed:)(v8, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10044895C, v3, 0LL);
}

uint64_t sub_10044895C()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 200))
  {
    uint64_t v2 = *(void **)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = v2[3];
    uint64_t v4 = v2[4];
    sub_100012ED8(v2, v3);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8LL) + 32LL))(v3);
    uint64_t v5 = v2[3];
    uint64_t v6 = v2[4];
    sub_100012ED8(v2, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 184))(v5, v6);
    uint64_t v7 = (void *)swift_task_alloc(dword_1009BCD2C);
    *(void *)(v0 + 208) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100448B68;
    return sub_1006D5220(*(void *)(v0 + 120), *(void *)(v0 + 184), *(void *)(v0 + 160));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B0A8 != -1) {
      swift_once(&qword_10099B0A8, sub_10006C020);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_10000A720(v9, (uint64_t)qword_100A29F68);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No ObservationStoreService available!", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    uint64_t v14 = *(void *)(v0 + 184);
    uint64_t v15 = *(void *)(v0 + 160);

    unint64_t v16 = sub_1000157D0();
    uint64_t v17 = swift_allocError(&type metadata for DaemonError, v16, 0LL, 0LL);
    *uint64_t v18 = 0xD000000000000017LL;
    v18[1] = 0x800000010085BE10LL;
    swift_willThrow(v17);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100448B68()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 176LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 184LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 160LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 168LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 144LL);
  uint64_t v6 = *(void *)(*(void *)v0 + 152LL);
  uint64_t v7 = *(void *)(*(void *)v0 + 136LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 208LL));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_100448C04, v7, 0LL);
}

uint64_t sub_100448C04()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 160);
  swift_release(*(void *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100448C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[80] = v3;
  v4[79] = a3;
  v4[78] = a2;
  v4[77] = a1;
  uint64_t v5 = type metadata accessor for BeaconProductInfoRecord(0LL);
  v4[81] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[82] = v6;
  v4[83] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009AE450);
  v4[84] = v7;
  v4[85] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A2438);
  v4[86] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  v4[87] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[88] = v10;
  v4[89] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009AA870);
  v4[90] = v11;
  unint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[91] = swift_task_alloc(v12);
  v4[92] = swift_task_alloc(v12);
  v4[93] = swift_task_alloc(v12);
  v4[94] = swift_task_alloc(v12);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  v4[95] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SharedBeaconRecord(0LL);
  v4[96] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[97] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[98] = swift_task_alloc(v16);
  v4[99] = swift_task_alloc(v16);
  v4[100] = swift_task_alloc(v16);
  uint64_t v17 = sub_100004AEC(&qword_1009AA830);
  v4[101] = v17;
  v4[102] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  v4[103] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v19 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099D8A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[104] = swift_task_alloc(v19);
  v4[105] = swift_task_alloc(v19);
  uint64_t v20 = sub_100004AEC(&qword_1009AA840);
  v4[106] = v20;
  unint64_t v21 = (*(void *)(*(void *)(v20 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[107] = swift_task_alloc(v21);
  v4[108] = swift_task_alloc(v21);
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v4[109] = swift_task_alloc((*(void *)(*(void *)(v22 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for OwnedBeaconRecord(0LL);
  v4[110] = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  v4[111] = v24;
  unint64_t v25 = (*(void *)(v24 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[112] = swift_task_alloc(v25);
  v4[113] = swift_task_alloc(v25);
  v4[114] = swift_task_alloc(v25);
  uint64_t v26 = sub_100004AEC(&qword_1009A9BF0);
  v4[115] = swift_task_alloc((*(void *)(*(void *)(v26 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for Date(0LL);
  v4[116] = v27;
  uint64_t v28 = *(void *)(v27 - 8);
  v4[117] = v28;
  v4[118] = swift_task_alloc((*(void *)(v28 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v29 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_10099D720) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[119] = swift_task_alloc(v29);
  v4[120] = swift_task_alloc(v29);
  v4[121] = swift_task_alloc(v29);
  uint64_t v30 = sub_100004AEC(&qword_1009A1800);
  v4[122] = v30;
  unint64_t v31 = (*(void *)(*(void *)(v30 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[123] = swift_task_alloc(v31);
  v4[124] = swift_task_alloc(v31);
  v4[125] = swift_task_alloc(v31);
  uint64_t v32 = type metadata accessor for UUID(0LL);
  v4[126] = v32;
  uint64_t v33 = *(void *)(v32 - 8);
  v4[127] = v33;
  uint64_t v34 = *(void *)(v33 + 64);
  v4[128] = v34;
  unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[129] = swift_task_alloc(v35);
  v4[130] = swift_task_alloc(v35);
  v4[131] = swift_task_alloc(v35);
  v4[132] = swift_task_alloc(v35);
  v4[133] = swift_task_alloc(v35);
  v4[134] = swift_task_alloc(v35);
  uint64_t v36 = sub_100004AEC(&qword_1009AE490);
  v4[135] = v36;
  v4[136] = swift_task_alloc((*(void *)(*(void *)(v36 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = type metadata accessor for BeaconNamingRecord(0LL);
  v4[137] = v37;
  uint64_t v38 = *(void *)(v37 - 8);
  v4[138] = v38;
  v4[139] = swift_task_alloc((*(void *)(v38 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100449098, v3, 0LL);
}

uint64_t sub_100449098()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 480, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C968 + dword_10099C968);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C96C);
    *(void *)(v0 + 1120) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100449184;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100449184(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1120LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 640LL);
  *(void *)(*(void *)v1 + 1128LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004491E4, v3, 0LL);
}

uint64_t sub_1004491E4()
{
  uint64_t v1 = *(void *)(v0 + 632);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if ((v1 & 0x280) != 0)
  {
    uint64_t v2 = *(void *)(v0 + 624);
    uint64_t v3 = *(void **)(v0 + 616);
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[4];
    sub_100012ED8(v3, v4);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 8) + 8LL) + 32LL))(v4);
    uint64_t v6 = sub_1004495BC;
LABEL_5:
    uint64_t v10 = v2;
    return swift_task_switch(v6, v10, 0LL);
  }

  *(_BYTE *)(v0 + 1918) = 0;
  *(_WORD *)(v0 + 19swift_weakDestroy(v0 + 16) = 0;
  *(_OWORD *)(v0 + 1336) = 0u;
  *(_OWORD *)(v0 + 1352) = 0u;
  *(_OWORD *)(v0 + 1368) = 0u;
  *(_OWORD *)(v0 + 1384) = 0u;
  if ((*(_WORD *)(v0 + 632) & 0x203) != 0)
  {
    uint64_t v2 = *(void *)(v0 + 624);
    uint64_t v7 = *(void **)(v0 + 616);
    uint64_t v8 = v7[3];
    uint64_t v9 = v7[4];
    sub_100012ED8(v7, v8);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8LL) + 32LL))(v8);
    uint64_t v6 = sub_10044BE7C;
    goto LABEL_5;
  }

  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 656) + 56LL))( *(void *)(v0 + 752),  1LL,  1LL,  *(void *)(v0 + 648));
  *(_OWORD *)(v0 + 1456) = 0u;
  uint64_t v12 = *(void *)(v0 + 632);
  if ((v12 & 2) != 0
    && (uint64_t v13 = *(void *)(v0 + 752),
        uint64_t v14 = *(void *)(v0 + 648),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 656) + 48LL))(v13, 1LL, v14)))
  {
    uint64_t v36 = (uint64_t *)(v13 + *(int *)(v14 + 32));
    uint64_t v15 = *v36;
    swift_bridgeObjectRetain(v36[1]);
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
  }

  *(void *)(v0 + 1480) = v16;
  *(void *)(v0 + 1472) = v15;
  if ((v12 & 0x204) != 0)
  {
    uint64_t v17 = *(void **)(v0 + 616);
    uint64_t v18 = v17[3];
    uint64_t v19 = v17[4];
    sub_100012ED8(v17, v18);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(v18, v19);
    BOOL v21 = (v12 & 0x208) == 0;
    uint64_t v12 = *(void *)(v0 + 632);
    if (v21)
    {
      uint64_t v22 = 0LL;
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v20 = 0LL;
    uint64_t v22 = 0LL;
    if ((v12 & 8) == 0) {
      goto LABEL_17;
    }
  }

  *(void *)(v0 + 1488) = v20;
  uint64_t v23 = *(void **)(v0 + 616);
  uint64_t v24 = v23[3];
  uint64_t v25 = v23[4];
  sub_100012ED8(v23, v24);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 56))(v24, v25);
  *(void *)(v0 + 1496) = v26;
  if ((v12 & 0x200) != 0)
  {
    uint64_t v10 = *(void *)(v0 + 624);
    uint64_t v6 = sub_10044C874;
    return swift_task_switch(v6, v10, 0LL);
  }

  uint64_t v22 = v26;
  uint64_t v12 = *(void *)(v0 + 632);
LABEL_17:
  unint64_t v27 = sub_10041362C((uint64_t)_swiftEmptyArrayStorage);
  if ((v12 & 0x20) != 0)
  {
    *(void *)(v0 + 1608) = v20;
    *(void *)(v0 + 1600) = v22;
    *(void *)(v0 + 1592) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1584) = v27;
    *(_BYTE *)(v0 + 1919) = 0;
    uint64_t v32 = *(void **)(v0 + 616);
    uint64_t v33 = v32[3];
    uint64_t v34 = v32[4];
    sub_100012ED8(v32, v33);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v34 + 8) + 8LL) + 32LL))(v33);
    unint64_t v35 = (void *)swift_task_alloc(dword_1009B6384);
    *(void *)(v0 + 16swift_weakDestroy(v0 + 16) = v35;
    *unint64_t v35 = v0;
    v35[1] = sub_10044D0A4;
    return sub_1005EB52C(*(void *)(v0 + 1072));
  }

  else
  {
    uint64_t v28 = *(void *)(v0 + 632);
    if ((v28 & 0x100) == 0)
    {
      *(void *)(v0 + 1720) = v20;
      *(void *)(v0 + 1712) = v22;
      *(void *)(v0 + 1704) = &_swiftEmptySetSingleton;
      *(void *)(v0 + 1696) = v27;
      *(_BYTE *)(v0 + 1921) = 0;
      *(_OWORD *)(v0 + 1680) = 0u;
      uint64_t v2 = *(void *)(v0 + 624);
      if ((v28 & 0x240) != 0)
      {
        unint64_t v29 = *(void **)(v0 + 616);
        uint64_t v30 = v29[3];
        uint64_t v31 = v29[4];
        sub_100012ED8(v29, v30);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v31 + 8) + 8LL) + 32LL))(v30);
        uint64_t v6 = sub_10044D5A0;
      }

      else
      {
        *(void *)(v0 + 1768) = 0LL;
        *(void *)(v0 + 1760) = v2;
        uint64_t v38 = *(void **)(v0 + 616);
        uint64_t v39 = v38[3];
        uint64_t v40 = v38[4];
        sub_100012ED8(v38, v39);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v40 + 8) + 8LL) + 32LL))(v39);
        uint64_t v6 = sub_10044D89C;
      }

      goto LABEL_5;
    }

    *(void *)(v0 + 1664) = v20;
    *(void *)(v0 + 1656) = v22;
    *(void *)(v0 + 1648) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1640) = v27;
    *(_BYTE *)(v0 + 1920) = 0;
    *(void *)(v0 + 1632) = 0LL;
    uint64_t v37 = (void *)swift_task_alloc(dword_1009AE1FC);
    *(void *)(v0 + 1672) = v37;
    *uint64_t v37 = v0;
    v37[1] = sub_10044D2EC;
    return sub_100448784(*(void *)(v0 + 688), *(void *)(v0 + 616));
  }

uint64_t sub_1004495BC()
{
  uint64_t v1 = *(void *)(v0 + 1072);
  uint64_t v2 = *(void *)(v0 + 1064);
  uint64_t v3 = *(void *)(v0 + 1024);
  uint64_t v4 = *(void *)(v0 + 1016);
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v6 = *(void *)(v0 + 624);
  *(void *)(v0 + 1136) = *(void *)(v6 + 136);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 1144) = v7;
  v7(v2, v1, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 1896) = v8;
  uint64_t v8 = v8;
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10095A860, v9 + v3, v8 | 7LL);
  *(void *)(v0 + 1152) = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v6;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 1160) = v11;
  v11(v10 + v9, v2, v5);
  swift_retain();
  return swift_task_switch(sub_100449684, 0LL, 0LL);
}

uint64_t sub_100449684()
{
  uint64_t v1 = v0[144];
  uint64_t v2 = v0[142];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[146] = v3;
  v3[2] = v2;
  v3[3] = sub_1004512D0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[147] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100449734;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[136],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1004512DC,  v3,  v0[135]);
}

uint64_t sub_100449734()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1168);
  uint64_t v3 = *(void *)(*v0 + 1072);
  uint64_t v4 = *(void *)(*v0 + 1016);
  uint64_t v5 = *(void *)(*v0 + 1008);
  uint64_t v6 = *(void *)(*v0 + 640);
  swift_task_dealloc(*(void *)(*v0 + 1176));
  swift_release();
  swift_task_dealloc(v2);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v1 + 1184) = v7;
  v7(v3, v5);
  return swift_task_switch(sub_1004497D8, v6, 0LL);
}

uint64_t sub_1004497D8()
{
  uint64_t v1 = *(void *)(v0 + 1096);
  uint64_t v2 = *(void *)(v0 + 1088);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1104) + 48LL))(v2, 1LL, v1) == 1)
  {
    sub_100015794(v2, &qword_1009AE490);
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 1112);
    uint64_t v7 = *(void **)(v0 + 616);
    sub_10002218C(v2, v6, type metadata accessor for BeaconNamingRecord);
    uint64_t v8 = v7[3];
    uint64_t v9 = v7[4];
    sub_100012ED8(v7, v8);
    uint64_t v10 = *(void *)(v6 + *(int *)(v1 + 28));
    uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 200))(v10, v8, v9);
    uint64_t v3 = v11;
    uint64_t v12 = *(void *)(v0 + 1112);
    uint64_t v13 = *(void *)(v0 + 1096);
    if (v10 == SPBeaconRoleIdOther)
    {
      uint64_t v14 = v12 + *(int *)(v13 + 36);
      if (*(void *)(v14 + 8))
      {
        if (v11)
        {
          id v15 = objc_msgSend(v11, "role", swift_bridgeObjectRetain(*(void *)(v14 + 8)).n128_f64[0]);
          static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

          id v16 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
          NSString v17 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v18 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v19 = [v16 initWithRoleId:v10 role:v17 roleEmoji:v18];

          uint64_t v12 = *(void *)(v0 + 1112);
          uint64_t v13 = *(void *)(v0 + 1096);
          uint64_t v3 = v19;
        }
      }
    }

    uint64_t v20 = (uint64_t *)(v12 + *(int *)(v13 + 32));
    uint64_t v4 = *v20;
    uint64_t v5 = v20[1];
    swift_bridgeObjectRetain(v5);
    sub_100018C68(v12, type metadata accessor for BeaconNamingRecord);
  }

  *(void *)(v0 + 1208) = v5;
  *(void *)(v0 + 1200) = v4;
  *(void *)(v0 + 1192) = v3;
  uint64_t v21 = *(void *)(v0 + 632);
  if ((v21 & 0x200) != 0)
  {
    uint64_t v29 = *(void *)(v0 + 1000);
    uint64_t v30 = *(void **)(v0 + 616);
    uint64_t v31 = *(int *)(*(void *)(v0 + 976) + 48LL);
    *(_DWORD *)(v0 + 1900) = v31;
    uint64_t v32 = v29 + v31;
    uint64_t v33 = v30[3];
    uint64_t v34 = v30[4];
    sub_100012ED8(v30, v33);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v34 + 8) + 8LL) + 32LL))(v33);
    unint64_t v35 = (void *)swift_task_alloc(dword_1009B637C);
    *(void *)(v0 + 12swift_weakDestroy(v0 + 16) = v35;
    *unint64_t v35 = v0;
    v35[1] = sub_100449DB8;
    return sub_1005EB0F0(v32, *(void *)(v0 + 1072), 1);
  }

  *(void *)(v0 + 1392) = v5;
  *(void *)(v0 + 1384) = v4;
  *(void *)(v0 + 1376) = v3;
  *(_BYTE *)(v0 + 1918) = 0;
  *(_WORD *)(v0 + 19swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v0 + 1368) = 0LL;
  *(_OWORD *)(v0 + 1336) = 0u;
  *(_OWORD *)(v0 + 1352) = 0u;
  if ((v21 & 0x203) != 0)
  {
    uint64_t v22 = *(void *)(v0 + 624);
    uint64_t v23 = *(void **)(v0 + 616);
    uint64_t v24 = v23[3];
    uint64_t v25 = v23[4];
    sub_100012ED8(v23, v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8LL) + 32LL))(v24);
    uint64_t v26 = sub_10044BE7C;
LABEL_11:
    uint64_t v27 = v22;
    return swift_task_switch(v26, v27, 0LL);
  }

  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 656) + 56LL))( *(void *)(v0 + 752),  1LL,  1LL,  *(void *)(v0 + 648));
  *(_OWORD *)(v0 + 1456) = 0u;
  uint64_t v36 = *(void *)(v0 + 632);
  if ((v36 & 2) != 0
    && (uint64_t v37 = *(void *)(v0 + 752),
        uint64_t v38 = *(void *)(v0 + 648),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 656) + 48LL))(v37, 1LL, v38)))
  {
    uint64_t v60 = (uint64_t *)(v37 + *(int *)(v38 + 32));
    uint64_t v39 = *v60;
    swift_bridgeObjectRetain(v60[1]);
  }

  else
  {
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
  }

  *(void *)(v0 + 1480) = v40;
  *(void *)(v0 + 1472) = v39;
  if ((v36 & 0x204) != 0)
  {
    os_log_type_t v41 = *(void **)(v0 + 616);
    uint64_t v42 = v41[3];
    uint64_t v43 = v41[4];
    sub_100012ED8(v41, v42);
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 48))(v42, v43);
    BOOL v45 = (v36 & 0x208) == 0;
    uint64_t v36 = *(void *)(v0 + 632);
    if (v45)
    {
      uint64_t v46 = 0LL;
      goto LABEL_24;
    }
  }

  else
  {
    uint64_t v44 = 0LL;
    uint64_t v46 = 0LL;
    if ((v36 & 8) == 0) {
      goto LABEL_24;
    }
  }

  *(void *)(v0 + 1488) = v44;
  uint64_t v47 = *(void **)(v0 + 616);
  uint64_t v48 = v47[3];
  uint64_t v49 = v47[4];
  sub_100012ED8(v47, v48);
  uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 56))(v48, v49);
  *(void *)(v0 + 1496) = v50;
  if ((v36 & 0x200) != 0)
  {
    uint64_t v27 = *(void *)(v0 + 624);
    uint64_t v26 = sub_10044C874;
    return swift_task_switch(v26, v27, 0LL);
  }

  uint64_t v46 = v50;
  uint64_t v36 = *(void *)(v0 + 632);
LABEL_24:
  unint64_t v51 = sub_10041362C((uint64_t)_swiftEmptyArrayStorage);
  if ((v36 & 0x20) != 0)
  {
    *(void *)(v0 + 1608) = v44;
    *(void *)(v0 + 1600) = v46;
    *(void *)(v0 + 1592) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1584) = v51;
    *(_BYTE *)(v0 + 1919) = 0;
    unint64_t v56 = *(void **)(v0 + 616);
    uint64_t v57 = v56[3];
    uint64_t v58 = v56[4];
    sub_100012ED8(v56, v57);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v58 + 8) + 8LL) + 32LL))(v57);
    uint64_t v59 = (void *)swift_task_alloc(dword_1009B6384);
    *(void *)(v0 + 16swift_weakDestroy(v0 + 16) = v59;
    *uint64_t v59 = v0;
    v59[1] = sub_10044D0A4;
    return sub_1005EB52C(*(void *)(v0 + 1072));
  }

  else
  {
    uint64_t v52 = *(void *)(v0 + 632);
    if ((v52 & 0x100) == 0)
    {
      *(void *)(v0 + 1720) = v44;
      *(void *)(v0 + 1712) = v46;
      *(void *)(v0 + 1704) = &_swiftEmptySetSingleton;
      *(void *)(v0 + 1696) = v51;
      *(_BYTE *)(v0 + 1921) = 0;
      *(_OWORD *)(v0 + 1680) = 0u;
      uint64_t v22 = *(void *)(v0 + 624);
      if ((v52 & 0x240) != 0)
      {
        uint64_t v53 = *(void **)(v0 + 616);
        uint64_t v54 = v53[3];
        uint64_t v55 = v53[4];
        sub_100012ED8(v53, v54);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v55 + 8) + 8LL) + 32LL))(v54);
        uint64_t v26 = sub_10044D5A0;
      }

      else
      {
        *(void *)(v0 + 1768) = 0LL;
        *(void *)(v0 + 1760) = v22;
        uint64_t v62 = *(void **)(v0 + 616);
        uint64_t v63 = v62[3];
        uint64_t v64 = v62[4];
        sub_100012ED8(v62, v63);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v64 + 8) + 8LL) + 32LL))(v63);
        uint64_t v26 = sub_10044D89C;
      }

      goto LABEL_11;
    }

    *(void *)(v0 + 1664) = v44;
    *(void *)(v0 + 1656) = v46;
    *(void *)(v0 + 1648) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1640) = v51;
    *(_BYTE *)(v0 + 1920) = 0;
    *(void *)(v0 + 1632) = 0LL;
    uint64_t v61 = (void *)swift_task_alloc(dword_1009AE1FC);
    *(void *)(v0 + 1672) = v61;
    *uint64_t v61 = v0;
    v61[1] = sub_10044D2EC;
    return sub_100448784(*(void *)(v0 + 688), *(void *)(v0 + 616));
  }

uint64_t sub_100449DB8(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1216LL);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)v1 + 1184LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 1072LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 1008LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 640LL);
  *(_BYTE *)(*(void *)v1 + 1913LL) = a1;
  swift_task_dealloc(v2);
  v3(v4, v5);
  return swift_task_switch(sub_100449E38, v6, 0LL);
}

uint64_t sub_100449E38()
{
  uint64_t v115 = v0 + 176;
  char v1 = *(_BYTE *)(v0 + 1913);
  uint64_t v2 = *(_BYTE **)(v0 + 1000);
  uint64_t v3 = *(_BYTE **)(v0 + 992);
  uint64_t v4 = *(_BYTE **)(v0 + 984);
  uint64_t v5 = *(void *)(v0 + 976);
  uint64_t v6 = *(void *)(v0 + 968);
  uint64_t v7 = *(void *)(v0 + 936);
  uint64_t v8 = *(void *)(v0 + 928);
  uint64_t v9 = (uint64_t)&v2[*(int *)(v0 + 1900)];
  *uint64_t v2 = v1;
  uint64_t v10 = (uint64_t)&v3[*(int *)(v5 + 48)];
  *uint64_t v3 = v1;
  sub_10001581C(v9, v10, (uint64_t *)&unk_10099D720);
  sub_100015794(v10, (uint64_t *)&unk_10099D720);
  uint64_t v11 = (uint64_t)&v4[*(int *)(v5 + 48)];
  *uint64_t v4 = v1;
  sub_10001581C(v9, v11, (uint64_t *)&unk_10099D720);
  sub_100015750(v11, v6, (uint64_t *)&unk_10099D720);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1LL, v8);
  uint64_t v13 = *(void *)(v0 + 968);
  if (v12 == 1)
  {
    sub_100015794(*(void *)(v0 + 968), (uint64_t *)&unk_10099D720);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 944);
    uint64_t v15 = *(void *)(v0 + 936);
    uint64_t v16 = *(void *)(v0 + 928);
    static Date.trustedNow.getter(v14);
    double v17 = Date.timeIntervalSince(_:)(v14);
    NSString v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v18(v14, v16);
    v18(v13, v16);
    if (v17 > 0.0)
    {
      uint64_t v113 = (__int128 *)(v0 + 56);
      uint64_t v114 = v0 + 456;
      uint64_t v19 = *(void *)(v0 + 640);
      uint64_t v20 = *(void **)(v0 + 616);
      uint64_t v22 = v20[3];
      uint64_t v21 = v20[4];
      sub_100012ED8(v20, v22);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8LL) + 32LL))(v22);
      uint64_t v23 = (void *)(v19 + 200);
      __n128 v24 = swift_beginAccess(v19 + 200, v0 + 504, 0LL, 0LL);
      if (*(void *)(*(void *)(v19 + 200) + 16LL))
      {
        uint64_t v25 = *(void *)(v0 + 1056);
        swift_bridgeObjectRetain(*(void *)(v19 + 200));
        sub_10030D124(v25);
        uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 1184);
        uint64_t v27 = *(void *)(v0 + 1056);
        uint64_t v28 = *(void *)(v0 + 1008);
        if ((v29 & 1) != 0)
        {
          swift_retain();
          swift_bridgeObjectRelease();
          v26(v27, v28);
          sub_100004AEC((uint64_t *)&unk_1009A5470);
          Task.cancel()();
          swift_release();
        }

        else
        {
          swift_bridgeObjectRelease();
          v26(v27, v28);
        }
      }

      else
      {
        (*(void (**)(void, void, __n128))(v0 + 1184))( *(void *)(v0 + 1056),  *(void *)(v0 + 1008),  v24);
      }

      uint64_t v30 = *(void *)(v0 + 1072);
      uint64_t v111 = *(void *)(v0 + 1008);
      uint64_t v112 = *(void (**)(uint64_t, uint64_t))(v0 + 1184);
      uint64_t v31 = *(void *)(v0 + 920);
      uint64_t v32 = *(void *)(v0 + 640);
      uint64_t v33 = *(void *)(v0 + 624);
      uint64_t v34 = *(void **)(v0 + 616);
      uint64_t v36 = v34[3];
      uint64_t v35 = v34[4];
      sub_100012ED8(v34, v36);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v35 + 8) + 8LL) + 32LL))(v36);
      uint64_t v37 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v31, 1LL, 1LL, v37);
      uint64_t v38 = swift_allocObject(&unk_10095A900, 24LL, 7LL);
      swift_weakInit(v38 + 16, v32);
      sub_100013044((uint64_t)v34, (uint64_t)v113);
      uint64_t v39 = swift_allocObject(&unk_10095A928, 96LL, 7LL);
      *(void *)(v39 + swift_weakDestroy(v0 + 16) = 0LL;
      *(void *)(v39 + 24) = 0LL;
      *(double *)(v39 + 32) = v17;
      *(void *)(v39 + 40) = v38;
      sub_100012EC0(v113, v39 + 48);
      *(void *)(v39 + 88) = v33;
      swift_retain();
      uint64_t v40 = sub_1003B76DC(v31, (uint64_t)&unk_1009AE4E0, v39);
      swift_beginAccess(v23, v114, 33LL, 0LL);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v23);
      uint64_t v116 = *v23;
      *uint64_t v23 = 0x8000000000000000LL;
      sub_10005E6F0(v40, v30, isUniquelyReferenced_nonNull_native);
      *uint64_t v23 = v116;
      swift_bridgeObjectRelease();
      v112(v30, v111);
      swift_endAccess(v114);
    }
  }

  uint64_t v42 = *(void *)(v0 + 888);
  uint64_t v43 = *(void *)(v0 + 880);
  uint64_t v44 = *(void *)(v0 + 872);
  uint64_t v45 = *(void *)(v0 + 616);
  sub_100015794(*(void *)(v0 + 1000), &qword_1009A1800);
  sub_100013044(v45, v115);
  uint64_t v46 = sub_100004AEC(&qword_1009B0530);
  int v47 = swift_dynamicCast(v44, v115, v46, v43, 6LL);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v42 + 56);
  uint64_t v49 = *(void **)(v0 + 616);
  if (v47)
  {
    uint64_t v50 = *(void *)(v0 + 912);
    uint64_t v51 = *(void *)(v0 + 872);
    uint64_t v52 = *(void *)(v0 + 624);
    v48(v51, 0LL, 1LL, *(void *)(v0 + 880));
    sub_10002218C(v51, v50, type metadata accessor for OwnedBeaconRecord);
    uint64_t v53 = v49[3];
    uint64_t v54 = v49[4];
    sub_100012ED8(v49, v53);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v54 + 8) + 8LL) + 32LL))(v53);
    uint64_t v55 = sub_10044A7B8;
    uint64_t v56 = v52;
    return swift_task_switch(v55, v56, 0LL);
  }

  uint64_t v57 = *(void *)(v0 + 872);
  uint64_t v58 = *(void *)(v0 + 776);
  uint64_t v59 = *(void *)(v0 + 768);
  uint64_t v60 = *(void *)(v0 + 760);
  v48(v57, 1LL, 1LL, *(void *)(v0 + 880));
  sub_100015794(v57, (uint64_t *)&unk_1009A9C30);
  sub_100013044((uint64_t)v49, v0 + 136);
  int v61 = swift_dynamicCast(v60, v0 + 136, v46, v59, 6LL);
  uint64_t v62 = *(void (**)(void, uint64_t, uint64_t, void))(v58 + 56);
  uint64_t v63 = *(int **)(v0 + 768);
  uint64_t v64 = *(void *)(v0 + 760);
  if (!v61)
  {
    uint64_t v77 = *(void *)(v0 + 624);
    uint64_t v78 = *(void **)(v0 + 616);
    v62(*(void *)(v0 + 760), 1LL, 1LL, *(void *)(v0 + 768));
    sub_100015794(v64, (uint64_t *)&unk_1009AE470);
    uint64_t v79 = v78[3];
    uint64_t v80 = v78[4];
    sub_100012ED8(v78, v79);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v80 + 8) + 8LL) + 32LL))(v79);
    uint64_t v55 = sub_10044B748;
    uint64_t v56 = v77;
    return swift_task_switch(v55, v56, 0LL);
  }

  uint64_t v65 = *(void *)(v0 + 800);
  v62(*(void *)(v0 + 760), 0LL, 1LL, *(void *)(v0 + 768));
  sub_10002218C(v64, v65, type metadata accessor for SharedBeaconRecord);
  uint64_t v66 = v65 + v63[7];
  uint64_t v67 = *(void *)(v66 + 8);
  uint64_t v68 = *(void **)(v66 + 16);
  char v69 = *(_BYTE *)v66;
  swift_bridgeObjectRetain(v68);
  uint64_t v70 = sub_1006054A8(v69, v67, v68);
  swift_bridgeObjectRelease();
  BOOL v71 = sub_1005E269C(*(void *)(v65 + v63[11]), *(void *)(v65 + v63[12]));
  sub_100018C68(v65, type metadata accessor for SharedBeaconRecord);
  char v72 = *(_BYTE *)(v0 + 1913);
  *(void *)(v0 + 1392) = *(void *)(v0 + 1208);
  *(_OWORD *)(v0 + 1376) = *(_OWORD *)(v0 + 1192);
  *(_BYTE *)(v0 + 1918) = v72;
  *(void *)(v0 + 1368) = 0LL;
  *(void *)(v0 + 1360) = v70;
  *(_BYTE *)(v0 + 1917) = 0;
  *(_BYTE *)(v0 + 19swift_weakDestroy(v0 + 16) = v71;
  *(void *)(v0 + 1336) = 0LL;
  *(void *)(v0 + 1352) = 0LL;
  *(void *)(v0 + 1344) = 0LL;
  if ((*(_WORD *)(v0 + 632) & 0x203) != 0)
  {
    uint64_t v73 = *(void *)(v0 + 624);
    uint64_t v74 = *(void **)(v0 + 616);
    uint64_t v75 = v74[3];
    uint64_t v76 = v74[4];
    sub_100012ED8(v74, v75);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v76 + 8) + 8LL) + 32LL))(v75);
    uint64_t v55 = sub_10044BE7C;
LABEL_15:
    uint64_t v56 = v73;
    return swift_task_switch(v55, v56, 0LL);
  }

  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 656) + 56LL))( *(void *)(v0 + 752),  1LL,  1LL,  *(void *)(v0 + 648));
  *(_OWORD *)(v0 + 1456) = 0u;
  uint64_t v82 = *(void *)(v0 + 632);
  if ((v82 & 2) != 0
    && (uint64_t v83 = *(void *)(v0 + 752),
        uint64_t v84 = *(void *)(v0 + 648),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 656) + 48LL))(v83, 1LL, v84)))
  {
    char v106 = (uint64_t *)(v83 + *(int *)(v84 + 32));
    uint64_t v85 = *v106;
    swift_bridgeObjectRetain(v106[1]);
  }

  else
  {
    uint64_t v85 = 0LL;
    uint64_t v86 = 0LL;
  }

  *(void *)(v0 + 1480) = v86;
  *(void *)(v0 + 1472) = v85;
  if ((v82 & 0x204) != 0)
  {
    uint64_t v87 = *(void **)(v0 + 616);
    uint64_t v88 = v87[3];
    uint64_t v89 = v87[4];
    sub_100012ED8(v87, v88);
    uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 48))(v88, v89);
    BOOL v91 = (v82 & 0x208) == 0;
    uint64_t v82 = *(void *)(v0 + 632);
    if (v91)
    {
      uint64_t v92 = 0LL;
      goto LABEL_28;
    }
  }

  else
  {
    uint64_t v90 = 0LL;
    uint64_t v92 = 0LL;
    if ((v82 & 8) == 0) {
      goto LABEL_28;
    }
  }

  *(void *)(v0 + 1488) = v90;
  uint64_t v93 = *(void **)(v0 + 616);
  uint64_t v94 = v93[3];
  uint64_t v95 = v93[4];
  sub_100012ED8(v93, v94);
  uint64_t v96 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 56))(v94, v95);
  *(void *)(v0 + 1496) = v96;
  if ((v82 & 0x200) != 0)
  {
    uint64_t v56 = *(void *)(v0 + 624);
    uint64_t v55 = sub_10044C874;
    return swift_task_switch(v55, v56, 0LL);
  }

  uint64_t v92 = v96;
  uint64_t v82 = *(void *)(v0 + 632);
LABEL_28:
  unint64_t v97 = sub_10041362C((uint64_t)_swiftEmptyArrayStorage);
  if ((v82 & 0x20) != 0)
  {
    *(void *)(v0 + 1608) = v90;
    *(void *)(v0 + 1600) = v92;
    *(void *)(v0 + 1592) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1584) = v97;
    *(_BYTE *)(v0 + 1919) = 0;
    uint64_t v102 = *(void **)(v0 + 616);
    uint64_t v103 = v102[3];
    uint64_t v104 = v102[4];
    sub_100012ED8(v102, v103);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v104 + 8) + 8LL) + 32LL))(v103);
    uint64_t v105 = (void *)swift_task_alloc(dword_1009B6384);
    *(void *)(v0 + 16swift_weakDestroy(v0 + 16) = v105;
    *uint64_t v105 = v0;
    v105[1] = sub_10044D0A4;
    return sub_1005EB52C(*(void *)(v0 + 1072));
  }

  else
  {
    uint64_t v98 = *(void *)(v0 + 632);
    if ((v98 & 0x100) == 0)
    {
      *(void *)(v0 + 1720) = v90;
      *(void *)(v0 + 1712) = v92;
      *(void *)(v0 + 1704) = &_swiftEmptySetSingleton;
      *(void *)(v0 + 1696) = v97;
      *(_BYTE *)(v0 + 1921) = 0;
      *(_OWORD *)(v0 + 1680) = 0u;
      uint64_t v73 = *(void *)(v0 + 624);
      if ((v98 & 0x240) != 0)
      {
        uint64_t v99 = *(void **)(v0 + 616);
        uint64_t v100 = v99[3];
        uint64_t v101 = v99[4];
        sub_100012ED8(v99, v100);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v101 + 8) + 8LL) + 32LL))(v100);
        uint64_t v55 = sub_10044D5A0;
      }

      else
      {
        *(void *)(v0 + 1768) = 0LL;
        *(void *)(v0 + 1760) = v73;
        uint64_t v108 = *(void **)(v0 + 616);
        uint64_t v109 = v108[3];
        uint64_t v110 = v108[4];
        sub_100012ED8(v108, v109);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v110 + 8) + 8LL) + 32LL))(v109);
        uint64_t v55 = sub_10044D89C;
      }

      goto LABEL_15;
    }

    *(void *)(v0 + 1664) = v90;
    *(void *)(v0 + 1656) = v92;
    *(void *)(v0 + 1648) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1640) = v97;
    *(_BYTE *)(v0 + 1920) = 0;
    *(void *)(v0 + 1632) = 0LL;
    uint64_t v107 = (void *)swift_task_alloc(dword_1009AE1FC);
    *(void *)(v0 + 1672) = v107;
    *uint64_t v107 = v0;
    v107[1] = sub_10044D2EC;
    return sub_100448784(*(void *)(v0 + 688), *(void *)(v0 + 616));
  }

uint64_t sub_10044A7B8()
{
  char v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 1896);
  uint64_t v3 = *(void *)(v0 + 1064);
  uint64_t v4 = *(void *)(v0 + 1008);
  uint64_t v5 = *(void *)(v0 + 624);
  uint64_t v6 = (v2 + 24) & ~v2;
  uint64_t v7 = v6 + *(void *)(v0 + 1024);
  uint64_t v8 = v2 | 7;
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 1144))(v3, *(void *)(v0 + 1072), v4);
  uint64_t v9 = swift_allocObject(&unk_10095A8B0, v7, v8);
  *(void *)(v0 + 1224) = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v5;
  v1(v9 + v6, v3, v4);
  swift_retain();
  return swift_task_switch(sub_10044A874, 0LL, 0LL);
}

uint64_t sub_10044A874()
{
  uint64_t v1 = v0[153];
  uint64_t v2 = v0[142];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[154] = v3;
  v3[2] = v2;
  v3[3] = sub_1004512EC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[155] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10044A924;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[108],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100451C80,  v3,  v0[106]);
}

uint64_t sub_10044A924()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1232LL);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 1184LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 1072LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 1008LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 640LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1240LL));
  swift_release();
  swift_task_dealloc(v1);
  v2(v3, v4);
  return swift_task_switch(sub_10044A9BC, v5, 0LL);
}

uint64_t sub_10044A9BC()
{
  uint64_t v1 = *(void *)(v0 + 864);
  uint64_t v2 = (int *)type metadata accessor for LostModeRecord(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v2 - 1) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, &qword_1009AA840);
    id v3 = 0LL;
  }

  else
  {
    uint64_t v4 = v2[8];
    uint64_t v5 = (uint64_t *)(v1 + v2[9]);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v8 = (uint64_t *)(v1 + v2[7]);
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    uint64_t v12 = *(void *)(v1 + v4);
    uint64_t v11 = *(void *)(v1 + v4 + 8);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    uint64_t v13 = objc_autoreleasePoolPush();
    sub_100544824(v1);
    uint64_t v14 = *(void *)(v0 + 960);
    uint64_t v69 = v7;
    uint64_t v15 = *(void *)(v0 + 936);
    uint64_t v16 = *(void *)(v0 + 928);
    uint64_t v71 = *(void *)(v0 + 864);
    objc_autoreleasePoolPop(v13);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v14, 0LL, 1LL, v16);
    id v17 = objc_allocWithZone(&OBJC_CLASS___SPLostModeInfo);
    id v3 = sub_100545B10(v69, v6, v10, v9, v12, v11, v14);
    sub_100018C68(v71, type metadata accessor for LostModeRecord);
  }

  id v72 = v3;
  *(void *)(v0 + 1256) = v3;
  *(void *)(v0 + 1248) = 0LL;
  if (qword_10099B618 != -1) {
    swift_once(&qword_10099B618, sub_1005D3D24);
  }
  uint64_t v18 = *(void *)(v0 + 1016);
  uint64_t v19 = *(void *)(v0 + 1008);
  uint64_t v20 = *(void *)(v0 + 912);
  uint64_t v21 = *(int **)(v0 + 880);
  uint64_t v22 = *(void *)(v0 + 840);
  uint64_t v23 = (void *)qword_100A2AE98;
  *(void *)(v0 + 1264) = qword_100A2AE98;
  char v24 = *(_BYTE *)(v20 + v21[20]);
  *(_BYTE *)(v0 + 1914) = v24;
  uint64_t v25 = *(void *)(v20 + v21[16]);
  uint64_t v26 = *(void *)(v20 + v21[17]);
  id v70 = v23;
  BOOL v27 = sub_1005E269C(v25, v26);
  *(_BYTE *)(v0 + 1915) = v27;
  sub_10001581C(v20 + v21[7], v22, &qword_10099D8A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v22, 1LL, v19) == 1)
  {
    uint64_t v28 = *(void *)(v0 + 840);
    sub_100018C68(*(void *)(v0 + 912), type metadata accessor for OwnedBeaconRecord);
    sub_100015794(v28, &qword_10099D8A0);
  }

  else
  {
    (*(void (**)(void, void, void))(v0 + 1160))( *(void *)(v0 + 1048),  *(void *)(v0 + 840),  *(void *)(v0 + 1008));
    sub_1005D314C();
    *(void *)(v0 + 1272) = v29;
    *(void *)(v0 + 1280) = v30;
    if (v30 >> 60 != 15)
    {
      uint64_t v38 = *(void *)(v0 + 624);
      uint64_t v37 = sub_10044B014;
      return swift_task_switch(v37, v38, 0LL);
    }

    uint64_t v31 = *(void *)(v0 + 912);
    (*(void (**)(void, void))(v0 + 1184))(*(void *)(v0 + 1048), *(void *)(v0 + 1008));
    sub_100018C68(v31, type metadata accessor for OwnedBeaconRecord);
  }

  char v32 = *(_BYTE *)(v0 + 1913);
  *(void *)(v0 + 1392) = *(void *)(v0 + 1208);
  *(_OWORD *)(v0 + 1376) = *(_OWORD *)(v0 + 1192);
  *(_BYTE *)(v0 + 1918) = v32;
  *(void *)(v0 + 1368) = v72;
  *(void *)(v0 + 1360) = v70;
  *(_BYTE *)(v0 + 1917) = v24;
  *(_BYTE *)(v0 + 19swift_weakDestroy(v0 + 16) = v27;
  *(void *)(v0 + 1336) = 0LL;
  *(void *)(v0 + 1352) = 0LL;
  *(void *)(v0 + 1344) = 0LL;
  if ((*(_WORD *)(v0 + 632) & 0x203) != 0)
  {
    uint64_t v33 = *(void *)(v0 + 624);
    uint64_t v34 = *(void **)(v0 + 616);
    uint64_t v35 = v34[3];
    uint64_t v36 = v34[4];
    sub_100012ED8(v34, v35);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v36 + 8) + 8LL) + 32LL))(v35);
    uint64_t v37 = sub_10044BE7C;
LABEL_12:
    uint64_t v38 = v33;
    return swift_task_switch(v37, v38, 0LL);
  }

  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 656) + 56LL))( *(void *)(v0 + 752),  1LL,  1LL,  *(void *)(v0 + 648));
  *(_OWORD *)(v0 + 1456) = 0u;
  uint64_t v39 = *(void *)(v0 + 632);
  if ((v39 & 2) != 0
    && (uint64_t v40 = *(void *)(v0 + 752),
        uint64_t v41 = *(void *)(v0 + 648),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 656) + 48LL))(v40, 1LL, v41)))
  {
    uint64_t v64 = (uint64_t *)(v40 + *(int *)(v41 + 32));
    uint64_t v42 = *v64;
    swift_bridgeObjectRetain(v64[1]);
  }

  else
  {
    uint64_t v42 = 0LL;
    uint64_t v43 = 0LL;
  }

  *(void *)(v0 + 1480) = v43;
  *(void *)(v0 + 1472) = v42;
  if ((v39 & 0x204) != 0)
  {
    uint64_t v44 = *(void **)(v0 + 616);
    uint64_t v45 = v44[3];
    uint64_t v46 = v44[4];
    sub_100012ED8(v44, v45);
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 48))(v45, v46);
    BOOL v48 = (v39 & 0x208) == 0;
    uint64_t v39 = *(void *)(v0 + 632);
    if (v48)
    {
      uint64_t v49 = 0LL;
      goto LABEL_24;
    }
  }

  else
  {
    uint64_t v47 = 0LL;
    uint64_t v49 = 0LL;
    if ((v39 & 8) == 0) {
      goto LABEL_24;
    }
  }

  *(void *)(v0 + 1488) = v47;
  uint64_t v50 = *(void **)(v0 + 616);
  uint64_t v51 = v50[3];
  uint64_t v52 = v50[4];
  sub_100012ED8(v50, v51);
  uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 56))(v51, v52);
  *(void *)(v0 + 1496) = v53;
  if ((v39 & 0x200) != 0)
  {
    uint64_t v38 = *(void *)(v0 + 624);
    uint64_t v37 = sub_10044C874;
    return swift_task_switch(v37, v38, 0LL);
  }

  uint64_t v49 = v53;
  uint64_t v39 = *(void *)(v0 + 632);
LABEL_24:
  unint64_t v54 = sub_10041362C((uint64_t)_swiftEmptyArrayStorage);
  if ((v39 & 0x20) != 0)
  {
    *(void *)(v0 + 1608) = v47;
    *(void *)(v0 + 1600) = v49;
    *(void *)(v0 + 1592) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1584) = v54;
    *(_BYTE *)(v0 + 1919) = 0;
    uint64_t v59 = *(void **)(v0 + 616);
    uint64_t v60 = v59[3];
    uint64_t v61 = v59[4];
    sub_100012ED8(v59, v60);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v61 + 8) + 8LL) + 32LL))(v60);
    uint64_t v62 = (void *)swift_task_alloc(dword_1009B6384);
    *(void *)(v0 + 16swift_weakDestroy(v0 + 16) = v62;
    void *v62 = v0;
    v62[1] = sub_10044D0A4;
    return sub_1005EB52C(*(void *)(v0 + 1072));
  }

  uint64_t v55 = *(void *)(v0 + 632);
  if ((v55 & 0x100) == 0)
  {
    *(void *)(v0 + 1720) = v47;
    *(void *)(v0 + 1712) = v49;
    *(void *)(v0 + 1704) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1696) = v54;
    *(_BYTE *)(v0 + 1921) = 0;
    *(_OWORD *)(v0 + 1680) = 0u;
    uint64_t v33 = *(void *)(v0 + 624);
    if ((v55 & 0x240) != 0)
    {
      uint64_t v56 = *(void **)(v0 + 616);
      uint64_t v57 = v56[3];
      uint64_t v58 = v56[4];
      sub_100012ED8(v56, v57);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v58 + 8) + 8LL) + 32LL))(v57);
      uint64_t v37 = sub_10044D5A0;
    }

    else
    {
      *(void *)(v0 + 1768) = 0LL;
      *(void *)(v0 + 1760) = v33;
      uint64_t v66 = *(void **)(v0 + 616);
      uint64_t v67 = v66[3];
      uint64_t v68 = v66[4];
      sub_100012ED8(v66, v67);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v68 + 8) + 8LL) + 32LL))(v67);
      uint64_t v37 = sub_10044D89C;
    }

    goto LABEL_12;
  }

  *(void *)(v0 + 1664) = v47;
  *(void *)(v0 + 1656) = v49;
  *(void *)(v0 + 1648) = &_swiftEmptySetSingleton;
  *(void *)(v0 + 1640) = v54;
  *(_BYTE *)(v0 + 1920) = 0;
  *(void *)(v0 + 1632) = 0LL;
  uint64_t v65 = (void *)swift_task_alloc(dword_1009AE1FC);
  *(void *)(v0 + 1672) = v65;
  *uint64_t v65 = v0;
  v65[1] = sub_10044D2EC;
  return sub_100448784(*(void *)(v0 + 688), *(void *)(v0 + 616));
}

uint64_t sub_10044B014()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 1896);
  uint64_t v3 = *(void *)(v0 + 1072);
  uint64_t v4 = *(void *)(v0 + 1008);
  uint64_t v5 = *(void *)(v0 + 624);
  uint64_t v6 = (v2 + 24) & ~v2;
  uint64_t v7 = v6 + *(void *)(v0 + 1024);
  uint64_t v8 = v2 | 7;
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 1144))(v3, *(void *)(v0 + 1048), v4);
  uint64_t v9 = swift_allocObject(&unk_10095A8D8, v7, v8);
  *(void *)(v0 + 1288) = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v5;
  v1(v9 + v6, v3, v4);
  swift_retain();
  return swift_task_switch(sub_10044B0D0, 0LL, 0LL);
}

uint64_t sub_10044B0D0()
{
  uint64_t v1 = v0[161];
  uint64_t v2 = v0[142];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[162] = v3;
  v3[2] = v2;
  v3[3] = sub_100118674;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[163] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10044B180;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[102],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118680,  v3,  v0[101]);
}

uint64_t sub_10044B180()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1296LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 640LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1304LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10044B1F8, v2, 0LL);
}

uint64_t sub_10044B1F8()
{
  uint64_t v1 = *(void *)(v0 + 816);
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup(0LL);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2);
  unint64_t v4 = *(void *)(v0 + 1280);
  uint64_t v5 = *(void *)(v0 + 1272);
  if (v3 == 1)
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 1184);
    uint64_t v7 = *(void *)(v0 + 1048);
    uint64_t v8 = *(void *)(v0 + 1008);
    uint64_t v9 = *(void *)(v0 + 912);
    sub_1000182F0(v5, v4);
    v6(v7, v8);
    sub_100018C68(v9, type metadata accessor for OwnedBeaconRecord);
    uint64_t v10 = &qword_1009AA830;
    uint64_t v11 = v1;
LABEL_5:
    sub_100015794(v11, v10);
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    goto LABEL_7;
  }

  uint64_t v12 = *(void *)(v0 + 824);
  sub_1001CCC30(v5, v4, v12);
  sub_100018C68(v1, type metadata accessor for OwnedBeaconGroup);
  uint64_t v13 = type metadata accessor for MACAddress(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13);
  unint64_t v16 = *(void *)(v0 + 1280);
  uint64_t v17 = *(void *)(v0 + 1272);
  uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v0 + 1184);
  uint64_t v18 = *(void *)(v0 + 1048);
  uint64_t v19 = *(void *)(v0 + 1008);
  uint64_t v20 = *(void *)(v0 + 912);
  uint64_t v21 = *(void *)(v0 + 824);
  if (v15 == 1)
  {
    sub_1000182F0(v17, v16);
    v69(v18, v19);
    sub_100018C68(v20, type metadata accessor for OwnedBeaconRecord);
    uint64_t v10 = (uint64_t *)&unk_1009AE480;
    uint64_t v11 = v21;
    goto LABEL_5;
  }

  uint64_t v68 = v14;
  uint64_t v22 = MACAddress.bluetoothAddress.getter();
  uint64_t v67 = v20;
  uint64_t v23 = v24;
  sub_1000182F0(v17, v16);
  v69(v18, v19);
  sub_100018C68(v67, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v21, v13);
LABEL_7:
  char v25 = *(_BYTE *)(v0 + 1913);
  uint64_t v26 = *(void *)(v0 + 1256);
  uint64_t v27 = *(void *)(v0 + 1264);
  char v28 = *(_BYTE *)(v0 + 1914);
  char v29 = *(_BYTE *)(v0 + 1915);
  uint64_t v30 = *(void *)(v0 + 1248);
  *(void *)(v0 + 1392) = *(void *)(v0 + 1208);
  *(_OWORD *)(v0 + 1376) = *(_OWORD *)(v0 + 1192);
  *(_BYTE *)(v0 + 1918) = v25;
  *(void *)(v0 + 1368) = v26;
  *(void *)(v0 + 1360) = v27;
  *(_BYTE *)(v0 + 1917) = v28;
  *(_BYTE *)(v0 + 19swift_weakDestroy(v0 + 16) = v29;
  *(void *)(v0 + 1352) = v23;
  *(void *)(v0 + 1344) = v22;
  *(void *)(v0 + 1336) = v30;
  if ((*(_WORD *)(v0 + 632) & 0x203) != 0)
  {
    uint64_t v31 = *(void *)(v0 + 624);
    char v32 = *(void **)(v0 + 616);
    uint64_t v33 = v32[3];
    uint64_t v34 = v32[4];
    sub_100012ED8(v32, v33);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v34 + 8) + 8LL) + 32LL))(v33);
    uint64_t v35 = sub_10044BE7C;
LABEL_9:
    uint64_t v36 = v31;
    return swift_task_switch(v35, v36, 0LL);
  }

  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 656) + 56LL))( *(void *)(v0 + 752),  1LL,  1LL,  *(void *)(v0 + 648));
  *(_OWORD *)(v0 + 1456) = 0u;
  uint64_t v38 = *(void *)(v0 + 632);
  if ((v38 & 2) != 0
    && (uint64_t v39 = *(void *)(v0 + 752),
        uint64_t v40 = *(void *)(v0 + 648),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 656) + 48LL))(v39, 1LL, v40)))
  {
    uint64_t v62 = (uint64_t *)(v39 + *(int *)(v40 + 32));
    uint64_t v41 = *v62;
    swift_bridgeObjectRetain(v62[1]);
  }

  else
  {
    uint64_t v41 = 0LL;
    uint64_t v42 = 0LL;
  }

  *(void *)(v0 + 1480) = v42;
  *(void *)(v0 + 1472) = v41;
  if ((v38 & 0x204) != 0)
  {
    uint64_t v43 = *(void **)(v0 + 616);
    uint64_t v44 = v43[3];
    uint64_t v45 = v43[4];
    sub_100012ED8(v43, v44);
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 48))(v44, v45);
    BOOL v47 = (v38 & 0x208) == 0;
    uint64_t v38 = *(void *)(v0 + 632);
    if (v47)
    {
      uint64_t v48 = 0LL;
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v46 = 0LL;
    uint64_t v48 = 0LL;
    if ((v38 & 8) == 0) {
      goto LABEL_21;
    }
  }

  *(void *)(v0 + 1488) = v46;
  uint64_t v49 = *(void **)(v0 + 616);
  uint64_t v50 = v49[3];
  uint64_t v51 = v49[4];
  sub_100012ED8(v49, v50);
  uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 56))(v50, v51);
  *(void *)(v0 + 1496) = v52;
  if ((v38 & 0x200) != 0)
  {
    uint64_t v36 = *(void *)(v0 + 624);
    uint64_t v35 = sub_10044C874;
    return swift_task_switch(v35, v36, 0LL);
  }

  uint64_t v48 = v52;
  uint64_t v38 = *(void *)(v0 + 632);
LABEL_21:
  unint64_t v53 = sub_10041362C((uint64_t)_swiftEmptyArrayStorage);
  if ((v38 & 0x20) != 0)
  {
    *(void *)(v0 + 1608) = v46;
    *(void *)(v0 + 1600) = v48;
    *(void *)(v0 + 1592) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1584) = v53;
    *(_BYTE *)(v0 + 1919) = 0;
    uint64_t v58 = *(void **)(v0 + 616);
    uint64_t v59 = v58[3];
    uint64_t v60 = v58[4];
    sub_100012ED8(v58, v59);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v60 + 8) + 8LL) + 32LL))(v59);
    uint64_t v61 = (void *)swift_task_alloc(dword_1009B6384);
    *(void *)(v0 + 16swift_weakDestroy(v0 + 16) = v61;
    *uint64_t v61 = v0;
    v61[1] = sub_10044D0A4;
    return sub_1005EB52C(*(void *)(v0 + 1072));
  }

  else
  {
    uint64_t v54 = *(void *)(v0 + 632);
    if ((v54 & 0x100) == 0)
    {
      *(void *)(v0 + 1720) = v46;
      *(void *)(v0 + 1712) = v48;
      *(void *)(v0 + 1704) = &_swiftEmptySetSingleton;
      *(void *)(v0 + 1696) = v53;
      *(_BYTE *)(v0 + 1921) = 0;
      *(_OWORD *)(v0 + 1680) = 0u;
      uint64_t v31 = *(void *)(v0 + 624);
      if ((v54 & 0x240) != 0)
      {
        uint64_t v55 = *(void **)(v0 + 616);
        uint64_t v56 = v55[3];
        uint64_t v57 = v55[4];
        sub_100012ED8(v55, v56);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v57 + 8) + 8LL) + 32LL))(v56);
        uint64_t v35 = sub_10044D5A0;
      }

      else
      {
        *(void *)(v0 + 1768) = 0LL;
        *(void *)(v0 + 1760) = v31;
        uint64_t v64 = *(void **)(v0 + 616);
        uint64_t v65 = v64[3];
        uint64_t v66 = v64[4];
        sub_100012ED8(v64, v65);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v66 + 8) + 8LL) + 32LL))(v65);
        uint64_t v35 = sub_10044D89C;
      }

      goto LABEL_9;
    }

    *(void *)(v0 + 1664) = v46;
    *(void *)(v0 + 1656) = v48;
    *(void *)(v0 + 1648) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1640) = v53;
    *(_BYTE *)(v0 + 1920) = 0;
    *(void *)(v0 + 1632) = 0LL;
    uint64_t v63 = (void *)swift_task_alloc(dword_1009AE1FC);
    *(void *)(v0 + 1672) = v63;
    *uint64_t v63 = v0;
    v63[1] = sub_10044D2EC;
    return sub_100448784(*(void *)(v0 + 688), *(void *)(v0 + 616));
  }

uint64_t sub_10044B748()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 1896);
  uint64_t v3 = *(void *)(v0 + 1064);
  uint64_t v4 = *(void *)(v0 + 1008);
  uint64_t v5 = *(void *)(v0 + 624);
  uint64_t v6 = (v2 + 24) & ~v2;
  uint64_t v7 = v6 + *(void *)(v0 + 1024);
  uint64_t v8 = v2 | 7;
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 1144))(v3, *(void *)(v0 + 1072), v4);
  uint64_t v9 = swift_allocObject(&unk_10095A888, v7, v8);
  *(void *)(v0 + 1312) = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v5;
  v1(v9 + v6, v3, v4);
  swift_retain();
  return swift_task_switch(sub_10044B804, 0LL, 0LL);
}

uint64_t sub_10044B804()
{
  uint64_t v1 = v0[164];
  uint64_t v2 = v0[142];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[165] = v3;
  v3[2] = v2;
  v3[3] = sub_1004512EC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[166] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10044B8B4;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[107],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1004512F8,  v3,  v0[106]);
}

uint64_t sub_10044B8B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1320LL);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 1184LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 1072LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 1008LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 640LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1328LL));
  swift_release();
  swift_task_dealloc(v1);
  v2(v3, v4);
  return swift_task_switch(sub_10044B94C, v5, 0LL);
}

uint64_t sub_10044B94C()
{
  uint64_t v1 = *(void *)(v0 + 856);
  uint64_t v2 = (int *)type metadata accessor for LostModeRecord(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v2 - 1) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, &qword_1009AA840);
    id v3 = 0LL;
  }

  else
  {
    uint64_t v4 = v2[8];
    uint64_t v5 = (uint64_t *)(v1 + v2[9]);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v8 = (uint64_t *)(v1 + v2[7]);
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    uint64_t v12 = *(void *)(v1 + v4);
    uint64_t v11 = *(void *)(v1 + v4 + 8);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    uint64_t v13 = objc_autoreleasePoolPush();
    sub_100544824(v1);
    uint64_t v14 = *(void *)(v0 + 952);
    uint64_t v58 = v7;
    uint64_t v15 = *(void *)(v0 + 936);
    uint64_t v16 = *(void *)(v0 + 928);
    uint64_t v59 = *(void *)(v0 + 856);
    objc_autoreleasePoolPop(v13);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v14, 0LL, 1LL, v16);
    id v17 = objc_allocWithZone(&OBJC_CLASS___SPLostModeInfo);
    id v3 = sub_100545B10(v58, v6, v10, v9, v12, v11, v14);
    sub_100018C68(v59, type metadata accessor for LostModeRecord);
  }

  if (qword_10099B618 != -1) {
    swift_once(&qword_10099B618, sub_1005D3D24);
  }
  uint64_t v18 = (void *)qword_100A2AE98;
  char v19 = *(_BYTE *)(v0 + 1913);
  *(void *)(v0 + 1392) = *(void *)(v0 + 1208);
  *(_OWORD *)(v0 + 1376) = *(_OWORD *)(v0 + 1192);
  *(_BYTE *)(v0 + 1918) = v19;
  *(void *)(v0 + 1368) = v3;
  *(void *)(v0 + 1360) = v18;
  *(_WORD *)(v0 + 19swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v0 + 1336) = 0LL;
  *(void *)(v0 + 1352) = 0LL;
  uint64_t v20 = *(void *)(v0 + 632) & 0x203LL;
  *(void *)(v0 + 1344) = 0LL;
  id v21 = v18;
  if (v20)
  {
    uint64_t v22 = *(void *)(v0 + 624);
    uint64_t v23 = *(void **)(v0 + 616);
    uint64_t v24 = v23[3];
    uint64_t v25 = v23[4];
    sub_100012ED8(v23, v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8LL) + 32LL))(v24);
    uint64_t v26 = sub_10044BE7C;
LABEL_8:
    uint64_t v27 = v22;
    return swift_task_switch(v26, v27, 0LL);
  }

  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 656) + 56LL))( *(void *)(v0 + 752),  1LL,  1LL,  *(void *)(v0 + 648));
  *(_OWORD *)(v0 + 1456) = 0u;
  uint64_t v29 = *(void *)(v0 + 632);
  if ((v29 & 2) != 0
    && (uint64_t v30 = *(void *)(v0 + 752),
        uint64_t v31 = *(void *)(v0 + 648),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 656) + 48LL))(v30, 1LL, v31)))
  {
    unint64_t v53 = (uint64_t *)(v30 + *(int *)(v31 + 32));
    uint64_t v32 = *v53;
    swift_bridgeObjectRetain(v53[1]);
  }

  else
  {
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
  }

  *(void *)(v0 + 1480) = v33;
  *(void *)(v0 + 1472) = v32;
  if ((v29 & 0x204) != 0)
  {
    uint64_t v34 = *(void **)(v0 + 616);
    uint64_t v35 = v34[3];
    uint64_t v36 = v34[4];
    sub_100012ED8(v34, v35);
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 48))(v35, v36);
    BOOL v38 = (v29 & 0x208) == 0;
    uint64_t v29 = *(void *)(v0 + 632);
    if (v38)
    {
      uint64_t v39 = 0LL;
      goto LABEL_20;
    }
  }

  else
  {
    uint64_t v37 = 0LL;
    uint64_t v39 = 0LL;
    if ((v29 & 8) == 0) {
      goto LABEL_20;
    }
  }

  *(void *)(v0 + 1488) = v37;
  uint64_t v40 = *(void **)(v0 + 616);
  uint64_t v41 = v40[3];
  uint64_t v42 = v40[4];
  sub_100012ED8(v40, v41);
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 56))(v41, v42);
  *(void *)(v0 + 1496) = v43;
  if ((v29 & 0x200) != 0)
  {
    uint64_t v27 = *(void *)(v0 + 624);
    uint64_t v26 = sub_10044C874;
    return swift_task_switch(v26, v27, 0LL);
  }

  uint64_t v39 = v43;
  uint64_t v29 = *(void *)(v0 + 632);
LABEL_20:
  unint64_t v44 = sub_10041362C((uint64_t)_swiftEmptyArrayStorage);
  if ((v29 & 0x20) != 0)
  {
    *(void *)(v0 + 1608) = v37;
    *(void *)(v0 + 1600) = v39;
    *(void *)(v0 + 1592) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1584) = v44;
    *(_BYTE *)(v0 + 1919) = 0;
    uint64_t v49 = *(void **)(v0 + 616);
    uint64_t v50 = v49[3];
    uint64_t v51 = v49[4];
    sub_100012ED8(v49, v50);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v51 + 8) + 8LL) + 32LL))(v50);
    uint64_t v52 = (void *)swift_task_alloc(dword_1009B6384);
    *(void *)(v0 + 16swift_weakDestroy(v0 + 16) = v52;
    *uint64_t v52 = v0;
    v52[1] = sub_10044D0A4;
    return sub_1005EB52C(*(void *)(v0 + 1072));
  }

  else
  {
    uint64_t v45 = *(void *)(v0 + 632);
    if ((v45 & 0x100) == 0)
    {
      *(void *)(v0 + 1720) = v37;
      *(void *)(v0 + 1712) = v39;
      *(void *)(v0 + 1704) = &_swiftEmptySetSingleton;
      *(void *)(v0 + 1696) = v44;
      *(_BYTE *)(v0 + 1921) = 0;
      *(_OWORD *)(v0 + 1680) = 0u;
      uint64_t v22 = *(void *)(v0 + 624);
      if ((v45 & 0x240) != 0)
      {
        uint64_t v46 = *(void **)(v0 + 616);
        uint64_t v47 = v46[3];
        uint64_t v48 = v46[4];
        sub_100012ED8(v46, v47);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v48 + 8) + 8LL) + 32LL))(v47);
        uint64_t v26 = sub_10044D5A0;
      }

      else
      {
        *(void *)(v0 + 1768) = 0LL;
        *(void *)(v0 + 1760) = v22;
        uint64_t v55 = *(void **)(v0 + 616);
        uint64_t v56 = v55[3];
        uint64_t v57 = v55[4];
        sub_100012ED8(v55, v56);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v57 + 8) + 8LL) + 32LL))(v56);
        uint64_t v26 = sub_10044D89C;
      }

      goto LABEL_8;
    }

    *(void *)(v0 + 1664) = v37;
    *(void *)(v0 + 1656) = v39;
    *(void *)(v0 + 1648) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1640) = v44;
    *(_BYTE *)(v0 + 1920) = 0;
    *(void *)(v0 + 1632) = 0LL;
    uint64_t v54 = (void *)swift_task_alloc(dword_1009AE1FC);
    *(void *)(v0 + 1672) = v54;
    *uint64_t v54 = v0;
    v54[1] = sub_10044D2EC;
    return sub_100448784(*(void *)(v0 + 688), *(void *)(v0 + 616));
  }

uint64_t sub_10044BE7C()
{
  uint64_t v1 = v0[134];
  uint64_t v2 = v0[133];
  uint64_t v3 = v0[128];
  uint64_t v4 = v0[127];
  uint64_t v5 = v0[126];
  uint64_t v6 = v0[78];
  v0[175] = *(void *)(v6 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v5);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_10095A810, v8 + v3, v7 | 7);
  v0[176] = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v8, v2, v5);
  swift_retain();
  return swift_task_switch(sub_10044BF34, 0LL, 0LL);
}

uint64_t sub_10044BF34()
{
  uint64_t v1 = v0[176];
  uint64_t v2 = v0[175];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[177] = v3;
  v3[2] = v2;
  v3[3] = sub_100450EC4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[178] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10044BFE4;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[93],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100451C7C,  v3,  v0[90]);
}

uint64_t sub_10044BFE4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1416LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 1072LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 1016LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 1008LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 640LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1424LL));
  swift_release();
  swift_task_dealloc(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_10044C080, v5, 0LL);
}

uint64_t sub_10044C080()
{
  uint64_t v1 = *(void *)(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 736);
  uint64_t v3 = *(void *)(v0 + 656);
  uint64_t v4 = *(void *)(v0 + 648);
  sub_100015750(*(void *)(v0 + 744), v1, &qword_1009AA870);
  sub_10001581C(v1, v2, &qword_1009AA870);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  *(void *)(v0 + 1432) = v5;
  LODWORD(v1) = v5(v2, 1LL, v4);
  sub_100015794(v2, &qword_1009AA870);
  if ((_DWORD)v1 == 1)
  {
    uint64_t v6 = *(void *)(v0 + 1128);
    sub_100013044(*(void *)(v0 + 616), v0 + 296);
    uint64_t v7 = swift_allocObject(&unk_10095A838, 64LL, 7LL);
    *(void *)(v0 + 1440) = v7;
    *(void *)(v7 + swift_weakDestroy(v0 + 16) = v6;
    sub_100012EC0((__int128 *)(v0 + 296), v7 + 24);
    uint64_t v8 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v9 = (void *)swift_task_alloc(v8);
    *(void *)(v0 + 1448) = v9;
    uint64_t v10 = sub_100004AEC(&qword_1009AE4D0);
    *uint64_t v9 = v0;
    v9[1] = sub_10044C4D4;
    return unsafeBlocking<A>(_:)(v0 + 1912, sub_1004512C0, v7, v10);
  }

  uint64_t v12 = *(void *)(v0 + 632);
  if ((v12 & 1) != 0
    && (uint64_t v13 = *(void *)(v0 + 752),
        uint64_t v14 = *(void *)(v0 + 648),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1432))(v13, 1LL, v14)))
  {
    uint64_t v43 = (uint64_t *)(v13 + *(int *)(v14 + 36));
    uint64_t v15 = *v43;
    swift_bridgeObjectRetain(v43[1]);
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
  }

  *(void *)(v0 + 1464) = v16;
  *(void *)(v0 + 1456) = v15;
  if ((v12 & 2) != 0
    && (uint64_t v17 = *(void *)(v0 + 752),
        uint64_t v18 = *(void *)(v0 + 648),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 656) + 48LL))(v17, 1LL, v18)))
  {
    unint64_t v44 = (uint64_t *)(v17 + *(int *)(v18 + 32));
    uint64_t v19 = *v44;
    swift_bridgeObjectRetain(v44[1]);
  }

  else
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
  }

  *(void *)(v0 + 1480) = v20;
  *(void *)(v0 + 1472) = v19;
  if ((v12 & 0x204) != 0)
  {
    id v21 = *(void **)(v0 + 616);
    uint64_t v22 = v21[3];
    uint64_t v23 = v21[4];
    sub_100012ED8(v21, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 48))(v22, v23);
    BOOL v25 = (v12 & 0x208) == 0;
    uint64_t v12 = *(void *)(v0 + 632);
    if (v25)
    {
      uint64_t v26 = 0LL;
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v24 = 0LL;
    uint64_t v26 = 0LL;
    if ((v12 & 8) == 0) {
      goto LABEL_16;
    }
  }

  *(void *)(v0 + 1488) = v24;
  uint64_t v27 = *(void **)(v0 + 616);
  uint64_t v28 = v27[3];
  uint64_t v29 = v27[4];
  sub_100012ED8(v27, v28);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 56))(v28, v29);
  *(void *)(v0 + 1496) = v30;
  if ((v12 & 0x200) != 0)
  {
    uint64_t v42 = *(void *)(v0 + 624);
    uint64_t v37 = sub_10044C874;
    return swift_task_switch(v37, v42, 0LL);
  }

  uint64_t v26 = v30;
  uint64_t v12 = *(void *)(v0 + 632);
LABEL_16:
  unint64_t v31 = sub_10041362C((uint64_t)_swiftEmptyArrayStorage);
  if ((v12 & 0x20) != 0)
  {
    *(void *)(v0 + 1608) = v24;
    *(void *)(v0 + 1600) = v26;
    *(void *)(v0 + 1592) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1584) = v31;
    *(_BYTE *)(v0 + 1919) = 0;
    BOOL v38 = *(void **)(v0 + 616);
    uint64_t v39 = v38[3];
    uint64_t v40 = v38[4];
    sub_100012ED8(v38, v39);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v40 + 8) + 8LL) + 32LL))(v39);
    uint64_t v41 = (void *)swift_task_alloc(dword_1009B6384);
    *(void *)(v0 + 16swift_weakDestroy(v0 + 16) = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_10044D0A4;
    return sub_1005EB52C(*(void *)(v0 + 1072));
  }

  uint64_t v32 = *(void *)(v0 + 632);
  if ((v32 & 0x100) != 0)
  {
    *(void *)(v0 + 1664) = v24;
    *(void *)(v0 + 1656) = v26;
    *(void *)(v0 + 1648) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1640) = v31;
    *(_BYTE *)(v0 + 1920) = 0;
    *(void *)(v0 + 1632) = 0LL;
    uint64_t v45 = (void *)swift_task_alloc(dword_1009AE1FC);
    *(void *)(v0 + 1672) = v45;
    *uint64_t v45 = v0;
    v45[1] = sub_10044D2EC;
    return sub_100448784(*(void *)(v0 + 688), *(void *)(v0 + 616));
  }

  *(void *)(v0 + 1720) = v24;
  *(void *)(v0 + 1712) = v26;
  *(void *)(v0 + 1704) = &_swiftEmptySetSingleton;
  *(void *)(v0 + 1696) = v31;
  *(_BYTE *)(v0 + 1921) = 0;
  *(_OWORD *)(v0 + 1680) = 0u;
  uint64_t v33 = *(void *)(v0 + 624);
  if ((v32 & 0x240) != 0)
  {
    uint64_t v34 = *(void **)(v0 + 616);
    uint64_t v35 = v34[3];
    uint64_t v36 = v34[4];
    sub_100012ED8(v34, v35);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v36 + 8) + 8LL) + 32LL))(v35);
    uint64_t v37 = sub_10044D5A0;
  }

  else
  {
    *(void *)(v0 + 1768) = 0LL;
    *(void *)(v0 + 1760) = v33;
    uint64_t v46 = *(void **)(v0 + 616);
    uint64_t v47 = v46[3];
    uint64_t v48 = v46[4];
    sub_100012ED8(v46, v47);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v48 + 8) + 8LL) + 32LL))(v47);
    uint64_t v37 = sub_10044D89C;
  }

  uint64_t v42 = v33;
  return swift_task_switch(v37, v42, 0LL);
}

uint64_t sub_10044C4D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 640LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1448LL));
  swift_release();
  return swift_task_switch(sub_10044C538, v1, 0LL);
}

uint64_t sub_10044C538()
{
  uint64_t v1 = *(void *)(v0 + 632);
  if ((v1 & 1) != 0
    && (uint64_t v2 = *(void *)(v0 + 752),
        uint64_t v3 = *(void *)(v0 + 648),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1432))(v2, 1LL, v3)))
  {
    uint64_t v33 = (uint64_t *)(v2 + *(int *)(v3 + 36));
    uint64_t v4 = *v33;
    swift_bridgeObjectRetain(v33[1]);
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
  }

  *(void *)(v0 + 1464) = v5;
  *(void *)(v0 + 1456) = v4;
  if ((v1 & 2) != 0
    && (uint64_t v6 = *(void *)(v0 + 752),
        uint64_t v7 = *(void *)(v0 + 648),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 656) + 48LL))(v6, 1LL, v7)))
  {
    uint64_t v34 = (uint64_t *)(v6 + *(int *)(v7 + 32));
    uint64_t v8 = *v34;
    swift_bridgeObjectRetain(v34[1]);
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
  }

  *(void *)(v0 + 1480) = v9;
  *(void *)(v0 + 1472) = v8;
  if ((v1 & 0x204) != 0)
  {
    uint64_t v10 = *(void **)(v0 + 616);
    uint64_t v11 = v10[3];
    uint64_t v12 = v10[4];
    sub_100012ED8(v10, v11);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 48))(v11, v12);
    BOOL v14 = (v1 & 0x208) == 0;
    uint64_t v1 = *(void *)(v0 + 632);
    if (v14)
    {
      uint64_t v15 = 0LL;
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
    if ((v1 & 8) == 0) {
      goto LABEL_14;
    }
  }

  *(void *)(v0 + 1488) = v13;
  uint64_t v16 = *(void **)(v0 + 616);
  uint64_t v17 = v16[3];
  uint64_t v18 = v16[4];
  sub_100012ED8(v16, v17);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 56))(v17, v18);
  *(void *)(v0 + 1496) = v19;
  if ((v1 & 0x200) != 0)
  {
    uint64_t v32 = *(void *)(v0 + 624);
    uint64_t v26 = sub_10044C874;
    return swift_task_switch(v26, v32, 0LL);
  }

  uint64_t v15 = v19;
  uint64_t v1 = *(void *)(v0 + 632);
LABEL_14:
  unint64_t v20 = sub_10041362C((uint64_t)_swiftEmptyArrayStorage);
  if ((v1 & 0x20) != 0)
  {
    *(void *)(v0 + 1608) = v13;
    *(void *)(v0 + 1600) = v15;
    *(void *)(v0 + 1592) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1584) = v20;
    *(_BYTE *)(v0 + 1919) = 0;
    uint64_t v27 = *(void **)(v0 + 616);
    uint64_t v28 = v27[3];
    uint64_t v29 = v27[4];
    sub_100012ED8(v27, v28);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v29 + 8) + 8LL) + 32LL))(v28);
    uint64_t v30 = (void *)swift_task_alloc(dword_1009B6384);
    *(void *)(v0 + 16swift_weakDestroy(v0 + 16) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_10044D0A4;
    return sub_1005EB52C(*(void *)(v0 + 1072));
  }

  uint64_t v21 = *(void *)(v0 + 632);
  if ((v21 & 0x100) != 0)
  {
    *(void *)(v0 + 1664) = v13;
    *(void *)(v0 + 1656) = v15;
    *(void *)(v0 + 1648) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 1640) = v20;
    *(_BYTE *)(v0 + 1920) = 0;
    *(void *)(v0 + 1632) = 0LL;
    uint64_t v35 = (void *)swift_task_alloc(dword_1009AE1FC);
    *(void *)(v0 + 1672) = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_10044D2EC;
    return sub_100448784(*(void *)(v0 + 688), *(void *)(v0 + 616));
  }

  *(void *)(v0 + 1720) = v13;
  *(void *)(v0 + 1712) = v15;
  *(void *)(v0 + 1704) = &_swiftEmptySetSingleton;
  *(void *)(v0 + 1696) = v20;
  *(_BYTE *)(v0 + 1921) = 0;
  *(_OWORD *)(v0 + 1680) = 0u;
  uint64_t v22 = *(void *)(v0 + 624);
  if ((v21 & 0x240) != 0)
  {
    uint64_t v23 = *(void **)(v0 + 616);
    uint64_t v24 = v23[3];
    uint64_t v25 = v23[4];
    sub_100012ED8(v23, v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8LL) + 32LL))(v24);
    uint64_t v26 = sub_10044D5A0;
  }

  else
  {
    *(void *)(v0 + 1768) = 0LL;
    *(void *)(v0 + 1760) = v22;
    uint64_t v36 = *(void **)(v0 + 616);
    uint64_t v37 = v36[3];
    uint64_t v38 = v36[4];
    sub_100012ED8(v36, v37);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v38 + 8) + 8LL) + 32LL))(v37);
    uint64_t v26 = sub_10044D89C;
  }

  uint64_t v32 = v22;
  return swift_task_switch(v26, v32, 0LL);
}

uint64_t sub_10044C874()
{
  *(void *)(v0 + 1504) = *(void *)(*(void *)(v0 + 624) + 136LL);
  swift_retain();
  return swift_task_switch(sub_10044C8B8, 0LL, 0LL);
}

uint64_t sub_10044C8B8()
{
  uint64_t v1 = v0[188];
  uint64_t v2 = v0[78];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[189] = v3;
  v3[2] = v1;
  v3[3] = sub_1004511E0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[190] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009AE4C0);
  *uint64_t v4 = v0;
  v4[1] = sub_10044C978;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 76,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1004511E8,  v3,  v5);
}

uint64_t sub_10044C978()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1512);
  uint64_t v3 = *(void *)(*v0 + 640);
  swift_task_dealloc(*(void *)(*v0 + 1520));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 1528) = *(void *)(v1 + 608);
  return swift_task_switch(sub_10044C9F4, v3, 0LL);
}

uint64_t sub_10044C9F4()
{
  uint64_t v1 = *(void *)(v0 + 1528);
  uint64_t v2 = *(void *)(v0 + 1128);
  uint64_t v3 = *(void *)(v0 + 616);
  uint64_t v4 = (void *)swift_task_alloc(32LL);
  v4[2] = v3;
  uint64_t v5 = sub_100023CDC((uint64_t (*)(char *))sub_1004511F4, v4, v1);
  swift_task_dealloc(v4);
  uint64_t v6 = sub_10028D078(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1006F138C((uint64_t)v6);
  *(void *)(v0 + 1536) = v7;
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v8 = *(void *)(v0 + 1128);
    sub_100013044(*(void *)(v0 + 616), v0 + 416);
    uint64_t v9 = swift_allocObject(&unk_10095A7C0, 64LL, 7LL);
    *(void *)(v0 + 1544) = v9;
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = v8;
    sub_100012EC0((__int128 *)(v0 + 416), v9 + 24);
    uint64_t v10 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain_n(v8, 2LL);
    uint64_t v11 = (void *)swift_task_alloc(v10);
    *(void *)(v0 + 1552) = v11;
    uint64_t v12 = sub_100004AEC(&qword_1009AE4C8);
    *uint64_t v11 = v0;
    v11[1] = sub_10044CD18;
    return unsafeBlocking<A>(_:)(v0 + 568, sub_100451214, v9, v12);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 632);
    unint64_t v15 = sub_10041362C((uint64_t)_swiftEmptyArrayStorage);
    if ((v14 & 0x20) != 0)
    {
      uint64_t v24 = *(void *)(v0 + 1496);
      *(void *)(v0 + 1608) = *(void *)(v0 + 1488);
      *(void *)(v0 + 1600) = v24;
      *(void *)(v0 + 1592) = v7;
      *(void *)(v0 + 1584) = v15;
      *(_BYTE *)(v0 + 1919) = 0;
      uint64_t v25 = *(void **)(v0 + 616);
      uint64_t v26 = v25[3];
      uint64_t v27 = v25[4];
      sub_100012ED8(v25, v26);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v27 + 8) + 8LL) + 32LL))(v26);
      uint64_t v28 = (void *)swift_task_alloc(dword_1009B6384);
      *(void *)(v0 + 16swift_weakDestroy(v0 + 16) = v28;
      void *v28 = v0;
      v28[1] = sub_10044D0A4;
      return sub_1005EB52C(*(void *)(v0 + 1072));
    }

    else
    {
      uint64_t v16 = *(void *)(v0 + 632);
      uint64_t v17 = *(void *)(v0 + 1496);
      uint64_t v18 = *(void *)(v0 + 1488);
      if ((v16 & 0x100) != 0)
      {
        *(void *)(v0 + 1664) = v18;
        *(void *)(v0 + 1656) = v17;
        *(void *)(v0 + 1648) = v7;
        *(void *)(v0 + 1640) = v15;
        *(_BYTE *)(v0 + 1920) = 0;
        *(void *)(v0 + 1632) = 0LL;
        uint64_t v29 = (void *)swift_task_alloc(dword_1009AE1FC);
        *(void *)(v0 + 1672) = v29;
        *uint64_t v29 = v0;
        v29[1] = sub_10044D2EC;
        return sub_100448784(*(void *)(v0 + 688), *(void *)(v0 + 616));
      }

      else
      {
        *(void *)(v0 + 1720) = v18;
        *(void *)(v0 + 1712) = v17;
        *(void *)(v0 + 1704) = v7;
        *(void *)(v0 + 1696) = v15;
        *(_BYTE *)(v0 + 1921) = 0;
        *(_OWORD *)(v0 + 1680) = 0u;
        uint64_t v19 = *(void *)(v0 + 624);
        if ((v16 & 0x240) != 0)
        {
          unint64_t v20 = *(void **)(v0 + 616);
          uint64_t v21 = v20[3];
          uint64_t v22 = v20[4];
          sub_100012ED8(v20, v21);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v22 + 8) + 8LL) + 32LL))(v21);
          uint64_t v23 = sub_10044D5A0;
        }

        else
        {
          *(void *)(v0 + 1768) = 0LL;
          *(void *)(v0 + 1760) = v19;
          uint64_t v30 = *(void **)(v0 + 616);
          uint64_t v31 = v30[3];
          uint64_t v32 = v30[4];
          sub_100012ED8(v30, v31);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v32 + 8) + 8LL) + 32LL))(v31);
          uint64_t v23 = sub_10044D89C;
        }

        return swift_task_switch(v23, v19, 0LL);
      }
    }
  }

uint64_t sub_10044CD18()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 640LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1552LL));
  swift_release();
  return swift_task_switch(sub_10044CD7C, v1, 0LL);
}

uint64_t sub_10044CD7C()
{
  uint64_t v1 = *(void *)(v0 + 1128);
  uint64_t v2 = *(void *)(v0 + 616);
  *(void *)(v0 + 1560) = *(void *)(v0 + 568);
  sub_100013044(v2, v0 + 336);
  uint64_t v3 = swift_allocObject(&unk_10095A7E8, 64LL, 7LL);
  *(void *)(v0 + 1568) = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1;
  sub_100012EC0((__int128 *)(v0 + 336), v3 + 24);
  uint64_t v4 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc(v4);
  *(void *)(v0 + 1576) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10044CE40;
  return unsafeBlocking<A>(_:)(v0 + 1911, sub_100451268, v3, &type metadata for Bool);
}

uint64_t sub_10044CE40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 640LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1576LL));
  swift_release();
  return swift_task_switch(sub_10044CEA4, v1, 0LL);
}

uint64_t sub_10044CEA4()
{
  uint64_t v1 = *(void *)(v0 + 632);
  swift_release();
  char v2 = *(_BYTE *)(v0 + 1911);
  if ((v1 & 0x20) != 0)
  {
    uint64_t v13 = *(void *)(v0 + 1560);
    uint64_t v14 = *(void *)(v0 + 1536);
    uint64_t v15 = *(void *)(v0 + 1496);
    *(void *)(v0 + 1608) = *(void *)(v0 + 1488);
    *(void *)(v0 + 1600) = v15;
    *(void *)(v0 + 1592) = v14;
    *(void *)(v0 + 1584) = v13;
    *(_BYTE *)(v0 + 1919) = v2;
    uint64_t v16 = *(void **)(v0 + 616);
    uint64_t v17 = v16[3];
    uint64_t v18 = v16[4];
    sub_100012ED8(v16, v17);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v18 + 8) + 8LL) + 32LL))(v17);
    uint64_t v19 = (void *)swift_task_alloc(dword_1009B6384);
    *(void *)(v0 + 16swift_weakDestroy(v0 + 16) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_10044D0A4;
    return sub_1005EB52C(*(void *)(v0 + 1072));
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 632);
    uint64_t v4 = *(void *)(v0 + 1560);
    uint64_t v5 = *(void *)(v0 + 1536);
    uint64_t v6 = *(void *)(v0 + 1496);
    uint64_t v7 = *(void *)(v0 + 1488);
    if ((v3 & 0x100) != 0)
    {
      *(void *)(v0 + 1664) = v7;
      *(void *)(v0 + 1656) = v6;
      *(void *)(v0 + 1648) = v5;
      *(void *)(v0 + 1640) = v4;
      *(_BYTE *)(v0 + 1920) = v2;
      *(void *)(v0 + 1632) = 0LL;
      uint64_t v21 = (void *)swift_task_alloc(dword_1009AE1FC);
      *(void *)(v0 + 1672) = v21;
      *uint64_t v21 = v0;
      v21[1] = sub_10044D2EC;
      return sub_100448784(*(void *)(v0 + 688), *(void *)(v0 + 616));
    }

    else
    {
      *(void *)(v0 + 1720) = v7;
      *(void *)(v0 + 1712) = v6;
      *(void *)(v0 + 1704) = v5;
      *(void *)(v0 + 1696) = v4;
      *(_BYTE *)(v0 + 1921) = v2;
      *(_OWORD *)(v0 + 1680) = 0u;
      uint64_t v8 = *(void *)(v0 + 624);
      if ((v3 & 0x240) != 0)
      {
        uint64_t v9 = *(void **)(v0 + 616);
        uint64_t v10 = v9[3];
        uint64_t v11 = v9[4];
        sub_100012ED8(v9, v10);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 8) + 8LL) + 32LL))(v10);
        uint64_t v12 = sub_10044D5A0;
      }

      else
      {
        *(void *)(v0 + 1768) = 0LL;
        *(void *)(v0 + 1760) = v8;
        uint64_t v22 = *(void **)(v0 + 616);
        uint64_t v23 = v22[3];
        uint64_t v24 = v22[4];
        sub_100012ED8(v22, v23);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v24 + 8) + 8LL) + 32LL))(v23);
        uint64_t v12 = sub_10044D89C;
      }

      return swift_task_switch(v12, v8, 0LL);
    }
  }

uint64_t sub_10044D0A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1616LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 1072LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 1016LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 1008LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 640LL);
  *(void *)(*(void *)v1 + 1624LL) = a1;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch(sub_10044D128, v6, 0LL);
}

void sub_10044D128()
{
  uint64_t v1 = *(void *)(v0 + 640);
  if ((*(_BYTE *)(v1 + 192) & 1) != 0)
  {
    uint64_t v2 = *(void *)(v0 + 1624);
    if (!*(void *)(v0 + 1128)) {
      goto LABEL_7;
    }
    uint64_t v3 = swift_retain();
    CurrentValueSubject.value.getter((void *)(v0 + 584), v3);
    swift_release();
    uint64_t v1 = *(void *)(v0 + 584);
    BOOL v4 = __OFADD__(v1, v2);
    v2 += v1;
    if (!v4) {
      goto LABEL_7;
    }
    __break(1u);
  }

  uint64_t v5 = *(void *)(v0 + 1624);
  uint64_t v6 = *(void *)(v1 + 184);
  uint64_t v2 = v6 + v5;
  if (__OFADD__(v6, v5))
  {
    __break(1u);
    return;
  }

uint64_t sub_10044D2EC()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 1672));
  uint64_t v3 = *(void *)(v2 + 640);
  if (v0)
  {
    swift_errorRelease(v0);
    BOOL v4 = sub_10044FF98;
  }

  else
  {
    BOOL v4 = sub_10044D358;
  }

  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_10044D358()
{
  uint64_t v1 = *(void *)(v0 + 712);
  uint64_t v2 = *(void *)(v0 + 688);
  (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)(v0 + 704) + 56LL))( v2,  0LL,  1LL,  *(void *)(v0 + 696));
  sub_100015750(v2, v1, (uint64_t *)&unk_1009AE460);
  id v3 = [objc_allocWithZone(SPKeySyncRecord) init];
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 1072);
    uint64_t v5 = *(void *)(v0 + 1016);
    uint64_t v27 = *(void *)(v0 + 1008);
    uint64_t v28 = *(void **)(v0 + 712);
    uint64_t v6 = *(void **)(v0 + 616);
    uint64_t v7 = v6[3];
    uint64_t v8 = v6[4];
    sub_100012ED8(v6, v7);
    uint64_t v9 = *(void *)(*(void *)(v8 + 8) + 8LL);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 32);
    id v11 = v3;
    v10(v7, v9);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v27);
    [v11 setIdentifier:isa];

    [v11 setLastIndexObserved:*v28];
    id v13 = v11;
    Class v14 = Date._bridgeToObjectiveC()().super.isa;
    [v13 setLastIndexObservationDate:v14];
  }

  sub_100015794(*(void *)(v0 + 712), (uint64_t *)&unk_1009AE460);
  char v15 = *(_BYTE *)(v0 + 1920);
  uint64_t v16 = *(void *)(v0 + 1632);
  __int128 v17 = *(_OWORD *)(v0 + 1640);
  *(_OWORD *)(v0 + 1712) = *(_OWORD *)(v0 + 1656);
  *(_OWORD *)(v0 + 1696) = v17;
  *(_BYTE *)(v0 + 1921) = v15;
  *(void *)(v0 + 1688) = v16;
  *(void *)(v0 + 1680) = v3;
  uint64_t v18 = *(void *)(v0 + 624);
  if ((*(_WORD *)(v0 + 632) & 0x240) != 0)
  {
    uint64_t v19 = *(void **)(v0 + 616);
    uint64_t v20 = v19[3];
    uint64_t v21 = v19[4];
    sub_100012ED8(v19, v20);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8LL) + 32LL))(v20);
    uint64_t v22 = sub_10044D5A0;
  }

  else
  {
    *(void *)(v0 + 1768) = 0LL;
    *(void *)(v0 + 1760) = v18;
    uint64_t v23 = *(void **)(v0 + 616);
    uint64_t v24 = v23[3];
    uint64_t v25 = v23[4];
    sub_100012ED8(v23, v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8LL) + 32LL))(v24);
    uint64_t v22 = sub_10044D89C;
  }

  return swift_task_switch(v22, v18, 0LL);
}

uint64_t sub_10044D5A0()
{
  uint64_t v1 = v0[134];
  uint64_t v2 = v0[133];
  uint64_t v3 = v0[128];
  uint64_t v4 = v0[127];
  uint64_t v5 = v0[126];
  uint64_t v6 = v0[78];
  v0[216] = *(void *)(v6 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v5);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_10095A798, v8 + v3, v7 | 7);
  v0[217] = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v8, v2, v5);
  swift_retain();
  return swift_task_switch(sub_10044D658, 0LL, 0LL);
}

uint64_t sub_10044D658()
{
  uint64_t v1 = v0[217];
  uint64_t v2 = v0[216];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[218] = v3;
  v3[2] = v2;
  v3[3] = sub_1004511C8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[219] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10044D708;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[85],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1004511D4,  v3,  v0[84]);
}

uint64_t sub_10044D708()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1744LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 1072LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 1016LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 1008LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 640LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1752LL));
  swift_release();
  swift_task_dealloc(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_10044D7A4, v5, 0LL);
}

uint64_t sub_10044D7A4()
{
  uint64_t v1 = v0[85];
  uint64_t v2 = type metadata accessor for BeaconStatus(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, (uint64_t *)&unk_1009AE450);
    uint64_t v3 = 0LL;
  }

  else
  {
    unint64_t v4 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 20));
    sub_100018C68(v1, type metadata accessor for BeaconStatus);
    else {
      uint64_t v3 = qword_100801F18[v4 >> 6];
    }
  }

  uint64_t v5 = v0[78];
  v0[221] = v3;
  v0[220] = v5;
  uint64_t v6 = (void *)v0[77];
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[4];
  sub_100012ED8(v6, v7);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8LL) + 32LL))(v7);
  return swift_task_switch(sub_10044D89C, v5, 0LL);
}

uint64_t sub_10044D89C()
{
  uint64_t v1 = *(void *)(v0 + 1072);
  uint64_t v2 = *(void *)(v0 + 1064);
  uint64_t v3 = *(void *)(v0 + 1024);
  uint64_t v4 = *(void *)(v0 + 1016);
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v6 = *(void *)(v0 + 624);
  *(void *)(v0 + 1776) = *(void *)(v6 + 136);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 1784) = v7;
  v7(v2, v1, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 1904) = v8;
  uint64_t v8 = v8;
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10095A748, v9 + v3, v8 | 7LL);
  *(void *)(v0 + 1792) = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v6;
  id v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 1800) = v11;
  v11(v10 + v9, v2, v5);
  swift_retain();
  return swift_task_switch(sub_10044D964, 0LL, 0LL);
}

uint64_t sub_10044D964()
{
  uint64_t v1 = v0[224];
  uint64_t v2 = v0[222];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[226] = v3;
  v3[2] = v2;
  v3[3] = sub_100450EC4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[227] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10044DA14;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[91],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100450ED0,  v3,  v0[90]);
}

uint64_t sub_10044DA14()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1808);
  uint64_t v3 = *(void *)(*v0 + 1072);
  uint64_t v4 = *(void *)(*v0 + 1016);
  uint64_t v5 = *(void *)(*v0 + 1008);
  uint64_t v6 = *(void *)(*v0 + 640);
  swift_task_dealloc(*(void *)(*v0 + 1816));
  swift_release();
  swift_task_dealloc(v2);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v1 + 1824) = v7;
  v7(v3, v5);
  return swift_task_switch(sub_10044DAB8, v6, 0LL);
}

id sub_10044DAB8()
{
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = *(void *)(v0 + 648);
  uint64_t v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 656) + 48LL);
  *(void *)(v0 + 1832) = v3;
  if (v3(v1, 1LL, v2) == 1)
  {
    uint64_t v4 = sub_100015794(v1, &qword_1009AA870);
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = *(void *)(v1 + *(int *)(v2 + 60));
    uint64_t v4 = sub_100018C68(v1, type metadata accessor for BeaconProductInfoRecord);
  }

  *(void *)(v0 + 1840) = v5;
  id result = (id)MobileGestalt_get_current_device(v4);
  if (result)
  {
    uint64_t v7 = result;
    id v8 = (id)MobileGestalt_copy_productType_obj();

    if (v8)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    }

    uint64_t v9 = *(void *)(v0 + 904);
    uint64_t v10 = *(void *)(v0 + 880);
    uint64_t v11 = *(void *)(v0 + 616);
    Swift::String v12 = String.lowercased()();
    swift_bridgeObjectRelease();
    *(Swift::String *)(v0 + 544) = v12;
    sub_100450EDC();
    sub_1000155F8();
    static PartialMatchCase<>.first(containing:)(v0 + 544);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v0 + 1922) = *(_BYTE *)(v0 + 1910);
    sub_100013044(v11, v0 + 216);
    uint64_t v13 = sub_100004AEC(&qword_1009B0530);
    if (swift_dynamicCast(v9, v0 + 216, v13, v10, 0LL))
    {
      Class v14 = *(void **)(v0 + 616);
      sub_10002218C(*(void *)(v0 + 904), *(void *)(v0 + 896), type metadata accessor for OwnedBeaconRecord);
      sub_1005D36FC();
      *(_WORD *)(v0 + 1908) = v15;
      uint64_t v17 = v14[3];
      uint64_t v16 = v14[4];
      sub_100012ED8(v14, v17);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8LL) + 32LL))(v17);
      return (id)swift_task_switch(sub_10044EAF8, *(void *)(v0 + 1760), 0LL);
    }

    else
    {
      if (swift_dynamicCast(*(void *)(v0 + 792), v0 + 216, v13, *(void *)(v0 + 768), 0LL))
      {
        uint64_t v18 = *(void *)(v0 + 784);
        uint64_t v19 = *(void *)(v0 + 768);
        sub_10002218C(*(void *)(v0 + 792), v18, type metadata accessor for SharedBeaconRecord);
        uint64_t v20 = sub_1000F5F2C(*(void *)(v18 + *(int *)(v19 + 44)), *(void *)(v18 + *(int *)(v19 + 48)));
        if (v21 >> 60 == 15)
        {
          if (qword_10099B490 != -1) {
            swift_once(&qword_10099B490, sub_10043B5F4);
          }
          uint64_t v22 = *(void *)(v0 + 616);
          uint64_t v23 = type metadata accessor for Logger(0LL);
          sub_10000A720(v23, (uint64_t)qword_100A2AA68);
          uint64_t v24 = sub_100013044(v22, v0 + 376);
          uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
          os_log_type_t v26 = static os_log_type_t.error.getter(v25);
          if (os_log_type_enabled(v25, v26))
          {
            uint64_t v149 = *(void (**)(uint64_t, uint64_t))(v0 + 1824);
            uint64_t v27 = *(void *)(v0 + 1072);
            uint64_t v141 = *(void *)(v0 + 1008);
            uint64_t v28 = swift_slowAlloc(22LL, -1LL);
            uint64_t v146 = swift_slowAlloc(32LL, -1LL);
            *(void *)&__int128 v151 = v146;
            *(_DWORD *)uint64_t v28 = 141558275;
            *(void *)(v0 + 560) = 1752392040LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v28 + 4, v28 + 12);
            *(_WORD *)(v28 + 12) = 2081;
            uint64_t v30 = *(void *)(v0 + 400);
            uint64_t v29 = *(void *)(v0 + 408);
            sub_100012ED8((void *)(v0 + 376), v30);
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v29 + 8) + 8LL) + 32LL))(v30);
            uint64_t v31 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v141, v31);
            unint64_t v34 = v33;
            v149(v27, v141);
            *(void *)(v0 + 600) = sub_1003F11D4(v32, v34, (uint64_t *)&v151);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v0 + 608, v28 + 14, v28 + 22);
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 376));
            _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Could not compute productUUID from shared beacon %{private,mask.hash}s.",  (uint8_t *)v28,  0x16u);
            swift_arrayDestroy(v146, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v146, -1LL, -1LL);
            swift_slowDealloc(v28, -1LL, -1LL);
          }

          else
          {
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 376));
          }

          UUID.init(uuid:)(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
        }

        else
        {
          uint64_t v48 = v20;
          unint64_t v49 = v21;
          if (qword_10099B108 != -1) {
            swift_once(&qword_10099B108, sub_1000F5DDC);
          }
          __int128 v151 = xmmword_1009A1330;
          sub_10001736C(xmmword_1009A1330, *((unint64_t *)&xmmword_1009A1330 + 1));
          Data.append(_:)(v48, v49);
          __int128 v50 = v151;
          *(_OWORD *)(v0 + 528) = v151;
          unint64_t v51 = sub_100042F34();
          DataProtocol.stableUUID.getter(&type metadata for Data, v51);
          sub_100016F9C(v50, *((unint64_t *)&v50 + 1));
          sub_1000182F0(v48, v49);
        }

        uint64_t v55 = *(void *)(v0 + 784);
        swift_bridgeObjectRetain(*(void *)(v55 + *(int *)(*(void *)(v0 + 768) + 40LL) + 8));
        sub_100018C68(v55, type metadata accessor for SharedBeaconRecord);
      }

      else
      {
        if (qword_10099B490 != -1) {
          swift_once(&qword_10099B490, sub_10043B5F4);
        }
        uint64_t v35 = *(void *)(v0 + 616);
        uint64_t v36 = type metadata accessor for Logger(0LL);
        sub_10000A720(v36, (uint64_t)qword_100A2AA68);
        uint64_t v37 = sub_100013044(v35, v0 + 256);
        uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
        os_log_type_t v39 = static os_log_type_t.error.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v147 = *(void (**)(uint64_t, uint64_t))(v0 + 1824);
          uint64_t v40 = *(void *)(v0 + 1072);
          uint64_t v142 = *(void *)(v0 + 1008);
          uint64_t v41 = swift_slowAlloc(22LL, -1LL);
          uint64_t v144 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v151 = v144;
          *(_DWORD *)uint64_t v41 = 141558275;
          *(void *)(v0 + 592) = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 592, v0 + 600, v41 + 4, v41 + 12);
          *(_WORD *)(v41 + 12) = 2081;
          uint64_t v43 = *(void *)(v0 + 280);
          uint64_t v42 = *(void *)(v0 + 288);
          sub_100012ED8((void *)(v0 + 256), v43);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v42 + 8) + 8LL) + 32LL))(v43);
          uint64_t v44 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v142, v44);
          unint64_t v47 = v46;
          v147(v40, v142);
          *(void *)(v0 + 576) = sub_1003F11D4(v45, v47, (uint64_t *)&v151);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 576, v0 + 584, v41 + 14, v41 + 22);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 256));
          _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Beacon record type is not handled for beacon %{private,mask.hash}s.",  (uint8_t *)v41,  0x16u);
          swift_arrayDestroy(v144, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v144, -1LL, -1LL);
          swift_slowDealloc(v41, -1LL, -1LL);
        }

        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 256));
        }

        uint64_t v52 = *(void **)(v0 + 616);
        UUID.init(uuid:)(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
        uint64_t v53 = v52[3];
        uint64_t v54 = v52[4];
        sub_100012ED8(v52, v53);
        (*(void (**)(uint64_t, uint64_t))(v54 + 24))(v53, v54);
      }

      uint64_t v56 = *(void *)(v0 + 1016);
      uint64_t v57 = *(void *)(v0 + 1008);
      uint64_t v58 = *(void *)(v0 + 832);
      uint64_t v59 = *(void **)(v0 + 616);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 216));
      uint64_t v60 = v59[3];
      uint64_t v61 = v59[4];
      sub_100012ED8(v59, v60);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v61 + 8) + 8LL) + 32LL))(v60);
      id v62 = [objc_allocWithZone(SPInternalSimpleBeacon) init];
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      [v62 setIdentifier:isa];

      uint64_t v64 = v59[3];
      uint64_t v65 = v59[4];
      sub_100012ED8(v59, v64);
      uint64_t v66 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v65 + 176))(v64, v65);
      [v62 setType:v66];

      uint64_t v67 = v59[3];
      uint64_t v68 = v59[4];
      sub_100012ED8(v59, v67);
      (*(void (**)(uint64_t, uint64_t))(v68 + 192))(v67, v68);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v58, 1LL, v57) == 1)
      {
        Class v69 = 0LL;
      }

      else
      {
        id v70 = *(void (**)(uint64_t, uint64_t))(v0 + 1824);
        uint64_t v71 = *(void *)(v0 + 1008);
        uint64_t v72 = *(void *)(v0 + 832);
        Class v69 = UUID._bridgeToObjectiveC()().super.isa;
        v70(v72, v71);
      }

      double v73 = *(double *)(v0 + 1840);
      uint64_t v74 = *(void *)(v0 + 1720);
      uint64_t v75 = *(void *)(v0 + 1712);
      uint64_t v76 = *(void *)(v0 + 1480);
      BOOL v77 = *(unsigned __int8 *)(v0 + 1922) != 5;
      [v62 setGroupIdentifier:v69];

      [v62 setPartIdentifier:255];
      [v62 setConnectionAllowed:v77];
      [v62 setTxPower:v73];
      Class v78 = UUID._bridgeToObjectiveC()().super.isa;
      [v62 setProductUUID:v78];

      [v62 setVendorId:v74];
      [v62 setProductId:v75];
      if (v76)
      {
        NSString v79 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }

      else
      {
        NSString v79 = 0LL;
      }

      uint64_t v80 = *(void *)(v0 + 1464);
      [v62 setModelName:v79];

      if (v80)
      {
        NSString v81 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }

      else
      {
        NSString v81 = 0LL;
      }

      [v62 setManufacturerName:v81];

      uint64_t v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
      uint64_t v83 = *(void *)(v0 + 1360);
      uint64_t v84 = *(void *)(v0 + 752);
      uint64_t v85 = *(void *)(v0 + 648);
      [v62 setSerialNumber:0];
      [v62 setOwner:v83];
      id v86 = 0LL;
      if (!v82(v84, 1LL, v85))
      {
        uint64_t v87 = *(void *)(v0 + 664);
        sub_10001DC4C(*(void *)(v0 + 752), v87, type metadata accessor for BeaconProductInfoRecord);
        id v86 = sub_10039E040();
        sub_100018C68(v87, type metadata accessor for BeaconProductInfoRecord);
      }

      uint64_t v88 = *(unsigned __int8 *)(v0 + 1917);
      uint64_t v89 = *(unsigned __int8 *)(v0 + 1916);
      uint64_t v90 = *(void *)(v0 + 1352);
      [v62 setAccessoryProductInfo:v86];

      [v62 setIsZeus:v88];
      [v62 setIsAppleAudioAccessory:v89];
      if (v90)
      {
        NSString v91 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }

      else
      {
        NSString v91 = 0LL;
      }

      uint64_t v92 = *(void *)(v0 + 1392);
      [v62 setDiscoveryId:v91];

      NSString v93 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v62 setSystemVersion:v93];

      if (v92)
      {
        NSString v94 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }

      else
      {
        NSString v94 = 0LL;
      }

      uint64_t v95 = *(void *)(v0 + 1768);
      uint64_t v96 = *(void *)(v0 + 1688);
      unint64_t v97 = *(void **)(v0 + 1680);
      uint64_t v98 = *(void **)(v0 + 1376);
      unsigned int v102 = *(unsigned __int8 *)(v0 + 1918);
      unsigned int v103 = *(unsigned __int8 *)(v0 + 1921);
      uint64_t v99 = *(void **)(v0 + 1368);
      uint64_t v109 = *(void (**)(uint64_t, uint64_t))(v0 + 1824);
      uint64_t v110 = *(void *)(v0 + 1112);
      uint64_t v111 = *(void *)(v0 + 1088);
      uint64_t v112 = *(void *)(v0 + 1072);
      uint64_t v113 = *(void *)(v0 + 1064);
      uint64_t v114 = *(void *)(v0 + 1056);
      uint64_t v108 = *(void *)(v0 + 1040);
      uint64_t v107 = *(void *)(v0 + 1032);
      uint64_t v105 = *(void **)(v0 + 1360);
      uint64_t v106 = *(void *)(v0 + 1008);
      uint64_t v115 = *(void *)(v0 + 1048);
      uint64_t v116 = *(void *)(v0 + 1000);
      uint64_t v117 = *(void *)(v0 + 992);
      uint64_t v119 = *(void *)(v0 + 984);
      uint64_t v121 = *(void *)(v0 + 968);
      uint64_t v123 = *(void *)(v0 + 960);
      uint64_t v125 = *(void *)(v0 + 952);
      uint64_t v126 = *(void *)(v0 + 944);
      uint64_t v128 = *(void *)(v0 + 920);
      uint64_t v130 = *(void *)(v0 + 912);
      uint64_t v118 = *(void *)(v0 + 904);
      uint64_t v120 = *(void *)(v0 + 896);
      uint64_t v122 = *(void *)(v0 + 872);
      uint64_t v124 = *(void *)(v0 + 864);
      uint64_t v127 = *(void *)(v0 + 856);
      uint64_t v129 = *(void *)(v0 + 840);
      uint64_t v131 = *(void *)(v0 + 832);
      uint64_t v132 = *(void *)(v0 + 824);
      uint64_t v133 = *(void *)(v0 + 816);
      uint64_t v134 = *(void *)(v0 + 800);
      uint64_t v135 = *(void *)(v0 + 792);
      uint64_t v136 = *(void *)(v0 + 784);
      uint64_t v137 = *(void *)(v0 + 760);
      uint64_t v104 = *(void *)(v0 + 752);
      uint64_t v138 = *(void *)(v0 + 744);
      uint64_t v139 = *(void *)(v0 + 736);
      uint64_t v140 = *(void *)(v0 + 728);
      uint64_t v143 = *(void *)(v0 + 712);
      uint64_t v145 = *(void *)(v0 + 688);
      uint64_t v148 = *(void *)(v0 + 680);
      uint64_t v150 = *(void *)(v0 + 664);
      [v62 setName:v94];

      [v62 setBatteryLevel:v95];
      [v62 setConnectableDeviceCount:v96];
      [v62 setKeySyncRecord:v97];
      [v62 setLostModeInfo:v99];
      [v62 setRole:v98];
      sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
      sub_100450F20();
      Class v100 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v62 setSafeLocations:v100];

      [v62 setConnected:v102];
      [v62 setCanBeLeashedByHost:v103];
      type metadata accessor for SPBeaconTaskName(0LL);
      sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
      sub_100015C48( (unint64_t *)&qword_10099C3B0,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E3C50);
      Class v101 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v62 setTaskInformation:v101];

      swift_release();
      v109(v107, v106);
      v109(v108, v106);

      sub_100015794(v104, &qword_1009AA870);
      swift_task_dealloc(v110);
      swift_task_dealloc(v111);
      swift_task_dealloc(v112);
      swift_task_dealloc(v113);
      swift_task_dealloc(v114);
      swift_task_dealloc(v115);
      swift_task_dealloc(v108);
      swift_task_dealloc(v107);
      swift_task_dealloc(v116);
      swift_task_dealloc(v117);
      swift_task_dealloc(v119);
      swift_task_dealloc(v121);
      swift_task_dealloc(v123);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v128);
      swift_task_dealloc(v130);
      swift_task_dealloc(v118);
      swift_task_dealloc(v120);
      swift_task_dealloc(v122);
      swift_task_dealloc(v124);
      swift_task_dealloc(v127);
      swift_task_dealloc(v129);
      swift_task_dealloc(v131);
      swift_task_dealloc(v132);
      swift_task_dealloc(v133);
      swift_task_dealloc(v134);
      swift_task_dealloc(v135);
      swift_task_dealloc(v136);
      swift_task_dealloc(v137);
      swift_task_dealloc(v104);
      swift_task_dealloc(v138);
      swift_task_dealloc(v139);
      swift_task_dealloc(v140);
      swift_task_dealloc(v143);
      swift_task_dealloc(v145);
      swift_task_dealloc(v148);
      swift_task_dealloc(v150);
      return (id)(*(uint64_t (**)(id))(v0 + 8))(v62);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10044EAF8()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1800);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 1904);
  uint64_t v3 = *(void *)(v0 + 1064);
  uint64_t v4 = *(void *)(v0 + 1008);
  uint64_t v5 = *(void *)(v0 + 624);
  uint64_t v6 = (v2 + 24) & ~v2;
  uint64_t v7 = v6 + *(void *)(v0 + 1024);
  uint64_t v8 = v2 | 7;
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 1784))(v3, *(void *)(v0 + 1072), v4);
  uint64_t v9 = swift_allocObject(&unk_10095A770, v7, v8);
  *(void *)(v0 + 1848) = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v5;
  v1(v9 + v6, v3, v4);
  swift_retain();
  return swift_task_switch(sub_10044EBB4, 0LL, 0LL);
}

uint64_t sub_10044EBB4()
{
  uint64_t v1 = v0[231];
  uint64_t v2 = v0[222];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[232] = v3;
  v3[2] = v2;
  v3[3] = sub_1004511AC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[233] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10044EC64;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[130],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1004511B8,  v3,  v0[126]);
}

uint64_t sub_10044EC64()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1856LL);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 1824LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 1072LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 1008LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 640LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1864LL));
  swift_release();
  swift_task_dealloc(v1);
  v2(v3, v4);
  return swift_task_switch(sub_10044ECFC, v5, 0LL);
}

uint64_t sub_10044ECFC()
{
  if ((*(_WORD *)(v0 + 632) & 0x210) != 0)
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_1009B638C);
    *(void *)(v0 + 1872) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10044F624;
    return sub_1005EB764(*(void *)(v0 + 896));
  }

  else
  {
    __int16 v3 = *(_WORD *)(v0 + 1908);
    uint64_t v4 = *(void *)(v0 + 896);
    swift_bridgeObjectRetain(*(void *)(v4 + *(int *)(*(void *)(v0 + 880) + 60LL) + 8));
    sub_100018C68(v4, type metadata accessor for OwnedBeaconRecord);
    if ((v3 & 0x100) != 0) {
      uint64_t v5 = 255LL;
    }
    else {
      uint64_t v5 = v3;
    }
    uint64_t v6 = *(void *)(v0 + 1016);
    uint64_t v7 = *(void *)(v0 + 1008);
    uint64_t v8 = *(void *)(v0 + 832);
    uint64_t v9 = *(void **)(v0 + 616);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 216));
    uint64_t v10 = v9[3];
    uint64_t v11 = v9[4];
    sub_100012ED8(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 8) + 8LL) + 32LL))(v10);
    id v12 = [objc_allocWithZone(SPInternalSimpleBeacon) init];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v12 setIdentifier:isa];

    uint64_t v15 = v9[3];
    uint64_t v14 = v9[4];
    sub_100012ED8(v9, v15);
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 176))(v15, v14);
    [v12 setType:v16];

    uint64_t v17 = v9[3];
    uint64_t v18 = v9[4];
    sub_100012ED8(v9, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 192))(v17, v18);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1LL, v7) == 1)
    {
      Class v19 = 0LL;
    }

    else
    {
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 1824);
      uint64_t v21 = *(void *)(v0 + 1008);
      uint64_t v22 = *(void *)(v0 + 832);
      Class v19 = UUID._bridgeToObjectiveC()().super.isa;
      v20(v22, v21);
    }

    double v23 = *(double *)(v0 + 1840);
    uint64_t v24 = *(void *)(v0 + 1720);
    uint64_t v25 = *(void *)(v0 + 1712);
    uint64_t v26 = *(void *)(v0 + 1480);
    BOOL v27 = *(unsigned __int8 *)(v0 + 1922) != 5;
    [v12 setGroupIdentifier:v19];

    [v12 setPartIdentifier:v5];
    [v12 setConnectionAllowed:v27];
    [v12 setTxPower:v23];
    Class v28 = UUID._bridgeToObjectiveC()().super.isa;
    [v12 setProductUUID:v28];

    [v12 setVendorId:v24];
    [v12 setProductId:v25];
    if (v26)
    {
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }

    else
    {
      NSString v29 = 0LL;
    }

    uint64_t v30 = *(void *)(v0 + 1464);
    [v12 setModelName:v29];

    if (v30)
    {
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }

    else
    {
      NSString v31 = 0LL;
    }

    [v12 setManufacturerName:v31];

    uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
    uint64_t v33 = *(void *)(v0 + 1360);
    uint64_t v34 = *(void *)(v0 + 752);
    uint64_t v35 = *(void *)(v0 + 648);
    [v12 setSerialNumber:0];
    [v12 setOwner:v33];
    id v36 = 0LL;
    if (!v32(v34, 1LL, v35))
    {
      uint64_t v37 = *(void *)(v0 + 664);
      sub_10001DC4C(*(void *)(v0 + 752), v37, type metadata accessor for BeaconProductInfoRecord);
      id v36 = sub_10039E040();
      sub_100018C68(v37, type metadata accessor for BeaconProductInfoRecord);
    }

    uint64_t v38 = *(unsigned __int8 *)(v0 + 1917);
    uint64_t v39 = *(unsigned __int8 *)(v0 + 1916);
    uint64_t v40 = *(void *)(v0 + 1352);
    [v12 setAccessoryProductInfo:v36];

    [v12 setIsZeus:v38];
    [v12 setIsAppleAudioAccessory:v39];
    if (v40)
    {
      NSString v41 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }

    else
    {
      NSString v41 = 0LL;
    }

    uint64_t v42 = *(void *)(v0 + 1392);
    [v12 setDiscoveryId:v41];

    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 setSystemVersion:v43];

    if (v42)
    {
      NSString v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }

    else
    {
      NSString v44 = 0LL;
    }

    uint64_t v45 = *(void *)(v0 + 1768);
    uint64_t v46 = *(void *)(v0 + 1688);
    unint64_t v47 = *(void **)(v0 + 1680);
    uint64_t v48 = *(void **)(v0 + 1376);
    LODWORD(v52) = *(unsigned __int8 *)(v0 + 1918);
    HIDWORD(v52) = *(unsigned __int8 *)(v0 + 1921);
    unint64_t v49 = *(void **)(v0 + 1368);
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v0 + 1824);
    uint64_t v61 = *(void *)(v0 + 1112);
    uint64_t v62 = *(void *)(v0 + 1088);
    uint64_t v63 = *(void *)(v0 + 1072);
    uint64_t v64 = *(void *)(v0 + 1064);
    uint64_t v65 = *(void *)(v0 + 1056);
    uint64_t v59 = *(void *)(v0 + 1040);
    uint64_t v58 = *(void *)(v0 + 1032);
    uint64_t v56 = *(void **)(v0 + 1360);
    uint64_t v57 = *(void *)(v0 + 1008);
    uint64_t v66 = *(void *)(v0 + 1048);
    uint64_t v67 = *(void *)(v0 + 1000);
    uint64_t v68 = *(void *)(v0 + 992);
    uint64_t v70 = *(void *)(v0 + 984);
    uint64_t v72 = *(void *)(v0 + 968);
    uint64_t v74 = *(void *)(v0 + 960);
    uint64_t v76 = *(void *)(v0 + 952);
    uint64_t v77 = *(void *)(v0 + 944);
    uint64_t v79 = *(void *)(v0 + 920);
    uint64_t v81 = *(void *)(v0 + 912);
    uint64_t v69 = *(void *)(v0 + 904);
    uint64_t v71 = *(void *)(v0 + 896);
    uint64_t v73 = *(void *)(v0 + 872);
    uint64_t v75 = *(void *)(v0 + 864);
    uint64_t v78 = *(void *)(v0 + 856);
    uint64_t v80 = *(void *)(v0 + 840);
    uint64_t v82 = *(void *)(v0 + 832);
    uint64_t v83 = *(void *)(v0 + 824);
    uint64_t v84 = *(void *)(v0 + 816);
    uint64_t v85 = *(void *)(v0 + 800);
    uint64_t v86 = *(void *)(v0 + 792);
    uint64_t v87 = *(void *)(v0 + 784);
    uint64_t v88 = *(void *)(v0 + 760);
    uint64_t v55 = *(void *)(v0 + 752);
    uint64_t v89 = *(void *)(v0 + 744);
    uint64_t v90 = *(void *)(v0 + 736);
    uint64_t v91 = *(void *)(v0 + 728);
    uint64_t v92 = *(void *)(v0 + 712);
    uint64_t v93 = *(void *)(v0 + 688);
    uint64_t v94 = *(void *)(v0 + 680);
    uint64_t v95 = *(void *)(v0 + 664);
    objc_msgSend(v12, "setName:", v44, v52);

    [v12 setBatteryLevel:v45];
    [v12 setConnectableDeviceCount:v46];
    [v12 setKeySyncRecord:v47];
    [v12 setLostModeInfo:v49];
    [v12 setRole:v48];
    sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
    sub_100450F20();
    Class v50 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v12 setSafeLocations:v50];

    [v12 setConnected:v53];
    [v12 setCanBeLeashedByHost:v54];
    type metadata accessor for SPBeaconTaskName(0LL);
    sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
    sub_100015C48( (unint64_t *)&qword_10099C3B0,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E3C50);
    Class v51 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v12 setTaskInformation:v51];

    swift_release();
    v60(v58, v57);
    v60(v59, v57);

    sub_100015794(v55, &qword_1009AA870);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v59);
    swift_task_dealloc(v58);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v55);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    return (*(uint64_t (**)(id))(v0 + 8))(v12);
  }

uint64_t sub_10044F624(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 1872);
  uint64_t v5 = *(void *)(*v2 + 640);
  *(void *)(v3 + 1880) = a1;
  *(void *)(v3 + 1888) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10044F688, v5, 0LL);
}

uint64_t sub_10044F688()
{
  uint64_t v96 = *(void *)(v0 + 1888);
  __int16 v1 = *(_WORD *)(v0 + 1908);
  uint64_t v2 = *(void *)(v0 + 896);
  swift_bridgeObjectRetain(*(void *)(v2 + *(int *)(*(void *)(v0 + 880) + 60LL) + 8));
  sub_100018C68(v2, type metadata accessor for OwnedBeaconRecord);
  if ((v1 & 0x100) != 0) {
    uint64_t v3 = 255LL;
  }
  else {
    uint64_t v3 = v1;
  }
  uint64_t v94 = v3;
  uint64_t v4 = *(void *)(v0 + 1016);
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v6 = *(void *)(v0 + 832);
  uint64_t v7 = *(void **)(v0 + 616);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 216));
  uint64_t v8 = v7[3];
  uint64_t v9 = v7[4];
  sub_100012ED8(v7, v8);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8LL) + 32LL))(v8);
  id v10 = [objc_allocWithZone(SPInternalSimpleBeacon) init];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v10 setIdentifier:isa];

  uint64_t v13 = v7[3];
  uint64_t v12 = v7[4];
  sub_100012ED8(v7, v13);
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 176))(v13, v12);
  [v10 setType:v14];

  uint64_t v15 = v7[3];
  uint64_t v16 = v7[4];
  sub_100012ED8(v7, v15);
  (*(void (**)(uint64_t, uint64_t))(v16 + 192))(v15, v16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1LL, v5) == 1)
  {
    Class v17 = 0LL;
  }

  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 1824);
    uint64_t v19 = *(void *)(v0 + 1008);
    uint64_t v20 = *(void *)(v0 + 832);
    Class v17 = UUID._bridgeToObjectiveC()().super.isa;
    v18(v20, v19);
  }

  double v21 = *(double *)(v0 + 1840);
  uint64_t v22 = *(void *)(v0 + 1720);
  uint64_t v23 = *(void *)(v0 + 1712);
  uint64_t v24 = *(void *)(v0 + 1480);
  BOOL v25 = *(unsigned __int8 *)(v0 + 1922) != 5;
  [v10 setGroupIdentifier:v17];

  [v10 setPartIdentifier:v94];
  [v10 setConnectionAllowed:v25];
  [v10 setTxPower:v21];
  Class v26 = UUID._bridgeToObjectiveC()().super.isa;
  [v10 setProductUUID:v26];

  [v10 setVendorId:v22];
  [v10 setProductId:v23];
  if (v24)
  {
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v27 = 0LL;
  }

  uint64_t v28 = *(void *)(v0 + 1464);
  [v10 setModelName:v27];

  if (v28)
  {
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v29 = 0LL;
  }

  [v10 setManufacturerName:v29];

  if (v96)
  {
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v30 = 0LL;
  }

  NSString v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
  uint64_t v32 = *(void *)(v0 + 1360);
  uint64_t v33 = *(void *)(v0 + 752);
  uint64_t v34 = *(void *)(v0 + 648);
  [v10 setSerialNumber:v30];

  [v10 setOwner:v32];
  if (v31(v33, 1LL, v34))
  {
    id v35 = 0LL;
  }

  else
  {
    uint64_t v36 = *(void *)(v0 + 664);
    sub_10001DC4C(*(void *)(v0 + 752), v36, type metadata accessor for BeaconProductInfoRecord);
    id v35 = sub_10039E040();
    sub_100018C68(v36, type metadata accessor for BeaconProductInfoRecord);
  }

  uint64_t v37 = *(unsigned __int8 *)(v0 + 1917);
  uint64_t v38 = *(unsigned __int8 *)(v0 + 1916);
  uint64_t v39 = *(void *)(v0 + 1352);
  [v10 setAccessoryProductInfo:v35];

  [v10 setIsZeus:v37];
  [v10 setIsAppleAudioAccessory:v38];
  if (v39)
  {
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v40 = 0LL;
  }

  uint64_t v41 = *(void *)(v0 + 1392);
  [v10 setDiscoveryId:v40];

  NSString v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setSystemVersion:v42];

  if (v41)
  {
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v43 = 0LL;
  }

  uint64_t v44 = *(void *)(v0 + 1768);
  uint64_t v45 = *(void *)(v0 + 1688);
  uint64_t v46 = *(void **)(v0 + 1680);
  unint64_t v47 = *(void **)(v0 + 1376);
  LODWORD(v52) = *(unsigned __int8 *)(v0 + 1918);
  HIDWORD(v52) = *(unsigned __int8 *)(v0 + 1921);
  uint64_t v48 = *(void **)(v0 + 1368);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v0 + 1824);
  uint64_t v61 = *(void *)(v0 + 1112);
  uint64_t v62 = *(void *)(v0 + 1088);
  uint64_t v63 = *(void *)(v0 + 1072);
  uint64_t v64 = *(void *)(v0 + 1064);
  uint64_t v65 = *(void *)(v0 + 1056);
  uint64_t v59 = *(void *)(v0 + 1040);
  uint64_t v58 = *(void *)(v0 + 1032);
  uint64_t v56 = *(void **)(v0 + 1360);
  uint64_t v57 = *(void *)(v0 + 1008);
  uint64_t v66 = *(void *)(v0 + 1048);
  uint64_t v67 = *(void *)(v0 + 1000);
  uint64_t v68 = *(void *)(v0 + 992);
  uint64_t v70 = *(void *)(v0 + 984);
  uint64_t v72 = *(void *)(v0 + 968);
  uint64_t v74 = *(void *)(v0 + 960);
  uint64_t v76 = *(void *)(v0 + 952);
  uint64_t v77 = *(void *)(v0 + 944);
  uint64_t v79 = *(void *)(v0 + 920);
  uint64_t v81 = *(void *)(v0 + 912);
  uint64_t v69 = *(void *)(v0 + 904);
  uint64_t v71 = *(void *)(v0 + 896);
  uint64_t v73 = *(void *)(v0 + 872);
  uint64_t v75 = *(void *)(v0 + 864);
  uint64_t v78 = *(void *)(v0 + 856);
  uint64_t v80 = *(void *)(v0 + 840);
  uint64_t v82 = *(void *)(v0 + 832);
  uint64_t v83 = *(void *)(v0 + 824);
  uint64_t v84 = *(void *)(v0 + 816);
  uint64_t v85 = *(void *)(v0 + 800);
  uint64_t v86 = *(void *)(v0 + 792);
  uint64_t v87 = *(void *)(v0 + 784);
  uint64_t v88 = *(void *)(v0 + 760);
  uint64_t v55 = *(void *)(v0 + 752);
  uint64_t v89 = *(void *)(v0 + 744);
  uint64_t v90 = *(void *)(v0 + 736);
  uint64_t v91 = *(void *)(v0 + 728);
  uint64_t v92 = *(void *)(v0 + 712);
  uint64_t v93 = *(void *)(v0 + 688);
  uint64_t v95 = *(void *)(v0 + 680);
  uint64_t v97 = *(void *)(v0 + 664);
  objc_msgSend(v10, "setName:", v43, v52);

  [v10 setBatteryLevel:v44];
  [v10 setConnectableDeviceCount:v45];
  [v10 setKeySyncRecord:v46];
  [v10 setLostModeInfo:v48];
  [v10 setRole:v47];
  sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
  sub_100450F20();
  Class v49 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v10 setSafeLocations:v49];

  [v10 setConnected:v53];
  [v10 setCanBeLeashedByHost:v54];
  type metadata accessor for SPBeaconTaskName(0LL);
  sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
  sub_100015C48( (unint64_t *)&qword_10099C3B0,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E3C50);
  Class v50 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v10 setTaskInformation:v50];

  swift_release();
  v60(v58, v57);
  v60(v59, v57);

  sub_100015794(v55, &qword_1009AA870);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v59);
  swift_task_dealloc(v58);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v74);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v79);
  swift_task_dealloc(v81);
  swift_task_dealloc(v69);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  swift_task_dealloc(v75);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v55);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v95);
  swift_task_dealloc(v97);
  return (*(uint64_t (**)(id))(v0 + 8))(v10);
}

uint64_t sub_10044FF98()
{
  uint64_t v1 = *(void *)(v0 + 688);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 704) + 56LL))( v1,  1LL,  1LL,  *(void *)(v0 + 696));
  sub_100015794(v1, &qword_1009A2438);
  char v2 = *(_BYTE *)(v0 + 1920);
  uint64_t v3 = *(void *)(v0 + 1632);
  __int128 v4 = *(_OWORD *)(v0 + 1640);
  *(_OWORD *)(v0 + 1712) = *(_OWORD *)(v0 + 1656);
  *(_OWORD *)(v0 + 1696) = v4;
  *(_BYTE *)(v0 + 1921) = v2;
  *(void *)(v0 + 1688) = v3;
  *(void *)(v0 + 1680) = 0LL;
  uint64_t v5 = *(void *)(v0 + 624);
  if ((*(_WORD *)(v0 + 632) & 0x240) != 0)
  {
    uint64_t v6 = *(void **)(v0 + 616);
    uint64_t v7 = v6[3];
    uint64_t v8 = v6[4];
    sub_100012ED8(v6, v7);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8LL) + 32LL))(v7);
    uint64_t v9 = sub_10044D5A0;
  }

  else
  {
    *(void *)(v0 + 1768) = 0LL;
    *(void *)(v0 + 1760) = v5;
    id v10 = *(void **)(v0 + 616);
    uint64_t v11 = v10[3];
    uint64_t v12 = v10[4];
    sub_100012ED8(v10, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v12 + 8) + 8LL) + 32LL))(v11);
    uint64_t v9 = sub_10044D89C;
  }

  return swift_task_switch(v9, v5, 0LL);
}

uint64_t sub_1004500B4(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 56) = a6;
  *(void *)(v7 + 64) = a7;
  *(void *)(v7 + 48) = a5;
  *(double *)(v7 + 40) = a1;
  uint64_t v8 = type metadata accessor for ContinuousClock(0LL);
  *(void *)(v7 + 72) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v7 + 80) = v9;
  *(void *)(v7 + 88) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10045011C, 0LL, 0LL);
}

uint64_t sub_10045011C()
{
  uint64_t v1 = static Duration.seconds(_:)(*(double *)(v0 + 40));
  uint64_t v3 = v2;
  ContinuousClock.init()(v1);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1009A61C0 + dword_1009A61C0);
  __int128 v4 = (void *)swift_task_alloc(unk_1009A61C4);
  *(void *)(v0 + 96) = v4;
  *__int128 v4 = v0;
  v4[1] = sub_1004501B0;
  return v6(v1, v3, 0LL, 0LL, 1);
}

uint64_t sub_1004501B0()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[10] + 8LL))(v2[11], v2[9]);
  if (v0) {
    __int128 v4 = sub_100450314;
  }
  else {
    __int128 v4 = sub_100450224;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100450224()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 112) = Strong;
  if (Strong)
  {
    uint64_t v3 = (void *)swift_task_alloc(dword_1009AE1EC);
    *(void *)(v0 + 120) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1004502BC;
    return sub_1004436A8(*(void *)(v0 + 56), *(void *)(v0 + 64));
  }

  else
  {
    swift_task_dealloc(*(void *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1004502BC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 112);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 120));
  swift_release(v2);
  swift_task_dealloc(*(void *)(v1 + 88));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100450314()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100450348@<X0>(uint64_t result@<X0>, void *a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3 = result;
  if (result)
  {
    uint64_t v5 = a2[3];
    uint64_t v6 = a2[4];
    uint64_t v7 = sub_100012ED8(a2, v5);
    id result = sub_1002C2124((uint64_t)v7, v3, v5, v6);
  }

  *a3 = v3 == 0;
  return result;
}

BOOL sub_1004503A0(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = *(void *)(a1 + *(int *)(type metadata accessor for SafeLocation(0LL) + 52));
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  sub_100012ED8(a2, v9);
  uint64_t v11 = *(void *)(*(void *)(v10 + 8) + 8LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, __n128))(v11 + 32);
  __n128 v13 = swift_bridgeObjectRetain(v8);
  v12(v9, v11, v13);
  Class v17 = v7;
  BOOL v14 = sub_1004E98E4((uint64_t (*)(char *))sub_100246EF4, (BOOL)v16, v8);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  return v14;
}

void *sub_1004504A8()
{
  return v0;
}

uint64_t sub_10045050C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SimpleBeaconUpdateService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd25SimpleBeaconUpdateService);
}

uint64_t initializeWithCopy for SimpleBeaconUpdateContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for SimpleBeaconUpdateContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for SimpleBeaconUpdateContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimpleBeaconUpdateContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimpleBeaconUpdateContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SimpleBeaconUpdateContext()
{
  return &type metadata for SimpleBeaconUpdateContext;
}

uint64_t sub_1004506F8()
{
  return swift_task_switch(sub_10045070C, v0, 0LL);
}

uint64_t sub_10045070C()
{
  uint64_t v1 = (void *)SPSimpleBeaconUpdateInterfaceReconnectNotification;
  uint64_t v2 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v3 = DarwinNotificationHelper.init(notificationName:rateLimit:)(v1, 0.0);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100450790(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009AE3F8,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for SimpleBeaconUpdateService,  (uint64_t)&unk_100801EE8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1004507CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE428);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (v11 + 40) & ~v11;
  __n128 v13 = (char *)swift_allocObject(&unk_10095A630, v12 + v6, v11 | 7);
  *((void *)v13 + 2) = 0LL;
  *((void *)v13 + 3) = 0LL;
  *((void *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))( &v13[v12],  (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  swift_retain();
  sub_1003EDB00((uint64_t)v9, (uint64_t)&unk_1009AE440, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_100450914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009AE428);
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v5[7] = v8;
  v5[8] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100450980, 0LL, 0LL);
}

uint64_t sub_100450980()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, v0[4], v3);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = swift_allocObject(&unk_10095A658, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  uint64_t v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v0[10] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100450A60;
  return unsafeBlocking<A>(_:)(v0[2], sub_100450DEC, v8, (char *)&type metadata for () + 8);
}

uint64_t sub_100450A60()
{
  uint64_t v1 = *(void *)(*v0 + 72);
  uint64_t v2 = *(void *)(*v0 + 64);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 80));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100450ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE428);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = *(dispatch_queue_s **)(a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10095A680, v9 + v6, v8 | 7);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  uint64_t v11 = swift_allocObject(&unk_10095A6A8, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = sub_100450E3C;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_100095030;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  aBlock[3] = &unk_10095A6C0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v12);
  _Block_release(v12);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v11, "", 110LL, 27LL, 55LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  if ((a1 & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100450C60(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain(v4);
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009AE428);
  return CheckedContinuation.resume(returning:)(&v4, v2);
}

uint64_t sub_100450CC0(uint64_t a1)
{
  return sub_1004507CC(a1, v1);
}

uint64_t sub_100450CC8()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009AE428);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100450D48(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009AE428) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_1009AE43C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100015D58;
  return sub_100450914(a1, v5, v6, v7, v8);
}

uint64_t sub_100450DE0()
{
  return sub_100015CCC((uint64_t *)&unk_1009AE428);
}

uint64_t sub_100450DEC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009AE428) - 8) + 80LL);
  return sub_100450ABC(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100450E30()
{
  return sub_100015CCC((uint64_t *)&unk_1009AE428);
}

uint64_t sub_100450E3C()
{
  return sub_100451B60((uint64_t *)&unk_1009AE428, (uint64_t (*)(void, uint64_t))sub_100450C60);
}

uint64_t sub_100450E50()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100450E60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100450E70(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100450E78()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100450EB4()
{
  return sub_10043BB28(*(void *)(v0 + 16), *(void *)(v0 + 24), (__int128 *)(v0 + 32));
}

uint64_t sub_100450EC4()
{
  return sub_1001187D4((uint64_t (*)(void, uint64_t))sub_1005EB4DC);
}

uint64_t sub_100450ED0(uint64_t a1)
{
  return sub_10036CCB0(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_100450EDC()
{
  unint64_t result = qword_1009AE498;
  if (!qword_1009AE498)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007F7488,  &type metadata for BeaconSharingManager.ItemConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1009AE498);
  }

  return result;
}

unint64_t sub_100450F20()
{
  unint64_t result = qword_1009A7D80;
  if (!qword_1009A7D80)
  {
    uint64_t v1 = sub_100022898(255LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1009A7D80);
  }

  return result;
}

void sub_100450F78(void *a1, uint64_t a2, uint64_t a3)
{
  Class v26 = a1;
  uint64_t v6 = a2 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a2 + 64);
  int64_t v20 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v10 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = *(void *)(a2 + 56) + 48 * i;
    uint64_t v17 = *(void *)(v16 + 24);
    char v18 = *(_BYTE *)(v16 + 32);
    uint64_t v19 = *(void *)(v16 + 40);
    uint64_t v21 = *(void *)v16;
    __int128 v22 = *(_OWORD *)(v16 + 8);
    uint64_t v23 = v17;
    char v24 = v18;
    uint64_t v25 = v19;
    swift_retain();
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    sub_10043CF50(&v26, &v21, a3);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v10++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v10 >= v20) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v10);
    if (!v14) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v14 - 1) & v14;
  }

  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v20) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v20) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v20) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v10 + 4;
  if (v10 + 4 >= v20)
  {
LABEL_26:
    swift_release();
    return;
  }

  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_16:
    int64_t v10 = v15;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v20) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_17;
    }
  }

uint64_t sub_1004511AC()
{
  return sub_1001187D4((uint64_t (*)(void, uint64_t))sub_1005EBF34);
}

uint64_t sub_1004511B8(uint64_t a1)
{
  return sub_10036CD40(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1004511C8()
{
  return sub_1001187D4((uint64_t (*)(void, uint64_t))sub_1005EA794);
}

uint64_t sub_1004511D4(uint64_t a1)
{
  return sub_10036CD1C(a1, v1[2], v1[3], v1[4]);
}

void *sub_1004511E0@<X0>(void *a1@<X8>)
{
  return sub_1005EB500(a1);
}

uint64_t sub_1004511E8(uint64_t a1)
{
  return sub_10036CCD4(a1, v1[2], v1[3], v1[4]);
}

BOOL sub_1004511F4(uint64_t a1)
{
  return sub_1004503A0(a1, *(void **)(v1 + 16));
}

uint64_t sub_100451214@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1 + 3;
  uint64_t v6 = v1[6];
  uint64_t v5 = (void *)v1[7];
  uint64_t v7 = sub_100012ED8(v4, v6);
  uint64_t result = sub_1002BF9E0((uint64_t)v7, 0, v3, v6, v5);
  *a1 = result;
  return result;
}

uint64_t sub_100451268@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1 + 3;
  uint64_t v6 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v7 = sub_100012ED8(v4, v6);
  uint64_t result = sub_1004974CC((uint64_t)v7, v3, v6, v5);
  *a1 = result & 1;
  return result;
}

uint64_t sub_1004512C0@<X0>(BOOL *a1@<X8>)
{
  return sub_100450348(*(void *)(v1 + 16), (void *)(v1 + 24), a1);
}

uint64_t sub_1004512D0()
{
  return sub_1001187D4(sub_1005EA780);
}

uint64_t sub_1004512DC(uint64_t a1)
{
  return sub_10036CC68(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1004512EC()
{
  return sub_1001187D4((uint64_t (*)(void, uint64_t))sub_1005EB0DC);
}

uint64_t sub_1004512F8(uint64_t a1)
{
  return sub_10036CC8C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10045130C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100451330()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_10045136C(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[4];
  uint64_t v7 = *((void *)v1 + 5);
  uint64_t v8 = (uint64_t)(v1 + 6);
  uint64_t v9 = *((void *)v1 + 11);
  int64_t v10 = (void *)swift_task_alloc(dword_1009AE4DC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v10;
  *int64_t v10 = v2;
  v10[1] = sub_1000159BC;
  return sub_1004500B4(v6, a1, v4, v5, v7, v8, v9);
}

uint64_t sub_100451400(uint64_t a1)
{
  return sub_10043CC34(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100451408(uint64_t a1, uint64_t a2)
{
  double v6 = (void *)swift_task_alloc(dword_1009AE4F4);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v6;
  *double v6 = v3;
  v6[1] = sub_100015D58;
  return sub_100448438(a1, a2, v2);
}

uint64_t sub_10045146C()
{
  return sub_100246EA8((void (*)(void))&_swift_bridgeObjectRelease, 32LL);
}

uint64_t sub_10045147C@<X0>(void *a1@<X8>)
{
  return sub_1005EA700(*(void *)(v1 + 24), a1);
}

uint64_t sub_100451484@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = XPCSession.connection.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1004514AC()
{
  return sub_1001187D4((uint64_t (*)(void, uint64_t))sub_1005EB064);
}

uint64_t sub_1004514B8(uint64_t a1)
{
  return sub_10036CC44(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1004514C4()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009AE538);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100451544()
{
  return sub_100451784((uint64_t (*)(void, void, uint64_t))sub_10043CEAC);
}

uint64_t sub_100451554()
{
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = (void *)swift_task_alloc(dword_1009AE54C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100015D58;
  uint64_t v6 = (void *)swift_task_alloc(dword_1009AE1F4);
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_1000136E8;
  return sub_100444AAC(v2, v4, v3);
}

uint64_t sub_1004515E0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_1009AE564);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100015D58;
  return sub_1004432C0(a1, a2, v2);
}

uint64_t sub_100451648()
{
  return sub_1001187D4(sub_1005EAFEC);
}

uint64_t sub_100451654()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009AE57C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10020D500;
  return sub_1004427F8(v0);
}

uint64_t sub_10045169C()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009AE58C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100015D58;
  void v2[3] = v0;
  return swift_task_switch(sub_100442904, 0LL, 0LL);
}

uint64_t sub_1004516F8(uint64_t a1)
{
  return sub_10043C3CC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100451700()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009AE538);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100451778()
{
  return sub_100451784((uint64_t (*)(void, void, uint64_t))sub_10043C63C);
}

uint64_t sub_100451784(uint64_t (*a1)(void, void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009AE538) - 8) + 80LL);
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), v1 + ((v2 + 32) & ~v2));
}

unint64_t sub_1004517C8()
{
  unint64_t result = qword_1009AE5A0;
  if (!qword_1009AE5A0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_1009AE5A0);
  }

  return result;
}

uint64_t sub_10045180C(uint64_t a1)
{
  return sub_10043D7E0(a1, v1);
}

uint64_t sub_100451814()
{
  return sub_100246EA8((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_100451824(uint64_t a1)
{
  return sub_10043F2AC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100451830()
{
  return sub_100246EA8((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_100451840(uint64_t a1)
{
  return sub_100440708(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10045184C(uint64_t *a1)
{
  return sub_10043ED7C(a1, v1);
}

uint64_t sub_100451854()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100451878()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009AE5DC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100015D58;
  return sub_10043EE30(v2, v3);
}

uint64_t sub_1004518C8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009AE5EC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100015D58;
  v4[3] = v2;
  void v4[4] = v3;
  return swift_task_switch(sub_10043EF60, v2, 0LL);
}

uint64_t sub_10045192C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc(dword_1009AE60C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100015D58;
  return sub_1004448FC(v2, v3, v5, v4);
}

uint64_t sub_100451994()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc(dword_1009AE60C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_1000159BC;
  return sub_1004448FC(v2, v3, v5, v4);
}

uint64_t sub_100451A00()
{
  return sub_100451A78((void (*)(void))&_swift_release);
}

uint64_t sub_100451A0C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1009AE634);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100015D58;
  return sub_100443A98(v2, v3, v4);
}

uint64_t sub_100451A6C()
{
  return sub_100451A78((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100451A78(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

uint64_t sub_100451AB8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc(dword_1009AE644);
  __int128 v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100015D58;
  *(void *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + 48) = v4;
  return swift_task_switch(sub_1004443C0, 0LL, 0LL);
}

uint64_t sub_100451B40()
{
  return sub_100015CCC(&qword_1009AE6A8);
}

uint64_t sub_100451B4C()
{
  return sub_100451B60(&qword_1009AE6A8, (uint64_t (*)(void, uint64_t))sub_10043DA4C);
}

uint64_t sub_100451B60(uint64_t *a1, uint64_t (*a2)(void, uint64_t))
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(a1) - 8) + 80LL);
  return a2(*(void *)(v2 + 16), v2 + ((v3 + 24) & ~v3));
}

uint64_t sub_100451BA0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100451BE0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009AE6BC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  __int128 v4 = (void *)swift_task_alloc(dword_1009AE1DC);
  v3[2] = v4;
  *__int128 v4 = v3;
  v4[1] = sub_1000159BC;
  void v4[4] = v2;
  return swift_task_switch(sub_100442600, v2, 0LL);
}

uint64_t sub_100451C64()
{
  return sub_100246EA8((void (*)(void))&_swift_release, 32LL);
}

void sub_100451C74()
{
}

uint64_t getEnumTagSinglePayload for VersionNumber(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for VersionNumber(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4) = v3;
  return result;
}

ValueMetadata *type metadata accessor for VersionNumber()
{
  return &type metadata for VersionNumber;
}

uint64_t sub_100451D18()
{
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt16,  &protocol witness table for UInt16);
  v0._countAndFlagsBits = 46LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 46LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  uint64_t v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  return v7;
}

uint64_t sub_100451DF4(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_100451E78(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100004AEC(&qword_1009AE6F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100452D04();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for VersionNumber.CodingKeys,  &type metadata for VersionNumber.CodingKeys,  v11,  v9,  v10);
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v14, v5);
  if (!v2)
  {
    v13[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(WORD1(a2));
    v13[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(BYTE3(a2));
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100451FB4()
{
  uint64_t v1 = 0x726F6E696DLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6F697369766572LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x726F6A616DLL;
  }
}

uint64_t sub_100452008@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100452A44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10045202C(uint64_t a1)
{
  unint64_t v2 = sub_100452D04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452054(uint64_t a1)
{
  unint64_t v2 = sub_100452D04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10045207C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100452B88(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
  }

  return result;
}

uint64_t sub_1004520B4(void *a1)
{
  return sub_100451E78(a1, *v1);
}

uint64_t sub_1004520CC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 < v3) {
    return 1LL;
  }
  unsigned int v5 = *((unsigned __int8 *)a1 + 2);
  unsigned int v6 = *((unsigned __int8 *)a2 + 2);
  BOOL v8 = v6 >= v5 && *((unsigned __int8 *)a1 + 3) < *((unsigned __int8 *)a2 + 3);
  unsigned int v9 = v5 < v6 || v8;
  if (v3 < v2) {
    return 0LL;
  }
  else {
    return v9;
  }
}

uint64_t sub_100452118(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v3 < v2) {
    return 0LL;
  }
  if (v2 < v3) {
    return 1LL;
  }
  unsigned int v5 = *((unsigned __int8 *)a1 + 2);
  unsigned int v6 = *((unsigned __int8 *)a2 + 2);
  BOOL v8 = v5 < v6 || *((unsigned __int8 *)a2 + 3) >= *((unsigned __int8 *)a1 + 3);
  return v6 >= v5 && v8;
}

uint64_t sub_100452168(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 < v3) {
    return 0LL;
  }
  if (v3 < v2) {
    return 1LL;
  }
  unsigned int v5 = *((unsigned __int8 *)a1 + 2);
  unsigned int v6 = *((unsigned __int8 *)a2 + 2);
  BOOL v8 = v6 < v5 || *((unsigned __int8 *)a1 + 3) >= *((unsigned __int8 *)a2 + 3);
  return v5 >= v6 && v8;
}

uint64_t sub_1004521B8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v3 < v2) {
    return 1LL;
  }
  unsigned int v5 = *((unsigned __int8 *)a1 + 2);
  unsigned int v6 = *((unsigned __int8 *)a2 + 2);
  BOOL v8 = v5 >= v6 && *((unsigned __int8 *)a2 + 3) < *((unsigned __int8 *)a1 + 3);
  unsigned int v9 = v6 < v5 || v8;
  if (v2 < v3) {
    return 0LL;
  }
  else {
    return v9;
  }
}

uint64_t sub_100452204()
{
  return sub_100451D18();
}

Swift::Int sub_100452210()
{
  Swift::UInt16 v1 = *(_WORD *)v0;
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 3);
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_10045227C()
{
  Swift::UInt8 v1 = *(_BYTE *)(v0 + 2);
  Swift::UInt8 v2 = *(_BYTE *)(v0 + 3);
  Hasher._combine(_:)(*(_WORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_1004522C4(uint64_t a1)
{
  Swift::UInt16 v2 = *(_WORD *)v1;
  Swift::UInt8 v3 = *(_BYTE *)(v1 + 2);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 3);
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_10045232C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2
}

unint64_t sub_100452364@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100452480(*a1, a1[1]);
  if ((result & 0x100000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
  }

  return result;
}

unint64_t sub_1004523AC()
{
  unint64_t result = qword_1009AE6D0;
  if (!qword_1009AE6D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801F5C, &type metadata for VersionNumber);
    atomic_store(result, (unint64_t *)&qword_1009AE6D0);
  }

  return result;
}

unint64_t sub_1004523F4()
{
  unint64_t result = qword_1009AE6D8;
  if (!qword_1009AE6D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801FD4, &type metadata for VersionNumber);
    atomic_store(result, (unint64_t *)&qword_1009AE6D8);
  }

  return result;
}

unint64_t sub_10045243C()
{
  unint64_t result = qword_1009AE6E0;
  if (!qword_1009AE6E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100801F94, &type metadata for VersionNumber);
    atomic_store(result, (unint64_t *)&qword_1009AE6E0);
  }

  return result;
}

unint64_t sub_100452480(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  v34[0] = 46LL;
  v34[1] = 0xE100000000000000LL;
  unint64_t v2 = sub_1000155F8();
  Swift::UInt8 v3 = (void *)StringProtocol.components<A>(separatedBy:)( v34,  &type metadata for String,  &type metadata for String,  v2,  v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = v3[2];
  if ((v4 & 0x7FFFFFFFFFFFFFFELL) != 2) {
    goto LABEL_64;
  }
  uint64_t v5 = v3[4];
  unint64_t v6 = v3[5];
  uint64_t v7 = HIBYTE(v6) & 0xF;
  uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  if (!((v6 & 0x2000000000000000LL) != 0 ? HIBYTE(v6) & 0xF : v5 & 0xFFFFFFFFFFFFLL)) {
    goto LABEL_64;
  }
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain(v3[5]);
    unsigned int v12 = sub_1001B92D0(v5, v6, 10LL);
    swift_bridgeObjectRelease();
    if ((v12 & 0x10000) != 0) {
      goto LABEL_64;
    }
  }

  else if ((v6 & 0x2000000000000000LL) != 0)
  {
    uint64_t v35 = v3[4];
    uint64_t v36 = v6 & 0xFFFFFFFFFFFFFFLL;
    if (v5 == 43)
    {
      if (!v7)
      {
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_64;
      }

      if (v7 == 1) {
        goto LABEL_64;
      }
      unsigned int v12 = (BYTE1(v5) - 48);
      if (v12 > 9) {
        goto LABEL_64;
      }
      if (v7 != 2)
      {
        LOWORD(v12) = 10 * v12 + (BYTE2(v5) - 48);
        uint64_t v14 = v7 - 3;
        if (v14)
        {
          int64_t v15 = (unsigned __int8 *)&v35 + 3;
          while (1)
          {
            unsigned int v16 = *v15 - 48;
            if (v16 > 9) {
              goto LABEL_64;
            }
            unsigned int v12 = (unsigned __int16)(10 * v12) + v16;
            if ((v12 & 0x10000) != 0) {
              goto LABEL_64;
            }
            int v13 = 0;
            ++v15;
            if (!--v14) {
              goto LABEL_11;
            }
          }
        }
      }
    }

    else if (v5 == 45)
    {
      if (!v7)
      {
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }

      if (v7 == 2)
      {
        LOWORD(v12) = -(BYTE1(v5) - 48);
      }

      else
      {
        unsigned int v12 = (unsigned __int16)(-10 * (BYTE1(v5) - 48)) - (BYTE2(v5) - 48);
        if ((v12 & 0xFFFF0000) != 0) {
          goto LABEL_64;
        }
        uint64_t v30 = v7 - 3;
        if (v30)
        {
          NSString v31 = (unsigned __int8 *)&v35 + 3;
          while (1)
          {
            unsigned int v32 = *v31 - 48;
            if (v32 > 9) {
              goto LABEL_64;
            }
            unsigned int v12 = (unsigned __int16)(10 * v12) - v32;
            if ((v12 & 0xFFFF0000) != 0) {
              goto LABEL_64;
            }
            int v13 = 0;
            ++v31;
            if (!--v30) {
              goto LABEL_11;
            }
          }
        }
      }
    }

    else
    {
      if (!v7) {
        goto LABEL_64;
      }
      unsigned int v12 = (v5 - 48);
      if (v12 > 9) {
        goto LABEL_64;
      }
      if (v7 != 1)
      {
        LOWORD(v12) = 10 * v12 + (BYTE1(v5) - 48);
        uint64_t v27 = v7 - 2;
        if (v27)
        {
          uint64_t v28 = (unsigned __int8 *)&v35 + 2;
          while (1)
          {
            unsigned int v29 = *v28 - 48;
            if (v29 > 9) {
              goto LABEL_64;
            }
            unsigned int v12 = (unsigned __int16)(10 * v12) + v29;
            if ((v12 & 0x10000) != 0) {
              goto LABEL_64;
            }
            int v13 = 0;
            ++v28;
            if (!--v27) {
              goto LABEL_11;
            }
          }
        }
      }
    }
  }

  else
  {
    if ((v5 & 0x1000000000000000LL) != 0) {
      uint64_t v10 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3[4], v3[5]);
    }
    unsigned int v11 = sub_1001B91B4(v10, v8, 10LL);
    LOWORD(v12) = v11;
    int v13 = HIWORD(v11) & 1;
LABEL_11:
    if (v13) {
      goto LABEL_64;
    }
  }

  if (v3[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_69;
  }

  uint64_t v17 = v3[6];
  unint64_t v18 = v3[7];
  swift_bridgeObjectRetain(v18);
  __int16 v19 = sub_1006DD990(v17, v18);
  if ((v19 & 0x100) != 0)
  {
LABEL_64:
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }

  unsigned __int8 v20 = v19;
  if (v4 != 3)
  {
    swift_bridgeObjectRelease();
    int v24 = 0;
    goto LABEL_44;
  }

  if (v3[2] < 3uLL) {
    goto LABEL_71;
  }
  uint64_t v21 = v3[8];
  unint64_t v22 = v3[9];
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  unsigned __int16 v23 = sub_1006DD990(v21, v22);
  if ((v23 & 0x100) != 0)
  {
LABEL_65:
    unint64_t v26 = 0LL;
    unsigned __int8 v25 = 1;
    goto LABEL_66;
  }

  int v24 = v23;
LABEL_44:
  unsigned __int8 v25 = 0;
  unint64_t v26 = (v24 << 24) | (unsigned __int16)v12 | ((unint64_t)v20 << 16);
LABEL_66:
  LOBYTE(v35) = v25;
  return v26 | ((unint64_t)v25 << 32);
}

void sub_10045288C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

unint64_t sub_1004528D0()
{
  if (BYTE6(v0) == 4LL)
  {
    uint64_t v2 = Data.subdata(in:)(0LL);
    unint64_t v4 = v3;
    uint64_t v5 = Data.subdata(in:)(1LL);
    unint64_t v7 = v6;
    uint64_t v8 = Data.subdata(in:)(2LL);
    unint64_t v10 = v9;
    unsigned __int8 v11 = Data.subscript.getter(1LL);
    unint64_t v12 = Data.subscript.getter(0LL) | ((unint64_t)v11 << 8);
    unsigned __int8 v17 = Data.subscript.getter(0LL);
    unsigned __int8 v13 = Data.subscript.getter(0LL);
    sub_100016F9C(v1, v0);
    sub_100016F9C(v8, v10);
    sub_100016F9C(v5, v7);
    sub_100016F9C(v2, v4);
    unsigned __int8 v14 = 0;
    unint64_t v15 = v12 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v17 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v13 << 24);
  }

  else
  {
    sub_100016F9C(v1, v0);
    unint64_t v15 = 0LL;
    unsigned __int8 v14 = 1;
  }

  return v15 | ((unint64_t)v14 << 32);
}

uint64_t sub_100452A44(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x726F6A616DLL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6A616DLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x726F6E696DLL && a2 == 0xE500000000000000LL)
  {
    unint64_t v7 = 0xE500000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6E696DLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6E6F697369766572LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697369766572LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100452B88(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009AE6E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_100452D04();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for VersionNumber.CodingKeys,  &type metadata for VersionNumber.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v17 = 0;
  unsigned __int16 v10 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
  char v16 = 1;
  unsigned __int8 v11 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
  char v15 = 2;
  int v12 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return (v11 << 16) | (v12 << 24) | v10;
}

unint64_t sub_100452D04()
{
  unint64_t result = qword_1009AE6F0;
  if (!qword_1009AE6F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802200, &type metadata for VersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE6F0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for VersionNumber.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100452D94 + 4 * byte_100801F45[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100452DC8 + 4 * byte_100801F40[v4]))();
}

uint64_t sub_100452DC8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100452DD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100452DD8LL);
  }
  return result;
}

uint64_t sub_100452DE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100452DECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100452DF0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100452DF8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VersionNumber.CodingKeys()
{
  return &type metadata for VersionNumber.CodingKeys;
}

unint64_t sub_100452E18()
{
  unint64_t result = qword_1009AE700;
  if (!qword_1009AE700)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008021D8, &type metadata for VersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE700);
  }

  return result;
}

unint64_t sub_100452E60()
{
  unint64_t result = qword_1009AE708;
  if (!qword_1009AE708)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802148, &type metadata for VersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE708);
  }

  return result;
}

unint64_t sub_100452EA8()
{
  unint64_t result = qword_1009AE710;
  if (!qword_1009AE710)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802170, &type metadata for VersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE710);
  }

  return result;
}

uint64_t sub_100452EEC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009AE718);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009AE718);
  if (qword_10099B4A0 != -1) {
    swift_once(&qword_10099B4A0, sub_100453F10);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2AA80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_100452F7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = v1[23];
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 40);
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10020E2A0,  v7,  v8,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  }

  else
  {
    static DispatchQoS.background.getter(v4);
    uint64_t v10 = swift_allocObject(&unk_10095B228, 24LL, 7LL);
    *(void *)(v10 + swift_weakDestroy(v0 + 16) = v2;
    uint64_t v11 = swift_allocObject(&unk_10095B250, 32LL, 7LL);
    *(void *)(v11 + swift_weakDestroy(v0 + 16) = v1;
    *(void *)(v11 + 24) = v2;
    uint64_t v12 = type metadata accessor for XPCActivity();
    swift_allocObject(v12, 112LL, 7LL);
    swift_retain();
    uint64_t v13 = sub_10045AD78( 0xD000000000000026LL,  (void *)0x8000000100862E20LL,  (uint64_t)v6,  (uint64_t)sub_100453FA4,  v10,  (uint64_t)sub_100454000,  v11);
    swift_release();
    swift_release();
    v1[23] = v13;
  }

  return swift_release();
}

uint64_t sub_1004530FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009AE898);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B1510);
  uint64_t v22 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a2 + 192, v23, 0LL, 0LL);
  uint64_t result = *(void *)(a2 + 192);
  uint64_t v14 = *(void *)(result + 16);
  if (v14)
  {
    v20[2] = v3;
    uint64_t v21 = v7;
    uint64_t v15 = v6;
    unint64_t v16 = result + ((*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    uint64_t v17 = *(void *)(v22 + 72);
    unint64_t v18 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v22 + 16);
    v20[1] = result;
    __n128 v19 = swift_bridgeObjectRetain(result);
    do
    {
      v18(v12, v16, v10, v19);
      uint64_t v24 = a3;
      swift_bridgeObjectRetain(a3);
      AsyncStream.Continuation.yield(_:)(&v24, v10);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v15);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v10);
      v16 += v17;
      --v14;
    }

    while (v14);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_100453280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B1510);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (v11 + 40) & ~v11;
  uint64_t v13 = (char *)swift_allocObject(&unk_10095B2A0, v12 + v6, v11 | 7);
  *((void *)v13 + 2) = 0LL;
  *((void *)v13 + 3) = 0LL;
  *((void *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))( &v13[v12],  (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  swift_retain();
  uint64_t v14 = sub_1003EDB00((uint64_t)v9, (uint64_t)&unk_1009AE8B0, (uint64_t)v13);
  return swift_release(v14);
}

uint64_t sub_1004533C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v7 = sub_100004AEC(&qword_1009B1510);
  v5[7] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[8] = v8;
  void v5[9] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100453430, a4, 0LL);
}

uint64_t sub_100453430()
{
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 16LL))( *(void *)(v0 + 72),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
  uint64_t v2 = (unint64_t *)(v1 + 192);
  swift_beginAccess(v1 + 192, v0 + 16, 33LL, 0LL);
  unint64_t v3 = *(void *)(v1 + 192);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  *(void *)(v1 + 192) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v3 = sub_1004C6774(0, *(void *)(v3 + 16) + 1LL, 1, v3);
    *uint64_t v2 = v3;
  }

  unint64_t v6 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    unint64_t v3 = sub_1004C6774(v5 > 1, v6 + 1, 1, v3);
    *uint64_t v2 = v3;
  }

  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 56);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v6 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( v3 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v6,
    v8,
    v9);
  swift_endAccess(v0 + 16);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100453544()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BeaconKeyService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd16BeaconKeyService);
}

ValueMetadata *type metadata accessor for BeaconKeyService.KeyStreamChange()
{
  return &type metadata for BeaconKeyService.KeyStreamChange;
}

uint64_t sub_1004535C0()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  return swift_task_switch(sub_1004535D8, v0, 0LL);
}

void sub_1004535D8()
{
  if (*(void *)(*(void *)(v0 + 16) + 136LL))
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_1009ABCF4);
    *(void *)(v0 + 24) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10045362C;
    sub_1003B7AC8();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10045362C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 24LL));
  return swift_task_switch(sub_100453680, v1, 0LL);
}

uint64_t sub_100453680()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1004536B0(uint64_t a1)
{
  unint64_t result = sub_1004536D4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1004536D4()
{
  unint64_t result = qword_1009AE878;
  if (!qword_1009AE878)
  {
    uint64_t v1 = type metadata accessor for BeaconKeyService();
    unint64_t result = swift_getWitnessTable(&unk_100802328, v1);
    atomic_store(result, &qword_1009AE878);
  }

  return result;
}

uint64_t sub_100453718(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[7] = swift_task_alloc(v6);
  v3[8] = swift_task_alloc(v6);
  return swift_task_switch(sub_10045378C, v2, 0LL);
}

void sub_10045378C()
{
  uint64_t v1 = v0[3];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = (int *)v0[5];
    uint64_t v3 = v0[6];
    sub_100032AD4(0, v2, 0);
    unint64_t v32 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v5 = v1 + v32;
    uint64_t v6 = *(void *)(v3 + 72);
    do
    {
      uint64_t v7 = v0[7];
      uint64_t v8 = v0[8];
      sub_100454534(v5, v7);
      uid_t v9 = getuid();
      sub_1005E2270(v9);
      uint64_t v10 = *(int *)(type metadata accessor for BeaconIdentifier(0LL) + 20);
      uint64_t v11 = v7 + v10;
      uint64_t v12 = v8 + v10;
      uint64_t v13 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v12, v11, v13);
      uint64_t v14 = v4[5];
      uint64_t v15 = v7 + v14;
      uint64_t v16 = v8 + v14;
      uint64_t v17 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v16, v15, v17);
      uint64_t v18 = v4[6];
      uint64_t v19 = *(void *)(v7 + v18);
      unint64_t v20 = *(void *)(v7 + v18 + 8);
      uint64_t v21 = *(void *)(v7 + v18 + 16);
      unint64_t v22 = *(void *)(v7 + v18 + 24);
      uint64_t v23 = *(void *)(v7 + v18 + 32);
      unint64_t v24 = *(void *)(v7 + v18 + 40);
      char v25 = *(_BYTE *)(v7 + v4[7]);
      unint64_t v26 = (uint64_t *)(v8 + v18);
      *unint64_t v26 = v19;
      v26[1] = v20;
      __int128 v26[2] = v21;
      v26[3] = v22;
      v26[4] = v23;
      void v26[5] = v24;
      *(_BYTE *)(v8 + v4[7]) = v25;
      sub_100454578(v19, v20, v21, v22, v23, v24);
      sub_1004545D0(v7);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_100032AD4(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      unint64_t v28 = _swiftEmptyArrayStorage[2];
      unint64_t v27 = _swiftEmptyArrayStorage[3];
      if (v28 >= v27 >> 1) {
        sub_100032AD4(v27 > 1, v28 + 1, 1);
      }
      uint64_t v29 = v0[8];
      _swiftEmptyArrayStorage[2] = v28 + 1;
      sub_10045460C(v29, (uint64_t)_swiftEmptyArrayStorage + v32 + v28 * v6);
      v5 += v6;
      --v2;
    }

    while (v2);
  }

  uint64_t v30 = *(void *)(v0[4] + 128);
  if (v30)
  {
    sub_100475E80(v0[2], (uint64_t)_swiftEmptyArrayStorage, v30);
    swift_bridgeObjectRelease();
    if (*(void *)(v0[4] + 136))
    {
      NSString v31 = (uint64_t **)swift_task_alloc(dword_1009AC054);
      v0[9] = (uint64_t)v31;
      unsigned __int8 *v31 = v0;
      v31[1] = (uint64_t *)sub_1004539E8;
      sub_1003B8D0C();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1004539E8()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *v1;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (!v0) {
    return swift_task_switch(sub_100453A64, *(void *)(v3 + 32), 0LL);
  }
  uint64_t v4 = *(void *)(v3 + 56);
  swift_task_dealloc(*(void *)(v3 + 64));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100453A64()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  type metadata accessor for Transaction(0LL);
  uint64_t v3 = (int8x16_t *)swift_task_alloc(32LL);
  v3[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  static Transaction.named<A>(_:with:)("BeaconKeyService.KeyStreamChange", 32LL, 2LL, sub_100454650);
  swift_task_dealloc(v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100453B10(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a3 == 6)
  {
    *(void *)(a4 + 184) = 0LL;
    swift_release();
  }

  else if (a3 == 2)
  {
    if (qword_10099B498 != -1) {
      swift_once(&qword_10099B498, sub_100452EEC);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_1009AE718);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "reevaluateXPCActivity: XPC activity fired for BeaconKeyService",  v12,  2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    type metadata accessor for Transaction(0LL);
    uint64_t v13 = swift_allocObject(&unk_10095B278, 32LL, 7LL);
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = a4;
    *(void *)(v13 + 24) = a5;
    swift_retain();
    static Transaction.asyncTask(name:block:)("reevaluateXPCActivity", 21LL, 2LL, &unk_1009AE888, v13);
    swift_release();
    sub_100458840();
  }

uint64_t sub_100453C8C(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return swift_task_switch(sub_100453CA4, 0LL, 0LL);
}

void sub_100453CA4()
{
  if (*(void *)(*(void *)(v0 + 24) + 136LL))
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_1009AC054);
    *(void *)(v0 + 32) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100453CF8;
    sub_1003B8D0C();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100453CF8()
{
  uint64_t v2 = *(void *)(*v1 + 32);
  uint64_t v3 = *v1;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100453D64, 0LL, 0LL);
  }
  else {
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
}

uint64_t sub_100453D64()
{
  if (qword_10099B498 != -1) {
    swift_once(&qword_10099B498, sub_100452EEC);
  }
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_1009AE718);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 40);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t v10 = _convertErrorToNSError(_:)(v7);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *uint64_t v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "validateKeys error: %@", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 40));
    swift_errorRelease(v7);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100453F10()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AA80);
  sub_10000A720(v0, (uint64_t)qword_100A2AA80);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000010LL,  0x8000000100802290LL);
}

uint64_t sub_100453F94()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100453FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004544EC((uint64_t)v4, a2);
}

uint64_t sub_100453FDC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100454000(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_100454008()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009AE884);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000159BC;
  v3[3] = v2;
  return swift_task_switch(sub_100453CA4, 0LL, 0LL);
}

void sub_100454068(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v37[0];
  uint64_t v34 = v37[2];
  uint64_t v5 = v37[4];
  uint64_t v32 = v37[1];
  uint64_t v33 = v37[3];
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v6 = (uint64_t)&OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v7 = (void *)sub_1006A0E1C(v38[0]);
  swift_bridgeObjectRelease();
  uint64_t v8 = SPServiceStateEnabled;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  if (v9 == v12 && v11 == v13)
  {

    swift_bridgeObjectRelease_n(v11, 2LL);
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0LL);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      if (qword_10099B498 != -1) {
        swift_once(&qword_10099B498, sub_100452EEC);
      }
      uint64_t v16 = type metadata accessor for Logger(0LL);
      uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_1009AE718);
      uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.default.getter(v18);
      if (!os_log_type_enabled(v18, v19))
      {
        uint64_t v21 = 0LL;
        uint64_t v22 = 0LL;
        uint64_t v6 = 0LL;
        uint64_t v5 = 0LL;
        uint64_t v4 = 2LL;
        goto LABEL_27;
      }

      uint64_t v4 = 2LL;
      uint64_t v20 = swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "BeaconKeyService unregistering XPC Activity: service is disabled.",  (uint8_t *)v20,  2u);
      uint64_t v21 = 0LL;
      uint64_t v22 = 0LL;
      uint64_t v6 = 0LL;
      uint64_t v5 = 0LL;
      goto LABEL_23;
    }
  }

  sub_1004544EC(a1, (uint64_t)v38);
  if (LOBYTE(v38[0]) == 2LL)
  {
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v23 = sub_1006A13E8(v35);
    uint64_t v22 = 60 * v23;
    if ((unsigned __int128)(v23 * (__int128)60LL) >> 64 == (60 * v23) >> 63)
    {
      uint64_t v24 = sub_1006A13FC(v35);
      swift_bridgeObjectRelease();
      uint64_t v6 = 60 * v24;
      if ((unsigned __int128)(v24 * (__int128)60LL) >> 64 == (60 * v24) >> 63)
      {
        if (qword_10099B498 == -1)
        {
LABEL_17:
          uint64_t v25 = type metadata accessor for Logger(0LL);
          uint64_t v26 = sub_10000A720(v25, (uint64_t)qword_1009AE718);
          uint64_t v18 = (os_log_s *)Logger.logObject.getter(v26);
          os_log_type_t v27 = static os_log_type_t.default.getter(v18);
          if (!os_log_type_enabled(v18, v27))
          {
            uint64_t v5 = 7232LL;
            uint64_t v21 = 3600LL;
            uint64_t v4 = 257LL;
            goto LABEL_27;
          }

          uint64_t v20 = swift_slowAlloc(32LL, -1LL);
          *(_DWORD *)uint64_t v20 = 134218496;
          uint64_t v35 = 3600LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 4, v20 + 12);
          *(_WORD *)(v20 + 12) = 2048;
          uint64_t v35 = v22;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 14, v20 + 22);
          *(_WORD *)(v20 + 22) = 2048;
          uint64_t v35 = v6;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 24, v20 + 32);
          os_log_type_t v28 = v27;
          uint64_t v21 = 3600LL;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  v28,  "BeaconKeyService XPC criteria: delay %lld, gracePeriod %lld, interval %lld",  (uint8_t *)v20,  0x20u);
          uint64_t v5 = 7232LL;
          uint64_t v4 = 257LL;
          goto LABEL_23;
        }

uint64_t sub_1004544EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AECF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100454534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100454578( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 >> 60 != 15)
  {
    sub_10001736C(result, a2);
    sub_10001736C(a3, a4);
    return sub_100018BE4(a5, a6);
  }

  return result;
}

uint64_t sub_1004545D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10045460C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100454650(uint64_t a1)
{
  return sub_1004530FC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100454668(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AE8A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1004546A8()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B1510);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100454728(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009B1510) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_1009AE8AC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100015D58;
  return sub_1004533C8(a1, v5, v6, v7, v8);
}

uint64_t storeEnumTagSinglePayload for BeaconKeyService.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10045480C + 4 * byte_100802255[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100454840 + 4 * byte_100802250[v4]))();
}

uint64_t sub_100454840(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100454848(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100454850LL);
  }
  return result;
}

uint64_t sub_10045485C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100454864LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100454868(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100454870(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyService.Error()
{
  return &type metadata for BeaconKeyService.Error;
}

unint64_t sub_100454890()
{
  unint64_t result = qword_1009AE8B8;
  if (!qword_1009AE8B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802398, &type metadata for BeaconKeyService.Error);
    atomic_store(result, (unint64_t *)&qword_1009AE8B8);
  }

  return result;
}

void sub_1004548D8(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100454918()
{
  v0._countAndFlagsBits = 0x6E774F7261656E2ELL;
  v0._object = (void *)0xEA00000000007265LL;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease(0xEA00000000007265LL);
}

uint64_t sub_100454A30(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = &v16[-v9 - 8];
  __chkstk_darwin(v8);
  uint64_t v12 = &v16[-v11 - 8];
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v13(&v16[-v11 - 8], v2, a1);
  LODWORD(v12) = swift_dynamicCast(v16, v12, a1, &type metadata for PrimaryWildIndex, 6LL);
  v13(v10, v2, a1);
  if ((_DWORD)v12)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, a1);
    return 1LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v10, a1);
    return swift_dynamicCast(v16, v7, a1, &type metadata for SecondaryIndex, 6LL);
  }

uint64_t sub_100454B64(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100454B98 + 4 * byte_100802409[a1]))( 0x6E776F6E6B6E752ELL,  0xE800000000000000LL);
}

uint64_t sub_100454B98()
{
  return 0x6E774F7261656E2ELL;
}

uint64_t sub_100454BB8()
{
  return 0x6553686374616C2ELL;
}

unint64_t sub_100454BDC()
{
  return 0xD00000000000001CLL;
}

unint64_t sub_100454BFC()
{
  return 0xD000000000000018LL;
}

uint64_t sub_100454C18()
{
  return 0x697250646C69772ELL;
}

uint64_t sub_100454C38()
{
  return 0x636553646C69772ELL;
}

uint64_t sub_100454C5C()
{
  return 0x736142746E69682ELL;
}

uint64_t sub_100454C78()
{
  return 0x67696C4179656B2ELL;
}

uint64_t sub_100454C9C@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100455B50(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100454CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1004569A8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100454D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1004569A8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100454D6C(void *a1@<X8>)
{
  *a1 = &off_100936DD8;
}

uint64_t sub_100454D7C()
{
  v16[0] = 0LL;
  v16[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  v1._countAndFlagsBits = 0x3C636E795379654BLL;
  v1._object = (void *)0xE800000000000000LL;
  String.append(_:)(v1);
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 58LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  uint64_t v6 = type metadata accessor for KeySyncMetadata(0LL);
  sub_1004548D8(*(_BYTE *)(v0 + *(int *)(v6 + 20)));
  v7._countAndFlagsBits = 32LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  uint64_t v8 = v0 + *(int *)(v6 + 24);
  uint64_t v9 = sub_100004AEC(&qword_1009A06D8);
  _print_unlocked<A, B>(_:_:)( v8,  v16,  v9,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v10._countAndFlagsBits = 8250LL;
  v10._object = (void *)0xE200000000000000LL;
  String.append(_:)(v10);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 62LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  return v16[0];
}

uint64_t sub_100454F14(void *a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v7 = sub_100004AEC(&qword_1009AE9D8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v13 = sub_100456CD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KeySyncMetadata.IndexInfo.CodingKeys,  &type metadata for KeySyncMetadata.IndexInfo.CodingKeys,  v13,  v11,  v12);
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v20, v7);
  if (!v3)
  {
    char v19 = a3;
    char v18 = 1;
    unint64_t v14 = sub_1000ABB50();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v7, &type metadata for BeaconKeyManager.KeySequence, v14);
    char v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIBYTE(a3) & 1, &v17, v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100455070()
{
  uint64_t v1 = 0x65636E6575716573LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x646C69577369LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65756C6156776172LL;
  }
}

uint64_t sub_1004550C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1004569EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004550EC(uint64_t a1)
{
  unint64_t v2 = sub_100456CD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100455114(uint64_t a1)
{
  unint64_t v2 = sub_100456CD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10045513C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100456B38(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 9) = HIBYTE(v5) & 1;
  }

  return result;
}

uint64_t sub_100455170(void *a1)
{
  if (*(_BYTE *)(v1 + 9)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return sub_100454F14(a1, *(void *)v1, v2 | *(unsigned __int8 *)(v1 + 8));
}

void sub_1004551A0(char *a1)
{
}

void sub_1004551AC()
{
}

void sub_1004551B4()
{
  __asm { BR              X10 }

uint64_t sub_1004551F4(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE400000000000000LL);
}

void sub_100455254(uint64_t a1)
{
}

unint64_t sub_10045525C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100455CF4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100455288()
{
  return ((uint64_t (*)(void))((char *)sub_1004552BC + 4 * byte_100802416[*v0]))();
}

void sub_1004552BC(void *a1@<X8>)
{
  *a1 = 1701869940LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1004552D0(void *a1@<X8>)
{
  *a1 = 0x666E497865646E69LL;
  a1[1] = 0xE90000000000006FLL;
}

void sub_1004552F0(void *a1@<X8>)
{
  *a1 = 0x6D617473656D6974LL;
  a1[1] = 0xE900000000000070LL;
}

uint64_t sub_100455314()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100455348 + 4 * byte_10080241A[*v0]))( 0xD000000000000010LL,  0x800000010084D8A0LL);
}

uint64_t sub_100455348()
{
  return 1701869940LL;
}

uint64_t sub_100455358()
{
  return 0x666E497865646E69LL;
}

uint64_t sub_100455374()
{
  return 0x6D617473656D6974LL;
}

unint64_t sub_100455394@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100455CF4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004553B8(uint64_t a1)
{
  unint64_t v2 = sub_100455B64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004553E0(uint64_t a1)
{
  unint64_t v2 = sub_100455B64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100455408@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v43 = type metadata accessor for Date(0LL);
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  NSString v42 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v46 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v44 = sub_100004AEC(&qword_1009AE8C0);
  uint64_t v6 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for KeySyncMetadata(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_100455B64();
  unint64_t v47 = v8;
  char v15 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KeySyncMetadata.CodingKeys,  &type metadata for KeySyncMetadata.CodingKeys,  v14,  v12,  v13);
  if (v15) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v39 = v4;
  unsigned int v54 = a1;
  uint64_t v16 = v42;
  uint64_t v17 = v43;
  LOBYTE(v48) = 0;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v19 = v45;
  uint64_t v20 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v46, v45, &v48, v44, v45, v18);
  (*(void (**)(char *, void *, uint64_t))(v39 + 32))(v11, v46, v19);
  LOBYTE(v51) = 1;
  unint64_t v22 = sub_100455BA8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v48,  &type metadata for KeySyncMetadata.MetadataType,  &v51,  v20,  &type metadata for KeySyncMetadata.MetadataType,  v22);
  uint64_t v24 = v9;
  v11[*(int *)(v9 + 20)] = v48;
  LOBYTE(v48) = 3;
  uint64_t v25 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v26 = v16;
  os_log_type_t v27 = v47;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v17, &v48, v20, v17, v25);
  uint64_t v28 = v20;
  uint64_t v29 = v41;
  (*(void (**)(char *, void *, uint64_t))(v41 + 32))(&v11[*(int *)(v24 + 28)], v26, v17);
  LOBYTE(v48) = 2;
  unint64_t v30 = sub_100455BEC();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v51,  &type metadata for KeySyncMetadata.IndexInfo,  &v48,  v28,  &type metadata for KeySyncMetadata.IndexInfo,  v30);
  uint64_t v31 = v24;
  uint64_t v32 = v51;
  if (v52)
  {
    if (v52 != 1)
    {
      unint64_t v37 = sub_100455C30();
      uint64_t v38 = swift_allocError(&type metadata for KeySyncMetadata.Error, v37, 0LL, 0LL);
      swift_willThrow(v38);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v27, v44);
      uint64_t v23 = v39;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v45);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(&v11[*(int *)(v31 + 28)], v17);
    }

    uint64_t v33 = v31;
    Class v49 = &type metadata for SecondaryIndex;
    unint64_t v50 = sub_1000868A0();
    *(void *)&__int128 v48 = v32;
    uint64_t v34 = v54;
    uint64_t v35 = v40;
  }

  else
  {
    uint64_t v33 = v31;
    uint64_t v34 = v54;
    uint64_t v35 = v40;
    if ((v53 & 1) != 0)
    {
      Class v49 = &type metadata for PrimaryWildIndex;
      unint64_t v36 = sub_100086928();
    }

    else
    {
      Class v49 = &type metadata for PrimaryIndex;
      unint64_t v36 = sub_1000868E4();
    }

    unint64_t v50 = v36;
    *(void *)&__int128 v48 = v32;
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v27, v44);
  sub_100012EC0(&v48, (uint64_t)&v11[*(int *)(v33 + 24)]);
  sub_100455C74((uint64_t)v11, v35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
  return sub_100455CB8((uint64_t)v11);
}

uint64_t sub_1004558AC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009AE8E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100455B64();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KeySyncMetadata.CodingKeys,  &type metadata for KeySyncMetadata.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v22) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v12, v13);
  if (!v2)
  {
    unint64_t v14 = (int *)type metadata accessor for KeySyncMetadata(0LL);
    LOBYTE(v22) = *(_BYTE *)(v3 + v14[5]);
    char v24 = 1;
    unint64_t v15 = sub_10033FA48();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v24, v5, &type metadata for KeySyncMetadata.MetadataType, v15);
    sub_100013044(v3 + v14[6], (uint64_t)&v22);
    uint64_t v22 = sub_100455D3C(&v22);
    __int16 v23 = v16 & 0x1FF;
    char v24 = 2;
    unint64_t v17 = sub_100455EEC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v24, v5, &type metadata for KeySyncMetadata.IndexInfo, v17);
    uint64_t v18 = v3 + v14[7];
    LOBYTE(v22) = 3;
    uint64_t v19 = type metadata accessor for Date(0LL);
    uint64_t v20 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v22, v5, v19, v20);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100455AE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100455408(a1, a2);
}

uint64_t sub_100455AF8(void *a1)
{
  return sub_1004558AC(a1);
}

uint64_t sub_100455B0C()
{
  return sub_100454B64(*v0);
}

uint64_t type metadata accessor for KeySyncMetadata(uint64_t a1)
{
  uint64_t result = qword_1009AE950;
  if (!qword_1009AE950) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeySyncMetadata);
  }
  return result;
}

uint64_t sub_100455B50(uint64_t result)
{
  else {
    return result;
  }
}

unint64_t sub_100455B64()
{
  unint64_t result = qword_1009AE8C8;
  if (!qword_1009AE8C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802840, &type metadata for KeySyncMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE8C8);
  }

  return result;
}

unint64_t sub_100455BA8()
{
  unint64_t result = qword_1009AE8D0;
  if (!qword_1009AE8D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802818, &type metadata for KeySyncMetadata.MetadataType);
    atomic_store(result, (unint64_t *)&qword_1009AE8D0);
  }

  return result;
}

unint64_t sub_100455BEC()
{
  unint64_t result = qword_1009AE8D8;
  if (!qword_1009AE8D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008027F0, &type metadata for KeySyncMetadata.IndexInfo);
    atomic_store(result, (unint64_t *)&qword_1009AE8D8);
  }

  return result;
}

unint64_t sub_100455C30()
{
  unint64_t result = qword_1009AE8E0;
  if (!qword_1009AE8E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008027B0, &type metadata for KeySyncMetadata.Error);
    atomic_store(result, (unint64_t *)&qword_1009AE8E0);
  }

  return result;
}

uint64_t sub_100455C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeySyncMetadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100455CB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeySyncMetadata(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100455CF4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100934CC0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100455D3C(void *a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A06D8);
  if (swift_dynamicCast(v16, v15, v2, &type metadata for PrimaryIndex, 0LL))
  {
    uint64_t v4 = a1[3];
    uint64_t v3 = a1[4];
    sub_100012ED8(a1, v4);
    dispatch thunk of RawRepresentable.rawValue.getter(&v14, v4, *(void *)(v3 + 56));
    uint64_t v2 = v14;
    uint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    sub_100012ED8(a1, v5);
    sub_1005F5498(v5, v6);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  }

  else
  {
    if ((swift_dynamicCast(v16, v15, v2, &type metadata for PrimaryWildIndex, 0LL) & 1) == 0
      && !swift_dynamicCast(v16, v15, v2, &type metadata for SecondaryIndex, 0LL))
    {
      unint64_t v12 = sub_100455C30();
      uint64_t v13 = swift_allocError(&type metadata for KeySyncMetadata.Error, v12, 0LL, 0LL);
      swift_willThrow(v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v2;
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
    uint64_t v8 = a1[3];
    uint64_t v7 = a1[4];
    sub_100012ED8(a1, v8);
    dispatch thunk of RawRepresentable.rawValue.getter(v15, v8, *(void *)(v7 + 56));
    uint64_t v2 = v15[0];
    uint64_t v9 = a1[3];
    uint64_t v10 = a1[4];
    sub_100012ED8(a1, v9);
    sub_1005F5498(v9, v10);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v2;
}

unint64_t sub_100455EEC()
{
  unint64_t result = qword_1009AE8F0;
  if (!qword_1009AE8F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802788, &type metadata for KeySyncMetadata.IndexInfo);
    atomic_store(result, (unint64_t *)&qword_1009AE8F0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for KeySyncMetadata.Error(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100455F70 + 4 * byte_10080241E[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100455F90 + 4 * byte_100802423[v4]))();
  }
}

_BYTE *sub_100455F70(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100455F90(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100455F98(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100455FA0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100455FA8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100455FB0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.Error()
{
  return &type metadata for KeySyncMetadata.Error;
}

uint64_t initializeBufferWithCopyOfBuffer for KeySyncMetadata.IndexInfo(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for KeySyncMetadata.IndexInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for KeySyncMetadata.IndexInfo( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 10) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 10) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 9) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.IndexInfo()
{
  return &type metadata for KeySyncMetadata.IndexInfo;
}

uint64_t storeEnumTagSinglePayload for KeySyncMetadata.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1004560D4 + 4 * byte_10080242D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100456108 + 4 * byte_100802428[v4]))();
}

uint64_t sub_100456108(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100456110(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100456118LL);
  }
  return result;
}

uint64_t sub_100456124(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10045612CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100456130(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100456138(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.CodingKeys()
{
  return &type metadata for KeySyncMetadata.CodingKeys;
}

void *sub_100456154(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    __int128 v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
    uint64_t v10 = a3[7];
    unint64_t v11 = (char *)a1 + v10;
    unint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
  }

  return a1;
}

uint64_t sub_100456228(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(a1 + *(int *)(a2 + 24)));
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t sub_100456290(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  __int128 v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  return a1;
}

uint64_t sub_100456338(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  sub_1000B5D38((void *)(a1 + a3[6]), (void *)(a2 + a3[6]));
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_1004563D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  __int128 v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_100456470(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(a1 + v7));
  __int128 v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_100456520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10045652C);
}

uint64_t sub_10045652C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 28);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 24) + 24);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_1004565D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004565E4);
}

uint64_t sub_1004565E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
      return result;
    }

    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_10045668C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_1008024F0;
    v5[2] = &unk_100802508;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      void v5[3] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for KeySyncMetadata.MetadataType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_100456770 + 4 * byte_100802437[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1004567A4 + 4 * byte_100802432[v4]))();
}

uint64_t sub_1004567A4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004567AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004567B4LL);
  }
  return result;
}

uint64_t sub_1004567C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004567C8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 8;
  return result;
}

uint64_t sub_1004567CC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004567D4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.MetadataType()
{
  return &type metadata for KeySyncMetadata.MetadataType;
}

unint64_t sub_1004567F4()
{
  unint64_t result = qword_1009AE990;
  if (!qword_1009AE990)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A9708);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009AE990);
  }

  return result;
}

unint64_t sub_100456844()
{
  unint64_t result = qword_1009AE998;
  if (!qword_1009AE998)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802568, &type metadata for KeySyncMetadata.MetadataType);
    atomic_store(result, (unint64_t *)&qword_1009AE998);
  }

  return result;
}

unint64_t sub_10045688C()
{
  unint64_t result = qword_1009AE9A0;
  if (!qword_1009AE9A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008026F8, &type metadata for KeySyncMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE9A0);
  }

  return result;
}

unint64_t sub_1004568D4()
{
  unint64_t result = qword_1009AE9A8;
  if (!qword_1009AE9A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802760, &type metadata for KeySyncMetadata.Error);
    atomic_store(result, (unint64_t *)&qword_1009AE9A8);
  }

  return result;
}

unint64_t sub_10045691C()
{
  unint64_t result = qword_1009AE9B0;
  if (!qword_1009AE9B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802630, &type metadata for KeySyncMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE9B0);
  }

  return result;
}

unint64_t sub_100456964()
{
  unint64_t result = qword_1009AE9B8;
  if (!qword_1009AE9B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802658, &type metadata for KeySyncMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE9B8);
  }

  return result;
}

unint64_t sub_1004569A8()
{
  unint64_t result = qword_1009AE9C0;
  if (!qword_1009AE9C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802590, &type metadata for KeySyncMetadata.MetadataType);
    atomic_store(result, (unint64_t *)&qword_1009AE9C0);
  }

  return result;
}

uint64_t sub_1004569EC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x65756C6156776172LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6156776172LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x65636E6575716573LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6575716573LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x646C69577369LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646C69577369LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100456B38(void *a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AE9C8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100012ED8(a1, v6);
  unint64_t v8 = sub_100456CD0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KeySyncMetadata.IndexInfo.CodingKeys,  &type metadata for KeySyncMetadata.IndexInfo.CodingKeys,  v8,  v6,  v7);
  BYTE1(v15) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v15 + 1, v2);
  char v14 = 1;
  unint64_t v10 = sub_1000ABB0C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v15,  &type metadata for BeaconKeyManager.KeySequence,  &v14,  v2,  &type metadata for BeaconKeyManager.KeySequence,  v10);
  char v13 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v13, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v9;
}

unint64_t sub_100456CD0()
{
  unint64_t result = qword_1009AE9D0;
  if (!qword_1009AE9D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802970, &type metadata for KeySyncMetadata.IndexInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE9D0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for KeySyncMetadata.IndexInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100456D60 + 4 * byte_100802441[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100456D94 + 4 * byte_10080243C[v4]))();
}

uint64_t sub_100456D94(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100456D9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100456DA4LL);
  }
  return result;
}

uint64_t sub_100456DB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100456DB8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100456DBC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100456DC4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.IndexInfo.CodingKeys()
{
  return &type metadata for KeySyncMetadata.IndexInfo.CodingKeys;
}

unint64_t sub_100456DE4()
{
  unint64_t result = qword_1009AE9E0;
  if (!qword_1009AE9E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802948, &type metadata for KeySyncMetadata.IndexInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE9E0);
  }

  return result;
}

unint64_t sub_100456E2C()
{
  unint64_t result = qword_1009AE9E8;
  if (!qword_1009AE9E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008028B8, &type metadata for KeySyncMetadata.IndexInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE9E8);
  }

  return result;
}

unint64_t sub_100456E74()
{
  unint64_t result = qword_1009AE9F0;
  if (!qword_1009AE9F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008028E0, &type metadata for KeySyncMetadata.IndexInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AE9F0);
  }

  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEInitiatePairingCommandPayload()
{
  return &type metadata for AirPodsLEInitiatePairingCommandPayload;
}

__n128 sub_100456EC8@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + swift_weakDestroy(v0 + 16) = result;
  }

  return result;
}

unint64_t sub_100456F10(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100456F3C();
  unint64_t result = sub_100456F80();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100456F3C()
{
  unint64_t result = qword_1009AE9F8;
  if (!qword_1009AE9F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008029E8, &type metadata for AirPodsLEInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009AE9F8);
  }

  return result;
}

unint64_t sub_100456F80()
{
  unint64_t result = qword_1009AEA00;
  if (!qword_1009AEA00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802A10, &type metadata for AirPodsLEInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009AEA00);
  }

  return result;
}

void sub_100456FC4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_100457020()
{
  if (BYTE6(v0) == 32LL) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x100457298LL);
}

uint64_t sub_1004572F8@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100012ED8(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v25, v5, v6);
  uint64_t v7 = v26;
  uint64_t v8 = v27;
  sub_100037298((uint64_t)v25, v26);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32LL, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    uint64_t v13 = v26;
    uint64_t v14 = v27;
    sub_100037298((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(113LL, v13, v14);
    uint64_t v33 = v15;
    uint64_t v17 = v26;
    uint64_t v16 = v27;
    sub_100037298((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(32LL, v17, v16);
    uint64_t v18 = v26;
    uint64_t v19 = v27;
    sub_100037298((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(96LL, v18, v19);
    uint64_t v20 = v26;
    uint64_t v21 = v27;
    sub_100037298((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v20, v21);
    sub_100456FC4(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    __int128 v23 = v31;
    a2[2] = v30;
    a2[3] = v23;
    a2[4] = v32;
    __int128 v24 = v29;
    *a2 = v28;
    a2[1] = v24;
  }

  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse()
{
  return &type metadata for FetchDevicesResponse;
}

uint64_t sub_100457510(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AEA30);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  unint64_t v10 = sub_100457AC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FetchDevicesResponse.CodingKeys,  &type metadata for FetchDevicesResponse.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_100004AEC(&qword_1009AEA18);
  uint64_t v12 = sub_100457B48( &qword_1009AEA38,  (void (*)(void))sub_100457BB0,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10045762C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v9 = sub_100004AEC(&qword_1009AEA70);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_1004580E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FetchDevicesResponse.Device.CodingKeys,  &type metadata for FetchDevicesResponse.Device.CodingKeys,  v15,  v14,  v13);
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v20, v9);
  if (!v5)
  {
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v19, v9);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100457754()
{
  return 0x73656369766564LL;
}

uint64_t sub_10045776C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x73656369766564LL && a2 == 0xE700000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE700000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564LL, 0xE700000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100457800(uint64_t a1)
{
  unint64_t v2 = sub_100457AC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100457828(uint64_t a1)
{
  unint64_t v2 = sub_100457AC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100457850@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10045797C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100457878(void *a1)
{
  return sub_100457510(a1, *v1);
}

uint64_t sub_100457890()
{
  if (*v0) {
    return 1684628597LL;
  }
  else {
    return 0x444955556162LL;
  }
}

uint64_t sub_1004578C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100457E64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004578E4(uint64_t a1)
{
  unint64_t v2 = sub_1004580E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10045790C(uint64_t a1)
{
  unint64_t v2 = sub_1004580E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100457934@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100457F3C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_100457960(void *a1)
{
  return sub_10045762C(a1, *v1, v1[1], v1[2], v1[3]);
}

void *sub_10045797C(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009AEA08);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100012ED8(a1, v7);
  unint64_t v10 = sub_100457AC0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FetchDevicesResponse.CodingKeys,  &type metadata for FetchDevicesResponse.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = sub_100004AEC(&qword_1009AEA18);
    uint64_t v12 = sub_100457B48( &qword_1009AEA20,  (void (*)(void))sub_100457B04,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v16;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v9;
}

unint64_t sub_100457AC0()
{
  unint64_t result = qword_1009AEA10;
  if (!qword_1009AEA10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802C04, &type metadata for FetchDevicesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AEA10);
  }

  return result;
}

unint64_t sub_100457B04()
{
  unint64_t result = qword_1009AEA28;
  if (!qword_1009AEA28)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802BDC, &type metadata for FetchDevicesResponse.Device);
    atomic_store(result, (unint64_t *)&qword_1009AEA28);
  }

  return result;
}

uint64_t sub_100457B48(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100004B78(&qword_1009AEA18);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100457BB0()
{
  unint64_t result = qword_1009AEA40;
  if (!qword_1009AEA40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802BB4, &type metadata for FetchDevicesResponse.Device);
    atomic_store(result, (unint64_t *)&qword_1009AEA40);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FetchDevicesResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100457C34 + 4 * byte_100802A60[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100457C54 + 4 * byte_100802A65[v4]))();
  }
}

_BYTE *sub_100457C34(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100457C54(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100457C5C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100457C64(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100457C6C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100457C74(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse.CodingKeys()
{
  return &type metadata for FetchDevicesResponse.CodingKeys;
}

void *initializeWithCopy for FetchDevicesResponse.Device(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for FetchDevicesResponse.Device(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for FetchDevicesResponse.Device(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse.Device()
{
  return &type metadata for FetchDevicesResponse.Device;
}

unint64_t sub_100457D90()
{
  unint64_t result = qword_1009AEA48;
  if (!qword_1009AEA48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802B8C, &type metadata for FetchDevicesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AEA48);
  }

  return result;
}

unint64_t sub_100457DD8()
{
  unint64_t result = qword_1009AEA50;
  if (!qword_1009AEA50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802AFC, &type metadata for FetchDevicesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AEA50);
  }

  return result;
}

unint64_t sub_100457E20()
{
  unint64_t result = qword_1009AEA58;
  if (!qword_1009AEA58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802B24, &type metadata for FetchDevicesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AEA58);
  }

  return result;
}

uint64_t sub_100457E64(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x444955556162LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444955556162LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1684628597 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1684628597LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100457F3C(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009AEA60);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_1004580E8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FetchDevicesResponse.Device.CodingKeys,  &type metadata for FetchDevicesResponse.Device.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    char v16 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    char v15 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    uint64_t v13 = v12;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v13);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return v8;
}

unint64_t sub_1004580E8()
{
  unint64_t result = qword_1009AEA68;
  if (!qword_1009AEA68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802D0C, &type metadata for FetchDevicesResponse.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AEA68);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FetchDevicesResponse.Device.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100458178 + 4 * byte_100802A6F[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004581AC + 4 * byte_100802A6A[v4]))();
}

uint64_t sub_1004581AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004581B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004581BCLL);
  }
  return result;
}

uint64_t sub_1004581C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004581D0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1004581D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004581DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse.Device.CodingKeys()
{
  return &type metadata for FetchDevicesResponse.Device.CodingKeys;
}

unint64_t sub_1004581FC()
{
  unint64_t result = qword_1009AEA78;
  if (!qword_1009AEA78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802CE4, &type metadata for FetchDevicesResponse.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AEA78);
  }

  return result;
}

unint64_t sub_100458244()
{
  unint64_t result = qword_1009AEA80;
  if (!qword_1009AEA80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802C54, &type metadata for FetchDevicesResponse.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AEA80);
  }

  return result;
}

unint64_t sub_10045828C()
{
  unint64_t result = qword_1009AEA88;
  if (!qword_1009AEA88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802C7C, &type metadata for FetchDevicesResponse.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AEA88);
  }

  return result;
}

ValueMetadata *type metadata accessor for PowerStateMonitoriOS()
{
  return &type metadata for PowerStateMonitoriOS;
}

uint64_t sub_1004582E0()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x7669746341435058LL,  0xEB00000000797469LL);
  qword_100A2AA98 = result;
  return result;
}

uint64_t sub_100458354()
{
  uint64_t v1 = type metadata accessor for XPCActivity();
  uint64_t v3 = sub_100015C48( &qword_1009AED00,  v2,  (uint64_t (*)(uint64_t))type metadata accessor for XPCActivity,  (uint64_t)&unk_100802F88);
  v4._countAndFlagsBits = CustomDebugStringConvertible.typeDescription.getter(v1, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250LL;
  v5._object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = CustomDebugStringConvertible<>.addressDescription.getter(v1, v3);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 23328LL;
  v7._object = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  uint64_t v9 = *(void *)(v0 + 24);
  uint64_t v8 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain(v8);
  v10._countAndFlagsBits = v9;
  v10._object = v8;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 15965LL;
  v11._object = (void *)0xE200000000000000LL;
  String.append(_:)(v11);
  return 60LL;
}

uint64_t sub_100458460(void *a1)
{
  uint64_t v2 = String.utf8CString.getter(a1[3], a1[4]);
  xpc_activity_unregister((const char *)(v2 + 32));
  swift_release(v2);
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[13];
  a1[12] = 0LL;
  a1[13] = 0LL;
  sub_10002214C(v3, v4);
  uint64_t v5 = swift_unknownObjectWeakAssign(a1 + 10, 0LL);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  if (qword_10099B4A8 != -1) {
    swift_once(&qword_10099B4A8, sub_1004582E0);
  }
  uint64_t v7 = qword_100A2AA98;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  char v15 = a1;
  uint64_t v10 = type metadata accessor for XPCActivity();
  swift_retain();
  uint64_t v11 = String.init<A>(describing:)(&v15, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1000226F4();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: Unregistered criteria", 33LL, 2LL, v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10045859C(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B4A8 != -1) {
    swift_once(&qword_10099B4A8, sub_1004582E0);
  }
  uint64_t v3 = qword_100A2AA98;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  __int128 v24 = (_xpc_activity_s *)a1;
  uint64_t v6 = type metadata accessor for XPCActivity();
  swift_retain();
  uint64_t v7 = String.init<A>(describing:)(&v24, v6);
  uint64_t v9 = v8;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v10 = sub_1000226F4();
  *(void *)(v5 + 64) = v10;
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "%{public}@: updateCriteria called on XPCActivity", 48LL, 2LL, v5);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AECA0);
  uint64_t v12 = OS_dispatch_queue.sync<A>(execute:)(sub_10045B024, a1, v11);
  uint64_t v13 = v24;
  if (v24)
  {
    sub_100458F20(v24);
    return swift_unknownObjectRelease(v13);
  }

  else
  {
    int v15 = *(unsigned __int8 *)(a1 + 88);
    uint64_t v16 = static os_log_type_t.default.getter(v12);
    uint64_t v17 = qword_100A2AA98;
    uint64_t v18 = swift_allocObject(v4, 112LL, 7LL);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    __int128 v24 = (_xpc_activity_s *)a1;
    swift_retain();
    uint64_t v19 = String.init<A>(describing:)(&v24, v6);
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = v10;
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v20;
    uint64_t v22 = *(void *)(a1 + 24);
    uint64_t v21 = *(void *)(a1 + 32);
    *(void *)(v18 + 96) = &type metadata for String;
    *(void *)(v18 + 104) = v10;
    *(void *)(v18 + 72) = v22;
    *(void *)(v18 + 80) = v21;
    *(void *)&double v23 = swift_bridgeObjectRetain(v21).n128_u64[0];
    if (v15 == 1)
    {
      os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  v17,  "%{public}@: No current activity -- re-registering: %{public}@",  61LL,  2LL,  v18,  v23);
      swift_bridgeObjectRelease();
      return sub_1004589C8();
    }

    else
    {
      os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  v17,  "%{public}@: No current activity -- hasn't checked in yet: %{public}@",  68LL,  2LL,  v18,  v23);
      return swift_bridgeObjectRelease();
    }
  }

BOOL sub_100458824()
{
  return sub_10045885C((uint64_t)sub_10045C0D4, 3LL, "%{public}@: defer called on invalidated XPCActivity", 51LL);
}

BOOL sub_100458840()
{
  return sub_10045885C((uint64_t)sub_10045C0D4, 5LL, "%{public}@: done called on invalidated XPCActivity", 50LL);
}

BOOL sub_10045885C(uint64_t a1, xpc_activity_state_t a2, const char *a3, uint64_t a4)
{
  uint64_t v9 = v4;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AECA0);
  uint64_t v11 = OS_dispatch_queue.sync<A>(execute:)(a1, v4, v10);
  if (activity)
  {
    BOOL v12 = xpc_activity_set_state(activity, a2);
    swift_unknownObjectRelease(activity);
  }

  else
  {
    uint64_t v13 = static os_log_type_t.error.getter(v11);
    if (qword_10099B4A8 != -1) {
      swift_once(&qword_10099B4A8, sub_1004582E0);
    }
    uint64_t v14 = qword_100A2AA98;
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
    *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    xpc_activity_t activity = v9;
    uint64_t v17 = type metadata accessor for XPCActivity();
    swift_retain();
    uint64_t v18 = String.init<A>(describing:)(&activity, v17);
    uint64_t v20 = v19;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_1000226F4();
    *(void *)(v16 + 32) = v18;
    *(void *)(v16 + 40) = v20;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, a3, a4, 2LL, v16);
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v12;
}

uint64_t sub_1004589C8()
{
  uint64_t v1 = v0;
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  uint64_t aBlock = 0x7365547265646E75LL;
  unint64_t v8 = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v13, &aBlock, sub_10000A71C, 0LL, &type metadata for Bool);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    uint64_t v3 = *(dispatch_queue_s **)(v0 + 16);
    uint64_t v4 = swift_allocObject(&unk_10095BD40, 32LL, 7LL);
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = sub_10045BBF8;
    *(void *)(v4 + 24) = v1;
    uint64_t v11 = sub_100154688;
    uint64_t v12 = v4;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v8 = 1107296256LL;
    uint64_t v9 = sub_100025BD4;
    uint64_t v10 = &unk_10095BD58;
    uint64_t v5 = _Block_copy(&aBlock);
    uint64_t v6 = v12;
    swift_retain();
    swift_retain();
    swift_release(v6);
    dispatch_sync(v3, v5);
    _Block_release(v5);
    LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v4, "", 90LL, 147LL, 20LL, 1LL);
    swift_release(v1);
    uint64_t result = swift_release(v4);
  }

  return result;
}

uint64_t sub_100458B50(void *a1)
{
  uint64_t v2 = swift_allocObject(&unk_10095BD90, 24LL, 7LL);
  swift_weakInit(v2 + 16, a1);
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[13];
  a1[12] = sub_10045BC34;
  a1[13] = v2;
  swift_retain();
  sub_10002214C(v3, v4);
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  v11[4] = sub_10045BC34;
  uint64_t v12 = v2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = sub_1005C8C50;
  v11[3] = &unk_10095BDA8;
  uint64_t v7 = _Block_copy(v11);
  uint64_t v8 = v12;
  swift_retain();
  swift_release(v8);
  uint64_t v9 = String.utf8CString.getter(v6, v5);
  xpc_activity_register((const char *)(v9 + 32), XPC_ACTIVITY_CHECK_IN, v7);
  swift_release(v9);
  _Block_release(v7);
  return swift_release(v2);
}

uint64_t sub_100458C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v5);
    static Transaction.named<A>(_:with:)("XPCActivity", 11LL, 2LL, sub_10045BC3C);
    return swift_release(v4);
  }

  return result;
}

uint64_t sub_100458D24(uint64_t a1, xpc_activity_t activity, _xpc_activity_s *a3)
{
  uint64_t v25 = a1;
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  unint64_t v6 = sub_10045B4D0(state);
  unsigned int v24 = static os_log_type_t.default.getter(v6);
  if (qword_10099B4A8 != -1) {
    swift_once(&qword_10099B4A8, sub_1004582E0);
  }
  uint64_t v7 = qword_100A2AA98;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 152LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  xpc_activity_t v26 = a3;
  uint64_t v10 = type metadata accessor for XPCActivity();
  swift_retain();
  uint64_t v11 = String.init<A>(describing:)(&v26, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v14 = sub_1000226F4();
  *(void *)(v9 + 64) = v14;
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  xpc_activity_t v26 = activity;
  swift_unknownObjectRetain(activity);
  uint64_t v15 = sub_100004AEC(&qword_1009AECF8);
  uint64_t v16 = String.init<A>(describing:)(&v26, v15);
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v14;
  *(void *)(v9 + 72) = v16;
  *(void *)(v9 + 80) = v17;
  LOBYTE(v26) = v6;
  uint64_t v18 = String.init<A>(describing:)(&v26, &type metadata for XPCActivity.State);
  *(void *)(v9 + 136) = &type metadata for String;
  *(void *)(v9 + sub_100454668(v0 + 144) = v14;
  *(void *)(v9 + 112) = v18;
  *(void *)(v9 + 120) = v19;
  os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  v7,  "%{public}@: activityHandler() for %{public}@ -- state: %{public}@",  65LL,  2LL,  v9);
  uint64_t v20 = swift_bridgeObjectRelease();
  if (!(_BYTE)v6)
  {
    __chkstk_darwin(v20);
    v23[2] = a3;
    v23[3] = activity;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10045BC54,  v23,  v21,  (char *)&type metadata for () + 8,  &type metadata for XPCActivity.State);
    unint64_t v6 = v26;
  }

  return (*((uint64_t (**)(_xpc_activity_s *, uint64_t, unint64_t))a3 + 8))(a3, v25, v6);
}

unint64_t sub_100458F20(_xpc_activity_s *a1)
{
  void (*v8)(void *__return_ptr, _OWORD *);
  uint64_t v9;
  dispatch_queue_s *v10;
  void *v11;
  _xpc_activity_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  xpc_object_t v26;
  xpc_activity_state_t state;
  dispatch_queue_s *v29;
  void *v30;
  _xpc_activity_s *v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  uint64_t (*v68)();
  __int128 aBlock;
  __int128 v70;
  uint64_t (*v71)();
  _xpc_activity_s *v72;
  uint64_t v73[5];
  void v74[5];
  __int128 v75;
  __int128 v76;
  uint64_t (*v77)();
  _OWORD v78[2];
  uint64_t v79;
  _OWORD v80[4];
  uint64_t v3 = v1;
  uint64_t v4 = a1;
  xpc_object_t v5 = xpc_activity_copy_criteria(a1);
  if (!v5) {
    goto LABEL_4;
  }
  xpc_object_t v6 = v5;
  uint64_t v7 = (void *)swift_unknownObjectRetain(v5);
  sub_10045B360(v7, v73);
  sub_1004544EC((uint64_t)v73, (uint64_t)v78);
  if (LOBYTE(v78[0]) != 2LL)
  {
    v80[0] = v78[0];
    v80[1] = v78[1];
    *(void *)&v80[2] = v79;
    (*(void (**)(void *__return_ptr, uint64_t *))(v1 + 48))(v74, v73);
    sub_1004544EC((uint64_t)v74, (uint64_t)&v75);
    if (v75 == 2LL)
    {
      __int128 v29 = *(dispatch_queue_s **)(v1 + 16);
      uint64_t v4 = (_xpc_activity_s *)swift_allocObject(&unk_10095BCF0, 32LL, 7LL);
      *((void *)v4 + 2) = sub_10020D094;
      *((void *)v4 + 3) = v3;
      uint64_t v71 = sub_100154688;
      uint64_t v72 = v4;
      *(void *)&uint64_t aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      *(void *)&uint64_t v70 = sub_100025BD4;
      *((void *)&v70 + 1) = &unk_10095BD08;
      __int128 v30 = _Block_copy(&aBlock);
      __int128 v31 = v72;
      swift_retain();
      swift_retain();
      swift_release(v31);
      dispatch_sync(v29, v30);
      _Block_release(v30);
      LOBYTE(v29) = swift_isEscapingClosureAtFileLocation(v4, "", 90LL, 53LL, 20LL, 1LL);
      swift_unknownObjectRelease(v6);
      swift_release(v3);
      swift_release(v4);
      __break(1u);
    }

    else
    {
      uint64_t aBlock = v75;
      uint64_t v70 = v76;
      uint64_t v71 = v77;
      __int128 v32 = sub_10045AC58((uint64_t)&aBlock, (uint64_t)v80);
      uint64_t v33 = v32;
      uint64_t v34 = static os_log_type_t.default.getter(v32);
      uint64_t v2 = v34;
      if (!v33)
      {
        uint64_t v65 = v34;
        if (qword_10099B4A8 != -1) {
          swift_once(&qword_10099B4A8, sub_1004582E0);
        }
        uint64_t v64 = qword_100A2AA98;
        uint64_t v45 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v46 = swift_allocObject(v45, 112LL, 7LL);
        *(_OWORD *)(v46 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
        *(void *)&uint64_t v66 = v1;
        unint64_t v47 = type metadata accessor for XPCActivity();
        swift_retain();
        __int128 v48 = String.init<A>(describing:)(&v66, v47);
        unint64_t v50 = v49;
        *(void *)(v46 + 56) = &type metadata for String;
        uint64_t v51 = sub_1000226F4();
        *(void *)(v46 + 64) = v51;
        *(void *)(v46 + 32) = v48;
        *(void *)(v46 + 40) = v50;
        uint64_t v66 = v80[0];
        uint64_t v67 = v80[1];
        uint64_t v68 = *(uint64_t (**)())&v80[2];
        char v52 = String.init<A>(describing:)(&v66, &type metadata for XPCActivity.Criteria);
        *(void *)(v46 + 96) = &type metadata for String;
        *(void *)(v46 + 104) = v51;
        *(void *)(v46 + 72) = v52;
        *(void *)(v46 + 80) = v53;
        os_log(_:dso:log:_:_:)( v65,  &_mh_execute_header,  v64,  "%{public}@: Existing criteria: %{public}@",  41LL,  2LL,  v46);
        unsigned int v54 = swift_bridgeObjectRelease();
        uint64_t v55 = static os_log_type_t.default.getter(v54);
        uint64_t v56 = qword_100A2AA98;
        uint64_t v57 = swift_allocObject(v45, 112LL, 7LL);
        *(_OWORD *)(v57 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
        *(void *)&uint64_t v66 = v3;
        swift_retain();
        uint64_t v58 = String.init<A>(describing:)(&v66, v47);
        *(void *)(v57 + 56) = &type metadata for String;
        *(void *)(v57 + 64) = v51;
        *(void *)(v57 + 32) = v58;
        *(void *)(v57 + 40) = v59;
        uint64_t v66 = aBlock;
        uint64_t v67 = v70;
        uint64_t v68 = v71;
        uint64_t v60 = String.init<A>(describing:)(&v66, &type metadata for XPCActivity.Criteria);
        *(void *)(v57 + 96) = &type metadata for String;
        *(void *)(v57 + 104) = v51;
        *(void *)(v57 + 72) = v60;
        *(void *)(v57 + 80) = v61;
        os_log(_:dso:log:_:_:)( v55,  &_mh_execute_header,  v56,  "%{public}@: Registering updated criteria: %{public}@",  52LL,  2LL,  v57);
        swift_bridgeObjectRelease();
        sub_100459604();
        uint64_t v63 = v62;
        xpc_activity_set_criteria(v4, v62);
        swift_unknownObjectRelease(v63);
        xpc_activity_t v26 = v6;
        goto LABEL_10;
      }

      if (qword_10099B4A8 == -1) {
        goto LABEL_16;
      }
    }

    swift_once(&qword_10099B4A8, sub_1004582E0);
LABEL_16:
    uint64_t v35 = qword_100A2AA98;
    unint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099D740);
    unint64_t v37 = swift_allocObject(v36, 112LL, 7LL);
    *(_OWORD *)(v37 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)&uint64_t v66 = v3;
    uint64_t v38 = type metadata accessor for XPCActivity();
    swift_retain();
    uint64_t v39 = String.init<A>(describing:)(&v66, v38);
    uint64_t v41 = v40;
    *(void *)(v37 + 56) = &type metadata for String;
    NSString v42 = sub_1000226F4();
    *(void *)(v37 + 64) = v42;
    *(void *)(v37 + 32) = v39;
    *(void *)(v37 + 40) = v41;
    uint64_t v66 = v80[0];
    uint64_t v67 = v80[1];
    uint64_t v68 = *(uint64_t (**)())&v80[2];
    uint64_t v43 = String.init<A>(describing:)(&v66, &type metadata for XPCActivity.Criteria);
    *(void *)(v37 + 96) = &type metadata for String;
    *(void *)(v37 + 104) = v42;
    *(void *)(v37 + 72) = v43;
    *(void *)(v37 + 80) = v44;
    os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  v35,  "%{public}@: Keeping existing criteria for: %{public}@",  53LL,  2LL,  v37);
    swift_bridgeObjectRelease();
    xpc_activity_t v26 = v6;
LABEL_10:
    swift_unknownObjectRelease(v26);
    xpc_activity_state_t state = xpc_activity_get_state(v4);
    return sub_10045B4D0(state);
  }

  swift_unknownObjectRelease(v6);
LABEL_4:
  uint64_t v8 = *(void (**)(void *__return_ptr, _OWORD *))(v1 + 48);
  *(void *)&v80[0] = 2LL;
  memset((char *)v80 + 8, 0, 32);
  v8(v74, v80);
  uint64_t v9 = sub_1004544EC((uint64_t)v74, (uint64_t)&v75);
  if (v75 != 2LL)
  {
LABEL_7:
    uint64_t aBlock = v75;
    uint64_t v70 = v76;
    uint64_t v71 = v77;
    uint64_t v13 = static os_log_type_t.default.getter(v9);
    if (qword_10099B4A8 != -1) {
      swift_once(&qword_10099B4A8, sub_1004582E0);
    }
    unint64_t v14 = qword_100A2AA98;
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v16 = swift_allocObject(v15, 112LL, 7LL);
    *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)&uint64_t v66 = v3;
    uint64_t v17 = type metadata accessor for XPCActivity();
    swift_retain();
    uint64_t v18 = String.init<A>(describing:)(&v66, v17);
    uint64_t v20 = v19;
    *(void *)(v16 + 56) = &type metadata for String;
    uint64_t v21 = sub_1000226F4();
    *(void *)(v16 + 64) = v21;
    *(void *)(v16 + 32) = v18;
    *(void *)(v16 + 40) = v20;
    uint64_t v66 = aBlock;
    uint64_t v67 = v70;
    uint64_t v68 = v71;
    uint64_t v22 = String.init<A>(describing:)(&v66, &type metadata for XPCActivity.Criteria);
    *(void *)(v16 + 96) = &type metadata for String;
    *(void *)(v16 + 104) = v21;
    *(void *)(v16 + 72) = v22;
    *(void *)(v16 + 80) = v23;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "%{public}@: Registering new criteria: %@", 40LL, 2LL, v16);
    swift_bridgeObjectRelease();
    sub_100459604();
    uint64_t v25 = v24;
    xpc_activity_set_criteria(v4, v24);
    xpc_activity_t v26 = v25;
    goto LABEL_10;
  }

  uint64_t v10 = *(dispatch_queue_s **)(v1 + 16);
  uint64_t v4 = (_xpc_activity_s *)swift_allocObject(&unk_10095BCA0, 32LL, 7LL);
  *((void *)v4 + 2) = sub_10020D094;
  *((void *)v4 + 3) = v3;
  uint64_t v71 = sub_100095030;
  uint64_t v72 = v4;
  *(void *)&uint64_t aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  *(void *)&uint64_t v70 = sub_100025BD4;
  *((void *)&v70 + 1) = &unk_10095BCB8;
  uint64_t v11 = _Block_copy(&aBlock);
  uint64_t v12 = v72;
  swift_retain();
  swift_retain();
  swift_release(v12);
  dispatch_sync(v10, v11);
  _Block_release(v11);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v4, "", 90LL, 53LL, 20LL, 1LL);
  swift_release(v3);
  uint64_t v9 = swift_release(v4);
  if ((v10 & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  return 6LL;
}

void sub_100459604()
{
  xpc_object_t v1 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v2 = v1;
  uint64_t v3 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
  if (!*(_BYTE *)v0) {
    uint64_t v3 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
  }
  xpc_dictionary_set_string(v1, XPC_ACTIVITY_PRIORITY, *v3);
  int v4 = *(unsigned __int8 *)(v0 + 1);
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REPEATING, *(_BYTE *)(v0 + 1));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_DELAY, *(void *)(v0 + 8));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_GRACE_PERIOD, *(void *)(v0 + 16));
  if (v4 == 1) {
    xpc_dictionary_set_int64(v2, XPC_ACTIVITY_INTERVAL, *(void *)(v0 + 24));
  }
  uint64_t v5 = *(void *)(v0 + 32);
  if ((v5 & 1) != 0)
  {
    if (!XPC_ACTIVITY_POWER_NAP)
    {
      __break(1u);
      goto LABEL_48;
    }

    xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_POWER_NAP, 1);
  }

  if ((v5 & 4) == 0) {
    goto LABEL_11;
  }
  if (!XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY, 1);
LABEL_11:
  if ((v5 & 2) == 0) {
    goto LABEL_14;
  }
  if (!XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_SHOULD_WAKE_DEVICE, 1);
LABEL_14:
  if ((v5 & 8) == 0) {
    goto LABEL_17;
  }
  if (!XPC_ACTIVITY_USES_DUET_POWER_BUDGETING)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_USES_DUET_POWER_BUDGETING, 1);
LABEL_17:
  if ((v5 & 0x10) == 0) {
    goto LABEL_20;
  }
  if (!XPC_ACTIVITY_REQUIRES_CLASS_A)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRES_CLASS_A, 1);
LABEL_20:
  if ((v5 & 0x20) == 0) {
    goto LABEL_23;
  }
  if (!XPC_ACTIVITY_REQUIRES_CLASS_B)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
LABEL_23:
  if ((v5 & 0x40) == 0) {
    goto LABEL_26;
  }
  if (!XPC_ACTIVITY_REQUIRES_CLASS_C)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
LABEL_26:
  if ((v5 & 0x80) == 0) {
    goto LABEL_29;
  }
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }

  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
LABEL_29:
  if ((v5 & 0x100) == 0) {
    goto LABEL_32;
  }
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }

  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
LABEL_32:
  if ((v5 & 0x2000) == 0) {
    goto LABEL_35;
  }
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v6, "DataBudgetName", "com.apple.dasd.baCellular");
  if (!XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  xpc_dictionary_set_value(v2, XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA, v6);
  swift_unknownObjectRelease(v6);
LABEL_35:
  if ((v5 & 0x200) != 0) {
    xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  }
  if ((v5 & 0x400) != 0)
  {
    if (XPC_ACTIVITY_MEMORY_INTENSIVE)
    {
      xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_MEMORY_INTENSIVE, 1);
      goto LABEL_40;
    }

uint64_t sub_1004598FC()
{
  uint64_t result = String.init(cString:)(XPC_ACTIVITY_PRIORITY_UTILITY);
  qword_1009AEA90 = result;
  *(void *)algn_1009AEA98 = v1;
  return result;
}

uint64_t sub_100459928(char *a1, char *a2)
{
  return sub_1003093FC(*a1, *a2);
}

Swift::Int sub_100459934()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v2 = 0x7974696C697475LL;
  }
  if (v1) {
    unint64_t v3 = 0xEB0000000065636ELL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1004599BC(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v2 = 0x7974696C697475LL;
  }
  if (*v1) {
    unint64_t v3 = 0xEB0000000065636ELL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100459A20(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v3 = 0x7974696C697475LL;
  }
  if (v2) {
    unint64_t v4 = 0xEB0000000065636ELL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100459AA4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009349E8, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_100459B00(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7974696C697475LL;
  if (*v1) {
    uint64_t v2 = 0x616E65746E69616DLL;
  }
  unint64_t v3 = 0xE700000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xEB0000000065636ELL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100459B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10045C090();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100459BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10045C090();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100459BF0()
{
  if (*v0) {
    return 0x6E65746E69616D2ELL;
  }
  else {
    return 0x7974696C6974752ELL;
  }
}

uint64_t sub_100459C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10045B054();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100459C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10045B054();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100459CDC(__int16 a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }

  uint64_t v2 = sub_1004C4120(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  Swift::Int v5 = &v2[2 * v4];
  void v5[4] = 0x614E7265776F702ELL;
  v5[5] = 0xE900000000000070LL;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    uint64_t v8 = &v2[2 * v7];
    v8[4] = 0x766544656B61772ELL;
    v8[5] = 0xEB00000000656369LL;
  }

LABEL_76:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  unint64_t v40 = v2[2];
  unint64_t v39 = v2[3];
  if (v40 >= v39 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v39 > 1), v40 + 1, 1, v2);
  }
  v2[2] = v40 + 1;
  uint64_t v41 = (char *)&v2[2 * v40];
  strcpy(v41 + 32, ".diskIntensive");
  v41[47] = -18;
  if ((a1 & 0x2000) == 0)
  {
LABEL_34:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_86;
  }

  v16(v8, v1);
  v16(v49, v1);
  dispatch_group_leave(v81);
  return swift_errorRelease(v19);
}

  CKRecordKeyValueSetting.subscript.getter( &v139,  0x4C79726574746162LL,  0xEC0000006C657665LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  uint64_t v108 = *(unsigned __int8 *)(v90 + v93[19]);
  if ((BYTE8(v139) & 1) != 0 || (void)v139 != v108)
  {
    *((void *)&v140 + 1) = &type metadata for Int;
    uint64_t v141 = &protocol witness table for Int;
    *(void *)&uint64_t v139 = v108;
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x4C79726574746162LL, 0xEC0000006C657665LL, ObjectType);
  }

  if (v105 <= 0xE)
  {
    sub_10001736C(v101, (unint64_t)v104);
    CKRecordKeyValueSetting.subscript.getter( &v139,  0x6553646572616873LL,  0xED00003274657263LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
    uint64_t v112 = v139;
    if (*((void *)&v139 + 1) >> 60 == 15LL)
    {
      sub_10001736C(v101, (unint64_t)v104);
      sub_1000182F0(v112, *((unint64_t *)&v112 + 1));
      sub_1000182F0(v101, (unint64_t)v104);
    }

    else
    {
      sub_100018BE4(v101, (unint64_t)v104);
      sub_100018BE4(v112, *((unint64_t *)&v112 + 1));
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v112, *((uint64_t *)&v112 + 1));
      uint64_t v114 = v113;
      sub_1000182F0(v101, (unint64_t)v104);
      sub_1000182F0(v112, *((unint64_t *)&v112 + 1));
      sub_1000182F0(v112, *((unint64_t *)&v112 + 1));
      if ((v114 & 1) != 0)
      {
LABEL_86:
        sub_1000182F0(v101, (unint64_t)v104);
        goto LABEL_87;
      }
    }

    *((void *)&v140 + 1) = &type metadata for Data;
    uint64_t v141 = &protocol witness table for Data;
    *(void *)&uint64_t v139 = v101;
    *((void *)&v139 + 1) = v104;
    sub_100018BE4(v101, (unint64_t)v104);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x6553646572616873LL, 0xED00003274657263LL, ObjectType);
    goto LABEL_86;
  }

  uint64_t v109 = String._bridgeToObjectiveC()();
  uint64_t v110 = [v26 objectForKeyedSubscript:v109];
  swift_unknownObjectRelease(v110);

  if (v110)
  {
    uint64_t v111 = String._bridgeToObjectiveC()();
    [v26 setObject:0 forKeyedSubscript:v111];
  }

LABEL_91:
  uint64_t v48 = sub_100004AEC(&qword_1009AED50);
  uint64_t v49 = sub_1000372EC( (unint64_t *)&qword_1009A0500,  &qword_1009AED50,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v50 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v48, v49);
  char v52 = v51;
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = v50;
  v53._object = v52;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 93LL;
  v54._object = (void *)0xE100000000000000LL;
  String.append(_:)(v54);
  return 91LL;
}

  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

        swift_task_dealloc(v81);
        uint64_t v35 = v0 + 528;
        unint64_t v9 = v120;
        unint64_t v30 = v112;
      }

      swift_task_dealloc(v79);
      swift_task_dealloc(v121);
      uint64_t v89 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v9);
      v127(v30, isUniquelyReferenced_nonNull_native);
      swift_task_dealloc(v30);
      uint64_t v50 = __OFADD__(v89, v122);
      Swift::Int v5 = v89 + v122;
      if (v50) {
        goto LABEL_117;
      }
      *(void *)(v0 + 744) = &type metadata for Int64;
      *(void *)(v0 + 752) = sub_10001563C();
      *(void *)(v0 + 720) = v5;
      *(_BYTE *)(v0 + 760) = 2;
      sub_10006A2FC(v0 + 720, v35);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v124);
      uint64_t v2 = (void *)(v0 + 192);
      unint64_t v9 = 3LL;
      goto LABEL_94;
    }

    char v52 = *(double *)(v0 + 240);
    unint64_t v25 = v0 + 432;
    sub_10006A2C0(v135, (uint64_t)v115);
    if (*(_BYTE *)(v0 + 472) != 3)
    {
LABEL_110:
      swift_bridgeObjectRelease();
      sub_100728A70(v25);
      unsigned int v102 = sub_100728AB0();
      unsigned int v103 = swift_allocError(&type metadata for AnalyticsEvent.AnalyticsEventError, v102, 0LL, 0LL);
      swift_willThrow(v103);
      sub_100728A70(v135);
      sub_10073AD08(v2);
      swift_release();
      Class v101 = *(uint64_t (**)(void))(v0 + 8);
      return v101();
    }

    sub_100012EC0(v115, (uint64_t)v113);
    Swift::String v53 = *(void *)(v0 + 832);
    Swift::String v54 = *(void *)(v0 + 840);
    uint64_t v55 = sub_100012ED8(v113, v53);
    uint64_t v56 = *(void *)(v53 - 8);
    uint64_t v57 = swift_task_alloc((*(void *)(v56 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v58 = *(void (**)(uint64_t, void *, uint64_t))(v56 + 16);
    uint64_t v2 = (void *)(v0 + 192);
    v58(v57, v55, v53);
    uint64_t v59 = sub_1000156C8();
    BinaryFloatingPoint.init<A>(_:)(v57, &type metadata for Double, v53, v59, v54);
    swift_task_dealloc(v57);
    uint64_t v60 = v52 + *(double *)(v0 + 944);
    *(void *)(v0 + 408) = &type metadata for Double;
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v59;
    unint64_t v9 = 3LL;
    *(double *)(v0 + 384) = v60;
    *(_BYTE *)(v0 + 424) = 3;
    uint64_t v35 = v0 + 528;
    sub_10006A2FC(v0 + 384, v134);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
LABEL_94:
    swift_beginAccess(v8, v130, 33LL, 0LL);
    sub_10006A2C0(v35, v131);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    Swift::Int v5 = *v8;
    uint64_t v144 = *v8;
    *uint64_t v8 = 0x8000000000000000LL;
    uint64_t v91 = sub_10030CF14(v142, v19);
    uint64_t v92 = *(void *)(v5 + 16);
    uint64_t v93 = (v90 & 1) == 0;
    uint64_t v94 = v92 + v93;
    if (__OFADD__(v92, v93)) {
      goto LABEL_114;
    }
    uint64_t v95 = v90;
    if (*(void *)(v5 + 24) >= v94)
    {
      if ((_DWORD)isUniquelyReferenced_nonNull_native)
      {
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v90 & 1) == 0) {
          goto LABEL_98;
        }
      }

      else
      {
        sub_10006191C();
        Swift::Int v5 = v144;
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v95 & 1) == 0) {
          goto LABEL_98;
        }
      }
    }

    else
    {
      sub_100049A7C(v94, isUniquelyReferenced_nonNull_native);
      Swift::Int v5 = v144;
      uint64_t v96 = sub_10030CF14(v142, v19);
      if ((v95 & 1) != (v97 & 1)) {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      }
      uint64_t v91 = v96;
      char isUniquelyReferenced_nonNull_native = v0 + 16;
      if ((v95 & 1) == 0)
      {
LABEL_98:
        *(void *)(v5 + 8 * (v91 >> 6) + 64) |= 1LL << v91;
        uint64_t v98 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v91);
        *uint64_t v98 = v142;
        v98[1] = v19;
        sub_10006A2FC(v131, *(void *)(v5 + 56) + 48 * v91);
        uint64_t v99 = *(void *)(v5 + 16);
        uint64_t v50 = __OFADD__(v99, 1LL);
        Class v100 = v99 + 1;
        if (v50) {
          goto LABEL_116;
        }
        *(void *)(v5 + swift_weakDestroy(v0 + 16) = v100;
        swift_bridgeObjectRetain(v19);
        goto LABEL_103;
      }
    }

    sub_100728A3C(v131, *(void *)(v5 + 56) + 48 * v91);
LABEL_103:
    *uint64_t v8 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(v130);
    sub_100728A70(v134);
    unint64_t v10 = v0 + 576;
LABEL_7:
    sub_100728A70(v10);
    sub_10073AD08(v2);
    unint64_t v3 = v0 + 288;
    unint64_t v7 = v141;
  }

  uint64_t v17 = *(void *)(v123 + 8 * v18);
  if (v17)
  {
LABEL_17:
    unint64_t v16 = v18;
LABEL_14:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v16 << 6);
    uint64_t v138 = v16;
    goto LABEL_10;
  }

  while (1)
  {
    unint64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v16 >= v128)
    {
      uint64_t v138 = v128 - 1;
      goto LABEL_28;
    }

    uint64_t v17 = *(void *)(v123 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_14;
    }
  }

        swift_task_dealloc(v82);
        unint64_t v36 = v0 + 528;
        unint64_t v9 = v122;
        unint64_t v31 = v114;
      }

      swift_task_dealloc(v80);
      swift_task_dealloc(v123);
      uint64_t v90 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v9);
      v129(v31, isUniquelyReferenced_nonNull_native);
      swift_task_dealloc(v31);
      uint64_t v51 = __OFADD__(v90, v124);
      Swift::Int v5 = v90 + v124;
      if (v51) {
        goto LABEL_117;
      }
      *(void *)(v0 + 744) = &type metadata for Int64;
      *(void *)(v0 + 752) = sub_10001563C();
      *(void *)(v0 + 720) = v5;
      *(_BYTE *)(v0 + 760) = 2;
      sub_10006A2FC(v0 + 720, v36);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v126);
      uint64_t v2 = (void *)(v0 + 192);
      unint64_t v9 = 3LL;
      goto LABEL_94;
    }

    Swift::String v53 = *(double *)(v0 + 240);
    xpc_activity_t v26 = v0 + 432;
    sub_10006A2C0(v137, (uint64_t)v117);
    if (*(_BYTE *)(v0 + 472) != 3)
    {
LABEL_110:
      swift_bridgeObjectRelease(v20);
      sub_100728A70(v26);
      uint64_t v104 = *(void *)(v0 + 984);
      uint64_t v105 = sub_100728AB0();
      swift_allocError(&type metadata for AnalyticsEvent.AnalyticsEventError, v105, 0LL, 0LL);
      swift_willThrow();
      sub_100728A70(v137);
      sub_10073AD08(v2);
      swift_release(v104);
      unsigned int v103 = *(uint64_t (**)(void))(v0 + 8);
      return v103();
    }

    sub_100012EC0(v117, (uint64_t)v115);
    Swift::String v54 = *(void *)(v0 + 832);
    uint64_t v55 = *(void *)(v0 + 840);
    uint64_t v56 = sub_100012ED8(v115, v54);
    uint64_t v57 = *(void *)(v54 - 8);
    uint64_t v58 = swift_task_alloc((*(void *)(v57 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v59 = *(void (**)(uint64_t, void *, uint64_t))(v57 + 16);
    uint64_t v2 = (void *)(v0 + 192);
    v59(v58, v56, v54);
    uint64_t v60 = sub_1000156C8();
    BinaryFloatingPoint.init<A>(_:)(v58, &type metadata for Double, v54, v60, v55);
    swift_task_dealloc(v58);
    uint64_t v61 = v53 + *(double *)(v0 + 944);
    *(void *)(v0 + 408) = &type metadata for Double;
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v60;
    unint64_t v9 = 3LL;
    *(double *)(v0 + 384) = v61;
    *(_BYTE *)(v0 + 424) = 3;
    unint64_t v36 = v0 + 528;
    sub_10006A2FC(v0 + 384, v136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v115);
LABEL_94:
    swift_beginAccess(v8, v132, 33LL, 0LL);
    sub_10006A2C0(v36, v133);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    Swift::Int v5 = *v8;
    uint64_t v146 = *v8;
    *uint64_t v8 = 0x8000000000000000LL;
    uint64_t v92 = sub_10030CF14(v144, v20);
    uint64_t v93 = *(void *)(v5 + 16);
    uint64_t v94 = (v91 & 1) == 0;
    uint64_t v95 = v93 + v94;
    if (__OFADD__(v93, v94)) {
      goto LABEL_114;
    }
    uint64_t v96 = v91;
    if (*(void *)(v5 + 24) >= v95)
    {
      if ((_DWORD)isUniquelyReferenced_nonNull_native)
      {
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v91 & 1) == 0) {
          goto LABEL_98;
        }
      }

      else
      {
        sub_10006191C();
        Swift::Int v5 = v146;
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v96 & 1) == 0) {
          goto LABEL_98;
        }
      }
    }

    else
    {
      sub_100049A7C(v95, isUniquelyReferenced_nonNull_native);
      Swift::Int v5 = v146;
      uint64_t v97 = sub_10030CF14(v144, v20);
      if ((v96 & 1) != (v98 & 1))
      {
LABEL_109:
        swift_release(*(void *)(v0 + 968));
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      }

      uint64_t v92 = v97;
      char isUniquelyReferenced_nonNull_native = v0 + 16;
      if ((v96 & 1) == 0)
      {
LABEL_98:
        *(void *)(v5 + 8 * (v92 >> 6) + 64) |= 1LL << v92;
        uint64_t v99 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v92);
        *uint64_t v99 = v144;
        v99[1] = v20;
        sub_10006A2FC(v133, *(void *)(v5 + 56) + 48 * v92);
        Class v100 = *(void *)(v5 + 16);
        uint64_t v51 = __OFADD__(v100, 1LL);
        Class v101 = v100 + 1;
        if (v51) {
          goto LABEL_116;
        }
        *(void *)(v5 + swift_weakDestroy(v0 + 16) = v101;
        swift_bridgeObjectRetain(v20);
        goto LABEL_103;
      }
    }

    sub_100728A3C(v133, *(void *)(v5 + 56) + 48 * v92);
LABEL_103:
    unsigned int v102 = *v8;
    *uint64_t v8 = v5;
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v20);
    swift_endAccess(v132);
    sub_100728A70(v136);
    uint64_t v11 = v0 + 576;
LABEL_7:
    sub_100728A70(v11);
    sub_10073AD08(v2);
    unint64_t v3 = v0 + 288;
    unint64_t v7 = v143;
  }

  unint64_t v18 = *(void *)(v125 + 8 * v19);
  if (v18)
  {
LABEL_17:
    uint64_t v17 = v19;
LABEL_14:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v17 << 6);
    uint64_t v140 = v17;
    goto LABEL_10;
  }

  while (1)
  {
    uint64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v130)
    {
      uint64_t v140 = v130 - 1;
      goto LABEL_28;
    }

    unint64_t v18 = *(void *)(v125 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_14;
    }
  }

        swift_task_dealloc(v82);
        unint64_t v36 = v0 + 528;
        unint64_t v9 = v122;
        unint64_t v31 = v114;
      }

      swift_task_dealloc(v80);
      swift_task_dealloc(v123);
      uint64_t v90 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v9);
      v129(v31, isUniquelyReferenced_nonNull_native);
      swift_task_dealloc(v31);
      uint64_t v51 = __OFADD__(v90, v124);
      Swift::Int v5 = v90 + v124;
      if (v51) {
        goto LABEL_117;
      }
      *(void *)(v0 + 744) = &type metadata for Int64;
      *(void *)(v0 + 752) = sub_10001563C();
      *(void *)(v0 + 720) = v5;
      *(_BYTE *)(v0 + 760) = 2;
      sub_10006A2FC(v0 + 720, v36);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v126);
      uint64_t v2 = (void *)(v0 + 192);
      unint64_t v9 = 3LL;
      goto LABEL_94;
    }

    Swift::String v53 = *(double *)(v0 + 240);
    xpc_activity_t v26 = v0 + 432;
    sub_10006A2C0(v137, (uint64_t)v117);
    if (*(_BYTE *)(v0 + 472) != 3)
    {
LABEL_110:
      swift_bridgeObjectRelease(v20);
      sub_100728A70(v26);
      uint64_t v104 = *(void *)(v0 + 976);
      uint64_t v105 = sub_100728AB0();
      swift_allocError(&type metadata for AnalyticsEvent.AnalyticsEventError, v105, 0LL, 0LL);
      swift_willThrow();
      sub_100728A70(v137);
      sub_10073AD08(v2);
      swift_release(v104);
      unsigned int v103 = *(uint64_t (**)(void))(v0 + 8);
      return v103();
    }

    sub_100012EC0(v117, (uint64_t)v115);
    Swift::String v54 = *(void *)(v0 + 832);
    uint64_t v55 = *(void *)(v0 + 840);
    uint64_t v56 = sub_100012ED8(v115, v54);
    uint64_t v57 = *(void *)(v54 - 8);
    uint64_t v58 = swift_task_alloc((*(void *)(v57 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v59 = *(void (**)(uint64_t, void *, uint64_t))(v57 + 16);
    uint64_t v2 = (void *)(v0 + 192);
    v59(v58, v56, v54);
    uint64_t v60 = sub_1000156C8();
    BinaryFloatingPoint.init<A>(_:)(v58, &type metadata for Double, v54, v60, v55);
    swift_task_dealloc(v58);
    uint64_t v61 = v53 + *(double *)(v0 + 944);
    *(void *)(v0 + 408) = &type metadata for Double;
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v60;
    unint64_t v9 = 3LL;
    *(double *)(v0 + 384) = v61;
    *(_BYTE *)(v0 + 424) = 3;
    unint64_t v36 = v0 + 528;
    sub_10006A2FC(v0 + 384, v136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v115);
LABEL_94:
    swift_beginAccess(v8, v132, 33LL, 0LL);
    sub_10006A2C0(v36, v133);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    Swift::Int v5 = *v8;
    uint64_t v146 = *v8;
    *uint64_t v8 = 0x8000000000000000LL;
    uint64_t v92 = sub_10030CF14(v144, v20);
    uint64_t v93 = *(void *)(v5 + 16);
    uint64_t v94 = (v91 & 1) == 0;
    uint64_t v95 = v93 + v94;
    if (__OFADD__(v93, v94)) {
      goto LABEL_114;
    }
    uint64_t v96 = v91;
    if (*(void *)(v5 + 24) >= v95)
    {
      if ((_DWORD)isUniquelyReferenced_nonNull_native)
      {
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v91 & 1) == 0) {
          goto LABEL_98;
        }
      }

      else
      {
        sub_10006191C();
        Swift::Int v5 = v146;
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v96 & 1) == 0) {
          goto LABEL_98;
        }
      }
    }

    else
    {
      sub_100049A7C(v95, isUniquelyReferenced_nonNull_native);
      Swift::Int v5 = v146;
      uint64_t v97 = sub_10030CF14(v144, v20);
      if ((v96 & 1) != (v98 & 1))
      {
LABEL_109:
        swift_release(*(void *)(v0 + 968));
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      }

      uint64_t v92 = v97;
      char isUniquelyReferenced_nonNull_native = v0 + 16;
      if ((v96 & 1) == 0)
      {
LABEL_98:
        *(void *)(v5 + 8 * (v92 >> 6) + 64) |= 1LL << v92;
        uint64_t v99 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v92);
        *uint64_t v99 = v144;
        v99[1] = v20;
        sub_10006A2FC(v133, *(void *)(v5 + 56) + 48 * v92);
        Class v100 = *(void *)(v5 + 16);
        uint64_t v51 = __OFADD__(v100, 1LL);
        Class v101 = v100 + 1;
        if (v51) {
          goto LABEL_116;
        }
        *(void *)(v5 + swift_weakDestroy(v0 + 16) = v101;
        swift_bridgeObjectRetain(v20);
        goto LABEL_103;
      }
    }

    sub_100728A3C(v133, *(void *)(v5 + 56) + 48 * v92);
LABEL_103:
    unsigned int v102 = *v8;
    *uint64_t v8 = v5;
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v20);
    swift_endAccess(v132);
    sub_100728A70(v136);
    uint64_t v11 = v0 + 576;
LABEL_7:
    sub_100728A70(v11);
    sub_10073AD08(v2);
    unint64_t v3 = v0 + 288;
    unint64_t v7 = v143;
  }

  unint64_t v18 = *(void *)(v125 + 8 * v19);
  if (v18)
  {
LABEL_17:
    uint64_t v17 = v19;
LABEL_14:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v17 << 6);
    uint64_t v140 = v17;
    goto LABEL_10;
  }

  while (1)
  {
    uint64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v130)
    {
      uint64_t v140 = v130 - 1;
      goto LABEL_28;
    }

    unint64_t v18 = *(void *)(v125 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_14;
    }
  }

        swift_task_dealloc(v81);
        uint64_t v35 = v0 + 528;
        unint64_t v9 = v120;
        unint64_t v30 = v112;
      }

      swift_task_dealloc(v79);
      swift_task_dealloc(v121);
      uint64_t v89 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v9);
      v127(v30, isUniquelyReferenced_nonNull_native);
      swift_task_dealloc(v30);
      uint64_t v50 = __OFADD__(v89, v122);
      Swift::Int v5 = v89 + v122;
      if (v50) {
        goto LABEL_117;
      }
      *(void *)(v0 + 744) = &type metadata for Int64;
      *(void *)(v0 + 752) = sub_10001563C();
      *(void *)(v0 + 720) = v5;
      *(_BYTE *)(v0 + 760) = 2;
      sub_10006A2FC(v0 + 720, v35);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v124);
      uint64_t v2 = (void *)(v0 + 192);
      unint64_t v9 = 3LL;
      goto LABEL_94;
    }

    char v52 = *(double *)(v0 + 240);
    unint64_t v25 = v0 + 432;
    sub_10006A2C0(v135, (uint64_t)v115);
    if (*(_BYTE *)(v0 + 472) != 3)
    {
LABEL_110:
      swift_bridgeObjectRelease();
      sub_100728A70(v25);
      unsigned int v102 = sub_100728AB0();
      unsigned int v103 = swift_allocError(&type metadata for AnalyticsEvent.AnalyticsEventError, v102, 0LL, 0LL);
      swift_willThrow(v103);
      sub_100728A70(v135);
      sub_10073AD08(v2);
      swift_release();
      Class v101 = *(uint64_t (**)(void))(v0 + 8);
      return v101();
    }

    sub_100012EC0(v115, (uint64_t)v113);
    Swift::String v53 = *(void *)(v0 + 832);
    Swift::String v54 = *(void *)(v0 + 840);
    uint64_t v55 = sub_100012ED8(v113, v53);
    uint64_t v56 = *(void *)(v53 - 8);
    uint64_t v57 = swift_task_alloc((*(void *)(v56 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v58 = *(void (**)(uint64_t, void *, uint64_t))(v56 + 16);
    uint64_t v2 = (void *)(v0 + 192);
    v58(v57, v55, v53);
    uint64_t v59 = sub_1000156C8();
    BinaryFloatingPoint.init<A>(_:)(v57, &type metadata for Double, v53, v59, v54);
    swift_task_dealloc(v57);
    uint64_t v60 = v52 + *(double *)(v0 + 944);
    *(void *)(v0 + 408) = &type metadata for Double;
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v59;
    unint64_t v9 = 3LL;
    *(double *)(v0 + 384) = v60;
    *(_BYTE *)(v0 + 424) = 3;
    uint64_t v35 = v0 + 528;
    sub_10006A2FC(v0 + 384, v134);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
LABEL_94:
    swift_beginAccess(v8, v130, 33LL, 0LL);
    sub_10006A2C0(v35, v131);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    Swift::Int v5 = *v8;
    uint64_t v144 = *v8;
    *uint64_t v8 = 0x8000000000000000LL;
    uint64_t v91 = sub_10030CF14(v142, v19);
    uint64_t v92 = *(void *)(v5 + 16);
    uint64_t v93 = (v90 & 1) == 0;
    uint64_t v94 = v92 + v93;
    if (__OFADD__(v92, v93)) {
      goto LABEL_114;
    }
    uint64_t v95 = v90;
    if (*(void *)(v5 + 24) >= v94)
    {
      if ((_DWORD)isUniquelyReferenced_nonNull_native)
      {
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v90 & 1) == 0) {
          goto LABEL_98;
        }
      }

      else
      {
        sub_10006191C();
        Swift::Int v5 = v144;
        char isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v95 & 1) == 0) {
          goto LABEL_98;
        }
      }
    }

    else
    {
      sub_100049A7C(v94, isUniquelyReferenced_nonNull_native);
      Swift::Int v5 = v144;
      uint64_t v96 = sub_10030CF14(v142, v19);
      if ((v95 & 1) != (v97 & 1))
      {
LABEL_109:
        swift_bridgeObjectRelease();
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      }

      uint64_t v91 = v96;
      char isUniquelyReferenced_nonNull_native = v0 + 16;
      if ((v95 & 1) == 0)
      {
LABEL_98:
        *(void *)(v5 + 8 * (v91 >> 6) + 64) |= 1LL << v91;
        uint64_t v98 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v91);
        *uint64_t v98 = v142;
        v98[1] = v19;
        sub_10006A2FC(v131, *(void *)(v5 + 56) + 48 * v91);
        uint64_t v99 = *(void *)(v5 + 16);
        uint64_t v50 = __OFADD__(v99, 1LL);
        Class v100 = v99 + 1;
        if (v50) {
          goto LABEL_116;
        }
        *(void *)(v5 + swift_weakDestroy(v0 + 16) = v100;
        swift_bridgeObjectRetain(v19);
        goto LABEL_103;
      }
    }

    sub_100728A3C(v131, *(void *)(v5 + 56) + 48 * v91);
LABEL_103:
    *uint64_t v8 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(v130);
    sub_100728A70(v134);
    unint64_t v10 = v0 + 576;
LABEL_7:
    sub_100728A70(v10);
    sub_10073AD08(v2);
    unint64_t v3 = v0 + 288;
    unint64_t v7 = v141;
  }

  uint64_t v17 = *(void *)(v123 + 8 * v18);
  if (v17)
  {
LABEL_17:
    unint64_t v16 = v18;
LABEL_14:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v16 << 6);
    uint64_t v138 = v16;
    goto LABEL_10;
  }

  while (1)
  {
    unint64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v16 >= v128)
    {
      uint64_t v138 = v128 - 1;
      goto LABEL_28;
    }

    uint64_t v17 = *(void *)(v123 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_14;
    }
  }

uint64_t sub_10045A580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10045BF2C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10045A5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10045BF2C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10045A628(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009AECD8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10045BA6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for XPCActivity.Criteria.CodingKeys,  &type metadata for XPCActivity.Criteria.CodingKeys,  v11,  v9,  v10);
  char v27 = *v3;
  char v26 = 0;
  unint64_t v12 = sub_10045BB38();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v5, &type metadata for XPCActivity.Priority, v12);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    char v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v25, v5);
    uint64_t v14 = *((void *)v3 + 1);
    char v24 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v24, v5);
    uint64_t v15 = *((void *)v3 + 2);
    char v23 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v23, v5);
    uint64_t v16 = *((void *)v3 + 3);
    char v22 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v22, v5);
    uint64_t v21 = *((void *)v3 + 4);
    char v20 = 5;
    unint64_t v17 = sub_10045BB7C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for XPCActivity.Criteria.Options, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10045A80C()
{
  return sub_100459CDC(*v0);
}

uint64_t sub_10045A814@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100007E24(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10045A850()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10045A880 + 4 * byte_100802D88[*v0]))( 0x797469726F697270LL,  0xE800000000000000LL);
}

uint64_t sub_10045A880()
{
  return 0x6E69746165706572LL;
}

uint64_t sub_10045A89C()
{
  return 0x79616C6564LL;
}

uint64_t sub_10045A8B0()
{
  return 0x7265506563617267LL;
}

uint64_t sub_10045A8D0()
{
  return 0x6C61767265746E69LL;
}

uint64_t sub_10045A8E4()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_10045A8FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10045B590(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10045A920(uint64_t a1)
{
  unint64_t v2 = sub_10045BA6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10045A948(uint64_t a1)
{
  unint64_t v2 = sub_10045BA6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10045A970@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }

  return result;
}

uint64_t sub_10045A9B4(void *a1)
{
  return sub_10045A628(a1);
}

BOOL sub_10045A9C8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_10045AC58((uint64_t)v5, (uint64_t)v7);
}

uint64_t sub_10045AA10()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_10016CF88(v0 + 80);
  sub_10002214C(*(void *)(v0 + 96), *(void *)(v0 + 104));
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t type metadata accessor for XPCActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd11XPCActivity);
}

uint64_t storeEnumTagSinglePayload for XPCActivity.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10045AAD0 + 4 * byte_100802D93[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10045AB04 + 4 * byte_100802D8E[v4]))();
}

uint64_t sub_10045AB04(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10045AB0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10045AB14LL);
  }
  return result;
}

uint64_t sub_10045AB20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10045AB28LL);
  }
  *(_BYTE *)double result = a2 + 6;
  return result;
}

uint64_t sub_10045AB2C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10045AB34(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.State()
{
  return &type metadata for XPCActivity.State;
}

uint64_t getEnumTagSinglePayload for XPCActivity.Criteria(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && a1[40]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Criteria(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 40) = 0;
    }
    if (a2) {
      *(_BYTE *)double result = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria()
{
  return &type metadata for XPCActivity.Criteria;
}

unint64_t sub_10045ABF4()
{
  unint64_t result = qword_1009AEC90;
  if (!qword_1009AEC90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802F60, &type metadata for XPCActivity.State);
    atomic_store(result, (unint64_t *)&qword_1009AEC90);
  }

  return result;
}

uint64_t sub_10045AC38()
{
  return sub_100458354();
}

BOOL sub_10045AC58(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(_BYTE *)a1 == 0;
  if (*(_BYTE *)a1) {
    uint64_t v5 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v5 = 0x7974696C697475LL;
  }
  if (v4) {
    unint64_t v6 = 0xE700000000000000LL;
  }
  else {
    unint64_t v6 = 0xEB0000000065636ELL;
  }
  if (*(_BYTE *)a2) {
    uint64_t v7 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v7 = 0x7974696C697475LL;
  }
  if (*(_BYTE *)a2) {
    unint64_t v8 = 0xEB0000000065636ELL;
  }
  else {
    unint64_t v8 = 0xE700000000000000LL;
  }
  if (v5 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2LL);
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0LL);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    BOOL result = 0LL;
    if ((v10 & 1) == 0) {
      return result;
    }
  }

  return ((*(unsigned __int8 *)(a1 + 1) ^ *(unsigned __int8 *)(a2 + 1)) & 1) == 0
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

uint64_t sub_10045AD78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v44 = a6;
  uint64_t v45 = a7;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v39 = a3;
  uint64_t v35 = a1;
  unint64_t v36 = a2;
  uint64_t v41 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v41);
  unint64_t v40 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v38 = v16;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100004AEC(&qword_1009BB4F0);
  uint64_t v21 = swift_allocObject(v20, 20LL, 7LL);
  *(_DWORD *)(v21 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v7 + 40) = v21;
  swift_unknownObjectWeakInit(v7 + 80, 0LL);
  *(_BYTE *)(v7 + 88) = 0;
  uint64_t v37 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  *(void *)(v7 + 96) = 0LL;
  *(void *)(v7 + 104) = 0LL;
  strcpy((char *)v46, "XPCActivity-");
  BYTE5(v46[1]) = 0;
  HIWORD(v46[1]) = -5120;
  v22._countAndFlagsBits = a1;
  v22._object = a2;
  String.append(_:)(v22);
  uint64_t v23 = v46[1];
  uint64_t v34 = v46[0];
  uint64_t v24 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v39, v16);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v15,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v12);
  v46[0] = _swiftEmptyArrayStorage;
  uint64_t v25 = sub_100015C48( (unint64_t *)&qword_10099BAA0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v28 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)(v46, v26, v27, v41, v25);
  uint64_t v29 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v34, v23, v19, v28, v15, 0LL);
  uint64_t v30 = v35;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v29;
  *(void *)(v7 + 24) = v30;
  *(void *)(v7 + 32) = v36;
  uint64_t v31 = v43;
  *(void *)(v7 + 48) = v42;
  *(void *)(v7 + 56) = v31;
  uint64_t v32 = v45;
  *(void *)(v8 + 64) = v44;
  *(void *)(v8 + 72) = v32;
  swift_retain();
  swift_retain();
  sub_1004589C8();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v24, v38);
  return v8;
}

uint64_t sub_10045B024@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v1 + 80);
  *a1 = result;
  return result;
}

unint64_t sub_10045B054()
{
  unint64_t result = qword_1009AECB0;
  if (!qword_1009AECB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802EE8, &type metadata for XPCActivity.State);
    atomic_store(result, (unint64_t *)&qword_1009AECB0);
  }

  return result;
}

uint64_t sub_10045B098(uint64_t result)
{
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_47;
  }

  uint64_t v1 = (void *)result;
  unint64_t result = xpc_dictionary_get_BOOL((xpc_object_t)result, XPC_ACTIVITY_POWER_NAP);
  if (!XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  unsigned int v2 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY);
  if (!XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  int v3 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_SHOULD_WAKE_DEVICE);
  if (!XPC_ACTIVITY_USES_DUET_POWER_BUDGETING)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  int v4 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_USES_DUET_POWER_BUDGETING);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_A)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  int v5 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRES_CLASS_A);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_B)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  int v6 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRES_CLASS_B);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_C)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  int v7 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRES_CLASS_C);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  int v8 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  uint64_t v9 = v2;
  if (v3) {
    uint64_t v9 = v2 | 4LL;
  }
  if (v4) {
    v9 |= 2uLL;
  }
  if (v5) {
    v9 |= 8uLL;
  }
  if (v6) {
    v9 |= 0x10uLL;
  }
  if (v7) {
    v9 |= 0x20uLL;
  }
  if (v8) {
    v9 |= 0x40uLL;
  }
  if ((_DWORD)result) {
    uint64_t v10 = v9 | 0x80;
  }
  else {
    uint64_t v10 = v9;
  }
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY);
  if ((_DWORD)result) {
    uint64_t v11 = v10 | 0x100;
  }
  else {
    uint64_t v11 = v10;
  }
  if (!XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA) {
    goto LABEL_55;
  }
  xpc_object_t v12 = xpc_dictionary_get_dictionary(v1, XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA);
  if (v12)
  {
    xpc_object_t v13 = v12;
    string = xpc_dictionary_get_string(v12, "DataBudgetName");
    swift_unknownObjectRelease(v13);
    if (string) {
      v11 |= 0x2000uLL;
    }
  }

  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_ALLOW_BATTERY);
  if (!XPC_ACTIVITY_MEMORY_INTENSIVE) {
    goto LABEL_56;
  }
  unsigned __int8 v15 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_MEMORY_INTENSIVE);
  if (!XPC_ACTIVITY_CPU_INTENSIVE)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  unsigned __int8 v16 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_CPU_INTENSIVE);
  if (!XPC_ACTIVITY_DISK_INTENSIVE)
  {
LABEL_58:
    __break(1u);
    return result;
  }

  if ((v15 & ((v11 & 0x200) == 0)) != 0) {
    uint64_t v17 = v11 | 0x200;
  }
  else {
    uint64_t v17 = v11;
  }
  if ((v16 & ((v17 & 0x400) == 0)) != 0) {
    v17 |= 0x400uLL;
  }
  else {
    uint64_t v18 = v17;
  }
  BOOL v19 = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_DISK_INTENSIVE);
  swift_unknownObjectRelease(v1);
  if (v19 && (v18 & 0x1000) == 0) {
    return v18 | 0x1000;
  }
  else {
    return v18;
  }
}

uint64_t sub_10045B360@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  string = xpc_dictionary_get_string(a1, XPC_ACTIVITY_PRIORITY);
  if (string)
  {
    uint64_t v5 = String.init(cString:)(string);
    uint64_t v7 = v6;
    if (qword_10099B4B0 != -1) {
      swift_once(&qword_10099B4B0, sub_1004598FC);
    }
    if (v5 == qword_1009AEA90 && v7 == *(void *)algn_1009AEA98)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = 0LL;
    }

    else
    {
      int v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, qword_1009AEA90, *(void *)algn_1009AEA98, 0LL);
      swift_bridgeObjectRelease();
      uint64_t v10 = ~v9 & 1LL;
    }

    BOOL v16 = xpc_dictionary_get_BOOL(a1, XPC_ACTIVITY_REPEATING);
    int64_t int64 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_DELAY);
    int64_t v12 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_GRACE_PERIOD);
    int64_t v13 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_INTERVAL);
    uint64_t result = sub_10045B098((uint64_t)a1);
    uint64_t v17 = 256LL;
    if (!v16) {
      uint64_t v17 = 0LL;
    }
    uint64_t v15 = v17 | v10;
  }

  else
  {
    swift_unknownObjectRelease(a1);
    int64_t int64 = 0LL;
    int64_t v12 = 0LL;
    int64_t v13 = 0LL;
    uint64_t result = 0LL;
    uint64_t v15 = 2LL;
  }

  *a2 = v15;
  a2[1] = int64;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = result;
  return result;
}

unint64_t sub_10045B4D0(unint64_t result)
{
  if (result >= 6)
  {
    _StringGuts.grow(_:)(38LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v1._object;
    String.append(_:)(v1);
    swift_bridgeObjectRelease(object);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000027LL,  0x8000000100863140LL,  "searchpartyd/XPCActivity.swift",  30LL,  2LL,  258LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_10045B590(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x797469726F697270LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469726F697270LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E69746165706572LL && a2 == 0xE900000000000067LL)
  {
    unint64_t v7 = 0xE900000000000067LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69746165706572LL, 0xE900000000000067LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x79616C6564LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v8 = 0xE500000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C6564LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x7265506563617267LL && a2 == 0xEB00000000646F69LL)
  {
    unint64_t v9 = 0xEB00000000646F69LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265506563617267LL, 0xEB00000000646F69LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x6C61767265746E69LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v10 = 0xE800000000000000LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61767265746E69LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974706FLL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_10045B82C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009AECB8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10045BA6C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for XPCActivity.Criteria.CodingKeys,  &type metadata for XPCActivity.Criteria.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v28 = 0;
  unint64_t v12 = sub_10045BAB0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v29,  &type metadata for XPCActivity.Priority,  &v28,  v5,  &type metadata for XPCActivity.Priority,  v12);
  char v13 = v29;
  char v27 = 1;
  char v14 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  char v26 = 2;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  char v25 = 3;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  char v24 = 4;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  char v23 = 5;
  unint64_t v15 = sub_10045BAF4();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v22,  &type metadata for XPCActivity.Criteria.Options,  &v23,  v5,  &type metadata for XPCActivity.Criteria.Options,  v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = v22;
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *(_BYTE *)a2 = v13;
  *(_BYTE *)(a2 + 1) = v14 & 1;
  uint64_t v18 = v20;
  *(void *)(a2 + 8) = v21;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v18;
  *(void *)(a2 + 24) = v19;
  *(void *)(a2 + 32) = v16;
  return result;
}

unint64_t sub_10045BA6C()
{
  unint64_t result = qword_1009AECC0;
  if (!qword_1009AECC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008033A4, &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AECC0);
  }

  return result;
}

unint64_t sub_10045BAB0()
{
  unint64_t result = qword_1009AECC8;
  if (!qword_1009AECC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080337C, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_1009AECC8);
  }

  return result;
}

unint64_t sub_10045BAF4()
{
  unint64_t result = qword_1009AECD0;
  if (!qword_1009AECD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803354, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_1009AECD0);
  }

  return result;
}

unint64_t sub_10045BB38()
{
  unint64_t result = qword_1009AECE0;
  if (!qword_1009AECE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080332C, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_1009AECE0);
  }

  return result;
}

unint64_t sub_10045BB7C()
{
  unint64_t result = qword_1009AECE8;
  if (!qword_1009AECE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803304, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_1009AECE8);
  }

  return result;
}

uint64_t sub_10045BBC0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10045BBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10045BBE0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10045BBE8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10045BBF8()
{
  return sub_100458B50(v0);
}

uint64_t sub_10045BC00()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10045BC10()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10045BC34(uint64_t a1)
{
  return sub_100458C64(a1, v1);
}

uint64_t sub_10045BC3C(uint64_t a1)
{
  return sub_100458D24(a1, *(xpc_activity_t *)(v1 + 16), *(_xpc_activity_s **)(v1 + 24));
}

unint64_t sub_10045BC54@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 16);
  int v3 = *(_xpc_activity_s **)(v1 + 24);
  swift_unknownObjectWeakAssign(v4 + 80, v3);
  *(_BYTE *)(v4 + 88) = 1;
  unint64_t result = sub_100458F20(v3);
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Criteria.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10045BCF4 + 4 * byte_100802D9D[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10045BD28 + 4 * byte_100802D98[v4]))();
}

uint64_t sub_10045BD28(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10045BD30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10045BD38LL);
  }
  return result;
}

uint64_t sub_10045BD44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10045BD4CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10045BD50(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10045BD58(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria.CodingKeys()
{
  return &type metadata for XPCActivity.Criteria.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria.Options()
{
  return &type metadata for XPCActivity.Criteria.Options;
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Priority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10045BDD0 + 4 * byte_100802DA7[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10045BE04 + 4 * byte_100802DA2[v4]))();
}

uint64_t sub_10045BE04(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10045BE0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10045BE14LL);
  }
  return result;
}

uint64_t sub_10045BE20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10045BE28LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10045BE2C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10045BE34(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Priority()
{
  return &type metadata for XPCActivity.Priority;
}

unint64_t sub_10045BE54()
{
  unint64_t result = qword_1009AED08;
  if (!qword_1009AED08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080306C, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_1009AED08);
  }

  return result;
}

unint64_t sub_10045BE9C()
{
  unint64_t result = qword_1009AED10;
  if (!qword_1009AED10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008030C4, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_1009AED10);
  }

  return result;
}

unint64_t sub_10045BEE4()
{
  unint64_t result = qword_1009AED18;
  if (!qword_1009AED18)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803094, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_1009AED18);
  }

  return result;
}

unint64_t sub_10045BF2C()
{
  unint64_t result = qword_1009AED20;
  if (!qword_1009AED20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008030EC, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_1009AED20);
  }

  return result;
}

unint64_t sub_10045BF74()
{
  unint64_t result = qword_1009AED28;
  if (!qword_1009AED28)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803124, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_1009AED28);
  }

  return result;
}

unint64_t sub_10045BFBC()
{
  unint64_t result = qword_1009AED30;
  if (!qword_1009AED30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008032DC, &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AED30);
  }

  return result;
}

unint64_t sub_10045C004()
{
  unint64_t result = qword_1009AED38;
  if (!qword_1009AED38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080324C, &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AED38);
  }

  return result;
}

unint64_t sub_10045C04C()
{
  unint64_t result = qword_1009AED40;
  if (!qword_1009AED40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803274, &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AED40);
  }

  return result;
}

unint64_t sub_10045C090()
{
  unint64_t result = qword_1009AED48;
  if (!qword_1009AED48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802FF4, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_1009AED48);
  }

  return result;
}

uint64_t sub_10045C0D4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10045B024(a1);
}

uint64_t sub_10045C100@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*a2 == -1LL)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = (uint64_t *)result;
    ++*a2;
    __int128 v23 = *(_OWORD *)(result + 32);
    uint64_t v7 = *a3;
    unint64_t v8 = a3[1];
    *(_OWORD *)a3 = v23;
    sub_100018BF8((uint64_t)&v23);
    sub_100016F9C(v7, v8);
    uint64_t v9 = String.utf8Data.getter(0x64656D7265746E69LL, 0xEC00000065746169LL);
    unint64_t v11 = v10;
    __int128 v12 = v23;
    sub_100018BF8((uint64_t)&v23);
    sub_1004DF7EC(v12, *((uint64_t *)&v12 + 1), v9, v11, 32LL);
    if (v4)
    {
      sub_100016F9C(v9, v11);
      return sub_100164F64((uint64_t)&v23);
    }

    else
    {
      uint64_t v15 = v13;
      uint64_t v16 = v14;
      sub_100164F64((uint64_t)&v23);
      sub_1001782BC(v15, v16);
      sub_100016F9C(v9, v11);
      uint64_t v17 = v6[2];
      unint64_t v18 = v6[3];
      uint64_t v20 = *v6;
      unint64_t v19 = v6[1];
      sub_10001736C(v17, v18);
      unint64_t result = sub_100018BE4(v20, v19);
      *a4 = v21;
      a4[1] = v22;
      a4[2] = v17;
      a4[3] = v18;
      a4[4] = v20;
      a4[5] = v19;
    }
  }

  return result;
}

uint64_t sub_10045C258@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, unint64_t a10, unint64_t a11)
{
  unint64_t v17 = a11;
  if (!a11)
  {
    unint64_t v24 = sub_10045C8A8();
    uint64_t v25 = a1;
    uint64_t v26 = swift_allocError(&type metadata for TokenSequenceError, v24, 0LL, 0LL);
    swift_willThrow(v26);
    sub_100164D3C(a7, a8, a10);
    sub_100016F9C(a5, a6);
    sub_100016F9C(a3, a4);
    return sub_1000182F0(v25, a2);
  }

  if (a10 >> 60 == 15)
  {
    sub_10001736C(a5, a6);
    sub_10001736C(a5, a6);
    sub_100018BE4(a1, a2);
    sub_10001736C(a3, a4);
    uint64_t v20 = a5;
    unint64_t v21 = a6;
    uint64_t v22 = a7;
  }

  else
  {
    uint64_t v22 = a7;
    unint64_t v17 = a11 - a7;
    if (a11 >= a7)
    {
      sub_100164D20(a7, a8, a10);
      sub_10001736C(a5, a6);
      sub_100018BE4(a1, a2);
      uint64_t v22 = a7;
      sub_10001736C(a3, a4);
      sub_100164D20(a7, a8, a10);
      if (qword_10099B6E8 != -1) {
        swift_once(&qword_10099B6E8, sub_100651020);
      }
      uint64_t v35 = type metadata accessor for Logger(0LL);
      sub_10000A720(v35, (uint64_t)qword_100A2AFE8);
      uint64_t v36 = sub_10001736C(a8, a10);
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
      os_log_type_t v38 = static os_log_type_t.debug.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = swift_slowAlloc(22LL, -1LL);
        *(_DWORD *)uint64_t v39 = 134218240;
        unint64_t v53 = a7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v39 + 4, v39 + 12);
        uint64_t result = sub_100164D3C(a7, a8, a10);
        *(_WORD *)(v39 + 12) = 2048;
        if (a11 < v17)
        {
          __break(1u);
          return result;
        }

        unint64_t v53 = a11 - v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v39 + 14, v39 + 22);
        _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "KeyGenerationHint hint.index:%llu saved %llu ratchet iterations",  (uint8_t *)v39,  0x16u);
        swift_slowDealloc(v39, -1LL, -1LL);

        sub_100164D3C(a7, a8, a10);
      }

      else
      {
        sub_100164D3C(a7, a8, a10);
        sub_100164D3C(a7, a8, a10);
      }

      uint64_t v20 = a8;
      unint64_t v21 = a10;
    }

    else
    {
      sub_10001736C(a5, a6);
      sub_100018BE4(a1, a2);
      sub_10001736C(a3, a4);
      sub_100164D20(v22, a8, a10);
      if (qword_10099B6E8 != -1) {
        swift_once(&qword_10099B6E8, sub_100651020);
      }
      uint64_t v28 = type metadata accessor for Logger(0LL);
      sub_10000A720(v28, (uint64_t)qword_100A2AFE8);
      uint64_t v29 = sub_10001736C(a8, a10);
      uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v31 = static os_log_type_t.default.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc(22LL, -1LL);
        *(_DWORD *)uint64_t v32 = 134218240;
        unint64_t v53 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v32 + 4, v32 + 12);
        sub_100164D3C(v22, a8, a10);
        *(_WORD *)(v32 + 12) = 2048;
        unint64_t v33 = a11;
        unint64_t v53 = a11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v32 + 14, v32 + 22);
        _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Ignoring KeyGenerationHint: hint.index (%llu) > initialRatchetsToSkip(%llu)",  (uint8_t *)v32,  0x16u);
        swift_slowDealloc(v32, -1LL, -1LL);

        sub_100164D3C(v22, a8, a10);
      }

      else
      {
        sub_100164D3C(v22, a8, a10);
        sub_100164D3C(v22, a8, a10);

        unint64_t v33 = a11;
      }

      unint64_t v17 = v33 - 1;
      uint64_t v20 = a5;
      sub_10001736C(a5, a6);
      unint64_t v21 = a6;
    }
  }

  sub_10001736C(v20, v21);
  uint64_t v40 = sub_1004DA16C(v20, v21, v17);
  if (v45)
  {
    sub_100164D3C(v22, a8, a10);
    sub_100016F9C(a5, a6);
    sub_100016F9C(a3, a4);
    sub_1000182F0(v46, a2);
    sub_100016F9C(v20, v21);
    sub_1000182F0(v46, a2);
    sub_100016F9C(a3, a4);
    sub_100016F9C(a5, a6);
    return sub_100016F9C(v20, v21);
  }

  else
  {
    uint64_t v42 = v40;
    unint64_t v43 = v41;
    sub_100164D3C(v22, a8, a10);
    sub_100016F9C(v20, v21);
    sub_10001736C(v42, v43);
    sub_100016F9C(v20, v21);
    sub_100018BE4(v46, a2);
    sub_10001736C(a3, a4);
    sub_10001736C(a5, a6);
    sub_10001736C(v42, v43);
    sub_100016F9C(a5, a6);
    sub_100016F9C(a3, a4);
    sub_1000182F0(v46, a2);
    sub_100016F9C(v42, v43);
    sub_1000182F0(v46, a2);
    sub_100016F9C(a3, a4);
    sub_100016F9C(a5, a6);
    uint64_t result = sub_100016F9C(v42, v43);
    *a9 = v46;
    a9[1] = a2;
    a9[2] = a3;
    a9[3] = a4;
    a9[4] = a5;
    a9[5] = a6;
    a9[6] = a11;
    a9[7] = v42;
    a9[8] = v43;
  }

  return result;
}

unint64_t sub_10045C8A8()
{
  unint64_t result = qword_1009AED58;
  if (!qword_1009AED58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806C0C, &type metadata for TokenSequenceError);
    atomic_store(result, (unint64_t *)&qword_1009AED58);
  }

  return result;
}

ValueMetadata *type metadata accessor for UnpairCommandPayload()
{
  return &type metadata for UnpairCommandPayload;
}

unint64_t sub_10045C8FC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10045C928();
  unint64_t result = sub_10045C96C();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10045C928()
{
  unint64_t result = qword_1009AED60;
  if (!qword_1009AED60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803418, &type metadata for UnpairCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009AED60);
  }

  return result;
}

unint64_t sub_10045C96C()
{
  unint64_t result = qword_1009AED68;
  if (!qword_1009AED68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803440, &type metadata for UnpairCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009AED68);
  }

  return result;
}

uint64_t initializeWithCopy for ManagedCBPeripheralManager(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

void *assignWithCopy for ManagedCBPeripheralManager(void *a1, void *a2)
{
  return a1;
}

uint64_t assignWithTake for ManagedCBPeripheralManager(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedCBPeripheralManager(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedCBPeripheralManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralManager()
{
  return &type metadata for ManagedCBPeripheralManager;
}

void *sub_10045CAE8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for MACAddress(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v31 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t result = _swiftEmptyArrayStorage;
  uint64_t v39 = _swiftEmptyArrayStorage;
  uint64_t v11 = a1[2];
  if (v11)
  {
    v30[2] = v2;
    swift_bridgeObjectRetain(a1);
    v30[1] = a1;
    __int128 v12 = a1 + 9;
    v30[4] = v7;
    v30[5] = v6;
    v30[3] = v8;
    uint64_t v35 = v11;
    uint64_t v13 = a1[6];
    unint64_t v14 = *(v12 - 2);
    uint64_t v15 = *(v12 - 1);
    unint64_t v16 = *v12;
    sub_10001736C(*(v12 - 3), v14);
    uint64_t v38 = v15;
    sub_10001736C(v15, v16);
    uint64_t v17 = Data.init(stringLiteral:)(12592LL, 0xE200000000000000LL);
    uint64_t v19 = v18;
    sub_10001736C(v13, v14);
    unint64_t v33 = v14;
    uint64_t v34 = v13;
    unint64_t v20 = v14;
    uint64_t v21 = v7;
    uint64_t v22 = v8;
    MACAddress.init(addressToSanitize:type:)(v13, v20, 1LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v21) != 1)
    {
      __int128 v23 = v31;
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v31, v6, v21);
      uint64_t v25 = MACAddress.data.getter(v24);
      uint64_t v26 = v21;
      uint64_t v28 = v27;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v26);
      v40[5] = v17;
      v40[6] = v19;
      v40[3] = &type metadata for Data;
      v40[4] = &protocol witness table for Data;
      uint64_t v36 = v28;
      uint64_t v37 = v25;
      v40[0] = v25;
      v40[1] = v28;
      uint64_t v29 = (char *)&loc_10045CCF4 + dword_10045D19C[sub_100012ED8(v40, (uint64_t)&type metadata for Data)[1] >> 62];
      uint64_t v32 = v12 + 6;
      __asm { BR              X9 }
    }

    __break(1u);
    JUMPOUT(0x10045D0ECLL);
  }

  return result;
}

uint64_t sub_10045D1BC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v15 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_10045D314(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v5 = result + 56;
  uint64_t v4 = *(void *)(result + 56);
  uint64_t v20 = a2;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & v4;
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v16 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v16 >= v9) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    ++v3;
    if (!v17)
    {
      int64_t v3 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v5 + 8 * v3);
      if (!v17)
      {
        int64_t v3 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v3);
        if (!v17)
        {
          int64_t v3 = v16 + 3;
          if (v16 + 3 >= v9) {
            goto LABEL_23;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v3);
          if (!v17) {
            break;
          }
        }
      }
    }

void sub_10045D4A4(uint64_t a1, void *a2)
{
}

void sub_10045D4C8( uint64_t a1, void *a2, unint64_t *a3, void *a4, unint64_t *a5, void (*a6)(id *, id))
{
  uint64_t v7 = a1;
  v35[1] = a2;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v11 = __CocoaSet.makeIterator()(a1);
    uint64_t v12 = sub_100022898(0LL, a3, a4);
    uint64_t v13 = sub_10014EFD4(a5, a3, a4);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v36, v11, v12, v13);
    uint64_t v7 = v36[0];
    uint64_t v33 = v36[1];
    uint64_t v14 = v36[2];
    uint64_t v15 = v36[3];
    unint64_t v16 = v36[4];
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v17 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v33 = a1 + 56;
    uint64_t v14 = ~v17;
    uint64_t v18 = -v17;
    if (v18 < 64) {
      uint64_t v19 = ~(-1LL << v18);
    }
    else {
      uint64_t v19 = -1LL;
    }
    unint64_t v16 = v19 & *(void *)(a1 + 56);
  }

  int64_t v20 = (unint64_t)(v14 + 64) >> 6;
  if (v7 < 0) {
    goto LABEL_12;
  }
  while (1)
  {
    if (v16)
    {
      uint64_t v21 = (v16 - 1) & v16;
      unint64_t v22 = __clz(__rbit64(v16)) | (v15 << 6);
      uint64_t v23 = v15;
      goto LABEL_31;
    }

    int64_t v28 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v28 >= v20) {
      goto LABEL_34;
    }
    unint64_t v29 = *(void *)(v33 + 8 * v28);
    uint64_t v23 = v15 + 1;
    if (!v29)
    {
      uint64_t v23 = v15 + 2;
      if (v15 + 2 >= v20) {
        goto LABEL_34;
      }
      unint64_t v29 = *(void *)(v33 + 8 * v23);
      if (!v29)
      {
        uint64_t v23 = v15 + 3;
        if (v15 + 3 >= v20) {
          goto LABEL_34;
        }
        unint64_t v29 = *(void *)(v33 + 8 * v23);
        if (!v29)
        {
          uint64_t v23 = v15 + 4;
          if (v15 + 4 >= v20) {
            goto LABEL_34;
          }
          unint64_t v29 = *(void *)(v33 + 8 * v23);
          if (!v29)
          {
            uint64_t v23 = v15 + 5;
            if (v15 + 5 >= v20) {
              goto LABEL_34;
            }
            unint64_t v29 = *(void *)(v33 + 8 * v23);
            if (!v29)
            {
              uint64_t v30 = v15 + 6;
              while (v20 != v30)
              {
                unint64_t v29 = *(void *)(v33 + 8 * v30++);
                if (v29)
                {
                  uint64_t v23 = v30 - 1;
                  goto LABEL_30;
                }
              }

uint64_t sub_10045D778(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = type metadata accessor for ManagedCBPeripheralManager.KeyType(0LL);
  v2[13] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[14] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[15] = swift_task_alloc(v5);
  v2[16] = swift_task_alloc(v5);
  v2[17] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  v2[18] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[19] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[20] = swift_task_alloc(v8);
  v2[21] = swift_task_alloc(v8);
  return swift_task_switch(sub_10045D82C, 0LL, 0LL);
}

uint64_t sub_10045D82C()
{
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v1 = v0 + 16;
  uint64_t v2 = (void *)(v0 + 232);
  uint64_t v3 = (void *)(v0 + 64);
  uint64_t v4 = *(void **)(v0 + 88);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 176) = sub_10000A720(v5, (uint64_t)qword_100A2AB30);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  int64_t v9 = *(void **)(v0 + 88);
  if (v8)
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v10 = 138543362;
    *(void *)(v0 + 56) = v9;
    id v12 = v9;
    uint64_t v3 = (void *)(v0 + 64);
    uint64_t v2 = (void *)(v0 + 232);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v10 + 4, v10 + 12);
    *uint64_t v11 = v9;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "bluetoothConnectionKeys for request: %{public}@", v10, 0xCu);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    uint64_t v14 = v10;
    uint64_t v1 = v0 + 16;
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
  }

  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0x7365547265646E75LL;
  *(void *)(v0 + 24) = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(v2, v1, sub_10000A71C, 0LL, &type metadata for Bool);
  uint64_t v15 = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 232) & 1) != 0) {
    goto LABEL_12;
  }
  type metadata accessor for Transaction(0LL);
  uint64_t v16 = static Transaction.currentNSXPCConnection.getter();
  if (!v16)
  {
    unint64_t v43 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v44 = static os_log_type_t.error.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unable to get current NSXPCConnection!", v45, 2u);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    type metadata accessor for SPCBPeripheralError(0LL);
    uint64_t v47 = v46;
    *(void *)(v0 + 48) = 1LL;
    unint64_t v48 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v49 = sub_100007864( &qword_10099C340,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E3AFC);
    uint64_t v50 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 40), v0 + 48, v48, v47, v49);
    swift_willThrow(v50);
    goto LABEL_21;
  }

  uint64_t v17 = (void *)v16;
  unint64_t v18 = sub_100463A90();
  if ((NSXPCConnection.hasEntitlement<A>(_:)(v18, &type metadata for ManagedCBPeripheralManagerEntitlement, v18) & 1) == 0)
  {
    type metadata accessor for SPCBPeripheralError(0LL);
    uint64_t v52 = v51;
    *uint64_t v3 = 1LL;
    unint64_t v53 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v54 = sub_100007864( &qword_10099C340,  (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError,  (uint64_t)&unk_1007E3AFC);
    uint64_t v55 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 32), v3, v53, v52, v54);
    swift_willThrow(v55);

LABEL_21:
    uint64_t v56 = *(void *)(v0 + 160);
    uint64_t v58 = *(void *)(v0 + 128);
    uint64_t v57 = *(void *)(v0 + 136);
    uint64_t v59 = *(void *)(v0 + 120);
    swift_task_dealloc(*(void *)(v0 + 168));
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

LABEL_12:
  uint64_t v20 = *(void *)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 168);
  uint64_t v22 = *(void *)(v0 + 144);
  uint64_t v21 = *(void *)(v0 + 152);
  static SystemInfo.lockState.getter(v15);
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))( v20,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v22);
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v19, v20, v22, v23);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v25(v20, v22);
  uint64_t v26 = ((uint64_t (*)(uint64_t, uint64_t))v25)(v19, v22);
  if ((v24 & 1) != 0)
  {
    id v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v29 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "bluetoothConnectionKeys called while in .beforeFirstUnlock state",  v29,  2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    id v30 = objc_allocWithZone(&OBJC_CLASS___SPCBPeripheralKeyResponse);
    sub_100022898(0LL, &qword_1009AEDD8, &OBJC_CLASS___SPPeripheral_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v32 = [v30 initWithPeripherals:isa];

    uint64_t v33 = *(void *)(v0 + 160);
    uint64_t v35 = *(void *)(v0 + 128);
    uint64_t v34 = *(void *)(v0 + 136);
    uint64_t v36 = *(void *)(v0 + 120);
    swift_task_dealloc(*(void *)(v0 + 168));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(id))(v0 + 8))(v32);
  }

  else
  {
    uint64_t v38 = sub_100012ED8(*(void **)(v0 + 96), *(void *)(*(void *)(v0 + 96) + 24LL));
    uint64_t v40 = *v38;
    uint64_t v39 = v38[1];
    uint64_t v41 = v38[2];
    uint64_t v42 = (void *)swift_task_alloc(dword_1009B9084);
    *(void *)(v0 + 184) = v42;
    void *v42 = v0;
    v42[1] = sub_10045DE2C;
    return sub_100632724(v40, v39, v41);
  }

uint64_t sub_10045DE2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 192LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10045DE88, 0LL, 0LL);
}

uint64_t sub_10045DE88()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 96);
  id v3 = [*(id *)(v0 + 88) requestParameters];
  uint64_t v4 = sub_100022898(0LL, &qword_1009AEDA8, &OBJC_CLASS___SPCBPeripheralKeyRequestParameters_ptr);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  *(void *)(v0 + 72) = v5;
  uint64_t v6 = swift_task_alloc(32LL);
  *(void *)(v0 + 200) = v6;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v6 + 24) = v1;
  os_log_type_t v7 = (void *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  *(void *)(v0 + 208) = v7;
  uint64_t v8 = sub_100004AEC(&qword_1009AEDC0);
  uint64_t v9 = sub_100004AEC(&qword_1009AEDC8);
  unint64_t v10 = sub_100463B40();
  *os_log_type_t v7 = v0;
  v7[1] = sub_10045DF88;
  return Sequence.asyncMap<A>(_:)(&unk_1009AEDB8, v6, v8, v9, v10);
}

uint64_t sub_10045DF88(uint64_t a1)
{
  id v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 208LL);
  v3[27] = a1;
  v3[28] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = v3[25];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v5);
  if (v1) {
    uint64_t v6 = sub_10045E720;
  }
  else {
    uint64_t v6 = sub_10045E018;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10045E018()
{
  uint64_t v5 = *(void *)(v1 + 216);
  uint64_t v64 = *(void *)(v5 + 16);
  if (v64)
  {
    unint64_t v6 = 0LL;
    uint64_t v68 = *(void *)(v1 + 112);
    uint64_t v65 = v5 + 32;
    os_log_type_t v7 = (os_log_s *)_swiftEmptyDictionarySingleton;
    uint64_t v63 = *(void *)(v1 + 216);
    do
    {
      if (v6 >= *(void *)(v5 + 16)) {
        goto LABEL_56;
      }
      uint64_t v3 = *(void *)(v65 + 16 * v6 + 8);
      if ((unint64_t)v3 >> 62)
      {
        if (v3 < 0) {
          uint64_t v0 = *(os_log_s **)(v65 + 16 * v6 + 8);
        }
        else {
          uint64_t v0 = (os_log_s *)(v3 & 0xFFFFFFFFFFFFFF8LL);
        }
        swift_bridgeObjectRetain_n(*(void *)(v65 + 16 * v6 + 8), 2LL);
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v0);
        swift_bridgeObjectRelease();
        unint64_t v66 = v6;
        if (v8)
        {
LABEL_7:
          uint64_t v9 = 0LL;
          unint64_t v70 = v3 & 0xC000000000000001LL;
          uint64_t v69 = v3;
          while (1)
          {
            id v12 = v70
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v3)
                : *(id *)(v3 + 8 * v9 + 32);
            uint64_t v13 = v12;
            uint64_t v2 = (uint8_t *)(v9 + 1);
            if (__OFADD__(v9, 1LL)) {
              break;
            }
            id v14 = [v12 userIdentifier];
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

            id v15 = [v13 beaconIdentifier];
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

            if (*((void *)v7 + 2) && (unint64_t v16 = sub_10030D720(*(void *)(v1 + 136)), (v17 & 1) != 0))
            {
              uint64_t v18 = *(void *)(v1 + 128);
              uint64_t v19 = *(void **)(*((void *)v7 + 7) + 8 * v16);
              sub_10001DC4C(*(void *)(v1 + 136), v18, type metadata accessor for ManagedCBPeripheralManager.KeyType);
              unint64_t v4 = v19;
              id v20 = sub_1004628D8((void *)v4, v13);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
              uint64_t v72 = v7;
              uint64_t v1 = v67;
              sub_10005EA2C((uint64_t)v20, v18, isUniquelyReferenced_nonNull_native);
              os_log_type_t v7 = v72;
              swift_bridgeObjectRelease();
              sub_100018C68(v18, type metadata accessor for ManagedCBPeripheralManager.KeyType);
            }

            else
            {
              uint64_t v22 = *(void *)(v1 + 120);
              sub_10001DC4C(*(void *)(v1 + 136), v22, type metadata accessor for ManagedCBPeripheralManager.KeyType);
              unint64_t v4 = v13;
              uint64_t v3 = swift_isUniquelyReferenced_nonNull_native(v7);
              uint64_t v72 = v7;
              uint64_t v23 = v22;
              uint64_t v0 = v7;
              unint64_t v25 = sub_10030D720(v23);
              uint64_t v26 = *((void *)v7 + 2);
              BOOL v27 = (v24 & 1) == 0;
              uint64_t v28 = v26 + v27;
              if (__OFADD__(v26, v27)) {
                goto LABEL_54;
              }
              char v29 = v24;
              if (*((void *)v7 + 3) >= v28)
              {
                if ((v3 & 1) == 0)
                {
                  uint64_t v0 = (os_log_s *)&v72;
                  sub_1000663E8();
                  os_log_type_t v7 = v72;
                }
              }

              else
              {
                uint64_t v30 = *(void *)(v1 + 120);
                sub_100052C38(v28, v3);
                os_log_type_t v7 = v72;
                uint64_t v0 = v72;
                unint64_t v31 = sub_10030D720(v30);
                if ((v29 & 1) != (v32 & 1)) {
                  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(void *)(v1 + 104));
                }
                unint64_t v25 = v31;
              }

              uint64_t v3 = (uint64_t)type metadata accessor for ManagedCBPeripheralManager.KeyType;
              if ((v29 & 1) != 0)
              {
                uint64_t v10 = *((void *)v7 + 7);

                *(void *)(v10 + 8 * v25) = v4;
              }

              else
              {
                uint64_t v33 = *(void *)(v1 + 120);
                *((void *)v7 + (v25 >> 6) + 8) |= 1LL << v25;
                sub_10001DC4C( v33,  *((void *)v7 + 6) + *(void *)(v68 + 72) * v25,  type metadata accessor for ManagedCBPeripheralManager.KeyType);
                *(void *)(*((void *)v7 + 7) + 8 * v25) = v4;
                uint64_t v34 = *((void *)v7 + 2);
                BOOL v35 = __OFADD__(v34, 1LL);
                uint64_t v36 = v34 + 1;
                if (v35) {
                  goto LABEL_55;
                }
                *((void *)v7 + 2) = v36;
              }

              uint64_t v11 = *(void *)(v1 + 120);
              swift_bridgeObjectRelease();
              sub_100018C68(v11, type metadata accessor for ManagedCBPeripheralManager.KeyType);
            }

            uint64_t v0 = *(os_log_s **)(v1 + 136);

            sub_100018C68((uint64_t)v0, type metadata accessor for ManagedCBPeripheralManager.KeyType);
            ++v9;
            uint64_t v3 = v69;
          }

          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
      }

      else
      {
        uint64_t v8 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(*(void *)(v65 + 16 * v6 + 8));
        unint64_t v66 = v6;
        if (v8) {
          goto LABEL_7;
        }
      }

uint64_t sub_10045E720()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10045E78C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  void v4[4] = a4;
  v4[2] = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v4[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v4[6] = v7;
  uint64_t v8 = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a2;
  v4[7] = v8;
  void v4[8] = v9;
  return swift_task_switch(sub_10045E7F8, 0LL, 0LL);
}

uint64_t sub_10045E7F8()
{
  id v1 = [*(id *)(v0 + 64) vendorIdentifierList];
  uint64_t v2 = sub_100022898(0LL, (unint64_t *)&qword_1009A9C80, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    char v29 = (void *)v0;
    if (v4) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v13 = v29[7];
    id v14 = (void *)v29[8];
    uint64_t v15 = v29[6];
    uint64_t v16 = v29[4];
    id v17 = objc_msgSend(v14, "sessionKey", v29[5]);
    id v18 = [v17 userIdentifier];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);
    id v19 = [v14 sessionKey];
    id v20 = [v19 bundleId];

    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v23 = v22;

    uint64_t v24 = sub_1006F1DB0((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    unint64_t v25 = sub_10045ECBC(v13, v16, v21, v23, v24);
    v29[9] = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v28);
    uint64_t v26 = dword_1009AEDF4;
    swift_bridgeObjectRetain(v25);
    BOOL v27 = (void *)swift_task_alloc(v26);
    v29[10] = v27;
    *BOOL v27 = v29;
    v27[1] = sub_10045EAD0;
    return sub_10045F5C0((uint64_t)v25);
  }

  if (v3 < 0) {
    uint64_t v12 = v3;
  }
  else {
    uint64_t v12 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v3);
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v12);
  swift_bridgeObjectRelease();
  char v29 = (void *)v0;
  if (!v4) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = sub_100033364(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001LL) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * i + 32);
      }
      uint64_t v8 = v7;
      unsigned int v9 = [v7 unsignedIntValue];

      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        sub_100033364(v10 > 1, v11 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v11 + 1;
      *((_DWORD *)&_swiftEmptyArrayStorage[4] + v11) = v9;
    }

    goto LABEL_16;
  }

  __break(1u);
  return result;
}

uint64_t sub_10045EAD0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 80);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v7 = *(void *)(v4 + 56);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    *(void *)(v4 + 88) = a1;
    return swift_task_switch(sub_10045EB68, 0LL, 0LL);
  }

uint64_t sub_10045EB68()
{
  id v1 = [*(id *)(v0 + 64) sessionKey];
  *(void *)(v0 + 96) = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_1009AEDFC);
  *(void *)(v0 + 104) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10045EBDC;
  return sub_1004602D8((uint64_t)v1, *(void *)(v0 + 88), *(void *)(v0 + 72));
}

uint64_t sub_10045EBDC(uint64_t a1)
{
  uint64_t v3 = *(void **)(*(void *)v1 + 96LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_task_switch(sub_10045EC5C, 0LL, 0LL);
}

uint64_t sub_10045EC5C()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void **)(v0 + 16);
  *uint64_t v3 = [*(id *)(v0 + 64) sessionKey];
  v3[1] = v1;
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_10045ECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v90 = a5;
  uint64_t v89 = a2;
  uint64_t v97 = a1;
  uint64_t v108 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  unint64_t v7 = *((void *)v108 - 1);
  uint64_t v8 = __chkstk_darwin(v108);
  uint64_t v106 = (uint64_t)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v91 = (uint64_t)&v88 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v107 = (uint64_t)&v88 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  Class v100 = (char *)&v88 - v15;
  __chkstk_darwin(v14);
  id v17 = (char *)&v88 - v16;
  uint64_t v96 = type metadata accessor for UUID(0LL);
  uint64_t v18 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  id v20 = (uint64_t *)((char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v21._countAndFlagsBits = 0x6C7070612E6D6F63LL;
  v21._object = (void *)0xEA00000000002E65LL;
  LOBYTE(v22) = String.hasPrefix(_:)(v21);
  if ((a3 != 0xD000000000000014LL || a4 != 0x8000000100863360LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, 0xD000000000000014LL, 0x8000000100863360LL, 0LL) & 1) == 0)
  {
    uint64_t v24 = v96;
    (*(void (**)(void *, uint64_t, uint64_t))(v18 + 16))(v20, v97, v96);
LABEL_9:
    (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v24);
    uint64_t v26 = 0LL;
    BOOL v92 = 0;
    uint64_t v27 = v89;
    uint64_t v18 = v107;
    if ((v22 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  uint64_t v23 = *(void *)(v90 + 16);
  uint64_t v24 = v96;
  (*(void (**)(void *, uint64_t, uint64_t))(v18 + 16))(v20, v97, v96);
  if (v23) {
    goto LABEL_9;
  }
  if (qword_10099B4B8 != -1) {
LABEL_46:
  }
    swift_once(&qword_10099B4B8, sub_100462F2C);
  uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_1009AED70);
  uint64_t v26 = static UUID.== infix(_:_:)(v20, v25);
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v24);
  if ((v22 & 1) == 0)
  {
    BOOL v92 = 0;
    uint64_t v27 = v89;
    uint64_t v18 = v107;
    uint64_t v24 = *(void *)(v89 + 16);
    if (v24) {
      goto LABEL_12;
    }
    return _swiftEmptyDictionarySingleton;
  }

  uint64_t v27 = v89;
  uint64_t v18 = v107;
LABEL_10:
  BOOL v92 = *(void *)(v90 + 16) == 0LL;
LABEL_11:
  uint64_t v24 = *(void *)(v27 + 16);
  if (!v24) {
    return _swiftEmptyDictionarySingleton;
  }
LABEL_12:
  uint64_t v28 = v27 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  uint64_t v102 = *(void *)(v7 + 72);
  swift_bridgeObjectRetain(v27);
  unsigned int v103 = _swiftEmptyDictionarySingleton;
  *((void *)&v29 + 1) = 2LL;
  __int128 v99 = xmmword_1007E67D0;
  *(void *)&__int128 v29 = 141559043LL;
  __int128 v94 = v29;
  uint64_t v93 = (char *)&type metadata for Any + 8;
  uint64_t v30 = (uint64_t)v100;
  uint64_t v95 = v17;
  while (1)
  {
    uint64_t v105 = v28;
    sub_10001DC4C(v28, (uint64_t)v17, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    uint64_t v33 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v34 = swift_allocObject(v33, 72LL, 7LL);
    *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = v99;
    int v35 = *(_DWORD *)&v17[v108[9]];
    *(void *)(v34 + 56) = &type metadata for UInt32;
    *(void *)(v34 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v34 + 32) = v35;
    uint64_t v104 = String.init(format:_:)(2016948261LL, 0xE400000000000000LL, v34);
    unint64_t v37 = v36;
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    uint64_t v39 = sub_10000A720(v38, (uint64_t)qword_100A2AB30);
    sub_10001DC4C((uint64_t)v17, v30, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_10001DC4C((uint64_t)v17, v18, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRetain(v37);
    uint64_t v101 = v39;
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.info.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc(52LL, -1LL);
      uint64_t v98 = swift_slowAlloc(96LL, -1LL);
      v109[0] = v98;
      *(_DWORD *)uint64_t v43 = v94;
      *(void *)(v43 + 4) = 1752392040LL;
      *(_WORD *)(v43 + 12) = 2081;
      uint64_t v44 = v26;
      uint64_t v45 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v46 = v24;
      uint64_t v47 = v96;
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v96, v45);
      *(void *)(v43 + 14) = sub_1003F11D4(v48, v49, v109);
      swift_bridgeObjectRelease();
      sub_100018C68(v30, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      *(_WORD *)(v43 + 22) = 2160;
      *(void *)(v43 + 24) = 1752392040LL;
      *(_WORD *)(v43 + 32) = 2081;
      uint64_t v50 = v47;
      uint64_t v24 = v46;
      uint64_t v51 = v45;
      id v17 = v95;
      uint64_t v26 = v44;
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v50, v51);
      *(void *)(v43 + 34) = sub_1003F11D4(v52, v53, v109);
      swift_bridgeObjectRelease();
      sub_100018C68(v107, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      *(_WORD *)(v43 + 42) = 2082;
      swift_bridgeObjectRetain(v37);
      *(void *)(v43 + 44) = sub_1003F11D4(v104, v37, v109);
      swift_bridgeObjectRelease_n(v37, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Process user: %{private,mask.hash}s beacon: %{private,mask.hash}s (vid: %{public}s)",  (uint8_t *)v43,  0x34u);
      uint64_t v54 = v98;
      swift_arrayDestroy(v98, 3LL, v93);
      uint64_t v18 = v107;
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);

      if ((v26 & 1) != 0) {
        goto LABEL_30;
      }
    }

    else
    {
      sub_100018C68(v30, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      sub_100018C68(v18, type metadata accessor for ManagedCBPeripheralBeaconInfo);

      swift_bridgeObjectRelease_n(v37, 2LL);
      if ((v26 & 1) != 0) {
        goto LABEL_30;
      }
    }

    uint64_t v55 = static UUID.== infix(_:_:)(v97, v17);
    if ((v55 & 1) == 0)
    {
      id v57 = (os_log_s *)Logger.logObject.getter(v55);
      os_log_type_t v58 = static os_log_type_t.info.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v59 = 0;
        uint64_t v60 = v57;
        os_log_type_t v61 = v58;
        uint64_t v62 = "Skipping beacon not belonging to allowed user session";
        goto LABEL_27;
      }

uint64_t sub_10045F5C0(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for BeaconIdentifier(0LL);
  v2[7] = v3;
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[8] = swift_task_alloc(v4);
  v2[9] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  v2[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[11] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[12] = swift_task_alloc(v7);
  v2[13] = swift_task_alloc(v7);
  v2[14] = swift_task_alloc(v7);
  v2[15] = swift_task_alloc(v7);
  return swift_task_switch(sub_10045F67C, 0LL, 0LL);
}

uint64_t sub_10045F67C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void **)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 40);
  char v6 = *(_BYTE *)(v5 + 32);
  *(_BYTE *)(v0 + 200) = v6;
  uint64_t v7 = -1LL;
  uint64_t v8 = -1LL << v6;
  if (-(-1LL << v6) < 64) {
    uint64_t v7 = ~(-1LL << -(char)(-1LL << v6));
  }
  unint64_t v9 = v7 & *(void *)(v5 + 64);
  *(void *)(v0 + 128) = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(v5);
  if (v9)
  {
    uint64_t v11 = 0LL;
    unint64_t v12 = __clz(__rbit64(v9));
    uint64_t v13 = (v9 - 1) & v9;
LABEL_5:
    *(void *)(v0 + 136) = v11;
    *(void *)(v0 + sub_100454668(v0 + 144) = v13;
    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = v10[6];
    uint64_t v18 = *(void *)(v2 + 72);
    *(void *)(v0 + 152) = v18;
    sub_10001DC4C(v17 + v18 * v12, v14, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_100463BD0(v14, v15);
    uint64_t v19 = sub_100012ED8(v3, v3[3]);
    uint64_t v20 = type metadata accessor for UUID(0LL);
    *(void *)(v0 + 160) = v20;
    Swift::String v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL);
    *(void *)(v0 + 168) = v21;
    v21(v16, v15, v20);
    v21(v16 + *(int *)(v4 + 20), v15 + *(int *)(v1 + 20), v20);
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v24 = v19[2];
    uint64_t v25 = (void *)swift_task_alloc(dword_1009B905C);
    *(void *)(v0 + 176) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_10045F914;
    return sub_100635F34(*(void *)(v0 + 72), v22, v23, v24);
  }

  unint64_t v27 = 63 - v8;
  if ((unint64_t)(63 - v8) > 0x7F)
  {
    unint64_t v28 = v10[9];
    if (v28)
    {
      uint64_t v11 = 1LL;
LABEL_9:
      uint64_t v13 = (v28 - 1) & v28;
      unint64_t v12 = __clz(__rbit64(v28)) + (v11 << 6);
      goto LABEL_5;
    }

    if (v27 >= 0xC0)
    {
      unint64_t v28 = v10[10];
      if (v28)
      {
        uint64_t v11 = 2LL;
        goto LABEL_9;
      }

      if (v27 >= 0x100)
      {
        unint64_t v28 = v10[11];
        if (v28)
        {
          uint64_t v11 = 3LL;
          goto LABEL_9;
        }

        if (v27 >= 0x140)
        {
          unint64_t v28 = v10[12];
          if (v28)
          {
            uint64_t v11 = 4LL;
            goto LABEL_9;
          }

          if (v27 >= 0x180)
          {
            unint64_t v28 = v10[13];
            if (v28)
            {
              uint64_t v11 = 5LL;
              goto LABEL_9;
            }

            uint64_t v29 = 0LL;
            uint64_t v30 = v27 >> 6;
            if (v30 <= 6) {
              uint64_t v30 = 6LL;
            }
            uint64_t v31 = v30 - 6;
            while (v31 != v29)
            {
              unint64_t v28 = v10[v29++ + 14];
              if (v28)
              {
                uint64_t v11 = v29 + 5;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v32 = *(void *)(v0 + 112);
  uint64_t v33 = *(void *)(v0 + 120);
  uint64_t v35 = *(void *)(v0 + 96);
  uint64_t v34 = *(void *)(v0 + 104);
  uint64_t v37 = *(void *)(v0 + 64);
  uint64_t v36 = *(void *)(v0 + 72);
  swift_release();
  swift_task_dealloc(v33);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyDictionarySingleton);
}

uint64_t sub_10045F914(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 176);
  uint64_t v5 = *(void *)(*v2 + 72);
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v1;
  swift_task_dealloc(v4);
  sub_100018C68(v5, type metadata accessor for BeaconIdentifier);
  if (v1) {
    char v6 = sub_10045FD60;
  }
  else {
    char v6 = sub_10045F994;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10045F994()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 104);
  sub_10001DC4C(*(void *)(v0 + 112), v2, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(void *)(v0 + 32) = v1;
  unint64_t v5 = sub_10030D7F4(v2);
  uint64_t v6 = *(void *)(v1 + 16);
  BOOL v7 = (v4 & 1) == 0;
  uint64_t result = v6 + v7;
  if (__OFADD__(v6, v7))
  {
    __break(1u);
    goto LABEL_33;
  }

  char v9 = v4;
  if (*(void *)(*(void *)(v0 + 128) + 24LL) >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_10006689C();
    }
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 104);
    sub_10005359C(result, isUniquelyReferenced_nonNull_native);
    unint64_t v11 = sub_10030D7F4(v10);
    if ((v9 & 1) != (v12 & 1)) {
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(void *)(v0 + 80));
    }
    unint64_t v5 = v11;
  }

  uint64_t v13 = *(void **)(v0 + 32);
  uint64_t v14 = *(void *)(v0 + 184);
  if ((v9 & 1) != 0)
  {
    uint64_t v15 = v13[7];
    swift_bridgeObjectRelease();
    *(void *)(v15 + 8 * v5) = v14;
    goto LABEL_12;
  }

  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v17 = *(void *)(v0 + 104);
  v13[(v5 >> 6) + 8] |= 1LL << v5;
  uint64_t result = sub_10001DC4C(v17, v13[6] + v16 * v5, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  *(void *)(v13[7] + 8 * v5) = v14;
  uint64_t v18 = v13[2];
  BOOL v19 = __OFADD__(v18, 1LL);
  uint64_t v20 = v18 + 1;
  if (v19)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  v13[2] = v20;
LABEL_12:
  uint64_t v22 = *(void *)(v0 + 104);
  uint64_t v21 = *(void *)(v0 + 112);
  swift_bridgeObjectRelease();
  sub_100018C68(v22, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  uint64_t result = sub_100018C68(v21, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  int64_t v23 = *(void *)(v0 + 136);
  unint64_t v24 = *(void *)(v0 + 144);
  *(void *)(v0 + 128) = v13;
  if (v24)
  {
    uint64_t v25 = (v24 - 1) & v24;
    unint64_t v26 = __clz(__rbit64(v24)) | (v23 << 6);
    uint64_t result = *(void *)(v0 + 40);
LABEL_14:
    *(void *)(v0 + 136) = v23;
    *(void *)(v0 + sub_100454668(v0 + 144) = v25;
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v28 = *(void *)(v0 + 120);
    uint64_t v29 = *(void *)(v0 + 80);
    uint64_t v30 = *(void *)(v0 + 72);
    uint64_t v31 = *(void **)(v0 + 48);
    uint64_t v32 = *(void *)(v0 + 56);
    uint64_t v33 = *(void *)(result + 48);
    uint64_t v34 = *(void *)(*(void *)(v0 + 88) + 72LL);
    *(void *)(v0 + 152) = v34;
    sub_10001DC4C(v33 + v34 * v26, v28, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_100463BD0(v28, v27);
    uint64_t v35 = sub_100012ED8(v31, v31[3]);
    uint64_t v36 = type metadata accessor for UUID(0LL);
    *(void *)(v0 + 160) = v36;
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16LL);
    *(void *)(v0 + 168) = v37;
    v37(v30, v27, v36);
    v37(v30 + *(int *)(v32 + 20), v27 + *(int *)(v29 + 20), v36);
    uint64_t v38 = *v35;
    uint64_t v39 = v35[1];
    uint64_t v40 = v35[2];
    uint64_t v41 = (void *)swift_task_alloc(dword_1009B905C);
    *(void *)(v0 + 176) = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_10045F914;
    return sub_100635F34(*(void *)(v0 + 72), v38, v39, v40);
  }

  int64_t v42 = v23 + 1;
  if (__OFADD__(v23, 1LL)) {
    goto LABEL_34;
  }
  int64_t v43 = (unint64_t)((1LL << *(_BYTE *)(v0 + 200)) + 63) >> 6;
  uint64_t result = *(void *)(v0 + 40);
  if (v42 >= v43) {
    goto LABEL_31;
  }
  uint64_t v44 = result + 64;
  unint64_t v45 = *(void *)(result + 64 + 8 * v42);
  ++v23;
  if (v45)
  {
LABEL_18:
    uint64_t v25 = (v45 - 1) & v45;
    unint64_t v26 = __clz(__rbit64(v45)) + (v23 << 6);
    goto LABEL_14;
  }

  int64_t v23 = v42 + 1;
  if (v42 + 1 >= v43) {
    goto LABEL_31;
  }
  unint64_t v45 = *(void *)(v44 + 8 * v23);
  if (v45) {
    goto LABEL_18;
  }
  int64_t v23 = v42 + 2;
  if (v42 + 2 >= v43) {
    goto LABEL_31;
  }
  unint64_t v45 = *(void *)(v44 + 8 * v23);
  if (v45) {
    goto LABEL_18;
  }
  int64_t v23 = v42 + 3;
  if (v42 + 3 >= v43) {
    goto LABEL_31;
  }
  unint64_t v45 = *(void *)(v44 + 8 * v23);
  if (v45) {
    goto LABEL_18;
  }
  int64_t v46 = v42 + 4;
  if (v46 >= v43)
  {
LABEL_31:
    uint64_t v48 = *(void *)(v0 + 112);
    uint64_t v47 = *(void *)(v0 + 120);
    uint64_t v50 = *(void *)(v0 + 96);
    uint64_t v49 = *(void *)(v0 + 104);
    uint64_t v52 = *(void *)(v0 + 64);
    uint64_t v51 = *(void *)(v0 + 72);
    swift_release();
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(void *))(v0 + 8))(v13);
  }

  unint64_t v45 = *(void *)(v44 + 8 * v46);
  if (v45)
  {
    int64_t v23 = v46;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v23 = v46 + 1;
    if (__OFADD__(v46, 1LL)) {
      break;
    }
    if (v23 >= v43) {
      goto LABEL_31;
    }
    unint64_t v45 = *(void *)(v44 + 8 * v23);
    ++v46;
    if (v45) {
      goto LABEL_18;
    }
  }

uint64_t sub_10045FD60()
{
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AB30);
  sub_10001DC4C(v2, v3, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  swift_errorRetain(v1);
  uint64_t v5 = swift_errorRetain(v1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 192);
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v11 = *(void *)(v0 + 160);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
    uint64_t v64 = *(void *)(v0 + 112);
    log = v6;
    uint64_t v12 = *(void *)(v0 + 96);
    uint64_t v13 = *(void *)(v0 + 80);
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v14 = *(void *)(v0 + 64);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    os_log_type_t v61 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v62 = swift_slowAlloc(32LL, -1LL);
    uint64_t v65 = v62;
    *(_DWORD *)uint64_t v16 = 141558531;
    *(void *)(v16 + 4) = 1752392040LL;
    *(_WORD *)(v16 + 12) = 2081;
    v10(v14, v12, v11);
    v10(v14 + *(int *)(v15 + 20), v12 + *(int *)(v13 + 20), v11);
    uint64_t v17 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = dispatch thunk of CustomStringConvertible.description.getter(v11, v17);
    *(void *)(v0 + 24) = v18;
    v19._countAndFlagsBits = 47LL;
    v19._object = (void *)0xE100000000000000LL;
    String.append(_:)(v19);
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v17);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void *)(v0 + 16);
    unint64_t v22 = *(void *)(v0 + 24);
    sub_100018C68(v14, type metadata accessor for BeaconIdentifier);
    *(void *)(v16 + 14) = sub_1003F11D4(v21, v22, &v65);
    swift_bridgeObjectRelease();
    sub_100018C68(v12, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    *(_WORD *)(v16 + 22) = 2114;
    swift_errorRetain(v9);
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v16 + 24) = v23;
    *os_log_type_t v61 = v23;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "Failed to retrieve keys for %{private,mask.hash}s error %{public}@",  (uint8_t *)v16,  0x20u);
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v61, 1LL, v24);
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_arrayDestroy(v62, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    swift_errorRelease(v9);
    uint64_t v25 = v64;
  }

  else
  {
    uint64_t v26 = *(void *)(v0 + 112);
    uint64_t v27 = *(void *)(v0 + 96);

    swift_errorRelease(v9);
    swift_errorRelease(v9);
    sub_100018C68(v27, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_errorRelease(v9);
    uint64_t v25 = v26;
  }

  uint64_t result = sub_100018C68(v25, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  int64_t v29 = *(void *)(v0 + 136);
  unint64_t v30 = *(void *)(v0 + 144);
  if (v30)
  {
    uint64_t v31 = (v30 - 1) & v30;
    unint64_t v32 = __clz(__rbit64(v30)) | (v29 << 6);
    uint64_t result = *(void *)(v0 + 40);
LABEL_8:
    *(void *)(v0 + 136) = v29;
    *(void *)(v0 + sub_100454668(v0 + 144) = v31;
    uint64_t v33 = *(void *)(v0 + 112);
    uint64_t v34 = *(void *)(v0 + 120);
    uint64_t v35 = *(void *)(v0 + 80);
    uint64_t v36 = *(void *)(v0 + 72);
    uint64_t v37 = *(void **)(v0 + 48);
    uint64_t v38 = *(void *)(v0 + 56);
    uint64_t v39 = *(void *)(result + 48);
    uint64_t v40 = *(void *)(*(void *)(v0 + 88) + 72LL);
    *(void *)(v0 + 152) = v40;
    sub_10001DC4C(v39 + v40 * v32, v34, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_100463BD0(v34, v33);
    uint64_t v41 = sub_100012ED8(v37, v37[3]);
    uint64_t v42 = type metadata accessor for UUID(0LL);
    *(void *)(v0 + 160) = v42;
    int64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16LL);
    *(void *)(v0 + 168) = v43;
    v43(v36, v33, v42);
    v43(v36 + *(int *)(v38 + 20), v33 + *(int *)(v35 + 20), v42);
    uint64_t v44 = *v41;
    uint64_t v45 = v41[1];
    uint64_t v46 = v41[2];
    uint64_t v47 = (void *)swift_task_alloc(dword_1009B905C);
    *(void *)(v0 + 176) = v47;
    *uint64_t v47 = v0;
    v47[1] = sub_10045F914;
    return sub_100635F34(*(void *)(v0 + 72), v44, v45, v46);
  }

  int64_t v48 = v29 + 1;
  if (__OFADD__(v29, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v49 = *(void *)(v0 + 128);
    int64_t v50 = (unint64_t)((1LL << *(_BYTE *)(v0 + 200)) + 63) >> 6;
    uint64_t result = *(void *)(v0 + 40);
    if (v48 >= v50) {
      goto LABEL_25;
    }
    uint64_t v51 = result + 64;
    unint64_t v52 = *(void *)(result + 64 + 8 * v48);
    ++v29;
    if (v52)
    {
LABEL_12:
      uint64_t v31 = (v52 - 1) & v52;
      unint64_t v32 = __clz(__rbit64(v52)) + (v29 << 6);
      goto LABEL_8;
    }

    int64_t v29 = v48 + 1;
    if (v48 + 1 >= v50) {
      goto LABEL_25;
    }
    unint64_t v52 = *(void *)(v51 + 8 * v29);
    if (v52) {
      goto LABEL_12;
    }
    int64_t v29 = v48 + 2;
    if (v48 + 2 >= v50) {
      goto LABEL_25;
    }
    unint64_t v52 = *(void *)(v51 + 8 * v29);
    if (v52) {
      goto LABEL_12;
    }
    int64_t v29 = v48 + 3;
    if (v48 + 3 >= v50) {
      goto LABEL_25;
    }
    unint64_t v52 = *(void *)(v51 + 8 * v29);
    if (v52) {
      goto LABEL_12;
    }
    int64_t v53 = v48 + 4;
    if (v53 >= v50)
    {
LABEL_25:
      uint64_t v55 = *(void *)(v0 + 112);
      uint64_t v54 = *(void *)(v0 + 120);
      uint64_t v57 = *(void *)(v0 + 96);
      uint64_t v56 = *(void *)(v0 + 104);
      uint64_t v59 = *(void *)(v0 + 64);
      uint64_t v58 = *(void *)(v0 + 72);
      swift_release();
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v49);
    }

    unint64_t v52 = *(void *)(v51 + 8 * v53);
    if (v52)
    {
      int64_t v29 = v53;
      goto LABEL_12;
    }

    while (1)
    {
      int64_t v29 = v53 + 1;
      if (__OFADD__(v53, 1LL)) {
        break;
      }
      if (v29 >= v50) {
        goto LABEL_25;
      }
      unint64_t v52 = *(void *)(v51 + 8 * v29);
      ++v53;
      if (v52) {
        goto LABEL_12;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1004602D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[26] = a3;
  v4[27] = v3;
  _BYTE v4[24] = a1;
  v4[25] = a2;
  uint64_t v5 = sub_100004AEC(&qword_10099D8A0);
  v4[28] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v4[29] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[30] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[31] = swift_task_alloc(v8);
  v4[32] = swift_task_alloc(v8);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  v4[33] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for MACAddress(0LL);
  v4[34] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[35] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[36] = swift_task_alloc(v12);
  v4[37] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for BeaconIdentifier(0LL);
  v4[38] = v13;
  v4[39] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_1009A2438);
  v4[40] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  v4[41] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v4[42] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[43] = swift_task_alloc(v17);
  v4[44] = swift_task_alloc(v17);
  v4[45] = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  v4[46] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v4[47] = v19;
  v4[48] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v20 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009AEE00) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[49] = swift_task_alloc(v20);
  v4[50] = swift_task_alloc(v20);
  return swift_task_switch(sub_1004604B8, 0LL, 0LL);
}

void sub_1004604B8()
{
  *(void *)(v0 + 168) = _swiftEmptyArrayStorage;
  uint64_t v79 = (void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 200);
  char v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 496) = v2;
  uint64_t v3 = 1LL << v2;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  swift_bridgeObjectRetain(v1);
  int64_t v6 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      uint64_t v9 = *(void *)(v0 + 200);
LABEL_8:
      uint64_t v10 = *(void *)(v0 + 392);
      sub_10001DC4C( *(void *)(v9 + 48) + *(void *)(*(void *)(v0 + 376) + 72LL) * v8,  v10,  type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v11 = *(void *)(v9 + 56);
      uint64_t v12 = sub_100004AEC(&qword_1009AEE08);
      uint64_t v13 = *(void *)(v11 + 8 * v8);
      *(void *)(v10 + *(int *)(v12 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 48)) = v13;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v10, 0LL, 1LL, v12);
      swift_bridgeObjectRetain(v13);
      goto LABEL_15;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return;
    }

    int64_t v15 = (unint64_t)((1LL << *(_BYTE *)(v0 + 496)) + 63) >> 6;
    if (v14 >= v15)
    {
      int64_t v18 = v6;
    }

    else
    {
      uint64_t v9 = *(void *)(v0 + 200);
      uint64_t v16 = v9 + 64;
      unint64_t v17 = *(void *)(v9 + 64 + 8 * v14);
      if (v17) {
        goto LABEL_12;
      }
      int64_t v18 = v6 + 1;
      if (v6 + 2 < v15)
      {
        unint64_t v17 = *(void *)(v16 + 8 * (v6 + 2));
        if (v17)
        {
          int64_t v14 = v6 + 2;
LABEL_12:
          unint64_t v5 = (v17 - 1) & v17;
          unint64_t v8 = __clz(__rbit64(v17)) + (v14 << 6);
          int64_t v6 = v14;
          goto LABEL_8;
        }

        int64_t v18 = v6 + 2;
        if (v6 + 3 < v15)
        {
          unint64_t v17 = *(void *)(v16 + 8 * (v6 + 3));
          if (v17)
          {
            int64_t v14 = v6 + 3;
            goto LABEL_12;
          }

          int64_t v14 = v6 + 4;
          int64_t v18 = v6 + 3;
          if (v6 + 4 < v15)
          {
            unint64_t v17 = *(void *)(v16 + 8 * v14);
            if (v17) {
              goto LABEL_12;
            }
            int64_t v18 = v15 - 1;
            int64_t v28 = v15 - 5;
            while (v28 != v6)
            {
              unint64_t v17 = *(void *)(v9 + 104 + 8 * v6++);
              if (v17)
              {
                int64_t v14 = v6 + 4;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }

    uint64_t v19 = *(void *)(v0 + 392);
    uint64_t v20 = sub_100004AEC(&qword_1009AEE08);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
    unint64_t v5 = 0LL;
    int64_t v6 = v18;
LABEL_15:
    *(void *)(v0 + 408) = v6;
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v5;
    uint64_t v21 = *(void *)(v0 + 400);
    sub_100015750(*(void *)(v0 + 392), v21, &qword_1009AEE00);
    uint64_t v22 = sub_100004AEC(&qword_1009AEE08);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48LL))(v21, 1LL, v22) == 1)
    {
      uint64_t v30 = *(void *)(v0 + 392);
      uint64_t v29 = *(void *)(v0 + 400);
      uint64_t v31 = *(void *)(v0 + 384);
      uint64_t v33 = *(void *)(v0 + 352);
      uint64_t v32 = *(void *)(v0 + 360);
      uint64_t v34 = *(void *)(v0 + 344);
      uint64_t v35 = *(void *)(v0 + 312);
      uint64_t v36 = *(void *)(v0 + 320);
      uint64_t v37 = *(void *)(v0 + 296);
      uint64_t v69 = *(void *)(v0 + 288);
      uint64_t v71 = *(void *)(v0 + 264);
      uint64_t v73 = *(void *)(v0 + 256);
      uint64_t v75 = *(void *)(v0 + 248);
      uint64_t v80 = *(void *)(v0 + 224);
      swift_release();
      uint64_t v77 = *(void *)(v0 + 168);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v36);
      swift_task_dealloc(v35);
      swift_task_dealloc(v37);
      swift_task_dealloc(v69);
      swift_task_dealloc(v71);
      swift_task_dealloc(v73);
      swift_task_dealloc(v75);
      swift_task_dealloc(v80);
      (*(void (**)(uint64_t))(v0 + 8))(v77);
      return;
    }

    uint64_t v23 = *(void *)(v0 + 400);
    uint64_t v24 = *(void *)(v0 + 208);
    uint64_t v25 = *(void **)(v23 + *(int *)(v22 + 48));
    sub_100463BD0(v23, *(void *)(v0 + 384));
    if (*(void *)(v24 + 16))
    {
      unint64_t v26 = sub_10030D7F4(*(void *)(v0 + 384));
      if ((v27 & 1) != 0) {
        break;
      }
    }

    sub_100018C68(*(void *)(v0 + 384), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }

  uint64_t v38 = (void *)(*(void *)(*(void *)(v0 + 208) + 56LL) + 24 * v26);
  *(void *)(v0 + 424) = *v38;
  uint64_t v39 = v38[1];
  *(void *)(v0 + 432) = v39;
  uint64_t v40 = v25[2];
  if (v40)
  {
    uint64_t v67 = v25[5];
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v25);
    uint64_t v68 = v25;
    uint64_t v41 = v25 + 9;
    uint64_t v42 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v76 = v40;
      uint64_t v45 = *(v41 - 1);
      unint64_t v46 = *v41;
      uint64_t v70 = *(v41 - 3);
      unint64_t v72 = *(v41 - 2);
      sub_10001736C(v70, v72);
      sub_10001736C(v45, v46);
      swift_bridgeObjectRetain(v42);
      sub_10001736C(v45, v46);
      uint64_t v47 = Data.subdata(in:)(0LL);
      unint64_t v49 = v48;
      uint64_t v74 = v45;
      sub_100016F9C(v45, v46);
      v78.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
      *uint64_t v79 = v42;
      unint64_t v52 = sub_10030D84C(v47, v49);
      uint64_t v53 = v42[2];
      BOOL v54 = (v51 & 1) == 0;
      uint64_t v55 = v53 + v54;
      if (__OFADD__(v53, v54)) {
        goto LABEL_50;
      }
      char v56 = v51;
      if (v42[3] >= v55)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100066AE0();
        }
      }

      else
      {
        sub_100053AD8(v55, isUniquelyReferenced_nonNull_native);
        uint64_t v57 = sub_10030D84C(v47, v49);
        if ((v56 & 1) != (v58 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
          return;
        }

        unint64_t v52 = v57;
      }

      uint64_t v59 = (void *)*v79;
      if ((v56 & 1) != 0)
      {
        uint64_t v43 = v59[7];
        uint64_t v44 = 8 * v52;

        *(NSNumber *)(v43 + v44) = v78;
      }

      else
      {
        v59[(v52 >> 6) + 8] |= 1LL << v52;
        uint64_t v60 = (uint64_t *)(v59[6] + 16 * v52);
        *uint64_t v60 = v47;
        v60[1] = v49;
        *(NSNumber *)(v59[7] + 8 * v52) = v78;
        uint64_t v61 = v59[2];
        BOOL v62 = __OFADD__(v61, 1LL);
        uint64_t v63 = v61 + 1;
        if (v62) {
          goto LABEL_51;
        }
        v59[2] = v63;
        sub_10001736C(v47, v49);
      }

      v41 += 6;
      swift_bridgeObjectRelease();
      sub_100016F9C(v47, v49);
      sub_100016F9C(v70, v72);
      sub_100016F9C(v74, v46);
      swift_bridgeObjectRelease();
      uint64_t v42 = v59;
      uint64_t v40 = v76 - 1;
      if (v76 == 1)
      {
        uint64_t v25 = v68;
        swift_bridgeObjectRelease();
        uint64_t v64 = v67;
        goto LABEL_47;
      }
    }
  }

  swift_bridgeObjectRetain(v39);
  uint64_t v59 = _swiftEmptyDictionarySingleton;
  uint64_t v64 = 1LL;
LABEL_47:
  *(void *)(v0 + 440) = v59;
  *(void *)(v0 + 448) = v64;
  *(void *)(v0 + 456) = sub_10045CAE8(v25);
  swift_bridgeObjectRelease();
  uint64_t v65 = (void *)swift_task_alloc(dword_1009AEE14);
  *(void *)(v0 + 464) = v65;
  *uint64_t v65 = v0;
  v65[1] = sub_100460B04;
  uint64_t v66 = *(void *)(v0 + 384);
  v65[15] = *(void *)(v0 + 320);
  v65[16] = v66;
  swift_task_switch(sub_100462F90, 0LL, 0LL);
}

uint64_t sub_100460B04()
{
  if (v0)
  {
    swift_errorRelease(v0);
    char v2 = sub_1004620E4;
  }

  else
  {
    char v2 = sub_100460B70;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100460B70()
{
  uint64_t v1 = v0[48];
  char v2 = (uint64_t *)v0[45];
  uint64_t v3 = v0[46];
  uint64_t v5 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v6 = v0[38];
  uint64_t v8 = v0[29];
  uint64_t v7 = v0[30];
  uint64_t v9 = (void *)v0[27];
  (*(void (**)(uint64_t, void, uint64_t, void))(v0[42] + 56LL))(v4, 0LL, 1LL, v0[41]);
  sub_100015750(v4, (uint64_t)v2, (uint64_t *)&unk_1009AE460);
  uint64_t v10 = sub_100012ED8(v9, v9[3]);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v0[59] = v11;
  v11(v5, v1, v8);
  v11(v5 + *(int *)(v6 + 20), v1 + *(int *)(v3 + 20), v8);
  uint64_t v12 = *v2;
  uint64_t v13 = *v10;
  uint64_t v14 = v10[1];
  uint64_t v15 = v10[2];
  uint64_t v16 = (void *)swift_task_alloc(dword_1009B9044);
  v0[60] = v16;
  void *v16 = v0;
  v16[1] = sub_100460C8C;
  return sub_1006365A4((uint64_t)(v0 + 8), v0[39], 0, v12, v13, v14, v15);
}

uint64_t sub_100460C8C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 480);
  *(void *)(*v1 + 488) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 312);
  if (v0)
  {
    swift_errorRelease(v0);
    sub_100018C68(v4, type metadata accessor for BeaconIdentifier);
    uint64_t v5 = sub_100461910;
  }

  else
  {
    sub_100018C68(v4, type metadata accessor for BeaconIdentifier);
    uint64_t v5 = sub_100460D1C;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100460D1C()
{
  if (*(_BYTE *)(v0 + 16) == 3LL
    || (uint64_t v1 = *(void *)(v0 + 32),
        unint64_t v2 = *(void *)(v0 + 40),
        sub_10001736C(v1, v2),
        sub_100463C14(v0 + 64),
        v2 >> 60 == 15))
  {
    sub_100015794(*(void *)(v0 + 360), (uint64_t *)&unk_1009AE460);
    uint64_t v3 = 0LL;
    uint64_t v4 = (unint64_t *)0xF000000000000000LL;
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 272);
    uint64_t v5 = *(void *)(v0 + 280);
    uint64_t v7 = *(void *)(v0 + 264);
    sub_10001736C(v1, v2);
    MACAddress.init(addressToSanitize:type:)(v1, v2, 1LL);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1LL, v6);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }

    uint64_t v10 = *(void *)(v0 + 288);
    uint64_t v9 = *(void *)(v0 + 296);
    uint64_t v11 = *(void *)(v0 + 272);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 280) + 32LL);
    v12(v10, *(void *)(v0 + 264), v11);
    v12(v9, v10, v11);
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    unint64_t v132 = v2;
    uint64_t v14 = *(void *)(v0 + 352);
    uint64_t v13 = *(void *)(v0 + 360);
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2AB30);
    uint64_t v16 = sub_10001581C(v13, v14, (uint64_t *)&unk_1009AE460);
    unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter(v17);
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void *)(v0 + 352);
    uint64_t v136 = v1;
    if (v19)
    {
      os_log_type_t typea = v18;
      uint64_t v21 = *(uint64_t **)(v0 + 344);
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v122 = swift_slowAlloc(32LL, -1LL);
      uint64_t v140 = v122;
      *(_DWORD *)uint64_t v22 = 136446210;
      sub_10001581C(v20, (uint64_t)v21, (uint64_t *)&unk_1009AE460);
      *(void *)(v0 + 128) = 40LL;
      *(void *)(v0 + 136) = 0xE100000000000000LL;
      uint64_t v23 = *v21;
      *(void *)(v0 + sub_100454668(v0 + 144) = 0x7972616D6972702ELL;
      *(void *)(v0 + 152) = 0xE900000000000028LL;
      *(void *)(v0 + 176) = v23;
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 41LL;
      v25._object = (void *)0xE100000000000000LL;
      String.append(_:)(v25);
      String.append(_:)(*(Swift::String *)(v0 + 144));
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 8236LL;
      v26._object = (void *)0xE200000000000000LL;
      String.append(_:)(v26);
      uint64_t v27 = type metadata accessor for Date(0LL);
      uint64_t v28 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = 41LL;
      v30._object = (void *)0xE100000000000000LL;
      String.append(_:)(v30);
      uint64_t v31 = *(void *)(v0 + 128);
      unint64_t v32 = *(void *)(v0 + 136);
      sub_100015794((uint64_t)v21, (uint64_t *)&unk_1009AE460);
      *(void *)(v0 + 184) = sub_1003F11D4(v31, v32, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      sub_100015794(v20, (uint64_t *)&unk_1009AE460);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  typea,  "lastConnectedLEMAC based on latestIndexObserved %{public}s",  v22,  0xCu);
      swift_arrayDestroy(v122, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
      sub_100015794(v20, (uint64_t *)&unk_1009AE460);
    }

    uint64_t v33 = *(void *)(v0 + 360);
    uint64_t v34 = *(void *)(v0 + 296);
    uint64_t v36 = *(void *)(v0 + 272);
    uint64_t v35 = *(void *)(v0 + 280);
    uint64_t v37 = Data.init(stringLiteral:)(12592LL, 0xE200000000000000LL);
    unint64_t v39 = v38;
    uint64_t v40 = MACAddress.data.getter(v37);
    unint64_t v42 = v41;
    *(void *)(v0 + 112) = v37;
    *(void *)(v0 + 120) = v39;
    sub_10001736C(v37, v39);
    sub_1004A8638(v40, v42);
    sub_1000182F0(v136, v132);
    sub_100016F9C(v40, v42);
    sub_100016F9C(v37, v39);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    sub_100015794(v33, (uint64_t *)&unk_1009AE460);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 112);
    uint64_t v4 = *(unint64_t **)(v0 + 120);
  }

  uint64_t v43 = *(void (**)(void))(v0 + 472);
  uint64_t typeb = *(void *)(v0 + 448);
  uint64_t v123 = *(void *)(v0 + 440);
  uint64_t v133 = *(void *)(v0 + 424);
  uint64_t v137 = *(void *)(v0 + 432);
  uint64_t v44 = *(void *)(v0 + 384);
  uint64_t v45 = *(int **)(v0 + 368);
  uint64_t v46 = *(void *)(v0 + 248);
  uint64_t v118 = *(void *)(v0 + 256);
  uint64_t v48 = *(void *)(v0 + 224);
  uint64_t v47 = *(void *)(v0 + 232);
  unint64_t v49 = *(void **)(v0 + 192);
  v43();
  ((void (*)(uint64_t, uint64_t, uint64_t))v43)(v46, v44 + v45[5], v47);
  sub_10001581C(v44 + v45[6], v48, &qword_10099D8A0);
  int64_t v50 = (uint64_t *)(v44 + v45[8]);
  uint64_t v51 = v50[1];
  uint64_t v116 = *v50;
  LOBYTE(v47) = *(_BYTE *)(v44 + v45[11]);
  unsigned __int8 v115 = *(_BYTE *)(v44 + v45[12]);
  uint64_t v52 = sub_100004AEC(&qword_1009B0610);
  uint64_t v53 = swift_allocObject(v52, 40LL, 7LL);
  *(_OWORD *)(v53 + swift_weakDestroy(v0 + 16) = xmmword_1007F8BB0;
  *(void *)(v53 + 32) = v49;
  uint64_t v140 = v53;
  specialized Array._endMutation()(v53);
  id v54 = objc_allocWithZone(&OBJC_CLASS___SPPeripheral);
  swift_bridgeObjectRetain(v51);
  sub_100018BE4((uint64_t)v3, (unint64_t)v4);
  id v55 = v49;
  char v56 =  sub_1004634D8( v118,  v46,  v48,  v116,  v51,  v115,  v133,  v137,  v47,  typeb,  v123,  (uint64_t)v3,  (unint64_t)v4);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v56);
  unint64_t v58 = *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v57 = *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v58 >= v57 >> 1) {
LABEL_60:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1LL);
  uint64_t v134 = (uint64_t (**)(uint64_t))(v0 + 160);
  uint64_t v59 = *(void *)(v0 + 384);
  uint64_t v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v56);
  specialized Array._endMutation()(v60);

  sub_1000182F0((uint64_t)v3, (unint64_t)v4);
  uint64_t v3 = type metadata accessor for ManagedCBPeripheralBeaconInfo;
  sub_100018C68(v59, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  unint64_t v61 = *(void *)(v0 + 408);
  unint64_t v62 = *(void *)(v0 + 416);
  uint64_t v4 = (unint64_t *)&qword_1009AEE08;
  while (1)
  {
    if (v62)
    {
      unint64_t v63 = __clz(__rbit64(v62));
      v62 &= v62 - 1;
      unint64_t v64 = v63 | (v61 << 6);
      uint64_t v65 = *(void *)(v0 + 200);
LABEL_16:
      uint64_t v66 = *(void *)(v0 + 392);
      sub_10001DC4C( *(void *)(v65 + 48) + *(void *)(*(void *)(v0 + 376) + 72LL) * v64,  v66,  type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v67 = *(void *)(v65 + 56);
      uint64_t v68 = sub_100004AEC(&qword_1009AEE08);
      uint64_t v69 = *(void *)(v67 + 8 * v64);
      *(void *)(v66 + *(int *)(v68 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 48)) = v69;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56LL))(v66, 0LL, 1LL, v68);
      swift_bridgeObjectRetain(v69);
      goto LABEL_23;
    }

    unint64_t v57 = v61 + 1;
    if (__OFADD__(v61, 1LL))
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }

    int64_t v70 = (unint64_t)((1LL << *(_BYTE *)(v0 + 496)) + 63) >> 6;
    if ((uint64_t)v57 >= v70)
    {
      int64_t v73 = v61;
    }

    else
    {
      uint64_t v65 = *(void *)(v0 + 200);
      uint64_t v71 = v65 + 64;
      unint64_t v72 = *(void *)(v65 + 64 + 8 * v57);
      if (v72) {
        goto LABEL_20;
      }
      int64_t v73 = v61 + 1;
      if ((uint64_t)(v61 + 2) < v70)
      {
        unint64_t v72 = *(void *)(v71 + 8 * (v61 + 2));
        if (v72)
        {
          unint64_t v57 = v61 + 2;
LABEL_20:
          unint64_t v62 = (v72 - 1) & v72;
          unint64_t v64 = __clz(__rbit64(v72)) + (v57 << 6);
          unint64_t v61 = v57;
          goto LABEL_16;
        }

        int64_t v73 = v61 + 2;
        if ((uint64_t)(v61 + 3) < v70)
        {
          unint64_t v72 = *(void *)(v71 + 8 * (v61 + 3));
          if (v72)
          {
            unint64_t v57 = v61 + 3;
            goto LABEL_20;
          }

          unint64_t v57 = v61 + 4;
          int64_t v73 = v61 + 3;
          if ((uint64_t)(v61 + 4) < v70)
          {
            unint64_t v72 = *(void *)(v71 + 8 * v57);
            if (v72) {
              goto LABEL_20;
            }
            int64_t v73 = v70 - 1;
            int64_t v82 = v70 - 5;
            while (v82 != v61)
            {
              unint64_t v72 = *(void *)(v65 + 104 + 8 * v61++);
              if (v72)
              {
                unint64_t v57 = v61 + 4;
                goto LABEL_20;
              }
            }
          }
        }
      }
    }

    uint64_t v74 = *(void *)(v0 + 392);
    uint64_t v75 = sub_100004AEC(&qword_1009AEE08);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56LL))(v74, 1LL, 1LL, v75);
    unint64_t v62 = 0LL;
    unint64_t v61 = v73;
LABEL_23:
    *(void *)(v0 + 408) = v61;
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v62;
    uint64_t v76 = *(void *)(v0 + 400);
    sub_100015750(*(void *)(v0 + 392), v76, &qword_1009AEE00);
    uint64_t v77 = sub_100004AEC(&qword_1009AEE08);
    int v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 48LL))(v76, 1LL, v77);
    unint64_t v58 = *(void *)(v0 + 400);
    if (v78 == 1)
    {
      uint64_t v84 = *(void *)(v0 + 384);
      uint64_t v83 = *(void *)(v0 + 392);
      uint64_t v86 = *(void *)(v0 + 352);
      uint64_t v85 = *(void *)(v0 + 360);
      uint64_t v87 = *(void *)(v0 + 344);
      uint64_t v88 = *(void *)(v0 + 312);
      uint64_t v89 = *(void *)(v0 + 320);
      uint64_t v90 = *(void *)(v0 + 296);
      uint64_t v120 = *(void *)(v0 + 288);
      uint64_t v124 = *(void *)(v0 + 264);
      *(void *)typec = *(void *)(v0 + 256);
      uint64_t v130 = *(void *)(v0 + 248);
      uint64_t v139 = *(void *)(v0 + 224);
      swift_release();
      uint64_t v135 = *(void *)(v0 + 168);
      swift_task_dealloc(v58);
      swift_task_dealloc(v83);
      swift_task_dealloc(v84);
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v89);
      swift_task_dealloc(v88);
      swift_task_dealloc(v90);
      swift_task_dealloc(v120);
      swift_task_dealloc(v124);
      swift_task_dealloc(*(void *)typec);
      swift_task_dealloc(v130);
      swift_task_dealloc(v139);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v135);
    }

    char v56 = *(void **)(v0 + 208);
    uint64_t v79 = *(void **)(v58 + *(int *)(v77 + 48));
    sub_100463BD0(*(void *)(v0 + 400), *(void *)(v0 + 384));
    if (v56[2])
    {
      uint64_t v138 = v79;
      unint64_t v80 = sub_10030D7F4(*(void *)(v0 + 384));
      if ((v81 & 1) != 0) {
        break;
      }
    }

    sub_100018C68(*(void *)(v0 + 384), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }

  uint64_t v91 = (void *)(*(void *)(*(void *)(v0 + 208) + 56LL) + 24 * v80);
  *(void *)(v0 + 424) = *v91;
  uint64_t v92 = v91[1];
  *(void *)(v0 + 432) = v92;
  uint64_t v93 = v79[2];
  if (v93)
  {
    uint64_t v117 = v79[5];
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v79);
    uint64_t v4 = v79 + 9;
    uint64_t v3 = (uint64_t (*)(uint64_t))_swiftEmptyDictionarySingleton;
    while (1)
    {
      *(void *)os_log_type_t type = v93;
      uint64_t v96 = *(v4 - 1);
      unint64_t v97 = *v4;
      uint64_t v119 = *(v4 - 3);
      unint64_t v121 = *(v4 - 2);
      sub_10001736C(v119, v121);
      sub_10001736C(v96, v97);
      swift_bridgeObjectRetain(v3);
      sub_10001736C(v96, v97);
      char v56 = (void *)Data.subdata(in:)(0LL);
      unint64_t v58 = v98;
      uint64_t v125 = v96;
      sub_100016F9C(v96, v97);
      v131.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
      *uint64_t v134 = v3;
      unint64_t v101 = sub_10030D84C((uint64_t)v56, v58);
      unint64_t v57 = *((void *)v3 + 2);
      BOOL v102 = (v100 & 1) == 0;
      uint64_t v103 = v57 + v102;
      if (__OFADD__(v57, v102)) {
        goto LABEL_58;
      }
      char v104 = v100;
      if (*((void *)v3 + 3) >= v103)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100066AE0();
        }
      }

      else
      {
        sub_100053AD8(v103, isUniquelyReferenced_nonNull_native);
        uint64_t v105 = sub_10030D84C((uint64_t)v56, v58);
        if ((v104 & 1) != (v106 & 1)) {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
        }
        unint64_t v101 = v105;
      }

      uint64_t v107 = *v134;
      if ((v104 & 1) != 0)
      {
        uint64_t v94 = *((void *)v107 + 7);
        uint64_t v95 = 8 * v101;

        *(NSNumber *)(v94 + v95) = v131;
      }

      else
      {
        *((void *)v107 + (v101 >> 6) + 8) |= 1LL << v101;
        uint64_t v108 = (void *)(*((void *)v107 + 6) + 16 * v101);
        *uint64_t v108 = v56;
        v108[1] = v58;
        *(NSNumber *)(*((void *)v107 + 7) + 8 * v101) = v131;
        uint64_t v109 = *((void *)v107 + 2);
        BOOL v110 = __OFADD__(v109, 1LL);
        unint64_t v57 = v109 + 1;
        if (v110) {
          goto LABEL_59;
        }
        *((void *)v107 + 2) = v57;
        sub_10001736C((uint64_t)v56, v58);
      }

      v4 += 6;
      swift_bridgeObjectRelease();
      sub_100016F9C((uint64_t)v56, v58);
      sub_100016F9C(v119, v121);
      sub_100016F9C(v125, v97);
      swift_bridgeObjectRelease();
      uint64_t v3 = v107;
      uint64_t v93 = *(void *)type - 1LL;
      if (*(void *)type == 1LL)
      {
        uint64_t v111 = v138;
        swift_bridgeObjectRelease();
        uint64_t v112 = v117;
        goto LABEL_55;
      }
    }
  }

  swift_bridgeObjectRetain(v92);
  uint64_t v111 = v79;
  uint64_t v107 = (uint64_t (*)(uint64_t))_swiftEmptyDictionarySingleton;
  uint64_t v112 = 1LL;
LABEL_55:
  *(void *)(v0 + 440) = v107;
  *(void *)(v0 + 448) = v112;
  *(void *)(v0 + 456) = sub_10045CAE8(v111);
  swift_bridgeObjectRelease();
  uint64_t v113 = (void *)swift_task_alloc(dword_1009AEE14);
  *(void *)(v0 + 464) = v113;
  *uint64_t v113 = v0;
  v113[1] = sub_100460B04;
  uint64_t v114 = *(void *)(v0 + 384);
  v113[15] = *(void *)(v0 + 320);
  v113[16] = v114;
  return swift_task_switch(sub_100462F90, 0LL, 0LL);
}

uint64_t sub_100461910()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
  uint64_t v86 = *(void *)(v0 + 448);
  uint64_t v83 = *(void *)(v0 + 440);
  uint64_t v94 = *(void *)(v0 + 432);
  uint64_t v89 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(int **)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v7 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v8 = *(void **)(v0 + 192);
  v1(v4, v2, v6);
  v1(v5, v2 + v3[5], v6);
  sub_10001581C(v2 + v3[6], v7, &qword_10099D8A0);
  uint64_t v9 = (uint64_t *)(v2 + v3[8]);
  uint64_t v10 = v9[1];
  uint64_t v79 = *v9;
  LOBYTE(v1) = *(_BYTE *)(v2 + v3[11]);
  unsigned __int8 v77 = *(_BYTE *)(v2 + v3[12]);
  uint64_t v11 = sub_100004AEC(&qword_1009B0610);
  uint64_t v12 = swift_allocObject(v11, 40LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007F8BB0;
  *(void *)(v12 + 32) = v8;
  specialized Array._endMutation()(v12);
  id v13 = objc_allocWithZone(&OBJC_CLASS___SPPeripheral);
  swift_bridgeObjectRetain(v10);
  sub_100018BE4(0LL, 0xF000000000000000LL);
  id v14 = v8;
  uint64_t v15 = sub_1004634D8(v4, v5, v7, v79, v10, v77, v89, v94, (char)v1, v86, v83, 0LL, 0xF000000000000000LL);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
  unint64_t isUniquelyReferenced_nonNull_native = *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v16 = *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (isUniquelyReferenced_nonNull_native >= v16 >> 1) {
LABEL_50:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v16 > 1,  isUniquelyReferenced_nonNull_native + 1,  1LL);
  uint64_t v95 = (void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 384);
  uint64_t v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(isUniquelyReferenced_nonNull_native, v15);
  specialized Array._endMutation()(v19);

  sub_1000182F0(0LL, 0xF000000000000000LL);
  sub_100018C68(v18, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  unint64_t v20 = *(void *)(v0 + 408);
  unint64_t v21 = *(void *)(v0 + 416);
  unint64_t isUniquelyReferenced_nonNull_native = 1LL;
  while (1)
  {
    if (v21)
    {
      unint64_t v22 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      uint64_t v24 = *(void *)(v0 + 200);
LABEL_6:
      uint64_t v25 = *(void *)(v0 + 392);
      sub_10001DC4C( *(void *)(v24 + 48) + *(void *)(*(void *)(v0 + 376) + 72LL) * v23,  v25,  type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v26 = *(void *)(v24 + 56);
      uint64_t v27 = sub_100004AEC(&qword_1009AEE08);
      uint64_t v28 = *(void *)(v26 + 8 * v23);
      *(void *)(v25 + *(int *)(v27 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 48)) = v28;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v25, 0LL, 1LL, v27);
      swift_bridgeObjectRetain(v28);
      goto LABEL_13;
    }

    unint64_t v16 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }

    int64_t v29 = (unint64_t)((1LL << *(_BYTE *)(v0 + 496)) + 63) >> 6;
    if ((uint64_t)v16 >= v29)
    {
      int64_t v32 = v20;
    }

    else
    {
      uint64_t v24 = *(void *)(v0 + 200);
      uint64_t v30 = v24 + 64;
      unint64_t v31 = *(void *)(v24 + 64 + 8 * v16);
      if (v31) {
        goto LABEL_10;
      }
      int64_t v32 = v20 + 1;
      if ((uint64_t)(v20 + 2) < v29)
      {
        unint64_t v31 = *(void *)(v30 + 8 * (v20 + 2));
        if (v31)
        {
          unint64_t v16 = v20 + 2;
LABEL_10:
          unint64_t v21 = (v31 - 1) & v31;
          unint64_t v23 = __clz(__rbit64(v31)) + (v16 << 6);
          unint64_t v20 = v16;
          goto LABEL_6;
        }

        int64_t v32 = v20 + 2;
        if ((uint64_t)(v20 + 3) < v29)
        {
          unint64_t v31 = *(void *)(v30 + 8 * (v20 + 3));
          if (v31)
          {
            unint64_t v16 = v20 + 3;
            goto LABEL_10;
          }

          unint64_t v16 = v20 + 4;
          int64_t v32 = v20 + 3;
          if ((uint64_t)(v20 + 4) < v29)
          {
            unint64_t v31 = *(void *)(v30 + 8 * v16);
            if (v31) {
              goto LABEL_10;
            }
            int64_t v32 = v29 - 1;
            int64_t v41 = v29 - 5;
            while (v41 != v20)
            {
              unint64_t v31 = *(void *)(v24 + 104 + 8 * v20++);
              if (v31)
              {
                unint64_t v16 = v20 + 4;
                goto LABEL_10;
              }
            }
          }
        }
      }
    }

    uint64_t v33 = *(void *)(v0 + 392);
    uint64_t v34 = sub_100004AEC(&qword_1009AEE08);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v33, 1LL, 1LL, v34);
    unint64_t v21 = 0LL;
    unint64_t v20 = v32;
LABEL_13:
    *(void *)(v0 + 408) = v20;
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v21;
    uint64_t v35 = *(void *)(v0 + 400);
    sub_100015750(*(void *)(v0 + 392), v35, &qword_1009AEE00);
    uint64_t v36 = sub_100004AEC(&qword_1009AEE08);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48LL))(v35, 1LL, v36) == 1)
    {
      uint64_t v43 = *(void *)(v0 + 392);
      uint64_t v42 = *(void *)(v0 + 400);
      uint64_t v44 = *(void *)(v0 + 384);
      uint64_t v46 = *(void *)(v0 + 352);
      uint64_t v45 = *(void *)(v0 + 360);
      uint64_t v47 = *(void *)(v0 + 344);
      uint64_t v48 = *(void *)(v0 + 312);
      uint64_t v49 = *(void *)(v0 + 320);
      uint64_t v50 = *(void *)(v0 + 296);
      uint64_t v81 = *(void *)(v0 + 288);
      uint64_t v84 = *(void *)(v0 + 264);
      uint64_t v87 = *(void *)(v0 + 256);
      uint64_t v90 = *(void *)(v0 + 248);
      uint64_t v96 = *(void *)(v0 + 224);
      swift_release();
      uint64_t v92 = *(void *)(v0 + 168);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v49);
      swift_task_dealloc(v48);
      swift_task_dealloc(v50);
      swift_task_dealloc(v81);
      swift_task_dealloc(v84);
      swift_task_dealloc(v87);
      swift_task_dealloc(v90);
      swift_task_dealloc(v96);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v92);
    }

    uint64_t v37 = *(void *)(v0 + 400);
    uint64_t v15 = *(void **)(v0 + 208);
    unint64_t v38 = *(void **)(v37 + *(int *)(v36 + 48));
    sub_100463BD0(v37, *(void *)(v0 + 384));
    if (v15[2])
    {
      unint64_t v39 = sub_10030D7F4(*(void *)(v0 + 384));
      if ((v40 & 1) != 0) {
        break;
      }
    }

    sub_100018C68(*(void *)(v0 + 384), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }

  uint64_t v52 = (void *)(*(void *)(*(void *)(v0 + 208) + 56LL) + 24 * v39);
  *(void *)(v0 + 424) = *v52;
  uint64_t v53 = v52[1];
  *(void *)(v0 + 432) = v53;
  uint64_t v54 = v38[2];
  if (v54)
  {
    uint64_t v78 = v38[5];
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v38);
    unint64_t v80 = v38;
    id v55 = v38 + 9;
    char v56 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v91 = v54;
      uint64_t v59 = *(v55 - 1);
      unint64_t v60 = *v55;
      uint64_t v82 = *(v55 - 3);
      unint64_t v85 = *(v55 - 2);
      sub_10001736C(v82, v85);
      sub_10001736C(v59, v60);
      swift_bridgeObjectRetain(v56);
      sub_10001736C(v59, v60);
      uint64_t v61 = Data.subdata(in:)(0LL);
      uint64_t v15 = v62;
      uint64_t v88 = v59;
      sub_100016F9C(v59, v60);
      v93.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v56);
      *uint64_t v95 = v56;
      unint64_t v64 = sub_10030D84C(v61, (uint64_t)v15);
      unint64_t v16 = v56[2];
      BOOL v65 = (v63 & 1) == 0;
      uint64_t v66 = v16 + v65;
      if (__OFADD__(v16, v65)) {
        goto LABEL_48;
      }
      char v67 = v63;
      if (v56[3] >= v66)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100066AE0();
        }
      }

      else
      {
        sub_100053AD8(v66, isUniquelyReferenced_nonNull_native);
        uint64_t v68 = sub_10030D84C(v61, (uint64_t)v15);
        if ((v67 & 1) != (v69 & 1)) {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
        }
        unint64_t v64 = v68;
      }

      int64_t v70 = (void *)*v95;
      if ((v67 & 1) != 0)
      {
        uint64_t v57 = v70[7];
        uint64_t v58 = 8 * v64;

        *(NSNumber *)(v57 + v58) = v93;
      }

      else
      {
        v70[(v64 >> 6) + 8] |= 1LL << v64;
        uint64_t v71 = (uint64_t *)(v70[6] + 16 * v64);
        *uint64_t v71 = v61;
        v71[1] = (uint64_t)v15;
        *(NSNumber *)(v70[7] + 8 * v64) = v93;
        uint64_t v72 = v70[2];
        BOOL v73 = __OFADD__(v72, 1LL);
        unint64_t v16 = v72 + 1;
        if (v73) {
          goto LABEL_49;
        }
        v70[2] = v16;
        sub_10001736C(v61, (unint64_t)v15);
      }

      v55 += 6;
      swift_bridgeObjectRelease();
      sub_100016F9C(v61, (unint64_t)v15);
      sub_100016F9C(v82, v85);
      sub_100016F9C(v88, v60);
      swift_bridgeObjectRelease();
      char v56 = v70;
      uint64_t v54 = v91 - 1;
      if (v91 == 1)
      {
        unint64_t v38 = v80;
        swift_bridgeObjectRelease();
        uint64_t v74 = v78;
        goto LABEL_45;
      }
    }
  }

  swift_bridgeObjectRetain(v53);
  int64_t v70 = _swiftEmptyDictionarySingleton;
  uint64_t v74 = 1LL;
LABEL_45:
  *(void *)(v0 + 440) = v70;
  *(void *)(v0 + 448) = v74;
  *(void *)(v0 + 456) = sub_10045CAE8(v38);
  swift_bridgeObjectRelease();
  uint64_t v75 = (void *)swift_task_alloc(dword_1009AEE14);
  *(void *)(v0 + 464) = v75;
  *uint64_t v75 = v0;
  v75[1] = sub_100460B04;
  uint64_t v76 = *(void *)(v0 + 384);
  v75[15] = *(void *)(v0 + 320);
  v75[16] = v76;
  return swift_task_switch(sub_100462F90, 0LL, 0LL);
}

uint64_t sub_1004620E4()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 240);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 336) + 56LL))( v1,  1LL,  1LL,  *(void *)(v0 + 328));
  sub_100015794(v1, &qword_1009A2438);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v88 = *(void *)(v0 + 448);
  uint64_t v85 = *(void *)(v0 + 440);
  uint64_t v96 = *(void *)(v0 + 432);
  uint64_t v91 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v5 = *(int **)(v0 + 368);
  uint64_t v7 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v8 = *(void *)(v0 + 232);
  uint64_t v10 = *(void **)(v0 + 192);
  v3(v6, v4, v8);
  v3(v7, v4 + v5[5], v8);
  sub_10001581C(v4 + v5[6], v9, &qword_10099D8A0);
  uint64_t v11 = (uint64_t *)(v4 + v5[8]);
  uint64_t v12 = v11[1];
  uint64_t v81 = *v11;
  LOBYTE(v3) = *(_BYTE *)(v4 + v5[11]);
  unsigned __int8 v79 = *(_BYTE *)(v4 + v5[12]);
  uint64_t v13 = sub_100004AEC(&qword_1009B0610);
  uint64_t v14 = swift_allocObject(v13, 40LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007F8BB0;
  *(void *)(v14 + 32) = v10;
  specialized Array._endMutation()(v14);
  id v15 = objc_allocWithZone(&OBJC_CLASS___SPPeripheral);
  swift_bridgeObjectRetain(v12);
  sub_100018BE4(0LL, 0xF000000000000000LL);
  id v16 = v10;
  unint64_t v17 = sub_1004634D8(v6, v7, v9, v81, v12, v79, v91, v96, (char)v3, v88, v85, 0LL, 0xF000000000000000LL);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
  unint64_t isUniquelyReferenced_nonNull_native = *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v18 = *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (isUniquelyReferenced_nonNull_native >= v18 >> 1) {
LABEL_50:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v18 > 1,  isUniquelyReferenced_nonNull_native + 1,  1LL);
  unint64_t v97 = (void *)(v0 + 160);
  uint64_t v20 = *(void *)(v0 + 384);
  uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(isUniquelyReferenced_nonNull_native, v17);
  specialized Array._endMutation()(v21);

  sub_1000182F0(0LL, 0xF000000000000000LL);
  sub_100018C68(v20, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  unint64_t v22 = *(void *)(v0 + 408);
  unint64_t v23 = *(void *)(v0 + 416);
  unint64_t isUniquelyReferenced_nonNull_native = 1LL;
  while (1)
  {
    if (v23)
    {
      unint64_t v24 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      uint64_t v26 = *(void *)(v0 + 200);
LABEL_6:
      uint64_t v27 = *(void *)(v0 + 392);
      sub_10001DC4C( *(void *)(v26 + 48) + *(void *)(*(void *)(v0 + 376) + 72LL) * v25,  v27,  type metadata accessor for ManagedCBPeripheralBeaconInfo);
      uint64_t v28 = *(void *)(v26 + 56);
      uint64_t v29 = sub_100004AEC(&qword_1009AEE08);
      uint64_t v30 = *(void *)(v28 + 8 * v25);
      *(void *)(v27 + *(int *)(v29 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 48)) = v30;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v27, 0LL, 1LL, v29);
      swift_bridgeObjectRetain(v30);
      goto LABEL_13;
    }

    unint64_t v18 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }

    int64_t v31 = (unint64_t)((1LL << *(_BYTE *)(v0 + 496)) + 63) >> 6;
    if ((uint64_t)v18 >= v31)
    {
      int64_t v34 = v22;
    }

    else
    {
      uint64_t v26 = *(void *)(v0 + 200);
      uint64_t v32 = v26 + 64;
      unint64_t v33 = *(void *)(v26 + 64 + 8 * v18);
      if (v33) {
        goto LABEL_10;
      }
      int64_t v34 = v22 + 1;
      if ((uint64_t)(v22 + 2) < v31)
      {
        unint64_t v33 = *(void *)(v32 + 8 * (v22 + 2));
        if (v33)
        {
          unint64_t v18 = v22 + 2;
LABEL_10:
          unint64_t v23 = (v33 - 1) & v33;
          unint64_t v25 = __clz(__rbit64(v33)) + (v18 << 6);
          unint64_t v22 = v18;
          goto LABEL_6;
        }

        int64_t v34 = v22 + 2;
        if ((uint64_t)(v22 + 3) < v31)
        {
          unint64_t v33 = *(void *)(v32 + 8 * (v22 + 3));
          if (v33)
          {
            unint64_t v18 = v22 + 3;
            goto LABEL_10;
          }

          unint64_t v18 = v22 + 4;
          int64_t v34 = v22 + 3;
          if ((uint64_t)(v22 + 4) < v31)
          {
            unint64_t v33 = *(void *)(v32 + 8 * v18);
            if (v33) {
              goto LABEL_10;
            }
            int64_t v34 = v31 - 1;
            int64_t v43 = v31 - 5;
            while (v43 != v22)
            {
              unint64_t v33 = *(void *)(v26 + 104 + 8 * v22++);
              if (v33)
              {
                unint64_t v18 = v22 + 4;
                goto LABEL_10;
              }
            }
          }
        }
      }
    }

    uint64_t v35 = *(void *)(v0 + 392);
    uint64_t v36 = sub_100004AEC(&qword_1009AEE08);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v35, 1LL, 1LL, v36);
    unint64_t v23 = 0LL;
    unint64_t v22 = v34;
LABEL_13:
    *(void *)(v0 + 408) = v22;
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v23;
    uint64_t v37 = *(void *)(v0 + 400);
    sub_100015750(*(void *)(v0 + 392), v37, &qword_1009AEE00);
    uint64_t v38 = sub_100004AEC(&qword_1009AEE08);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48LL))(v37, 1LL, v38) == 1)
    {
      uint64_t v45 = *(void *)(v0 + 392);
      uint64_t v44 = *(void *)(v0 + 400);
      uint64_t v46 = *(void *)(v0 + 384);
      uint64_t v48 = *(void *)(v0 + 352);
      uint64_t v47 = *(void *)(v0 + 360);
      uint64_t v49 = *(void *)(v0 + 344);
      uint64_t v50 = *(void *)(v0 + 312);
      uint64_t v51 = *(void *)(v0 + 320);
      uint64_t v52 = *(void *)(v0 + 296);
      uint64_t v83 = *(void *)(v0 + 288);
      uint64_t v86 = *(void *)(v0 + 264);
      uint64_t v89 = *(void *)(v0 + 256);
      uint64_t v92 = *(void *)(v0 + 248);
      uint64_t v98 = *(void *)(v0 + 224);
      swift_release();
      uint64_t v94 = *(void *)(v0 + 168);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v51);
      swift_task_dealloc(v50);
      swift_task_dealloc(v52);
      swift_task_dealloc(v83);
      swift_task_dealloc(v86);
      swift_task_dealloc(v89);
      swift_task_dealloc(v92);
      swift_task_dealloc(v98);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v94);
    }

    uint64_t v39 = *(void *)(v0 + 400);
    unint64_t v17 = *(void **)(v0 + 208);
    char v40 = *(void **)(v39 + *(int *)(v38 + 48));
    sub_100463BD0(v39, *(void *)(v0 + 384));
    if (v17[2])
    {
      unint64_t v41 = sub_10030D7F4(*(void *)(v0 + 384));
      if ((v42 & 1) != 0) {
        break;
      }
    }

    sub_100018C68(*(void *)(v0 + 384), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }

  uint64_t v54 = (void *)(*(void *)(*(void *)(v0 + 208) + 56LL) + 24 * v41);
  *(void *)(v0 + 424) = *v54;
  uint64_t v55 = v54[1];
  *(void *)(v0 + 432) = v55;
  uint64_t v56 = v40[2];
  if (v56)
  {
    uint64_t v80 = v40[5];
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v40);
    uint64_t v82 = v40;
    uint64_t v57 = v40 + 9;
    uint64_t v58 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v93 = v56;
      uint64_t v61 = *(v57 - 1);
      unint64_t v62 = *v57;
      uint64_t v84 = *(v57 - 3);
      unint64_t v87 = *(v57 - 2);
      sub_10001736C(v84, v87);
      sub_10001736C(v61, v62);
      swift_bridgeObjectRetain(v58);
      sub_10001736C(v61, v62);
      uint64_t v63 = Data.subdata(in:)(0LL);
      unint64_t v17 = v64;
      uint64_t v90 = v61;
      sub_100016F9C(v61, v62);
      v95.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
      *unint64_t v97 = v58;
      unint64_t v66 = sub_10030D84C(v63, (uint64_t)v17);
      unint64_t v18 = v58[2];
      BOOL v67 = (v65 & 1) == 0;
      uint64_t v68 = v18 + v67;
      if (__OFADD__(v18, v67)) {
        goto LABEL_48;
      }
      char v69 = v65;
      if (v58[3] >= v68)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100066AE0();
        }
      }

      else
      {
        sub_100053AD8(v68, isUniquelyReferenced_nonNull_native);
        uint64_t v70 = sub_10030D84C(v63, (uint64_t)v17);
        if ((v69 & 1) != (v71 & 1)) {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
        }
        unint64_t v66 = v70;
      }

      uint64_t v72 = (void *)*v97;
      if ((v69 & 1) != 0)
      {
        uint64_t v59 = v72[7];
        uint64_t v60 = 8 * v66;

        *(NSNumber *)(v59 + v60) = v95;
      }

      else
      {
        v72[(v66 >> 6) + 8] |= 1LL << v66;
        BOOL v73 = (uint64_t *)(v72[6] + 16 * v66);
        *BOOL v73 = v63;
        v73[1] = (uint64_t)v17;
        *(NSNumber *)(v72[7] + 8 * v66) = v95;
        uint64_t v74 = v72[2];
        BOOL v75 = __OFADD__(v74, 1LL);
        unint64_t v18 = v74 + 1;
        if (v75) {
          goto LABEL_49;
        }
        v72[2] = v18;
        sub_10001736C(v63, (unint64_t)v17);
      }

      v57 += 6;
      swift_bridgeObjectRelease();
      sub_100016F9C(v63, (unint64_t)v17);
      sub_100016F9C(v84, v87);
      sub_100016F9C(v90, v62);
      swift_bridgeObjectRelease();
      uint64_t v58 = v72;
      uint64_t v56 = v93 - 1;
      if (v93 == 1)
      {
        char v40 = v82;
        swift_bridgeObjectRelease();
        uint64_t v76 = v80;
        goto LABEL_45;
      }
    }
  }

  swift_bridgeObjectRetain(v55);
  uint64_t v72 = _swiftEmptyDictionarySingleton;
  uint64_t v76 = 1LL;
LABEL_45:
  *(void *)(v0 + 440) = v72;
  *(void *)(v0 + 448) = v76;
  *(void *)(v0 + 456) = sub_10045CAE8(v40);
  swift_bridgeObjectRelease();
  unsigned __int8 v77 = (void *)swift_task_alloc(dword_1009AEE14);
  *(void *)(v0 + 464) = v77;
  void *v77 = v0;
  v77[1] = sub_100460B04;
  uint64_t v78 = *(void *)(v0 + 384);
  v77[15] = *(void *)(v0 + 320);
  v77[16] = v78;
  return swift_task_switch(sub_100462F90, 0LL, 0LL);
}

id sub_1004628D8(void *a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  uint64_t v48 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = type metadata accessor for UUID(0LL);
  uint64_t v47 = *(void *)(v49 - 8);
  uint64_t v6 = __chkstk_darwin(v49);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v47 - v9;
  id v11 = [a1 allowedSessions];
  uint64_t v12 = sub_100022898(0LL, &qword_1009A0A70, &OBJC_CLASS___SPCBPeripheralManagerSessionKey_ptr);
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  uint64_t v14 = (void *)sub_1006F1D8C(v13);
  swift_bridgeObjectRelease();
  id v15 = [a2 allowedSessions];
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v12);

  uint64_t v17 = sub_1006F1D8C(v16);
  swift_bridgeObjectRelease();
  sub_10045D4C8( v17,  v14,  &qword_1009A0A70,  &OBJC_CLASS___SPCBPeripheralManagerSessionKey_ptr,  &qword_1009A8E30,  (void (*)(id *, id))sub_1000C1110);
  uint64_t v50 = sub_1002FEF6C(v18);
  swift_bridgeObjectRelease();
  id v19 = [a1 userIdentifier];
  uint64_t v51 = v10;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  id v20 = [a1 beaconIdentifier];
  uint64_t v52 = v8;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

  id v21 = [a1 groupIdentifier];
  if (v21)
  {
    unint64_t v22 = v21;
    uint64_t v23 = v48;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

    uint64_t v24 = 0LL;
  }

  else
  {
    uint64_t v24 = 1LL;
    uint64_t v23 = v48;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v23, v24, 1LL, v49);
  id v25 = [a1 name];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v48 = v27;
  uint64_t v49 = v26;

  LODWORD(v47) = [a1 partIdentifier];
  id v28 = [a1 serialNumber];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v31 = v30;

  char v32 = [a1 managedByFindMy];
  id v33 = [a1 primaryIndex];
  id v34 = [a1 ltkIndexMap];
  uint64_t v35 = sub_100022898(0LL, (unint64_t *)&qword_1009A9C80, &OBJC_CLASS___NSNumber_ptr);
  unint64_t v36 = sub_100463B8C();
  uint64_t v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for Data, v35, v36);

  id v38 = [a1 lastConnectedLEMAC];
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
    unint64_t v42 = v41;
  }

  else
  {
    uint64_t v40 = 0LL;
    unint64_t v42 = 0xF000000000000000LL;
  }

  id v43 = [a1 keyAddressPairs];
  uint64_t v44 = sub_100022898(0LL, &qword_1009AEDE8, &OBJC_CLASS___SPCBPeripheralKeyAddressPair_ptr);
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, v44);

  id v45 = objc_allocWithZone(&OBJC_CLASS___SPPeripheral);
  return sub_1004634D8((uint64_t)v51, (uint64_t)v52, v23, v49, v48, v47, v29, v31, v32, (uint64_t)v33, v37, v40, v42);
}

uint64_t sub_100462D00(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + 32) = a2;
  *(void *)(v2 + 24) = a1;
  return swift_task_switch(sub_100462D1C, 0LL, 0LL);
}

uint64_t sub_100462D1C()
{
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AB30);
  swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    int v14 = *(_DWORD *)(v0 + 32);
    uint64_t v6 = *(void *)(v0 + 24);
    uint64_t v7 = swift_slowAlloc(18LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain(v6);
    uint64_t v10 = Dictionary.description.getter( v9,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_1003F11D4(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v6, 2LL);
    *(_WORD *)(v7 + 12) = 1024;
    *(_DWORD *)(v0 + swift_weakDestroy(v0 + 16) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 20, v7 + 14, v7 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "TRACE: leechScannerDiscovered: %s rssi: %d",  (uint8_t *)v7,  0x12u);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 24), 2LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100462F2C()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  sub_10000A8AC(v0, qword_1009AED70);
  sub_10000A720(v0, (uint64_t)qword_1009AED70);
  return sub_1005E2270(0);
}

uint64_t sub_100462F78(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return swift_task_switch(sub_100462F90, 0LL, 0LL);
}

uint64_t sub_100462F90()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 136) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10046307C;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10046307C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004630D8, 0LL, 0LL);
}

uint64_t sub_1004630D8()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 144))
  {
    uint64_t v2 = *(void *)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
    uint64_t v4 = v2 + *(int *)(v3 + 20);
    uint64_t v5 = v2 + *(int *)(v3 + 28);
    uint64_t v6 = (void *)swift_task_alloc(dword_1009BCD2C);
    *(void *)(v0 + 152) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10046326C;
    return sub_1006D5220(*(void *)(v0 + 120), v4, v5);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A2AB30);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No ObservationStoreService available!", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    unint64_t v13 = sub_1000157D0();
    uint64_t v14 = swift_allocError(&type metadata for DaemonError, v13, 0LL, 0LL);
    void *v15 = 0xD000000000000017LL;
    v15[1] = 0x800000010085BE10LL;
    swift_willThrow(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10046326C()
{
  return swift_task_switch(sub_1004632C0, 0LL, 0LL);
}

uint64_t sub_1004632C0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004632F4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_1009AED9C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10033ED2C;
  return sub_10045D778(a1);
}

uint64_t sub_100463340(uint64_t a1, int a2)
{
  uint64_t v5 = swift_task_alloc(dword_1009AEE24);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_1000159BC;
  *(_DWORD *)(v5 + 32) = a2;
  *(void *)(v5 + 24) = a1;
  return swift_task_switch(sub_100462D1C, 0LL, 0LL);
}

Swift::Int sub_1004633A8()
{
  return Hasher._finalize()();
}

uint64_t sub_1004633FC(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000027LL, 0x8000000100850130LL);
}

Swift::Int sub_100463418(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100463468@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936BC0, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1004634B8(void *a1@<X8>)
{
  *a1 = 0xD000000000000027LL;
  a1[1] = 0x8000000100850130LL;
}

id sub_1004634D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  v30.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v33 = a2;
  v29.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v35 = *(void *)(v15 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(a3, 1LL, v15) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(a3, v15);
  }

  uint64_t v27 = v15;
  Class v28 = isa;
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100022898(0LL, (unint64_t *)&qword_1009A9C80, &OBJC_CLASS___NSNumber_ptr);
  sub_100463B8C();
  v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v20 = 0LL;
  if (a13 >> 60 != 15)
  {
    Class v20 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000182F0(a12, a13);
  }

  sub_100022898(0LL, &qword_1009A0A70, &OBJC_CLASS___SPCBPeripheralManagerSessionKey_ptr);
  Class v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100022898(0LL, &qword_1009AEDE8, &OBJC_CLASS___SPCBPeripheralKeyAddressPair_ptr);
  Class v22 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LOBYTE(v26) = a9 & 1;
  id v23 = [v32 initWithUserIdentifier:v30.super.isa beaconIdentifier:v29.super.isa groupIdentifier:v28 name:v17 partIdentifier:a6 serialNumber:v18 managedByFindMy:v26 prima ryIndex:a10 ltkIndexMap:v19.super.isa lastConnectedLEMAC:v20 allowedSessions:v21 keyAddressPairs:v22];

  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
  v24(v33, v27);
  v24(a1, v27);
  return v23;
}

unint64_t sub_100463778(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E1F8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10001581C(v7, (uint64_t)&v16, &qword_1009AD4C0);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_1004638AC(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    unint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *unint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10006A358(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004638AC(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100463910(a1, a2, v5);
}

unint64_t sub_100463910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

uint64_t type metadata accessor for ManagedCBPeripheralManager.KeyType(uint64_t a1)
{
  uint64_t result = qword_1009AEE80;
  if (!qword_1009AEE80) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ManagedCBPeripheralManager.KeyType);
  }
  return result;
}

unint64_t sub_100463A90()
{
  unint64_t result = qword_1009AEDA0;
  if (!qword_1009AEDA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803628, &type metadata for ManagedCBPeripheralManagerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009AEDA0);
  }

  return result;
}

uint64_t sub_100463AD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_1009AEDB4);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000159BC;
  return sub_10045E78C(a1, a2, v7, v6);
}

unint64_t sub_100463B40()
{
  unint64_t result = qword_1009AEDD0;
  if (!qword_1009AEDD0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009AEDC0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009AEDD0);
  }

  return result;
}

unint64_t sub_100463B8C()
{
  unint64_t result = qword_1009AEDE0;
  if (!qword_1009AEDE0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1009AEDE0);
  }

  return result;
}

uint64_t sub_100463BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100463C14(uint64_t a1)
{
  return a1;
}

uint64_t sub_100463C48( uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result != 3LL)
  {
    sub_100016F9C(a3, a4);
    return sub_100016F9C(a5, a6);
  }

  return result;
}

uint64_t sub_100463C90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ManagedCBPeripheralManager.StableIdentifierInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ManagedCBPeripheralManager.StableIdentifierInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedCBPeripheralManager.StableIdentifierInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedCBPeripheralManager.StableIdentifierInfo( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralManager.StableIdentifierInfo()
{
  return &type metadata for ManagedCBPeripheralManager.StableIdentifierInfo;
}

uint64_t storeEnumTagSinglePayload for ManagedCBPeripheralManagerEntitlement(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100463E2C + 4 * byte_100803490[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100463E4C + 4 * byte_100803495[v4]))();
  }
}

_BYTE *sub_100463E2C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100463E4C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100463E54(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100463E5C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100463E64(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100463E6C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralManagerEntitlement()
{
  return &type metadata for ManagedCBPeripheralManagerEntitlement;
}

uint64_t sub_100463E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100463E94);
}

uint64_t sub_100463E94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_100463ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100463EDC);
}

uint64_t sub_100463EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_100463F1C()
{
  return sub_100007864( &qword_1009AEEB8,  type metadata accessor for ManagedCBPeripheralManager.KeyType,  (uint64_t)&unk_100803520);
}

unint64_t sub_100463F4C()
{
  unint64_t result = qword_1009AEEC0;
  if (!qword_1009AEEC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803600, &type metadata for ManagedCBPeripheralManagerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009AEEC0);
  }

  return result;
}

unint64_t sub_100463F94()
{
  unint64_t result = qword_1009AEEC8;
  if (!qword_1009AEEC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803588, &type metadata for ManagedCBPeripheralManagerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009AEEC8);
  }

  return result;
}

uint64_t sub_100463FD8()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 96));
}

uint64_t sub_100463FE0(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 148));
}

uint64_t sub_100463FEC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 152));
}

uint64_t sub_100464000(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 156));
}

uint64_t sub_100464014(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 160));
}

uint64_t sub_100464028()
{
  return *(void *)(v0 + 64);
}

uint64_t sub_100464034()
{
  return *(void *)(v0 + 104);
}

uint64_t sub_100464040()
{
  return *(void *)(v0 + 120);
}

uint64_t sub_10046404C()
{
  return *(void *)(v0 + 136);
}

uint64_t sub_100464058()
{
  return *(void *)(v0 + 152);
}

uint64_t sub_100464064()
{
  return *(void *)(v0 + 168);
}

uint64_t sub_100464070()
{
  return *(void *)(v0 + 184);
}

uint64_t sub_10046407C()
{
  return *(unsigned __int8 *)(v0 + 193);
}

uint64_t sub_100464084()
{
  uint64_t v0 = sub_100004AEC(&qword_1009AEED0);
  return CustomCodableKeyDictionary.wrappedValue.getter(v0);
}

uint64_t sub_1004640B4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 92));
}

uint64_t sub_1004640C8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 96));
}

uint64_t sub_1004640DC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 100));
}

uint64_t sub_1004640F0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 104));
}

uint64_t sub_100464104(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 108));
}

uint64_t sub_100464118(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 112));
}

uint64_t sub_10046412C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 116));
}

uint64_t sub_100464140(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 120));
}

uint64_t sub_100464154(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 124));
}

uint64_t sub_100464168(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 128));
}

uint64_t sub_10046417C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 132));
}

uint64_t sub_100464188(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 136));
}

uint64_t sub_10046419C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 140));
}

uint64_t sub_1004641B0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 144));
}

uint64_t sub_1004641C4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 164));
}

uint64_t sub_1004641D8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 168));
}

uint64_t sub_1004641EC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 172));
}

uint64_t sub_100464200(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 176));
}

uint64_t sub_100464214(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 180));
}

uint64_t sub_100464228(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 184));
}

uint64_t sub_10046423C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 188));
}

uint64_t sub_100464250(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 192));
}

uint64_t sub_100464264(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 196));
}

uint64_t sub_100464278(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 200));
}

uint64_t sub_10046428C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 204));
}

uint64_t sub_1004642A0(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 208));
}

uint64_t sub_1004642AC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 212));
}

uint64_t sub_1004642C0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 216));
}

uint64_t sub_1004642D4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 220));
}

uint64_t sub_1004642E8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 224));
}

uint64_t sub_1004642FC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 228));
}

uint64_t sub_100464310(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 232));
}

uint64_t sub_100464324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100464618(v2 + *(int *)(a1 + 244), a2);
}

uint64_t sub_100464334(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 236));
}

uint64_t sub_100464340(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 240));
}

uint64_t sub_10046434C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 268));
}

uint64_t sub_100464360(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 272));
}

uint64_t sub_100464374(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 592));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1004643A8(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 600));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1004643DC(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + *(int *)(a1 + 608)));
}

uint64_t sub_1004643E8(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 324));
}

uint64_t sub_1004643F4(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 328));
}

uint64_t sub_100464400(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 332));
}

uint64_t sub_10046440C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 276));
}

uint64_t sub_100464420(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 280));
}

uint64_t sub_100464434(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 88));
}

uint64_t sub_100464448(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 320));
}

uint64_t sub_10046445C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 336));
}

uint64_t sub_100464470(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 340));
}

uint64_t sub_100464484(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 348));
}

uint64_t sub_100464498(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 352));
}

uint64_t sub_1004644AC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 356));
}

uint64_t sub_1004644C0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 360));
}

uint64_t sub_1004644D4(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 372));
}

uint64_t sub_1004644E0(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 388));
}

uint64_t sub_1004644EC(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 392));
}

uint64_t sub_1004644F8(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 396));
}

uint64_t sub_100464504(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 416));
}

uint64_t sub_100464510(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + *(int *)(a1 + 424)));
}

uint64_t sub_10046451C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 432));
}

uint64_t sub_100464528(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + *(int *)(a1 + 436)));
}

uint64_t sub_100464534(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 448));
}

uint64_t sub_100464540(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 468));
}

uint64_t sub_100464554(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 472));
}

uint64_t sub_100464568(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 476));
}

uint64_t sub_10046457C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 512));
}

uint64_t sub_100464590(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 520));
}

uint64_t sub_1004645A4(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 532));
}

uint64_t sub_1004645B0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 536));
}

uint64_t sub_1004645C4(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 544));
}

unint64_t sub_1004645D0(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 548)) | ((unint64_t)*(unsigned __int8 *)(v1 + *(int *)(a1 + 548) + 4) << 32);
}

uint64_t sub_1004645F8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 552));
}

uint64_t sub_10046460C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 580));
}

uint64_t sub_100464618(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B9A80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_BYTE *sub_100464660(_BYTE *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v132 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_BYTE *)(v132 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1 = *(_BYTE *)a2;
    uint64_t v7 = a2[2];
    *((void *)v4 + 1) = a2[1];
    *((void *)v4 + 2) = v7;
    uint64_t v8 = a2[3];
    unint64_t v9 = a2[4];
    swift_bridgeObjectRetain(v7);
    sub_10001736C(v8, v9);
    *((void *)v4 + 3) = v8;
    *((void *)v4 + 4) = v9;
    __int128 v10 = *(_OWORD *)(a2 + 5);
    uint64_t v11 = a2[8];
    *((void *)v4 + 7) = a2[7];
    *((void *)v4 + 8) = v11;
    v4[72] = *((_BYTE *)a2 + 72);
    *((void *)v4 + 10) = a2[10];
    v4[88] = *((_BYTE *)a2 + 88);
    v4[112] = *((_BYTE *)a2 + 112);
    uint64_t v12 = a2[12];
    uint64_t v13 = a2[13];
    *((void *)v4 + 12) = v12;
    *((void *)v4 + 13) = v13;
    *((void *)v4 + 15) = a2[15];
    v4[128] = *((_BYTE *)a2 + 128);
    *((void *)v4 + 17) = a2[17];
    v4[144] = *((_BYTE *)a2 + 144);
    *((void *)v4 + 19) = a2[19];
    v4[160] = *((_BYTE *)a2 + 160);
    v4[176] = *((_BYTE *)a2 + 176);
    *((void *)v4 + 21) = a2[21];
    uint64_t v14 = a2[23];
    v4[192] = *((_BYTE *)a2 + 192);
    *((void *)v4 + 23) = v14;
    v4[193] = *((_BYTE *)a2 + 193);
    uint64_t v15 = a3[21];
    uint64_t v16 = &v4[v15];
    uint64_t v17 = (uint64_t)a2 + v15;
    *(_OWORD *)(v4 + 40) = v10;
    swift_bridgeObjectRetain(v12);
    uint64_t v18 = sub_100004AEC(&qword_1009AEED0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
    uint64_t v19 = a3[22];
    uint64_t v20 = a3[23];
    Class v21 = &v4[v19];
    uint64_t v22 = (uint64_t)a2 + v19;
    *(void *)Class v21 = *(void *)v22;
    v21[8] = *(_BYTE *)(v22 + 8);
    id v23 = &v4[v20];
    uint64_t v24 = (uint64_t)a2 + v20;
    *(void *)id v23 = *(void *)v24;
    v23[8] = *(_BYTE *)(v24 + 8);
    uint64_t v25 = a3[24];
    uint64_t v26 = a3[25];
    uint64_t v27 = &v4[v25];
    uint64_t v28 = (uint64_t)a2 + v25;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = *(_BYTE *)(v28 + 8);
    NSUUID v29 = &v4[v26];
    uint64_t v30 = (uint64_t)a2 + v26;
    v29[8] = *(_BYTE *)(v30 + 8);
    *(void *)NSUUID v29 = *(void *)v30;
    uint64_t v31 = a3[26];
    uint64_t v32 = a3[27];
    uint64_t v33 = &v4[v31];
    uint64_t v34 = (uint64_t)a2 + v31;
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = *(_BYTE *)(v34 + 8);
    uint64_t v35 = &v4[v32];
    uint64_t v36 = (uint64_t)a2 + v32;
    *(void *)uint64_t v35 = *(void *)v36;
    v35[8] = *(_BYTE *)(v36 + 8);
    uint64_t v37 = a3[28];
    uint64_t v38 = a3[29];
    uint64_t v39 = &v4[v37];
    uint64_t v40 = (uint64_t)a2 + v37;
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = *(_BYTE *)(v40 + 8);
    unint64_t v41 = &v4[v38];
    uint64_t v42 = (uint64_t)a2 + v38;
    *(void *)unint64_t v41 = *(void *)v42;
    v41[8] = *(_BYTE *)(v42 + 8);
    uint64_t v43 = a3[30];
    uint64_t v44 = a3[31];
    id v45 = &v4[v43];
    uint64_t v46 = (uint64_t)a2 + v43;
    *(void *)id v45 = *(void *)v46;
    v45[8] = *(_BYTE *)(v46 + 8);
    uint64_t v47 = &v4[v44];
    uint64_t v48 = (uint64_t)a2 + v44;
    *(void *)uint64_t v47 = *(void *)v48;
    v47[8] = *(_BYTE *)(v48 + 8);
    uint64_t v49 = a3[32];
    uint64_t v50 = a3[33];
    uint64_t v51 = &v4[v49];
    uint64_t v52 = (uint64_t)a2 + v49;
    *(void *)uint64_t v51 = *(void *)v52;
    v51[8] = *(_BYTE *)(v52 + 8);
    v4[v50] = *((_BYTE *)a2 + v50);
    uint64_t v53 = a3[34];
    uint64_t v54 = a3[35];
    uint64_t v55 = &v4[v53];
    uint64_t v56 = (uint64_t)a2 + v53;
    *(void *)uint64_t v55 = *(void *)v56;
    v55[8] = *(_BYTE *)(v56 + 8);
    uint64_t v57 = &v4[v54];
    uint64_t v58 = (uint64_t)a2 + v54;
    *(void *)uint64_t v57 = *(void *)v58;
    v57[8] = *(_BYTE *)(v58 + 8);
    uint64_t v59 = a3[36];
    uint64_t v60 = a3[37];
    uint64_t v61 = &v4[v59];
    uint64_t v62 = (uint64_t)a2 + v59;
    *(void *)uint64_t v61 = *(void *)v62;
    v61[8] = *(_BYTE *)(v62 + 8);
    v4[v60] = *((_BYTE *)a2 + v60);
    uint64_t v63 = a3[38];
    uint64_t v64 = a3[39];
    char v65 = &v4[v63];
    uint64_t v66 = (uint64_t)a2 + v63;
    *(void *)char v65 = *(void *)v66;
    v65[8] = *(_BYTE *)(v66 + 8);
    BOOL v67 = &v4[v64];
    uint64_t v68 = (uint64_t)a2 + v64;
    *(void *)BOOL v67 = *(void *)v68;
    v67[8] = *(_BYTE *)(v68 + 8);
    uint64_t v69 = a3[40];
    uint64_t v70 = a3[41];
    char v71 = &v4[v69];
    uint64_t v72 = (uint64_t)a2 + v69;
    *(void *)char v71 = *(void *)v72;
    char v71[8] = *(_BYTE *)(v72 + 8);
    BOOL v73 = &v4[v70];
    uint64_t v74 = (uint64_t)a2 + v70;
    *(void *)BOOL v73 = *(void *)v74;
    v73[8] = *(_BYTE *)(v74 + 8);
    uint64_t v75 = a3[42];
    uint64_t v76 = a3[43];
    unsigned __int8 v77 = &v4[v75];
    uint64_t v78 = (uint64_t *)((char *)a2 + v75);
    uint64_t v79 = *v78;
    v77[8] = *((_BYTE *)v78 + 8);
    *(void *)unsigned __int8 v77 = v79;
    uint64_t v80 = &v4[v76];
    uint64_t v81 = (uint64_t)a2 + v76;
    *(void *)uint64_t v80 = *(void *)v81;
    v80[8] = *(_BYTE *)(v81 + 8);
    uint64_t v82 = a3[44];
    uint64_t v83 = a3[45];
    uint64_t v84 = &v4[v82];
    uint64_t v85 = (uint64_t)a2 + v82;
    *(void *)uint64_t v84 = *(void *)v85;
    v84[8] = *(_BYTE *)(v85 + 8);
    uint64_t v86 = &v4[v83];
    uint64_t v87 = (uint64_t)a2 + v83;
    *(void *)uint64_t v86 = *(void *)v87;
    v86[8] = *(_BYTE *)(v87 + 8);
    uint64_t v88 = a3[46];
    uint64_t v89 = a3[47];
    uint64_t v90 = &v4[v88];
    uint64_t v91 = (uint64_t)a2 + v88;
    *(void *)uint64_t v90 = *(void *)v91;
    v90[8] = *(_BYTE *)(v91 + 8);
    uint64_t v92 = &v4[v89];
    uint64_t v93 = (uint64_t)a2 + v89;
    *(void *)uint64_t v92 = *(void *)v93;
    v92[8] = *(_BYTE *)(v93 + 8);
    uint64_t v94 = a3[48];
    uint64_t v95 = a3[49];
    uint64_t v96 = &v4[v94];
    uint64_t v97 = (uint64_t)a2 + v94;
    *(void *)uint64_t v96 = *(void *)v97;
    v96[8] = *(_BYTE *)(v97 + 8);
    uint64_t v98 = &v4[v95];
    uint64_t v99 = (uint64_t)a2 + v95;
    *(void *)uint64_t v98 = *(void *)v99;
    v98[8] = *(_BYTE *)(v99 + 8);
    uint64_t v100 = a3[50];
    uint64_t v101 = a3[51];
    BOOL v102 = &v4[v100];
    uint64_t v103 = (uint64_t)a2 + v100;
    *(void *)BOOL v102 = *(void *)v103;
    v102[8] = *(_BYTE *)(v103 + 8);
    char v104 = &v4[v101];
    uint64_t v105 = (uint64_t)a2 + v101;
    *(void *)char v104 = *(void *)v105;
    v104[8] = *(_BYTE *)(v105 + 8);
    uint64_t v106 = a3[53];
    v4[a3[52]] = *((_BYTE *)a2 + a3[52]);
    uint64_t v107 = &v4[v106];
    uint64_t v108 = (uint64_t)a2 + v106;
    *(void *)uint64_t v107 = *(void *)v108;
    v107[8] = *(_BYTE *)(v108 + 8);
    uint64_t v109 = a3[54];
    uint64_t v110 = a3[55];
    uint64_t v111 = &v4[v109];
    uint64_t v112 = (uint64_t)a2 + v109;
    *(void *)uint64_t v111 = *(void *)v112;
    v111[8] = *(_BYTE *)(v112 + 8);
    uint64_t v113 = &v4[v110];
    uint64_t v114 = (uint64_t)a2 + v110;
    *(void *)uint64_t v113 = *(void *)v114;
    v113[8] = *(_BYTE *)(v114 + 8);
    uint64_t v115 = a3[56];
    uint64_t v116 = a3[57];
    uint64_t v117 = &v4[v115];
    uint64_t v118 = (uint64_t)a2 + v115;
    *(void *)uint64_t v117 = *(void *)v118;
    v117[8] = *(_BYTE *)(v118 + 8);
    uint64_t v119 = &v4[v116];
    uint64_t v120 = (uint64_t *)((char *)a2 + v116);
    uint64_t v121 = *v120;
    v119[8] = *((_BYTE *)v120 + 8);
    *(void *)uint64_t v119 = v121;
    uint64_t v122 = a3[58];
    uint64_t v123 = a3[59];
    uint64_t v124 = &v4[v122];
    uint64_t v125 = (uint64_t)a2 + v122;
    *(void *)uint64_t v124 = *(void *)v125;
    v124[8] = *(_BYTE *)(v125 + 8);
    v4[v123] = *((_BYTE *)a2 + v123);
    uint64_t v126 = a3[61];
    v4[a3[60]] = *((_BYTE *)a2 + a3[60]);
    uint64_t v127 = &v4[v126];
    uint64_t v128 = (uint64_t)a2 + v126;
    uint64_t v129 = *(void *)(v128 + 48);
    if (v129)
    {
      __int128 v130 = *(_OWORD *)(v128 + 16);
      *(_OWORD *)uint64_t v127 = *(_OWORD *)v128;
      *((_OWORD *)v127 + 1) = v130;
      *((_OWORD *)v127 + 2) = *(_OWORD *)(v128 + 32);
      *((void *)v127 + 6) = v129;
      *(_OWORD *)(v127 + 56) = *(_OWORD *)(v128 + 56);
      *(_OWORD *)(v127 + 72) = *(_OWORD *)(v128 + 72);
      *(_OWORD *)(v127 + 88) = *(_OWORD *)(v128 + 88);
      uint64_t v131 = *(void *)(v128 + 104);
      *((void *)v127 + 13) = v131;
      swift_bridgeObjectRetain(v129);
      swift_bridgeObjectRetain(v131);
    }

    else
    {
      __int128 v133 = *(_OWORD *)(v128 + 80);
      *((_OWORD *)v127 + 4) = *(_OWORD *)(v128 + 64);
      *((_OWORD *)v127 + 5) = v133;
      *((_OWORD *)v127 + 6) = *(_OWORD *)(v128 + 96);
      __int128 v134 = *(_OWORD *)(v128 + 16);
      *(_OWORD *)uint64_t v127 = *(_OWORD *)v128;
      *((_OWORD *)v127 + 1) = v134;
      __int128 v135 = *(_OWORD *)(v128 + 48);
      *((_OWORD *)v127 + 2) = *(_OWORD *)(v128 + 32);
      *((_OWORD *)v127 + 3) = v135;
    }

    uint64_t v136 = a3[62];
    uint64_t v137 = a3[63];
    uint64_t v138 = &v4[v136];
    uint64_t v139 = (uint64_t)a2 + v136;
    *(void *)uint64_t v138 = *(void *)v139;
    v138[8] = *(_BYTE *)(v139 + 8);
    uint64_t v140 = &v4[v137];
    uint64_t v141 = (uint64_t)a2 + v137;
    *(void *)uint64_t v140 = *(void *)v141;
    v140[8] = *(_BYTE *)(v141 + 8);
    uint64_t v142 = a3[64];
    uint64_t v143 = &v4[v142];
    uint64_t v144 = (uint64_t)a2 + v142;
    *(void *)uint64_t v143 = *(void *)v144;
    v143[8] = *(_BYTE *)(v144 + 8);
    uint64_t v145 = a3[65];
    uint64_t v146 = &v4[v145];
    uint64_t v147 = (uint64_t)a2 + v145;
    v146[8] = *(_BYTE *)(v147 + 8);
    *(void *)uint64_t v146 = *(void *)v147;
    uint64_t v148 = a3[66];
    uint64_t v149 = &v4[v148];
    uint64_t v150 = (uint64_t)a2 + v148;
    *(void *)uint64_t v149 = *(void *)v150;
    v149[8] = *(_BYTE *)(v150 + 8);
    uint64_t v151 = a3[67];
    uint64_t v152 = &v4[v151];
    uint64_t v153 = (uint64_t)a2 + v151;
    *(void *)uint64_t v152 = *(void *)v153;
    v152[8] = *(_BYTE *)(v153 + 8);
    uint64_t v154 = a3[68];
    uint64_t v155 = &v4[v154];
    uint64_t v156 = (uint64_t)a2 + v154;
    *(void *)uint64_t v155 = *(void *)v156;
    v155[8] = *(_BYTE *)(v156 + 8);
    uint64_t v157 = a3[69];
    unsigned int v158 = &v4[v157];
    uint64_t v159 = (uint64_t)a2 + v157;
    *(void *)unsigned int v158 = *(void *)v159;
    v158[8] = *(_BYTE *)(v159 + 8);
    uint64_t v160 = a3[70];
    uint64_t v161 = &v4[v160];
    uint64_t v162 = (uint64_t)a2 + v160;
    *(void *)uint64_t v161 = *(void *)v162;
    v161[8] = *(_BYTE *)(v162 + 8);
    uint64_t v163 = a3[71];
    char v164 = &v4[v163];
    uint64_t v165 = (uint64_t)a2 + v163;
    *(void *)char v164 = *(void *)v165;
    v164[8] = *(_BYTE *)(v165 + 8);
    uint64_t v166 = a3[72];
    char v167 = &v4[v166];
    uint64_t v168 = (uint64_t)a2 + v166;
    *(void *)char v167 = *(void *)v168;
    char v167[8] = *(_BYTE *)(v168 + 8);
    uint64_t v169 = a3[73];
    char v170 = &v4[v169];
    uint64_t v171 = (uint64_t)a2 + v169;
    *(void *)char v170 = *(void *)v171;
    v170[8] = *(_BYTE *)(v171 + 8);
    uint64_t v172 = a3[74];
    uint64_t v173 = &v4[v172];
    uint64_t v174 = (uint64_t)a2 + v172;
    *(void *)uint64_t v173 = *(void *)v174;
    v173[8] = *(_BYTE *)(v174 + 8);
    uint64_t v175 = a3[75];
    uint64_t v176 = &v4[v175];
    uint64_t v177 = (uint64_t)a2 + v175;
    *(void *)uint64_t v176 = *(void *)v177;
    v176[8] = *(_BYTE *)(v177 + 8);
    uint64_t v178 = a3[76];
    __n128 v179 = &v4[v178];
    uint64_t v180 = (uint64_t)a2 + v178;
    *(void *)__n128 v179 = *(void *)v180;
    v179[8] = *(_BYTE *)(v180 + 8);
    uint64_t v181 = a3[77];
    uint64_t v182 = &v4[v181];
    uint64_t v183 = (uint64_t)a2 + v181;
    *(void *)uint64_t v182 = *(void *)v183;
    v182[8] = *(_BYTE *)(v183 + 8);
    uint64_t v184 = a3[78];
    uint64_t v185 = &v4[v184];
    uint64_t v186 = (uint64_t)a2 + v184;
    *(void *)uint64_t v185 = *(void *)v186;
    v185[8] = *(_BYTE *)(v186 + 8);
    uint64_t v187 = a3[79];
    uint64_t v188 = &v4[v187];
    uint64_t v189 = (uint64_t)a2 + v187;
    *(void *)uint64_t v188 = *(void *)v189;
    v188[8] = *(_BYTE *)(v189 + 8);
    uint64_t v190 = a3[80];
    uint64_t v191 = &v4[v190];
    uint64_t v192 = (uint64_t)a2 + v190;
    *(void *)uint64_t v191 = *(void *)v192;
    v191[8] = *(_BYTE *)(v192 + 8);
    v4[a3[81]] = *((_BYTE *)a2 + a3[81]);
    v4[a3[82]] = *((_BYTE *)a2 + a3[82]);
    v4[a3[83]] = *((_BYTE *)a2 + a3[83]);
    uint64_t v193 = a3[84];
    uint64_t v194 = &v4[v193];
    uint64_t v195 = (uint64_t)a2 + v193;
    *(void *)uint64_t v194 = *(void *)v195;
    v194[8] = *(_BYTE *)(v195 + 8);
    uint64_t v196 = a3[85];
    uint64_t v197 = &v4[v196];
    uint64_t v198 = (uint64_t)a2 + v196;
    *(void *)uint64_t v197 = *(void *)v198;
    v197[8] = *(_BYTE *)(v198 + 8);
    uint64_t v199 = a3[86];
    uint64_t v200 = &v4[v199];
    uint64_t v201 = (uint64_t)a2 + v199;
    *(void *)uint64_t v200 = *(void *)v201;
    v200[8] = *(_BYTE *)(v201 + 8);
    uint64_t v202 = a3[87];
    uint64_t v203 = &v4[v202];
    uint64_t v204 = (uint64_t)a2 + v202;
    *(void *)uint64_t v203 = *(void *)v204;
    v203[8] = *(_BYTE *)(v204 + 8);
    uint64_t v205 = a3[88];
    uint64_t v206 = &v4[v205];
    uint64_t v207 = (uint64_t *)((char *)a2 + v205);
    uint64_t v208 = *v207;
    v206[8] = *((_BYTE *)v207 + 8);
    *(void *)uint64_t v206 = v208;
    uint64_t v209 = a3[89];
    uint64_t v210 = &v4[v209];
    uint64_t v211 = (uint64_t)a2 + v209;
    *(void *)uint64_t v210 = *(void *)v211;
    v210[8] = *(_BYTE *)(v211 + 8);
    uint64_t v212 = a3[90];
    uint64_t v213 = &v4[v212];
    uint64_t v214 = (uint64_t)a2 + v212;
    *(void *)uint64_t v213 = *(void *)v214;
    v213[8] = *(_BYTE *)(v214 + 8);
    uint64_t v215 = a3[91];
    uint64_t v216 = &v4[v215];
    uint64_t v217 = (uint64_t)a2 + v215;
    *(void *)uint64_t v216 = *(void *)v217;
    v216[8] = *(_BYTE *)(v217 + 8);
    uint64_t v218 = a3[92];
    uint64_t v219 = &v4[v218];
    uint64_t v220 = (uint64_t)a2 + v218;
    *(void *)uint64_t v219 = *(void *)v220;
    v219[8] = *(_BYTE *)(v220 + 8);
    v4[a3[93]] = *((_BYTE *)a2 + a3[93]);
    uint64_t v221 = a3[94];
    uint64_t v222 = &v4[v221];
    uint64_t v223 = (uint64_t)a2 + v221;
    *(void *)uint64_t v222 = *(void *)v223;
    v222[8] = *(_BYTE *)(v223 + 8);
    uint64_t v224 = a3[95];
    uint64_t v225 = &v4[v224];
    uint64_t v226 = (uint64_t)a2 + v224;
    *(void *)uint64_t v225 = *(void *)v226;
    v225[8] = *(_BYTE *)(v226 + 8);
    uint64_t v227 = a3[96];
    uint64_t v228 = &v4[v227];
    uint64_t v229 = (uint64_t)a2 + v227;
    *(void *)uint64_t v228 = *(void *)v229;
    uint64_t v230 = a3[97];
    char v231 = *((_BYTE *)a2 + v230);
    v228[8] = *(_BYTE *)(v229 + 8);
    v4[v230] = v231;
    v4[a3[98]] = *((_BYTE *)a2 + a3[98]);
    v4[a3[99]] = *((_BYTE *)a2 + a3[99]);
    uint64_t v232 = a3[100];
    uint64_t v233 = &v4[v232];
    uint64_t v234 = (uint64_t)a2 + v232;
    *(void *)uint64_t v233 = *(void *)v234;
    v233[8] = *(_BYTE *)(v234 + 8);
    uint64_t v235 = a3[101];
    uint64_t v236 = &v4[v235];
    uint64_t v237 = (uint64_t)a2 + v235;
    *(void *)uint64_t v236 = *(void *)v237;
    v236[8] = *(_BYTE *)(v237 + 8);
    uint64_t v238 = a3[102];
    uint64_t v239 = &v4[v238];
    uint64_t v240 = (uint64_t)a2 + v238;
    *(void *)uint64_t v239 = *(void *)v240;
    v239[8] = *(_BYTE *)(v240 + 8);
    uint64_t v241 = a3[103];
    uint64_t v242 = &v4[v241];
    uint64_t v243 = (uint64_t)a2 + v241;
    *(void *)uint64_t v242 = *(void *)v243;
    v242[8] = *(_BYTE *)(v243 + 8);
    v4[a3[104]] = *((_BYTE *)a2 + a3[104]);
    uint64_t v244 = a3[105];
    uint64_t v245 = &v4[v244];
    uint64_t v246 = (uint64_t)a2 + v244;
    *(void *)uint64_t v245 = *(void *)v246;
    v245[8] = *(_BYTE *)(v246 + 8);
    uint64_t v247 = a3[106];
    uint64_t v248 = *(uint64_t *)((char *)a2 + v247);
    *(void *)&v4[v247] = v248;
    uint64_t v249 = a3[107];
    uint64_t v250 = &v4[v249];
    uint64_t v251 = (uint64_t)a2 + v249;
    *(void *)uint64_t v250 = *(void *)v251;
    v250[8] = *(_BYTE *)(v251 + 8);
    v4[a3[108]] = *((_BYTE *)a2 + a3[108]);
    uint64_t v252 = a3[109];
    uint64_t v253 = *(uint64_t *)((char *)a2 + v252);
    *(void *)&v4[v252] = v253;
    uint64_t v254 = a3[110];
    uint64_t v255 = &v4[v254];
    uint64_t v256 = (uint64_t)a2 + v254;
    *(void *)uint64_t v255 = *(void *)v256;
    v255[8] = *(_BYTE *)(v256 + 8);
    uint64_t v257 = a3[111];
    uint64_t v258 = &v4[v257];
    uint64_t v259 = (uint64_t)a2 + v257;
    *(void *)uint64_t v258 = *(void *)v259;
    v258[8] = *(_BYTE *)(v259 + 8);
    v4[a3[112]] = *((_BYTE *)a2 + a3[112]);
    v4[a3[113]] = *((_BYTE *)a2 + a3[113]);
    uint64_t v260 = a3[114];
    uint64_t v261 = &v4[v260];
    uint64_t v262 = (uint64_t)a2 + v260;
    *(void *)uint64_t v261 = *(void *)v262;
    v261[8] = *(_BYTE *)(v262 + 8);
    uint64_t v263 = a3[115];
    uint64_t v264 = &v4[v263];
    uint64_t v265 = (uint64_t)a2 + v263;
    *(void *)uint64_t v264 = *(void *)v265;
    v264[8] = *(_BYTE *)(v265 + 8);
    uint64_t v266 = a3[116];
    uint64_t v267 = &v4[v266];
    uint64_t v268 = (uint64_t)a2 + v266;
    *(void *)uint64_t v267 = *(void *)v268;
    v267[8] = *(_BYTE *)(v268 + 8);
    uint64_t v269 = a3[117];
    uint64_t v270 = &v4[v269];
    uint64_t v271 = (uint64_t)a2 + v269;
    *(void *)uint64_t v270 = *(void *)v271;
    v270[8] = *(_BYTE *)(v271 + 8);
    uint64_t v272 = a3[118];
    uint64_t v273 = &v4[v272];
    uint64_t v274 = (uint64_t *)((char *)a2 + v272);
    uint64_t v275 = *v274;
    v273[8] = *((_BYTE *)v274 + 8);
    *(void *)uint64_t v273 = v275;
    uint64_t v276 = a3[119];
    uint64_t v277 = &v4[v276];
    uint64_t v278 = (uint64_t)a2 + v276;
    *(void *)uint64_t v277 = *(void *)v278;
    v277[8] = *(_BYTE *)(v278 + 8);
    uint64_t v279 = a3[120];
    uint64_t v280 = &v4[v279];
    uint64_t v281 = (uint64_t)a2 + v279;
    *(void *)uint64_t v280 = *(void *)v281;
    v280[8] = *(_BYTE *)(v281 + 8);
    uint64_t v282 = a3[121];
    uint64_t v283 = &v4[v282];
    uint64_t v284 = (uint64_t)a2 + v282;
    *(void *)uint64_t v283 = *(void *)v284;
    v283[8] = *(_BYTE *)(v284 + 8);
    uint64_t v285 = a3[122];
    uint64_t v286 = &v4[v285];
    uint64_t v287 = (uint64_t)a2 + v285;
    *(void *)uint64_t v286 = *(void *)v287;
    v286[8] = *(_BYTE *)(v287 + 8);
    uint64_t v288 = a3[123];
    uint64_t v289 = &v4[v288];
    uint64_t v290 = (uint64_t)a2 + v288;
    *(void *)uint64_t v289 = *(void *)v290;
    v289[8] = *(_BYTE *)(v290 + 8);
    uint64_t v291 = a3[124];
    uint64_t v292 = &v4[v291];
    uint64_t v293 = (uint64_t)a2 + v291;
    *(void *)uint64_t v292 = *(void *)v293;
    v292[8] = *(_BYTE *)(v293 + 8);
    uint64_t v294 = a3[125];
    uint64_t v295 = &v4[v294];
    uint64_t v296 = (uint64_t)a2 + v294;
    *(void *)uint64_t v295 = *(void *)v296;
    v295[8] = *(_BYTE *)(v296 + 8);
    uint64_t v297 = a3[126];
    uint64_t v298 = &v4[v297];
    uint64_t v299 = (uint64_t)a2 + v297;
    *(void *)uint64_t v298 = *(void *)v299;
    v298[8] = *(_BYTE *)(v299 + 8);
    uint64_t v300 = a3[127];
    uint64_t v301 = &v4[v300];
    uint64_t v302 = (uint64_t)a2 + v300;
    *(void *)uint64_t v301 = *(void *)v302;
    v301[8] = *(_BYTE *)(v302 + 8);
    uint64_t v303 = a3[128];
    uint64_t v304 = &v4[v303];
    uint64_t v305 = (uint64_t)a2 + v303;
    *(void *)uint64_t v304 = *(void *)v305;
    v304[8] = *(_BYTE *)(v305 + 8);
    uint64_t v306 = a3[129];
    uint64_t v307 = &v4[v306];
    uint64_t v308 = (uint64_t)a2 + v306;
    *(void *)uint64_t v307 = *(void *)v308;
    v307[8] = *(_BYTE *)(v308 + 8);
    uint64_t v309 = a3[130];
    uint64_t v310 = &v4[v309];
    uint64_t v311 = (uint64_t)a2 + v309;
    *(void *)uint64_t v310 = *(void *)v311;
    v310[8] = *(_BYTE *)(v311 + 8);
    uint64_t v312 = a3[131];
    uint64_t v313 = &v4[v312];
    uint64_t v314 = (uint64_t)a2 + v312;
    *(void *)uint64_t v313 = *(void *)v314;
    v313[8] = *(_BYTE *)(v314 + 8);
    v4[a3[132]] = *((_BYTE *)a2 + a3[132]);
    v4[a3[133]] = *((_BYTE *)a2 + a3[133]);
    uint64_t v315 = a3[134];
    uint64_t v316 = &v4[v315];
    uint64_t v317 = (uint64_t)a2 + v315;
    *(void *)uint64_t v316 = *(void *)v317;
    v316[8] = *(_BYTE *)(v317 + 8);
    uint64_t v318 = a3[135];
    uint64_t v319 = &v4[v318];
    uint64_t v320 = (uint64_t)a2 + v318;
    *(void *)uint64_t v319 = *(void *)v320;
    v319[8] = *(_BYTE *)(v320 + 8);
    v4[a3[136]] = *((_BYTE *)a2 + a3[136]);
    uint64_t v321 = a3[137];
    uint64_t v322 = &v4[v321];
    uint64_t v323 = (uint64_t)a2 + v321;
    *(_DWORD *)uint64_t v322 = *(_DWORD *)v323;
    v322[4] = *(_BYTE *)(v323 + 4);
    uint64_t v324 = a3[138];
    uint64_t v325 = &v4[v324];
    uint64_t v326 = (uint64_t)a2 + v324;
    *(void *)uint64_t v325 = *(void *)v326;
    v325[8] = *(_BYTE *)(v326 + 8);
    uint64_t v327 = a3[139];
    uint64_t v328 = &v4[v327];
    uint64_t v329 = (uint64_t)a2 + v327;
    *(void *)uint64_t v328 = *(void *)v329;
    v328[8] = *(_BYTE *)(v329 + 8);
    uint64_t v330 = a3[140];
    uint64_t v331 = &v4[v330];
    uint64_t v332 = (uint64_t)a2 + v330;
    *(void *)uint64_t v331 = *(void *)v332;
    v331[8] = *(_BYTE *)(v332 + 8);
    uint64_t v333 = a3[141];
    uint64_t v334 = &v4[v333];
    uint64_t v335 = (uint64_t *)((char *)a2 + v333);
    uint64_t v336 = *v335;
    v334[8] = *((_BYTE *)v335 + 8);
    *(void *)uint64_t v334 = v336;
    uint64_t v337 = a3[142];
    uint64_t v338 = &v4[v337];
    uint64_t v339 = (uint64_t)a2 + v337;
    *(void *)uint64_t v338 = *(void *)v339;
    v338[8] = *(_BYTE *)(v339 + 8);
    uint64_t v340 = a3[143];
    uint64_t v341 = &v4[v340];
    uint64_t v342 = (uint64_t)a2 + v340;
    *(void *)uint64_t v341 = *(void *)v342;
    v341[8] = *(_BYTE *)(v342 + 8);
    uint64_t v343 = a3[144];
    uint64_t v344 = &v4[v343];
    uint64_t v345 = (uint64_t)a2 + v343;
    *(void *)uint64_t v344 = *(void *)v345;
    v344[8] = *(_BYTE *)(v345 + 8);
    v4[a3[145]] = *((_BYTE *)a2 + a3[145]);
    uint64_t v346 = a3[146];
    uint64_t v347 = &v4[v346];
    uint64_t v348 = (uint64_t)a2 + v346;
    *(void *)uint64_t v347 = *(void *)v348;
    v347[8] = *(_BYTE *)(v348 + 8);
    uint64_t v349 = a3[147];
    uint64_t v350 = &v4[v349];
    uint64_t v351 = (uint64_t)a2 + v349;
    *(void *)uint64_t v350 = *(void *)v351;
    v350[8] = *(_BYTE *)(v351 + 8);
    uint64_t v352 = a3[148];
    uint64_t v353 = &v4[v352];
    uint64_t v354 = (uint64_t *)((char *)a2 + v352);
    uint64_t v355 = v354[1];
    *uint64_t v353 = *v354;
    v353[1] = v355;
    uint64_t v356 = a3[149];
    uint64_t v357 = &v4[v356];
    uint64_t v358 = (uint64_t)a2 + v356;
    *(void *)uint64_t v357 = *(void *)v358;
    v357[8] = *(_BYTE *)(v358 + 8);
    uint64_t v359 = a3[150];
    uint64_t v360 = &v4[v359];
    uint64_t v361 = (uint64_t *)((char *)a2 + v359);
    uint64_t v362 = v361[1];
    *uint64_t v360 = *v361;
    v360[1] = v362;
    uint64_t v363 = a3[151];
    uint64_t v364 = &v4[v363];
    uint64_t v365 = (uint64_t)a2 + v363;
    *(void *)uint64_t v364 = *(void *)v365;
    v364[8] = *(_BYTE *)(v365 + 8);
    uint64_t v366 = a3[152];
    uint64_t v367 = *(uint64_t *)((char *)a2 + v366);
    *(void *)&v4[v366] = v367;
    swift_bridgeObjectRetain(v248);
    swift_bridgeObjectRetain(v253);
    swift_bridgeObjectRetain(v355);
    swift_bridgeObjectRetain(v362);
    swift_bridgeObjectRetain(v367);
  }

  return v4;
}

uint64_t sub_1004654B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 84);
  uint64_t v5 = sub_100004AEC(&qword_1009AEED0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  if (*(void *)(a1 + *(int *)(a2 + 244) + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100465574(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain(v6);
  sub_10001736C(v7, v8);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  __int128 v9 = *(_OWORD *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  uint64_t v11 = *(void *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v11;
  *(void *)(a1 + 104) = v12;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + sub_100454668(v0 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  uint64_t v13 = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 184) = v13;
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  uint64_t v14 = a3[21];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(_OWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRetain(v11);
  uint64_t v17 = sub_100004AEC(&qword_1009AEED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
  uint64_t v18 = a3[22];
  uint64_t v19 = a3[23];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  uint64_t v22 = a1 + v19;
  uint64_t v23 = a2 + v19;
  *(void *)uint64_t v22 = *(void *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  uint64_t v24 = a3[24];
  uint64_t v25 = a3[25];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(void *)uint64_t v26 = *(void *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  uint64_t v28 = a1 + v25;
  uint64_t v29 = a2 + v25;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  *(void *)uint64_t v28 = *(void *)v29;
  uint64_t v30 = a3[26];
  uint64_t v31 = a3[27];
  uint64_t v32 = a1 + v30;
  uint64_t v33 = a2 + v30;
  *(void *)uint64_t v32 = *(void *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  uint64_t v34 = a1 + v31;
  uint64_t v35 = a2 + v31;
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  uint64_t v36 = a3[28];
  uint64_t v37 = a3[29];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = a2 + v36;
  *(void *)uint64_t v38 = *(void *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  uint64_t v40 = a1 + v37;
  uint64_t v41 = a2 + v37;
  *(void *)uint64_t v40 = *(void *)v41;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  uint64_t v42 = a3[30];
  uint64_t v43 = a3[31];
  uint64_t v44 = a1 + v42;
  uint64_t v45 = a2 + v42;
  *(void *)uint64_t v44 = *(void *)v45;
  *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
  uint64_t v46 = a1 + v43;
  uint64_t v47 = a2 + v43;
  *(void *)uint64_t v46 = *(void *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  uint64_t v48 = a3[32];
  uint64_t v49 = a3[33];
  uint64_t v50 = a1 + v48;
  uint64_t v51 = a2 + v48;
  *(void *)uint64_t v50 = *(void *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  *(_BYTE *)(a1 + v49) = *(_BYTE *)(a2 + v49);
  uint64_t v52 = a3[34];
  uint64_t v53 = a3[35];
  uint64_t v54 = a1 + v52;
  uint64_t v55 = a2 + v52;
  *(void *)uint64_t v54 = *(void *)v55;
  *(_BYTE *)(v54 + 8) = *(_BYTE *)(v55 + 8);
  uint64_t v56 = a1 + v53;
  uint64_t v57 = a2 + v53;
  *(void *)uint64_t v56 = *(void *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  uint64_t v58 = a3[36];
  uint64_t v59 = a3[37];
  uint64_t v60 = a1 + v58;
  uint64_t v61 = a2 + v58;
  *(void *)uint64_t v60 = *(void *)v61;
  *(_BYTE *)(v60 + 8) = *(_BYTE *)(v61 + 8);
  *(_BYTE *)(a1 + v59) = *(_BYTE *)(a2 + v59);
  uint64_t v62 = a3[38];
  uint64_t v63 = a3[39];
  uint64_t v64 = a1 + v62;
  uint64_t v65 = a2 + v62;
  *(void *)uint64_t v64 = *(void *)v65;
  *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
  uint64_t v66 = a1 + v63;
  uint64_t v67 = a2 + v63;
  *(void *)uint64_t v66 = *(void *)v67;
  *(_BYTE *)(v66 + 8) = *(_BYTE *)(v67 + 8);
  uint64_t v68 = a3[40];
  uint64_t v69 = a3[41];
  uint64_t v70 = a1 + v68;
  uint64_t v71 = a2 + v68;
  *(void *)uint64_t v70 = *(void *)v71;
  *(_BYTE *)(v70 + 8) = *(_BYTE *)(v71 + 8);
  uint64_t v72 = a1 + v69;
  uint64_t v73 = a2 + v69;
  *(void *)uint64_t v72 = *(void *)v73;
  *(_BYTE *)(v72 + 8) = *(_BYTE *)(v73 + 8);
  uint64_t v74 = a3[42];
  uint64_t v75 = a3[43];
  uint64_t v76 = a1 + v74;
  unsigned __int8 v77 = (uint64_t *)(a2 + v74);
  uint64_t v78 = *v77;
  *(_BYTE *)(v76 + 8) = *((_BYTE *)v77 + 8);
  *(void *)uint64_t v76 = v78;
  uint64_t v79 = a1 + v75;
  uint64_t v80 = a2 + v75;
  *(void *)uint64_t v79 = *(void *)v80;
  *(_BYTE *)(v79 + 8) = *(_BYTE *)(v80 + 8);
  uint64_t v81 = a3[44];
  uint64_t v82 = a3[45];
  uint64_t v83 = a1 + v81;
  uint64_t v84 = a2 + v81;
  *(void *)uint64_t v83 = *(void *)v84;
  *(_BYTE *)(v83 + 8) = *(_BYTE *)(v84 + 8);
  uint64_t v85 = a1 + v82;
  uint64_t v86 = a2 + v82;
  *(void *)uint64_t v85 = *(void *)v86;
  *(_BYTE *)(v85 + 8) = *(_BYTE *)(v86 + 8);
  uint64_t v87 = a3[46];
  uint64_t v88 = a3[47];
  uint64_t v89 = a1 + v87;
  uint64_t v90 = a2 + v87;
  *(void *)uint64_t v89 = *(void *)v90;
  *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
  uint64_t v91 = a1 + v88;
  uint64_t v92 = a2 + v88;
  *(void *)uint64_t v91 = *(void *)v92;
  *(_BYTE *)(v91 + 8) = *(_BYTE *)(v92 + 8);
  uint64_t v93 = a3[48];
  uint64_t v94 = a3[49];
  uint64_t v95 = a1 + v93;
  uint64_t v96 = a2 + v93;
  *(void *)uint64_t v95 = *(void *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  uint64_t v97 = a1 + v94;
  uint64_t v98 = a2 + v94;
  *(void *)uint64_t v97 = *(void *)v98;
  *(_BYTE *)(v97 + 8) = *(_BYTE *)(v98 + 8);
  uint64_t v99 = a3[50];
  uint64_t v100 = a3[51];
  uint64_t v101 = a1 + v99;
  uint64_t v102 = a2 + v99;
  *(void *)uint64_t v101 = *(void *)v102;
  *(_BYTE *)(v101 + 8) = *(_BYTE *)(v102 + 8);
  uint64_t v103 = a1 + v100;
  uint64_t v104 = a2 + v100;
  *(void *)uint64_t v103 = *(void *)v104;
  *(_BYTE *)(v103 + 8) = *(_BYTE *)(v104 + 8);
  uint64_t v105 = a3[53];
  *(_BYTE *)(a1 + a3[52]) = *(_BYTE *)(a2 + a3[52]);
  uint64_t v106 = a1 + v105;
  uint64_t v107 = a2 + v105;
  *(void *)uint64_t v106 = *(void *)v107;
  *(_BYTE *)(v106 + 8) = *(_BYTE *)(v107 + 8);
  uint64_t v108 = a3[54];
  uint64_t v109 = a3[55];
  uint64_t v110 = a1 + v108;
  uint64_t v111 = a2 + v108;
  *(void *)uint64_t v110 = *(void *)v111;
  *(_BYTE *)(v110 + 8) = *(_BYTE *)(v111 + 8);
  uint64_t v112 = a1 + v109;
  uint64_t v113 = a2 + v109;
  *(void *)uint64_t v112 = *(void *)v113;
  *(_BYTE *)(v112 + 8) = *(_BYTE *)(v113 + 8);
  uint64_t v114 = a3[56];
  uint64_t v115 = a3[57];
  uint64_t v116 = a1 + v114;
  uint64_t v117 = a2 + v114;
  *(void *)uint64_t v116 = *(void *)v117;
  *(_BYTE *)(v116 + 8) = *(_BYTE *)(v117 + 8);
  uint64_t v118 = a1 + v115;
  uint64_t v119 = (uint64_t *)(a2 + v115);
  uint64_t v120 = *v119;
  *(_BYTE *)(v118 + 8) = *((_BYTE *)v119 + 8);
  *(void *)uint64_t v118 = v120;
  uint64_t v121 = a3[58];
  uint64_t v122 = a3[59];
  uint64_t v123 = a1 + v121;
  uint64_t v124 = a2 + v121;
  *(void *)uint64_t v123 = *(void *)v124;
  *(_BYTE *)(v123 + 8) = *(_BYTE *)(v124 + 8);
  *(_BYTE *)(a1 + v122) = *(_BYTE *)(a2 + v122);
  uint64_t v125 = a3[61];
  *(_BYTE *)(a1 + a3[60]) = *(_BYTE *)(a2 + a3[60]);
  uint64_t v126 = a1 + v125;
  uint64_t v127 = a2 + v125;
  uint64_t v128 = *(void *)(v127 + 48);
  if (v128)
  {
    __int128 v129 = *(_OWORD *)(v127 + 16);
    *(_OWORD *)uint64_t v126 = *(_OWORD *)v127;
    *(_OWORD *)(v126 + swift_weakDestroy(v0 + 16) = v129;
    *(_OWORD *)(v126 + 32) = *(_OWORD *)(v127 + 32);
    *(void *)(v126 + 48) = v128;
    *(_OWORD *)(v126 + 56) = *(_OWORD *)(v127 + 56);
    *(_OWORD *)(v126 + 72) = *(_OWORD *)(v127 + 72);
    *(_OWORD *)(v126 + 88) = *(_OWORD *)(v127 + 88);
    uint64_t v130 = *(void *)(v127 + 104);
    *(void *)(v126 + 104) = v130;
    swift_bridgeObjectRetain(v128);
    swift_bridgeObjectRetain(v130);
  }

  else
  {
    __int128 v131 = *(_OWORD *)(v127 + 80);
    *(_OWORD *)(v126 + 64) = *(_OWORD *)(v127 + 64);
    *(_OWORD *)(v126 + 80) = v131;
    *(_OWORD *)(v126 + 96) = *(_OWORD *)(v127 + 96);
    __int128 v132 = *(_OWORD *)(v127 + 16);
    *(_OWORD *)uint64_t v126 = *(_OWORD *)v127;
    *(_OWORD *)(v126 + swift_weakDestroy(v0 + 16) = v132;
    __int128 v133 = *(_OWORD *)(v127 + 48);
    *(_OWORD *)(v126 + 32) = *(_OWORD *)(v127 + 32);
    *(_OWORD *)(v126 + 48) = v133;
  }

  uint64_t v134 = a3[62];
  uint64_t v135 = a3[63];
  uint64_t v136 = a1 + v134;
  uint64_t v137 = a2 + v134;
  *(void *)uint64_t v136 = *(void *)v137;
  *(_BYTE *)(v136 + 8) = *(_BYTE *)(v137 + 8);
  uint64_t v138 = a1 + v135;
  uint64_t v139 = a2 + v135;
  *(void *)uint64_t v138 = *(void *)v139;
  *(_BYTE *)(v138 + 8) = *(_BYTE *)(v139 + 8);
  uint64_t v140 = a3[64];
  uint64_t v141 = a1 + v140;
  uint64_t v142 = a2 + v140;
  *(void *)uint64_t v141 = *(void *)v142;
  *(_BYTE *)(v141 + 8) = *(_BYTE *)(v142 + 8);
  uint64_t v143 = a3[65];
  uint64_t v144 = a1 + v143;
  uint64_t v145 = a2 + v143;
  *(_BYTE *)(v144 + 8) = *(_BYTE *)(v145 + 8);
  *(void *)uint64_t v144 = *(void *)v145;
  uint64_t v146 = a3[66];
  uint64_t v147 = a1 + v146;
  uint64_t v148 = a2 + v146;
  *(void *)uint64_t v147 = *(void *)v148;
  *(_BYTE *)(v147 + 8) = *(_BYTE *)(v148 + 8);
  uint64_t v149 = a3[67];
  uint64_t v150 = a1 + v149;
  uint64_t v151 = a2 + v149;
  *(void *)uint64_t v150 = *(void *)v151;
  *(_BYTE *)(v150 + 8) = *(_BYTE *)(v151 + 8);
  uint64_t v152 = a3[68];
  uint64_t v153 = a1 + v152;
  uint64_t v154 = a2 + v152;
  *(void *)uint64_t v153 = *(void *)v154;
  *(_BYTE *)(v153 + 8) = *(_BYTE *)(v154 + 8);
  uint64_t v155 = a3[69];
  uint64_t v156 = a1 + v155;
  uint64_t v157 = a2 + v155;
  *(void *)uint64_t v156 = *(void *)v157;
  *(_BYTE *)(v156 + 8) = *(_BYTE *)(v157 + 8);
  uint64_t v158 = a3[70];
  uint64_t v159 = a1 + v158;
  uint64_t v160 = a2 + v158;
  *(void *)uint64_t v159 = *(void *)v160;
  *(_BYTE *)(v159 + 8) = *(_BYTE *)(v160 + 8);
  uint64_t v161 = a3[71];
  uint64_t v162 = a1 + v161;
  uint64_t v163 = a2 + v161;
  *(void *)uint64_t v162 = *(void *)v163;
  *(_BYTE *)(v162 + 8) = *(_BYTE *)(v163 + 8);
  uint64_t v164 = a3[72];
  uint64_t v165 = a1 + v164;
  uint64_t v166 = a2 + v164;
  *(void *)uint64_t v165 = *(void *)v166;
  *(_BYTE *)(v165 + 8) = *(_BYTE *)(v166 + 8);
  uint64_t v167 = a3[73];
  uint64_t v168 = a1 + v167;
  uint64_t v169 = a2 + v167;
  *(void *)uint64_t v168 = *(void *)v169;
  *(_BYTE *)(v168 + 8) = *(_BYTE *)(v169 + 8);
  uint64_t v170 = a3[74];
  uint64_t v171 = a1 + v170;
  uint64_t v172 = a2 + v170;
  *(void *)uint64_t v171 = *(void *)v172;
  *(_BYTE *)(v171 + 8) = *(_BYTE *)(v172 + 8);
  uint64_t v173 = a3[75];
  uint64_t v174 = a1 + v173;
  uint64_t v175 = a2 + v173;
  *(void *)uint64_t v174 = *(void *)v175;
  *(_BYTE *)(v174 + 8) = *(_BYTE *)(v175 + 8);
  uint64_t v176 = a3[76];
  uint64_t v177 = a1 + v176;
  uint64_t v178 = a2 + v176;
  *(void *)uint64_t v177 = *(void *)v178;
  *(_BYTE *)(v177 + 8) = *(_BYTE *)(v178 + 8);
  uint64_t v179 = a3[77];
  uint64_t v180 = a1 + v179;
  uint64_t v181 = a2 + v179;
  *(void *)uint64_t v180 = *(void *)v181;
  *(_BYTE *)(v180 + 8) = *(_BYTE *)(v181 + 8);
  uint64_t v182 = a3[78];
  uint64_t v183 = a1 + v182;
  uint64_t v184 = a2 + v182;
  *(void *)uint64_t v183 = *(void *)v184;
  *(_BYTE *)(v183 + 8) = *(_BYTE *)(v184 + 8);
  uint64_t v185 = a3[79];
  uint64_t v186 = a1 + v185;
  uint64_t v187 = a2 + v185;
  *(void *)uint64_t v186 = *(void *)v187;
  *(_BYTE *)(v186 + 8) = *(_BYTE *)(v187 + 8);
  uint64_t v188 = a3[80];
  uint64_t v189 = a1 + v188;
  uint64_t v190 = a2 + v188;
  *(void *)uint64_t v189 = *(void *)v190;
  *(_BYTE *)(v189 + 8) = *(_BYTE *)(v190 + 8);
  *(_BYTE *)(a1 + a3[81]) = *(_BYTE *)(a2 + a3[81]);
  *(_BYTE *)(a1 + a3[82]) = *(_BYTE *)(a2 + a3[82]);
  *(_BYTE *)(a1 + a3[83]) = *(_BYTE *)(a2 + a3[83]);
  uint64_t v191 = a3[84];
  uint64_t v192 = a1 + v191;
  uint64_t v193 = a2 + v191;
  *(void *)uint64_t v192 = *(void *)v193;
  *(_BYTE *)(v192 + 8) = *(_BYTE *)(v193 + 8);
  uint64_t v194 = a3[85];
  uint64_t v195 = a1 + v194;
  uint64_t v196 = a2 + v194;
  *(void *)uint64_t v195 = *(void *)v196;
  *(_BYTE *)(v195 + 8) = *(_BYTE *)(v196 + 8);
  uint64_t v197 = a3[86];
  uint64_t v198 = a1 + v197;
  uint64_t v199 = a2 + v197;
  *(void *)uint64_t v198 = *(void *)v199;
  *(_BYTE *)(v198 + 8) = *(_BYTE *)(v199 + 8);
  uint64_t v200 = a3[87];
  uint64_t v201 = a1 + v200;
  uint64_t v202 = a2 + v200;
  *(void *)uint64_t v201 = *(void *)v202;
  *(_BYTE *)(v201 + 8) = *(_BYTE *)(v202 + 8);
  uint64_t v203 = a3[88];
  uint64_t v204 = a1 + v203;
  uint64_t v205 = (uint64_t *)(a2 + v203);
  uint64_t v206 = *v205;
  *(_BYTE *)(v204 + 8) = *((_BYTE *)v205 + 8);
  *(void *)uint64_t v204 = v206;
  uint64_t v207 = a3[89];
  uint64_t v208 = a1 + v207;
  uint64_t v209 = a2 + v207;
  *(void *)uint64_t v208 = *(void *)v209;
  *(_BYTE *)(v208 + 8) = *(_BYTE *)(v209 + 8);
  uint64_t v210 = a3[90];
  uint64_t v211 = a1 + v210;
  uint64_t v212 = a2 + v210;
  *(void *)uint64_t v211 = *(void *)v212;
  *(_BYTE *)(v211 + 8) = *(_BYTE *)(v212 + 8);
  uint64_t v213 = a3[91];
  uint64_t v214 = a1 + v213;
  uint64_t v215 = a2 + v213;
  *(void *)uint64_t v214 = *(void *)v215;
  *(_BYTE *)(v214 + 8) = *(_BYTE *)(v215 + 8);
  uint64_t v216 = a3[92];
  uint64_t v217 = a1 + v216;
  uint64_t v218 = a2 + v216;
  *(void *)uint64_t v217 = *(void *)v218;
  *(_BYTE *)(v217 + 8) = *(_BYTE *)(v218 + 8);
  *(_BYTE *)(a1 + a3[93]) = *(_BYTE *)(a2 + a3[93]);
  uint64_t v219 = a3[94];
  uint64_t v220 = a1 + v219;
  uint64_t v221 = a2 + v219;
  *(void *)uint64_t v220 = *(void *)v221;
  *(_BYTE *)(v220 + 8) = *(_BYTE *)(v221 + 8);
  uint64_t v222 = a3[95];
  uint64_t v223 = a1 + v222;
  uint64_t v224 = a2 + v222;
  *(void *)uint64_t v223 = *(void *)v224;
  *(_BYTE *)(v223 + 8) = *(_BYTE *)(v224 + 8);
  uint64_t v225 = a3[96];
  uint64_t v226 = a1 + v225;
  uint64_t v227 = a2 + v225;
  *(void *)uint64_t v226 = *(void *)v227;
  uint64_t v228 = a3[97];
  char v229 = *(_BYTE *)(a2 + v228);
  *(_BYTE *)(v226 + 8) = *(_BYTE *)(v227 + 8);
  *(_BYTE *)(a1 + v228) = v229;
  *(_BYTE *)(a1 + a3[98]) = *(_BYTE *)(a2 + a3[98]);
  *(_BYTE *)(a1 + a3[99]) = *(_BYTE *)(a2 + a3[99]);
  uint64_t v230 = a3[100];
  uint64_t v231 = a1 + v230;
  uint64_t v232 = a2 + v230;
  *(void *)uint64_t v231 = *(void *)v232;
  *(_BYTE *)(v231 + 8) = *(_BYTE *)(v232 + 8);
  uint64_t v233 = a3[101];
  uint64_t v234 = a1 + v233;
  uint64_t v235 = a2 + v233;
  *(void *)uint64_t v234 = *(void *)v235;
  *(_BYTE *)(v234 + 8) = *(_BYTE *)(v235 + 8);
  uint64_t v236 = a3[102];
  uint64_t v237 = a1 + v236;
  uint64_t v238 = a2 + v236;
  *(void *)uint64_t v237 = *(void *)v238;
  *(_BYTE *)(v237 + 8) = *(_BYTE *)(v238 + 8);
  uint64_t v239 = a3[103];
  uint64_t v240 = a1 + v239;
  uint64_t v241 = a2 + v239;
  *(void *)uint64_t v240 = *(void *)v241;
  *(_BYTE *)(v240 + 8) = *(_BYTE *)(v241 + 8);
  *(_BYTE *)(a1 + a3[104]) = *(_BYTE *)(a2 + a3[104]);
  uint64_t v242 = a3[105];
  uint64_t v243 = a1 + v242;
  uint64_t v244 = a2 + v242;
  *(void *)uint64_t v243 = *(void *)v244;
  *(_BYTE *)(v243 + 8) = *(_BYTE *)(v244 + 8);
  uint64_t v245 = a3[106];
  uint64_t v246 = *(void *)(a2 + v245);
  *(void *)(a1 + v245) = v246;
  uint64_t v247 = a3[107];
  uint64_t v248 = a1 + v247;
  uint64_t v249 = a2 + v247;
  *(void *)uint64_t v248 = *(void *)v249;
  *(_BYTE *)(v248 + 8) = *(_BYTE *)(v249 + 8);
  *(_BYTE *)(a1 + a3[108]) = *(_BYTE *)(a2 + a3[108]);
  uint64_t v250 = a3[109];
  uint64_t v251 = *(void *)(a2 + v250);
  *(void *)(a1 + v250) = v251;
  uint64_t v252 = a3[110];
  uint64_t v253 = a1 + v252;
  uint64_t v254 = a2 + v252;
  *(void *)uint64_t v253 = *(void *)v254;
  *(_BYTE *)(v253 + 8) = *(_BYTE *)(v254 + 8);
  uint64_t v255 = a3[111];
  uint64_t v256 = a1 + v255;
  uint64_t v257 = a2 + v255;
  *(void *)uint64_t v256 = *(void *)v257;
  *(_BYTE *)(v256 + 8) = *(_BYTE *)(v257 + 8);
  *(_BYTE *)(a1 + a3[112]) = *(_BYTE *)(a2 + a3[112]);
  *(_BYTE *)(a1 + a3[113]) = *(_BYTE *)(a2 + a3[113]);
  uint64_t v258 = a3[114];
  uint64_t v259 = a1 + v258;
  uint64_t v260 = a2 + v258;
  *(void *)uint64_t v259 = *(void *)v260;
  *(_BYTE *)(v259 + 8) = *(_BYTE *)(v260 + 8);
  uint64_t v261 = a3[115];
  uint64_t v262 = a1 + v261;
  uint64_t v263 = a2 + v261;
  *(void *)uint64_t v262 = *(void *)v263;
  *(_BYTE *)(v262 + 8) = *(_BYTE *)(v263 + 8);
  uint64_t v264 = a3[116];
  uint64_t v265 = a1 + v264;
  uint64_t v266 = a2 + v264;
  *(void *)uint64_t v265 = *(void *)v266;
  *(_BYTE *)(v265 + 8) = *(_BYTE *)(v266 + 8);
  uint64_t v267 = a3[117];
  uint64_t v268 = a1 + v267;
  uint64_t v269 = a2 + v267;
  *(void *)uint64_t v268 = *(void *)v269;
  *(_BYTE *)(v268 + 8) = *(_BYTE *)(v269 + 8);
  uint64_t v270 = a3[118];
  uint64_t v271 = a1 + v270;
  uint64_t v272 = (uint64_t *)(a2 + v270);
  uint64_t v273 = *v272;
  *(_BYTE *)(v271 + 8) = *((_BYTE *)v272 + 8);
  *(void *)uint64_t v271 = v273;
  uint64_t v274 = a3[119];
  uint64_t v275 = a1 + v274;
  uint64_t v276 = a2 + v274;
  *(void *)uint64_t v275 = *(void *)v276;
  *(_BYTE *)(v275 + 8) = *(_BYTE *)(v276 + 8);
  uint64_t v277 = a3[120];
  uint64_t v278 = a1 + v277;
  uint64_t v279 = a2 + v277;
  *(void *)uint64_t v278 = *(void *)v279;
  *(_BYTE *)(v278 + 8) = *(_BYTE *)(v279 + 8);
  uint64_t v280 = a3[121];
  uint64_t v281 = a1 + v280;
  uint64_t v282 = a2 + v280;
  *(void *)uint64_t v281 = *(void *)v282;
  *(_BYTE *)(v281 + 8) = *(_BYTE *)(v282 + 8);
  uint64_t v283 = a3[122];
  uint64_t v284 = a1 + v283;
  uint64_t v285 = a2 + v283;
  *(void *)uint64_t v284 = *(void *)v285;
  *(_BYTE *)(v284 + 8) = *(_BYTE *)(v285 + 8);
  uint64_t v286 = a3[123];
  uint64_t v287 = a1 + v286;
  uint64_t v288 = a2 + v286;
  *(void *)uint64_t v287 = *(void *)v288;
  *(_BYTE *)(v287 + 8) = *(_BYTE *)(v288 + 8);
  uint64_t v289 = a3[124];
  uint64_t v290 = a1 + v289;
  uint64_t v291 = a2 + v289;
  *(void *)uint64_t v290 = *(void *)v291;
  *(_BYTE *)(v290 + 8) = *(_BYTE *)(v291 + 8);
  uint64_t v292 = a3[125];
  uint64_t v293 = a1 + v292;
  uint64_t v294 = a2 + v292;
  *(void *)uint64_t v293 = *(void *)v294;
  *(_BYTE *)(v293 + 8) = *(_BYTE *)(v294 + 8);
  uint64_t v295 = a3[126];
  uint64_t v296 = a1 + v295;
  uint64_t v297 = a2 + v295;
  *(void *)uint64_t v296 = *(void *)v297;
  *(_BYTE *)(v296 + 8) = *(_BYTE *)(v297 + 8);
  uint64_t v298 = a3[127];
  uint64_t v299 = a1 + v298;
  uint64_t v300 = a2 + v298;
  *(void *)uint64_t v299 = *(void *)v300;
  *(_BYTE *)(v299 + 8) = *(_BYTE *)(v300 + 8);
  uint64_t v301 = a3[128];
  uint64_t v302 = a1 + v301;
  uint64_t v303 = a2 + v301;
  *(void *)uint64_t v302 = *(void *)v303;
  *(_BYTE *)(v302 + 8) = *(_BYTE *)(v303 + 8);
  uint64_t v304 = a3[129];
  uint64_t v305 = a1 + v304;
  uint64_t v306 = a2 + v304;
  *(void *)uint64_t v305 = *(void *)v306;
  *(_BYTE *)(v305 + 8) = *(_BYTE *)(v306 + 8);
  uint64_t v307 = a3[130];
  uint64_t v308 = a1 + v307;
  uint64_t v309 = a2 + v307;
  *(void *)uint64_t v308 = *(void *)v309;
  *(_BYTE *)(v308 + 8) = *(_BYTE *)(v309 + 8);
  uint64_t v310 = a3[131];
  uint64_t v311 = a1 + v310;
  uint64_t v312 = a2 + v310;
  *(void *)uint64_t v311 = *(void *)v312;
  *(_BYTE *)(v311 + 8) = *(_BYTE *)(v312 + 8);
  *(_BYTE *)(a1 + a3[132]) = *(_BYTE *)(a2 + a3[132]);
  *(_BYTE *)(a1 + a3[133]) = *(_BYTE *)(a2 + a3[133]);
  uint64_t v313 = a3[134];
  uint64_t v314 = a1 + v313;
  uint64_t v315 = a2 + v313;
  *(void *)uint64_t v314 = *(void *)v315;
  *(_BYTE *)(v314 + 8) = *(_BYTE *)(v315 + 8);
  uint64_t v316 = a3[135];
  uint64_t v317 = a1 + v316;
  uint64_t v318 = a2 + v316;
  *(void *)uint64_t v317 = *(void *)v318;
  *(_BYTE *)(v317 + 8) = *(_BYTE *)(v318 + 8);
  *(_BYTE *)(a1 + a3[136]) = *(_BYTE *)(a2 + a3[136]);
  uint64_t v319 = a3[137];
  uint64_t v320 = a1 + v319;
  uint64_t v321 = a2 + v319;
  *(_DWORD *)uint64_t v320 = *(_DWORD *)v321;
  *(_BYTE *)(v320 + 4) = *(_BYTE *)(v321 + 4);
  uint64_t v322 = a3[138];
  uint64_t v323 = a1 + v322;
  uint64_t v324 = a2 + v322;
  *(void *)uint64_t v323 = *(void *)v324;
  *(_BYTE *)(v323 + 8) = *(_BYTE *)(v324 + 8);
  uint64_t v325 = a3[139];
  uint64_t v326 = a1 + v325;
  uint64_t v327 = a2 + v325;
  *(void *)uint64_t v326 = *(void *)v327;
  *(_BYTE *)(v326 + 8) = *(_BYTE *)(v327 + 8);
  uint64_t v328 = a3[140];
  uint64_t v329 = a1 + v328;
  uint64_t v330 = a2 + v328;
  *(void *)uint64_t v329 = *(void *)v330;
  *(_BYTE *)(v329 + 8) = *(_BYTE *)(v330 + 8);
  uint64_t v331 = a3[141];
  uint64_t v332 = a1 + v331;
  uint64_t v333 = (uint64_t *)(a2 + v331);
  uint64_t v334 = *v333;
  *(_BYTE *)(v332 + 8) = *((_BYTE *)v333 + 8);
  *(void *)uint64_t v332 = v334;
  uint64_t v335 = a3[142];
  uint64_t v336 = a1 + v335;
  uint64_t v337 = a2 + v335;
  *(void *)uint64_t v336 = *(void *)v337;
  *(_BYTE *)(v336 + 8) = *(_BYTE *)(v337 + 8);
  uint64_t v338 = a3[143];
  uint64_t v339 = a1 + v338;
  uint64_t v340 = a2 + v338;
  *(void *)uint64_t v339 = *(void *)v340;
  *(_BYTE *)(v339 + 8) = *(_BYTE *)(v340 + 8);
  uint64_t v341 = a3[144];
  uint64_t v342 = a1 + v341;
  uint64_t v343 = a2 + v341;
  *(void *)uint64_t v342 = *(void *)v343;
  *(_BYTE *)(v342 + 8) = *(_BYTE *)(v343 + 8);
  *(_BYTE *)(a1 + a3[145]) = *(_BYTE *)(a2 + a3[145]);
  uint64_t v344 = a3[146];
  uint64_t v345 = a1 + v344;
  uint64_t v346 = a2 + v344;
  *(void *)uint64_t v345 = *(void *)v346;
  *(_BYTE *)(v345 + 8) = *(_BYTE *)(v346 + 8);
  uint64_t v347 = a3[147];
  uint64_t v348 = a1 + v347;
  uint64_t v349 = a2 + v347;
  *(void *)uint64_t v348 = *(void *)v349;
  *(_BYTE *)(v348 + 8) = *(_BYTE *)(v349 + 8);
  uint64_t v350 = a3[148];
  uint64_t v351 = (void *)(a1 + v350);
  uint64_t v352 = (void *)(a2 + v350);
  uint64_t v353 = v352[1];
  void *v351 = *v352;
  v351[1] = v353;
  uint64_t v354 = a3[149];
  uint64_t v355 = a1 + v354;
  uint64_t v356 = a2 + v354;
  *(void *)uint64_t v355 = *(void *)v356;
  *(_BYTE *)(v355 + 8) = *(_BYTE *)(v356 + 8);
  uint64_t v357 = a3[150];
  uint64_t v358 = (void *)(a1 + v357);
  uint64_t v359 = (void *)(a2 + v357);
  uint64_t v360 = v359[1];
  *uint64_t v358 = *v359;
  v358[1] = v360;
  uint64_t v361 = a3[151];
  uint64_t v362 = a1 + v361;
  uint64_t v363 = a2 + v361;
  *(void *)uint64_t v362 = *(void *)v363;
  *(_BYTE *)(v362 + 8) = *(_BYTE *)(v363 + 8);
  uint64_t v364 = a3[152];
  uint64_t v365 = *(void *)(a2 + v364);
  *(void *)(a1 + v364) = v365;
  swift_bridgeObjectRetain(v246);
  swift_bridgeObjectRetain(v251);
  swift_bridgeObjectRetain(v353);
  swift_bridgeObjectRetain(v360);
  swift_bridgeObjectRetain(v365);
  return a1;
}

uint64_t sub_100466398(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  sub_10001736C(v7, v8);
  uint64_t v9 = *(void *)(a1 + 24);
  unint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  sub_100016F9C(v9, v10);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  uint64_t v12 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 104) = v13;
  uint64_t v14 = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(void *)(a1 + 120) = v14;
  uint64_t v15 = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + sub_100454668(v0 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 136) = v15;
  uint64_t v16 = *(void *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(void *)(a1 + 152) = v16;
  uint64_t v17 = *(void *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(void *)(a1 + 168) = v17;
  uint64_t v18 = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(void *)(a1 + 184) = v18;
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  uint64_t v19 = a3[21];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = sub_100004AEC(&qword_1009AEED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24LL))(v20, v21, v22);
  uint64_t v23 = a3[22];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v26 = *v25;
  *(_BYTE *)(v24 + 8) = *((_BYTE *)v25 + 8);
  *(void *)uint64_t v24 = v26;
  uint64_t v27 = a3[23];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  LOBYTE(v26) = *(_BYTE *)(v29 + 8);
  *(void *)uint64_t v28 = *(void *)v29;
  *(_BYTE *)(v28 + 8) = v26;
  uint64_t v30 = a3[24];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  LOBYTE(v26) = *(_BYTE *)(v32 + 8);
  *(void *)uint64_t v31 = *(void *)v32;
  *(_BYTE *)(v31 + 8) = v26;
  uint64_t v33 = a3[25];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  LOBYTE(v26) = *(_BYTE *)(v35 + 8);
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + 8) = v26;
  uint64_t v36 = a3[26];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  LOBYTE(v26) = *(_BYTE *)(v38 + 8);
  *(void *)uint64_t v37 = *(void *)v38;
  *(_BYTE *)(v37 + 8) = v26;
  uint64_t v39 = a3[27];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  LOBYTE(v26) = *(_BYTE *)(v41 + 8);
  *(void *)uint64_t v40 = *(void *)v41;
  *(_BYTE *)(v40 + 8) = v26;
  uint64_t v42 = a3[28];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  LOBYTE(v26) = *(_BYTE *)(v44 + 8);
  *(void *)uint64_t v43 = *(void *)v44;
  *(_BYTE *)(v43 + 8) = v26;
  uint64_t v45 = a3[29];
  uint64_t v46 = a1 + v45;
  uint64_t v47 = a2 + v45;
  LOBYTE(v26) = *(_BYTE *)(v47 + 8);
  *(void *)uint64_t v46 = *(void *)v47;
  *(_BYTE *)(v46 + 8) = v26;
  uint64_t v48 = a3[30];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  LOBYTE(v26) = *(_BYTE *)(v50 + 8);
  *(void *)uint64_t v49 = *(void *)v50;
  *(_BYTE *)(v49 + 8) = v26;
  uint64_t v51 = a3[31];
  uint64_t v52 = a1 + v51;
  uint64_t v53 = a2 + v51;
  LOBYTE(v26) = *(_BYTE *)(v53 + 8);
  *(void *)uint64_t v52 = *(void *)v53;
  *(_BYTE *)(v52 + 8) = v26;
  uint64_t v54 = a3[32];
  uint64_t v55 = a1 + v54;
  uint64_t v56 = a2 + v54;
  LOBYTE(v26) = *(_BYTE *)(v56 + 8);
  *(void *)uint64_t v55 = *(void *)v56;
  *(_BYTE *)(v55 + 8) = v26;
  *(_BYTE *)(a1 + a3[33]) = *(_BYTE *)(a2 + a3[33]);
  uint64_t v57 = a3[34];
  uint64_t v58 = a1 + v57;
  uint64_t v59 = (uint64_t *)(a2 + v57);
  uint64_t v60 = *v59;
  *(_BYTE *)(v58 + 8) = *((_BYTE *)v59 + 8);
  *(void *)uint64_t v58 = v60;
  uint64_t v61 = a3[35];
  uint64_t v62 = a1 + v61;
  uint64_t v63 = a2 + v61;
  LOBYTE(v60) = *(_BYTE *)(v63 + 8);
  *(void *)uint64_t v62 = *(void *)v63;
  *(_BYTE *)(v62 + 8) = v60;
  uint64_t v64 = a3[36];
  uint64_t v65 = a1 + v64;
  uint64_t v66 = a2 + v64;
  LOBYTE(v60) = *(_BYTE *)(v66 + 8);
  *(void *)uint64_t v65 = *(void *)v66;
  *(_BYTE *)(v65 + 8) = v60;
  *(_BYTE *)(a1 + a3[37]) = *(_BYTE *)(a2 + a3[37]);
  uint64_t v67 = a3[38];
  uint64_t v68 = a1 + v67;
  uint64_t v69 = (uint64_t *)(a2 + v67);
  uint64_t v70 = *v69;
  *(_BYTE *)(v68 + 8) = *((_BYTE *)v69 + 8);
  *(void *)uint64_t v68 = v70;
  uint64_t v71 = a3[39];
  uint64_t v72 = a1 + v71;
  uint64_t v73 = a2 + v71;
  LOBYTE(v70) = *(_BYTE *)(v73 + 8);
  *(void *)uint64_t v72 = *(void *)v73;
  *(_BYTE *)(v72 + 8) = v70;
  uint64_t v74 = a3[40];
  uint64_t v75 = a1 + v74;
  uint64_t v76 = a2 + v74;
  LOBYTE(v70) = *(_BYTE *)(v76 + 8);
  *(void *)uint64_t v75 = *(void *)v76;
  *(_BYTE *)(v75 + 8) = v70;
  uint64_t v77 = a3[41];
  uint64_t v78 = a1 + v77;
  uint64_t v79 = a2 + v77;
  LOBYTE(v70) = *(_BYTE *)(v79 + 8);
  *(void *)uint64_t v78 = *(void *)v79;
  *(_BYTE *)(v78 + 8) = v70;
  uint64_t v80 = a3[42];
  uint64_t v81 = a1 + v80;
  uint64_t v82 = a2 + v80;
  LOBYTE(v70) = *(_BYTE *)(v82 + 8);
  *(void *)uint64_t v81 = *(void *)v82;
  *(_BYTE *)(v81 + 8) = v70;
  uint64_t v83 = a3[43];
  uint64_t v84 = a1 + v83;
  uint64_t v85 = a2 + v83;
  LOBYTE(v70) = *(_BYTE *)(v85 + 8);
  *(void *)uint64_t v84 = *(void *)v85;
  *(_BYTE *)(v84 + 8) = v70;
  uint64_t v86 = a3[44];
  uint64_t v87 = a1 + v86;
  uint64_t v88 = a2 + v86;
  LOBYTE(v70) = *(_BYTE *)(v88 + 8);
  *(void *)uint64_t v87 = *(void *)v88;
  *(_BYTE *)(v87 + 8) = v70;
  uint64_t v89 = a3[45];
  uint64_t v90 = a1 + v89;
  uint64_t v91 = a2 + v89;
  LOBYTE(v70) = *(_BYTE *)(v91 + 8);
  *(void *)uint64_t v90 = *(void *)v91;
  *(_BYTE *)(v90 + 8) = v70;
  uint64_t v92 = a3[46];
  uint64_t v93 = a1 + v92;
  uint64_t v94 = a2 + v92;
  LOBYTE(v70) = *(_BYTE *)(v94 + 8);
  *(void *)uint64_t v93 = *(void *)v94;
  *(_BYTE *)(v93 + 8) = v70;
  uint64_t v95 = a3[47];
  uint64_t v96 = a1 + v95;
  uint64_t v97 = a2 + v95;
  LOBYTE(v70) = *(_BYTE *)(v97 + 8);
  *(void *)uint64_t v96 = *(void *)v97;
  *(_BYTE *)(v96 + 8) = v70;
  uint64_t v98 = a3[48];
  uint64_t v99 = a1 + v98;
  uint64_t v100 = a2 + v98;
  LOBYTE(v70) = *(_BYTE *)(v100 + 8);
  *(void *)uint64_t v99 = *(void *)v100;
  *(_BYTE *)(v99 + 8) = v70;
  uint64_t v101 = a3[49];
  uint64_t v102 = a1 + v101;
  uint64_t v103 = a2 + v101;
  LOBYTE(v70) = *(_BYTE *)(v103 + 8);
  *(void *)uint64_t v102 = *(void *)v103;
  *(_BYTE *)(v102 + 8) = v70;
  uint64_t v104 = a3[50];
  uint64_t v105 = a1 + v104;
  uint64_t v106 = a2 + v104;
  LOBYTE(v70) = *(_BYTE *)(v106 + 8);
  *(void *)uint64_t v105 = *(void *)v106;
  *(_BYTE *)(v105 + 8) = v70;
  uint64_t v107 = a3[51];
  uint64_t v108 = a1 + v107;
  uint64_t v109 = a2 + v107;
  LOBYTE(v70) = *(_BYTE *)(v109 + 8);
  *(void *)uint64_t v108 = *(void *)v109;
  *(_BYTE *)(v108 + 8) = v70;
  *(_BYTE *)(a1 + a3[52]) = *(_BYTE *)(a2 + a3[52]);
  uint64_t v110 = a3[53];
  uint64_t v111 = a1 + v110;
  uint64_t v112 = (uint64_t *)(a2 + v110);
  uint64_t v113 = *v112;
  *(_BYTE *)(v111 + 8) = *((_BYTE *)v112 + 8);
  *(void *)uint64_t v111 = v113;
  uint64_t v114 = a3[54];
  uint64_t v115 = a1 + v114;
  uint64_t v116 = a2 + v114;
  LOBYTE(v113) = *(_BYTE *)(v116 + 8);
  *(void *)uint64_t v115 = *(void *)v116;
  *(_BYTE *)(v115 + 8) = v113;
  uint64_t v117 = a3[55];
  uint64_t v118 = a1 + v117;
  uint64_t v119 = a2 + v117;
  LOBYTE(v113) = *(_BYTE *)(v119 + 8);
  *(void *)uint64_t v118 = *(void *)v119;
  *(_BYTE *)(v118 + 8) = v113;
  uint64_t v120 = a3[56];
  uint64_t v121 = a1 + v120;
  uint64_t v122 = a2 + v120;
  LOBYTE(v113) = *(_BYTE *)(v122 + 8);
  *(void *)uint64_t v121 = *(void *)v122;
  *(_BYTE *)(v121 + 8) = v113;
  uint64_t v123 = a3[57];
  uint64_t v124 = a1 + v123;
  uint64_t v125 = a2 + v123;
  LOBYTE(v113) = *(_BYTE *)(v125 + 8);
  *(void *)uint64_t v124 = *(void *)v125;
  *(_BYTE *)(v124 + 8) = v113;
  uint64_t v126 = a3[58];
  uint64_t v127 = a1 + v126;
  uint64_t v128 = a2 + v126;
  LOBYTE(v113) = *(_BYTE *)(v128 + 8);
  *(void *)uint64_t v127 = *(void *)v128;
  *(_BYTE *)(v127 + 8) = v113;
  *(_BYTE *)(a1 + a3[59]) = *(_BYTE *)(a2 + a3[59]);
  *(_BYTE *)(a1 + a3[60]) = *(_BYTE *)(a2 + a3[60]);
  uint64_t v129 = a3[61];
  uint64_t v130 = (void *)(a1 + v129);
  __int128 v131 = (void *)(a2 + v129);
  uint64_t v132 = *(void *)(a1 + v129 + 48);
  uint64_t v133 = *(void *)(a2 + v129 + 48);
  if (v132)
  {
    if (v133)
    {
      *uint64_t v130 = *v131;
      v130[1] = v131[1];
      v130[2] = v131[2];
      v130[3] = v131[3];
      v130[4] = v131[4];
      v130[5] = v131[5];
      uint64_t v134 = v131[6];
      v130[6] = v134;
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRelease();
      v130[7] = v131[7];
      v130[8] = v131[8];
      v130[9] = v131[9];
      v130[10] = v131[10];
      v130[11] = v131[11];
      v130[12] = v131[12];
      uint64_t v135 = v131[13];
      v130[13] = v135;
      swift_bridgeObjectRetain(v135);
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_1004258E0((uint64_t)v130);
      __int128 v139 = *((_OWORD *)v131 + 1);
      __int128 v138 = *((_OWORD *)v131 + 2);
      *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
      *((_OWORD *)v130 + 1) = v139;
      *((_OWORD *)v130 + 2) = v138;
      __int128 v140 = *((_OWORD *)v131 + 6);
      __int128 v142 = *((_OWORD *)v131 + 3);
      __int128 v141 = *((_OWORD *)v131 + 4);
      *((_OWORD *)v130 + 5) = *((_OWORD *)v131 + 5);
      *((_OWORD *)v130 + 6) = v140;
      *((_OWORD *)v130 + 3) = v142;
      *((_OWORD *)v130 + 4) = v141;
    }
  }

  else if (v133)
  {
    *uint64_t v130 = *v131;
    v130[1] = v131[1];
    v130[2] = v131[2];
    v130[3] = v131[3];
    v130[4] = v131[4];
    v130[5] = v131[5];
    uint64_t v136 = v131[6];
    v130[6] = v136;
    v130[7] = v131[7];
    v130[8] = v131[8];
    v130[9] = v131[9];
    v130[10] = v131[10];
    v130[11] = v131[11];
    v130[12] = v131[12];
    uint64_t v137 = v131[13];
    v130[13] = v137;
    swift_bridgeObjectRetain(v136);
    swift_bridgeObjectRetain(v137);
  }

  else
  {
    __int128 v143 = *(_OWORD *)v131;
    __int128 v144 = *((_OWORD *)v131 + 2);
    *((_OWORD *)v130 + 1) = *((_OWORD *)v131 + 1);
    *((_OWORD *)v130 + 2) = v144;
    *(_OWORD *)uint64_t v130 = v143;
    __int128 v145 = *((_OWORD *)v131 + 3);
    __int128 v146 = *((_OWORD *)v131 + 4);
    __int128 v147 = *((_OWORD *)v131 + 6);
    *((_OWORD *)v130 + 5) = *((_OWORD *)v131 + 5);
    *((_OWORD *)v130 + 6) = v147;
    *((_OWORD *)v130 + 3) = v145;
    *((_OWORD *)v130 + 4) = v146;
  }

  uint64_t v148 = a3[62];
  uint64_t v149 = a1 + v148;
  uint64_t v150 = (uint64_t *)(a2 + v148);
  uint64_t v151 = *v150;
  *(_BYTE *)(v149 + 8) = *((_BYTE *)v150 + 8);
  *(void *)uint64_t v149 = v151;
  uint64_t v152 = a3[63];
  uint64_t v153 = a1 + v152;
  uint64_t v154 = (uint64_t *)(a2 + v152);
  uint64_t v155 = *v154;
  *(_BYTE *)(v153 + 8) = *((_BYTE *)v154 + 8);
  *(void *)uint64_t v153 = v155;
  uint64_t v156 = a3[64];
  uint64_t v157 = a1 + v156;
  uint64_t v158 = (uint64_t *)(a2 + v156);
  uint64_t v159 = *v158;
  *(_BYTE *)(v157 + 8) = *((_BYTE *)v158 + 8);
  *(void *)uint64_t v157 = v159;
  uint64_t v160 = a3[65];
  uint64_t v161 = a1 + v160;
  uint64_t v162 = (uint64_t *)(a2 + v160);
  uint64_t v163 = *v162;
  *(_BYTE *)(v161 + 8) = *((_BYTE *)v162 + 8);
  *(void *)uint64_t v161 = v163;
  uint64_t v164 = a3[66];
  uint64_t v165 = a1 + v164;
  uint64_t v166 = (uint64_t *)(a2 + v164);
  uint64_t v167 = *v166;
  *(_BYTE *)(v165 + 8) = *((_BYTE *)v166 + 8);
  *(void *)uint64_t v165 = v167;
  uint64_t v168 = a3[67];
  uint64_t v169 = a1 + v168;
  uint64_t v170 = (uint64_t *)(a2 + v168);
  uint64_t v171 = *v170;
  *(_BYTE *)(v169 + 8) = *((_BYTE *)v170 + 8);
  *(void *)uint64_t v169 = v171;
  uint64_t v172 = a3[68];
  uint64_t v173 = a1 + v172;
  uint64_t v174 = (uint64_t *)(a2 + v172);
  uint64_t v175 = *v174;
  *(_BYTE *)(v173 + 8) = *((_BYTE *)v174 + 8);
  *(void *)uint64_t v173 = v175;
  uint64_t v176 = a3[69];
  uint64_t v177 = a1 + v176;
  uint64_t v178 = (uint64_t *)(a2 + v176);
  uint64_t v179 = *v178;
  *(_BYTE *)(v177 + 8) = *((_BYTE *)v178 + 8);
  *(void *)uint64_t v177 = v179;
  uint64_t v180 = a3[70];
  uint64_t v181 = a1 + v180;
  uint64_t v182 = (uint64_t *)(a2 + v180);
  uint64_t v183 = *v182;
  *(_BYTE *)(v181 + 8) = *((_BYTE *)v182 + 8);
  *(void *)uint64_t v181 = v183;
  uint64_t v184 = a3[71];
  uint64_t v185 = a1 + v184;
  uint64_t v186 = (uint64_t *)(a2 + v184);
  uint64_t v187 = *v186;
  *(_BYTE *)(v185 + 8) = *((_BYTE *)v186 + 8);
  *(void *)uint64_t v185 = v187;
  uint64_t v188 = a3[72];
  uint64_t v189 = a1 + v188;
  uint64_t v190 = (uint64_t *)(a2 + v188);
  uint64_t v191 = *v190;
  *(_BYTE *)(v189 + 8) = *((_BYTE *)v190 + 8);
  *(void *)uint64_t v189 = v191;
  uint64_t v192 = a3[73];
  uint64_t v193 = a1 + v192;
  uint64_t v194 = (uint64_t *)(a2 + v192);
  uint64_t v195 = *v194;
  *(_BYTE *)(v193 + 8) = *((_BYTE *)v194 + 8);
  *(void *)uint64_t v193 = v195;
  uint64_t v196 = a3[74];
  uint64_t v197 = a1 + v196;
  uint64_t v198 = (uint64_t *)(a2 + v196);
  uint64_t v199 = *v198;
  *(_BYTE *)(v197 + 8) = *((_BYTE *)v198 + 8);
  *(void *)uint64_t v197 = v199;
  uint64_t v200 = a3[75];
  uint64_t v201 = a1 + v200;
  uint64_t v202 = (uint64_t *)(a2 + v200);
  uint64_t v203 = *v202;
  *(_BYTE *)(v201 + 8) = *((_BYTE *)v202 + 8);
  *(void *)uint64_t v201 = v203;
  uint64_t v204 = a3[76];
  uint64_t v205 = a1 + v204;
  uint64_t v206 = (uint64_t *)(a2 + v204);
  uint64_t v207 = *v206;
  *(_BYTE *)(v205 + 8) = *((_BYTE *)v206 + 8);
  *(void *)uint64_t v205 = v207;
  uint64_t v208 = a3[77];
  uint64_t v209 = a1 + v208;
  uint64_t v210 = (uint64_t *)(a2 + v208);
  uint64_t v211 = *v210;
  *(_BYTE *)(v209 + 8) = *((_BYTE *)v210 + 8);
  *(void *)uint64_t v209 = v211;
  uint64_t v212 = a3[78];
  uint64_t v213 = a1 + v212;
  uint64_t v214 = (uint64_t *)(a2 + v212);
  uint64_t v215 = *v214;
  *(_BYTE *)(v213 + 8) = *((_BYTE *)v214 + 8);
  *(void *)uint64_t v213 = v215;
  uint64_t v216 = a3[79];
  uint64_t v217 = a1 + v216;
  uint64_t v218 = (uint64_t *)(a2 + v216);
  uint64_t v219 = *v218;
  *(_BYTE *)(v217 + 8) = *((_BYTE *)v218 + 8);
  *(void *)uint64_t v217 = v219;
  uint64_t v220 = a3[80];
  uint64_t v221 = a1 + v220;
  uint64_t v222 = (uint64_t *)(a2 + v220);
  uint64_t v223 = *v222;
  *(_BYTE *)(v221 + 8) = *((_BYTE *)v222 + 8);
  *(void *)uint64_t v221 = v223;
  *(_BYTE *)(a1 + a3[81]) = *(_BYTE *)(a2 + a3[81]);
  *(_BYTE *)(a1 + a3[82]) = *(_BYTE *)(a2 + a3[82]);
  *(_BYTE *)(a1 + a3[83]) = *(_BYTE *)(a2 + a3[83]);
  uint64_t v224 = a3[84];
  uint64_t v225 = a1 + v224;
  uint64_t v226 = (uint64_t *)(a2 + v224);
  uint64_t v227 = *v226;
  *(_BYTE *)(v225 + 8) = *((_BYTE *)v226 + 8);
  *(void *)uint64_t v225 = v227;
  uint64_t v228 = a3[85];
  uint64_t v229 = a1 + v228;
  uint64_t v230 = (uint64_t *)(a2 + v228);
  uint64_t v231 = *v230;
  *(_BYTE *)(v229 + 8) = *((_BYTE *)v230 + 8);
  *(void *)uint64_t v229 = v231;
  uint64_t v232 = a3[86];
  uint64_t v233 = a1 + v232;
  uint64_t v234 = (uint64_t *)(a2 + v232);
  uint64_t v235 = *v234;
  *(_BYTE *)(v233 + 8) = *((_BYTE *)v234 + 8);
  *(void *)uint64_t v233 = v235;
  uint64_t v236 = a3[87];
  uint64_t v237 = a1 + v236;
  uint64_t v238 = (uint64_t *)(a2 + v236);
  uint64_t v239 = *v238;
  *(_BYTE *)(v237 + 8) = *((_BYTE *)v238 + 8);
  *(void *)uint64_t v237 = v239;
  uint64_t v240 = a3[88];
  uint64_t v241 = a1 + v240;
  uint64_t v242 = (uint64_t *)(a2 + v240);
  uint64_t v243 = *v242;
  *(_BYTE *)(v241 + 8) = *((_BYTE *)v242 + 8);
  *(void *)uint64_t v241 = v243;
  uint64_t v244 = a3[89];
  uint64_t v245 = a1 + v244;
  uint64_t v246 = (uint64_t *)(a2 + v244);
  uint64_t v247 = *v246;
  *(_BYTE *)(v245 + 8) = *((_BYTE *)v246 + 8);
  *(void *)uint64_t v245 = v247;
  uint64_t v248 = a3[90];
  uint64_t v249 = a1 + v248;
  uint64_t v250 = (uint64_t *)(a2 + v248);
  uint64_t v251 = *v250;
  *(_BYTE *)(v249 + 8) = *((_BYTE *)v250 + 8);
  *(void *)uint64_t v249 = v251;
  uint64_t v252 = a3[91];
  uint64_t v253 = a1 + v252;
  uint64_t v254 = (uint64_t *)(a2 + v252);
  uint64_t v255 = *v254;
  *(_BYTE *)(v253 + 8) = *((_BYTE *)v254 + 8);
  *(void *)uint64_t v253 = v255;
  uint64_t v256 = a3[92];
  uint64_t v257 = a1 + v256;
  uint64_t v258 = (uint64_t *)(a2 + v256);
  uint64_t v259 = *v258;
  *(_BYTE *)(v257 + 8) = *((_BYTE *)v258 + 8);
  *(void *)uint64_t v257 = v259;
  *(_BYTE *)(a1 + a3[93]) = *(_BYTE *)(a2 + a3[93]);
  uint64_t v260 = a3[94];
  uint64_t v261 = a1 + v260;
  uint64_t v262 = (uint64_t *)(a2 + v260);
  uint64_t v263 = *v262;
  *(_BYTE *)(v261 + 8) = *((_BYTE *)v262 + 8);
  *(void *)uint64_t v261 = v263;
  uint64_t v264 = a3[95];
  uint64_t v265 = a1 + v264;
  uint64_t v266 = (uint64_t *)(a2 + v264);
  uint64_t v267 = *v266;
  *(_BYTE *)(v265 + 8) = *((_BYTE *)v266 + 8);
  *(void *)uint64_t v265 = v267;
  uint64_t v268 = a3[96];
  uint64_t v269 = a1 + v268;
  uint64_t v270 = (uint64_t *)(a2 + v268);
  uint64_t v271 = *v270;
  *(_BYTE *)(v269 + 8) = *((_BYTE *)v270 + 8);
  *(void *)uint64_t v269 = v271;
  *(_BYTE *)(a1 + a3[97]) = *(_BYTE *)(a2 + a3[97]);
  *(_BYTE *)(a1 + a3[98]) = *(_BYTE *)(a2 + a3[98]);
  *(_BYTE *)(a1 + a3[99]) = *(_BYTE *)(a2 + a3[99]);
  uint64_t v272 = a3[100];
  uint64_t v273 = a1 + v272;
  uint64_t v274 = (uint64_t *)(a2 + v272);
  uint64_t v275 = *v274;
  *(_BYTE *)(v273 + 8) = *((_BYTE *)v274 + 8);
  *(void *)uint64_t v273 = v275;
  uint64_t v276 = a3[101];
  uint64_t v277 = a1 + v276;
  uint64_t v278 = (uint64_t *)(a2 + v276);
  uint64_t v279 = *v278;
  *(_BYTE *)(v277 + 8) = *((_BYTE *)v278 + 8);
  *(void *)uint64_t v277 = v279;
  uint64_t v280 = a3[102];
  uint64_t v281 = a1 + v280;
  uint64_t v282 = (uint64_t *)(a2 + v280);
  uint64_t v283 = *v282;
  *(_BYTE *)(v281 + 8) = *((_BYTE *)v282 + 8);
  *(void *)uint64_t v281 = v283;
  uint64_t v284 = a3[103];
  uint64_t v285 = a1 + v284;
  uint64_t v286 = (uint64_t *)(a2 + v284);
  uint64_t v287 = *v286;
  *(_BYTE *)(v285 + 8) = *((_BYTE *)v286 + 8);
  *(void *)uint64_t v285 = v287;
  *(_BYTE *)(a1 + a3[104]) = *(_BYTE *)(a2 + a3[104]);
  uint64_t v288 = a3[105];
  uint64_t v289 = a1 + v288;
  uint64_t v290 = (uint64_t *)(a2 + v288);
  uint64_t v291 = *v290;
  *(_BYTE *)(v289 + 8) = *((_BYTE *)v290 + 8);
  *(void *)uint64_t v289 = v291;
  uint64_t v292 = a3[106];
  uint64_t v293 = *(void *)(a2 + v292);
  *(void *)(a1 + v292) = v293;
  swift_bridgeObjectRetain(v293);
  swift_bridgeObjectRelease();
  uint64_t v294 = a3[107];
  uint64_t v295 = a1 + v294;
  uint64_t v296 = (uint64_t *)(a2 + v294);
  uint64_t v297 = *v296;
  *(_BYTE *)(v295 + 8) = *((_BYTE *)v296 + 8);
  *(void *)uint64_t v295 = v297;
  *(_BYTE *)(a1 + a3[108]) = *(_BYTE *)(a2 + a3[108]);
  uint64_t v298 = a3[109];
  uint64_t v299 = *(void *)(a2 + v298);
  *(void *)(a1 + v298) = v299;
  swift_bridgeObjectRetain(v299);
  swift_bridgeObjectRelease();
  uint64_t v300 = a3[110];
  uint64_t v301 = a1 + v300;
  uint64_t v302 = (uint64_t *)(a2 + v300);
  uint64_t v303 = *v302;
  *(_BYTE *)(v301 + 8) = *((_BYTE *)v302 + 8);
  *(void *)uint64_t v301 = v303;
  uint64_t v304 = a3[111];
  uint64_t v305 = a1 + v304;
  uint64_t v306 = (uint64_t *)(a2 + v304);
  uint64_t v307 = *v306;
  *(_BYTE *)(v305 + 8) = *((_BYTE *)v306 + 8);
  *(void *)uint64_t v305 = v307;
  *(_BYTE *)(a1 + a3[112]) = *(_BYTE *)(a2 + a3[112]);
  *(_BYTE *)(a1 + a3[113]) = *(_BYTE *)(a2 + a3[113]);
  uint64_t v308 = a3[114];
  uint64_t v309 = a1 + v308;
  uint64_t v310 = (uint64_t *)(a2 + v308);
  uint64_t v311 = *v310;
  *(_BYTE *)(v309 + 8) = *((_BYTE *)v310 + 8);
  *(void *)uint64_t v309 = v311;
  uint64_t v312 = a3[115];
  uint64_t v313 = a1 + v312;
  uint64_t v314 = (uint64_t *)(a2 + v312);
  uint64_t v315 = *v314;
  *(_BYTE *)(v313 + 8) = *((_BYTE *)v314 + 8);
  *(void *)uint64_t v313 = v315;
  uint64_t v316 = a3[116];
  uint64_t v317 = a1 + v316;
  uint64_t v318 = (uint64_t *)(a2 + v316);
  uint64_t v319 = *v318;
  *(_BYTE *)(v317 + 8) = *((_BYTE *)v318 + 8);
  *(void *)uint64_t v317 = v319;
  uint64_t v320 = a3[117];
  uint64_t v321 = a1 + v320;
  uint64_t v322 = (uint64_t *)(a2 + v320);
  uint64_t v323 = *v322;
  *(_BYTE *)(v321 + 8) = *((_BYTE *)v322 + 8);
  *(void *)uint64_t v321 = v323;
  uint64_t v324 = a3[118];
  uint64_t v325 = a1 + v324;
  uint64_t v326 = (uint64_t *)(a2 + v324);
  uint64_t v327 = *v326;
  *(_BYTE *)(v325 + 8) = *((_BYTE *)v326 + 8);
  *(void *)uint64_t v325 = v327;
  uint64_t v328 = a3[119];
  uint64_t v329 = a1 + v328;
  uint64_t v330 = (uint64_t *)(a2 + v328);
  uint64_t v331 = *v330;
  *(_BYTE *)(v329 + 8) = *((_BYTE *)v330 + 8);
  *(void *)uint64_t v329 = v331;
  uint64_t v332 = a3[120];
  uint64_t v333 = a1 + v332;
  uint64_t v334 = (uint64_t *)(a2 + v332);
  uint64_t v335 = *v334;
  *(_BYTE *)(v333 + 8) = *((_BYTE *)v334 + 8);
  *(void *)uint64_t v333 = v335;
  uint64_t v336 = a3[121];
  uint64_t v337 = a1 + v336;
  uint64_t v338 = (uint64_t *)(a2 + v336);
  uint64_t v339 = *v338;
  *(_BYTE *)(v337 + 8) = *((_BYTE *)v338 + 8);
  *(void *)uint64_t v337 = v339;
  uint64_t v340 = a3[122];
  uint64_t v341 = a1 + v340;
  uint64_t v342 = (uint64_t *)(a2 + v340);
  uint64_t v343 = *v342;
  *(_BYTE *)(v341 + 8) = *((_BYTE *)v342 + 8);
  *(void *)uint64_t v341 = v343;
  uint64_t v344 = a3[123];
  uint64_t v345 = a1 + v344;
  uint64_t v346 = (uint64_t *)(a2 + v344);
  uint64_t v347 = *v346;
  *(_BYTE *)(v345 + 8) = *((_BYTE *)v346 + 8);
  *(void *)uint64_t v345 = v347;
  uint64_t v348 = a3[124];
  uint64_t v349 = a1 + v348;
  uint64_t v350 = (uint64_t *)(a2 + v348);
  uint64_t v351 = *v350;
  *(_BYTE *)(v349 + 8) = *((_BYTE *)v350 + 8);
  *(void *)uint64_t v349 = v351;
  uint64_t v352 = a3[125];
  uint64_t v353 = a1 + v352;
  uint64_t v354 = (uint64_t *)(a2 + v352);
  uint64_t v355 = *v354;
  *(_BYTE *)(v353 + 8) = *((_BYTE *)v354 + 8);
  *(void *)uint64_t v353 = v355;
  uint64_t v356 = a3[126];
  uint64_t v357 = a1 + v356;
  uint64_t v358 = (uint64_t *)(a2 + v356);
  uint64_t v359 = *v358;
  *(_BYTE *)(v357 + 8) = *((_BYTE *)v358 + 8);
  *(void *)uint64_t v357 = v359;
  uint64_t v360 = a3[127];
  uint64_t v361 = a1 + v360;
  uint64_t v362 = (uint64_t *)(a2 + v360);
  uint64_t v363 = *v362;
  *(_BYTE *)(v361 + 8) = *((_BYTE *)v362 + 8);
  *(void *)uint64_t v361 = v363;
  uint64_t v364 = a3[128];
  uint64_t v365 = a1 + v364;
  uint64_t v366 = (uint64_t *)(a2 + v364);
  uint64_t v367 = *v366;
  *(_BYTE *)(v365 + 8) = *((_BYTE *)v366 + 8);
  *(void *)uint64_t v365 = v367;
  uint64_t v368 = a3[129];
  uint64_t v369 = a1 + v368;
  uint64_t v370 = (uint64_t *)(a2 + v368);
  uint64_t v371 = *v370;
  *(_BYTE *)(v369 + 8) = *((_BYTE *)v370 + 8);
  *(void *)uint64_t v369 = v371;
  uint64_t v372 = a3[130];
  uint64_t v373 = a1 + v372;
  uint64_t v374 = (uint64_t *)(a2 + v372);
  uint64_t v375 = *v374;
  *(_BYTE *)(v373 + 8) = *((_BYTE *)v374 + 8);
  *(void *)uint64_t v373 = v375;
  uint64_t v376 = a3[131];
  uint64_t v377 = a1 + v376;
  uint64_t v378 = (uint64_t *)(a2 + v376);
  uint64_t v379 = *v378;
  *(_BYTE *)(v377 + 8) = *((_BYTE *)v378 + 8);
  *(void *)uint64_t v377 = v379;
  *(_BYTE *)(a1 + a3[132]) = *(_BYTE *)(a2 + a3[132]);
  *(_BYTE *)(a1 + a3[133]) = *(_BYTE *)(a2 + a3[133]);
  uint64_t v380 = a3[134];
  uint64_t v381 = a1 + v380;
  uint64_t v382 = (uint64_t *)(a2 + v380);
  uint64_t v383 = *v382;
  *(_BYTE *)(v381 + 8) = *((_BYTE *)v382 + 8);
  *(void *)uint64_t v381 = v383;
  uint64_t v384 = a3[135];
  uint64_t v385 = a1 + v384;
  uint64_t v386 = (uint64_t *)(a2 + v384);
  uint64_t v387 = *v386;
  *(_BYTE *)(v385 + 8) = *((_BYTE *)v386 + 8);
  *(void *)uint64_t v385 = v387;
  *(_BYTE *)(a1 + a3[136]) = *(_BYTE *)(a2 + a3[136]);
  uint64_t v388 = a3[137];
  uint64_t v389 = a1 + v388;
  uint64_t v390 = a2 + v388;
  LODWORD(v387) = *(_DWORD *)v390;
  *(_BYTE *)(v389 + 4) = *(_BYTE *)(v390 + 4);
  *(_DWORD *)uint64_t v389 = v387;
  uint64_t v391 = a3[138];
  uint64_t v392 = a1 + v391;
  uint64_t v393 = (uint64_t *)(a2 + v391);
  uint64_t v394 = *v393;
  *(_BYTE *)(v392 + 8) = *((_BYTE *)v393 + 8);
  *(void *)uint64_t v392 = v394;
  uint64_t v395 = a3[139];
  uint64_t v396 = a1 + v395;
  uint64_t v397 = (uint64_t *)(a2 + v395);
  uint64_t v398 = *v397;
  *(_BYTE *)(v396 + 8) = *((_BYTE *)v397 + 8);
  *(void *)uint64_t v396 = v398;
  uint64_t v399 = a3[140];
  uint64_t v400 = a1 + v399;
  uint64_t v401 = (uint64_t *)(a2 + v399);
  uint64_t v402 = *v401;
  *(_BYTE *)(v400 + 8) = *((_BYTE *)v401 + 8);
  *(void *)uint64_t v400 = v402;
  uint64_t v403 = a3[141];
  uint64_t v404 = a1 + v403;
  uint64_t v405 = (uint64_t *)(a2 + v403);
  uint64_t v406 = *v405;
  *(_BYTE *)(v404 + 8) = *((_BYTE *)v405 + 8);
  *(void *)uint64_t v404 = v406;
  uint64_t v407 = a3[142];
  uint64_t v408 = a1 + v407;
  uint64_t v409 = (uint64_t *)(a2 + v407);
  uint64_t v410 = *v409;
  *(_BYTE *)(v408 + 8) = *((_BYTE *)v409 + 8);
  *(void *)uint64_t v408 = v410;
  uint64_t v411 = a3[143];
  uint64_t v412 = a1 + v411;
  uint64_t v413 = (uint64_t *)(a2 + v411);
  uint64_t v414 = *v413;
  *(_BYTE *)(v412 + 8) = *((_BYTE *)v413 + 8);
  *(void *)uint64_t v412 = v414;
  uint64_t v415 = a3[144];
  uint64_t v416 = a1 + v415;
  uint64_t v417 = (uint64_t *)(a2 + v415);
  uint64_t v418 = *v417;
  *(_BYTE *)(v416 + 8) = *((_BYTE *)v417 + 8);
  *(void *)uint64_t v416 = v418;
  *(_BYTE *)(a1 + a3[145]) = *(_BYTE *)(a2 + a3[145]);
  uint64_t v419 = a3[146];
  uint64_t v420 = a1 + v419;
  uint64_t v421 = (uint64_t *)(a2 + v419);
  uint64_t v422 = *v421;
  *(_BYTE *)(v420 + 8) = *((_BYTE *)v421 + 8);
  *(void *)uint64_t v420 = v422;
  uint64_t v423 = a3[147];
  uint64_t v424 = a1 + v423;
  uint64_t v425 = (uint64_t *)(a2 + v423);
  uint64_t v426 = *v425;
  *(_BYTE *)(v424 + 8) = *((_BYTE *)v425 + 8);
  *(void *)uint64_t v424 = v426;
  uint64_t v427 = a3[148];
  uint64_t v428 = (void *)(a1 + v427);
  uint64_t v429 = (void *)(a2 + v427);
  *uint64_t v428 = *v429;
  uint64_t v430 = v429[1];
  v428[1] = v430;
  swift_bridgeObjectRetain(v430);
  swift_bridgeObjectRelease();
  uint64_t v431 = a3[149];
  uint64_t v432 = a1 + v431;
  uint64_t v433 = (uint64_t *)(a2 + v431);
  uint64_t v434 = *v433;
  *(_BYTE *)(v432 + 8) = *((_BYTE *)v433 + 8);
  *(void *)uint64_t v432 = v434;
  uint64_t v435 = a3[150];
  uint64_t v436 = (void *)(a1 + v435);
  uint64_t v437 = (void *)(a2 + v435);
  *uint64_t v436 = *v437;
  uint64_t v438 = v437[1];
  v436[1] = v438;
  swift_bridgeObjectRetain(v438);
  swift_bridgeObjectRelease();
  uint64_t v439 = a3[151];
  uint64_t v440 = a1 + v439;
  uint64_t v441 = (uint64_t *)(a2 + v439);
  uint64_t v442 = *v441;
  *(_BYTE *)(v440 + 8) = *((_BYTE *)v441 + 8);
  *(void *)uint64_t v440 = v442;
  uint64_t v443 = a3[152];
  uint64_t v444 = *(void *)(a2 + v443);
  *(void *)(a1 + v443) = v444;
  swift_bridgeObjectRetain(v444);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100467390(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + sub_100454668(v0 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v9 = *(void *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(void *)(a1 + 168) = v9;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  uint64_t v10 = a3[21];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)(a1 + 40) = v6;
  uint64_t v13 = sub_100004AEC(&qword_1009AEED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  uint64_t v14 = a3[22];
  uint64_t v15 = a3[23];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  uint64_t v18 = a1 + v15;
  uint64_t v19 = a2 + v15;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  uint64_t v20 = a3[24];
  uint64_t v21 = a3[25];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v26 = a3[26];
  uint64_t v27 = a3[27];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(void *)uint64_t v28 = *(void *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(void *)uint64_t v30 = *(void *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  uint64_t v32 = a3[28];
  uint64_t v33 = a3[29];
  uint64_t v34 = a1 + v32;
  uint64_t v35 = a2 + v32;
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  uint64_t v36 = a1 + v33;
  uint64_t v37 = a2 + v33;
  *(void *)uint64_t v36 = *(void *)v37;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  uint64_t v38 = a3[30];
  uint64_t v39 = a3[31];
  uint64_t v40 = a1 + v38;
  uint64_t v41 = a2 + v38;
  *(void *)uint64_t v40 = *(void *)v41;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  uint64_t v42 = a1 + v39;
  uint64_t v43 = a2 + v39;
  *(void *)uint64_t v42 = *(void *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  uint64_t v44 = a3[32];
  uint64_t v45 = a3[33];
  uint64_t v46 = a1 + v44;
  uint64_t v47 = a2 + v44;
  *(void *)uint64_t v46 = *(void *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  *(_BYTE *)(a1 + v45) = *(_BYTE *)(a2 + v45);
  uint64_t v48 = a3[34];
  uint64_t v49 = a3[35];
  uint64_t v50 = a1 + v48;
  uint64_t v51 = a2 + v48;
  *(void *)uint64_t v50 = *(void *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  uint64_t v52 = a1 + v49;
  uint64_t v53 = a2 + v49;
  *(void *)uint64_t v52 = *(void *)v53;
  *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
  uint64_t v54 = a3[36];
  uint64_t v55 = a3[37];
  uint64_t v56 = a1 + v54;
  uint64_t v57 = a2 + v54;
  *(void *)uint64_t v56 = *(void *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  *(_BYTE *)(a1 + v55) = *(_BYTE *)(a2 + v55);
  uint64_t v58 = a3[38];
  uint64_t v59 = a3[39];
  uint64_t v60 = a1 + v58;
  uint64_t v61 = a2 + v58;
  *(void *)uint64_t v60 = *(void *)v61;
  *(_BYTE *)(v60 + 8) = *(_BYTE *)(v61 + 8);
  uint64_t v62 = a1 + v59;
  uint64_t v63 = a2 + v59;
  *(void *)uint64_t v62 = *(void *)v63;
  *(_BYTE *)(v62 + 8) = *(_BYTE *)(v63 + 8);
  uint64_t v64 = a3[40];
  uint64_t v65 = a3[41];
  uint64_t v66 = a1 + v64;
  uint64_t v67 = a2 + v64;
  *(void *)uint64_t v66 = *(void *)v67;
  *(_BYTE *)(v66 + 8) = *(_BYTE *)(v67 + 8);
  uint64_t v68 = a1 + v65;
  uint64_t v69 = a2 + v65;
  *(void *)uint64_t v68 = *(void *)v69;
  *(_BYTE *)(v68 + 8) = *(_BYTE *)(v69 + 8);
  uint64_t v70 = a3[42];
  uint64_t v71 = a3[43];
  uint64_t v72 = a1 + v70;
  uint64_t v73 = (uint64_t *)(a2 + v70);
  uint64_t v74 = *v73;
  *(_BYTE *)(v72 + 8) = *((_BYTE *)v73 + 8);
  *(void *)uint64_t v72 = v74;
  uint64_t v75 = a1 + v71;
  uint64_t v76 = a2 + v71;
  *(void *)uint64_t v75 = *(void *)v76;
  *(_BYTE *)(v75 + 8) = *(_BYTE *)(v76 + 8);
  uint64_t v77 = a3[44];
  uint64_t v78 = a3[45];
  uint64_t v79 = a1 + v77;
  uint64_t v80 = a2 + v77;
  *(void *)uint64_t v79 = *(void *)v80;
  *(_BYTE *)(v79 + 8) = *(_BYTE *)(v80 + 8);
  uint64_t v81 = a1 + v78;
  uint64_t v82 = a2 + v78;
  *(void *)uint64_t v81 = *(void *)v82;
  *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
  uint64_t v83 = a3[46];
  uint64_t v84 = a3[47];
  uint64_t v85 = a1 + v83;
  uint64_t v86 = a2 + v83;
  *(void *)uint64_t v85 = *(void *)v86;
  *(_BYTE *)(v85 + 8) = *(_BYTE *)(v86 + 8);
  uint64_t v87 = a1 + v84;
  uint64_t v88 = a2 + v84;
  *(void *)uint64_t v87 = *(void *)v88;
  *(_BYTE *)(v87 + 8) = *(_BYTE *)(v88 + 8);
  uint64_t v89 = a3[48];
  uint64_t v90 = a3[49];
  uint64_t v91 = a1 + v89;
  uint64_t v92 = a2 + v89;
  *(void *)uint64_t v91 = *(void *)v92;
  *(_BYTE *)(v91 + 8) = *(_BYTE *)(v92 + 8);
  uint64_t v93 = a1 + v90;
  uint64_t v94 = a2 + v90;
  *(void *)uint64_t v93 = *(void *)v94;
  *(_BYTE *)(v93 + 8) = *(_BYTE *)(v94 + 8);
  uint64_t v95 = a3[50];
  uint64_t v96 = a3[51];
  uint64_t v97 = a1 + v95;
  uint64_t v98 = a2 + v95;
  *(void *)uint64_t v97 = *(void *)v98;
  *(_BYTE *)(v97 + 8) = *(_BYTE *)(v98 + 8);
  uint64_t v99 = a1 + v96;
  uint64_t v100 = a2 + v96;
  *(void *)uint64_t v99 = *(void *)v100;
  *(_BYTE *)(v99 + 8) = *(_BYTE *)(v100 + 8);
  uint64_t v101 = a3[53];
  *(_BYTE *)(a1 + a3[52]) = *(_BYTE *)(a2 + a3[52]);
  uint64_t v102 = a1 + v101;
  uint64_t v103 = a2 + v101;
  *(void *)uint64_t v102 = *(void *)v103;
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(v103 + 8);
  uint64_t v104 = a3[54];
  uint64_t v105 = a3[55];
  uint64_t v106 = a1 + v104;
  uint64_t v107 = a2 + v104;
  *(void *)uint64_t v106 = *(void *)v107;
  *(_BYTE *)(v106 + 8) = *(_BYTE *)(v107 + 8);
  uint64_t v108 = a1 + v105;
  uint64_t v109 = a2 + v105;
  *(void *)uint64_t v108 = *(void *)v109;
  *(_BYTE *)(v108 + 8) = *(_BYTE *)(v109 + 8);
  uint64_t v110 = a3[56];
  uint64_t v111 = a3[57];
  uint64_t v112 = a1 + v110;
  uint64_t v113 = a2 + v110;
  *(void *)uint64_t v112 = *(void *)v113;
  *(_BYTE *)(v112 + 8) = *(_BYTE *)(v113 + 8);
  uint64_t v114 = a1 + v111;
  uint64_t v115 = (uint64_t *)(a2 + v111);
  uint64_t v116 = *v115;
  *(_BYTE *)(v114 + 8) = *((_BYTE *)v115 + 8);
  *(void *)uint64_t v114 = v116;
  uint64_t v117 = a3[58];
  uint64_t v118 = a3[59];
  uint64_t v119 = a1 + v117;
  uint64_t v120 = a2 + v117;
  *(void *)uint64_t v119 = *(void *)v120;
  *(_BYTE *)(v119 + 8) = *(_BYTE *)(v120 + 8);
  *(_BYTE *)(a1 + v118) = *(_BYTE *)(a2 + v118);
  uint64_t v121 = a3[61];
  *(_BYTE *)(a1 + a3[60]) = *(_BYTE *)(a2 + a3[60]);
  uint64_t v122 = (_OWORD *)(a1 + v121);
  uint64_t v123 = (_OWORD *)(a2 + v121);
  __int128 v124 = v123[1];
  *uint64_t v122 = *v123;
  v122[1] = v124;
  __int128 v125 = v123[6];
  __int128 v126 = v123[4];
  v122[5] = v123[5];
  v122[6] = v125;
  __int128 v127 = v123[3];
  v122[2] = v123[2];
  v122[3] = v127;
  v122[4] = v126;
  uint64_t v128 = a3[62];
  uint64_t v129 = a3[63];
  uint64_t v130 = a1 + v128;
  uint64_t v131 = a2 + v128;
  *(void *)uint64_t v130 = *(void *)v131;
  *(_BYTE *)(v130 + 8) = *(_BYTE *)(v131 + 8);
  uint64_t v132 = a1 + v129;
  uint64_t v133 = a2 + v129;
  *(void *)uint64_t v132 = *(void *)v133;
  *(_BYTE *)(v132 + 8) = *(_BYTE *)(v133 + 8);
  uint64_t v134 = a3[64];
  uint64_t v135 = a1 + v134;
  uint64_t v136 = (uint64_t *)(a2 + v134);
  uint64_t v137 = *v136;
  *(_BYTE *)(v135 + 8) = *((_BYTE *)v136 + 8);
  *(void *)uint64_t v135 = v137;
  uint64_t v138 = a3[65];
  uint64_t v139 = a1 + v138;
  uint64_t v140 = a2 + v138;
  *(void *)uint64_t v139 = *(void *)v140;
  *(_BYTE *)(v139 + 8) = *(_BYTE *)(v140 + 8);
  uint64_t v141 = a3[66];
  uint64_t v142 = a1 + v141;
  uint64_t v143 = a2 + v141;
  *(void *)uint64_t v142 = *(void *)v143;
  *(_BYTE *)(v142 + 8) = *(_BYTE *)(v143 + 8);
  uint64_t v144 = a3[67];
  uint64_t v145 = a1 + v144;
  uint64_t v146 = a2 + v144;
  *(void *)uint64_t v145 = *(void *)v146;
  *(_BYTE *)(v145 + 8) = *(_BYTE *)(v146 + 8);
  uint64_t v147 = a3[68];
  uint64_t v148 = a1 + v147;
  uint64_t v149 = a2 + v147;
  *(void *)uint64_t v148 = *(void *)v149;
  *(_BYTE *)(v148 + 8) = *(_BYTE *)(v149 + 8);
  uint64_t v150 = a3[69];
  uint64_t v151 = a1 + v150;
  uint64_t v152 = a2 + v150;
  *(void *)uint64_t v151 = *(void *)v152;
  *(_BYTE *)(v151 + 8) = *(_BYTE *)(v152 + 8);
  uint64_t v153 = a3[70];
  uint64_t v154 = a1 + v153;
  uint64_t v155 = a2 + v153;
  *(void *)uint64_t v154 = *(void *)v155;
  *(_BYTE *)(v154 + 8) = *(_BYTE *)(v155 + 8);
  uint64_t v156 = a3[71];
  uint64_t v157 = a1 + v156;
  uint64_t v158 = a2 + v156;
  *(void *)uint64_t v157 = *(void *)v158;
  *(_BYTE *)(v157 + 8) = *(_BYTE *)(v158 + 8);
  uint64_t v159 = a3[72];
  uint64_t v160 = a1 + v159;
  uint64_t v161 = a2 + v159;
  *(void *)uint64_t v160 = *(void *)v161;
  *(_BYTE *)(v160 + 8) = *(_BYTE *)(v161 + 8);
  uint64_t v162 = a3[73];
  uint64_t v163 = a1 + v162;
  uint64_t v164 = a2 + v162;
  *(void *)uint64_t v163 = *(void *)v164;
  *(_BYTE *)(v163 + 8) = *(_BYTE *)(v164 + 8);
  uint64_t v165 = a3[74];
  uint64_t v166 = a1 + v165;
  uint64_t v167 = a2 + v165;
  *(void *)uint64_t v166 = *(void *)v167;
  *(_BYTE *)(v166 + 8) = *(_BYTE *)(v167 + 8);
  uint64_t v168 = a3[75];
  uint64_t v169 = a1 + v168;
  uint64_t v170 = a2 + v168;
  *(void *)uint64_t v169 = *(void *)v170;
  *(_BYTE *)(v169 + 8) = *(_BYTE *)(v170 + 8);
  uint64_t v171 = a3[76];
  uint64_t v172 = a1 + v171;
  uint64_t v173 = a2 + v171;
  *(void *)uint64_t v172 = *(void *)v173;
  *(_BYTE *)(v172 + 8) = *(_BYTE *)(v173 + 8);
  uint64_t v174 = a3[77];
  uint64_t v175 = a1 + v174;
  uint64_t v176 = a2 + v174;
  *(void *)uint64_t v175 = *(void *)v176;
  *(_BYTE *)(v175 + 8) = *(_BYTE *)(v176 + 8);
  uint64_t v177 = a3[78];
  uint64_t v178 = a1 + v177;
  uint64_t v179 = a2 + v177;
  *(void *)uint64_t v178 = *(void *)v179;
  *(_BYTE *)(v178 + 8) = *(_BYTE *)(v179 + 8);
  uint64_t v180 = a3[79];
  uint64_t v181 = a1 + v180;
  uint64_t v182 = a2 + v180;
  *(void *)uint64_t v181 = *(void *)v182;
  *(_BYTE *)(v181 + 8) = *(_BYTE *)(v182 + 8);
  uint64_t v183 = a3[80];
  uint64_t v184 = a1 + v183;
  uint64_t v185 = a2 + v183;
  *(void *)uint64_t v184 = *(void *)v185;
  *(_BYTE *)(v184 + 8) = *(_BYTE *)(v185 + 8);
  *(_BYTE *)(a1 + a3[81]) = *(_BYTE *)(a2 + a3[81]);
  *(_BYTE *)(a1 + a3[82]) = *(_BYTE *)(a2 + a3[82]);
  *(_BYTE *)(a1 + a3[83]) = *(_BYTE *)(a2 + a3[83]);
  uint64_t v186 = a3[84];
  uint64_t v187 = a1 + v186;
  uint64_t v188 = a2 + v186;
  *(void *)uint64_t v187 = *(void *)v188;
  *(_BYTE *)(v187 + 8) = *(_BYTE *)(v188 + 8);
  uint64_t v189 = a3[85];
  uint64_t v190 = a1 + v189;
  uint64_t v191 = a2 + v189;
  *(void *)uint64_t v190 = *(void *)v191;
  *(_BYTE *)(v190 + 8) = *(_BYTE *)(v191 + 8);
  uint64_t v192 = a3[86];
  uint64_t v193 = a1 + v192;
  uint64_t v194 = a2 + v192;
  *(void *)uint64_t v193 = *(void *)v194;
  *(_BYTE *)(v193 + 8) = *(_BYTE *)(v194 + 8);
  uint64_t v195 = a3[87];
  uint64_t v196 = a1 + v195;
  uint64_t v197 = a2 + v195;
  *(void *)uint64_t v196 = *(void *)v197;
  *(_BYTE *)(v196 + 8) = *(_BYTE *)(v197 + 8);
  uint64_t v198 = a3[88];
  uint64_t v199 = a1 + v198;
  uint64_t v200 = (uint64_t *)(a2 + v198);
  uint64_t v201 = *v200;
  *(_BYTE *)(v199 + 8) = *((_BYTE *)v200 + 8);
  *(void *)uint64_t v199 = v201;
  uint64_t v202 = a3[89];
  uint64_t v203 = a1 + v202;
  uint64_t v204 = a2 + v202;
  *(void *)uint64_t v203 = *(void *)v204;
  *(_BYTE *)(v203 + 8) = *(_BYTE *)(v204 + 8);
  uint64_t v205 = a3[90];
  uint64_t v206 = a1 + v205;
  uint64_t v207 = a2 + v205;
  *(void *)uint64_t v206 = *(void *)v207;
  *(_BYTE *)(v206 + 8) = *(_BYTE *)(v207 + 8);
  uint64_t v208 = a3[91];
  uint64_t v209 = a1 + v208;
  uint64_t v210 = a2 + v208;
  *(void *)uint64_t v209 = *(void *)v210;
  *(_BYTE *)(v209 + 8) = *(_BYTE *)(v210 + 8);
  uint64_t v211 = a3[92];
  uint64_t v212 = a1 + v211;
  uint64_t v213 = a2 + v211;
  *(void *)uint64_t v212 = *(void *)v213;
  *(_BYTE *)(v212 + 8) = *(_BYTE *)(v213 + 8);
  *(_BYTE *)(a1 + a3[93]) = *(_BYTE *)(a2 + a3[93]);
  uint64_t v214 = a3[94];
  uint64_t v215 = a1 + v214;
  uint64_t v216 = a2 + v214;
  *(void *)uint64_t v215 = *(void *)v216;
  *(_BYTE *)(v215 + 8) = *(_BYTE *)(v216 + 8);
  uint64_t v217 = a3[95];
  uint64_t v218 = a1 + v217;
  uint64_t v219 = a2 + v217;
  *(void *)uint64_t v218 = *(void *)v219;
  *(_BYTE *)(v218 + 8) = *(_BYTE *)(v219 + 8);
  uint64_t v220 = a3[96];
  uint64_t v221 = a1 + v220;
  uint64_t v222 = a2 + v220;
  *(void *)uint64_t v221 = *(void *)v222;
  uint64_t v223 = a3[97];
  LOBYTE(v74) = *(_BYTE *)(a2 + v223);
  *(_BYTE *)(v221 + 8) = *(_BYTE *)(v222 + 8);
  *(_BYTE *)(a1 + v223) = v74;
  *(_BYTE *)(a1 + a3[98]) = *(_BYTE *)(a2 + a3[98]);
  *(_BYTE *)(a1 + a3[99]) = *(_BYTE *)(a2 + a3[99]);
  uint64_t v224 = a3[100];
  uint64_t v225 = a1 + v224;
  uint64_t v226 = a2 + v224;
  *(void *)uint64_t v225 = *(void *)v226;
  *(_BYTE *)(v225 + 8) = *(_BYTE *)(v226 + 8);
  uint64_t v227 = a3[101];
  uint64_t v228 = a1 + v227;
  uint64_t v229 = a2 + v227;
  *(void *)uint64_t v228 = *(void *)v229;
  *(_BYTE *)(v228 + 8) = *(_BYTE *)(v229 + 8);
  uint64_t v230 = a3[102];
  uint64_t v231 = a1 + v230;
  uint64_t v232 = a2 + v230;
  *(void *)uint64_t v231 = *(void *)v232;
  *(_BYTE *)(v231 + 8) = *(_BYTE *)(v232 + 8);
  uint64_t v233 = a3[103];
  uint64_t v234 = a1 + v233;
  uint64_t v235 = a2 + v233;
  *(void *)uint64_t v234 = *(void *)v235;
  *(_BYTE *)(v234 + 8) = *(_BYTE *)(v235 + 8);
  *(_BYTE *)(a1 + a3[104]) = *(_BYTE *)(a2 + a3[104]);
  uint64_t v236 = a3[105];
  uint64_t v237 = a1 + v236;
  uint64_t v238 = a2 + v236;
  *(void *)uint64_t v237 = *(void *)v238;
  *(_BYTE *)(v237 + 8) = *(_BYTE *)(v238 + 8);
  *(void *)(a1 + a3[106]) = *(void *)(a2 + a3[106]);
  uint64_t v239 = a3[107];
  uint64_t v240 = a1 + v239;
  uint64_t v241 = a2 + v239;
  *(void *)uint64_t v240 = *(void *)v241;
  *(_BYTE *)(v240 + 8) = *(_BYTE *)(v241 + 8);
  *(_BYTE *)(a1 + a3[108]) = *(_BYTE *)(a2 + a3[108]);
  *(void *)(a1 + a3[109]) = *(void *)(a2 + a3[109]);
  uint64_t v242 = a3[110];
  uint64_t v243 = a1 + v242;
  uint64_t v244 = a2 + v242;
  *(void *)uint64_t v243 = *(void *)v244;
  *(_BYTE *)(v243 + 8) = *(_BYTE *)(v244 + 8);
  uint64_t v245 = a3[111];
  uint64_t v246 = a1 + v245;
  uint64_t v247 = a2 + v245;
  *(void *)uint64_t v246 = *(void *)v247;
  *(_BYTE *)(v246 + 8) = *(_BYTE *)(v247 + 8);
  *(_BYTE *)(a1 + a3[112]) = *(_BYTE *)(a2 + a3[112]);
  *(_BYTE *)(a1 + a3[113]) = *(_BYTE *)(a2 + a3[113]);
  uint64_t v248 = a3[114];
  uint64_t v249 = a1 + v248;
  uint64_t v250 = a2 + v248;
  *(void *)uint64_t v249 = *(void *)v250;
  *(_BYTE *)(v249 + 8) = *(_BYTE *)(v250 + 8);
  uint64_t v251 = a3[115];
  uint64_t v252 = a1 + v251;
  uint64_t v253 = a2 + v251;
  *(void *)uint64_t v252 = *(void *)v253;
  *(_BYTE *)(v252 + 8) = *(_BYTE *)(v253 + 8);
  uint64_t v254 = a3[116];
  uint64_t v255 = a1 + v254;
  uint64_t v256 = a2 + v254;
  *(void *)uint64_t v255 = *(void *)v256;
  *(_BYTE *)(v255 + 8) = *(_BYTE *)(v256 + 8);
  uint64_t v257 = a3[117];
  uint64_t v258 = a1 + v257;
  uint64_t v259 = a2 + v257;
  *(void *)uint64_t v258 = *(void *)v259;
  *(_BYTE *)(v258 + 8) = *(_BYTE *)(v259 + 8);
  uint64_t v260 = a3[118];
  uint64_t v261 = a1 + v260;
  uint64_t v262 = (uint64_t *)(a2 + v260);
  uint64_t v263 = *v262;
  *(_BYTE *)(v261 + 8) = *((_BYTE *)v262 + 8);
  *(void *)uint64_t v261 = v263;
  uint64_t v264 = a3[119];
  uint64_t v265 = a1 + v264;
  uint64_t v266 = a2 + v264;
  *(void *)uint64_t v265 = *(void *)v266;
  *(_BYTE *)(v265 + 8) = *(_BYTE *)(v266 + 8);
  uint64_t v267 = a3[120];
  uint64_t v268 = a1 + v267;
  uint64_t v269 = a2 + v267;
  *(void *)uint64_t v268 = *(void *)v269;
  *(_BYTE *)(v268 + 8) = *(_BYTE *)(v269 + 8);
  uint64_t v270 = a3[121];
  uint64_t v271 = a1 + v270;
  uint64_t v272 = a2 + v270;
  *(void *)uint64_t v271 = *(void *)v272;
  *(_BYTE *)(v271 + 8) = *(_BYTE *)(v272 + 8);
  uint64_t v273 = a3[122];
  uint64_t v274 = a1 + v273;
  uint64_t v275 = a2 + v273;
  *(void *)uint64_t v274 = *(void *)v275;
  *(_BYTE *)(v274 + 8) = *(_BYTE *)(v275 + 8);
  uint64_t v276 = a3[123];
  uint64_t v277 = a1 + v276;
  uint64_t v278 = a2 + v276;
  *(void *)uint64_t v277 = *(void *)v278;
  *(_BYTE *)(v277 + 8) = *(_BYTE *)(v278 + 8);
  uint64_t v279 = a3[124];
  uint64_t v280 = a1 + v279;
  uint64_t v281 = a2 + v279;
  *(void *)uint64_t v280 = *(void *)v281;
  *(_BYTE *)(v280 + 8) = *(_BYTE *)(v281 + 8);
  uint64_t v282 = a3[125];
  uint64_t v283 = a1 + v282;
  uint64_t v284 = a2 + v282;
  *(void *)uint64_t v283 = *(void *)v284;
  *(_BYTE *)(v283 + 8) = *(_BYTE *)(v284 + 8);
  uint64_t v285 = a3[126];
  uint64_t v286 = a1 + v285;
  uint64_t v287 = a2 + v285;
  *(void *)uint64_t v286 = *(void *)v287;
  *(_BYTE *)(v286 + 8) = *(_BYTE *)(v287 + 8);
  uint64_t v288 = a3[127];
  uint64_t v289 = a1 + v288;
  uint64_t v290 = a2 + v288;
  *(void *)uint64_t v289 = *(void *)v290;
  *(_BYTE *)(v289 + 8) = *(_BYTE *)(v290 + 8);
  uint64_t v291 = a3[128];
  uint64_t v292 = a1 + v291;
  uint64_t v293 = a2 + v291;
  *(void *)uint64_t v292 = *(void *)v293;
  *(_BYTE *)(v292 + 8) = *(_BYTE *)(v293 + 8);
  uint64_t v294 = a3[129];
  uint64_t v295 = a1 + v294;
  uint64_t v296 = a2 + v294;
  *(void *)uint64_t v295 = *(void *)v296;
  *(_BYTE *)(v295 + 8) = *(_BYTE *)(v296 + 8);
  uint64_t v297 = a3[130];
  uint64_t v298 = a1 + v297;
  uint64_t v299 = a2 + v297;
  *(void *)uint64_t v298 = *(void *)v299;
  *(_BYTE *)(v298 + 8) = *(_BYTE *)(v299 + 8);
  uint64_t v300 = a3[131];
  uint64_t v301 = a1 + v300;
  uint64_t v302 = a2 + v300;
  *(void *)uint64_t v301 = *(void *)v302;
  uint64_t v303 = a3[132];
  LOBYTE(v74) = *(_BYTE *)(a2 + v303);
  *(_BYTE *)(v301 + 8) = *(_BYTE *)(v302 + 8);
  *(_BYTE *)(a1 + v303) = v74;
  *(_BYTE *)(a1 + a3[133]) = *(_BYTE *)(a2 + a3[133]);
  uint64_t v304 = a3[134];
  uint64_t v305 = a1 + v304;
  uint64_t v306 = a2 + v304;
  *(void *)uint64_t v305 = *(void *)v306;
  *(_BYTE *)(v305 + 8) = *(_BYTE *)(v306 + 8);
  uint64_t v307 = a3[135];
  uint64_t v308 = a1 + v307;
  uint64_t v309 = a2 + v307;
  *(void *)uint64_t v308 = *(void *)v309;
  uint64_t v310 = a3[136];
  LOBYTE(v74) = *(_BYTE *)(a2 + v310);
  *(_BYTE *)(v308 + 8) = *(_BYTE *)(v309 + 8);
  *(_BYTE *)(a1 + v310) = v74;
  uint64_t v311 = a3[137];
  uint64_t v312 = a1 + v311;
  uint64_t v313 = a2 + v311;
  *(_DWORD *)uint64_t v312 = *(_DWORD *)v313;
  *(_BYTE *)(v312 + 4) = *(_BYTE *)(v313 + 4);
  uint64_t v314 = a3[138];
  uint64_t v315 = a1 + v314;
  uint64_t v316 = a2 + v314;
  *(void *)uint64_t v315 = *(void *)v316;
  *(_BYTE *)(v315 + 8) = *(_BYTE *)(v316 + 8);
  uint64_t v317 = a3[139];
  uint64_t v318 = a1 + v317;
  uint64_t v319 = a2 + v317;
  *(void *)uint64_t v318 = *(void *)v319;
  *(_BYTE *)(v318 + 8) = *(_BYTE *)(v319 + 8);
  uint64_t v320 = a3[140];
  uint64_t v321 = a1 + v320;
  uint64_t v322 = a2 + v320;
  *(void *)uint64_t v321 = *(void *)v322;
  *(_BYTE *)(v321 + 8) = *(_BYTE *)(v322 + 8);
  uint64_t v323 = a3[141];
  uint64_t v324 = a1 + v323;
  uint64_t v325 = (uint64_t *)(a2 + v323);
  uint64_t v326 = *v325;
  *(_BYTE *)(v324 + 8) = *((_BYTE *)v325 + 8);
  *(void *)uint64_t v324 = v326;
  uint64_t v327 = a3[142];
  uint64_t v328 = a1 + v327;
  uint64_t v329 = a2 + v327;
  *(void *)uint64_t v328 = *(void *)v329;
  *(_BYTE *)(v328 + 8) = *(_BYTE *)(v329 + 8);
  uint64_t v330 = a3[143];
  uint64_t v331 = a1 + v330;
  uint64_t v332 = a2 + v330;
  *(void *)uint64_t v331 = *(void *)v332;
  *(_BYTE *)(v331 + 8) = *(_BYTE *)(v332 + 8);
  uint64_t v333 = a3[144];
  uint64_t v334 = a1 + v333;
  uint64_t v335 = a2 + v333;
  *(void *)uint64_t v334 = *(void *)v335;
  *(_BYTE *)(v334 + 8) = *(_BYTE *)(v335 + 8);
  *(_BYTE *)(a1 + a3[145]) = *(_BYTE *)(a2 + a3[145]);
  uint64_t v336 = a3[146];
  uint64_t v337 = a1 + v336;
  uint64_t v338 = a2 + v336;
  *(void *)uint64_t v337 = *(void *)v338;
  *(_BYTE *)(v337 + 8) = *(_BYTE *)(v338 + 8);
  uint64_t v339 = a3[147];
  uint64_t v340 = a1 + v339;
  uint64_t v341 = a2 + v339;
  *(void *)uint64_t v340 = *(void *)v341;
  *(_BYTE *)(v340 + 8) = *(_BYTE *)(v341 + 8);
  *(_OWORD *)(a1 + a3[148]) = *(_OWORD *)(a2 + a3[148]);
  uint64_t v342 = a3[149];
  uint64_t v343 = a1 + v342;
  uint64_t v344 = a2 + v342;
  *(void *)uint64_t v343 = *(void *)v344;
  *(_BYTE *)(v343 + 8) = *(_BYTE *)(v344 + 8);
  *(_OWORD *)(a1 + a3[150]) = *(_OWORD *)(a2 + a3[150]);
  uint64_t v345 = a3[151];
  uint64_t v346 = a1 + v345;
  uint64_t v347 = (uint64_t *)(a2 + v345);
  uint64_t v348 = *v347;
  *(_BYTE *)(v346 + 8) = *((_BYTE *)v347 + 8);
  *(void *)uint64_t v346 = v348;
  *(void *)(a1 + a3[152]) = *(void *)(a2 + a3[152]);
  return a1;
}

uint64_t sub_100468118(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_100016F9C(v7, v8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + sub_100454668(v0 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v9 = *(void *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(void *)(a1 + 168) = v9;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  uint64_t v10 = a3[21];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_100004AEC(&qword_1009AEED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  uint64_t v14 = a3[22];
  uint64_t v15 = a3[23];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  uint64_t v18 = a1 + v15;
  uint64_t v19 = a2 + v15;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  uint64_t v20 = a3[24];
  uint64_t v21 = a3[25];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  uint64_t v26 = a3[26];
  uint64_t v27 = a3[27];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(void *)uint64_t v28 = *(void *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(void *)uint64_t v30 = *(void *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  uint64_t v32 = a3[28];
  uint64_t v33 = a3[29];
  uint64_t v34 = a1 + v32;
  uint64_t v35 = a2 + v32;
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  uint64_t v36 = a1 + v33;
  uint64_t v37 = a2 + v33;
  *(void *)uint64_t v36 = *(void *)v37;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  uint64_t v38 = a3[30];
  uint64_t v39 = a3[31];
  uint64_t v40 = a1 + v38;
  uint64_t v41 = a2 + v38;
  *(void *)uint64_t v40 = *(void *)v41;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  uint64_t v42 = a1 + v39;
  uint64_t v43 = a2 + v39;
  *(void *)uint64_t v42 = *(void *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  uint64_t v44 = a3[32];
  uint64_t v45 = a3[33];
  uint64_t v46 = a1 + v44;
  uint64_t v47 = a2 + v44;
  *(void *)uint64_t v46 = *(void *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  *(_BYTE *)(a1 + v45) = *(_BYTE *)(a2 + v45);
  uint64_t v48 = a3[34];
  uint64_t v49 = a3[35];
  uint64_t v50 = a1 + v48;
  uint64_t v51 = a2 + v48;
  *(void *)uint64_t v50 = *(void *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  uint64_t v52 = a1 + v49;
  uint64_t v53 = a2 + v49;
  *(void *)uint64_t v52 = *(void *)v53;
  *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
  uint64_t v54 = a3[36];
  uint64_t v55 = a3[37];
  uint64_t v56 = a1 + v54;
  uint64_t v57 = a2 + v54;
  *(void *)uint64_t v56 = *(void *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  *(_BYTE *)(a1 + v55) = *(_BYTE *)(a2 + v55);
  uint64_t v58 = a3[38];
  uint64_t v59 = a3[39];
  uint64_t v60 = a1 + v58;
  uint64_t v61 = a2 + v58;
  *(void *)uint64_t v60 = *(void *)v61;
  *(_BYTE *)(v60 + 8) = *(_BYTE *)(v61 + 8);
  uint64_t v62 = a1 + v59;
  uint64_t v63 = a2 + v59;
  *(void *)uint64_t v62 = *(void *)v63;
  *(_BYTE *)(v62 + 8) = *(_BYTE *)(v63 + 8);
  uint64_t v64 = a3[40];
  uint64_t v65 = a3[41];
  uint64_t v66 = a1 + v64;
  uint64_t v67 = a2 + v64;
  *(void *)uint64_t v66 = *(void *)v67;
  *(_BYTE *)(v66 + 8) = *(_BYTE *)(v67 + 8);
  uint64_t v68 = a1 + v65;
  uint64_t v69 = a2 + v65;
  *(void *)uint64_t v68 = *(void *)v69;
  *(_BYTE *)(v68 + 8) = *(_BYTE *)(v69 + 8);
  uint64_t v70 = a3[42];
  uint64_t v71 = a3[43];
  uint64_t v72 = a1 + v70;
  uint64_t v73 = (uint64_t *)(a2 + v70);
  uint64_t v74 = *v73;
  *(_BYTE *)(v72 + 8) = *((_BYTE *)v73 + 8);
  *(void *)uint64_t v72 = v74;
  uint64_t v75 = a1 + v71;
  uint64_t v76 = a2 + v71;
  *(void *)uint64_t v75 = *(void *)v76;
  *(_BYTE *)(v75 + 8) = *(_BYTE *)(v76 + 8);
  uint64_t v77 = a3[44];
  uint64_t v78 = a3[45];
  uint64_t v79 = a1 + v77;
  uint64_t v80 = a2 + v77;
  *(void *)uint64_t v79 = *(void *)v80;
  *(_BYTE *)(v79 + 8) = *(_BYTE *)(v80 + 8);
  uint64_t v81 = a1 + v78;
  uint64_t v82 = a2 + v78;
  *(void *)uint64_t v81 = *(void *)v82;
  *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
  uint64_t v83 = a3[46];
  uint64_t v84 = a3[47];
  uint64_t v85 = a1 + v83;
  uint64_t v86 = a2 + v83;
  *(void *)uint64_t v85 = *(void *)v86;
  *(_BYTE *)(v85 + 8) = *(_BYTE *)(v86 + 8);
  uint64_t v87 = a1 + v84;
  uint64_t v88 = a2 + v84;
  *(void *)uint64_t v87 = *(void *)v88;
  *(_BYTE *)(v87 + 8) = *(_BYTE *)(v88 + 8);
  uint64_t v89 = a3[48];
  uint64_t v90 = a3[49];
  uint64_t v91 = a1 + v89;
  uint64_t v92 = a2 + v89;
  *(void *)uint64_t v91 = *(void *)v92;
  *(_BYTE *)(v91 + 8) = *(_BYTE *)(v92 + 8);
  uint64_t v93 = a1 + v90;
  uint64_t v94 = a2 + v90;
  *(void *)uint64_t v93 = *(void *)v94;
  *(_BYTE *)(v93 + 8) = *(_BYTE *)(v94 + 8);
  uint64_t v95 = a3[50];
  uint64_t v96 = a3[51];
  uint64_t v97 = a1 + v95;
  uint64_t v98 = a2 + v95;
  *(void *)uint64_t v97 = *(void *)v98;
  *(_BYTE *)(v97 + 8) = *(_BYTE *)(v98 + 8);
  uint64_t v99 = a1 + v96;
  uint64_t v100 = a2 + v96;
  *(void *)uint64_t v99 = *(void *)v100;
  *(_BYTE *)(v99 + 8) = *(_BYTE *)(v100 + 8);
  uint64_t v101 = a3[53];
  *(_BYTE *)(a1 + a3[52]) = *(_BYTE *)(a2 + a3[52]);
  uint64_t v102 = a1 + v101;
  uint64_t v103 = a2 + v101;
  *(void *)uint64_t v102 = *(void *)v103;
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(v103 + 8);
  uint64_t v104 = a3[54];
  uint64_t v105 = a3[55];
  uint64_t v106 = a1 + v104;
  uint64_t v107 = a2 + v104;
  *(void *)uint64_t v106 = *(void *)v107;
  *(_BYTE *)(v106 + 8) = *(_BYTE *)(v107 + 8);
  uint64_t v108 = a1 + v105;
  uint64_t v109 = a2 + v105;
  *(void *)uint64_t v108 = *(void *)v109;
  *(_BYTE *)(v108 + 8) = *(_BYTE *)(v109 + 8);
  uint64_t v110 = a3[56];
  uint64_t v111 = a3[57];
  uint64_t v112 = a1 + v110;
  uint64_t v113 = a2 + v110;
  *(void *)uint64_t v112 = *(void *)v113;
  *(_BYTE *)(v112 + 8) = *(_BYTE *)(v113 + 8);
  uint64_t v114 = a1 + v111;
  uint64_t v115 = (uint64_t *)(a2 + v111);
  uint64_t v116 = *v115;
  *(_BYTE *)(v114 + 8) = *((_BYTE *)v115 + 8);
  *(void *)uint64_t v114 = v116;
  uint64_t v117 = a3[58];
  uint64_t v118 = a3[59];
  uint64_t v119 = a1 + v117;
  uint64_t v120 = a2 + v117;
  *(void *)uint64_t v119 = *(void *)v120;
  *(_BYTE *)(v119 + 8) = *(_BYTE *)(v120 + 8);
  *(_BYTE *)(a1 + v118) = *(_BYTE *)(a2 + v118);
  uint64_t v121 = a3[61];
  *(_BYTE *)(a1 + a3[60]) = *(_BYTE *)(a2 + a3[60]);
  uint64_t v122 = a1 + v121;
  uint64_t v123 = a2 + v121;
  if (!*(void *)(a1 + v121 + 48)) {
    goto LABEL_5;
  }
  uint64_t v124 = *(void *)(v123 + 48);
  if (!v124)
  {
    sub_1004258E0(a1 + v121);
LABEL_5:
    __int128 v126 = *(_OWORD *)(v123 + 80);
    *(_OWORD *)(v122 + 64) = *(_OWORD *)(v123 + 64);
    *(_OWORD *)(v122 + 80) = v126;
    *(_OWORD *)(v122 + 96) = *(_OWORD *)(v123 + 96);
    __int128 v127 = *(_OWORD *)(v123 + 16);
    *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
    *(_OWORD *)(v122 + swift_weakDestroy(v0 + 16) = v127;
    __int128 v128 = *(_OWORD *)(v123 + 48);
    *(_OWORD *)(v122 + 32) = *(_OWORD *)(v123 + 32);
    *(_OWORD *)(v122 + 48) = v128;
    goto LABEL_6;
  }

  __int128 v125 = *(_OWORD *)(v123 + 16);
  *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
  *(_OWORD *)(v122 + swift_weakDestroy(v0 + 16) = v125;
  *(_OWORD *)(v122 + 32) = *(_OWORD *)(v123 + 32);
  *(void *)(v122 + 48) = v124;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v122 + 56) = *(_OWORD *)(v123 + 56);
  *(_OWORD *)(v122 + 72) = *(_OWORD *)(v123 + 72);
  *(_OWORD *)(v122 + 88) = *(_OWORD *)(v123 + 88);
  *(void *)(v122 + 104) = *(void *)(v123 + 104);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v129 = a3[62];
  uint64_t v130 = a3[63];
  uint64_t v131 = a1 + v129;
  uint64_t v132 = a2 + v129;
  *(void *)uint64_t v131 = *(void *)v132;
  *(_BYTE *)(v131 + 8) = *(_BYTE *)(v132 + 8);
  uint64_t v133 = a1 + v130;
  uint64_t v134 = a2 + v130;
  *(void *)uint64_t v133 = *(void *)v134;
  *(_BYTE *)(v133 + 8) = *(_BYTE *)(v134 + 8);
  uint64_t v135 = a3[64];
  uint64_t v136 = a1 + v135;
  uint64_t v137 = a2 + v135;
  *(void *)uint64_t v136 = *(void *)v137;
  *(_BYTE *)(v136 + 8) = *(_BYTE *)(v137 + 8);
  uint64_t v138 = a3[65];
  uint64_t v139 = a1 + v138;
  uint64_t v140 = a2 + v138;
  *(_BYTE *)(v139 + 8) = *(_BYTE *)(v140 + 8);
  *(void *)uint64_t v139 = *(void *)v140;
  uint64_t v141 = a3[66];
  uint64_t v142 = a1 + v141;
  uint64_t v143 = a2 + v141;
  *(void *)uint64_t v142 = *(void *)v143;
  *(_BYTE *)(v142 + 8) = *(_BYTE *)(v143 + 8);
  uint64_t v144 = a3[67];
  uint64_t v145 = a1 + v144;
  uint64_t v146 = a2 + v144;
  *(void *)uint64_t v145 = *(void *)v146;
  *(_BYTE *)(v145 + 8) = *(_BYTE *)(v146 + 8);
  uint64_t v147 = a3[68];
  uint64_t v148 = a1 + v147;
  uint64_t v149 = a2 + v147;
  *(void *)uint64_t v148 = *(void *)v149;
  *(_BYTE *)(v148 + 8) = *(_BYTE *)(v149 + 8);
  uint64_t v150 = a3[69];
  uint64_t v151 = a1 + v150;
  uint64_t v152 = a2 + v150;
  *(void *)uint64_t v151 = *(void *)v152;
  *(_BYTE *)(v151 + 8) = *(_BYTE *)(v152 + 8);
  uint64_t v153 = a3[70];
  uint64_t v154 = a1 + v153;
  uint64_t v155 = a2 + v153;
  *(void *)uint64_t v154 = *(void *)v155;
  *(_BYTE *)(v154 + 8) = *(_BYTE *)(v155 + 8);
  uint64_t v156 = a3[71];
  uint64_t v157 = a1 + v156;
  uint64_t v158 = a2 + v156;
  *(void *)uint64_t v157 = *(void *)v158;
  *(_BYTE *)(v157 + 8) = *(_BYTE *)(v158 + 8);
  uint64_t v159 = a3[72];
  uint64_t v160 = a1 + v159;
  uint64_t v161 = a2 + v159;
  *(void *)uint64_t v160 = *(void *)v161;
  *(_BYTE *)(v160 + 8) = *(_BYTE *)(v161 + 8);
  uint64_t v162 = a3[73];
  uint64_t v163 = a1 + v162;
  uint64_t v164 = a2 + v162;
  *(void *)uint64_t v163 = *(void *)v164;
  *(_BYTE *)(v163 + 8) = *(_BYTE *)(v164 + 8);
  uint64_t v165 = a3[74];
  uint64_t v166 = a1 + v165;
  uint64_t v167 = a2 + v165;
  *(void *)uint64_t v166 = *(void *)v167;
  *(_BYTE *)(v166 + 8) = *(_BYTE *)(v167 + 8);
  uint64_t v168 = a3[75];
  uint64_t v169 = a1 + v168;
  uint64_t v170 = a2 + v168;
  *(void *)uint64_t v169 = *(void *)v170;
  *(_BYTE *)(v169 + 8) = *(_BYTE *)(v170 + 8);
  uint64_t v171 = a3[76];
  uint64_t v172 = a1 + v171;
  uint64_t v173 = a2 + v171;
  *(void *)uint64_t v172 = *(void *)v173;
  *(_BYTE *)(v172 + 8) = *(_BYTE *)(v173 + 8);
  uint64_t v174 = a3[77];
  uint64_t v175 = a1 + v174;
  uint64_t v176 = a2 + v174;
  *(void *)uint64_t v175 = *(void *)v176;
  *(_BYTE *)(v175 + 8) = *(_BYTE *)(v176 + 8);
  uint64_t v177 = a3[78];
  uint64_t v178 = a1 + v177;
  uint64_t v179 = a2 + v177;
  *(void *)uint64_t v178 = *(void *)v179;
  *(_BYTE *)(v178 + 8) = *(_BYTE *)(v179 + 8);
  uint64_t v180 = a3[79];
  uint64_t v181 = a1 + v180;
  uint64_t v182 = a2 + v180;
  *(void *)uint64_t v181 = *(void *)v182;
  *(_BYTE *)(v181 + 8) = *(_BYTE *)(v182 + 8);
  uint64_t v183 = a3[80];
  uint64_t v184 = a1 + v183;
  uint64_t v185 = a2 + v183;
  *(void *)uint64_t v184 = *(void *)v185;
  uint64_t v186 = a3[81];
  char v187 = *(_BYTE *)(a2 + v186);
  *(_BYTE *)(v184 + 8) = *(_BYTE *)(v185 + 8);
  *(_BYTE *)(a1 + v186) = v187;
  *(_BYTE *)(a1 + a3[82]) = *(_BYTE *)(a2 + a3[82]);
  *(_BYTE *)(a1 + a3[83]) = *(_BYTE *)(a2 + a3[83]);
  uint64_t v188 = a3[84];
  uint64_t v189 = a1 + v188;
  uint64_t v190 = a2 + v188;
  *(void *)uint64_t v189 = *(void *)v190;
  *(_BYTE *)(v189 + 8) = *(_BYTE *)(v190 + 8);
  uint64_t v191 = a3[85];
  uint64_t v192 = a1 + v191;
  uint64_t v193 = a2 + v191;
  *(void *)uint64_t v192 = *(void *)v193;
  *(_BYTE *)(v192 + 8) = *(_BYTE *)(v193 + 8);
  uint64_t v194 = a3[86];
  uint64_t v195 = a1 + v194;
  uint64_t v196 = a2 + v194;
  *(void *)uint64_t v195 = *(void *)v196;
  *(_BYTE *)(v195 + 8) = *(_BYTE *)(v196 + 8);
  uint64_t v197 = a3[87];
  uint64_t v198 = a1 + v197;
  uint64_t v199 = a2 + v197;
  *(void *)uint64_t v198 = *(void *)v199;
  *(_BYTE *)(v198 + 8) = *(_BYTE *)(v199 + 8);
  uint64_t v200 = a3[88];
  uint64_t v201 = a1 + v200;
  uint64_t v202 = (uint64_t *)(a2 + v200);
  uint64_t v203 = *v202;
  *(_BYTE *)(v201 + 8) = *((_BYTE *)v202 + 8);
  *(void *)uint64_t v201 = v203;
  uint64_t v204 = a3[89];
  uint64_t v205 = a1 + v204;
  uint64_t v206 = a2 + v204;
  *(void *)uint64_t v205 = *(void *)v206;
  *(_BYTE *)(v205 + 8) = *(_BYTE *)(v206 + 8);
  uint64_t v207 = a3[90];
  uint64_t v208 = a1 + v207;
  uint64_t v209 = a2 + v207;
  *(void *)uint64_t v208 = *(void *)v209;
  *(_BYTE *)(v208 + 8) = *(_BYTE *)(v209 + 8);
  uint64_t v210 = a3[91];
  uint64_t v211 = a1 + v210;
  uint64_t v212 = a2 + v210;
  *(void *)uint64_t v211 = *(void *)v212;
  *(_BYTE *)(v211 + 8) = *(_BYTE *)(v212 + 8);
  uint64_t v213 = a3[92];
  uint64_t v214 = a1 + v213;
  uint64_t v215 = a2 + v213;
  *(void *)uint64_t v214 = *(void *)v215;
  *(_BYTE *)(v214 + 8) = *(_BYTE *)(v215 + 8);
  *(_BYTE *)(a1 + a3[93]) = *(_BYTE *)(a2 + a3[93]);
  uint64_t v216 = a3[94];
  uint64_t v217 = a1 + v216;
  uint64_t v218 = a2 + v216;
  *(void *)uint64_t v217 = *(void *)v218;
  *(_BYTE *)(v217 + 8) = *(_BYTE *)(v218 + 8);
  uint64_t v219 = a3[95];
  uint64_t v220 = a1 + v219;
  uint64_t v221 = a2 + v219;
  *(void *)uint64_t v220 = *(void *)v221;
  *(_BYTE *)(v220 + 8) = *(_BYTE *)(v221 + 8);
  uint64_t v222 = a3[96];
  uint64_t v223 = a1 + v222;
  uint64_t v224 = a2 + v222;
  *(void *)uint64_t v223 = *(void *)v224;
  *(_BYTE *)(v223 + 8) = *(_BYTE *)(v224 + 8);
  *(_BYTE *)(a1 + a3[97]) = *(_BYTE *)(a2 + a3[97]);
  *(_BYTE *)(a1 + a3[98]) = *(_BYTE *)(a2 + a3[98]);
  *(_BYTE *)(a1 + a3[99]) = *(_BYTE *)(a2 + a3[99]);
  uint64_t v225 = a3[100];
  uint64_t v226 = a1 + v225;
  uint64_t v227 = a2 + v225;
  *(void *)uint64_t v226 = *(void *)v227;
  *(_BYTE *)(v226 + 8) = *(_BYTE *)(v227 + 8);
  uint64_t v228 = a3[101];
  uint64_t v229 = a1 + v228;
  uint64_t v230 = a2 + v228;
  *(void *)uint64_t v229 = *(void *)v230;
  *(_BYTE *)(v229 + 8) = *(_BYTE *)(v230 + 8);
  uint64_t v231 = a3[102];
  uint64_t v232 = a1 + v231;
  uint64_t v233 = a2 + v231;
  *(void *)uint64_t v232 = *(void *)v233;
  *(_BYTE *)(v232 + 8) = *(_BYTE *)(v233 + 8);
  uint64_t v234 = a3[103];
  uint64_t v235 = a1 + v234;
  uint64_t v236 = a2 + v234;
  *(void *)uint64_t v235 = *(void *)v236;
  *(_BYTE *)(v235 + 8) = *(_BYTE *)(v236 + 8);
  *(_BYTE *)(a1 + a3[104]) = *(_BYTE *)(a2 + a3[104]);
  uint64_t v237 = a3[105];
  uint64_t v238 = a1 + v237;
  uint64_t v239 = a2 + v237;
  *(void *)uint64_t v238 = *(void *)v239;
  *(_BYTE *)(v238 + 8) = *(_BYTE *)(v239 + 8);
  *(void *)(a1 + a3[106]) = *(void *)(a2 + a3[106]);
  swift_bridgeObjectRelease();
  uint64_t v240 = a3[107];
  uint64_t v241 = a1 + v240;
  uint64_t v242 = a2 + v240;
  *(void *)uint64_t v241 = *(void *)v242;
  *(_BYTE *)(v241 + 8) = *(_BYTE *)(v242 + 8);
  *(_BYTE *)(a1 + a3[108]) = *(_BYTE *)(a2 + a3[108]);
  *(void *)(a1 + a3[109]) = *(void *)(a2 + a3[109]);
  swift_bridgeObjectRelease();
  uint64_t v243 = a3[110];
  uint64_t v244 = a1 + v243;
  uint64_t v245 = a2 + v243;
  *(_BYTE *)(v244 + 8) = *(_BYTE *)(v245 + 8);
  *(void *)uint64_t v244 = *(void *)v245;
  uint64_t v246 = a3[111];
  uint64_t v247 = a1 + v246;
  uint64_t v248 = a2 + v246;
  *(_BYTE *)(v247 + 8) = *(_BYTE *)(v248 + 8);
  *(void *)uint64_t v247 = *(void *)v248;
  *(_BYTE *)(a1 + a3[112]) = *(_BYTE *)(a2 + a3[112]);
  *(_BYTE *)(a1 + a3[113]) = *(_BYTE *)(a2 + a3[113]);
  uint64_t v249 = a3[114];
  uint64_t v250 = a1 + v249;
  uint64_t v251 = a2 + v249;
  *(void *)uint64_t v250 = *(void *)v251;
  *(_BYTE *)(v250 + 8) = *(_BYTE *)(v251 + 8);
  uint64_t v252 = a3[115];
  uint64_t v253 = a1 + v252;
  uint64_t v254 = a2 + v252;
  *(void *)uint64_t v253 = *(void *)v254;
  *(_BYTE *)(v253 + 8) = *(_BYTE *)(v254 + 8);
  uint64_t v255 = a3[116];
  uint64_t v256 = a1 + v255;
  uint64_t v257 = a2 + v255;
  *(void *)uint64_t v256 = *(void *)v257;
  *(_BYTE *)(v256 + 8) = *(_BYTE *)(v257 + 8);
  uint64_t v258 = a3[117];
  uint64_t v259 = a1 + v258;
  uint64_t v260 = a2 + v258;
  *(void *)uint64_t v259 = *(void *)v260;
  *(_BYTE *)(v259 + 8) = *(_BYTE *)(v260 + 8);
  uint64_t v261 = a3[118];
  uint64_t v262 = a1 + v261;
  uint64_t v263 = (uint64_t *)(a2 + v261);
  uint64_t v264 = *v263;
  *(_BYTE *)(v262 + 8) = *((_BYTE *)v263 + 8);
  *(void *)uint64_t v262 = v264;
  uint64_t v265 = a3[119];
  uint64_t v266 = a1 + v265;
  uint64_t v267 = a2 + v265;
  *(void *)uint64_t v266 = *(void *)v267;
  *(_BYTE *)(v266 + 8) = *(_BYTE *)(v267 + 8);
  uint64_t v268 = a3[120];
  uint64_t v269 = a1 + v268;
  uint64_t v270 = a2 + v268;
  *(void *)uint64_t v269 = *(void *)v270;
  *(_BYTE *)(v269 + 8) = *(_BYTE *)(v270 + 8);
  uint64_t v271 = a3[121];
  uint64_t v272 = a1 + v271;
  uint64_t v273 = a2 + v271;
  *(void *)uint64_t v272 = *(void *)v273;
  *(_BYTE *)(v272 + 8) = *(_BYTE *)(v273 + 8);
  uint64_t v274 = a3[122];
  uint64_t v275 = a1 + v274;
  uint64_t v276 = a2 + v274;
  *(void *)uint64_t v275 = *(void *)v276;
  *(_BYTE *)(v275 + 8) = *(_BYTE *)(v276 + 8);
  uint64_t v277 = a3[123];
  uint64_t v278 = a1 + v277;
  uint64_t v279 = a2 + v277;
  *(void *)uint64_t v278 = *(void *)v279;
  *(_BYTE *)(v278 + 8) = *(_BYTE *)(v279 + 8);
  uint64_t v280 = a3[124];
  uint64_t v281 = a1 + v280;
  uint64_t v282 = a2 + v280;
  *(void *)uint64_t v281 = *(void *)v282;
  *(_BYTE *)(v281 + 8) = *(_BYTE *)(v282 + 8);
  uint64_t v283 = a3[125];
  uint64_t v284 = a1 + v283;
  uint64_t v285 = a2 + v283;
  *(void *)uint64_t v284 = *(void *)v285;
  *(_BYTE *)(v284 + 8) = *(_BYTE *)(v285 + 8);
  uint64_t v286 = a3[126];
  uint64_t v287 = a1 + v286;
  uint64_t v288 = a2 + v286;
  *(void *)uint64_t v287 = *(void *)v288;
  *(_BYTE *)(v287 + 8) = *(_BYTE *)(v288 + 8);
  uint64_t v289 = a3[127];
  uint64_t v290 = a1 + v289;
  uint64_t v291 = a2 + v289;
  *(void *)uint64_t v290 = *(void *)v291;
  *(_BYTE *)(v290 + 8) = *(_BYTE *)(v291 + 8);
  uint64_t v292 = a3[128];
  uint64_t v293 = a1 + v292;
  uint64_t v294 = a2 + v292;
  *(void *)uint64_t v293 = *(void *)v294;
  *(_BYTE *)(v293 + 8) = *(_BYTE *)(v294 + 8);
  uint64_t v295 = a3[129];
  uint64_t v296 = a1 + v295;
  uint64_t v297 = a2 + v295;
  *(void *)uint64_t v296 = *(void *)v297;
  *(_BYTE *)(v296 + 8) = *(_BYTE *)(v297 + 8);
  uint64_t v298 = a3[130];
  uint64_t v299 = a1 + v298;
  uint64_t v300 = a2 + v298;
  *(void *)uint64_t v299 = *(void *)v300;
  *(_BYTE *)(v299 + 8) = *(_BYTE *)(v300 + 8);
  uint64_t v301 = a3[131];
  uint64_t v302 = a1 + v301;
  uint64_t v303 = a2 + v301;
  *(void *)uint64_t v302 = *(void *)v303;
  *(_BYTE *)(v302 + 8) = *(_BYTE *)(v303 + 8);
  *(_BYTE *)(a1 + a3[132]) = *(_BYTE *)(a2 + a3[132]);
  *(_BYTE *)(a1 + a3[133]) = *(_BYTE *)(a2 + a3[133]);
  uint64_t v304 = a3[134];
  uint64_t v305 = a1 + v304;
  uint64_t v306 = a2 + v304;
  *(void *)uint64_t v305 = *(void *)v306;
  *(_BYTE *)(v305 + 8) = *(_BYTE *)(v306 + 8);
  uint64_t v307 = a3[135];
  uint64_t v308 = a1 + v307;
  uint64_t v309 = a2 + v307;
  *(void *)uint64_t v308 = *(void *)v309;
  *(_BYTE *)(v308 + 8) = *(_BYTE *)(v309 + 8);
  *(_BYTE *)(a1 + a3[136]) = *(_BYTE *)(a2 + a3[136]);
  uint64_t v310 = a3[137];
  uint64_t v311 = a1 + v310;
  uint64_t v312 = a2 + v310;
  *(_DWORD *)uint64_t v311 = *(_DWORD *)v312;
  *(_BYTE *)(v311 + 4) = *(_BYTE *)(v312 + 4);
  uint64_t v313 = a3[138];
  uint64_t v314 = a1 + v313;
  uint64_t v315 = a2 + v313;
  *(void *)uint64_t v314 = *(void *)v315;
  *(_BYTE *)(v314 + 8) = *(_BYTE *)(v315 + 8);
  uint64_t v316 = a3[139];
  uint64_t v317 = a1 + v316;
  uint64_t v318 = a2 + v316;
  *(void *)uint64_t v317 = *(void *)v318;
  *(_BYTE *)(v317 + 8) = *(_BYTE *)(v318 + 8);
  uint64_t v319 = a3[140];
  uint64_t v320 = a1 + v319;
  uint64_t v321 = a2 + v319;
  *(void *)uint64_t v320 = *(void *)v321;
  *(_BYTE *)(v320 + 8) = *(_BYTE *)(v321 + 8);
  uint64_t v322 = a3[141];
  uint64_t v323 = a1 + v322;
  uint64_t v324 = (uint64_t *)(a2 + v322);
  uint64_t v325 = *v324;
  *(_BYTE *)(v323 + 8) = *((_BYTE *)v324 + 8);
  *(void *)uint64_t v323 = v325;
  uint64_t v326 = a3[142];
  uint64_t v327 = a1 + v326;
  uint64_t v328 = a2 + v326;
  *(void *)uint64_t v327 = *(void *)v328;
  *(_BYTE *)(v327 + 8) = *(_BYTE *)(v328 + 8);
  uint64_t v329 = a3[143];
  uint64_t v330 = a1 + v329;
  uint64_t v331 = a2 + v329;
  *(void *)uint64_t v330 = *(void *)v331;
  *(_BYTE *)(v330 + 8) = *(_BYTE *)(v331 + 8);
  uint64_t v332 = a3[144];
  uint64_t v333 = a1 + v332;
  uint64_t v334 = a2 + v332;
  *(void *)uint64_t v333 = *(void *)v334;
  *(_BYTE *)(v333 + 8) = *(_BYTE *)(v334 + 8);
  *(_BYTE *)(a1 + a3[145]) = *(_BYTE *)(a2 + a3[145]);
  uint64_t v335 = a3[146];
  uint64_t v336 = a1 + v335;
  uint64_t v337 = a2 + v335;
  *(void *)uint64_t v336 = *(void *)v337;
  *(_BYTE *)(v336 + 8) = *(_BYTE *)(v337 + 8);
  uint64_t v338 = a3[147];
  uint64_t v339 = a1 + v338;
  uint64_t v340 = a2 + v338;
  *(void *)uint64_t v339 = *(void *)v340;
  *(_BYTE *)(v339 + 8) = *(_BYTE *)(v340 + 8);
  uint64_t v341 = a3[148];
  uint64_t v342 = (void *)(a1 + v341);
  uint64_t v343 = (uint64_t *)(a2 + v341);
  uint64_t v345 = *v343;
  uint64_t v344 = v343[1];
  *uint64_t v342 = v345;
  v342[1] = v344;
  swift_bridgeObjectRelease();
  uint64_t v346 = a3[149];
  uint64_t v347 = a1 + v346;
  uint64_t v348 = a2 + v346;
  *(void *)uint64_t v347 = *(void *)v348;
  *(_BYTE *)(v347 + 8) = *(_BYTE *)(v348 + 8);
  uint64_t v349 = a3[150];
  uint64_t v350 = (void *)(a1 + v349);
  uint64_t v351 = (uint64_t *)(a2 + v349);
  uint64_t v353 = *v351;
  uint64_t v352 = v351[1];
  *uint64_t v350 = v353;
  v350[1] = v352;
  swift_bridgeObjectRelease();
  uint64_t v354 = a3[151];
  uint64_t v355 = a1 + v354;
  uint64_t v356 = a2 + v354;
  *(void *)uint64_t v355 = *(void *)v356;
  *(_BYTE *)(v355 + 8) = *(_BYTE *)(v356 + 8);
  *(void *)(a1 + a3[152]) = *(void *)(a2 + a3[152]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100468F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100468F68);
}

uint64_t sub_100468F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100004AEC(&qword_1009AEED0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 84),  a2,  v8);
  }

uint64_t sub_100468FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100468FF4);
}

uint64_t sub_100468FF4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100004AEC(&qword_1009AEED0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 84),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for ConfigurationResponse(uint64_t a1)
{
  uint64_t result = qword_1009AEF30;
  if (!qword_1009AEF30) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConfigurationResponse);
  }
  return result;
}

void sub_1004690A8(uint64_t a1)
{
  v4[0] = &unk_1008038A8;
  v4[1] = &unk_1008038C0;
  v4[2] = &unk_1008038D8;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[6] = &unk_1008038F0;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[8] = &unk_1008038A8;
  void v4[9] = &unk_100803908;
  v4[10] = &unk_1008038F0;
  v4[11] = &unk_1008038F0;
  v4[12] = &unk_1008038F0;
  v4[13] = &unk_1008038F0;
  v4[14] = &unk_1008038F0;
  v4[15] = &unk_1008038F0;
  v4[16] = &unk_100803920;
  sub_100469348(319LL);
  if (v3 <= 0x3F)
  {
    v4[17] = *(void *)(v2 - 8) + 64LL;
    v4[18] = &unk_1008038F0;
    v4[19] = &unk_1008038F0;
    v4[20] = &unk_1008038F0;
    v4[21] = &unk_1008038F0;
    v4[22] = &unk_1008038F0;
    v4[23] = &unk_1008038F0;
    _BYTE v4[24] = &unk_1008038F0;
    v4[25] = &unk_1008038F0;
    v4[26] = &unk_1008038F0;
    v4[27] = &unk_1008038F0;
    v4[28] = &unk_1008038F0;
    v4[29] = &unk_100803920;
    v4[30] = &unk_1008038F0;
    v4[31] = &unk_1008038F0;
    v4[32] = &unk_1008038F0;
    v4[33] = &unk_100803920;
    v4[34] = &unk_1008038F0;
    v4[35] = &unk_1008038F0;
    v4[36] = &unk_1008038F0;
    v4[37] = &unk_1008038F0;
    v4[38] = &unk_1008038F0;
    v4[39] = &unk_1008038F0;
    v4[40] = &unk_1008038F0;
    v4[41] = &unk_1008038F0;
    v4[42] = &unk_1008038F0;
    v4[43] = &unk_1008038F0;
    v4[44] = &unk_1008038F0;
    v4[45] = &unk_1008038F0;
    v4[46] = &unk_1008038F0;
    v4[47] = &unk_1008038F0;
    v4[48] = &unk_100803920;
    v4[49] = &unk_1008038F0;
    v4[50] = &unk_1008038F0;
    v4[51] = &unk_1008038F0;
    v4[52] = &unk_1008038F0;
    v4[53] = &unk_1008038F0;
    v4[54] = &unk_1008038F0;
    v4[55] = &unk_100803920;
    v4[56] = &unk_100803920;
    v4[57] = &unk_100803938;
    v4[58] = &unk_1008038F0;
    v4[59] = &unk_1008038F0;
    v4[60] = &unk_1008038F0;
    v4[61] = &unk_1008038F0;
    v4[62] = &unk_1008038F0;
    v4[63] = &unk_1008038F0;
    v4[64] = &unk_1008038F0;
    v4[65] = &unk_1008038F0;
    v4[66] = &unk_1008038F0;
    v4[67] = &unk_1008038F0;
    v4[68] = &unk_1008038F0;
    v4[69] = &unk_1008038F0;
    v4[70] = &unk_1008038F0;
    v4[71] = &unk_1008038F0;
    v4[72] = &unk_1008038F0;
    v4[73] = &unk_1008038F0;
    v4[74] = &unk_1008038F0;
    v4[75] = &unk_1008038F0;
    v4[76] = &unk_1008038F0;
    v4[77] = &unk_100803920;
    v4[78] = &unk_100803920;
    v4[79] = &unk_100803920;
    v4[80] = &unk_1008038F0;
    v4[81] = &unk_1008038F0;
    v4[82] = &unk_1008038F0;
    v4[83] = &unk_1008038F0;
    v4[84] = &unk_1008038F0;
    v4[85] = &unk_1008038F0;
    v4[86] = &unk_1008038F0;
    v4[87] = &unk_1008038F0;
    v4[88] = &unk_1008038F0;
    v4[89] = &unk_100803920;
    v4[90] = &unk_1008038F0;
    v4[91] = &unk_1008038F0;
    v4[92] = &unk_1008038F0;
    v4[93] = &unk_100803920;
    v4[94] = &unk_100803920;
    v4[95] = &unk_100803920;
    v4[96] = &unk_1008038F0;
    v4[97] = &unk_1008038F0;
    v4[98] = &unk_1008038F0;
    v4[99] = &unk_1008038F0;
    v4[100] = &unk_100803920;
    v4[101] = &unk_1008038F0;
    v4[102] = &unk_100803908;
    v4[103] = &unk_1008038F0;
    v4[104] = &unk_100803920;
    v4[105] = &unk_100803908;
    v4[106] = &unk_1008038F0;
    v4[107] = &unk_1008038F0;
    v4[108] = &unk_100803920;
    v4[109] = &unk_100803920;
    v4[110] = &unk_1008038F0;
    v4[111] = &unk_1008038F0;
    v4[112] = &unk_1008038F0;
    v4[113] = &unk_1008038F0;
    v4[114] = &unk_1008038F0;
    v4[115] = &unk_1008038F0;
    v4[116] = &unk_1008038F0;
    v4[117] = &unk_1008038F0;
    v4[118] = &unk_1008038F0;
    v4[119] = &unk_1008038F0;
    v4[120] = &unk_1008038F0;
    v4[121] = &unk_1008038F0;
    v4[122] = &unk_1008038F0;
    v4[123] = &unk_1008038F0;
    v4[124] = &unk_1008038F0;
    v4[125] = &unk_1008038F0;
    v4[126] = &unk_1008038F0;
    v4[127] = &unk_1008038F0;
    v4[128] = &unk_100803920;
    v4[129] = &unk_100803920;
    v4[130] = &unk_1008038F0;
    v4[131] = &unk_1008038F0;
    v4[132] = &unk_100803920;
    v4[133] = &unk_100803950;
    v4[134] = &unk_1008038F0;
    v4[135] = &unk_1008038F0;
    v4[136] = &unk_1008038F0;
    v4[137] = &unk_1008038F0;
    v4[138] = &unk_1008038F0;
    v4[139] = &unk_1008038F0;
    v4[140] = &unk_1008038F0;
    v4[141] = &unk_100803920;
    v4[142] = &unk_1008038F0;
    v4[143] = &unk_1008038F0;
    v4[144] = &unk_100803968;
    v4[145] = &unk_1008038F0;
    v4[146] = &unk_100803968;
    v4[147] = &unk_1008038F0;
    v4[148] = &unk_100803908;
    swift_initStructMetadata(a1, 256LL, 149LL, v4, a1 + 16);
  }

void sub_100469348(uint64_t a1)
{
  if (!qword_1009AEF40)
  {
    v4[0] = &type metadata for ServerConfigurableFeature;
    v4[1] = type metadata accessor for FeatureSupportMatrix(255LL);
    v4[2] = sub_100469408();
    v4[3] = sub_10046944C();
    void v4[4] = sub_100469490(&qword_1009AD8D0, (uint64_t)&unk_10080D2BC);
    uint64_t v4[5] = sub_100469490(&qword_1009AD920, (uint64_t)&unk_10080D294);
    unint64_t v2 = type metadata accessor for CustomCodableKeyDictionary(a1, v4);
    if (!v3) {
      atomic_store(v2, (unint64_t *)&qword_1009AEF40);
    }
  }

unint64_t sub_100469408()
{
  unint64_t result = qword_1009AEF48;
  if (!qword_1009AEF48)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D0FC, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1009AEF48);
  }

  return result;
}

unint64_t sub_10046944C()
{
  unint64_t result = qword_1009AEF50;
  if (!qword_1009AEF50)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080D204, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1009AEF50);
  }

  return result;
}

uint64_t sub_100469490(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for FeatureSupportMatrix(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1004694D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100469508 + 4 * word_100803650[a1]))( 0x6F43737574617473LL,  0xEA00000000006564LL);
}

uint64_t sub_100469508()
{
  return 0x7470697263736564LL;
}

unint64_t sub_100469528()
{
  return 0xD000000000000010LL;
}

uint64_t sub_10046A270()
{
  return 0x6E457265646E6966LL;
}

uint64_t sub_10046A294(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_1004694D0(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_1004694D0(v2);
  if (v3 == v6 && v5 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_10046A31C()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  uint64_t v2 = sub_1004694D0(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10046A37C(uint64_t a1)
{
  uint64_t v3 = sub_1004694D0(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_10046A3BC(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  uint64_t v3 = sub_1004694D0(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10046A418@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10046D89C(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10046A444@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1004694D0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10046A46C()
{
  return sub_1004694D0(*v0);
}

uint64_t sub_10046A474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10046D89C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10046A498(_BYTE *a1@<X8>)
{
  *a1 = -107;
}

uint64_t sub_10046A4A4(uint64_t a1)
{
  unint64_t v2 = sub_10046D394();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10046A4CC(uint64_t a1)
{
  unint64_t v2 = sub_10046D394();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10046A4F4(char *a1, char *a2)
{
  return sub_100308090(*a1, *a2);
}

Swift::Int sub_10046A500()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 3158066LL;
  }
  else {
    uint64_t v2 = 0x726F7272456F6ELL;
  }
  if (v1) {
    unint64_t v3 = 0xE300000000000000LL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10046A578(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 3158066LL;
  }
  else {
    uint64_t v2 = 0x726F7272456F6ELL;
  }
  if (*v1) {
    unint64_t v3 = 0xE300000000000000LL;
  }
  else {
    unint64_t v3 = 0xE700000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10046A5CC(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 3158066LL;
  }
  else {
    uint64_t v3 = 0x726F7272456F6ELL;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10046A640@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009364A8, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_10046A69C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 3158066LL;
  if (!*v1) {
    uint64_t v2 = 0x726F7272456F6ELL;
  }
  unint64_t v3 = 0xE700000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10046A6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10046DD10();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10046A730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10046DD10();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10046A77C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v554 = a2;
  uint64_t v3 = sub_100004AEC(&qword_1009AEED0);
  uint64_t v561 = *(void *)(v3 - 8);
  uint64_t v562 = v3;
  __chkstk_darwin(v3);
  v555 = (char *)&v552 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v558 = sub_100004AEC(&qword_1009AF1D0);
  uint64_t v556 = *(void *)(v558 - 8);
  __chkstk_darwin(v558);
  unint64_t v6 = (char *)&v552 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ConfigurationResponse(0LL);
  char v564 = (int *)__chkstk_darwin(v7);
  v565 = (char *)&v552 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v9 = &v565[v564[21]];
  uint64_t v10 = type metadata accessor for FeatureSupportMatrix(0LL);
  unint64_t v11 = sub_100469408();
  unint64_t v12 = sub_10046944C();
  uint64_t v13 = sub_100469490(&qword_1009AD8D0, (uint64_t)&unk_10080D2BC);
  uint64_t v14 = sub_100469490(&qword_1009AD920, (uint64_t)&unk_10080D294);
  v560 = v9;
  CustomCodableKeyDictionary.init(wrappedValue:)( 0LL,  &type metadata for ServerConfigurableFeature,  v10,  v11,  v12,  v13,  v14);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v559 = a1;
  sub_100012ED8(a1, v15);
  unint64_t v17 = sub_10046D394();
  v557 = v6;
  uint64_t v18 = v563;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ConfigurationResponse.CodingKeys,  &type metadata for ConfigurationResponse.CodingKeys,  v17,  v15,  v16);
  uint64_t v563 = v18;
  if (v18) {
    goto LABEL_5;
  }
  uint64_t v19 = v13;
  uint64_t v20 = v555;
  char v567 = 0;
  unint64_t v21 = sub_10046D3D8();
  uint64_t v22 = v563;
  KeyedDecodingContainer.decode<A>(_:forKey:)( v566,  &type metadata for ConfigurationResponse.Status,  &v567,  v558,  &type metadata for ConfigurationResponse.Status,  v21);
  if (v22)
  {
    uint64_t v563 = v22;
    (*(void (**)(char *, uint64_t))(v556 + 8))(v557, v558);
LABEL_5:
    int v24 = 0;
    unint64_t v25 = 0LL;
    unint64_t v26 = 0LL;
    unint64_t v27 = 0x20000LL;
    goto LABEL_6;
  }

  uint64_t v23 = v565;
  char *v565 = v566[0];
  LOBYTE(v566[0]) = 1;
  *((void *)v23 + 1) = KeyedDecodingContainer.decode(_:forKey:)(v566, v558);
  *((void *)v23 + 2) = v34;
  char v567 = 2;
  unint64_t v35 = sub_100016FE0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v566, &type metadata for Data, &v567, v558, &type metadata for Data, v35);
  *(_OWORD *)(v23 + 24) = v566[0];
  LOBYTE(v566[0]) = 3;
  *((double *)v23 + 5) = KeyedDecodingContainer.decode(_:forKey:)(v566, v558);
  LOBYTE(v566[0]) = 4;
  *((double *)v23 + 6) = KeyedDecodingContainer.decode(_:forKey:)(v566, v558);
  LOBYTE(v566[0]) = 5;
  *((double *)v23 + 7) = KeyedDecodingContainer.decode(_:forKey:)(v566, v558);
  LOBYTE(v566[0]) = 6;
  *((void *)v23 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  v23[72] = v36 & 1;
  LOBYTE(v566[0]) = 7;
  uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)(v566, v558);
  uint64_t v563 = 0LL;
  *((void *)v565 + 10) = v37;
  LOBYTE(v566[0]) = 8;
  uint64_t v38 = v563;
  char v39 = KeyedDecodingContainer.decode(_:forKey:)(v566, v558);
  uint64_t v563 = v38;
  if (v38
    || (v565[88] = v39 & 1,
        uint64_t v41 = sub_100004AEC(&qword_1009AED50),
        char v567 = 9,
        uint64_t v42 = sub_10046D41C((unint64_t *)&qword_1009A56C0, &qword_1009AED50),
        uint64_t v43 = v563,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v41, &v567, v558, v41, v42),
        (uint64_t v563 = v43) != 0))
  {
    unint64_t v27 = 131078LL;
    (*(void (**)(char *, uint64_t, __n128))(v556 + 8))(v557, v558, v40);
    int v24 = 0;
    unint64_t v25 = 0LL;
    unint64_t v26 = 0LL;
    goto LABEL_6;
  }

  unint64_t v553 = 0LL;
  unint64_t v27 = 131590LL;
  *((void *)v565 + 12) = *(void *)&v566[0];
  LOBYTE(v566[0]) = 10;
  uint64_t v44 = v563;
  uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v44;
  if (v44) {
    goto LABEL_69;
  }
  uint64_t v47 = v565;
  *((void *)v565 + 13) = v45;
  v47[112] = v46 & 1;
  LOBYTE(v566[0]) = 11;
  uint64_t v48 = v563;
  uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v48;
  if (v48) {
    goto LABEL_69;
  }
  uint64_t v51 = v565;
  *((void *)v565 + 15) = v49;
  v51[128] = v50 & 1;
  LOBYTE(v566[0]) = 12;
  uint64_t v52 = v563;
  uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v52;
  if (v52) {
    goto LABEL_69;
  }
  uint64_t v55 = v565;
  *((void *)v565 + 17) = v53;
  v55[144] = v54 & 1;
  LOBYTE(v566[0]) = 13;
  uint64_t v56 = v563;
  uint64_t v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v56;
  if (v56) {
    goto LABEL_69;
  }
  uint64_t v59 = v565;
  *((void *)v565 + 19) = v57;
  v59[160] = v58 & 1;
  LOBYTE(v566[0]) = 14;
  uint64_t v60 = v563;
  uint64_t v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v60;
  if (v60) {
    goto LABEL_69;
  }
  uint64_t v63 = v565;
  *((void *)v565 + 21) = v61;
  v63[176] = v62 & 1;
  LOBYTE(v566[0]) = 15;
  uint64_t v64 = v563;
  uint64_t v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v64;
  if (v64) {
    goto LABEL_69;
  }
  uint64_t v67 = v565;
  *((void *)v565 + 23) = v65;
  v67[192] = v66 & 1;
  LOBYTE(v566[0]) = 16;
  uint64_t v68 = v563;
  char v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v68;
  if (v68) {
    goto LABEL_69;
  }
  v565[193] = v69;
  LOBYTE(v566[0]) = 17;
  unint64_t v70 = sub_100428010();
  uint64_t v71 = v563;
  KeyedDecodingContainer.decode<A, B>(_:forKey:)( v566,  v558,  &type metadata for ServerConfigurableFeature,  v10,  v11,  v70,  v12,  v19,  v14);
  uint64_t v563 = v71;
  if (v71) {
    goto LABEL_69;
  }
  (*(void (**)(char *, char *, uint64_t))(v561 + 40))(v560, v20, v562);
  LOBYTE(v566[0]) = 18;
  uint64_t v72 = v563;
  uint64_t v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v72;
  if (v72) {
    goto LABEL_69;
  }
  uint64_t v75 = &v565[v564[23]];
  *(void *)uint64_t v75 = v73;
  v75[8] = v74 & 1;
  LOBYTE(v566[0]) = 19;
  uint64_t v76 = v563;
  uint64_t v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v76;
  if (v76) {
    goto LABEL_69;
  }
  uint64_t v79 = &v565[v564[24]];
  *(void *)uint64_t v79 = v77;
  v79[8] = v78 & 1;
  LOBYTE(v566[0]) = 20;
  uint64_t v80 = v563;
  uint64_t v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v80;
  if (v80) {
    goto LABEL_69;
  }
  uint64_t v83 = &v565[v564[25]];
  *(void *)uint64_t v83 = v81;
  v83[8] = v82 & 1;
  LOBYTE(v566[0]) = 21;
  uint64_t v84 = v563;
  uint64_t v85 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v84;
  if (v84) {
    goto LABEL_69;
  }
  uint64_t v87 = &v565[v564[26]];
  *(void *)uint64_t v87 = v85;
  v87[8] = v86 & 1;
  LOBYTE(v566[0]) = 22;
  uint64_t v88 = v563;
  uint64_t v89 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v88;
  if (v88) {
    goto LABEL_69;
  }
  uint64_t v91 = &v565[v564[27]];
  *(void *)uint64_t v91 = v89;
  v91[8] = v90 & 1;
  LOBYTE(v566[0]) = 23;
  uint64_t v92 = v563;
  uint64_t v93 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v92;
  if (v92) {
    goto LABEL_69;
  }
  uint64_t v95 = &v565[v564[28]];
  *(void *)uint64_t v95 = v93;
  v95[8] = v94 & 1;
  LOBYTE(v566[0]) = 24;
  uint64_t v96 = v563;
  uint64_t v97 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v96;
  if (v96) {
    goto LABEL_69;
  }
  uint64_t v99 = &v565[v564[29]];
  *(void *)uint64_t v99 = v97;
  v99[8] = v98 & 1;
  LOBYTE(v566[0]) = 25;
  uint64_t v100 = v563;
  uint64_t v101 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v100;
  if (v100) {
    goto LABEL_69;
  }
  uint64_t v103 = &v565[v564[30]];
  *(void *)uint64_t v103 = v101;
  v103[8] = v102 & 1;
  LOBYTE(v566[0]) = 26;
  uint64_t v104 = v563;
  uint64_t v105 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v104;
  if (v104) {
    goto LABEL_69;
  }
  uint64_t v107 = &v565[v564[31]];
  *(void *)uint64_t v107 = v105;
  v107[8] = v106 & 1;
  LOBYTE(v566[0]) = 27;
  uint64_t v108 = v563;
  uint64_t v109 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v108;
  if (v108) {
    goto LABEL_69;
  }
  uint64_t v111 = &v565[v564[32]];
  *(void *)uint64_t v111 = v109;
  v111[8] = v110 & 1;
  LOBYTE(v566[0]) = 28;
  uint64_t v112 = v563;
  char v113 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v112;
  if (v112) {
    goto LABEL_69;
  }
  v565[v564[33]] = v113;
  LOBYTE(v566[0]) = 29;
  uint64_t v114 = v563;
  uint64_t v115 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v114;
  if (v114) {
    goto LABEL_69;
  }
  uint64_t v117 = &v565[v564[34]];
  *(void *)uint64_t v117 = v115;
  v117[8] = v116 & 1;
  LOBYTE(v566[0]) = 30;
  uint64_t v118 = v563;
  uint64_t v119 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v118;
  if (v118) {
    goto LABEL_69;
  }
  uint64_t v121 = &v565[v564[35]];
  *(void *)uint64_t v121 = v119;
  v121[8] = v120 & 1;
  LOBYTE(v566[0]) = 31;
  uint64_t v122 = v563;
  uint64_t v123 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v122;
  if (v122) {
    goto LABEL_69;
  }
  __int128 v125 = &v565[v564[36]];
  *(void *)__int128 v125 = v123;
  v125[8] = v124 & 1;
  LOBYTE(v566[0]) = 32;
  uint64_t v126 = v563;
  char v127 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v126;
  if (v126) {
    goto LABEL_69;
  }
  v565[v564[37]] = v127;
  LOBYTE(v566[0]) = 33;
  uint64_t v128 = v563;
  uint64_t v129 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v128;
  if (v128) {
    goto LABEL_69;
  }
  uint64_t v131 = &v565[v564[38]];
  *(void *)uint64_t v131 = v129;
  v131[8] = v130 & 1;
  LOBYTE(v566[0]) = 34;
  uint64_t v132 = v563;
  uint64_t v133 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v132;
  if (v132) {
    goto LABEL_69;
  }
  uint64_t v135 = &v565[v564[39]];
  *(void *)uint64_t v135 = v133;
  v135[8] = v134 & 1;
  LOBYTE(v566[0]) = 35;
  uint64_t v136 = v563;
  uint64_t v137 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v136;
  if (v136) {
    goto LABEL_69;
  }
  uint64_t v139 = &v565[v564[40]];
  *(void *)uint64_t v139 = v137;
  v139[8] = v138 & 1;
  LOBYTE(v566[0]) = 36;
  uint64_t v140 = v563;
  uint64_t v141 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v140;
  if (v140) {
    goto LABEL_69;
  }
  uint64_t v143 = &v565[v564[41]];
  *(void *)uint64_t v143 = v141;
  v143[8] = v142 & 1;
  LOBYTE(v566[0]) = 37;
  uint64_t v144 = v563;
  uint64_t v145 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v144;
  if (v144) {
    goto LABEL_69;
  }
  uint64_t v147 = &v565[v564[42]];
  *(void *)uint64_t v147 = v145;
  v147[8] = v146 & 1;
  LOBYTE(v566[0]) = 38;
  uint64_t v148 = v563;
  uint64_t v149 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v148;
  if (v148) {
    goto LABEL_69;
  }
  uint64_t v151 = &v565[v564[43]];
  *(void *)uint64_t v151 = v149;
  v151[8] = v150 & 1;
  LOBYTE(v566[0]) = 39;
  uint64_t v152 = v563;
  uint64_t v153 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v152;
  if (v152) {
    goto LABEL_69;
  }
  uint64_t v155 = &v565[v564[44]];
  *(void *)uint64_t v155 = v153;
  v155[8] = v154 & 1;
  LOBYTE(v566[0]) = 40;
  uint64_t v156 = v563;
  uint64_t v157 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v156;
  if (v156) {
    goto LABEL_69;
  }
  uint64_t v159 = &v565[v564[45]];
  *(void *)uint64_t v159 = v157;
  v159[8] = v158 & 1;
  LOBYTE(v566[0]) = 41;
  uint64_t v160 = v563;
  uint64_t v161 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v160;
  if (v160) {
    goto LABEL_69;
  }
  uint64_t v163 = &v565[v564[46]];
  *(void *)uint64_t v163 = v161;
  v163[8] = v162 & 1;
  LOBYTE(v566[0]) = 42;
  uint64_t v164 = v563;
  uint64_t v165 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v164;
  if (v164) {
    goto LABEL_69;
  }
  uint64_t v167 = &v565[v564[22]];
  *(void *)uint64_t v167 = v165;
  char v167[8] = v166 & 1;
  LOBYTE(v566[0]) = 43;
  uint64_t v168 = v563;
  uint64_t v169 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v168;
  if (v168) {
    goto LABEL_69;
  }
  uint64_t v171 = &v565[v564[47]];
  *(void *)uint64_t v171 = v169;
  v171[8] = v170 & 1;
  LOBYTE(v566[0]) = 44;
  uint64_t v172 = v563;
  uint64_t v173 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v172;
  if (v172) {
    goto LABEL_69;
  }
  uint64_t v175 = &v565[v564[48]];
  *(void *)uint64_t v175 = v173;
  v175[8] = v174 & 1;
  LOBYTE(v566[0]) = 45;
  uint64_t v176 = v563;
  uint64_t v177 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v176;
  if (v176) {
    goto LABEL_69;
  }
  uint64_t v179 = &v565[v564[49]];
  *(void *)uint64_t v179 = v177;
  v179[8] = v178 & 1;
  LOBYTE(v566[0]) = 46;
  uint64_t v180 = v563;
  uint64_t v181 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v180;
  if (v180) {
    goto LABEL_69;
  }
  uint64_t v183 = &v565[v564[50]];
  *(void *)uint64_t v183 = v181;
  v183[8] = v182 & 1;
  LOBYTE(v566[0]) = 47;
  uint64_t v184 = v563;
  uint64_t v185 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v184;
  if (v184) {
    goto LABEL_69;
  }
  char v187 = &v565[v564[51]];
  *(void *)char v187 = v185;
  v187[8] = v186 & 1;
  LOBYTE(v566[0]) = 48;
  uint64_t v188 = v563;
  char v189 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v188;
  if (v188) {
    goto LABEL_69;
  }
  v565[v564[52]] = v189;
  LOBYTE(v566[0]) = 49;
  uint64_t v190 = v563;
  uint64_t v191 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v190;
  if (v190) {
    goto LABEL_69;
  }
  uint64_t v193 = &v565[v564[53]];
  *(void *)uint64_t v193 = v191;
  v193[8] = v192 & 1;
  LOBYTE(v566[0]) = 50;
  uint64_t v194 = v563;
  uint64_t v195 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v194;
  if (v194) {
    goto LABEL_69;
  }
  uint64_t v197 = &v565[v564[54]];
  *(void *)uint64_t v197 = v195;
  v197[8] = v196 & 1;
  LOBYTE(v566[0]) = 51;
  uint64_t v198 = v563;
  uint64_t v199 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v198;
  if (v198) {
    goto LABEL_69;
  }
  uint64_t v201 = &v565[v564[55]];
  *(void *)uint64_t v201 = v199;
  v201[8] = v200 & 1;
  LOBYTE(v566[0]) = 52;
  uint64_t v202 = v563;
  uint64_t v203 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v202;
  if (v202) {
    goto LABEL_69;
  }
  uint64_t v205 = &v565[v564[56]];
  *(void *)uint64_t v205 = v203;
  v205[8] = v204 & 1;
  LOBYTE(v566[0]) = 53;
  uint64_t v206 = v563;
  uint64_t v207 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v206;
  if (v206) {
    goto LABEL_69;
  }
  uint64_t v209 = &v565[v564[57]];
  *(void *)uint64_t v209 = v207;
  v209[8] = v208 & 1;
  LOBYTE(v566[0]) = 54;
  uint64_t v210 = v563;
  uint64_t v211 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v210;
  if (v210) {
    goto LABEL_69;
  }
  uint64_t v213 = &v565[v564[58]];
  *(void *)uint64_t v213 = v211;
  v213[8] = v212 & 1;
  LOBYTE(v566[0]) = 55;
  uint64_t v214 = v563;
  char v215 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v214;
  if (v214) {
    goto LABEL_69;
  }
  v565[v564[59]] = v215;
  LOBYTE(v566[0]) = 56;
  uint64_t v216 = v563;
  char v217 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v216;
  if (v216
    || (v565[v564[60]] = v217,
        char v567 = 57,
        unint64_t v218 = sub_1004280D8(),
        uint64_t v219 = v563,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for AllMacBeaconConfigs,  &v567,  v558,  &type metadata for AllMacBeaconConfigs,  v218),  (uint64_t v563 = v219) != 0))
  {
LABEL_69:
    (*(void (**)(char *, uint64_t))(v556 + 8))(v557, v558);
    int v24 = 0;
    unint64_t v25 = v553;
    unint64_t v26 = v553;
    goto LABEL_6;
  }

  unint64_t v26 = 0LL;
  unint64_t v27 = 0x200000000020206LL;
  uint64_t v220 = &v565[v564[61]];
  __int128 v221 = v566[1];
  *(_OWORD *)uint64_t v220 = v566[0];
  *((_OWORD *)v220 + 1) = v221;
  __int128 v222 = v566[3];
  *((_OWORD *)v220 + 2) = v566[2];
  *((_OWORD *)v220 + 3) = v222;
  __int128 v223 = v566[5];
  *((_OWORD *)v220 + 4) = v566[4];
  *((_OWORD *)v220 + 5) = v223;
  *((_OWORD *)v220 + 6) = v566[6];
  LOBYTE(v566[0]) = 58;
  uint64_t v224 = v563;
  uint64_t v225 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v224;
  if (v224) {
    goto LABEL_115;
  }
  uint64_t v227 = &v565[v564[62]];
  *(void *)uint64_t v227 = v225;
  os_log_type_t v227[8] = v226 & 1;
  LOBYTE(v566[0]) = 59;
  uint64_t v228 = v563;
  uint64_t v229 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v228;
  if (v228) {
    goto LABEL_115;
  }
  uint64_t v231 = &v565[v564[63]];
  *(void *)uint64_t v231 = v229;
  v231[8] = v230 & 1;
  LOBYTE(v566[0]) = 60;
  uint64_t v232 = v563;
  uint64_t v233 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v232;
  if (v232) {
    goto LABEL_115;
  }
  uint64_t v235 = &v565[v564[64]];
  *(void *)uint64_t v235 = v233;
  v235[8] = v234 & 1;
  LOBYTE(v566[0]) = 61;
  uint64_t v236 = v563;
  uint64_t v237 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v236;
  if (v236) {
    goto LABEL_115;
  }
  uint64_t v239 = &v565[v564[65]];
  *(void *)uint64_t v239 = v237;
  v239[8] = v238 & 1;
  LOBYTE(v566[0]) = 62;
  uint64_t v240 = v563;
  uint64_t v241 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v240;
  if (v240) {
    goto LABEL_115;
  }
  uint64_t v243 = &v565[v564[66]];
  *(void *)uint64_t v243 = v241;
  v243[8] = v242 & 1;
  LOBYTE(v566[0]) = 63;
  uint64_t v244 = v563;
  uint64_t v245 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v244;
  if (v244) {
    goto LABEL_115;
  }
  uint64_t v247 = &v565[v564[67]];
  *(void *)uint64_t v247 = v245;
  v247[8] = v246 & 1;
  LOBYTE(v566[0]) = 64;
  uint64_t v248 = v563;
  uint64_t v249 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v248;
  if (v248) {
    goto LABEL_115;
  }
  uint64_t v251 = &v565[v564[68]];
  *(void *)uint64_t v251 = v249;
  v251[8] = v250 & 1;
  LOBYTE(v566[0]) = 65;
  uint64_t v252 = v563;
  uint64_t v253 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v252;
  if (v252) {
    goto LABEL_115;
  }
  uint64_t v255 = &v565[v564[69]];
  *(void *)uint64_t v255 = v253;
  v255[8] = v254 & 1;
  LOBYTE(v566[0]) = 66;
  uint64_t v256 = v563;
  uint64_t v257 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v256;
  if (v256) {
    goto LABEL_115;
  }
  uint64_t v259 = &v565[v564[70]];
  *(void *)uint64_t v259 = v257;
  v259[8] = v258 & 1;
  LOBYTE(v566[0]) = 67;
  uint64_t v260 = v563;
  uint64_t v261 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v260;
  if (v260) {
    goto LABEL_115;
  }
  uint64_t v263 = &v565[v564[71]];
  *(void *)uint64_t v263 = v261;
  v263[8] = v262 & 1;
  LOBYTE(v566[0]) = 68;
  uint64_t v264 = v563;
  uint64_t v265 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v264;
  if (v264) {
    goto LABEL_115;
  }
  uint64_t v267 = &v565[v564[72]];
  *(void *)uint64_t v267 = v265;
  v267[8] = v266 & 1;
  LOBYTE(v566[0]) = 69;
  uint64_t v268 = v563;
  uint64_t v269 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v268;
  if (v268) {
    goto LABEL_115;
  }
  uint64_t v271 = &v565[v564[73]];
  *(void *)uint64_t v271 = v269;
  v271[8] = v270 & 1;
  LOBYTE(v566[0]) = 70;
  uint64_t v272 = v563;
  uint64_t v273 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v272;
  if (v272) {
    goto LABEL_115;
  }
  uint64_t v275 = &v565[v564[74]];
  *(void *)uint64_t v275 = v273;
  v275[8] = v274 & 1;
  LOBYTE(v566[0]) = 71;
  uint64_t v276 = v563;
  uint64_t v277 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v276;
  if (v276) {
    goto LABEL_115;
  }
  uint64_t v279 = &v565[v564[75]];
  *(void *)uint64_t v279 = v277;
  v279[8] = v278 & 1;
  LOBYTE(v566[0]) = 72;
  uint64_t v280 = v563;
  uint64_t v281 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v280;
  if (v280) {
    goto LABEL_115;
  }
  uint64_t v283 = &v565[v564[76]];
  *(void *)uint64_t v283 = v281;
  v283[8] = v282 & 1;
  LOBYTE(v566[0]) = 73;
  uint64_t v284 = v563;
  uint64_t v285 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v284;
  if (v284) {
    goto LABEL_115;
  }
  uint64_t v287 = &v565[v564[77]];
  *(void *)uint64_t v287 = v285;
  v287[8] = v286 & 1;
  LOBYTE(v566[0]) = 74;
  uint64_t v288 = v563;
  uint64_t v289 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v288;
  if (v288) {
    goto LABEL_115;
  }
  uint64_t v291 = &v565[v564[78]];
  *(void *)uint64_t v291 = v289;
  v291[8] = v290 & 1;
  LOBYTE(v566[0]) = 75;
  uint64_t v292 = v563;
  uint64_t v293 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v292;
  if (v292) {
    goto LABEL_115;
  }
  uint64_t v295 = &v565[v564[79]];
  *(void *)uint64_t v295 = v293;
  v295[8] = v294 & 1;
  LOBYTE(v566[0]) = 76;
  uint64_t v296 = v563;
  uint64_t v297 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v296;
  if (v296) {
    goto LABEL_115;
  }
  uint64_t v299 = &v565[v564[80]];
  *(void *)uint64_t v299 = v297;
  v299[8] = v298 & 1;
  LOBYTE(v566[0]) = 77;
  uint64_t v300 = v563;
  char v301 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v300;
  if (v300) {
    goto LABEL_115;
  }
  v565[v564[81]] = v301;
  LOBYTE(v566[0]) = 78;
  uint64_t v302 = v563;
  char v303 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v302;
  if (v302) {
    goto LABEL_115;
  }
  v565[v564[82]] = v303;
  LOBYTE(v566[0]) = 79;
  uint64_t v304 = v563;
  char v305 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v304;
  if (v304) {
    goto LABEL_115;
  }
  v565[v564[83]] = v305;
  LOBYTE(v566[0]) = 80;
  uint64_t v306 = v563;
  uint64_t v307 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v306;
  if (v306) {
    goto LABEL_115;
  }
  uint64_t v309 = &v565[v564[84]];
  *(void *)uint64_t v309 = v307;
  v309[8] = v308 & 1;
  LOBYTE(v566[0]) = 81;
  uint64_t v310 = v563;
  uint64_t v311 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v310;
  if (v310) {
    goto LABEL_115;
  }
  uint64_t v313 = &v565[v564[85]];
  *(void *)uint64_t v313 = v311;
  v313[8] = v312 & 1;
  LOBYTE(v566[0]) = 82;
  uint64_t v314 = v563;
  uint64_t v315 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v314;
  if (v314) {
    goto LABEL_115;
  }
  uint64_t v317 = &v565[v564[86]];
  *(void *)uint64_t v317 = v315;
  v317[8] = v316 & 1;
  LOBYTE(v566[0]) = 83;
  uint64_t v318 = v563;
  uint64_t v319 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v318;
  if (v318) {
    goto LABEL_115;
  }
  uint64_t v321 = &v565[v564[87]];
  *(void *)uint64_t v321 = v319;
  v321[8] = v320 & 1;
  LOBYTE(v566[0]) = 84;
  uint64_t v322 = v563;
  uint64_t v323 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v322;
  if (v322) {
    goto LABEL_115;
  }
  uint64_t v325 = &v565[v564[88]];
  *(void *)uint64_t v325 = v323;
  v325[8] = v324 & 1;
  LOBYTE(v566[0]) = 85;
  uint64_t v326 = v563;
  uint64_t v327 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v326;
  if (v326) {
    goto LABEL_115;
  }
  uint64_t v329 = &v565[v564[89]];
  *(void *)uint64_t v329 = v327;
  v329[8] = v328 & 1;
  LOBYTE(v566[0]) = 86;
  uint64_t v330 = v563;
  uint64_t v331 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v330;
  if (v330) {
    goto LABEL_115;
  }
  uint64_t v333 = &v565[v564[90]];
  *(void *)uint64_t v333 = v331;
  v333[8] = v332 & 1;
  LOBYTE(v566[0]) = 87;
  uint64_t v334 = v563;
  uint64_t v335 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v334;
  if (v334) {
    goto LABEL_115;
  }
  uint64_t v337 = &v565[v564[91]];
  *(void *)uint64_t v337 = v335;
  v337[8] = v336 & 1;
  LOBYTE(v566[0]) = 88;
  uint64_t v338 = v563;
  uint64_t v339 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v338;
  if (v338) {
    goto LABEL_115;
  }
  uint64_t v341 = &v565[v564[92]];
  *(void *)uint64_t v341 = v339;
  v341[8] = v340 & 1;
  LOBYTE(v566[0]) = 89;
  uint64_t v342 = v563;
  char v343 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v342;
  if (v342) {
    goto LABEL_115;
  }
  v565[v564[93]] = v343;
  LOBYTE(v566[0]) = 90;
  uint64_t v344 = v563;
  uint64_t v345 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v344;
  if (v344) {
    goto LABEL_115;
  }
  uint64_t v347 = &v565[v564[94]];
  *(void *)uint64_t v347 = v345;
  v347[8] = v346 & 1;
  LOBYTE(v566[0]) = 91;
  uint64_t v348 = v563;
  uint64_t v349 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v348;
  if (v348) {
    goto LABEL_115;
  }
  uint64_t v351 = &v565[v564[95]];
  *(void *)uint64_t v351 = v349;
  v351[8] = v350 & 1;
  LOBYTE(v566[0]) = 92;
  uint64_t v352 = v563;
  uint64_t v353 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v352;
  if (v352) {
    goto LABEL_115;
  }
  uint64_t v355 = &v565[v564[96]];
  *(void *)uint64_t v355 = v353;
  v355[8] = v354 & 1;
  LOBYTE(v566[0]) = 93;
  uint64_t v356 = v563;
  char v357 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v356;
  if (v356) {
    goto LABEL_115;
  }
  v565[v564[97]] = v357;
  LOBYTE(v566[0]) = 94;
  uint64_t v358 = v563;
  char v359 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v358;
  if (v358) {
    goto LABEL_115;
  }
  v565[v564[98]] = v359;
  LOBYTE(v566[0]) = 95;
  uint64_t v360 = v563;
  char v361 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v360;
  if (v360) {
    goto LABEL_115;
  }
  v565[v564[99]] = v361;
  LOBYTE(v566[0]) = 96;
  uint64_t v362 = v563;
  uint64_t v363 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v362;
  if (v362) {
    goto LABEL_115;
  }
  uint64_t v365 = &v565[v564[100]];
  *(void *)uint64_t v365 = v363;
  v365[8] = v364 & 1;
  LOBYTE(v566[0]) = 97;
  uint64_t v366 = v563;
  uint64_t v367 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v366;
  if (v366) {
    goto LABEL_115;
  }
  uint64_t v369 = &v565[v564[101]];
  *(void *)uint64_t v369 = v367;
  v369[8] = v368 & 1;
  LOBYTE(v566[0]) = 98;
  uint64_t v370 = v563;
  uint64_t v371 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v370;
  if (v370) {
    goto LABEL_115;
  }
  uint64_t v373 = &v565[v564[102]];
  *(void *)uint64_t v373 = v371;
  v373[8] = v372 & 1;
  LOBYTE(v566[0]) = 99;
  uint64_t v374 = v563;
  uint64_t v375 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v374;
  if (v374) {
    goto LABEL_115;
  }
  uint64_t v377 = &v565[v564[103]];
  *(void *)uint64_t v377 = v375;
  v377[8] = v376 & 1;
  LOBYTE(v566[0]) = 100;
  uint64_t v378 = v563;
  char v379 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v378;
  if (v378) {
    goto LABEL_115;
  }
  v565[v564[104]] = v379;
  LOBYTE(v566[0]) = 101;
  uint64_t v380 = v563;
  uint64_t v381 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v380;
  if (v380) {
    goto LABEL_115;
  }
  uint64_t v383 = &v565[v564[105]];
  *(void *)uint64_t v383 = v381;
  v383[8] = v382 & 1;
  uint64_t v384 = sub_100004AEC(&qword_10099D5E0);
  char v567 = 102;
  uint64_t v385 = sub_10046D41C(&qword_1009A1D60, &qword_10099D5E0);
  uint64_t v386 = v563;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v384, &v567, v558, v384, v385);
  uint64_t v563 = v386;
  if (v386)
  {
LABEL_115:
    (*(void (**)(char *, uint64_t))(v556 + 8))(v557, v558);
    int v24 = 0;
    unint64_t v25 = 0LL;
    goto LABEL_6;
  }

  unint64_t v26 = 0LL;
  *(void *)&v565[v564[106]] = *(void *)&v566[0];
  LOBYTE(v566[0]) = 103;
  uint64_t v387 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = 0LL;
  uint64_t v388 = &v565[v564[107]];
  *(void *)uint64_t v388 = v387;
  v388[8] = v389 & 1;
  LOBYTE(v566[0]) = 104;
  uint64_t v390 = v563;
  char v391 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v390;
  if (v390
    || (v565[v564[108]] = v391,
        uint64_t v392 = sub_100004AEC(&qword_10099D5C8),
        char v567 = 105,
        unint64_t v393 = sub_10046D470(),
        uint64_t v394 = v563,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v392, &v567, v558, v392, v393),
        (uint64_t v563 = v394) != 0))
  {
    (*(void (**)(char *, uint64_t))(v556 + 8))(v557, v558);
    int v24 = 0;
    unint64_t v25 = 0x4000000000LL;
    goto LABEL_6;
  }

  unint64_t v26 = 0LL;
  *(void *)&v565[v564[109]] = *(void *)&v566[0];
  LOBYTE(v566[0]) = 106;
  uint64_t v395 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = 0LL;
  uint64_t v396 = &v565[v564[110]];
  *(void *)uint64_t v396 = v395;
  v396[8] = v397 & 1;
  LOBYTE(v566[0]) = 107;
  uint64_t v398 = v563;
  uint64_t v399 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v398;
  if (v398) {
    goto LABEL_159;
  }
  uint64_t v401 = &v565[v564[111]];
  *(void *)uint64_t v401 = v399;
  v401[8] = v400 & 1;
  LOBYTE(v566[0]) = 108;
  uint64_t v402 = v563;
  char v403 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v402;
  if (v402) {
    goto LABEL_159;
  }
  v565[v564[112]] = v403;
  LOBYTE(v566[0]) = 109;
  uint64_t v404 = v563;
  char v405 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v404;
  if (v404) {
    goto LABEL_159;
  }
  v565[v564[113]] = v405;
  LOBYTE(v566[0]) = 110;
  uint64_t v406 = v563;
  uint64_t v407 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v406;
  if (v406) {
    goto LABEL_159;
  }
  uint64_t v409 = &v565[v564[114]];
  *(void *)uint64_t v409 = v407;
  v409[8] = v408 & 1;
  LOBYTE(v566[0]) = 111;
  uint64_t v410 = v563;
  uint64_t v411 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v410;
  if (v410) {
    goto LABEL_159;
  }
  uint64_t v413 = &v565[v564[115]];
  *(void *)uint64_t v413 = v411;
  v413[8] = v412 & 1;
  LOBYTE(v566[0]) = 112;
  uint64_t v414 = v563;
  uint64_t v415 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v414;
  if (v414) {
    goto LABEL_159;
  }
  uint64_t v417 = &v565[v564[116]];
  *(void *)uint64_t v417 = v415;
  v417[8] = v416 & 1;
  LOBYTE(v566[0]) = 113;
  uint64_t v418 = v563;
  uint64_t v419 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v418;
  if (v418) {
    goto LABEL_159;
  }
  uint64_t v421 = &v565[v564[117]];
  *(void *)uint64_t v421 = v419;
  v421[8] = v420 & 1;
  LOBYTE(v566[0]) = 114;
  uint64_t v422 = v563;
  uint64_t v423 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v422;
  if (v422) {
    goto LABEL_159;
  }
  uint64_t v425 = &v565[v564[118]];
  *(void *)uint64_t v425 = v423;
  v425[8] = v424 & 1;
  LOBYTE(v566[0]) = 115;
  uint64_t v426 = v563;
  uint64_t v427 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v426;
  if (v426) {
    goto LABEL_159;
  }
  uint64_t v429 = &v565[v564[119]];
  *(void *)uint64_t v429 = v427;
  v429[8] = v428 & 1;
  LOBYTE(v566[0]) = 116;
  uint64_t v430 = v563;
  uint64_t v431 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v430;
  if (v430) {
    goto LABEL_159;
  }
  uint64_t v433 = &v565[v564[120]];
  *(void *)uint64_t v433 = v431;
  v433[8] = v432 & 1;
  LOBYTE(v566[0]) = 117;
  uint64_t v434 = v563;
  uint64_t v435 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v434;
  if (v434) {
    goto LABEL_159;
  }
  uint64_t v437 = &v565[v564[121]];
  *(void *)uint64_t v437 = v435;
  v437[8] = v436 & 1;
  LOBYTE(v566[0]) = 118;
  uint64_t v438 = v563;
  uint64_t v439 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v438;
  if (v438) {
    goto LABEL_159;
  }
  uint64_t v441 = &v565[v564[122]];
  *(void *)uint64_t v441 = v439;
  v441[8] = v440 & 1;
  LOBYTE(v566[0]) = 119;
  uint64_t v442 = v563;
  uint64_t v443 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v442;
  if (v442) {
    goto LABEL_159;
  }
  uint64_t v445 = &v565[v564[123]];
  *(void *)uint64_t v445 = v443;
  v445[8] = v444 & 1;
  LOBYTE(v566[0]) = 120;
  uint64_t v446 = v563;
  uint64_t v447 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v446;
  if (v446) {
    goto LABEL_159;
  }
  uint64_t v449 = &v565[v564[124]];
  *(void *)uint64_t v449 = v447;
  v449[8] = v448 & 1;
  LOBYTE(v566[0]) = 121;
  uint64_t v450 = v563;
  uint64_t v451 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v450;
  if (v450) {
    goto LABEL_159;
  }
  uint64_t v453 = &v565[v564[125]];
  *(void *)uint64_t v453 = v451;
  v453[8] = v452 & 1;
  LOBYTE(v566[0]) = 122;
  uint64_t v454 = v563;
  uint64_t v455 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v454;
  if (v454) {
    goto LABEL_159;
  }
  uint64_t v457 = &v565[v564[126]];
  *(void *)uint64_t v457 = v455;
  v457[8] = v456 & 1;
  LOBYTE(v566[0]) = 123;
  uint64_t v458 = v563;
  uint64_t v459 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v458;
  if (v458) {
    goto LABEL_159;
  }
  uint64_t v461 = &v565[v564[127]];
  *(void *)uint64_t v461 = v459;
  v461[8] = v460 & 1;
  LOBYTE(v566[0]) = 124;
  uint64_t v462 = v563;
  uint64_t v463 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v462;
  if (v462) {
    goto LABEL_159;
  }
  uint64_t v465 = &v565[v564[128]];
  *(void *)uint64_t v465 = v463;
  v465[8] = v464 & 1;
  LOBYTE(v566[0]) = 125;
  uint64_t v466 = v563;
  uint64_t v467 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v466;
  if (v466) {
    goto LABEL_159;
  }
  uint64_t v469 = &v565[v564[129]];
  *(void *)uint64_t v469 = v467;
  v469[8] = v468 & 1;
  LOBYTE(v566[0]) = 126;
  uint64_t v470 = v563;
  uint64_t v471 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v470;
  if (v470) {
    goto LABEL_159;
  }
  uint64_t v473 = &v565[v564[130]];
  *(void *)uint64_t v473 = v471;
  v473[8] = v472 & 1;
  LOBYTE(v566[0]) = 127;
  uint64_t v474 = v563;
  uint64_t v475 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v474;
  if (v474) {
    goto LABEL_159;
  }
  uint64_t v477 = &v565[v564[131]];
  *(void *)uint64_t v477 = v475;
  v477[8] = v476 & 1;
  LOBYTE(v566[0]) = 0x80;
  uint64_t v478 = v563;
  char v479 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v478;
  if (v478) {
    goto LABEL_159;
  }
  v565[v564[132]] = v479;
  LOBYTE(v566[0]) = -127;
  uint64_t v480 = v563;
  char v481 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v480;
  if (v480) {
    goto LABEL_159;
  }
  v565[v564[133]] = v481;
  LOBYTE(v566[0]) = -126;
  uint64_t v482 = v563;
  uint64_t v483 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v482;
  if (v482) {
    goto LABEL_159;
  }
  char v485 = &v565[v564[134]];
  *(void *)char v485 = v483;
  v485[8] = v484 & 1;
  LOBYTE(v566[0]) = -125;
  uint64_t v486 = v563;
  uint64_t v487 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v486;
  if (v486) {
    goto LABEL_159;
  }
  v489 = &v565[v564[135]];
  *(void *)v489 = v487;
  v489[8] = v488 & 1;
  LOBYTE(v566[0]) = -124;
  uint64_t v490 = v563;
  char v491 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v490;
  if (v490) {
    goto LABEL_159;
  }
  v565[v564[136]] = v491;
  LOBYTE(v566[0]) = -123;
  uint64_t v492 = v563;
  uint64_t v493 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v492;
  if (v492) {
    goto LABEL_159;
  }
  v494 = &v565[v564[137]];
  *(_DWORD *)v494 = v493;
  v494[4] = BYTE4(v493) & 1;
  LOBYTE(v566[0]) = -122;
  uint64_t v495 = v563;
  uint64_t v496 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v495;
  if (v495) {
    goto LABEL_159;
  }
  uint64_t v498 = &v565[v564[138]];
  *(void *)uint64_t v498 = v496;
  v498[8] = v497 & 1;
  LOBYTE(v566[0]) = -121;
  uint64_t v499 = v563;
  uint64_t v500 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v499;
  if (v499) {
    goto LABEL_159;
  }
  uint64_t v502 = &v565[v564[139]];
  *(void *)uint64_t v502 = v500;
  v502[8] = v501 & 1;
  LOBYTE(v566[0]) = -120;
  uint64_t v503 = v563;
  uint64_t v504 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v503;
  if (v503) {
    goto LABEL_159;
  }
  uint64_t v506 = &v565[v564[140]];
  *(void *)uint64_t v506 = v504;
  v506[8] = v505 & 1;
  LOBYTE(v566[0]) = -119;
  uint64_t v507 = v563;
  uint64_t v508 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v507;
  if (v507) {
    goto LABEL_159;
  }
  uint64_t v510 = &v565[v564[141]];
  *(void *)uint64_t v510 = v508;
  v510[8] = v509 & 1;
  LOBYTE(v566[0]) = -118;
  uint64_t v511 = v563;
  uint64_t v512 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v511;
  if (v511) {
    goto LABEL_159;
  }
  int v514 = &v565[v564[142]];
  *(void *)int v514 = v512;
  v514[8] = v513 & 1;
  LOBYTE(v566[0]) = -117;
  uint64_t v515 = v563;
  uint64_t v516 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v515;
  if (v515) {
    goto LABEL_159;
  }
  v518 = &v565[v564[143]];
  *(void *)v518 = v516;
  v518[8] = v517 & 1;
  LOBYTE(v566[0]) = -116;
  uint64_t v519 = v563;
  uint64_t v520 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v519;
  if (v519) {
    goto LABEL_159;
  }
  char v522 = &v565[v564[144]];
  *(void *)char v522 = v520;
  v522[8] = v521 & 1;
  LOBYTE(v566[0]) = -115;
  uint64_t v523 = v563;
  char v524 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v523;
  if (v523) {
    goto LABEL_159;
  }
  v565[v564[145]] = v524;
  LOBYTE(v566[0]) = -114;
  uint64_t v525 = v563;
  uint64_t v526 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v525;
  if (v525) {
    goto LABEL_159;
  }
  v528 = &v565[v564[146]];
  *(void *)v528 = v526;
  v528[8] = v527 & 1;
  LOBYTE(v566[0]) = -113;
  uint64_t v529 = v563;
  uint64_t v530 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v529;
  if (v529) {
    goto LABEL_159;
  }
  char v532 = &v565[v564[147]];
  *(void *)char v532 = v530;
  v532[8] = v531 & 1;
  LOBYTE(v566[0]) = -112;
  uint64_t v533 = v563;
  uint64_t v534 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v533;
  if (v533) {
    goto LABEL_159;
  }
  unint64_t v26 = 0x10000LL;
  v536 = (uint64_t *)&v565[v564[148]];
  uint64_t *v536 = v534;
  v536[1] = v535;
  LOBYTE(v566[0]) = -111;
  uint64_t v537 = v563;
  uint64_t v538 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v537;
  if (v537
    || (uint64_t v540 = &v565[v564[149]],
        *(void *)uint64_t v540 = v538,
        v540[8] = v539 & 1,
        LOBYTE(v566[0]) = -110,
        uint64_t v541 = v563,
        uint64_t v542 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558),
        (uint64_t v563 = v541) != 0))
  {
LABEL_159:
    (*(void (**)(char *, uint64_t))(v556 + 8))(v557, v558);
    int v24 = 0;
    unint64_t v25 = 0x24000000000LL;
    goto LABEL_6;
  }

  int v544 = (uint64_t *)&v565[v564[150]];
  *int v544 = v542;
  v544[1] = v543;
  LOBYTE(v566[0]) = -109;
  uint64_t v545 = v563;
  uint64_t v546 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v566, v558);
  uint64_t v563 = v545;
  if (v545)
  {
    (*(void (**)(char *, uint64_t))(v556 + 8))(v557, v558);
    unint64_t v25 = 0x24000000000LL;
    int v24 = 1;
    unint64_t v26 = 327680LL;
LABEL_6:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v559);
    uint64_t v28 = (v27 >> 57) & 1;
    uint64_t v29 = (v25 >> 38) & 1;
    uint64_t v30 = (v25 >> 41) & 1;
    uint64_t v31 = (v26 >> 16) & 1;
    if ((v27 & 2) != 0) {
      swift_bridgeObjectRelease();
    }
    if ((v27 & 4) != 0)
    {
      sub_100016F9C(*((void *)v565 + 3), *((void *)v565 + 4));
      if ((v27 & 0x200) != 0) {
        goto LABEL_164;
      }
    }

    else if ((v27 & 0x200) != 0)
    {
      goto LABEL_164;
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v561 + 8))(v560, v562);
    if ((v27 & 0x200000000000000LL) == 0) {
      goto LABEL_165;
    }
LABEL_13:
    uint64_t v33 = (uint64_t *)&v565[v564[61]];
    uint64_t result = sub_1004221C0( *v33,  v33[1],  v33[2],  v33[3],  v33[4],  v33[5],  v33[6],  v33[7],  v33[8],  v33[9],  v33[10],  v33[11],  v33[12],  v33[13]);
    if ((v29 & 1) != 0) {
      goto LABEL_166;
    }
LABEL_14:
    if (!(_DWORD)v30) {
      goto LABEL_167;
    }
LABEL_15:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v31 & 1) != 0) {
      goto LABEL_168;
    }
    goto LABEL_16;
  }

  v548 = &v565[v564[151]];
  *(void *)v548 = v546;
  v548[8] = v547 & 1;
  char v567 = -108;
  uint64_t v549 = v563;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v384, &v567, v558, v384, v385);
  uint64_t v563 = v549;
  if (!v549)
  {
    (*(void (**)(char *, uint64_t))(v556 + 8))(v557, v558);
    uint64_t v551 = (uint64_t)v565;
    *(void *)&v565[v564[152]] = *(void *)&v566[0];
    sub_10046D4D4(v551, v554);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v559);
    return sub_10046D518(v551);
  }

  (*(void (**)(char *, uint64_t))(v556 + 8))(v557, v558);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v559);
  uint64_t v550 = v565;
  swift_bridgeObjectRelease();
  sub_100016F9C(*((void *)v550 + 3), *((void *)v550 + 4));
  LOBYTE(v28) = 1;
  LODWORD(v29) = 1;
  LODWORD(v30) = 1;
  LODWORD(v31) = 1;
  int v24 = 1;
LABEL_164:
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v561 + 8))(v560, v562);
  if ((v28 & 1) != 0) {
    goto LABEL_13;
  }
LABEL_165:
  if (!(_DWORD)v29) {
    goto LABEL_14;
  }
LABEL_166:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v30 & 1) != 0) {
    goto LABEL_15;
  }
LABEL_167:
  if ((_DWORD)v31)
  {
LABEL_168:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v24 & 1) == 0) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }

uint64_t sub_10046D380@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10046A77C(a1, a2);
}

unint64_t sub_10046D394()
{
  unint64_t result = qword_1009AF1D8;
  if (!qword_1009AF1D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803B9C, &type metadata for ConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF1D8);
  }

  return result;
}

unint64_t sub_10046D3D8()
{
  unint64_t result = qword_1009AF1E0;
  if (!qword_1009AF1E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803B74, &type metadata for ConfigurationResponse.Status);
    atomic_store(result, (unint64_t *)&qword_1009AF1E0);
  }

  return result;
}

uint64_t sub_10046D41C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100004B78(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10046D470()
{
  unint64_t result = qword_1009AD8F8;
  if (!qword_1009AD8F8)
  {
    uint64_t v1 = sub_100004B78(&qword_10099D5C8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009AD8F8);
  }

  return result;
}

uint64_t sub_10046D4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConfigurationResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10046D518(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConfigurationResponse(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfigurationResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0x6C) {
    goto LABEL_17;
  }
  if (a2 + 148 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 148) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 148;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 148;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 148;
    }
  }

uint64_t storeEnumTagSinglePayload for ConfigurationResponse.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 148 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 148) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0x6C) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x6B) {
    return ((uint64_t (*)(void))((char *)&loc_10046D630 + 4 * byte_10080377F[v4]))();
  }
  *a1 = a2 - 108;
  return ((uint64_t (*)(void))((char *)sub_10046D664 + 4 * byte_10080377A[v4]))();
}

uint64_t sub_10046D664(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10046D66C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10046D674LL);
  }
  return result;
}

uint64_t sub_10046D680(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10046D688LL);
  }
  *(_BYTE *)unint64_t result = a2 - 108;
  return result;
}

uint64_t sub_10046D68C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10046D694(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationResponse.CodingKeys()
{
  return &type metadata for ConfigurationResponse.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ConfigurationResponse.Status( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10046D6FC + 4 * byte_100803789[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10046D730 + 4 * byte_100803784[v4]))();
}

uint64_t sub_10046D730(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10046D738(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10046D740LL);
  }
  return result;
}

uint64_t sub_10046D74C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10046D754LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10046D758(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10046D760(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationResponse.Status()
{
  return &type metadata for ConfigurationResponse.Status;
}

unint64_t sub_10046D780()
{
  unint64_t result = qword_1009AF1E8;
  if (!qword_1009AF1E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803A5C, &type metadata for ConfigurationResponse.Status);
    atomic_store(result, (unint64_t *)&qword_1009AF1E8);
  }

  return result;
}

unint64_t sub_10046D7C8()
{
  unint64_t result = qword_1009AF1F0;
  if (!qword_1009AF1F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803B4C, &type metadata for ConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF1F0);
  }

  return result;
}

unint64_t sub_10046D810()
{
  unint64_t result = qword_1009AF1F8;
  if (!qword_1009AF1F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803A84, &type metadata for ConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF1F8);
  }

  return result;
}

unint64_t sub_10046D858()
{
  unint64_t result = qword_1009AF200;
  if (!qword_1009AF200)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803AAC, &type metadata for ConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF200);
  }

  return result;
}

uint64_t sub_10046D89C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100935690, a1, a2, &unk_10099BA88);
  swift_bridgeObjectRelease(a2);
  uint64_t v4 = 0LL;
  uint64_t result = 41LL;
  switch(v3)
  {
    case 0LL:
      goto LABEL_45;
    case 1LL:
      uint64_t v4 = 1LL;
      goto LABEL_45;
    case 2LL:
      uint64_t v4 = 2LL;
      goto LABEL_45;
    case 3LL:
      uint64_t v4 = 3LL;
      goto LABEL_45;
    case 4LL:
      uint64_t v4 = 4LL;
      goto LABEL_45;
    case 5LL:
      uint64_t v4 = 5LL;
      goto LABEL_45;
    case 6LL:
      uint64_t v4 = 6LL;
      goto LABEL_45;
    case 7LL:
      uint64_t v4 = 7LL;
      goto LABEL_45;
    case 8LL:
      uint64_t v4 = 8LL;
      goto LABEL_45;
    case 9LL:
      uint64_t v4 = 9LL;
      goto LABEL_45;
    case 10LL:
      uint64_t v4 = 10LL;
      goto LABEL_45;
    case 11LL:
      uint64_t v4 = 11LL;
      goto LABEL_45;
    case 12LL:
      uint64_t v4 = 12LL;
      goto LABEL_45;
    case 13LL:
      uint64_t v4 = 13LL;
      goto LABEL_45;
    case 14LL:
      uint64_t v4 = 14LL;
      goto LABEL_45;
    case 15LL:
      uint64_t v4 = 15LL;
      goto LABEL_45;
    case 16LL:
      uint64_t v4 = 16LL;
      goto LABEL_45;
    case 17LL:
      uint64_t v4 = 17LL;
      goto LABEL_45;
    case 18LL:
      uint64_t v4 = 18LL;
      goto LABEL_45;
    case 19LL:
      uint64_t v4 = 19LL;
      goto LABEL_45;
    case 20LL:
      uint64_t v4 = 20LL;
      goto LABEL_45;
    case 21LL:
      uint64_t v4 = 21LL;
      goto LABEL_45;
    case 22LL:
      uint64_t v4 = 22LL;
      goto LABEL_45;
    case 23LL:
      uint64_t v4 = 23LL;
      goto LABEL_45;
    case 24LL:
      uint64_t v4 = 24LL;
      goto LABEL_45;
    case 25LL:
      uint64_t v4 = 25LL;
      goto LABEL_45;
    case 26LL:
      uint64_t v4 = 26LL;
      goto LABEL_45;
    case 27LL:
      uint64_t v4 = 27LL;
      goto LABEL_45;
    case 28LL:
      uint64_t v4 = 28LL;
      goto LABEL_45;
    case 29LL:
      uint64_t v4 = 29LL;
      goto LABEL_45;
    case 30LL:
      uint64_t v4 = 30LL;
      goto LABEL_45;
    case 31LL:
      uint64_t v4 = 31LL;
      goto LABEL_45;
    case 32LL:
      uint64_t v4 = 32LL;
      goto LABEL_45;
    case 33LL:
      uint64_t v4 = 33LL;
      goto LABEL_45;
    case 34LL:
      uint64_t v4 = 34LL;
      goto LABEL_45;
    case 35LL:
      uint64_t v4 = 35LL;
      goto LABEL_45;
    case 36LL:
      uint64_t v4 = 36LL;
      goto LABEL_45;
    case 37LL:
      uint64_t v4 = 37LL;
      goto LABEL_45;
    case 38LL:
      uint64_t v4 = 38LL;
      goto LABEL_45;
    case 39LL:
      uint64_t v4 = 39LL;
      goto LABEL_45;
    case 40LL:
      uint64_t v4 = 40LL;
LABEL_45:
      uint64_t result = v4;
      break;
    case 41LL:
      return result;
    case 42LL:
      uint64_t result = 42LL;
      break;
    case 43LL:
      uint64_t result = 43LL;
      break;
    case 44LL:
      uint64_t result = 44LL;
      break;
    case 45LL:
      uint64_t result = 45LL;
      break;
    case 46LL:
      uint64_t result = 46LL;
      break;
    case 47LL:
      uint64_t result = 47LL;
      break;
    case 48LL:
      uint64_t result = 48LL;
      break;
    case 49LL:
      uint64_t result = 49LL;
      break;
    case 50LL:
      uint64_t result = 50LL;
      break;
    case 51LL:
      uint64_t result = 51LL;
      break;
    case 52LL:
      uint64_t result = 52LL;
      break;
    case 53LL:
      uint64_t result = 53LL;
      break;
    case 54LL:
      uint64_t result = 54LL;
      break;
    case 55LL:
      uint64_t result = 55LL;
      break;
    case 56LL:
      uint64_t result = 56LL;
      break;
    case 57LL:
      uint64_t result = 57LL;
      break;
    case 58LL:
      uint64_t result = 58LL;
      break;
    case 59LL:
      uint64_t result = 59LL;
      break;
    case 60LL:
      uint64_t result = 60LL;
      break;
    case 61LL:
      uint64_t result = 61LL;
      break;
    case 62LL:
      uint64_t result = 62LL;
      break;
    case 63LL:
      uint64_t result = 63LL;
      break;
    case 64LL:
      uint64_t result = 64LL;
      break;
    case 65LL:
      uint64_t result = 65LL;
      break;
    case 66LL:
      uint64_t result = 66LL;
      break;
    case 67LL:
      uint64_t result = 67LL;
      break;
    case 68LL:
      uint64_t result = 68LL;
      break;
    case 69LL:
      uint64_t result = 69LL;
      break;
    case 70LL:
      uint64_t result = 70LL;
      break;
    case 71LL:
      uint64_t result = 71LL;
      break;
    case 72LL:
      uint64_t result = 72LL;
      break;
    case 73LL:
      uint64_t result = 73LL;
      break;
    case 74LL:
      uint64_t result = 74LL;
      break;
    case 75LL:
      uint64_t result = 75LL;
      break;
    case 76LL:
      uint64_t result = 76LL;
      break;
    case 77LL:
      uint64_t result = 77LL;
      break;
    case 78LL:
      uint64_t result = 78LL;
      break;
    case 79LL:
      uint64_t result = 79LL;
      break;
    case 80LL:
      uint64_t result = 80LL;
      break;
    case 81LL:
      uint64_t result = 81LL;
      break;
    case 82LL:
      uint64_t result = 82LL;
      break;
    case 83LL:
      uint64_t result = 83LL;
      break;
    case 84LL:
      uint64_t result = 84LL;
      break;
    case 85LL:
      uint64_t result = 85LL;
      break;
    case 86LL:
      uint64_t result = 86LL;
      break;
    case 87LL:
      uint64_t result = 87LL;
      break;
    case 88LL:
      uint64_t result = 88LL;
      break;
    case 89LL:
      uint64_t result = 89LL;
      break;
    case 90LL:
      uint64_t result = 90LL;
      break;
    case 91LL:
      uint64_t result = 91LL;
      break;
    case 92LL:
      uint64_t result = 92LL;
      break;
    case 93LL:
      uint64_t result = 93LL;
      break;
    case 94LL:
      uint64_t result = 94LL;
      break;
    case 95LL:
      uint64_t result = 95LL;
      break;
    case 96LL:
      uint64_t result = 96LL;
      break;
    case 97LL:
      uint64_t result = 97LL;
      break;
    case 98LL:
      uint64_t result = 98LL;
      break;
    case 99LL:
      uint64_t result = 99LL;
      break;
    case 100LL:
      uint64_t result = 100LL;
      break;
    case 101LL:
      uint64_t result = 101LL;
      break;
    case 102LL:
      uint64_t result = 102LL;
      break;
    case 103LL:
      uint64_t result = 103LL;
      break;
    case 104LL:
      uint64_t result = 104LL;
      break;
    case 105LL:
      uint64_t result = 105LL;
      break;
    case 106LL:
      uint64_t result = 106LL;
      break;
    case 107LL:
      uint64_t result = 107LL;
      break;
    case 108LL:
      uint64_t result = 108LL;
      break;
    case 109LL:
      uint64_t result = 109LL;
      break;
    case 110LL:
      uint64_t result = 110LL;
      break;
    case 111LL:
      uint64_t result = 111LL;
      break;
    case 112LL:
      uint64_t result = 112LL;
      break;
    case 113LL:
      uint64_t result = 113LL;
      break;
    case 114LL:
      uint64_t result = 114LL;
      break;
    case 115LL:
      uint64_t result = 115LL;
      break;
    case 116LL:
      uint64_t result = 116LL;
      break;
    case 117LL:
      uint64_t result = 117LL;
      break;
    case 118LL:
      uint64_t result = 118LL;
      break;
    case 119LL:
      uint64_t result = 119LL;
      break;
    case 120LL:
      uint64_t result = 120LL;
      break;
    case 121LL:
      uint64_t result = 121LL;
      break;
    case 122LL:
      uint64_t result = 122LL;
      break;
    case 123LL:
      uint64_t result = 123LL;
      break;
    case 124LL:
      uint64_t result = 124LL;
      break;
    case 125LL:
      uint64_t result = 125LL;
      break;
    case 126LL:
      uint64_t result = 126LL;
      break;
    case 127LL:
      uint64_t result = 127LL;
      break;
    default:
      else {
        uint64_t result = v3 | 0xFFFFFF80;
      }
      break;
  }

  return result;
}

unint64_t sub_10046DD10()
{
  unint64_t result = qword_1009AF208;
  if (!qword_1009AF208)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008039E4, &type metadata for ConfigurationResponse.Status);
    atomic_store(result, (unint64_t *)&qword_1009AF208);
  }

  return result;
}

Swift::Int sub_10046DD54()
{
  return Hasher._finalize()();
}

uint64_t sub_10046DDA8(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000034LL, 0x8000000100850010LL);
}

Swift::Int sub_10046DDC4(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10046DE14@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009368C0, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10046DE64(void *a1@<X8>)
{
  *a1 = 0xD000000000000034LL;
  a1[1] = 0x8000000100850010LL;
}

uint64_t sub_10046DE9C( char *a1, int a2, uint64_t a3, void *a4, void *aBlock, void (*a6)(uint64_t, id, uint64_t, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for String);
  uint64_t v12 = *sub_100012ED8( &a1[OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation],  *(void *)&a1[OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation + 24]);
  _Block_copy(v10);
  id v13 = a4;
  uint64_t v14 = a1;
  a6(v11, v13, v12, v10);
  _Block_release(v10);
  _Block_release(v10);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10046E364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_100004AEC(&qword_1009AF520);
  uint64_t v12 = swift_allocObject(v11, 48LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  uint64_t v13 = sub_100004AEC(&qword_1009AF528);
  uint64_t inited = swift_initStackObject(v13, v17);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_retain();
  swift_bridgeObjectRetain(a3);
  unint64_t v15 = sub_100413A48(inited);
  sub_10058AC6C(v12, v15, 1, a4, a5);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_10046E968()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureLocationsTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SecureLocationsTrampoline()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd25SecureLocationsTrampoline);
}

id sub_10046E9C8()
{
  __int16 v1 = *(void **)(v0 + 56);
  if (v1)
  {
    id v2 = *(id *)(v0 + 56);
  }

  else
  {
    uint64_t v3 = type metadata accessor for SecureLocationsService();
    v17[3] = v3;
    v17[4] = &off_10095C558;
    v17[0] = v0;
    uint64_t v4 = (objc_class *)type metadata accessor for SecureLocationsTrampoline();
    id v5 = objc_allocWithZone(v4);
    uint64_t v6 = sub_100037298((uint64_t)v17, v3);
    __chkstk_darwin(v6);
    int v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    uint64_t v10 = *v8;
    v16[3] = v3;
    v16[4] = &off_10095C558;
    v16[0] = v10;
    sub_100013044((uint64_t)v16, (uint64_t)v5 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation);
    v15.receiver = v5;
    v15.super_class = v4;
    swift_retain();
    id v11 = objc_msgSendSuper2(&v15, "init");
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
    uint64_t v12 = *(void **)(v0 + 56);
    *(void *)(v0 + 56) = v11;
    id v2 = v11;

    __int16 v1 = 0LL;
  }

  id v13 = v1;
  return v2;
}

uint64_t sub_10046EB00()
{
  __int16 v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2AE08);
  id v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    objc_super v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v30 = v6;
    uint64_t v16 = v3;
    uint64_t v17 = v8;
    uint64_t v18 = v7;
    uint64_t v19 = v4;
    uint64_t v20 = v2;
    unint64_t v21 = v15;
    *(_WORD *)objc_super v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting SecureLocations Service", v15, 2u);
    uint64_t v22 = v21;
    uint64_t v2 = v20;
    uint64_t v4 = v19;
    uint64_t v7 = v18;
    uint64_t v8 = v17;
    uint64_t v3 = v16;
    uint64_t v6 = v30;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  uint64_t v23 = swift_allocObject(&unk_10095C618, 32LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v23 + 24) = v2;
  aBlock[4] = sub_100471634;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095C630;
  int v24 = _Block_copy(aBlock);
  uint64_t v25 = swift_retain();
  static DispatchQoS.unspecified.getter(v25);
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v26 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v28 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v27, v28, v3, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_10046EDAC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MachServiceName(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for XPCServiceDescription(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MachServiceName.init(_:)(0xD00000000000002DLL, 0x80000001008634B0LL);
  id v9 = sub_10046E9C8();
  if (qword_10099B4C0 != -1) {
    swift_once(&qword_10099B4C0, sub_10046EFF4);
  }
  uint64_t v10 = qword_10099B5E0;
  id v11 = (id)qword_1009AF210;
  if (v10 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AE08);
  os_log_type_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "remoteObjectInterface called", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  id v17 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___SPSecureLocationsClientXPCProtocol];
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v4,  0LL,  v9,  v11,  v17,  sub_100471654,  a1,  0LL,  0LL,  0LL,  0LL);
  XPCSessionManager.register(service:)(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id sub_10046EFF4()
{
  id result = sub_10046F010();
  qword_1009AF210 = (uint64_t)result;
  return result;
}

id sub_10046F010()
{
  id v0 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___SPSecureLocationsXPCProtocol];
  uint64_t v1 = sub_1004B8468();
  uint64_t v2 = swift_allocObject( v1,  ((*(unsigned int *)(v1 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v1 + 52) | 7LL);
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v3 = sub_100022898(0LL, &qword_1009AF508, &OBJC_CLASS___SPSecureLocationsSubscriptionContext_ptr);
  *(void *)(v2 + 32) = v3;
  uint64_t v4 = sub_100022898(0LL, &qword_1009AF510, &OBJC_CLASS___NSString_ptr);
  *(void *)(v2 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v2,  "subscribeAndFetchLocationForIds:context:completion:",  1LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_1004B8468();
  uint64_t v6 = swift_allocObject( v5,  ((*(unsigned int *)(v5 + 48) + 7LL) & 0x1FFFFFFF8LL) + 32,  *(unsigned __int16 *)(v5 + 52) | 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E8290;
  *(void *)(v6 + 32) = sub_100022898(0LL, &qword_1009AF518, &OBJC_CLASS___SPSecureLocationsSubscriptionResult_ptr);
  uint64_t v7 = sub_100022898(0LL, &qword_10099FAD0, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v6 + 40) = v7;
  uint64_t v8 = sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
  *(void *)(v6 + 48) = v8;
  *(void *)(v6 + 56) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v6,  "subscribeAndFetchLocationForIds:context:completion:",  0LL,  1LL);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_1004B8468();
  uint64_t v10 = swift_allocObject( v9,  ((*(unsigned int *)(v9 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v9 + 52) | 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(v10 + 32) = v3;
  *(void *)(v10 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v10, "unsubscribeForIds:context:completion:", 1LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1004B8468();
  uint64_t v12 = swift_allocObject( v11,  ((*(unsigned int *)(v11 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v11 + 52) | 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(v12 + 32) = v8;
  *(void *)(v12 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v12, "publishLocation:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_1004B8468();
  uint64_t v14 = swift_allocObject( v13,  ((*(unsigned int *)(v13 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v13 + 52) | 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(v14 + 32) = v8;
  *(void *)(v14 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v14, "latestLocationFromCacheForId:completion:", 0LL, 1LL);
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_1004B8468();
  uint64_t v16 = swift_allocObject( v15,  ((*(unsigned int *)(v15 + 48) + 7LL) & 0x1FFFFFFF8LL) + 24,  *(unsigned __int16 *)(v15 + 52) | 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  *(void *)(v16 + 32) = v7;
  *(void *)(v16 + 40) = v8;
  *(void *)(v16 + 48) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v16, "updateLocationCacheWith:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10046F2F4()
{
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 64));
  swift_release(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 80));
  swift_release(*(void *)(v0 + 88));
  swift_release(*(void *)(v0 + 96));
  swift_release(*(void *)(v0 + 104));

  swift_release(*(void *)(v0 + 120));
  return v0;
}

uint64_t sub_10046F370()
{
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t type metadata accessor for SecureLocationsService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd22SecureLocationsService);
}

uint64_t sub_10046F3B0()
{
  return sub_10046EB00();
}

void sub_10046F3D0( void *a1, void *a2, uint64_t a3, void *a4, void (*a5)(void, void), uint64_t a6)
{
  unint64_t v70 = a5;
  uint64_t v71 = a6;
  uint64_t v72 = a3;
  uint64_t v66 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v68 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v67 = (void **)((char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2AE08);
  id v73 = a1;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v73);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  uint64_t v14 = &selRef_initWithCoder_;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v69 = v11;
    uint64_t v17 = v16;
    id v75 = (id)v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    uint64_t v18 = v73;
    id v74 = [v73 subscriptionMode];
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    id v74 = (id)sub_1003F11D4(v19, v20, (uint64_t *)&v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v15 + 4, v15 + 12);

    uint64_t v14 = &selRef_initWithCoder_;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "subscribeAndFetch called with mode %{public}s", v15, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v11 = v69;
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    uint64_t v12 = (os_log_s *)v73;
  }

  if ([v73 v14[110]] && a2)
  {
    id v21 = a2;
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc(12LL, -1LL);
      uint64_t v65 = a2;
      uint64_t v25 = (uint8_t *)v24;
      uint64_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v69 = v11;
      *(_DWORD *)uint64_t v25 = 138543362;
      id v75 = v21;
      id v27 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v25 + 4, v25 + 12);
      *uint64_t v26 = v65;

      uint64_t v14 = &selRef_initWithCoder_;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "subscribeAndFetch adding connection %{public}@", v25, 0xCu);
      uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v26, 1LL, v28);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {

      uint64_t v22 = (os_log_s *)v21;
    }

    uint64_t v29 = *(void **)(v72 + 32);
    uint64_t v31 = v67;
    uint64_t v30 = v68;
    *uint64_t v67 = v29;
    uint64_t v32 = v66;
    (*(void (**)(void *, void, uint64_t))(v30 + 104))( v31,  enum case for DispatchPredicate.onQueue(_:),  v66);
    id v33 = v29;
    LOBYTE(v29) = _dispatchPreconditionTest(_:)(v31);
    (*(void (**)(void *, uint64_t))(v30 + 8))(v31, v32);
    if ((v29 & 1) == 0)
    {
      __break(1u);
      goto LABEL_27;
    }

    [*(id *)(v72 + 112) addObject:v21];
    swift_retain();
    sub_100663FBC(v21);

    swift_release();
    swift_release();
  }

  if ([v73 v14[110]] != (id)2)
  {
    swift_retain();
    sub_1003149FC((uint64_t)a4, v73, 0, v70, v71);
LABEL_21:
    swift_release();
    return;
  }

  swift_bridgeObjectRetain(a4);
  unint64_t v35 = (void *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.default.getter(v35);
  if (!os_log_type_enabled((os_log_t)v35, v36))
  {

    swift_bridgeObjectRelease();
    goto LABEL_19;
  }

  uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v38 = swift_slowAlloc(32LL, -1LL);
  id v75 = (id)v38;
  *(_DWORD *)uint64_t v37 = 136315138;
  if (!a4[2])
  {
LABEL_27:
    __break(1u);
    return;
  }

  uint64_t v39 = v38;
  __n128 v40 = v14;
  uint64_t v41 = a4[4];
  unint64_t v42 = a4[5];
  swift_bridgeObjectRetain(v42);
  uint64_t v43 = v41;
  uint64_t v14 = v40;
  id v74 = (id)sub_1003F11D4(v43, v42, (uint64_t *)&v75);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v37 + 4, v37 + 12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v35,  v36,  "subscribeAndFetch called with live mode %s, ",  v37,  0xCu);
  swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v39, -1LL, -1LL);
  swift_slowDealloc(v37, -1LL, -1LL);

LABEL_19:
  uint64_t v44 = a4[2];
  if (v44 == 1)
  {
    uint64_t v45 = v72;
    char v46 = *(void **)(v72 + 96);
    uint64_t v48 = (void *)a4[4];
    uint64_t v47 = (void *)a4[5];
    uint64_t v49 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v49);
    *(&v65 - 6) = v46;
    *(&v65 - 5) = v48;
    char v50 = v73;
    *(&v65 - 4) = v47;
    *(&v65 - 3) = v50;
    uint64_t v51 = v71;
    *(&v65 - 2) = v70;
    *(&v65 - 1) = (void *)v51;
    swift_retain();
    swift_bridgeObjectRetain(v47);
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.startLiveLocations",  64LL,  2LL,  sub_100472844);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v52 = *(void *)(v45 + 96);
    swift_retain();
    sub_1003141E8((uint64_t)a4, v50, 0, v52);
    goto LABEL_21;
  }

  swift_bridgeObjectRetain(a4);
  char v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v55 = static os_log_type_t.error.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v56 = 134217984;
    id v75 = (id)v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v56 + 4, v56 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "subscribeAndFetch called with live mode and %ld ids. Only 1 id is supported",  v56,  0xCu);
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease();
  }

  [v73 v14[110]];
  id v57 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v59 = [v57 initWithExpiryTime:isa locations:15.0];

  type metadata accessor for SecureLocationsError(0LL);
  uint64_t v61 = v60;
  id v74 = 0LL;
  unint64_t v62 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v63 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
  _BridgedStoredNSError.init(_:userInfo:)(&v75, &v74, v62, v61, v63);
  uint64_t v64 = v75;
  v70(v59, v75);
}

void sub_10046FBC4(void *a1, void *a2, void (*a3)(void *), uint64_t a4, uint64_t a5, void *a6)
{
  if ([a1 subscriptionMode] == (id)2)
  {
    uint64_t v12 = (void *)a2[2];
    if (v12 == (void *)1)
    {
      uint64_t v14 = a2[4];
      os_log_type_t v13 = (void *)a2[5];
      swift_retain();
      swift_bridgeObjectRetain(v13);
      sub_10032C758(v14, v13, a1, (void (*)(void))a3, a4);
      swift_bridgeObjectRelease();
      swift_release();
      if (a6)
      {
        id v28 = a6;
        sub_10046FEA0(v28);
      }
    }

    else
    {
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v18 = type metadata accessor for Logger(0LL);
      sub_10000A720(v18, (uint64_t)qword_100A2AE08);
      swift_bridgeObjectRetain(a2);
      unint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v22 = 134217984;
        uint64_t v30 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "unsubscribe for live can be called with only 1 id. Id count %ld",  v22,  0xCu);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease();
      }

      type metadata accessor for SecureLocationsError(0LL);
      uint64_t v24 = v23;
      uint64_t v29 = 4LL;
      unint64_t v25 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v26 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
      _BridgedStoredNSError.init(_:userInfo:)(&v30, &v29, v25, v24, v26);
      id v27 = v30;
      a3(v30);
    }
  }

  else
  {
    uint64_t v15 = (void *)swift_allocObject(&unk_10095C820, 56LL, 7LL);
    v15[2] = a5;
    v15[3] = a1;
    v15[4] = a6;
    void v15[5] = a3;
    v15[6] = a4;
    id v16 = a6;
    swift_retain();
    swift_retain();
    id v17 = a1;
    swift_retain();
    sub_10031EFC4((uint64_t)a2, v17, (uint64_t)sub_1004725F8, (uint64_t)v15);
    swift_release();
    swift_release();
  }

uint64_t sub_10046FEA0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)&v27[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void **)(v2 + 32);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_10099B5E0, sub_1005C6624);
    goto LABEL_4;
  }

  [*(id *)(v2 + 112) removeObject:a1];
  uint64_t result = (uint64_t)[*(id *)(v2 + 112) containsObject:a1];
  if ((result & 1) != 0) {
    return result;
  }
  if (qword_10099B5E0 != -1) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_100A2AE08);
  uint64_t v12 = a1;
  os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v16 = (void ***)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v15 = 138412290;
    uint64_t aBlock = v12;
    id v17 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v27, v15 + 4, v15 + 12);
    uint8_t *v16 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "removing client connection %@", v15, 0xCu);
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v16, 1LL, v18);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    os_log_type_t v13 = (os_log_s *)v12;
  }

  uint64_t v19 = *(void *)(v2 + 104);
  unint64_t v20 = *(dispatch_queue_s **)(v19 + 16);
  uint64_t v21 = swift_allocObject(&unk_10095C848, 32LL, 7LL);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = v19;
  *(void *)(v21 + 24) = v12;
  uint64_t v22 = swift_allocObject(&unk_10095C870, 32LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = sub_100472634;
  *(void *)(v22 + 24) = v21;
  v27[3] = sub_100095030;
  v27[4] = v22;
  uint64_t aBlock = _NSConcreteStackBlock;
  v27[0] = 1107296256LL;
  v27[1] = sub_100025BD4;
  __int128 v27[2] = &unk_10095C888;
  uint64_t v23 = _Block_copy(&aBlock);
  swift_retain_n(v19, 2LL);
  uint64_t v24 = v12;
  swift_retain();
  swift_release();
  dispatch_sync(v20, v23);
  _Block_release(v23);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v22, "", 110LL, 89LL, 27LL, 1LL);
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004701F0(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v29 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  os_log_type_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  id v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *(void *)(a2 + 32);
  uint64_t v18 = (void *)swift_allocObject(&unk_10095C8C0, 64LL, 7LL);
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  v18[6] = a6;
  v18[7] = a1;
  aBlock[4] = sub_100472690;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095C8D8;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  id v20 = a3;
  id v21 = a4;
  swift_retain();
  uint64_t v22 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v25 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v24, v25, v12, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v28);
  return swift_release();
}

uint64_t sub_1004703FC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v73 = a5;
  uint64_t v74 = a6;
  uint64_t v72 = a4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v70 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (void **)&v64[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v71 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  id v75 = &v64[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v76 = a1;
  uint64_t v14 = *(void *)(a1 + 120);
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_10047269C, v14, &type metadata for Bool);
  swift_release();
  char v15 = (char)aBlock;
  uint64_t v16 = a3;
  BOOL v17 = [a2 subscriptionMode] != (id)1 || a3 == 0;
  if (v17 || (v15 & 1) != 0)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_10000A720(v18, (uint64_t)qword_100A2AE08);
    uint64_t v19 = swift_retain();
    id v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v68 = v11;
      uint64_t v69 = v12;
      *(_DWORD *)uint64_t v22 = 67109120;
      uint64_t v23 = v9;
      uint64_t v24 = *(void *)(v76 + 104);
      swift_retain();
      OS_dispatch_queue.sync<A>(execute:)(sub_1004726F4, v24, &type metadata for Bool);
      uint64_t v9 = v23;
      uint64_t v11 = v68;
      swift_release();
      LODWORD(aBlock) = aBlock;
      uint64_t v12 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v22 + 4, v22 + 8);
      swift_release();
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "unsubscribe shallow not removing client connection. isEmpty %{BOOL}d",  v22,  8u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {

      swift_release();
    }

    unint64_t v25 = (void *)swift_allocObject(&unk_10095C910, 48LL, 7LL);
    uint64_t v26 = v72;
    uint64_t v27 = v73;
    void v25[2] = v16;
    void v25[3] = v26;
    uint64_t v28 = v74;
    void v25[4] = v27;
    v25[5] = v28;
    char v82 = sub_1004726E8;
    uint64_t v83 = v25;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v79 = 1107296256LL;
    uint64_t v80 = sub_1001C31E8;
    uint64_t v81 = &unk_10095C928;
    uint64_t v29 = _Block_copy(&aBlock);
    id v30 = v16;
    swift_retain();
    uint64_t v31 = swift_errorRetain(v28);
    uint64_t v32 = v75;
    static DispatchQoS.unspecified.getter(v31);
    uint64_t v77 = _swiftEmptyArrayStorage;
    uint64_t v33 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v34 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    unint64_t v35 = sub_100012FF8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v77, v34, v35, v9, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v32, v11, v29);
    _Block_release(v29);
    (*(void (**)(void **, uint64_t))(v70 + 8))(v11, v9);
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v32, v71);
  }

  else
  {
    uint64_t v36 = qword_10099B5E0;
    id v37 = a3;
    if (v36 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v69 = v12;
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_10000A720(v38, (uint64_t)qword_100A2AE08);
    uint64_t v39 = v37;
    __n128 v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.default.getter(v40);
    int v42 = v41;
    BOOL v43 = os_log_type_enabled(v40, v41);
    uint64_t v44 = v76;
    if (v43)
    {
      uint64_t v45 = swift_slowAlloc(22LL, -1LL);
      uint64_t v67 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v68 = (void **)swift_slowAlloc(32LL, -1LL);
      uint64_t aBlock = v68;
      *(_DWORD *)uint64_t v45 = 136315394;
      uint64_t v77 = (void *)sub_1003F11D4(0xD000000000000027LL, 0x80000001008635A0LL, (uint64_t *)&aBlock);
      os_log_t v66 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &aBlock, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2112;
      int v65 = v42;
      uint64_t v77 = v39;
      uint64_t v46 = v44;
      uint64_t v47 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &aBlock, v45 + 14, v45 + 22);
      uint64_t v48 = v67;
      *uint64_t v67 = v16;

      uint64_t v44 = v46;
      os_log_t v49 = v66;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  (os_log_type_t)v65,  "%s unsubscribe shallow removing client connection %@",  (uint8_t *)v45,  0x16u);
      uint64_t v50 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v48, 1LL, v50);
      swift_slowDealloc(v48, -1LL, -1LL);
      uint64_t v51 = v68;
      swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v52 = (void *)swift_allocObject(&unk_10095C960, 56LL, 7LL);
    uint64_t v53 = v72;
    uint64_t v54 = v73;
    v52[2] = v39;
    v52[3] = v53;
    uint64_t v55 = v74;
    v52[4] = v54;
    v52[5] = v55;
    v52[6] = v44;
    char v82 = sub_100472748;
    uint64_t v83 = v52;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v79 = 1107296256LL;
    uint64_t v80 = sub_1001C31E8;
    uint64_t v81 = &unk_10095C978;
    uint64_t v56 = _Block_copy(&aBlock);
    id v57 = v39;
    swift_retain();
    swift_errorRetain(v55);
    uint64_t v58 = swift_retain();
    id v59 = v75;
    static DispatchQoS.unspecified.getter(v58);
    uint64_t v77 = _swiftEmptyArrayStorage;
    uint64_t v60 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v61 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    unint64_t v62 = sub_100012FF8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v77, v61, v62, v9, v60);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v59, v11, v56);
    _Block_release(v56);

    (*(void (**)(void **, uint64_t))(v70 + 8))(v11, v9);
    (*(void (**)(_BYTE *, uint64_t))(v69 + 8))(v59, v71);
  }

  return swift_release();
}

uint64_t sub_100470AEC(void *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AE08);
  id v8 = a1;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    v22[0] = v19;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v21 = sub_1003F11D4(0xD000000000000027LL, 0x80000001008635A0LL, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2112;
    uint64_t v21 = (uint64_t)v8;
    id v12 = v8;
    id v20 = v8;
    uint64_t v13 = a4;
    id v14 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v11 + 14, v11 + 22);
    *uint64_t v18 = v20;

    a4 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "%s - Will call completion on completionQueue %@",  (uint8_t *)v11,  0x16u);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v18, 1LL, v15);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
  }

  a2(a4);
  uint64_t v16 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v16);
  return static Transaction.named<A>(_:with:)( "com.apple.searchpartyd.SecureLocationsService.removeClientConnection",  68LL,  2LL,  sub_100472758);
}

uint64_t sub_100470DA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[1] = *(void *)(a2 + 32);
  uint64_t v13 = (void *)swift_allocObject(&unk_10095C9B0, 40LL, 7LL);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_1004727A4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095C9C8;
  id v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter(a3);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v17 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v6, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_100470F98(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AE08);
  id v8 = a1;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    id v12 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v13;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v17 = sub_1003F11D4(0xD000000000000027LL, 0x80000001008635A0LL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2112;
    if (a1)
    {
      uint64_t v17 = (uint64_t)v8;
      id v14 = v8;
    }

    else
    {
      uint64_t v17 = 0LL;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 14, v11 + 22);
    *id v12 = a1;

    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "%s - Will call completion on completionQueue %@",  (uint8_t *)v11,  0x16u);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v12, 1LL, v15);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
  }

  return a2(a4);
}

void sub_100471200(void **a1, unint64_t *a2)
{
  uint64_t v5 = type metadata accessor for SecureLocation(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  if ([v9 publishReason] == (id)100)
  {
    sub_1005EE928(v9, (uint64_t)v8);
    unint64_t v10 = *a2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    *a2 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = sub_1004C6004(0, *(void *)(v10 + 16) + 1LL, 1, v10);
      *a2 = v10;
    }

    unint64_t v13 = *(void *)(v10 + 16);
    unint64_t v12 = *(void *)(v10 + 24);
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = sub_1004C6004(v12 > 1, v13 + 1, 1, v10);
      *a2 = v10;
    }

    *(void *)(v10 + swift_weakDestroy(v0 + 16) = v13 + 1;
    sub_100472508( (uint64_t)v8,  v10 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
    + *(void *)(v6 + 72) * v13);
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000A720(v14, (uint64_t)qword_100A2AE08);
    id v15 = v9;
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v19;
      uint64_t v26 = v2;
      *(_DWORD *)uint64_t v18 = 136315138;
      unint64_t v25 = v18 + 4;
      id v20 = [v15 debugDescription];
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      unint64_t v23 = v22;

      uint64_t v27 = sub_1003F11D4(v21, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v25, v18 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Not updating cache with location since publishReason is not legacyLocate. %s",  v18,  0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_1004714C8(uint64_t a1, uint64_t (*a2)(void))
{
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)id v8 = 134217984;
    uint64_t v10 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "updateLocations in cache %ld", v8, 0xCu);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease();
  }

  return a2(0LL);
}

uint64_t sub_100471610()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100471634()
{
  return sub_10046EDAC(*(void *)(v0 + 16));
}

uint64_t sub_10047163C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10047164C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100471654()
{
  unint64_t v0 = sub_100471688();
  return NSXPCConnection.hasEntitlement<A>(_:)(v0, &type metadata for SecureLocationsEntitlement, v0) & 1;
}

unint64_t sub_100471688()
{
  unint64_t result = qword_1009AF500;
  if (!qword_1009AF500)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803DAC, &type metadata for SecureLocationsEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009AF500);
  }

  return result;
}

uint64_t sub_1004716CC@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = swift_beginAccess(a1 + 32, v8, 0LL, 0LL);
  uint64_t v5 = *(void *)(a1 + 32);
  if ((v5 & 0xC000000000000001LL) != 0)
  {
    if (v5 < 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v7 = __CocoaSet.count.getter(v6);
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v7 = *(void *)(v5 + 16);
  }

  *a2 = v7 == 0;
  return result;
}

void sub_100471760(uint64_t a1, void *a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = swift_allocObject(&unk_10095CA00, 24LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a4;
  if (*(void *)(a1 + 16))
  {
    uint64_t v16 = objc_opt_self(&OBJC_CLASS___NSXPCConnection);
    uint64_t v43 = v9;
    uint64_t v17 = v15;
    uint64_t v18 = (void *)v16;
    _Block_copy(a4);
    id v19 = [v18 currentConnection];
    uint64_t v42 = *(void *)(a3 + 32);
    id v20 = (void *)swift_allocObject(&unk_10095CA28, 64LL, 7LL);
    v20[2] = a2;
    void v20[3] = v19;
    v20[4] = a3;
    v20[5] = a1;
    v20[6] = sub_10009C458;
    v20[7] = v17;
    aBlock[4] = sub_100472824;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_10095CA40;
    uint64_t v21 = _Block_copy(aBlock);
    id v22 = a2;
    id v23 = v19;
    swift_retain();
    swift_bridgeObjectRetain(a1);
    uint64_t v24 = swift_retain();
    static DispatchQoS.unspecified.getter(v24);
    uint64_t v45 = _swiftEmptyArrayStorage;
    uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    unint64_t v27 = sub_100012FF8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v26, v27, v8, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v44);
    swift_release();
    swift_release();
  }

  else
  {
    _Block_copy(a4);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_10000A720(v28, (uint64_t)qword_100A2AE08);
    id v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "subscribeAndFetch called with empty array of IDs", v32, 2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    [a2 subscriptionMode];
    id v33 = objc_allocWithZone(&OBJC_CLASS___SPSecureLocationsSubscriptionResult);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0090, &OBJC_CLASS___SPSecureLocation_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v35 = [v33 initWithExpiryTime:isa locations:15.0];

    type metadata accessor for SecureLocationsError(0LL);
    uint64_t v37 = v36;
    uint64_t v45 = 0LL;
    unint64_t v38 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v39 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v45, v38, v37, v39);
    __n128 v40 = (void *)aBlock[0];
    os_log_type_t v41 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    ((void (**)(void, id, void *))a4)[2](a4, v35, v41);
    swift_release();
  }

void sub_100471B90(uint64_t a1, void *a2, uint64_t a3, void (**a4)(void, void))
{
  id v59 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v60 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_10095C7A8, 24LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t v15 = *(void *)(a1 + 16);
  _Block_copy(a4);
  if (v15)
  {
    uint64_t v55 = a3;
    uint64_t v58 = v10;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v56 = v12;
    uint64_t v57 = v11;
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10000A720(v16, (uint64_t)qword_100A2AE08);
    swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc(22LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v53 = v21;
      uint64_t v54 = v14;
      *(_DWORD *)uint64_t v20 = 141558275;
      uint64_t v61 = 1752392040LL;
      aBlock[0] = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, aBlock, v20 + 4, v20 + 12);
      *(_WORD *)(v20 + 12) = 2081;
      swift_bridgeObjectRetain(a1);
      uint64_t v23 = Array.description.getter(v22, &type metadata for String);
      uint64_t v24 = v8;
      uint64_t v25 = v7;
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v61 = sub_1003F11D4(v23, v27, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, aBlock, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease_n(a1, 2LL);
      uint64_t v7 = v25;
      uint64_t v8 = v24;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "unsubscribe in daemon for %{private,mask.hash}s",  (uint8_t *)v20,  0x16u);
      uint64_t v28 = v53;
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v14 = v54;
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
    }

    id v40 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
    uint64_t v41 = v55;
    uint64_t v42 = (void *)swift_allocObject(&unk_10095C7D0, 64LL, 7LL);
    uint64_t v43 = v59;
    void v42[2] = v59;
    v42[3] = a1;
    v42[4] = sub_10009C9E4;
    v42[5] = v14;
    v42[6] = v41;
    v42[7] = v40;
    aBlock[4] = (uint64_t)sub_1004725B0;
    aBlock[5] = (uint64_t)v42;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1001C31E8;
    aBlock[3] = (uint64_t)&unk_10095C7E8;
    uint64_t v44 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a1);
    id v45 = v43;
    swift_retain();
    swift_retain();
    id v46 = v40;
    uint64_t v47 = v60;
    static DispatchQoS.unspecified.getter(v46);
    uint64_t v61 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v48 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v49 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    unint64_t v50 = sub_100012FF8();
    uint64_t v51 = v58;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v49, v50, v7, v48);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v47, v51, v44);
    _Block_release(v44);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v51, v7);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v47, v57);
    swift_release();
    swift_release();
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = sub_10000A720(v29, (uint64_t)qword_100A2AE08);
    os_log_type_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.default.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "unsubscribe called with zero ids", v33, 2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    type metadata accessor for SecureLocationsError(0LL);
    uint64_t v35 = v34;
    uint64_t v61 = 4LL;
    unint64_t v36 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v37 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v61, v36, v35, v37);
    unint64_t v38 = (void *)aBlock[0];
    uint64_t v39 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    ((void (**)(void, void *))a4)[2](a4, v39);
    swift_release();
  }

uint64_t sub_100472104(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v5 = swift_allocObject(&unk_10095C708, 24LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t v20 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    _Block_copy(a3);
    swift_bridgeObjectRetain(a1);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v13);
    if (v6) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
LABEL_10:
      uint64_t v11 = swift_allocObject(&unk_10095C730, 32LL, 7LL);
      *(void *)(v11 + swift_weakDestroy(v0 + 16) = sub_10009C9E4;
      *(void *)(v11 + 24) = v5;
      swift_retain();
      swift_bridgeObjectRetain(v10);
      swift_retain();
      sub_10025C0EC((uint64_t)v10, 1, (uint64_t)sub_100472500, v11);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n(v10, 2LL);
      return swift_release();
    }

    goto LABEL_16;
  }

  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  _Block_copy(a3);
  swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_15;
  }
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v7 = 0LL;
  do
  {
    if ((a1 & 0xC000000000000001LL) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
    }
    else {
      id v8 = *(id *)(a1 + 8 * v7 + 32);
    }
    uint64_t v9 = v8;
    ++v7;
    os_log_type_t v19 = v8;
    sub_100471200(&v19, (unint64_t *)&v20);
  }

  while (v6 != v7);
  swift_bridgeObjectRelease();
  uint64_t v10 = v20;
  if (v20[2]) {
    goto LABEL_10;
  }
LABEL_16:
  if (qword_10099B5E0 != -1) {
LABEL_21:
  }
    swift_once(&qword_10099B5E0, sub_1005C6624);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2AE08);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "No legacyLocate locations to update in cache", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  a3[2](a3, 0LL);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004723B4(char a1, uint64_t a2)
{
  Class v4 = (Class)[(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  if ((a1 & 1) != 0)
  {
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v6 = String._bridgeToObjectiveC()();
    -[objc_class setValue:forKey:](v4, "setValue:forKey:", isa, v6);

    Class v4 = isa;
  }

  else
  {
    NSString v6 = String._bridgeToObjectiveC()();
    -[objc_class removeObjectForKey:](v4, "removeObjectForKey:", v6);
  }

  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, 0LL);
}

uint64_t sub_10047249C(uint64_t a1)
{
  return sub_10058E378(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1004724B8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1004724DC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100472500(uint64_t a1)
{
  return sub_1004714C8(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100472508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SecureLocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10047254C(uint64_t a1)
{
  return sub_10031AEA8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10047256C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));

  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1004725B0()
{
  return sub_100472830((uint64_t (*)(void, void, void, void, void, void))sub_10046FBC4);
}

uint64_t sub_1004725BC()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1004725F8(uint64_t a1)
{
  return sub_1004701F0( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(void **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100472608()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100472634()
{
}

uint64_t sub_10047263C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10047264C()
{
  swift_release(*(void *)(v0 + 48));
  swift_errorRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100472690()
{
  return sub_100472830((uint64_t (*)(void, void, void, void, void, void))sub_1004703FC);
}

void sub_10047269C(unsigned __int8 *a1@<X8>)
{
}

uint64_t sub_1004726B4()
{
  swift_release(*(void *)(v0 + 32));
  swift_errorRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1004726E8()
{
  return sub_100470F98( *(void **)(v0 + 16),  *(uint64_t (**)(uint64_t))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_1004726F4@<X0>(BOOL *a1@<X8>)
{
  return sub_1004716CC(v1, a1);
}

uint64_t sub_10047270C()
{
  swift_release(*(void *)(v0 + 32));
  swift_errorRelease(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100472748()
{
  return sub_100470AEC( *(void **)(v0 + 16),  *(void (**)(uint64_t))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_100472758(uint64_t a1)
{
  return sub_100470DA0(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100472770()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1004727A4()
{
  uint64_t v1 = *(void **)(v0 + 32);
  Transaction.capture()();
  return sub_10046FEA0(v1);
}

uint64_t sub_1004727E0()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100472824()
{
  return sub_100472830((uint64_t (*)(void, void, void, void, void, void))sub_10046F3D0);
}

uint64_t sub_100472830(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_100472844(uint64_t a1)
{
  return sub_10032BBCC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void **)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56));
}

uint64_t storeEnumTagSinglePayload for SecureLocationsEntitlement(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1004728A4 + 4 * byte_100803BF0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1004728C4 + 4 * byte_100803BF5[v4]))();
  }
}

_BYTE *sub_1004728A4(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1004728C4(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1004728CC(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1004728D4(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1004728DC(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1004728E4(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEntitlement()
{
  return &type metadata for SecureLocationsEntitlement;
}

unint64_t sub_100472904()
{
  unint64_t result = qword_1009AF530;
  if (!qword_1009AF530)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803D84, &type metadata for SecureLocationsEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009AF530);
  }

  return result;
}

unint64_t sub_10047294C()
{
  unint64_t result = qword_1009AF538;
  if (!qword_1009AF538)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803D0C, &type metadata for SecureLocationsEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009AF538);
  }

  return result;
}

void *sub_1004729E8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    id v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = type metadata accessor for BeaconIdentifier(0LL);
    v8((void *)((char *)a1 + *(int *)(v9 + 20)), (void *)((char *)a2 + *(int *)(v9 + 20)), v7);
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *(void *)((char *)a2 + v14 + 8);
    if (v17 >> 60 == 15)
    {
      __int128 v18 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v18;
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    }

    else
    {
      uint64_t v20 = *(void *)v16;
      sub_10001736C(*(void *)v16, v17);
      *(void *)uint64_t v15 = v20;
      *((void *)v15 + 1) = v17;
      uint64_t v21 = *((void *)v16 + 2);
      unint64_t v22 = *((void *)v16 + 3);
      sub_10001736C(v21, v22);
      *((void *)v15 + 2) = v21;
      *((void *)v15 + 3) = v22;
      uint64_t v23 = (uint64_t *)(v16 + 32);
      unint64_t v24 = *((void *)v16 + 5);
      if (v24 >> 60 == 15)
      {
        *((_OWORD *)v15 + 2) = *(_OWORD *)v23;
      }

      else
      {
        uint64_t v25 = *v23;
        sub_10001736C(*v23, *((void *)v16 + 5));
        *((void *)v15 + 4) = v25;
        *((void *)v15 + 5) = v24;
      }
    }

    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }

  return a1;
}

uint64_t sub_100472B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  uint64_t v6 = type metadata accessor for BeaconIdentifier(0LL);
  v5(a1 + *(int *)(v6 + 20), v4);
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  uint64_t v10 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    sub_100016F9C(*v10, v11);
    uint64_t result = sub_100016F9C(v10[2], v10[3]);
    unint64_t v12 = v10[5];
    if (v12 >> 60 != 15) {
      return sub_100016F9C(v10[4], v12);
    }
  }

  return result;
}

uint64_t sub_100472C2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a2 + v13 + 8);
  if (v16 >> 60 == 15)
  {
    __int128 v17 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = v17;
    *(_OWORD *)(v14 + 32) = *((_OWORD *)v15 + 2);
  }

  else
  {
    uint64_t v18 = *v15;
    sub_10001736C(*v15, v16);
    *(void *)uint64_t v14 = v18;
    *(void *)(v14 + 8) = v16;
    uint64_t v19 = v15[2];
    unint64_t v20 = v15[3];
    sub_10001736C(v19, v20);
    *(void *)(v14 + swift_weakDestroy(v0 + 16) = v19;
    *(void *)(v14 + 24) = v20;
    uint64_t v21 = v15 + 4;
    unint64_t v22 = v15[5];
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)(v14 + 32) = *(_OWORD *)v21;
    }

    else
    {
      uint64_t v23 = *v21;
      sub_10001736C(*v21, v15[5]);
      *(void *)(v14 + 32) = v23;
      *(void *)(v14 + 40) = v22;
    }
  }

  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100472D74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a2 + v13 + 8);
  if (*(void *)(a1 + v13 + 8) >> 60 != 15LL)
  {
    if (v16 >> 60 == 15)
    {
      sub_100472F9C((uint64_t *)v14);
      __int128 v20 = *((_OWORD *)v15 + 1);
      __int128 v19 = *((_OWORD *)v15 + 2);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = v20;
      *(_OWORD *)(v14 + 32) = v19;
      goto LABEL_17;
    }

    uint64_t v26 = *v15;
    sub_10001736C(*v15, v16);
    uint64_t v27 = *(void *)v14;
    unint64_t v28 = *(void *)(v14 + 8);
    *(void *)uint64_t v14 = v26;
    *(void *)(v14 + 8) = v16;
    sub_100016F9C(v27, v28);
    uint64_t v29 = v15[2];
    unint64_t v30 = v15[3];
    sub_10001736C(v29, v30);
    uint64_t v31 = *(void *)(v14 + 16);
    unint64_t v32 = *(void *)(v14 + 24);
    *(void *)(v14 + swift_weakDestroy(v0 + 16) = v29;
    *(void *)(v14 + 24) = v30;
    sub_100016F9C(v31, v32);
    id v33 = v15 + 4;
    unint64_t v25 = v15[5];
    if (*(void *)(v14 + 40) >> 60 == 15LL)
    {
      if (v25 >> 60 != 15)
      {
        uint64_t v34 = *v33;
        goto LABEL_12;
      }
    }

    else
    {
      if (v25 >> 60 != 15)
      {
        uint64_t v35 = *v33;
        sub_10001736C(*v33, v15[5]);
        uint64_t v36 = *(void *)(v14 + 32);
        unint64_t v37 = *(void *)(v14 + 40);
        *(void *)(v14 + 32) = v35;
        *(void *)(v14 + 40) = v25;
        sub_100016F9C(v36, v37);
        goto LABEL_17;
      }

      sub_1000F79D0(v14 + 32);
    }

    *(_OWORD *)(v14 + 32) = *(_OWORD *)v33;
    goto LABEL_17;
  }

  if (v16 >> 60 != 15)
  {
    uint64_t v21 = *v15;
    sub_10001736C(*v15, v16);
    *(void *)uint64_t v14 = v21;
    *(void *)(v14 + 8) = v16;
    uint64_t v22 = v15[2];
    unint64_t v23 = v15[3];
    sub_10001736C(v22, v23);
    *(void *)(v14 + swift_weakDestroy(v0 + 16) = v22;
    *(void *)(v14 + 24) = v23;
    unint64_t v24 = v15 + 4;
    unint64_t v25 = v15[5];
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)(v14 + 32) = *v24;
      goto LABEL_17;
    }

    uint64_t v34 = *(void *)v24;
LABEL_12:
    sub_10001736C(v34, v25);
    *(void *)(v14 + 32) = v34;
    *(void *)(v14 + 40) = v25;
    goto LABEL_17;
  }

  __int128 v17 = *(_OWORD *)v15;
  __int128 v18 = *((_OWORD *)v15 + 2);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = *((_OWORD *)v15 + 1);
  *(_OWORD *)(v14 + 32) = v18;
  *(_OWORD *)uint64_t v14 = v17;
LABEL_17:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t *sub_100472F9C(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100472FC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = (_OWORD *)(a1 + v13);
  unint64_t v16 = (_OWORD *)(a2 + v13);
  __int128 v17 = v16[1];
  _OWORD *v15 = *v16;
  v15[1] = v17;
  v15[2] = v16[2];
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_100473090(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = a2 + v13;
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v17 = *(void *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    sub_100472F9C(v14);
LABEL_4:
    __int128 v18 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((_OWORD *)v14 + 2) = *(_OWORD *)(v15 + 32);
    goto LABEL_10;
  }

  uint64_t v19 = *v14;
  uint64_t *v14 = *(void *)v15;
  v14[1] = v17;
  sub_100016F9C(v19, v16);
  uint64_t v20 = v14[2];
  unint64_t v21 = v14[3];
  *((_OWORD *)v14 + 1) = *(_OWORD *)(v15 + 16);
  sub_100016F9C(v20, v21);
  uint64_t v22 = (uint64_t *)(v15 + 32);
  unint64_t v23 = v14[5];
  if (v23 >> 60 != 15)
  {
    unint64_t v24 = *(void *)(v15 + 40);
    if (v24 >> 60 != 15)
    {
      uint64_t v25 = v14[4];
      v14[4] = *v22;
      v14[5] = v24;
      sub_100016F9C(v25, v23);
      goto LABEL_10;
    }

    sub_1000F79D0((uint64_t)(v14 + 4));
  }

  *((_OWORD *)v14 + 2) = *(_OWORD *)v22;
LABEL_10:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1004731FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100473208);
}

uint64_t sub_100473208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 3) {
    return v14 - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1004732AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004732B8);
}

uint64_t sub_1004732B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  return result;
}

uint64_t type metadata accessor for KeyGenerationBeaconInfo(uint64_t a1)
{
  uint64_t result = qword_1009AF598;
  if (!qword_1009AF598) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeyGenerationBeaconInfo);
  }
  return result;
}

uint64_t sub_100473398(uint64_t a1)
{
  uint64_t result = type metadata accessor for BeaconIdentifier(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      _OWORD v5[2] = "0";
      void v5[3] = &unk_100803E30;
      swift_initStructMetadata(a1, 256LL, 4LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t destroy for KeyGenerationBeaconInfo.Keys(uint64_t *a1)
{
  uint64_t result = sub_100016F9C(a1[2], a1[3]);
  unint64_t v3 = a1[5];
  if (v3 >> 60 != 15) {
    return sub_100016F9C(a1[4], v3);
  }
  return result;
}

uint64_t initializeWithCopy for KeyGenerationBeaconInfo.Keys(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_10001736C(v6, v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2 + 4;
  unint64_t v9 = a2[5];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v10 = *v8;
    sub_10001736C(*v8, v9);
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v9;
  }

  return a1;
}

uint64_t *assignWithCopy for KeyGenerationBeaconInfo.Keys(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_10001736C(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100016F9C(v10, v11);
  uint64_t v12 = a2 + 4;
  unint64_t v13 = a2[5];
  if ((unint64_t)a1[5] >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v15 = *v12;
      sub_10001736C(*v12, v13);
      uint64_t v16 = a1[4];
      unint64_t v17 = a1[5];
      a1[4] = v15;
      a1[5] = v13;
      sub_100016F9C(v16, v17);
      return a1;
    }

    sub_1000F79D0((uint64_t)(a1 + 4));
    goto LABEL_6;
  }

  if (v13 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v12;
    return a1;
  }

  uint64_t v14 = *v12;
  sub_10001736C(*v12, v13);
  a1[4] = v14;
  a1[5] = v13;
  return a1;
}

uint64_t *assignWithTake for KeyGenerationBeaconInfo.Keys(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_100016F9C(v6, v7);
  uint64_t v8 = (uint64_t *)(a2 + 32);
  unint64_t v9 = a1[5];
  if (v9 >> 60 != 15)
  {
    unint64_t v10 = *(void *)(a2 + 40);
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = a1[4];
      a1[4] = *v8;
      a1[5] = v10;
      sub_100016F9C(v11, v9);
      return a1;
    }

    sub_1000F79D0((uint64_t)(a1 + 4));
  }

  *((_OWORD *)a1 + 2) = *(_OWORD *)v8;
  return a1;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.Keys()
{
  return &type metadata for KeyGenerationBeaconInfo.Keys;
}

uint64_t sub_100473698(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009AF600);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004741EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KeyGenerationBeaconInfo.CodingKeys,  &type metadata for KeyGenerationBeaconInfo.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v25[0]) = 0;
  uint64_t v12 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v13 = sub_100007864(&qword_1009A96D8, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_1007FE0D4);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v25, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0LL);
    uint64_t v15 = v3 + v14[5];
    LOBYTE(v25[0]) = 1;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v25, v5, v16, v17);
    __int128 v18 = (_OWORD *)(v3 + v14[6]);
    __int128 v19 = v18[1];
    v25[0] = *v18;
    v25[1] = v19;
    void v25[2] = v18[2];
    char v24 = 2;
    unint64_t v20 = sub_1004742FC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( v25,  &v24,  v5,  &type metadata for KeyGenerationBeaconInfo.Keys,  v20);
    LOBYTE(v25[0]) = *(_BYTE *)(v3 + v14[7]);
    char v24 = 3;
    unint64_t v21 = sub_100474340();
    KeyedEncodingContainer.encode<A>(_:forKey:)( v25,  &v24,  v5,  &type metadata for KeyGenerationBeaconInfo.BeaconType,  v21);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004738B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v34 = type metadata accessor for BeaconIdentifier(0LL);
  __chkstk_darwin(v34);
  uint64_t v35 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = sub_100004AEC(&qword_1009AF5D8);
  uint64_t v7 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_100012ED8(a1, v13);
  unint64_t v15 = sub_1004741EC();
  unint64_t v37 = v9;
  uint64_t v16 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KeyGenerationBeaconInfo.CodingKeys,  &type metadata for KeyGenerationBeaconInfo.CodingKeys,  v15,  v13,  v14);
  if (v16) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v38 = v7;
  uint64_t v17 = (uint64_t)v12;
  unint64_t v30 = a1;
  uint64_t v18 = v32;
  uint64_t v19 = v33;
  LOBYTE(v39[0]) = 0;
  uint64_t v20 = sub_100007864(&qword_1009AF5E8, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_1007FE0FC);
  unint64_t v21 = v35;
  uint64_t v22 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v35, v34, v39, v36, v34, v20);
  sub_100474230((uint64_t)v21, v17);
  LOBYTE(v39[0]) = 1;
  uint64_t v23 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v19, v39, v22, v19, v23);
  (*(void (**)(uint64_t, void *, uint64_t))(v18 + 32))(v17 + v10[5], v5, v19);
  char v40 = 2;
  unint64_t v24 = sub_100474274();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for KeyGenerationBeaconInfo.Keys,  &v40,  v22,  &type metadata for KeyGenerationBeaconInfo.Keys,  v24);
  uint64_t v25 = (_OWORD *)(v17 + v10[6]);
  __int128 v26 = v39[1];
  *uint64_t v25 = v39[0];
  v25[1] = v26;
  void v25[2] = v39[2];
  char v40 = 3;
  unint64_t v27 = sub_1004742B8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( v39,  &type metadata for KeyGenerationBeaconInfo.BeaconType,  &v40,  v36,  &type metadata for KeyGenerationBeaconInfo.BeaconType,  v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v36);
  *(_BYTE *)(v17 + v10[7]) = v39[0];
  sub_100454534(v17, v31);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  return sub_100018C68(v17, type metadata accessor for KeyGenerationBeaconInfo);
}

uint64_t sub_100473CA4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009AF628);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10047495C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys,  &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys,  v11,  v9,  v10);
  __int128 v17 = *v3;
  char v16 = 0;
  unint64_t v12 = sub_10017EB68();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for PrivateKey, v12);
  if (!v2)
  {
    __int128 v17 = v3[1];
    char v16 = 1;
    unint64_t v13 = sub_10017F6C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for SharedSecretKey, v13);
    sub_1004749A0((uint64_t)(v3 + 2), (uint64_t)v18);
    sub_1004749A0((uint64_t)v18, (uint64_t)&v17);
    char v16 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v17, &v16, v5, &type metadata for SharedSecretKey, v13);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100473E38()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100473E7C()
{
}

Swift::Int sub_100473EA4(uint64_t a1)
{
  Swift::UInt64 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100473EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100474D8C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100473F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100474D8C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100473F8C()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100473FC0 + 4 * byte_100803DE0[*v0]))( 0xD000000000000010LL,  0x800000010084D8A0LL);
}

uint64_t sub_100473FC0()
{
  return 0x6574614472696170LL;
}

uint64_t sub_100473FD8()
{
  return 1937335659LL;
}

uint64_t sub_100473FE8()
{
  return 1701869940LL;
}

uint64_t sub_100473FF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100474384(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10047401C(uint64_t a1)
{
  unint64_t v2 = sub_1004741EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100474044(uint64_t a1)
{
  unint64_t v2 = sub_1004741EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10047406C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004738B4(a1, a2);
}

uint64_t sub_100474080(void *a1)
{
  return sub_100473698(a1);
}

uint64_t sub_100474094()
{
  unint64_t v1 = 0x6553646572616873LL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000015LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4B65746176697270LL;
  }
}

uint64_t sub_100474100@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100474518(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100474124(uint64_t a1)
{
  unint64_t v2 = sub_10047495C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10047414C(uint64_t a1)
{
  unint64_t v2 = sub_10047495C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100474174@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_1004741B4(void *a1)
{
  return sub_100473CA4(a1);
}

unint64_t sub_1004741EC()
{
  unint64_t result = qword_1009AF5E0;
  if (!qword_1009AF5E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008041B8, &type metadata for KeyGenerationBeaconInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF5E0);
  }

  return result;
}

uint64_t sub_100474230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconIdentifier(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100474274()
{
  unint64_t result = qword_1009AF5F0;
  if (!qword_1009AF5F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803E78, &type metadata for KeyGenerationBeaconInfo.Keys);
    atomic_store(result, (unint64_t *)&qword_1009AF5F0);
  }

  return result;
}

unint64_t sub_1004742B8()
{
  unint64_t result = qword_1009AF5F8;
  if (!qword_1009AF5F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804190, &type metadata for KeyGenerationBeaconInfo.BeaconType);
    atomic_store(result, (unint64_t *)&qword_1009AF5F8);
  }

  return result;
}

unint64_t sub_1004742FC()
{
  unint64_t result = qword_1009AF608;
  if (!qword_1009AF608)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803E50, &type metadata for KeyGenerationBeaconInfo.Keys);
    atomic_store(result, (unint64_t *)&qword_1009AF608);
  }

  return result;
}

unint64_t sub_100474340()
{
  unint64_t result = qword_1009AF610;
  if (!qword_1009AF610)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804168, &type metadata for KeyGenerationBeaconInfo.BeaconType);
    atomic_store(result, (unint64_t *)&qword_1009AF610);
  }

  return result;
}

uint64_t sub_100474384(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x6574614472696170LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v6 = 0xE800000000000000LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574614472696170LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 1937335659 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1937335659LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 3LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_100474518(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4B65746176697270LL && a2 == 0xEA00000000007965LL)
  {
    unint64_t v5 = 0xEA00000000007965LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B65746176697270LL, 0xEA00000000007965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6553646572616873LL && a2 == 0xEC00000074657263LL)
  {
    unint64_t v7 = 0xEC00000074657263LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6553646572616873LL, 0xEC00000074657263LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x800000010084E580LL)
  {
    swift_bridgeObjectRelease(0x800000010084E580LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010084E580LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_10047468C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009AF618);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10047495C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys,  &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v30 = 0;
  unint64_t v12 = sub_10017EB24();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v28,  &type metadata for PrivateKey,  &v30,  v5,  &type metadata for PrivateKey,  v12);
  uint64_t v14 = v28;
  unint64_t v13 = v29;
  char v30 = 1;
  sub_10001736C(v28, v29);
  unint64_t v27 = sub_10017F684();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v28,  &type metadata for SharedSecretKey,  &v30,  v5,  &type metadata for SharedSecretKey,  v27);
  uint64_t v25 = v14;
  unint64_t v26 = v13;
  char v30 = 2;
  uint64_t v15 = v28;
  unint64_t v16 = v29;
  sub_10001736C(v28, v29);
  unint64_t v17 = v27;
  unint64_t v27 = 0LL;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for SharedSecretKey,  &v30,  v5,  &type metadata for SharedSecretKey,  v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  unint64_t v18 = v29;
  unint64_t v27 = v28;
  uint64_t v19 = v25;
  unint64_t v20 = v26;
  sub_10001736C(v25, v26);
  unint64_t v21 = v16;
  sub_10001736C(v15, v16);
  uint64_t v22 = v27;
  sub_100018BE4(v27, v18);
  sub_100016F9C(v15, v21);
  sub_100016F9C(v19, v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_100016F9C(v19, v20);
  sub_100016F9C(v15, v21);
  uint64_t result = sub_1000182F0(v22, v18);
  *a2 = v19;
  a2[1] = v20;
  a2[2] = v15;
  a2[3] = v21;
  a2[4] = v22;
  a2[5] = v18;
  return result;
}

unint64_t sub_10047495C()
{
  unint64_t result = qword_1009AF620;
  if (!qword_1009AF620)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804118, &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF620);
  }

  return result;
}

uint64_t sub_1004749A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099CE70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.Keys.CodingKeys()
{
  return &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for KeyGenerationBeaconInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100474A48 + 4 * byte_100803DE9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100474A7C + 4 * byte_100803DE4[v4]))();
}

uint64_t sub_100474A7C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100474A84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100474A8CLL);
  }
  return result;
}

uint64_t sub_100474A98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100474AA0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100474AA4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100474AAC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.CodingKeys()
{
  return &type metadata for KeyGenerationBeaconInfo.CodingKeys;
}

uint64_t _s12searchpartyd23KeyGenerationBeaconInfoV10BeaconTypeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100474B14 + 4 * byte_100803DF3[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100474B48 + 4 * byte_100803DEE[v4]))();
}

uint64_t sub_100474B48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100474B50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100474B58LL);
  }
  return result;
}

uint64_t sub_100474B64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100474B6CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100474B70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100474B78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.BeaconType()
{
  return &type metadata for KeyGenerationBeaconInfo.BeaconType;
}

unint64_t sub_100474B98()
{
  unint64_t result = qword_1009AF630;
  if (!qword_1009AF630)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803F80, &type metadata for KeyGenerationBeaconInfo.BeaconType);
    atomic_store(result, (unint64_t *)&qword_1009AF630);
  }

  return result;
}

unint64_t sub_100474BE0()
{
  unint64_t result = qword_1009AF638;
  if (!qword_1009AF638)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804038, &type metadata for KeyGenerationBeaconInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF638);
  }

  return result;
}

unint64_t sub_100474C28()
{
  unint64_t result = qword_1009AF640;
  if (!qword_1009AF640)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008040F0, &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF640);
  }

  return result;
}

unint64_t sub_100474C70()
{
  unint64_t result = qword_1009AF648;
  if (!qword_1009AF648)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804060, &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF648);
  }

  return result;
}

unint64_t sub_100474CB8()
{
  unint64_t result = qword_1009AF650;
  if (!qword_1009AF650)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804088, &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF650);
  }

  return result;
}

unint64_t sub_100474D00()
{
  unint64_t result = qword_1009AF658;
  if (!qword_1009AF658)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803FA8, &type metadata for KeyGenerationBeaconInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF658);
  }

  return result;
}

unint64_t sub_100474D48()
{
  unint64_t result = qword_1009AF660;
  if (!qword_1009AF660)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803FD0, &type metadata for KeyGenerationBeaconInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF660);
  }

  return result;
}

unint64_t sub_100474D8C()
{
  unint64_t result = qword_1009AF668;
  if (!qword_1009AF668)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803F08, &type metadata for KeyGenerationBeaconInfo.BeaconType);
    atomic_store(result, (unint64_t *)&qword_1009AF668);
  }

  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyStore()
{
  return &type metadata for BeaconKeyStore;
}

uint64_t sub_100474DE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 24);
  int v3 = v2 + 4;
  uint64_t v4 = v2 + 5;
  os_unfair_lock_lock(v2 + 5);
  sub_1003AB4C8(v3, &v10);
  os_unfair_lock_unlock(v4);
  uint64_t v5 = 0LL;
  if (v10 == 1)
  {
    uint64_t v6 = *(void *)(v1 + 48);
    uint64_t v7 = sub_100004AEC(&qword_10099E758);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10008696C, v1, v6, (char *)&type metadata for () + 8, v7);
    uint64_t v8 = v10;
    if (v10)
    {
      uint64_t v5 = *(void *)(v10 + 24);
      swift_retain();
      swift_release(v8);
    }

    else
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t sub_100474EAC(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Table(0LL);
  uint64_t v64 = *(void *)(v4 - 8);
  uint64_t v65 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v61 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v57 = (char *)&v55 - v7;
  uint64_t v8 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  uint64_t v63 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v58 = (char *)&v55 - v12;
  uint64_t v13 = sub_100004AEC(&qword_10099E710);
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  os_log_t v66 = (char *)&v55 - v17;
  uint64_t v18 = type metadata accessor for Row(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v60 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v56 = (char *)&v55 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v55 = (char *)&v55 - v25;
  uint64_t v26 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v24);
  uint64_t v69 = _swiftEmptyArrayStorage;
  sub_100032AD4(0, v26 & ~(v26 >> 63), 0);
  unint64_t v27 = v69;
  uint64_t v28 = swift_retain();
  uint64_t v67 = dispatch thunk of _AnySequenceBox._makeIterator()(v28);
  uint64_t result = swift_release(a1);
  if (v26 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }

  unint64_t v62 = a2;
  if (v26)
  {
    id v59 = v11;
    do
    {
      dispatch thunk of _AnyIteratorBoxBase.next()(result);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1LL, v18);
      if ((_DWORD)result == 1) {
        goto LABEL_25;
      }
      uint64_t v30 = (uint64_t)v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))( v61,  (uint64_t)a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo,  v65);
      uint64_t v31 = (uint64_t)v60;
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v60, v16, v18);
      uint64_t v32 = v68;
      sub_1004792F0(v30, v31, (uint64_t)v11);
      if (v32)
      {
        swift_release(v27);
        swift_release(v67);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
        return swift_release(a2);
      }

      (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
      unint64_t v27 = v69;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v69);
      uint64_t v68 = 0LL;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100032AD4(0, v27[2] + 1LL, 1);
        unint64_t v27 = v69;
      }

      unint64_t v35 = v27[2];
      unint64_t v34 = v27[3];
      if (v35 >= v34 >> 1)
      {
        sub_100032AD4(v34 > 1, v35 + 1, 1);
        unint64_t v27 = v69;
      }

      __int128 v27[2] = v35 + 1;
      uint64_t v36 = (uint64_t)v27
      unint64_t v11 = v59;
      uint64_t result = sub_10045460C((uint64_t)v59, v36);
      --v26;
      a2 = v62;
    }

    while (v26);
  }

  dispatch thunk of _AnyIteratorBoxBase.next()(result);
  uint64_t v37 = (uint64_t)v66;
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v38(v66, 1LL, v18) == 1)
  {
LABEL_12:
    swift_release(v67);
    sub_100015794(v37, &qword_10099E710);
    swift_release(a2);
    return (uint64_t)v69;
  }

  else
  {
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 32);
    uint64_t v40 = (uint64_t)v58;
    uint64_t v42 = v55;
    uint64_t v41 = (uint64_t)v56;
    while (1)
    {
      v39(v42, v37, v18);
      uint64_t v43 = (uint64_t)v57;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))( v57,  (uint64_t)a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo,  v65);
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v41, v42, v18);
      uint64_t v44 = v68;
      sub_1004792F0(v43, v41, v40);
      if (v44) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v19 + 8))(v42, v18);
      id v45 = v69;
      char v46 = swift_isUniquelyReferenced_nonNull_native(v69);
      uint64_t v68 = 0LL;
      if ((v46 & 1) == 0)
      {
        sub_100032AD4(0, v45[2] + 1LL, 1);
        id v45 = v69;
      }

      uint64_t v47 = (uint64_t)v58;
      unint64_t v49 = v45[2];
      unint64_t v48 = v45[3];
      if (v49 >= v48 >> 1)
      {
        sub_100032AD4(v48 > 1, v49 + 1, 1);
        uint64_t v47 = (uint64_t)v58;
        id v45 = v69;
      }

      v45[2] = v49 + 1;
      uint64_t v50 = (uint64_t)v45
      uint64_t v40 = v47;
      uint64_t v51 = sub_10045460C(v47, v50);
      uint64_t v52 = v66;
      dispatch thunk of _AnyIteratorBoxBase.next()(v51);
      uint64_t v37 = (uint64_t)v52;
      int v53 = v38(v52, 1LL, v18);
      a2 = v62;
      if (v53 == 1) {
        goto LABEL_12;
      }
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v42, v18);
    swift_release(v67);
    uint64_t v54 = v69;
    swift_release(a2);
    a2 = v54;
    return swift_release(a2);
  }

uint64_t sub_100475420(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Connection.TransactionMode(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100474DE0();
  if (v12)
  {
    v18[1] = v18;
    uint64_t v13 = __chkstk_darwin(v12);
    v18[-6] = a3;
    v18[-5] = a4;
    v18[-4] = a1;
    LOBYTE(v18[-3]) = a2;
    v18[-2] = v13;
    (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for Connection.TransactionMode.deferred(_:),  v8);
    Connection.transaction(_:block:)(v11, sub_100164FBC, &v18[-8]);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return swift_release();
  }

  else
  {
    unint64_t v15 = sub_100086500();
    uint64_t v16 = swift_allocError(&type metadata for DatabaseError, v15, 0LL, 0LL);
    *(_DWORD *)uint64_t v17 = 2;
    *(_BYTE *)(v17 + 4) = 1;
    return swift_willThrow(v16);
  }

uint64_t sub_10047558C(void *a1)
{
  uint64_t v2 = type metadata accessor for Table(0LL);
  uint64_t v46 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v45 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v37 - v8;
  uint64_t v42 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v40 = *(void *)(v42 - 8);
  uint64_t v10 = __chkstk_darwin(v42);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v47 = (char *)&v37 - v13;
  __chkstk_darwin(v12);
  uint64_t v41 = (char *)&v37 - v14;
  unint64_t v15 = (char *)a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  uint64_t v43 = a1;
  uint64_t v51 = (char *)a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_10099B910 != -1) {
    swift_once(&qword_10099B910, sub_1007518C8);
  }
  uint64_t v16 = sub_10000A720(v4, (uint64_t)qword_100A2B478);
  uint64_t v17 = type metadata accessor for UUID(0LL);
  QueryType.subscript.getter(v16, v2);
  QueryType.subscript.getter(v16, v2);
  == infix<A>(_:_:)(v9, v7, v17, &protocol witness table for UUID, &protocol witness table for String);
  uint64_t v18 = v15;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v38 + 8);
  v19(v7, v4);
  v19(v9, v4);
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v20 = sub_10000A720(v4, (uint64_t)qword_100A2B3E8);
  uint64_t v37 = (uint64_t)v18;
  QueryType.subscript.getter(v20, v2);
  uint64_t v21 = v20;
  uint64_t v22 = v51;
  QueryType.subscript.getter(v21, v2);
  uint64_t v23 = v39;
  == infix<A>(_:_:)(v9, v7, v17, &protocol witness table for UUID, &protocol witness table for String);
  v19(v7, v4);
  v19(v9, v4);
  uint64_t v24 = v41;
  uint64_t v25 = v47;
  && infix(_:_:)(v47, v23);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v40 + 8);
  uint64_t v27 = v42;
  v26(v23, v42);
  v26(v25, v27);
  uint64_t v49 = v2;
  uint64_t v50 = &protocol witness table for Table;
  uint64_t v28 = sub_10000A7C8(v48);
  uint64_t v29 = v46;
  uint64_t v30 = *(void (**)(void *, char *, uint64_t))(v46 + 16);
  v30(v28, v22, v2);
  uint64_t v31 = v45;
  uint64_t v32 = v37;
  QueryType.join(_:on:)(v48, v24, v2, &protocol witness table for Table);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  uint64_t v49 = v2;
  uint64_t v50 = &protocol witness table for Table;
  uint64_t v33 = sub_10000A7C8(v48);
  v30(v33, v31, v2);
  uint64_t v34 = v44;
  sub_1004783FC((uint64_t)v48, v43);
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v2);
    v26(v24, v27);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  }

  else
  {
    uint64_t v35 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
    uint64_t v32 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v35);
    swift_release();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v2);
    v26(v24, v27);
  }

  return v32;
}

uint64_t sub_1004759C4(void *a1)
{
  uint64_t v2 = type metadata accessor for JoinType(0LL);
  uint64_t v46 = *(void *)(v2 - 8);
  uint64_t v47 = v2;
  __chkstk_darwin(v2);
  id v45 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Table(0LL);
  uint64_t v58 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v49 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v54 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v44 = *(void *)(v54 - 8);
  uint64_t v12 = __chkstk_darwin(v54);
  uint64_t v43 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v51 = (char *)&v40 - v15;
  __chkstk_darwin(v14);
  int v53 = (char *)&v40 - v16;
  uint64_t v17 = (char *)a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  unint64_t v48 = a1;
  uint64_t v52 = (char *)a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_10099B910 != -1) {
    swift_once(&qword_10099B910, sub_1007518C8);
  }
  uint64_t v18 = sub_10000A720(v6, (uint64_t)qword_100A2B478);
  uint64_t v19 = type metadata accessor for UUID(0LL);
  QueryType.subscript.getter(v18, v4);
  QueryType.subscript.getter(v18, v4);
  == infix<A>(_:_:)(v11, v9, v19, &protocol witness table for UUID, &protocol witness table for String);
  uint64_t v20 = v17;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v42 + 8);
  v21(v9, v6);
  v21(v11, v6);
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v22 = sub_10000A720(v6, (uint64_t)qword_100A2B3E8);
  uint64_t v41 = (uint64_t)v20;
  QueryType.subscript.getter(v22, v4);
  uint64_t v23 = v52;
  QueryType.subscript.getter(v22, v4);
  uint64_t v24 = v43;
  == infix<A>(_:_:)(v11, v9, v19, &protocol witness table for UUID, &protocol witness table for String);
  v21(v9, v6);
  v21(v11, v6);
  uint64_t v25 = v53;
  uint64_t v26 = v51;
  && infix(_:_:)(v51, v24);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v44 + 8);
  uint64_t v28 = v54;
  v27(v24, v54);
  uint64_t v51 = (char *)v27;
  v27(v26, v28);
  uint64_t v29 = v45;
  uint64_t v30 = v46;
  uint64_t v31 = v47;
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v45, enum case for JoinType.leftOuter(_:), v47);
  uint64_t v56 = v4;
  uint64_t v57 = &protocol witness table for Table;
  uint64_t v32 = sub_10000A7C8(v55);
  uint64_t v33 = *(void (**)(void *, char *, uint64_t))(v58 + 16);
  v33(v32, v23, v4);
  uint64_t v34 = v49;
  uint64_t v35 = v41;
  QueryType.join(_:_:on:)(v29, v55, v25, v4, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v31);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
  uint64_t v56 = v4;
  uint64_t v57 = &protocol witness table for Table;
  uint64_t v36 = sub_10000A7C8(v55);
  v33(v36, v34, v4);
  uint64_t v37 = v50;
  sub_1004783FC((uint64_t)v55, v48);
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v34, v4);
    ((void (*)(char *, uint64_t))v51)(v53, v54);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
  }

  else
  {
    uint64_t v38 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    uint64_t v35 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v38);
    swift_release();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v34, v4);
    ((void (*)(char *, uint64_t))v51)(v53, v54);
  }

  return v35;
}

uint64_t sub_100475E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Connection.TransactionMode(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100474DE0();
  if (v10)
  {
    v16[1] = v16;
    uint64_t v11 = __chkstk_darwin(v10);
    v16[-4] = a3;
    v16[-3] = a1;
    v16[-2] = v11;
    v16[-1] = a2;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for Connection.TransactionMode.deferred(_:),  v6);
    Connection.transaction(_:block:)(v9, sub_10047A254, &v16[-6]);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return swift_release();
  }

  else
  {
    unint64_t v13 = sub_100086500();
    uint64_t v14 = swift_allocError(&type metadata for DatabaseError, v13, 0LL, 0LL);
    *(_DWORD *)uint64_t v15 = 2;
    *(_BYTE *)(v15 + 4) = 1;
    return swift_willThrow(v14);
  }

uint64_t sub_100475FD8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v64 = a1;
  uint64_t v55 = a3;
  uint64_t v4 = type metadata accessor for JoinType(0LL);
  uint64_t v62 = *(void *)(v4 - 8);
  uint64_t v63 = v4;
  __chkstk_darwin(v4);
  uint64_t v61 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = type metadata accessor for Table(0LL);
  uint64_t v71 = *(void *)(v68 - 8);
  uint64_t v6 = __chkstk_darwin(v68);
  uint64_t v70 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)&v55 - v8;
  uint64_t v76 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v57 = *(void *)(v76 - 8);
  uint64_t v9 = __chkstk_darwin(v76);
  uint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v55 - v12;
  uint64_t v72 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v59 = *(void *)(v72 - 8);
  uint64_t v14 = __chkstk_darwin(v72);
  uint64_t v60 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v80 = (char *)&v55 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  id v75 = (char *)&v55 - v19;
  __chkstk_darwin(v18);
  uint64_t v69 = (char *)&v55 - v20;
  uint64_t v73 = (char *)a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  os_log_t v66 = a2;
  uint64_t v74 = (char *)a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_10099B910 != -1) {
    swift_once(&qword_10099B910, sub_1007518C8);
  }
  uint64_t v21 = v76;
  uint64_t v22 = sub_10000A720(v76, (uint64_t)qword_100A2B478);
  uint64_t v23 = type metadata accessor for UUID(0LL);
  uint64_t v24 = v68;
  QueryType.subscript.getter(v22, v68);
  uint64_t v58 = v22;
  QueryType.subscript.getter(v22, v24);
  == infix<A>(_:_:)(v13, v11, v23, &protocol witness table for UUID, &protocol witness table for String);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v57 + 8);
  v25(v11, v21);
  v25(v13, v21);
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v26 = v76;
  uint64_t v27 = sub_10000A720(v76, (uint64_t)qword_100A2B3E8);
  uint64_t v57 = v27;
  uint64_t v28 = v68;
  QueryType.subscript.getter(v27, v68);
  QueryType.subscript.getter(v27, v28);
  uint64_t v29 = v80;
  == infix<A>(_:_:)(v13, v11, v23, &protocol witness table for UUID, &protocol witness table for String);
  v25(v11, v26);
  v25(v13, v26);
  uint64_t v30 = v69;
  uint64_t v31 = v75;
  && infix(_:_:)(v75, v29);
  uint64_t v56 = v25;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v59 + 8);
  uint64_t v33 = v29;
  uint64_t v34 = v72;
  v32(v33, v72);
  v32(v31, v34);
  uint64_t v35 = v61;
  uint64_t v36 = v62;
  uint64_t v37 = v63;
  (*(void (**)(char *, void, uint64_t))(v62 + 104))(v61, enum case for JoinType.leftOuter(_:), v63);
  uint64_t v78 = v28;
  uint64_t v79 = &protocol witness table for Table;
  uint64_t v38 = sub_10000A7C8(v77);
  uint64_t v59 = *(void *)(v71 + 16);
  ((void (*)(void *, char *, uint64_t))v59)(v38, v74, v28);
  QueryType.join(_:_:on:)(v35, v77, v30, v28, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v37);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v77);
  QueryType.subscript.getter(v58, v28);
  uint64_t v39 = v76;
  uint64_t v40 = v64;
  == infix<A>(_:_:)(v13, v64, v23, &protocol witness table for UUID, &protocol witness table for String);
  uint64_t v41 = v56;
  v56(v13, v39);
  QueryType.subscript.getter(v57, v28);
  uint64_t v42 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v43 = v60;
  == infix<A>(_:_:)( v13,  v40 + *(int *)(v42 + 20),  v23,  &protocol witness table for UUID,  &protocol witness table for String);
  v41(v13, v39);
  uint64_t v44 = v72;
  id v45 = v75;
  uint64_t v46 = v80;
  && infix(_:_:)(v80, v43);
  v32(v43, v44);
  v32(v46, v44);
  uint64_t v47 = v65;
  unint64_t v48 = v70;
  QueryType.filter(_:)(v45, v28, &protocol witness table for Table);
  v32(v45, v44);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v71 + 8);
  v49(v48, v28);
  uint64_t v78 = v28;
  uint64_t v79 = &protocol witness table for Table;
  uint64_t v50 = sub_10000A7C8(v77);
  ((void (*)(void *, char *, uint64_t))v59)(v50, v47, v28);
  uint64_t v51 = v67;
  sub_1004783FC((uint64_t)v77, v66);
  if (v51)
  {
    v49(v47, v28);
    v32(v69, v44);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v77);
  }

  else
  {
    uint64_t v53 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v77);
    dispatch thunk of _AnySequenceBox._makeIterator()(v53);
    uint64_t v54 = swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()(v54);
    swift_release();
    v49(v47, v28);
    return ((uint64_t (*)(char *, uint64_t))v32)(v69, v44);
  }

uint64_t sub_100476670(uint64_t a1, void *a2)
{
  uint64_t v56 = a1;
  uint64_t v3 = type metadata accessor for JoinType(0LL);
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  __chkstk_darwin(v3);
  uint64_t v50 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Table(0LL);
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v55 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v57 = (char *)&v43 - v8;
  uint64_t v9 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v51 = *(char **)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v43 - v13;
  uint64_t v15 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v53 = *(void *)(v15 - 8);
  uint64_t v54 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v52 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v60 = (char *)a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  uint64_t v58 = a2;
  uint64_t v47 = (char *)a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v20 = sub_10000A720(v9, (uint64_t)qword_100A2B3E8);
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v45 = v20;
  QueryType.subscript.getter(v20, v5);
  uint64_t v22 = v20;
  uint64_t v23 = v47;
  QueryType.subscript.getter(v22, v5);
  == infix<A>(_:_:)(v14, v12, v21, &protocol witness table for UUID, &protocol witness table for String);
  uint64_t v24 = (void (*)(char *, uint64_t))*((void *)v51 + 1);
  uint64_t v43 = v24;
  uint64_t v44 = v9;
  v24(v12, v9);
  v24(v14, v9);
  uint64_t v25 = v48;
  uint64_t v26 = v49;
  uint64_t v27 = v50;
  (*(void (**)(char *, void, uint64_t))(v48 + 104))(v50, enum case for JoinType.leftOuter(_:), v49);
  uint64_t v62 = v5;
  uint64_t v63 = &protocol witness table for Table;
  uint64_t v28 = sub_10000A7C8(v61);
  uint64_t v46 = *(void (**)(void *, char *, uint64_t))(v64 + 16);
  v46(v28, v23, v5);
  uint64_t v29 = v55;
  uint64_t v51 = v19;
  QueryType.join(_:_:on:)(v27, v61, v19, v5, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
  QueryType.subscript.getter(v45, v5);
  uint64_t v30 = v52;
  == infix<A>(_:_:)(v14, v56, v21, &protocol witness table for UUID, &protocol witness table for String);
  v43(v14, v44);
  uint64_t v31 = v57;
  uint64_t v32 = (uint64_t)v29;
  QueryType.filter(_:)(v30, v5, &protocol witness table for Table);
  uint64_t v33 = v54;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v53 + 8);
  v34(v30, v54);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v64 + 8);
  v35(v29, v5);
  uint64_t v62 = v5;
  uint64_t v63 = &protocol witness table for Table;
  uint64_t v36 = sub_10000A7C8(v61);
  v46(v36, v31, v5);
  uint64_t v37 = v59;
  uint64_t v38 = sub_1004783FC((uint64_t)v61, v58);
  if (v37)
  {
    v35(v31, v5);
    v34(v51, v33);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
  }

  else
  {
    uint64_t v39 = v38;
    uint64_t v40 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
    uint64_t v41 = dispatch thunk of _AnySequenceBox._makeIterator()(v40);
    swift_release(v39);
    uint64_t v32 = sub_100300258(v41);
    swift_release(v41);
    v35(v31, v5);
    v34(v51, v33);
  }

  return v32;
}

uint64_t sub_100476AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v191 = a4;
  uint64_t v220 = a3;
  uint64_t v216 = a2;
  uint64_t v190 = sub_100004AEC(&qword_1009A9010);
  uint64_t v189 = *(void *)(v190 - 8);
  __chkstk_darwin(v190);
  uint64_t v188 = (char *)v174 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v219 = type metadata accessor for OnConflict(0LL);
  uint64_t v215 = *(void *)(v219 - 8);
  uint64_t v6 = __chkstk_darwin(v219);
  uint64_t v203 = (char *)v174 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v213 = (char *)v174 - v8;
  uint64_t v206 = type metadata accessor for Insert(0LL);
  uint64_t v205 = *(void *)(v206 - 8);
  uint64_t v9 = __chkstk_darwin(v206);
  char v187 = (char *)v174 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v214 = (char *)v174 - v11;
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v12);
  uint64_t v198 = (uint64_t)v174 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v194 = (void *)type metadata accessor for Delete(0LL);
  *(void *)&__int128 v186 = *(v194 - 1);
  uint64_t v14 = __chkstk_darwin(v194);
  uint64_t v179 = (char *)v174 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v180 = (uint64_t)v174 - v17;
  __chkstk_darwin(v16);
  uint64_t v181 = (char *)v174 - v18;
  uint64_t v19 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  uint64_t v182 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v193 = (uint64_t)v174 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v174 - v22;
  uint64_t v226 = type metadata accessor for UUID(0LL);
  unint64_t v24 = *(void *)(v226 - 8);
  uint64_t v25 = __chkstk_darwin(v226);
  char v200 = (char *)v174 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)v174 - v27;
  uint64_t v208 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v217 = *(void *)(v208 - 8);
  __chkstk_darwin(v208);
  uint64_t v207 = (char *)v174 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for Table(0LL);
  uint64_t v210 = *(void *)(v30 - 8);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v202 = (char *)v174 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v184 = (char *)v174 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  unint64_t v197 = (unint64_t)v174 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v39 = (char *)v174 - v38;
  __chkstk_darwin(v37);
  uint64_t v201 = (char *)v174 - v40;
  *(void *)&__int128 v178 = a1;
  uint64_t v41 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  unint64_t v183 = v24;
  uint64_t v204 = v19;
  uint64_t v42 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v43 = sub_10000A720(v42, (uint64_t)qword_100A2B3E8);
  uint64_t v224 = v42;
  uint64_t v225 = (void *)sub_1000372EC( &qword_10099E7D0,  &qword_10099E6D8,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  uint64_t v44 = sub_10000A7C8(&v222);
  uint64_t v45 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16LL);
  uint64_t v218 = v43;
  v45(v44, v43, v42);
  uint64_t v211 = v41;
  SchemaType.select(_:_:)(&v222, _swiftEmptyArrayStorage, v30, &protocol witness table for Table);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v222);
  if (qword_10099B910 != -1) {
    swift_once(&qword_10099B910, sub_1007518C8);
  }
  uint64_t v46 = sub_10000A720(v42, (uint64_t)qword_100A2B478);
  uint64_t v47 = v207;
  uint64_t v212 = v46;
  == infix<A>(_:_:)(v46, v216, v226, &protocol witness table for UUID, &protocol witness table for String);
  uint64_t v48 = v201;
  QueryType.filter(_:)(v47, v30, &protocol witness table for Table);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v217 + 8);
  v49(v47, v208);
  uint64_t v50 = v210;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v210 + 8);
  uint64_t v195 = (uint64_t)v39;
  v51(v39, v30);
  uint64_t v224 = v30;
  uint64_t v225 = &protocol witness table for Table;
  uint64_t v52 = (char *)sub_10000A7C8(&v222);
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v53(v52, v48, v30);
  uint64_t v54 = v221;
  uint64_t v210 = Connection.prepare(_:)(&v222);
  if (v54)
  {
    v51(v48, v30);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v222);
  }

  uint64_t v199 = v49;
  char v192 = v53;
  uint64_t v209 = (uint64_t (*)(char *, uint64_t))v51;
  uint64_t v217 = v30;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v222);
  uint64_t v56 = v226;
  uint64_t v57 = dispatch thunk of _AnySequenceBox._map<A>(_:)(sub_100086428, 0LL, v226);
  uint64_t v221 = 0LL;
  swift_release();
  uint64_t v196 = sub_1006F1060(v57);
  swift_bridgeObjectRelease();
  uint64_t v58 = v191;
  int64_t v59 = *(void *)(v191 + 16);
  uint64_t v60 = _swiftEmptyArrayStorage;
  unint64_t v61 = v183;
  uint64_t v210 = v59;
  if (v59)
  {
    uint64_t v222 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000328D0(0, v59, 0);
    uint64_t v62 = v58 + ((*(unsigned __int8 *)(v182 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80));
    uint64_t v63 = *(void *)(v182 + 72);
    do
    {
      sub_100454534(v62, (uint64_t)v23);
      uint64_t v64 = type metadata accessor for BeaconIdentifier(0LL);
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v28, &v23[*(int *)(v64 + 20)], v56);
      sub_1004545D0((uint64_t)v23);
      uint64_t v60 = (void *)v222;
      if ((swift_isUniquelyReferenced_nonNull_native(v222) & 1) == 0)
      {
        sub_1000328D0(0, v60[2] + 1LL, 1);
        uint64_t v60 = (void *)v222;
      }

      unint64_t v66 = v60[2];
      unint64_t v65 = v60[3];
      if (v66 >= v65 >> 1)
      {
        sub_1000328D0(v65 > 1, v66 + 1, 1);
        uint64_t v60 = (void *)v222;
      }

      v60[2] = v66 + 1;
      unint64_t v67 = (unint64_t)v60
      uint64_t v56 = v226;
      (*(void (**)(unint64_t, char *, uint64_t))(v61 + 32))(v67, v28, v226);
      uint64_t v222 = (uint64_t)v60;
      v62 += v63;
      --v59;
    }

    while (v59);
    uint64_t v58 = v191;
  }

  uint64_t v68 = sub_1006F1060((uint64_t)v60);
  swift_bridgeObjectRelease();
  uint64_t v69 = v193;
  uint64_t v70 = v218;
  uint64_t v71 = v207;
  uint64_t v72 = v199;
  if (*(void *)(v68 + 16) > *(void *)(v196 + 16) >> 3)
  {
    uint64_t v73 = sub_1003CC7D4(v68, v196);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v222 = v196;
    sub_1003CBB18(v68);
    swift_bridgeObjectRelease();
    uint64_t v73 = (void *)v222;
  }

  uint64_t v74 = v216;
  if (!v73[2])
  {
    swift_bridgeObjectRelease();
    uint64_t v86 = v217;
    uint64_t v87 = v69;
    if (v210) {
      goto LABEL_53;
    }
    return v209(v201, v86);
  }

  == infix<A>(_:_:)(v212, v216, v56, &protocol witness table for UUID, &protocol witness table for String);
  uint64_t v75 = v217;
  QueryType.filter(_:)(v71, v217, &protocol witness table for Table);
  uint64_t v76 = v208;
  v72(v71, v208);
  uint64_t v185 = v73;
  uint64_t v222 = (uint64_t)v73;
  uint64_t v77 = sub_100004AEC(&qword_1009A0B30);
  uint64_t v78 = sub_1000372EC(&qword_10099E880, &qword_1009A0B30, (uint64_t)&protocol conformance descriptor for Set<A>);
  Collection<>.contains(_:)(v70, v77, v78, &protocol witness table for UUID);
  uint64_t v79 = v195;
  uint64_t v80 = v197;
  QueryType.filter(_:)(v71, v75, &protocol witness table for Table);
  uint64_t v81 = v71;
  uint64_t v82 = v79;
  v72(v81, v76);
  uint64_t v83 = (void (*)(uint64_t, uint64_t))v209;
  v209((char *)v80, v75);
  uint64_t v84 = v181;
  QueryType.delete()(v75, &protocol witness table for Table);
  v83(v79, v75);
  uint64_t v85 = v221;
  Connection.run(_:)(v84);
  if (v85)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void *))(v186 + 8))(v84, v194);
    return ((uint64_t (*)(char *, uint64_t))v83)(v201, v75);
  }

  uint64_t v88 = 0LL;
  uint64_t v89 = v185[7];
  uint64_t v176 = v185 + 7;
  uint64_t v90 = 1LL << *((_BYTE *)v185 + 32);
  uint64_t v91 = -1LL;
  if (v90 < 64) {
    uint64_t v91 = ~(-1LL << v90);
  }
  unint64_t v92 = v91 & v89;
  v174[2] = v178 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  v174[1] = v178 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keySyncMetadata;
  int64_t v177 = (unint64_t)(v90 + 63) >> 6;
  uint64_t v93 = v198;
  char v94 = v200;
  uint64_t v95 = v184;
  uint64_t v96 = v207;
  while (1)
  {
    if (v92)
    {
      unint64_t v197 = (v92 - 1) & v92;
      unint64_t v97 = __clz(__rbit64(v92)) | (v88 << 6);
      goto LABEL_41;
    }

    if (__OFADD__(v88++, 1LL)) {
      break;
    }
    if (v88 >= v177) {
      goto LABEL_51;
    }
    unint64_t v99 = v176[v88];
    if (!v99)
    {
      uint64_t v100 = v88 + 1;
      if (v88 + 1 >= v177) {
        goto LABEL_51;
      }
      unint64_t v99 = v176[v100];
      if (!v99)
      {
        uint64_t v100 = v88 + 2;
        if (v88 + 2 >= v177) {
          goto LABEL_51;
        }
        unint64_t v99 = v176[v100];
        if (!v99)
        {
          uint64_t v100 = v88 + 3;
          if (v88 + 3 >= v177)
          {
LABEL_51:
            uint64_t v221 = 0LL;
            uint64_t v87 = v193;
            unint64_t v116 = (unint64_t)v194;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v93, 1LL, 1LL, v56);
            swift_release();
            uint64_t v74 = v216;
            uint64_t v58 = v191;
            uint64_t v70 = v218;
LABEL_52:
            (*(void (**)(char *, unint64_t))(v186 + 8))(v181, v116);
            uint64_t v86 = v217;
            if (v210)
            {
LABEL_53:
              uint64_t v179 = (char *)(v178 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys);
              uint64_t v117 = v58
                   + ((*(unsigned __int8 *)(v182 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80));
              LODWORD(v207) = enum case for OnConflict.replace(_:);
              uint64_t v185 = *(void **)(v182 + 72);
              swift_bridgeObjectRetain(v58);
              __int128 v186 = xmmword_1007E8290;
              __int128 v178 = xmmword_1007E8280;
              while (1)
              {
                uint64_t v208 = v117;
                sub_100454534(v117, v87);
                uint64_t v199 = *(void (**)(char *, uint64_t))(v215 + 104);
                ((void (*)(char *, void, uint64_t))v199)(v213, v207, v219);
                uint64_t v120 = sub_100004AEC(&qword_10099E810);
                uint64_t v121 = *(void *)(type metadata accessor for Setter(0LL) - 8);
                uint64_t v122 = *(void *)(v121 + 72);
                uint64_t v123 = *(unsigned __int8 *)(v121 + 80);
                uint64_t v124 = (v123 + 32) & ~v123;
                char v200 = (char *)(4 * v122);
                uint64_t v198 = v120;
                uint64_t v194 = (void *)(v123 | 7);
                uint64_t v125 = swift_allocObject(v120, v124 + 4 * v122, v123 | 7);
                *(_OWORD *)(v125 + swift_weakDestroy(v0 + 16) = v186;
                unint64_t v197 = v124;
                <- infix<A>(_:_:)(v212, v74, v56, &protocol witness table for UUID);
                uint64_t v196 = v87 + *(int *)(type metadata accessor for BeaconIdentifier(0LL) + 20);
                <- infix<A>(_:_:)(v70, v196, v56, &protocol witness table for UUID);
                if (qword_10099B918 != -1) {
                  swift_once(&qword_10099B918, sub_100751964);
                }
                uint64_t v195 = 2 * v122;
                uint64_t v126 = sub_100004AEC(&qword_10099E700);
                uint64_t v127 = sub_10000A720(v126, (uint64_t)qword_100A2B490);
                uint64_t v128 = v204;
                uint64_t v129 = v87 + *(int *)(v204 + 20);
                uint64_t v130 = type metadata accessor for Date(0LL);
                <- infix<A>(_:_:)(v127, v129, v130, &protocol witness table for Date);
                if (qword_10099B930 != -1) {
                  swift_once(&qword_10099B930, sub_100751B1C);
                }
                uint64_t v131 = sub_100004AEC(&qword_10099E730);
                uint64_t v132 = sub_10000A720(v131, (uint64_t)qword_100A2B4D8);
                uint64_t v222 = *(unsigned __int8 *)(v87 + *(int *)(v128 + 28));
                unint64_t v133 = sub_100086818();
                <- infix<A>(_:_:)(v132, &v222, &type metadata for UInt64, v133);
                uint64_t v134 = v87;
                uint64_t v136 = v213;
                uint64_t v135 = v214;
                uint64_t v86 = v217;
                QueryType.insert(or:_:)(v213, v125, v217, &protocol witness table for Table);
                swift_bridgeObjectRelease();
                uint64_t v137 = *(void (**)(char *, uint64_t))(v215 + 8);
                v137(v136, v219);
                uint64_t v138 = v221;
                Connection.run(_:)(v135);
                uint64_t v221 = v138;
                if (v138)
                {
                  (*(void (**)(char *, uint64_t))(v205 + 8))(v214, v206);
                  sub_1004545D0(v134);
                  swift_bridgeObjectRelease();
                  return v209(v201, v86);
                }

                uint64_t v139 = (uint64_t *)(v134 + *(int *)(v128 + 24));
                unint64_t v140 = v139[1];
                if (v140 >> 60 == 15)
                {
                  uint64_t v87 = v134;
                  uint64_t v118 = *(void (**)(char *, uint64_t))(v205 + 8);
                  uint64_t v119 = v206;
                  uint64_t v70 = v218;
                }

                else
                {
                  uint64_t v180 = 3 * v122;
                  uint64_t v181 = (char *)v137;
                  uint64_t v141 = *v139;
                  unint64_t v142 = v140;
                  uint64_t v144 = v139[2];
                  unint64_t v143 = v139[3];
                  uint64_t v146 = v139[4];
                  unint64_t v145 = v139[5];
                  v192(v202, v179, v86);
                  ((void (*)(char *, void, uint64_t))v199)(v203, v207, v219);
                  uint64_t v147 = swift_allocObject(v198, v197 + 5 * v122, v194);
                  *(_OWORD *)(v147 + swift_weakDestroy(v0 + 16) = v178;
                  uint64_t v182 = v147;
                  unint64_t v197 = v141;
                  uint64_t v194 = (void *)v142;
                  sub_10001736C(v141, v142);
                  uint64_t v198 = v144;
                  uint64_t v199 = (void (*)(char *, uint64_t))v143;
                  sub_10001736C(v144, v143);
                  uint64_t v184 = (char *)v146;
                  unint64_t v183 = v145;
                  sub_100018BE4(v146, v145);
                  uint64_t v148 = v226;
                  <- infix<A>(_:_:)(v212, v216, v226, &protocol witness table for UUID);
                  <- infix<A>(_:_:)(v218, v196, v148, &protocol witness table for UUID);
                  if (qword_10099B920 != -1) {
                    swift_once(&qword_10099B920, sub_1007519F4);
                  }
                  uint64_t v149 = sub_100004AEC(&qword_10099E780);
                  uint64_t v150 = sub_10000A720(v149, (uint64_t)qword_100A2B4A8);
                  uint64_t v222 = v197;
                  __int128 v223 = (void (*)(void, void, void))v194;
                  <- infix<A>(_:_:)(v150, &v222, &type metadata for Data, &protocol witness table for Data);
                  uint64_t v151 = v181;
                  if (qword_10099B900 != -1) {
                    swift_once(&qword_10099B900, sub_1007517A4);
                  }
                  uint64_t v152 = sub_10000A720(v149, (uint64_t)qword_100A2B448);
                  uint64_t v222 = v198;
                  __int128 v223 = (void (*)(void, void, void))v199;
                  <- infix<A>(_:_:)(v152, &v222, &type metadata for Data, &protocol witness table for Data);
                  unint64_t v153 = v183;
                  if (qword_10099B928 != -1) {
                    swift_once(&qword_10099B928, sub_100751A88);
                  }
                  uint64_t v154 = v190;
                  uint64_t v155 = sub_10000A720(v190, (uint64_t)qword_100A2B4C0);
                  uint64_t v156 = v189;
                  uint64_t v157 = v188;
                  (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v188, v155, v154);
                  uint64_t v158 = (uint64_t)v184;
                  if (v153 >> 60 == 15) {
                    uint64_t v159 = 0LL;
                  }
                  else {
                    uint64_t v159 = v184;
                  }
                  if (v153 >> 60 == 15) {
                    unint64_t v160 = 0xF000000000000000LL;
                  }
                  else {
                    unint64_t v160 = v153;
                  }
                  uint64_t v222 = (uint64_t)v159;
                  __int128 v223 = (void (*)(void, void, void))v160;
                  <- infix<A>(_:_:)(v157, &v222, &type metadata for Data, &protocol witness table for Data);
                  (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v154);
                  uint64_t v161 = v187;
                  char v162 = v203;
                  uint64_t v86 = v217;
                  uint64_t v163 = v202;
                  QueryType.insert(or:_:)(v203, v182, v217, &protocol witness table for Table);
                  swift_bridgeObjectRelease();
                  ((void (*)(char *, uint64_t))v151)(v162, v219);
                  v209(v163, v86);
                  uint64_t v164 = v221;
                  Connection.run(_:)(v161);
                  if (v164)
                  {
                    sub_100479D50( v197,  (unint64_t)v194,  v198,  (uint64_t)v199,  v158,  v153,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
                    uint64_t v165 = *(void (**)(char *, uint64_t))(v205 + 8);
                    uint64_t v166 = v206;
                    v165(v161, v206);
                    v165(v214, v166);
                    sub_1004545D0(v193);
                    swift_bridgeObjectRelease();
                    return v209(v201, v86);
                  }

                  uint64_t v221 = 0LL;
                  sub_100479D50( v197,  (unint64_t)v194,  v198,  (uint64_t)v199,  v158,  v153,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
                  uint64_t v118 = *(void (**)(char *, uint64_t))(v205 + 8);
                  uint64_t v119 = v206;
                  v118(v161, v206);
                  uint64_t v70 = v218;
                  uint64_t v87 = v193;
                }

                v118(v214, v119);
                sub_1004545D0(v87);
                uint64_t v117 = (uint64_t)v185 + v208;
                --v210;
                uint64_t v74 = v216;
                uint64_t v56 = v226;
                if (!v210)
                {
                  swift_bridgeObjectRelease();
                  return v209(v201, v86);
                }
              }
            }

            return v209(v201, v86);
          }

          unint64_t v99 = v176[v100];
          if (!v99)
          {
            while (1)
            {
              uint64_t v88 = v100 + 1;
              if (__OFADD__(v100, 1LL)) {
                goto LABEL_83;
              }
              if (v88 >= v177) {
                goto LABEL_51;
              }
              unint64_t v99 = v176[v88];
              ++v100;
              if (v99) {
                goto LABEL_40;
              }
            }
          }
        }
      }

      uint64_t v88 = v100;
    }

uint64_t sub_1004783FC(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_1000799BC();
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = Connection.prepare(_:)(a1);
    if (v2)
    {
      return swift_release(v6);
    }

    else
    {
      uint64_t v12 = v7;
      swift_retain();
      uint64_t v13 = swift_retain();
      uint64_t v14 = sub_100474EAC(v13, a2);
      swift_release(v6);
      swift_release_n(v12, 2LL);
      uint64_t v15 = sub_100004AEC(&qword_1009AF688);
      uint64_t result = swift_allocObject(v15, 24LL, 7LL);
      *(void *)(result + swift_weakDestroy(v0 + 16) = v14;
    }
  }

  else
  {
    unint64_t v9 = sub_100086500();
    uint64_t v10 = swift_allocError(&type metadata for DatabaseError, v9, 0LL, 0LL);
    *(_DWORD *)uint64_t v11 = 2;
    *(_BYTE *)(v11 + 4) = 1;
    return swift_willThrow(v10);
  }

  return result;
}

uint64_t sub_1004784F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v57 = a5;
  int v56 = a4;
  uint64_t v10 = type metadata accessor for OnConflict(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Insert(0LL);
  uint64_t v53 = *(void *)(v14 - 8);
  uint64_t v54 = v14;
  uint64_t result = __chkstk_darwin(v14);
  uint64_t v55 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = *(int *)(type metadata accessor for BeaconIdentifier(0LL) + 20);
    uint64_t v52 = a3;
    uint64_t v48 = a3 + v18;
    uint64_t v47 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationHint;
    unsigned int v46 = enum case for OnConflict.replace(_:);
    uint64_t v45 = *(void (**)(char *, void, uint64_t))(v11 + 104);
    swift_bridgeObjectRetain(a1);
    v43[1] = a1;
    uint64_t v19 = (unint64_t *)(a1 + 48);
    __int128 v44 = xmmword_1007E8280;
    uint64_t v50 = v11;
    uint64_t v51 = v10;
    uint64_t v49 = v13;
    while (1)
    {
      uint64_t v63 = v6;
      uint64_t v20 = *(v19 - 2);
      uint64_t v58 = v17;
      uint64_t v59 = v20;
      uint64_t v21 = *(v19 - 1);
      unint64_t v22 = *v19;
      v45(v13, v46, v10);
      uint64_t v23 = sub_100004AEC(&qword_10099E810);
      uint64_t v24 = type metadata accessor for Setter(0LL);
      uint64_t v25 = swift_allocObject( v23,  ((*(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL))
            + 5LL * *(void *)(*(void *)(v24 - 8) + 72LL),
              *(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = v44;
      uint64_t v60 = v21;
      unint64_t v61 = v22;
      sub_10001736C(v21, v22);
      if (qword_10099B910 != -1) {
        swift_once(&qword_10099B910, sub_1007518C8);
      }
      uint64_t v26 = sub_100004AEC(&qword_10099E6D8);
      uint64_t v27 = sub_10000A720(v26, (uint64_t)qword_100A2B478);
      uint64_t v28 = type metadata accessor for UUID(0LL);
      <- infix<A>(_:_:)(v27, v52, v28, &protocol witness table for UUID);
      if (qword_10099B8E0 != -1) {
        swift_once(&qword_10099B8E0, sub_100751568);
      }
      uint64_t v29 = sub_10000A720(v26, (uint64_t)qword_100A2B3E8);
      <- infix<A>(_:_:)(v29, v48, v28, &protocol witness table for UUID);
      if (qword_10099B8F0 != -1) {
        swift_once(&qword_10099B8F0, sub_100751688);
      }
      uint64_t v30 = sub_100004AEC(&qword_10099E6E0);
      uint64_t v31 = sub_10000A720(v30, (uint64_t)qword_100A2B418);
      LOBYTE(v62[0]) = v56;
      unint64_t v32 = sub_1000864BC();
      <- infix<A>(_:_:)(v31, v62, &type metadata for UInt8, v32);
      uint64_t v13 = v49;
      unint64_t v33 = v61;
      if (qword_10099B8E8 != -1) {
        swift_once(&qword_10099B8E8, sub_1007515FC);
      }
      uint64_t v34 = sub_100004AEC(&qword_10099E730);
      uint64_t v35 = sub_10000A720(v34, (uint64_t)qword_100A2B400);
      v62[0] = v59;
      unint64_t v36 = sub_100086818();
      <- infix<A>(_:_:)(v35, v62, &type metadata for UInt64, v36);
      if (qword_10099B900 != -1) {
        swift_once(&qword_10099B900, sub_1007517A4);
      }
      uint64_t v37 = sub_100004AEC(&qword_10099E780);
      uint64_t v38 = sub_10000A720(v37, (uint64_t)qword_100A2B448);
      uint64_t v39 = v60;
      v62[0] = v60;
      v62[1] = v33;
      <- infix<A>(_:_:)(v38, v62, &type metadata for Data, &protocol witness table for Data);
      uint64_t v40 = type metadata accessor for Table(0LL);
      uint64_t v41 = v55;
      QueryType.insert(or:_:)(v13, v25, v40, &protocol witness table for Table);
      swift_bridgeObjectRelease();
      uint64_t v10 = v51;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v13, v51);
      uint64_t v42 = v63;
      Connection.run(_:)(v41);
      uint64_t v6 = v42;
      if (v42) {
        break;
      }
      v19 += 3;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v41, v54);
      sub_100016F9C(v39, v33);
      uint64_t v17 = v58 - 1;
      if (v58 == 1) {
        return swift_bridgeObjectRelease();
      }
    }

    sub_100016F9C(v39, v33);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v41, v54);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_100478990(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_10099E710);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v49 = (char *)v45 - v7;
  uint64_t v8 = type metadata accessor for Row(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v48 = (char *)v45 - v14;
  __chkstk_darwin(v13);
  uint64_t v50 = (char *)v45 - v15;
  uint64_t v16 = sub_1000799BC();
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = Connection.prepare(_:)(a1);
    uint64_t v47 = v1;
    if (v1)
    {
      return swift_release();
    }

    else
    {
      uint64_t v23 = v18;
      v45[1] = v17;
      uint64_t v51 = v8;
      uint64_t v24 = swift_retain();
      uint64_t v25 = v23;
      uint64_t v26 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v24);
      uint64_t v55 = _swiftEmptyArrayStorage;
      sub_100032C8C(0, v26 & ~(v26 >> 63), 0);
      uint64_t v27 = swift_retain();
      uint64_t v52 = dispatch thunk of _AnySequenceBox._makeIterator()(v27);
      uint64_t v46 = v25;
      uint64_t v28 = swift_release();
      if (v26 < 0)
      {
        __break(1u);
        JUMPOUT(0x1004791BCLL);
      }

      uint64_t v29 = v51;
      uint64_t v53 = v9;
      if (v26)
      {
        dispatch thunk of _AnyIteratorBoxBase.next()(v28);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1LL, v29) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v6, v29);
          if (qword_10099B8E8 != -1) {
            swift_once(&qword_10099B8E8, sub_1007515FC);
          }
          uint64_t v30 = sub_100004AEC(&qword_10099E730);
          uint64_t v31 = sub_10000A720(v30, (uint64_t)qword_100A2B400);
          unint64_t v32 = sub_100086818();
          Row.subscript.getter(v31, &type metadata for UInt64, v32);
          if (qword_10099B900 != -1) {
            swift_once(&qword_10099B900, sub_1007517A4);
          }
          uint64_t v33 = sub_100004AEC(&qword_10099E780);
          uint64_t v34 = sub_10000A720(v33, (uint64_t)qword_100A2B448);
          Row.subscript.getter(v34, &type metadata for Data, &protocol witness table for Data);
          __asm { BR              X9 }
        }

        __break(1u);
        JUMPOUT(0x1004791D0LL);
      }

      uint64_t v35 = (uint64_t)v49;
      dispatch thunk of _AnyIteratorBoxBase.next()(v28);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v35, 1LL, v29) != 1)
      {
        uint64_t v38 = v35;
        uint64_t v39 = v50;
        (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v50, v38, v29);
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v48, v39, v29);
        if (qword_10099B8E8 != -1) {
          swift_once(&qword_10099B8E8, sub_1007515FC);
        }
        uint64_t v40 = sub_100004AEC(&qword_10099E730);
        uint64_t v41 = sub_10000A720(v40, (uint64_t)qword_100A2B400);
        unint64_t v42 = sub_100086818();
        Row.subscript.getter(v41, &type metadata for UInt64, v42);
        if (qword_10099B900 != -1) {
          swift_once(&qword_10099B900, sub_1007517A4);
        }
        uint64_t v43 = sub_100004AEC(&qword_10099E780);
        uint64_t v44 = sub_10000A720(v43, (uint64_t)qword_100A2B448);
        Row.subscript.getter(v44, &type metadata for Data, &protocol witness table for Data);
        __asm { BR              X9 }
      }

      swift_release();
      sub_100015794(v35, &qword_10099E710);
      swift_release();
      swift_release_n(v46, 2LL);
      unint64_t v36 = v55;
      uint64_t v37 = sub_100004AEC(&qword_1009AF698);
      uint64_t result = swift_allocObject(v37, 24LL, 7LL);
      *(void *)(result + swift_weakDestroy(v0 + 16) = v36;
    }
  }

  else
  {
    unint64_t v20 = sub_100086500();
    uint64_t v21 = swift_allocError(&type metadata for DatabaseError, v20, 0LL, 0LL);
    *(_DWORD *)uint64_t v22 = 2;
    *(_BYTE *)(v22 + 4) = 1;
    return swift_willThrow(v21);
  }

  return result;
}

uint64_t sub_1004791F0(uint64_t a1, uint64_t a2)
{
  return sub_1003F1C24(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100479240()
{
  uint64_t v2 = sub_1004759C4(*v0);
  return sub_10047A240(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v2);
}

uint64_t sub_100479294(uint64_t a1, uint64_t a2)
{
  return sub_1003F1C24(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1004792F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v74 = a3;
  uint64_t Error = type metadata accessor for QueryError(0LL);
  uint64_t v75 = *(void *)(Error - 8);
  uint64_t v76 = Error;
  __chkstk_darwin(Error);
  uint64_t v79 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = type metadata accessor for Row(0LL);
  uint64_t v83 = *(void *)(v91 - 8);
  uint64_t v7 = __chkstk_darwin(v91);
  uint64_t v82 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v73 - v9;
  uint64_t v11 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v84 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v73 - v15;
  uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v85 = (uint64_t *)((char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t *)((char *)&v73 - v20);
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v95 = *(void *)(v22 - 8);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v88 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v89 = (char *)&v73 - v25;
  if (qword_10099B910 != -1) {
    swift_once(&qword_10099B910, sub_1007518C8);
  }
  uint64_t v26 = sub_10000A720(v11, (uint64_t)qword_100A2B478);
  uint64_t v86 = type metadata accessor for Table(0LL);
  uint64_t v87 = a1;
  QueryType.subscript.getter(v26, v86);
  uint64_t v90 = a2;
  uint64_t v27 = v81;
  Row.get<A>(_:)(v21, v16, v22, &protocol witness table for UUID);
  if (v27)
  {
    swift_errorRelease(v27);
    uint64_t v78 = *(void (**)(char *, uint64_t))(v12 + 8);
    v78(v16, v11);
    uint64_t v28 = v95;
    uint64_t v77 = *(void (**)(void))(v95 + 56);
    ((void (*)(void *, uint64_t, uint64_t, uint64_t))v77)(v21, 1LL, 1LL, v22);
  }

  else
  {
    uint64_t v78 = *(void (**)(char *, uint64_t))(v12 + 8);
    v78(v16, v11);
    uint64_t v28 = v95;
    uint64_t v77 = *(void (**)(void))(v95 + 56);
    ((void (*)(void *, void, uint64_t, uint64_t))v77)(v21, 0LL, 1LL, v22);
  }

  uint64_t v29 = v22;
  uint64_t v30 = v83;
  uint64_t v31 = v91;
  uint64_t v81 = *(void *)(v83 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v81)(v10, v90, v91);
  uint64_t v80 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48);
  if (v80(v21, 1LL, v29) == 1)
  {
    Row.subscript.getter(v26, v29, &protocol witness table for UUID);
    uint64_t v83 = *(void *)(v30 + 8);
    ((void (*)(char *, uint64_t))v83)(v10, v31);
    sub_100015794((uint64_t)v21, &qword_10099D8A0);
  }

  else
  {
    uint64_t v83 = *(void *)(v30 + 8);
    ((void (*)(char *, uint64_t))v83)(v10, v31);
    (*(void (**)(char *, void *, uint64_t))(v28 + 32))(v89, v21, v29);
  }

  unint64_t v32 = (char *)v29;
  uint64_t v33 = v90;
  uint64_t v34 = v82;
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v35 = sub_10000A720(v11, (uint64_t)qword_100A2B3E8);
  unint64_t v36 = v84;
  QueryType.subscript.getter(v35, v86);
  Row.get<A>(_:)(v85, v36, v32, &protocol witness table for UUID);
  uint64_t v37 = v77;
  v78(v84, v11);
  uint64_t v38 = v85;
  v37();
  uint64_t v39 = v91;
  ((void (*)(char *, uint64_t, uint64_t))v81)(v34, v33, v91);
  if (v80(v38, 1LL, (uint64_t)v32) == 1)
  {
    Row.subscript.getter(v35, v32, &protocol witness table for UUID);
    ((void (*)(char *, uint64_t))v83)(v34, v39);
    sub_100015794((uint64_t)v38, &qword_10099D8A0);
  }

  else
  {
    ((void (*)(char *, uint64_t))v83)(v34, v39);
    (*(void (**)(char *, void *, char *))(v95 + 32))(v88, v38, v32);
  }

  if (qword_10099B920 != -1) {
    swift_once(&qword_10099B920, sub_1007519F4);
  }
  uint64_t v40 = sub_100004AEC(&qword_10099E780);
  uint64_t v41 = sub_10000A720(v40, (uint64_t)qword_100A2B4A8);
  Row.get<A>(_:)(&v93, v41, &type metadata for Data, &protocol witness table for Data);
  unint64_t v42 = v32;
  uint64_t v43 = sub_10017D280(v93, v94);
  uint64_t v85 = v44;
  if (qword_10099B900 != -1) {
    swift_once(&qword_10099B900, sub_1007517A4);
  }
  uint64_t v45 = sub_10000A720(v40, (uint64_t)qword_100A2B448);
  Row.get<A>(_:)(v92, v45, &type metadata for Data, &protocol witness table for Data);
  sub_1001782BC(v92[0], v92[1]);
  uint64_t v66 = v93;
  unint64_t v65 = v94;
  if (qword_10099B928 != -1) {
    swift_once(&qword_10099B928, sub_100751A88);
  }
  uint64_t v67 = sub_100004AEC(&qword_1009A9010);
  uint64_t v68 = sub_10000A720(v67, (uint64_t)qword_100A2B4C0);
  Row.get<A>(_:)(v68, &type metadata for Data, &protocol witness table for Data);
  if (v94 >> 60 == 15)
  {
    uint64_t v80 = 0LL;
    uint64_t v69 = v66;
    uint64_t v70 = v65;
    uint64_t v71 = 0LL;
    uint64_t v72 = 0xF000000000000000LL;
  }

  else
  {
    sub_1001782BC(v93, v94);
    uint64_t v80 = 0LL;
    uint64_t v69 = v66;
    uint64_t v70 = v65;
    uint64_t v71 = v93;
    uint64_t v72 = v94;
  }

  uint64_t v82 = (char *)v71;
  uint64_t v46 = *(void (**)(uint64_t, char *, char *))(v95 + 16);
  uint64_t v47 = v74;
  v46(v74, v89, v42);
  uint64_t v48 = v47 + *(int *)(type metadata accessor for BeaconIdentifier(0LL) + 20);
  uint64_t v84 = v42;
  v46(v48, v88, v42);
  if (qword_10099B918 != -1) {
    swift_once(&qword_10099B918, sub_100751964);
  }
  uint64_t v49 = sub_100004AEC(&qword_10099E700);
  uint64_t v50 = sub_10000A720(v49, (uint64_t)qword_100A2B490);
  uint64_t v51 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  uint64_t v52 = type metadata accessor for Date(0LL);
  uint64_t v53 = v50;
  uint64_t v54 = v90;
  Row.subscript.getter(v53, v52, &protocol witness table for Date);
  uint64_t v81 = v51;
  uint64_t v55 = (uint64_t *)(v47 + *(int *)(v51 + 24));
  int v56 = v85;
  *uint64_t v55 = v43;
  v55[1] = (uint64_t)v56;
  uint64_t v55[2] = v69;
  void v55[3] = v70;
  uint64_t v57 = (uint64_t)v82;
  v55[4] = (uint64_t)v82;
  v55[5] = v72;
  sub_100479D50( v43,  (unint64_t)v56,  v69,  v70,  v57,  v72,  (void (*)(void))sub_10001736C,  (uint64_t (*)(uint64_t, uint64_t))sub_100018BE4);
  if (qword_10099B930 != -1) {
    swift_once(&qword_10099B930, sub_100751B1C);
  }
  uint64_t v58 = sub_100004AEC(&qword_10099E730);
  uint64_t v59 = sub_10000A720(v58, (uint64_t)qword_100A2B4D8);
  unint64_t v60 = sub_100086818();
  Row.subscript.getter(v59, &type metadata for UInt64, v60);
  sub_100479D50( v43,  (unint64_t)v56,  v69,  v70,  v57,  v72,  (void (*)(void))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  ((void (*)(uint64_t, uint64_t))v83)(v54, v91);
  (*(void (**)(uint64_t))(*(void *)(v86 - 8) + 8LL))(v87);
  unint64_t v61 = *(void (**)(char *, char *))(v95 + 8);
  uint64_t v62 = v84;
  v61(v88, v84);
  uint64_t result = ((uint64_t (*)(char *, char *))v61)(v89, v62);
  if (v93 == 2) {
    char v64 = 2;
  }
  else {
    char v64 = v93 == 1;
  }
  *(_BYTE *)(v47 + *(int *)(v81 + 28)) = v64;
  return result;
}

uint64_t sub_100479D50( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t (*a8)(uint64_t, uint64_t))
{
  if (a2 >> 60 != 15)
  {
    a7();
    ((void (*)(uint64_t, uint64_t))a7)(a3, a4);
    return a8(a5, a6);
  }

  return result;
}

uint64_t sub_100479DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v46 = a2;
  uint64_t v44 = a1;
  uint64_t v4 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v43 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v43 - v11;
  uint64_t v13 = type metadata accessor for Table(0LL);
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v47 = (char *)&v43 - v18;
  __chkstk_darwin(v17);
  uint64_t v49 = (char *)&v43 - v19;
  uint64_t v50 = a3;
  uint64_t v43 = a3 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationHint;
  if (qword_10099B910 != -1) {
    swift_once(&qword_10099B910, sub_1007518C8);
  }
  uint64_t v20 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2B478);
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v23 = v21;
  uint64_t v24 = v44;
  == infix<A>(_:_:)(v23, v44, v22, &protocol witness table for UUID, &protocol witness table for String);
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v25 = sub_10000A720(v20, (uint64_t)qword_100A2B3E8);
  uint64_t v26 = type metadata accessor for BeaconIdentifier(0LL);
  == infix<A>(_:_:)( v25,  v24 + *(int *)(v26 + 20),  v22,  &protocol witness table for UUID,  &protocol witness table for String);
  && infix(_:_:)(v10, v7);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v45 + 8);
  v27(v7, v4);
  v27(v10, v4);
  QueryType.filter(_:)(v12, v13, &protocol witness table for Table);
  v27(v12, v4);
  if (qword_10099B8E8 != -1) {
    swift_once(&qword_10099B8E8, sub_1007515FC);
  }
  uint64_t v28 = sub_100004AEC(&qword_10099E730);
  uint64_t v29 = sub_10000A720(v28, (uint64_t)qword_100A2B400);
  v51[0] = v46;
  unint64_t v30 = sub_100086818();
  <= infix<A>(_:_:)(v29, v51, &type metadata for UInt64, v30, &protocol witness table for Int64);
  uint64_t v31 = v47;
  QueryType.filter(_:)(v12, v13, &protocol witness table for Table);
  v27(v12, v4);
  uint64_t v32 = v48;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v48 + 8);
  v33(v16, v13);
  uint64_t v34 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
  *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v36 = sub_1000372EC(&qword_1009AF690, &qword_10099E730, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v28, v36);
  uint64_t v37 = v49;
  QueryType.order(_:)(v35, v13, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v33(v31, v13);
  v51[3] = v13;
  v51[4] = &protocol witness table for Table;
  uint64_t v38 = sub_10000A7C8(v51);
  (*(void (**)(void *, char *, uint64_t))(v32 + 16))(v38, v37, v13);
  uint64_t v39 = v51[9];
  sub_100478990((uint64_t)v51);
  if (v39)
  {
    v33(v37, v13);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
  }

  else
  {
    uint64_t v41 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
    dispatch thunk of _AnySequenceBox._makeIterator()(v41);
    uint64_t v42 = swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()(v42);
    swift_release();
    v33(v37, v13);
    return v51[5];
  }

uint64_t sub_10047A240(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_10047A254()
{
  return sub_100476AFC(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10047A270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10047A27C);
}

uint64_t sub_10047A27C(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_10047A2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10047A304);
}

char *sub_10047A304(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for LostModeEndPoint(uint64_t a1)
{
  uint64_t result = qword_1009AF6F8;
  if (!qword_1009AF6F8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LostModeEndPoint);
  }
  return result;
}

uint64_t sub_10047A3B4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A14C8);
  uint64_t v3 = OS_dispatch_queue.sync<A>(execute:)(sub_1000F9588, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.host.setter(v7[2], v7[3]);
  URLComponents.path.setter(v7[0], v7[1]);
  uint64_t v4 = (uint64_t (*)(void *, void))URLComponents.path.modify(v7);
  v5._countAndFlagsBits = 0x646F4D74736F6C2FLL;
  v5._object = (void *)0xE900000000000065LL;
  String.append(_:)(v5);
  return v4(v7, 0LL);
}

void *sub_10047A494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a2;
  uint64_t v38 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v38);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v37 - v19;
  v42[3] = a3;
  v42[4] = a4;
  uint64_t v21 = sub_10000A7C8(v42);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(v21, a1, a3);
  sub_100013044((uint64_t)v42, (uint64_t)v41);
  uint64_t v22 = sub_100004AEC(&qword_1009B0530);
  if (!swift_dynamicCast(v20, v41, v22, v15, 0LL))
  {
    if ((swift_dynamicCast(v14, v41, v22, v9, 0LL) & 1) != 0)
    {
      sub_10002218C((uint64_t)v14, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      if (qword_10099BA28 != -1) {
        swift_once(&qword_10099BA28, sub_100794C10);
      }
      v39[0] = qword_100A2B7D0;
      if (v12[*(int *)(v9 + 52)] == 1)
      {
        swift_bridgeObjectRetain(qword_100A2B7D0);
        sub_1003CF378(0x14u);
        sub_1003CF378(4u);
        sub_1003CF378(8u);
        sub_1003CF378(9u);
        sub_100018C68((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
        uint64_t v32 = (void *)v39[0];
        goto LABEL_30;
      }

      sub_100018C68((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    }

    uint64_t v32 = &_swiftEmptySetSingleton;
    goto LABEL_30;
  }

  sub_10002218C((uint64_t)v20, (uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  swift_bridgeObjectRelease();
  uint64_t v23 = &v18[v15[14]];
  uint64_t v25 = *(void *)v23;
  unint64_t v24 = *((void *)v23 + 1);
  uint64_t v26 = v25 & 0xFFFFFFFFFFFFLL;
  if ((v24 & 0x2000000000000000LL) != 0) {
    uint64_t v27 = HIBYTE(v24) & 0xF;
  }
  else {
    uint64_t v27 = v26;
  }
  if (!v27)
  {
    v39[0] = 0LL;
    v39[1] = 0xE000000000000000LL;
    uint64_t v40 = *(void **)&v18[v15[16]];
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 95LL;
    v29._object = (void *)0xE100000000000000LL;
    String.append(_:)(v29);
    uint64_t v40 = *(void **)&v18[v15[17]];
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (qword_10099BA28 != -1) {
    swift_once(&qword_10099BA28, sub_100794C10);
  }
  uint64_t v31 = qword_100A2B7D0;
  swift_bridgeObjectRetain(qword_100A2B7D0);
  if ((sub_10062701C() & 1) != 0)
  {
    v39[0] = v31;
    sub_1003CF378(2u);
    sub_1003CF378(1u);
    uint64_t v31 = v39[0];
  }

  uint64_t v40 = (void *)v31;
  if ((sub_1002B8AF8((uint64_t)v18, v37) & 1) != 0 && (sub_10062701C() & 1) == 0)
  {
    sub_1000BDD20(v39, 8LL);
    sub_1000BDD20(v39, 9LL);
  }

  else
  {
    sub_1003CF378(8u);
    sub_1003CF378(9u);
  }

  sub_100018B74((uint64_t)&v18[v15[6]], (uint64_t)v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v38);
  sub_100018C68((uint64_t)v8, type metadata accessor for StableIdentifier);
  if (EnumCaseMultiPayload != 1)
  {
    sub_1003CF378(0xCu);
    sub_1003CF378(0xDu);
  }

  if ((sub_1005D38B0() & 1) == 0
    || (uint64_t My = type metadata accessor for Feature.FindMy(0LL),
        _OWORD v39[3] = My,
        v39[4] = sub_10000A780(),
        uint64_t v35 = sub_10000A7C8(v39),
        (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v35,  enum case for Feature.FindMy.btRSSIFinding(_:),  My),  LOBYTE(My) = isFeatureEnabled(_:)(v39),  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39),  (My & 1) == 0))
  {
    sub_1003CF378(0xAu);
    sub_1003CF378(0xBu);
  }

  sub_1003CF378(0x13u);
  sub_100018C68((uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
  uint64_t v32 = v40;
LABEL_30:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  return v32;
}

void *sub_10047A9A4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v7, 0);
    uint64_t v8 = v19;
    uint64_t v9 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v17 = *(void *)(v10 + 72);
    uint64_t v18 = v9;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 20), v3);
      uint64_t v19 = v8;
      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000328D0(v13 > 1, v14 + 1, 1);
        uint64_t v8 = v19;
      }

      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v14,
        v6,
        v3);
      v11 += v17;
      --v7;
    }

    while (v7);
  }

  return v8;
}

uint64_t sub_10047AB14(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v2);
  uint64_t v54 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v57 = *(void *)(v55 - 8);
  uint64_t v4 = __chkstk_darwin(v55);
  uint64_t v58 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v51 - v7;
  __chkstk_darwin(v6);
  uint64_t v53 = (uint64_t)&v51 - v9;
  uint64_t v10 = (void *)type metadata accessor for UUID(0LL);
  uint64_t v11 = *(v10 - 1);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v14);
  unint64_t v16 = (unint64_t)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1005067E8();
  uint64_t v18 = sub_10047A9A4((uint64_t)v17);
  swift_bridgeObjectRelease();
  uint64_t v60 = a1;
  BOOL v19 = sub_1004E98E4((uint64_t (*)(char *))sub_1002DDE40, (BOOL)v59, (uint64_t)v18);
  swift_bridgeObjectRelease();
  if (v19) {
    return 1LL;
  }
  sub_100504C28(a1, (uint64_t)&v61);
  uint64_t v21 = &OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1;
  if (!v62)
  {
    sub_100015794((uint64_t)&v61, (uint64_t *)&unk_1009A9C40);
    goto LABEL_9;
  }

  uint64_t v56 = a1;
  sub_100012EC0(&v61, (uint64_t)v63);
  uint64_t v23 = v64;
  uint64_t v22 = v65;
  sub_100012ED8(v63, v64);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v22 + 8) + 8LL) + 32LL))(v23);
  if (qword_10099B300 != -1) {
    goto LABEL_40;
  }
  while (1)
  {
    uint64_t v24 = qword_100A2A6C8;
    uint64_t v25 = objc_autoreleasePoolPush();
    sub_100346B24(v24, (uint64_t)v13, 0LL, 0LL, &v61);
    objc_autoreleasePoolPop(v25);
    char v26 = sub_100518274(v16, (uint64_t)v13, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v61, 1);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void *))(v11 + 8))(v13, v10);
    sub_100015794(v16, (uint64_t *)&unk_10099D720);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v63);
    if ((v26 & 1) != 0) {
      return 4LL;
    }
    uint64_t v21 = &OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1;
    a1 = v56;
LABEL_9:
    uint64_t v11 = v55;
    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    uint64_t v27 = v21[217];
    Swift::String v28 = objc_autoreleasePoolPush();
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009AF790);
    OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v27, v29);
    uint64_t v30 = v63[0];
    if (!*(void *)(v63[0] + 16LL) || (unint64_t v31 = sub_10030D124(a1), (v32 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v37 = _swiftEmptyArrayStorage;
      goto LABEL_31;
    }

    uint64_t v33 = *(void *)(*(void *)(v30 + 56) + 8 * v31);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRelease();
    uint64_t v34 = sub_1002FE5F8(v33);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v34);
    uint64_t v36 = v35;
    swift_release(v34);
    uint64_t v37 = _swiftEmptyArrayStorage;
    v63[0] = _swiftEmptyArrayStorage;
    uint64_t v56 = *(void *)(v36 + 16);
    if (!v56) {
      break;
    }
    uint64_t v52 = v28;
    unint64_t v16 = 0LL;
    uint64_t v38 = _swiftEmptyArrayStorage;
    uint64_t v10 = qword_100804488;
    unint64_t v13 = (char *)&off_1009328F0;
    uint64_t v39 = v57;
    while (v16 < *(void *)(v36 + 16))
    {
      unint64_t v40 = (*(unsigned __int8 *)(v39 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v41 = *(void *)(v39 + 72);
      sub_10001DC4C(v36 + v40 + v41 * v16, (uint64_t)v8, type metadata accessor for BeaconObservation);
      uint64_t v42 = qword_100804488[v8[*(int *)(v11 + 24)]];
      if (v42 != 700)
      {
        uint64_t v45 = &stru_100000020.cmd + 1;
        while (1)
        {
          uint64_t v46 = v45 - 31;
          if (__OFADD__(v45 - 32, 1LL)) {
            break;
          }
          ++v45;
          if (v46 == 2)
          {
            sub_100018C68((uint64_t)v8, type metadata accessor for BeaconObservation);
            goto LABEL_15;
          }
        }

        __break(1u);
        break;
      }

Swift::Int sub_10047B124(void *a1)
{
  uint64_t v2 = *(void *)(sub_100004AEC((uint64_t *)&unk_1009AC320) - 8);
  uint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = (void *)sub_1003D4B18(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100494E74(v6);
  *a1 = v3;
  return result;
}

id sub_10047B1A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (int *)type metadata accessor for SafeLocation(0LL);
  v7.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v8 = v6[7];
  v25[0] = qword_1008045E0[*(char *)(a1 + v6[6])];
  unint64_t v9 = *(void *)(a1 + v8);
  unint64_t v10 = *(void *)(a1 + v8 + 8);
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    unint64_t v9 = (unint64_t)String._bridgeToObjectiveC()();
    uint64_t v12 = (void *)v9;
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  double v13 = *(double *)(a1 + v6[8]);
  double v14 = *(double *)(a1 + v6[9]);
  double v15 = *(double *)(a1 + v6[10]);
  Date.init()(v9);
  id v16 = objc_allocWithZone(&OBJC_CLASS___CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v18 = objc_msgSend( v16,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:",  isa,  v13,  v14,  0.0,  v15,  v15,  -1.0,  -1.0,  -1.0,  0xBFF0000000000000);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [v18 setReferenceFrame:*(unsigned __int8 *)(a1 + v6[11])];
  swift_bridgeObjectRetain(*(void *)(a1 + v6[13]));
  sub_1006F1060(v19);
  swift_bridgeObjectRelease();
  type metadata accessor for UUID(0LL);
  sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  Class v20 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(unsigned __int8 *)(a1 + v6[12]);
  id v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v25[1]));
  id v23 = [v22 initWithIdentifier:v7.super.isa type:v25[0] name:v12 location:v18 associatedBeacons:v20 approvalState:v21];

  sub_100018C68(a1, type metadata accessor for SafeLocation);
  return v23;
}

uint64_t sub_10047B404()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AAA0);
  sub_10000A720(v0, (uint64_t)qword_100A2AAA0);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000014LL,  0x800000010084FFF0LL);
}

void sub_10047B488( void *a1, char a2, uint64_t a3, void (*a4)(void, void *), uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a3 + 16;
  swift_beginAccess(a3 + 16, v16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v11);
  if (Strong)
  {
    double v13 = (void *)Strong;
    if ((a2 & 1) != 0)
    {
      id v15 = a1;
      a4(0LL, a1);
      sub_10049CCEC(a1, 1);
    }

    else
    {
      uint64_t v14 = swift_allocObject(&unk_10095E410, 32LL, 7LL);
      *(void *)(v14 + swift_weakDestroy(v0 + 16) = a4;
      *(void *)(v14 + 24) = a5;
      swift_retain();
      swift_retain();
      sub_10047B584(a6, (uint64_t)sub_10049F90C, v14);

      swift_release();
      swift_release();
    }
  }

uint64_t sub_10047B584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v45 = a3;
  uint64_t v42 = a2;
  uint64_t v38 = a1;
  uint64_t v5 = sub_100004AEC(&qword_1009AF7B8);
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  __chkstk_darwin(v5);
  NSUUID v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009AF7C0);
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  __chkstk_darwin(v8);
  uint64_t v41 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_10061D0A4();
  uint64_t v11 = v10[2];
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    double v13 = (unsigned __int8 *)(v10 + 4);
    do
    {
      int v16 = *v13++;
      if (v16 == 2)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
        uint64_t v46 = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100033380(0, v12[2] + 1LL, 1);
          uint64_t v12 = v46;
        }

        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          sub_100033380(v14 > 1, v15 + 1, 1);
          uint64_t v12 = v46;
        }

        v12[2] = v15 + 1;
        *((_BYTE *)v12 + v15 + 32) = 2;
      }

      --v11;
    }

    while (v11);
  }

  swift_bridgeObjectRelease();
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v18 = v12[2];
  if (v18)
  {
    swift_retain();
    for (uint64_t i = 0LL; i != v18; ++i)
    {
      Class v20 = (char *)v12 + i;
      uint64_t v21 = sub_10048E598(v20[32]);
      sub_100185E10(v21);
    }

    swift_release_n(v12, 2LL);
    id v22 = v46;
  }

  else
  {
    swift_release();
    id v22 = _swiftEmptyArrayStorage;
  }

  swift_retain();
  uint64_t v23 = v38;
  swift_bridgeObjectRetain(v38);
  uint64_t v24 = sub_1004985B0((uint64_t)v22, v4, v23);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v46 = v24;
  uint64_t v25 = sub_100004AEC(&qword_1009AF7C8);
  uint64_t v26 = sub_100004AEC(&qword_1009AF7D0);
  uint64_t v27 = sub_1000372EC( &qword_1009AF7D8,  &qword_1009AF7C8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v28 = sub_1000372EC(&qword_1009AF7E0, &qword_1009AF7D0, (uint64_t)&protocol conformance descriptor for [A]);
  Publishers.MergeMany.init<A>(_:)(&v46, v25, v26, v27, v28);
  uint64_t v29 = sub_1000372EC( &qword_1009AF7E8,  &qword_1009AF7B8,  (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
  uint64_t v30 = v40;
  unint64_t v31 = v41;
  Publisher.collect()(v40, v29);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v30);
  uint64_t v32 = swift_allocObject(&unk_10095DAB0, 32LL, 7LL);
  uint64_t v33 = v45;
  *(void *)(v32 + swift_weakDestroy(v0 + 16) = v42;
  *(void *)(v32 + 24) = v33;
  uint64_t v34 = sub_1000372EC( &qword_1009AF7F0,  &qword_1009AF7C0,  (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  swift_retain();
  uint64_t v35 = v44;
  Publisher.oneshot(_:)(sub_10049D8F8, v32, v44, v34);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v31, v35);
}

uint64_t sub_10047B904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10047B920(a1, a2, a3, (uint64_t)&unk_10095D0B0, (uint64_t)sub_10049CA04, (uint64_t)&unk_10095D0C8);
}

uint64_t sub_10047B920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = v6;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  int v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v28 = *(void *)(v17 - 8);
  uint64_t v29 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v27[1] = *(void *)(v10 + 64);
  Class v20 = (void *)swift_allocObject(a4, 48LL, 7LL);
  v20[2] = a1;
  void v20[3] = v10;
  v20[4] = a2;
  v20[5] = a3;
  aBlock[4] = a5;
  uint64_t v33 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = a6;
  uint64_t v21 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  unint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v24, v25, v14, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v16, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v29);
  return swift_release(v33);
}

uint64_t sub_10047BB34( void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v9);
  _Block_copy(v8);
  id v11 = a1;
  a5(v10, v11, v8);
  _Block_release(v8);
  _Block_release(v8);

  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_10047BBBC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  int v30 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v10 - 8);
  uint64_t v35 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for SafeLocation(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  int v16 = &v29[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v33 = *(void *)(v5 + 64);
  sub_10001DC4C(a1, (uint64_t)v16, type metadata accessor for SafeLocation);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  uint64_t v19 = v18 + v15;
  uint64_t v20 = swift_allocObject(&unk_10095D510, (v19 & 0xFFFFFFFFFFFFFFF8LL) + 24, v17 | 7);
  unint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8LL) + v20;
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = v5;
  sub_10002218C((uint64_t)v16, v20 + v18, type metadata accessor for SafeLocation);
  *(_BYTE *)(v20 + v19) = v30;
  uint64_t v22 = v32;
  *(void *)(v21 + 8) = v31;
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = v22;
  aBlock[4] = sub_10049CEF0;
  void aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095D528;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v26, v27, v7, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v23);
  _Block_release(v23);
  (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v9, v7);
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v12, v35);
  return swift_release();
}

uint64_t sub_10047BE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v32 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = *(void *)(v4 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 16) & ~v15;
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_10095D6F0, v18 + 16, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + v16, v14, v11);
  *(void *)(v19 + v17) = v4;
  uint64_t v20 = (void *)(v19 + v18);
  uint64_t v21 = v30;
  *uint64_t v20 = v29;
  v20[1] = v21;
  aBlock[4] = sub_10049D24C;
  void aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095D708;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v26 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v27 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v25, v26, v32, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v27);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  return swift_release();
}

uint64_t sub_10047C1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SafeLocation(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = *(void *)(v3 + 64);
  sub_10001DC4C(a1, (uint64_t)v15, type metadata accessor for SafeLocation);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  unint64_t v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_10095D8A8, v19 + 8, v16 | 7);
  sub_10002218C((uint64_t)v15, v20 + v17, type metadata accessor for SafeLocation);
  uint64_t v21 = (void *)(v20 + v18);
  uint64_t v22 = v31;
  *uint64_t v21 = v30;
  v21[1] = v22;
  *(void *)(v20 + v19) = v4;
  aBlock[4] = sub_10049D4FC;
  void aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095D8C0;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v6, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  return swift_release();
}

uint64_t sub_10047C458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v34 = a5;
  uint64_t v35 = a3;
  uint64_t v8 = v7;
  uint64_t v36 = a4;
  uint64_t v41 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v44 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v39 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v42 = *(void *)(v12 - 8);
  uint64_t v43 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = *(void *)(v8 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  uint64_t v19 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v20 = (v19 + 24) & ~v19;
  unint64_t v21 = (v17 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v23 = swift_allocObject(v34, v22 + 16, v19 | 7);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v23 + v20, v18, v15);
  *(void *)(v23 + v21) = v8;
  uint64_t v24 = (void *)(v23 + v22);
  uint64_t v25 = v36;
  *uint64_t v24 = v35;
  v24[1] = v25;
  aBlock[4] = v37;
  void aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = v38;
  uint64_t v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_retain();
  uint64_t v27 = swift_retain();
  static DispatchQoS.unspecified.getter(v27);
  uint64_t v45 = _swiftEmptyArrayStorage;
  uint64_t v28 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v30 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v31 = v39;
  uint64_t v32 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v29, v30, v41, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v31, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v43);
  return swift_release();
}

uint64_t sub_10047C70C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, void (*a6)(char *, uint64_t, id, void *))
{
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = _Block_copy(a5);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v11);
  _Block_copy(v15);
  id v17 = a1;
  a6(v14, v16, v17, v15);
  _Block_release(v15);
  _Block_release(v15);

  swift_bridgeObjectRelease(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10047C81C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SafeLocation(0LL);
  uint64_t v52 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  uint64_t v51 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_beaconStore);
  swift_retain();
  uint64_t v12 = (uint64_t)sub_1004984E4(a1, v11);
  uint64_t v50 = 0LL;
  swift_release();
  uint64_t v44 = v12;
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v12);
  while (v13)
  {
    uint64_t v14 = 0LL;
    uint64_t v46 = (void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
    unint64_t v47 = v44 & 0xC000000000000001LL;
    uint64_t v43 = v44 + 32;
    uint64_t v45 = v13;
    while (1)
    {
      id v16 = v47 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v44) : *(id *)(v43 + 8 * v14);
      uint64_t v12 = (uint64_t)v16;
      BOOL v17 = __OFADD__(v14, 1LL);
      uint64_t v18 = v14 + 1;
      if (v17) {
        break;
      }
      uint64_t v49 = v18;
      sub_100012ED8(v46, v46[3]);
      uint64_t v48 = (void *)v12;
      id v19 = [(id)v12 identifier];
      uint64_t v20 = v51;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

      uint64_t v21 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 0LL, 1LL, v21);
      unint64_t v22 = sub_100576844();
      uint64_t v23 = v22[2];
      if (v23)
      {
        unint64_t v24 = 0LL;
        uint64_t v1 = _swiftEmptyArrayStorage;
        while (v24 < v22[2])
        {
          unint64_t v25 = (*(unsigned __int8 *)(v52 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
          uint64_t v26 = *(void *)(v52 + 72);
          sub_10001DC4C((uint64_t)v22 + v25 + v26 * v24, (uint64_t)v8, type metadata accessor for SafeLocation);
          sub_10002218C((uint64_t)v8, (uint64_t)v6, type metadata accessor for SafeLocation);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
          uint64_t v54 = (uint64_t)v1;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100032BF0(0, v1[2] + 1LL, 1);
            uint64_t v1 = (void *)v54;
          }

          unint64_t v29 = v1[2];
          unint64_t v28 = v1[3];
          uint64_t v12 = v29 + 1;
          if (v29 >= v28 >> 1)
          {
            sub_100032BF0(v28 > 1, v29 + 1, 1);
            uint64_t v1 = (void *)v54;
          }

          ++v24;
          v1[2] = v12;
          sub_10002218C((uint64_t)v6, (uint64_t)v1 + v25 + v29 * v26, type metadata accessor for SafeLocation);
          if (v23 == v24) {
            goto LABEL_19;
          }
        }

        __break(1u);
        break;
      }

      uint64_t v1 = _swiftEmptyArrayStorage;
LABEL_19:
      uint64_t v30 = swift_bridgeObjectRelease();
      __chkstk_darwin(v30);
      uint64_t v31 = v50;
      uint64_t v32 = (uint64_t)v51;
      *(&v43 - 2) = (uint64_t)v51;
      uint64_t v33 = sub_100023CDC((uint64_t (*)(char *))sub_1002D7270, &v43 - 4, (uint64_t)v1);
      uint64_t v34 = (uint64_t)sub_10028D078(v33);
      uint64_t v50 = v31;
      swift_bridgeObjectRelease();
      sub_100015794(v32, &qword_10099D8A0);
      if ((unint64_t)v34 >> 62)
      {
        if (v34 < 0) {
          uint64_t v39 = v34;
        }
        else {
          uint64_t v39 = v34 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v34);
        uint64_t v1 = (void *)_CocoaArrayWrapper.endIndex.getter(v39);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v1 = *(void **)((v34 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
      sub_10014EFD4((unint64_t *)&qword_1009A7D80, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
      uint64_t v54 = Set.init(minimumCapacity:)(v1);
      if ((unint64_t)v34 >> 62)
      {
        if (v34 < 0) {
          uint64_t v1 = (void *)v34;
        }
        else {
          uint64_t v1 = (void *)(v34 & 0xFFFFFFFFFFFFFF8LL);
        }
        swift_bridgeObjectRetain(v34);
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v1);
        swift_bridgeObjectRelease();
        if (!v12) {
          goto LABEL_4;
        }
      }

      else
      {
        uint64_t v12 = *(void *)((v34 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (!v12) {
          goto LABEL_4;
        }
      }

      if (v12 < 1) {
        goto LABEL_42;
      }
      if ((v34 & 0xC000000000000001LL) != 0)
      {
        for (uint64_t i = 0LL; i != v12; ++i)
        {
          uint64_t v36 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v34);
          sub_1000BE414((Swift::Int *)&v53, v36);
        }
      }

      else
      {
        for (uint64_t j = 0LL; j != v12; ++j)
        {
          uint64_t v38 = *(void **)(v34 + 8 * j + 32);
          sub_1000BE414((Swift::Int *)&v53, v38);
        }
      }

void sub_10047CD7C(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_10047CEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2AAA0);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Client forces LOI based safe location refresh.", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  sub_100012ED8( (void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v11 = swift_allocObject(&unk_10095DE20, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  uint64_t v12 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v12);
  swift_retain();
  swift_retain();
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.LocationOfInterestProvider.updateAllSafeLocationsWithLOI",  86LL,  2LL,  sub_10049F734);
  swift_release();
  return swift_release();
}

uint64_t sub_10047D090(uint64_t a1, __int16 a2, uint64_t (*a3)(BOOL))
{
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_10000A720(v5, (uint64_t)qword_100A2AAA0);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Update ALL LOI based safe location finished.", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  return a3((a2 & 0x100) == 0);
}

void sub_10047D3B0(void *a1, char a2, void (*a3)(void, void))
{
  uint64_t v3 = a3;
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = qword_10099B4C8;
    id v6 = a1;
    if (v5 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_10000A720(v7, (uint64_t)qword_100A2AAA0);
    id v8 = v6;
    os_log_type_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v23 = v21;
      *(_DWORD *)uint64_t v11 = 136315138;
      type metadata accessor for SPSeparationMonitoringError(0LL);
      uint64_t v12 = v3;
      id v13 = v8;
      uint64_t v15 = v14;
      uint64_t v16 = sub_100007864( &qword_1009AF810,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E2FB8);
      uint64_t v17 = v15;
      id v8 = v13;
      uint64_t v3 = v12;
      uint64_t v18 = Error.localizedDescription.getter(v17, v16);
      uint64_t v22 = sub_1003F11D4(v18, v19, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      sub_10049CCEC(a1, 1);
      sub_10049CCEC(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "XPC call failed with error: %s", v11, 0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
      sub_10049CCEC(a1, 1);
      sub_10049CCEC(a1, 1);
    }

    id v20 = v8;
    v3(0LL, a1);
    sub_10049CCEC(a1, 1);
    sub_10049CCEC(a1, 1);
  }

  else
  {
    a3(1LL, 0LL);
  }

uint64_t sub_10047D608()
{
  uint64_t v1 = *(void *)(v0 + 192);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 72);
    uint64_t ObjectType = swift_getObjectType(*(void *)(v1 + 64));
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 48);
    swift_retain();
    v4(ObjectType, v2);
    swift_release();
  }

  sub_100607E9C();
  swift_retain_n(v0, 2LL);
  sub_1004F730C();
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v8[0] = 0x7365547265646E75LL;
  v8[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v9, v8, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v9 == 1)
  {
    sub_10047D8E0((uint64_t)sub_10049DF98, (uint64_t)&unk_10095DD98);
    uint64_t v5 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v5);
    swift_retain();
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.LocationOfInterestProvider.updateAllSafeLocationsWithLOI",  86LL,  2LL,  sub_10049DD94);
    swift_release();
    return swift_release_n(v0, 3LL);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v7);
    static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39LL, 2LL, sub_10049DD48);
    swift_release_n(v0, 2LL);
    return swift_release();
  }

uint64_t sub_10047D838()
{
  return swift_release();
}

uint64_t sub_10047D8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v2 + 72);
  aBlock[4] = a1;
  uint64_t v22 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = a2;
  id v13 = _Block_copy(aBlock);
  uint64_t v14 = swift_retain();
  static DispatchQoS.unspecified.getter(v14);
  id v20 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v17 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

BOOL sub_10047DAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a2, (uint64_t)v6, &qword_10099D8A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_100015794((uint64_t)v6, &qword_10099D8A0);
    return 1;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    uint64_t v12 = type metadata accessor for SafeLocation(0LL);
    uint64_t v13 = *(void *)(a1 + *(int *)(v12 + 52));
    __chkstk_darwin(v12);
    *(&v15 - 2) = (uint64_t)v10;
    swift_bridgeObjectRetain(v13);
    BOOL v11 = sub_1004E98E4((uint64_t (*)(char *))sub_100246EF4, (BOOL)(&v15 - 4), v13);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  return v11;
}

uint64_t sub_10047DC38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v84 = a3;
  uint64_t v88 = a4;
  uint64_t v85 = type metadata accessor for UUID(0LL);
  uint64_t v89 = *(void *)(v85 - 8);
  uint64_t v7 = __chkstk_darwin(v85);
  uint64_t v83 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v82 = (char *)&v79 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v79 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v79 - v13;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100504F30(a1, (uint64_t)v17);
  uint64_t v86 = v19;
  uint64_t v87 = v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18) != 1)
  {
    sub_10002218C((uint64_t)v17, (uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
    uint64_t v34 = type metadata accessor for LeashRecord(0LL);
    uint64_t v35 = *(void *)(v84 + *(int *)(v34 + 24));
    __chkstk_darwin(v34);
    *(&v79 - 2) = a1;
    swift_bridgeObjectRetain(v35);
    BOOL v36 = sub_1004E98E4((uint64_t (*)(char *))sub_1002DDE40, (BOOL)(&v79 - 4), v35);
    swift_bridgeObjectRelease();
    uint64_t v37 = (uint64_t)v21;
    if (v36)
    {
      char v38 = sub_1002C1464((uint64_t)v21, a2);
      uint64_t v39 = v89;
      if ((v38 & 1) != 0)
      {
        if ((sub_1002B98A4((uint64_t)v21, a2) & 1) == 0)
        {
          uint64_t v77 = v88;
          sub_10002218C((uint64_t)v21, v88, type metadata accessor for OwnedBeaconRecord);
          uint64_t v33 = 0LL;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v77, v33, 1LL, v87);
        }

        if (qword_10099B4C8 != -1) {
          swift_once(&qword_10099B4C8, sub_10047B404);
        }
        uint64_t v40 = type metadata accessor for Logger(0LL);
        sub_10000A720(v40, (uint64_t)qword_100A2AAA0);
        uint64_t v41 = v81;
        uint64_t v42 = v85;
        uint64_t v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 16))(v81, a1, v85);
        uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
        os_log_type_t v45 = static os_log_type_t.error.getter(v44);
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = v41;
          unint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v48 = swift_slowAlloc(32LL, -1LL);
          uint64_t v84 = v4;
          uint64_t v49 = v48;
          uint64_t v92 = v48;
          *(_DWORD *)unint64_t v47 = 136315138;
          uint64_t v80 = (char *)v37;
          uint64_t v50 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v42, v50);
          uint64_t v90 = sub_1003F11D4(v51, v52, &v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v47 + 4, v47 + 12);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v89 + 8))(v46, v42);
          _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "Received separation alert request for paused beacon: %s",  v47,  0xCu);
          uint64_t v33 = 1LL;
          swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v49, -1LL, -1LL);
          swift_slowDealloc(v47, -1LL, -1LL);

          sub_100018C68((uint64_t)v80, type metadata accessor for OwnedBeaconRecord);
          goto LABEL_24;
        }
      }

      else
      {
        if (qword_10099B4C8 != -1) {
          swift_once(&qword_10099B4C8, sub_10047B404);
        }
        uint64_t v67 = type metadata accessor for Logger(0LL);
        sub_10000A720(v67, (uint64_t)qword_100A2AAA0);
        uint64_t v41 = v82;
        uint64_t v42 = v85;
        uint64_t v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 16))(v82, a1, v85);
        uint64_t v44 = (os_log_s *)Logger.logObject.getter(v68);
        os_log_type_t v69 = static os_log_type_t.error.getter(v44);
        if (os_log_type_enabled(v44, v69))
        {
          uint64_t v70 = v41;
          uint64_t v71 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v72 = swift_slowAlloc(32LL, -1LL);
          uint64_t v84 = v4;
          uint64_t v73 = v72;
          uint64_t v92 = v72;
          *(_DWORD *)uint64_t v71 = 136315138;
          uint64_t v80 = (char *)v37;
          uint64_t v74 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v42, v74);
          uint64_t v90 = sub_1003F11D4(v75, v76, &v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v71 + 4, v71 + 12);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v89 + 8))(v70, v42);
          _os_log_impl( (void *)&_mh_execute_header,  v44,  v69,  "Received separation alert request for unsupported beacon: %s",  v71,  0xCu);
          uint64_t v33 = 1LL;
          swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v73, -1LL, -1LL);
          swift_slowDealloc(v71, -1LL, -1LL);

          sub_100018C68((uint64_t)v80, type metadata accessor for OwnedBeaconRecord);
          goto LABEL_24;
        }
      }

      (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v42);
      sub_100018C68(v37, type metadata accessor for OwnedBeaconRecord);
      uint64_t v33 = 1LL;
      goto LABEL_24;
    }

    uint64_t v84 = v4;
    uint64_t v53 = v89;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v54 = type metadata accessor for Logger(0LL);
    sub_10000A720(v54, (uint64_t)qword_100A2AAA0);
    uint64_t v55 = v83;
    uint64_t v56 = v85;
    uint64_t v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 16))(v83, a1, v85);
    uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.error.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = swift_slowAlloc(12LL, -1LL);
      uint64_t v80 = v21;
      __int128 v61 = v55;
      uint64_t v62 = (uint8_t *)v60;
      uint64_t v63 = swift_slowAlloc(32LL, -1LL);
      uint64_t v92 = v63;
      *(_DWORD *)uint64_t v62 = 136315138;
      uint64_t v64 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter(v56, v64);
      uint64_t v90 = sub_1003F11D4(v65, v66, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v61, v56);
      _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "Received separation alert request for non-leashed beacon: %s",  v62,  0xCu);
      uint64_t v33 = 1LL;
      swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1LL, -1LL);
      swift_slowDealloc(v62, -1LL, -1LL);

      sub_100018C68((uint64_t)v80, type metadata accessor for OwnedBeaconRecord);
      goto LABEL_24;
    }

    (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v56);
    sub_100018C68((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
LABEL_23:
    uint64_t v33 = 1LL;
    goto LABEL_24;
  }

  uint64_t v84 = v4;
  sub_100015794((uint64_t)v17, (uint64_t *)&unk_1009A9C30);
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  sub_10000A720(v22, (uint64_t)qword_100A2AAA0);
  uint64_t v23 = v89;
  uint64_t v24 = v85;
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 16))(v14, a1, v85);
  uint64_t v26 = (void *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.error.getter(v26);
  if (!os_log_type_enabled((os_log_t)v26, v27))
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v24);

    goto LABEL_23;
  }

  unint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v29 = swift_slowAlloc(32LL, -1LL);
  uint64_t v92 = v29;
  *(_DWORD *)unint64_t v28 = 136315138;
  uint64_t v30 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v24, v30);
  uint64_t v90 = sub_1003F11D4(v31, v32, &v92);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v28 + 4, v28 + 12);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v14, v24);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v26,  v27,  "Received separation alert request for unknown beacon: %s",  v28,  0xCu);
  swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v29, -1LL, -1LL);
  swift_slowDealloc(v28, -1LL, -1LL);

  uint64_t v33 = 1LL;
LABEL_24:
  uint64_t v77 = v88;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v77, v33, 1LL, v87);
}

uint64_t sub_10047E5E4( void *a1, uint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = a9;
  uint64_t v18 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a3 & 1) != 0)
  {
    uint64_t v55 = a9;
    uint64_t v56 = (uint64_t)a1;
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v22 = v21;
    uint64_t v23 = sub_100007864( &qword_1009AF810,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E2FB8);
    swift_willThrowTypedImpl(&v56, v22, v23);
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000A720(v24, (uint64_t)qword_100A2AAA0);
    sub_10049E174(a1, a2, 1);
    id v25 = a4;
    sub_10049E174(a1, a2, 1);
    id v26 = v25;
    os_log_type_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter(v27);
    int v54 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      uint64_t v49 = a6;
      uint64_t v30 = v29;
      uint64_t v53 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v48 = swift_slowAlloc(32LL, -1LL);
      uint64_t v59 = v48;
      *(_DWORD *)uint64_t v30 = 138412546;
      uint64_t v51 = a4;
      uint64_t v52 = a8;
      uint64_t v56 = (uint64_t)v26;
      os_log_t v47 = v27;
      id v31 = v26;
      uint64_t v50 = v20;
      id v32 = v31;
      a4 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v30 + 4, v30 + 12);
      *uint64_t v53 = v26;

      uint64_t v20 = v50;
      *(_WORD *)(v30 + 12) = 2080;
      uint64_t v56 = (uint64_t)a1;
      uint64_t v57 = a2;
      char v58 = 1;
      id v33 = a1;
      uint64_t v34 = sub_100004AEC(&qword_1009AF838);
      uint64_t v35 = String.init<A>(describing:)(&v56, v34);
      uint64_t v56 = sub_1003F11D4(v35, v36, &v59);
      a8 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      sub_10049E184(a1, a2, 1);
      sub_10049E184(a1, a2, 1);
      os_log_t v37 = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  (os_log_type_t)v54,  "Failed to reverse geocode location %@ for notification, result: %s",  (uint8_t *)v30,  0x16u);
      uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      uint64_t v39 = v53;
      swift_arrayDestroy(v53, 1LL, v38);
      swift_slowDealloc(v39, -1LL, -1LL);
      uint64_t v40 = v48;
      swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      uint64_t v41 = v30;
      a6 = v49;
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {

      sub_10049E184(a1, a2, 1);
      sub_10049E184(a1, a2, 1);
    }

    a1 = 0LL;
    a2 = 0LL;
    uint64_t v17 = v55;
  }

  else
  {
    swift_bridgeObjectRetain(a2);
  }

  uint64_t v42 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v20, 1LL, 1LL, v42);
  uint64_t v43 = swift_allocObject(&unk_10095DF10, 104LL, 7LL);
  *(void *)(v43 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v43 + 24) = 0LL;
  *(void *)(v43 + 32) = a5;
  *(void *)(v43 + 40) = a6;
  *(void *)(v43 + 48) = a7;
  *(void *)(v43 + 56) = a8;
  *(void *)(v43 + 64) = a4;
  *(void *)(v43 + 72) = v17;
  *(_BYTE *)(v43 + 80) = 0;
  *(void *)(v43 + 88) = a1;
  *(void *)(v43 + 96) = a2;
  id v44 = a4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(a8);
  sub_1003B76DC((uint64_t)v20, (uint64_t)&unk_1009AF830, v43);
  return swift_release();
}

uint64_t sub_10047E9EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 336) = v27;
  *(void *)(v8 + 344) = v28;
  *(_BYTE *)(v8 + 777) = v26;
  *(void *)(v8 + 320) = a8;
  *(void *)(v8 + 328) = v25;
  *(void *)(v8 + 304) = a6;
  *(void *)(v8 + 312) = a7;
  *(void *)(v8 + 288) = a4;
  *(void *)(v8 + 296) = a5;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  *(void *)(v8 + 352) = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 360) = swift_task_alloc(v10);
  *(void *)(v8 + 368) = swift_task_alloc(v10);
  *(void *)(v8 + 376) = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for SafeLocation(0LL);
  *(void *)(v8 + 384) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 392) = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 400) = swift_task_alloc(v13);
  *(void *)(v8 + 408) = swift_task_alloc(v13);
  *(void *)(v8 + 4swift_weakDestroy(v0 + 16) = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for AnyAnalyticsEvent(0LL);
  *(void *)(v8 + 424) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v8 + 432) = v15;
  *(void *)(v8 + 440) = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for StableIdentifier(0LL);
  *(void *)(v8 + 448) = v16;
  *(void *)(v8 + 456) = swift_task_alloc((*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  *(void *)(v8 + 464) = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  *(void *)(v8 + 472) = v18;
  uint64_t v19 = *(void *)(v18 + 64);
  *(void *)(v8 + 480) = v19;
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 488) = swift_task_alloc(v20);
  *(void *)(v8 + 496) = swift_task_alloc(v20);
  *(void *)(v8 + 504) = swift_task_alloc(v20);
  *(void *)(v8 + 512) = swift_task_alloc(v20);
  *(void *)(v8 + 520) = swift_task_alloc(v20);
  *(void *)(v8 + 528) = swift_task_alloc(v20);
  *(void *)(v8 + 536) = swift_task_alloc(v20);
  uint64_t v21 = type metadata accessor for UUID(0LL);
  *(void *)(v8 + 544) = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  *(void *)(v8 + 552) = v22;
  unint64_t v23 = (*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 560) = swift_task_alloc(v23);
  *(void *)(v8 + 568) = swift_task_alloc(v23);
  *(void *)(v8 + 576) = swift_task_alloc(v23);
  return swift_task_switch(sub_10047EBD0, 0LL, 0LL);
}

uint64_t sub_10047EBD0()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 208, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 168, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 192))
  {
    sub_100012EC0((__int128 *)(v0 + 168), v0 + 128);
    swift_release();
    sub_100012ED8((void *)(v0 + 128), *(void *)(v0 + 152));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C938 + dword_10099C938);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C93C);
    *(void *)(v0 + 584) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10047ECD0;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10047ECD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 584LL);
  *(void *)(*(void *)v1 + 592LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10047ED2C, 0LL, 0LL);
}

uint64_t sub_10047ED2C()
{
  uint64_t v1 = (void *)(v0 + 128);
  if (*(void *)(v0 + 592))
  {
    uint64_t v2 = *(void *)(v0 + 312);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    int64_t v3 = *(void *)(v2 + 16);
    *(void *)(v0 + 600) = v3;
    uint64_t v4 = _swiftEmptyArrayStorage;
    if (v3)
    {
      uint64_t v5 = *(void *)(v0 + 552);
      uint64_t v6 = *(void *)(v0 + 472);
      uint64_t v42 = *(void *)(v0 + 464);
      id v44 = _swiftEmptyArrayStorage;
      uint64_t v7 = *(void *)(v0 + 312);
      sub_1000328D0(0, v3, 0);
      uint64_t v8 = v7 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      uint64_t v9 = *(void *)(v6 + 72);
      uint64_t v4 = _swiftEmptyArrayStorage;
      uint64_t v40 = v9;
      do
      {
        uint64_t v10 = *(void *)(v0 + 576);
        uint64_t v11 = *(void *)(v0 + 544);
        uint64_t v12 = *(void *)(v0 + 536);
        sub_10001DC4C(v8, v12, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v10, v12 + *(int *)(v42 + 20), v11);
        sub_100018C68(v12, type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        {
          sub_1000328D0(0, v4[2] + 1LL, 1);
          uint64_t v9 = v40;
          uint64_t v4 = v44;
        }

        unint64_t v14 = v4[2];
        unint64_t v13 = v4[3];
        if (v14 >= v13 >> 1)
        {
          sub_1000328D0(v13 > 1, v14 + 1, 1);
          uint64_t v9 = v40;
          uint64_t v4 = v44;
        }

        uint64_t v15 = *(void *)(v0 + 576);
        uint64_t v16 = *(void *)(v0 + 544);
        v4[2] = v14 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))( (unint64_t)v4 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + *(void *)(v5 + 72) * v14,
          v15,
          v16);
        id v44 = v4;
        v8 += v9;
        --v3;
      }

      while (v3);
    }

    *(void *)(v0 + 608) = sub_1006F1060((uint64_t)v4);
    swift_bridgeObjectRelease();
    uint64_t v17 = (void *)swift_task_alloc(dword_10099CEAC);
    *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = v17;
    void *v17 = v0;
    v17[1] = sub_10047F094;
    return sub_10001B030(*(void *)(v0 + 312));
  }

  else
  {
    uint64_t v19 = *(void (**)(void *, uint64_t))(v0 + 296);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v21 = v20;
    *(void *)(v0 + 240) = 12LL;
    unint64_t v22 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v23 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 232), v0 + 240, v22, v21, v23);
    uint64_t v24 = *(void **)(v0 + 232);
    v19(v24, 1LL);

    uint64_t v25 = *(void *)(v0 + 568);
    uint64_t v26 = *(void *)(v0 + 560);
    uint64_t v27 = *(void *)(v0 + 536);
    uint64_t v28 = *(void *)(v0 + 528);
    uint64_t v29 = *(void *)(v0 + 520);
    uint64_t v30 = *(void *)(v0 + 504);
    uint64_t v31 = *(void *)(v0 + 512);
    uint64_t v33 = *(void *)(v0 + 488);
    uint64_t v32 = *(void *)(v0 + 496);
    uint64_t v34 = *(void *)(v0 + 456);
    uint64_t v35 = *(void *)(v0 + 440);
    uint64_t v36 = *(void *)(v0 + 416);
    uint64_t v37 = *(void *)(v0 + 408);
    uint64_t v38 = *(void *)(v0 + 400);
    uint64_t v39 = *(void *)(v0 + 376);
    uint64_t v41 = *(void *)(v0 + 368);
    uint64_t v43 = *(void *)(v0 + 360);
    swift_task_dealloc(*(void *)(v0 + 576));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10047F094(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 616));
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v5 = sub_10047FAEC;
  }

  else
  {
    *(void *)(v4 + 624) = a1;
    uint64_t v5 = sub_10047F10C;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10047F10C()
{
  uint64_t v1 = *(void *)(v0 + 624);
  *(void *)(v0 + 632) = v1;
  int64_t v2 = *(void *)(v1 + 16);
  int64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 552);
    uint64_t v5 = *(void *)(v0 + 472);
    uint64_t v120 = *(void *)(v0 + 464);
    uint64_t v122 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v2, 0);
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    int64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = *(void *)(v0 + 568);
      uint64_t v9 = *(void *)(v0 + 544);
      uint64_t v10 = *(void *)(v0 + 536);
      sub_10001DC4C(v6, v10, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v10 + *(int *)(v120 + 20), v9);
      sub_100018C68(v10, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1000328D0(0, v3[2] + 1LL, 1);
        int64_t v3 = v122;
      }

      unint64_t v12 = v3[2];
      unint64_t v11 = v3[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000328D0(v11 > 1, v12 + 1, 1);
        int64_t v3 = v122;
      }

      uint64_t v13 = *(void *)(v0 + 568);
      uint64_t v14 = *(void *)(v0 + 544);
      v3[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))( (unint64_t)v3 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v12,
        v13,
        v14);
      uint64_t v122 = v3;
      v6 += v7;
      --v2;
    }

    while (v2);
  }

  uint64_t v15 = *(void *)(v0 + 608);
  uint64_t v16 = sub_1006F1060((uint64_t)v3);
  swift_bridgeObjectRelease();
  if (*(void *)(v16 + 16) <= *(void *)(v15 + 16) >> 3)
  {
    uint64_t v122 = *(void **)(v0 + 608);
    sub_1003CBB18(v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = v122;
  }

  else
  {
    uint64_t v17 = sub_1003CC7D4(v16, *(void *)(v0 + 608));
    swift_bridgeObjectRelease();
  }

  *(void *)(v0 + 640) = v17;
  if (*(void *)(v0 + 600))
  {
    uint64_t v18 = *(void *)(v0 + 472);
    uint64_t v19 = *(void *)(v0 + 312);
    int v20 = *(_DWORD *)(v18 + 80);
    *(_DWORD *)(v0 + 768) = v20;
    uint64_t v21 = *(void *)(v18 + 72);
    *(void *)(v0 + 648) = v21;
    swift_bridgeObjectRetain(v19);
    uint64_t v23 = 0LL;
    while (1)
    {
      *(void *)(v0 + 656) = v23;
      uint64_t v24 = *(void *)(v0 + 528);
      uint64_t v25 = *(void *)(v0 + 520);
      uint64_t v26 = *(void *)(v0 + 456);
      uint64_t v27 = *(void *)(v0 + 464);
      uint64_t v28 = *(void *)(v0 + 448);
      sub_10001DC4C( v22 + ((v20 + 32LL) & ~(unint64_t)v20) + v21 * v23,  v24,  type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v24 + *(int *)(v27 + 24), v26, type metadata accessor for StableIdentifier);
      LODWORD(v28) = swift_getEnumCaseMultiPayload(v26, v28);
      sub_100018C68(v26, type metadata accessor for StableIdentifier);
      sub_10001DC4C(v24, v25, type metadata accessor for OwnedBeaconRecord);
      if (!(_DWORD)v28)
      {
        uint64_t v31 = *(void *)(v0 + 640);
        if (*(void *)(v31 + 16))
        {
          uint64_t v32 = *(void *)(v0 + 544);
          uint64_t v33 = *(void *)(v0 + 520) + *(int *)(*(void *)(v0 + 464) + 20LL);
          uint64_t v34 = *(void *)(v31 + 40);
          uint64_t v35 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v32, v35);
          uint64_t v37 = -1LL << *(_BYTE *)(v31 + 32);
          unint64_t v38 = v36 & ~v37;
          if (((*(void *)(v31 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v38) & 1) != 0) {
            break;
          }
        }
      }

uint64_t sub_10047FAEC()
{
  uint64_t v1 = *(void *)(v0 + 312);
  *(void *)(v0 + 632) = v1;
  int64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain(v1);
  int64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 552);
    uint64_t v5 = *(void *)(v0 + 472);
    uint64_t v120 = *(void *)(v0 + 464);
    uint64_t v122 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v2, 0);
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    int64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = *(void *)(v0 + 568);
      uint64_t v9 = *(void *)(v0 + 544);
      uint64_t v10 = *(void *)(v0 + 536);
      sub_10001DC4C(v6, v10, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v10 + *(int *)(v120 + 20), v9);
      sub_100018C68(v10, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1000328D0(0, v3[2] + 1LL, 1);
        int64_t v3 = v122;
      }

      unint64_t v12 = v3[2];
      unint64_t v11 = v3[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000328D0(v11 > 1, v12 + 1, 1);
        int64_t v3 = v122;
      }

      uint64_t v13 = *(void *)(v0 + 568);
      uint64_t v14 = *(void *)(v0 + 544);
      v3[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))( (unint64_t)v3 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v12,
        v13,
        v14);
      uint64_t v122 = v3;
      v6 += v7;
      --v2;
    }

    while (v2);
  }

  uint64_t v15 = *(void *)(v0 + 608);
  uint64_t v16 = sub_1006F1060((uint64_t)v3);
  swift_bridgeObjectRelease();
  if (*(void *)(v16 + 16) <= *(void *)(v15 + 16) >> 3)
  {
    uint64_t v122 = *(void **)(v0 + 608);
    sub_1003CBB18(v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = v122;
  }

  else
  {
    uint64_t v17 = sub_1003CC7D4(v16, *(void *)(v0 + 608));
    swift_bridgeObjectRelease();
  }

  *(void *)(v0 + 640) = v17;
  if (*(void *)(v0 + 600))
  {
    uint64_t v18 = *(void *)(v0 + 472);
    uint64_t v19 = *(void *)(v0 + 312);
    int v20 = *(_DWORD *)(v18 + 80);
    *(_DWORD *)(v0 + 768) = v20;
    uint64_t v21 = *(void *)(v18 + 72);
    *(void *)(v0 + 648) = v21;
    swift_bridgeObjectRetain(v19);
    uint64_t v23 = 0LL;
    while (1)
    {
      *(void *)(v0 + 656) = v23;
      uint64_t v24 = *(void *)(v0 + 528);
      uint64_t v25 = *(void *)(v0 + 520);
      uint64_t v26 = *(void *)(v0 + 456);
      uint64_t v27 = *(void *)(v0 + 464);
      uint64_t v28 = *(void *)(v0 + 448);
      sub_10001DC4C( v22 + ((v20 + 32LL) & ~(unint64_t)v20) + v21 * v23,  v24,  type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v24 + *(int *)(v27 + 24), v26, type metadata accessor for StableIdentifier);
      LODWORD(v28) = swift_getEnumCaseMultiPayload(v26, v28);
      sub_100018C68(v26, type metadata accessor for StableIdentifier);
      sub_10001DC4C(v24, v25, type metadata accessor for OwnedBeaconRecord);
      if (!(_DWORD)v28)
      {
        uint64_t v31 = *(void *)(v0 + 640);
        if (*(void *)(v31 + 16))
        {
          uint64_t v32 = *(void *)(v0 + 544);
          uint64_t v33 = *(void *)(v0 + 520) + *(int *)(*(void *)(v0 + 464) + 20LL);
          uint64_t v34 = *(void *)(v31 + 40);
          uint64_t v35 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v32, v35);
          uint64_t v37 = -1LL << *(_BYTE *)(v31 + 32);
          unint64_t v38 = v36 & ~v37;
          if (((*(void *)(v31 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v38) & 1) != 0) {
            break;
          }
        }
      }

uint64_t sub_1004804D4(uint64_t a1)
{
  return swift_task_switch(sub_100480514, 0LL, 0LL);
}

uint64_t sub_100480514()
{
  uint64_t v2 = v0[54];
  uint64_t v1 = v0[55];
  uint64_t v3 = v0[53];
  static AnalyticsPublisher.publish(event:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v4 = v0[66];
  uint64_t v5 = v0[64];
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2AAA0);
  uint64_t v7 = sub_10001DC4C(v4, v5, type metadata accessor for OwnedBeaconRecord);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = v0[68];
    uint64_t v11 = v0[64];
    unint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v13;
    *(_DWORD *)unint64_t v12 = 136315138;
    uint64_t v14 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v10, v14);
    v0[35] = sub_1003F11D4(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 35, v0 + 36, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v11, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Ignoring separation monitor alert for unregistered self-beaconing device: %s",  v12,  0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v0[64], type metadata accessor for OwnedBeaconRecord);
  }

  uint64_t v17 = v0[66];
  uint64_t v18 = v0[36];
  uint64_t v19 = swift_task_alloc(32LL);
  v0[86] = v19;
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v18;
  *(void *)(v19 + 24) = v17;
  int v20 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[87] = v20;
  *int v20 = v0;
  v20[1] = sub_1004807A0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v20,  0LL,  0LL,  0xD00000000000003FLL,  0x80000001008637C0LL,  sub_10049E58C,  v19,  (char *)&type metadata for () + 8);
}

uint64_t sub_1004807A0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 696);
  *(void *)(*v1 + 704) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 688);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v4);
    uint64_t v5 = sub_100481CAC;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 688));
    uint64_t v5 = sub_100480840;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100480840()
{
  uint64_t v1 = *(void *)(v0 + 600);
  uint64_t v2 = *(void *)(v0 + 656) + 1LL;
  sub_100018C68(*(void *)(v0 + 528), type metadata accessor for OwnedBeaconRecord);
  if (v2 == v1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v0 + 632);
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v3 + 16);
    *(void *)(v0 + 664) = v4;
    if (v4)
    {
      uint64_t v5 = *(void *)(v0 + 632);
      uint64_t v7 = *(void *)(v0 + 472);
      uint64_t v6 = *(void *)(v0 + 480);
      uint64_t v8 = *(void **)(v0 + 320);
      LODWORD(v9) = *(_DWORD *)(v7 + 80);
      *(_DWORD *)(v0 + 772) = v9;
      uint64_t v9 = v9;
      uint64_t v10 = (v9 + 32) & ~v9;
      *(void *)(v0 + 672) = *(void *)(v7 + 72);
      *(void *)(v0 + 720) = _swiftEmptyArrayStorage;
      *(void *)(v0 + 712) = 0LL;
      uint64_t v11 = *(void *)(v0 + 536);
      uint64_t v12 = *(void *)(v0 + 504);
      uint64_t v13 = *(void *)(v0 + 288);
      uint64_t v14 = v10 + v6;
      uint64_t v15 = v9 | 7LL;
      sub_10001DC4C(v5 + v10, v12, type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v12, v11, type metadata accessor for OwnedBeaconRecord);
      uint64_t v16 = swift_allocObject(&unk_10095DF38, v14, v15);
      *(void *)(v0 + 728) = v16;
      *(void *)(v16 + swift_weakDestroy(v0 + 16) = v13;
      *(void *)(v16 + 24) = v8;
      sub_10002218C(v11, v16 + v10, type metadata accessor for OwnedBeaconRecord);
      uint64_t v17 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      id v18 = v8;
      uint64_t v19 = (void *)swift_task_alloc(v17);
      *(void *)(v0 + 736) = v19;
      *uint64_t v19 = v0;
      v19[1] = sub_100481084;
      return unsafeBlocking<A>(_:)(v0 + 776, sub_10049E540, v16, &type metadata for Bool);
    }

    swift_bridgeObjectRelease();
    *(void *)(v0 + 744) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      uint64_t v51 = *(void *)(v0 + 328);
      if (v51 == 1)
      {
        uint64_t v59 = *(void *)(v0 + 336);
        uint64_t v60 = *(void *)(v0 + 344);
        char v61 = *(_BYTE *)(v0 + 777);
        uint64_t v62 = *(void **)(v0 + 320);
        uint64_t v64 = *(void *)(v0 + 296);
        uint64_t v63 = *(void *)(v0 + 304);
        *(void *)(v0 + swift_weakDestroy(v0 + 16) = 1LL;
        *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
        *(_BYTE *)(v0 + 32) = v61;
        *(void *)(v0 + 40) = 0LL;
        *(void *)(v0 + 48) = v59;
        *(void *)(v0 + 56) = v60;
        *(void *)(v0 + 64) = v62;
        swift_bridgeObjectRetain(v60);
        id v65 = v62;
        sub_100482CF4(v0 + 16, v64, v63);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        if (!v51)
        {
          uint64_t v52 = *(void **)(v0 + 320);
          uint64_t v53 = *(void *)(v0 + 288);
          uint64_t v54 = swift_allocObject(&unk_10095DF60, 32LL, 7LL);
          *(void *)(v0 + 752) = v54;
          *(void *)(v54 + swift_weakDestroy(v0 + 16) = v53;
          *(void *)(v54 + 24) = v52;
          uint64_t v55 = async function pointer to unsafeBlocking<A>(_:)[1];
          swift_retain();
          id v56 = v52;
          uint64_t v57 = (void *)swift_task_alloc(v55);
          *(void *)(v0 + 760) = v57;
          *uint64_t v57 = v0;
          v57[1] = sub_100481948;
          return unsafeBlocking<A>(_:)(*(void *)(v0 + 376), sub_10049E584, v54, *(void *)(v0 + 352));
        }

        uint64_t v66 = (void *)(v0 + 248);
        uint64_t v67 = v0 + 256;
        swift_bridgeObjectRelease();
        if (qword_10099B4C8 != -1) {
          swift_once(&qword_10099B4C8, sub_10047B404);
        }
        uint64_t v68 = type metadata accessor for Logger(0LL);
        uint64_t v69 = sub_10000A720(v68, (uint64_t)qword_100A2AAA0);
        uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
        os_log_type_t v71 = static os_log_type_t.error.getter(v70);
        if (os_log_type_enabled(v70, v71))
        {
          uint64_t v72 = *(void *)(v0 + 328);
          uint64_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v74 = swift_slowAlloc(32LL, -1LL);
          uint64_t v101 = v74;
          *(_DWORD *)uint64_t v73 = 136315138;
          *(void *)(v0 + 264) = v72;
          uint64_t v66 = (void *)(v0 + 248);
          uint64_t v67 = v0 + 256;
          type metadata accessor for SPSeparationEventType(0LL);
          uint64_t v76 = String.init<A>(describing:)(v0 + 264, v75);
          *(void *)(v0 + 272) = sub_1003F11D4(v76, v77, &v101);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v73 + 4, v73 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Received unknown eventType: %s", v73, 0xCu);
          swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v74, -1LL, -1LL);
          swift_slowDealloc(v73, -1LL, -1LL);
        }

        uint64_t v78 = *(void (**)(void *, uint64_t))(v0 + 296);
        type metadata accessor for SPSeparationMonitoringError(0LL);
        uint64_t v80 = v79;
        *(void *)(v0 + 256) = 12LL;
        unint64_t v81 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v82 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
        _BridgedStoredNSError.init(_:userInfo:)(v66, v67, v81, v80, v82);
        uint64_t v83 = *(void **)(v0 + 248);
        v78(v83, 1LL);
        swift_release();
      }
    }

    else
    {
      uint64_t v58 = *(void (**)(void, void))(v0 + 296);
      swift_bridgeObjectRelease();
      v58(0LL, 0LL);
      swift_release();
    }

    uint64_t v84 = *(void *)(v0 + 568);
    uint64_t v85 = *(void *)(v0 + 560);
    uint64_t v86 = *(void *)(v0 + 536);
    uint64_t v87 = *(void *)(v0 + 528);
    uint64_t v88 = *(void *)(v0 + 520);
    uint64_t v89 = *(void *)(v0 + 504);
    uint64_t v90 = *(void *)(v0 + 512);
    uint64_t v92 = *(void *)(v0 + 488);
    uint64_t v91 = *(void *)(v0 + 496);
    uint64_t v93 = *(void *)(v0 + 456);
    uint64_t v94 = *(void *)(v0 + 440);
    uint64_t v95 = *(void *)(v0 + 416);
    uint64_t v96 = *(void *)(v0 + 408);
    uint64_t v97 = *(void *)(v0 + 400);
    uint64_t v98 = *(void *)(v0 + 376);
    uint64_t v99 = *(void *)(v0 + 368);
    uint64_t v100 = *(void *)(v0 + 360);
    swift_task_dealloc(*(void *)(v0 + 576));
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    while (1)
    {
      uint64_t v23 = *(void *)(v0 + 656) + 1LL;
      *(void *)(v0 + 656) = v23;
      uint64_t v24 = *(void *)(v0 + 528);
      uint64_t v25 = *(void *)(v0 + 520);
      uint64_t v27 = *(void *)(v0 + 456);
      uint64_t v26 = *(void *)(v0 + 464);
      uint64_t v28 = *(void *)(v0 + 448);
      sub_10001DC4C( *(void *)(v0 + 312)
      + ((*(unsigned __int8 *)(v0 + 768) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 768))
      + *(void *)(v0 + 648) * v23,
        v24,
        type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v24 + *(int *)(v26 + 24), v27, type metadata accessor for StableIdentifier);
      LODWORD(v28) = swift_getEnumCaseMultiPayload(v27, v28);
      sub_100018C68(v27, type metadata accessor for StableIdentifier);
      sub_10001DC4C(v24, v25, type metadata accessor for OwnedBeaconRecord);
      if (!(_DWORD)v28)
      {
        uint64_t v29 = *(void *)(v0 + 640);
        if (*(void *)(v29 + 16))
        {
          uint64_t v30 = *(void *)(v0 + 544);
          uint64_t v31 = *(void *)(v0 + 520) + *(int *)(*(void *)(v0 + 464) + 20LL);
          uint64_t v32 = *(void *)(v29 + 40);
          uint64_t v33 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v30, v33);
          uint64_t v35 = -1LL << *(_BYTE *)(v29 + 32);
          unint64_t v36 = v34 & ~v35;
          if (((*(void *)(v29 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v36) & 1) != 0) {
            break;
          }
        }
      }

uint64_t sub_100481084()
{
  return swift_task_switch(sub_1004810E4, 0LL, 0LL);
}

uint64_t sub_1004810E4()
{
  if ((*(_BYTE *)(v0 + 776) & 1) != 0)
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v1 = *(void *)(v0 + 504);
    uint64_t v2 = *(void *)(v0 + 488);
    uint64_t v3 = *(void **)(v0 + 320);
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_10000A720(v4, (uint64_t)qword_100A2AAA0);
    sub_10001DC4C(v1, v2, type metadata accessor for OwnedBeaconRecord);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(v0 + 544);
      uint64_t v93 = *(void *)(v0 + 504);
      uint64_t v8 = *(void *)(v0 + 488);
      uint64_t v9 = *(void **)(v0 + 320);
      uint64_t v10 = swift_slowAlloc(32LL, -1LL);
      uint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v95 = v12;
      *(_DWORD *)uint64_t v10 = 138412803;
      *(void *)(v10 + 4) = v9;
      *uint64_t v11 = v9;

      *(_WORD *)(v10 + 12) = 2160;
      *(void *)(v10 + 14) = 1752392040LL;
      *(_WORD *)(v10 + 22) = 2081;
      uint64_t v13 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v7, v13);
      *(void *)(v10 + 24) = sub_1003F11D4(v14, v15, &v95);
      swift_bridgeObjectRelease();
      sub_100018C68(v8, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Location is in safe location - not posting separation notification at %@ for beacon %{private,mask.hash}s.",  (uint8_t *)v10,  0x20u);
      uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v11, 1LL, v16);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);

      uint64_t v17 = v93;
    }

    else
    {
      uint64_t v27 = *(void *)(v0 + 504);
      uint64_t v28 = *(void *)(v0 + 488);
      uint64_t v29 = *(void **)(v0 + 320);

      sub_100018C68(v28, type metadata accessor for OwnedBeaconRecord);
      uint64_t v17 = v27;
    }

    sub_100018C68(v17, type metadata accessor for OwnedBeaconRecord);
    unint64_t v20 = *(void *)(v0 + 720);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 720);
    sub_10001DC4C(*(void *)(v0 + 504), *(void *)(v0 + 496), type metadata accessor for OwnedBeaconRecord);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    unint64_t v20 = *(void *)(v0 + 720);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v20 = sub_1004C46DC(0, *(void *)(v20 + 16) + 1LL, 1, *(void *)(v0 + 720));
    }
    unint64_t v22 = *(void *)(v20 + 16);
    unint64_t v21 = *(void *)(v20 + 24);
    if (v22 >= v21 >> 1) {
      unint64_t v20 = sub_1004C46DC(v21 > 1, v22 + 1, 1, v20);
    }
    uint64_t v23 = *(void *)(v0 + 672);
    uint64_t v24 = *(unsigned __int8 *)(v0 + 772);
    uint64_t v25 = *(void *)(v0 + 496);
    uint64_t v26 = *(void *)(v0 + 504);
    *(void *)(v20 + swift_weakDestroy(v0 + 16) = v22 + 1;
    sub_10002218C(v25, v20 + ((v24 + 32) & ~v24) + v23 * v22, type metadata accessor for OwnedBeaconRecord);
    sub_100018C68(v26, type metadata accessor for OwnedBeaconRecord);
  }

  uint64_t v30 = *(void *)(v0 + 712) + 1LL;
  if (v30 == *(void *)(v0 + 664))
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 744) = v20;
    if (*(void *)(v20 + 16))
    {
      uint64_t v31 = *(void *)(v0 + 328);
      if (v31 == 1)
      {
        uint64_t v52 = *(void *)(v0 + 336);
        uint64_t v53 = *(void *)(v0 + 344);
        char v54 = *(_BYTE *)(v0 + 777);
        uint64_t v55 = *(void **)(v0 + 320);
        uint64_t v56 = *(void *)(v0 + 296);
        uint64_t v57 = *(void *)(v0 + 304);
        *(void *)(v0 + swift_weakDestroy(v0 + 16) = 1LL;
        *(void *)(v0 + 24) = v20;
        *(_BYTE *)(v0 + 32) = v54;
        *(void *)(v0 + 40) = 0LL;
        *(void *)(v0 + 48) = v52;
        *(void *)(v0 + 56) = v53;
        *(void *)(v0 + 64) = v55;
        swift_bridgeObjectRetain(v53);
        id v58 = v55;
        sub_100482CF4(v0 + 16, v56, v57);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        if (!v31)
        {
          uint64_t v32 = *(void **)(v0 + 320);
          uint64_t v33 = *(void *)(v0 + 288);
          uint64_t v34 = swift_allocObject(&unk_10095DF60, 32LL, 7LL);
          *(void *)(v0 + 752) = v34;
          *(void *)(v34 + swift_weakDestroy(v0 + 16) = v33;
          *(void *)(v34 + 24) = v32;
          uint64_t v35 = async function pointer to unsafeBlocking<A>(_:)[1];
          swift_retain();
          id v36 = v32;
          uint64_t v37 = (void *)swift_task_alloc(v35);
          *(void *)(v0 + 760) = v37;
          *uint64_t v37 = v0;
          v37[1] = sub_100481948;
          return unsafeBlocking<A>(_:)(*(void *)(v0 + 376), sub_10049E584, v34, *(void *)(v0 + 352));
        }

        uint64_t v59 = (void *)(v0 + 248);
        uint64_t v60 = v0 + 256;
        swift_bridgeObjectRelease();
        if (qword_10099B4C8 != -1) {
          swift_once(&qword_10099B4C8, sub_10047B404);
        }
        uint64_t v61 = type metadata accessor for Logger(0LL);
        uint64_t v62 = sub_10000A720(v61, (uint64_t)qword_100A2AAA0);
        uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
        os_log_type_t v64 = static os_log_type_t.error.getter(v63);
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = *(void *)(v0 + 328);
          uint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v67 = swift_slowAlloc(32LL, -1LL);
          uint64_t v95 = v67;
          *(_DWORD *)uint64_t v66 = 136315138;
          *(void *)(v0 + 264) = v65;
          uint64_t v59 = (void *)(v0 + 248);
          uint64_t v60 = v0 + 256;
          type metadata accessor for SPSeparationEventType(0LL);
          uint64_t v69 = String.init<A>(describing:)(v0 + 264, v68);
          *(void *)(v0 + 272) = sub_1003F11D4(v69, v70, &v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v66 + 4, v66 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Received unknown eventType: %s", v66, 0xCu);
          swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v67, -1LL, -1LL);
          swift_slowDealloc(v66, -1LL, -1LL);
        }

        os_log_type_t v71 = *(void (**)(void *, uint64_t))(v0 + 296);
        type metadata accessor for SPSeparationMonitoringError(0LL);
        uint64_t v73 = v72;
        *(void *)(v0 + 256) = 12LL;
        unint64_t v74 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v75 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
        _BridgedStoredNSError.init(_:userInfo:)(v59, v60, v74, v73, v75);
        uint64_t v76 = *(void **)(v0 + 248);
        v71(v76, 1LL);
        swift_release();
      }
    }

    else
    {
      uint64_t v51 = *(void (**)(void, void))(v0 + 296);
      swift_bridgeObjectRelease();
      v51(0LL, 0LL);
      swift_release();
    }

    uint64_t v77 = *(void *)(v0 + 568);
    uint64_t v78 = *(void *)(v0 + 560);
    uint64_t v79 = *(void *)(v0 + 536);
    uint64_t v80 = *(void *)(v0 + 528);
    uint64_t v81 = *(void *)(v0 + 520);
    uint64_t v82 = *(void *)(v0 + 504);
    uint64_t v83 = *(void *)(v0 + 512);
    uint64_t v85 = *(void *)(v0 + 488);
    uint64_t v84 = *(void *)(v0 + 496);
    uint64_t v86 = *(void *)(v0 + 456);
    uint64_t v87 = *(void *)(v0 + 440);
    uint64_t v88 = *(void *)(v0 + 416);
    uint64_t v89 = *(void *)(v0 + 408);
    uint64_t v90 = *(void *)(v0 + 400);
    uint64_t v91 = *(void *)(v0 + 376);
    uint64_t v92 = *(void *)(v0 + 368);
    uint64_t v94 = *(void *)(v0 + 360);
    swift_task_dealloc(*(void *)(v0 + 576));
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    *(void *)(v0 + 720) = v20;
    *(void *)(v0 + 712) = v30;
    uint64_t v39 = *(unsigned __int8 *)(v0 + 772);
    uint64_t v40 = *(void *)(v0 + 536);
    uint64_t v41 = *(void *)(v0 + 504);
    uint64_t v42 = *(void **)(v0 + 320);
    uint64_t v43 = *(void *)(v0 + 288);
    uint64_t v44 = (v39 + 32) & ~v39;
    uint64_t v45 = v44 + *(void *)(v0 + 480);
    uint64_t v46 = v39 | 7;
    sub_10001DC4C( *(void *)(v0 + 632) + v44 + *(void *)(v0 + 672) * v30,  v41,  type metadata accessor for OwnedBeaconRecord);
    sub_10001DC4C(v41, v40, type metadata accessor for OwnedBeaconRecord);
    uint64_t v47 = swift_allocObject(&unk_10095DF38, v45, v46);
    *(void *)(v0 + 728) = v47;
    *(void *)(v47 + swift_weakDestroy(v0 + 16) = v43;
    *(void *)(v47 + 24) = v42;
    sub_10002218C(v40, v47 + v44, type metadata accessor for OwnedBeaconRecord);
    uint64_t v48 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    id v49 = v42;
    uint64_t v50 = (void *)swift_task_alloc(v48);
    *(void *)(v0 + 736) = v50;
    void *v50 = v0;
    v50[1] = sub_100481084;
    return unsafeBlocking<A>(_:)(v0 + 776, sub_10049E540, v47, &type metadata for Bool);
  }

uint64_t sub_100481948()
{
  return swift_task_switch(sub_1004819A8, 0LL, 0LL);
}

uint64_t sub_1004819A8()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 392) + 48LL);
  if (v3(v2, 1LL, v1) == 1)
  {
    sub_100015794(v2, (uint64_t *)&unk_1009AF740);
    id v4 = 0LL;
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 416);
    sub_10002218C(v2, v5, type metadata accessor for SafeLocation);
    if (*(_BYTE *)(v5 + *(int *)(v1 + 48)) == 3)
    {
      uint64_t v6 = 1LL;
    }

    else
    {
      sub_10001DC4C(*(void *)(v0 + 416), *(void *)(v0 + 368), type metadata accessor for SafeLocation);
      uint64_t v6 = 0LL;
    }

    uint64_t v7 = *(void *)(v0 + 384);
    uint64_t v9 = *(void *)(v0 + 360);
    uint64_t v8 = *(void *)(v0 + 368);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 392) + 56LL))(v8, v6, 1LL, v7);
    sub_10001581C(v8, v9, (uint64_t *)&unk_1009AF740);
    if (v3(v9, 1LL, v7) == 1)
    {
      id v4 = 0LL;
    }

    else
    {
      uint64_t v11 = *(void *)(v0 + 400);
      uint64_t v10 = *(void *)(v0 + 408);
      sub_10002218C(*(void *)(v0 + 360), v10, type metadata accessor for SafeLocation);
      sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
      sub_10001DC4C(v10, v11, type metadata accessor for SafeLocation);
      id v4 = sub_10047B1A8(v11);
      sub_100018C68(v10, type metadata accessor for SafeLocation);
    }

    uint64_t v12 = *(void *)(v0 + 416);
    sub_100015794(*(void *)(v0 + 368), (uint64_t *)&unk_1009AF740);
    sub_100018C68(v12, type metadata accessor for SafeLocation);
  }

  uint64_t v13 = *(void *)(v0 + 744);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v15 = *(void *)(v0 + 344);
  char v16 = *(_BYTE *)(v0 + 777);
  uint64_t v17 = *(void **)(v0 + 320);
  uint64_t v19 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v0 + 304);
  *(void *)(v0 + 72) = 0LL;
  *(void *)(v0 + 80) = v13;
  *(_BYTE *)(v0 + 88) = v16;
  *(void *)(v0 + 96) = v4;
  *(void *)(v0 + 104) = v14;
  *(void *)(v0 + 112) = v15;
  *(void *)(v0 + 120) = v17;
  swift_bridgeObjectRetain(v15);
  id v20 = v17;
  id v21 = v4;
  sub_100482CF4(v0 + 72, v19, v18);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v22 = *(void *)(v0 + 568);
  uint64_t v23 = *(void *)(v0 + 560);
  uint64_t v24 = *(void *)(v0 + 536);
  uint64_t v25 = *(void *)(v0 + 528);
  uint64_t v26 = *(void *)(v0 + 520);
  uint64_t v27 = *(void *)(v0 + 504);
  uint64_t v28 = *(void *)(v0 + 512);
  uint64_t v30 = *(void *)(v0 + 488);
  uint64_t v29 = *(void *)(v0 + 496);
  uint64_t v32 = *(void *)(v0 + 456);
  uint64_t v33 = *(void *)(v0 + 440);
  uint64_t v34 = *(void *)(v0 + 416);
  uint64_t v35 = *(void *)(v0 + 408);
  uint64_t v36 = *(void *)(v0 + 400);
  uint64_t v37 = *(void *)(v0 + 376);
  uint64_t v38 = *(void *)(v0 + 368);
  uint64_t v39 = *(void *)(v0 + 360);
  swift_task_dealloc(*(void *)(v0 + 576));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100481CAC()
{
  uint64_t v1 = *(void *)(v0 + 576);
  uint64_t v2 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 560);
  uint64_t v4 = *(void *)(v0 + 536);
  uint64_t v5 = *(void *)(v0 + 528);
  uint64_t v6 = *(void *)(v0 + 520);
  uint64_t v8 = *(void *)(v0 + 504);
  uint64_t v7 = *(void *)(v0 + 512);
  uint64_t v10 = *(void *)(v0 + 496);
  uint64_t v11 = *(void *)(v0 + 488);
  uint64_t v12 = *(void *)(v0 + 456);
  uint64_t v13 = *(void *)(v0 + 440);
  uint64_t v14 = *(void *)(v0 + 416);
  uint64_t v15 = *(void *)(v0 + 408);
  uint64_t v16 = *(void *)(v0 + 400);
  uint64_t v17 = *(void *)(v0 + 376);
  uint64_t v18 = *(void *)(v0 + 368);
  uint64_t v19 = *(void *)(v0 + 360);
  swift_release();
  swift_release();
  sub_100018C68(v5, type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100481E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  sub_10001DC4C(a3, (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v21, v4);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (v15 + 40) & ~v15;
  uint64_t v17 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v18 = (v10 + v17 + v16) & ~v17;
  uint64_t v19 = (char *)swift_allocObject(&unk_10095DF88, v18 + v6, v15 | v17 | 7);
  *((void *)v19 + 2) = 0LL;
  *((void *)v19 + 3) = 0LL;
  *((void *)v19 + 4) = v22;
  sub_10002218C( (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (uint64_t)&v19[v16],  type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v19[v18], v7, v4);
  swift_retain();
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009AF870, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_100481FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  _OWORD v6[5] = a6;
  uint64_t v6[2] = a1;
  v6[3] = a4;
  uint64_t v7 = sub_100004AEC(&qword_1009AF860);
  v6[6] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[7] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v6[8] = v9;
  void v6[9] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  v6[10] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v6[11] = v11;
  v6[12] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100482060, 0LL, 0LL);
}

uint64_t sub_100482060()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v8 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v9 = v0[3];
  sub_10001DC4C(v0[4], v1, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v8, v7);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = (v10 + 24) & ~v10;
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = (v2 + v12 + v11) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_10095DFB0, v13 + v6, v10 | v12 | 7);
  v0[13] = v14;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v9;
  sub_10002218C(v1, v14 + v11, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v14 + v13, v3, v7);
  uint64_t v15 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc(v15);
  v0[14] = v16;
  void *v16 = v0;
  v16[1] = sub_100482194;
  return unsafeBlocking<A>(_:)(v0[2], sub_10049EC4C, v14, (char *)&type metadata for () + 8);
}

uint64_t sub_100482194()
{
  uint64_t v1 = *(void *)(*v0 + 104);
  uint64_t v2 = *(void *)(*v0 + 96);
  uint64_t v3 = *(void *)(*v0 + 72);
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 112));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100482204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v78 = a2;
  uint64_t v73 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v72 = v5;
  uint64_t v75 = (uint64_t)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v68 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v67 - v10;
  uint64_t v12 = sub_100004AEC(&qword_1009AF860);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v67 - v16;
  uint64_t v70 = *(void *)(a1 + 256);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v18((char *)&v67 - v16, a3, v12);
  unint64_t v74 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v18(v74, (uint64_t)v17, v12);
  uint64_t v19 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v20 = (v19 + 16) & ~v19;
  uint64_t v69 = swift_allocObject(&unk_10095DFD8, v20 + v14, v19 | 7);
  uint64_t v76 = v13;
  uint64_t v77 = v12;
  uint64_t v21 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v69 + v20, v17, v12);
  uint64_t v22 = static os_log_type_t.default.getter(v21);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v23 = qword_100A2B018;
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v25 = swift_allocObject(v24, 72LL, 7LL);
  __int128 v67 = xmmword_1007E67D0;
  *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v26 = v78 + *(int *)(v73 + 20);
  uint64_t v27 = type metadata accessor for UUID(0LL);
  uint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v73 = v26;
  uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
  uint64_t v31 = v30;
  *(void *)(v25 + 56) = &type metadata for String;
  *(void *)(v25 + 64) = sub_1000226F4();
  *(void *)(v25 + 32) = v29;
  *(void *)(v25 + 40) = v31;
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "Unpair owned beacon: %@", 23LL, 2LL, v25);
  uint64_t v32 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v32);
  uint64_t v33 = v68;
  (*(void (**)(char *, void, uint64_t))(v68 + 104))( v9,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v6);
  uint64_t v34 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v80, v6, v34);
  dispatch thunk of RawRepresentable.rawValue.getter(&v79, v6, v34);
  uint64_t v36 = v79;
  uint64_t v35 = v80;
  uint64_t v37 = *(void (**)(char *, uint64_t))(v33 + 8);
  v37(v9, v6);
  uint64_t v38 = ((uint64_t (*)(char *, uint64_t))v37)(v11, v6);
  BOOL v39 = v35 == v36;
  uint64_t v40 = v77;
  uint64_t v41 = v74;
  if (v39)
  {
    uint64_t v42 = static os_log_type_t.default.getter(v38);
    os_log(_:dso:log:_:_:)( v42,  &_mh_execute_header,  qword_100A2B018,  "unpair call failed because in device is in beforeFirstUnlock state",  66LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v43 = sub_1000220F0();
    uint64_t v44 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v43, 0LL, 0LL);
    *uint64_t v45 = 0;
    uint64_t v80 = v44;
    swift_errorRetain(v44);
    uint64_t v46 = CheckedContinuation.resume(throwing:)(&v80, v40);
    CheckedContinuation.resume(returning:)(v46, v40);
    swift_errorRelease(v44);
  }

  uint64_t v47 = dispatch_group_create();
  dispatch_group_enter(v47);
  uint64_t v48 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v49 = *(void *)(v27 - 8);
  uint64_t v50 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v51 = (v50 + 32) & ~v50;
  uint64_t v52 = swift_allocObject(v48, v51 + *(void *)(v49 + 72), v50 | 7);
  *(_OWORD *)(v52 + swift_weakDestroy(v0 + 16) = v67;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v52 + v51, v73, v27);
  uint64_t v53 = swift_allocObject(&unk_10095E000, 24LL, 7LL);
  *(void *)(v53 + swift_weakDestroy(v0 + 16) = v47;
  char v54 = v47;
  uint64_t v55 = v70;
  sub_10047B920( v52,  (uint64_t)sub_10014F0B8,  v53,  (uint64_t)&unk_10095D0B0,  (uint64_t)sub_10049CA04,  (uint64_t)&unk_10095D0C8);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  uint64_t v56 = v78;
  uint64_t v57 = v75;
  sub_10001DC4C(v78, v75, type metadata accessor for OwnedBeaconRecord);
  uint64_t v58 = *(unsigned __int8 *)(v71 + 80);
  uint64_t v59 = (v58 + 16) & ~v58;
  unint64_t v60 = (v72 + v59 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v61 = (v60 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v62 = swift_allocObject(&unk_10095E028, v61 + 10, v58 | 7);
  sub_10002218C(v57, v62 + v59, type metadata accessor for OwnedBeaconRecord);
  uint64_t v63 = (uint64_t (**)(uint64_t))(v62 + v60);
  uint64_t v64 = v69;
  *uint64_t v63 = sub_10049ED20;
  v63[1] = (uint64_t (*)(uint64_t))v64;
  unint64_t v65 = v62 + v61;
  *(void *)unint64_t v65 = v55;
  *(_WORD *)(v65 + 8) = 257;
  swift_retain();
  swift_retain();
  sub_10013E898(v56, (void (*)(void))sub_10015461C, v62);
  swift_release();
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v41, v77);
}

uint64_t sub_100482770(uint64_t a1)
{
  if (a1)
  {
    uint64_t v4 = a1;
    swift_errorRetain(a1);
    uint64_t v1 = sub_100004AEC(&qword_1009AF860);
    CheckedContinuation.resume(throwing:)(&v4, v1);
  }

  uint64_t v2 = sub_100004AEC(&qword_1009AF860);
  return CheckedContinuation.resume(returning:)(v2, v2);
}

uint64_t sub_1004827CC@<X0>(void *a1@<X1>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  BOOL v39 = a3;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SafeLocation(0LL);
  uint64_t v41 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v47 = (uint64_t)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  __chkstk_darwin(v17);
  uint64_t v38 = (uint64_t)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(int *)(type metadata accessor for OwnedBeaconRecord(0LL) + 20);
  uint64_t v40 = sub_1004903C4(a1);
  uint64_t v46 = v40[2];
  if (v46)
  {
    uint64_t v20 = 0LL;
    uint64_t v50 = a2 + v19;
    unint64_t v43 = (char *)v40 + ((*(unsigned __int8 *)(v41 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
    uint64_t v42 = *(void *)(v41 + 72);
    uint64_t v44 = v16;
    uint64_t v45 = v12;
    do
    {
      uint64_t v48 = v20;
      sub_10001DC4C((uint64_t)&v43[v42 * v20], (uint64_t)v16, type metadata accessor for SafeLocation);
      uint64_t v24 = *(void *)&v16[*(int *)(v12 + 52)];
      uint64_t v25 = *(void *)(v24 + 16);
      uint64_t v49 = v24;
      if (v25)
      {
        uint64_t v26 = v24 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        __n128 v21 = swift_bridgeObjectRetain(v24);
        uint64_t v27 = *(void *)(v6 + 72);
        uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
        while (1)
        {
          v28(v11, v26, v5, v21);
          uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
          ((void (*)(char *, void, uint64_t, uint64_t))v22)(v11, 0LL, 1LL, v5);
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
          uint64_t v29 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v50, v5, v29);
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          if ((v30 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v16 = v44;
            uint64_t v31 = v47;
            sub_10001DC4C((uint64_t)v44, v47, type metadata accessor for SafeLocation);
            uint64_t v12 = v45;
            int v32 = *(unsigned __int8 *)(v31 + *(int *)(v45 + 48));
            sub_100018C68(v31, type metadata accessor for SafeLocation);
            if (v32 != 1) {
              goto LABEL_6;
            }
            uint64_t v33 = v38;
            sub_10002218C((uint64_t)v16, v38, type metadata accessor for SafeLocation);
            uint64_t v34 = v41;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v33, 0LL, 1LL, v12);
            goto LABEL_16;
          }

          v26 += v27;
          if (!--v25) {
            goto LABEL_4;
          }
        }
      }

      else
      {
        __n128 v21 = swift_bridgeObjectRetain(v24);
        uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
LABEL_4:
        v22(v11, 1LL, 1LL, v5, v21);
      }

      swift_bridgeObjectRelease();
      uint64_t v16 = v44;
      uint64_t v23 = v47;
      sub_10001DC4C((uint64_t)v44, v47, type metadata accessor for SafeLocation);
      sub_100018C68(v23, type metadata accessor for SafeLocation);
      uint64_t v12 = v45;
LABEL_6:
      uint64_t v20 = v48 + 1;
      sub_100018C68((uint64_t)v16, type metadata accessor for SafeLocation);
    }

    while (v20 != v46);
  }

  uint64_t v34 = v41;
  uint64_t v33 = v38;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v38, 1LL, 1LL, v12);
LABEL_16:
  swift_bridgeObjectRelease();
  BOOL v35 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v33, 1LL, v12) != 1;
  uint64_t result = sub_100015794(v33, (uint64_t *)&unk_1009AF740);
  *BOOL v39 = v35;
  return result;
}

uint64_t sub_100482BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = *(void *)(a1 + 256);
  uint64_t v9 = *(void **)(v8 + 72);
  *uint64_t v7 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.notOnQueue(_:), v4);
  v9;
  char v10 = _dispatchPreconditionTest(_:)(v7);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v10 & 1) != 0)
  {
    __chkstk_darwin(result);
    *(void *)&v13[-32] = v8;
    *(void *)&v13[-24] = a2;
    *(void *)&v13[-16] = 0LL;
    *(void *)&v13[-8] = 0LL;
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AF740);
    return OS_dispatch_queue.sync<A>(execute:)(sub_10049F044, &v13[-48], v12);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100482CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v6 = sub_100004AEC(&qword_1009AF880);
  uint64_t v33 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009AF888);
  uint64_t v34 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B640 != -1) {
    swift_once(&qword_10099B640, sub_1005E6BFC);
  }
  uint64_t v12 = qword_100A2AEE8;
  uint64_t v13 = *(void *)(v4 + 256);
  uint64_t v14 = type metadata accessor for SeparationAlertCoalescer();
  uint64_t v15 = swift_allocObject(v14, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = v13;
  *(void *)(v15 + 24) = v12;
  swift_retain();
  swift_retain();
  uint64_t v16 = sub_100785E20((void *)a1);
  swift_retain();
  sub_10049F190((void *)a1);
  swift_retain();
  uint64_t v17 = sub_1004988A0(v16, v4, a1, v15);
  swift_release();
  sub_10049F1DC(a1);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v37 = v17;
  uint64_t v18 = sub_100004AEC(&qword_1009AF890);
  uint64_t v19 = sub_100004AEC(&qword_1009AF898);
  uint64_t v20 = sub_1000372EC( &qword_1009AF8A0,  &qword_1009AF890,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v21 = sub_1000372EC(&qword_1009AF8A8, &qword_1009AF898, (uint64_t)&protocol conformance descriptor for [A]);
  Publishers.MergeMany.init<A>(_:)(&v37, v18, v19, v20, v21);
  uint64_t v22 = sub_1000372EC( &qword_1009AF8B0,  &qword_1009AF880,  (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
  Publisher.collect()(v6, v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v6);
  uint64_t v23 = sub_1000372EC( &qword_1009AF8B8,  &qword_1009AF888,  (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  uint64_t v24 = Publisher.eraseToAnyPublisher()(v9, v23);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
  uint64_t v37 = (void *)v24;
  uint64_t v25 = swift_allocObject(&unk_10095E078, 88LL, 7LL);
  __int128 v26 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v25 + 32) = v26;
  *(_OWORD *)(v25 + 48) = *(_OWORD *)(a1 + 32);
  uint64_t v27 = v35;
  uint64_t v28 = v36;
  *(void *)(v25 + 64) = *(void *)(a1 + 48);
  *(void *)(v25 + 72) = v27;
  *(void *)(v25 + 80) = v28;
  sub_10049F190((void *)a1);
  swift_retain();
  uint64_t v29 = sub_100004AEC(&qword_1009AF8C0);
  uint64_t v30 = sub_1000372EC( &qword_1009AF8C8,  &qword_1009AF8C0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.oneshot(_:)(sub_10049F26C, v25, v29, v30);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100483038@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = swift_allocObject(&unk_10095E0C8, 24LL, 7LL);
  swift_weakInit(v10 + 16, a1);
  sub_100013044(a4, (uint64_t)v15);
  uint64_t v11 = swift_allocObject(&unk_10095E0F0, 128LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v10;
  __int128 v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v11 + 40) = v12;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 32);
  *(void *)(v11 + 72) = *(void *)(a2 + 48);
  *(void *)(v11 + 80) = a3;
  sub_100012EC0(v15, v11 + 88);
  uint64_t v13 = sub_100004AEC(&qword_1009AF8D8);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  sub_10049F190((void *)a2);
  swift_retain();
  uint64_t result = Future.init(_:)(sub_10049F30C, v11);
  *a5 = result;
  return result;
}

uint64_t sub_100483134( uint64_t (*a1)(__int128 *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a5;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = swift_allocObject(&unk_10095E118, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  a3 += 16LL;
  swift_beginAccess(a3, v27, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    uint64_t v17 = Strong;
    uint64_t v18 = swift_allocObject(&unk_10095E0C8, 24LL, 7LL);
    swift_weakInit(v18 + 16, v17);
    sub_100013044(a6, (uint64_t)v26);
    uint64_t v19 = swift_allocObject(&unk_10095E140, 144LL, 7LL);
    __int128 v20 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v19 + 40) = *(_OWORD *)a4;
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = v18;
    *(void *)(v19 + 24) = sub_10049CADC;
    *(void *)(v19 + 32) = v15;
    *(_OWORD *)(v19 + 56) = v20;
    *(_OWORD *)(v19 + 72) = *(_OWORD *)(a4 + 32);
    uint64_t v21 = v25;
    *(void *)(v19 + 88) = *(void *)(a4 + 48);
    *(void *)(v19 + 96) = v21;
    sub_100012EC0(v26, v19 + 104);
    swift_retain();
    swift_retain();
    sub_10049F190((void *)a4);
    uint64_t v22 = swift_retain();
    UUID.init()(v22);
    Sequencer.perform(identifier:_:enqueueCompletion:)(v14, sub_10049F37C, v19, 0LL, 0LL);
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    swift_release();
    return swift_release();
  }

  else
  {
    swift_retain();
    swift_release();
    *(void *)&v26[0] = 0LL;
    BYTE8(v26[0]) = 1;
    return a1(v26);
  }

uint64_t sub_100483328( uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = a3 + 16;
  swift_beginAccess(a3 + 16, v64, 0LL, 0LL);
  if (swift_weakLoadStrong(v14))
  {
    uint64_t v50 = a4;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2AAA0);
    sub_10049F190((void *)a6);
    uint64_t v16 = sub_10049F190((void *)a6);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter(v17);
    uint64_t v51 = a2;
    uint64_t v49 = a1;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      v63[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      __int128 v21 = *(_OWORD *)(a6 + 16);
      __int128 v52 = *(_OWORD *)a6;
      __int128 v53 = v21;
      __int128 v54 = *(_OWORD *)(a6 + 32);
      uint64_t v55 = *(void *)(a6 + 48);
      sub_10049F190((void *)a6);
      uint64_t v22 = String.init<A>(describing:)(&v52, &type metadata for SeparationMonitoringAlertContext);
      *(void *)&__int128 v52 = sub_1003F11D4(v22, v23, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, (char *)&v52 + 8, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease();
      sub_10049F1DC(a6);
      sub_10049F1DC(a6);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Attempting to coallesce notification with context: %s",  v19,  0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      sub_10049F1DC(a6);
      sub_10049F1DC(a6);
    }

    sub_100786C18(&v52, (uint64_t)v63, a8);
    sub_10001581C((uint64_t)v63, (uint64_t)&v60, &qword_1009AF8F0);
    if (v61)
    {
      sub_100012EC0(&v60, (uint64_t)v62);
      sub_100013044((uint64_t)v62, (uint64_t)&v60);
      uint64_t v26 = sub_100013044((uint64_t)&v52, (uint64_t)v59);
      uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
      os_log_type_t v28 = static os_log_type_t.default.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc(22LL, -1LL);
        uint64_t v30 = swift_slowAlloc(64LL, -1LL);
        uint64_t v58 = v30;
        *(_DWORD *)uint64_t v29 = 136315394;
        sub_100013044((uint64_t)&v60, (uint64_t)&v56);
        uint64_t v31 = sub_100004AEC(&qword_1009AF8F8);
        uint64_t v32 = String.init<A>(describing:)(&v56, v31);
        uint64_t v56 = sub_1003F11D4(v32, v33, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v29 + 4, v29 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v60);
        *(_WORD *)(v29 + 12) = 2080;
        sub_100013044((uint64_t)v59, (uint64_t)&v56);
        uint64_t v34 = String.init<A>(describing:)(&v56, v31);
        uint64_t v56 = sub_1003F11D4(v34, v35, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v29 + 14, v29 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v59);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Replacing notification %s with %s", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1LL, -1LL);
        swift_slowDealloc(v29, -1LL, -1LL);
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v60);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v59);
      }

      if (qword_10099B640 != -1) {
        swift_once(&qword_10099B640, sub_1005E6BFC);
      }
      sub_100013044((uint64_t)v62, (uint64_t)&v60);
      sub_100013044((uint64_t)&v52, (uint64_t)v59);
      uint64_t v44 = (void *)swift_allocObject(&unk_10095E190, 128LL, 7LL);
      sub_100012EC0(&v60, (uint64_t)(v44 + 2));
      sub_100012EC0(v59, (uint64_t)(v44 + 7));
      v44[12] = v50;
      v44[13] = a5;
      v44[14] = a1;
      v44[15] = v51;
      swift_retain();
      swift_retain();
      sub_1005E80CC(v62, &v52, (uint64_t)sub_10049F418, (uint64_t)v44);
      swift_release();
      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
    }

    else
    {
      sub_100015794((uint64_t)&v60, &qword_1009AF8F0);
      uint64_t v36 = sub_100013044((uint64_t)&v52, (uint64_t)v62);
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
      os_log_type_t v38 = static os_log_type_t.default.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        BOOL v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v40 = swift_slowAlloc(32LL, -1LL);
        *(void *)&v59[0] = v40;
        *(_DWORD *)BOOL v39 = 136315138;
        sub_100013044((uint64_t)v62, (uint64_t)&v60);
        uint64_t v41 = sub_100004AEC(&qword_1009AF8F8);
        uint64_t v42 = String.init<A>(describing:)(&v60, v41);
        *(void *)&__int128 v60 = sub_1003F11D4(v42, v43, (uint64_t *)v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 8, v39 + 4, v39 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Posting notification %s", v39, 0xCu);
        swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
      }

      if (qword_10099B640 != -1) {
        swift_once(&qword_10099B640, sub_1005E6BFC);
      }
      sub_100013044((uint64_t)&v52, (uint64_t)v62);
      uint64_t v45 = (void *)swift_allocObject(&unk_10095E168, 88LL, 7LL);
      sub_100012EC0(v62, (uint64_t)(v45 + 2));
      v45[7] = v50;
      v45[8] = a5;
      v45[9] = v49;
      v45[10] = v51;
      uint64_t v46 = *((void *)&v53 + 1);
      uint64_t v47 = v54;
      uint64_t v48 = sub_100012ED8(&v52, *((uint64_t *)&v53 + 1));
      swift_retain();
      swift_retain();
      sub_1005E83B0((uint64_t)v48, (uint64_t)sub_10049F3C8, (uint64_t)v45, v46, v47);
      swift_release();
      swift_release();
    }

    sub_100015794((uint64_t)v63, &qword_1009AF8F0);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v52);
  }

  else
  {
    uint64_t v24 = a4(0LL, 1LL);
    return a1(v24);
  }

uint64_t sub_100483A3C( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t (*a7)(uint64_t))
{
  uint64_t v12 = a2 & 1;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_10000A720(v13, (uint64_t)qword_100A2AAA0);
  sub_100013044(a3, (uint64_t)v33);
  sub_100013044(a4, (uint64_t)v32);
  sub_10049F430(a1, v12);
  uint64_t v14 = sub_10049F430(a1, v12);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = swift_slowAlloc(96LL, -1LL);
    uint64_t v31 = v28;
    *(_DWORD *)uint64_t v17 = 136315650;
    sub_100013044((uint64_t)v33, (uint64_t)&v29);
    uint64_t v18 = sub_100004AEC(&qword_1009AF8F8);
    uint64_t v19 = String.init<A>(describing:)(&v29, v18);
    uint64_t v29 = sub_1003F11D4(v19, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
    *(_WORD *)(v17 + 12) = 2080;
    sub_100013044((uint64_t)v32, (uint64_t)&v29);
    uint64_t v21 = String.init<A>(describing:)(&v29, v18);
    uint64_t v29 = sub_1003F11D4(v21, v22, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
    *(_WORD *)(v17 + 22) = 2080;
    uint64_t v29 = a1;
    v30[0] = (_DWORD)v12 != 0;
    sub_10049F430(a1, v12);
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AF900);
    uint64_t v24 = String.init<A>(describing:)(&v29, v23);
    uint64_t v29 = sub_1003F11D4(v24, v25, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease();
    sub_10049F44C(a1, v12);
    sub_10049F44C(a1, v12);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Completed replacing old separation notification: %s with %s - result: %s",  (uint8_t *)v17,  0x20u);
    swift_arrayDestroy(v28, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
    sub_10049F44C(a1, v12);
    sub_10049F44C(a1, v12);
  }

  uint64_t v26 = a5(a1, v12);
  return a7(v26);
}

uint64_t sub_100483D6C( uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v10 = a2 & 1;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_100A2AAA0);
  sub_100013044(a3, (uint64_t)v28);
  sub_10049F430(a1, v10);
  uint64_t v12 = sub_10049F430(a1, v10);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v16 = swift_slowAlloc(64LL, -1LL);
    uint64_t v27 = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    sub_100013044((uint64_t)v28, (uint64_t)&v25);
    uint64_t v17 = sub_100004AEC(&qword_1009AF8F8);
    uint64_t v18 = String.init<A>(describing:)(&v25, v17);
    uint64_t v25 = sub_1003F11D4(v18, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v25 = a1;
    v26[0] = (_DWORD)v10 != 0;
    sub_10049F430(a1, v10);
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AF900);
    uint64_t v21 = String.init<A>(describing:)(&v25, v20);
    uint64_t v25 = sub_1003F11D4(v21, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    sub_10049F44C(a1, v10);
    sub_10049F44C(a1, v10);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Completed posting new separation notification: %s - result: %s",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v16, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    sub_10049F44C(a1, v10);
    sub_10049F44C(a1, v10);
  }

  uint64_t v23 = a4(a1, v10);
  return a6(v23);
}

void sub_100484020(uint64_t a1, uint64_t a2, void (*a3)(void, uint64_t))
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10000A720(v5, (uint64_t)qword_100A2AAA0);
    sub_10049F190((void *)a2);
    uint64_t v6 = sub_10049F190((void *)a2);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v10 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v9 = 136315138;
      __int128 v11 = *(_OWORD *)(a2 + 16);
      __int128 v28 = *(_OWORD *)a2;
      __int128 v29 = v11;
      __int128 v30 = *(_OWORD *)(a2 + 32);
      uint64_t v31 = *(void *)(a2 + 48);
      uint64_t v32 = v10;
      sub_10049F190((void *)a2);
      uint64_t v12 = String.init<A>(describing:)(&v28, &type metadata for SeparationMonitoringAlertContext);
      *(void *)&__int128 v28 = sub_1003F11D4(v12, v13, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, (char *)&v28 + 8, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease();
      sub_10049F1DC(a2);
      sub_10049F1DC(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Failed to post separation notifications for context: %s",  v9,  0xCu);
      swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {
      sub_10049F1DC(a2);
      sub_10049F1DC(a2);
    }

    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v24 = v23;
    uint64_t v32 = 12LL;
    unint64_t v25 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v26 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(&v28, &v32, v25, v24, v26);
    uint64_t v27 = (void *)v28;
    a3(v28, 1LL);
  }

  else
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000A720(v14, (uint64_t)qword_100A2AAA0);
    sub_10049F190((void *)a2);
    uint64_t v15 = sub_10049F190((void *)a2);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v18 = 136315138;
      __int128 v20 = *(_OWORD *)(a2 + 16);
      __int128 v28 = *(_OWORD *)a2;
      __int128 v29 = v20;
      __int128 v30 = *(_OWORD *)(a2 + 32);
      uint64_t v31 = *(void *)(a2 + 48);
      uint64_t v32 = v19;
      sub_10049F190((void *)a2);
      uint64_t v21 = String.init<A>(describing:)(&v28, &type metadata for SeparationMonitoringAlertContext);
      *(void *)&__int128 v28 = sub_1003F11D4(v21, v22, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, (char *)&v28 + 8, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      sub_10049F1DC(a2);
      sub_10049F1DC(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Successfuly posted separation notifications for context: %s",  v18,  0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      sub_10049F1DC(a2);
      sub_10049F1DC(a2);
    }

    a3(0LL, 0LL);
  }

void sub_100484408( uint64_t a1, uint64_t a2, void (*a3)(void *, unint64_t, uint64_t), uint64_t a4, void *a5)
{
  if (!a1) {
    goto LABEL_19;
  }
  unint64_t v8 = a1;
  uint64_t v9 = (void *)(a1 & 0xFFFFFFFFFFFFFF8LL);
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v10) {
      goto LABEL_4;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }

  if (a1 >= 0) {
    uint64_t v22 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  else {
    uint64_t v22 = a1;
  }
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v22)) {
    goto LABEL_18;
  }
LABEL_4:
  if ((v8 & 0xC000000000000001LL) != 0)
  {
    uint64_t v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v8);
  }

  else
  {
    if (!v9[2])
    {
      __break(1u);
      goto LABEL_22;
    }

    uint64_t v9 = *(void **)(v8 + 32);
    swift_unknownObjectRetain(v9);
  }

  swift_bridgeObjectRelease();
  id v11 = [v9 name];
  if (!v11)
  {
    swift_unknownObjectRelease(v9);
LABEL_19:
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v24 = v23;
    uint64_t v31 = 18LL;
    unint64_t v25 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v26 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(&v32, &v31, v25, v24, v26);
    uint64_t v27 = v32;
    a3(v32, 0LL, 1LL);

    return;
  }

  uint64_t v12 = v11;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  unint64_t v8 = v13;

  if (qword_10099B4C8 != -1) {
LABEL_22:
  }
    swift_once(&qword_10099B4C8, sub_10047B404);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_100A2AAA0);
  id v15 = a5;
  swift_bridgeObjectRetain_n(v8, 2LL);
  id v16 = v15;
  os_log_type_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    __int128 v28 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = (uint64_t)v16;
    uint64_t v32 = (void *)v29;
    *(_DWORD *)uint64_t v19 = 138412546;
    __int128 v30 = v9;
    id v20 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 4, v19 + 12);
    void *v28 = v16;

    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain(v8);
    uint64_t v31 = sub_1003F11D4(v5, v8, (uint64_t *)&v32);
    uint64_t v9 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(v8, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Received reverse geocoded address for location: %@: %s",  (uint8_t *)v19,  0x16u);
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v28, 1LL, v21);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  a3((void *)v5, v8, 0LL);
  swift_unknownObjectRelease(v9);
  swift_bridgeObjectRelease();
}

uint64_t sub_1004847D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009AF818);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v6);
  }

  swift_retain();
  id v7 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100484854(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v178 = a4;
  uint64_t v177 = a3;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009AF770);
  uint64_t v161 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v163 = (uint64_t)v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v162 = v8;
  __chkstk_darwin(v7);
  uint64_t v169 = (uint64_t)v160 - v9;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v185 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v184 = (char *)v160 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v186 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v160 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v183 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v182 = *(void *)(v183 - 8);
  __chkstk_darwin(v183);
  uint64_t v181 = (char *)v160 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v190 = type metadata accessor for UUID(0LL);
  uint64_t v188 = *(void *)(v190 - 8);
  uint64_t v16 = __chkstk_darwin(v190);
  os_log_type_t v18 = (char *)v160 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  v160[0] = (char *)v160 - v20;
  __chkstk_darwin(v19);
  uint64_t v191 = (char *)v160 - v21;
  uint64_t v172 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v171 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  uint64_t v170 = (void *)((char *)v160 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v167 = sub_100004AEC(&qword_1009A7D90);
  __chkstk_darwin(v167);
  unint64_t v168 = (char *)v160 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)v160 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v28 = sub_10000A720(v27, (uint64_t)qword_100A2AAA0);
  swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v175 = v28;
  __int128 v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.default.getter(v30);
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v189 = a1;
  uint64_t v187 = v12;
  uint64_t v180 = v10;
  uint64_t v179 = v14;
  char v174 = v18;
  if (v32)
  {
    uint64_t v33 = swift_slowAlloc(12LL, -1LL);
    uint64_t v176 = (void (*)(char *, void, uint64_t, uint64_t))a2;
    uint64_t v34 = (uint8_t *)v33;
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 aBlock = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    swift_bridgeObjectRetain(a1);
    uint64_t v36 = v190;
    uint64_t v38 = Array.description.getter(v37, v190);
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    uint64_t v41 = v38;
    a1 = v189;
    uint64_t v198 = (void *)sub_1003F11D4(v41, v40, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Enabling separation monitoring for beacons: %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    uint64_t v42 = v34;
    a2 = (uint64_t)v176;
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
    uint64_t v36 = v190;
  }

  uint64_t v43 = v188;
  if (*((void *)a1 + 2))
  {
    uint64_t v44 = &a1[(*(unsigned __int8 *)(v188 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80)];
    uint64_t v45 = *(void *)(v188 + 72);
    uint64_t v46 = *(void (**)(char *, char *, uint64_t, __n128))(v188 + 16);
    __n128 v47 = swift_bridgeObjectRetain(a1);
    uint64_t v166 = "";
    uint64_t v165 = "enableNotifyWhenFound";
    uint64_t v164 = "onnect";
    v160[3] = v26;
    v160[2] = v44;
    v160[1] = v45;
    v46(v26, v44, v36, v47);
    uint64_t v176 = *(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56);
    v176(v26, 0LL, 1LL, v36);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v26, 1LL, v36) != 1)
    {
      uint64_t v48 = (uint64_t)v191;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v191, v26, v36);
      sub_100504C28(v48, (uint64_t)&aBlock);
      if (v195)
      {
        sub_100012EC0(&aBlock, (uint64_t)&v198);
        uint64_t v49 = v200;
        uint64_t v50 = v201;
        uint64_t v51 = sub_100012ED8(&v198, v200);
        __int128 v52 = sub_10047A494((uint64_t)v51, a2, v49, v50);
        __int128 v53 = v52;
        if (v52[2])
        {
          Hasher.init(_seed:)(&aBlock, v52[5]);
          String.hash(into:)(&aBlock, 0x61654C6E69676562LL, 0xED0000676E696873LL);
          unint64_t v54 = Hasher._finalize()() & ~(-1LL << *((_BYTE *)v53 + 32));
          if (((*(void *)((char *)v53 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v54) & 1) != 0) {
            __asm { BR              X9 }
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v55 = v174;
        uint64_t v56 = v190;
        uint64_t v57 = ((uint64_t (*)(char *, char *))v46)(v174, v191);
        uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
        os_log_type_t v59 = static os_log_type_t.error.getter(v58);
        if (os_log_type_enabled(v58, v59))
        {
          __int128 v60 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v61 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 aBlock = v61;
          *(_DWORD *)__int128 v60 = 136315138;
          uint64_t v62 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v63 = v56;
          uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter(v56, v62);
          char v192 = (void *)sub_1003F11D4(v64, v65, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &aBlock, v60 + 4, v60 + 12);
          swift_bridgeObjectRelease();
          uint64_t v189 = *(char **)(v188 + 8);
          ((void (*)(char *, uint64_t))v189)(v55, v56);
          _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "Failed to enable separation monitoring for unsupported beacon: %s",  v60,  0xCu);
          swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v61, -1LL, -1LL);
          swift_slowDealloc(v60, -1LL, -1LL);
        }

        else
        {
          uint64_t v63 = v56;
          uint64_t v189 = *(char **)(v188 + 8);
          ((void (*)(char *, uint64_t))v189)(v55, v56);
        }

        uint64_t v92 = v180;
        uint64_t v93 = v179;
        uint64_t v94 = v178;
        uint64_t v95 = v177;
        sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
        uint64_t v96 = v182;
        uint64_t v97 = v181;
        uint64_t v98 = v183;
        (*(void (**)(char *, void, uint64_t))(v182 + 104))( v181,  enum case for DispatchQoS.QoSClass.default(_:),  v183);
        uint64_t v99 = (void *)static OS_dispatch_queue.global(qos:)(v97);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);
        uint64_t v100 = swift_allocObject(&unk_10095D448, 32LL, 7LL);
        *(void *)(v100 + swift_weakDestroy(v0 + 16) = v95;
        *(void *)(v100 + 24) = v94;
        uint64_t v196 = (uint64_t (*)())sub_10049CCD0;
        uint64_t v197 = v100;
        *(void *)&__int128 aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256LL;
        uint64_t v194 = sub_1001C31E8;
        uint64_t v195 = &unk_10095D460;
        uint64_t v101 = _Block_copy(&aBlock);
        uint64_t v102 = swift_retain();
        static DispatchQoS.unspecified.getter(v102);
        char v192 = _swiftEmptyArrayStorage;
        uint64_t v103 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v104 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v105 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v106 = v184;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v192, v104, v105, v92, v103);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v93, v106, v101);
        _Block_release(v101);

        (*(void (**)(char *, uint64_t))(v185 + 8))(v106, v92);
        (*(void (**)(char *, uint64_t))(v186 + 8))(v93, v187);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v198);
        ((void (*)(char *, uint64_t))v189)(v191, v63);
      }

      else
      {
        swift_bridgeObjectRelease();
        sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
        uint64_t v134 = v160[0];
        uint64_t v135 = ((uint64_t (*)(void, char *, uint64_t))v46)(v160[0], v191, v36);
        uint64_t v136 = v36;
        uint64_t v137 = (os_log_s *)Logger.logObject.getter(v135);
        os_log_type_t v138 = static os_log_type_t.error.getter(v137);
        if (os_log_type_enabled(v137, v138))
        {
          uint64_t v139 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v140 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 aBlock = v140;
          *(_DWORD *)uint64_t v139 = 136315138;
          uint64_t v141 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v142 = dispatch thunk of CustomStringConvertible.description.getter(v136, v141);
          uint64_t v198 = (void *)sub_1003F11D4(v142, v143, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v139 + 4, v139 + 12);
          swift_bridgeObjectRelease();
          uint64_t v144 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
          v144(v134, v136);
          _os_log_impl( (void *)&_mh_execute_header,  v137,  v138,  "Failed to enable separation monitoring for unknown beacon: %s",  v139,  0xCu);
          swift_arrayDestroy(v140, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v140, -1LL, -1LL);
          swift_slowDealloc(v139, -1LL, -1LL);
        }

        else
        {
          uint64_t v144 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
          v144(v134, v136);
        }

        uint64_t v145 = v180;
        uint64_t v146 = v179;
        uint64_t v147 = v178;
        uint64_t v148 = v177;
        sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
        uint64_t v149 = v182;
        uint64_t v150 = v181;
        uint64_t v151 = v183;
        (*(void (**)(char *, void, uint64_t))(v182 + 104))( v181,  enum case for DispatchQoS.QoSClass.default(_:),  v183);
        uint64_t v152 = (void *)static OS_dispatch_queue.global(qos:)(v150);
        (*(void (**)(char *, uint64_t))(v149 + 8))(v150, v151);
        uint64_t v153 = swift_allocObject(&unk_10095D3F8, 32LL, 7LL);
        *(void *)(v153 + swift_weakDestroy(v0 + 16) = v148;
        *(void *)(v153 + 24) = v147;
        uint64_t v196 = sub_10049F748;
        uint64_t v197 = v153;
        *(void *)&__int128 aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256LL;
        uint64_t v194 = sub_1001C31E8;
        uint64_t v195 = &unk_10095D410;
        uint64_t v154 = _Block_copy(&aBlock);
        uint64_t v155 = swift_retain();
        static DispatchQoS.unspecified.getter(v155);
        uint64_t v198 = _swiftEmptyArrayStorage;
        uint64_t v156 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v157 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v158 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v159 = v184;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v198, v157, v158, v145, v156);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v146, v159, v154);
        _Block_release(v154);

        (*(void (**)(char *, uint64_t))(v185 + 8))(v159, v145);
        (*(void (**)(char *, uint64_t))(v186 + 8))(v146, v187);
        v144((uint64_t)v191, v190);
      }

      return swift_release();
    }
  }

  else
  {
    uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v188 + 56);
    __n128 v67 = swift_bridgeObjectRetain(a1);
    v66(v26, 1LL, 1LL, v36, v67);
  }

  swift_bridgeObjectRelease();
  uint64_t v68 = *(void **)(a2 + 72);
  uint64_t v69 = v170;
  *uint64_t v170 = v68;
  uint64_t v70 = v171;
  uint64_t v71 = v172;
  (*(void (**)(void *, void, uint64_t))(v171 + 104))( v69,  enum case for DispatchPredicate.notOnQueue(_:),  v172);
  id v72 = v68;
  char v73 = _dispatchPreconditionTest(_:)(v69);
  (*(void (**)(void *, uint64_t))(v70 + 8))(v69, v71);
  if ((v73 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x100485E24LL);
  }

  uint64_t v74 = (uint64_t)v168;
  OS_dispatch_queue.sync<A>(execute:)(sub_10049CB24, a2, v167);
  uint64_t v75 = type metadata accessor for LeashRecord(0LL);
  int v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 48LL))(v74, 1LL, v75);
  sub_100015794(v74, &qword_1009A7D90);
  if (v76 == 1)
  {
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v77 = v182;
    uint64_t v78 = v181;
    uint64_t v79 = v183;
    (*(void (**)(char *, void, uint64_t))(v182 + 104))( v181,  enum case for DispatchQoS.QoSClass.default(_:),  v183);
    uint64_t v80 = (void *)static OS_dispatch_queue.global(qos:)(v78);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
    uint64_t v81 = swift_allocObject(&unk_10095D330, 32LL, 7LL);
    uint64_t v82 = v178;
    *(void *)(v81 + swift_weakDestroy(v0 + 16) = v177;
    *(void *)(v81 + 24) = v82;
    uint64_t v196 = (uint64_t (*)())sub_10049CB3C;
    uint64_t v197 = v81;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    uint64_t v194 = sub_1001C31E8;
    uint64_t v195 = &unk_10095D348;
    uint64_t v83 = _Block_copy(&aBlock);
    uint64_t v84 = swift_retain();
    uint64_t v85 = v179;
    static DispatchQoS.unspecified.getter(v84);
    uint64_t v198 = _swiftEmptyArrayStorage;
    uint64_t v86 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v87 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v88 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v89 = v184;
    uint64_t v90 = v87;
    uint64_t v91 = v180;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v198, v90, v88, v180, v86);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v85, v89, v83);
    _Block_release(v83);

    (*(void (**)(char *, uint64_t))(v185 + 8))(v89, v91);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v85, v187);
  }

  else
  {
    uint64_t v107 = swift_allocObject(&unk_10095D380, 24LL, 7LL);
    *(void *)(v107 + swift_weakDestroy(v0 + 16) = a1;
    swift_bridgeObjectRetain(a1);
    swift_retain();
    uint64_t v108 = v169;
    sub_10048606C( (uint64_t)sub_10049CA2C,  a2,  (uint64_t)sub_10049CB44,  v107,  (uint64_t *)&unk_1009AF770,  (uint64_t)sub_10049CA78,  v169);
    swift_release();
    swift_release();
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v109 = v182;
    uint64_t v110 = a2;
    uint64_t v111 = v181;
    uint64_t v112 = v183;
    (*(void (**)(char *, void, uint64_t))(v182 + 104))( v181,  enum case for DispatchQoS.QoSClass.default(_:),  v183);
    uint64_t v113 = (void *)static OS_dispatch_queue.global(qos:)(v111);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v111, v112);
    uint64_t v114 = v108;
    uint64_t v115 = v163;
    sub_10001581C(v114, v163, (uint64_t *)&unk_1009AF770);
    uint64_t v116 = *(unsigned __int8 *)(v161 + 80);
    uint64_t v117 = (v116 + 16) & ~v116;
    unint64_t v118 = (v162 + v117 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v119 = (v118 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v120 = (v119 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v121 = swift_allocObject(&unk_10095D3A8, v120 + 8, v116 | 7);
    sub_100015750(v115, v121 + v117, (uint64_t *)&unk_1009AF770);
    *(void *)(v121 + v118) = a1;
    uint64_t v122 = (void *)(v121 + v119);
    uint64_t v123 = v178;
    *uint64_t v122 = v177;
    v122[1] = v123;
    *(void *)(v121 + v120) = v110;
    uint64_t v196 = sub_10049CC54;
    uint64_t v197 = v121;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    uint64_t v194 = sub_1001C31E8;
    uint64_t v195 = &unk_10095D3C0;
    uint64_t v124 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain(a1);
    swift_retain();
    uint64_t v125 = swift_retain();
    uint64_t v126 = v179;
    static DispatchQoS.unspecified.getter(v125);
    uint64_t v198 = _swiftEmptyArrayStorage;
    uint64_t v127 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v128 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v129 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v130 = v184;
    uint64_t v131 = v128;
    uint64_t v132 = v180;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v198, v131, v129, v180, v127);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v126, v130, v124);
    _Block_release(v124);

    (*(void (**)(char *, uint64_t))(v185 + 8))(v130, v132);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v126, v187);
    sub_100015794(v169, (uint64_t *)&unk_1009AF770);
  }

  return swift_release();
}

void sub_100485E78(void (*a1)(void *, uint64_t))
{
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AAA0);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Failed to enable separation monitoring due to missing leash record.",  v6,  2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  type metadata accessor for SPSeparationMonitoringError(0LL);
  uint64_t v8 = v7;
  uint64_t v12 = 4LL;
  unint64_t v9 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v10 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  _BridgedStoredNSError.init(_:userInfo:)(&v13, &v12, v9, v8, v10);
  uint64_t v11 = v13;
  a1(v13, 1LL);
}

uint64_t sub_100485FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for LeashRecord(0LL) + 24);
  uint64_t v9 = *(void *)(a1 + v4);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a2);
  sub_100184B50(v5);
  uint64_t v6 = sub_1006F1060(v9);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1002FE60C(v6);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + v4) = v7;
  return result;
}

uint64_t sub_10048606C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v49 = a7;
  uint64_t v50 = a6;
  uint64_t v48 = a4;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v44 = a1;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v40 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v47 = v7;
  uint64_t v20 = *(void **)(v7 + 72);
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))( v19,  enum case for DispatchPredicate.notOnQueue(_:),  v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  uint64_t v22 = (*(uint64_t (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) != 0)
  {
    id v42 = v21;
    uint64_t v43 = a5;
    UUID.init()(v22);
    if (qword_10099B4C8 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B4C8, sub_10047B404);
LABEL_3:
  uint64_t v23 = type metadata accessor for Logger(0LL);
  sub_10000A720(v23, (uint64_t)qword_100A2AAA0);
  uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    v52[0] = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    uint64_t v41 = v27 + 4;
    uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v9, v29);
    uint64_t v51 = sub_1003F11D4(v30, v31, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v41, v27 + 12);
    swift_bridgeObjectRelease();
    BOOL v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v13, v9);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Queueing synced modify operation with identifier: %s",  v27,  0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
    BOOL v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v13, v9);
  }

  __chkstk_darwin(v33);
  uint64_t v34 = v43;
  uint64_t v35 = v44;
  *(&v40 - 6) = (uint64_t)v15;
  *(&v40 - 5) = v35;
  uint64_t v36 = v47;
  *(&v40 - 4) = v45;
  *(&v40 - 3) = v36;
  uint64_t v37 = v48;
  *(&v40 - 2) = v46;
  *(&v40 - 1) = v37;
  uint64_t v38 = sub_100004AEC(v34);
  OS_dispatch_queue.sync<A>(execute:)(v50, &v40 - 8, v38);
  return ((uint64_t (*)(char *, uint64_t))v32)(v15, v9);
}

uint64_t sub_1004863AC(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AF770);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v10, (uint64_t *)&unk_1009AF770);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    uint64_t v11 = *v10;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_10000A720(v12, (uint64_t)qword_100A2AAA0);
    swift_errorRetain(v11);
    uint64_t v13 = swift_errorRetain(v11);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = a4;
      uint64_t v18 = v17;
      uint64_t v45 = (void *)v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_getErrorValue(v11, v43, v42);
      uint64_t v19 = Error.localizedDescription.getter(v42[1], v42[2]);
      uint64_t v44 = sub_1003F11D4(v19, v20, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to modify leash record due to: %s", v16, 0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
    }

    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v34 = v33;
    uint64_t v44 = 14LL;
    unint64_t v35 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v36 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(&v45, &v44, v35, v34, v36);
    uint64_t v37 = v45;
    a3(v45, 1LL);
    swift_errorRelease(v11);
  }

  else
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2AAA0);
    swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = a4;
      uint64_t v27 = v26;
      uint64_t v45 = (void *)v26;
      uint64_t v40 = a3;
      *(_DWORD *)uint64_t v25 = 136315138;
      unint64_t v39 = v25 + 4;
      uint64_t v28 = type metadata accessor for UUID(0LL);
      swift_bridgeObjectRetain(a2);
      uint64_t v30 = Array.description.getter(v29, v28);
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      uint64_t v44 = sub_1003F11D4(v30, v32, (uint64_t *)&v45);
      a3 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v39, v25 + 12);
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Completed enabling separation monitoring for beacons: %s",  v25,  0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    a3(0LL, 0LL);
    sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009AF770);
  }

  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  type metadata accessor for Transaction(0LL);
  static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
  return sub_1004E696C(0x10u);
}

uint64_t sub_100486880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v221 = a4;
  uint64_t v220 = a3;
  uint64_t v230 = a2;
  uint64_t v214 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v213 = *(void *)(v214 - 8);
  uint64_t v5 = __chkstk_darwin(v214);
  uint64_t v212 = (char *)&v196 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v211 = (char *)&v196 - v7;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v202 = (char *)&v196 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v207 = (char *)&v196 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v209 = (char *)&v196 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  char v234 = (char *)&v196 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v196 - v18;
  uint64_t v20 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v224 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  __int128 v223 = (char *)&v196 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v226 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v225 = (char *)&v196 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v219 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v218 = *(void *)(v219 - 8);
  __chkstk_darwin(v219);
  uint64_t v217 = (char *)&v196 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009AF770);
  uint64_t v204 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v206 = (uint64_t)&v196 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v205 = v27;
  __chkstk_darwin(v26);
  uint64_t v210 = (uint64_t)&v196 - v28;
  uint64_t v29 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v30 = __chkstk_darwin(v29);
  unint64_t v32 = (char *)&v196 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v196 - v33;
  uint64_t v35 = sub_100004AEC(&qword_1009A7D90);
  __chkstk_darwin(v35);
  uint64_t v232 = (uint64_t *)((char *)&v196 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v229 = type metadata accessor for LeashRecord(0LL);
  uint64_t v233 = *(unsigned __int8 **)(v229 - 8);
  __chkstk_darwin(v229);
  uint64_t v228 = (uint64_t)&v196 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v38 = type metadata accessor for Logger(0LL);
  uint64_t v39 = sub_10000A720(v38, (uint64_t)qword_100A2AAA0);
  uint64_t v40 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v216 = v39;
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.default.getter(v41);
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v227 = v22;
  uint64_t v222 = v20;
  uint64_t v236 = v19;
  if (v43)
  {
    uint64_t v215 = v34;
    uint64_t v44 = a1;
    uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v231 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 aBlock = v231;
    uint64_t v208 = v45;
    *(_DWORD *)uint64_t v45 = 136315138;
    uint64_t v203 = v45 + 4;
    uint64_t v46 = swift_bridgeObjectRetain(a1);
    uint64_t v47 = v9;
    uint64_t v48 = Array.description.getter(v46, v8);
    unint64_t v50 = v49;
    swift_bridgeObjectRelease();
    uint64_t v51 = v48;
    uint64_t v9 = v47;
    *(void *)&__int128 v237 = sub_1003F11D4(v51, v50, (uint64_t *)&aBlock);
    uint64_t v20 = v222;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, (char *)&v237 + 8, v203, v45 + 12);
    swift_bridgeObjectRelease_n(v44, 2LL);
    a1 = v44;
    uint64_t v34 = v215;
    swift_bridgeObjectRelease();
    os_log_type_t v52 = v42;
    __int128 v53 = v208;
    _os_log_impl((void *)&_mh_execute_header, v41, v52, "Disabling separation monitoring for beacons: %s", v208, 0xCu);
    uint64_t v54 = v231;
    swift_arrayDestroy(v231, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  uint64_t v55 = v20;
  uint64_t v56 = sub_100576FE0();
  uint64_t v57 = v56[2];
  uint64_t v58 = v233;
  uint64_t v235 = v9;
  if (v57)
  {
    os_log_type_t v59 = (uint64_t (*)(void, void, void))v232;
    sub_10001DC4C( (uint64_t)v56 + ((v233[80] + 32LL) & ~(unint64_t)v233[80]),  (uint64_t)v232,  type metadata accessor for LeashRecord);
    uint64_t v60 = 0LL;
  }

  else
  {
    uint64_t v60 = 1LL;
    os_log_type_t v59 = (uint64_t (*)(void, void, void))v232;
  }

  uint64_t v61 = (void (*)(uint64_t (*)(void, void, void), uint64_t, uint64_t, uint64_t))*((void *)v58 + 7);
  uint64_t v62 = v58;
  uint64_t v63 = v229;
  v61(v59, v60, 1LL, v229);
  swift_bridgeObjectRelease();
  if ((*((unsigned int (**)(void, uint64_t, uint64_t))v62 + 6))(v59, 1LL, v63) != 1)
  {
    sub_10002218C((uint64_t)v59, v228, type metadata accessor for LeashRecord);
    if (*(void *)(a1 + 16))
    {
      uint64_t v197 = *(uint8_t **)(a1 + 16);
      uint64_t v76 = v235;
      unint64_t v198 = (*(unsigned __int8 *)(v76 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
      uint64_t v77 = a1 + v198;
      uint64_t v78 = *(void *)(v235 + 72);
      uint64_t v79 = *(unsigned __int8 **)(v235 + 16);
      unsigned int v201 = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
      uint64_t v80 = a1;
      swift_bridgeObjectRetain(a1);
      uint64_t v81 = 0LL;
      __int128 v200 = xmmword_1007E67D0;
      uint64_t v199 = a1;
      uint64_t v215 = v34;
      uint64_t v233 = v79;
      uint64_t v196 = v77;
      uint64_t v231 = v78;
LABEL_14:
      uint64_t v208 = v81;
      ((void (*)(char *, uint64_t, uint64_t))v79)(v34, v77 + v78 * (void)v81, v8);
      uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56);
      v82(v34, 0LL, 1LL, v8);
      uint64_t v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
      if (v83(v34, 1LL, v8) != 1)
      {
        uint64_t v232 = *(void **)(v76 + 32);
        uint64_t v84 = ((uint64_t (*)(char *, char *, uint64_t))v232)(v236, v34, v8);
        uint64_t v85 = static os_log_type_t.info.getter(v84);
        if (qword_10099B708 != -1) {
          swift_once(&qword_10099B708, sub_100651168);
        }
        uint64_t v86 = qword_100A2B018;
        uint64_t v87 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v88 = swift_allocObject(v87, 72LL, 7LL);
        *(_OWORD *)(v88 + swift_weakDestroy(v0 + 16) = v200;
        uint64_t v89 = UUID.uuidString.getter(v88);
        uint64_t v91 = v90;
        *(void *)(v88 + 56) = &type metadata for String;
        *(void *)(v88 + 64) = sub_1000226F4();
        *(void *)(v88 + 32) = v89;
        *(void *)(v88 + 40) = v91;
        os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, v86, "beaconRecord(for uuid: %@)", 26LL, 2LL, v88);
        uint64_t v92 = swift_bridgeObjectRelease();
        uint64_t v93 = v211;
        static SystemInfo.lockState.getter(v92);
        uint64_t v94 = v213;
        uint64_t v95 = v212;
        uint64_t v96 = v214;
        (*(void (**)(char *, void, uint64_t))(v213 + 104))(v212, v201, v214);
        uint64_t v97 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
        LOBYTE(v86) = dispatch thunk of static Equatable.== infix(_:_:)(v93, v95, v96, v97);
        uint64_t v98 = *(void (**)(char *, uint64_t))(v94 + 8);
        v98(v95, v96);
        uint64_t v99 = ((uint64_t (*)(char *, uint64_t))v98)(v93, v96);
        if ((v86 & 1) != 0)
        {
          uint64_t v153 = static os_log_type_t.default.getter(v99);
          os_log(_:dso:log:_:_:)( v153,  &_mh_execute_header,  qword_100A2B018,  "beaconRecord call failed because in device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
          char v242 = 0LL;
          __int128 aBlock = 0u;
          __int128 v241 = 0u;
          uint64_t v106 = (void (*)(char *, uint64_t, uint64_t))v233;
        }

        else
        {
          uint64_t v203 = sub_100508644();
          uint64_t v100 = v203[2];
          uint64_t v101 = v209;
          if (v100)
          {
            uint64_t v102 = (uint64_t)(v203 + 4);
            while (1)
            {
              sub_100013044(v102, (uint64_t)&v237);
              uint64_t v103 = v238;
              uint64_t v104 = v239;
              sub_100012ED8(&v237, v238);
              uint64_t v105 = v234;
              (*(void (**)(uint64_t))(*(void *)(*(void *)(v104 + 8) + 8LL) + 32LL))(v103);
              LOBYTE(v103) = static UUID.== infix(_:_:)(v105, v236);
              (*(void (**)(char *, uint64_t))(v235 + 8))(v105, v8);
              if ((v103 & 1) != 0) {
                break;
              }
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v237);
              v102 += 40LL;
              if (!--v100) {
                goto LABEL_22;
              }
            }

            sub_100012EC0(&v237, (uint64_t)&aBlock);
          }

          else
          {
LABEL_22:
            char v242 = 0LL;
            __int128 aBlock = 0u;
            __int128 v241 = 0u;
          }

          swift_bridgeObjectRelease();
          uint64_t v106 = (void (*)(char *, uint64_t, uint64_t))v233;
          if (*((void *)&v241 + 1))
          {
            sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
            uint64_t v107 = *(int *)(v229 + 24);
            uint64_t v108 = *(void *)(v228 + v107);
            uint64_t v109 = *(void *)(v108 + 16);
            if (v109)
            {
              ++v208;
              uint64_t v110 = v108 + v198;
              swift_bridgeObjectRetain_n(v108, 2LL);
              while (1)
              {
                v106(v32, v110, v8);
                v82(v32, 0LL, 1LL, v8);
                if (v83(v32, 1LL, v8) == 1) {
                  break;
                }
                ((void (*)(char *, char *, uint64_t))v232)(v101, v32, v8);
                uint64_t v111 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                char v112 = dispatch thunk of static Equatable.== infix(_:_:)(v101, v236, v8, v111);
                uint64_t v113 = *(void (**)(char *, uint64_t))(v235 + 8);
                v113(v101, v8);
                if ((v112 & 1) != 0)
                {
                  swift_bridgeObjectRelease_n(v108, 2LL);
                  v113(v236, v8);
                  uint64_t v81 = v208;
                  uint64_t v80 = v199;
                  uint64_t v76 = v235;
                  uint64_t v34 = v215;
                  uint64_t v79 = v233;
                  uint64_t v77 = v196;
                  uint64_t v78 = v231;
                  if (v208 != v197) {
                    goto LABEL_14;
                  }
                  goto LABEL_36;
                }

                v110 += v231;
                --v109;
                uint64_t v106 = (void (*)(char *, uint64_t, uint64_t))v233;
                if (!v109) {
                  goto LABEL_44;
                }
              }
            }

            else
            {
              swift_bridgeObjectRetain_n(*(void *)(v228 + v107), 2LL);
LABEL_44:
              v82(v32, 1LL, 1LL, v8);
            }

            swift_bridgeObjectRelease_n(v108, 2LL);
            swift_bridgeObjectRelease();
            uint64_t v173 = v207;
            uint64_t v174 = ((uint64_t (*)(char *, char *, uint64_t))v106)(v207, v236, v8);
            uint64_t v175 = (os_log_s *)Logger.logObject.getter(v174);
            os_log_type_t v176 = static os_log_type_t.error.getter(v175);
            if (os_log_type_enabled(v175, v176))
            {
              uint64_t v177 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v178 = swift_slowAlloc(32LL, -1LL);
              *(void *)&__int128 aBlock = v178;
              *(_DWORD *)uint64_t v177 = 136315138;
              uint64_t v179 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              uint64_t v180 = dispatch thunk of CustomStringConvertible.description.getter(v8, v179);
              *(void *)&__int128 v237 = sub_1003F11D4(v180, v181, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, (char *)&v237 + 8, v177 + 4, v177 + 12);
              swift_bridgeObjectRelease();
              uint64_t v163 = *(void (**)(char *, uint64_t))(v235 + 8);
              v163(v173, v8);
              _os_log_impl( (void *)&_mh_execute_header,  v175,  v176,  "Failed to disable separation monitoring for unleashed beacon: %s",  v177,  0xCu);
              swift_arrayDestroy(v178, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v178, -1LL, -1LL);
              swift_slowDealloc(v177, -1LL, -1LL);
            }

            else
            {
              uint64_t v163 = *(void (**)(char *, uint64_t))(v235 + 8);
              v163(v173, v8);
            }

            uint64_t v164 = v222;
            uint64_t v182 = v221;
            uint64_t v183 = v220;
            uint64_t v184 = v219;
            uint64_t v185 = v218;
            uint64_t v186 = v217;
            sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
            (*(void (**)(char *, void, uint64_t))(v185 + 104))( v186,  enum case for DispatchQoS.QoSClass.default(_:),  v184);
            uint64_t v170 = (void *)static OS_dispatch_queue.global(qos:)(v186);
            (*(void (**)(char *, uint64_t))(v185 + 8))(v186, v184);
            uint64_t v187 = swift_allocObject(&unk_10095D218, 32LL, 7LL);
            *(void *)(v187 + swift_weakDestroy(v0 + 16) = v183;
            *(void *)(v187 + 24) = v182;
            char v242 = (uint64_t (*)())sub_10049CA5C;
            uint64_t v243 = v187;
            *(void *)&__int128 aBlock = _NSConcreteStackBlock;
            *((void *)&aBlock + 1) = 1107296256LL;
            uint64_t v172 = &unk_10095D230;
            goto LABEL_49;
          }
        }

        sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
        swift_bridgeObjectRelease();
        uint64_t v154 = v202;
        uint64_t v155 = ((uint64_t (*)(char *, char *, uint64_t))v106)(v202, v236, v8);
        uint64_t v156 = (os_log_s *)Logger.logObject.getter(v155);
        os_log_type_t v157 = static os_log_type_t.error.getter(v156);
        if (os_log_type_enabled(v156, v157))
        {
          uint64_t v158 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v159 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 aBlock = v159;
          *(_DWORD *)uint64_t v158 = 136315138;
          uint64_t v160 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v161 = dispatch thunk of CustomStringConvertible.description.getter(v8, v160);
          *(void *)&__int128 v237 = sub_1003F11D4(v161, v162, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, (char *)&v237 + 8, v158 + 4, v158 + 12);
          swift_bridgeObjectRelease();
          uint64_t v163 = *(void (**)(char *, uint64_t))(v235 + 8);
          v163(v154, v8);
          _os_log_impl( (void *)&_mh_execute_header,  v156,  v157,  "Failed to disable separation monitoring for unknown beacon: %s",  v158,  0xCu);
          swift_arrayDestroy(v159, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v159, -1LL, -1LL);
          swift_slowDealloc(v158, -1LL, -1LL);
        }

        else
        {
          uint64_t v163 = *(void (**)(char *, uint64_t))(v235 + 8);
          v163(v154, v8);
        }

        uint64_t v164 = v222;
        uint64_t v165 = v221;
        uint64_t v166 = v220;
        uint64_t v167 = v219;
        uint64_t v168 = v218;
        uint64_t v169 = v217;
        sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
        (*(void (**)(char *, void, uint64_t))(v168 + 104))( v169,  enum case for DispatchQoS.QoSClass.default(_:),  v167);
        uint64_t v170 = (void *)static OS_dispatch_queue.global(qos:)(v169);
        (*(void (**)(char *, uint64_t))(v168 + 8))(v169, v167);
        uint64_t v171 = swift_allocObject(&unk_10095D1C8, 32LL, 7LL);
        *(void *)(v171 + swift_weakDestroy(v0 + 16) = v166;
        *(void *)(v171 + 24) = v165;
        char v242 = sub_10049F748;
        uint64_t v243 = v171;
        *(void *)&__int128 aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256LL;
        uint64_t v172 = &unk_10095D1E0;
LABEL_49:
        *(void *)&__int128 v241 = sub_1001C31E8;
        *((void *)&v241 + 1) = v172;
        uint64_t v188 = _Block_copy(&aBlock);
        uint64_t v189 = swift_retain();
        uint64_t v190 = v225;
        static DispatchQoS.unspecified.getter(v189);
        *(void *)&__int128 v237 = _swiftEmptyArrayStorage;
        uint64_t v191 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v192 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v193 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v194 = v223;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v237, v192, v193, v164, v191);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v190, v194, v188);
        _Block_release(v188);

        (*(void (**)(char *, uint64_t))(v224 + 8))(v194, v164);
        (*(void (**)(char *, uint64_t))(v226 + 8))(v190, v227);
        v163(v236, v8);
        goto LABEL_50;
      }
    }

    else
    {
      uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v235 + 56);
      uint64_t v80 = a1;
      swift_bridgeObjectRetain(a1);
LABEL_36:
      v82(v34, 1LL, 1LL, v8);
    }

    swift_bridgeObjectRelease();
    uint64_t v128 = swift_allocObject(&unk_10095D150, 24LL, 7LL);
    *(void *)(v128 + swift_weakDestroy(v0 + 16) = v80;
    swift_bridgeObjectRetain(v80);
    uint64_t v129 = v230;
    swift_retain();
    uint64_t v130 = v210;
    sub_10048606C( (uint64_t)sub_10049CA2C,  v129,  (uint64_t)sub_10049CA44,  v128,  (uint64_t *)&unk_1009AF770,  (uint64_t)sub_10049CA78,  v210);
    swift_release(v129);
    swift_release(v128);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v131 = v218;
    uint64_t v132 = v217;
    uint64_t v133 = v219;
    (*(void (**)(char *, void, uint64_t))(v218 + 104))( v217,  enum case for DispatchQoS.QoSClass.default(_:),  v219);
    uint64_t v134 = (void *)static OS_dispatch_queue.global(qos:)(v132);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v132, v133);
    uint64_t v135 = v206;
    sub_10001581C(v130, v206, (uint64_t *)&unk_1009AF770);
    uint64_t v136 = *(unsigned __int8 *)(v204 + 80);
    uint64_t v137 = (v136 + 16) & ~v136;
    unint64_t v138 = (v205 + v137 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v139 = (v138 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v140 = (v139 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v141 = swift_allocObject(&unk_10095D178, v140 + 8, v136 | 7);
    sub_100015750(v135, v141 + v137, (uint64_t *)&unk_1009AF770);
    *(void *)(v141 + v138) = v80;
    uint64_t v142 = (void *)(v141 + v139);
    uint64_t v143 = v221;
    *uint64_t v142 = v220;
    v142[1] = v143;
    *(void *)(v141 + v140) = v129;
    char v242 = sub_10049CA50;
    uint64_t v243 = v141;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    *(void *)&__int128 v241 = sub_1001C31E8;
    *((void *)&v241 + 1) = &unk_10095D190;
    uint64_t v144 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain(v80);
    swift_retain();
    uint64_t v145 = swift_retain();
    uint64_t v146 = v225;
    static DispatchQoS.unspecified.getter(v145);
    *(void *)&__int128 v237 = _swiftEmptyArrayStorage;
    uint64_t v147 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v148 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v149 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v150 = v223;
    uint64_t v151 = v148;
    uint64_t v152 = v222;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v237, v151, v149, v222, v147);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v146, v150, v144);
    _Block_release(v144);

    (*(void (**)(char *, uint64_t))(v224 + 8))(v150, v152);
    (*(void (**)(char *, uint64_t))(v226 + 8))(v146, v227);
    sub_100015794(v210, (uint64_t *)&unk_1009AF770);
LABEL_50:
    sub_100018C68(v228, type metadata accessor for LeashRecord);
    return swift_release(v243);
  }

  sub_100015794((uint64_t)v59, &qword_1009A7D90);
  uint64_t v64 = swift_bridgeObjectRetain_n(a1, 2LL);
  unint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
  os_log_type_t v66 = static os_log_type_t.error.getter(v65);
  uint64_t v67 = v55;
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v69 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 aBlock = v69;
    *(_DWORD *)uint64_t v68 = 136315138;
    uint64_t v70 = swift_bridgeObjectRetain(a1);
    uint64_t v71 = Array.description.getter(v70, v8);
    uint64_t v72 = a1;
    uint64_t v73 = v71;
    unint64_t v75 = v74;
    swift_bridgeObjectRelease();
    *(void *)&__int128 v237 = sub_1003F11D4(v73, v75, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, (char *)&v237 + 8, v68 + 4, v68 + 12);
    swift_bridgeObjectRelease_n(v72, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "Failed to disable separation monitoring for beacons: %s due to missing leash record",  v68,  0xCu);
    swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1LL, -1LL);
    swift_slowDealloc(v68, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  uint64_t v114 = v227;
  uint64_t v115 = v221;
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v116 = v218;
  uint64_t v117 = v217;
  uint64_t v118 = v219;
  (*(void (**)(char *, void, uint64_t))(v218 + 104))( v217,  enum case for DispatchQoS.QoSClass.default(_:),  v219);
  unint64_t v119 = (void *)static OS_dispatch_queue.global(qos:)(v117);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v118);
  uint64_t v120 = swift_allocObject(&unk_10095D100, 32LL, 7LL);
  *(void *)(v120 + swift_weakDestroy(v0 + 16) = v220;
  *(void *)(v120 + 24) = v115;
  char v242 = (uint64_t (*)())sub_10049CA10;
  uint64_t v243 = v120;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  *(void *)&__int128 v241 = sub_1001C31E8;
  *((void *)&v241 + 1) = &unk_10095D118;
  uint64_t v121 = _Block_copy(&aBlock);
  uint64_t v122 = swift_retain();
  uint64_t v123 = v225;
  static DispatchQoS.unspecified.getter(v122);
  *(void *)&__int128 v237 = _swiftEmptyArrayStorage;
  uint64_t v124 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v125 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v126 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v127 = v223;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v237, v125, v126, v67, v124);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v123, v127, v121);
  _Block_release(v121);

  (*(void (**)(char *, uint64_t))(v224 + 8))(v127, v67);
  (*(void (**)(char *, uint64_t))(v226 + 8))(v123, v114);
  return swift_release(v243);
}

uint64_t sub_100487F90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100576FE0();
  uint64_t v3 = v2[2];
  uint64_t v4 = type metadata accessor for LeashRecord(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  if (v3)
  {
    sub_10001DC4C( (uint64_t)v2 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)),  a1,  type metadata accessor for LeashRecord);
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, v6, 1LL, v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100488024(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (unint64_t *)(a1 + *(int *)(type metadata accessor for LeashRecord(0LL) + 24));
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = sub_10049C3FC(v3, a2);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 >= v4) {
    return sub_10049C254(v4, v6);
  }
  __break(1u);
  return result;
}

uint64_t sub_1004880A4(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AF770);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v10, (uint64_t *)&unk_1009AF770);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    swift_errorRelease(*v10);
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2AAA0);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Failed to disable separation monitoring due to leash record update failure.",  v15,  2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v17 = v16;
    uint64_t v37 = 14LL;
    unint64_t v18 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v19 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(&v38, &v37, v18, v17, v19);
    uint64_t v20 = v38;
    a3(v38, 1LL);
  }

  else
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2AAA0);
    uint64_t v22 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = a3;
      uint64_t v27 = v26;
      uint64_t v38 = (void *)v26;
      v35[1] = a4;
      *(_DWORD *)uint64_t v25 = 136315138;
      v35[0] = v25 + 4;
      uint64_t v28 = type metadata accessor for UUID(0LL);
      uint64_t v29 = swift_bridgeObjectRetain(a2);
      uint64_t v30 = Array.description.getter(v29, v28);
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      uint64_t v37 = sub_1003F11D4(v30, v32, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v35[0], v25 + 12);
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Completed separation monitoring for beacons: %s", v25, 0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v33 = v27;
      a3 = v36;
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    a3(0LL, 0LL);
    sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009AF770);
  }

  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  type metadata accessor for Transaction(0LL);
  static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
  return sub_1004E696C(0x10u);
}

void sub_10048849C(uint64_t a1, int a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v5 = v4;
  LODWORD(v219) = a2;
  uint64_t v205 = type metadata accessor for DispatchTime(0LL);
  uint64_t v204 = *(void *)(v205 - 8);
  uint64_t v9 = __chkstk_darwin(v205);
  uint64_t v202 = (char *)&v200 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v203 = (char *)&v200 - v11;
  uint64_t v217 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v215 = *(void *)(v217 - 8);
  __chkstk_darwin(v217);
  uint64_t v213 = (char *)&v200 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v218 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v216 = *(void *)(v218 - 8);
  __chkstk_darwin(v218);
  uint64_t v214 = (char *)&v200 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v211 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v210 = *(void *)(v211 - 8);
  __chkstk_darwin(v211);
  uint64_t v209 = (char *)&v200 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  __chkstk_darwin(v15);
  uint64_t v229 = (uint64_t)&v200 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v232 = type metadata accessor for Date(0LL);
  uint64_t v230 = *(void *)(v232 - 8);
  __chkstk_darwin(v232);
  uint64_t v231 = (dispatch_group_s *)((char *)&v200 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v18 = (int *)type metadata accessor for SafeLocation(0LL);
  uint64_t v222 = *((void *)v18 - 1);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v200 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  os_log_type_t v24 = (char *)&v200 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v220 = (uint64_t)&v200 - v26;
  uint64_t v206 = v27;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v200 - v28;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v30 = type metadata accessor for Logger(0LL);
  uint64_t v31 = sub_10000A720(v30, (uint64_t)qword_100A2AAA0);
  uint64_t v233 = a1;
  uint64_t v32 = sub_10001DC4C(a1, (uint64_t)v29, type metadata accessor for SafeLocation);
  uint64_t v207 = v31;
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.default.getter(v33);
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v208 = v21;
  if (v35)
  {
    uint64_t v212 = a3;
    uint64_t v36 = swift_slowAlloc(12LL, -1LL);
    uint64_t v221 = a4;
    uint64_t v37 = (uint8_t *)v36;
    uint64_t v38 = (void **)swift_slowAlloc(32LL, -1LL);
    uint64_t v201 = v5;
    uint64_t v39 = v38;
    __int128 aBlock = v38;
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v228 = v37 + 4;
    uint64_t v40 = v220;
    sub_10001DC4C((uint64_t)v29, v220, type metadata accessor for SafeLocation);
    uint64_t v41 = String.init<A>(describing:)(v40, v18);
    uint64_t v234 = sub_1003F11D4(v41, v42, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &aBlock, v228, v37 + 12);
    a3 = v212;
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v29, type metadata accessor for SafeLocation);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Adding safe location: %s", v37, 0xCu);
    swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
    BOOL v43 = v39;
    uint64_t v5 = v201;
    swift_slowDealloc(v43, -1LL, -1LL);
    uint64_t v44 = v37;
    a4 = v221;
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v29, type metadata accessor for SafeLocation);
  }

  uint64_t v45 = (uint8_t *)v18[8];
  uint64_t v46 = v233;
  uint64_t v227 = v18[9];
  uint64_t v228 = v45;
  double v47 = *(double *)&v45[v233];
  double v48 = *(double *)(v233 + v227);
  uint64_t v226 = v18[10];
  double v49 = *(double *)(v233 + v226);
  unint64_t v50 = v231;
  Date.init()(v51);
  id v52 = objc_allocWithZone(&OBJC_CLASS___CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v54 = objc_msgSend( v52,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:",  isa,  v47,  v48,  0.0,  v49,  v49,  -1.0,  -1.0,  -1.0,  0xBFF0000000000000);

  uint64_t v225 = *(void (**)(dispatch_group_s *, uint64_t))(v230 + 8);
  v225(v50, v232);
  uint64_t v224 = v18[11];
  [v54 setReferenceFrame:*(unsigned __int8 *)(v46 + v224)];
  LOBYTE(isa) = sub_100658D94();

  if ((isa & 1) != 0)
  {
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v56 = v55;
    uint64_t v234 = 21LL;
    unint64_t v57 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v58 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v234, v57, v56, v58);
    os_log_type_t v59 = aBlock;
    a3(aBlock, 1LL);
  }

  else
  {
    uint64_t v60 = v229;
    uint64_t v223 = v46 + v18[5];
    sub_1005766A0(v223, v229);
    int v61 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v222 + 48))(v60, 1LL, v18);
    sub_100015794(v60, (uint64_t *)&unk_1009AF740);
    if (v61 == 1)
    {
      uint64_t v221 = a4;
      uint64_t v212 = a3;
      if ((v219 & 1) == 0)
      {
        uint64_t v62 = sub_100576844();
        uint64_t v63 = v62[2];
        if (v63)
        {
          uint64_t v201 = v5;
          uint64_t v64 = *(unsigned __int8 *)(v222 + 80);
          uint64_t v200 = ~v64;
          uint64_t v207 = v64;
          uint64_t v208 = v62;
          uint64_t v65 = (uint64_t)v62 + ((v64 + 32) & ~v64);
          uint64_t v219 = *(void *)(v222 + 72);
          uint64_t v66 = v232;
          uint64_t v67 = v225;
          do
          {
            uint64_t v229 = v65;
            uint64_t v230 = v63;
            uint64_t v68 = sub_10001DC4C(v65, (uint64_t)v24, type metadata accessor for SafeLocation);
            double v69 = *(double *)&v24[v18[8]];
            double v70 = *(double *)&v24[v18[9]];
            uint64_t v71 = v18[10];
            double v72 = *(double *)&v24[v71];
            uint64_t v73 = v231;
            Date.init()(v68);
            id v74 = objc_allocWithZone(&OBJC_CLASS___CLLocation);
            Class v75 = Date._bridgeToObjectiveC()().super.isa;
            id v76 = objc_msgSend( v74,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAcc uracy:timestamp:",  v75,  v69,  v70,  0.0,  v72,  v72,  -1.0,  -1.0,  -1.0,  0xBFF0000000000000);

            v67(v73, v66);
            [v76 setReferenceFrame:v24[v18[11]]];
            [v76 coordinate];
            double v78 = v77;
            double v80 = v79;

            double v81 = *(double *)&v24[v71];
            UUID.uuidString.getter(v82);
            id v83 = objc_allocWithZone(&OBJC_CLASS___CLCircularRegion);
            NSString v84 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v85 = objc_msgSend(v83, "initWithCenter:radius:identifier:", v84, v78, v80, v81);

            uint64_t v86 = v233;
            double v87 = *(double *)&v228[v233];
            double v88 = *(double *)(v233 + v227);
            uint64_t v89 = v18;
            uint64_t v90 = v24;
            uint64_t v91 = v226;
            double v92 = *(double *)(v233 + v226);
            Date.init()(v93);
            id v94 = objc_allocWithZone(&OBJC_CLASS___CLLocation);
            Class v95 = Date._bridgeToObjectiveC()().super.isa;
            id v96 = objc_msgSend( v94,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAcc uracy:timestamp:",  v95,  v87,  v88,  0.0,  v92,  v92,  -1.0,  -1.0,  -1.0,  0xBFF0000000000000);

            v67(v73, v66);
            [v96 setReferenceFrame:*(unsigned __int8 *)(v86 + v224)];
            [v96 coordinate];
            double v98 = v97;
            double v100 = v99;

            double v101 = *(double *)(v86 + v91);
            os_log_type_t v24 = v90;
            unint64_t v18 = v89;
            UUID.uuidString.getter(v102);
            id v103 = objc_allocWithZone(&OBJC_CLASS___CLCircularRegion);
            NSString v104 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v105 = objc_msgSend(v103, "initWithCenter:radius:identifier:", v104, v98, v100, v101);

            sub_10061CB88(v105);
            double v107 = v106;
            [v85 radius];
            double v109 = v108;
            [v85 radius];
            double v111 = v109 * v110 * 3.14159265;
            [v105 radius];
            double v113 = v112;
            [v105 radius];
            double v115 = v114;

            double v116 = v113 * v115 * 3.14159265;
            if (v116 >= v111) {
              double v116 = v111;
            }
            if (v116 > 0.0 && v107 / v116 > 0.5 && v24[v89[12]] != 3)
            {
              swift_bridgeObjectRelease();
              sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
              uint64_t v117 = v210;
              uint64_t v118 = v209;
              uint64_t v119 = v211;
              (*(void (**)(char *, void, uint64_t))(v210 + 104))( v209,  enum case for DispatchQoS.QoSClass.default(_:),  v211);
              uint64_t v120 = (void *)static OS_dispatch_queue.global(qos:)(v118);
              (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v119);
              uint64_t v121 = v220;
              sub_10001DC4C((uint64_t)v24, v220, type metadata accessor for SafeLocation);
              uint64_t v122 = (v207 + 16) & v200;
              unint64_t v123 = (v206 + v122 + 7) & 0xFFFFFFFFFFFFFFF8LL;
              uint64_t v124 = swift_allocObject(&unk_10095D5D8, v123 + 16, v207 | 7);
              sub_10002218C(v121, v124 + v122, type metadata accessor for SafeLocation);
              uint64_t v125 = (void *)(v124 + v123);
              uint64_t v126 = v221;
              *uint64_t v125 = v212;
              v125[1] = v126;
              uint64_t v239 = sub_10049D1D8;
              uint64_t v240 = v124;
              __int128 aBlock = _NSConcreteStackBlock;
              uint64_t v236 = 1107296256LL;
              __int128 v237 = sub_1001C31E8;
              uint64_t v238 = &unk_10095D5F0;
              uint64_t v127 = _Block_copy(&aBlock);
              uint64_t v128 = swift_retain();
              uint64_t v129 = v214;
              static DispatchQoS.unspecified.getter(v128);
              uint64_t v234 = (uint64_t)_swiftEmptyArrayStorage;
              uint64_t v130 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              uint64_t v131 = sub_100004AEC((uint64_t *)&unk_1009AB860);
              uint64_t v132 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
              uint64_t v133 = v213;
              uint64_t v134 = v131;
              uint64_t v135 = v217;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v234, v134, v132, v217, v130);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v129, v133, v127);
              _Block_release(v127);

              (*(void (**)(char *, uint64_t))(v215 + 8))(v133, v135);
              (*(void (**)(char *, uint64_t))(v216 + 8))(v129, v218);
              sub_100018C68((uint64_t)v24, type metadata accessor for SafeLocation);
              goto LABEL_27;
            }

            sub_100018C68((uint64_t)v24, type metadata accessor for SafeLocation);
            uint64_t v65 = v229 + v219;
            uint64_t v63 = v230 - 1;
          }

          while (v230 != 1);
          swift_bridgeObjectRelease();
          uint64_t v5 = v201;
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        uint64_t v46 = v233;
      }

      uint64_t v163 = dispatch_group_create();
      dispatch_group_enter(v163);
      uint64_t v164 = sub_100004AEC(&qword_1009AF758);
      uint64_t v232 = swift_allocBox(v164);
      uint64_t v166 = v165;
      uint64_t v167 = sub_100004AEC((uint64_t *)&unk_1009AF730);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 56LL))(v166, 1LL, 1LL, v167);
      uint64_t v168 = v220;
      sub_10001DC4C(v46, v220, type metadata accessor for SafeLocation);
      uint64_t v169 = *(unsigned __int8 *)(v222 + 80);
      uint64_t v170 = (v169 + 24) & ~v169;
      uint64_t v230 = v169 | 7;
      uint64_t v171 = v5;
      uint64_t v172 = v206 + 7;
      unint64_t v173 = (v206 + 7 + v170) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v174 = (v173 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v175 = swift_allocObject(&unk_10095D560, v174 + 8, v169 | 7);
      *(void *)(v175 + swift_weakDestroy(v0 + 16) = v171;
      sub_10002218C(v168, v175 + v170, type metadata accessor for SafeLocation);
      *(void *)(v175 + v173) = v232;
      *(void *)(v175 + v174) = v163;
      swift_retain();
      swift_retain();
      uint64_t v231 = v163;
      sub_1005094A0(sub_10049D024, v175);
      uint64_t v176 = swift_release();
      uint64_t v177 = v202;
      static DispatchTime.now()(v176);
      uint64_t v178 = v203;
      + infix(_:_:)(v177, 120.0);
      uint64_t v179 = *(void (**)(char *, uint64_t))(v204 + 8);
      uint64_t v180 = v205;
      v179(v177, v205);
      LOBYTE(v173) = OS_dispatch_group.wait(timeout:)(v178) & 1;
      v179(v178, v180);
      sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v181 = v210;
      uint64_t v182 = v209;
      uint64_t v183 = v211;
      (*(void (**)(char *, void, uint64_t))(v210 + 104))( v209,  enum case for DispatchQoS.QoSClass.default(_:),  v211);
      uint64_t v184 = (void *)static OS_dispatch_queue.global(qos:)(v182);
      (*(void (**)(char *, uint64_t))(v181 + 8))(v182, v183);
      sub_10001DC4C(v233, v168, type metadata accessor for SafeLocation);
      uint64_t v185 = (v169 + 17) & ~v169;
      unint64_t v186 = (v172 + v185) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v187 = (v186 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v188 = (v187 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v189 = swift_allocObject(&unk_10095D588, v188 + 8, v230);
      *(_BYTE *)(v189 + swift_weakDestroy(v0 + 16) = v173;
      sub_10002218C(v168, v189 + v185, type metadata accessor for SafeLocation);
      uint64_t v190 = (void *)(v189 + v186);
      uint64_t v191 = v221;
      *uint64_t v190 = v212;
      v190[1] = v191;
      *(void *)(v189 + v187) = v232;
      *(void *)(v189 + v188) = v171;
      uint64_t v239 = sub_10049D174;
      uint64_t v240 = v189;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v236 = 1107296256LL;
      __int128 v237 = sub_1001C31E8;
      uint64_t v238 = &unk_10095D5A0;
      uint64_t v192 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      uint64_t v193 = swift_retain();
      uint64_t v194 = v214;
      static DispatchQoS.unspecified.getter(v193);
      uint64_t v234 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v195 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v196 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v197 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      unint64_t v198 = v213;
      uint64_t v199 = v217;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v234, v196, v197, v217, v195);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v194, v198, v192);
      _Block_release(v192);

      (*(void (**)(char *, uint64_t))(v215 + 8))(v198, v199);
      (*(void (**)(char *, uint64_t))(v216 + 8))(v194, v218);
      swift_release();
    }

    else
    {
      uint64_t v136 = v46;
      uint64_t v137 = (uint64_t)v208;
      uint64_t v138 = sub_10001DC4C(v136, (uint64_t)v208, type metadata accessor for SafeLocation);
      unint64_t v139 = (os_log_s *)Logger.logObject.getter(v138);
      os_log_type_t v140 = static os_log_type_t.error.getter(v139);
      if (os_log_type_enabled(v139, v140))
      {
        uint64_t v141 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v142 = (void **)swift_slowAlloc(32LL, -1LL);
        uint64_t v221 = a4;
        uint64_t v143 = v142;
        __int128 aBlock = v142;
        *(_DWORD *)uint64_t v141 = 136315138;
        uint64_t v144 = type metadata accessor for UUID(0LL);
        uint64_t v145 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v146 = dispatch thunk of CustomStringConvertible.description.getter(v144, v145);
        uint64_t v234 = sub_1003F11D4(v146, v147, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &aBlock, v141 + 4, v141 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v137, type metadata accessor for SafeLocation);
        _os_log_impl( (void *)&_mh_execute_header,  v139,  v140,  "Safe location with identifier: %s already exists",  v141,  0xCu);
        swift_arrayDestroy(v143, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v148 = v143;
        a4 = v221;
        swift_slowDealloc(v148, -1LL, -1LL);
        swift_slowDealloc(v141, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v137, type metadata accessor for SafeLocation);
      }

      sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v149 = v210;
      uint64_t v150 = v209;
      uint64_t v151 = v211;
      (*(void (**)(char *, void, uint64_t))(v210 + 104))( v209,  enum case for DispatchQoS.QoSClass.default(_:),  v211);
      uint64_t v152 = (void *)static OS_dispatch_queue.global(qos:)(v150);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v150, v151);
      uint64_t v153 = swift_allocObject(&unk_10095D628, 32LL, 7LL);
      *(void *)(v153 + swift_weakDestroy(v0 + 16) = a3;
      *(void *)(v153 + 24) = a4;
      uint64_t v239 = sub_10049D21C;
      uint64_t v240 = v153;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v236 = 1107296256LL;
      __int128 v237 = sub_1001C31E8;
      uint64_t v238 = &unk_10095D640;
      uint64_t v154 = _Block_copy(&aBlock);
      uint64_t v155 = swift_retain();
      uint64_t v156 = v214;
      static DispatchQoS.unspecified.getter(v155);
      uint64_t v234 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v157 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v158 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v159 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v160 = v213;
      uint64_t v161 = v158;
      uint64_t v162 = v217;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v234, v161, v159, v217, v157);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v156, v160, v154);
      _Block_release(v154);

      (*(void (**)(char *, uint64_t))(v215 + 8))(v160, v162);
      (*(void (**)(char *, uint64_t))(v216 + 8))(v156, v218);
    }

void sub_100489878(uint64_t a1, void (*a2)(void *, uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v22 = 8LL;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v6, &v21);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoSafeLocationKey);
  *(void *)(inited + 40) = v8;
  uint64_t v9 = a1 + *(int *)(type metadata accessor for SafeLocation(0LL) + 20);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  *(void *)(inited + 72) = v10;
  uint64_t v11 = sub_10000A7C8((void *)(inited + 48));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v11, v9, v10);
  unint64_t v12 = sub_100412CF8(inited);
  uint64_t v13 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  _BridgedStoredNSError.init(_:userInfo:)(&v23, &v22, v12, v5, v13);
  uint64_t v14 = v23;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AAA0);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Overlapping Safe Location detected, failing.", v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  id v20 = v14;
  a2(v14, 1LL);
}

void sub_100489A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  sub_10055A564(a3, 0, a2, a4, v9);
  swift_release();
}

void sub_100489AC8(uint64_t a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009AF758);
  __chkstk_darwin(v6);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = swift_projectBox(a2);
  sub_10001581C(a1, (uint64_t)v8, (uint64_t *)&unk_1009AF730);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AF730);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v8, 0LL, 1LL, v10);
  swift_beginAccess(v9, v12, 1LL, 0LL);
  sub_1000D4D50((uint64_t)v8, v9, &qword_1009AF758);
  dispatch_group_leave(a3);
}

void sub_100489BB4( char a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  v85[1] = a6;
  uint64_t v89 = a4;
  uint64_t v90 = a3;
  uint64_t v88 = a2;
  uint64_t v7 = a1 & 1;
  uint64_t v87 = type metadata accessor for SafeLocation(0LL);
  uint64_t v8 = __chkstk_darwin(v87);
  uint64_t v10 = (char *)v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v85 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  v85[0] = (uint64_t)v85 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)v85 - v17;
  __chkstk_darwin(v16);
  id v20 = (char *)v85 - v19;
  uint64_t v21 = sub_100004AEC(&qword_1009AF758);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AF730);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (uint64_t *)((char *)v85 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v26);
  uint64_t v86 = (uint64_t)v85 - v29;
  uint64_t v30 = swift_projectBox(a5);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v7, 1LL) & 1) != 0)
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    sub_10000A720(v31, (uint64_t)qword_100A2AAA0);
    uint64_t v32 = sub_10001DC4C(v88, (uint64_t)v10, type metadata accessor for SafeLocation);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      BOOL v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      v93[0] = v36;
      *(_DWORD *)BOOL v35 = 136315138;
      uint64_t v37 = type metadata accessor for UUID(0LL);
      uint64_t v38 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v37, v38);
      uint64_t v92 = sub_1003F11D4(v39, v40, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v10, type metadata accessor for SafeLocation);
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Adding safe location with identifier: %s failed due to timeout.",  v35,  0xCu);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v10, type metadata accessor for SafeLocation);
    }

    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v52 = v51;
    uint64_t v92 = 19LL;
    unint64_t v53 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v54 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(v93, &v92, v53, v52, v54);
    uint64_t v55 = (void *)v93[0];
LABEL_20:
    v90(v55, 1LL);

    return;
  }

  swift_beginAccess(v30, v93, 0LL, 0LL);
  sub_10001581C(v30, (uint64_t)v23, &qword_1009AF758);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, v24) == 1)
  {
    sub_100015794((uint64_t)v23, &qword_1009AF758);
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v41 = type metadata accessor for Logger(0LL);
    sub_10000A720(v41, (uint64_t)qword_100A2AAA0);
    uint64_t v42 = sub_10001DC4C(v88, (uint64_t)v20, type metadata accessor for SafeLocation);
    BOOL v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.error.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      uint64_t v92 = v46;
      *(_DWORD *)uint64_t v45 = 136315138;
      uint64_t v47 = type metadata accessor for UUID(0LL);
      uint64_t v48 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
      uint64_t v91 = sub_1003F11D4(v49, v50, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v20, type metadata accessor for SafeLocation);
      _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "Adding safe location with identifier: %s failed due to unknown error.",  v45,  0xCu);
      swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v20, type metadata accessor for SafeLocation);
    }

    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v68 = v67;
    uint64_t v91 = 0LL;
    unint64_t v69 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v70 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(&v92, &v91, v69, v68, v70);
    uint64_t v55 = (void *)v92;
    goto LABEL_20;
  }

  uint64_t v56 = (uint64_t)v23;
  uint64_t v57 = v86;
  sub_100015750(v56, v86, (uint64_t *)&unk_1009AF730);
  sub_10001581C(v57, (uint64_t)v28, (uint64_t *)&unk_1009AF730);
  if (swift_getEnumCaseMultiPayload(v28, v24) == 1)
  {
    swift_errorRelease(*v28);
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v58 = type metadata accessor for Logger(0LL);
    sub_10000A720(v58, (uint64_t)qword_100A2AAA0);
    uint64_t v59 = sub_10001DC4C(v88, (uint64_t)v13, type metadata accessor for SafeLocation);
    uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v61 = static os_log_type_t.error.getter(v60);
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v63 = swift_slowAlloc(32LL, -1LL);
      uint64_t v92 = v63;
      *(_DWORD *)uint64_t v62 = 136315138;
      uint64_t v64 = v85[0];
      sub_10001DC4C((uint64_t)v13, v85[0], type metadata accessor for SafeLocation);
      uint64_t v65 = String.init<A>(describing:)(v64, v87);
      uint64_t v91 = sub_1003F11D4(v65, v66, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v13, type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to add safe location: %s", v62, 0xCu);
      swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1LL, -1LL);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v13, type metadata accessor for SafeLocation);
    }

    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v81 = v80;
    uint64_t v91 = 15LL;
    unint64_t v82 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v83 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(&v92, &v91, v82, v81, v83);
    NSString v84 = (void *)v92;
    v90((void *)v92, 1LL);

    sub_100015794(v86, (uint64_t *)&unk_1009AF730);
  }

  else
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v71 = type metadata accessor for Logger(0LL);
    sub_10000A720(v71, (uint64_t)qword_100A2AAA0);
    uint64_t v72 = sub_10001DC4C(v88, (uint64_t)v18, type metadata accessor for SafeLocation);
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.default.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      Class v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v76 = swift_slowAlloc(32LL, -1LL);
      uint64_t v92 = v76;
      *(_DWORD *)Class v75 = 136315138;
      uint64_t v77 = v85[0];
      sub_10001DC4C((uint64_t)v18, v85[0], type metadata accessor for SafeLocation);
      uint64_t v78 = String.init<A>(describing:)(v77, v87);
      uint64_t v91 = sub_1003F11D4(v78, v79, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v75 + 4, v75 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v18, type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Completed adding safe location: %s", v75, 0xCu);
      swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1LL, -1LL);
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v18, type metadata accessor for SafeLocation);
    }

    v90(0LL, 0LL);
    sub_1004E6B70();
    sub_100015794(v86, (uint64_t *)&unk_1009AF730);
    sub_100015794((uint64_t)v28, (uint64_t *)&unk_1009AF730);
  }

uint64_t sub_10048A5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v140 = a3;
  uint64_t v141 = a4;
  uint64_t v147 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v145 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v144 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v146 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v143 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v142 = (char *)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (dispatch_group_s *)type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v138 = *((void *)v8 - 1);
  unint64_t v139 = v8;
  __chkstk_darwin(v8);
  uint64_t v137 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = type metadata accessor for DispatchTime(0LL);
  uint64_t v126 = *(void *)(v127 - 8);
  uint64_t v10 = __chkstk_darwin(v127);
  unint64_t v123 = (char *)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v125 = (char *)&v119 - v12;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  __chkstk_darwin(v13);
  uint64_t v132 = (uint64_t)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SafeLocation(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v131 = (uint64_t)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = v18;
  __chkstk_darwin(v17);
  uint64_t v148 = (uint64_t)&v119 - v19;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v128 = (char *)&v119 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v122 = (char *)&v119 - v25;
  uint64_t v124 = v26;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v119 - v27;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v29 = type metadata accessor for Logger(0LL);
  uint64_t v30 = sub_10000A720(v29, (uint64_t)qword_100A2AAA0);
  uint64_t v133 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v31 = v133(v28, a1, v20);
  uint64_t v121 = v30;
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v135 = a1;
  uint64_t v136 = a2;
  uint64_t v134 = v16;
  uint64_t v129 = v21;
  if (v34)
  {
    BOOL v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v36 = (void **)swift_slowAlloc(32LL, -1LL);
    __int128 aBlock = v36;
    uint64_t v120 = v15;
    *(_DWORD *)BOOL v35 = 136315138;
    uint64_t v37 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v20, v37);
    uint64_t v149 = (void *)sub_1003F11D4(v38, v39, (uint64_t *)&aBlock);
    uint64_t v16 = v134;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &aBlock, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease();
    unint64_t v40 = *(void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v15 = v120;
    v40(v28, v20);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Removing safe location with identifier: %s", v35, 0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v41 = v36;
    a1 = v135;
    swift_slowDealloc(v41, -1LL, -1LL);
    uint64_t v42 = v35;
    a2 = v136;
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    unint64_t v40 = *(void (**)(char *, uint64_t))(v21 + 8);
    v40(v28, v20);
  }

  uint64_t v43 = v132;
  sub_1005766A0(a1, v132);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v43, 1LL, v15) == 1)
  {
    sub_100015794(v43, (uint64_t *)&unk_1009AF740);
    os_log_type_t v44 = v122;
    uint64_t v45 = v133(v122, a1, v20);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = v20;
      uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v50 = (void **)swift_slowAlloc(32LL, -1LL);
      __int128 aBlock = v50;
      *(_DWORD *)uint64_t v49 = 136315138;
      uint64_t v51 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v48, v51);
      uint64_t v149 = (void *)sub_1003F11D4(v52, v53, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &aBlock, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease();
      v40(v44, v48);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Safe location with identifier: %s not found", v49, 0xCu);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
      v40(v44, v20);
    }

    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    NSString v104 = v137;
    uint64_t v103 = v138;
    id v105 = v139;
    (*(void (**)(char *, void, dispatch_group_s *))(v138 + 104))( v137,  enum case for DispatchQoS.QoSClass.default(_:),  v139);
    double v106 = (void *)static OS_dispatch_queue.global(qos:)(v104);
    (*(void (**)(char *, dispatch_group_s *))(v103 + 8))(v104, v105);
    uint64_t v107 = swift_allocObject(&unk_10095D740, 32LL, 7LL);
    uint64_t v108 = v141;
    *(void *)(v107 + swift_weakDestroy(v0 + 16) = v140;
    *(void *)(v107 + 24) = v108;
    uint64_t v154 = (void (*)())sub_10049F74C;
    uint64_t v155 = v107;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v151 = 1107296256LL;
    uint64_t v152 = sub_1001C31E8;
    uint64_t v153 = &unk_10095D758;
    double v109 = _Block_copy(&aBlock);
    uint64_t v110 = swift_retain();
    double v111 = v142;
    static DispatchQoS.unspecified.getter(v110);
    uint64_t v149 = _swiftEmptyArrayStorage;
    uint64_t v112 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v113 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v114 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    double v115 = v144;
    uint64_t v116 = v113;
    uint64_t v117 = v147;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v149, v116, v114, v147, v112);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v111, v115, v109);
    _Block_release(v109);

    (*(void (**)(char *, uint64_t))(v145 + 8))(v115, v117);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v111, v146);
  }

  else
  {
    uint64_t v54 = v15;
    uint64_t v122 = (char *)v20;
    uint64_t v55 = a2;
    sub_10002218C(v43, v148, type metadata accessor for SafeLocation);
    uint64_t v56 = dispatch_group_create();
    dispatch_group_enter(v56);
    uint64_t v57 = swift_allocObject(&unk_10095D790, 25LL, 7LL);
    *(void *)(v57 + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(v57 + 24) = -1;
    uint64_t v58 = swift_allocObject(&unk_10095D7B8, 32LL, 7LL);
    *(void *)(v58 + swift_weakDestroy(v0 + 16) = v57;
    *(void *)(v58 + 24) = v56;
    uint64_t v132 = v57;
    swift_retain();
    uint64_t v59 = v56;
    uint64_t v60 = static os_log_type_t.default.getter(v59);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v61 = qword_100A2B018;
    uint64_t v62 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v63 = swift_allocObject(v62, 72LL, 7LL);
    *(_OWORD *)(v63 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v64 = v148;
    uint64_t v65 = v131;
    sub_10001DC4C(v148, v131, type metadata accessor for SafeLocation);
    uint64_t v66 = v64;
    uint64_t v67 = String.init<A>(describing:)(v65, v54);
    uint64_t v69 = v68;
    *(void *)(v63 + 56) = &type metadata for String;
    *(void *)(v63 + 64) = sub_1000226F4();
    *(void *)(v63 + 32) = v67;
    *(void *)(v63 + 40) = v69;
    os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v61, "Attempting to remove: %@", 24LL, 2LL, v63);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_10055ADB0(v66, v55, (void (*)(uint64_t))sub_10049D288, v58);
    uint64_t v70 = swift_release_n(v58, 2LL);
    uint64_t v71 = v123;
    static DispatchTime.now()(v70);
    uint64_t v72 = v125;
    + infix(_:_:)(v71, 120.0);
    uint64_t v73 = *(void (**)(char *, uint64_t))(v126 + 8);
    uint64_t v74 = v127;
    v73(v71, v127);
    LOBYTE(v126) = OS_dispatch_group.wait(timeout:)(v72) & 1;
    LODWORD(v126) = v126;
    v73(v72, v74);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v76 = v137;
    uint64_t v75 = v138;
    uint64_t v77 = v139;
    (*(void (**)(char *, void, dispatch_group_s *))(v138 + 104))( v137,  enum case for DispatchQoS.QoSClass.default(_:),  v139);
    uint64_t v127 = static OS_dispatch_queue.global(qos:)(v76);
    (*(void (**)(char *, dispatch_group_s *))(v75 + 8))(v76, v77);
    unint64_t v139 = v59;
    uint64_t v78 = v128;
    unint64_t v79 = v122;
    v133(v128, v135, (uint64_t)v122);
    uint64_t v80 = v66;
    uint64_t v81 = v65;
    sub_10001DC4C(v80, v65, type metadata accessor for SafeLocation);
    uint64_t v82 = v129;
    uint64_t v83 = *(unsigned __int8 *)(v129 + 80);
    uint64_t v84 = (v83 + 17) & ~v83;
    unint64_t v85 = (v124 + v84 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v86 = (v85 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v87 = *(unsigned __int8 *)(v134 + 80);
    uint64_t v88 = (v87 + v86 + 8) & ~v87;
    unint64_t v89 = (v130 + v88 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v90 = swift_allocObject(&unk_10095D7E0, v89 + 8, v83 | v87 | 7);
    *(_BYTE *)(v90 + swift_weakDestroy(v0 + 16) = v126;
    (*(void (**)(uint64_t, char *, char *))(v82 + 32))(v90 + v84, v78, v79);
    uint64_t v91 = (void *)(v90 + v85);
    uint64_t v92 = v141;
    *uint64_t v91 = v140;
    v91[1] = v92;
    *(void *)(v90 + v86) = v132;
    sub_10002218C(v81, v90 + v88, type metadata accessor for SafeLocation);
    *(void *)(v90 + v89) = v136;
    uint64_t v154 = sub_10049D3B4;
    uint64_t v155 = v90;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v151 = 1107296256LL;
    uint64_t v152 = sub_1001C31E8;
    uint64_t v153 = &unk_10095D7F8;
    uint64_t v93 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    uint64_t v94 = swift_retain();
    Class v95 = v142;
    static DispatchQoS.unspecified.getter(v94);
    uint64_t v149 = _swiftEmptyArrayStorage;
    uint64_t v96 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v97 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v98 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    double v99 = v144;
    uint64_t v100 = v97;
    uint64_t v101 = v147;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v149, v100, v98, v147, v96);
    uint64_t v102 = (void *)v127;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v95, v99, v93);
    _Block_release(v93);

    (*(void (**)(char *, uint64_t))(v145 + 8))(v99, v101);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v95, v146);
    sub_100018C68(v148, type metadata accessor for SafeLocation);
    swift_release();
  }

  return swift_release();
}

void sub_10048B290(char a1, uint64_t a2, dispatch_group_s *a3)
{
  if ((a1 & 1) != 0)
  {
    uint64_t v5 = 0LL;
    char v6 = 0;
  }

  else
  {
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v8 = v7;
    uint64_t v14 = 16LL;
    unint64_t v9 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v10 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(v13, &v14, v9, v8, v10);
    uint64_t v5 = v13[0];
    char v6 = 1;
  }

  swift_beginAccess(a2 + 16, v13, 1LL, 0LL);
  uint64_t v11 = *(void **)(a2 + 16);
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v5;
  unsigned __int8 v12 = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a2 + 24) = v6;
  sub_10049D470(v11, v12);
  dispatch_group_leave(a3);
}

void sub_10048B36C( char a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v72 = a7;
  uint64_t v70 = a6;
  uint64_t v11 = a1 & 1;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = &v65[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = &v65[-v18];
  __chkstk_darwin(v17);
  uint64_t v21 = &v65[-v20];
  if ((static DispatchTimeoutResult.== infix(_:_:)(v11, 1LL) & 1) != 0)
  {
    uint64_t v72 = a4;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000A720(v22, (uint64_t)qword_100A2AAA0);
    uint64_t v23 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v16, a2, v12);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      v76[0] = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v71 = a3;
      uint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v12, v28);
      uint64_t v73 = sub_1003F11D4(v29, v30, v76);
      a3 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Removing safe location with identifier: %s failed due to timeout.",  v26,  0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v12);
    }

    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v48 = v47;
    uint64_t v73 = 19LL;
    unint64_t v49 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v50 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(v76, &v73, v49, v48, v50);
    uint64_t v51 = (void *)v76[0];
LABEL_23:
    a3(v51, 1LL);

    return;
  }

  swift_beginAccess(a5 + 16, v76, 0LL, 0LL);
  int v31 = *(unsigned __int8 *)(a5 + 24);
  if (v31 == 255)
  {
    uint64_t v72 = a4;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v52 = type metadata accessor for Logger(0LL);
    sub_10000A720(v52, (uint64_t)qword_100A2AAA0);
    uint64_t v53 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v21, a2, v12);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v57 = swift_slowAlloc(32LL, -1LL);
      uint64_t v73 = v57;
      *(_DWORD *)uint64_t v56 = 136315138;
      uint64_t v71 = a3;
      uint64_t v58 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter(v12, v58);
      uint64_t v75 = sub_1003F11D4(v59, v60, &v73);
      a3 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v21, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "Removing safe location with identifier: %s failed due to unknown error.",  v56,  0xCu);
      swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v21, v12);
    }

    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v62 = v61;
    uint64_t v75 = 0LL;
    unint64_t v63 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v64 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(&v73, &v75, v63, v62, v64);
    uint64_t v51 = (void *)v73;
    goto LABEL_23;
  }

  uint64_t v71 = a3;
  uint64_t v32 = *(void **)(a5 + 16);
  sub_10049D44C(v32, v31 & 1);
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v33 = type metadata accessor for Logger(0LL);
  sub_10000A720(v33, (uint64_t)qword_100A2AAA0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v19, a2, v12);
  sub_10049D458(v32, v31);
  id v34 = sub_10049D44C(v32, v31 & 1);
  BOOL v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.error.getter(v35);
  int v37 = v36;
  if (os_log_type_enabled(v35, v36))
  {
    BOOL v66 = (v31 & 1) != 0;
    uint64_t v38 = swift_slowAlloc(22LL, -1LL);
    int v68 = v37;
    uint64_t v39 = v38;
    uint64_t v69 = swift_slowAlloc(64LL, -1LL);
    uint64_t v75 = v69;
    *(_DWORD *)uint64_t v39 = 136315394;
    uint64_t v40 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    os_log_t v67 = v35;
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v12, v40);
    uint64_t v73 = sub_1003F11D4(v41, v42, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v19, v12);
    *(_WORD *)(v39 + 12) = 2080;
    uint64_t v73 = (uint64_t)v32;
    v74[0] = v66;
    sub_10049D44C(v32, v31 & 1);
    uint64_t v43 = sub_100004AEC(&qword_1009AF7B0);
    uint64_t v44 = String.init<A>(describing:)(&v73, v43);
    uint64_t v73 = sub_1003F11D4(v44, v45, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v39 + 14, v39 + 22);
    swift_bridgeObjectRelease();
    sub_10049D470(v32, v31);
    sub_10049D470(v32, v31);
    BOOL v35 = v67;
    _os_log_impl( (void *)&_mh_execute_header,  v67,  (os_log_type_t)v68,  "Removing safe location with identifier: %s completed with result: %s",  (uint8_t *)v39,  0x16u);
    uint64_t v46 = v69;
    swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v19, v12);
    sub_10049D470(v32, v31);
    sub_10049D470(v32, v31);
  }

  v71(v32, v31 & 1);
  if (*(void *)(*(void *)(v70 + *(int *)(type metadata accessor for SafeLocation(0LL) + 52)) + 16LL))
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
    type metadata accessor for Transaction(0LL);
    static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
    sub_1004E696C(0x10u);
  }

  sub_1004E6B70();
  sub_10049D470(v32, v31);
}

void sub_10048BB98(uint64_t a1, void (*a2)(void, void), uint64_t a3, uint64_t a4)
{
  uint64_t v129 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v125 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v121 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v128 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v126 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v119 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v118 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = sub_100004AEC((uint64_t *)&unk_1009AF730);
  uint64_t v11 = __chkstk_darwin(v114);
  uint64_t v113 = (uint64_t)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v110 - v13;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  __chkstk_darwin(v15);
  uint64_t v115 = (uint64_t)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v131 = *(void *)(v17 - 8);
  uint64_t v132 = v17;
  __chkstk_darwin(v17);
  uint64_t v130 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = (int *)type metadata accessor for SafeLocation(0LL);
  uint64_t v116 = *((void *)v19 - 1);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v117 = v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v110 - v23;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  sub_10000A720(v25, (uint64_t)qword_100A2AAA0);
  uint64_t v133 = a1;
  uint64_t v26 = sub_10001DC4C(a1, (uint64_t)v24, type metadata accessor for SafeLocation);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter(v27);
  BOOL v29 = os_log_type_enabled(v27, v28);
  unint64_t v123 = v14;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc(12LL, -1LL);
    uint64_t v112 = a4;
    int v31 = (uint8_t *)v30;
    uint64_t v32 = (void **)swift_slowAlloc(32LL, -1LL);
    uint64_t v124 = a3;
    uint64_t v33 = v32;
    __int128 aBlock = v32;
    uint64_t v122 = a2;
    *(_DWORD *)int v31 = 136315138;
    double v111 = v31 + 4;
    id v34 = v22;
    uint64_t v35 = type metadata accessor for UUID(0LL);
    uint64_t v36 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v37 = v35;
    uint64_t v22 = v34;
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v37, v36);
    uint64_t v134 = sub_1003F11D4(v38, v39, (uint64_t *)&aBlock);
    a2 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &aBlock, v111, v31 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v24, type metadata accessor for SafeLocation);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Updating safe location with identifier: %s", v31, 0xCu);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v40 = v33;
    a3 = v124;
    swift_slowDealloc(v40, -1LL, -1LL);
    uint64_t v41 = v31;
    a4 = v112;
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v24, type metadata accessor for SafeLocation);
  }

  uint64_t v42 = v133;
  double v43 = *(double *)(v133 + v19[8]);
  double v44 = *(double *)(v133 + v19[9]);
  double v45 = *(double *)(v133 + v19[10]);
  uint64_t v46 = v130;
  Date.init()(v47);
  id v48 = objc_allocWithZone(&OBJC_CLASS___CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v50 = objc_msgSend( v48,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:",  isa,  v43,  v44,  0.0,  v45,  v45,  -1.0,  -1.0,  -1.0,  0xBFF0000000000000);

  (*(void (**)(char *, uint64_t))(v131 + 8))(v46, v132);
  [v50 setReferenceFrame:*(unsigned __int8 *)(v42 + v19[11])];
  LOBYTE(v46) = sub_100658D94();

  if ((v46 & 1) != 0)
  {
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v52 = v51;
    uint64_t v134 = 21LL;
    unint64_t v53 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v54 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v134, v53, v52, v54);
    os_log_type_t v55 = aBlock;
    a2(aBlock, 1LL);
  }

  else
  {
    uint64_t v56 = v115;
    sub_1005766A0(v42 + v19[5], v115);
    uint64_t v57 = v116;
    int v58 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v116 + 48))(v56, 1LL, v19);
    sub_100015794(v56, (uint64_t *)&unk_1009AF740);
    if (v58 == 1)
    {
      sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v59 = v119;
      unint64_t v60 = v118;
      uint64_t v61 = v120;
      (*(void (**)(char *, void, uint64_t))(v119 + 104))( v118,  enum case for DispatchQoS.QoSClass.default(_:),  v120);
      uint64_t v62 = (void *)static OS_dispatch_queue.global(qos:)(v60);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
      sub_10001DC4C(v42, (uint64_t)v22, type metadata accessor for SafeLocation);
      uint64_t v63 = *(unsigned __int8 *)(v57 + 80);
      uint64_t v64 = (v63 + 16) & ~v63;
      unint64_t v65 = (v117 + v64 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v66 = swift_allocObject(&unk_10095D8F8, v65 + 16, v63 | 7);
      sub_10002218C((uint64_t)v22, v66 + v64, type metadata accessor for SafeLocation);
      os_log_t v67 = (void *)(v66 + v65);
      *os_log_t v67 = a2;
      v67[1] = a3;
      unint64_t v139 = sub_10049D50C;
      uint64_t v140 = v66;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v136 = 1107296256LL;
      uint64_t v137 = sub_1001C31E8;
      uint64_t v138 = &unk_10095D910;
      int v68 = _Block_copy(&aBlock);
      uint64_t v69 = swift_retain();
      uint64_t v70 = v126;
      static DispatchQoS.unspecified.getter(v69);
      uint64_t v134 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v71 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v72 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v73 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v74 = v125;
      uint64_t v75 = v72;
      uint64_t v76 = v129;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v134, v75, v73, v129, v71);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v70, v74, v68);
      _Block_release(v68);

      (*(void (**)(char *, uint64_t))(v127 + 8))(v74, v76);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v70, v121);
    }

    else
    {
      uint64_t v122 = a2;
      uint64_t v124 = a3;
      sub_10001DC4C(v42, (uint64_t)v22, type metadata accessor for SafeLocation);
      uint64_t v77 = *(unsigned __int8 *)(v57 + 80);
      uint64_t v78 = a4;
      uint64_t v79 = (v77 + 24) & ~v77;
      uint64_t v80 = v117;
      uint64_t v81 = v42;
      uint64_t v82 = v77 | 7;
      uint64_t v83 = swift_allocObject(&unk_10095D948, v79 + v117, v77 | 7);
      *(void *)(v83 + swift_weakDestroy(v0 + 16) = v78;
      sub_10002218C((uint64_t)v22, v83 + v79, type metadata accessor for SafeLocation);
      sub_10001DC4C(v81, (uint64_t)v22, type metadata accessor for SafeLocation);
      uint64_t v84 = (v77 + 16) & ~v77;
      uint64_t v85 = v84 + v80;
      uint64_t v86 = swift_allocObject(&unk_10095D970, v84 + v80, v77 | 7);
      sub_10002218C((uint64_t)v22, v86 + v84, type metadata accessor for SafeLocation);
      swift_retain();
      uint64_t v87 = (uint64_t)v123;
      sub_10048606C( (uint64_t)sub_10049D638,  v83,  (uint64_t)sub_10049D68C,  v86,  (uint64_t *)&unk_1009AF730,  (uint64_t)sub_100494E1C,  (uint64_t)v123);
      swift_release();
      swift_release();
      uint64_t v88 = v113;
      sub_10001581C(v87, v113, (uint64_t *)&unk_1009AF730);
      LODWORD(v86) = swift_getEnumCaseMultiPayload(v88, v114);
      sub_100015794(v88, (uint64_t *)&unk_1009AF730);
      sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v89 = v119;
      uint64_t v90 = v118;
      uint64_t v91 = v120;
      (*(void (**)(char *, void, uint64_t))(v119 + 104))( v118,  enum case for DispatchQoS.QoSClass.default(_:),  v120);
      uint64_t v132 = static OS_dispatch_queue.global(qos:)(v90);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v91);
      sub_10001DC4C(v133, (uint64_t)v22, type metadata accessor for SafeLocation);
      unint64_t v92 = (v85 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      if ((_DWORD)v86 == 1)
      {
        uint64_t v93 = swift_allocObject(&unk_10095D998, v92 + 16, v82);
        sub_10002218C((uint64_t)v22, v93 + v84, type metadata accessor for SafeLocation);
        uint64_t v94 = (void *)(v93 + v92);
        uint64_t v95 = v124;
        *uint64_t v94 = v122;
        v94[1] = v95;
        unint64_t v139 = sub_10049D794;
        uint64_t v140 = v93;
        __int128 aBlock = _NSConcreteStackBlock;
        uint64_t v136 = 1107296256LL;
        uint64_t v137 = sub_1001C31E8;
        uint64_t v138 = &unk_10095D9B0;
        uint64_t v96 = _Block_copy(&aBlock);
      }

      else
      {
        unint64_t v97 = (v92 + 23) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v98 = swift_allocObject(&unk_10095D9E8, v97 + 8, v82);
        sub_10002218C((uint64_t)v22, v98 + v84, type metadata accessor for SafeLocation);
        double v99 = (void *)(v98 + v92);
        uint64_t v100 = v124;
        *double v99 = v122;
        v99[1] = v100;
        *(void *)(v98 + v97) = v78;
        unint64_t v139 = sub_10049D880;
        uint64_t v140 = v98;
        __int128 aBlock = _NSConcreteStackBlock;
        uint64_t v136 = 1107296256LL;
        uint64_t v137 = sub_1001C31E8;
        uint64_t v138 = &unk_10095DA00;
        uint64_t v96 = _Block_copy(&aBlock);
        swift_retain();
      }

      uint64_t v101 = swift_retain();
      uint64_t v102 = v126;
      static DispatchQoS.unspecified.getter(v101);
      uint64_t v134 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v103 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v104 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v105 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      double v106 = v125;
      uint64_t v107 = v104;
      uint64_t v108 = v129;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v134, v107, v105, v129, v103);
      double v109 = (void *)v132;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v102, v106, v96);
      _Block_release(v96);

      (*(void (**)(char *, uint64_t))(v127 + 8))(v106, v108);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v102, v121);
      sub_100015794((uint64_t)v123, (uint64_t *)&unk_1009AF730);
    }

    swift_release();
  }

uint64_t sub_10048C784(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for SafeLocation(0LL);
  uint64_t v5 = v4[7];
  uint64_t v7 = *(void *)(a2 + v5);
  uint64_t v6 = *(void *)(a2 + v5 + 8);
  uint64_t v8 = (void *)(a1 + v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *uint64_t v8 = v7;
  v8[1] = v6;
  *(void *)(a1 + v4[8]) = *(void *)(a2 + v4[8]);
  *(void *)(a1 + v4[9]) = *(void *)(a2 + v4[9]);
  *(void *)(a1 + v4[10]) = *(void *)(a2 + v4[10]);
  *(_BYTE *)(a1 + v4[11]) = *(_BYTE *)(a2 + v4[11]);
  uint64_t v9 = v4[12];
  int v10 = *(unsigned __int8 *)(a2 + v9);
  *(_BYTE *)(a1 + v9) = v10;
  *(_BYTE *)(a1 + v4[6]) = *(_BYTE *)(a2 + v4[6]);
  uint64_t v11 = v4[13];
  uint64_t v12 = *(void *)(a2 + v11);
  swift_bridgeObjectRetain(v12);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + v11) = v12;
  if (v10 != 1)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + v11) = _swiftEmptyArrayStorage;
  }

  return result;
}

void sub_10048C874( uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for SafeLocation(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_10000A720(v13, (uint64_t)qword_100A2AAA0);
  uint64_t v14 = sub_10001DC4C(a1, (uint64_t)v12, type metadata accessor for SafeLocation);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = a5;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = (void *)v19;
    int v31 = a4;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v33 = a3;
    uint64_t v20 = type metadata accessor for UUID(0LL);
    uint64_t v21 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
    uint64_t v34 = sub_1003F11D4(v22, v23, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v12, type metadata accessor for SafeLocation);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v31, v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    uint64_t v24 = v18;
    a5 = v32;
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v12, type metadata accessor for SafeLocation);
  }

  type metadata accessor for SPSeparationMonitoringError(0LL);
  uint64_t v26 = v25;
  uint64_t v34 = a5;
  unint64_t v27 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  _BridgedStoredNSError.init(_:userInfo:)(&v35, &v34, v27, v26, v28);
  BOOL v29 = v35;
  a2(v35, 1LL);
}

uint64_t sub_10048CB28(uint64_t a1, void (*a2)(void, void), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for SafeLocation(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_10000A720(v10, (uint64_t)qword_100A2AAA0);
  uint64_t v11 = sub_10001DC4C(a1, (uint64_t)v9, type metadata accessor for SafeLocation);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = a2;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    v26[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    v23[1] = a4;
    uint64_t v17 = type metadata accessor for UUID(0LL);
    uint64_t v18 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    uint64_t v25 = sub_1003F11D4(v19, v20, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v9, type metadata accessor for SafeLocation);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Successfuly updated safe location with identifier: %s",  v15,  0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    uint64_t v21 = v15;
    a2 = v24;
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v9, type metadata accessor for SafeLocation);
  }

  a2(0LL, 0LL);
  sub_1004E696C(0x10u);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  type metadata accessor for Transaction(0LL);
  static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
  return sub_1004E6B70();
}

uint64_t sub_10048CDD8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v217 = a5;
  uint64_t v218 = a4;
  uint64_t v231 = a3;
  uint64_t v210 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v214 = *(void *)(v210 - 8);
  __chkstk_darwin(v210);
  uint64_t v212 = (char *)&v199 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v216 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v215 = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  uint64_t v213 = (char *)&v199 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v208 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v207 = (char *)&v199 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v228 = *(void *)(v11 - 8);
  uint64_t v229 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v227 = (char *)&v199 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v226 = (char *)&v199 - v14;
  uint64_t v205 = sub_100004AEC((uint64_t *)&unk_1009AF730);
  uint64_t v15 = __chkstk_darwin(v205);
  uint64_t v204 = (uint64_t)&v199 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v199 - v17;
  uint64_t v19 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v19);
  uint64_t v230 = (char *)&v199 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  __chkstk_darwin(v21);
  uint64_t v225 = (uint64_t)&v199 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for UUID(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v224 = (char *)&v199 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v202 = (char *)&v199 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v201 = (char *)&v199 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v200 = (char *)&v199 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v199 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v38 = (char *)&v199 - v37;
  uint64_t v203 = v39;
  __chkstk_darwin(v36);
  uint64_t v41 = (char *)&v199 - v40;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v42 = type metadata accessor for Logger(0LL);
  uint64_t v43 = sub_10000A720(v42, (uint64_t)qword_100A2AAA0);
  uint64_t v232 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v233 = a2;
  v232(v41, a2, v23);
  swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v211 = v43;
  double v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.default.getter(v45);
  unsigned int v47 = v46;
  BOOL v48 = os_log_type_enabled(v45, v46);
  uint64_t v234 = a1;
  uint64_t v209 = v9;
  uint64_t v206 = v18;
  if (v48)
  {
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v223 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 aBlock = v223;
    *(_DWORD *)uint64_t v49 = 136315394;
    unsigned int v222 = v47;
    swift_bridgeObjectRetain(a1);
    uint64_t v51 = Array.description.getter(v50, v23);
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    *(void *)&__int128 v236 = sub_1003F11D4(v51, v53, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease_n(v234, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 12) = 2080;
    uint64_t v54 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v23, v54);
    *(void *)&__int128 v236 = sub_1003F11D4(v55, v56, (uint64_t *)&aBlock);
    a1 = v234;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease();
    uint64_t v235 = *(void (**)(char *, uint64_t))(v24 + 8);
    v235(v41, v23);
    _os_log_impl( (void *)&_mh_execute_header,  v45,  (os_log_type_t)v222,  "Assigning beacons: %s to safe location with identifier: %s",  (uint8_t *)v49,  0x16u);
    uint64_t v57 = v223;
    swift_arrayDestroy(v223, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
    uint64_t v235 = *(void (**)(char *, uint64_t))(v24 + 8);
    v235(v41, v23);
  }

  uint64_t v58 = v24;
  uint64_t v59 = v225;
  uint64_t v60 = v233;
  sub_1005766A0(v233, v225);
  uint64_t v61 = type metadata accessor for SafeLocation(0LL);
  int v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 48LL))(v59, 1LL, v61);
  sub_100015794(v59, (uint64_t *)&unk_1009AF740);
  uint64_t v63 = v218;
  if (v62 == 1)
  {
    uint64_t v64 = v224;
    v232(v224, v60, v23);
    swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = swift_slowAlloc(22LL, -1LL);
      uint64_t v69 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 aBlock = v69;
      *(_DWORD *)uint64_t v68 = 136315394;
      swift_bridgeObjectRetain(a1);
      uint64_t v71 = Array.description.getter(v70, v23);
      unint64_t v73 = v72;
      swift_bridgeObjectRelease();
      *(void *)&__int128 v236 = sub_1003F11D4(v71, v73, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v68 + 4, v68 + 12);
      swift_bridgeObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v68 + 12) = 2080;
      uint64_t v74 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v23, v74);
      *(void *)&__int128 v236 = sub_1003F11D4(v75, v76, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v68 + 14, v68 + 22);
      swift_bridgeObjectRelease();
      v235(v64, v23);
      _os_log_impl( (void *)&_mh_execute_header,  v66,  v67,  "Unable to assign beacons %s to non-existant safe location with UUID: %s",  (uint8_t *)v68,  0x16u);
      swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1LL, -1LL);
      uint64_t v77 = v68;
      uint64_t v63 = v218;
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a1, 2LL);
      v235(v64, v23);
    }

    uint64_t v105 = v216;
    uint64_t v106 = v208;
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v107 = v207;
    uint64_t v108 = v209;
    (*(void (**)(char *, void, uint64_t))(v106 + 104))( v207,  enum case for DispatchQoS.QoSClass.default(_:),  v209);
    double v109 = (void *)static OS_dispatch_queue.global(qos:)(v107);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v108);
    uint64_t v110 = swift_allocObject(&unk_10095DBC8, 32LL, 7LL);
    uint64_t v111 = v217;
    *(void *)(v110 + swift_weakDestroy(v0 + 16) = v63;
    *(void *)(v110 + 24) = v111;
    __int128 v241 = sub_10049DB74;
    uint64_t v242 = v110;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    *(void *)&__int128 v240 = sub_1001C31E8;
    *((void *)&v240 + 1) = &unk_10095DBE0;
    uint64_t v112 = _Block_copy(&aBlock);
    uint64_t v113 = swift_retain();
    uint64_t v114 = v213;
    static DispatchQoS.unspecified.getter(v113);
    *(void *)&__int128 v236 = _swiftEmptyArrayStorage;
    uint64_t v115 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v116 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v117 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v118 = v212;
    uint64_t v119 = v116;
    uint64_t v120 = v210;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v236, v119, v117, v210, v115);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v114, v118, v112);
    _Block_release(v112);

    (*(void (**)(char *, uint64_t))(v214 + 8))(v118, v120);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v114, v105);
    return swift_release();
  }

  uint64_t v223 = *(void *)(a1 + 16);
  if (v223)
  {
    uint64_t v225 = a1 + ((*(unsigned __int8 *)(v58 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
    uint64_t v224 = *(char **)(v58 + 72);
    unsigned int v222 = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
    swift_bridgeObjectRetain(a1);
    uint64_t v78 = 0LL;
    __int128 v221 = xmmword_1007E67D0;
    uint64_t v79 = v232;
    uint64_t v80 = v233;
    uint64_t v81 = v230;
    uint64_t v220 = v23;
    uint64_t v219 = v58;
    while (1)
    {
      v79(v81, v225 + (void)v224 * v78, v23);
      uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
      v82(v81, 0LL, 1LL, v23);
      uint64_t v83 = (*(uint64_t (**)(char *, char *, uint64_t))(v58 + 32))(v35, v81, v23);
      uint64_t v84 = static os_log_type_t.info.getter(v83);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v85 = qword_100A2B018;
      uint64_t v86 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v87 = swift_allocObject(v86, 72LL, 7LL);
      *(_OWORD *)(v87 + swift_weakDestroy(v0 + 16) = v221;
      uint64_t v88 = UUID.uuidString.getter(v87);
      uint64_t v90 = v89;
      *(void *)(v87 + 56) = &type metadata for String;
      *(void *)(v87 + 64) = sub_1000226F4();
      *(void *)(v87 + 32) = v88;
      *(void *)(v87 + 40) = v90;
      os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v85, "beaconRecord(for uuid: %@)", 26LL, 2LL, v87);
      uint64_t v91 = swift_bridgeObjectRelease();
      unint64_t v92 = v226;
      static SystemInfo.lockState.getter(v91);
      uint64_t v94 = v227;
      uint64_t v93 = v228;
      uint64_t v95 = v229;
      (*(void (**)(char *, void, uint64_t))(v228 + 104))(v227, v222, v229);
      uint64_t v96 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
      LOBYTE(v90) = dispatch thunk of static Equatable.== infix(_:_:)(v92, v94, v95, v96);
      unint64_t v97 = *(void (**)(char *, uint64_t))(v93 + 8);
      v97(v94, v95);
      uint64_t v98 = ((uint64_t (*)(char *, uint64_t))v97)(v92, v95);
      if ((v90 & 1) != 0)
      {
        uint64_t v168 = static os_log_type_t.default.getter(v98);
        os_log(_:dso:log:_:_:)( v168,  &_mh_execute_header,  qword_100A2B018,  "beaconRecord call failed because in device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
        __int128 v241 = 0LL;
        __int128 aBlock = 0u;
        __int128 v240 = 0u;
        uint64_t v79 = v232;
        uint64_t v23 = v220;
LABEL_35:
        sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
        swift_bridgeObjectRelease();
        uint64_t v169 = v200;
        v79(v200, (uint64_t)v35, v23);
        uint64_t v170 = v201;
        uint64_t v171 = ((uint64_t (*)(char *, uint64_t, uint64_t))v79)(v201, v233, v23);
        uint64_t v172 = (os_log_s *)Logger.logObject.getter(v171);
        os_log_type_t v173 = static os_log_type_t.error.getter(v172);
        int v174 = v173;
        if (os_log_type_enabled(v172, v173))
        {
          uint64_t v175 = swift_slowAlloc(22LL, -1LL);
          uint64_t v234 = swift_slowAlloc(64LL, -1LL);
          *(void *)&__int128 aBlock = v234;
          *(_DWORD *)uint64_t v175 = 136315394;
          uint64_t v176 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          LODWORD(v233) = v174;
          uint64_t v177 = dispatch thunk of CustomStringConvertible.description.getter(v23, v176);
          *(void *)&__int128 v236 = sub_1003F11D4(v177, v178, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v175 + 4, v175 + 12);
          swift_bridgeObjectRelease();
          uint64_t v179 = v235;
          v235(v169, v23);
          *(_WORD *)(v175 + 12) = 2080;
          uint64_t v180 = dispatch thunk of CustomStringConvertible.description.getter(v23, v176);
          *(void *)&__int128 v236 = sub_1003F11D4(v180, v181, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v175 + 14, v175 + 22);
          swift_bridgeObjectRelease();
          uint64_t v235 = v179;
          v179(v170, v23);
          _os_log_impl( (void *)&_mh_execute_header,  v172,  (os_log_type_t)v233,  "Unable to assign non-existant beacon %s to safe location with UUID: %s",  (uint8_t *)v175,  0x16u);
          uint64_t v182 = v234;
          swift_arrayDestroy(v234, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v182, -1LL, -1LL);
          swift_slowDealloc(v175, -1LL, -1LL);
        }

        else
        {
          uint64_t v183 = v235;
          v235(v169, v23);
          uint64_t v235 = v183;
          v183(v170, v23);
        }

        uint64_t v184 = v217;
        uint64_t v185 = v210;
        unint64_t v186 = v218;
        uint64_t v187 = v209;
        uint64_t v188 = v208;
        uint64_t v189 = v207;
        sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
        (*(void (**)(char *, void, uint64_t))(v188 + 104))( v189,  enum case for DispatchQoS.QoSClass.default(_:),  v187);
        uint64_t v190 = (void *)static OS_dispatch_queue.global(qos:)(v189);
        (*(void (**)(char *, uint64_t))(v188 + 8))(v189, v187);
        uint64_t v191 = swift_allocObject(&unk_10095DCB8, 32LL, 7LL);
        *(void *)(v191 + swift_weakDestroy(v0 + 16) = v186;
        *(void *)(v191 + 24) = v184;
        __int128 v241 = sub_10049DD24;
        uint64_t v242 = v191;
        *(void *)&__int128 aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&__int128 v240 = sub_1001C31E8;
        *((void *)&v240 + 1) = &unk_10095DCD0;
        uint64_t v192 = _Block_copy(&aBlock);
        uint64_t v193 = swift_retain();
        uint64_t v194 = v213;
        static DispatchQoS.unspecified.getter(v193);
        *(void *)&__int128 v236 = _swiftEmptyArrayStorage;
        uint64_t v195 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v196 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v197 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        unint64_t v198 = v212;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v236, v196, v197, v185, v195);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v194, v198, v192);
        _Block_release(v192);

        (*(void (**)(char *, uint64_t))(v214 + 8))(v198, v185);
        (*(void (**)(char *, uint64_t))(v215 + 8))(v194, v216);
        v235(v35, v23);
        return swift_release();
      }

      double v99 = sub_100508644();
      uint64_t v100 = v99[2];
      uint64_t v23 = v220;
      if (v100)
      {
        uint64_t v101 = (uint64_t)(v99 + 4);
        while (1)
        {
          sub_100013044(v101, (uint64_t)&v236);
          uint64_t v102 = v237;
          uint64_t v103 = v238;
          sub_100012ED8(&v236, v237);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v103 + 8) + 8LL) + 32LL))(v102);
          LOBYTE(v102) = static UUID.== infix(_:_:)(v38, v35);
          uint64_t v104 = v235;
          v235(v38, v23);
          if ((v102 & 1) != 0) {
            break;
          }
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v236);
          v101 += 40LL;
          if (!--v100) {
            goto LABEL_19;
          }
        }

        sub_100012EC0(&v236, (uint64_t)&aBlock);
        swift_bridgeObjectRelease();
      }

      else
      {
LABEL_19:
        __int128 v241 = 0LL;
        __int128 aBlock = 0u;
        __int128 v240 = 0u;
        swift_bridgeObjectRelease();
        uint64_t v104 = v235;
      }

      a1 = v234;
      uint64_t v79 = v232;
      uint64_t v58 = v219;
      uint64_t v81 = v230;
      if (!*((void *)&v240 + 1)) {
        goto LABEL_35;
      }
      ++v78;
      sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
      v104(v35, v23);
      uint64_t v80 = v233;
      if (v78 == v223) {
        goto LABEL_27;
      }
    }
  }

  else
  {
    uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v79 = v232;
    uint64_t v80 = v233;
    uint64_t v81 = v230;
LABEL_27:
    v82(v81, 1LL, 1LL, v23);
  }

  swift_bridgeObjectRelease();
  v79(v38, v80, v23);
  uint64_t v121 = *(unsigned __int8 *)(v58 + 80);
  uint64_t v122 = (v121 + 24) & ~v121;
  uint64_t v229 = v122 + v203;
  uint64_t v233 = v121 | 7;
  uint64_t v123 = swift_allocObject(&unk_10095DC18, v122 + v203, v121 | 7);
  uint64_t v124 = v231;
  *(void *)(v123 + swift_weakDestroy(v0 + 16) = v231;
  uint64_t v234 = v122;
  uint64_t v230 = *(char **)(v58 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v230)(v123 + v122, v38, v23);
  uint64_t v125 = swift_allocObject(&unk_10095DC40, 24LL, 7LL);
  *(void *)(v125 + swift_weakDestroy(v0 + 16) = a1;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v126 = (uint64_t)v206;
  uint64_t v127 = v80;
  sub_10048606C( (uint64_t)sub_100494E00,  v123,  (uint64_t)sub_10049DC00,  v125,  (uint64_t *)&unk_1009AF730,  (uint64_t)sub_100494E1C,  (uint64_t)v206);
  swift_release();
  swift_release();
  uint64_t v128 = v204;
  sub_10001581C(v126, v204, (uint64_t *)&unk_1009AF730);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v128, v205);
  sub_100015794(v128, (uint64_t *)&unk_1009AF730);
  if (EnumCaseMultiPayload != 1)
  {
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v143 = v208;
    uint64_t v144 = v207;
    uint64_t v145 = v209;
    (*(void (**)(char *, void, uint64_t))(v208 + 104))( v207,  enum case for DispatchQoS.QoSClass.default(_:),  v209);
    uint64_t v235 = (void (*)(char *, uint64_t))static OS_dispatch_queue.global(qos:)(v144);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v144, v145);
    v232(v38, v127, v23);
    unint64_t v146 = (v229 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v147 = (v146 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v148 = swift_allocObject(&unk_10095DC68, v147 + 8, v233);
    *(void *)(v148 + swift_weakDestroy(v0 + 16) = a1;
    ((void (*)(uint64_t, char *, uint64_t))v230)(v148 + v234, v38, v23);
    uint64_t v149 = (void *)(v148 + v146);
    uint64_t v150 = v217;
    *uint64_t v149 = v218;
    v149[1] = v150;
    *(void *)(v148 + v147) = v124;
    __int128 v241 = sub_10049DCB0;
    uint64_t v242 = v148;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    *(void *)&__int128 v240 = sub_1001C31E8;
    *((void *)&v240 + 1) = &unk_10095DC80;
    uint64_t v151 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain(a1);
    swift_retain();
    uint64_t v152 = swift_retain();
    uint64_t v153 = v213;
    static DispatchQoS.unspecified.getter(v152);
    *(void *)&__int128 v236 = _swiftEmptyArrayStorage;
    uint64_t v154 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v155 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v156 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v157 = v212;
    uint64_t v158 = v155;
    uint64_t v159 = v210;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v236, v158, v156, v210, v154);
    uint64_t v160 = v235;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v153, v157, v151);
    _Block_release(v151);

    (*(void (**)(char *, uint64_t))(v214 + 8))(v157, v159);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v153, v216);
    sub_100015794((uint64_t)v206, (uint64_t *)&unk_1009AF730);
    return swift_release();
  }

  uint64_t v130 = v202;
  v232(v202, v127, v23);
  swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v132 = (os_log_s *)Logger.logObject.getter(v131);
  os_log_type_t v133 = static os_log_type_t.error.getter(v132);
  if (os_log_type_enabled(v132, v133))
  {
    uint64_t v134 = swift_slowAlloc(22LL, -1LL);
    uint64_t v135 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 aBlock = v135;
    *(_DWORD *)uint64_t v134 = 136315394;
    swift_bridgeObjectRetain(a1);
    uint64_t v137 = Array.description.getter(v136, v23);
    unint64_t v139 = v138;
    swift_bridgeObjectRelease();
    *(void *)&__int128 v236 = sub_1003F11D4(v137, v139, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v134 + 4, v134 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v134 + 12) = 2080;
    uint64_t v140 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter(v23, v140);
    *(void *)&__int128 v236 = sub_1003F11D4(v141, v142, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v134 + 14, v134 + 22);
    swift_bridgeObjectRelease();
    v235(v130, v23);
    _os_log_impl( (void *)&_mh_execute_header,  v132,  v133,  "Failed to assign %s to safe location with UUID: %s",  (uint8_t *)v134,  0x16u);
    swift_arrayDestroy(v135, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v135, -1LL, -1LL);
    swift_slowDealloc(v134, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
    v235(v130, v23);
  }

  uint64_t v161 = (uint64_t)v206;
  type metadata accessor for SPSeparationMonitoringError(0LL);
  uint64_t v163 = v162;
  *(void *)&__int128 v236 = 17LL;
  unint64_t v164 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v165 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v236, v164, v163, v165);
  uint64_t v166 = (void *)aBlock;
  v218(aBlock, 1LL);

  return sub_100015794(v161, (uint64_t *)&unk_1009AF730);
}

uint64_t sub_10048E544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SafeLocation(0LL);
  swift_bridgeObjectRetain(a2);
  uint64_t result = sub_100184B50(v5);
  *(_BYTE *)(a1 + *(int *)(v4 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 48)) = 1;
  return result;
}

uint64_t sub_10048E598(char a1)
{
  LOBYTE(v1) = a1;
  uint64_t v2 = type metadata accessor for SafeLocation(0LL);
  uint64_t v21 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v3);
  uint64_t v7 = &v18[-v6];
  uint64_t result = (uint64_t)sub_100576844();
  uint64_t v9 = result;
  uint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(result + 16);
  uint64_t v23 = _swiftEmptyArrayStorage;
  if (v22)
  {
    unint64_t v11 = 0LL;
    int v1 = v1;
    uint64_t v20 = v2;
    int v19 = v1;
    while (v11 < *(void *)(v9 + 16))
    {
      unint64_t v12 = (*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      uint64_t v13 = *(void *)(v21 + 72);
      sub_10001DC4C(v9 + v12 + v13 * v11, (uint64_t)v7, type metadata accessor for SafeLocation);
      if (v7[*(int *)(v2 + 24)] == v1)
      {
        uint64_t v14 = (uint64_t)v5;
        sub_10002218C((uint64_t)v7, (uint64_t)v5, type metadata accessor for SafeLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
          sub_100032BF0(0, v10[2] + 1LL, 1);
        }
        uint64_t v10 = v23;
        unint64_t v16 = v23[2];
        unint64_t v15 = v23[3];
        if (v16 >= v15 >> 1)
        {
          sub_100032BF0(v15 > 1, v16 + 1, 1);
          uint64_t v10 = v23;
        }

        v10[2] = v16 + 1;
        uint64_t v17 = (uint64_t)v10 + v12 + v16 * v13;
        uint64_t v5 = (_BYTE *)v14;
        uint64_t result = sub_10002218C(v14, v17, type metadata accessor for SafeLocation);
        uint64_t v2 = v20;
        int v1 = v19;
      }

      else
      {
        uint64_t result = sub_100018C68((uint64_t)v7, type metadata accessor for SafeLocation);
      }

      if (v22 == ++v11)
      {
        uint64_t v10 = v23;
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }

  return result;
}

void sub_10048E780(uint64_t a1, void (*a2)(id, uint64_t))
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    id v3 = *(id *)a1;
    id v4 = *(id *)a1;
    a2(v3, 1LL);
    sub_10049D900(v3, 1);
  }

  else
  {
    a2(0LL, 0LL);
  }

uint64_t sub_10048E7E8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v217 = a5;
  uint64_t v218 = a4;
  uint64_t v231 = a3;
  uint64_t v210 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v214 = *(void *)(v210 - 8);
  __chkstk_darwin(v210);
  uint64_t v212 = (char *)&v199 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v216 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v215 = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  uint64_t v213 = (char *)&v199 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v208 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v207 = (char *)&v199 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v228 = *(void *)(v11 - 8);
  uint64_t v229 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v227 = (char *)&v199 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v226 = (char *)&v199 - v14;
  uint64_t v205 = sub_100004AEC((uint64_t *)&unk_1009AF730);
  uint64_t v15 = __chkstk_darwin(v205);
  uint64_t v204 = (uint64_t)&v199 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v199 - v17;
  uint64_t v19 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v19);
  uint64_t v230 = (char *)&v199 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  __chkstk_darwin(v21);
  uint64_t v225 = (uint64_t)&v199 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for UUID(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v224 = (char *)&v199 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v202 = (char *)&v199 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v201 = (char *)&v199 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v200 = (char *)&v199 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v199 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v38 = (char *)&v199 - v37;
  uint64_t v203 = v39;
  __chkstk_darwin(v36);
  uint64_t v41 = (char *)&v199 - v40;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v42 = type metadata accessor for Logger(0LL);
  uint64_t v43 = sub_10000A720(v42, (uint64_t)qword_100A2AAA0);
  uint64_t v232 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v233 = a2;
  v232(v41, a2, v23);
  uint64_t v44 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v211 = v43;
  double v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.default.getter(v45);
  unsigned int v47 = v46;
  BOOL v48 = os_log_type_enabled(v45, v46);
  uint64_t v234 = a1;
  uint64_t v209 = v9;
  uint64_t v206 = v18;
  if (v48)
  {
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v223 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 aBlock = v223;
    *(_DWORD *)uint64_t v49 = 136315394;
    unsigned int v222 = v47;
    uint64_t v50 = swift_bridgeObjectRetain(a1);
    uint64_t v51 = Array.description.getter(v50, v23);
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    *(void *)&__int128 v236 = sub_1003F11D4(v51, v53, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease_n(v234, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 12) = 2080;
    uint64_t v54 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v23, v54);
    *(void *)&__int128 v236 = sub_1003F11D4(v55, v56, (uint64_t *)&aBlock);
    a1 = v234;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease();
    uint64_t v235 = *(void (**)(char *, uint64_t))(v24 + 8);
    v235(v41, v23);
    _os_log_impl( (void *)&_mh_execute_header,  v45,  (os_log_type_t)v222,  "Unassigning beacons: %s from safe location with identifier: %s",  (uint8_t *)v49,  0x16u);
    uint64_t v57 = v223;
    swift_arrayDestroy(v223, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
    uint64_t v235 = *(void (**)(char *, uint64_t))(v24 + 8);
    v235(v41, v23);
  }

  uint64_t v58 = v24;
  uint64_t v59 = v225;
  uint64_t v60 = v233;
  sub_1005766A0(v233, v225);
  uint64_t v61 = type metadata accessor for SafeLocation(0LL);
  int v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 48LL))(v59, 1LL, v61);
  sub_100015794(v59, (uint64_t *)&unk_1009AF740);
  uint64_t v63 = v218;
  if (v62 == 1)
  {
    uint64_t v64 = v224;
    v232(v224, v60, v23);
    uint64_t v65 = swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = swift_slowAlloc(22LL, -1LL);
      uint64_t v69 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 aBlock = v69;
      *(_DWORD *)uint64_t v68 = 136315394;
      uint64_t v70 = swift_bridgeObjectRetain(a1);
      uint64_t v71 = Array.description.getter(v70, v23);
      unint64_t v73 = v72;
      swift_bridgeObjectRelease();
      *(void *)&__int128 v236 = sub_1003F11D4(v71, v73, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v68 + 4, v68 + 12);
      swift_bridgeObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v68 + 12) = 2080;
      uint64_t v74 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v23, v74);
      *(void *)&__int128 v236 = sub_1003F11D4(v75, v76, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v68 + 14, v68 + 22);
      swift_bridgeObjectRelease();
      v235(v64, v23);
      _os_log_impl( (void *)&_mh_execute_header,  v66,  v67,  "Unable to unassign beacons %s from non-existant safe location with UUID: %s",  (uint8_t *)v68,  0x16u);
      swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1LL, -1LL);
      uint64_t v77 = v68;
      uint64_t v63 = v218;
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a1, 2LL);
      v235(v64, v23);
    }

    uint64_t v105 = v216;
    uint64_t v106 = v208;
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v107 = v207;
    uint64_t v108 = v209;
    (*(void (**)(char *, void, uint64_t))(v106 + 104))( v207,  enum case for DispatchQoS.QoSClass.default(_:),  v209);
    double v109 = (void *)static OS_dispatch_queue.global(qos:)(v107);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v108);
    uint64_t v110 = swift_allocObject(&unk_10095CF20, 32LL, 7LL);
    uint64_t v111 = v217;
    *(void *)(v110 + swift_weakDestroy(v0 + 16) = v63;
    *(void *)(v110 + 24) = v111;
    __int128 v241 = sub_10049F74C;
    uint64_t v242 = v110;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    *(void *)&__int128 v240 = sub_1001C31E8;
    *((void *)&v240 + 1) = &unk_10095CF38;
    uint64_t v112 = _Block_copy(&aBlock);
    uint64_t v113 = swift_retain();
    uint64_t v114 = v213;
    static DispatchQoS.unspecified.getter(v113);
    *(void *)&__int128 v236 = _swiftEmptyArrayStorage;
    uint64_t v115 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v116 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v117 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v118 = v212;
    uint64_t v119 = v116;
    uint64_t v120 = v210;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v236, v119, v117, v210, v115);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v114, v118, v112);
    _Block_release(v112);

    (*(void (**)(char *, uint64_t))(v214 + 8))(v118, v120);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v114, v105);
    return swift_release(v242);
  }

  uint64_t v223 = *(void *)(a1 + 16);
  if (v223)
  {
    uint64_t v225 = a1 + ((*(unsigned __int8 *)(v58 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
    uint64_t v224 = *(char **)(v58 + 72);
    unsigned int v222 = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
    swift_bridgeObjectRetain(a1);
    uint64_t v78 = 0LL;
    __int128 v221 = xmmword_1007E67D0;
    uint64_t v79 = v232;
    uint64_t v80 = v233;
    uint64_t v81 = v230;
    uint64_t v220 = v23;
    uint64_t v219 = v58;
    while (1)
    {
      v79(v81, v225 + (void)v224 * v78, v23);
      uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
      v82(v81, 0LL, 1LL, v23);
      uint64_t v83 = (*(uint64_t (**)(char *, char *, uint64_t))(v58 + 32))(v35, v81, v23);
      uint64_t v84 = static os_log_type_t.info.getter(v83);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v85 = qword_100A2B018;
      uint64_t v86 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v87 = swift_allocObject(v86, 72LL, 7LL);
      *(_OWORD *)(v87 + swift_weakDestroy(v0 + 16) = v221;
      uint64_t v88 = UUID.uuidString.getter(v87);
      uint64_t v90 = v89;
      *(void *)(v87 + 56) = &type metadata for String;
      *(void *)(v87 + 64) = sub_1000226F4();
      *(void *)(v87 + 32) = v88;
      *(void *)(v87 + 40) = v90;
      os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v85, "beaconRecord(for uuid: %@)", 26LL, 2LL, v87);
      uint64_t v91 = swift_bridgeObjectRelease();
      unint64_t v92 = v226;
      static SystemInfo.lockState.getter(v91);
      uint64_t v94 = v227;
      uint64_t v93 = v228;
      uint64_t v95 = v229;
      (*(void (**)(char *, void, uint64_t))(v228 + 104))(v227, v222, v229);
      uint64_t v96 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
      LOBYTE(v90) = dispatch thunk of static Equatable.== infix(_:_:)(v92, v94, v95, v96);
      unint64_t v97 = *(void (**)(char *, uint64_t))(v93 + 8);
      v97(v94, v95);
      uint64_t v98 = ((uint64_t (*)(char *, uint64_t))v97)(v92, v95);
      if ((v90 & 1) != 0)
      {
        uint64_t v168 = static os_log_type_t.default.getter(v98);
        os_log(_:dso:log:_:_:)( v168,  &_mh_execute_header,  qword_100A2B018,  "beaconRecord call failed because in device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
        __int128 v241 = 0LL;
        __int128 aBlock = 0u;
        __int128 v240 = 0u;
        uint64_t v79 = v232;
        uint64_t v23 = v220;
LABEL_35:
        sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
        swift_bridgeObjectRelease();
        uint64_t v169 = v200;
        v79(v200, (uint64_t)v35, v23);
        uint64_t v170 = v201;
        uint64_t v171 = ((uint64_t (*)(char *, uint64_t, uint64_t))v79)(v201, v233, v23);
        uint64_t v172 = (os_log_s *)Logger.logObject.getter(v171);
        os_log_type_t v173 = static os_log_type_t.error.getter(v172);
        int v174 = v173;
        if (os_log_type_enabled(v172, v173))
        {
          uint64_t v175 = swift_slowAlloc(22LL, -1LL);
          uint64_t v234 = swift_slowAlloc(64LL, -1LL);
          *(void *)&__int128 aBlock = v234;
          *(_DWORD *)uint64_t v175 = 136315394;
          uint64_t v176 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          LODWORD(v233) = v174;
          uint64_t v177 = dispatch thunk of CustomStringConvertible.description.getter(v23, v176);
          *(void *)&__int128 v236 = sub_1003F11D4(v177, v178, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v175 + 4, v175 + 12);
          swift_bridgeObjectRelease();
          uint64_t v179 = v235;
          v235(v169, v23);
          *(_WORD *)(v175 + 12) = 2080;
          uint64_t v180 = dispatch thunk of CustomStringConvertible.description.getter(v23, v176);
          *(void *)&__int128 v236 = sub_1003F11D4(v180, v181, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v175 + 14, v175 + 22);
          swift_bridgeObjectRelease();
          uint64_t v235 = v179;
          v179(v170, v23);
          _os_log_impl( (void *)&_mh_execute_header,  v172,  (os_log_type_t)v233,  "Unable to unassign non-existant beacon %s to safe location with UUID: %s",  (uint8_t *)v175,  0x16u);
          uint64_t v182 = v234;
          swift_arrayDestroy(v234, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v182, -1LL, -1LL);
          swift_slowDealloc(v175, -1LL, -1LL);
        }

        else
        {
          uint64_t v183 = v235;
          v235(v169, v23);
          uint64_t v235 = v183;
          v183(v170, v23);
        }

        uint64_t v184 = v217;
        uint64_t v185 = v210;
        unint64_t v186 = v218;
        uint64_t v187 = v209;
        uint64_t v188 = v208;
        uint64_t v189 = v207;
        sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
        (*(void (**)(char *, void, uint64_t))(v188 + 104))( v189,  enum case for DispatchQoS.QoSClass.default(_:),  v187);
        uint64_t v190 = (void *)static OS_dispatch_queue.global(qos:)(v189);
        (*(void (**)(char *, uint64_t))(v188 + 8))(v189, v187);
        uint64_t v191 = swift_allocObject(&unk_10095D010, 32LL, 7LL);
        *(void *)(v191 + swift_weakDestroy(v0 + 16) = v186;
        *(void *)(v191 + 24) = v184;
        __int128 v241 = sub_10049F748;
        uint64_t v242 = v191;
        *(void *)&__int128 aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256LL;
        *(void *)&__int128 v240 = sub_1001C31E8;
        *((void *)&v240 + 1) = &unk_10095D028;
        uint64_t v192 = _Block_copy(&aBlock);
        uint64_t v193 = swift_retain();
        uint64_t v194 = v213;
        static DispatchQoS.unspecified.getter(v193);
        *(void *)&__int128 v236 = _swiftEmptyArrayStorage;
        uint64_t v195 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v196 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v197 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        unint64_t v198 = v212;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v236, v196, v197, v185, v195);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v194, v198, v192);
        _Block_release(v192);

        (*(void (**)(char *, uint64_t))(v214 + 8))(v198, v185);
        (*(void (**)(char *, uint64_t))(v215 + 8))(v194, v216);
        v235(v35, v23);
        return swift_release(v242);
      }

      double v99 = sub_100508644();
      uint64_t v100 = v99[2];
      uint64_t v23 = v220;
      if (v100)
      {
        uint64_t v101 = (uint64_t)(v99 + 4);
        while (1)
        {
          sub_100013044(v101, (uint64_t)&v236);
          uint64_t v102 = v237;
          uint64_t v103 = v238;
          sub_100012ED8(&v236, v237);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v103 + 8) + 8LL) + 32LL))(v102);
          LOBYTE(v102) = static UUID.== infix(_:_:)(v38, v35);
          uint64_t v104 = v235;
          v235(v38, v23);
          if ((v102 & 1) != 0) {
            break;
          }
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v236);
          v101 += 40LL;
          if (!--v100) {
            goto LABEL_19;
          }
        }

        sub_100012EC0(&v236, (uint64_t)&aBlock);
        swift_bridgeObjectRelease();
      }

      else
      {
LABEL_19:
        __int128 v241 = 0LL;
        __int128 aBlock = 0u;
        __int128 v240 = 0u;
        swift_bridgeObjectRelease();
        uint64_t v104 = v235;
      }

      a1 = v234;
      uint64_t v79 = v232;
      uint64_t v58 = v219;
      uint64_t v81 = v230;
      if (!*((void *)&v240 + 1)) {
        goto LABEL_35;
      }
      ++v78;
      sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
      v104(v35, v23);
      uint64_t v80 = v233;
      if (v78 == v223) {
        goto LABEL_27;
      }
    }
  }

  else
  {
    uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v79 = v232;
    uint64_t v80 = v233;
    uint64_t v81 = v230;
LABEL_27:
    v82(v81, 1LL, 1LL, v23);
  }

  swift_bridgeObjectRelease();
  v79(v38, v80, v23);
  uint64_t v121 = *(unsigned __int8 *)(v58 + 80);
  uint64_t v122 = (v121 + 24) & ~v121;
  uint64_t v229 = v122 + v203;
  uint64_t v233 = v121 | 7;
  uint64_t v123 = swift_allocObject(&unk_10095CF70, v122 + v203, v121 | 7);
  uint64_t v124 = v231;
  *(void *)(v123 + swift_weakDestroy(v0 + 16) = v231;
  uint64_t v234 = v122;
  uint64_t v230 = *(char **)(v58 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v230)(v123 + v122, v38, v23);
  uint64_t v125 = swift_allocObject(&unk_10095CF98, 24LL, 7LL);
  *(void *)(v125 + swift_weakDestroy(v0 + 16) = a1;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v126 = (uint64_t)v206;
  uint64_t v127 = v80;
  sub_10048606C( (uint64_t)sub_100494E00,  v123,  (uint64_t)sub_100494E04,  v125,  (uint64_t *)&unk_1009AF730,  (uint64_t)sub_100494E1C,  (uint64_t)v206);
  swift_release(v123);
  swift_release(v125);
  uint64_t v128 = v204;
  sub_10001581C(v126, v204, (uint64_t *)&unk_1009AF730);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v128, v205);
  sub_100015794(v128, (uint64_t *)&unk_1009AF730);
  if (EnumCaseMultiPayload != 1)
  {
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v143 = v208;
    uint64_t v144 = v207;
    uint64_t v145 = v209;
    (*(void (**)(char *, void, uint64_t))(v208 + 104))( v207,  enum case for DispatchQoS.QoSClass.default(_:),  v209);
    uint64_t v235 = (void (*)(char *, uint64_t))static OS_dispatch_queue.global(qos:)(v144);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v144, v145);
    v232(v38, v127, v23);
    unint64_t v146 = (v229 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v147 = (v146 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v148 = swift_allocObject(&unk_10095CFC0, v147 + 8, v233);
    *(void *)(v148 + swift_weakDestroy(v0 + 16) = a1;
    ((void (*)(uint64_t, char *, uint64_t))v230)(v148 + v234, v38, v23);
    uint64_t v149 = (void *)(v148 + v146);
    uint64_t v150 = v217;
    *uint64_t v149 = v218;
    v149[1] = v150;
    *(void *)(v148 + v147) = v124;
    __int128 v241 = sub_100494E10;
    uint64_t v242 = v148;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    *(void *)&__int128 v240 = sub_1001C31E8;
    *((void *)&v240 + 1) = &unk_10095CFD8;
    uint64_t v151 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain(a1);
    swift_retain();
    uint64_t v152 = swift_retain();
    uint64_t v153 = v213;
    static DispatchQoS.unspecified.getter(v152);
    *(void *)&__int128 v236 = _swiftEmptyArrayStorage;
    uint64_t v154 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v155 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v156 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v157 = v212;
    uint64_t v158 = v155;
    uint64_t v159 = v210;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v236, v158, v156, v210, v154);
    uint64_t v160 = v235;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v153, v157, v151);
    _Block_release(v151);

    (*(void (**)(char *, uint64_t))(v214 + 8))(v157, v159);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v153, v216);
    sub_100015794((uint64_t)v206, (uint64_t *)&unk_1009AF730);
    return swift_release(v242);
  }

  uint64_t v130 = v202;
  v232(v202, v127, v23);
  uint64_t v131 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v132 = (os_log_s *)Logger.logObject.getter(v131);
  os_log_type_t v133 = static os_log_type_t.error.getter(v132);
  if (os_log_type_enabled(v132, v133))
  {
    uint64_t v134 = swift_slowAlloc(22LL, -1LL);
    uint64_t v135 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 aBlock = v135;
    *(_DWORD *)uint64_t v134 = 136315394;
    uint64_t v136 = swift_bridgeObjectRetain(a1);
    uint64_t v137 = Array.description.getter(v136, v23);
    unint64_t v139 = v138;
    swift_bridgeObjectRelease();
    *(void *)&__int128 v236 = sub_1003F11D4(v137, v139, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v134 + 4, v134 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v134 + 12) = 2080;
    uint64_t v140 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter(v23, v140);
    *(void *)&__int128 v236 = sub_1003F11D4(v141, v142, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v134 + 14, v134 + 22);
    swift_bridgeObjectRelease();
    v235(v130, v23);
    _os_log_impl( (void *)&_mh_execute_header,  v132,  v133,  "Failed to unassign %s from safe location with UUID: %s",  (uint8_t *)v134,  0x16u);
    swift_arrayDestroy(v135, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v135, -1LL, -1LL);
    swift_slowDealloc(v134, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
    v235(v130, v23);
  }

  uint64_t v161 = (uint64_t)v206;
  type metadata accessor for SPSeparationMonitoringError(0LL);
  uint64_t v163 = v162;
  *(void *)&__int128 v236 = 17LL;
  unint64_t v164 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v165 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v236, v164, v163, v165);
  uint64_t v166 = (void *)aBlock;
  v218(aBlock, 1LL);

  return sub_100015794(v161, (uint64_t *)&unk_1009AF730);
}

void sub_10048FF54(void (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v5;
  uint64_t v10 = a3;
  unint64_t v7 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  _BridgedStoredNSError.init(_:userInfo:)(&v11, &v10, v7, v6, v8);
  uint64_t v9 = v11;
  a1(v11, 1LL);
}

uint64_t sub_100490000(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SafeLocation(0LL);
  uint64_t v5 = (unint64_t *)(a1 + *(int *)(v4 + 52));
  swift_bridgeObjectRetain(a2);
  uint64_t v6 = sub_10049C3FC(v5, a2);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v8 = *(void *)(*v5 + 16);
  if (v8 < v6)
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_10049C254(v6, v8);
    if (*(void *)(*v5 + 16)) {
      char v9 = 1;
    }
    else {
      char v9 = 2;
    }
    *(_BYTE *)(a1 + *(int *)(v4 + _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 48)) = v9;
  }

  return result;
}

uint64_t sub_1004900A8( uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v34 = a6;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10000A720(v15, (uint64_t)qword_100A2AAA0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  uint64_t v16 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    v31[1] = a4;
    uint64_t v20 = v19;
    v31[0] = swift_slowAlloc(64LL, -1LL);
    v36[0] = v31[0];
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v21 = swift_bridgeObjectRetain(a1);
    uint64_t v22 = Array.description.getter(v21, v11);
    uint64_t v32 = a3;
    uint64_t v33 = a5;
    uint64_t v23 = v22;
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v35 = sub_1003F11D4(v23, v25, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v26 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v11, v26);
    uint64_t v35 = sub_1003F11D4(v27, v28, v36);
    a3 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v34, (uint8_t *)v20, 0x16u);
    uint64_t v29 = v31[0];
    swift_arrayDestroy(v31[0], 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  a3(0LL, 0LL);
  sub_1004E696C(0x10u);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  type metadata accessor for Transaction(0LL);
  static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
  return sub_1004E6B70();
}

void *sub_1004903C4(void *a1)
{
  uint64_t v38 = sub_100004AEC((uint64_t *)&unk_1009AC320);
  uint64_t v2 = *(void *)(v38 - 8);
  uint64_t v3 = __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v34 - v5;
  uint64_t v7 = type metadata accessor for SafeLocation(0LL);
  uint64_t v36 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  [a1 coordinate];
  double v11 = v10;
  double v13 = v12;
  [a1 horizontalAccuracy];
  double v15 = v14;
  id v16 = objc_allocWithZone(&OBJC_CLASS___CLCircularRegion);
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = objc_msgSend(v16, "initWithCenter:radius:identifier:", v17, v11, v13, v15);

  objc_msgSend(v18, "setGeoReferenceFrame:", objc_msgSend(a1, "referenceFrame"));
  uint64_t v19 = sub_100576844();
  id v20 = v18;
  uint64_t v21 = sub_100498AB4((uint64_t)v19, v20);
  swift_bridgeObjectRelease();

  uint64_t v22 = sub_100498334((uint64_t)v21);
  swift_bridgeObjectRelease();
  uint64_t v39 = v22;
  swift_bridgeObjectRetain(v22);
  sub_10047B124(&v39);
  swift_bridgeObjectRelease();
  uint64_t v23 = v39;
  int64_t v24 = v39[2];
  if (v24)
  {
    id v35 = v20;
    uint64_t v39 = _swiftEmptyArrayStorage;
    sub_100032BF0(0, v24, 0);
    uint64_t v25 = *(unsigned __int8 *)(v2 + 80);
    uint64_t v34 = v23;
    uint64_t v26 = (uint64_t)v23 + ((v25 + 32) & ~v25);
    uint64_t v27 = *(void *)(v2 + 72);
    unint64_t v28 = v39;
    do
    {
      sub_10001581C(v26, (uint64_t)v6, (uint64_t *)&unk_1009AC320);
      uint64_t v29 = *(int *)(v38 + 48);
      uint64_t v30 = (uint64_t)&v37[v29];
      sub_10001DC4C((uint64_t)&v6[v29], (uint64_t)&v37[v29], type metadata accessor for SafeLocation);
      sub_10002218C(v30, (uint64_t)v9, type metadata accessor for SafeLocation);
      sub_100015794((uint64_t)v6, (uint64_t *)&unk_1009AC320);
      if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      {
        sub_100032BF0(0, v28[2] + 1LL, 1);
        unint64_t v28 = v39;
      }

      unint64_t v32 = v28[2];
      unint64_t v31 = v28[3];
      if (v32 >= v31 >> 1)
      {
        sub_100032BF0(v31 > 1, v32 + 1, 1);
        unint64_t v28 = v39;
      }

      __int128 v28[2] = v32 + 1;
      sub_10002218C( (uint64_t)v9,  (uint64_t)v28 + ((*(unsigned __int8 *)(v36 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))
      + *(void *)(v36 + 72) * v32,
        type metadata accessor for SafeLocation);
      v26 += v27;
      --v24;
    }

    while (v24);
    swift_release();
  }

  else
  {
    swift_release();

    return _swiftEmptyArrayStorage;
  }

  return v28;
}

uint64_t sub_100490720@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v75 = a3;
  uint64_t v76 = a4;
  uint64_t v9 = type metadata accessor for DispatchTime(0LL);
  uint64_t v82 = *(void *)(v9 - 8);
  uint64_t v83 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v80 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v81 = (char *)&v65 - v12;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v13);
  uint64_t v74 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SafeLocation(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v77 = v18;
  uint64_t v78 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v87 = (char *)&v65 - v19;
  uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  uint64_t v20 = __chkstk_darwin(v73);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  int64_t v24 = (char *)&v65 - v23;
  uint64_t v79 = a1;
  uint64_t v25 = sub_1004903C4(a2);
  if (v25[2])
  {
    sub_10001DC4C( (uint64_t)v25 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)),  (uint64_t)v24,  type metadata accessor for SafeLocation);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v26((uint64_t)v24, 0LL, 1LL, v15);
  }

  else
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v26((uint64_t)v24, 1LL, 1LL, v15);
  }

  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v24, 1LL, v15) == 1)
  {
    unint64_t v72 = v26;
    sub_100015794((uint64_t)v24, (uint64_t *)&unk_1009AF740);
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v70 = a5;
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_10000A720(v27, (uint64_t)qword_100A2AAA0);
    id v29 = a2;
    uint64_t v67 = v28;
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter(v30);
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v71 = v5;
    uint64_t v69 = v15;
    uint64_t v68 = v22;
    if (v32)
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v66 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v33 = 138412290;
      id v85 = v29;
      id v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v33 + 4, v33 + 12);
      id v35 = v66;
      *uint64_t v66 = v29;

      uint64_t v15 = v69;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "No suggested safe location for: %@ creating new one.",  v33,  0xCu);
      uint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v35, 1LL, v36);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {

      uint64_t v30 = (os_log_s *)v29;
    }

    uint64_t v38 = v87;

    if (v76) {
      uint64_t v39 = v75;
    }
    else {
      uint64_t v39 = 0LL;
    }
    if (v76) {
      uint64_t v40 = v76;
    }
    else {
      uint64_t v40 = 0xE000000000000000LL;
    }
    swift_bridgeObjectRetain(v76);
    uint64_t v41 = (uint64_t)v74;
    UUID.init()(v42);
    sub_10061A5C8(v41, v29, v39, v40, 1, 2, v38);
    uint64_t v43 = dispatch_group_create();
    uint64_t v44 = swift_allocBox(v73);
    uint64_t v46 = v45;
    v72(v45, 1LL, 1LL, v15);
    dispatch_group_enter(v43);
    uint64_t v47 = v78;
    sub_10001DC4C((uint64_t)v38, v78, type metadata accessor for SafeLocation);
    uint64_t v48 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v49 = (v48 + 24) & ~v48;
    unint64_t v50 = (v77 + v49 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v51 = swift_allocObject(&unk_10095E050, v50 + 8, v48 | 7);
    *(void *)(v51 + swift_weakDestroy(v0 + 16) = v44;
    sub_10002218C(v47, v51 + v49, type metadata accessor for SafeLocation);
    *(void *)(v51 + v50) = v43;
    swift_retain();
    unint64_t v52 = v43;
    sub_10048849C((uint64_t)v38, 0, (void (*)(void, void))sub_10049F12C, v51);
    uint64_t v53 = swift_release();
    uint64_t v54 = v80;
    static DispatchTime.now()(v53);
    uint64_t v55 = v81;
    + infix(_:_:)(v54, 120.0);
    uint64_t v56 = v83;
    uint64_t v57 = *(void (**)(char *, uint64_t))(v82 + 8);
    v57(v54, v83);
    uint64_t v58 = OS_dispatch_group.wait(timeout:)(v55) & 1;
    v57(v55, v56);
    uint64_t v59 = static DispatchTimeoutResult.== infix(_:_:)(v58, 1LL);
    if ((v59 & 1) != 0)
    {
      uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
      os_log_type_t v61 = static os_log_type_t.error.getter(v60);
      if (os_log_type_enabled(v60, v61))
      {
        int v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)int v62 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "Failed to create safe location suggestion due to timeout",  v62,  2u);
        swift_slowDealloc(v62, -1LL, -1LL);
      }

      sub_100018C68((uint64_t)v38, type metadata accessor for SafeLocation);
      uint64_t v63 = (uint64_t)v68;
      v72((uint64_t)v68, 1LL, 1LL, v69);
      swift_beginAccess(v46, v84, 1LL, 0LL);
      sub_1000D4D50(v63, v46, (uint64_t *)&unk_1009AF740);
    }

    else
    {
      sub_100018C68((uint64_t)v38, type metadata accessor for SafeLocation);
    }

    uint64_t v64 = v70;
    swift_beginAccess(v46, &v85, 0LL, 0LL);
    sub_10001581C(v46, v64, (uint64_t *)&unk_1009AF740);
    return swift_release();
  }

  else
  {
    sub_10002218C((uint64_t)v24, a5, type metadata accessor for SafeLocation);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v26)(a5, 0LL, 1LL, v15);
  }

void sub_100490DA0(void *a1, char a2, uint64_t a3, uint64_t a4, dispatch_group_s *a5)
{
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = swift_projectBox(a3);
  if ((a2 & 1) != 0)
  {
    uint64_t v15 = qword_10099B4C8;
    id v16 = a1;
    if (v15 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_10000A720(v17, (uint64_t)qword_100A2AAA0);
    id v18 = v16;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = (uint64_t)v18;
      v32[0] = v22;
      uint64_t v30 = a5;
      *(_DWORD *)uint64_t v21 = 136315138;
      id v29 = v21 + 4;
      type metadata accessor for SPSeparationMonitoringError(0LL);
      uint64_t v24 = v23;
      uint64_t v25 = sub_100007864( &qword_1009AF810,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E2FB8);
      uint64_t v26 = Error.localizedDescription.getter(v24, v25);
      uint64_t v31 = sub_1003F11D4(v26, v27, v32);
      a5 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v29, v21 + 12);
      swift_bridgeObjectRelease();
      sub_10049CCEC(a1, 1);
      sub_10049CCEC(a1, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Failed to create new safe location suggestion due to: %s",  v21,  0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);

      sub_10049CCEC(a1, 1);
    }

    else
    {
      sub_10049CCEC(a1, 1);
      sub_10049CCEC(a1, 1);
    }

    uint64_t v28 = type metadata accessor for SafeLocation(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v12, 1LL, 1LL, v28);
  }

  else
  {
    sub_10001DC4C(a4, (uint64_t)v12, type metadata accessor for SafeLocation);
    uint64_t v14 = type metadata accessor for SafeLocation(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v12, 0LL, 1LL, v14);
  }

  swift_beginAccess(v13, v32, 1LL, 0LL);
  sub_1000D4D50((uint64_t)v12, v13, (uint64_t *)&unk_1009AF740);
  dispatch_group_leave(a5);
}

void sub_100491090(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LeashRecord(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (_OWORD *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = sub_100576FE0();
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_100A2AAA0);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Attempting to merge leash records if needed.", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  unint64_t v12 = v6[2];
  if (v12 < 2)
  {
    uint64_t v17 = swift_bridgeObjectRelease();
    id v29 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v18 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v18,  "No duplicated leash records found, no need to merge.",  v19,  2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }
  }

  else
  {
    swift_bridgeObjectRetain(v6);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)id v16 = 134217984;
      uint64_t v30 = (void *)v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Found %ld leash records, cleaning up.", v16, 0xCu);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease();
    }

    os_log_type_t v20 = _swiftEmptyArrayStorage;
    uint64_t v30 = _swiftEmptyArrayStorage;
    uint64_t v21 = v6[2];
    if (v21)
    {
      uint64_t v22 = (char *)v6 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      uint64_t v23 = *(void *)(v3 + 72);
      swift_bridgeObjectRetain(v6);
      do
      {
        swift_bridgeObjectRetain(*(void *)&v22[*(int *)(v2 + 24)]);
        sub_100184B50(v24);
        v22 += v23;
        --v21;
      }

      while (v21);
      swift_bridgeObjectRelease();
      os_log_type_t v20 = v30;
    }

    uint64_t v25 = type metadata accessor for UUID(0LL);
    uint64_t v26 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v27 = Array<A>.uniqued()(v20, v25, v26);
    uint64_t v28 = swift_bridgeObjectRelease();
    UUID.init()(v28);
    *uint64_t v5 = xmmword_1007E4480;
    *(void *)((char *)v5 + *(int *)(v2 + swift_release(*(void *)(v0 + 24)) = v27;
    swift_bridgeObjectRetain(v6);
    swift_retain();
    sub_10055CA80((uint64_t)v5, 0, a1, (uint64_t)v6, a1);
    swift_bridgeObjectRelease_n(v6, 2LL);
    swift_release();
    sub_100018C68((uint64_t)v5, type metadata accessor for LeashRecord);
  }

void sub_100491424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v53 = a3;
  uint64_t v52 = type metadata accessor for LeashRecord(0LL);
  uint64_t v5 = *(void *)(v52 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v52);
  uint64_t v51 = (uint64_t)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v50 = (uint64_t)v44 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v44 - v10;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AF770);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v14, (uint64_t *)&unk_1009AF770);
  if (swift_getEnumCaseMultiPayload(v14, v12) == 1)
  {
    uint64_t v15 = *v14;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10000A720(v16, (uint64_t)qword_100A2AAA0);
    swift_errorRetain(v15);
    uint64_t v17 = swift_errorRetain(v15);
    os_log_type_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v57 = v21;
      *(_DWORD *)os_log_type_t v20 = 136315138;
      swift_getErrorValue(v15, v56, v55);
      uint64_t v22 = Error.localizedDescription.getter(v55[1], v55[2]);
      uint64_t v54 = sub_1003F11D4(v22, v23, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Failed to create a new merged leash record, bailing out - %s",  v20,  0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      swift_errorRelease(v15);
    }

    else
    {
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      swift_errorRelease(v15);
    }
  }

  else
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2AAA0);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Successfully created a merged leash record, removing existing ones.",  v28,  2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    uint64_t v29 = *(void *)(a2 + 16);
    if (v29)
    {
      v44[0] = v14;
      v44[1] = a2;
      uint64_t v30 = *(unsigned __int8 *)(v5 + 80);
      uint64_t v31 = a2 + ((v30 + 32) & ~v30);
      uint64_t v32 = *(void *)(v5 + 72);
      uint64_t v48 = (v30 + 16) & ~v30;
      uint64_t v49 = v32;
      uint64_t v46 = v30 | 7;
      uint64_t v47 = v48 + v6;
      swift_bridgeObjectRetain(a2);
      __int128 v45 = xmmword_1007E67D0;
      do
      {
        sub_10001DC4C(v31, (uint64_t)v11, type metadata accessor for LeashRecord);
        uint64_t v33 = v50;
        sub_10001DC4C((uint64_t)v11, v50, type metadata accessor for LeashRecord);
        uint64_t v34 = swift_allocObject(&unk_10095DDD0, v47, v46);
        uint64_t v35 = sub_10002218C(v33, v34 + v48, type metadata accessor for LeashRecord);
        uint64_t v36 = static os_log_type_t.default.getter(v35);
        if (qword_10099B708 != -1) {
          swift_once(&qword_10099B708, sub_100651168);
        }
        uint64_t v37 = qword_100A2B018;
        uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
        *(_OWORD *)(v39 + swift_weakDestroy(v0 + 16) = v45;
        uint64_t v40 = v51;
        sub_10001DC4C((uint64_t)v11, v51, type metadata accessor for LeashRecord);
        uint64_t v41 = String.init<A>(describing:)(v40, v52);
        uint64_t v43 = v42;
        *(void *)(v39 + 56) = &type metadata for String;
        *(void *)(v39 + 64) = sub_1000226F4();
        *(void *)(v39 + 32) = v41;
        *(void *)(v39 + 40) = v43;
        os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Attempting to remove: %@", 24LL, 2LL, v39);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_10055BC18((uint64_t)v11, v53, (void (*)(uint64_t))sub_10049E038, v34);
        swift_release_n(v34, 2LL);
        sub_100018C68((uint64_t)v11, type metadata accessor for LeashRecord);
        v31 += v49;
        --v29;
      }

      while (v29);
      swift_bridgeObjectRelease();
      uint64_t v14 = (uint64_t *)v44[0];
    }

    sub_100015794((uint64_t)v14, (uint64_t *)&unk_1009AF770);
  }

void sub_100491964(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LeashRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AAA0);
  uint64_t v8 = sub_10001DC4C(a2, (uint64_t)v6, type metadata accessor for LeashRecord);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc(18LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = type metadata accessor for UUID(0LL);
    uint64_t v14 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    uint64_t v17 = sub_1003F11D4(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v6, type metadata accessor for LeashRecord);
    *(_WORD *)(v11 + 12) = 1024;
    LODWORD(v17) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, (char *)&v17 + 4, v11 + 14, v11 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Removed duplicated leash record: %s: %{BOOL}d.",  (uint8_t *)v11,  0x12u);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v6, type metadata accessor for LeashRecord);
  }
}

uint64_t sub_100491BA4(uint64_t a1)
{
  uint64_t v82 = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  unint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = v12;
  __chkstk_darwin(v11);
  uint64_t v80 = (char *)&v61 - v14;
  uint64_t v71 = type metadata accessor for SafeLocation(0LL);
  uint64_t v83 = *(void *)(v71 - 8);
  uint64_t v15 = __chkstk_darwin(v71);
  uint64_t v69 = (uint64_t)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v70 = (uint64_t)&v61 - v18;
  uint64_t v65 = v19;
  __chkstk_darwin(v17);
  uint64_t v68 = (char *)&v61 - v20;
  if (qword_10099B4C8 != -1) {
    goto LABEL_24;
  }
  while (1)
  {
    unint64_t v72 = v13;
    uint64_t v73 = v9;
    uint64_t v74 = v6;
    uint64_t v81 = v8;
    uint64_t v75 = v5;
    uint64_t v77 = v2;
    uint64_t v21 = type metadata accessor for Logger(0LL);
    uint64_t v22 = sub_10000A720(v21, (uint64_t)qword_100A2AAA0);
    unint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Attempting to clean unused separation alert safe locations",  v25,  2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    uint64_t v26 = v82;
    os_log_type_t v27 = sub_100576844();
    uint64_t v13 = v68;
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    uint64_t v5 = 0LL;
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    sub_1006A1518(aBlock[0]);
    double v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v2 = (uint64_t)_swiftEmptyArrayStorage;
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v9 = v27[2];
    uint64_t v78 = v1;
    uint64_t v79 = v10;
    uint64_t v76 = v4;
    if (!v9) {
      break;
    }
    unint64_t v10 = 0LL;
    uint64_t v6 = type metadata accessor for SafeLocation;
    while (v10 < v27[2])
    {
      uint64_t v4 = (char *)((*(unsigned __int8 *)(v83 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80));
      uint64_t v1 = *(void *)(v83 + 72);
      sub_10001DC4C((uint64_t)&v4[(void)v27 + v1 * v10], (uint64_t)v13, type metadata accessor for SafeLocation);
      sub_10049232C((uint64_t)v13, v29);
      if ((v30 & 1) != 0)
      {
        uint64_t v8 = (char *)v9;
        sub_10002218C((uint64_t)v13, v69, type metadata accessor for SafeLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
          sub_100032BF0(0, *(void *)(v2 + 16) + 1LL, 1);
        }
        uint64_t v2 = aBlock[0];
        unint64_t v32 = *(void *)(aBlock[0] + 16);
        unint64_t v31 = *(void *)(aBlock[0] + 24);
        if (v32 >= v31 >> 1)
        {
          sub_100032BF0(v31 > 1, v32 + 1, 1);
          uint64_t v2 = aBlock[0];
        }

        *(void *)(v2 + swift_weakDestroy(v0 + 16) = v32 + 1;
        sub_10002218C(v69, (uint64_t)&v4[v2 + v32 * v1], type metadata accessor for SafeLocation);
        uint64_t v9 = (uint64_t)v8;
        uint64_t v13 = v68;
      }

      else
      {
        sub_100018C68((uint64_t)v13, type metadata accessor for SafeLocation);
      }

      if (v9 == ++v10)
      {
        uint64_t v2 = aBlock[0];
        uint64_t v26 = v82;
        unint64_t v10 = v79;
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_24:
    swift_once(&qword_10099B4C8, sub_10047B404);
  }

void sub_10049232C(uint64_t a1, double a2)
{
  uint64_t v65 = type metadata accessor for SafeLocation(0LL);
  uint64_t v5 = __chkstk_darwin(v65);
  uint64_t v60 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v61 = (char *)&v58 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v58 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v58 - v12;
  uint64_t v64 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v64 - 8);
  uint64_t v15 = __chkstk_darwin(v64);
  uint64_t v59 = (uint64_t)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v62 = (char *)&v58 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v58 = (char *)&v58 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v23 = (char *)&v58 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v58 - v24;
  uint64_t v26 = objc_autoreleasePoolPush();
  sub_100544824(a1);
  if (v2)
  {
    objc_autoreleasePoolPop(v26);
    __break(1u);
    objc_autoreleasePoolPop(v2);
    __break(1u);
  }

  else
  {
    objc_autoreleasePoolPop(v26);
    os_log_type_t v27 = objc_autoreleasePoolPush();
    sub_100494B98(a1);
    objc_autoreleasePoolPop(v27);
    char v28 = static Date.== infix(_:_:)(v25, v23);
    double v29 = *(void (**)(char *, uint64_t))(v14 + 8);
    char v30 = v23;
    uint64_t v31 = v64;
    v29(v30, v64);
    v29(v25, v31);
    sub_10001DC4C(a1, (uint64_t)v13, type metadata accessor for SafeLocation);
    uint64_t v32 = a1;
    BOOL v63 = (v28 & 1) != 0 && v13[*(int *)(v65 + 48)] == 2;
    uint64_t v33 = (uint64_t)v61;
    sub_100018C68((uint64_t)v13, type metadata accessor for SafeLocation);
    sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for SafeLocation);
    BOOL v34 = (v28 & 1) != 0 && *(void *)(*(void *)&v11[*(int *)(v65 + 52)] + 16LL) == 0LL;
    sub_100018C68((uint64_t)v11, type metadata accessor for SafeLocation);
    sub_10001DC4C(a1, v33, type metadata accessor for SafeLocation);
    if ((v28 & 1) != 0)
    {
      uint64_t v35 = objc_autoreleasePoolPush();
      sub_100544824(v33);
      uint64_t v61 = 0LL;
      objc_autoreleasePoolPop(v35);
      uint64_t v36 = v58;
      uint64_t v37 = v62;
      Date.addingTimeInterval(_:)(v38, a2);
      uint64_t v39 = v64;
      v29(v37, v64);
      uint64_t v40 = v59;
      static Date.trustedNow.getter(v59);
      int v41 = static Date.< infix(_:_:)(v36, v40);
      v29((char *)v40, v39);
      v29(v36, v39);
    }

    else
    {
      uint64_t v61 = 0LL;
      int v41 = 0;
    }

    sub_100018C68(v33, type metadata accessor for SafeLocation);
    int v42 = v63 && v34;
    uint64_t v43 = (uint64_t)v60;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    int v44 = v42 & v41;
    uint64_t v45 = type metadata accessor for Logger(0LL);
    sub_10000A720(v45, (uint64_t)qword_100A2AAA0);
    uint64_t v46 = sub_10001DC4C(v32, v43, type metadata accessor for SafeLocation);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc(42LL, -1LL);
      uint64_t v64 = swift_slowAlloc(32LL, -1LL);
      uint64_t v67 = v64;
      *(_DWORD *)uint64_t v49 = 136447490;
      LODWORD(v62) = v34;
      uint64_t v50 = type metadata accessor for UUID(0LL);
      LODWORD(v65) = v41;
      int v51 = v44;
      uint64_t v52 = v43;
      uint64_t v53 = v50;
      uint64_t v54 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v53, v54);
      uint64_t v66 = sub_1003F11D4(v55, v56, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v52, type metadata accessor for SafeLocation);
      *(_WORD *)(v49 + 12) = 1024;
      LODWORD(v66) = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 4, v49 + 14, v49 + 18);
      *(_WORD *)(v49 + 18) = 1024;
      LODWORD(v66) = v28 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 4, v49 + 20, v49 + 24);
      *(_WORD *)(v49 + 24) = 1024;
      LODWORD(v66) = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 4, v49 + 26, v49 + 30);
      *(_WORD *)(v49 + 30) = 1024;
      LODWORD(v66) = (_DWORD)v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 4, v49 + 32, v49 + 36);
      *(_WORD *)(v49 + 36) = 1024;
      LODWORD(v66) = v65 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 4, v49 + 38, v49 + 42);
      _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "Should cleanup safe location %{public}s: %{BOOL}d\n reasons: (hasNeverBeenModified: %{BOOL}d, hasAlwaysBeenASuggestion: %{BOOL}d, hasNoAssociatedBeacons: %{BOOL}d), hasBeenCreatedLongAgo: %{BOOL}d)",  (uint8_t *)v49,  0x2Au);
      uint64_t v57 = v64;
      swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v43, type metadata accessor for SafeLocation);
    }
  }

void sub_10049291C(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SafeLocation(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v39 - v10;
  if ((a2 & 1) != 0)
  {
    uint64_t v22 = qword_10099B4C8;
    id v23 = a1;
    if (v22 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000A720(v24, (uint64_t)qword_100A2AAA0);
    sub_10001DC4C(a3, (uint64_t)v9, type metadata accessor for SafeLocation);
    sub_10049D44C(a1, 1);
    id v25 = v23;
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc(22LL, -1LL);
      uint64_t v29 = swift_slowAlloc(64LL, -1LL);
      uint64_t v40 = v29;
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v30 = type metadata accessor for UUID(0LL);
      uint64_t v31 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
      uint64_t v39 = sub_1003F11D4(v32, v33, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v9, type metadata accessor for SafeLocation);
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v39 = (uint64_t)v25;
      type metadata accessor for SPSeparationMonitoringError(0LL);
      uint64_t v35 = v34;
      uint64_t v36 = sub_100007864( &qword_1009AF810,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E2FB8);
      uint64_t v37 = Error.localizedDescription.getter(v35, v36);
      uint64_t v39 = sub_1003F11D4(v37, v38, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease();
      sub_10049CCEC(a1, 1);
      sub_10049CCEC(a1, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Failed to remove unused safe location: %s due to error: %s",  (uint8_t *)v28,  0x16u);
      swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);

      sub_10049CCEC(a1, 1);
    }

    else
    {
      sub_10049CCEC(a1, 1);
      sub_100018C68((uint64_t)v9, type metadata accessor for SafeLocation);
      sub_10049CCEC(a1, 1);
      sub_10049CCEC(a1, 1);
    }
  }

  else
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_10000A720(v12, (uint64_t)qword_100A2AAA0);
    uint64_t v13 = sub_10001DC4C(a3, (uint64_t)v11, type metadata accessor for SafeLocation);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      uint64_t v18 = type metadata accessor for UUID(0LL);
      uint64_t v19 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
      uint64_t v39 = sub_1003F11D4(v20, v21, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v11, type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Successfuly removed unused safe location: %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v11, type metadata accessor for SafeLocation);
    }
  }

uint64_t sub_100492DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = type metadata accessor for DispatchTime(0LL);
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v40 - v7;
  uint64_t v9 = type metadata accessor for LeashRecord(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (_OWORD *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = sub_100004AEC(&qword_1009A7D90);
  uint64_t v14 = __chkstk_darwin(v13);
  int v41 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v40 - v16;
  uint64_t v42 = a1;
  uint64_t v18 = sub_100576FE0();
  if (v18[2])
  {
    sub_10001DC4C( (uint64_t)v18 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)),  (uint64_t)v17,  type metadata accessor for LeashRecord);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v20 = v17;
    uint64_t v21 = 0LL;
  }

  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v20 = v17;
    uint64_t v21 = 1LL;
  }

  uint64_t v47 = v19;
  v19((uint64_t)v20, v21, 1LL, v9);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v17, 1LL, v9) == 1)
  {
    uint64_t v22 = sub_100015794((uint64_t)v17, &qword_1009A7D90);
    UUID.init()(v22);
    *uint64_t v12 = xmmword_1007E4480;
    *(void *)((char *)v12 + *(int *)(v9 + swift_release(*(void *)(v0 + 24)) = _swiftEmptyArrayStorage;
    id v23 = dispatch_group_create();
    dispatch_group_enter(v23);
    uint64_t v24 = swift_allocBox(v13);
    uint64_t v26 = v25;
    v47(v25, 1LL, 1LL, v9);
    os_log_type_t v27 = v23;
    uint64_t v28 = v42;
    uint64_t v42 = v24;
    sub_10055D1A4((uint64_t)v12, 0, v28, v24, v27);

    static DispatchTime.now()(v29);
    + infix(_:_:)(v6, 120.0);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v43 + 8);
    v30(v6, v3);
    uint64_t v31 = OS_dispatch_group.wait(timeout:)(v8) & 1;
    v30(v8, v3);
    if ((static DispatchTimeoutResult.== infix(_:_:)(v31, 1LL) & 1) != 0)
    {
      if (qword_10099B4C8 != -1) {
        swift_once(&qword_10099B4C8, sub_10047B404);
      }
      uint64_t v32 = type metadata accessor for Logger(0LL);
      uint64_t v33 = sub_10000A720(v32, (uint64_t)qword_100A2AAA0);
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to create new leash record due to timeout", v36, 2u);
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      sub_100018C68((uint64_t)v12, type metadata accessor for LeashRecord);
      uint64_t v37 = (uint64_t)v41;
      v47((uint64_t)v41, 1LL, 1LL, v9);
      swift_beginAccess(v26, v45, 1LL, 0LL);
      sub_1000D4D50(v37, v26, &qword_1009A7D90);
    }

    else
    {
      sub_100018C68((uint64_t)v12, type metadata accessor for LeashRecord);
    }

    swift_beginAccess(v26, v46, 0LL, 0LL);
    sub_10001581C(v26, v44, &qword_1009A7D90);
    return swift_release();
  }

  else
  {
    uint64_t v38 = v44;
    sub_10002218C((uint64_t)v17, v44, type metadata accessor for LeashRecord);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v47)(v38, 0LL, 1LL, v9);
  }

void sub_100493214(uint64_t a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v6 = type metadata accessor for LeashRecord(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A7D90);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009AF770);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = swift_projectBox(a2);
  sub_10001581C(a1, (uint64_t)v15, (uint64_t *)&unk_1009AF770);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
  {
    uint64_t v17 = *v15;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_10000A720(v18, (uint64_t)qword_100A2AAA0);
    swift_errorRetain(v17);
    uint64_t v19 = swift_errorRetain(v17);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc(12LL, -1LL);
      uint64_t v40 = v7;
      id v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v6;
      uint64_t v25 = v24;
      v45[0] = v24;
      *(_DWORD *)id v23 = 136315138;
      uint64_t v39 = v16;
      swift_getErrorValue(v17, v44, v43);
      uint64_t v26 = Error.localizedDescription.getter(v43[1], v43[2]);
      uint64_t v42 = sub_1003F11D4(v26, v27, v45);
      uint64_t v16 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v17);
      swift_errorRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to create new leash record due to: %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v28 = v25;
      uint64_t v6 = v41;
      swift_slowDealloc(v28, -1LL, -1LL);
      uint64_t v29 = v23;
      uint64_t v7 = v40;
      swift_slowDealloc(v29, -1LL, -1LL);

      swift_errorRelease(v17);
    }

    else
    {
      swift_errorRelease(v17);
      swift_errorRelease(v17);
      swift_errorRelease(v17);
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1LL, 1LL, v6);
  }

  else
  {
    sub_10002218C((uint64_t)v15, (uint64_t)v9, type metadata accessor for LeashRecord);
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    uint64_t v31 = sub_10000A720(v30, (uint64_t)qword_100A2AAA0);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = v16;
      uint64_t v35 = v7;
      uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Successfuly created new leash record.", v36, 2u);
      uint64_t v37 = v36;
      uint64_t v7 = v35;
      uint64_t v16 = v34;
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    sub_10002218C((uint64_t)v9, (uint64_t)v12, type metadata accessor for LeashRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0LL, 1LL, v6);
  }

  swift_beginAccess(v16, v45, 1LL, 0LL);
  sub_1000D4D50((uint64_t)v12, v16, &qword_1009A7D90);
  dispatch_group_leave(a3);
}

uint64_t sub_100493630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100493D74(a1, a2, (uint64_t)&unk_10095D268, (uint64_t)sub_10049CAD4, a3);
}

uint64_t sub_100493644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject(&unk_10095D290, 32LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject(&unk_10095D2B8, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = sub_10049CADC;
  *(void *)(v8 + 24) = v7;
  swift_retain();
  sub_10047B920( a4,  (uint64_t)sub_10049F908,  v8,  (uint64_t)&unk_10095D2E0,  (uint64_t)sub_10049CB18,  (uint64_t)&unk_10095D2F8);
  return swift_release();
}

uint64_t sub_1004936F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  unint64_t v14 = (v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = swift_allocObject(&unk_10095DB00, v14 + 8, v12 | 7);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15 + v13, v11, v8);
  *(void *)(v15 + v14) = a3;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009AF7A0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  swift_retain();
  swift_bridgeObjectRetain(a3);
  uint64_t result = Future.init(_:)(sub_10049D9F8, v15);
  *a4 = result;
  return result;
}

uint64_t sub_10049381C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = swift_allocObject(&unk_10095DB28, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject(&unk_10095DB50, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_10049CADC;
  *(void *)(v10 + 24) = v9;
  swift_retain();
  sub_10047C458( a4,  a5,  (uint64_t)sub_10049F908,  v10,  (uint64_t)&unk_10095DB78,  (uint64_t)sub_10049DB04,  (uint64_t)&unk_10095DB90);
  return swift_release();
}

uint64_t sub_1004938D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for SafeLocation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a2, (uint64_t)v11, type metadata accessor for SafeLocation);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  uint64_t v14 = v13 + v10;
  uint64_t v15 = swift_allocObject(&unk_10095D498, v14 + 1, v12 | 7);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a1;
  sub_10002218C((uint64_t)v11, v15 + v13, type metadata accessor for SafeLocation);
  *(_BYTE *)(v15 + v14) = a3;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009AF7A0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  swift_retain();
  uint64_t result = Future.init(_:)(sub_10049CDAC, v15);
  *a4 = result;
  return result;
}

uint64_t sub_1004939E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = swift_allocObject(&unk_10095D4C0, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject(&unk_10095D4E8, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_10049CADC;
  *(void *)(v10 + 24) = v9;
  swift_retain();
  sub_10047BBBC(a4, a5, (uint64_t)sub_10049CE08, v10);
  return swift_release();
}

uint64_t sub_100493A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100493BC0(a1, a2, (uint64_t)&unk_10095D678, (uint64_t)sub_10049D23C, a3);
}

uint64_t sub_100493A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = swift_allocObject(&unk_10095D6A0, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  uint64_t v12 = type metadata accessor for SafeLocation(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4 + *(int *)(v12 + 20), v7);
  uint64_t v13 = swift_allocObject(&unk_10095D6C8, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = sub_10049CADC;
  *(void *)(v13 + 24) = v11;
  swift_retain();
  sub_10047BE54((uint64_t)v10, (uint64_t)sub_10049F908, v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100493BAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100493BC0(a1, a2, (uint64_t)&unk_10095D830, (uint64_t)sub_10049D48C, a3);
}

uint64_t sub_100493BC0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for SafeLocation(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  sub_10001DC4C(a2, (uint64_t)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for SafeLocation);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  uint64_t v15 = swift_allocObject(a3, v14 + v12, v13 | 7);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a1;
  sub_10002218C((uint64_t)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v15 + v14, type metadata accessor for SafeLocation);
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009AF7A0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  swift_retain();
  uint64_t result = Future.init(_:)(a4, v15);
  *a5 = result;
  return result;
}

uint64_t sub_100493CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject(&unk_10095D858, 32LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject(&unk_10095D880, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = sub_10049CADC;
  *(void *)(v8 + 24) = v7;
  swift_retain();
  sub_10047C1B4(a4, (uint64_t)sub_10049F908, v8);
  return swift_release();
}

uint64_t sub_100493D60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100493D74(a1, a2, (uint64_t)&unk_10095DA38, (uint64_t)sub_10049D8F0, a3);
}

uint64_t sub_100493D74@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = swift_allocObject(a3, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AF7A0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  swift_retain();
  swift_bridgeObjectRetain(a2);
  uint64_t result = Future.init(_:)(a4, v9);
  *a5 = result;
  return result;
}

uint64_t sub_100493E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject(&unk_10095DA60, 32LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject(&unk_10095DA88, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = sub_10049CADC;
  *(void *)(v8 + 24) = v7;
  swift_retain();
  sub_10047B584(a4, (uint64_t)sub_10049F908, v8);
  return swift_release();
}

void sub_100493E9C(void *a1, char a2, void (*a3)(void *, uint64_t))
{
  if ((a2 & 1) != 0)
  {
    id v5 = a1;
    a3(a1, 1LL);
    sub_10049CCEC(a1, 1);
  }

  else
  {
    a3(0LL, 0LL);
  }

uint64_t sub_100493F00@<X0>( uint8_t *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(void), uint64_t *a11, void (*a12)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, dispatch_group_s *))
{
  unint64_t v147 = a9;
  uint64_t v133 = a4;
  uint64_t v134 = a6;
  uint64_t v132 = a5;
  uint64_t v141 = a3;
  unint64_t v142 = a2;
  uint64_t v15 = a10;
  uint64_t v127 = sub_100004AEC(a7);
  __chkstk_darwin(v127);
  uint64_t v124 = (uint64_t)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v135 = type metadata accessor for DispatchTime(0LL);
  uint64_t v131 = *(void *)(v135 - 8);
  uint64_t v17 = __chkstk_darwin(v135);
  uint64_t v129 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v130 = (char *)&v120 - v19;
  uint64_t v128 = a8;
  uint64_t v20 = sub_100004AEC(a8);
  __chkstk_darwin(v20);
  uint64_t v140 = (dispatch_group_s *)((char *)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = a10(0LL);
  uint64_t v138 = *(void *)(v22 - 8);
  uint64_t v139 = v22;
  __chkstk_darwin(v22);
  unint64_t v146 = (dispatch_group_s *)((char *)&v120 - v23);
  uint64_t v24 = type metadata accessor for UUID(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v123 = (char *)&v120 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v122 = (char *)&v120 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v126 = (char *)&v120 - v31;
  __chkstk_darwin(v30);
  os_log_type_t v33 = (char *)&v120 - v32;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v34 = a11;
  uint64_t v35 = type metadata accessor for Logger(0LL);
  uint64_t v36 = sub_10000A720(v35, (uint64_t)qword_100A2AAA0);
  uint64_t v37 = *(uint64_t (**)(char *, uint8_t *, uint64_t))(v25 + 16);
  uint64_t v145 = a1;
  uint64_t v143 = v37;
  uint64_t v38 = v37(v33, a1, v24);
  uint64_t v144 = v36;
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.default.getter(v39);
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v125 = a7;
  uint64_t v137 = a11;
  if (v41)
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t v136 = a10;
    uint64_t v44 = v43;
    v149[0] = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    uint64_t v121 = v42 + 4;
    uint64_t v45 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v24, v45);
    uint64_t v150 = sub_1003F11D4(v46, v47, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v121, v42 + 12);
    swift_bridgeObjectRelease();
    os_log_type_t v48 = *(void (**)(void))(v25 + 8);
    ((void (*)(char *, uint64_t))v48)(v33, v24);
    _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Executing synced modify operation with identifier: %s",  v42,  0xCu);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v49 = v44;
    uint64_t v15 = v136;
    swift_slowDealloc(v49, -1LL, -1LL);
    uint64_t v50 = v42;
    uint64_t v34 = v137;
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {
    os_log_type_t v48 = *(void (**)(void))(v25 + 8);
    ((void (*)(char *, uint64_t))v48)(v33, v24);
  }

  uint64_t v51 = v24;
  dispatch_group_t v52 = dispatch_group_create();
  uint64_t v53 = v140;
  v142();
  if ((*(unsigned int (**)(dispatch_group_s *, uint64_t, uint64_t))(v138 + 48))(v53, 1LL, v139) == 1)
  {
    sub_100015794((uint64_t)v53, v128);
    uint64_t v54 = v126;
    uint64_t v55 = v143(v126, v145, v51);
    unint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = static os_log_type_t.error.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc(12LL, -1LL);
      unint64_t v142 = v48;
      uint64_t v59 = (uint8_t *)v58;
      uint64_t v60 = v51;
      uint64_t v61 = swift_slowAlloc(32LL, -1LL);
      v149[0] = v61;
      unint64_t v146 = v52;
      *(_DWORD *)uint64_t v59 = 136315138;
      uint64_t v145 = v59 + 4;
      uint64_t v62 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v60, v62);
      uint64_t v150 = sub_1003F11D4(v63, v64, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v145, v59 + 12);
      swift_bridgeObjectRelease();
      dispatch_group_t v52 = v146;
      ((void (*)(char *, uint64_t))v142)(v54, v60);
      _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Synced modify operation with identifier: %s failed due to missing record.",  v59,  0xCu);
      swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);
    }

    else
    {
      ((void (*)(char *, uint64_t))v48)(v54, v51);
    }

    unint64_t v89 = sub_1000220F0();
    uint64_t v90 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v89, 0LL, 0LL);
    *uint64_t v91 = 11;

    unint64_t v92 = v147;
    *unint64_t v147 = v90;
    uint64_t v93 = sub_100004AEC(v34);
    return swift_storeEnumTagMultiPayload(v92, v93, 1LL);
  }

  else
  {
    unint64_t v142 = v48;
    uint64_t v65 = (uint64_t)v146;
    sub_10002218C((uint64_t)v53, (uint64_t)v146, v15);
    uint64_t v66 = swift_allocBox(v127);
    uint64_t v68 = v67;
    uint64_t v69 = sub_100004AEC(v34);
    uint64_t v138 = *(void *)(v69 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 56))(v68, 1LL, 1LL, v69);
    dispatch_group_enter(v52);
    swift_retain();
    uint64_t v70 = v52;
    a12(v65, 0LL, v132, v134, v133, v66, v70);
    uint64_t v141 = v66;
    swift_release(v66);

    uint64_t v71 = v129;
    static DispatchTime.now()(v72);
    uint64_t v73 = v130;
    + infix(_:_:)(v71, 120.0);
    uint64_t v74 = *(void (**)(char *, uint64_t))(v131 + 8);
    uint64_t v75 = v135;
    v74(v71, v135);
    uint64_t v140 = v70;
    uint64_t v76 = OS_dispatch_group.wait(timeout:)(v73) & 1;
    v74(v73, v75);
    if ((static DispatchTimeoutResult.== infix(_:_:)(v76, 1LL) & 1) != 0)
    {
      uint64_t v77 = v122;
      uint64_t v78 = v143(v122, v145, v51);
      uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
      os_log_type_t v80 = static os_log_type_t.error.getter(v79);
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v82 = swift_slowAlloc(32LL, -1LL);
        uint64_t v139 = v69;
        uint64_t v83 = v51;
        uint64_t v84 = v82;
        v149[0] = v82;
        uint64_t v136 = v15;
        *(_DWORD *)uint64_t v81 = 136315138;
        uint64_t v85 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter(v83, v85);
        uint64_t v150 = sub_1003F11D4(v86, v87, v149);
        uint64_t v15 = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v81 + 4, v81 + 12);
        swift_bridgeObjectRelease();
        uint64_t v88 = v83;
        uint64_t v69 = v139;
        ((void (*)(char *, uint64_t))v142)(v77, v88);
        _os_log_impl( (void *)&_mh_execute_header,  v79,  v80,  "Synced modify operation with identifier: %s failed due to timeout.",  v81,  0xCu);
        swift_arrayDestroy(v84, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1LL, -1LL);
        swift_slowDealloc(v81, -1LL, -1LL);
      }

      else
      {
        ((void (*)(char *, uint64_t))v142)(v77, v51);
      }

      type metadata accessor for SPSeparationMonitoringError(0LL);
      uint64_t v107 = v106;
      uint64_t v150 = 19LL;
      unint64_t v108 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v109 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
      _BridgedStoredNSError.init(_:userInfo:)(v149, &v150, v108, v107, v109);

      sub_100018C68((uint64_t)v146, v15);
      uint64_t v110 = v147;
      *unint64_t v147 = v149[0];
      swift_storeEnumTagMultiPayload(v110, v69, 1LL);
    }

    else
    {
      uint64_t v139 = v69;
      uint64_t v95 = v123;
      uint64_t v96 = v143(v123, v145, v51);
      unint64_t v97 = (os_log_s *)Logger.logObject.getter(v96);
      os_log_type_t v98 = static os_log_type_t.default.getter(v97);
      if (os_log_type_enabled(v97, v98))
      {
        double v99 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v100 = swift_slowAlloc(32LL, -1LL);
        uint64_t v136 = v15;
        uint64_t v101 = v100;
        v149[0] = v100;
        *(_DWORD *)double v99 = 136315138;
        uint64_t v145 = v99 + 4;
        uint64_t v102 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter(v51, v102);
        uint64_t v150 = sub_1003F11D4(v103, v104, v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v145, v99 + 12);
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v142)(v95, v51);
        _os_log_impl( (void *)&_mh_execute_header,  v97,  v98,  "Finished synced modify operation with identifier: %s.",  v99,  0xCu);
        swift_arrayDestroy(v101, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v105 = v101;
        uint64_t v15 = v136;
        swift_slowDealloc(v105, -1LL, -1LL);
        swift_slowDealloc(v99, -1LL, -1LL);
      }

      else
      {
        ((void (*)(char *, uint64_t))v142)(v95, v51);
      }

      swift_beginAccess(v68, v149, 0LL, 0LL);
      uint64_t v111 = v68;
      uint64_t v112 = v124;
      uint64_t v113 = v125;
      sub_10001581C(v111, v124, v125);
      uint64_t v114 = v139;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v138 + 48))(v112, 1LL, v139) == 1)
      {
        type metadata accessor for SPSeparationMonitoringError(0LL);
        uint64_t v116 = v115;
        uint64_t v148 = 0LL;
        unint64_t v117 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v118 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
        _BridgedStoredNSError.init(_:userInfo:)(&v150, &v148, v117, v116, v118);

        sub_100018C68((uint64_t)v146, v15);
        uint64_t v119 = v147;
        *unint64_t v147 = v150;
        swift_storeEnumTagMultiPayload(v119, v114, 1LL);
        sub_100015794(v112, v113);
      }

      else
      {
        sub_100018C68((uint64_t)v146, v15);

        sub_100015750(v112, (uint64_t)v147, v137);
      }
    }

    return swift_release(v141);
  }

Swift::Int sub_100494A8C(uint64_t a1, uint64_t a2)
{
  return sub_10001CCE8(a1, a2, 0xD000000000000043LL, 0x800000010084E770LL);
}

uint64_t sub_100494AA8(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000043LL, 0x800000010084E770LL);
}

Swift::Int sub_100494AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001CD74(a1, a2, a3, 0xD000000000000043LL, 0x800000010084E770LL);
}

uint64_t sub_100494AE0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_100935658;
  return sub_10001CDC8(v2, a1, a2);
}

void sub_100494AEC(void *a1@<X8>)
{
  *a1 = 0xD000000000000043LL;
  a1[1] = 0x800000010084E770LL;
}

Swift::Int sub_100494B0C(uint64_t a1, uint64_t a2)
{
  return sub_10001CCE8(a1, a2, 1819047278LL, 0xE400000000000000LL);
}

uint64_t sub_100494B1C(uint64_t a1)
{
  return String.hash(into:)(a1, 1819047278LL, 0xE400000000000000LL);
}

Swift::Int sub_100494B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001CD74(a1, a2, a3, 1819047278LL, 0xE400000000000000LL);
}

uint64_t sub_100494B3C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_100935620;
  return sub_10001CDC8(v2, a1, a2);
}

void sub_100494B48(void *a1@<X8>)
{
  *a1 = 1819047278LL;
  a1[1] = 0xE400000000000000LL;
}

uint64_t sub_100494B5C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100494B80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100494B90(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100494B98(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  __asm { BR              X10 }

uint64_t sub_100494E04(uint64_t a1)
{
  return sub_100490000(a1, *(void *)(v1 + 16));
}

uint64_t sub_100494E10()
{
  return sub_10049DCBC("Successfuly to unassigned %s from safe location with UUID: %s");
}

uint64_t sub_100494E1C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100493F00( *(uint8_t **)(v1 + 16),  *(void (**)(void))(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  &qword_1009AF758,  (uint64_t *)&unk_1009AF740,  a1,  type metadata accessor for SafeLocation,  (uint64_t *)&unk_1009AF730,  (void (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, dispatch_group_s *))sub_10055E06C);
}

Swift::Int sub_100494E74(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AC320);
  uint64_t v126 = *(void *)(v4 - 8);
  uint64_t v127 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v123 = (uint64_t)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v132 = (uint64_t)&v117 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v130 = (double *)((char *)&v117 - v10);
  __chkstk_darwin(v9);
  uint64_t v129 = (double *)((char *)&v117 - v11);
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_138;
    }
    if (v12) {
      return sub_100495850(0LL, v12, 1LL, a1);
    }
    return result;
  }

  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_146;
  }
  Swift::Int v119 = result;
  if (v12 < 2)
  {
    uint64_t v18 = (char *)_swiftEmptyArrayStorage;
    unint64_t v125 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v126 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
    uint64_t v118 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
LABEL_104:
      if (v20 >= 2)
      {
        uint64_t v110 = *a1;
        do
        {
          unint64_t v111 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_133;
          }
          if (!v110) {
            goto LABEL_145;
          }
          uint64_t v112 = v18;
          uint64_t v113 = *(void *)&v18[16 * v111 + 32];
          uint64_t v114 = *(void *)&v18[16 * v20 + 24];
          sub_100495A84( v110 + *(void *)(v126 + 72) * v113,  v110 + *(void *)(v126 + 72) * *(void *)&v18[16 * v20 + 16],  v110 + *(void *)(v126 + 72) * v114,  v125);
          if (v2) {
            break;
          }
          if (v114 < v113) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0) {
            uint64_t v112 = sub_1003CBA90((uint64_t)v18);
          }
          if (v111 >= *((void *)v112 + 2)) {
            goto LABEL_135;
          }
          uint64_t v115 = &v112[16 * v111 + 32];
          *(void *)uint64_t v115 = v113;
          *((void *)v115 + 1) = v114;
          unint64_t v116 = *((void *)v112 + 2);
          if (v20 > v116) {
            goto LABEL_136;
          }
          memmove(&v112[16 * v20 + 16], &v112[16 * v20 + 32], 16 * (v116 - v20));
          *((void *)v112 + 2) = v116 - 1;
          unint64_t v20 = v116 - 1;
          uint64_t v18 = v112;
        }

        while (v116 > 2);
      }

uint64_t sub_100495850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v28 = a1;
  uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009AC320);
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v33 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::Int v30 = (double *)((char *)&v26 - v10);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (double *)((char *)&v26 - v13);
  uint64_t v32 = a3;
  uint64_t v27 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v35 = v15 * (v32 - 1);
    uint64_t v31 = v15;
    uint64_t v34 = v15 * v32;
LABEL_5:
    uint64_t v16 = 0LL;
    uint64_t v17 = v28;
    while (1)
    {
      uint64_t v18 = *a4;
      sub_10001581C(v34 + v16 + *a4, (uint64_t)v14, (uint64_t *)&unk_1009AC320);
      uint64_t v19 = v35 + v16 + v18;
      unint64_t v20 = v30;
      sub_10001581C(v19, (uint64_t)v30, (uint64_t *)&unk_1009AC320);
      double v21 = *v14;
      double v22 = *v20;
      sub_100015794((uint64_t)v20, (uint64_t *)&unk_1009AC320);
      uint64_t result = sub_100015794((uint64_t)v14, (uint64_t *)&unk_1009AC320);
      if (v22 >= v21)
      {
LABEL_4:
        v35 += v31;
        v34 += v31;
        if (++v32 == v27) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v23 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v24 = v23 + v34 + v16;
      uint64_t v25 = v23 + v35 + v16;
      sub_100015750(v24, v33, (uint64_t *)&unk_1009AC320);
      swift_arrayInitWithTakeFrontToBack(v24, v25, 1LL, v29);
      uint64_t result = sub_100015750(v33, v25, (uint64_t *)&unk_1009AC320);
      v16 -= v31;
      if (v32 == ++v17) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100495A84(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AC320);
  uint64_t v8 = __chkstk_darwin(v41);
  uint64_t v10 = (double *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  uint64_t v12 = (double *)((char *)&v39 - v11);
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }

  if (a2 - a1 == 0x8000000000000000LL && v14 == -1) {
    goto LABEL_70;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v14 == -1) {
    goto LABEL_71;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v44 = a1;
  unint64_t v43 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000LL) == 0)
    {
      uint64_t v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v17, v41);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v28 = a4 + v19;
      unint64_t v42 = a4 + v19;
      unint64_t v44 = a2;
      unint64_t v40 = a1;
      if (v19 >= 1 && a1 < a2)
      {
        uint64_t v30 = -v14;
        do
        {
          unint64_t v31 = a3 + v30;
          sub_10001581C(v28 + v30, (uint64_t)v12, (uint64_t *)&unk_1009AC320);
          unint64_t v32 = a2 + v30;
          sub_10001581C(a2 + v30, (uint64_t)v10, (uint64_t *)&unk_1009AC320);
          double v33 = *v12;
          double v34 = *v10;
          sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009AC320);
          sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009AC320);
          if (v34 >= v33)
          {
            unint64_t v35 = v42;
            unint64_t v36 = v42 + v30;
            v42 += v30;
            if (a3 < v35 || v31 >= v35)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v30, v36, 1LL, v41);
            }

            else if (a3 != v35)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v30, v36);
            }

            unint64_t v32 = a2;
          }

          else
          {
            if (a3 < a2 || v31 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v30, a2 + v30, 1LL, v41);
            }

            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v30, a2 + v30);
            }

            v44 += v30;
          }

          unint64_t v28 = v42;
          if (v42 <= a4) {
            break;
          }
          a2 = v32;
          a3 += v30;
        }

        while (v32 > v40);
      }

      goto LABEL_68;
    }
  }

  else if ((v16 & 0x8000000000000000LL) == 0)
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v16, v41);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v40 = a4 + v18;
    unint64_t v42 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      do
      {
        sub_10001581C(a2, (uint64_t)v12, (uint64_t *)&unk_1009AC320);
        sub_10001581C(a4, (uint64_t)v10, (uint64_t *)&unk_1009AC320);
        double v21 = *v12;
        double v22 = *v10;
        sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009AC320);
        sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009AC320);
        unint64_t v23 = v44;
        if (v22 >= v21)
        {
          unint64_t v26 = v43 + v14;
          if (v44 < v43 || v44 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack(v44, v43, 1LL, v41);
          }

          else if (v44 != v43)
          {
            swift_arrayInitWithTakeBackToFront(v44, v43);
          }

          unint64_t v43 = v26;
          unint64_t v24 = a2;
        }

        else
        {
          unint64_t v24 = a2 + v14;
          if (v44 < a2 || v44 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v44, a2, 1LL, v41);
          }

          else if (v44 == a2)
          {
            unint64_t v23 = a2;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v44, a2);
          }
        }

        unint64_t v44 = v23 + v14;
        a4 = v43;
        if (v43 >= v40) {
          break;
        }
        a2 = v24;
      }

      while (v24 < a3);
    }

uint64_t sub_100495EF4(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }

  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1LL, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_1004C6628(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *uint64_t v3 = v5;
  }

  uint64_t v14 = type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v17 = *(void *)(v15 + 72);
  uint64_t v18 = v16 + v17 * a1;
  swift_arrayDestroy(v18, v8, v14);
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(v5 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_33;
  }
  if (v20 < 0)
  {
LABEL_35:
    char v28 = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v28,  1046LL,  0);
    __break(1u);
    return result;
  }

  unint64_t v21 = v18 + v17;
  unint64_t v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack(v21, v22, v20, v14);
  }

  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront(v21, v22);
  }

  uint64_t v24 = *(void *)(v5 + 16);
  BOOL v25 = __OFADD__(v24, v9);
  uint64_t v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v26;
LABEL_25:
  if (v17 >= 1) {
    sub_10001DC4C(a3, v18, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  }
  return sub_100015794(a3, &qword_1009AF930);
}

uint64_t sub_1004960C8(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A7D90);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32[3] = a3;
  v32[4] = a4;
  uint64_t v15 = sub_10000A7C8(v32);
  (*(void (**)(void *, uint64_t, unint64_t))(*(void *)(a3 - 8) + 16LL))(v15, a1, a3);
  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  uint64_t v16 = swift_retain();
  AnyCurrentValuePublisher.value.getter(v31, v16);
  swift_release();
  int v17 = LOBYTE(v31[0]);
  sub_100013044((uint64_t)v32, (uint64_t)v31);
  if (v17 != 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
LABEL_7:
    v30[0] = v8;
    unint64_t v21 = sub_100576FE0();
    uint64_t v22 = v21[2];
    uint64_t v23 = type metadata accessor for LeashRecord(0LL);
    uint64_t v24 = *(void *)(v23 - 8);
    if (v22)
    {
      sub_10001DC4C( (uint64_t)v21 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)),  (uint64_t)v14,  type metadata accessor for LeashRecord);
      uint64_t v25 = 0LL;
    }

    else
    {
      uint64_t v25 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v14, v25, 1LL, v23);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v14, 1LL, v23) == 1)
    {
      sub_100015794((uint64_t)v14, &qword_1009A7D90);
    }

    else
    {
      uint64_t v26 = *(void *)&v14[*(int *)(v23 + 24)];
      swift_bridgeObjectRetain(v26);
      sub_100018C68((uint64_t)v14, type metadata accessor for LeashRecord);
      uint64_t v27 = (*(uint64_t (**)(unint64_t))(*(void *)(a4[1] + 8LL) + 32LL))(a3);
      __chkstk_darwin(v27);
      v30[-2] = v11;
      BOOL v28 = sub_1004E98E4((uint64_t (*)(char *))sub_1002DDE40, (BOOL)&v30[-4], v26);
      (*(void (**)(char *, void))(v9 + 8))(v11, v30[0]);
      swift_bridgeObjectRelease();
      if (v28)
      {
        uint64_t v20 = 0LL;
        goto LABEL_15;
      }
    }

    uint64_t v20 = 2LL;
    goto LABEL_15;
  }

  uint64_t v18 = sub_100012ED8(v31, v31[3]);
  char v19 = sub_1004963A0((uint64_t)v18, a2, a3, a4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
  if ((v19 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v20 = 5LL;
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
  return v20;
}

uint64_t sub_1004963A0(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v129 = a2;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v125 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v124 = (uint64_t)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v132 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v134 = *(uint8_t **)(v132 - 8);
  uint64_t v9 = __chkstk_darwin(v132);
  uint64_t v133 = (uint64_t)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v117 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v117 - v14;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v126 = (uint64_t)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v117 - v19;
  uint64_t v21 = type metadata accessor for UUID(0LL);
  unint64_t v130 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v127 = (char *)&v117 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v128 = (char *)&v117 - v24;
  uint64_t v25 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v26 = __chkstk_darwin(v25);
  BOOL v28 = (char *)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v131 = (char *)&v117 - v29;
  v144[3] = a3;
  v144[4] = a4;
  uint64_t v30 = sub_10000A7C8(v144);
  (*(void (**)(void *, uint64_t, unint64_t))(*(void *)(a3 - 8) + 16LL))(v30, a1, a3);
  LOBYTE(a1) = ((uint64_t (*)(unint64_t, void *))a4[15])(a3, a4);
  sub_100013044((uint64_t)v144, (uint64_t)v143);
  if ((a1 & 1) != 0)
  {
    uint64_t v120 = v7;
    uint64_t v121 = v13;
    uint64_t v123 = v21;
    uint64_t v122 = v20;
    sub_100012ED8(v143, v143[3]);
    unint64_t v31 = (void *)((uint64_t (*)(unint64_t, void *))a4[22])(a3, a4);
    uint64_t v32 = SPBeaconTypeHele;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    uint64_t v35 = v34;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    if (v33 == v37 && v35 == v36)
    {

      swift_bridgeObjectRelease_n(v35, 2LL);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v143);
    }

    else
    {
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v36, 0LL);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v143);
      uint64_t v39 = 0LL;
      if ((v40 & 1) == 0) {
        goto LABEL_55;
      }
    }

    if (qword_10099B318 != -1) {
      goto LABEL_59;
    }
    while (1)
    {
      OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
      char v41 = sub_1006A1500(v140[0]);
      swift_bridgeObjectRelease();
      uint64_t v42 = v132;
      if ((v41 & 1) == 0)
      {
        uint64_t v39 = 0LL;
        goto LABEL_55;
      }

      unint64_t v43 = (void (*)(unint64_t, void *))a4[24];
      uint64_t v44 = (uint64_t)v131;
      unint64_t v119 = a3;
      uint64_t v118 = a4;
      v43(a3, a4);
      sub_10001581C(v44, (uint64_t)v28, &qword_10099D8A0);
      a3 = v130;
      uint64_t v45 = v123;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v28, 1LL, v123) == 1)
      {
        uint64_t v139 = 0LL;
        __int128 v138 = 0u;
        __int128 v137 = 0u;
        swift_retain();
      }

      else
      {
        uint64_t v46 = (uint64_t)v128;
        (*(void (**)(char *, char *, uint64_t))(a3 + 32))(v128, v28, v45);
        swift_retain();
        sub_100513108(v46, (uint64_t)&v137);
        uint64_t v47 = v46;
        uint64_t v44 = (uint64_t)v131;
        (*(void (**)(uint64_t, uint64_t))(a3 + 8))(v47, v45);
      }

      sub_100015794(v44, &qword_10099D8A0);
      swift_release();
      if (!*((void *)&v138 + 1))
      {
        sub_100015794((uint64_t)&v137, (uint64_t *)&unk_1009AA790);
        if (qword_10099B4C8 != -1) {
          swift_once(&qword_10099B4C8, sub_10047B404);
        }
        uint64_t v74 = type metadata accessor for Logger(0LL);
        sub_10000A720(v74, (uint64_t)qword_100A2AAA0);
        uint64_t v75 = sub_100013044((uint64_t)v144, (uint64_t)v140);
        uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
        os_log_type_t v77 = static os_log_type_t.default.getter(v76);
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v78 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v79 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v137 = v79;
          *(_DWORD *)uint64_t v78 = 136315138;
          uint64_t v134 = v78 + 4;
          sub_100012ED8(v140, v141);
          uint64_t v80 = v128;
          (*(void (**)(unint64_t))(*(void *)(v118[1] + 8LL) + 32LL))(v119);
          uint64_t v81 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v82 = v123;
          uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter(v123, v81);
          unint64_t v85 = v84;
          (*(void (**)(char *, uint64_t))(a3 + 8))(v80, v82);
          uint64_t v136 = sub_1003F11D4(v83, v85, (uint64_t *)&v137);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v134, v78 + 12);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
          _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "Can't monitor beacon: %s due to: airpods but missing beacon group.",  v78,  0xCu);
          swift_arrayDestroy(v79, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v79, -1LL, -1LL);
          swift_slowDealloc(v78, -1LL, -1LL);
        }

        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
        }

        goto LABEL_54;
      }

      sub_100012EC0(&v137, (uint64_t)v140);
      if (qword_10099B300 != -1) {
        swift_once(&qword_10099B300, sub_1003459EC);
      }
      uint64_t v48 = qword_100A2A6C8;
      uint64_t v49 = v141;
      uint64_t v50 = v142;
      sub_100012ED8(v140, v141);
      uint64_t v51 = (uint64_t)v127;
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v50);
      uint64_t v52 = objc_autoreleasePoolPush();
      sub_100346B24(v48, v51, 0LL, 0LL, &v137);
      uint64_t v129 = 0LL;
      objc_autoreleasePoolPop(v52);
      BOOL v28 = (char *)v137;
      uint64_t v53 = v123;
      unint64_t v130 = *(void *)(a3 + 8);
      ((void (*)(uint64_t, uint64_t))v130)(v51, v123);
      uint64_t v54 = _swiftEmptyArrayStorage;
      *(void *)&__int128 v137 = _swiftEmptyArrayStorage;
      uint64_t v131 = (char *)*((void *)v28 + 2);
      if (!v131) {
        break;
      }
      unint64_t v55 = 0LL;
      a4 = _swiftEmptyArrayStorage;
      while (v55 < *((void *)v28 + 2))
      {
        a3 = (v134[80] + 32LL) & ~(unint64_t)v134[80];
        uint64_t v56 = *((void *)v134 + 9);
        sub_10001DC4C((uint64_t)&v28[a3 + v56 * v55], (uint64_t)v15, type metadata accessor for BeaconObservation);
        sub_1001D6134();
        uint64_t v136 = Set.init(minimumCapacity:)(2LL);
        sub_1000BE44C(&v135, 37LL);
        sub_1000BE44C(&v135, 38LL);
        BOOL v57 = sub_1004E55A0(v15[*(int *)(v42 + 24)], v136);
        swift_bridgeObjectRelease();
        if (v57)
        {
          sub_10002218C((uint64_t)v15, v133, type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native(a4) & 1) == 0) {
            sub_100032AA8(0, a4[2] + 1LL, 1);
          }
          a4 = (void *)v137;
          unint64_t v59 = *(void *)(v137 + 16);
          unint64_t v58 = *(void *)(v137 + 24);
          if (v59 >= v58 >> 1)
          {
            sub_100032AA8(v58 > 1, v59 + 1, 1);
            a4 = (void *)v137;
          }

          a4[2] = v59 + 1;
          sub_10002218C(v133, (uint64_t)a4 + a3 + v59 * v56, type metadata accessor for BeaconObservation);
          uint64_t v42 = v132;
        }

        else
        {
          sub_100018C68((uint64_t)v15, type metadata accessor for BeaconObservation);
        }

        if (v131 == (char *)++v55)
        {
          uint64_t v54 = (void *)v137;
          uint64_t v53 = v123;
          goto LABEL_29;
        }
      }

      __break(1u);
LABEL_59:
      swift_once(&qword_10099B318, sub_100352F58);
    }

uint64_t sub_1004974CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v94 = (uint64_t)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v97 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v95 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v96 = (char *)&v89 - v20;
  v102[3] = a3;
  v102[4] = a4;
  uint64_t v21 = sub_10000A7C8(v102);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(v21, a1, a3);
  if ((sub_10049803C((uint64_t)v21, a2, a3, a4) & 1) == 0)
  {
    uint64_t v36 = a4;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_10000A720(v37, (uint64_t)qword_100A2AAA0);
    uint64_t v38 = sub_100013044((uint64_t)v102, (uint64_t)v100);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v27 = 141558275;
      uint64_t v98 = 1752392040LL;
      uint64_t v99 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v27 + 4, v27 + 12);
      *(_WORD *)(v27 + 12) = 2081;
      sub_100012ED8(v100, v101);
      uint64_t v39 = *(void (**)(uint64_t))(*(void *)(*(void *)(v36 + 8) + 8LL) + 32LL);
      char v40 = v96;
      v39(a3);
      uint64_t v41 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v17, v41);
      unint64_t v44 = v43;
      (*(void (**)(char *, uint64_t))(v97 + 8))(v40, v17);
      uint64_t v98 = sub_1003F11D4(v42, v44, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
      uint64_t v35 = "Can't monitor beacon: %{private,mask.hash}s due to: unsupported beacon.";
      goto LABEL_11;
    }

uint64_t sub_10049803C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v9);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 176))(a3, a4);
  uint64_t v11 = SPBeaconTypeVirtualMeDevice;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v14 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  if (v12 == v15 && v14 == v16)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0LL);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v19 = 0;
  if ((v18 & 1) == 0)
  {
    uint64_t v20 = sub_10047A494((uint64_t)v9, *(void *)(a2 + 256), a3, a4);
    if ((sub_1004E4F28(8u, (uint64_t)v20) & 1) != 0)
    {
      char v19 = sub_1004E4F28(9u, (uint64_t)v20);
LABEL_10:
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

void *sub_1004981A4(uint64_t a1, uint64_t a2)
{
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = a1 + 32;
    do
    {
      sub_100013044(v6, (uint64_t)&v22);
      unint64_t v7 = v23;
      uint64_t v8 = v24;
      uint64_t v9 = sub_100012ED8(&v22, v23);
      if ((sub_1004963A0((uint64_t)v9, a2, v7, v8) & 1) != 0)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v22);
      }

      else
      {
        sub_100012EC0(&v22, (uint64_t)v19);
        uint64_t v10 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
        {
          sub_100032928(0, v10[2] + 1LL, 1);
          uint64_t v10 = v25;
        }

        unint64_t v12 = v10[2];
        unint64_t v11 = v10[3];
        if (v12 >= v11 >> 1) {
          sub_100032928(v11 > 1, v12 + 1, 1);
        }
        uint64_t v13 = v20;
        uint64_t v14 = v21;
        uint64_t v15 = sub_100037298((uint64_t)v19, v20);
        __chkstk_darwin(v15);
        uint64_t v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v18 + 16))(v17);
        sub_1002BBA60(v12, (uint64_t)v17, (uint64_t *)&v25, v13, v14);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
      }

      v6 += 40LL;
      --v4;
    }

    while (v4);
    return v25;
  }

  return result;
}

void *sub_100498334(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009AC320);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v9 = (double *)((char *)v17 - v8);
  uint64_t result = _swiftEmptyArrayStorage;
  char v19 = _swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v17[1] = v1;
    uint64_t v12 = *(void *)(v7 + 72);
    unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v13 = a1 + v18;
    uint64_t v14 = _swiftEmptyArrayStorage;
    do
    {
      sub_10001581C(v13, (uint64_t)v9, (uint64_t *)&unk_1009AC320);
      if (*v9 <= 0.5)
      {
        sub_100015794((uint64_t)v9, (uint64_t *)&unk_1009AC320);
      }

      else
      {
        sub_100015750((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_1009AC320);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
          sub_1000333D0(0, v14[2] + 1LL, 1);
        }
        uint64_t v14 = v19;
        unint64_t v16 = v19[2];
        unint64_t v15 = v19[3];
        if (v16 >= v15 >> 1)
        {
          sub_1000333D0(v15 > 1, v16 + 1, 1);
          uint64_t v14 = v19;
        }

        v14[2] = v16 + 1;
        sub_100015750((uint64_t)v6, (uint64_t)v14 + v18 + v16 * v12, (uint64_t *)&unk_1009AC320);
      }

      v13 += v12;
      --v11;
    }

    while (v11);
    return v19;
  }

  return result;
}

void *sub_1004984E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    uint64_t v6 = (void *)(a1 + 32);
    do
    {
      uint64_t v7 = v6[3];
      uint64_t v8 = v6[4];
      uint64_t v9 = sub_100012ED8(v6, v7);
      uint64_t v10 = sub_10054A858((uint64_t)v9, a2, v7, v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      uint64_t v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
      specialized ContiguousArray._endMutation()(v12);
      v6 += 5;
      --v3;
    }

    while (v3);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_1004985B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v51 + 64);
  __chkstk_darwin(v7);
  uint64_t v9 = sub_100004AEC(&qword_1009AF7F8);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v14)
  {
    uint64_t v40 = v3;
    uint64_t v54 = _swiftEmptyArrayStorage;
    uint64_t v49 = v11;
    uint64_t v50 = v10;
    specialized ContiguousArray.reserveCapacity(_:)(v14);
    uint64_t v16 = type metadata accessor for SafeLocation(0LL);
    uint64_t v47 = v7;
    uint64_t v48 = v16;
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    uint64_t v45 = *(void *)(v17 + 72);
    uint64_t v46 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    char v19 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
    uint64_t v43 = v8 + 7;
    unint64_t v44 = v19;
    uint64_t v41 = a2;
    uint64_t v42 = a3;
    uint64_t v20 = v46;
    uint64_t v21 = v7;
    uint64_t v22 = v51;
    do
    {
      uint64_t v52 = v18;
      v44(v20, v18 + *(int *)(v48 + 20), v21);
      uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
      uint64_t v24 = (v23 + 24) & ~v23;
      unint64_t v25 = (v43 + v24) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v26 = swift_allocObject(&unk_10095DAD8, v25 + 8, v23 | 7);
      uint64_t v27 = v14;
      *(void *)(v26 + swift_weakDestroy(v0 + 16) = v41;
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v26 + v24, v20, v21);
      uint64_t v28 = v42;
      *(void *)(v26 + v25) = v42;
      swift_retain();
      swift_bridgeObjectRetain(v28);
      uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009AF7A0);
      uint64_t v30 = sub_1000372EC( &qword_1009AF800,  (uint64_t *)&unk_1009AF7A0,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      Deferred.init(createPublisher:)(sub_10049D910, v26, v29, v30);
      uint64_t v31 = sub_1000372EC(&qword_1009AF808, &qword_1009AF7F8, (uint64_t)&protocol conformance descriptor for Deferred<A>);
      uint64_t v32 = v50;
      uint64_t v33 = Publisher.eraseToAnyPublisher()(v50, v31);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v32);
      uint64_t v53 = v33;
      uint64_t v34 = sub_100004AEC(&qword_1009AF7C8);
      uint64_t v35 = sub_1000372EC( &qword_1009AF7D8,  &qword_1009AF7C8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      uint64_t v36 = Publisher.eraseToAnyPublisher()(v34, v35);
      uint64_t v37 = swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v37);
      uint64_t v38 = v54[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v38);
      uint64_t v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v36);
      specialized ContiguousArray._endMutation()(v39);
      uint64_t v18 = v52 + v45;
      --v14;
    }

    while (v27 != 1);
    return v54;
  }

  return result;
}

void *sub_1004988A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_100004AEC(&qword_1009AF8D0);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v12)
  {
    v27[1] = v4;
    uint64_t v32 = _swiftEmptyArrayStorage;
    uint64_t v30 = v12;
    specialized ContiguousArray.reserveCapacity(_:)(v12);
    uint64_t v14 = a1 + 32;
    do
    {
      sub_100013044(v14, (uint64_t)v31);
      uint64_t v15 = swift_allocObject(&unk_10095E0A0, 128LL, 7LL);
      *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
      __int128 v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v15 + 24) = *(_OWORD *)a3;
      *(_OWORD *)(v15 + 40) = v16;
      *(_OWORD *)(v15 + 56) = *(_OWORD *)(a3 + 32);
      *(void *)(v15 + 72) = *(void *)(a3 + 48);
      *(void *)(v15 + 80) = a4;
      sub_100012EC0(v31, v15 + 88);
      swift_retain();
      sub_10049F190((void *)a3);
      swift_retain();
      uint64_t v17 = sub_100004AEC(&qword_1009AF8D8);
      uint64_t v18 = sub_1000372EC( &qword_1009AF8E0,  &qword_1009AF8D8,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      Deferred.init(createPublisher:)(sub_10049F27C, v15, v17, v18);
      uint64_t v19 = sub_1000372EC(&qword_1009AF8E8, &qword_1009AF8D0, (uint64_t)&protocol conformance descriptor for Deferred<A>);
      uint64_t v29 = Publisher.eraseToAnyPublisher()(v9, v19);
      uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v11, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      uint64_t v21 = v9;
      uint64_t v22 = a2;
      uint64_t v23 = a4;
      uint64_t v24 = v32[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
      uint64_t v25 = v24;
      a4 = v23;
      a2 = v22;
      uint64_t v9 = v21;
      uint64_t v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v29);
      specialized ContiguousArray._endMutation()(v26);
      v14 += 40LL;
      --v30;
    }

    while (v30);
    return v32;
  }

  return result;
}

void *sub_100498AB4(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v53 = *(void *)(v5 - 8);
  uint64_t v54 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AC320);
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (double *)((char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v49 = v2;
    char v55 = _swiftEmptyArrayStorage;
    sub_1000333D0(0, v11, 0);
    uint64_t v13 = type metadata accessor for SafeLocation(0LL);
    uint64_t v14 = (int *)v13;
    uint64_t v15 = *(void *)(v13 - 8);
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v50 = *(void *)(v15 + 72);
    do
    {
      double v17 = *(double *)(v16 + v14[8]);
      double v18 = *(double *)(v16 + v14[9]);
      uint64_t v19 = v14[10];
      double v20 = *(double *)(v16 + v19);
      Date.init()(v13);
      id v21 = objc_allocWithZone(&OBJC_CLASS___CLLocation);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      id v23 = objc_msgSend( v21,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:",  isa,  v17,  v18,  0.0,  v20,  v20,  -1.0,  -1.0,  -1.0,  0xBFF0000000000000);

      (*(void (**)(char *, uint64_t))(v53 + 8))(v7, v54);
      [v23 setReferenceFrame:*(unsigned __int8 *)(v16 + v14[11])];
      [v23 coordinate];
      double v25 = v24;
      double v27 = v26;

      double v28 = *(double *)(v16 + v19);
      UUID.uuidString.getter(v29);
      id v30 = objc_allocWithZone(&OBJC_CLASS___CLCircularRegion);
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v32 = objc_msgSend(v30, "initWithCenter:radius:identifier:", v31, v25, v27, v28);

      sub_10061CB88(v32);
      double v34 = v33;
      [a2 radius];
      double v36 = v35;
      [a2 radius];
      double v38 = v36 * v37 * 3.14159265;
      [v32 radius];
      double v40 = v39;
      [v32 radius];
      double v42 = v41;

      double v43 = v40 * v42 * 3.14159265;
      if (v43 >= v38) {
        double v43 = v38;
      }
      if (v43 <= 0.0) {
        double v44 = 0.0;
      }
      else {
        double v44 = v34 / v43;
      }
      uint64_t v45 = (uint64_t)v10 + *(int *)(v52 + 48);
      *uint64_t v10 = v44;
      sub_10001DC4C(v16, v45, type metadata accessor for SafeLocation);
      uint64_t v12 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
      {
        sub_1000333D0(0, v12[2] + 1LL, 1);
        uint64_t v12 = v55;
      }

      unint64_t v47 = v12[2];
      unint64_t v46 = v12[3];
      if (v47 >= v46 >> 1)
      {
        sub_1000333D0(v46 > 1, v47 + 1, 1);
        uint64_t v12 = v55;
      }

      v12[2] = v47 + 1;
      uint64_t v13 = sub_100015750( (uint64_t)v10,  (uint64_t)v12 + ((*(unsigned __int8 *)(v51 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))
            + *(void *)(v51 + 72) * v47,
              (uint64_t *)&unk_1009AC320);
      v16 += v50;
      --v11;
    }

    while (v11);
  }

  return v12;
}

uint64_t sub_100498E5C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v7 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v5 < 0) {
    uint64_t v24 = v5;
  }
  else {
    uint64_t v24 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease();
  if (v7 < v2) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0LL, v5))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v9 = v8 - v5;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0) {
      uint64_t v26 = v7;
    }
    else {
      uint64_t v26 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease();
    uint64_t v7 = *v3;
    goto LABEL_15;
  }

void *sub_100499154(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = (void *)*v2;
  int64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1004C4FBC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }

  uint64_t result = (void *)swift_arrayDestroy(&v4[2 * a1 + 4], v7, &type metadata for Data);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *uint64_t v2 = v4;
      return result;
    }

    goto LABEL_27;
  }

void sub_1004992BC(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v6 = swift_allocObject(&unk_10095E398, 24LL, 7LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  void v19[3] = My;
  v19[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v8 = sub_10000A7C8(v19);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v8,  enum case for Feature.FindMy.separationAlerts(_:),  My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)(v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
  if ((My & 1) != 0)
  {
    uint64_t v9 = swift_allocObject(&unk_10095E3C0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v9 + 16, a2);
    uint64_t v10 = (void *)swift_allocObject(&unk_10095E3E8, 48LL, 7LL);
    v10[2] = v9;
    v10[3] = sub_10049F730;
    v10[4] = v6;
    v10[5] = a1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(a1);
    sub_10047B920( v11,  (uint64_t)sub_10049F4C0,  (uint64_t)v10,  (uint64_t)&unk_10095D2E0,  (uint64_t)sub_10049CB18,  (uint64_t)&unk_10095D2F8);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v13 = v12;
    uint64_t v18 = 1LL;
    unint64_t v14 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v15 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(v19, &v18, v14, v13, v15);
    uint64_t v16 = (void *)v19[0];
    uint64_t v17 = (void *)_convertErrorToNSError(_:)(v19[0]);
    ((void (**)(void, void, void *))a3)[2](a3, 0LL, v17);
    swift_release();
  }

void sub_1004994D0(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v5 = swift_allocObject(&unk_10095E348, 24LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v16[3] = My;
  v16[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v7 = sub_10000A7C8(v16);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v7,  enum case for Feature.FindMy.separationAlerts(_:),  My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)(v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
  if ((My & 1) != 0)
  {
    uint64_t v8 = swift_allocObject(&unk_10095E370, 32LL, 7LL);
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = sub_10049F730;
    *(void *)(v8 + 24) = v5;
    swift_retain();
    sub_10047B920( a1,  (uint64_t)sub_10049F90C,  v8,  (uint64_t)&unk_10095D0B0,  (uint64_t)sub_10049CA04,  (uint64_t)&unk_10095D0C8);
    swift_release();
    swift_release();
  }

  else
  {
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v10 = v9;
    uint64_t v15 = 1LL;
    unint64_t v11 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v12 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(v16, &v15, v11, v10, v12);
    uint64_t v13 = (void *)v16[0];
    unint64_t v14 = (void *)_convertErrorToNSError(_:)(v16[0]);
    ((void (**)(void, void, void *))a3)[2](a3, 0LL, v14);
    swift_release();
  }

void sub_1004996A8(void *a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v5 = type metadata accessor for SafeLocation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = swift_allocObject(&unk_10095E2F8, 24LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  void v19[3] = My;
  v19[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v10 = sub_10000A7C8(v19);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v10,  enum case for Feature.FindMy.separationAlerts(_:),  My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)(v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
  if ((My & 1) != 0)
  {
    sub_10061A2A4(a1, v7);
    uint64_t v11 = swift_allocObject(&unk_10095E320, 32LL, 7LL);
    *(void *)(v11 + swift_weakDestroy(v0 + 16) = sub_10049F730;
    *(void *)(v11 + 24) = v8;
    swift_retain();
    sub_10047BBBC((uint64_t)v7, 0, (uint64_t)sub_10049F90C, v11);
    swift_release();
    sub_100018C68((uint64_t)v7, type metadata accessor for SafeLocation);
    swift_release();
  }

  else
  {
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v13 = v12;
    uint64_t v18 = 1LL;
    unint64_t v14 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v15 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(v19, &v18, v14, v13, v15);
    uint64_t v16 = (void *)v19[0];
    uint64_t v17 = (void *)_convertErrorToNSError(_:)(v19[0]);
    ((void (**)(void, void, void *))a3)[2](a3, 0LL, v17);
    swift_release();
  }

void sub_1004998BC(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v5 = swift_allocObject(&unk_10095E2A8, 24LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v16[3] = My;
  v16[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v7 = sub_10000A7C8(v16);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v7,  enum case for Feature.FindMy.separationAlerts(_:),  My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)(v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
  if ((My & 1) != 0)
  {
    uint64_t v8 = swift_allocObject(&unk_10095E2D0, 32LL, 7LL);
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = sub_10049F730;
    *(void *)(v8 + 24) = v5;
    swift_retain();
    sub_10047BE54(a1, (uint64_t)sub_10049F90C, v8);
    swift_release();
    swift_release();
  }

  else
  {
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v10 = v9;
    uint64_t v15 = 1LL;
    unint64_t v11 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v12 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(v16, &v15, v11, v10, v12);
    uint64_t v13 = (void *)v16[0];
    unint64_t v14 = (void *)_convertErrorToNSError(_:)(v16[0]);
    ((void (**)(void, void, void *))a3)[2](a3, 0LL, v14);
    swift_release();
  }

void sub_100499A7C(void *a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v5 = type metadata accessor for SafeLocation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = swift_allocObject(&unk_10095E258, 24LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  void v19[3] = My;
  v19[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v10 = sub_10000A7C8(v19);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v10,  enum case for Feature.FindMy.separationAlerts(_:),  My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)(v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
  if ((My & 1) != 0)
  {
    sub_10061A2A4(a1, v7);
    uint64_t v11 = swift_allocObject(&unk_10095E280, 32LL, 7LL);
    *(void *)(v11 + swift_weakDestroy(v0 + 16) = sub_10049F730;
    *(void *)(v11 + 24) = v8;
    swift_retain();
    sub_10047C1B4((uint64_t)v7, (uint64_t)sub_10049F90C, v11);
    swift_release();
    sub_100018C68((uint64_t)v7, type metadata accessor for SafeLocation);
    swift_release();
  }

  else
  {
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v13 = v12;
    uint64_t v18 = 1LL;
    unint64_t v14 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v15 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(v19, &v18, v14, v13, v15);
    uint64_t v16 = (void *)v19[0];
    uint64_t v17 = (void *)_convertErrorToNSError(_:)(v19[0]);
    ((void (**)(void, void, void *))a3)[2](a3, 0LL, v17);
    swift_release();
  }

void sub_100499C8C(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v7 = swift_allocObject(&unk_10095E208, 24LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v18[3] = My;
  v18[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v9 = sub_10000A7C8(v18);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v9,  enum case for Feature.FindMy.separationAlerts(_:),  My);
  _Block_copy(a4);
  LOBYTE(My) = isFeatureEnabled(_:)(v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
  if ((My & 1) != 0)
  {
    uint64_t v10 = swift_allocObject(&unk_10095E230, 32LL, 7LL);
    *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_10049F730;
    *(void *)(v10 + 24) = v7;
    swift_retain();
    sub_10047C458( a1,  a2,  (uint64_t)sub_10049F90C,  v10,  (uint64_t)&unk_10095DB78,  (uint64_t)sub_10049DB04,  (uint64_t)&unk_10095DB90);
    swift_release();
    swift_release();
  }

  else
  {
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v12 = v11;
    uint64_t v17 = 1LL;
    unint64_t v13 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v14 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(v18, &v17, v13, v12, v14);
    uint64_t v15 = (void *)v18[0];
    uint64_t v16 = (void *)_convertErrorToNSError(_:)(v18[0]);
    ((void (**)(void, void, void *))a4)[2](a4, 0LL, v16);
    swift_release();
  }

void sub_100499E74(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v7 = swift_allocObject(&unk_10095E1B8, 24LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v18[3] = My;
  v18[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v9 = sub_10000A7C8(v18);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v9,  enum case for Feature.FindMy.separationAlerts(_:),  My);
  _Block_copy(a4);
  LOBYTE(My) = isFeatureEnabled(_:)(v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
  if ((My & 1) != 0)
  {
    uint64_t v10 = swift_allocObject(&unk_10095E1E0, 32LL, 7LL);
    *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_10049F730;
    *(void *)(v10 + 24) = v7;
    swift_retain();
    sub_10047C458( a1,  a2,  (uint64_t)sub_10049F90C,  v10,  (uint64_t)&unk_10095D060,  (uint64_t)sub_10049C9F4,  (uint64_t)&unk_10095D078);
    swift_release();
    swift_release();
  }

  else
  {
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v12 = v11;
    uint64_t v17 = 1LL;
    unint64_t v13 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v14 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(v18, &v17, v13, v12, v14);
    uint64_t v15 = (void *)v18[0];
    uint64_t v16 = (void *)_convertErrorToNSError(_:)(v18[0]);
    ((void (**)(void, void, void *))a4)[2](a4, 0LL, v16);
    swift_release();
  }

uint64_t sub_10049A05C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*sub_100012ED8( (void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24))
                 + 192LL))
  {
    uint64_t v3 = swift_retain();
    CurrentValueSubject.value.getter(&v6, v3);
    swift_release();
    uint64_t v4 = qword_100804610[(char)v6];
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v4);
}

void sub_10049A0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SafeLocation(0LL);
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v10 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v54[3] = My;
  v54[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v14 = sub_10000A7C8(v54);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v14,  enum case for Feature.FindMy.separationAlerts(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(v54);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
  if ((My & 1) == 0)
  {
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v26 = v25;
    uint64_t v53 = 1LL;
    unint64_t v27 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v28 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(v54, &v53, v27, v26, v28);
    uint64_t v29 = (void *)v54[0];
    sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
    sub_10014EFD4((unint64_t *)&qword_1009A7D80, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    char v31 = (void *)_convertErrorToNSError(_:)(v29);
    (*(void (**)(uint64_t, Class, void *))(a2 + 16))(a2, isa, v31);

    return;
  }

  uint64_t v50 = a2;
  sub_100012ED8( (void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL);
  uint64_t v49 = v12;
  v16(v12, 1LL, 1LL, v15);
  uint64_t v17 = sub_100576844();
  uint64_t v51 = v17[2];
  if (v51)
  {
    unint64_t v18 = 0LL;
    char v19 = _swiftEmptyArrayStorage;
    while (v18 < v17[2])
    {
      unint64_t v20 = (*(unsigned __int8 *)(v52 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      uint64_t v21 = *(void *)(v52 + 72);
      sub_10001DC4C((uint64_t)v17 + v20 + v21 * v18, (uint64_t)v9, type metadata accessor for SafeLocation);
      sub_10002218C((uint64_t)v9, (uint64_t)v7, type metadata accessor for SafeLocation);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      v54[0] = (uint64_t)v19;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100032BF0(0, v19[2] + 1LL, 1);
        char v19 = (void *)v54[0];
      }

      unint64_t v24 = v19[2];
      unint64_t v23 = v19[3];
      if (v24 >= v23 >> 1)
      {
        sub_100032BF0(v23 > 1, v24 + 1, 1);
        char v19 = (void *)v54[0];
      }

      ++v18;
      void v19[2] = v24 + 1;
      sub_10002218C((uint64_t)v7, (uint64_t)v19 + v20 + v24 * v21, type metadata accessor for SafeLocation);
      if (v51 == v18) {
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
    char v19 = _swiftEmptyArrayStorage;
LABEL_13:
    uint64_t v32 = swift_bridgeObjectRelease();
    __chkstk_darwin(v32);
    uint64_t v33 = (uint64_t)v49;
    *(&v48 - 2) = (uint64_t)v49;
    uint64_t v34 = sub_100023CDC((uint64_t (*)(char *))sub_1002DDE28, &v48 - 4, (uint64_t)v19);
    uint64_t v7 = sub_10028D078(v34);
    swift_bridgeObjectRelease();
    sub_100015794(v33, &qword_10099D8A0);
    if (qword_10099B4C8 == -1) {
      goto LABEL_14;
    }
  }

  swift_once(&qword_10099B4C8, sub_10047B404);
LABEL_14:
  uint64_t v35 = type metadata accessor for Logger(0LL);
  sub_10000A720(v35, (uint64_t)qword_100A2AAA0);
  swift_bridgeObjectRetain_n(v7, 2LL);
  double v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    double v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    v54[0] = v40;
    *(_DWORD *)double v39 = 136315138;
    uint64_t v41 = sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
    swift_bridgeObjectRetain(v7);
    uint64_t v43 = Array.description.getter(v42, v41);
    unint64_t v45 = v44;
    swift_bridgeObjectRelease();
    uint64_t v53 = sub_1003F11D4(v43, v45, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease_n(v7, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Known safe locations: %s", v39, 0xCu);
    swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  uint64_t v46 = v50;
  sub_1006F138C((uint64_t)v7);
  swift_bridgeObjectRelease();
  sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
  sub_10014EFD4((unint64_t *)&qword_1009A7D80, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
  Class v47 = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(v46 + 16))(v46, v47, 0LL);
  swift_bridgeObjectRelease();
}

void sub_10049A6E8(uint64_t a1, void *a2, char *a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A7D90);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(a1 + 192))
  {
    _Block_copy(a3);
    _Block_copy(a3);
    _Block_copy(a3);
LABEL_9:
    if (qword_10099B4C8 == -1) {
      goto LABEL_10;
    }
    goto LABEL_56;
  }

  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  uint64_t v9 = swift_retain();
  CurrentValueSubject.value.getter(&v108, v9);
  swift_release();
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  unint64_t v102 = a2;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v10 = (void *)sub_1006A0E1C(v108);
  swift_bridgeObjectRelease();
  uint64_t v11 = SPServiceStateEnabled;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v14 = v13;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  if (v12 == v16 && v14 == v15)
  {

    swift_bridgeObjectRelease_n(v14, 2LL);
  }

  else
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v16, v15, 0LL);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      if (qword_10099B4C8 != -1) {
        swift_once(&qword_10099B4C8, sub_10047B404);
      }
      uint64_t v91 = type metadata accessor for Logger(0LL);
      uint64_t v92 = sub_10000A720(v91, (uint64_t)qword_100A2AAA0);
      uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
      os_log_type_t v94 = static os_log_type_t.error.getter(v93);
      if (os_log_type_enabled(v93, v94))
      {
        uint64_t v95 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v95 = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "BA service not enabled.", v95, 2u);
        swift_slowDealloc(v95, -1LL, -1LL);
      }

      _Block_copy(a3);
      uint64_t v96 = v102;
      uint64_t v97 = sub_10047C81C((uint64_t)_swiftEmptyArrayStorage);
      sub_1006F16D4(v97);
      swift_bridgeObjectRelease();
      sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
      sub_10014EFD4( (unint64_t *)&qword_1009A4A10,  (unint64_t *)&unk_1009A0B20,  &OBJC_CLASS___SPBeacon_ptr);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      (*((void (**)(char *, Class))a3 + 2))(a3, isa);
      swift_bridgeObjectRelease();

      _Block_release(a3);
      goto LABEL_54;
    }
  }

  uint64_t v26 = sub_100576FE0();
  uint64_t v27 = v26[2];
  uint64_t v28 = type metadata accessor for LeashRecord(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  if (v27)
  {
    sub_10001DC4C( (uint64_t)v26 + ((*(unsigned __int8 *)(v29 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80)),  (uint64_t)v8,  type metadata accessor for LeashRecord);
    uint64_t v30 = 0LL;
  }

  else
  {
    uint64_t v30 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v8, v30, 1LL, v28);
  swift_bridgeObjectRelease();
  int v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v8, 1LL, v28);
  uint64_t v100 = a3;
  if (v43 == 1)
  {
    sub_100015794((uint64_t)v8, &qword_1009A7D90);
    unint64_t v44 = _swiftEmptyArrayStorage;
  }

  else
  {
    unint64_t v44 = *(void **)&v8[*(int *)(v28 + 24)];
    swift_bridgeObjectRetain(v44);
    sub_100018C68((uint64_t)v8, type metadata accessor for LeashRecord);
  }

  swift_retain();
  uint64_t v101 = v44;
  a2 = sub_1002C428C((uint64_t)v44);
  swift_release();
  unint64_t v45 = _swiftEmptyArrayStorage;
  uint64_t v111 = _swiftEmptyArrayStorage;
  a3 = (char *)a2[2];
  swift_retain();
  if (a3)
  {
    uint64_t v103 = 0LL;
    uint64_t v46 = 0LL;
    uint64_t v47 = (uint64_t)(a2 + 4);
    uint64_t v48 = a2;
    while ((unint64_t)v46 < a2[2])
    {
      sub_100013044(v47, (uint64_t)&v108);
      uint64_t v49 = v109;
      uint64_t v50 = v110;
      uint64_t v51 = sub_100012ED8(&v108, v109);
      if ((sub_1004974CC((uint64_t)v51, a1, v49, v50) & 1) != 0)
      {
        sub_100012EC0(&v108, (uint64_t)&v104);
        uint64_t v52 = v111;
        if ((swift_isUniquelyReferenced_nonNull_native(v111) & 1) == 0)
        {
          sub_100032928(0, v52[2] + 1LL, 1);
          uint64_t v52 = v111;
        }

        unint64_t v54 = v52[2];
        unint64_t v53 = v52[3];
        if (v54 >= v53 >> 1) {
          sub_100032928(v53 > 1, v54 + 1, 1);
        }
        uint64_t v55 = v106;
        uint64_t v56 = v107;
        uint64_t v57 = sub_100037298((uint64_t)&v104, v106);
        __chkstk_darwin(v57);
        uint64_t v59 = (char *)&v99 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v60 + 16))(v59);
        sub_1002BBA60(v54, (uint64_t)v59, (uint64_t *)&v111, v55, v56);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v104);
        a2 = v48;
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v108);
      }

      ++v46;
      v47 += 40LL;
      if (a3 == v46)
      {
        unint64_t v45 = v111;
        goto LABEL_40;
      }
    }

    __break(1u);
LABEL_56:
    swift_once(&qword_10099B4C8, sub_10047B404);
LABEL_10:
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_10000A720(v17, (uint64_t)qword_100A2AAA0);
    uint64_t v18 = swift_retain_n(a1, 2LL);
    char v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v108 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      if (*(void *)(a1 + 192))
      {
        uint64_t v23 = swift_retain();
        CurrentValueSubject.value.getter(&v104, v23);
        swift_release();
        char v24 = v104;
      }

      else
      {
        char v24 = 8;
      }

      LOBYTE(v104) = v24;
      uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AF910);
      uint64_t v32 = String.init<A>(describing:)(&v104, v31);
      uint64_t v104 = sub_1003F11D4(v32, v33, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v21 + 4, v21 + 12);
      swift_release_n(a1, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Not a finder device for separation monitoring, reason: %s.",  v21,  0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);

      if (*(void *)(a1 + 192))
      {
LABEL_20:
        uint64_t v34 = swift_retain();
        CurrentValueSubject.value.getter(&v108, v34);
        swift_release();
        if (!*(void *)(a1 + 192)
          || (uint64_t v35 = swift_retain(),
              CurrentValueSubject.value.getter(&v108, v35),
              swift_release(),
              v108 != 6))
        {
          _Block_copy(a3);
          uint64_t v41 = sub_10047C81C((uint64_t)_swiftEmptyArrayStorage);
          sub_1006F16D4(v41);
          swift_bridgeObjectRelease();
          sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
          sub_10014EFD4( (unint64_t *)&qword_1009A4A10,  (unint64_t *)&unk_1009A0B20,  &OBJC_CLASS___SPBeacon_ptr);
          Class v42 = Set._bridgeToObjectiveC()().super.isa;
          (*((void (**)(char *, Class))a3 + 2))(a3, v42);
          swift_bridgeObjectRelease();

          _Block_release(a3);
          goto LABEL_54;
        }
      }
    }

    else
    {

      swift_release_n(a1, 2LL);
      if (*(void *)(a1 + 192)) {
        goto LABEL_20;
      }
    }

    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v37 = v36;
    uint64_t v104 = 20LL;
    unint64_t v38 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v39 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
    _BridgedStoredNSError.init(_:userInfo:)(&v108, &v104, v38, v37, v39);
    uint64_t v40 = (void *)v108;
    (*((void (**)(char *, void))a3 + 2))(a3, 0LL);

    goto LABEL_54;
  }

void sub_10049B368(char *a1, void (**a2)(void, void))
{
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v7[3] = My;
  void v7[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v5 = sub_10000A7C8(v7);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v5,  enum case for Feature.FindMy.separationAlerts(_:),  My);
  _Block_copy(a2);
  LOBYTE(My) = isFeatureEnabled(_:)(v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
  if ((My & 1) != 0)
  {
    uint64_t v6 = *sub_100012ED8( &a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
    _Block_copy(a2);
    sub_10049A6E8(v6, a1, (char *)a2);
    _Block_release(a2);
  }

  else
  {
    a2[2](a2, 0LL);
  }

  _Block_release(a2);
}

void sub_10049B468(void *a1, uint64_t a2, uint64_t a3)
{
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2AAA0);
  uint64_t v7 = a1;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (void ***)swift_slowAlloc(8LL, -1LL);
    __int128 aBlock = v7;
    *(_DWORD *)uint64_t v10 = 138412290;
    uint64_t v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v30, v10 + 4, v10 + 12);
    *uint64_t v11 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Requesting reverse geocoded address for location: %@", v10, 0xCu);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___GEOMapService);
  id v15 = [v14 sharedService];
  [v7 coordinate];
  double v17 = v16;
  [v7 coordinate];
  id v19 = objc_msgSend(objc_allocWithZone(GEOLocation), "initWithGEOCoordinate:", v17, v18);
  if (v19)
  {
    unsigned int v20 = [v7 referenceFrame];
    if (v20 > 2) {
      uint64_t v21 = 0LL;
    }
    else {
      uint64_t v21 = dword_100804650[v20];
    }
    [v19 setReferenceFrame:v21];
  }

  id v22 = [v14 sharedService];
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = [v15 defaultTraits];
    id v25 = [v23 ticketForReverseGeocodeLocation:v19 traits:v24];

    if (v25)
    {
      uint64_t v26 = (void *)swift_allocObject(&unk_10095DEC0, 40LL, 7LL);
      uint64_t v26[2] = a2;
      v26[3] = a3;
      v26[4] = v7;
      v30[3] = sub_10049E168;
      v30[4] = v26;
      __int128 aBlock = _NSConcreteStackBlock;
      v30[0] = 1107296256LL;
      v30[1] = sub_1004847D4;
      void v30[2] = &unk_10095DED8;
      uint64_t v27 = _Block_copy(&aBlock);
      uint64_t v28 = v7;
      swift_unknownObjectRetain(v25);
      swift_retain();
      swift_release();
      [v25 submitWithHandler:v27 networkActivity:0];
      swift_unknownObjectRelease_n(v25, 2LL);

      _Block_release(v27);
    }

    else
    {
    }
  }

  else
  {
    __break(1u);
  }

void sub_10049B7F4( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void, void), uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v127 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v126 = &v117[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v13);
  double v16 = &v117[-v15];
  uint64_t v17 = sub_100004AEC(&qword_1009A7D90);
  __chkstk_darwin(v17);
  id v19 = &v117[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = type metadata accessor for LeashRecord(0LL);
  uint64_t v133 = *(void *)(v20 - 8);
  uint64_t v134 = v20;
  __chkstk_darwin(v20);
  id v22 = &v117[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = swift_allocObject(&unk_10095DE70, 32LL, 7LL);
  uint64_t v131 = a5;
  uint64_t v132 = v23;
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = a5;
  *(void *)(v23 + 24) = a6;
  uint64_t v24 = qword_10099B4C8;
  uint64_t v130 = a6;
  swift_retain();
  if (v24 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  uint64_t v26 = sub_10000A720(v25, (uint64_t)qword_100A2AAA0);
  swift_bridgeObjectRetain_n(a1, 2LL);
  id v27 = a3;
  uint64_t v129 = v26;
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  int v30 = v29;
  BOOL v31 = os_log_type_enabled(v28, v29);
  uint64_t v124 = a2;
  id v125 = v27;
  if (v31)
  {
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    uint64_t v121 = v16;
    uint64_t v33 = v32;
    uint64_t v120 = (void *)swift_slowAlloc(96LL, -1LL);
    v136[0] = v120;
    *(_DWORD *)uint64_t v33 = 136315650;
    uint64_t v128 = a4;
    uint64_t v34 = type metadata accessor for UUID(0LL);
    uint64_t v122 = v12;
    uint64_t v35 = v34;
    uint64_t v36 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v123 = v22;
    uint64_t v37 = v36;
    swift_bridgeObjectRetain(a1);
    uint64_t v39 = Set.description.getter(v38, v35, v37);
    unint64_t v41 = v40;
    swift_bridgeObjectRelease();
    uint64_t v135 = sub_1003F11D4(v39, v41, (uint64_t *)v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    uint64_t v119 = a1;
    int v118 = v30;
    *(_WORD *)(v33 + 12) = 2080;
    uint64_t v135 = a2;
    type metadata accessor for SPSeparationEventType(0LL);
    uint64_t v43 = String.init<A>(describing:)(&v135, v42);
    uint64_t v135 = sub_1003F11D4(v43, v44, (uint64_t *)v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2080;
    id v45 = v27;
    uint64_t v46 = v19;
    id v47 = [v45 description];
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    unint64_t v50 = v49;

    id v19 = v46;
    uint64_t v135 = sub_1003F11D4(v48, v50, (uint64_t *)v136);
    uint64_t v12 = v122;
    a4 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v33 + 24, v33 + 32);

    id v22 = v123;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v28,  (os_log_type_t)v118,  "Received separation event request: %s, eventType: %s, region: %s",  (uint8_t *)v33,  0x20u);
    uint64_t v51 = v120;
    swift_arrayDestroy(v120, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    uint64_t v52 = v33;
    double v16 = v121;
    swift_slowDealloc(v52, -1LL, -1LL);

    a1 = v119;
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  unint64_t v53 = sub_100576FE0();
  uint64_t v54 = v133;
  if (v53[2])
  {
    sub_10001DC4C( (uint64_t)v53 + ((*(unsigned __int8 *)(v133 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80)),  (uint64_t)v19,  type metadata accessor for LeashRecord);
    uint64_t v55 = 0LL;
  }

  else
  {
    uint64_t v55 = 1LL;
  }

  uint64_t v56 = v134;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v19, v55, 1LL, v134);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v54 + 48))(v19, 1LL, v56) != 1)
  {
    uint64_t v66 = sub_10002218C((uint64_t)v19, (uint64_t)v22, type metadata accessor for LeashRecord);
    __chkstk_darwin(v66);
    uint64_t v115 = a4;
    unint64_t v116 = v22;
    uint64_t v67 = a1;
    sub_1006316B0((void (*)(char *))sub_10049E0B8, (uint64_t)&v117[-32], a1);
    uint64_t v69 = v68;
    if (*(void *)(v68 + 16))
    {
      uint64_t v128 = a4;
      static Date.trustedNow.getter((uint64_t)v16);
      id v70 = v125;
      [v125 center];
      double v72 = v71;
      double v74 = v73;
      [v70 radius];
      double v76 = v75;
      id v77 = [v70 radius];
      double v79 = v78;
      uint64_t v80 = v126;
      Date.init()(v77);
      id v81 = objc_allocWithZone(&OBJC_CLASS___CLLocation);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      id v83 = objc_msgSend( v81,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:",  isa,  v72,  v74,  -1.0,  v76,  v79,  -1.0,  -1.0,  -1.0,  0xBFF0000000000000);

      unint64_t v84 = *(void (**)(_BYTE *, uint64_t))(v127 + 8);
      v84(v80, v12);
      objc_msgSend(v83, "setReferenceFrame:", objc_msgSend(v70, "geoReferenceFrame"));
      id v85 = v83;
      LOBYTE(isa) = sub_100658D94();

      if ((isa & 1) == 0)
      {
        uint64_t v105 = (void *)swift_allocObject(&unk_10095DE98, 64LL, 7LL);
        uint64_t v106 = v128;
        v105[2] = v85;
        v105[3] = v106;
        uint64_t v107 = v132;
        v105[4] = sub_10049E0AC;
        v105[5] = v107;
        uint64_t v108 = v124;
        v105[6] = v69;
        v105[7] = v108;
        id v109 = v85;
        swift_retain();
        swift_retain();
        sub_10049B468(v109, (uint64_t)sub_10049E10C, (uint64_t)v105);

        swift_release();
        v84(v16, v12);
        sub_100018C68((uint64_t)v22, type metadata accessor for LeashRecord);
LABEL_22:
        swift_release();
        return;
      }

      swift_bridgeObjectRelease();
      type metadata accessor for SPSeparationMonitoringError(0LL);
      uint64_t v87 = v86;
      uint64_t v135 = 21LL;
      uint64_t v88 = v16;
      unint64_t v89 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v90 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
      _BridgedStoredNSError.init(_:userInfo:)(v136, &v135, v89, v87, v90);
      uint64_t v91 = v136[0];
      sub_10047D3B0(v136[0], 1, v131);

      v84(v88, v12);
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n(a1, 2LL);
      uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
      os_log_type_t v94 = static os_log_type_t.error.getter(v93);
      if (os_log_type_enabled(v93, v94))
      {
        uint64_t v95 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v96 = (void *)swift_slowAlloc(32LL, -1LL);
        v136[0] = v96;
        *(_DWORD *)uint64_t v95 = 136315138;
        uint64_t v97 = v22;
        uint64_t v98 = type metadata accessor for UUID(0LL);
        uint64_t v99 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        swift_bridgeObjectRetain(v67);
        uint64_t v101 = Set.description.getter(v100, v98, v99);
        unint64_t v103 = v102;
        swift_bridgeObjectRelease();
        uint64_t v104 = v101;
        id v22 = v97;
        uint64_t v135 = sub_1003F11D4(v104, v103, (uint64_t *)v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v95 + 4, v95 + 12);
        swift_bridgeObjectRelease_n(v67, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v93,  v94,  "Received separation alert for unknown beacons: %s",  v95,  0xCu);
        swift_arrayDestroy(v96, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v96, -1LL, -1LL);
        swift_slowDealloc(v95, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a1, 2LL);
      }

      type metadata accessor for SPSeparationMonitoringError(0LL);
      uint64_t v111 = v110;
      uint64_t v135 = 5LL;
      unint64_t v112 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v113 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
      _BridgedStoredNSError.init(_:userInfo:)(v136, &v135, v112, v111, v113);
      unint64_t v114 = v136[0];
      sub_10047D3B0(v136[0], 1, v131);
    }

    sub_100018C68((uint64_t)v22, type metadata accessor for LeashRecord);
    goto LABEL_22;
  }

  uint64_t v57 = sub_100015794((uint64_t)v19, &qword_1009A7D90);
  uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
  os_log_type_t v59 = static os_log_type_t.error.getter(v58);
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v60 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "Failed to publish separation event alert due to missing leash record",  v60,  2u);
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  type metadata accessor for SPSeparationMonitoringError(0LL);
  uint64_t v62 = v61;
  uint64_t v135 = 4LL;
  unint64_t v63 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v64 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
  _BridgedStoredNSError.init(_:userInfo:)(v136, &v135, v63, v62, v64);
  uint64_t v65 = v136[0];
  sub_10047D3B0(v136[0], 1, v131);
  swift_release();
}

uint64_t sub_10049C254(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }

  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_1004C44BC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }

  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v16 = v15 * a1;
  unint64_t v17 = v14 + v15 * a1;
  uint64_t result = swift_arrayDestroy(v17, v7, v12);
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(v4 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_31;
  }
  if ((v20 & 0x8000000000000000LL) == 0)
  {
    unint64_t v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack(v17, v21, v20, v12);
    }

    else if (v16 != v15 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront(v17, v21);
    }

    uint64_t v23 = *(void *)(v4 + 16);
    BOOL v24 = __OFADD__(v23, v8);
    uint64_t v25 = v23 - v7;
    if (!v24)
    {
      *(void *)(v4 + swift_weakDestroy(v0 + 16) = v25;
LABEL_25:
      *uint64_t v2 = v4;
      return result;
    }

    goto LABEL_32;
  }

uint64_t sub_10049C3FC(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v64 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v63 = (char *)&v56 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v56 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  double v74 = (char *)&v56 - v14;
  __chkstk_darwin(v13);
  id v70 = (char *)&v56 - v15;
  uint64_t v16 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v56 - v20;
  uint64_t v69 = a1;
  unint64_t v22 = *a1;
  unint64_t v62 = *(void *)(*a1 + 16);
  if (!v62) {
    return 0LL;
  }
  unint64_t v68 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v60 = v22 + v68;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v77 = *(void *)(v5 + 72);
  uint64_t v65 = a2 + v68;
  unint64_t v59 = v22;
  swift_bridgeObjectRetain(v22);
  unint64_t v24 = 0LL;
  uint64_t v66 = v23;
  uint64_t v58 = v12;
  uint64_t v57 = v19;
  uint64_t v67 = a2;
  uint64_t v72 = v5;
  uint64_t v25 = v70;
  while (1)
  {
    swift_bridgeObjectRetain(a2);
    unint64_t v73 = v24;
    if (v23) {
      break;
    }
    double v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
LABEL_10:
    v76(v21, 1LL, 1LL, v4);
LABEL_11:
    a2 = v67;
    swift_bridgeObjectRelease();
    unint64_t v24 = v73 + 1;
    uint64_t v23 = v66;
    if (v73 + 1 == v62)
    {
      unint64_t v32 = v59;
      swift_bridgeObjectRelease();
      return *(void *)(v32 + 16);
    }
  }

  unint64_t v71 = v60 + v77 * v24;
  double v78 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v26 = v65;
  while (1)
  {
    v78(v21, v26, v4);
    double v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v76(v21, 0LL, 1LL, v4);
    double v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    if (v75(v21, 1LL, v4) == 1) {
      goto LABEL_11;
    }
    id v27 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v28 = v21;
    v27(v25, v21, v4);
    uint64_t v29 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v25, v71, v4, v29);
    BOOL v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v25, v4);
    if ((v30 & 1) != 0) {
      break;
    }
    v26 += v77;
    --v23;
    uint64_t v5 = v72;
    unint64_t v21 = v28;
    if (!v23) {
      goto LABEL_10;
    }
  }

  unint64_t v34 = v59;
  swift_bridgeObjectRelease();
  uint64_t v35 = v67;
  swift_bridgeObjectRelease();
  uint64_t result = v73;
  unint64_t v36 = v73 + 1;
  if (__OFADD__(v73, 1LL)) {
    goto LABEL_48;
  }
  unint64_t v37 = *(void *)(v34 + 16);
  if (v36 != v37)
  {
    unint64_t v38 = v34;
    unint64_t v39 = v68;
    unint64_t v40 = v27;
    uint64_t v41 = v29;
    uint64_t v42 = v58;
    uint64_t v43 = v57;
    uint64_t v61 = v40;
LABEL_16:
    if (v36 >= v37)
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    unint64_t v73 = result;
    id v70 = (char *)(v36 * v77);
    unint64_t v71 = v36;
    unint64_t v44 = v38 + v39 + v36 * v77;
    id v45 = v78;
    v78(v74, v44, v4);
    swift_bridgeObjectRetain(v35);
    uint64_t v46 = v65;
    uint64_t v47 = v66;
    while (1)
    {
      v45(v43, v46, v4);
      v76(v43, 0LL, 1LL, v4);
      if (v75(v43, 1LL, v4) == 1) {
        goto LABEL_22;
      }
      v40(v42, v43, v4);
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v74, v4, v41);
      v31(v42, v4);
      if ((v48 & 1) != 0) {
        break;
      }
      v46 += v77;
      --v47;
      id v45 = v78;
      if (!v47)
      {
        v76(v43, 1LL, 1LL, v4);
LABEL_22:
        uint64_t v35 = v67;
        swift_bridgeObjectRelease();
        v31(v74, v4);
        uint64_t result = v73;
        unint64_t v49 = v71;
        unint64_t v39 = v68;
        if (v73 != v71)
        {
          if ((v73 & 0x8000000000000000LL) != 0) {
            goto LABEL_43;
          }
          unint64_t v50 = *v69;
          unint64_t v51 = *(void *)(*v69 + 16);
          if (v73 >= v51) {
            goto LABEL_44;
          }
          unint64_t v52 = v50 + v68;
          unint64_t v62 = v73 * v77;
          unint64_t v53 = (void (*)(char *, char *, uint64_t))v78;
          uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v78)(v63, v50 + v68 + v73 * v77, v4);
          if (v71 >= v51) {
            goto LABEL_45;
          }
          unint64_t v49 = v71;
          v53(v64, &v70[v52], v4);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native(v50);
          *uint64_t v69 = v50;
          if ((result & 1) == 0)
          {
            uint64_t result = sub_100599714(v50);
            unint64_t v50 = result;
            *uint64_t v69 = result;
          }

          unint64_t v39 = v68;
          if (v73 < *(void *)(v50 + 16))
          {
            uint64_t v54 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v72 + 40);
            uint64_t result = v54(v50 + v68 + v62, v64, v4);
            if (v49 >= *(void *)(*v69 + 16)) {
              goto LABEL_47;
            }
            v54((unint64_t)&v70[*v69 + v39], v63, v4);
            uint64_t v35 = v67;
            uint64_t result = v73;
            unint64_t v40 = v61;
            goto LABEL_31;
          }

uint64_t sub_10049C9F4()
{
  return sub_10049DB10((uint64_t (*)(void, unint64_t, void, void, void))sub_10048E7E8);
}

uint64_t sub_10049CA04()
{
  return sub_100486880(v0[2], v0[3], v0[4], v0[5]);
}

void sub_10049CA10()
{
}

uint64_t sub_10049CA2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100487F90(a1);
}

uint64_t sub_10049CA44(uint64_t a1)
{
  return sub_100488024(a1, *(void *)(v1 + 16));
}

uint64_t sub_10049CA50()
{
  return sub_10049CC60((uint64_t (*)(unint64_t, void, void, void, void))sub_1004880A4);
}

void sub_10049CA5C()
{
}

uint64_t sub_10049CA78@<X0>(uint64_t *a1@<X8>)
{
  return sub_100493F00( *(uint8_t **)(v1 + 16),  *(void (**)(void))(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  (uint64_t *)&unk_1009AF780,  &qword_1009A7D90,  a1,  type metadata accessor for LeashRecord,  (uint64_t *)&unk_1009AF770,  (void (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, dispatch_group_s *))sub_10055D8C0);
}

uint64_t sub_10049CAD4(uint64_t a1, uint64_t a2)
{
  return sub_100493644(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10049CAE4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10049CB18()
{
  return sub_100484854(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10049CB24@<X0>(uint64_t a1@<X8>)
{
  return sub_100492DE4(v1, a1);
}

void sub_10049CB3C()
{
}

uint64_t sub_10049CB44(uint64_t a1)
{
  return sub_100485FD0(a1, *(void *)(v1 + 16));
}

uint64_t sub_10049CB50()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009AF770);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (uint64_t *)(v0 + v4);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) == 1)
  {
    swift_errorRelease(*v6);
  }

  else
  {
    sub_100016F9C(*v6, v6[1]);
    uint64_t v7 = (char *)v6 + *(int *)(type metadata accessor for LeashRecord(0LL) + 20);
    uint64_t v8 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject( v0,  ((((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8,  v3 | 7);
}

uint64_t sub_10049CC54()
{
  return sub_10049CC60((uint64_t (*)(unint64_t, void, void, void, void))sub_1004863AC);
}

uint64_t sub_10049CC60(uint64_t (*a1)(unint64_t, void, void, void, void))
{
  uint64_t v2 = *(void *)(sub_100004AEC((uint64_t *)&unk_1009AF770) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return a1( v1 + v3,  *(void *)(v1 + v4),  *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(v1 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)));
}

void sub_10049CCD0()
{
}

void sub_10049CCEC(id a1, char a2)
{
  if ((a2 & 1) != 0) {
}
  }

uint64_t sub_10049CCF8()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10049CDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for SafeLocation(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_1004939E4(a1, a2, *(void *)(v2 + 16), v2 + v6, *(unsigned __int8 *)(v2 + v6 + *(void *)(v5 + 64)));
}

void sub_10049CE08(void *a1, char a2)
{
}

uint64_t sub_10049CE24()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 24;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_10049CEF0()
{
  uint64_t v1 = *(void *)(type metadata accessor for SafeLocation(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10048849C( v0 + v2,  *(unsigned __int8 *)(v0 + v2 + *(void *)(v1 + 64)),  *(void (**)(void, void))(((v2 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + v0 + 8),  *(void *)(((v2 + *(void *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + v0 + 16));
}

uint64_t sub_10049CF48()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10049D024(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SafeLocation(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100489A5C( a1,  *(void *)(v1 + 16),  v1 + v4,  *(void *)(v1 + v5),  *(void **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10049D084()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 17) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10049D174()
{
  uint64_t v1 = *(void *)(type metadata accessor for SafeLocation(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 17LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100489BB4( *(_BYTE *)(v0 + 16),  v0 + v2,  *(void (**)(void *, uint64_t))(v0 + v3),  *(void *)(v0 + v3 + 8),  *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((v3 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)));
}

void sub_10049D1D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for SafeLocation(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100489878( v0 + v2,  *(void (**)(void *, uint64_t))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

void sub_10049D21C()
{
}

uint64_t sub_10049D23C(uint64_t a1, uint64_t a2)
{
  return sub_10049D498(a1, a2, sub_100493A9C);
}

uint64_t sub_10049D250()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255) {
    sub_10049CCEC(*(id *)(v0 + 16), v1 & 1);
  }
  return swift_deallocObject(v0, 25LL, 7LL);
}

void sub_10049D288(char a1)
{
}

uint64_t sub_10049D290()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 17) & ~v3;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for SafeLocation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 + v5 + 8) & ~v8;
  uint64_t v13 = v3 | v8 | 7;
  unint64_t v10 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);
  swift_release();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  v11(v0 + v9 + *(int *)(v6 + 20), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v10, v13);
}

void sub_10049D3B4()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 17LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(type metadata accessor for SafeLocation(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + v4 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10048B36C( *(_BYTE *)(v0 + 16),  v0 + v2,  *(void (**)(void, void))(v0 + v3),  *(void *)(v0 + v3 + 8),  *(void *)(v0 + v4),  v0 + v6,  *(void *)(v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

id sub_10049D44C(id result, char a2)
{
  if ((a2 & 1) != 0) {
    return result;
  }
  return result;
}

id sub_10049D458(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10049D44C(result, a2 & 1);
  }
  return result;
}

void sub_10049D470(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_10049CCEC(a1, a2 & 1);
  }
}

uint64_t sub_10049D48C(uint64_t a1, uint64_t a2)
{
  return sub_10049D498(a1, a2, sub_100493CC8);
}

uint64_t sub_10049D498(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, uint64_t))
{
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SafeLocation(0LL) - 8) + 80LL);
  return a3(a1, a2, *(void *)(v3 + 16), v3 + ((v6 + 24) & ~v6));
}

uint64_t sub_10049D4FC()
{
  return sub_10049D88C((uint64_t (*)(unint64_t, void, void, void))sub_10048BB98);
}

void sub_10049D50C()
{
}

void sub_10049D51C(const char *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for SafeLocation(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  sub_10048C874(v2 + v6, *(void (**)(void *, uint64_t))v7, *(void *)(v7 + 8), a1, a2);
}

uint64_t sub_10049D588()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10049D638@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SafeLocation(0LL);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL);
  return sub_1005766A0(v1 + *(int *)(v3 + 20) + ((v4 + 24) & ~v4), a1);
}

uint64_t sub_10049D68C(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SafeLocation(0LL) - 8) + 80LL);
  return sub_10048C784(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10049D6CC()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_10049D794()
{
}

uint64_t sub_10049D7A8()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10049D880()
{
  return sub_10049D88C((uint64_t (*)(unint64_t, void, void, void))sub_10048CB28);
}

uint64_t sub_10049D88C(uint64_t (*a1)(unint64_t, void, void, void))
{
  uint64_t v2 = *(void *)(type metadata accessor for SafeLocation(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return a1(v1 + v3, *(void *)(v1 + v4), *(void *)(v1 + v4 + 8), *(void *)(v1 + ((v4 + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10049D8F0(uint64_t a1, uint64_t a2)
{
  return sub_100493E04(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void sub_10049D8F8(uint64_t a1)
{
}

void sub_10049D900(id a1, char a2)
{
  if ((a2 & 1) != 0) {

  }
  else {
    swift_bridgeObjectRelease(a1);
  }
}

uint64_t sub_10049D910@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1004936F4( *(void *)(v1 + 16),  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)),  a1);
}

uint64_t sub_10049D968()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10049D9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_10049381C( a1,  a2,  *(void *)(v2 + 16),  v2 + v6,  *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10049DA60()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10049DB04()
{
  return sub_10049DB10((uint64_t (*)(void, unint64_t, void, void, void))sub_10048CDD8);
}

uint64_t sub_10049DB10(uint64_t (*a1)(void, unint64_t, void, void, void))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return a1( *(void *)(v1 + 16),  v1 + v3,  *(void *)(v1 + v4),  *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

void sub_10049DB74()
{
}

uint64_t sub_10049DB94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1005766A0(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_10049DBDC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10049DC00(uint64_t a1)
{
  return sub_10048E544(a1, *(void *)(v1 + 16));
}

uint64_t sub_10049DC0C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  swift_release(*(void *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_10049DCB0()
{
  return sub_10049DCBC("Successfuly to assigned %s to safe location with UUID: %s");
}

uint64_t sub_10049DCBC(const char *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1004900A8( *(void *)(v1 + 16),  v1 + v4,  *(void (**)(void, void))(v1 + v5),  *(void *)(v1 + v5 + 8),  *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8LL)),  a1);
}

void sub_10049DD24()
{
}

uint64_t sub_10049DD40()
{
  return sub_10047D838();
}

uint64_t sub_10049DD48(uint64_t a1)
{
  return sub_10067AE9C(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10049DD64()
{
  return sub_10047D8E0((uint64_t)sub_10049DDB4, (uint64_t)&unk_10095DCF8);
}

uint64_t sub_10049DD94(uint64_t a1)
{
  return sub_100608518(a1, *(void *)(v1 + 16), *(_BYTE *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10049DDB4()
{
  return sub_100491BA4(v0);
}

uint64_t sub_10049DDC0()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

void sub_10049DE68(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SafeLocation(0LL) - 8) + 80LL);
  sub_10049291C(a1, v4, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_10049DEB8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10049DF48()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10048A5F0( v0 + v2,  *(void *)(v0 + v3),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

void sub_10049DF98()
{
}

uint64_t sub_10049DFA0()
{
  uint64_t v1 = type metadata accessor for LeashRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

void sub_10049E038(char a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for LeashRecord(0LL) - 8) + 80LL);
  sub_100491964(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10049E074()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10049E098(uint64_t a1, __int16 a2)
{
  return sub_10047D090(a1, a2 & 0x1FF, *(uint64_t (**)(BOOL))(v2 + 16));
}

void sub_10049E0AC(void *a1, char a2)
{
}

uint64_t sub_10049E0B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10047DC38(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_10049E0D0()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10049E10C(void *a1, uint64_t a2, char a3)
{
  return sub_10047E5E4( a1,  a2,  a3 & 1,  *(void **)(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  *(void *)(v3 + 56));
}

uint64_t sub_10049E13C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10049E168(uint64_t a1, uint64_t a2)
{
}

id sub_10049E174(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain(a2);
  }
}

void sub_10049E184(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {

  }
  else {
    swift_bridgeObjectRelease(a2);
  }
}

uint64_t sub_10049E194()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t sub_10049E1E0(uint64_t a1)
{
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v4 = v1[5];
  uint64_t v10 = v1[4];
  uint64_t v5 = v1[6];
  uint64_t v6 = v1[7];
  uint64_t v7 = v1[8];
  uint64_t v8 = (void *)swift_task_alloc(dword_1009AF82C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000159BC;
  return sub_10047E9EC(a1, v12, v11, v10, v4, v5, v6, v7);
}

uint64_t sub_10049E298()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();

  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10049E540@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_1004827CC(*(void **)(v1 + 24), v1 + ((v3 + 32) & ~v3), a1);
}

uint64_t sub_10049E584()
{
  return sub_100482BCC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10049E58C(uint64_t a1)
{
  return sub_100481E04(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10049E594()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v26 = *(void *)(v2 + 64);
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v27 = v5;
  uint64_t v25 = *(void *)(v5 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  uint64_t v7 = v0 + ((v3 + 40) & ~v3);
  sub_100016F9C(*(void *)v7, *(void *)(v7 + 8));
  uint64_t v8 = v7 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  uint64_t v12 = v7 + v1[6];
  uint64_t v13 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v11(v12, v9);
      uint64_t v24 = v4;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v11(v12, v9);
      uint64_t v24 = v4;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v4 = v24;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v14 = v7 + v1[7];
  uint64_t v15 = v7 + v1[8];
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
  sub_100016F9C(*(void *)(v7 + v1[9]), *(void *)(v7 + v1[9] + 8));
  unint64_t v17 = (uint64_t *)(v7 + v1[10]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100016F9C(*v17, v18);
  }
  unint64_t v19 = (uint64_t *)(v7 + v1[11]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15) {
    sub_100016F9C(*v19, v20);
  }
  uint64_t v21 = v3 | v6 | 7;
  uint64_t v22 = (((v3 + 40) & ~v3) + v26 + v6) & ~v6;
  sub_100016F9C(*(void *)(v7 + v1[12]), *(void *)(v7 + v1[12] + 8));
  sub_100016F9C(*(void *)(v7 + v1[13]), *(void *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0 + v22, v4);
  return swift_deallocObject(v0, v22 + v25, v21);
}

uint64_t sub_10049E894(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009AF860) - 8) + 80LL);
  unint64_t v8 = (v6 + v7) & ~v7;
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = (uint64_t)v1 + v5;
  uint64_t v13 = (uint64_t)v1 + v8;
  uint64_t v14 = (void *)swift_task_alloc(dword_1009AF86C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v14;
  void *v14 = v2;
  v14[1] = sub_1000159BC;
  return sub_100481FCC(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_10049E954()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v26 = *(void *)(v2 + 64);
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v27 = v5;
  uint64_t v25 = *(void *)(v5 + 64);
  swift_release();
  uint64_t v7 = v0 + ((v3 + 24) & ~v3);
  sub_100016F9C(*(void *)v7, *(void *)(v7 + 8));
  uint64_t v8 = v7 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  uint64_t v12 = v7 + v1[6];
  uint64_t v13 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v11(v12, v9);
      uint64_t v24 = v4;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v11(v12, v9);
      uint64_t v24 = v4;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v4 = v24;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v14 = v7 + v1[7];
  uint64_t v15 = v7 + v1[8];
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
  sub_100016F9C(*(void *)(v7 + v1[9]), *(void *)(v7 + v1[9] + 8));
  unint64_t v17 = (uint64_t *)(v7 + v1[10]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100016F9C(*v17, v18);
  }
  unint64_t v19 = (uint64_t *)(v7 + v1[11]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15) {
    sub_100016F9C(*v19, v20);
  }
  uint64_t v21 = v3 | v6 | 7;
  uint64_t v22 = (((v3 + 24) & ~v3) + v26 + v6) & ~v6;
  sub_100016F9C(*(void *)(v7 + v1[12]), *(void *)(v7 + v1[12] + 8));
  sub_100016F9C(*(void *)(v7 + v1[13]), *(void *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0 + v22, v4);
  return swift_deallocObject(v0, v22 + v25, v21);
}

uint64_t sub_10049EC4C()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009AF860) - 8) + 80LL);
  return sub_100482204(*(void *)(v0 + 16), v0 + v2, v0 + ((v3 + v4) & ~v4));
}

uint64_t sub_10049ECBC()
{
  uint64_t v1 = sub_100004AEC(&qword_1009AF860);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10049ED20(uint64_t a1)
{
  return sub_100482770(a1);
}

uint64_t sub_10049ED60()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10049ED84()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  unint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 10, v3 | 7);
}

uint64_t sub_10049F044@<X0>(uint64_t a1@<X8>)
{
  return sub_100490720(*(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_10049F060()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10049F12C(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for SafeLocation(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_100490DA0( a1,  v4,  *(void *)(v2 + 16),  v2 + v6,  *(dispatch_group_s **)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

void *sub_10049F190(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)a1[3];
  char v4 = (void *)a1[6];
  swift_bridgeObjectRetain(a1[5]);
  id v5 = v4;
  swift_bridgeObjectRetain(v2);
  id v6 = v3;
  return a1;
}

uint64_t sub_10049F1DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 40);

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10049F228()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 80));
  return swift_deallocObject(v0, 88LL, 7LL);
}

void sub_10049F26C(uint64_t a1)
{
}

uint64_t sub_10049F27C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100483038(*(void *)(v1 + 16), v1 + 24, *(void *)(v1 + 80), v1 + 88, a1);
}

uint64_t sub_10049F290()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10049F2B8()
{
  swift_bridgeObjectRelease();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 88));
  return swift_deallocObject(v0, 128LL, 7LL);
}

uint64_t sub_10049F30C(uint64_t (*a1)(__int128 *), uint64_t a2)
{
  return sub_100483134(a1, a2, *(void *)(v2 + 16), v2 + 24, *(void *)(v2 + 80), v2 + 88);
}

uint64_t sub_10049F320()
{
  swift_bridgeObjectRelease();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 104));
  return swift_deallocObject(v0, 144LL, 7LL);
}

uint64_t sub_10049F37C(uint64_t (*a1)(void), uint64_t a2)
{
  return sub_100483328( a1,  a2,  *(void *)(v2 + 16),  *(uint64_t (**)(void, void))(v2 + 24),  *(void *)(v2 + 32),  v2 + 40,  *(void *)(v2 + 96),  v2 + 104);
}

uint64_t sub_10049F394()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_10049F3C8(uint64_t a1, char a2)
{
  return sub_100483D6C( a1,  a2 & 1,  v2 + 16,  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 56),  *(void *)(v2 + 64),  *(uint64_t (**)(uint64_t))(v2 + 72));
}

uint64_t sub_10049F3DC()
{
  return swift_deallocObject(v0, 128LL, 7LL);
}

uint64_t sub_10049F418(uint64_t a1, char a2)
{
  return sub_100483A3C( a1,  a2 & 1,  v2 + 16,  v2 + 56,  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96),  *(void *)(v2 + 104),  *(uint64_t (**)(uint64_t))(v2 + 112));
}

uint64_t sub_10049F430(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return sub_10049F43C(result);
  }
  return result;
}

uint64_t sub_10049F43C(uint64_t result)
{
  if (result != 1) {
    return swift_errorRetain(result);
  }
  return result;
}

uint64_t sub_10049F44C(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return sub_10049F458(result);
  }
  return result;
}

uint64_t sub_10049F458(uint64_t result)
{
  if (result != 1) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_10049F468()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10049F48C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10049F4C0(void *a1, char a2)
{
}

ValueMetadata *_s12AnalyticsKeyOMa()
{
  return &_s12AnalyticsKeyON;
}

uint64_t _s12AnalyticsKeyOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10049F524 + 4 * byte_1008042A4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10049F544 + 4 * byte_1008042A9[v4]))();
  }
}

_BYTE *sub_10049F524(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10049F544(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10049F54C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10049F554(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10049F55C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10049F564(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *_s14AnalyticsEventOMa()
{
  return &_s14AnalyticsEventON;
}

unint64_t sub_10049F584()
{
  unint64_t result = qword_1009AF938;
  if (!qword_1009AF938)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080434C, &_s14AnalyticsEventON);
    atomic_store(result, (unint64_t *)&qword_1009AF938);
  }

  return result;
}

unint64_t sub_10049F5CC()
{
  unint64_t result = qword_1009AF940;
  if (!qword_1009AF940)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804314, &_s14AnalyticsEventON);
    atomic_store(result, (unint64_t *)&qword_1009AF940);
  }

  return result;
}

unint64_t sub_10049F614()
{
  unint64_t result = qword_1009AF948;
  if (!qword_1009AF948)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080438C, &_s14AnalyticsEventON);
    atomic_store(result, (unint64_t *)&qword_1009AF948);
  }

  return result;
}

unint64_t sub_10049F65C()
{
  unint64_t result = qword_1009AF950;
  if (!qword_1009AF950)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080441C, &_s12AnalyticsKeyON);
    atomic_store(result, (unint64_t *)&qword_1009AF950);
  }

  return result;
}

unint64_t sub_10049F6A4()
{
  unint64_t result = qword_1009AF958;
  if (!qword_1009AF958)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008043E4, &_s12AnalyticsKeyON);
    atomic_store(result, (unint64_t *)&qword_1009AF958);
  }

  return result;
}

unint64_t sub_10049F6EC()
{
  unint64_t result = qword_1009AF960;
  if (!qword_1009AF960)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080445C, &_s12AnalyticsKeyON);
    atomic_store(result, (unint64_t *)&qword_1009AF960);
  }

  return result;
}

uint64_t sub_10049F734(uint64_t a1)
{
  return sub_10049DD94(a1);
}

uint64_t sub_10049F918(uint64_t a1)
{
  unint64_t v2 = sub_10001DAC4();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_10049F940(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009AF988);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004A0700();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MetricsRequest.Body.CodingKeys,  &type metadata for MetricsRequest.Body.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v22[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v22, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    LOBYTE(v22[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v22, v5);
    uint64_t v15 = v3[3];
    uint64_t v16 = v3[4];
    LOBYTE(v22[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v22, v5);
    __int128 v17 = *(_OWORD *)(v3 + 7);
    v22[0] = *(_OWORD *)(v3 + 5);
    v22[1] = v17;
    uint64_t v22[2] = *(_OWORD *)(v3 + 9);
    char v21 = 3;
    unint64_t v18 = sub_1004A0744();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v5, &type metadata for ItemCounts, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10049FAC8(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009AF9C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004A0EA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ItemCounts.CodingKeys,  &type metadata for ItemCounts.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  char v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v25, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    char v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v24, v5);
    uint64_t v14 = v3[2];
    char v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v23, v5);
    uint64_t v15 = v3[3];
    char v22 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v22, v5);
    uint64_t v16 = v3[4];
    char v21 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v21, v5);
    uint64_t v17 = v3[5];
    char v20 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v20, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10049FC7C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10049FCA8 + 4 * byte_10080465C[*v0]))( 0x656372756F73LL,  0xE600000000000000LL);
}

uint64_t sub_10049FCA8()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_10049FCC4()
{
  return 1684628597LL;
}

uint64_t sub_10049FCD4()
{
  return 0x6E756F436D657469LL;
}

uint64_t sub_10049FCF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1004A0814(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10049FD14(uint64_t a1)
{
  unint64_t v2 = sub_1004A0700();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10049FD3C(uint64_t a1)
{
  unint64_t v2 = sub_1004A0700();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10049FD64@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  }

  return result;
}

uint64_t sub_10049FDBC(void *a1)
{
  return sub_10049F940(a1);
}

uint64_t sub_10049FE04()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10049FE34 + 4 * byte_100804660[*v0]))( 0x3156676174726961LL,  0xE800000000000000LL);
}

uint64_t sub_10049FE34()
{
  return 0x3256676174726961LL;
}

uint64_t sub_10049FE48()
{
  return 0x3156616E6D66LL;
}

uint64_t sub_10049FE5C()
{
  return 0x3256616E6D66LL;
}

uint64_t sub_10049FE70()
{
  return 0x6E6D66656C707061LL;
}

uint64_t sub_10049FE90()
{
  return 0x6E6D66656C707061LL;
}

uint64_t sub_10049FEB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1004A0EE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10049FED8(uint64_t a1)
{
  unint64_t v2 = sub_1004A0EA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10049FF00(uint64_t a1)
{
  unint64_t v2 = sub_1004A0EA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10049FF28@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_10049FF68(void *a1)
{
  return sub_10049FAC8(a1);
}

uint64_t sub_10049FF7C(__int128 *a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  __int128 v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (v7
    && (uint64_t v8 = v7,
        id v9 = [v7 uniqueDeviceIdentifier],
        v8,
        v9))
  {
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v11 = v10;

    __int128 v12 = *a1;
    __int128 v31 = a1[1];
    __int128 v32 = v12;
    uint64_t v39 = v1;
    uint64_t v14 = *((void *)a1 + 4);
    uint64_t v13 = *((void *)a1 + 5);
    id v15 = [objc_allocWithZone(NSProcessInfo) init];
    id v16 = [v15 processName];

    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v19 = v18;

    uint64_t v20 = static Date.trustedNow.getter((uint64_t)v6);
    uint64_t v21 = Date.epoch.getter(v20);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v22 = type metadata accessor for JSONEncoder(0LL);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    JSONEncoder.init()();
    v34[0] = v17;
    v34[1] = v19;
    void v34[2] = v21;
    v34[3] = v33;
    v34[4] = v11;
    __int128 v35 = v32;
    __int128 v36 = v31;
    uint64_t v37 = v14;
    uint64_t v38 = v13;
    unint64_t v23 = sub_1004A0258();
    uint64_t v24 = v39;
    uint64_t v25 = dispatch thunk of JSONEncoder.encode<A>(_:)(v34, &type metadata for MetricsRequest.Body, v23);
    if (v24)
    {
      swift_errorRelease(v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0LL;
    }

    else
    {
      uint64_t v3 = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }

  else
  {
    uint64_t v26 = type metadata accessor for GenericError(0LL);
    unint64_t v27 = sub_1004A0210();
    swift_allocError(v26, v27, 0LL, 0LL);
    strcpy(v28, "Missing UDID!");
    *((_WORD *)v28 + 7) = -4864;
    uint64_t v29 = (*(uint64_t (**)(char *, void, uint64_t))(*(void *)(v26 - 8) + 104LL))( v28,  enum case for GenericError.error(_:),  v26);
    swift_willThrow(v29);
  }

  return v3;
}

unint64_t sub_1004A0210()
{
  unint64_t result = qword_10099CF78;
  if (!qword_10099CF78)
  {
    uint64_t v1 = type metadata accessor for GenericError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for GenericError, v1);
    atomic_store(result, (unint64_t *)&qword_10099CF78);
  }

  return result;
}

unint64_t sub_1004A0258()
{
  unint64_t result = qword_1009AF970;
  if (!qword_1009AF970)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804718, &type metadata for MetricsRequest.Body);
    atomic_store(result, (unint64_t *)&qword_1009AF970);
  }

  return result;
}

uint64_t destroy for MetricsRequest.Body(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for MetricsRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for MetricsRequest.Body(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  return a1;
}

uint64_t assignWithTake for MetricsRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for MetricsRequest.Body()
{
  return &type metadata for MetricsRequest.Body;
}

uint64_t *destroy for TagUserStatistics(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 >> 60 != 15) {
    return (uint64_t *)sub_100016F9C(*result, v1);
  }
  return result;
}

uint64_t _s12searchpartyd14MetricsRequestVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v4 = *a2;
    sub_10001736C(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }

  return a1;
}

uint64_t *assignWithCopy for MetricsRequest(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *(void *)a2;
      sub_10001736C(*(void *)a2, *(void *)(a2 + 8));
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_100016F9C(v7, v8);
      return a1;
    }

    sub_100041D4C((uint64_t)a1);
    goto LABEL_6;
  }

  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  uint64_t v5 = *(void *)a2;
  sub_10001736C(*(void *)a2, *(void *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithTake for MetricsRequest(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_100016F9C(v6, v4);
      return a1;
    }

    sub_100041D4C((uint64_t)a1);
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsRequest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)unint64_t result = a2 - 12;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xC) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xC) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MetricsRequest()
{
  return &type metadata for MetricsRequest;
}

unint64_t sub_1004A0674()
{
  unint64_t result = qword_1009AF978;
  if (!qword_1009AF978)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804690, &type metadata for MetricsRequest);
    atomic_store(result, (unint64_t *)&qword_1009AF978);
  }

  return result;
}

unint64_t sub_1004A06BC()
{
  unint64_t result = qword_1009AF980;
  if (!qword_1009AF980)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008046B8, &type metadata for MetricsRequest);
    atomic_store(result, (unint64_t *)&qword_1009AF980);
  }

  return result;
}

unint64_t sub_1004A0700()
{
  unint64_t result = qword_1009AF990;
  if (!qword_1009AF990)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804890, &type metadata for MetricsRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF990);
  }

  return result;
}

unint64_t sub_1004A0744()
{
  unint64_t result = qword_1009AF998;
  if (!qword_1009AF998)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804868, &type metadata for ItemCounts);
    atomic_store(result, (unint64_t *)&qword_1009AF998);
  }

  return result;
}

unint64_t sub_1004A0788()
{
  unint64_t v0 = sub_100412D14((uint64_t)&off_100936E30);
  id v1 = sub_100652098();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  unint64_t v5 = v0;
  sub_100129198((uint64_t)v1, (uint64_t)sub_1003F68BC, 0LL, isUniquelyReferenced_nonNull_native, &v5);
  unint64_t v3 = v5;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1004A0814(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x656372756F73LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    unint64_t v7 = 0xE900000000000070LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 1684628597 && a2 == 0xE400000000000000LL)
  {
    unint64_t v8 = 0xE400000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628597LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x6E756F436D657469LL && a2 == 0xEA00000000007374LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007374LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F436D657469LL, 0xEA00000000007374LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1004A09CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009AF9A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004A0700();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MetricsRequest.Body.CodingKeys,  &type metadata for MetricsRequest.Body.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  LOBYTE(v28[0]) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(v28, v5);
  uint64_t v14 = v13;
  LOBYTE(v28[0]) = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)(v28, v5);
  LOBYTE(v28[0]) = 2;
  uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)(v28, v5);
  char v31 = 3;
  uint64_t v16 = v15;
  unint64_t v17 = sub_1004A0C54();
  uint64_t v26 = v16;
  swift_bridgeObjectRetain(v16);
  KeyedDecodingContainer.decode<A>(_:forKey:)( v28,  &type metadata for ItemCounts,  &v31,  v5,  &type metadata for ItemCounts,  v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __int128 v23 = v28[1];
  __int128 v24 = v28[0];
  uint64_t v18 = v29;
  uint64_t v19 = v30;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  uint64_t v20 = v26;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v14;
  uint64_t v22 = v25;
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
  *(void *)(a2 + 24) = v22;
  *(void *)(a2 + 32) = v20;
  *(_OWORD *)(a2 + 40) = v24;
  *(_OWORD *)(a2 + 56) = v23;
  *(void *)(a2 + 72) = v18;
  *(void *)(a2 + 80) = v19;
  return result;
}

unint64_t sub_1004A0C54()
{
  unint64_t result = qword_1009AF9A8;
  if (!qword_1009AF9A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804840, &type metadata for ItemCounts);
    atomic_store(result, (unint64_t *)&qword_1009AF9A8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for MetricsRequest.Body.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1004A0CE4 + 4 * byte_10080466B[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1004A0D18 + 4 * byte_100804666[v4]))();
}

uint64_t sub_1004A0D18(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004A0D20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004A0D28LL);
  }
  return result;
}

uint64_t sub_1004A0D34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004A0D3CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1004A0D40(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004A0D48(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsRequest.Body.CodingKeys()
{
  return &type metadata for MetricsRequest.Body.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ItemCounts(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ItemCounts(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ItemCounts()
{
  return &type metadata for ItemCounts;
}

unint64_t sub_1004A0DD0()
{
  unint64_t result = qword_1009AF9B0;
  if (!qword_1009AF9B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804818, &type metadata for MetricsRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF9B0);
  }

  return result;
}

unint64_t sub_1004A0E18()
{
  unint64_t result = qword_1009AF9B8;
  if (!qword_1009AF9B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804788, &type metadata for MetricsRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF9B8);
  }

  return result;
}

unint64_t sub_1004A0E60()
{
  unint64_t result = qword_1009AF9C0;
  if (!qword_1009AF9C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008047B0, &type metadata for MetricsRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF9C0);
  }

  return result;
}

unint64_t sub_1004A0EA4()
{
  unint64_t result = qword_1009AF9D0;
  if (!qword_1009AF9D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804998, &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF9D0);
  }

  return result;
}

uint64_t sub_1004A0EE8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x3156676174726961LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3156676174726961LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x3256676174726961LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3256676174726961LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x3156616E6D66LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v8 = 0xE600000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3156616E6D66LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x3256616E6D66LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v9 = 0xE600000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3256616E6D66LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x6E6D66656C707061LL && a2 == 0xEB00000000315661LL)
  {
    unint64_t v10 = 0xEB00000000315661LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6D66656C707061LL, 0xEB00000000315661LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0x6E6D66656C707061LL && a2 == 0xEB00000000325661LL)
  {
    swift_bridgeObjectRelease(0xEB00000000325661LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6D66656C707061LL, 0xEB00000000325661LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_1004A1164@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009AF9D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004A0EA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ItemCounts.CodingKeys,  &type metadata for ItemCounts.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v26 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  char v25 = 1;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  char v24 = 2;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  char v23 = 3;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)(&v23, v5);
  char v22 = 4;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v5);
  char v21 = 5;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = v12;
  a2[1] = v13;
  uint64_t v16 = v19;
  a2[2] = v20;
  a2[3] = v16;
  a2[4] = v18;
  a2[5] = v14;
  return result;
}

uint64_t storeEnumTagSinglePayload for ItemCounts.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1004A13B8 + 4 * byte_100804675[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1004A13EC + 4 * byte_100804670[v4]))();
}

uint64_t sub_1004A13EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004A13F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004A13FCLL);
  }
  return result;
}

uint64_t sub_1004A1408(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004A1410LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1004A1414(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004A141C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ItemCounts.CodingKeys()
{
  return &type metadata for ItemCounts.CodingKeys;
}

unint64_t sub_1004A143C()
{
  unint64_t result = qword_1009AF9E0;
  if (!qword_1009AF9E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804970, &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF9E0);
  }

  return result;
}

unint64_t sub_1004A1484()
{
  unint64_t result = qword_1009AF9E8;
  if (!qword_1009AF9E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008048E0, &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF9E8);
  }

  return result;
}

unint64_t sub_1004A14CC()
{
  unint64_t result = qword_1009AF9F0;
  if (!qword_1009AF9F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804908, &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AF9F0);
  }

  return result;
}

uint64_t sub_1004A1510@<X0>(char *a1@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v40 = (char *)&v38 - v6;
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v38 - v7;
  uint64_t v9 = type metadata accessor for MACAddress(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v39 = (char *)&v38 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v38 - v16;
  MACAddress.init(data:type:)(0LL, 0x6000000000000LL, 1LL);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t result = v18(v8, 1LL, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }

  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v20(v17, v8, v9);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
  uint64_t v23 = v22;
  char v24 = (void *)(v1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData);
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData, v44, 0LL, 0LL);
  uint64_t v25 = *v24;
  if (*(void *)(*v24 + 16LL))
  {
    swift_bridgeObjectRetain(*v24);
    uint64_t v26 = sub_10030CF14(v21, v23);
    if ((v27 & 1) != 0)
    {
      sub_10006A650(*(void *)(v25 + 56) + 32 * v26, (uint64_t)&v45);
    }

    else
    {
      __int128 v45 = 0u;
      __int128 v46 = 0u;
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    __int128 v45 = 0u;
    __int128 v46 = 0u;
  }

  swift_bridgeObjectRelease();
  if (*((void *)&v46 + 1))
  {
    if ((swift_dynamicCast(v43, &v45, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
    {
      uint64_t v28 = v43[0];
      uint64_t v38 = v43[1];
      uint64_t v29 = *v24;
      if (*(void *)(*v24 + 16LL))
      {
        swift_bridgeObjectRetain(*v24);
        uint64_t v30 = sub_10030CF14(0xD000000000000018LL, 0x8000000100863950LL);
        if ((v31 & 1) != 0)
        {
          sub_10006A650(*(void *)(v29 + 56) + 32 * v30, (uint64_t)&v45);
        }

        else
        {
          __int128 v45 = 0u;
          __int128 v46 = 0u;
        }

        swift_bridgeObjectRelease();
        if (*((void *)&v46 + 1))
        {
          if ((swift_dynamicCast( v43,  &v45,  (char *)&type metadata for Any + 8,  &type metadata for MACAddress.AddressType,  6LL) & 1) != 0)
          {
            uint64_t v34 = (uint64_t)v40;
            MACAddress.init(data:type:)(v28, v38, LOBYTE(v43[0]));
            __int128 v35 = v39;
            v20(v39, v17, v9);
            if (v18((char *)v34, 1LL, v9) == 1)
            {
              __int128 v36 = v42;
              uint64_t v37 = v35;
LABEL_26:
              v20(v36, v37, v9);
              return sub_100015794(v34, (uint64_t *)&unk_1009AE480);
            }

            (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_28:
            __int128 v32 = v42;
            uint64_t v33 = (char *)v34;
            return ((uint64_t (*)(char *, char *, uint64_t))v20)(v32, v33, v9);
          }

id sub_1004A18F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = [*(id *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject) maximumWriteValueLengthForType:1];
  *a2 = result;
  return result;
}

id sub_1004A1934()
{
  if (qword_10099BA50 != -1) {
    swift_once(&qword_10099BA50, sub_1007C94A8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  sub_10000A720(v1, (uint64_t)qword_100A2B840);
  sub_1004A2AC8(0x74696E696564LL, 0xE600000000000000LL);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for Peripheral(0LL);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1004A1B50()
{
  return type metadata accessor for Peripheral(0LL);
}

uint64_t type metadata accessor for Peripheral(uint64_t a1)
{
  uint64_t result = qword_1009AFA40;
  if (!qword_1009AFA40) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Peripheral);
  }
  return result;
}

void sub_1004A1B94()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  uint64_t v6 = (char *)[v5 delegate];
  if (!v6 || (uint64_t v7 = v6, swift_unknownObjectRelease(v6), v7 != v0))
  {
    if (qword_10099BA50 != -1) {
      swift_once(&qword_10099BA50, sub_1007C94A8);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2B840);
    uint64_t v19 = v0;
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v10 = static os_log_type_t.fault.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v21 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v18 = v11 + 4;
      id v13 = [v5 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

      uint64_t v14 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v1, v14);
      unint64_t v17 = v16;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      uint64_t v20 = sub_1003F11D4(v15, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v18, v11 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "verifyIntegrity: Peripheral has mismatched delegate! %{public}s",  v11,  0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_1004A1E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v8 = a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen, v11, 33LL, 0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess(v11);
}

uint64_t sub_1004A1EFC(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType(v1);
  sub_1004A1B94();
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
  uint64_t v7 = v1;
  uint64_t v8 = a1;
  uint64_t v9 = ObjectType;
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1004A8238,  &v6,  v4,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
}

uint64_t sub_1004A1F70(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
  uint64_t v4 = v3;
  uint64_t v12 = &type metadata for Data;
  v11[0] = MACAddress.data.getter(v2);
  v11[1] = v5;
  uint64_t v6 = a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData;
  swift_beginAccess(v6, v10, 33LL, 0LL);
  sub_1000451C4((uint64_t)v11, v2, v4);
  uint64_t v7 = swift_endAccess(v10);
  char v8 = MACAddress.type.getter(v7);
  uint64_t v12 = &type metadata for MACAddress.AddressType;
  LOBYTE(v11[0]) = v8 & 1;
  swift_beginAccess(v6, v10, 33LL, 0LL);
  sub_1000451C4((uint64_t)v11, 0xD000000000000018LL, 0x8000000100863950LL);
  return swift_endAccess(v10);
}

uint64_t sub_1004A2078(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  uint64_t v5 = (void *)(a2 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData);
  int64_t v35 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  while (1)
  {
    if (v4)
    {
      unint64_t v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v9 = v8 | (v6 << 6);
LABEL_8:
      uint64_t v10 = *(void *)(a1 + 56);
      uint64_t v11 = (void *)(*(void *)(a1 + 48) + 16 * v9);
      uint64_t v12 = v11[1];
      *(void *)&__int128 v38 = *v11;
      *((void *)&v38 + 1) = v12;
      sub_10006A650(v10 + 32 * v9, (uint64_t)v39);
      swift_bridgeObjectRetain(v12);
      goto LABEL_27;
    }

    int64_t v13 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_42;
    }
    if (v13 < v35)
    {
      unint64_t v14 = *(void *)(v34 + 8 * v13);
      if (v14) {
        goto LABEL_12;
      }
      int64_t v15 = v6 + 2;
      ++v6;
      if (v13 + 1 < v35)
      {
        unint64_t v14 = *(void *)(v34 + 8 * v15);
        if (v14) {
          goto LABEL_15;
        }
        int64_t v6 = v13 + 1;
        if (v13 + 2 < v35)
        {
          unint64_t v14 = *(void *)(v34 + 8 * (v13 + 2));
          if (v14)
          {
            v13 += 2LL;
            goto LABEL_12;
          }

          int64_t v15 = v13 + 3;
          int64_t v6 = v13 + 2;
          if (v13 + 3 < v35) {
            break;
          }
        }
      }
    }

uint64_t sub_1004A2440()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007864( &qword_1009AFB18,  type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v21 = v0;
  uint64_t v4 = CustomStringConvertible.typeDescription.getter(ObjectType, v2);
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for Peripheral(0LL);
  uint64_t v8 = CustomStringConvertible<>.addressDescription.getter(v7, v2);
  uint64_t v10 = v9;
  id v11 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "delegate"));
  if (v11)
  {
    id v12 = v11;
    uint64_t v21 = 30768LL;
    unint64_t v22 = 0xE200000000000000LL;
    v20[0] = v11;
    unint64_t v13 = sub_10001570C();
    v14._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(v20, 16LL, 0LL, &type metadata for Int, v13);
    String.append(_:)(v14);
    swift_unknownObjectRelease(v12);
    id v11 = (id)swift_bridgeObjectRelease();
    unint64_t v15 = v22;
  }

  else
  {
    unint64_t v15 = 0xE300000000000000LL;
  }

  __chkstk_darwin(v11);
  void v19[2] = v4;
  void v19[3] = v6;
  v19[4] = v8;
  void v19[5] = v10;
  v19[6] = v1;
  v19[7] = v16;
  v19[8] = v15;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1004A8254,  v19,  v17,  (char *)&type metadata for () + 8,  &type metadata for String);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21;
}

void sub_1004A25E4( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, void *a8@<X8>)
{
  v63._countAndFlagsBits = a3;
  v65._countAndFlagsBits = a6;
  v65._object = a7;
  v63._object = a4;
  unint64_t v62 = a8;
  uint64_t v67 = type metadata accessor for MACAddress(0LL);
  uint64_t v72 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v66 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v64 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  Swift::String v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = 0LL;
  unint64_t v69 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(80LL);
  uint64_t v70 = v68;
  unint64_t v71 = v69;
  v19._countAndFlagsBits = 60LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = a1;
  v20._object = a2;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 8250LL;
  v21._object = (void *)0xE200000000000000LL;
  String.append(_:)(v21);
  String.append(_:)(v63);
  v22._countAndFlagsBits = 32LL;
  v22._object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  BOOL v23 = *(void **)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject);
  id v24 = [v23 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

  uint64_t v25 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v15, v25);
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v27._countAndFlagsBits = 0x796C7265646E7520LL;
  v27._object = (void *)0xED0000203A676E69LL;
  String.append(_:)(v27);
  id v28 = v23;
  id v29 = [v28 description];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v32 = v31;

  v33._countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);

  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 0x6167656C65645B20LL;
  v34._object = (void *)0xEC000000203A6574LL;
  String.append(_:)(v34);
  String.append(_:)(v65);
  v35._object = (void *)0xEC000000203A6E65LL;
  v35._countAndFlagsBits = 0x65537473616C205DLL;
  String.append(_:)(v35);
  uint64_t v36 = a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen;
  __n128 v37 = swift_beginAccess(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen, &v68, 0LL, 0LL);
  uint64_t v38 = v64;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v64 + 16))(v14, v36, v12, v37);
  uint64_t v39 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v39);
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v12);
  v41._countAndFlagsBits = 0x203A43414D20LL;
  v41._object = (void *)0xE600000000000000LL;
  String.append(_:)(v41);
  __int128 v42 = v66;
  sub_1004A1510(v66);
  uint64_t v43 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  uint64_t v44 = v67;
  v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v67, v43);
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v42, v44);
  v46._countAndFlagsBits = 0x203A656D616E20LL;
  v46._object = (void *)0xE700000000000000LL;
  String.append(_:)(v46);
  uint64_t v47 = *(void *)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8);
  if (v47)
  {
    uint64_t v48 = *(void *)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName);
    unint64_t v49 = *(void **)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8);
LABEL_5:
    swift_bridgeObjectRetain(v47);
    goto LABEL_6;
  }

  id v50 = [v28 name];
  if (v50)
  {
    unint64_t v51 = v50;
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    unint64_t v49 = v52;

    uint64_t v47 = 0LL;
    goto LABEL_5;
  }

  uint64_t v48 = 0LL;
  unint64_t v49 = (void *)0xE000000000000000LL;
LABEL_6:
  v53._countAndFlagsBits = v48;
  v53._object = v49;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 0x203A6570797420LL;
  v54._object = (void *)0xE700000000000000LL;
  String.append(_:)(v54);
  unsigned int v55 = [v28 connectedTransport];
  if (v55 == 2)
  {
    unint64_t v56 = 0xEA00000000007967LL;
    uint64_t v57 = 0x72656E45776F6C2ELL;
  }

  else
  {
    unint64_t v56 = 0xE800000000000000LL;
    if (v55 == 1) {
      uint64_t v57 = 0x63697373616C632ELL;
    }
    else {
      uint64_t v57 = 0x6E776F6E6B6E752ELL;
    }
  }

  uint64_t v58 = v62;
  unint64_t v59 = v56;
  String.append(_:)(*(Swift::String *)&v57);
  swift_bridgeObjectRelease();
  v60._countAndFlagsBits = 62LL;
  v60._object = (void *)0xE100000000000000LL;
  String.append(_:)(v60);
  unint64_t v61 = v71;
  *uint64_t v58 = v70;
  v58[1] = v61;
}

void sub_1004A2AC8(uint64_t a1, unint64_t a2)
{
  uint64_t v73 = a1;
  uint64_t v4 = type metadata accessor for MACAddress(0LL);
  uint64_t v80 = *(void *)(v4 - 8);
  uint64_t v81 = v4;
  __chkstk_darwin(v4);
  double v79 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  __chkstk_darwin(v6);
  double v76 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (void *)type metadata accessor for UUID(0LL);
  uint64_t v74 = *(v8 - 1);
  id v75 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100007864( &qword_1009AFB18,  type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v83 = (uint64_t)v2;
  uint64_t v71 = CustomStringConvertible.typeDescription.getter(ObjectType, v11);
  unint64_t v14 = v13;
  uint64_t v15 = type metadata accessor for Peripheral(0LL);
  uint64_t v72 = CustomStringConvertible<>.addressDescription.getter(v15, v11);
  unint64_t v17 = v16;
  uint64_t v18 = *(void **)&v2[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  id v19 = [v18 delegate];
  if (v19)
  {
    id v20 = v19;
    uint64_t v83 = 30768LL;
    v84[0] = 0xE200000000000000LL;
    v85[0] = (uint64_t)v19;
    unint64_t v21 = sub_10001570C();
    v22._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(v85, 16LL, 0LL, &type metadata for Int, v21);
    String.append(_:)(v22);
    swift_unknownObjectRelease(v20);
    swift_bridgeObjectRelease();
    uint64_t v24 = v83;
    unint64_t v23 = v84[0];
  }

  else
  {
    unint64_t v23 = 0xE300000000000000LL;
    uint64_t v24 = 7104878LL;
  }

  uint64_t v25 = v2;
  swift_bridgeObjectRetain_n(a2, 2LL);
  Swift::String v26 = v25;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v23);
  id v28 = (void *)Logger.logObject.getter(v27);
  int v29 = static os_log_type_t.default.getter(v28);
  if (!os_log_type_enabled((os_log_t)v28, (os_log_type_t)v29))
  {
    swift_bridgeObjectRelease_n(v23, 2LL);

    swift_bridgeObjectRelease_n(v17, 2LL);
    swift_bridgeObjectRelease_n(v14, 2LL);
    swift_bridgeObjectRelease_n(a2, 2LL);

    return;
  }

  int v68 = v29;
  os_log_t v69 = (os_log_t)v28;
  uint64_t v30 = swift_slowAlloc(122LL, -1LL);
  uint64_t v70 = (void *)swift_slowAlloc(8LL, -1LL);
  uint64_t v67 = swift_slowAlloc(288LL, -1LL);
  v85[0] = v67;
  *(_DWORD *)uint64_t v30 = 136317955;
  swift_bridgeObjectRetain(a2);
  uint64_t v83 = sub_1003F11D4(v73, a2, v85);
  uint64_t v73 = v24;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 4, v30 + 12);
  swift_bridgeObjectRelease_n(a2, 3LL);
  *(_WORD *)(v30 + 12) = 2080;
  swift_bridgeObjectRetain(v14);
  uint64_t v83 = sub_1003F11D4(v71, v14, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 14, v30 + 22);
  swift_bridgeObjectRelease_n(v14, 3LL);
  *(_WORD *)(v30 + 22) = 2082;
  swift_bridgeObjectRetain(v17);
  uint64_t v83 = sub_1003F11D4(v72, v17, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 24, v30 + 32);
  swift_bridgeObjectRelease_n(v17, 3LL);
  *(_WORD *)(v30 + 32) = 2082;
  id v31 = [v18 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

  uint64_t v32 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  id v33 = v75;
  uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v75, v32);
  unint64_t v36 = v35;
  (*(void (**)(char *, id))(v74 + 8))(v10, v33);
  uint64_t v83 = sub_1003F11D4(v34, v36, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 34, v30 + 42);

  swift_bridgeObjectRelease();
  *(_WORD *)(v30 + 42) = 2112;
  uint64_t v83 = (uint64_t)v18;
  id v75 = v18;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 44, v30 + 52);
  *uint64_t v70 = v18;

  *(_WORD *)(v30 + 52) = 2082;
  swift_bridgeObjectRetain(v23);
  uint64_t v83 = sub_1003F11D4(v73, v23, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 54, v30 + 62);
  swift_bridgeObjectRelease_n(v23, 3LL);
  *(_WORD *)(v30 + 62) = 2082;
  __n128 v37 = &v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen];
  __n128 v38 = swift_beginAccess(&v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen], &v83, 0LL, 0LL);
  Swift::String v40 = v76;
  uint64_t v39 = v77;
  uint64_t v41 = v78;
  (*(void (**)(char *, char *, uint64_t, __n128))(v77 + 16))(v76, v37, v78, v38);
  uint64_t v42 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
  unint64_t v45 = v44;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  uint64_t v82 = sub_1003F11D4(v43, v45, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 64, v30 + 72);

  swift_bridgeObjectRelease();
  *(_WORD *)(v30 + 72) = 2160;
  uint64_t v82 = 1752392040LL;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 74, v30 + 82);
  *(_WORD *)(v30 + 82) = 2081;
  Swift::String v46 = v79;
  sub_1004A1510(v79);
  uint64_t v47 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  uint64_t v48 = v81;
  uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v81, v47);
  unint64_t v51 = v50;
  (*(void (**)(char *, uint64_t))(v80 + 8))(v46, v48);
  uint64_t v82 = sub_1003F11D4(v49, v51, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 84, v30 + 92);

  swift_bridgeObjectRelease();
  *(_WORD *)(v30 + 92) = 2160;
  uint64_t v82 = 1752392040LL;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 94, v30 + 102);
  *(_WORD *)(v30 + 102) = 2081;
  uint64_t v52 = *(void *)&v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8];
  if (v52)
  {
    uint64_t v53 = *(void *)&v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName];
    unint64_t v54 = *(void *)&v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8];
    id v55 = v75;
  }

  else
  {
    id v55 = v75;
    id v56 = [v75 name];
    if (!v56)
    {
      uint64_t v53 = 0LL;
      unint64_t v54 = 0xE000000000000000LL;
      goto LABEL_11;
    }

    uint64_t v57 = v56;
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    unint64_t v54 = v58;

    uint64_t v52 = 0LL;
  }

  swift_bridgeObjectRetain(v52);
LABEL_11:
  uint64_t v82 = sub_1003F11D4(v53, v54, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 104, v30 + 112);

  swift_bridgeObjectRelease();
  *(_WORD *)(v30 + 112) = 2082;
  unsigned int v59 = [v55 connectedTransport];
  if (v59 == 2)
  {
    unint64_t v60 = 0xEA00000000007967LL;
    uint64_t v61 = 0x72656E45776F6C2ELL;
  }

  else
  {
    unint64_t v60 = 0xE800000000000000LL;
    if (v59 == 1) {
      uint64_t v61 = 0x63697373616C632ELL;
    }
    else {
      uint64_t v61 = 0x6E776F6E6B6E752ELL;
    }
  }

  uint64_t v62 = v67;
  Swift::String v63 = v70;
  uint64_t v82 = sub_1003F11D4(v61, v60, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 114, v30 + 122);

  swift_bridgeObjectRelease();
  os_log_t v64 = v69;
  _os_log_impl( (void *)&_mh_execute_header,  v69,  (os_log_type_t)v68,  "%s <%s: %{public}s %{public}s underlying: %@ [delegate: %{public}s] lastSeen: %{public}s MAC: %{private,mask.hash}s name: %{private,mask.hash}s type: %{public}s>",  (uint8_t *)v30,  0x7Au);
  uint64_t v65 = sub_100004AEC((uint64_t *)&unk_10099FB20);
  swift_arrayDestroy(v63, 1LL, v65);
  swift_slowDealloc(v63, -1LL, -1LL);
  swift_arrayDestroy(v62, 9LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v62, -1LL, -1LL);
  swift_slowDealloc(v30, -1LL, -1LL);
}

uint64_t sub_1004A33A0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataIsConnectable);
  uint64_t v6 = v5;
  uint64_t v7 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData);
  swift_beginAccess(v7, v12, 0LL, 0LL);
  uint64_t v8 = *v7;
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain(v8);
    uint64_t v9 = sub_10030CF14(v4, v6);
    if ((v10 & 1) != 0)
    {
      sub_10006A650(*(void *)(v8 + 56) + 32 * v9, (uint64_t)&v13);
    }

    else
    {
      __int128 v13 = 0u;
      __int128 v14 = 0u;
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
  }

  swift_bridgeObjectRelease();
  if (!*((void *)&v14 + 1))
  {
    uint64_t result = sub_100015794((uint64_t)&v13, &qword_10099E200);
    goto LABEL_11;
  }

  uint64_t result = swift_dynamicCast(a2, &v13, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
  if ((result & 1) == 0) {
LABEL_11:
  }
    *a2 = 2;
  return result;
}

uint64_t sub_1004A34C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v6, 0LL, 0LL);
  uint64_t v4 = *v3;
  *a2 = *v3;
  return swift_bridgeObjectRetain(v4);
}

void sub_1004A3524(uint64_t a1, uint64_t a2, uint64_t a3, Class isa)
{
  uint64_t v6 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
  void v8[2] = a3;
  v8[3] = a1;
  v8[4] = a2;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1004A821C,  v8,  v6,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  uint64_t v7 = *(void **)(a3 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject);
  if (isa)
  {
    sub_100022898(0LL, (unint64_t *)&qword_1009AFB10, &OBJC_CLASS___CBUUID_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  [v7 discoverServices:isa];
}

uint64_t sub_1004A35DC(char *a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v4 = &a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  if (*(void *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise])
  {
    if (qword_10099BA50 != -1) {
      swift_once(&qword_10099BA50, sub_1007C94A8);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2B840);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      char v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Discovery already in flight!", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    v14[0] = a1;
    __int16 v15 = 259;
    uint64_t v11 = a1;
    a2(v14);
    return sub_100015794((uint64_t)v14, &qword_1009AFAF0);
  }

  else
  {
    uint64_t v13 = *((void *)v4 + 1);
    *(void *)uint64_t v4 = a2;
    *((void *)v4 + 1) = a3;
    swift_retain();
    return sub_10002214C(0LL, v13);
  }

uint64_t sub_1004A3734(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  os_log_type_t v9 = (char *)&v36 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - v10;
  uint64_t v12 = type metadata accessor for ServiceUUID(0LL);
  __chkstk_darwin(v12);
  __int128 v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v36 = v1;
  sub_1004A1B94();
  uint64_t v15 = *(void *)(a1 + 16);
  unint64_t v16 = _swiftEmptyArrayStorage;
  if (!v15)
  {
LABEL_13:
    uint64_t v30 = v36;
    sub_1004A1B94();
    uint64_t v31 = swift_allocObject(&unk_10095E9B8, 32LL, 7LL);
    *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = v30;
    *(void *)(v31 + 24) = v16;
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009A6E10);
    swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    id v33 = v30;
    swift_bridgeObjectRetain(v16);
    v40[0] = Future.init(_:)(sub_1004A81C8, v31);
    unint64_t v34 = sub_1004A81D0();
    uint64_t v35 = Publisher.eraseToAnyPublisher()(v32, v34);
    swift_bridgeObjectRelease();
    swift_release();
    return v35;
  }

  uint64_t v41 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v15);
  uint64_t v17 = a1 + 32;
  unint64_t v38 = 0x8000000100863920LL;
  unint64_t v39 = 0x8000000100854A10LL;
  unint64_t v37 = 0x80000001008638F0LL;
  while (1)
  {
    sub_100013044(v17, (uint64_t)v40);
    unint64_t v23 = sub_100012ED8(v40, v40[3]);
    if (*(_BYTE *)v23) {
      break;
    }
    UUID.init(uuidString:)(0xD000000000000024LL, v39);
    uint64_t v24 = type metadata accessor for UUID(0LL);
    uint64_t v28 = *(void *)(v24 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v11, 1LL, v24);
    if ((_DWORD)result == 1) {
      goto LABEL_15;
    }
    uint64_t v27 = *(void (**)(void))(v28 + 32);
LABEL_3:
    v27();
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v19 = [(id)objc_opt_self(CBUUID) UUIDWithNSUUID:isa];

    type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8LL))(v14, v24);
    uint64_t v20 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
    uint64_t v21 = v41[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
    uint64_t v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
    specialized ContiguousArray._endMutation()(v22);
    v17 += 40LL;
    if (!--v15)
    {
      unint64_t v16 = v41;
      goto LABEL_13;
    }
  }

  if (*(_BYTE *)v23 != 1)
  {
    UUID.init(uuidString:)(0xD000000000000024LL, v37);
    uint64_t v24 = type metadata accessor for UUID(0LL);
    uint64_t v29 = *(void *)(v24 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v6, 1LL, v24);
    if ((_DWORD)result == 1) {
      goto LABEL_16;
    }
    uint64_t v27 = *(void (**)(void))(v29 + 32);
    goto LABEL_3;
  }

  UUID.init(uuidString:)(0xD000000000000024LL, v38);
  uint64_t v24 = type metadata accessor for UUID(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v9, 1LL, v24);
  if ((_DWORD)result != 1)
  {
    uint64_t v27 = *(void (**)(void))(v25 + 32);
    goto LABEL_3;
  }

  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1004A3ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServiceUUID(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = [*(id *)(*(void *)a1 + 32) UUID];
  sub_100598998();

  LOBYTE(v7) = static UUID.== infix(_:_:)(v6, a2);
  sub_100018C68((uint64_t)v6, type metadata accessor for ServiceUUID);
  return v7 & 1;
}

uint64_t sub_1004A3BA0(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v5 = __chkstk_darwin(v4);
  id v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v29 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = type metadata accessor for ServiceUUID(0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v29 - v17;
  id v19 = [*(id *)(*(void *)a1 + 32) UUID];
  sub_100598998();

  uint64_t v20 = sub_100012ED8(a2, a2[3]);
  if (!*(_BYTE *)v20)
  {
    UUID.init(uuidString:)(0xD000000000000024LL, 0x8000000100854A10LL);
    uint64_t v24 = type metadata accessor for UUID(0LL);
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v12, 1LL, v24);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v16, v12, v24);
      goto LABEL_9;
    }

    goto LABEL_11;
  }

  if (*(_BYTE *)v20 == 1)
  {
    UUID.init(uuidString:)(0xD000000000000024LL, 0x8000000100863920LL);
    uint64_t v21 = type metadata accessor for UUID(0LL);
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v10, 1LL, v21);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v16, v10, v21);
LABEL_9:
      char v28 = static UUID.== infix(_:_:)(v18, v16);
      sub_100018C68((uint64_t)v16, type metadata accessor for ServiceUUID);
      sub_100018C68((uint64_t)v18, type metadata accessor for ServiceUUID);
      return v28 & 1;
    }

    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  UUID.init(uuidString:)(0xD000000000000024LL, 0x80000001008638F0LL);
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v7, 1LL, v26);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v16, v7, v26);
    goto LABEL_9;
  }