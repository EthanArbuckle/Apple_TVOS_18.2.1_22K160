Swift::Int sub_10004DCC4(uint64_t a1, uint64_t a2)
{
  return sub_10004EE04(a1, a2, &qword_10099E370);
}

uint64_t sub_10004DCD0(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E2E8);
  char v44 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v43 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  v41 = v3;
  int64_t v42 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v25 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v26 = v25 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v27 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v27 >= v42) {
      break;
    }
    v28 = (void *)(v5 + 64);
    unint64_t v29 = *(void *)(v43 + 8 * v27);
    ++v14;
    if (!v29)
    {
      int64_t v14 = v27 + 1;
      if (v27 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v29 = *(void *)(v43 + 8 * v14);
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v42)
        {
LABEL_36:
          swift_release();
          v3 = v41;
          if ((v44 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v29 = *(void *)(v43 + 8 * v30);
        if (!v29)
        {
          while (1)
          {
            int64_t v14 = v30 + 1;
            if (__OFADD__(v30, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v42) {
              goto LABEL_36;
            }
            unint64_t v29 = *(void *)(v43 + 8 * v14);
            ++v30;
            if (v29) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v30;
      }
    }

uint64_t sub_10004DFFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v5;
  if (*(void *)(*v5 + 24) > a1) {
    a1 = *(void *)(*v5 + 24);
  }
  sub_100004AEC(a3);
  int v47 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_43;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  v45 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v43 = v5;
  int64_t v44 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0LL;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v25 >= v44) {
      break;
    }
    unint64_t v26 = v45;
    unint64_t v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v44) {
        goto LABEL_36;
      }
      unint64_t v27 = v45[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_36:
          swift_release(v12);
          uint64_t v5 = v43;
          if ((v47 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v21 >= v44) {
              goto LABEL_36;
            }
            unint64_t v27 = v45[v21];
            ++v28;
            if (v27) {
              goto LABEL_23;
            }
          }
        }

        int64_t v21 = v28;
      }
    }

uint64_t sub_10004E394(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v43 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100004AEC(&qword_10099E318);
  int v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v42 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v41) {
      break;
    }
    unint64_t v24 = v42;
    unint64_t v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v25 = v42[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release();
          v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v41) {
              goto LABEL_36;
            }
            unint64_t v25 = v42[v18];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v26;
      }
    }

uint64_t sub_10004E738(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E208);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  int64_t v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release();
          v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

uint64_t sub_10004EACC(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E3B8);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    unint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    unint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v14 << 6);
      }

      else
      {
        int64_t v22 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v22 >= v35) {
          goto LABEL_36;
        }
        unint64_t v23 = v36[v22];
        ++v14;
        if (!v23)
        {
          int64_t v14 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_36;
          }
          unint64_t v23 = v36[v14];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              swift_release();
              v3 = v34;
              if ((v37 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v36 = -1LL << v33;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v14 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_43;
                }
                if (v14 >= v35) {
                  goto LABEL_36;
                }
                unint64_t v23 = v36[v14];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v14 = v24;
          }
        }

Swift::Int sub_10004EE04(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100004AEC(a3);
  char v40 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v39 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  char v37 = v4;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v38) {
      break;
    }
    int64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v38) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v39 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v38) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v39 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

uint64_t sub_10004F10C(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100004AEC(&qword_10099E3A8);
  int v35 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v31 = v3;
    uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v33 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1LL << v12);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v15 = v14 & v13;
    int64_t v32 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0LL;
    while (1)
    {
      if (v15)
      {
        unint64_t v22 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v23 = v22 | (v18 << 6);
      }

      else
      {
        int64_t v24 = v18 + 1;
        if (__OFADD__(v18, 1LL))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          return result;
        }

        unint64_t v25 = v33;
        if (v24 >= v32) {
          goto LABEL_26;
        }
        unint64_t v26 = v33[v24];
        ++v18;
        if (!v26)
        {
          int64_t v18 = v24 + 1;
          if (v24 + 1 >= v32) {
            goto LABEL_26;
          }
          unint64_t v26 = v33[v18];
          if (!v26)
          {
            int64_t v27 = v24 + 2;
            if (v27 >= v32)
            {
LABEL_26:
              swift_release();
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                v3 = v31;
                goto LABEL_33;
              }

              uint64_t v30 = 1LL << *(_BYTE *)(v9 + 32);
              if (v30 >= 64) {
                bzero(v25, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *unint64_t v25 = -1LL << v30;
              }
              v3 = v31;
              *(void *)(v9 + 16) = 0LL;
              break;
            }

            unint64_t v26 = v33[v27];
            if (!v26)
            {
              while (1)
              {
                int64_t v18 = v27 + 1;
                if (__OFADD__(v27, 1LL)) {
                  goto LABEL_35;
                }
                if (v18 >= v32) {
                  goto LABEL_26;
                }
                unint64_t v26 = v33[v18];
                ++v27;
                if (v26) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v18 = v27;
          }
        }

uint64_t sub_10004F40C(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E4E8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = v3;
    int64_t v9 = 0LL;
    int v35 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }

      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v21 >= v34) {
          goto LABEL_36;
        }
        unint64_t v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_36;
          }
          unint64_t v22 = v35[v9];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                v3 = v33;
                goto LABEL_43;
              }

              uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *int v35 = -1LL << v32;
              }
              v3 = v33;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v34) {
                  goto LABEL_36;
                }
                unint64_t v22 = v35[v9];
                ++v23;
                if (v22) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v23;
          }
        }

uint64_t sub_10004F6E4(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for BeaconKeyServiceBuilder.FileKey(0LL);
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v46 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E180);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_48;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v41 = v2;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0LL;
  uint64_t v44 = v9;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      return result;
    }

    if (v22 >= v42) {
      break;
    }
    int64_t v23 = v43;
    unint64_t v24 = v43[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_41;
      }
      unint64_t v24 = v43[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v42)
        {
LABEL_41:
          swift_release();
          v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_48;
          }
          goto LABEL_44;
        }

        unint64_t v24 = v43[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_50;
            }
            if (v18 >= v42) {
              goto LABEL_41;
            }
            unint64_t v24 = v43[v18];
            ++v25;
            if (v24) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v25;
      }
    }

uint64_t sub_10004FB40(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E430);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    uint64_t v32 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (void *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v18 = v17 | (v9 << 6);
      }

      else
      {
        int64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v19 >= v14) {
          goto LABEL_34;
        }
        unint64_t v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          int64_t v9 = v19 + 1;
          if (v19 + 1 >= v14) {
            goto LABEL_34;
          }
          unint64_t v20 = v10[v9];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                v3 = v32;
                goto LABEL_41;
              }

              uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v10 = -1LL << v31;
              }
              v3 = v32;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_43;
                }
                if (v9 >= v14) {
                  goto LABEL_34;
                }
                unint64_t v20 = v10[v9];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v21;
          }
        }

uint64_t sub_10004FDF0(uint64_t a1, uint64_t a2)
{
  return sub_10004CC7C(a1, a2, &qword_10099E3F8);
}

uint64_t sub_10004FDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v41 = v2;
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E428);
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release();
    BOOL v38 = v41;
LABEL_44:
    *BOOL v38 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v43 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v42 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0LL;
  HIDWORD(v40) = a2;
  uint64_t v18 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v18 = 32LL;
  }
  uint64_t v44 = v18;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }

    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v22 >= v42)
    {
      swift_release();
      BOOL v38 = v41;
      char v23 = v43;
      if ((v40 & 0x100000000LL) != 0)
      {
LABEL_39:
        uint64_t v39 = 1LL << *(_BYTE *)(v8 + 32);
        if (v39 >= 64) {
          bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *char v23 = -1LL << v39;
        }
        *(void *)(v8 + 16) = 0LL;
      }

uint64_t sub_100050198(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E3D8);
  char v42 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v40 = (void *)(v5 + 64);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v39 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v39) {
      break;
    }
    unint64_t v24 = v40;
    unint64_t v25 = v40[v23];
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v39) {
        goto LABEL_36;
      }
      unint64_t v25 = v40[v14];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_36:
          swift_release();
          if ((v42 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v40[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v39) {
              goto LABEL_36;
            }
            unint64_t v25 = v40[v14];
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v26;
      }
    }

uint64_t sub_100050504(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E3E0);
  char v42 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v39 = v3;
  int64_t v40 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v40) {
      break;
    }
    unint64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v41 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v40) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v41 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v40)
        {
LABEL_36:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v41 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v40) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v41 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

uint64_t sub_100050854(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = v2;
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E3E8);
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release();
    uint64_t v38 = v41;
LABEL_44:
    *uint64_t v38 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  __int128 v43 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v42 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0LL;
  HIDWORD(v40) = a2;
  uint64_t v18 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v18 = 32LL;
  }
  uint64_t v44 = v18;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }

    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v22 >= v42)
    {
      swift_release();
      uint64_t v38 = v41;
      unint64_t v23 = v43;
      if ((v40 & 0x100000000LL) != 0)
      {
LABEL_39:
        uint64_t v39 = 1LL << *(_BYTE *)(v8 + 32);
        if (v39 >= 64) {
          bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *unint64_t v23 = -1LL << v39;
        }
        *(void *)(v8 + 16) = 0LL;
      }

uint64_t sub_100050BF0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v5;
  if (*(void *)(*v5 + 24) > a1) {
    a1 = *(void *)(*v5 + 24);
  }
  sub_100004AEC(a3);
  int v47 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_43;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  uint64_t v45 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  __int128 v43 = v5;
  int64_t v44 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0LL;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v25 >= v44) {
      break;
    }
    uint64_t v26 = v45;
    unint64_t v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v44) {
        goto LABEL_36;
      }
      unint64_t v27 = v45[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_36:
          swift_release();
          uint64_t v5 = v43;
          if ((v47 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v21 >= v44) {
              goto LABEL_36;
            }
            unint64_t v27 = v45[v21];
            ++v28;
            if (v27) {
              goto LABEL_23;
            }
          }
        }

        int64_t v21 = v28;
      }
    }

uint64_t sub_100050F88(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_10099E4C8);
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  __chkstk_darwin(v6);
  v54 = &v46[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v53 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v46[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(void *)(*v3 + 24);
  }
  sub_100004AEC(&qword_10099E4D0);
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v11, v12, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_44;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v16 = *(void *)(v11 + 64);
  v50 = (void *)(v11 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  v48 = v3;
  int64_t v49 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t v52 = v11;
  uint64_t result = swift_retain();
  int64_t v21 = 0LL;
  int v47 = a2;
  uint64_t v22 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v22 = 32LL;
  }
  uint64_t v51 = v22;
  uint64_t v23 = v22;
  while (1)
  {
    if (v18)
    {
      unint64_t v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v26 = v25 | (v21 << 6);
      goto LABEL_27;
    }

    int64_t v27 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v27 >= v49) {
      break;
    }
    int64_t v28 = v50;
    unint64_t v29 = v50[v27];
    ++v21;
    if (!v29)
    {
      int64_t v21 = v27 + 1;
      if (v27 + 1 >= v49) {
        goto LABEL_37;
      }
      unint64_t v29 = v50[v21];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v49)
        {
LABEL_37:
          uint64_t v44 = v52;
          swift_release();
          v3 = v48;
          if ((v47 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v29 = v50[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v21 = v30 + 1;
            if (__OFADD__(v30, 1LL)) {
              goto LABEL_46;
            }
            if (v21 >= v49) {
              goto LABEL_37;
            }
            unint64_t v29 = v50[v21];
            ++v30;
            if (v29) {
              goto LABEL_26;
            }
          }
        }

        int64_t v21 = v30;
      }
    }

uint64_t sub_100051384(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E460);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v36) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v36) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_10005168C(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E1C8);
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    char v33 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v31 = v3;
    int64_t v32 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }

      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_36;
        }
        unint64_t v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_36;
          }
          unint64_t v21 = v33[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }

              uint64_t v30 = 1LL << *(_BYTE *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *char v33 = -1LL << v30;
              }
              v3 = v31;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v32) {
                  goto LABEL_36;
                }
                unint64_t v21 = v33[v9];
                ++v22;
                if (v21) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v22;
          }
        }

uint64_t sub_100051964(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for SecureLocationsSubscription(0LL);
  uint64_t v43 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::Int v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100004AEC(&qword_10099E470);
  int v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  BOOL v42 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  char v40 = v3;
  int64_t v41 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v41) {
      break;
    }
    unint64_t v24 = v42;
    unint64_t v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v25 = v42[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release();
          v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v41) {
              goto LABEL_36;
            }
            unint64_t v25 = v42[v18];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v26;
      }
    }

uint64_t sub_100051CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v60 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v48 = v2;
  uint64_t v11 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E188);
  int v56 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    uint64_t result = swift_release();
    uint64_t v45 = v48;
LABEL_45:
    uint64_t *v45 = v13;
    return result;
  }

  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  v50 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  int64_t v49 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v51 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  v57 = (uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32);
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0LL;
  uint64_t v52 = v11;
  uint64_t v53 = v13;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      uint64_t v23 = (v17 - 1) & v17;
      unint64_t v24 = v22 | (v20 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

    if (v25 >= v49)
    {
      swift_release();
      uint64_t v45 = v48;
      int64_t v26 = v50;
      if ((v56 & 1) != 0)
      {
LABEL_40:
        uint64_t v46 = 1LL << *(_BYTE *)(v11 + 32);
        if (v46 >= 64) {
          bzero(v26, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *int64_t v26 = -1LL << v46;
        }
        *(void *)(v11 + 16) = 0LL;
      }

LABEL_44:
      uint64_t result = swift_release();
      goto LABEL_45;
    }

    int64_t v26 = v50;
    unint64_t v27 = v50[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v49) {
        goto LABEL_37;
      }
      unint64_t v27 = v50[v20];
      if (!v27) {
        break;
      }
    }

    if (v72 < v62) {
      goto LABEL_125;
    }
    v186 = v72;
    if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) != 0) {
      unint64_t v58 = v160;
    }
    else {
      unint64_t v58 = sub_1003CB1DC(0LL, *((void *)v160 + 2) + 1LL, 1, v160);
    }
    v93 = *((void *)v58 + 2);
    v92 = *((void *)v58 + 3);
    v61 = v93 + 1;
    v57 = v186;
    if (v93 >= v92 >> 1)
    {
      v143 = sub_1003CB1DC((char *)(v92 > 1), v93 + 1, 1, v58);
      v57 = v186;
      unint64_t v58 = v143;
    }

    *((void *)v58 + 2) = v61;
    v94 = v58 + 32;
    v95 = &v58[16 * v93 + 32];
    *(void *)v95 = v62;
    *((void *)v95 + 1) = v57;
    if (v93) {
      break;
    }
    v61 = 1LL;
LABEL_14:
    v60 = v195[1];
    if (v57 >= v60) {
      goto LABEL_96;
    }
  }

  while (1)
  {
    v96 = v61 - 1;
    if (v61 >= 4)
    {
      v101 = &v94[16 * v61];
      v102 = *((void *)v101 - 8);
      v103 = *((void *)v101 - 7);
      v107 = __OFSUB__(v103, v102);
      v104 = v103 - v102;
      if (v107) {
        goto LABEL_114;
      }
      v106 = *((void *)v101 - 6);
      v105 = *((void *)v101 - 5);
      v107 = __OFSUB__(v105, v106);
      v99 = v105 - v106;
      v100 = v107;
      if (v107) {
        goto LABEL_115;
      }
      v108 = v61 - 2;
      v109 = &v94[16 * v61 - 32];
      v111 = *(void *)v109;
      v110 = *((void *)v109 + 1);
      v107 = __OFSUB__(v110, v111);
      v112 = v110 - v111;
      if (v107) {
        goto LABEL_117;
      }
      v107 = __OFADD__(v99, v112);
      v113 = v99 + v112;
      if (v107) {
        goto LABEL_120;
      }
      if (v113 >= v104)
      {
        v131 = &v94[16 * v96];
        v133 = *(void *)v131;
        v132 = *((void *)v131 + 1);
        v107 = __OFSUB__(v132, v133);
        v134 = v132 - v133;
        if (v107) {
          goto LABEL_124;
        }
        v124 = v99 < v134;
        goto LABEL_81;
      }
    }

    else
    {
      if (v61 != 3)
      {
        v125 = *((void *)v58 + 4);
        v126 = *((void *)v58 + 5);
        v107 = __OFSUB__(v126, v125);
        v118 = v126 - v125;
        v119 = v107;
        goto LABEL_75;
      }

      v98 = *((void *)v58 + 4);
      v97 = *((void *)v58 + 5);
      v107 = __OFSUB__(v97, v98);
      v99 = v97 - v98;
      v100 = v107;
    }

    if ((v100 & 1) != 0) {
      goto LABEL_116;
    }
    v108 = v61 - 2;
    v114 = &v94[16 * v61 - 32];
    v116 = *(void *)v114;
    v115 = *((void *)v114 + 1);
    v117 = __OFSUB__(v115, v116);
    v118 = v115 - v116;
    v119 = v117;
    if (v117) {
      goto LABEL_119;
    }
    v120 = &v94[16 * v96];
    v122 = *(void *)v120;
    v121 = *((void *)v120 + 1);
    v107 = __OFSUB__(v121, v122);
    v123 = v121 - v122;
    if (v107) {
      goto LABEL_122;
    }
    if (__OFADD__(v118, v123)) {
      goto LABEL_123;
    }
    if (v118 + v123 >= v99)
    {
      v124 = v99 < v123;
LABEL_81:
      if (v124) {
        v96 = v108;
      }
      goto LABEL_83;
    }

    goto LABEL_45;
  }

  if (!a7)
  {
    v69 = qword_10099B810;
    v60 = a2;
    if (v69 != -1) {
      swift_once(&qword_10099B810, sub_10069374C);
    }
    v70 = type metadata accessor for Logger(0LL);
    sub_10000A720(v70, (uint64_t)qword_100A2B188);
    v62 = v7;
    v63 = (os_log_s *)Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v66 = (char **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)v65 = 138412290;
      v126 = (unint64_t)v62;
      v71 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v65 + 4, v65 + 12);
      *v66 = v62;

      v68 = "MessagingServiceDelegateTrampoline: No context for %@";
      goto LABEL_43;
    }

    goto LABEL_44;
  }

  if (v120)
  {
    if (a1)
    {
      v50 = qword_10099B820;
      uint64_t v51 = a2;
      uint64_t v52 = a7;
      swift_bridgeObjectRetain(v49);
      if (v50 != -1) {
        uint64_t v53 = swift_once(&qword_10099B820, sub_1006937F8);
      }
      uint64_t v54 = qword_100A2B1B8;
      __chkstk_darwin(v53);
      v114[2] = a1;
      uint64_t v55 = sub_100004AEC(&qword_1009A34B0);
      a1 = 0LL;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10016CFAC, v114, v54, (char *)&type metadata for () + 8, v55);
      if (v127) {
        int v56 = v126;
      }
      else {
        int v56 = 0xD000000000000011LL;
      }
      if (v127) {
        v57 = v127;
      }
      else {
        v57 = 0x80000001008563E0LL;
      }
      unint64_t v58 = v52;
      sub_1006527A0(v58, (uint64_t)v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
      {
        (*(void (**)(char *, char *))(v124 + 8))(v123, v125);
        swift_unknownObjectRelease(v122);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        sub_100015794((uint64_t)v14, &qword_1009A34C8);
        return;
      }

      v116 = v56;
      v90 = v119;
      sub_10016C7B0((uint64_t)v14, v119);
      v91 = v51;
      v92 = [v91 uniqueID];
      if (v92)
      {
        v93 = v92;
        v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
        v96 = v95;

        sub_100167798((uint64_t)v120);
        v98 = v97;
        v99 = *(void *)(v97 + 16);
        if (v99)
        {
          sub_100004AEC(&qword_10099E4F0);
          v100 = (void *)static _DictionaryStorage.allocate(capacity:)(v99);
        }

        else
        {
          v100 = &_swiftEmptyDictionarySingleton;
        }

        v120 = v58;
        v126 = (unint64_t)v100;
        swift_bridgeObjectRetain(v98);
        sub_10016C3AC(v103, 1, &v126);
        swift_bridgeObjectRelease();
        a1 = v126;
        v104 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v118, (uint64_t)v121);
        if (v106)
        {
          v107 = v104;
          v108 = v105;
          v109 = v106;
          v110 = v122;
          ObjectType = swift_getObjectType(v122);
          v112 = v94;
          v113 = v123;
          (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, char *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 32))( v116,  v57,  v112,  v96,  v123,  a1,  v107,  v108,  v109,  v90,  ObjectType,  v117);
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease(v110);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          sub_10016C7F4(v90);
          v74 = *(void (**)(char *, char *))(v124 + 8);
          v75 = v113;
          goto LABEL_46;
        }

        goto LABEL_61;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_61:
    __break(1u);
    swift_unexpectedError(a1, "Swift/Dictionary.swift", 22LL, 1LL, 489LL);
    __break(1u);
    return;
  }

  v76 = qword_10099B810;
  v77 = a2;
  v78 = a7;
  if (v76 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  v79 = type metadata accessor for Logger(0LL);
  sub_10000A720(v79, (uint64_t)qword_100A2B188);
  v80 = v7;
  v81 = (os_log_s *)Logger.logObject.getter(v80);
  v82 = static os_log_type_t.error.getter(v81);
  if (os_log_type_enabled(v81, v82))
  {
    v83 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v84 = swift_slowAlloc(8LL, -1LL);
    v121 = v78;
    v85 = v77;
    v86 = (void *)v84;
    *(_DWORD *)v83 = 138412290;
    v126 = (unint64_t)v80;
    v87 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v83 + 4, v83 + 12);
    *v86 = v80;

    _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "MessagingServiceDelegateTrampoline: No metadata for %@",  v83,  0xCu);
    v88 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v86, 1LL, v88);
    v89 = v86;
    v77 = v85;
    v78 = v121;
    swift_slowDealloc(v89, -1LL, -1LL);
    swift_slowDealloc(v83, -1LL, -1LL);
  }

  else
  {
  }

  v102 = v124;
  v101 = v125;

  swift_unknownObjectRelease(v122);
  (*(void (**)(char *, char *))(v102 + 8))(v123, v101);
}

    sub_1003CB57C((void **)&v70, (const void **)&v69, &v68);
    return 1LL;
  }

      sub_1003CB4B8(&v31, &v30, &v29);
      return 1LL;
    }
  }

  else if (v8 >= -31)
  {
    uint64_t v14 = 32 * v10;
    if (__dst != __src || &__src[v14] <= __dst) {
      memmove(__dst, __src, v14);
    }
    uint64_t v15 = &v4[v14];
    uint64_t v29 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 32) <= 0xFFFFFFFFFFFFFFC0LL)
    {
      uint64_t v16 = v4;
      while (1)
      {
        if (*((double *)v16 + 2) >= *((double *)v6 + 2))
        {
          v4 = v16 + 32;
          uint64_t v18 = v16;
          unint64_t v17 = v6;
          if (v7 == v16)
          {
            v16 += 32;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }

          else
          {
            v16 += 32;
          }
        }

        else
        {
          unint64_t v17 = v6 + 32;
          uint64_t v18 = v6;
          if (v7 == v6 && v7 < v17) {
            goto LABEL_22;
          }
        }

        unint64_t v19 = *((_OWORD *)v18 + 1);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v18;
        *((_OWORD *)v7 + 1) = v19;
LABEL_22:
        v7 += 32;
        if (v16 < v15)
        {
          uint64_t v6 = v17;
        }

        uint64_t v30 = v4;
        uint64_t v31 = v7;
        goto LABEL_44;
      }
    }

    goto LABEL_44;
  }

  int64_t v28 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v28,  1046LL,  0);
  __break(1u);
  return result;
}

      v94 = 0LL;
      *(void *)&v202 = 2LL;
LABEL_54:
      unint64_t v42 = v188;
LABEL_26:
      v99 = v202;
      v100 = v51;
      swift_errorRetain(v94);
      v101.super.isa = Date._bridgeToObjectiveC()().super.isa;
      if (v94)
      {
        v102 = (void *)_convertErrorToNSError(_:)(v94);
        swift_errorRelease(v94);
      }

      else
      {
        v102 = 0LL;
      }

      v103 = [objc_allocWithZone(SPBeaconTaskInformation) initWithName:v100 lastUpdated:v101.super.isa error:v102 state:v99];

      sub_10001581C(v44, (uint64_t)v18, &qword_10099D8A0);
      if (v185((__int128 *)v18, 1LL, v42) == 1)
      {
        v45.super.isa = 0LL;
      }

      else
      {
        v45.super.isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v190 + 8))(v18, v42);
      }

      uint64_t v14 = v187;
      [v103 setCommandIdentifier:v45.super.isa];

      uint64_t v46 = v100;
      uint64_t v47 = v103;
      v48 = v195;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v195);
      v201 = v48;
      sub_10005D250((uint64_t)v47, v46, isUniquelyReferenced_nonNull_native);
      char v41 = v201;

      swift_bridgeObjectRelease();
      swift_errorRelease(v94);
      (*(void (**)(char *, uint64_t))(v197 + 8))(v14, v198);
      sub_100015794(v44, &qword_10099D8A0);
      unint64_t v40 = v194 + 1;
      unint64_t v39 = v196 - 1;
      BOOL v43 = v190;
      if (v196 == 1) {
        goto LABEL_68;
      }
    }

    swift_bridgeObjectRelease_n(v122, 2LL);
LABEL_40:
    v126 = sub_100577004(v191 + *(int *)(v8 + 24));
    v127 = v126[2];
    v128 = type metadata accessor for LostModeRecord(0LL);
    v129 = *(void *)(v128 - 8);
    if (v127)
    {
      v130 = (uint64_t)v166;
      sub_10001DC4C( (uint64_t)v126 + ((*(unsigned __int8 *)(v129 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80)),  (uint64_t)v166,  type metadata accessor for LostModeRecord);
      v131 = 0LL;
    }

    else
    {
      v131 = 1LL;
      v130 = (uint64_t)v166;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(v130, v131, 1LL, v128);
    swift_bridgeObjectRelease();
    v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v130, 1LL, v128);
    sub_100015794(v130, &qword_1009AA840);
    uint64_t v8 = v176;
    if (v132 != 1) {
      goto LABEL_53;
    }
    goto LABEL_44;
  }

  char v41 = &_swiftEmptyDictionarySingleton;
  unint64_t v42 = v188;
  BOOL v43 = v190;
LABEL_68:
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v204);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v169, v42);
  return (unint64_t)v41;
}

        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
        __break(1u);
        return result;
      }
    }

    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  uint64_t v13 = v73;
  uint64_t v10 = v74;
  if (qword_10099B3E0 != -1) {
    goto LABEL_39;
  }
  while (1)
  {
    char v41 = type metadata accessor for Logger(0LL);
    sub_10000A720(v41, (uint64_t)qword_100A2A8D8);
    unint64_t v42 = v65;
    BOOL v43 = v13[2](v65, v75, v10);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    uint64_t v45 = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc(42LL, -1LL);
      uint64_t v47 = swift_slowAlloc(32LL, -1LL);
      v64 = v47;
      *(_DWORD *)uint64_t v46 = 141558787;
      v76 = 1752392040LL;
      v77 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v46 + 4, v46 + 12);
      *(_WORD *)(v46 + 12) = 2081;
      v48 = sub_1000F620C();
      int64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v74, v48);
      v76 = sub_1003F11D4(v49, v50, &v77);
      uint64_t v10 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v46 + 14, v46 + 22);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v73[1])(v42, v10);
      *(_WORD *)(v46 + 22) = 2048;
      v76 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v46 + 24, v46 + 32);
      *(_WORD *)(v46 + 32) = 2048;
      v76 = v38;
      a4 = (uint64_t *)&off_10099B000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v46 + 34, v46 + 42);
      _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "        Buckets clamped for beacon %{private,mask.hash}s,starting secondary index %llu <= factor %lld -- clamping to 1.",  (uint8_t *)v46,  0x2Au);
      uint64_t v51 = v64;
      swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1LL, -1LL);
      uint64_t v52 = v46;
      uint64_t v13 = v73;
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
      ((void (*)(char *, uint64_t))v13[1])(v42, v10);
    }

    uint64_t v15 = v71;
    a3 = (unint64_t)v72;
    a5 = 1LL;
    if (v38 && v9 < v38)
    {
      if (v9 <= 1) {
        uint64_t v9 = 1LL;
      }
      a5 = 1LL;
    }

    else
    {
LABEL_24:
      if ((v9 & 0x8000000000000000LL) != 0) {
        goto LABEL_41;
      }
      uint64_t v53 = v9 - v38;
      if (__OFSUB__(v9, v38)) {
        goto LABEL_43;
      }
      if ((v53 & 0x8000000000000000LL) != 0) {
        goto LABEL_44;
      }
      if (a5 <= v53) {
        v9 -= v38;
      }
      else {
        uint64_t v9 = a5;
      }
    }

      __break(1u);
      goto LABEL_45;
    }

    if (a4 == v13) {
      break;
    }
LABEL_2:
    if (__CFADD__(v13++, 1LL))
    {
      __break(1u);
      goto LABEL_44;
    }
  }

  if ((v12 & 1) != 0)
  {
    uint64_t v15 = 0;
    goto LABEL_13;
  }

  return _swiftEmptyArrayStorage;
}

        sub_100018C68(v110, type metadata accessor for BeaconProductInfoRecord);
      }

      v114 = v146;
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      v115 = type metadata accessor for Logger(0LL);
      sub_10000A720(v115, (uint64_t)qword_100A2AC98);
      v116 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 16))(v114, v50, v66);
      v117 = (os_log_s *)Logger.logObject.getter(v116);
      v118 = static os_log_type_t.error.getter(v117);
      if (os_log_type_enabled(v117, v118))
      {
        v119 = swift_slowAlloc(22LL, -1LL);
        v120 = swift_slowAlloc(32LL, -1LL);
        v168 = v120;
        *(_DWORD *)v119 = 141558275;
        v170 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, v119 + 4, v119 + 12);
        *(_WORD *)(v119 + 12) = 2081;
        v121 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v122 = dispatch thunk of CustomStringConvertible.description.getter(v66, v121);
        v170 = sub_1003F11D4(v122, v123, &v168);
        v89 = v151;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, v119 + 14, v119 + 22);
        swift_bridgeObjectRelease();
        v124 = *(void (**)(char *, uint64_t))(v67 + 8);
        v124(v114, v66);
        _os_log_impl( (void *)&_mh_execute_header,  v117,  v118,  "groupedBeaconDisplayName: No product info or partInfo for %{private,mask.hash}s.",  (uint8_t *)v119,  0x16u);
        swift_arrayDestroy(v120, 1LL, (char *)&type metadata for Any + 8);
        v125 = v120;
        v64 = v159;
        swift_slowDealloc(v125, -1LL, -1LL);
        swift_slowDealloc(v119, -1LL, -1LL);
      }

      else
      {
        v124 = *(void (**)(char *, uint64_t))(v67 + 8);
        v124(v114, v66);
      }

      v126 = (uint64_t *)(v89 + *(int *)(v154 + 36));
      v127 = v126[1];
      v168 = *v126;
      v169 = v127;
      swift_bridgeObjectRetain(v127);
      v128._countAndFlagsBits = 2108704LL;
      v128._object = (void *)0xE300000000000000LL;
      String.append(_:)(v128);
      v129 = (uint64_t)v162;
      v130 = (uint64_t *)&v162[*(int *)(v160 + 32)];
      v131 = *v130;
      v132 = (void *)v130[1];
      swift_bridgeObjectRetain(v132);
      v133._countAndFlagsBits = v131;
      v133._object = v132;
      String.append(_:)(v133);
      swift_bridgeObjectRelease();
      v63 = v168;
      sub_100018C68(v89, type metadata accessor for OwnedBeaconGroup);
      v124(v155, v66);
      sub_100018C68(v64, type metadata accessor for OwnedBeaconRecord);
      v86 = type metadata accessor for BeaconNamingRecord;
      v87 = v129;
    }

      sub_1003CB8AC((void **)&v28, &v27, &v26);
      return 1LL;
    }
  }

  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[32 * v10] <= __dst) {
      memmove(__dst, __src, 32 * v10);
    }
    uint64_t v14 = &v4[32 * v10];
    int64_t v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      uint64_t v15 = v4;
      while (1)
      {
        if (*((void *)v15 + 3) >= *((void *)v6 + 3))
        {
          v4 = v15 + 32;
          unint64_t v17 = v15;
          uint64_t v16 = v6;
          if (v7 == v15)
          {
            v15 += 32;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }

          else
          {
            v15 += 32;
          }
        }

        else
        {
          uint64_t v16 = v6 + 32;
          unint64_t v17 = v6;
          if (v7 == v6 && v7 < v16) {
            goto LABEL_22;
          }
        }

        uint64_t v18 = *((_OWORD *)v17 + 1);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
        *((_OWORD *)v7 + 1) = v18;
LABEL_22:
        v7 += 32;
        if (v15 < v14)
        {
          uint64_t v6 = v16;
        }

        unint64_t v27 = v4;
        int64_t v28 = v7;
        goto LABEL_44;
      }
    }

    goto LABEL_44;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

  swift_release();
  a3((uint64_t)_swiftEmptyDictionarySingleton, 0LL);
  return swift_bridgeObjectRelease();
}

  uint64_t v38 = SPBeaconTaskNameRename;
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    v2 = sub_1004C5728(0LL, v2[2] + 1LL, 1, v2);
  }
  unint64_t v40 = v2[2];
  unint64_t v39 = v2[3];
  if (v40 >= v39 >> 1) {
    v2 = sub_1004C5728((void *)(v39 > 1), v40 + 1, 1, v2);
  }
  v2[2] = v40 + 1;
  v2[v40 + 4] = v38;
  if ((a1 & 0x800) == 0)
  {
LABEL_21:
    if ((a1 & 0x200) == 0) {
      return v2;
    }
    goto LABEL_56;
  }

        (*(void (**)(uint64_t, uint64_t))(v228 + 8))((uint64_t)v231 + v230[28], v229);
        if (!(_DWORD)v77)
        {
LABEL_24:
          if ((_DWORD)v209) {
            (*(void (**)(uint64_t, uint64_t))(v228 + 8))((uint64_t)v231 + v230[30], v229);
          }
          if ((_DWORD)v210) {
            swift_bridgeObjectRelease();
          }
          if ((_DWORD)v211) {
            swift_bridgeObjectRelease();
          }
          if ((_DWORD)v212) {
            swift_bridgeObjectRelease();
          }
          if ((_DWORD)v213)
          {
            swift_bridgeObjectRelease();
            if (!(_DWORD)v214) {
              goto LABEL_34;
            }
          }

          else if (!(_DWORD)v214)
          {
LABEL_34:
            if ((_DWORD)v215) {
              goto LABEL_35;
            }
            goto LABEL_48;
          }

          (*(void (**)(uint64_t, uint64_t))(v228 + 8))((uint64_t)v231 + v230[37], v229);
          if ((_DWORD)v215)
          {
LABEL_35:
            (*(void (**)(uint64_t, uint64_t))(v228 + 8))((uint64_t)v231 + v230[38], v229);
            if (!(_DWORD)v216) {
              goto LABEL_36;
            }
            goto LABEL_49;
          }

      v9[(v30 >> 6) + 8] |= 1LL << v30;
      uint64_t v37 = v9[6] + 24 * v30;
      *(_BYTE *)uint64_t v37 = v28;
      *(void *)(v37 + 8) = v18;
      *(void *)(v37 + 16) = v17;
      *(void *)(v9[7] + 8 * v30) = v19;
      uint64_t v38 = v9[2];
      unint64_t v39 = __OFADD__(v38, 1LL);
      unint64_t v40 = v38 + 1;
      if (v39) {
        goto LABEL_51;
      }
      v9[2] = v40;
      swift_bridgeObjectRetain(v17);
      goto LABEL_9;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }

    if (v13 >= v8) {
      goto LABEL_47;
    }
    uint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v3;
    if (!v14)
    {
      v3 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_47;
      }
      uint64_t v14 = *(void *)(v4 + 8 * v3);
      if (!v14)
      {
        v3 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_47;
        }
        uint64_t v14 = *(void *)(v4 + 8 * v3);
        if (!v14) {
          break;
        }
      }
    }

  v219 = v289;
  sub_10001581C(v192, v289, &qword_1009A4780);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v319)(v219, 1LL, v114) == 1)
  {
    sub_100015794(v219, &qword_1009A4780);
    v220 = sub_1002DB1A8();
    v221 = swift_allocError(&type metadata for BeaconKeyManager.Error, v220, 0LL, 0LL);
    *v222 = 8;
    swift_willThrow(v221);
    swift_release();
    swift_release();
    sub_100015794(v192, &qword_1009A4780);
    return;
  }

  v223 = v219;
  v224 = (uint64_t)v268;
  sub_10002218C(v223, (uint64_t)v268, type metadata accessor for OwnedDeviceKeyRecord);
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  v225 = sub_10000A720(v194, (uint64_t)qword_100A2B7D8);
  v226 = v285;
  (*(void (**)(char *, uint64_t, uint64_t))(v182 + 16))(v285, v225, v194);
  ((void (*)(char *, uint64_t, uint64_t))v323)(v195, v316, v190);
  sub_10001DC4C(v224, v291, type metadata accessor for OwnedDeviceKeyRecord);
  v227 = v224;
  v228 = v275;
  v229 = sub_10001DC4C(v227, v275, type metadata accessor for OwnedDeviceKeyRecord);
  v230 = (int *)Logger.logObject.getter(v229);
  LODWORD(v323) = static os_log_type_t.default.getter(v230);
  if (!os_log_type_enabled((os_log_t)v230, (os_log_type_t)v323))
  {
    swift_release();
    swift_release();

    sub_100018C68(v228, type metadata accessor for OwnedDeviceKeyRecord);
    sub_100018C68(v291, type metadata accessor for OwnedDeviceKeyRecord);
    ((void (*)(char *, uint64_t))v318)(v309, v190);
    (*(void (**)(char *, uint64_t))(v182 + 8))(v226, v194);
    sub_100015794(v192, &qword_1009A4780);
    goto LABEL_57;
  }

  v319 = v230;
  v231 = swift_slowAlloc(62LL, -1LL);
  v232 = swift_slowAlloc(96LL, -1LL);
  v317 = (char *)v232;
  *(_DWORD *)v231 = 141559299;
  v324 = 1752392040LL;
  *(void *)&v325[0] = v232;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324, v325, v231 + 4, v231 + 12);
  *(_WORD *)(v231 + 12) = 2081;
  v233 = v190;
  v234 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v235 = v309;
  v236 = dispatch thunk of CustomStringConvertible.description.getter(v233, v234);
  v324 = sub_1003F11D4(v236, v237, (uint64_t *)v325);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324, v325, v231 + 14, v231 + 22);
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t))v318)(v235, v233);
  *(_WORD *)(v231 + 22) = 2160;
  v324 = 1752392040LL;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324, v325, v231 + 24, v231 + 32);
  *(_WORD *)(v231 + 32) = 2081;
  v238 = v291;
  v239 = dispatch thunk of CustomStringConvertible.description.getter(v233, v234);
  v324 = sub_1003F11D4(v239, v240, (uint64_t *)v325);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324, v325, v231 + 34, v231 + 42);
  swift_bridgeObjectRelease();
  sub_100018C68(v238, type metadata accessor for OwnedDeviceKeyRecord);
  *(_WORD *)(v231 + 42) = 2160;
  v324 = 1752392040LL;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324, v325, v231 + 44, v231 + 52);
  *(_WORD *)(v231 + 52) = 2081;
  v128 = (char *)objc_autoreleasePoolPush();
  v241 = v270;
  v242 = v332;
  sub_100544824(v228);
  v332 = v242;
  if (!v242)
  {
    objc_autoreleasePoolPop(v128);
    v243 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    v244 = v322;
    v245 = dispatch thunk of CustomStringConvertible.description.getter(v322, v243);
    v247 = v246;
    (*(void (**)(char *, uint64_t))(v320 + 8))(v241, v244);
    v324 = sub_1003F11D4(v245, v247, (uint64_t *)v325);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324, v325, v231 + 54, v231 + 62);
    swift_bridgeObjectRelease();
    sub_100018C68(v228, type metadata accessor for OwnedDeviceKeyRecord);
    v248 = (os_log_t)v319;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v319,  (os_log_type_t)v323,  "Using old record for %{private,mask.hash}s with uuid %{private,mask.hash}s created on %{private,mask.hash}s.",  (uint8_t *)v231,  0x3Eu);
    v249 = v317;
    swift_arrayDestroy(v317, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v249, -1LL, -1LL);
    swift_slowDealloc(v231, -1LL, -1LL);
    swift_release();
    swift_release();

    (*(void (**)(char *, uint64_t))(v312 + 8))(v285, v313);
    sub_100015794(v315, &qword_1009A4780);
    v114 = v321;
LABEL_57:
    v256 = *(int *)(v114 + 28);
    v257 = *(int *)(v114 + 32);
    v119 = (uint64_t)v268;
LABEL_60:
    v258 = (uint64_t *)(v119 + v256);
    v259 = *v258;
    v260 = v258[1];
    v261 = (uint64_t *)(v119 + v257);
LABEL_67:
    v265 = *v261;
    v266 = v261[1];
    sub_10001736C(v259, v260);
    sub_10001736C(v265, v266);
    sub_100018C68(v119, type metadata accessor for OwnedDeviceKeyRecord);
    return;
  }

LABEL_47:
  __break(1u);
  return result;
}

          __break(1u);
LABEL_48:
          swift_once(&qword_10099B318, sub_100352F58);
          goto LABEL_3;
        }
      }

        uint64_t v18 = v3;
        goto LABEL_14;
      }
    }
  }

    swift_release();
    return;
  }

  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
}

  v118 = (uint64_t)v55;
  v255 = *(id *)&v36[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  v119 = [v255 identifier];
  v120 = (uint64_t)v244;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v119);

  v248 = (void (*)(uint64_t, uint64_t))(v50 + 13);
  v121 = swift_beginAccess(v50 + 13, &v268, 0LL, 0LL);
  v122 = v50;
  v123 = v50[13];
  v124 = (uint64_t)v253;
  if (!*(void *)(v123 + 16))
  {
LABEL_56:
    v128 = (void (*)(uint64_t, uint64_t, __n128))*((void *)v254 + 1);
    v128(v120, v53, v121);
    goto LABEL_62;
  }

  swift_bridgeObjectRetain(v123);
  v125 = sub_10030D124(v120);
  if ((v126 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }

  v127 = *(void *)(*(void *)(v123 + 56) + 8 * v125);
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRelease();
  v128 = (void (*)(uint64_t, uint64_t, __n128))*((void *)v254 + 1);
  ((void (*)(uint64_t, uint64_t))v128)(v120, v53);
  v129 = v36;
  swift_bridgeObjectRetain(v127);
  v131 = (os_log_s *)Logger.logObject.getter(v130);
  v132 = static os_log_type_t.debug.getter(v131);
  if (os_log_type_enabled(v131, (os_log_type_t)v132))
  {
    v133 = swift_slowAlloc(22LL, -1LL);
    v244 = (char *)swift_slowAlloc(32LL, -1LL);
    aBlock = (uint64_t)v244;
    *(_DWORD *)v133 = 134218242;
    LODWORD(v254) = v132;
    v134 = (void (*)(uint64_t, uint64_t))v128;
    if ((v127 & 0xC000000000000001LL) != 0)
    {
      if (v127 < 0) {
        v135 = v127;
      }
      else {
        v135 = v127 & 0xFFFFFFFFFFFFFF8LL;
      }
      v136 = __CocoaSet.count.getter(v135);
    }

    else
    {
      v136 = *(void *)(v127 + 16);
    }

    v266 = v136;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v133 + 4, v133 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v133 + 12) = 2080;
    v138 = [v255 identifier];
    v139 = (uint64_t)v253;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v138);

    v140 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v141 = dispatch thunk of CustomStringConvertible.description.getter(v256, v140);
    v143 = v142;
    v134(v139, v256);
    v266 = sub_1003F11D4(v141, v143, &aBlock);
    v124 = v139;
    v128 = (void (*)(uint64_t, uint64_t, __n128))v134;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v133 + 14, v133 + 22);
    swift_bridgeObjectRelease();

    _os_log_impl( (void *)&_mh_execute_header,  v131,  (os_log_type_t)v254,  "Cancelling command subscriptions[%ld] for peripheral %s",  (uint8_t *)v133,  0x16u);
    v144 = v244;
    swift_arrayDestroy(v244, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v144, -1LL, -1LL);
    swift_slowDealloc(v133, -1LL, -1LL);

    v118 = (uint64_t)v251;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  v145 = v242;
  sub_100267100(v127);
  v242 = v145;
  swift_bridgeObjectRelease();
  v122 = v252;
  uint64_t v36 = v249;
  uint64_t v53 = v256;
LABEL_62:
  v146 = v255;
  v147 = [v255 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v147);

  v148 = v122 + 11;
  v149 = swift_beginAccess(v122 + 11, &v266, 0LL, 0LL);
  v150 = v122[11];
  if (*(void *)(v150 + 16))
  {
    swift_bridgeObjectRetain(v122[11]);
    v151 = sub_10030D124(v118);
    if ((v152 & 1) != 0)
    {
      v153 = v36;
      v154 = v53;
      v155 = *(void *)(*(void *)(v150 + 56) + 8 * v151);
      swift_bridgeObjectRetain(v155);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v128)(v118, v154);
      v156 = v153;
      swift_bridgeObjectRetain(v155);
      v158 = (os_log_s *)Logger.logObject.getter(v157);
      v159 = static os_log_type_t.debug.getter(v158);
      if (os_log_type_enabled(v158, (os_log_type_t)v159))
      {
        v160 = swift_slowAlloc(22LL, -1LL);
        v244 = (char *)swift_slowAlloc(32LL, -1LL);
        aBlock = (uint64_t)v244;
        *(_DWORD *)v160 = 134218242;
        v254 = v158;
        LODWORD(v251) = v159;
        v161 = (void (*)(uint64_t, uint64_t))v128;
        if ((v155 & 0xC000000000000001LL) != 0)
        {
          if (v155 < 0) {
            v162 = v155;
          }
          else {
            v162 = v155 & 0xFFFFFFFFFFFFFF8LL;
          }
          v163 = __CocoaSet.count.getter(v162);
        }

        else
        {
          v163 = *(void *)(v155 + 16);
        }

        v261 = (void *)v163;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &aBlock, v160 + 4, v160 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v160 + 12) = 2080;
        v165 = [v255 identifier];
        v166 = (uint64_t)v253;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v165);

        v167 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v168 = dispatch thunk of CustomStringConvertible.description.getter(v256, v167);
        v170 = v169;
        v161(v166, v256);
        v261 = (void *)sub_1003F11D4(v168, v170, &aBlock);
        v124 = v166;
        v128 = (void (*)(uint64_t, uint64_t, __n128))v161;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &aBlock, v160 + 14, v160 + 22);
        swift_bridgeObjectRelease();

        v158 = v254;
        _os_log_impl( (void *)&_mh_execute_header,  v254,  (os_log_type_t)v251,  "Cancelling notify subscriptions[%ld] for peripheral %s",  (uint8_t *)v160,  0x16u);
        v171 = v244;
        swift_arrayDestroy(v244, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v171, -1LL, -1LL);
        swift_slowDealloc(v160, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      v164 = v248;
      sub_100267100(v155);
      swift_bridgeObjectRelease();
      v122 = v252;
      uint64_t v36 = v249;
      uint64_t v53 = v256;
      v146 = v255;
      goto LABEL_76;
    }

    swift_bridgeObjectRelease();
  }

  v128(v118, v53, v149);
  v164 = v248;
LABEL_76:
  v172 = [v146 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v172);

  swift_beginAccess(v164, &aBlock, 33LL, 0LL);
  sub_1000485FC(v124);
  ((void (*)(uint64_t, uint64_t))v128)(v124, v53);
  swift_endAccess(&aBlock);
  swift_bridgeObjectRelease();
  v173 = [v146 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v173);

  swift_beginAccess(v148, &aBlock, 33LL, 0LL);
  sub_1000485FC(v124);
  ((void (*)(uint64_t, uint64_t))v128)(v124, v53);
  swift_endAccess(&aBlock);
  swift_bridgeObjectRelease();
  v174 = v36;
  v175 = (os_log_s *)Logger.logObject.getter(v174);
  v176 = static os_log_type_t.default.getter(v175);
  v177 = v176;
  if (os_log_type_enabled(v175, v176))
  {
    LODWORD(v254) = v177;
    v178 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v251 = (char *)swift_slowAlloc(32LL, -1LL);
    aBlock = (uint64_t)v251;
    v250 = v178;
    *(_DWORD *)v178 = 136446210;
    v249 = v178 + 4;
    v179 = [v146 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v179);

    v180 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v181 = dispatch thunk of CustomStringConvertible.description.getter(v53, v180);
    v183 = v182;
    v184 = v53;
    v185 = (void (*)(uint64_t, uint64_t))v128;
    ((void (*)(uint64_t, uint64_t))v128)(v124, v184);
    v261 = (void *)sub_1003F11D4(v181, v183, &aBlock);
    v186 = v252;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &aBlock, v249, v178 + 12);
    swift_bridgeObjectRelease();

    v187 = v250;
    _os_log_impl( (void *)&_mh_execute_header,  v175,  (os_log_type_t)v254,  "No more notify subscriptions for peripheral %{public}s. Scheduling disconnection...",  v250,  0xCu);
    v188 = v251;
    swift_arrayDestroy(v251, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v188, -1LL, -1LL);
    swift_slowDealloc(v187, -1LL, -1LL);

    v189 = v243;
  }

  else
  {
    v185 = (void (*)(uint64_t, uint64_t))v128;

    v189 = v243;
    v186 = v122;
  }

  v190 = swift_allocObject(&unk_10094C558, 24LL, 7LL);
  swift_weakInit(v190 + 16, v186);
  v191 = swift_allocObject(&unk_10094CDA0, 32LL, 7LL);
  *(void *)(v191 + 16) = v190;
  *(void *)(v191 + 24) = v174;
  *((void *)&v264 + 1) = sub_10028B0C8;
  v265 = v191;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  *(void *)&v263 = 1107296256LL;
  *((void *)&v263 + 1) = sub_1001C31E8;
  *(void *)&v264 = &unk_10094CDB8;
  v192 = _Block_copy(&aBlock);
  v261 = _swiftEmptyArrayStorage;
  v193 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v194 = v174;
  swift_retain();
  v195 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  v196 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  v197 = v247;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v261, v195, v196, v246, v193);
  v198 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v198, *(unsigned int *)(v198 + 48), *(unsigned __int16 *)(v198 + 52));
  v199 = DispatchWorkItem.init(flags:block:)(v197, v192);
  swift_release();
  swift_release();
  if (*(_BYTE *)(v189 + *(int *)(v245 + 24) + 8))
  {
    v200 = [v255 identifier];
    v201 = (uint64_t)v253;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v200);

    swift_beginAccess(v186 + 14, &aBlock, 33LL, 0LL);
    swift_retain();
    v202 = swift_isUniquelyReferenced_nonNull_native(v186[14]);
    v261 = (void *)v186[14];
    v186[14] = 0x8000000000000000LL;
    sub_10005E004(v199, v201, v202);
    v186[14] = v261;
    swift_bridgeObjectRelease();
    v185(v201, v256);
    v203 = swift_endAccess(&aBlock);
    v204 = v235;
    static DispatchTime.now()(v203);
    v205 = v237;
    + infix(_:_:)(v204, 20.0);
    v206 = *(void (**)(char *, uint64_t))(v236 + 8);
    v207 = v238;
    v206(v204, v238);
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v205, v199);
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v206)(v205, v207);
  }

  else
  {
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    v209 = sub_10000A720(v241, (uint64_t)qword_100A2A470);
    v210 = (os_log_s *)Logger.logObject.getter(v209);
    v211 = static os_log_type_t.default.getter(v210);
    if (os_log_type_enabled(v210, v211))
    {
      v212 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v212 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v210,  v211,  "command requiresImmediateDisconnection: Disconnecting now.",  v212,  2u);
      swift_slowDealloc(v212, -1LL, -1LL);
    }

    dispatch thunk of DispatchWorkItem.perform()();
    return swift_release();
  }

    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
      uint64_t v11 = sub_1003CB1DC(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    }
    int64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    uint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_1003CB1DC((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      uint64_t v11 = v77;
    }

    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        uint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          unint64_t v42 = __OFSUB__(v38, v37);
          unint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          char v41 = *((void *)v36 - 6);
          unint64_t v40 = *((void *)v36 - 5);
          unint64_t v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          uint64_t v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          BOOL v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          unint64_t v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          unint64_t v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(void *)v66;
            v67 = *((void *)v66 + 1);
            unint64_t v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            int64_t v59 = v34 < v69;
            goto LABEL_84;
          }
        }

        else
        {
          if (v12 != 3)
          {
            v60 = *((void *)v11 + 4);
            v61 = *((void *)v11 + 5);
            unint64_t v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            uint64_t v54 = v42;
            goto LABEL_78;
          }

          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          unint64_t v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          uint64_t v35 = v42;
        }

        if ((v35 & 1) != 0) {
          goto LABEL_122;
        }
        BOOL v43 = v12 - 2;
        int64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        v50 = *((void *)v49 + 1);
        uint64_t v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        uint64_t v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        v57 = *(void *)v55;
        int v56 = *((void *)v55 + 1);
        unint64_t v42 = __OFSUB__(v56, v57);
        unint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          int64_t v59 = v34 < v58;
LABEL_84:
          if (v59) {
            uint64_t v31 = v43;
          }
          goto LABEL_86;
        }

            v121 = v129;
            v122 = v130;
            v123 = type metadata accessor for ServerStatusCode(0LL);
            v124 = sub_100007864( &qword_1009A8A88,  (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode,  (uint64_t)&protocol conformance descriptor for ServerStatusCode);
            dispatch thunk of RawRepresentable.rawValue.getter(&v141, v123, v124);
            dispatch thunk of RawRepresentable.rawValue.getter(&v140, v123, v124);
            if (v141 == v140)
            {
              v125 = *(int *)(v121 + 44);
              v126 = *(void *)(v46 + v125);
              v127 = *(void *)(v122 + v125);
              if (v126) {
                return v127 && (sub_1001265D0(v126, v127) & 1) != 0;
              }
              if (!v127) {
                return 1LL;
              }
            }

            return 0LL;
          }
        }

        v115 = v65;
        v116 = v65;
        v117 = v66;
        v118 = v68;
        sub_1002549B8(v116, v64, v66, v67, v69, v68);
        sub_1002549B8(v115, v64, v117, v67, v69, v118);
        sub_1002549B8(v71, v72, v73, v139, v136, v75);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v109 = v115;
        v110 = v64;
        v111 = v117;
        v112 = v67;
        v113 = v69;
        v114 = v118;
LABEL_45:
        sub_1002F77C0(v109, v110, v111, v112, v113, v114);
        return 0LL;
      }
    }

    else if (!v72)
    {
      goto LABEL_47;
    }

    v100 = v65;
    v101 = v65;
    v102 = v64;
    v103 = v66;
    v137 = v73;
    v104 = v74;
    v138 = v64;
    v105 = v68;
    sub_1002549B8(v101, v102, v66, v67, v69, v68);
    v106 = v73;
    v107 = v75;
    v108 = v139;
    sub_1002549B8(v71, v72, v106, v139, v104, v107);
    sub_1002F77C0(v100, v138, v103, v67, v69, v105);
    v109 = v71;
    v110 = v72;
    v111 = v137;
    v112 = v108;
    v113 = v104;
    v114 = v107;
    goto LABEL_45;
  }

  return result;
}

        uint64_t v36 = (v66 - 1) & v66;
        v64 = __clz(__rbit64(v66)) + (v60 << 6);
LABEL_48:
        v157 = v60;
        v68 = (uint64_t *)(*(void *)(v31 + 48) + 16 * v64);
        v70 = *v68;
        v69 = v68[1];
        if (qword_10099B850 != -1) {
          swift_once(&qword_10099B850, sub_1006BAC84);
        }
        v71 = qword_100A2B210;
        v72 = swift_allocObject(&unk_1009513E8, 41LL, 7LL);
        *(void *)(v72 + 16) = v71;
        *(void *)(v72 + 24) = v70;
        *(void *)(v72 + 32) = v69;
        *(_BYTE *)(v72 + 40) = 0;
        v165 = sub_10033A494;
        v166 = (void *)v72;
        aBlock = _NSConcreteStackBlock;
        v162 = v61;
        v163 = sub_1001C31E8;
        v164 = (void **)&unk_100951400;
        v73 = _Block_copy(&aBlock);
        swift_retain_n(v71, 2LL);
        swift_bridgeObjectRetain(v69);
        static DispatchQoS.unspecified.getter(v74);
        v159 = _swiftEmptyArrayStorage;
        v75 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v76 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        v77 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        v78 = v156;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v159, v76, v77, v156, v75);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v62, v34, v73);
        _Block_release(v73);
        ((void (*)(void **, void **))v155[1])(v34, v78);
        (*(void (**)(char *, void **))(v152 + 8))(v62, v153);
        uint64_t v35 = v166;
        swift_release();
        swift_release();
        v60 = v157;
        if (v36) {
          goto LABEL_29;
        }
      }
    }

    sub_10001736C(a2, a3);
    int v56 = sub_10033A0A0();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for SecureLocationsFetchResponseBody,  a2,  a3,  &type metadata for SecureLocationsFetchResponseBody,  v56);
    v149 = a2;
    v150 = a3;
    v98 = (uint64_t)aBlock;
    v99 = v162;
    v100 = (unint64_t)v163;
    v101 = v164;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    v102 = type metadata accessor for Logger(0LL);
    v103 = sub_10000A720(v102, (uint64_t)qword_100A2AE08);
    swift_bridgeObjectRetain_n(v101, 2LL);
    swift_bridgeObjectRetain_n(v98, 2LL);
    v104 = swift_bridgeObjectRetain_n(v100, 2LL);
    v105 = (os_log_s *)Logger.logObject.getter(v104);
    v106 = static os_log_type_t.default.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      v155 = v101;
      v156 = (void **)v103;
      v107 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v108 = v99;
      v109 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v109;
      *(_DWORD *)v107 = 136315138;
      swift_bridgeObjectRetain(v100);
      v159 = (void *)sub_1003F11D4(v108, v100, (uint64_t *)&aBlock);
      v110 = v155;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v107 + 4, v107 + 12);
      swift_bridgeObjectRelease_n(v110, 2LL);
      swift_bridgeObjectRelease_n(v98, 2LL);
      swift_bridgeObjectRelease_n(v100, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v105,  v106,  "Decoded SubscribeAndFetch response successfully %s. Now attempting to decrypt",  v107,  0xCu);
      swift_arrayDestroy(v109, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1LL, -1LL);
      swift_slowDealloc(v107, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v101, 2LL);
      swift_bridgeObjectRelease_n(v100, 2LL);
      swift_bridgeObjectRelease_n(v98, 2LL);
    }

    v156 = *(void ***)(v168[0] + 16LL);
    v111 = sub_10025FA5C(v98);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v112 = sub_10032E710((uint64_t)v111, (uint64_t)v168);
    swift_bridgeObjectRelease();
    v113 = v168[0];
    v114 = *(void ***)(v168[0] + 16LL);
    v154 = (void **)v112[2];
    v155 = v114;
    v115 = swift_allocObject(&unk_100951438, 24LL, 7LL);
    swift_bridgeObjectRetain(v113);
    v117 = sub_10025E090(v116);
    swift_bridgeObjectRelease();
    v118 = sub_10032E964(v117, (uint64_t)v168);
    swift_bridgeObjectRelease();
    *(void *)(v115 + 16) = v118;
    v119 = (void **)v118[2];
    v120 = v168[0];
    v153 = *(void ***)(v168[0] + 16LL);
    v121 = v168[0] + 56LL;
    v122 = 1LL << *(_BYTE *)(v168[0] + 32LL);
    v123 = -1LL;
    if (v122 < 64) {
      v123 = ~(-1LL << v122);
    }
    v124 = v123 & *(void *)(v168[0] + 56LL);
    v125 = (unint64_t)(v122 + 63) >> 6;
    swift_bridgeObjectRetain_n(v168[0], 2LL);
    v126 = 0LL;
    while (1)
    {
      if (v124)
      {
        v127 = __clz(__rbit64(v124));
        v124 &= v124 - 1;
        v128 = v127 | (v126 << 6);
      }

      else
      {
        if (__OFADD__(v126++, 1LL))
        {
LABEL_97:
          __break(1u);
          break;
        }

        if (v126 >= v125)
        {
LABEL_92:
          swift_release();
          v135 = swift_bridgeObjectRelease();
          v136 = (os_log_s *)Logger.logObject.getter(v135);
          v137 = static os_log_type_t.default.getter(v136);
          if (os_log_type_enabled(v136, v137))
          {
            v138 = swift_slowAlloc(62LL, -1LL);
            *(_DWORD *)v138 = 134219264;
            aBlock = v156;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v162, v138 + 4, v138 + 12);
            *(_WORD *)(v138 + 12) = 2048;
            aBlock = 0LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v162, v138 + 14, v138 + 22);
            *(_WORD *)(v138 + 22) = 2048;
            aBlock = v154;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v162, v138 + 24, v138 + 32);
            *(_WORD *)(v138 + 32) = 2048;
            aBlock = v155;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v162, v138 + 34, v138 + 42);
            *(_WORD *)(v138 + 42) = 2048;
            aBlock = v119;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v162, v138 + 44, v138 + 52);
            *(_WORD *)(v138 + 52) = 2048;
            aBlock = v153;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v162, v138 + 54, v138 + 62);
            _os_log_impl( (void *)&_mh_execute_header,  v136,  v137,  "subscribeAndFetch location counts. requested %ld failed %ld fromServer %ld notOnServer %ld notOnServerButI nCache %ld noLocationFound %ld",  (uint8_t *)v138,  0x3Eu);
            swift_slowDealloc(v138, -1LL, -1LL);
          }

          v139 = type metadata accessor for Transaction(0LL);
          __chkstk_darwin(v139);
          *(&v142 - 6) = v157;
          *(&v142 - 5) = (uint64_t)v112;
          *(&v142 - 4) = (uint64_t)v144;
          *(&v142 - 3) = v115;
          v140 = v146;
          *(&v142 - 2) = (uint64_t)v147;
          *(&v142 - 1) = v140;
          static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.saveFetchedLocation",  49LL,  2LL,  sub_10033A0E4);
          sub_1000182F0(v149, v150);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_95;
        }

        v133 = *(void *)(v121 + 8 * v126);
        if (!v133)
        {
          v134 = v126 + 1;
          if (v126 + 1 >= v125) {
            goto LABEL_92;
          }
          v133 = *(void *)(v121 + 8 * v134);
          if (!v133)
          {
            v134 = v126 + 2;
            if (v126 + 2 >= v125) {
              goto LABEL_92;
            }
            v133 = *(void *)(v121 + 8 * v134);
            if (!v133)
            {
              v134 = v126 + 3;
              if (v126 + 3 >= v125) {
                goto LABEL_92;
              }
              v133 = *(void *)(v121 + 8 * v134);
              if (!v133)
              {
                v134 = v126 + 4;
                if (v126 + 4 >= v125) {
                  goto LABEL_92;
                }
                v133 = *(void *)(v121 + 8 * v134);
                if (!v133)
                {
                  v134 = v126 + 5;
                  if (v126 + 5 >= v125) {
                    goto LABEL_92;
                  }
                  v133 = *(void *)(v121 + 8 * v134);
                  if (!v133)
                  {
                    while (1)
                    {
                      v126 = v134 + 1;
                      if (__OFADD__(v134, 1LL)) {
                        break;
                      }
                      if (v126 >= v125) {
                        goto LABEL_92;
                      }
                      v133 = *(void *)(v121 + 8 * v126);
                      ++v134;
                      if (v133) {
                        goto LABEL_87;
                      }
                    }

                    __break(1u);
                    return;
                  }
                }
              }
            }
          }

          v126 = v134;
        }

    swift_bridgeObjectRelease_n(v22, 2LL);
    uint64_t v44 = SPBeaconTaskNamePlaySound;
    uint64_t v45 = v51;
    static Date.trustedNow.getter(v51);
    uint64_t v46 = objc_allocWithZone(&OBJC_CLASS___SPBeaconTaskInformation);
    isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v18 = [v46 initWithName:v44 lastUpdated:isa error:0 state:2];

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v53);
    uint64_t result = sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
LABEL_48:
    a3 = v50;
  }

  *a3 = v18;
  return result;
}

  char v41 = v44;
  swift_bridgeObjectRelease();
  return v41;
}

    __break(1u);
    goto LABEL_48;
  }

  if (!v19)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  unint64_t v22 = v21;
  unint64_t v42 = v8;
  uint64_t v23 = v5[2];
  unint64_t v24 = v5[1] + v23 * v19;
  int64_t v25 = v21 + v18;
  if (v24 - v25 == 0x8000000000000000LL && v19 == -1) {
    goto LABEL_58;
  }
  char v41 = v25;
  swift_arrayDestroy(v25, (uint64_t)(v24 - v25) / v19, v49);
  if (a2 < 0) {
    goto LABEL_60;
  }
  unint64_t v27 = v24 + v19 * a2;
  int64_t v28 = v47;
  if (v47 < v24 || v47 >= v27)
  {
    swift_arrayInitWithTakeFrontToBack(v47, v24, a2, v49);
  }

  else if (v47 != v24)
  {
    swift_arrayInitWithTakeBackToFront(v47, v24);
  }

  swift_arrayDestroy(v24 + v19 * a2, v48, v49);
  a4(v20, a3);
  if (v43 < 0) {
    goto LABEL_60;
  }
  uint64_t v33 = v27 + v19 * (void)v48;
  if (v45 < v33 || v45 >= v33 + v19 * v43)
  {
    uint64_t v34 = v49;
    swift_arrayInitWithTakeFrontToBack(v45, v33, v43, v49);
  }

  else
  {
    uint64_t v34 = v49;
    if (v45 != v33) {
      swift_arrayInitWithTakeBackToFront(v45, v33);
    }
  }

  uint64_t v35 = v24 + v19 * (void)v42;
  uint64_t v36 = v41 + *(void *)(v22 + 16) * v19 - v35;
  if (v36 != 0x8000000000000000LL || v19 != -1)
  {
    swift_arrayDestroy(v35, v36 / v19, v34);
    *(void *)(v22 + 16) = 0LL;
    swift_release();
    goto LABEL_37;
  }

Swift::Int sub_10005216C(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E278);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v19 >= v36) {
      break;
    }
    int64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v14);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v36) {
              goto LABEL_37;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v22;
      }
    }

uint64_t sub_100052490(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E478);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  BOOL v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  char v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    uint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release();
          v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

uint64_t sub_100052824(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E328);
  int v57 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  v62 = v9;
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v54 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v52 = v2;
  int64_t v53 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0LL;
  uint64_t v55 = v10;
  int v56 = v7;
  uint64_t v63 = v6;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v25 >= v53) {
      break;
    }
    int64_t v26 = v54;
    unint64_t v27 = v54[v25];
    ++v19;
    if (!v27)
    {
      int64_t v19 = v25 + 1;
      if (v25 + 1 >= v53) {
        goto LABEL_36;
      }
      unint64_t v27 = v54[v19];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v53)
        {
LABEL_36:
          swift_release();
          v3 = v52;
          if ((v57 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = v54[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v19 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v53) {
              goto LABEL_36;
            }
            unint64_t v27 = v54[v19];
            ++v28;
            if (v27) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v28;
      }
    }

uint64_t sub_100052C38(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for ManagedCBPeripheralManager.KeyType(0LL);
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E190);
  int v45 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v41 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0LL;
  uint64_t v42 = v9;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v40) {
      break;
    }
    unint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_36;
      }
      unint64_t v24 = v41[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_36:
          swift_release();
          v3 = v39;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v40) {
              goto LABEL_36;
            }
            unint64_t v24 = v41[v18];
            ++v25;
            if (v24) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v25;
      }
    }

uint64_t sub_10005301C(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int v58 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  uint64_t v64 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  uint64_t v63 = *((void *)v11 - 1);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E1B8);
  int v65 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  uint64_t v16 = v15;
  if (*(void *)(v14 + 16))
  {
    uint64_t v61 = v6;
    uint64_t v62 = v7;
    uint64_t v55 = v2;
    uint64_t v17 = 1LL << *(_BYTE *)(v14 + 32);
    uint64_t v18 = *(void *)(v14 + 64);
    int v57 = (void *)(v14 + 64);
    if (v17 < 64) {
      uint64_t v19 = ~(-1LL << v17);
    }
    else {
      uint64_t v19 = -1LL;
    }
    unint64_t v20 = v19 & v18;
    int64_t v56 = (unint64_t)(v17 + 63) >> 6;
    uint64_t v60 = v15 + 64;
    uint64_t result = swift_retain();
    int64_t v22 = 0LL;
    uint64_t v59 = v14;
    while (1)
    {
      if (v20)
      {
        unint64_t v37 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        unint64_t v38 = v37 | (v22 << 6);
      }

      else
      {
        int64_t v39 = v22 + 1;
        if (__OFADD__(v22, 1LL))
        {
          __break(1u);
LABEL_38:
          __break(1u);
          return result;
        }

        int64_t v40 = v57;
        if (v39 >= v56) {
          goto LABEL_29;
        }
        unint64_t v41 = v57[v39];
        ++v22;
        if (!v41)
        {
          int64_t v22 = v39 + 1;
          if (v39 + 1 >= v56) {
            goto LABEL_29;
          }
          unint64_t v41 = v57[v22];
          if (!v41)
          {
            int64_t v42 = v39 + 2;
            if (v42 >= v56)
            {
LABEL_29:
              swift_release();
              if ((v65 & 1) == 0)
              {
                uint64_t result = swift_release();
                v3 = v55;
                goto LABEL_36;
              }

              uint64_t v54 = 1LL << *(_BYTE *)(v14 + 32);
              if (v54 >= 64) {
                bzero(v40, ((unint64_t)(v54 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *int64_t v40 = -1LL << v54;
              }
              v3 = v55;
              *(void *)(v14 + 16) = 0LL;
              break;
            }

            unint64_t v41 = v57[v42];
            if (!v41)
            {
              while (1)
              {
                int64_t v22 = v42 + 1;
                if (__OFADD__(v42, 1LL)) {
                  goto LABEL_38;
                }
                if (v22 >= v56) {
                  goto LABEL_29;
                }
                unint64_t v41 = v57[v22];
                ++v42;
                if (v41) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v22 = v42;
          }
        }

uint64_t sub_10005359C(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v52 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  uint64_t v58 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  uint64_t v57 = *((void *)v11 - 1);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC((uint64_t *)&unk_10099E1A8);
  int v59 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  uint64_t v16 = v15;
  if (*(void *)(v14 + 16))
  {
    uint64_t v55 = v6;
    uint64_t v56 = v7;
    uint64_t v49 = v2;
    uint64_t v17 = 1LL << *(_BYTE *)(v14 + 32);
    uint64_t v18 = *(void *)(v14 + 64);
    uint64_t v51 = (void *)(v14 + 64);
    if (v17 < 64) {
      uint64_t v19 = ~(-1LL << v17);
    }
    else {
      uint64_t v19 = -1LL;
    }
    unint64_t v20 = v19 & v18;
    int64_t v50 = (unint64_t)(v17 + 63) >> 6;
    uint64_t v54 = v15 + 64;
    uint64_t result = swift_retain();
    int64_t v22 = 0LL;
    uint64_t v53 = v14;
    while (1)
    {
      if (v20)
      {
        unint64_t v35 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        unint64_t v36 = v35 | (v22 << 6);
      }

      else
      {
        int64_t v37 = v22 + 1;
        if (__OFADD__(v22, 1LL))
        {
          __break(1u);
LABEL_38:
          __break(1u);
          return result;
        }

        unint64_t v38 = v51;
        if (v37 >= v50) {
          goto LABEL_29;
        }
        unint64_t v39 = v51[v37];
        ++v22;
        if (!v39)
        {
          int64_t v22 = v37 + 1;
          if (v37 + 1 >= v50) {
            goto LABEL_29;
          }
          unint64_t v39 = v51[v22];
          if (!v39)
          {
            int64_t v40 = v37 + 2;
            if (v40 >= v50)
            {
LABEL_29:
              swift_release();
              if ((v59 & 1) == 0)
              {
                uint64_t result = swift_release();
                v3 = v49;
                goto LABEL_36;
              }

              uint64_t v47 = 1LL << *(_BYTE *)(v14 + 32);
              if (v47 >= 64) {
                bzero(v38, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *unint64_t v38 = -1LL << v47;
              }
              v3 = v49;
              *(void *)(v14 + 16) = 0LL;
              break;
            }

            unint64_t v39 = v51[v40];
            if (!v39)
            {
              while (1)
              {
                int64_t v22 = v40 + 1;
                if (__OFADD__(v40, 1LL)) {
                  goto LABEL_38;
                }
                if (v22 >= v50) {
                  goto LABEL_29;
                }
                unint64_t v39 = v51[v22];
                ++v40;
                if (v39) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v22 = v40;
          }
        }

uint64_t sub_100053AD8(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC((uint64_t *)&unk_10099E198);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  unint64_t v35 = v3;
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v36 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v36 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release();
          v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v36 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v36 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

uint64_t sub_100053DDC(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E268);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v9 = 0LL;
    id v33 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }

      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_36;
        }
        unint64_t v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_36;
          }
          unint64_t v21 = v33[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                v3 = v31;
                goto LABEL_43;
              }

              uint64_t v30 = 1LL << *(_BYTE *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *id v33 = -1LL << v30;
              }
              v3 = v31;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v32) {
                  goto LABEL_36;
                }
                unint64_t v21 = v33[v9];
                ++v22;
                if (v21) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v22;
          }
        }

uint64_t sub_1000540AC(uint64_t a1, uint64_t a2)
{
  return sub_10004CC7C(a1, a2, &qword_10099E3C0);
}

uint64_t sub_1000540B8(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E3A0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    unint64_t v35 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    id v33 = v3;
    int64_t v34 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }

      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v21 >= v34) {
          goto LABEL_36;
        }
        unint64_t v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_36;
          }
          unint64_t v22 = v35[v9];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                v3 = v33;
                goto LABEL_43;
              }

              uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *unint64_t v35 = -1LL << v32;
              }
              v3 = v33;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v34) {
                  goto LABEL_36;
                }
                unint64_t v22 = v35[v9];
                ++v23;
                if (v22) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v23;
          }
        }

uint64_t sub_100054388(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v54 = a3;
  uint64_t v9 = a3(0LL);
  uint64_t v51 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v53 = (uint64_t)&v47 - v10;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *v6;
  if (*(void *)(*v6 + 24) > a1) {
    a1 = *(void *)(*v6 + 24);
  }
  sub_100004AEC(a4);
  int v52 = a2;
  uint64_t v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  uint64_t v17 = v16;
  if (!*(void *)(v15 + 16)) {
    goto LABEL_43;
  }
  uint64_t v18 = 1LL << *(_BYTE *)(v15 + 32);
  uint64_t v19 = *(void *)(v15 + 64);
  uint64_t v49 = (void *)(v15 + 64);
  if (v18 < 64) {
    uint64_t v20 = ~(-1LL << v18);
  }
  else {
    uint64_t v20 = -1LL;
  }
  unint64_t v21 = v20 & v19;
  uint64_t v47 = v6;
  int64_t v48 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v22 = v16 + 64;
  uint64_t result = swift_retain(v15);
  int64_t v24 = 0LL;
  for (i = v15; ; uint64_t v15 = i)
  {
    if (v21)
    {
      unint64_t v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }

    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v28 >= v48) {
      break;
    }
    Swift::UInt v29 = v49;
    unint64_t v30 = v49[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v48) {
        goto LABEL_36;
      }
      unint64_t v30 = v49[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v48)
        {
LABEL_36:
          swift_release(v15);
          uint64_t v6 = v47;
          if ((v52 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v30 = v49[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1LL)) {
              goto LABEL_45;
            }
            if (v24 >= v48) {
              goto LABEL_36;
            }
            unint64_t v30 = v49[v24];
            ++v31;
            if (v30) {
              goto LABEL_23;
            }
          }
        }

        int64_t v24 = v31;
      }
    }

uint64_t sub_10005477C(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_10099E380);
  uint64_t v51 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v53 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E388);
  int v52 = a2;
  uint64_t v13 = a2;
  uint64_t v14 = v12;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, v13);
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_43;
  }
  uint64_t v17 = 1LL << *(_BYTE *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v49 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1LL << v17);
  }
  else {
    uint64_t v19 = -1LL;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v47 = v2;
  int64_t v48 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v21 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0LL;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v20)
    {
      unint64_t v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v26 = v25 | (v23 << 6);
      goto LABEL_24;
    }

    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v27 >= v48) {
      break;
    }
    int64_t v28 = v49;
    unint64_t v29 = v49[v27];
    ++v23;
    if (!v29)
    {
      int64_t v23 = v27 + 1;
      if (v27 + 1 >= v48) {
        goto LABEL_36;
      }
      unint64_t v29 = v49[v23];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v48)
        {
LABEL_36:
          swift_release();
          v3 = v47;
          if ((v52 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v29 = v49[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v23 = v30 + 1;
            if (__OFADD__(v30, 1LL)) {
              goto LABEL_45;
            }
            if (v23 >= v48) {
              goto LABEL_36;
            }
            unint64_t v29 = v49[v23];
            ++v30;
            if (v29) {
              goto LABEL_23;
            }
          }
        }

        int64_t v23 = v30;
      }
    }

uint64_t sub_100054B7C(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v40 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100004AEC(&qword_10099E308);
  int v41 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  unint64_t v39 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v37 = v3;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v38) {
      break;
    }
    int64_t v23 = v39;
    unint64_t v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_36;
      }
      unint64_t v24 = v39[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_36:
          swift_release();
          v3 = v37;
          if ((v41 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v38) {
              goto LABEL_36;
            }
            unint64_t v24 = v39[v18];
            ++v25;
            if (v24) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v25;
      }
    }

Swift::Int sub_100054EF8(uint64_t a1, uint64_t a2)
{
  return sub_100054F0C(a1, a2, type metadata accessor for BeaconStoreFileRecord, &qword_10099E528);
}

Swift::Int sub_100054F0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v7 = v4;
  uint64_t v10 = a3(0LL);
  uint64_t v46 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v13 = *v7;
  if (*(void *)(*v7 + 24) > a1) {
    a1 = *(void *)(*v7 + 24);
  }
  sub_100004AEC(a4);
  int v47 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_43;
  }
  BOOL v43 = v7;
  uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 64);
  uint64_t v45 = (void *)(v13 + 64);
  if (v16 < 64) {
    uint64_t v18 = ~(-1LL << v16);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v17;
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 64;
  Swift::Int result = swift_retain(v13);
  int64_t v22 = 0LL;
  while (1)
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }

    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v26 >= v44) {
      break;
    }
    uint64_t v27 = v45;
    unint64_t v28 = v45[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v44) {
        goto LABEL_36;
      }
      unint64_t v28 = v45[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v44)
        {
LABEL_36:
          swift_release(v13);
          uint64_t v7 = v43;
          if ((v47 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v28 = v45[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1LL)) {
              goto LABEL_45;
            }
            if (v22 >= v44) {
              goto LABEL_36;
            }
            unint64_t v28 = v45[v22];
            ++v29;
            if (v28) {
              goto LABEL_23;
            }
          }
        }

        int64_t v22 = v29;
      }
    }

uint64_t sub_100055258(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E4D8);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    unint64_t v36 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v10 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v11 = ~(-1LL << v9);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v14 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v23 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v24 = v23 | (v16 << 6);
      }

      else
      {
        int64_t v25 = v16 + 1;
        if (__OFADD__(v16, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v25 >= v13) {
          goto LABEL_36;
        }
        unint64_t v26 = v10[v25];
        ++v16;
        if (!v26)
        {
          int64_t v16 = v25 + 1;
          if (v25 + 1 >= v13) {
            goto LABEL_36;
          }
          unint64_t v26 = v10[v16];
          if (!v26)
          {
            int64_t v27 = v25 + 2;
            if (v27 >= v13)
            {
LABEL_36:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                v3 = v36;
                goto LABEL_43;
              }

              uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
              if (v35 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v10 = -1LL << v35;
              }
              v3 = v36;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v26 = v10[v27];
            if (!v26)
            {
              while (1)
              {
                int64_t v16 = v27 + 1;
                if (__OFADD__(v27, 1LL)) {
                  goto LABEL_45;
                }
                if (v16 >= v13) {
                  goto LABEL_36;
                }
                unint64_t v26 = v10[v16];
                ++v27;
                if (v26) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v16 = v27;
          }
        }

uint64_t sub_10005556C(uint64_t a1, uint64_t a2)
{
  return sub_100054388(a1, a2, type metadata accessor for SafeLocation, &qword_10099E350);
}

uint64_t sub_100055580(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for BeaconScanner.AISLookupState(0LL);
  uint64_t v49 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v51 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099E338);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100004AEC(&qword_10099E340);
  int v50 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_43;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  int v47 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v45 = v3;
  int64_t v46 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0LL;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v25 >= v46) {
      break;
    }
    unint64_t v26 = v47;
    unint64_t v27 = v47[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_36;
      }
      unint64_t v27 = v47[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v46)
        {
LABEL_36:
          swift_release();
          v3 = v45;
          if ((v50 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = v47[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v21 >= v46) {
              goto LABEL_36;
            }
            unint64_t v27 = v47[v21];
            ++v28;
            if (v27) {
              goto LABEL_23;
            }
          }
        }

        int64_t v21 = v28;
      }
    }

uint64_t sub_100055978(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E2D8);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v10 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v11 = ~(-1LL << v9);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v14 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v22 = v21 | (v16 << 6);
      }

      else
      {
        int64_t v23 = v16 + 1;
        if (__OFADD__(v16, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v23 >= v13) {
          goto LABEL_36;
        }
        unint64_t v24 = v10[v23];
        ++v16;
        if (!v24)
        {
          int64_t v16 = v23 + 1;
          if (v23 + 1 >= v13) {
            goto LABEL_36;
          }
          unint64_t v24 = v10[v16];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v13)
            {
LABEL_36:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                v3 = v33;
                goto LABEL_43;
              }

              uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v10 = -1LL << v32;
              }
              v3 = v33;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v16 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_45;
                }
                if (v16 >= v13) {
                  goto LABEL_36;
                }
                unint64_t v24 = v10[v16];
                ++v25;
                if (v24) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v16 = v25;
          }
        }

uint64_t sub_100055C4C(uint64_t a1, uint64_t a2)
{
  return sub_100055C58(a1, a2, &qword_10099E2B8);
}

uint64_t sub_100055C58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100004AEC(a3);
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  unint64_t v38 = v4;
  uint64_t v39 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v16 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v23 = v22 | (v16 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v13) {
      break;
    }
    int64_t v25 = (void *)(v6 + 64);
    unint64_t v26 = *(void *)(v39 + 8 * v24);
    ++v16;
    if (!v26)
    {
      int64_t v16 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v39 + 8 * v16);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v38;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v16 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v16 >= v13) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v39 + 8 * v16);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v16 = v27;
      }
    }

uint64_t sub_100055F24(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v7 = *v4;
  if (*(void *)(*v4 + 24) <= a1) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = *(void *)(*v4 + 24);
  }
  sub_100004AEC(a3);
  char v41 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)(v7, v8, a2);
  uint64_t v10 = v9;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_43;
  }
  uint64_t v11 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v39 = v7 + 64;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & *(void *)(v7 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v23 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v24 = v23 | (v17 << 6);
      goto LABEL_34;
    }

    int64_t v25 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v25 >= v14) {
      break;
    }
    unint64_t v26 = (void *)(v7 + 64);
    unint64_t v27 = *(void *)(v39 + 8 * v25);
    ++v17;
    if (!v27)
    {
      int64_t v17 = v25 + 1;
      if (v25 + 1 >= v14) {
        goto LABEL_36;
      }
      unint64_t v27 = *(void *)(v39 + 8 * v17);
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v14)
        {
LABEL_36:
          swift_release(v7);
          if ((v41 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = *(void *)(v39 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            int64_t v17 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v17 >= v14) {
              goto LABEL_36;
            }
            unint64_t v27 = *(void *)(v39 + 8 * v17);
            ++v28;
            if (v27) {
              goto LABEL_33;
            }
          }
        }

        int64_t v17 = v28;
      }
    }

unint64_t sub_100056218(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E2E0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    int64_t v28 = v3;
    char v29 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 64;
    unint64_t result = swift_retain();
    int64_t v15 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v15 << 6);
      }

      else
      {
        int64_t v20 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
          __break(1u);
LABEL_33:
          __break(1u);
          return result;
        }

        if (v20 >= v12) {
          goto LABEL_26;
        }
        unint64_t v21 = v29[v20];
        ++v15;
        if (!v21)
        {
          int64_t v15 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_26;
          }
          unint64_t v21 = v29[v15];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_26:
              swift_release();
              v3 = v28;
              if ((a2 & 1) != 0)
              {
                uint64_t v27 = 1LL << *(_BYTE *)(v5 + 32);
                if (v27 > 63) {
                  bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v29 = -1LL << v27;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v15 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_33;
                }
                if (v15 >= v12) {
                  goto LABEL_26;
                }
                unint64_t v21 = v29[v15];
                ++v22;
                if (v21) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v15 = v22;
          }
        }

uint64_t sub_10005647C(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E3B0);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v35 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    id v37 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v36 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v14 << 6);
      }

      else
      {
        int64_t v22 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v22 >= v36) {
          goto LABEL_36;
        }
        unint64_t v23 = v37[v22];
        ++v14;
        if (!v23)
        {
          int64_t v14 = v22 + 1;
          if (v22 + 1 >= v36) {
            goto LABEL_36;
          }
          unint64_t v23 = v37[v14];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_36:
              swift_release();
              v3 = v35;
              if ((v38 & 1) != 0)
              {
                uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v37 = -1LL << v34;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v14 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_43;
                }
                if (v14 >= v36) {
                  goto LABEL_36;
                }
                unint64_t v23 = v37[v14];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v14 = v24;
          }
        }

uint64_t sub_1000567A4(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E1F0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v39 = a2;
    char v38 = v3;
    int64_t v9 = 0LL;
    char v41 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v40 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }

      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v20 >= v40) {
          goto LABEL_34;
        }
        unint64_t v21 = v41[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v40) {
            goto LABEL_34;
          }
          unint64_t v21 = v41[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v40)
            {
LABEL_34:
              if ((v39 & 1) == 0)
              {
                uint64_t result = swift_release();
                v3 = v38;
                goto LABEL_41;
              }

              uint64_t v37 = 1LL << *(_BYTE *)(v5 + 32);
              if (v37 >= 64) {
                bzero(v41, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                void *v41 = -1LL << v37;
              }
              v3 = v38;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v41[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_43;
                }
                if (v9 >= v40) {
                  goto LABEL_34;
                }
                unint64_t v21 = v41[v9];
                ++v22;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v22;
          }
        }

uint64_t sub_100056A9C(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E290);
  char v41 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v40 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  char v38 = v3;
  int64_t v39 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v39) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v40 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v39) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v40 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_36:
          swift_release();
          v3 = v38;
          if ((v41 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v40 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v39) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v40 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v26;
      }
    }

uint64_t sub_100056DB8(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E288);
  char v40 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v37 = v3;
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v38) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v39 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v38) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v39 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v38) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v39 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v26;
      }
    }

uint64_t sub_1000570F8(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v56 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ShareAttemptTracker.AttemptKey(0LL);
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E280);
  int v53 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  uint64_t v45 = v2;
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  int v47 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  int64_t v46 = (unint64_t)(v15 + 63) >> 6;
  int64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v7 + 16);
  uint64_t v54 = (uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32);
  uint64_t v19 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0LL;
  uint64_t v55 = v11;
  uint64_t v49 = v7;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v25 >= v46) {
      goto LABEL_36;
    }
    unint64_t v26 = v47[v25];
    ++v21;
    if (!v26)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_36;
      }
      unint64_t v26 = v47[v21];
      if (!v26) {
        break;
      }
    }

uint64_t sub_10005753C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100004AEC(a3);
  char v38 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v37 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v36) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v36) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

uint64_t sub_10005784C(uint64_t a1, uint64_t a2)
{
  return sub_10004CC7C(a1, a2, &qword_10099E258);
}

uint64_t sub_100057858(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E250);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_100057B98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for BeaconKeyManager.FileKey(0LL);
  uint64_t v46 = *(void *)(v8 - 8);
  uint64_t v47 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v5;
  if (*(void *)(*v5 + 24) > a1) {
    a1 = *(void *)(*v5 + 24);
  }
  sub_100004AEC(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_46;
  }
  uint64_t v43 = v5;
  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v45 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  int64_t v44 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0LL;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }

    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return result;
    }

    if (v24 >= v44) {
      goto LABEL_41;
    }
    unint64_t v25 = v45[v24];
    ++v20;
    if (!v25)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v44) {
        goto LABEL_41;
      }
      unint64_t v25 = v45[v20];
      if (!v25) {
        break;
      }
    }

uint64_t sub_100057FB8(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E248);
  char v40 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v18 >= v38) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v39 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v38) {
        goto LABEL_37;
      }
      unint64_t v20 = *(void *)(v39 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v38)
        {
LABEL_37:
          swift_release();
          if ((v40 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v20 = *(void *)(v39 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v38) {
              goto LABEL_37;
            }
            unint64_t v20 = *(void *)(v39 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v21;
      }
    }

uint64_t sub_1000582F0(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v48 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_10099E228);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v45 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v43 = v2;
  int64_t v44 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0LL;
  for (i = v9; ; uint64_t v9 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v44) {
      break;
    }
    id v24 = v45;
    unint64_t v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v44) {
        goto LABEL_36;
      }
      unint64_t v25 = v45[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_36:
          swift_release();
          v3 = v43;
          if ((v47 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v44) {
              goto LABEL_36;
            }
            unint64_t v25 = v45[v18];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v26;
      }
    }

unint64_t sub_1000586A8(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v37 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin();
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v36 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v37 + 72);
      uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v35(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)( *(void *)(a2 + 40),  v4,  &protocol witness table for CodingUserInfoKey);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v19 = v18 & v17;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            uint64_t v23 = v22 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v23 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v23, 1LL, v4);
LABEL_21:
              uint64_t v12 = v15;
              uint64_t v13 = v17;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v24 = *(void *)(a2 + 56);
            unint64_t v25 = (_OWORD *)(v24 + 32 * a1);
            int64_t v26 = (_OWORD *)(v24 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v25 >= v26 + 2))
            {
              __int128 v27 = v26[1];
              *unint64_t v25 = *v26;
              v25[1] = v27;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    unint64_t v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v29 = *v28;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  else
  {
    unint64_t v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v28;
    uint64_t v29 = (-1LL << a1) - 1;
  }

  uint64_t *v28 = v30 & v29;
  uint64_t v31 = *(void *)(a2 + 16);
  BOOL v32 = __OFSUB__(v31, 1LL);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_10005892C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          int64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 16 * v3);
          unint64_t v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *uint64_t v21 = v23 & v22;
  BOOL v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  int64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    unint64_t v19 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v19 = *v17;
    uint64_t v18 = (-1LL << result) - 1;
  }

  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1LL);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *uint64_t v21 = v23 & v22;
  BOOL v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  int64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    swift_bridgeObjectRelease(v13);
  }

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    __int128 v27 = (v27 + 1) & v50;
  }

  while (((*(void *)(v52 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) != 0);
  swift_bridgeObjectRelease();
  unint64_t v39 = v45;
  BOOL v40 = v47;
LABEL_12:
  uint64_t v41 = (uint64_t)v46;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v40);
  uint64_t v43 = v55;
  sub_10001DC4C(v55, v41, type metadata accessor for BeaconStatus);
  v56[0] = *v40;
  *BOOL v40 = 0x8000000000000000LL;
  sub_1000CB870(v41, v27, isUniquelyReferenced_nonNull_native);
  *BOOL v40 = v56[0];
  swift_bridgeObjectRelease();
  sub_10002218C(v43, v39, type metadata accessor for BeaconStatus);
  return 1LL;
}

      ++v3;
      unint64_t result = 1LL;
      if (v3 == v2) {
        return result;
      }
    }
  }

  return 1LL;
}

      swift_bridgeObjectRelease();
    }

    ++v7;
  }

  while (v7 != a2);
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v4 = 0LL;
  unint64_t v19 = SPBeaconRoleIdOther;
  while (v4 < *(void *)(v5 + 16))
  {
    uint64_t v20 = *(void **)(v6 + 32 * v4 + 24);
    uint64_t v21 = v20[2];
    if (v21)
    {
      if (v20[4] == v19)
      {
        int64_t v26 = v20[8];
        uint64_t v25 = v20[6];
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
LABEL_41:
        swift_bridgeObjectRelease();
        __int128 v27 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        int64_t v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v17 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v2 = [v27 initWithRoleId:v19 role:v16 roleEmoji:v17];
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }

      swift_bridgeObjectRetain(v20);
      if (v21 != 1)
      {
        if (v20[9] == v19)
        {
          int64_t v26 = v20[13];
          uint64_t v25 = v20[11];
LABEL_40:
          swift_bridgeObjectRetain(v25);
          swift_bridgeObjectRetain(v26);
          swift_bridgeObjectRelease();
          goto LABEL_41;
        }

        if (v21 != 2)
        {
          uint64_t v22 = v20 + 18;
          uint64_t v23 = 2LL;
          while (1)
          {
            BOOL v24 = v23 + 1;
            if (__OFADD__(v23, 1LL)) {
              break;
            }
            if (*(v22 - 4) == v19)
            {
              uint64_t v25 = *(v22 - 2);
              int64_t v26 = *v22;
              goto LABEL_40;
            }

            v22 += 5;
            ++v23;
            if (v24 == v21) {
              goto LABEL_23;
            }
          }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return sub_1000869A4(a2, a3);
  }

  LOBYTE(v18) = 0;
  uint64_t v20 = 0;
  sub_10001736C(a2, a3);
  uint64_t v14 = sub_100166D50();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v20, v7, &type metadata for KeyUnion.PayloadType, v14);
  if (v3) {
    goto LABEL_5;
  }
  uint64_t v18 = a2;
  unint64_t v19 = a3;
  uint64_t v20 = 1;
LABEL_7:
  uint64_t v17 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v20, v7, &type metadata for Data, v17);
  sub_1000869A4(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }

  uint64_t v11 = v3[2];
  Swift::Int v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }

  uint64_t v11 = v3[2];
  Swift::Int v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  unint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AA7E0);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v11 = *(void *)(v10 - 8);
  Swift::Int v12 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v13 = *(void *)(v11 + 72);
  uint64_t v14 = v3 + v12 + v13 * v8;
  uint64_t v15 = a1 + v12;
  int64_t v16 = v13 * v2;
  uint64_t v17 = v14 + v16;
  uint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }

  uint64_t v20 = *(void *)(v3 + 16);
  uint64_t v21 = __OFADD__(v20, v2);
  uint64_t v22 = v20 + v2;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
    goto LABEL_19;
  }

  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = (unint64_t)&v3[7 * v8 + 4];
  if (a1 + 32 < v9 + 56 * v2 && v9 < a1 + 32 + 56 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }

  uint64_t v11 = v3[2];
  Swift::Int v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  sub_100004AEC(&qword_10099D550);
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }

  uint64_t v11 = v3[2];
  Swift::Int v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  Swift::Int v12 = a3(0LL);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  unint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = *(void *)(v13 + 72);
  int64_t v16 = v5 + v14 + v15 * v10;
  uint64_t v17 = a1 + v14;
  uint64_t v18 = v15 * v4;
  unint64_t v19 = v16 + v18;
  uint64_t v20 = v17 + v18;
  if (v17 < v19 && v16 < v20) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    unint64_t result = swift_bridgeObjectRelease(a1);
    uint64_t *v3 = v5;
    return result;
  }

  uint64_t v22 = *(void *)(v5 + 16);
  uint64_t v23 = __OFADD__(v22, v4);
  BOOL v24 = v22 + v4;
  if (!v23)
  {
    *(void *)(v5 + 16) = v24;
    goto LABEL_16;
  }

  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = (char *)v3 + v8 + 32;
  memcpy(v9, (const void *)(a1 + 32), v2);
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }

  uint64_t v11 = v3[2];
  Swift::Int v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

      uint64_t v21 = v23;
      sub_100018C68((uint64_t)v17, v23);
      unint64_t v19 = (v19 + 1) & v57;
    }

    while (((*(void *)(v20 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) != 0);
  }

  return v19;
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    unint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  uint64_t v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    unint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v18 = *(void *)(v3 + 16);
  unint64_t v19 = __OFSUB__(v18, 1LL);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

    sub_100018BE4(v33, v32);
    sub_100018BE4(v35, v34);
    sub_1000182F0(v33, v32);
    sub_1000182F0(v35, v34);
    return 0LL;
  }

  if (v34 >> 60 == 15) {
    goto LABEL_5;
  }
  v817 = v29;
  v818 = v4;
  unint64_t v36 = a2;
  sub_100018BE4(v33, v32);
  sub_100018BE4(v35, v34);
  sub_100018BE4(v33, v32);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v33, v32);
  unint64_t v39 = v38;
  sub_1000182F0(v35, v34);
  sub_1000182F0(v33, v32);
  sub_1000182F0(v33, v32);
  if ((v39 & 1) == 0) {
    return 0LL;
  }
LABEL_7:
  BOOL v40 = v36;
  uint64_t v41 = *((_BYTE *)v36 + 24);
  if ((v834[3] & 1) != 0)
  {
    if (!*((_BYTE *)v36 + 24)) {
      return 0LL;
    }
  }

  else
  {
    if (v834[2] != v36[2]) {
      uint64_t v41 = 1;
    }
    if ((v41 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v42 = v834;
  sub_1003070C4(*((_BYTE *)v834 + 25));
  if ((v43 & 1) == 0) {
    return 0LL;
  }
  int64_t v44 = *((_BYTE *)v40 + 40);
  if ((v42[5] & 1) != 0)
  {
    if (!*((_BYTE *)v40 + 40)) {
      return 0LL;
    }
  }

  else
  {
    if ((v44 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v45 = *((_BYTE *)v40 + 56);
  if ((v834[7] & 1) != 0)
  {
    if (!*((_BYTE *)v40 + 56)) {
      return 0LL;
    }
  }

  else
  {
    if ((v45 & 1) != 0) {
      return 0LL;
    }
  }

  uint64_t v46 = *((unsigned __int8 *)v834 + 57);
  int v47 = *((unsigned __int8 *)v40 + 57);
  if (v46 == 2)
  {
    if (v47 != 2) {
      return 0LL;
    }
  }

  else
  {
    unint64_t result = 0LL;
    uint64_t v48 = (v46 & 1) == 0;
    if (v47 == 2 || ((v48 ^ v47) & 1) == 0) {
      return result;
    }
  }

  uint64_t v49 = (void *)v834[8];
  int v50 = (void *)v40[8];
  if (v49)
  {
    if (!v50 || (sub_100125B04(v49, v50) & 1) == 0) {
      return 0LL;
    }
  }

  else if (v50)
  {
    return 0LL;
  }

  uint64_t v51 = *((unsigned __int8 *)v834 + 72);
  uint64_t v52 = *((unsigned __int8 *)v40 + 72);
  if (v51 == 2)
  {
    if (v52 != 2) {
      return 0LL;
    }
  }

  else
  {
    unint64_t result = 0LL;
    int v53 = (v51 & 1) == 0;
    if (v52 == 2 || ((v53 ^ v52) & 1) == 0) {
      return result;
    }
  }

  uint64_t v54 = v834[11];
  uint64_t v55 = v40[11];
  if (!v54)
  {
    if (v55) {
      return 0LL;
    }
    goto LABEL_48;
  }

  if (!v55) {
    return 0LL;
  }
  uint64_t v56 = v834[10];
  uint64_t v57 = v40[10];
  if (v56 == v57 && v54 == v55
    || (v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v54, v57, v55, 0LL), unint64_t result = 0LL, (v58 & 1) != 0))
  {
LABEL_48:
    int v59 = *((_BYTE *)v40 + 104);
    if ((v834[13] & 1) != 0)
    {
      if (!*((_BYTE *)v40 + 104)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[12] != v40[12]) {
        int v59 = 1;
      }
      if ((v59 & 1) != 0) {
        return 0LL;
      }
    }

    uint64_t v60 = *((unsigned __int8 *)v834 + 105);
    int64_t v61 = *((unsigned __int8 *)v40 + 105);
    if (v60 == 2)
    {
      uint64_t v62 = v40;
      if (v61 != 2) {
        return 0LL;
      }
    }

    else
    {
      unint64_t result = 0LL;
      uint64_t v63 = (v60 & 1) == 0;
      if (v61 == 2) {
        return result;
      }
      uint64_t v62 = v40;
      if (((v63 ^ v61) & 1) == 0) {
        return result;
      }
    }

    uint64_t v64 = *((unsigned __int8 *)v834 + 106);
    int v65 = *((unsigned __int8 *)v62 + 106);
    if (v64 == 2)
    {
      if (v65 != 2) {
        return 0LL;
      }
    }

    else
    {
      unint64_t result = 0LL;
      int v66 = (v64 & 1) == 0;
      if (v65 == 2 || ((v66 ^ v65) & 1) == 0) {
        return result;
      }
    }

    uint64_t v67 = *((_BYTE *)v62 + 120);
    if ((v834[15] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 120)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[14] != v62[14]) {
        uint64_t v67 = 1;
      }
      if ((v67 & 1) != 0) {
        return 0LL;
      }
    }

    uint64_t v68 = v62;
    int64_t v69 = *((_BYTE *)v62 + 136);
    if ((v834[17] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 136)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[16] != v62[16]) {
        int64_t v69 = 1;
      }
      if ((v69 & 1) != 0) {
        return 0LL;
      }
    }

    v70 = *((_BYTE *)v62 + 152);
    if ((v834[19] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 152)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[18] != v62[18]) {
        v70 = 1;
      }
      if ((v70 & 1) != 0) {
        return 0LL;
      }
    }

    v71 = *((_BYTE *)v62 + 168);
    if ((v834[21] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 168)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[20] != v62[20]) {
        v71 = 1;
      }
      if ((v71 & 1) != 0) {
        return 0LL;
      }
    }

    v72 = *((_BYTE *)v62 + 184);
    if ((v834[23] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 184)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[22] != v62[22]) {
        v72 = 1;
      }
      if ((v72 & 1) != 0) {
        return 0LL;
      }
    }

    v73 = *((_BYTE *)v62 + 200);
    if ((v834[25] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 200)) {
        return 0LL;
      }
    }

    else
    {
      if ((v73 & 1) != 0) {
        return 0LL;
      }
    }

    v74 = *((_BYTE *)v62 + 216);
    if ((v834[27] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 216)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[26] != v62[26]) {
        v74 = 1;
      }
      if ((v74 & 1) != 0) {
        return 0LL;
      }
    }

    v75 = *((_BYTE *)v62 + 232);
    if ((v834[29] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 232)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[28] != v62[28]) {
        v75 = 1;
      }
      if ((v75 & 1) != 0) {
        return 0LL;
      }
    }

    v76 = *((_BYTE *)v62 + 248);
    if ((v834[31] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 248)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[30] != v62[30]) {
        v76 = 1;
      }
      if ((v76 & 1) != 0) {
        return 0LL;
      }
    }

    v77 = v834 + 33;
    v78 = *((_BYTE *)v62 + 264);
    if ((v834[33] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 264)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[32] != v62[32]) {
        v78 = 1;
      }
      if ((v78 & 1) != 0) {
        return 0LL;
      }
    }

    v79 = *((unsigned __int8 *)v834 + 265);
    v80 = *((unsigned __int8 *)v62 + 265);
    if (v79 == 2)
    {
      if (v80 != 2) {
        return 0LL;
      }
    }

    else
    {
      unint64_t result = 0LL;
      v81 = (v79 & 1) == 0;
      if (v80 == 2 || ((v81 ^ v80) & 1) == 0) {
        return result;
      }
    }

    v82 = v834[34];
    v83 = v62[34];
    if (v82)
    {
      if (!v83) {
        return 0LL;
      }
      swift_bridgeObjectRetain(v62[34]);
      v84 = swift_bridgeObjectRetain(v82);
      v85 = sub_1001D3770(v84, v83);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v85 & 1) == 0) {
        return 0LL;
      }
    }

    else if (v83)
    {
      return 0LL;
    }

    v86 = *((_BYTE *)v68 + 288);
    if ((v77[24] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 288)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[35] != v68[35]) {
        v86 = 1;
      }
      if ((v86 & 1) != 0) {
        return 0LL;
      }
    }

    v87 = *((_BYTE *)v68 + 304);
    if ((v77[40] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 304)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[37] != v68[37]) {
        v87 = 1;
      }
      if ((v87 & 1) != 0) {
        return 0LL;
      }
    }

    v88 = *((_BYTE *)v68 + 320);
    if ((v77[56] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 320)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[39] != v68[39]) {
        v88 = 1;
      }
      if ((v88 & 1) != 0) {
        return 0LL;
      }
    }

    v89 = *((_BYTE *)v68 + 336);
    if ((v77[72] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 336)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[41] != v68[41]) {
        v89 = 1;
      }
      if ((v89 & 1) != 0) {
        return 0LL;
      }
    }

    v90 = *((_BYTE *)v68 + 352);
    if ((v77[88] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 352)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[43] != v68[43]) {
        v90 = 1;
      }
      if ((v90 & 1) != 0) {
        return 0LL;
      }
    }

    v91 = *((_BYTE *)v68 + 368);
    if ((v77[104] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 368)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[45] != v68[45]) {
        v91 = 1;
      }
      if ((v91 & 1) != 0) {
        return 0LL;
      }
    }

    v92 = *((_BYTE *)v68 + 384);
    if ((v77[120] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 384)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[47] != v68[47]) {
        v92 = 1;
      }
      if ((v92 & 1) != 0) {
        return 0LL;
      }
    }

    v93 = *((_BYTE *)v68 + 400);
    if ((v77[136] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 400)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[49] != v68[49]) {
        v93 = 1;
      }
      if ((v93 & 1) != 0) {
        return 0LL;
      }
    }

    v94 = *((_BYTE *)v68 + 416);
    if ((v77[152] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 416)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[51] != v68[51]) {
        v94 = 1;
      }
      if ((v94 & 1) != 0) {
        return 0LL;
      }
    }

    v95 = *((_BYTE *)v68 + 432);
    if ((v77[168] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 432)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[53] != v68[53]) {
        v95 = 1;
      }
      if ((v95 & 1) != 0) {
        return 0LL;
      }
    }

    v96 = *((unsigned __int8 *)v834 + 433);
    v97 = *((unsigned __int8 *)v68 + 433);
    if (v96 == 2)
    {
      if (v97 != 2) {
        return 0LL;
      }
    }

    else
    {
      unint64_t result = 0LL;
      v98 = (v96 & 1) == 0;
      if (v97 == 2 || ((v98 ^ v97) & 1) == 0) {
        return result;
      }
    }

    v99 = *((_BYTE *)v68 + 448);
    if ((v77[184] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 448)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[55] != v68[55]) {
        v99 = 1;
      }
      if ((v99 & 1) != 0) {
        return 0LL;
      }
    }

    v100 = *((_BYTE *)v68 + 464);
    if ((v77[200] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 464)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[57] != v68[57]) {
        v100 = 1;
      }
      if ((v100 & 1) != 0) {
        return 0LL;
      }
    }

    v101 = *((_BYTE *)v68 + 480);
    if ((v77[216] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 480)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[59] != v68[59]) {
        v101 = 1;
      }
      if ((v101 & 1) != 0) {
        return 0LL;
      }
    }

    v102 = *((_BYTE *)v68 + 496);
    if ((v77[232] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 496)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[61] != v68[61]) {
        v102 = 1;
      }
      if ((v102 & 1) != 0) {
        return 0LL;
      }
    }

    v103 = *((_BYTE *)v68 + 512);
    if ((v77[248] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 512)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[63] != v68[63]) {
        v103 = 1;
      }
      if ((v103 & 1) != 0) {
        return 0LL;
      }
    }

    v104 = *((_BYTE *)v68 + 528);
    if ((v77[264] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 528)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[65] != v68[65]) {
        v104 = 1;
      }
      if ((v104 & 1) != 0) {
        return 0LL;
      }
    }

    v105 = *((_BYTE *)v68 + 544);
    if ((v77[280] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 544)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[67] != v68[67]) {
        v105 = 1;
      }
      if ((v105 & 1) != 0) {
        return 0LL;
      }
    }

    v106 = v834[69];
    v107 = v68[69];
    if (v106)
    {
      if (!v107 || (sub_1001268D4(v106, v107) & 1) == 0) {
        return 0LL;
      }
    }

    else if (v107)
    {
      return 0LL;
    }

    v108 = *((_BYTE *)v68 + 568);
    if ((v77[304] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 568)) {
        return 0LL;
      }
    }

    else
    {
      if ((v108 & 1) != 0) {
        return 0LL;
      }
    }

    v109 = *((_BYTE *)v68 + 584);
    if ((v77[320] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 584)) {
        return 0LL;
      }
    }

    else
    {
      if ((v109 & 1) != 0) {
        return 0LL;
      }
    }

    v110 = (void *)v834[74];
    v111 = (void *)v68[74];
    if (v110)
    {
      if (!v111) {
        return 0LL;
      }
      v112 = v111;
      v113 = v110;
      v114 = sub_10030703C((uint64_t)v113, (uint64_t)v112);

      if ((v114 & 1) == 0) {
        return 0LL;
      }
    }

    else if (v111)
    {
      return 0LL;
    }

    v115 = v834[75];
    v116 = v68[75];
    if (v115)
    {
      if (!v116) {
        return 0LL;
      }
      swift_bridgeObjectRetain(v68[75]);
      v117 = swift_bridgeObjectRetain(v115);
      v118 = sub_100126A40(v117, v116);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v118 & 1) == 0) {
        return 0LL;
      }
    }

    else if (v116)
    {
      return 0LL;
    }

    v119 = *((_BYTE *)v68 + 616);
    if ((v77[352] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 616)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[76] != v68[76]) {
        v119 = 1;
      }
      if ((v119 & 1) != 0) {
        return 0LL;
      }
    }

    v120 = *((_BYTE *)v68 + 632);
    if ((v77[368] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 632)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[78] != v68[78]) {
        v120 = 1;
      }
      if ((v120 & 1) != 0) {
        return 0LL;
      }
    }

    v121 = *((_BYTE *)v68 + 648);
    if ((v77[384] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 648)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[80] != v68[80]) {
        v121 = 1;
      }
      if ((v121 & 1) != 0) {
        return 0LL;
      }
    }

    v122 = *((_BYTE *)v68 + 664);
    if ((v77[400] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 664)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[82] != v68[82]) {
        v122 = 1;
      }
      if ((v122 & 1) != 0) {
        return 0LL;
      }
    }

    v123 = *((_BYTE *)v68 + 680);
    if ((v77[416] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 680)) {
        return 0LL;
      }
    }

    else
    {
      if (v834[84] != v68[84]) {
        v123 = 1;
      }
      if ((v123 & 1) != 0) {
        return 0LL;
      }
    }

    v124 = *((unsigned __int8 *)v834 + 681);
    v125 = *((unsigned __int8 *)v68 + 681);
    if (v124 == 2)
    {
      if (v125 != 2) {
        return 0LL;
      }
    }

    else
    {
      unint64_t result = 0LL;
      v126 = (v124 & 1) == 0;
      if (v125 == 2 || ((v126 ^ v125) & 1) == 0) {
        return result;
      }
    }

    v127 = type metadata accessor for DefaultConfigurationLayer(0LL);
    sub_10001581C((uint64_t)v834 + *(int *)(v127 + 228), (uint64_t)v31, &qword_10099D8A0);
    v816 = (int *)v127;
    sub_10001581C((uint64_t)v68 + *(int *)(v127 + 228), (uint64_t)v28, &qword_10099D8A0);
    v128 = v821;
    v129 = v821 + *(int *)(v22 + 48);
    sub_10001581C((uint64_t)v31, v821, &qword_10099D8A0);
    sub_10001581C((uint64_t)v28, v129, &qword_10099D8A0);
    v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v820 + 48);
    if (v130(v128, 1LL, v822) == 1)
    {
      sub_100015794((uint64_t)v28, &qword_10099D8A0);
      sub_100015794((uint64_t)v31, &qword_10099D8A0);
      if (v130(v129, 1LL, v822) == 1)
      {
        sub_100015794(v821, &qword_10099D8A0);
        goto LABEL_310;
      }
    }

    else
    {
      sub_10001581C(v821, v817, &qword_10099D8A0);
      if (v130(v129, 1LL, v822) != 1)
      {
        v134 = v819;
        v133 = v820;
        v135 = v822;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v820 + 32))(v819, v129, v822);
        v136 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v137 = v817;
        v138 = dispatch thunk of static Equatable.== infix(_:_:)(v817, v134, v135, v136);
        v139 = *(void (**)(uint64_t, uint64_t))(v133 + 8);
        v139(v134, v135);
        sub_100015794((uint64_t)v28, &qword_10099D8A0);
        sub_100015794((uint64_t)v31, &qword_10099D8A0);
        v139(v137, v135);
        sub_100015794(v821, &qword_10099D8A0);
        if ((v138 & 1) == 0) {
          return 0LL;
        }
LABEL_310:
        v140 = v816;
        v141 = v824;
        sub_10001581C((uint64_t)v834 + v816[58], v824, (uint64_t *)&unk_10099D720);
        v142 = v823;
        sub_10001581C((uint64_t)v68 + v140[58], v823, (uint64_t *)&unk_10099D720);
        v143 = v826;
        v144 = v826 + *(int *)(v827 + 48);
        sub_10001581C(v141, v826, (uint64_t *)&unk_10099D720);
        sub_10001581C(v142, v144, (uint64_t *)&unk_10099D720);
        v145 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v832 + 48);
        if (v145(v143, 1LL, v818) == 1)
        {
          sub_100015794(v823, (uint64_t *)&unk_10099D720);
          sub_100015794(v824, (uint64_t *)&unk_10099D720);
          if (v145(v144, 1LL, v818) == 1)
          {
            sub_100015794(v826, (uint64_t *)&unk_10099D720);
LABEL_318:
            v153 = v816[59];
            v154 = (uint64_t *)((char *)v834 + v153);
            v155 = *((_BYTE *)v834 + v153 + 8);
            v156 = (uint64_t *)((char *)v68 + v153);
            v157 = *((unsigned __int8 *)v68 + v153 + 8);
            if ((v155 & 1) != 0)
            {
              if (!v157) {
                return 0LL;
              }
            }

            else
            {
              if (*v154 != *v156) {
                LOBYTE(v157) = 1;
              }
              if ((v157 & 1) != 0) {
                return 0LL;
              }
            }

            v158 = v816;
            v159 = v829;
            sub_10001581C((uint64_t)v834 + v816[60], v829, (uint64_t *)&unk_10099D720);
            v160 = v828;
            sub_10001581C((uint64_t)v68 + v158[60], v828, (uint64_t *)&unk_10099D720);
            v161 = v833;
            v162 = v833 + *(int *)(v827 + 48);
            sub_10001581C(v159, v833, (uint64_t *)&unk_10099D720);
            sub_10001581C(v160, v162, (uint64_t *)&unk_10099D720);
            if (v145(v161, 1LL, v818) == 1)
            {
              sub_100015794(v828, (uint64_t *)&unk_10099D720);
              sub_100015794(v829, (uint64_t *)&unk_10099D720);
              if (v145(v162, 1LL, v818) == 1)
              {
                sub_100015794(v833, (uint64_t *)&unk_10099D720);
                goto LABEL_331;
              }
            }

            else
            {
              sub_10001581C(v833, v830, (uint64_t *)&unk_10099D720);
              if (v145(v162, 1LL, v818) != 1)
              {
                v164 = v831;
                v163 = v832;
                v165 = v818;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v832 + 32))(v831, v162, v818);
                v166 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
                v167 = v830;
                v168 = dispatch thunk of static Equatable.== infix(_:_:)(v830, v164, v165, v166);
                v169 = *(void (**)(uint64_t, uint64_t))(v163 + 8);
                v169(v164, v165);
                sub_100015794(v828, (uint64_t *)&unk_10099D720);
                sub_100015794(v829, (uint64_t *)&unk_10099D720);
                v169(v167, v165);
                sub_100015794(v833, (uint64_t *)&unk_10099D720);
                if ((v168 & 1) == 0) {
                  return 0LL;
                }
LABEL_331:
                v170 = v816[61];
                v171 = (uint64_t *)((char *)v834 + v170);
                v172 = *((_BYTE *)v834 + v170 + 8);
                v173 = (uint64_t *)((char *)v68 + v170);
                v174 = *((unsigned __int8 *)v68 + v170 + 8);
                if ((v172 & 1) != 0)
                {
                  if (!v174) {
                    return 0LL;
                  }
                }

                else
                {
                  if (*v171 != *v173) {
                    LOBYTE(v174) = 1;
                  }
                  if ((v174 & 1) != 0) {
                    return 0LL;
                  }
                }

                v175 = v816[62];
                v176 = (uint64_t *)((char *)v834 + v175);
                v177 = *((_BYTE *)v834 + v175 + 8);
                v178 = (uint64_t *)((char *)v68 + v175);
                v179 = *((unsigned __int8 *)v68 + v175 + 8);
                if ((v177 & 1) != 0)
                {
                  if (!v179) {
                    return 0LL;
                  }
                }

                else
                {
                  if (*v176 != *v178) {
                    LOBYTE(v179) = 1;
                  }
                  if ((v179 & 1) != 0) {
                    return 0LL;
                  }
                }

                v180 = v816[63];
                v181 = (double *)((char *)v834 + v180);
                v182 = *((_BYTE *)v834 + v180 + 8);
                v183 = (double *)((char *)v68 + v180);
                v184 = *((unsigned __int8 *)v68 + v180 + 8);
                if ((v182 & 1) != 0)
                {
                  if (!v184) {
                    return 0LL;
                  }
                }

                else
                {
                  if (*v181 != *v183) {
                    LOBYTE(v184) = 1;
                  }
                  if ((v184 & 1) != 0) {
                    return 0LL;
                  }
                }

                v185 = v816[64];
                v186 = (double *)((char *)v834 + v185);
                v187 = *((_BYTE *)v834 + v185 + 8);
                v188 = (double *)((char *)v68 + v185);
                v189 = *((unsigned __int8 *)v68 + v185 + 8);
                if ((v187 & 1) != 0)
                {
                  if (!v189) {
                    return 0LL;
                  }
                }

                else
                {
                  if (*v186 != *v188) {
                    LOBYTE(v189) = 1;
                  }
                  if ((v189 & 1) != 0) {
                    return 0LL;
                  }
                }

                v190 = v816[65];
                v191 = (double *)((char *)v834 + v190);
                v192 = *((_BYTE *)v834 + v190 + 8);
                v193 = (double *)((char *)v68 + v190);
                v194 = *((unsigned __int8 *)v68 + v190 + 8);
                if ((v192 & 1) != 0)
                {
                  if (!v194) {
                    return 0LL;
                  }
                }

                else
                {
                  if (*v191 != *v193) {
                    LOBYTE(v194) = 1;
                  }
                  if ((v194 & 1) != 0) {
                    return 0LL;
                  }
                }

                v195 = v816[66];
                v196 = (double *)((char *)v834 + v195);
                v197 = *((_BYTE *)v834 + v195 + 8);
                v198 = (double *)((char *)v68 + v195);
                v199 = *((unsigned __int8 *)v68 + v195 + 8);
                if ((v197 & 1) != 0)
                {
                  if (!v199) {
                    return 0LL;
                  }
                }

                else
                {
                  if (*v196 != *v198) {
                    LOBYTE(v199) = 1;
                  }
                  if ((v199 & 1) != 0) {
                    return 0LL;
                  }
                }

                v200 = v816[67];
                v201 = *(uint64_t *)((char *)v834 + v200);
                v202 = *(uint64_t *)((char *)v834 + v200 + 8);
                v203 = *(uint64_t *)((char *)v834 + v200 + 16);
                v204 = *(uint64_t *)((char *)v834 + v200 + 24);
                v205 = *(uint64_t *)((char *)v834 + v200 + 32);
                v206 = *(uint64_t *)((char *)v834 + v200 + 40);
                v208 = *(uint64_t *)((char *)v834 + v200 + 48);
                v207 = *(uint64_t *)((char *)v834 + v200 + 56);
                v209 = *(uint64_t *)((char *)v834 + v200 + 64);
                v210 = *(uint64_t *)((char *)v834 + v200 + 72);
                v211 = *(uint64_t *)((char *)v834 + v200 + 80);
                v212 = *(uint64_t *)((char *)v834 + v200 + 88);
                v213 = *(uint64_t *)((char *)v834 + v200 + 96);
                v214 = *(uint64_t *)((char *)v834 + v200 + 104);
                v215 = (uint64_t *)((char *)v68 + v200);
                v216 = v215[1];
                v827 = *v215;
                v828 = v216;
                v217 = v215[3];
                v829 = v215[2];
                v830 = v217;
                v218 = v215[5];
                v831 = v215[4];
                v832 = v218;
                v219 = v215[6];
                v833 = v215[7];
                v826 = v215[8];
                v825 = v215[9];
                v824 = v215[10];
                v823 = v215[11];
                v221 = v215[12];
                v220 = v215[13];
                v821 = v221;
                v822 = v220;
                v222 = v208;
                v818 = v214;
                v819 = v219;
                v820 = v213;
                v817 = v212;
                v814 = v210;
                v815 = v211;
                if (v208)
                {
                  if (v219)
                  {
                    v863[0] = v201;
                    v863[1] = v202;
                    v807 = v201;
                    v808 = v209;
                    v809 = v203;
                    v810 = v202;
                    v863[2] = v203;
                    v863[3] = v204;
                    v863[4] = v205;
                    v863[5] = v206;
                    v811 = v205;
                    v812 = v206;
                    v863[6] = v208;
                    v863[7] = v207;
                    v813 = v207;
                    v863[8] = v209;
                    v863[9] = v210;
                    v223 = v209;
                    v224 = v210;
                    v863[10] = v211;
                    v863[11] = v212;
                    v225 = v211;
                    v863[12] = v213;
                    v863[13] = v214;
                    v835 = v827;
                    v836 = v828;
                    v837 = v829;
                    v838 = v830;
                    v839 = v831;
                    v840 = v832;
                    v841 = v219;
                    v842 = v833;
                    v226 = v825;
                    v843 = v826;
                    v844 = v825;
                    v228 = v823;
                    v227 = v824;
                    v845 = v824;
                    v846 = v823;
                    v230 = v821;
                    v229 = v822;
                    v847 = v821;
                    v848 = v822;
                    v800 = v213;
                    v802 = v214;
                    v798 = v212;
                    v231 = v224;
                    v232 = v204;
                    v804 = v204;
                    v805 = v222;
                    v233 = v222;
                    sub_1004220C8(v201, v202, v203, v204, v205, v206, v222, v207, v223, v224, v225, v798, v800, v802);
                    sub_1004220C8(v827, v828, v829, v830, v831, v832, v819, v833, v826, v226, v227, v228, v230, v229);
                    v234 = v808;
                    v235 = v807;
                    v236 = v809;
                    v237 = v810;
                    sub_1004220C8(v807, v810, v809, v232, v811, v812, v233, v813, v808, v231, v815, v817, v820, v818);
                    v806 = _s12searchpartyd19AllMacBeaconConfigsV23__derived_struct_equalsySbAC_ACtFZ_0( (uint64_t)v863,  (uint64_t)&v835);
                    sub_1004221C0(v827, v828, v829, v830, v831, v832, v819, v833, v826, v825, v824, v823, v230, v822);
                    v238 = v818;
                    v239 = v817;
                    v240 = v815;
                    v241 = v814;
                    v794 = v234;
                    v242 = v235;
                    v243 = v237;
                    v244 = v236;
                    v246 = v804;
                    v245 = v805;
                    v248 = v811;
                    v247 = v812;
                    sub_1004221C0(v242, v243, v244, v804, v811, v812, v805, v813, v794, v814, v815, v817, v820, v818);
                    sub_1004221C0(v807, v810, v809, v246, v248, v247, v245, v813, v808, v241, v240, v239, v820, v238);
                    if ((v806 & 1) == 0) {
                      return 0LL;
                    }
LABEL_374:
                    v260 = v816[68];
                    v261 = *((unsigned __int8 *)v834 + v260);
                    v262 = *((unsigned __int8 *)v68 + v260);
                    if (v261 == 2)
                    {
                      if (v262 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v263 = (v261 & 1) == 0;
                      if (v262 == 2 || ((v263 ^ v262) & 1) == 0) {
                        return result;
                      }
                    }

                    v264 = v816[69];
                    v265 = *((unsigned __int8 *)v834 + v264);
                    v266 = *((unsigned __int8 *)v68 + v264);
                    if (v265 == 2)
                    {
                      if (v266 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v267 = (v265 & 1) == 0;
                      if (v266 == 2 || ((v267 ^ v266) & 1) == 0) {
                        return result;
                      }
                    }

                    v268 = v816[70];
                    v269 = *((unsigned __int8 *)v834 + v268);
                    v270 = *((unsigned __int8 *)v68 + v268);
                    if (v269 == 2)
                    {
                      if (v270 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v271 = (v269 & 1) == 0;
                      if (v270 == 2 || ((v271 ^ v270) & 1) == 0) {
                        return result;
                      }
                    }

                    v272 = v816[71];
                    v273 = (double *)((char *)v834 + v272);
                    v274 = *((_BYTE *)v834 + v272 + 8);
                    v275 = (double *)((char *)v68 + v272);
                    v276 = *((unsigned __int8 *)v68 + v272 + 8);
                    if ((v274 & 1) != 0)
                    {
                      if (!v276) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v273 != *v275) {
                        LOBYTE(v276) = 1;
                      }
                      if ((v276 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v277 = v816[72];
                    v278 = (double *)((char *)v834 + v277);
                    v279 = *((_BYTE *)v834 + v277 + 8);
                    v280 = (double *)((char *)v68 + v277);
                    v281 = *((unsigned __int8 *)v68 + v277 + 8);
                    if ((v279 & 1) != 0)
                    {
                      if (!v281) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v278 != *v280) {
                        LOBYTE(v281) = 1;
                      }
                      if ((v281 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v282 = v816[73];
                    v283 = (double *)((char *)v834 + v282);
                    v284 = *((_BYTE *)v834 + v282 + 8);
                    v285 = (double *)((char *)v68 + v282);
                    v286 = *((unsigned __int8 *)v68 + v282 + 8);
                    if ((v284 & 1) != 0)
                    {
                      if (!v286) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v283 != *v285) {
                        LOBYTE(v286) = 1;
                      }
                      if ((v286 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v287 = v816[74];
                    v288 = (double *)((char *)v834 + v287);
                    v289 = *((_BYTE *)v834 + v287 + 8);
                    v290 = (double *)((char *)v68 + v287);
                    v291 = *((unsigned __int8 *)v68 + v287 + 8);
                    if ((v289 & 1) != 0)
                    {
                      if (!v291) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v288 != *v290) {
                        LOBYTE(v291) = 1;
                      }
                      if ((v291 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v292 = v816[75];
                    v293 = (double *)((char *)v834 + v292);
                    v294 = *((_BYTE *)v834 + v292 + 8);
                    v295 = (double *)((char *)v68 + v292);
                    v296 = *((unsigned __int8 *)v68 + v292 + 8);
                    if ((v294 & 1) != 0)
                    {
                      if (!v296) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v293 != *v295) {
                        LOBYTE(v296) = 1;
                      }
                      if ((v296 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v297 = v816[76];
                    v298 = (double *)((char *)v834 + v297);
                    v299 = *((_BYTE *)v834 + v297 + 8);
                    v300 = (double *)((char *)v68 + v297);
                    v301 = *((unsigned __int8 *)v68 + v297 + 8);
                    if ((v299 & 1) != 0)
                    {
                      if (!v301) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v298 != *v300) {
                        LOBYTE(v301) = 1;
                      }
                      if ((v301 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v302 = v816[77];
                    v303 = (double *)((char *)v834 + v302);
                    v304 = *((_BYTE *)v834 + v302 + 8);
                    v305 = (double *)((char *)v68 + v302);
                    v306 = *((unsigned __int8 *)v68 + v302 + 8);
                    if ((v304 & 1) != 0)
                    {
                      if (!v306) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v303 != *v305) {
                        LOBYTE(v306) = 1;
                      }
                      if ((v306 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v307 = v816[78];
                    v308 = (double *)((char *)v834 + v307);
                    v309 = *((_BYTE *)v834 + v307 + 8);
                    v310 = (double *)((char *)v68 + v307);
                    v311 = *((unsigned __int8 *)v68 + v307 + 8);
                    if ((v309 & 1) != 0)
                    {
                      if (!v311) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v308 != *v310) {
                        LOBYTE(v311) = 1;
                      }
                      if ((v311 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v312 = v816[79];
                    v313 = (uint64_t *)((char *)v834 + v312);
                    v314 = *((_BYTE *)v834 + v312 + 8);
                    v315 = (uint64_t *)((char *)v68 + v312);
                    v316 = *((unsigned __int8 *)v68 + v312 + 8);
                    if ((v314 & 1) != 0)
                    {
                      if (!v316) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v313 != *v315) {
                        LOBYTE(v316) = 1;
                      }
                      if ((v316 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v317 = v816[80];
                    v318 = (uint64_t *)((char *)v834 + v317);
                    v319 = *(uint64_t *)((char *)v834 + v317 + 8);
                    v320 = (uint64_t *)((char *)v68 + v317);
                    v321 = v320[1];
                    if (v319)
                    {
                      if (!v321) {
                        return 0LL;
                      }
                      if (*v318 != *v320 || v319 != v321)
                      {
                        v322 = _stringCompareWithSmolCheck(_:_:expecting:)(*v318, v319, *v320, v321, 0LL);
                        unint64_t result = 0LL;
                        if ((v322 & 1) == 0) {
                          return result;
                        }
                      }
                    }

                    else if (v321)
                    {
                      return 0LL;
                    }

                    v323 = v816[81];
                    v324 = (uint64_t *)((char *)v834 + v323);
                    v325 = *((_BYTE *)v834 + v323 + 8);
                    v326 = (uint64_t *)((char *)v68 + v323);
                    v327 = *((unsigned __int8 *)v68 + v323 + 8);
                    if ((v325 & 1) != 0)
                    {
                      if (!v327) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v324 != *v326) {
                        LOBYTE(v327) = 1;
                      }
                      if ((v327 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v328 = v816[82];
                    v329 = (uint64_t *)((char *)v834 + v328);
                    v330 = *(uint64_t *)((char *)v834 + v328 + 8);
                    v331 = (uint64_t *)((char *)v68 + v328);
                    v332 = v331[1];
                    if (v330)
                    {
                      if (!v332) {
                        return 0LL;
                      }
                      if (*v329 != *v331 || v330 != v332)
                      {
                        v333 = _stringCompareWithSmolCheck(_:_:expecting:)(*v329, v330, *v331, v332, 0LL);
                        unint64_t result = 0LL;
                        if ((v333 & 1) == 0) {
                          return result;
                        }
                      }
                    }

                    else if (v332)
                    {
                      return 0LL;
                    }

                    v334 = v816[83];
                    v335 = (uint64_t *)((char *)v834 + v334);
                    v336 = *((_BYTE *)v834 + v334 + 8);
                    v337 = (uint64_t *)((char *)v68 + v334);
                    v338 = *((unsigned __int8 *)v68 + v334 + 8);
                    if ((v336 & 1) != 0)
                    {
                      if (!v338) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v335 != *v337) {
                        LOBYTE(v338) = 1;
                      }
                      if ((v338 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v339 = v816[84];
                    v340 = *(void **)((char *)v834 + v339);
                    v341 = *(void **)((char *)v68 + v339);
                    if (v340)
                    {
                      if (!v341 || !sub_100126B14(v340, v341)) {
                        return 0LL;
                      }
                    }

                    else if (v341)
                    {
                      return 0LL;
                    }

                    v342 = v816[85];
                    v343 = (uint64_t *)((char *)v834 + v342);
                    v344 = *(uint64_t *)((char *)v834 + v342 + 8);
                    v345 = (uint64_t *)((char *)v68 + v342);
                    v346 = v345[1];
                    if (v344)
                    {
                      if (!v346) {
                        return 0LL;
                      }
                      if (*v343 != *v345 || v344 != v346)
                      {
                        v347 = _stringCompareWithSmolCheck(_:_:expecting:)(*v343, v344, *v345, v346, 0LL);
                        unint64_t result = 0LL;
                        if ((v347 & 1) == 0) {
                          return result;
                        }
                      }
                    }

                    else if (v346)
                    {
                      return 0LL;
                    }

                    v348 = v816[86];
                    v349 = (double *)((char *)v834 + v348);
                    v350 = *((_BYTE *)v834 + v348 + 8);
                    v351 = (double *)((char *)v68 + v348);
                    v352 = *((unsigned __int8 *)v68 + v348 + 8);
                    if ((v350 & 1) != 0)
                    {
                      if (!v352) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v349 != *v351) {
                        LOBYTE(v352) = 1;
                      }
                      if ((v352 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v353 = v816[87];
                    v354 = *((unsigned __int8 *)v834 + v353);
                    v355 = *((unsigned __int8 *)v68 + v353);
                    if (v354 == 2)
                    {
                      if (v355 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v356 = (v354 & 1) == 0;
                      if (v355 == 2 || ((v356 ^ v355) & 1) == 0) {
                        return result;
                      }
                    }

                    v357 = v816[88];
                    v358 = *((unsigned __int8 *)v834 + v357);
                    v359 = *((unsigned __int8 *)v68 + v357);
                    if (v358 == 2)
                    {
                      if (v359 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v360 = (v358 & 1) == 0;
                      if (v359 == 2 || ((v360 ^ v359) & 1) == 0) {
                        return result;
                      }
                    }

                    v361 = v816[89];
                    v362 = *((unsigned __int8 *)v834 + v361);
                    v363 = *((unsigned __int8 *)v68 + v361);
                    if (v362 == 2)
                    {
                      if (v363 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v364 = (v362 & 1) == 0;
                      if (v363 == 2 || ((v364 ^ v363) & 1) == 0) {
                        return result;
                      }
                    }

                    v365 = v816[90];
                    v366 = *((unsigned __int8 *)v834 + v365);
                    v367 = *((unsigned __int8 *)v68 + v365);
                    if (v366 == 2)
                    {
                      if (v367 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v368 = (v366 & 1) == 0;
                      if (v367 == 2 || ((v368 ^ v367) & 1) == 0) {
                        return result;
                      }
                    }

                    v369 = v816[91];
                    v370 = (uint64_t *)((char *)v834 + v369);
                    v371 = *((_BYTE *)v834 + v369 + 8);
                    v372 = (uint64_t *)((char *)v68 + v369);
                    v373 = *((unsigned __int8 *)v68 + v369 + 8);
                    if ((v371 & 1) != 0)
                    {
                      if (!v373) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v370 != *v372) {
                        LOBYTE(v373) = 1;
                      }
                      if ((v373 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v374 = v816[92];
                    v375 = (uint64_t *)((char *)v834 + v374);
                    v376 = *((_BYTE *)v834 + v374 + 8);
                    v377 = (uint64_t *)((char *)v68 + v374);
                    v378 = *((unsigned __int8 *)v68 + v374 + 8);
                    if ((v376 & 1) != 0)
                    {
                      if (!v378) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v375 != *v377) {
                        LOBYTE(v378) = 1;
                      }
                      if ((v378 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v379 = v816[93];
                    v380 = (uint64_t *)((char *)v834 + v379);
                    v381 = *((_BYTE *)v834 + v379 + 8);
                    v382 = (uint64_t *)((char *)v68 + v379);
                    v383 = *((unsigned __int8 *)v68 + v379 + 8);
                    if ((v381 & 1) != 0)
                    {
                      if (!v383) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v380 != *v382) {
                        LOBYTE(v383) = 1;
                      }
                      if ((v383 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v384 = v816[94];
                    v385 = (uint64_t *)((char *)v834 + v384);
                    v386 = *((_BYTE *)v834 + v384 + 8);
                    v387 = (uint64_t *)((char *)v68 + v384);
                    v388 = *((unsigned __int8 *)v68 + v384 + 8);
                    if ((v386 & 1) != 0)
                    {
                      if (!v388) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v385 != *v387) {
                        LOBYTE(v388) = 1;
                      }
                      if ((v388 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v389 = v816[95];
                    v390 = (uint64_t *)((char *)v834 + v389);
                    v391 = *((_BYTE *)v834 + v389 + 8);
                    v392 = (uint64_t *)((char *)v68 + v389);
                    v393 = *((unsigned __int8 *)v68 + v389 + 8);
                    if ((v391 & 1) != 0)
                    {
                      if (!v393) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v390 != *v392) {
                        LOBYTE(v393) = 1;
                      }
                      if ((v393 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v394 = v816[96];
                    v395 = (double *)((char *)v834 + v394);
                    v396 = *((_BYTE *)v834 + v394 + 8);
                    v397 = (double *)((char *)v68 + v394);
                    v398 = *((unsigned __int8 *)v68 + v394 + 8);
                    if ((v396 & 1) != 0)
                    {
                      if (!v398) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v395 != *v397) {
                        LOBYTE(v398) = 1;
                      }
                      if ((v398 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v399 = v816[97];
                    v400 = (double *)((char *)v834 + v399);
                    v401 = *((_BYTE *)v834 + v399 + 8);
                    v402 = (double *)((char *)v68 + v399);
                    v403 = *((unsigned __int8 *)v68 + v399 + 8);
                    if ((v401 & 1) != 0)
                    {
                      if (!v403) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v400 != *v402) {
                        LOBYTE(v403) = 1;
                      }
                      if ((v403 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v404 = v816[98];
                    v405 = (double *)((char *)v834 + v404);
                    v406 = *((_BYTE *)v834 + v404 + 8);
                    v407 = (double *)((char *)v68 + v404);
                    v408 = *((unsigned __int8 *)v68 + v404 + 8);
                    if ((v406 & 1) != 0)
                    {
                      if (!v408) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v405 != *v407) {
                        LOBYTE(v408) = 1;
                      }
                      if ((v408 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v409 = v816[99];
                    v410 = (uint64_t *)((char *)v834 + v409);
                    v411 = *((_BYTE *)v834 + v409 + 8);
                    v412 = (uint64_t *)((char *)v68 + v409);
                    v413 = *((unsigned __int8 *)v68 + v409 + 8);
                    if ((v411 & 1) != 0)
                    {
                      if (!v413) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v410 != *v412) {
                        LOBYTE(v413) = 1;
                      }
                      if ((v413 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v414 = v816[100];
                    v415 = (uint64_t *)((char *)v834 + v414);
                    v416 = *((_BYTE *)v834 + v414 + 8);
                    v417 = (uint64_t *)((char *)v68 + v414);
                    v418 = *((unsigned __int8 *)v68 + v414 + 8);
                    if ((v416 & 1) != 0)
                    {
                      if (!v418) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v415 != *v417) {
                        LOBYTE(v418) = 1;
                      }
                      if ((v418 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v419 = v816[101];
                    v420 = (uint64_t *)((char *)v834 + v419);
                    v421 = *((_BYTE *)v834 + v419 + 8);
                    v422 = (uint64_t *)((char *)v68 + v419);
                    v423 = *((unsigned __int8 *)v68 + v419 + 8);
                    if ((v421 & 1) != 0)
                    {
                      if (!v423) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v420 != *v422) {
                        LOBYTE(v423) = 1;
                      }
                      if ((v423 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v424 = v816[102];
                    v425 = (double *)((char *)v834 + v424);
                    v426 = *((_BYTE *)v834 + v424 + 8);
                    v427 = (double *)((char *)v68 + v424);
                    v428 = *((unsigned __int8 *)v68 + v424 + 8);
                    if ((v426 & 1) != 0)
                    {
                      if (!v428) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v425 != *v427) {
                        LOBYTE(v428) = 1;
                      }
                      if ((v428 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v429 = v816[103];
                    v430 = (double *)((char *)v834 + v429);
                    v431 = *((_BYTE *)v834 + v429 + 8);
                    v432 = (double *)((char *)v68 + v429);
                    v433 = *((unsigned __int8 *)v68 + v429 + 8);
                    if ((v431 & 1) != 0)
                    {
                      if (!v433) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v430 != *v432) {
                        LOBYTE(v433) = 1;
                      }
                      if ((v433 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v434 = v816[104];
                    v435 = (uint64_t *)((char *)v834 + v434);
                    v436 = *((_BYTE *)v834 + v434 + 8);
                    v437 = (uint64_t *)((char *)v68 + v434);
                    v438 = *((unsigned __int8 *)v68 + v434 + 8);
                    if ((v436 & 1) != 0)
                    {
                      if (!v438) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v435 != *v437) {
                        LOBYTE(v438) = 1;
                      }
                      if ((v438 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v439 = v816[105];
                    v440 = (uint64_t *)((char *)v834 + v439);
                    v441 = *((_BYTE *)v834 + v439 + 8);
                    v442 = (uint64_t *)((char *)v68 + v439);
                    v443 = *((unsigned __int8 *)v68 + v439 + 8);
                    if ((v441 & 1) != 0)
                    {
                      if (!v443) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v440 != *v442) {
                        LOBYTE(v443) = 1;
                      }
                      if ((v443 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v444 = v816[106];
                    v445 = (uint64_t *)((char *)v834 + v444);
                    v446 = *((_BYTE *)v834 + v444 + 8);
                    v447 = (uint64_t *)((char *)v68 + v444);
                    v448 = *((unsigned __int8 *)v68 + v444 + 8);
                    if ((v446 & 1) != 0)
                    {
                      if (!v448) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v445 != *v447) {
                        LOBYTE(v448) = 1;
                      }
                      if ((v448 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v449 = v816[107];
                    v450 = (uint64_t *)((char *)v834 + v449);
                    v451 = *((_BYTE *)v834 + v449 + 8);
                    v452 = (uint64_t *)((char *)v68 + v449);
                    v453 = *((unsigned __int8 *)v68 + v449 + 8);
                    if ((v451 & 1) != 0)
                    {
                      if (!v453) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v450 != *v452) {
                        LOBYTE(v453) = 1;
                      }
                      if ((v453 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v454 = v816[108];
                    v455 = (uint64_t *)((char *)v834 + v454);
                    v456 = *((_BYTE *)v834 + v454 + 8);
                    v457 = (uint64_t *)((char *)v68 + v454);
                    v458 = *((unsigned __int8 *)v68 + v454 + 8);
                    if ((v456 & 1) != 0)
                    {
                      if (!v458) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v455 != *v457) {
                        LOBYTE(v458) = 1;
                      }
                      if ((v458 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v459 = v816[109];
                    v460 = (uint64_t *)((char *)v834 + v459);
                    v461 = *((_BYTE *)v834 + v459 + 8);
                    v462 = (uint64_t *)((char *)v68 + v459);
                    v463 = *((unsigned __int8 *)v68 + v459 + 8);
                    if ((v461 & 1) != 0)
                    {
                      if (!v463) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v460 != *v462) {
                        LOBYTE(v463) = 1;
                      }
                      if ((v463 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v464 = v816[110];
                    v465 = (uint64_t *)((char *)v834 + v464);
                    v466 = *((_BYTE *)v834 + v464 + 8);
                    v467 = (uint64_t *)((char *)v68 + v464);
                    v468 = *((unsigned __int8 *)v68 + v464 + 8);
                    if ((v466 & 1) != 0)
                    {
                      if (!v468) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v465 != *v467) {
                        LOBYTE(v468) = 1;
                      }
                      if ((v468 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v469 = v816[111];
                    v470 = (uint64_t *)((char *)v834 + v469);
                    v471 = *((_BYTE *)v834 + v469 + 8);
                    v472 = (uint64_t *)((char *)v68 + v469);
                    v473 = *((unsigned __int8 *)v68 + v469 + 8);
                    if ((v471 & 1) != 0)
                    {
                      if (!v473) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v470 != *v472) {
                        LOBYTE(v473) = 1;
                      }
                      if ((v473 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v474 = v816[112];
                    v475 = (double *)((char *)v834 + v474);
                    v476 = *((_BYTE *)v834 + v474 + 8);
                    v477 = (double *)((char *)v68 + v474);
                    v478 = *((unsigned __int8 *)v68 + v474 + 8);
                    if ((v476 & 1) != 0)
                    {
                      if (!v478) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v475 != *v477) {
                        LOBYTE(v478) = 1;
                      }
                      if ((v478 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v479 = v816[113];
                    v480 = *((unsigned __int8 *)v834 + v479);
                    v481 = *((unsigned __int8 *)v68 + v479);
                    if (v480 == 2)
                    {
                      if (v481 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v482 = (v480 & 1) == 0;
                      if (v481 == 2 || ((v482 ^ v481) & 1) == 0) {
                        return result;
                      }
                    }

                    v483 = v816[114];
                    v484 = (double *)((char *)v834 + v483);
                    v485 = *((_BYTE *)v834 + v483 + 8);
                    v486 = (double *)((char *)v68 + v483);
                    v487 = *((unsigned __int8 *)v68 + v483 + 8);
                    if ((v485 & 1) != 0)
                    {
                      if (!v487) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v484 != *v486) {
                        LOBYTE(v487) = 1;
                      }
                      if ((v487 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v488 = v816[115];
                    v489 = (double *)((char *)v834 + v488);
                    v490 = *((_BYTE *)v834 + v488 + 8);
                    v491 = (double *)((char *)v68 + v488);
                    v492 = *((unsigned __int8 *)v68 + v488 + 8);
                    if ((v490 & 1) != 0)
                    {
                      if (!v492) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v489 != *v491) {
                        LOBYTE(v492) = 1;
                      }
                      if ((v492 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v493 = v816[116];
                    v494 = (uint64_t *)((char *)v834 + v493);
                    v495 = *((_BYTE *)v834 + v493 + 8);
                    v496 = (uint64_t *)((char *)v68 + v493);
                    v497 = *((unsigned __int8 *)v68 + v493 + 8);
                    if ((v495 & 1) != 0)
                    {
                      if (!v497) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v494 != *v496) {
                        LOBYTE(v497) = 1;
                      }
                      if ((v497 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v498 = v816[117];
                    v499 = *((unsigned __int8 *)v834 + v498);
                    v500 = *((unsigned __int8 *)v68 + v498);
                    if (v499 == 2)
                    {
                      if (v500 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v501 = (v499 & 1) == 0;
                      if (v500 == 2 || ((v501 ^ v500) & 1) == 0) {
                        return result;
                      }
                    }

                    v502 = v816[118];
                    v503 = *((unsigned __int8 *)v834 + v502);
                    v504 = *((unsigned __int8 *)v68 + v502);
                    if (v503 == 2)
                    {
                      if (v504 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v505 = (v503 & 1) == 0;
                      if (v504 == 2 || ((v505 ^ v504) & 1) == 0) {
                        return result;
                      }
                    }

                    v506 = v816[119];
                    v507 = *((unsigned __int8 *)v834 + v506);
                    v508 = *((unsigned __int8 *)v68 + v506);
                    if (v507 == 2)
                    {
                      if (v508 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v509 = (v507 & 1) == 0;
                      if (v508 == 2 || ((v509 ^ v508) & 1) == 0) {
                        return result;
                      }
                    }

                    v510 = v816[120];
                    v511 = (uint64_t *)((char *)v834 + v510);
                    v512 = *((_BYTE *)v834 + v510 + 8);
                    v513 = (uint64_t *)((char *)v68 + v510);
                    v514 = *((unsigned __int8 *)v68 + v510 + 8);
                    if ((v512 & 1) != 0)
                    {
                      if (!v514) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v511 != *v513) {
                        LOBYTE(v514) = 1;
                      }
                      if ((v514 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v515 = v816[121];
                    v516 = (double *)((char *)v834 + v515);
                    v517 = *((_BYTE *)v834 + v515 + 8);
                    v518 = (double *)((char *)v68 + v515);
                    v519 = *((unsigned __int8 *)v68 + v515 + 8);
                    if ((v517 & 1) != 0)
                    {
                      if (!v519) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v516 != *v518) {
                        LOBYTE(v519) = 1;
                      }
                      if ((v519 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v520 = v816[122];
                    v521 = (double *)((char *)v834 + v520);
                    v522 = *((_BYTE *)v834 + v520 + 8);
                    v523 = (double *)((char *)v68 + v520);
                    v524 = *((unsigned __int8 *)v68 + v520 + 8);
                    if ((v522 & 1) != 0)
                    {
                      if (!v524) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v521 != *v523) {
                        LOBYTE(v524) = 1;
                      }
                      if ((v524 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v525 = v816[123];
                    v526 = (uint64_t *)((char *)v834 + v525);
                    v527 = *((_BYTE *)v834 + v525 + 8);
                    v528 = (uint64_t *)((char *)v68 + v525);
                    v529 = *((unsigned __int8 *)v68 + v525 + 8);
                    if ((v527 & 1) != 0)
                    {
                      if (!v529) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v526 != *v528) {
                        LOBYTE(v529) = 1;
                      }
                      if ((v529 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v530 = v816[124];
                    v531 = (uint64_t *)((char *)v834 + v530);
                    v532 = *((_BYTE *)v834 + v530 + 8);
                    v533 = (uint64_t *)((char *)v68 + v530);
                    v534 = *((unsigned __int8 *)v68 + v530 + 8);
                    if ((v532 & 1) != 0)
                    {
                      if (!v534) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v531 != *v533) {
                        LOBYTE(v534) = 1;
                      }
                      if ((v534 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v535 = v816[125];
                    v536 = (uint64_t *)((char *)v834 + v535);
                    v537 = *((_BYTE *)v834 + v535 + 8);
                    v538 = (uint64_t *)((char *)v68 + v535);
                    v539 = *((unsigned __int8 *)v68 + v535 + 8);
                    if ((v537 & 1) != 0)
                    {
                      if (!v539) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v536 != *v538) {
                        LOBYTE(v539) = 1;
                      }
                      if ((v539 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v540 = v816[126];
                    v541 = (uint64_t *)((char *)v834 + v540);
                    v542 = *((_BYTE *)v834 + v540 + 8);
                    v543 = (uint64_t *)((char *)v68 + v540);
                    v544 = *((unsigned __int8 *)v68 + v540 + 8);
                    if ((v542 & 1) != 0)
                    {
                      if (!v544) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v541 != *v543) {
                        LOBYTE(v544) = 1;
                      }
                      if ((v544 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v545 = v816[127];
                    v546 = (double *)((char *)v834 + v545);
                    v547 = *((_BYTE *)v834 + v545 + 8);
                    v548 = (double *)((char *)v68 + v545);
                    v549 = *((unsigned __int8 *)v68 + v545 + 8);
                    if ((v547 & 1) != 0)
                    {
                      if (!v549) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v546 != *v548) {
                        LOBYTE(v549) = 1;
                      }
                      if ((v549 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v550 = v816[128];
                    v551 = *((unsigned __int8 *)v834 + v550);
                    v552 = *((unsigned __int8 *)v68 + v550);
                    if (v551 == 2)
                    {
                      if (v552 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v553 = (v551 & 1) == 0;
                      if (v552 == 2 || ((v553 ^ v552) & 1) == 0) {
                        return result;
                      }
                    }

                    v554 = v816[129];
                    v555 = (double *)((char *)v834 + v554);
                    v556 = *((_BYTE *)v834 + v554 + 8);
                    v557 = (double *)((char *)v68 + v554);
                    v558 = *((unsigned __int8 *)v68 + v554 + 8);
                    if ((v556 & 1) != 0)
                    {
                      if (!v558) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v555 != *v557) {
                        LOBYTE(v558) = 1;
                      }
                      if ((v558 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v559 = v816[130];
                    v560 = *(void **)((char *)v834 + v559);
                    v561 = *(void **)((char *)v68 + v559);
                    if (v560)
                    {
                      if (!v561 || !sub_100126B14(v560, v561)) {
                        return 0LL;
                      }
                    }

                    else if (v561)
                    {
                      return 0LL;
                    }

                    v562 = v816[131];
                    v563 = (double *)((char *)v834 + v562);
                    v564 = *((_BYTE *)v834 + v562 + 8);
                    v565 = (double *)((char *)v68 + v562);
                    v566 = *((unsigned __int8 *)v68 + v562 + 8);
                    if ((v564 & 1) != 0)
                    {
                      if (!v566) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v563 != *v565) {
                        LOBYTE(v566) = 1;
                      }
                      if ((v566 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v567 = v816[132];
                    v568 = *((unsigned __int8 *)v834 + v567);
                    v569 = *((unsigned __int8 *)v68 + v567);
                    if (v568 == 2)
                    {
                      if (v569 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v570 = (v568 & 1) == 0;
                      if (v569 == 2 || ((v570 ^ v569) & 1) == 0) {
                        return result;
                      }
                    }

                    v571 = v816[133];
                    v572 = *(uint64_t *)((char *)v834 + v571);
                    v573 = *(uint64_t *)((char *)v68 + v571);
                    if (v572)
                    {
                      if (!v573) {
                        return 0LL;
                      }
                      swift_bridgeObjectRetain(*(uint64_t *)((char *)v68 + v571));
                      v574 = swift_bridgeObjectRetain(v572);
                      v575 = sub_1001D3C60(v574, v573);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v575 & 1) == 0) {
                        return 0LL;
                      }
                    }

                    else if (v573)
                    {
                      return 0LL;
                    }

                    v576 = v816[134];
                    v577 = *((unsigned __int8 *)v834 + v576);
                    v578 = *((unsigned __int8 *)v68 + v576);
                    if (v577 == 2)
                    {
                      if (v578 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v579 = (v577 & 1) == 0;
                      if (v578 == 2 || ((v579 ^ v578) & 1) == 0) {
                        return result;
                      }
                    }

                    v580 = v816[135];
                    v581 = (double *)((char *)v834 + v580);
                    v582 = *((_BYTE *)v834 + v580 + 8);
                    v583 = (double *)((char *)v68 + v580);
                    v584 = *((unsigned __int8 *)v68 + v580 + 8);
                    if ((v582 & 1) != 0)
                    {
                      if (!v584) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v581 != *v583) {
                        LOBYTE(v584) = 1;
                      }
                      if ((v584 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v585 = v816[136];
                    v586 = (double *)((char *)v834 + v585);
                    v587 = *((_BYTE *)v834 + v585 + 8);
                    v588 = (double *)((char *)v68 + v585);
                    v589 = *((unsigned __int8 *)v68 + v585 + 8);
                    if ((v587 & 1) != 0)
                    {
                      if (!v589) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v586 != *v588) {
                        LOBYTE(v589) = 1;
                      }
                      if ((v589 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v590 = v816[137];
                    v591 = *((unsigned __int8 *)v834 + v590);
                    v592 = *((unsigned __int8 *)v68 + v590);
                    if (v591 == 2)
                    {
                      if (v592 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v593 = (v591 & 1) == 0;
                      if (v592 == 2 || ((v593 ^ v592) & 1) == 0) {
                        return result;
                      }
                    }

                    v594 = v816[138];
                    v595 = *((unsigned __int8 *)v834 + v594);
                    v596 = *((unsigned __int8 *)v68 + v594);
                    if (v595 == 2)
                    {
                      if (v596 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v597 = (v595 & 1) == 0;
                      if (v596 == 2 || ((v597 ^ v596) & 1) == 0) {
                        return result;
                      }
                    }

                    v598 = v816[139];
                    v599 = (uint64_t *)((char *)v834 + v598);
                    v600 = *((_BYTE *)v834 + v598 + 8);
                    v601 = (uint64_t *)((char *)v68 + v598);
                    v602 = *((unsigned __int8 *)v68 + v598 + 8);
                    if ((v600 & 1) != 0)
                    {
                      if (!v602) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v599 != *v601) {
                        LOBYTE(v602) = 1;
                      }
                      if ((v602 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v603 = v816[140];
                    v604 = (uint64_t *)((char *)v834 + v603);
                    v605 = *((_BYTE *)v834 + v603 + 8);
                    v606 = (uint64_t *)((char *)v68 + v603);
                    v607 = *((unsigned __int8 *)v68 + v603 + 8);
                    if ((v605 & 1) != 0)
                    {
                      if (!v607) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v604 != *v606) {
                        LOBYTE(v607) = 1;
                      }
                      if ((v607 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v608 = v816[141];
                    v609 = (uint64_t *)((char *)v834 + v608);
                    v610 = *((_BYTE *)v834 + v608 + 8);
                    v611 = (uint64_t *)((char *)v68 + v608);
                    v612 = *((unsigned __int8 *)v68 + v608 + 8);
                    if ((v610 & 1) != 0)
                    {
                      if (!v612) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v609 != *v611) {
                        LOBYTE(v612) = 1;
                      }
                      if ((v612 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v613 = v816[142];
                    v614 = (uint64_t *)((char *)v834 + v613);
                    v615 = *((_BYTE *)v834 + v613 + 8);
                    v616 = (uint64_t *)((char *)v68 + v613);
                    v617 = *((unsigned __int8 *)v68 + v613 + 8);
                    if ((v615 & 1) != 0)
                    {
                      if (!v617) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v614 != *v616) {
                        LOBYTE(v617) = 1;
                      }
                      if ((v617 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v618 = v816[143];
                    v619 = (uint64_t *)((char *)v834 + v618);
                    v620 = *((_BYTE *)v834 + v618 + 8);
                    v621 = (uint64_t *)((char *)v68 + v618);
                    v622 = *((unsigned __int8 *)v68 + v618 + 8);
                    if ((v620 & 1) != 0)
                    {
                      if (!v622) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v619 != *v621) {
                        LOBYTE(v622) = 1;
                      }
                      if ((v622 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v623 = v816[144];
                    v624 = (uint64_t *)((char *)v834 + v623);
                    v625 = *((_BYTE *)v834 + v623 + 8);
                    v626 = (uint64_t *)((char *)v68 + v623);
                    v627 = *((unsigned __int8 *)v68 + v623 + 8);
                    if ((v625 & 1) != 0)
                    {
                      if (!v627) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v624 != *v626) {
                        LOBYTE(v627) = 1;
                      }
                      if ((v627 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v628 = v816[145];
                    v629 = (uint64_t *)((char *)v834 + v628);
                    v630 = *((_BYTE *)v834 + v628 + 8);
                    v631 = (uint64_t *)((char *)v68 + v628);
                    v632 = *((unsigned __int8 *)v68 + v628 + 8);
                    if ((v630 & 1) != 0)
                    {
                      if (!v632) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v629 != *v631) {
                        LOBYTE(v632) = 1;
                      }
                      if ((v632 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v633 = v816[146];
                    v634 = (uint64_t *)((char *)v834 + v633);
                    v635 = *((_BYTE *)v834 + v633 + 8);
                    v636 = (uint64_t *)((char *)v68 + v633);
                    v637 = *((unsigned __int8 *)v68 + v633 + 8);
                    if ((v635 & 1) != 0)
                    {
                      if (!v637) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v634 != *v636) {
                        LOBYTE(v637) = 1;
                      }
                      if ((v637 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v638 = v816[147];
                    v639 = (uint64_t *)((char *)v834 + v638);
                    v640 = *((_BYTE *)v834 + v638 + 8);
                    v641 = (uint64_t *)((char *)v68 + v638);
                    v642 = *((unsigned __int8 *)v68 + v638 + 8);
                    if ((v640 & 1) != 0)
                    {
                      if (!v642) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v639 != *v641) {
                        LOBYTE(v642) = 1;
                      }
                      if ((v642 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v643 = v816[148];
                    v644 = (uint64_t *)((char *)v834 + v643);
                    v645 = *((_BYTE *)v834 + v643 + 8);
                    v646 = (uint64_t *)((char *)v68 + v643);
                    v647 = *((unsigned __int8 *)v68 + v643 + 8);
                    if ((v645 & 1) != 0)
                    {
                      if (!v647) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v644 != *v646) {
                        LOBYTE(v647) = 1;
                      }
                      if ((v647 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v648 = v816[149];
                    v649 = (uint64_t *)((char *)v834 + v648);
                    v650 = *((_BYTE *)v834 + v648 + 8);
                    v651 = (uint64_t *)((char *)v68 + v648);
                    v652 = *((unsigned __int8 *)v68 + v648 + 8);
                    if ((v650 & 1) != 0)
                    {
                      if (!v652) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v649 != *v651) {
                        LOBYTE(v652) = 1;
                      }
                      if ((v652 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v653 = v816[150];
                    v654 = (uint64_t *)((char *)v834 + v653);
                    v655 = *((_BYTE *)v834 + v653 + 8);
                    v656 = (uint64_t *)((char *)v68 + v653);
                    v657 = *((unsigned __int8 *)v68 + v653 + 8);
                    if ((v655 & 1) != 0)
                    {
                      if (!v657) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v654 != *v656) {
                        LOBYTE(v657) = 1;
                      }
                      if ((v657 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v658 = v816[151];
                    v659 = (uint64_t *)((char *)v834 + v658);
                    v660 = *((_BYTE *)v834 + v658 + 8);
                    v661 = (uint64_t *)((char *)v68 + v658);
                    v662 = *((unsigned __int8 *)v68 + v658 + 8);
                    if ((v660 & 1) != 0)
                    {
                      if (!v662) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v659 != *v661) {
                        LOBYTE(v662) = 1;
                      }
                      if ((v662 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v663 = v816[152];
                    v664 = (uint64_t *)((char *)v834 + v663);
                    v665 = *((_BYTE *)v834 + v663 + 8);
                    v666 = (uint64_t *)((char *)v68 + v663);
                    v667 = *((unsigned __int8 *)v68 + v663 + 8);
                    if ((v665 & 1) != 0)
                    {
                      if (!v667) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v664 != *v666) {
                        LOBYTE(v667) = 1;
                      }
                      if ((v667 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v668 = v816[153];
                    v669 = (uint64_t *)((char *)v834 + v668);
                    v670 = *((_BYTE *)v834 + v668 + 8);
                    v671 = (uint64_t *)((char *)v68 + v668);
                    v672 = *((unsigned __int8 *)v68 + v668 + 8);
                    if ((v670 & 1) != 0)
                    {
                      if (!v672) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v669 != *v671) {
                        LOBYTE(v672) = 1;
                      }
                      if ((v672 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v673 = v816[154];
                    v674 = (uint64_t *)((char *)v834 + v673);
                    v675 = *((_BYTE *)v834 + v673 + 8);
                    v676 = (uint64_t *)((char *)v68 + v673);
                    v677 = *((unsigned __int8 *)v68 + v673 + 8);
                    if ((v675 & 1) != 0)
                    {
                      if (!v677) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v674 != *v676) {
                        LOBYTE(v677) = 1;
                      }
                      if ((v677 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v678 = v816[155];
                    v679 = (double *)((char *)v834 + v678);
                    v680 = *((_BYTE *)v834 + v678 + 8);
                    v681 = (double *)((char *)v68 + v678);
                    v682 = *((unsigned __int8 *)v68 + v678 + 8);
                    if ((v680 & 1) != 0)
                    {
                      if (!v682) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v679 != *v681) {
                        LOBYTE(v682) = 1;
                      }
                      if ((v682 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v683 = v816[156];
                    v684 = (double *)((char *)v834 + v683);
                    v685 = *((_BYTE *)v834 + v683 + 8);
                    v686 = (double *)((char *)v68 + v683);
                    v687 = *((unsigned __int8 *)v68 + v683 + 8);
                    if ((v685 & 1) != 0)
                    {
                      if (!v687) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v684 != *v686) {
                        LOBYTE(v687) = 1;
                      }
                      if ((v687 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v688 = v816[157];
                    v689 = *((unsigned __int8 *)v834 + v688);
                    v690 = *((unsigned __int8 *)v68 + v688);
                    if (v689 == 2)
                    {
                      if (v690 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v691 = (v689 & 1) == 0;
                      if (v690 == 2 || ((v691 ^ v690) & 1) == 0) {
                        return result;
                      }
                    }

                    v692 = v816[158];
                    v693 = (double *)((char *)v834 + v692);
                    v694 = *((_BYTE *)v834 + v692 + 8);
                    v695 = (double *)((char *)v68 + v692);
                    v696 = *((unsigned __int8 *)v68 + v692 + 8);
                    if ((v694 & 1) != 0)
                    {
                      if (!v696) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v693 != *v695) {
                        LOBYTE(v696) = 1;
                      }
                      if ((v696 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v697 = v816[159];
                    v698 = (double *)((char *)v834 + v697);
                    v699 = *((_BYTE *)v834 + v697 + 8);
                    v700 = (double *)((char *)v68 + v697);
                    v701 = *((unsigned __int8 *)v68 + v697 + 8);
                    if ((v699 & 1) != 0)
                    {
                      if (!v701) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v698 != *v700) {
                        LOBYTE(v701) = 1;
                      }
                      if ((v701 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v702 = v816[160];
                    v703 = (double *)((char *)v834 + v702);
                    v704 = *((_BYTE *)v834 + v702 + 8);
                    v705 = (double *)((char *)v68 + v702);
                    v706 = *((unsigned __int8 *)v68 + v702 + 8);
                    if ((v704 & 1) != 0)
                    {
                      if (!v706) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v703 != *v705) {
                        LOBYTE(v706) = 1;
                      }
                      if ((v706 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v707 = v816[161];
                    v708 = (uint64_t *)((char *)v834 + v707);
                    v709 = *(uint64_t *)((char *)v834 + v707 + 8);
                    v710 = (uint64_t *)((char *)v68 + v707);
                    v711 = v710[1];
                    if (v709)
                    {
                      if (!v711) {
                        return 0LL;
                      }
                      if (*v708 != *v710 || v709 != v711)
                      {
                        v712 = _stringCompareWithSmolCheck(_:_:expecting:)(*v708, v709, *v710, v711, 0LL);
                        unint64_t result = 0LL;
                        if ((v712 & 1) == 0) {
                          return result;
                        }
                      }
                    }

                    else if (v711)
                    {
                      return 0LL;
                    }

                    v713 = v816[162];
                    v714 = (uint64_t *)((char *)v834 + v713);
                    v715 = *((_BYTE *)v834 + v713 + 8);
                    v716 = (uint64_t *)((char *)v68 + v713);
                    v717 = *((unsigned __int8 *)v68 + v713 + 8);
                    if ((v715 & 1) != 0)
                    {
                      if (!v717) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v714 != *v716) {
                        LOBYTE(v717) = 1;
                      }
                      if ((v717 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v718 = v816[163];
                    v719 = *((unsigned __int8 *)v834 + v718);
                    v720 = *((unsigned __int8 *)v68 + v718);
                    if (v719 == 2)
                    {
                      if (v720 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v721 = (v719 & 1) == 0;
                      if (v720 == 2 || ((v721 ^ v720) & 1) == 0) {
                        return result;
                      }
                    }

                    v722 = v816[164];
                    v723 = *((unsigned __int8 *)v834 + v722);
                    v724 = *((unsigned __int8 *)v68 + v722);
                    if (v723 == 2)
                    {
                      if (v724 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v725 = (v723 & 1) == 0;
                      if (v724 == 2 || ((v725 ^ v724) & 1) == 0) {
                        return result;
                      }
                    }

                    v726 = v816[165];
                    v727 = (double *)((char *)v834 + v726);
                    v728 = *((_BYTE *)v834 + v726 + 8);
                    v729 = (double *)((char *)v68 + v726);
                    v730 = *((unsigned __int8 *)v68 + v726 + 8);
                    if ((v728 & 1) != 0)
                    {
                      if (!v730) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v727 != *v729) {
                        LOBYTE(v730) = 1;
                      }
                      if ((v730 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v731 = v816[166];
                    v732 = (double *)((char *)v834 + v731);
                    v733 = *((_BYTE *)v834 + v731 + 8);
                    v734 = (double *)((char *)v68 + v731);
                    v735 = *((unsigned __int8 *)v68 + v731 + 8);
                    if ((v733 & 1) != 0)
                    {
                      if (!v735) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v732 != *v734) {
                        LOBYTE(v735) = 1;
                      }
                      if ((v735 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v736 = v816[167];
                    v737 = *((unsigned __int8 *)v834 + v736);
                    v738 = *((unsigned __int8 *)v68 + v736);
                    if (v737 == 2)
                    {
                      if (v738 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      unint64_t result = 0LL;
                      v739 = (v737 & 1) == 0;
                      if (v738 == 2 || ((v739 ^ v738) & 1) == 0) {
                        return result;
                      }
                    }

                    v740 = v816[168];
                    v741 = (_DWORD *)((char *)v834 + v740);
                    v742 = *((_BYTE *)v834 + v740 + 4);
                    v743 = (_DWORD *)((char *)v68 + v740);
                    v744 = *((unsigned __int8 *)v68 + v740 + 4);
                    if ((v742 & 1) != 0)
                    {
                      if (!v744) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v741 != *v743) {
                        LOBYTE(v744) = 1;
                      }
                      if ((v744 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v745 = v816[169];
                    v746 = (uint64_t *)((char *)v834 + v745);
                    v747 = *((_BYTE *)v834 + v745 + 8);
                    v748 = (uint64_t *)((char *)v68 + v745);
                    v749 = *((unsigned __int8 *)v68 + v745 + 8);
                    if ((v747 & 1) != 0)
                    {
                      if (!v749) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v746 != *v748) {
                        LOBYTE(v749) = 1;
                      }
                      if ((v749 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v750 = v816[170];
                    v751 = (double *)((char *)v834 + v750);
                    v752 = *((_BYTE *)v834 + v750 + 8);
                    v753 = (double *)((char *)v68 + v750);
                    v754 = *((unsigned __int8 *)v68 + v750 + 8);
                    if ((v752 & 1) != 0)
                    {
                      if (!v754) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v751 != *v753) {
                        LOBYTE(v754) = 1;
                      }
                      if ((v754 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v755 = v816[171];
                    v756 = (double *)((char *)v834 + v755);
                    v757 = *((_BYTE *)v834 + v755 + 8);
                    v758 = (double *)((char *)v68 + v755);
                    v759 = *((unsigned __int8 *)v68 + v755 + 8);
                    if ((v757 & 1) != 0)
                    {
                      if (!v759) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v756 != *v758) {
                        LOBYTE(v759) = 1;
                      }
                      if ((v759 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v760 = v816[172];
                    v761 = (double *)((char *)v834 + v760);
                    v762 = *((_BYTE *)v834 + v760 + 8);
                    v763 = (double *)((char *)v68 + v760);
                    v764 = *((unsigned __int8 *)v68 + v760 + 8);
                    if ((v762 & 1) != 0)
                    {
                      if (!v764) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v761 != *v763) {
                        LOBYTE(v764) = 1;
                      }
                      if ((v764 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v765 = v816[173];
                    v766 = (double *)((char *)v834 + v765);
                    v767 = *((_BYTE *)v834 + v765 + 8);
                    v768 = (double *)((char *)v68 + v765);
                    v769 = *((unsigned __int8 *)v68 + v765 + 8);
                    if ((v767 & 1) != 0)
                    {
                      if (!v769) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v766 != *v768) {
                        LOBYTE(v769) = 1;
                      }
                      if ((v769 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v770 = v816[174];
                    v771 = (double *)((char *)v834 + v770);
                    v772 = *((_BYTE *)v834 + v770 + 8);
                    v773 = (double *)((char *)v68 + v770);
                    v774 = *((unsigned __int8 *)v68 + v770 + 8);
                    if ((v772 & 1) != 0)
                    {
                      if (!v774) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v771 != *v773) {
                        LOBYTE(v774) = 1;
                      }
                      if ((v774 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v775 = v816[175];
                    v776 = (double *)((char *)v834 + v775);
                    v777 = *((_BYTE *)v834 + v775 + 8);
                    v778 = (double *)((char *)v68 + v775);
                    v779 = *((unsigned __int8 *)v68 + v775 + 8);
                    if ((v777 & 1) != 0)
                    {
                      if (!v779) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (*v776 != *v778) {
                        LOBYTE(v779) = 1;
                      }
                      if ((v779 & 1) != 0) {
                        return 0LL;
                      }
                    }

                    v780 = v816[176];
                    v781 = *((unsigned __int8 *)v834 + v780);
                    v782 = *((unsigned __int8 *)v68 + v780);
                    if (v781 != 2)
                    {
                      unint64_t result = 0LL;
                      v783 = (v781 & 1) == 0;
                      if (v782 == 2 || ((v783 ^ v782) & 1) == 0) {
                        return result;
                      }
                      goto LABEL_1008;
                    }

                    if (v782 == 2)
                    {
LABEL_1008:
                      v784 = v816[177];
                      v785 = (double *)((char *)v834 + v784);
                      v786 = *((_BYTE *)v834 + v784 + 8);
                      v787 = (double *)((char *)v68 + v784);
                      v788 = *((unsigned __int8 *)v68 + v784 + 8);
                      if ((v786 & 1) != 0)
                      {
                        if (!v788) {
                          return 0LL;
                        }
                      }

                      else
                      {
                        if (*v785 != *v787) {
                          LOBYTE(v788) = 1;
                        }
                        if ((v788 & 1) != 0) {
                          return 0LL;
                        }
                      }

                      v789 = v816[178];
                      v790 = (double *)((char *)v834 + v789);
                      v791 = *((_BYTE *)v834 + v789 + 8);
                      v792 = (double *)((char *)v68 + v789);
                      v793 = *((_BYTE *)v68 + v789 + 8);
                      if ((v791 & 1) == 0)
                      {
                        if (*v790 != *v792) {
                          v793 = 1;
                        }
                        return (v793 & 1) == 0;
                      }

                      return (v793 & 1) != 0;
                    }

                    return 0LL;
                  }
                }

                else if (!v219)
                {
                  v801 = v213;
                  v803 = v214;
                  v797 = v211;
                  v799 = v212;
                  v795 = v209;
                  v796 = v210;
                  v252 = v209;
                  v253 = v201;
                  v254 = v202;
                  v255 = v203;
                  v256 = v204;
                  v257 = v205;
                  v258 = v206;
                  v259 = v207;
                  sub_1004220C8(v201, v202, v203, v204, v205, v206, 0LL, v207, v795, v796, v797, v799, v801, v803);
                  sub_1004220C8(v827, v828, v829, v830, v831, v832, 0LL, v833, v826, v825, v824, v823, v821, v822);
                  sub_1004221C0(v253, v254, v255, v256, v257, v258, 0LL, v259, v252, v814, v815, v817, v820, v818);
                  goto LABEL_374;
                }

                v835 = v201;
                v836 = v202;
                v837 = v203;
                v838 = v204;
                v839 = v205;
                v840 = v206;
                v841 = v208;
                v842 = v207;
                v843 = v209;
                v844 = v210;
                v845 = v211;
                v846 = v212;
                v847 = v213;
                v848 = v214;
                v849 = v827;
                v850 = v828;
                v851 = v829;
                v852 = v830;
                v853 = v831;
                v854 = v832;
                v855 = v219;
                v856 = v833;
                v857 = v826;
                v858 = v825;
                v249 = v823;
                v859 = v824;
                v860 = v823;
                v250 = v821;
                v251 = v822;
                v861 = v821;
                v862 = v822;
                sub_1004220C8(v201, v202, v203, v204, v205, v206, v208, v207, v209, v210, v211, v212, v213, v214);
                sub_1004220C8(v827, v828, v829, v830, v831, v832, v819, v833, v826, v825, v824, v249, v250, v251);
                sub_1004220F8((uint64_t)&v835);
                return 0LL;
              }

              sub_100015794(v828, (uint64_t *)&unk_10099D720);
              sub_100015794(v829, (uint64_t *)&unk_10099D720);
              (*(void (**)(uint64_t, uint64_t))(v832 + 8))(v830, v818);
            }

            v131 = (uint64_t *)&unk_10099D760;
            v132 = v833;
LABEL_316:
            sub_100015794(v132, v131);
            return 0LL;
          }
        }

        else
        {
          sub_10001581C(v826, v825, (uint64_t *)&unk_10099D720);
          if (v145(v144, 1LL, v818) != 1)
          {
            v147 = v831;
            v146 = v832;
            v148 = v818;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v832 + 32))(v831, v144, v818);
            v149 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
            v150 = v825;
            v151 = dispatch thunk of static Equatable.== infix(_:_:)(v825, v147, v148, v149);
            v152 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
            v152(v147, v148);
            sub_100015794(v823, (uint64_t *)&unk_10099D720);
            sub_100015794(v824, (uint64_t *)&unk_10099D720);
            v152(v150, v148);
            sub_100015794(v826, (uint64_t *)&unk_10099D720);
            if ((v151 & 1) == 0) {
              return 0LL;
            }
            goto LABEL_318;
          }

          sub_100015794(v823, (uint64_t *)&unk_10099D720);
          sub_100015794(v824, (uint64_t *)&unk_10099D720);
          (*(void (**)(uint64_t, uint64_t))(v832 + 8))(v825, v818);
        }

        v131 = (uint64_t *)&unk_10099D760;
        v132 = v826;
        goto LABEL_316;
      }

      sub_100015794((uint64_t)v28, &qword_10099D8A0);
      sub_100015794((uint64_t)v31, &qword_10099D8A0);
      (*(void (**)(uint64_t, uint64_t))(v820 + 8))(v817, v822);
    }

    v131 = (uint64_t *)&unk_1009B5370;
    v132 = v821;
    goto LABEL_316;
  }

  return result;
}

      sub_100018C68(*(void *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
      uint64_t v21 = *(void *)(v0 + 600);
      uint64_t v22 = *(void *)(v0 + 656) + 1LL;
      sub_100018C68(*(void *)(v0 + 528), type metadata accessor for OwnedBeaconRecord);
      if (v22 == v21) {
        goto LABEL_2;
      }
    }

    uint64_t v37 = ~v35;
    char v38 = *(void *)(v0 + 552);
    unint64_t v39 = *(void *)(v38 + 72);
    BOOL v40 = *(void (**)(uint64_t, unint64_t, uint64_t))(v38 + 16);
    uint64_t v41 = *(void *)(v0 + 640);
    while (1)
    {
      uint64_t v42 = *(void *)(v0 + 560);
      uint64_t v43 = *(void *)(v0 + 552);
      int64_t v44 = *(void *)(v0 + 544);
      v40(v42, *(void *)(v41 + 48) + v36 * v39, v44);
      uint64_t v45 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v46 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v31, v44, v45);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
      if ((v46 & 1) != 0) {
        break;
      }
      uint64_t v41 = *(void *)(v0 + 640);
      unint64_t v36 = (v36 + 1) & v37;
      if (((*(void *)(v41 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v36) & 1) == 0) {
        goto LABEL_5;
      }
    }

    sub_100018C68(*(void *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
    int v47 = sub_100004AEC(&qword_1009AF850);
    *(void *)(v0 + 680) = AnalyticsEvent.__allocating_init(name:)();
    uint64_t v48 = sub_1000372EC( &qword_1009AF858,  &qword_1009AF850,  (uint64_t)&protocol conformance descriptor for AnalyticsEvent<A, B>);
    uint64_t v49 = dispatch thunk of Actor.unownedExecutor.getter(v47, v48);
    return swift_task_switch(sub_1004804D4, v49, v50);
  }

        unint64_t result = sub_100018C68((uint64_t)v11, type metadata accessor for BeaconObservation);
LABEL_6:
        if (++v26 == v47)
        {
          uint64_t v25 = v48;
          uint64_t v14 = v42;
          a3 = v43;
          uint64_t v15 = v41;
          goto LABEL_24;
        }
      }
    }

    __int128 v27 = v45;
LABEL_24:
    swift_release(v23);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = _swiftEmptyArrayStorage;
    __int128 v27 = v45;
  }

  objc_autoreleasePoolPop(v15);
  swift_bridgeObjectRelease();
  sub_1000F0A44((uint64_t)v25, (uint64_t)v14);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v14, 1LL, v7) == 1)
  {
    sub_100015794((uint64_t)v14, (uint64_t *)&unk_1009A5990);
    unint64_t v36 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))( a3,  1LL,  1LL,  v36);
  }

  else
  {
    uint64_t v37 = &v14[*(int *)(v7 + 20)];
    char v38 = type metadata accessor for Date(0LL);
    unint64_t v39 = *(void *)(v38 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(a3, v37, v38);
    sub_100018C68((uint64_t)v14, type metadata accessor for BeaconObservation);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(a3, 0LL, 1LL, v38);
  }

  if ((a1 & 8) != 0)
  {
    v1 = v1 | 8;
    if ((a1 & 0x200) == 0)
    {
LABEL_7:
      if ((a1 & 0x400) == 0) {
        goto LABEL_8;
      }
LABEL_16:
      v1 = v1 | 0x20;
      if ((a1 & 0x1000) == 0) {
        return v1;
      }
      return v1 | 0x40;
    }
  }

  else if ((a1 & 0x200) == 0)
  {
    goto LABEL_7;
  }

  v1 = v1 | 0x10;
  if ((a1 & 0x400) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((a1 & 0x1000) != 0) {
    return v1 | 0x40;
  }
  return v1;
}

unint64_t sub_100058B04(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      uint64_t v7 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
      Hasher.init(_seed:)(v14, *(void *)(a2 + 40));
      __asm { BR              X8 }
    }

    unint64_t v8 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    uint64_t v9 = *v8;
    uint64_t v10 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v8 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v10 = *v8;
    uint64_t v9 = (-1LL << result) - 1;
  }

  *unint64_t v8 = v10 & v9;
  uint64_t v11 = *(void *)(a2 + 16);
  BOOL v12 = __OFSUB__(v11, 1LL);
  uint64_t v13 = v11 - 1;
  if (v12)
  {
    __break(1u);
    JUMPOUT(0x100058DB8LL);
  }

  *(void *)(a2 + 16) = v13;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_100058DD8(int64_t a1, uint64_t a2)
{
  return sub_1000597CC(a1, a2, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

unint64_t sub_100058DE4(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v38 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v39 + 72);
      uint64_t v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        int64_t v15 = v12 * v10;
        uint64_t v16 = v13;
        v37(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v17 = *(void *)(a2 + 40);
        uint64_t v18 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v4, v18);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v4);
        uint64_t v13 = v16;
        unint64_t v20 = v19 & v16;
        if (a1 >= (uint64_t)v38)
        {
          if (v20 >= v38 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            uint64_t v23 = *(void *)(a2 + 48);
            int64_t v24 = v12 * a1;
            unint64_t v25 = v23 + v12 * a1;
            uint64_t v26 = v23 + v15;
            if (v12 * a1 < v15 || v25 >= v26 + v12)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1LL, v4);
            }

            else if (v24 != v15)
            {
              swift_arrayInitWithTakeBackToFront(v25, v26);
            }

            uint64_t v27 = *(void *)(a2 + 56);
            unint64_t result = v27 + v24;
            uint64_t v28 = v27 + v15;
            if (v24 < v15 || result >= v28 + v12)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v28, 1LL, v4);
              a1 = v10;
              uint64_t v8 = v14;
              uint64_t v13 = v16;
            }

            else
            {
              a1 = v10;
              BOOL v29 = v24 == v15;
              uint64_t v8 = v14;
              uint64_t v13 = v16;
              if (!v29)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront(result, v28);
                uint64_t v13 = v16;
                a1 = v10;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v20 >= v38 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1LL);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1000590A0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          unint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_100059274(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v37 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v38 + 72);
      uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v36(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront(result, v25);
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            uint64_t v27 = (void *)(v26 + 8 * a1);
            uint64_t v28 = (void *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *uint64_t v27 = *v28;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    BOOL v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  else
  {
    BOOL v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  *BOOL v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1LL);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_100059514(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v39 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v40 + 72);
      uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v38(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v39)
        {
          if (v21 >= v39 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront(result, v25);
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            unint64_t v27 = v26 + 40 * a1;
            uint64_t v28 = (__int128 *)(v26 + 40 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= (unint64_t)v28 + 40))
            {
              __int128 v29 = *v28;
              __int128 v30 = v28[1];
              *(void *)(v27 + 32) = *((void *)v28 + 4);
              *(_OWORD *)unint64_t v27 = v29;
              *(_OWORD *)(v27 + 16) = v30;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v39 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v31;
    uint64_t v33 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v33 = *v31;
    uint64_t v32 = (-1LL << a1) - 1;
  }

  *uint64_t v31 = v33 & v32;
  uint64_t v34 = *(void *)(a2 + 16);
  BOOL v35 = __OFSUB__(v34, 1LL);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1000597C0(int64_t a1, uint64_t a2)
{
  return sub_1000597CC(a1, a2, (uint64_t (*)(void))&type metadata accessor for Date);
}

unint64_t sub_1000597CC(int64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v39 = a3;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v41 = *(void *)(v5 - 8);
  unint64_t result = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v42 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    uint64_t v12 = v42;
    if ((*(void *)(v42 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v13 = (result + 1) & v11;
      uint64_t v14 = *(void *)(v41 + 72);
      uint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
      do
      {
        int64_t v15 = v14 * v10;
        v40(v8, *(void *)(a2 + 48) + v14 * v10, v5);
        uint64_t v16 = *(void *)(a2 + 40);
        uint64_t v17 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v5, v17);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v8, v5);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v13)
        {
        }

        else if (v19 < v13 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }

        uint64_t v22 = *(void *)(a2 + 48);
        unint64_t v23 = v22 + v14 * a1;
        uint64_t v24 = v22 + v15;
        if (v14 * a1 < v15 || v23 >= v24 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v24, 1LL, v5);
        }

        else if (v14 * a1 != v15)
        {
          swift_arrayInitWithTakeBackToFront(v23, v24);
        }

        uint64_t v25 = *(void *)(a2 + 56);
        uint64_t v26 = v39(0LL);
        uint64_t v27 = *(void *)(*(void *)(v26 - 8) + 72LL);
        int64_t v28 = v27 * a1;
        unint64_t result = v25 + v27 * a1;
        int64_t v29 = v27 * v10;
        uint64_t v30 = v25 + v27 * v10;
        unint64_t v31 = v30 + v27;
        if (v28 < v29 || result >= v31)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v30, 1LL, v26);
        }

        else
        {
          a1 = v10;
          if (v28 == v29) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront(result, v30);
        }

        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v12 = v42;
      }

      while (((*(void *)(v42 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v33 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v34 = *v33;
    uint64_t v35 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v33 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v35 = *v33;
    uint64_t v34 = (-1LL << a1) - 1;
  }

  *uint64_t v33 = v35 & v34;
  uint64_t v36 = *(void *)(a2 + 16);
  BOOL v37 = __OFSUB__(v36, 1LL);
  uint64_t v38 = v36 - 1;
  if (v37)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v38;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_100059A74(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)(v31, *(void *)(a2 + 40));
        sub_10001736C(v10, v11);
        Data.hash(into:)(v31, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = sub_100016F9C(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        int64_t v15 = (_OWORD *)(v14 + 16 * v3);
        uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *int64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
        uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 72LL);
        int64_t v20 = v19 * v3;
        unint64_t result = v17 + v19 * v3;
        int64_t v21 = v19 * v6;
        uint64_t v22 = v17 + v19 * v6;
        unint64_t v23 = v22 + v19;
        if (v20 < v21 || result >= v23)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v22, 1LL, v18);
        }

        else
        {
          int64_t v3 = v6;
          if (v20 == v21) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront(result, v22);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_100059C80(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          int64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *int64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_100059E54(int64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v39 = a3;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v41 = *(void *)(v5 - 8);
  unint64_t result = __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v42 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    uint64_t v12 = v42;
    if ((*(void *)(v42 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v13 = (result + 1) & v11;
      uint64_t v14 = *(void *)(v41 + 72);
      uint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
      do
      {
        int64_t v15 = v14 * v10;
        v40(v8, *(void *)(a2 + 48) + v14 * v10, v5);
        uint64_t v16 = *(void *)(a2 + 40);
        uint64_t v17 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v5, v17);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v8, v5);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v13)
        {
        }

        else if (v19 < v13 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }

        uint64_t v22 = *(void *)(a2 + 48);
        unint64_t v23 = v22 + v14 * a1;
        uint64_t v24 = v22 + v15;
        if (v14 * a1 < v15 || v23 >= v24 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v24, 1LL, v5);
        }

        else if (v14 * a1 != v15)
        {
          swift_arrayInitWithTakeBackToFront(v23, v24);
        }

        uint64_t v25 = *(void *)(a2 + 56);
        uint64_t v26 = sub_100004AEC(v39);
        uint64_t v27 = *(void *)(*(void *)(v26 - 8) + 72LL);
        int64_t v28 = v27 * a1;
        unint64_t result = v25 + v27 * a1;
        int64_t v29 = v27 * v10;
        uint64_t v30 = v25 + v27 * v10;
        unint64_t v31 = v30 + v27;
        if (v28 < v29 || result >= v31)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v30, 1LL, v26);
        }

        else
        {
          a1 = v10;
          if (v28 == v29) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront(result, v30);
        }

        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v12 = v42;
      }

      while (((*(void *)(v42 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v33 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v34 = *v33;
    uint64_t v35 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v33 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v35 = *v33;
    uint64_t v34 = (-1LL << a1) - 1;
  }

  *uint64_t v33 = v35 & v34;
  uint64_t v36 = *(void *)(a2 + 16);
  BOOL v37 = __OFSUB__(v36, 1LL);
  uint64_t v38 = v36 - 1;
  if (v37)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v38;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_10005A0F8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v31, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v31, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v13 = v12 & v7;
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        int64_t v15 = (_OWORD *)(v14 + 16 * v3);
        uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *int64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = type metadata accessor for SecureLocationsSubscription(0LL);
        uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 72LL);
        int64_t v20 = v19 * v3;
        unint64_t result = v17 + v19 * v3;
        int64_t v21 = v19 * v6;
        uint64_t v22 = v17 + v19 * v6;
        unint64_t v23 = v22 + v19;
        if (v20 < v21 || result >= v23)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v22, 1LL, v18);
        }

        else
        {
          int64_t v3 = v6;
          if (v20 == v21) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront(result, v22);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_10005A2F4(uint64_t a1, uint64_t a2)
{
  return sub_10005A300(a1, a2, (uint64_t (*)(void))&type metadata accessor for URL);
}

unint64_t sub_10005A300(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v44 = a3;
  uint64_t v48 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v4 = *(void *)(v48 - 8);
  unint64_t result = __chkstk_darwin(v48);
  int v47 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (v6 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    Swift::Int v12 = v6;
    unint64_t result = _HashTable.previousHole(before:)(v6, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v13 = (result + 1) & v11;
      uint64_t v14 = *(void *)(v4 + 72);
      uint64_t v15 = v11;
      uint64_t v45 = v14;
      uint64_t v46 = a2 + 64;
      uint64_t v16 = (uint64_t)v47;
      do
      {
        int64_t v17 = v14 * v10;
        sub_10001DC4C(*(void *)(a2 + 48) + v14 * v10, v16, type metadata accessor for BeaconIdentifier);
        uint64_t v18 = a2;
        Hasher.init(_seed:)(v49, *(void *)(a2 + 40));
        unint64_t v19 = v13;
        uint64_t v20 = v15;
        uint64_t v21 = type metadata accessor for UUID(0LL);
        uint64_t v22 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v49, v21, v22);
        uint64_t v23 = v21;
        uint64_t v15 = v20;
        unint64_t v13 = v19;
        dispatch thunk of Hashable.hash(into:)(v49, v23, v22);
        Swift::Int v24 = Hasher._finalize()();
        unint64_t result = sub_100018C68(v16, type metadata accessor for BeaconIdentifier);
        Swift::Int v25 = v24 & v15;
        unint64_t v26 = v12;
        if (v12 >= (uint64_t)v19)
        {
          if (v25 < v19)
          {
            uint64_t v8 = v46;
            a2 = v18;
          }

          else
          {
            uint64_t v8 = v46;
            a2 = v18;
            if (v12 >= v25) {
              goto LABEL_13;
            }
          }
        }

        else
        {
          uint64_t v8 = v46;
          a2 = v18;
          if (v25 >= v13 || v12 >= v25)
          {
LABEL_13:
            uint64_t v27 = *(void *)(a2 + 48);
            uint64_t v14 = v45;
            unint64_t v28 = v27 + v45 * v12;
            uint64_t v29 = v27 + v17;
            if (v45 * v12 < v17 || v28 >= v29 + v45)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v29, 1LL, v48);
            }

            else if (v45 * v12 != v17)
            {
              swift_arrayInitWithTakeBackToFront(v28, v29);
            }

            uint64_t v30 = *(void *)(a2 + 56);
            uint64_t v31 = v44(0LL);
            uint64_t v32 = *(void *)(*(void *)(v31 - 8) + 72LL);
            int64_t v33 = v32 * v12;
            unint64_t result = v30 + v32 * v12;
            int64_t v34 = v32 * v10;
            uint64_t v35 = v30 + v32 * v10;
            unint64_t v36 = v35 + v32;
            if (v33 < v34 || result >= v36)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v35, 1LL, v31);
              unint64_t v26 = v10;
            }

            else
            {
              unint64_t v26 = v10;
              if (v33 != v34)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront(result, v35);
                unint64_t v26 = v10;
              }
            }

            goto LABEL_6;
          }
        }

        uint64_t v14 = v45;
LABEL_6:
        Swift::Int v12 = v26;
        unint64_t v10 = (v10 + 1) & v15;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v38 = (uint64_t *)(v8 + 8 * ((unint64_t)v12 >> 6));
    uint64_t v39 = *v38;
    uint64_t v40 = (-1LL << v12) - 1;
  }

  else
  {
    uint64_t v38 = (uint64_t *)(v8 + 8 * (v6 >> 6));
    uint64_t v40 = *v38;
    uint64_t v39 = (-1LL << v6) - 1;
  }

  *uint64_t v38 = v40 & v39;
  uint64_t v41 = *(void *)(a2 + 16);
  BOOL v42 = __OFSUB__(v41, 1LL);
  uint64_t v43 = v41 - 1;
  if (v42)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v43;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_10005A62C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v23, *(void *)(a2 + 40));
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::Int v12 = (void *)(v11 + 8 * v3);
          unint64_t v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *Swift::Int v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }

void sub_10005A7E4(unint64_t a1, uint64_t a2)
{
}

void sub_10005A7F0(unint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = a1;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v7 = (a1 + 1) & ~v6;
  if (((1LL << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    uint64_t v10 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v6);
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1LL << v7)) != 0)
    {
      unint64_t v11 = (v10 + 1) & v9;
      do
      {
        Swift::Int v12 = *(void *)(a2 + 40);
        id v13 = *(id *)(*(void *)(a2 + 48) + 8 * v7);
        Swift::Int v14 = NSObject._rawHashValue(seed:)(v12);

        Swift::Int v15 = v14 & v9;
        if (v4 >= (uint64_t)v11)
        {
          if (v15 < v11 || v4 < v15) {
            goto LABEL_6;
          }
        }

        else if (v15 < v11 && v4 < v15)
        {
          goto LABEL_6;
        }

        uint64_t v18 = *(void *)(a2 + 48);
        uint64_t v19 = (void *)(v18 + 8 * v4);
        uint64_t v20 = (void *)(v18 + 8 * v7);
        if (v4 != v7 || v19 >= v20 + 1) {
          *uint64_t v19 = *v20;
        }
        uint64_t v21 = *(void *)(a2 + 56);
        uint64_t v22 = a3(0LL);
        uint64_t v23 = *(void *)(*(void *)(v22 - 8) + 72LL);
        int64_t v24 = v23 * v4;
        unint64_t v25 = v21 + v23 * v4;
        int64_t v26 = v23 * v7;
        uint64_t v27 = v21 + v23 * v7;
        unint64_t v28 = v27 + v23;
        if (v24 < v26 || v25 >= v28)
        {
          swift_arrayInitWithTakeFrontToBack(v25, v27, 1LL, v22);
        }

        else
        {
          int64_t v4 = v7;
          if (v24 == v26) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }

        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
      }

      while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0);
    }

    uint64_t v30 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1LL << v4) - 1;
  }

  else
  {
    uint64_t v30 = (uint64_t *)(v5 + 8 * (a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1LL);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }

unint64_t sub_10005A9D4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        sub_10001736C(v10, v11);
        Data.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = sub_100016F9C(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          Swift::Int v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *Swift::Int v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 16 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_10005ABB8(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099E338);
  uint64_t v40 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1LL << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v41 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v8);
    uint64_t v11 = v41;
    if ((*(void *)(v41 + 8 * (v9 >> 6)) & (1LL << v9)) != 0)
    {
      unint64_t v12 = (result + 1) & v10;
      uint64_t v13 = *(void *)(v40 + 72);
      uint64_t v39 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      do
      {
        int64_t v14 = v13 * v9;
        v39(v7, *(void *)(a2 + 48) + v13 * v9, v4);
        uint64_t v15 = *(void *)(a2 + 40);
        unint64_t v16 = sub_10006A45C();
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v4, v16);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v7, v4);
        unint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v12)
        {
        }

        else if (v18 < v12 && a1 < (uint64_t)v18)
        {
          goto LABEL_6;
        }

        uint64_t v21 = *(void *)(a2 + 48);
        unint64_t v22 = v21 + v13 * a1;
        uint64_t v23 = v21 + v14;
        if (v13 * a1 < v14 || v22 >= v23 + v13)
        {
          swift_arrayInitWithTakeFrontToBack(v22, v23, 1LL, v4);
        }

        else if (v13 * a1 != v14)
        {
          swift_arrayInitWithTakeBackToFront(v22, v23);
        }

        uint64_t v24 = *(void *)(a2 + 56);
        uint64_t v25 = type metadata accessor for BeaconScanner.AISLookupState(0LL);
        uint64_t v26 = *(void *)(*(void *)(v25 - 8) + 72LL);
        int64_t v27 = v26 * a1;
        unint64_t result = v24 + v26 * a1;
        int64_t v28 = v26 * v9;
        uint64_t v29 = v24 + v26 * v9;
        unint64_t v30 = v29 + v26;
        if (v27 < v28 || result >= v30)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v29, 1LL, v25);
        }

        else
        {
          a1 = v9;
          if (v27 == v28) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront(result, v29);
        }

        a1 = v9;
LABEL_6:
        unint64_t v9 = (v9 + 1) & v10;
        uint64_t v11 = v41;
      }

      while (((*(void *)(v41 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0);
    }

    uint64_t v32 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v33 = *v32;
    uint64_t v34 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v32 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v34 = *v32;
    uint64_t v33 = (-1LL << a1) - 1;
  }

  *uint64_t v32 = v34 & v33;
  uint64_t v35 = *(void *)(a2 + 16);
  BOOL v36 = __OFSUB__(v35, 1LL);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v37;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

void sub_10005AE44(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            unint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 16 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }

        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *unint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

unint64_t sub_10005AFF4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (_WORD *)(v17 + 2 * v3);
          uint64_t v19 = (_WORD *)(v17 + 2 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *unint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_10005B1C8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          unint64_t v19 = v18 + 24 * v3;
          uint64_t v20 = (__int128 *)(v18 + 24 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= (unint64_t)v20 + 24))
          {
            __int128 v9 = *v20;
            *(void *)(v19 + 16) = *((void *)v20 + 2);
            *(_OWORD *)unint64_t v19 = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_10005B3B0(int64_t a1, uint64_t a2)
{
  uint64_t v37 = type metadata accessor for ShareAttemptTracker.AttemptKey(0LL);
  uint64_t v4 = *(void *)(v37 - 8);
  unint64_t result = __chkstk_darwin(v37);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v36 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v4 + 72);
      uint64_t v38 = v12;
      do
      {
        uint64_t v13 = v8;
        int64_t v14 = v12 * v10;
        sub_10001DC4C( *(void *)(a2 + 48) + v12 * v10,  (uint64_t)v7,  type metadata accessor for ShareAttemptTracker.AttemptKey);
        Hasher.init(_seed:)(v39, *(void *)(a2 + 40));
        Hasher._combine(_:)(dword_1007E7E78[*v7]);
        uint64_t v15 = type metadata accessor for UUID(0LL);
        uint64_t v16 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v39, v15, v16);
        Swift::Int v17 = Hasher._finalize()();
        unint64_t result = sub_100018C68((uint64_t)v7, type metadata accessor for ShareAttemptTracker.AttemptKey);
        Swift::Int v18 = v17 & v11;
        if (a1 >= (uint64_t)v36)
        {
          if (v18 < v36)
          {
            uint64_t v8 = v13;
            uint64_t v12 = v38;
          }

          else
          {
            uint64_t v8 = v13;
            uint64_t v12 = v38;
            if (a1 >= v18) {
              goto LABEL_12;
            }
          }
        }

        else
        {
          uint64_t v8 = v13;
          uint64_t v12 = v38;
          if (v18 >= v36 || a1 >= v18)
          {
LABEL_12:
            uint64_t v19 = *(void *)(a2 + 48);
            unint64_t v20 = v19 + v12 * a1;
            uint64_t v21 = v19 + v14;
            if (v12 * a1 < v14 || v20 >= v21 + v12)
            {
              swift_arrayInitWithTakeFrontToBack(v20, v21, 1LL, v37);
            }

            else if (v12 * a1 != v14)
            {
              swift_arrayInitWithTakeBackToFront(v20, v21);
            }

            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = type metadata accessor for Date(0LL);
            uint64_t v24 = *(void *)(*(void *)(v23 - 8) + 72LL);
            int64_t v25 = v24 * a1;
            unint64_t result = v22 + v24 * a1;
            int64_t v26 = v24 * v10;
            uint64_t v27 = v22 + v24 * v10;
            unint64_t v28 = v27 + v24;
            if (v25 < v26 || result >= v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v27, 1LL, v23);
              a1 = v10;
              uint64_t v12 = v38;
            }

            else
            {
              a1 = v10;
              uint64_t v12 = v38;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront(result, v27);
                a1 = v10;
              }
            }
          }
        }

        unint64_t v10 = (v10 + 1) & v11;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    unint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1LL << a1) - 1;
  }

  else
  {
    unint64_t v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  *unint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1LL);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_10005B6CC(int64_t a1, uint64_t a2)
{
  uint64_t v40 = type metadata accessor for BeaconKeyManager.FileKey(0LL);
  uint64_t v4 = *(void *)(v40 - 8);
  unint64_t result = __chkstk_darwin(v40);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v39 = a2;
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, v8, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v12 = (result + 1) & v11;
      uint64_t v13 = *(void *)(v4 + 72);
      uint64_t v14 = v11;
      a2 = v39;
      while (1)
      {
        uint64_t v15 = v14;
        uint64_t v16 = v8;
        uint64_t v17 = *(void *)(a2 + 48);
        uint64_t v18 = a2;
        uint64_t v19 = v13;
        int64_t v20 = v13 * v10;
        sub_10001DC4C(v17 + v13 * v10, (uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
        Hasher.init(_seed:)(v41, *(void *)(v18 + 40));
        uint64_t v21 = type metadata accessor for UUID(0LL);
        uint64_t v22 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v41, v21, v22);
        if (v7[*(int *)(v40 + 20)])
        {
          if (v7[*(int *)(v40 + 20)] == 1)
          {
            unint64_t v23 = 0xE900000000000079LL;
            uint64_t v24 = 0x7261646E6F636553LL;
          }

          else
          {
            unint64_t v23 = 0xEF736E6F69746163LL;
            uint64_t v24 = 0x6F4C657275636553LL;
          }
        }

        else
        {
          unint64_t v23 = 0xE700000000000000LL;
          uint64_t v24 = 0x7972616D697250LL;
        }

        uint64_t v8 = v16;
        String.hash(into:)(v41, v24, v23);
        swift_bridgeObjectRelease();
        Swift::Int v25 = Hasher._finalize()();
        unint64_t result = sub_100018C68((uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
        uint64_t v14 = v15;
        Swift::Int v26 = v25 & v15;
        if (a1 >= (uint64_t)v12)
        {
          uint64_t v13 = v19;
          if (v26 < v12)
          {
            a2 = v39;
          }

          else
          {
            a2 = v39;
            if (a1 >= v26) {
              goto LABEL_17;
            }
          }
        }

        else
        {
          uint64_t v13 = v19;
          a2 = v39;
          if (v26 >= v12 || a1 >= v26)
          {
LABEL_17:
            uint64_t v27 = *(void *)(a2 + 48);
            unint64_t result = v27 + v13 * a1;
            uint64_t v28 = v27 + v20;
            if (v13 * a1 < v20 || result >= v28 + v13)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v28, 1LL, v40);
            }

            else if (v13 * a1 != v20)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront(result, v28);
            }

            uint64_t v29 = *(void *)(a2 + 56);
            unint64_t v30 = (void *)(v29 + 8 * a1);
            uint64_t v31 = (void *)(v29 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v30 >= v31 + 1))
            {
              *unint64_t v30 = *v31;
              a1 = v10;
            }
          }
        }

        unint64_t v10 = (v10 + 1) & v15;
        if (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
          goto LABEL_28;
        }
      }
    }

    a2 = v39;
LABEL_28:
    uint64_t v32 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v34 = *v32;
    uint64_t v33 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v32 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v33 = *v32;
    uint64_t v34 = (-1LL << a1) - 1;
  }

  *uint64_t v32 = v33 & v34;
  uint64_t v35 = *(void *)(a2 + 16);
  BOOL v36 = __OFSUB__(v35, 1LL);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v37;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_10005BA0C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v37 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v38 + 72);
      BOOL v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v36(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront(result, v25);
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            uint64_t v27 = (_OWORD *)(v26 + 16 * a1);
            uint64_t v28 = (_OWORD *)(v26 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *uint64_t v27 = *v28;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1LL);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

void sub_10005BCAC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_10005BCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10030CF14(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100061CBC();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      swift_release();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return;
    }

LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  type metadata accessor for SPBeaconTaskName(0LL);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDestination);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  type metadata accessor for SPBTRSSIChannel(0LL);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
}

  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt8);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for BeaconObservation.ObservationType);
  __break(1u);
  return result;
}

  type metadata accessor for ShutdownReason(0LL);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
}

  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

  uint64_t v32 = sub_100022898(0LL, a6, a7);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v32);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  char v18 = (Swift::UInt32 *)(*(void *)(v17 + 48) + 8 * a2);
  *char v18 = v5;
  v18[1] = v6;
  uint64_t v19 = *(void *)(v17 + 16);
  uint64_t v20 = __OFADD__(v19, 1LL);
  unint64_t v21 = v19 + 1;
  if (!v20)
  {
    *(void *)(v17 + 16) = v21;
    return result;
  }

  __break(1u);
LABEL_18:
  uint64_t v22 = sub_100004AEC(&qword_1009A0AE0);
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
  return result;
}

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v11;
}

          __break(1u);
          goto LABEL_16;
        }

  v125 = 0LL;
  v126 = 1;
  v96 = v112 & 1;
  LOBYTE(v124) = 1;
  while (1)
  {
    v97 = objc_autoreleasePoolPush();
    sub_100228E50((uint64_t)v122, v33, a2, a4, v119, v120, (uint64_t)&v125, v121, v96, v123, a9, a10, &v124);
    if (v11) {
      break;
    }
    uint64_t v11 = 0LL;
    objc_autoreleasePoolPop(v97);
    if ((v124 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v99 = *((void *)a2 + 3);
      v98 = *((void *)a2 + 4);
      sub_100012ED8(a2, v99);
      v100 = (uint64_t)v116;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v98 + 8) + 8LL) + 32LL))(v99);
      v101 = v123;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v123);
      v129 = (os_log_t)*v101;
      *v101 = 0x8000000000000000LL;
      sub_10005DE98(1, v100, isUniquelyReferenced_nonNull_native);
      *v101 = (uint64_t)v129;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v100, v118);
      (*(void (**)(char *, uint64_t))(v114 + 8))(v113, v115);
      return;
    }
  }

  objc_autoreleasePoolPop(v97);
  __break(1u);
}

    unint64_t v10 = (v16 - 1) & v16;
  }

  while (1)
  {
    uint64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v12 >= v11) {
      goto LABEL_26;
    }
    BOOL v16 = *(void *)(v7 + 8 * v12);
    ++v20;
    if (v16) {
      goto LABEL_15;
    }
  }

  if (v5 == v2 && v6 == v3)
  {
    uint64_t v8 = 1;
    int64_t v3 = v6;
  }

  else
  {
    uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

    swift_bridgeObjectRetain(v52);
    int64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    uint64_t v62 = static os_log_type_t.default.getter(v61);
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v63 = 134217984;
      aBlock = a6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v74, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Unsubscribe removed subscription for %ld subs", v63, 0xCu);
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease();
    }

    v72(0LL);
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    BOOL v33 = type metadata accessor for Logger(0LL);
    sub_10000A720(v33, (uint64_t)qword_100A2AE08);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
    swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v34 = a3;
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    BOOL v36 = static os_log_type_t.error.getter(v35);
    unint64_t v37 = v36;
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v38 = swift_slowAlloc(42LL, -1LL);
      v72 = a5;
      uint64_t v39 = v38;
      uint64_t v40 = (void **)swift_slowAlloc(64LL, -1LL);
      v71 = a6;
      uint64_t v41 = v40;
      aBlock = v40;
      *(_DWORD *)uint64_t v39 = 134218754;
      LODWORD(v70) = v37;
      BOOL v42 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v40);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      v76 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 4, v39 + 12);
      *(_WORD *)(v39 + 12) = 2048;
      v76 = a2[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 14, v39 + 22);
      *(_WORD *)(v39 + 22) = 2080;
      uint64_t v43 = [v34 clientApp];
      int64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      uint64_t v46 = v45;

      v76 = sub_1003F11D4(v44, v46, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 24, v39 + 32);

      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 32) = 2080;
      swift_bridgeObjectRetain(a2);
      uint64_t v48 = Array.description.getter(v47, &type metadata for String);
      int v50 = v49;
      swift_bridgeObjectRelease();
      v76 = sub_1003F11D4(v48, v50, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 34, v39 + 42);
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v35,  (os_log_type_t)v70,  "Error during Unsubscribe %ld for %ld IDs for clientApp %s ids %s",  (uint8_t *)v39,  0x2Au);
      swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      uint64_t v51 = v39;
      a5 = v72;
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    uint64_t v64 = objc_allocWithZone(&OBJC_CLASS___NSError);
    int v65 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    int v66 = [v64 initWithDomain:v65 code:4 userInfo:0];

    uint64_t v67 = v66;
    a5(v66);
  }

    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  unint64_t v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v4 + 32);
  uint64_t v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  sub_100022898(0LL, &qword_10099E2C0, &OBJC_CLASS___CKRecordZoneID_ptr);
  char v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  unint64_t v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    uint64_t v15 = ~v11;
    do
    {
      uint64_t v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      BOOL v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      uint64_t v17 = static NSObject.== infix(_:_:)(v16, a1);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v19 = *v2;
  unint64_t v21 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000CF29C();
    uint64_t v19 = v21;
  }

  uint64_t v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_1003D47C0(v12);
  uint64_t *v2 = v21;
  swift_bridgeObjectRelease();
  return v8;
}

        uint64_t v12 = (v17 - 1) & v17;
        char v13 = __clz(__rbit64(v17)) + (v14 << 6);
        uint64_t v11 = v14;
LABEL_16:
        uint64_t v19 = (unsigned __int8 *)(*(void *)(*a5 + 48LL) + 24 * v13);
        uint64_t v20 = *v19;
        unint64_t v21 = *((void *)v19 + 1);
        uint64_t v22 = *((void *)v19 + 2);
        a5[3] = v11;
        a5[4] = v12;
        Hasher.init(_seed:)(v38, *(void *)(v6 + 40));
        Hasher._combine(_:)(v20);
        swift_bridgeObjectRetain(v22);
        String.hash(into:)(v38, v21, v22);
        char v23 = Hasher._finalize()();
        uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
        uint64_t v25 = v23 & ~v24;
        if (((*(void *)(v9 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v25) & 1) != 0) {
          break;
        }
LABEL_3:
        unint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        uint64_t v6 = v39;
      }

      uint64_t v26 = ~v24;
      BOOL v27 = *(void *)(v6 + 48);
      while (1)
      {
        uint64_t v28 = (unsigned __int8 *)(v27 + 24 * v25);
        if (*v28 == (_DWORD)v20)
        {
          uint64_t v29 = *((void *)v28 + 1);
          uint64_t v30 = *((void *)v28 + 2);
          uint64_t v31 = v29 == v21 && v30 == v22;
          if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v21, v22, 0LL) & 1) != 0) {
            break;
          }
        }

        uint64_t v25 = (v25 + 1) & v26;
        if (((*(void *)(v9 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v25) & 1) == 0) {
          goto LABEL_3;
        }
      }

      unint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      uint64_t v32 = (v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
      BOOL v33 = *(unint64_t *)((char *)v37 + v32);
      *(unint64_t *)((char *)v37 + v32) = v33 & ~(1LL << v25);
      uint64_t v6 = v39;
    }

    while ((v33 & (1LL << v25)) == 0);
    uint64_t v8 = v36 - 1;
    if (__OFSUB__(v36, 1LL))
    {
LABEL_43:
      __break(1u);
      return result;
    }

    if (v36 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

  swift_bridgeObjectRelease();
  uint64_t v28 = v16[2];
  if (!v28) {
    return swift_release();
  }
  uint64_t v29 = (char *)v16 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  unint64_t result = swift_retain();
  uint64_t v31 = 0LL;
  uint64_t v32 = v35;
  while (v32[5])
  {
    BOOL v33 = (uint64_t)&v29[*(void *)(v3 + 72) * v31++];
    swift_retain();
    sub_1001E24DC(v33);
    unint64_t result = swift_release();
    if (v28 == v31) {
      return swift_release_n(v16, 2LL);
    }
  }

  __break(1u);
  return result;
}

        uint64_t v32 = v22;
        goto LABEL_12;
      }

      uint64_t v24 = v3;
      uint64_t v25 = v6;
      v85 = v32 + 2;
    }

  uint64_t v29 = v10[8];
  uint64_t v30 = (void *)(v3 + v29);
  uint64_t v31 = *(void *)(v3 + v29 + 8);
  uint64_t v32 = &v12[v29];
  uint64_t v34 = *(void *)v32;
  BOOL v33 = *((void *)v32 + 1);
  if (!v31)
  {
    if (!v33) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }

  if (!v33)
  {
    uint64_t v46 = 0LL;
    int64_t v44 = 0u;
    uint64_t v45 = 0u;
    goto LABEL_26;
  }

  uint64_t v35 = *v30 == v34 && v31 == v33;
  if (!v35
    && (_stringCompareWithSmolCheck(_:_:expecting:)(*v30, v31, *(void *)v32, *((void *)v32 + 1), 0LL) & 1) == 0)
  {
LABEL_24:
    *((void *)&v45 + 1) = &type metadata for String;
    uint64_t v46 = &protocol witness table for String;
    *(void *)&int64_t v44 = v34;
    *((void *)&v44 + 1) = v33;
LABEL_26:
    swift_bridgeObjectRetain(v33);
    CKRecordKeyValueSetting.subscript.setter(&v44, 0x6D754E656E6F6870LL, 0xEB00000000726562LL, ObjectType);
  }

    BOOL v16 = (v20 - 1) & v20;
  }

  unint64_t result = swift_release();
  __break(1u);
  return result;
}

  *a4 = v17;
  a4[1] = v18;
  return result;
}

    return 0LL;
  }

  if (qword_10099B810 != -1) {
    swift_once(&qword_10099B810, sub_10069374C);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2B188);
  uint64_t v7 = a1;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v9 = static os_log_type_t.error.getter(v8);
  if (!os_log_type_enabled(v8, v9)) {
    goto LABEL_15;
  }
  unint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
  *(_DWORD *)unint64_t v10 = 138412290;
  char v18 = v7;
  uint64_t v12 = v7;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
  *uint64_t v11 = v7;

  char v13 = "Ignoring IDSMessageContext without a fromID: %@";
LABEL_14:
  _os_log_impl((void *)&_mh_execute_header, v8, v9, v13, v10, 0xCu);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099FB20);
  swift_arrayDestroy(v11, 1LL, v17);
  swift_slowDealloc(v11, -1LL, -1LL);
  swift_slowDealloc(v10, -1LL, -1LL);

  return 0LL;
}

  swift_bridgeObjectRelease();
  unint64_t v14 = _swiftEmptyArrayStorage[2];
  if (v14)
  {
    uint64_t v15 = *(void *)(v0 + 176);
    BOOL v16 = *(void *)(v0 + 152);
    BOOL v33 = *(void *)(v0 + 144);
    uint64_t v35 = *(void *)(v0 + 168);
    sub_100032B98(0, v14, 0);
    uint64_t v17 = (char *)_swiftEmptyArrayStorage
        + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v31 = *(void *)(v15 + 72);
    do
    {
      char v18 = *(void *)(v0 + 184);
      uint64_t v19 = *(void *)(v0 + 160);
      sub_10001DC4C((uint64_t)v17, v18, type metadata accessor for SharedBeaconRecord);
      uint64_t v20 = getuid();
      sub_1005E2270(v20);
      unint64_t v21 = v18 + *(int *)(v35 + 20);
      uint64_t v22 = v19 + *(int *)(v33 + 20);
      char v23 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16LL))(v22, v21, v23);
      sub_100018C68(v18, type metadata accessor for SharedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_100032B98(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      uint64_t v25 = _swiftEmptyArrayStorage[2];
      uint64_t v24 = _swiftEmptyArrayStorage[3];
      if (v25 >= v24 >> 1) {
        sub_100032B98(v24 > 1, v25 + 1, 1);
      }
      uint64_t v26 = *(void *)(v0 + 160);
      _swiftEmptyArrayStorage[2] = v25 + 1;
      sub_10002218C( v26,  (uint64_t)_swiftEmptyArrayStorage + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
      + *(void *)(v16 + 72) * v25,
        type metadata accessor for BeaconIdentifier);
      v17 += v31;
      --v14;
    }

    while (v14);
  }

  swift_release(_swiftEmptyArrayStorage);
  *(void *)(v0 + 264) = _swiftEmptyArrayStorage;
  BOOL v27 = swift_task_alloc(dword_1009BCDFC);
  *(void *)(v0 + 272) = v27;
  *(void *)BOOL v27 = v0;
  *(void *)(v27 + 8) = sub_1006D6978;
  uint64_t v28 = *(_BYTE *)(v0 + 296);
  uint64_t v29 = *(void *)(v0 + 136);
  *(void *)(v27 + 24) = *(void *)(v0 + 128);
  *(void *)(v27 + 32) = v29;
  *(_BYTE *)(v27 + 40) = v28;
  *(void *)(v27 + 16) = _swiftEmptyArrayStorage;
  return swift_task_switch(sub_1006D7D98, v29, 0LL);
}

    swift_release(v33);
    sub_1006F6BA4(v87, (uint64_t)v16);
    uint64_t v43 = 0LL;
  }

  else
  {
    uint64_t v43 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v16, v43, 1LL, v41);
  swift_release(v33);
  int64_t v44 = v80;
  sub_10001581C((uint64_t)v16, v80, &qword_10099E830);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v44, 1LL, v41) == 1)
  {
    sub_100015794((uint64_t)v16, &qword_10099E830);
    uint64_t v45 = v44;
LABEL_31:
    sub_100015794(v45, &qword_10099E830);
    uint64_t v54 = 1LL;
    int v53 = v82;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v53, v54, 1LL, v84);
  }

  a2 = v78;
  sub_1006F6BA4(v44, v78);
  uint64_t v46 = v76;
  sub_10001DC4C(a2, v76, type metadata accessor for KeySyncMetadata);
  sub_100013044(v46 + *(int *)(v41 + 24), (uint64_t)v91);
  int v47 = sub_100004AEC(&qword_1009A06D8);
  if (!swift_dynamicCast(&v90, v91, v47, v77, 6LL))
  {
    uint64_t v57 = v71;
    uint64_t v58 = sub_100004AEC(v71);
    int v59 = sub_1000372EC(v70, v57, (uint64_t)&unk_1008197E8);
    a3 = (uint64_t *)swift_allocError(v58, v59, 0LL, 0LL);
    swift_willThrow(a3);
    sub_100018C68(v46, type metadata accessor for KeySyncMetadata);
    if (qword_10099B8B0 == -1)
    {
LABEL_28:
      uint64_t v60 = type metadata accessor for Logger(0LL);
      sub_10000A720(v60, (uint64_t)qword_100A2B318);
      int64_t v61 = v75;
      sub_10001DC4C(a2, v75, type metadata accessor for KeySyncMetadata);
      swift_errorRetain(a3);
      uint64_t v62 = swift_errorRetain(a3);
      uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
      uint64_t v64 = static os_log_type_t.error.getter(v63);
      if (os_log_type_enabled(v63, v64))
      {
        int v65 = (_DWORD *)swift_slowAlloc(32LL, -1LL);
        swift_slowAlloc(8LL, -1LL);
        v91[0] = swift_slowAlloc(64LL, -1LL);
        *int v65 = 136315650;
        __asm { BR              X9 }
      }

      swift_errorRelease(a3);
      swift_errorRelease(a3);
      sub_100018C68(v61, type metadata accessor for KeySyncMetadata);
      swift_errorRelease(a3);
      sub_100018C68(a2, type metadata accessor for KeySyncMetadata);
      uint64_t v45 = (uint64_t)v16;
      goto LABEL_31;
    }

      swift_bridgeObjectRelease();
      goto LABEL_16;
    }

  __break(1u);
  return result;
}

  if (v57 == (char *)1)
  {
    int v47 = OBJC_IVAR____TtC12searchpartyd14CentralManager_fakingClassicPairing;
    uint64_t v48 = *(_BYTE *)(v3 + OBJC_IVAR____TtC12searchpartyd14CentralManager_fakingClassicPairing) | 0x80;
    uint64_t v58 = v27;
    v59[0] = v48;
    uint64_t v49 = v27;
    swift_retain();
    PassthroughSubject.send(_:)(&v58);

    swift_release();
    *(_BYTE *)(v3 + v47) = 0;
  }

  else if (v57)
  {
    int v50 = (os_log_s *)Logger.logObject.getter(v35);
    uint64_t v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v52 = 134217984;
      uint64_t v58 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v52 + 4, v52 + 12);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "centralManager unhandled connectionEvent: %ld ", v52, 0xCu);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
    }
  }

  else
  {
    uint64_t v58 = v27;
    v59[0] = 0;
    swift_retain();
    uint64_t v45 = v27;
    PassthroughSubject.send(_:)(&v58);

    uint64_t v46 = swift_release();
    __chkstk_darwin(v46);
    *(&v53 - 2) = v3;
    *(&v53 - 1) = (uint64_t)v13;
    Lock.callAsFunction<A>(_:)(sub_1007DA240, &v53 - 4, (char *)&type metadata for () + 8);
  }

void sub_10005BE2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

_OWORD *sub_10005BE38(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10030D0D4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        unint64_t v21 = (void *)(v20[7] + 32 * v14);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
        return sub_10006A358(a1, v21);
      }

      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100061E7C();
      goto LABEL_7;
    }

    sub_10004A3BC(v17, a3 & 1);
    unint64_t v23 = sub_10030D0D4(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      uint64_t v20 = *v4;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1000604C4(v14, (uint64_t)v11, a1, v20);
    }
  }

  unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_10005BFB4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100060078(a1, a2, a3, (uint64_t *)&unk_10099E550);
}

uint64_t sub_10005BFC0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_10030D1C4(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t v21 = type metadata accessor for ObservedAdvertisement(0LL);
      return sub_10006A5A4( a1,  v20 + *(void *)(*(void *)(v21 - 8) + 72LL) * v13,  type metadata accessor for ObservedAdvertisement);
    }

    goto LABEL_11;
  }

  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1000624D4();
    goto LABEL_7;
  }

  sub_10004ADA0(v16, a3 & 1);
  unint64_t v23 = sub_10030D1C4(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v13 = v23;
  uint64_t v19 = *v4;
  if ((v17 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10001DC4C(a2, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
  return sub_100060564(v13, (uint64_t)v10, a1, v19);
}

_OWORD *sub_10005C130(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_10030D1D0((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    char v13 = v8;
    uint64_t v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      BOOL v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        uint64_t v16 = (void *)(v15[7] + 32 * v9);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
        return sub_10006A358(a1, v16);
      }

      goto LABEL_11;
    }

    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10006276C();
      goto LABEL_7;
    }

    sub_10004B1F8(v12, a3 & 1);
    unint64_t v18 = sub_10030D1D0((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      BOOL v15 = *v4;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10006061C(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }

  uint64_t v20 = sub_100022898(0LL, (unint64_t *)&qword_10099E400, &OBJC_CLASS___NSObject_ptr);
  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

void sub_10005C260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10030CF14(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100062930();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      swift_bridgeObjectRelease();
      *uint64_t v21 = a1;
      v21[1] = a2;
      return;
    }

_OWORD *sub_10005C3D4(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_10030CFCC(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      BOOL v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
        return sub_10006A358(a1, v17);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100062AE8();
      goto LABEL_7;
    }

    sub_10004B7EC(v13, a3 & 1);
    unint64_t v19 = sub_10030CFCC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10006A5E8(a2, (uint64_t)v21);
      return sub_100060680(v10, (uint64_t)v21, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_10005C50C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005EB9C(a1, a2, a3, &qword_10099E548);
}

void sub_10005C518(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_10005C524(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10030CF14(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_100068E44(a5);
LABEL_7:
    char v20 = (void *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return;
    }

void sub_10005C698(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10030CF14(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100062E64();
LABEL_7:
    char v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      sub_10006A338(*(id *)v21, *(_BYTE *)(v21 + 8));
      *(void *)uint64_t v21 = a1;
      *(_BYTE *)(v21 + 8) = a2;
      return;
    }

uint64_t sub_10005C818(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_10030CEE4(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      BOOL v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = type metadata accessor for Date(0LL);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40LL))( v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v10,  a1,  v18);
      }

      return sub_1000606FC(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100063030();
      goto LABEL_7;
    }

    sub_10004C0CC(v13, a3 & 1);
    uint64_t v20 = sub_10030CEE4(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      BOOL v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_1000606FC(v10, a2, a1, v16);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WildModeObservationState);
  __break(1u);
  return result;
}

void sub_10005C93C(uint64_t a1, void *a2, char a3)
{
}

id sub_10005C960(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_10030D338((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    char v13 = v8;
    uint64_t v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        uint64_t v16 = v15[7];
        uint64_t v17 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0LL);
        return (id)sub_10006A5A4( a1,  v16 + *(void *)(*(void *)(v17 - 8) + 72LL) * v9,  type metadata accessor for CloudKitChangeSet.TombstoneInfo);
      }

      goto LABEL_11;
    }

    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100067550(type metadata accessor for CloudKitChangeSet.TombstoneInfo, &qword_10099E538);
      goto LABEL_7;
    }

    sub_100054F0C(v12, a3 & 1, type metadata accessor for CloudKitChangeSet.TombstoneInfo, &qword_10099E538);
    unint64_t v19 = sub_10030D338((uint64_t)a2);
    if ((v13 & 1) == (v20 & 1))
    {
      unint64_t v9 = v19;
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100060788(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }

  uint64_t v21 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
  id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

uint64_t sub_10005CAC0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005CF30(a1, a2, a3, &qword_10099E508, (void (*)(unint64_t, _BYTE *))sub_100012EC0);
}

void sub_10005CAD4(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10030CF14(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        unint64_t v19 = (void *)(v18[7] + 32 * v12);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
        sub_10006A358(a1, v19);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100063500( &qword_10099E1F8,  (void (*)(unint64_t, _BYTE *))sub_10006A650,  (void (*)(_BYTE *, uint64_t))sub_10006A358);
      goto LABEL_7;
    }

    sub_10004C948( v15,  a4 & 1,  &qword_10099E1F8,  (void (*)(uint64_t, _BYTE *))sub_10006A358,  (void (*)(uint64_t, _BYTE *))sub_10006A650);
    uint64_t v20 = sub_10030CF14(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100060814(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10005CC34(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_10005CC40(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = *(void *)a1;
  HIDWORD(v31) = *(unsigned __int8 *)(a1 + 8);
  uint64_t v32 = *(void *)(a1 + 16);
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v35 = *(void *)(a1 + 40);
  uint64_t v36 = v8;
  uint64_t v37 = *(void *)(a1 + 56);
  LODWORD(v8) = *(unsigned __int8 *)(a1 + 65);
  int v38 = *(unsigned __int8 *)(a1 + 64);
  int v39 = v8;
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v40 = *(void *)(a1 + 72);
  uint64_t v41 = v9;
  uint64_t v42 = *(void *)(a1 + 88);
  int v43 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v14 = (void *)*v3;
  unint64_t v16 = sub_10030D124(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v4;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 104 * v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v23 = v7;
      *(_BYTE *)(v23 + 8) = BYTE4(v31);
      uint64_t v25 = v33;
      *(void *)(v23 + 16) = v32;
      *(void *)(v23 + 24) = v25;
      uint64_t v26 = v35;
      *(void *)(v23 + 32) = v34;
      *(void *)(v23 + 40) = v26;
      uint64_t v27 = v37;
      *(void *)(v23 + 48) = v36;
      *(void *)(v23 + 56) = v27;
      *(_BYTE *)(v23 + 64) = v38;
      *(_BYTE *)(v23 + 65) = v39;
      uint64_t v28 = v41;
      *(void *)(v23 + 72) = v40;
      *(void *)(v23 + 80) = v28;
      *(void *)(v23 + 88) = v42;
      *(_BYTE *)(v23 + 96) = v43;
      return result;
    }

    goto LABEL_11;
  }

  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_100063708();
    goto LABEL_7;
  }

  sub_10004D020(v19, a3 & 1);
  unint64_t v29 = sub_10030D124(a2);
  if ((v20 & 1) != (v30 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }

  unint64_t v16 = v29;
  uint64_t v22 = *v4;
  if ((v20 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  uint64_t v44 = v7;
  char v45 = BYTE4(v31);
  uint64_t v46 = v32;
  uint64_t v47 = v33;
  uint64_t v48 = v34;
  uint64_t v49 = v35;
  uint64_t v50 = v36;
  uint64_t v51 = v37;
  char v52 = v38;
  char v53 = v39;
  uint64_t v54 = v40;
  uint64_t v55 = v41;
  uint64_t v56 = v42;
  char v57 = v43;
  return sub_10006087C(v16, (uint64_t)v13, &v44, v22);
}

uint64_t sub_10005CF24(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005EB9C(a1, a2, a3, &qword_10099E1E8);
}

uint64_t sub_10005CF30( uint64_t a1, uint64_t a2, char a3, uint64_t *a4, void (*a5)(unint64_t, _BYTE *))
{
  uint64_t v27 = a1;
  uint64_t v28 = a5;
  uint64_t v7 = (void **)v5;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v14 = (void *)*v5;
  unint64_t v16 = sub_10030D124(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }

  else
  {
    char v20 = v15;
    uint64_t v21 = v14[3];
    if (v21 >= v19 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        uint64_t v23 = (void *)(v22[7] + 40 * v16);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
        return ((uint64_t (*)(uint64_t, void *))v28)(v27, v23);
      }

      goto LABEL_11;
    }

    if (v21 >= v19 && (a3 & 1) == 0)
    {
      sub_100063A60(a4, (uint64_t (*)(_BYTE *, uint64_t))v28);
      goto LABEL_7;
    }

    sub_10004D514(v19, a3 & 1, a4, v28);
    unint64_t v25 = sub_10030D124(a2);
    if ((v20 & 1) == (v26 & 1))
    {
      unint64_t v16 = v25;
      uint64_t v22 = *v7;
      if ((v20 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
      return sub_1000609A8(v16, (uint64_t)v13, v27, v22, (uint64_t (*)(uint64_t, uint64_t))v28);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
  __break(1u);
  return result;
}

uint64_t sub_10005D0C8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10030D124(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      char v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = v20[7];
        uint64_t v22 = type metadata accessor for Date(0LL);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v14,  a1,  v22);
      }

      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100063CA8();
      goto LABEL_7;
    }

    sub_10004D8CC(v17, a3 & 1);
    unint64_t v24 = sub_10030D124(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      char v20 = *v4;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100060A50(v14, (uint64_t)v11, a1, v20);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_10005D250(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10030D388(a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100063F94();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }

uint64_t sub_10005D3A0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100060078(a1, a2, a3, &qword_10099E2B0);
}

uint64_t sub_10005D3AC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100060078(a1, a2, a3, &qword_10099E360);
}

uint64_t sub_10005D3B8(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10030CFC0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
        return sub_10006A5A4( a1,  v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v12,  type metadata accessor for OwnedBeaconGroup.PairingState);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100064144();
      goto LABEL_7;
    }

    sub_10004E394(v15, a4 & 1);
    uint64_t v22 = sub_10030CFC0(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100060B08(v12, a2, a3, a1, v18);
      return sub_10001736C(a2, a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
  __break(1u);
  return result;
}

unint64_t sub_10005D4FC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10030D124(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      unint64_t result = sub_10006A388(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10006438C();
    goto LABEL_7;
  }

  sub_10004E738(v17, a3 & 1);
  unint64_t v23 = sub_10030D124(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100060B98(v14, (uint64_t)v11, a1, v20);
}

void sub_10005D658(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_10030D3A8(a3, a4, a5);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a6 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_1000645BC();
LABEL_7:
    uint64_t v22 = (void *)*v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 16 * v16;
      sub_100016F9C(*(void *)v23, *(void *)(v23 + 8));
      *(void *)uint64_t v23 = a1;
      *(void *)(v23 + 8) = a2;
      return;
    }

void sub_10005D7DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_10005D7E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10030CF14(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_100064790(a5);
LABEL_7:
    char v20 = (void *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }

uint64_t sub_10005D95C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v11 = (void *)*v3;
  unint64_t v13 = sub_10030D38C(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1000668B0(type metadata accessor for OwnedBeaconRecord, &qword_10099E3A8);
    goto LABEL_7;
  }

  sub_10004F10C(v16, a3 & 1);
  unint64_t v22 = sub_10030D38C(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v13 = v22;
  uint64_t v19 = *v4;
  if ((v17 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10001DC4C(a2, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
  return sub_100060C84(v13, (uint64_t)v10, a1, v19);
}

void sub_10005DAC8(uint64_t a1, uint64_t a2, char a3, __n128 a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = sub_10030D384(a2, a4);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v15 = v10;
  uint64_t v16 = *(void *)(v9 + 24);
  if (v16 >= v14 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v16 >= v14 && (a3 & 1) == 0)
  {
    sub_100064AEC();
LABEL_7:
    char v17 = (void *)*v5;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      uint64_t v18 = v17[7];
      swift_bridgeObjectRelease();
      *(void *)(v18 + 8 * v11) = a1;
      return;
    }

uint64_t sub_10005DC00(char a1, unsigned __int8 a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10030D190(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100064CA0();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v16[7] + v10) = a1 & 1;
      return result;
    }

uint64_t sub_10005DD30(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005EB9C(a1, a2, a3, &qword_10099E3F8);
}

uint64_t sub_10005DD3C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005EB9C(a1, a2, a3, (uint64_t *)&unk_10099E410);
}

uint64_t sub_10005DD48(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_10030D124(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100064E34();
    goto LABEL_7;
  }

  sub_10004FDFC(result, a3 & 1);
  uint64_t result = sub_10030D124(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100060B98(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10005DE98(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_10030D124(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v20[7] + v14) = a1 & 1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000653FC();
    goto LABEL_7;
  }

  sub_100050854(result, a3 & 1);
  uint64_t result = sub_10030D124(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100060D1C(v14, (uint64_t)v11, a1 & 1, v20);
}

uint64_t sub_10005DFEC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005EB9C(a1, a2, a3, &qword_10099E3F0);
}

void sub_10005DFF8(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_10005E004(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100060078(a1, a2, a3, &qword_10099E4A0);
}

uint64_t sub_10005E010(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005EB9C(a1, a2, a3, &qword_10099E4B0);
}

uint64_t sub_10005E01C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_10030D124(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = v20[7];
        uint64_t v22 = sub_100004AEC(&qword_10099E4C8);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v14,  a1,  v22);
      }

      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10006561C(&qword_10099E4C8, &qword_10099E4D0);
      goto LABEL_7;
    }

    sub_100050F88(v17, a3 & 1);
    unint64_t v24 = sub_10030D124(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      uint64_t v20 = *v4;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100060DB4(v14, (uint64_t)v11, a1, v20);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_10005E1B8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005EB9C(a1, a2, a3, &qword_10099E368);
}

uint64_t sub_10005E1C4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005EB9C(a1, a2, a3, &qword_10099E2F0);
}

uint64_t sub_10005E1D0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005EB9C(a1, a2, a3, &qword_10099E320);
}

void sub_10005E1DC(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10030CF14(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000658F8();
LABEL_7:
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v18[7] + v12) = a1 & 1;
      return;
    }

uint64_t sub_10005E334(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005EB9C(a1, a2, a3, &qword_10099E1C0);
}

uint64_t sub_10005E340(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10030D6BC(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100066C9C(&qword_10099E1C8);
LABEL_7:
    char v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }

void sub_10005E47C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10030CF14(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = type metadata accessor for SecureLocationsSubscription(0LL);
        sub_10006A5A4( a1,  v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v12,  type metadata accessor for SecureLocationsSubscription);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100065AAC();
      goto LABEL_7;
    }

    sub_100051964(v15, a4 & 1);
    uint64_t v21 = sub_10030CF14(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100060EB4(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10005E5BC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100060078(a1, a2, a3, &qword_10099E498);
}

uint64_t sub_10005E5C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10030CF14(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        return sub_10006A3A8(a1, v18[7] + 48 * v12);
      }
      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100065D0C();
      goto LABEL_7;
    }

    sub_10005216C(v15, a4 & 1);
    uint64_t v20 = sub_10030CF14(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        return sub_10006A3A8(a1, v18[7] + 48 * v12);
      }
LABEL_11:
      sub_100060F44(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10005E6F0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10030D124(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100065EF4();
    goto LABEL_7;
  }

  sub_100052490(v17, a3 & 1);
  unint64_t v23 = sub_10030D124(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100060B98(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10005E84C(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[2];
  uint64_t v29 = a1[1];
  uint64_t v30 = v8;
  uint64_t v31 = a1[3];
  int v32 = *((unsigned __int8 *)a1 + 32);
  uint64_t v33 = a1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v13 = (void *)*v3;
  unint64_t v15 = sub_10030D124(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      uint64_t v22 = v21[7] + 48 * v15;
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v24 = v29;
      *(void *)uint64_t v22 = v7;
      *(void *)(v22 + 8) = v24;
      uint64_t v25 = v31;
      *(void *)(v22 + 16) = v30;
      *(void *)(v22 + 24) = v25;
      *(_BYTE *)(v22 + 32) = v32;
      *(void *)(v22 + 40) = v33;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100066124();
    goto LABEL_7;
  }

  sub_100052824(v18, a3 & 1);
  unint64_t v26 = sub_10030D124(a2);
  if ((v19 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }

  unint64_t v15 = v26;
  uint64_t v21 = *v4;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  *(void *)&__int128 v34 = v7;
  *((void *)&v34 + 1) = v29;
  uint64_t v35 = v30;
  uint64_t v36 = v31;
  char v37 = v32;
  uint64_t v38 = v33;
  return sub_100060FB0(v15, (uint64_t)v12, &v34, v21);
}

void sub_10005EA2C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for ManagedCBPeripheralManager.KeyType(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_10030D720(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    char v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      uint64_t v20 = v19[7];

      *(void *)(v20 + 8 * v13) = a1;
      return;
    }

    goto LABEL_11;
  }

  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1000663E8();
    goto LABEL_7;
  }

  sub_100052C38(v16, a3 & 1);
  unint64_t v21 = sub_10030D720(a2);
  if ((v17 & 1) != (v22 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }

  unint64_t v13 = v21;
  char v19 = *v4;
  if ((v17 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10001DC4C(a2, (uint64_t)v10, type metadata accessor for ManagedCBPeripheralManager.KeyType);
  sub_1000614A0(v13, (uint64_t)v10, a1, v19, type metadata accessor for ManagedCBPeripheralManager.KeyType);
}

uint64_t sub_10005EB90(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005EB9C(a1, a2, a3, &qword_10099E3C8);
}

uint64_t sub_10005EB9C(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v27 = a1;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_10030D124(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v22 + 8 * v15) = v27;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100068FFC(a4);
    goto LABEL_7;
  }

  sub_10004CC7C(v18, a3 & 1, a4);
  unint64_t v24 = sub_10030D124(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }

  unint64_t v15 = v24;
  unint64_t v21 = *v6;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  return sub_100060B98(v15, (uint64_t)v12, v27, v21);
}

void sub_10005ED0C(uint64_t a1, uint64_t a2, char a3, __n128 a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = sub_10030D384(a2, a4);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v15 = v10;
  uint64_t v16 = *(void *)(v9 + 24);
  if (v16 >= v14 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v16 >= v14 && (a3 & 1) == 0)
  {
    sub_100066E40();
LABEL_7:
    BOOL v17 = (void *)*v5;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      uint64_t v18 = v17[7];

      *(void *)(v18 + 8 * v11) = a1;
      return;
    }

uint64_t sub_10005EE44(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10030D124(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = v20[7];
        uint64_t v22 = sub_100004AEC(&qword_10099E380);
        return sub_10006A4F0(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v14);
      }

      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1000672A4();
      goto LABEL_7;
    }

    sub_10005477C(v17, a3 & 1);
    unint64_t v24 = sub_10030D124(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      uint64_t v20 = *v4;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100061138(v14, (uint64_t)v11, a1, v20);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_10005EFC8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10030D84C(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100067778();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      uint64_t result = sub_100016F9C(*(void *)v21, *(void *)(v21 + 8));
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return result;
    }

uint64_t sub_10005F140(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100060078(a1, a2, a3, &qword_10099E358);
}

uint64_t sub_10005F14C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005F160(a1, a2, a3, type metadata accessor for SafeLocation, &qword_10099E350);
}

uint64_t sub_10005F160(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void), uint64_t *a5)
{
  BOOL v28 = a5;
  uint64_t v29 = a1;
  uint64_t v7 = (void **)v5;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = (void *)*v5;
  unint64_t v16 = sub_10030D124(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t v24 = a4(0LL);
      return sub_10006A5A4(v29, v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v16, a4);
    }

    goto LABEL_11;
  }

  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_100066FE0(a4, v28);
    goto LABEL_7;
  }

  sub_100054388(v19, a3 & 1, a4, v28);
  unint64_t v26 = sub_10030D124(a2);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }

  unint64_t v16 = v26;
  uint64_t v22 = *v7;
  if ((v20 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_100061080(v16, (uint64_t)v13, v29, v22, a4);
}

uint64_t sub_10005F2E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_100004AEC(&qword_10099E338);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10030DAD8(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for BeaconScanner.AISLookupState(0LL);
      return sub_10006A5A4( a1,  v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v14,  type metadata accessor for BeaconScanner.AISLookupState);
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10006795C();
    goto LABEL_7;
  }

  sub_100055580(v17, a3 & 1);
  unint64_t v24 = sub_10030DAD8(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = v24;
  char v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1000611EC(v14, (uint64_t)v11, a1, v20);
}

void sub_10005F45C(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_10005F468(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100060078(a1, a2, a3, &qword_10099E2C8);
}

void sub_10005F474(uint64_t a1, void *a2, char a3)
{
}

void sub_10005F498( uint64_t a1, void *a2, char a3, uint64_t (*a4)(void *), uint64_t *a5, unint64_t *a6, void *a7)
{
  uint64_t v12 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = a4(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    sub_100067DE8(a5);
LABEL_7:
    uint64_t v23 = (void *)*v12;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      uint64_t v24 = v23[7];

      *(void *)(v24 + 8 * v17) = a1;
      return;
    }

id sub_10005F620(uint64_t a1, char a2, void *a3, char a4)
{
  return sub_10005F658( a1,  a2,  a3,  a4,  &qword_10099E520,  (uint64_t (*)(uint64_t, uint64_t))sub_10006A598,  (uint64_t (*)(void, void))sub_10006A58C);
}

id sub_10005F63C(uint64_t a1, char a2, void *a3, char a4)
{
  return sub_10005F658( a1,  a2,  a3,  a4,  &qword_10099E518,  (uint64_t (*)(uint64_t, uint64_t))sub_10006A580,  (uint64_t (*)(void, void))sub_10006A574);
}

id sub_10005F658( uint64_t a1, char a2, void *a3, char a4, uint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t (*a7)(void, void))
{
  uint64_t v11 = (void **)v7;
  uint64_t v15 = (void *)*v7;
  unint64_t v17 = sub_10030D338((uint64_t)a3);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_13;
  }

  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= v20 && (a4 & 1) != 0) {
    goto LABEL_9;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    sub_100067F84(a5, a6);
    goto LABEL_9;
  }

  sub_100055F24(v20, a4 & 1, a5, (void (*)(uint64_t, uint64_t))a6);
  unint64_t v23 = sub_10030D338((uint64_t)a3);
  if ((v21 & 1) != (v24 & 1))
  {
LABEL_13:
    uint64_t v30 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v30);
    __break(1u);
    return result;
  }

  unint64_t v17 = v23;
LABEL_9:
  int v25 = a2 & 1;
  char v26 = *v11;
  if ((v21 & 1) != 0)
  {
    BOOL v27 = v25 != 0;
    uint64_t v28 = v26[7] + 16 * v17;
    id result = (id)a7(*(void *)v28, *(unsigned __int8 *)(v28 + 8));
    *(void *)uint64_t v28 = a1;
    *(_BYTE *)(v28 + 8) = v27;
  }

  else
  {
    sub_1000612A8(v17, (uint64_t)a3, a1, v25, v26);
    return a3;
  }

  return result;
}

uint64_t sub_10005F7CC(uint64_t a1, uint64_t a2, Swift::UInt32 a3, Swift::UInt a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_10030CE78(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= result && (a5 & 1) != 0)
    {
LABEL_7:
      uint64_t v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        char v21 = (uint64_t *)(v20[7] + 16 * v14);
        *char v21 = a1;
        v21[1] = a2;
        return result;
      }

      return sub_1000612F8(v14, a3, a4, a1, a2, v20);
    }

    if (v19 >= result && (a5 & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100068650();
      goto LABEL_7;
    }

    sub_1000567A4(result, a5 & 1);
    uint64_t result = sub_10030CE78(a3, a4);
    if ((v18 & 1) == (v22 & 1))
    {
      unint64_t v14 = result;
      uint64_t v20 = *v6;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_1000612F8(v14, a3, a4, a1, a2, v20);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingStats.MessageKey);
  __break(1u);
  return result;
}

uint64_t sub_10005F8FC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100060078(a1, a2, a3, &qword_10099E2A0);
}

void sub_10005F908(__int16 a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10030CF14(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_WORD *)(v18[7] + 2 * v12) = a1;
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000687EC();
      goto LABEL_7;
    }

    sub_100056A9C(v15, a4 & 1);
    uint64_t v19 = sub_10030CF14(a2, a3);
    if ((v16 & 1) == (v20 & 1))
    {
      unint64_t v12 = v19;
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10006134C(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10005FA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_10030CF14(a4, a5);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a6 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_100068998();
LABEL_7:
    char v22 = (void *)*v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      unint64_t v23 = (void *)(v22[7] + 24 * v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *unint64_t v23 = a1;
      v23[1] = a2;
      v23[2] = a3;
      return;
    }

uint64_t sub_10005FBB4(uint64_t a1, char *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for ShareAttemptTracker.AttemptKey(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v11 = (void *)*v3;
  unint64_t v13 = sub_10030DC24(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    char v17 = v12;
    uint64_t v18 = v11[3];
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v19 = *v4;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        uint64_t v20 = v19[7];
        uint64_t v21 = type metadata accessor for Date(0LL);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 40LL))( v20 + *(void *)(*(void *)(v21 - 8) + 72LL) * v13,  a1,  v21);
      }

      goto LABEL_11;
    }

    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_100068B7C( (uint64_t (*)(void))&type metadata accessor for Date,  type metadata accessor for ShareAttemptTracker.AttemptKey,  &qword_10099E280);
      goto LABEL_7;
    }

    sub_1000570F8(v16, a3 & 1);
    unint64_t v23 = sub_10030DC24(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      unint64_t v13 = v23;
      uint64_t v19 = *v4;
      if ((v17 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10001DC4C((uint64_t)a2, (uint64_t)v10, type metadata accessor for ShareAttemptTracker.AttemptKey);
      return sub_1000613E8(v13, (uint64_t)v10, a1, v19);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_10005FD54(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_10005FD60(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005FD78(a1, a2, a3, &qword_10099E1E0);
}

uint64_t sub_10005FD6C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10005FD78(a1, a2, a3, &qword_10099E1D8);
}

uint64_t sub_10005FD78(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v10 = type metadata accessor for BeaconKeyManager.FileKey(0LL);
  __chkstk_darwin(v10);
  char v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_10030D930(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_release(*(void *)(v22 + 8 * v15));
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_1000693EC(type metadata accessor for BeaconKeyManager.FileKey, a4);
    goto LABEL_7;
  }

  sub_100057B98(v18, a3 & 1, a4);
  unint64_t v24 = sub_10030D930(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }

  unint64_t v15 = v24;
  uint64_t v21 = *v6;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10001DC4C(a2, (uint64_t)v12, type metadata accessor for BeaconKeyManager.FileKey);
  return sub_1000614A0(v15, (uint64_t)v12, a1, v21, type metadata accessor for BeaconKeyManager.FileKey);
}

void sub_10005FEF0(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_10005FEFC(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v26 = a1;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_10030D124(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      uint64_t v22 = v21[7];

      *(void *)(v22 + 8 * v15) = v26;
      return;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100069630(a4);
    goto LABEL_7;
  }

  sub_100050BF0(v18, a3 & 1, a4);
  unint64_t v23 = sub_10030D124(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return;
  }

  unint64_t v15 = v23;
  uint64_t v21 = *v6;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  sub_100060B98(v15, (uint64_t)v12, v26, v21);
}

uint64_t sub_10006006C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100060078(a1, a2, a3, &qword_10099E4B8);
}

uint64_t sub_100060078(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v27 = a1;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_10030D124(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_release(*(void *)(v22 + 8 * v15));
      *(void *)(v22 + 8 * v15) = v27;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100069858(a4);
    goto LABEL_7;
  }

  sub_10004DFFC(v18, a3 & 1, a4);
  unint64_t v24 = sub_10030D124(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }

  unint64_t v15 = v24;
  uint64_t v21 = *v6;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  return sub_100060B98(v15, (uint64_t)v12, v27, v21);
}

_OWORD *sub_1000601E8(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_10030D388(a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    char v13 = v8;
    uint64_t v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        uint64_t v16 = (void *)(v15[7] + 32 * v9);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
        return sub_10006A358(a1, v16);
      }

      goto LABEL_11;
    }

    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100069A88();
      goto LABEL_7;
    }

    sub_100057FB8(v12, a3 & 1);
    uint64_t v18 = sub_10030D388(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      unint64_t v15 = *v4;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10006061C(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }

  type metadata accessor for CBConnectionEventMatchingOption(0LL);
  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_100060308(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v27 = a2;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_10030D124(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      uint64_t v22 = v21[7] + 16 * v15;
      uint64_t result = swift_release();
      *(_BYTE *)uint64_t v22 = a1 & 1;
      *(void *)(v22 + 8) = v27;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_100069C4C();
    goto LABEL_7;
  }

  sub_1000582F0(v18, a4 & 1);
  unint64_t v24 = sub_10030D124(a3);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }

  unint64_t v15 = v24;
  uint64_t v21 = *v5;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100061538(v15, (uint64_t)v12, a1 & 1, v27, v21);
}

unint64_t sub_10006047C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *sub_1000604C4(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CodingUserInfoKey(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t result = sub_10006A358(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100060564(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for BeaconIdentifier(0LL);
  sub_10002218C(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1, type metadata accessor for BeaconIdentifier);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t result = sub_10002218C( a3,  v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  type metadata accessor for ObservedAdvertisement);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

_OWORD *sub_10006061C(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_10006A358(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

_OWORD *sub_100060680(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_10006A358(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_1000606FC(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))( v7 + *(void *)(*(void *)(v8 - 8) + 72LL) * a1,  a3,  v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_100060788(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0LL);
  uint64_t result = sub_10002218C( a3,  v7 + *(void *)(*(void *)(v8 - 8) + 72LL) * a1,  type metadata accessor for CloudKitChangeSet.TombstoneInfo);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

_OWORD *sub_100060814(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  __int128 v6 = (void *)(a5[6] + 16 * a1);
  *__int128 v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10006A358(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_10006087C(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = *a3;
  char v9 = *((_BYTE *)a3 + 8);
  uint64_t v10 = a3[7];
  uint64_t v25 = a3[6];
  char v11 = *((_BYTE *)a3 + 64);
  char v12 = *((_BYTE *)a3 + 65);
  __int128 v24 = *(_OWORD *)(a3 + 9);
  uint64_t v23 = a3[11];
  char v22 = *((_BYTE *)a3 + 96);
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v13 = a4[6];
  uint64_t v14 = type metadata accessor for UUID(0LL);
  __int128 v20 = *((_OWORD *)a3 + 2);
  __int128 v21 = *((_OWORD *)a3 + 1);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))( v13 + *(void *)(*(void *)(v14 - 8) + 72LL) * a1,  a2,  v14);
  uint64_t v16 = a4[7] + 104 * a1;
  *(void *)uint64_t v16 = v8;
  *(_BYTE *)(v16 + 8) = v9;
  *(_OWORD *)(v16 + 16) = v21;
  *(_OWORD *)(v16 + 32) = v20;
  *(void *)(v16 + 48) = v25;
  *(void *)(v16 + 56) = v10;
  *(_BYTE *)(v16 + 64) = v11;
  *(_BYTE *)(v16 + 65) = v12;
  *(_OWORD *)(v16 + 72) = v24;
  *(void *)(v16 + 88) = v23;
  *(_BYTE *)(v16 + 96) = v22;
  uint64_t v17 = a4[2];
  BOOL v18 = __OFADD__(v17, 1LL);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    a4[2] = v19;
  }
  return result;
}

uint64_t sub_1000609A8( unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a2,  v11);
  uint64_t result = a5(a3, a4[7] + 40 * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100060A50(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a3,  v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100060B08(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t result = sub_10002218C( a4,  v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  type metadata accessor for OwnedBeaconGroup.PairingState);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_100060B98(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_100060C30( unint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1LL << result;
  uint64_t v7 = a7[6] + 24 * result;
  *(_BYTE *)uint64_t v7 = a2;
  *(void *)(v7 + 8) = a3;
  *(void *)(v7 + 16) = a4;
  uint64_t v8 = (void *)(a7[7] + 16 * result);
  *uint64_t v8 = a5;
  v8[1] = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

uint64_t sub_100060C84(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t result = sub_10002218C( a2,  v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  type metadata accessor for OwnedBeaconRecord);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100060D1C(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(_BYTE *)(a4[7] + a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100060DB4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_100004AEC(&qword_10099E4C8);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a3,  v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

unint64_t sub_100060E70(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_100060EB4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for SecureLocationsSubscription(0LL);
  uint64_t result = sub_10002218C( a4,  v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  type metadata accessor for SecureLocationsSubscription);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_100060F44(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10006A420(a4, a5[7] + 48 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_100060FB0(unint64_t a1, uint64_t a2, __int128 *a3, void *a4)
{
  __int128 v18 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  uint64_t v8 = *((void *)a3 + 3);
  char v9 = *((_BYTE *)a3 + 32);
  uint64_t v10 = *((void *)a3 + 5);
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * a1,  a2,  v12);
  uint64_t v14 = a4[7] + 48 * a1;
  *(_OWORD *)uint64_t v14 = v18;
  *(void *)(v14 + 16) = v7;
  *(void *)(v14 + 24) = v8;
  *(_BYTE *)(v14 + 32) = v9;
  *(void *)(v14 + 40) = v10;
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

uint64_t sub_100061080( unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a2,  v11);
  uint64_t v12 = a4[7];
  uint64_t v13 = a5(0LL);
  uint64_t result = sub_10002218C(a3, v12 + *(void *)(*(void *)(v13 - 8) + 72LL) * a1, a5);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

uint64_t sub_100061138(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_100004AEC(&qword_10099E380);
  uint64_t result = sub_10006A4A8(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_1000611EC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_100004AEC(&qword_10099E338);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for BeaconScanner.AISLookupState(0LL);
  uint64_t result = sub_10002218C( a3,  v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  type metadata accessor for BeaconScanner.AISLookupState);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

unint64_t sub_1000612A8(unint64_t result, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = a5[7] + 16 * result;
  *(void *)uint64_t v5 = a3;
  *(_BYTE *)(v5 + 8) = a4 & 1;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_1000612F8( unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = a6[6] + 16 * result;
  *(_DWORD *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t sub_10006134C(unint64_t result, uint64_t a2, uint64_t a3, __int16 a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(_WORD *)(a5[7] + 2 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_100061394( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1LL << result;
  BOOL v7 = (void *)(a7[6] + 16 * result);
  *BOOL v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (void *)(a7[7] + 24 * result);
  *uint64_t v8 = a4;
  v8[1] = a5;
  v8[2] = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

uint64_t sub_1000613E8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for ShareAttemptTracker.AttemptKey(0LL);
  sub_10002218C( a2,  v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  type metadata accessor for ShareAttemptTracker.AttemptKey);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a3,  v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_1000614A0( unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = a5(0LL);
  uint64_t result = sub_10002218C(a2, v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1, a5);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100061538(unint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a2,  v11);
  uint64_t v13 = a5[7] + 16 * a1;
  *(_BYTE *)uint64_t v13 = a3;
  *(void *)(v13 + 8) = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

id sub_1000615DC()
{
  v1 = v0;
  sub_100004AEC(&qword_10099E218);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

void *sub_10006177C()
{
  v1 = v0;
  sub_100004AEC(&qword_10099E568);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

void *sub_10006191C()
{
  v1 = v0;
  sub_100004AEC(&qword_10099E170);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release(v2);
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

id sub_100061B04()
{
  return sub_100064790(&qword_10099E270);
}

void *sub_100061B10()
{
  v1 = v0;
  sub_100004AEC(&qword_10099E1D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

void *sub_100061CBC()
{
  v1 = v0;
  sub_100004AEC(&qword_10099E458);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_100061E7C()
{
  v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC((uint64_t *)&unk_10099E580);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release(v6);
LABEL_28:
    uint64_t *v1 = v8;
    return result;
  }

  int64_t v24 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v25 = v6 + 64;
  int64_t v12 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v21 >= v16) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v12);
      if (!v22) {
        break;
      }
    }

void *sub_1000620B8()
{
  uint64_t v37 = type metadata accessor for UUID(0LL);
  uint64_t v1 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v36 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E240);
  uint64_t v33 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v39 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v31 = v39;
    uint64_t v30 = v33;
LABEL_28:
    *uint64_t v30 = v31;
    return result;
  }

  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v39;
  }

  uint64_t v34 = v3 + 64;
  int64_t v10 = 0LL;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v38 = v3;
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v35 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v15 = v36;
  uint64_t v14 = v37;
  uint64_t v16 = v39;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v10 << 6);
      uint64_t v19 = v38;
      goto LABEL_12;
    }

    int64_t v27 = v10 + 1;
    uint64_t v19 = v38;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v27 >= v35) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v27);
    ++v10;
    if (!v28)
    {
      int64_t v10 = v27 + 1;
      if (v27 + 1 >= v35) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v10);
      if (!v28) {
        break;
      }
    }

void *sub_10006232C()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E238);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

void *sub_1000624D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v28 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E560);
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    id result = (void *)swift_release(v8);
LABEL_25:
    uint64_t *v1 = v10;
    return result;
  }

  unint64_t v25 = v1;
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v26 = v8 + 64;
  int64_t v27 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v21 >= v27) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v26 + 8 * v13);
      if (!v22) {
        break;
      }
    }

LABEL_27:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain(v18);
  }

  unint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 24 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + v16;
    unint64_t v19 = *(void *)(v17 + 8);
    unint64_t v18 = *(void *)(v17 + 16);
    unint64_t v20 = *(void *)(v4 + 48) + v16;
    *(_BYTE *)unint64_t v20 = *(_BYTE *)v17;
    *(void *)(v20 + 8) = v19;
    *(void *)(v20 + 16) = v18;
    swift_bridgeObjectRetain(v18);
  }

  int64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 160 * v15;
    unint64_t v17 = (_OWORD *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[2];
    unint64_t v19 = v17[3];
    unint64_t v20 = v17[5];
    v28[4] = v17[4];
    v28[5] = v20;
    v28[3] = v19;
    int64_t v21 = v17[6];
    unint64_t v22 = v17[7];
    int64_t v23 = v17[9];
    v28[8] = v17[8];
    v28[9] = v23;
    v28[6] = v21;
    v28[7] = v22;
    uint64_t v24 = v17[1];
    v28[0] = *v17;
    v28[1] = v24;
    v28[2] = v18;
    memmove((void *)(*(void *)(v4 + 48) + v16), v17, 0xA0uLL);
    id result = sub_1000D4DD8(v28);
  }

  int64_t v27 = v25 + 3;
  if (v27 >= v13) {
    goto LABEL_28;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }

  unint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    swift_bridgeObjectRetain(v17);
  }

  unint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    int64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }

  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }

    unint64_t v19 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    int64_t v23 = *(void *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v23, v5);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(v11 + 48) + v23,  v8,  v5);
  }

  uint64_t v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    id result = (void *)swift_release(v9);
    uint64_t v4 = v28;
    goto LABEL_30;
  }

  unint64_t v25 = *(void *)(v13 + 8 * v26);
  if (v25)
  {
    unint64_t v16 = v26;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v16 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v16 >= v20) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v13 + 8 * v16);
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }

    int64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
  }

  unint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    uint64_t v10 = v19;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }

    unint64_t v20 = (v26 - 1) & v26;
    int64_t v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    uint64_t v24 = *(void *)(v7 + 72) * v23;
    sub_10001DC4C(*(void *)(v10 + 48) + v24, (uint64_t)v9, a1);
    id result = (void *)sub_10002218C((uint64_t)v9, *(void *)(v12 + 48) + v24, a1);
  }

  int64_t v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v5 = v29;
    goto LABEL_30;
  }

  uint64_t v26 = *(void *)(v14 + 8 * v27);
  if (v26)
  {
    unint64_t v17 = v27;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v17 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v17 >= v21) {
      goto LABEL_28;
    }
    uint64_t v26 = *(void *)(v14 + 8 * v17);
    ++v27;
    if (v26) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }

  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    int64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_BYTE *)(*(void *)(v5 + 48) + v16) = *(_BYTE *)(*(void *)(v3 + 48) + v16);
  }

  unint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    uint64_t v10 = v19;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }

    uint64_t v11 = (v29 - 1) & v29;
    uint64_t v14 = __clz(__rbit64(v29)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = 88 * v14;
    unint64_t v16 = *(void *)(v1 + 48) + v15;
    unint64_t v17 = *(void *)(v16 + 8);
    unint64_t v18 = *(void *)(v16 + 16);
    unint64_t v19 = *(void *)(v16 + 24);
    unint64_t v20 = *(_BYTE *)(v16 + 32);
    int64_t v21 = *(void *)(v16 + 40);
    unint64_t v22 = *(void *)(v16 + 80);
    int64_t v23 = *(void *)(v3 + 48) + v15;
    uint64_t v24 = *(_OWORD *)(v16 + 48);
    unint64_t v25 = *(_OWORD *)(v16 + 64);
    *(void *)int64_t v23 = *(void *)v16;
    *(void *)(v23 + 8) = v17;
    *(void *)(v23 + 16) = v18;
    *(void *)(v23 + 24) = v19;
    *(_BYTE *)(v23 + 32) = v20;
    *(void *)(v23 + 40) = v21;
    *(_OWORD *)(v23 + 48) = v24;
    *(_OWORD *)(v23 + 64) = v25;
    *(void *)(v23 + 80) = v22;
    uint64_t v26 = v24;
    int64_t v27 = v25;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
  }

  uint64_t v30 = v28 + 3;
  if (v30 >= v12) {
    goto LABEL_28;
  }
  uint64_t v29 = *(void *)(v5 + 8 * v30);
  if (v29)
  {
    uint64_t v8 = v30;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v8 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_28;
    }
    uint64_t v29 = *(void *)(v5 + 8 * v8);
    ++v30;
    if (v29) {
      goto LABEL_27;
    }
  }

    int64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    id result = (void *)swift_retain();
  }

  unint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    uint64_t v10 = v19;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    int64_t v13 = (v23 - 1) & v23;
    unint64_t v16 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 24 * v16;
    unint64_t v18 = *(void *)(v3 + 48) + v17;
    unint64_t v19 = *(void *)v18;
    unint64_t v20 = *(void *)(v18 + 8);
    LODWORD(v18) = *(_DWORD *)(v18 + 16);
    int64_t v21 = *(void *)(v5 + 48) + v17;
    *(void *)int64_t v21 = v19;
    *(void *)(v21 + 8) = v20;
    *(_DWORD *)(v21 + 16) = v18;
    id result = (void *)sub_10001736C(v19, v20);
  }

  uint64_t v24 = v22 + 3;
  if (v24 >= v14) {
    goto LABEL_28;
  }
  int64_t v23 = *(void *)(v7 + 8 * v24);
  if (v23)
  {
    uint64_t v10 = v24;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    int64_t v23 = *(void *)(v7 + 8 * v10);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }

    swift_release(v35);
  }

  else
  {
    swift_bridgeObjectRelease();
    char v52 = (uint64_t)_swiftEmptyArrayStorage;
  }

  int v66 = v94;
  int v65 = (uint64_t)v95;
  uint64_t v67 = v93;
  uint64_t v68 = (uint64_t)v92;
  objc_autoreleasePoolPop(v91);
  sub_1000F0A44(v52, v68);
  swift_bridgeObjectRelease();
  int64_t v69 = v109;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v68, 1LL, v109) == 1)
  {
    sub_100015794(v68, (uint64_t *)&unk_1009A5990);
  }

  else
  {
    sub_100015794(v45, (uint64_t *)&unk_10099D720);
    v70 = v68;
    v71 = v90;
    sub_10002218C(v70, v90, type metadata accessor for BeaconObservation);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v45, v71 + *(int *)(v69 + 20), v66);
    v89(v45, 0LL, 1LL, v66);
    v72 = *(unsigned __int8 *)(v71 + *(int *)(v69 + 24));
    sub_100018C68(v71, type metadata accessor for BeaconObservation);
    if ((v72 - 6) <= 5)
    {
      v73 = qword_1007EB850[(char)(v72 - 6)];
      goto LABEL_33;
    }
  }

  v73 = -1LL;
LABEL_33:
  v74 = [objc_allocWithZone(SPFirmwareUpdateStateResult) init];
  [v74 setState:v73];
  sub_10001581C(v45, v65, (uint64_t *)&unk_10099D720);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v65, 1LL, v66) == 1)
  {
    isa = 0LL;
  }

  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
  }

  objc_msgSend(v74, "setStateDate:", isa, v87, v88);

  v77 = v97;
  v76 = v98;
  v78 = v99;
  (*(void (**)(char *, unint64_t, uint64_t))(v98 + 16))(v97, a1, v99);
  v79 = *(unsigned __int8 *)(v76 + 80);
  v80 = (v79 + 24) & ~v79;
  v81 = (v96 + v80 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  v82 = swift_allocObject(&unk_10093D380, v81 + 16, v79 | 7);
  *(void *)(v82 + 16) = v74;
  (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v82 + v80, v77, v78);
  v83 = (void *)(v82 + v81);
  v84 = v101;
  *v83 = v100;
  v83[1] = v84;
  v85 = v74;
  swift_retain();
  sub_10028D3F4(a1, (void (*)(void))sub_1000DE2B8, v82);

  swift_release(v82);
  return sub_100015794(v45, (uint64_t *)&unk_10099D720);
}

  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    uint64_t v11 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
LABEL_28:
    sub_10006A5E8(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v30);
    v17.isa = AnyHashable._bridgeToObjectiveC()().isa;
    sub_10016C77C((uint64_t)v30);
    unint64_t v18 = objc_opt_self(&OBJC_CLASS___IDSAccount);
    unint64_t v19 = swift_dynamicCastObjCClass(v17.isa, v18);
    if (!v19)
    {
      swift_release_n(v3, 2LL);

      sub_1000A6F30(a1);
      return 0LL;
    }

    unint64_t v20 = v19;
    id result = NSObject._rawHashValue(seed:)(v3[5]);
    int64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v22 = result & ~v21;
    int64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      uint64_t v10 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          int64_t v23 = 0LL;
        }
        v24 |= v26;
        int64_t v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      uint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    *(void *)(v3[6] + 8 * v10) = v20;
    ++v3[2];
    uint64_t v9 = v13;
    uint64_t v6 = v11;
  }

  unint64_t v16 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_39:
    swift_release();
    sub_1000A6F30(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v29 + 8 * v16);
  if (v15)
  {
    int64_t v13 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v13 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_39;
    }
    uint64_t v15 = *(void *)(v29 + 8 * v13);
    ++v16;
    if (v15) {
      goto LABEL_27;
    }
  }

    __break(1u);
    goto LABEL_28;
  }

  if (v27 < v21)
  {
    __break(1u);
    goto LABEL_34;
  }

  if (v21 < 0) {
    goto LABEL_51;
  }
  uint64_t v28 = *(void *)(v10 + 72);
  uint64_t v29 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)) + v28 * v26;
  uint64_t v30 = v59 + v28 * a3;
  if (v30 >= v29 + v28 * v21 || v29 >= v30 + v28 * v21)
  {
    swift_arrayInitWithCopy(v29);
    if (!v21)
    {
LABEL_22:
      uint64_t v5 = v19;
LABEL_23:
      if (v21 != v27) {
        return swift_unknownObjectRelease(v60);
      }
LABEL_28:
      int64_t v21 = *(void *)(a1 + 16);
      uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v50(v18, 1LL, 1LL, v9);
      a1 = v55;
      sub_10001581C((uint64_t)v18, v55, &qword_1009A4880);
      uint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      if (v54(a1, 1LL, v9) == 1)
      {
LABEL_29:
        sub_100015794((uint64_t)v18, &qword_1009A4880);
        swift_unknownObjectRelease(v60);
        return sub_100015794(a1, &qword_1009A4880);
      }

      do
      {
LABEL_34:
        sub_100015794(a1, &qword_1009A4880);
        int64_t v35 = *v4;
        uint64_t v36 = *(void *)(*v4 + 24);
        if ((uint64_t)(v36 >> 1) < v21 + 1)
        {
          uint64_t v37 = v5;
          uint64_t v47 = sub_1004C67B0(v36 > 1, v21 + 1, 1, v35);
          char *v4 = v47;
          char v53 = v47;
          uint64_t v49 = *(void *)(v47 + 24) >> 1;
        }

        else
        {
          uint64_t v49 = v36 >> 1;
          char v53 = v35;
          uint64_t v37 = v5;
        }

        uint64_t v38 = *(unsigned __int8 *)(v10 + 80);
        uint64_t v39 = v58;
        sub_10001581C((uint64_t)v18, v58, &qword_1009A4880);
        if (v54(v39, 1LL, v9) == 1)
        {
          uint64_t v40 = v58;
LABEL_38:
          sub_100015794(v40, &qword_1009A4880);
          uint64_t v34 = v21;
          uint64_t v5 = v37;
        }

        else
        {
          uint64_t v51 = v53 + ((v38 + 32) & ~v38);
          uint64_t v41 = v49;
          if (v21 > v49) {
            uint64_t v41 = v21;
          }
          char v52 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
          char v53 = v41;
          uint64_t v42 = v57;
          uint64_t v40 = v58;
          while (1)
          {
            uint64_t v44 = v40;
            char v45 = v52;
            v52((uint64_t)v42, (char *)v44, v9);
            if (v53 == v21) {
              break;
            }
            sub_100015794((uint64_t)v18, &qword_1009A4880);
            v45(v51 + *(void *)(v10 + 72) * v21, v42, v9);
            if (v37 == v19)
            {
              int v43 = 1LL;
              uint64_t v37 = v19;
            }

            else
            {
              uint64_t v46 = sub_1007C12B4(v61, v37, v60, v59, a3, v56);
              (*(void (**)(char *))(v10 + 16))(v18);
              ((void (*)(uint64_t *, void))v46)(v61, 0LL);
              unint64_t v20 = __OFADD__(v37++, 1LL);
              if (v20) {
                goto LABEL_50;
              }
              int v43 = 0LL;
              uint64_t v42 = v57;
            }

            v50(v18, v43, 1LL, v9);
            uint64_t v40 = v58;
            sub_10001581C((uint64_t)v18, v58, &qword_1009A4880);
            ++v21;
            if (v54(v40, 1LL, v9) == 1) {
              goto LABEL_38;
            }
          }

          (*(void (**)(char *, uint64_t))(v10 + 8))(v42, v9);
          uint64_t v34 = v53;
          int64_t v21 = v53;
          uint64_t v5 = v37;
        }

        *(void *)(*v4 + 16) = v34;
        a1 = v55;
        sub_10001581C((uint64_t)v18, v55, &qword_1009A4880);
      }

      while (v54(a1, 1LL, v9) != 1);
      goto LABEL_29;
    }

    uint64_t v32 = *(void *)(a1 + 16);
    unint64_t v20 = __OFADD__(v32, v21);
    uint64_t v33 = v32 + v21;
    if (!v20)
    {
      *(void *)(a1 + 16) = v33;
      goto LABEL_22;
    }

    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_52;
  }

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_52:
  __break(1u);
  return result;
}

    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage)) {
      sub_100768688((uint64_t)_swiftEmptyArrayStorage);
    }
    goto LABEL_25;
  }

  uint64_t v15 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v38, v15);
  unint64_t v16 = swift_release();
  if ((v38 & 1) == 0)
  {
    uint64_t v30 = static os_log_type_t.default.getter(v16);
    if (qword_10099B180 != -1) {
      swift_once(&qword_10099B180, sub_100189C90);
    }
    uint64_t v31 = qword_100A2A2A8;
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v33 = swift_allocObject(v32, 72LL, 7LL);
    *(_OWORD *)(v33 + 16) = xmmword_1007E67D0;
    LOBYTE(v38) = 0;
    uint64_t v34 = String.init<A>(describing:)(&v38, &type metadata for PersistentConnectionObserver.PersistentConnectionPolicy);
    uint64_t v36 = v35;
    *(void *)(v33 + 56) = &type metadata for String;
    *(void *)(v33 + 64) = sub_1000226F4();
    *(void *)(v33 + 32) = v34;
    *(void *)(v33 + 40) = v36;
    os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  v31,  "Persisting connections disabled by policy %@.",  45LL,  2LL,  v33);
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }

  unint64_t v17 = sub_100506C30();
  swift_retain();
  unint64_t v18 = sub_1001AA234((uint64_t)v17, a1);
  swift_bridgeObjectRelease();
  unint64_t v19 = swift_release();
  unint64_t v20 = static os_log_type_t.default.getter(v19);
  if (qword_10099B180 != -1) {
    swift_once(&qword_10099B180, sub_100189C90);
  }
  int64_t v21 = qword_100A2A2A8;
  unint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
  int64_t v23 = swift_allocObject(v22, 72LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_1007E67D0;
  uint64_t v24 = sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
  swift_bridgeObjectRetain(v18);
  uint64_t v26 = Array.description.getter(v25, v24);
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 64) = sub_1000226F4();
  *(void *)(v23 + 32) = v26;
  *(void *)(v23 + 40) = v28;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Persisting connections to beacons: %@.", 38LL, 2LL, v23);
  swift_bridgeObjectRelease();
  sub_1006F16D4((uint64_t)v18);
  swift_bridgeObjectRelease();
  sub_1001B33FC();
LABEL_26:
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
  swift_bridgeObjectRelease();
}

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_28:
  __break(1u);
}

    unint64_t v7 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    uint64_t v11 = v18;
LABEL_28:
    unint64_t v20 = (void *)(*(void *)(a1 + 48) + 16 * v15);
    int64_t v21 = v20[1];
    *(void *)&uint64_t v29 = *v20;
    *((void *)&v29 + 1) = v21;
    swift_bridgeObjectRetain(v21);
    swift_dynamicCast(v32, &v29, &type metadata for String, &type metadata for AnyHashable, 7LL);
    uint64_t v29 = v32[0];
    uint64_t v30 = v32[1];
    uint64_t v31 = v33;
    id result = AnyHashable._rawHashValue(seed:)(v3[5]);
    unint64_t v22 = -1LL << *((_BYTE *)v3 + 32);
    int64_t v23 = result & ~v22;
    uint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)&v9[8 * (v23 >> 6)]) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1LL << v23) & ~*(void *)&v9[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        int64_t v27 = v24 == v26;
        if (v24 == v26) {
          uint64_t v24 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)&v9[8 * v24];
      }

      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)&v9[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v12;
    int64_t v13 = v3[6] + 40 * v12;
    *(_OWORD *)int64_t v13 = v29;
    *(_OWORD *)(v13 + 16) = v30;
    *(void *)(v13 + 32) = v31;
    ++v3[2];
  }

  unint64_t v19 = v11 + 5;
  if (v11 + 5 >= v8)
  {
LABEL_37:
    swift_release();
    sub_1000A6F30(a1);
    return (uint64_t)v3;
  }

  unint64_t v17 = *(void *)(v4 + 8 * v19);
  if (v17)
  {
    unint64_t v18 = v11 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v18 >= v8) {
      goto LABEL_37;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_27;
    }
  }

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(v11, 1LL, 1LL, v5, v16);
LABEL_28:
      swift_release();
      return;
    }

    uint64_t v6 = (v15 - 1) & v15;
    int64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    unint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    unint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    sub_10006A538(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v43);
    *(void *)&uint64_t v42 = v20;
    *((void *)&v42 + 1) = v19;
    v40[2] = v42;
    v41[0] = v43[0];
    v41[1] = v43[1];
    v31[0] = v20;
    v31[1] = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v32, v31, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_10006A358(v41, v40);
    int64_t v21 = sub_100004AEC(&qword_1009A3500);
    swift_dynamicCast(v35, v40, v21, (char *)&type metadata for Any + 8, 7LL);
    uint64_t v36 = v32;
    uint64_t v37 = v33;
    uint64_t v38 = v34;
    sub_10006A358(v35, v39);
    uint64_t v32 = v36;
    uint64_t v33 = v37;
    uint64_t v34 = v38;
    sub_10006A358(v39, v40);
    sub_10006A358(v40, &v36);
    id result = AnyHashable._rawHashValue(seed:)(v3[5]);
    unint64_t v22 = -1LL << *((_BYTE *)v3 + 32);
    int64_t v23 = result & ~v22;
    uint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)&v7[8 * (v23 >> 6)]) != 0)
    {
      uint64_t v10 = __clz(__rbit64((-1LL << v23) & ~*(void *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        int64_t v27 = v24 == v26;
        if (v24 == v26) {
          uint64_t v24 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)&v7[8 * v24];
      }

      while (v28 == -1);
      uint64_t v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v32;
    *(_OWORD *)(v11 + 16) = v33;
    *(void *)(v11 + 32) = v34;
    id result = (uint64_t)sub_10006A358(&v36, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  unint64_t v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release();
    sub_1000A6F30(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v30 + 8 * v17);
  if (v15)
  {
    unint64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v30 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

          __break(1u);
          return result;
        }
      }
    }
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  swift_release();
  int64_t v27 = *(void *)(v0 + 112);
  uint64_t v28 = *(void *)(v0 + 120);
  uint64_t v29 = *(void *)(v0 + 96);
  uint64_t v36 = *(void *)(v0 + 88);
  uint64_t v37 = *(void *)(v0 + 80);
  uint64_t v38 = *(void *)(v0 + 72);
  uint64_t v30 = *(void *)(v0 + 40);
  uint64_t v31 = *(void *)(v0 + 16);
  uint64_t v32 = *(void *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  uint64_t v33 = (void *)swift_allocObject(&unk_10095ABF8, 40LL, 7LL);
  v33[2] = v32;
  v33[3] = v30;
  v33[4] = v31;
  swift_bridgeObjectRetain(v32);
  uint64_t v34 = swift_retain();
  UUID.init()(v34);
  int64_t v35 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v29,  &unk_1009AE648,  v33,  &unk_1009AE650,  0LL);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v35);
  swift_release();
  swift_task_dealloc(v28);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

    swift_release();
  }

  sub_100044AC8(a1, 0);
  swift_release();
  if (v23 == v18) {
    goto LABEL_32;
  }
  uint64_t v55 = v23;
  if (qword_10099B528 != -1) {
    goto LABEL_37;
  }
LABEL_29:
  uint64_t v39 = type metadata accessor for Logger(0LL);
  uint64_t v40 = sub_10000A720(v39, (uint64_t)qword_100A2AC98);
  uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  uint64_t v42 = static os_log_type_t.error.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    int v43 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
    v53[1] = a3;
    uint64_t v54 = v11;
    uint64_t v44 = v43;
    *int v43 = 134218240;
    aBlock = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v61, v43 + 1, v43 + 3);
    *((_WORD *)v44 + 6) = 2048;
    int64_t v23 = v55;
    aBlock = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v61, (char *)v44 + 14, (char *)v44 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "DUPLICATE BEACONS DETECTED -- beaconCount: %ld stableIdentifierCount: %ld",  (uint8_t *)v44,  0x16u);
    uint64_t v11 = v54;
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {

    int64_t v23 = v55;
  }

  uint64_t v36 = v10[9];
  uint64_t v37 = (void *)(v3 + v36);
  uint64_t v38 = *(void *)(v3 + v36 + 8);
  uint64_t v39 = &v12[v36];
  uint64_t v41 = *(void *)v39;
  uint64_t v40 = *((void *)v39 + 1);
  if (v38)
  {
    if (!v40)
    {
      uint64_t v46 = 0LL;
      uint64_t v44 = 0u;
      char v45 = 0u;
      goto LABEL_38;
    }

    uint64_t v42 = *v37 == v41 && v38 == v40;
    if (v42
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*v37, v38, *(void *)v39, *((void *)v39 + 1), 0LL) & 1) != 0)
    {
      goto LABEL_34;
    }
  }

  else if (!v40)
  {
LABEL_34:
    sub_100018C68((uint64_t)v12, type metadata accessor for LostModeRecord);
    return swift_unknownObjectRelease(v14);
  }

  *((void *)&v45 + 1) = &type metadata for String;
  uint64_t v46 = &protocol witness table for String;
  *(void *)&uint64_t v44 = v41;
  *((void *)&v44 + 1) = v40;
LABEL_38:
  swift_bridgeObjectRetain(v40);
  CKRecordKeyValueSetting.subscript.setter(&v44, 0x6567617373656DLL, 0xE700000000000000LL, ObjectType);
  swift_unknownObjectRelease(v14);
  return sub_100018C68((uint64_t)v12, type metadata accessor for LostModeRecord);
}

  id result = sub_100016F9C(*(void *)&v26[v27[13]], *(void *)&v26[v27[13] + 8]);
  if ((v24 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_16:
  id result = swift_bridgeObjectRelease();
  if ((v33 & 1) == 0) {
    return result;
  }
  return swift_bridgeObjectRelease();
}

  uint64_t v28 = *(void *)(v0 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  __break(1u);
  return result;
}

          if ((a1 & 0x80) != 0) {
            goto LABEL_37;
          }
          goto LABEL_28;
        }

            if ((a1 & 0x100) != 0) {
              goto LABEL_37;
            }
            goto LABEL_28;
          }

  __break(1u);
  return result;
}

id sub_10006276C()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E408);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void sub_100062930()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E210);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_100062AE8()
{
  uint64_t v1 = v0;
  sub_100004AEC((uint64_t *)&unk_10099E570);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void *sub_100062CCC()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E390);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

void *sub_100062E58()
{
  return sub_100068FFC(&qword_10099E548);
}

void *sub_100062E64()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E178);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_100063030()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E4A8);
  char v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *char v23 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v25) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }

void *sub_10006324C()
{
  return sub_100066FE0(type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, &qword_10099E490);
}

void *sub_100063260()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void **)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v25 - v6;
  sub_100004AEC(&qword_10099E300);
  unint64_t v26 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    id result = (void *)swift_release(v8);
    *unint64_t v26 = v10;
    return result;
  }

  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  uint64_t v27 = v8 + 64;
  int64_t v13 = 0LL;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }

    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v22 >= v28) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }

void sub_1000634BC()
{
}

void sub_1000634D8()
{
}

void sub_1000634E4()
{
}

void sub_100063500( uint64_t *a1, void (*a2)(unint64_t, _BYTE *), void (*a3)(_BYTE *, uint64_t))
{
  uint64_t v5 = v3;
  sub_100004AEC(a1);
  uint64_t v6 = *v3;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v3);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    swift_release();
LABEL_28:
    *uint64_t v5 = v8;
    return;
  }

  int64_t v28 = v5;
  uint64_t v9 = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v29 = v6 + 64;
  int64_t v12 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v16) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v29 + 8 * v25);
    ++v12;
    if (!v26)
    {
      int64_t v12 = v25 + 1;
      if (v25 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v29 + 8 * v12);
      if (!v26) {
        break;
      }
    }

void *sub_1000636F0()
{
  return sub_100068FFC(&qword_10099E260);
}

id sub_1000636FC()
{
  return sub_100069630((uint64_t *)&unk_10099E440);
}

void sub_100063708()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v46 = *(void *)(v1 - 8);
  uint64_t v47 = v1;
  __chkstk_darwin(v1);
  char v45 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E438);
  uint64_t v42 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v49 = v4;
  if (!v5)
  {
    swift_release();
    uint64_t v41 = v49;
    uint64_t v40 = v42;
LABEL_28:
    *uint64_t v40 = v41;
    return;
  }

  uint64_t v6 = v4;
  uint64_t v7 = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  int v43 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, v43, 8 * v8);
    uint64_t v6 = v49;
  }

  int64_t v10 = 0LL;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  uint64_t v48 = v3;
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v44 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v15 = v45;
  uint64_t v14 = v46;
  while (1)
  {
    if (v13)
    {
      uint64_t v50 = (v13 - 1) & v13;
      int64_t v51 = v10;
      unint64_t v16 = __clz(__rbit64(v13)) | (v10 << 6);
      uint64_t v17 = v48;
      goto LABEL_12;
    }

    int64_t v36 = v10 + 1;
    uint64_t v17 = v48;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v36 >= v44) {
      goto LABEL_26;
    }
    unint64_t v37 = *((void *)v43 + v36);
    int64_t v38 = v10 + 1;
    if (!v37)
    {
      int64_t v38 = v36 + 1;
      if (v36 + 1 >= v44) {
        goto LABEL_26;
      }
      unint64_t v37 = *((void *)v43 + v38);
      if (!v37) {
        break;
      }
    }

void *sub_100063A54()
{
  return sub_100068FFC(&qword_10099E1E8);
}

void *sub_100063A60(uint64_t *a1, uint64_t (*a2)(_BYTE *, uint64_t))
{
  uint64_t v29 = a2;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(a1);
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release(v9);
LABEL_28:
    uint64_t *v4 = v11;
    return result;
  }

  int v27 = v4;
  id result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  uint64_t v28 = v9 + 64;
  int64_t v15 = 0LL;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v19) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v24 + 1;
      if (v24 + 1 >= v19) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v15);
      if (!v25) {
        break;
      }
    }

char *sub_100063CA8()
{
  uint64_t v41 = type metadata accessor for Date(0LL);
  uint64_t v37 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = type metadata accessor for UUID(0LL);
  uint64_t v36 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  int64_t v38 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E420);
  uint64_t v33 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v43 = v4;
  if (!v5)
  {
    id result = (char *)swift_release();
    uint64_t v32 = v43;
    uint64_t v31 = v33;
LABEL_25:
    *uint64_t v31 = v32;
    return result;
  }

  uint64_t v6 = v4;
  id result = (char *)(v4 + 64);
  unint64_t v8 = (char *)(v3 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  uint64_t v34 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    id result = (char *)memmove(result, v8, 8 * v9);
    uint64_t v6 = v43;
  }

  int64_t v10 = 0LL;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v42 = v3;
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v35 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = v36;
  uint64_t v15 = v37;
  uint64_t v17 = v38;
  uint64_t v16 = v39;
  uint64_t v18 = v41;
  uint64_t v19 = v43;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      int64_t v44 = v10;
      unint64_t v21 = v20 | (v10 << 6);
      uint64_t v22 = v42;
      goto LABEL_9;
    }

    int64_t v27 = v10 + 1;
    uint64_t v22 = v42;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v27 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v27);
    int64_t v29 = v10 + 1;
    if (!v28)
    {
      int64_t v29 = v27 + 1;
      if (v27 + 1 >= v35) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v29);
      if (!v28) {
        break;
      }
    }

id sub_100063F88()
{
  return sub_100064790(&qword_10099E370);
}

id sub_100063F94()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E2E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_100064138()
{
  return sub_100069858(&qword_10099E360);
}

void *sub_100064144()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E318);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v7;
    return result;
  }

  int64_t v26 = v1;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v27 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      int64_t v11 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v11);
      if (!v24) {
        break;
      }
    }

void *sub_10006438C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E208);
  unint64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *unint64_t v24 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_1000645BC()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E3B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

id sub_100064790(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100004AEC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v3);
    uint64_t *v2 = v5;
    return result;
  }

  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

void *sub_100064938()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E3D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void sub_100064AEC()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E4E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

void *sub_100064C8C()
{
  return sub_1000693EC(type metadata accessor for BeaconKeyServiceBuilder.FileKey, &qword_10099E180);
}

void *sub_100064CA0()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E430);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

void *sub_100064E28()
{
  return sub_100068FFC(&qword_10099E3F8);
}

void *sub_100064E34()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E428);
  int64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *int64_t v24 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v25 = v5 + 64;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_100065058()
{
  uint64_t v27 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v27 = v3;
    return result;
  }

  id result = (void *)(v2 + 64);
  uint64_t v5 = v1 + 64;
  unint64_t v6 = (unint64_t)((1LL << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  int64_t v8 = 0LL;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v24 >= v12) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v5 + 8 * v24);
    ++v8;
    if (!v25)
    {
      int64_t v8 = v24 + 1;
      if (v24 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v5 + 8 * v8);
      if (!v25) {
        break;
      }
    }

void *sub_100065244()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E3E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void *sub_1000653FC()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E3E8);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *int64_t v23 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v25) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }

char *sub_10006561C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v44 = sub_100004AEC(a1);
  uint64_t v40 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v43 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(a2);
  uint64_t v36 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v46 = v7;
  if (!v8)
  {
    id result = (char *)swift_release();
    uint64_t v35 = v46;
    uint64_t v34 = v36;
LABEL_25:
    *uint64_t v34 = v35;
    return result;
  }

  uint64_t v9 = v7;
  id result = (char *)(v7 + 64);
  int64_t v11 = (char *)(v6 + 64);
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  uint64_t v37 = v6 + 64;
  if (v9 != v6 || result >= &v11[8 * v12])
  {
    id result = (char *)memmove(result, v11, 8 * v12);
    uint64_t v9 = v46;
  }

  int64_t v13 = 0LL;
  *(void *)(v9 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v45 = v6;
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 64);
  int64_t v38 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v17 = v39;
  uint64_t v18 = v40;
  unint64_t v20 = v41;
  uint64_t v19 = v42;
  uint64_t v21 = v44;
  uint64_t v22 = v46;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v47 = v13;
      unint64_t v24 = v23 | (v13 << 6);
      uint64_t v25 = v45;
      goto LABEL_9;
    }

    int64_t v30 = v13 + 1;
    uint64_t v25 = v45;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v30 >= v38) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v37 + 8 * v30);
    int64_t v32 = v13 + 1;
    if (!v31)
    {
      int64_t v32 = v30 + 1;
      if (v30 + 1 >= v38) {
        goto LABEL_23;
      }
      unint64_t v31 = *(void *)(v37 + 8 * v32);
      if (!v31) {
        break;
      }
    }

void sub_1000658F8()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E460);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_100065AA0()
{
  return sub_100066C9C(&qword_10099E1C8);
}

void sub_100065AAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SecureLocationsSubscription(0LL);
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E470);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    swift_release();
LABEL_28:
    uint64_t *v1 = v7;
    return;
  }

  unint64_t v26 = v1;
  uint64_t v8 = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v27 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      int64_t v11 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v11);
      if (!v24) {
        break;
      }
    }

void *sub_100065CF0()
{
  return sub_100068B7C( (uint64_t (*)(void))&type metadata accessor for URL,  type metadata accessor for BeaconIdentifier,  &qword_10099E188);
}

void *sub_100065D0C()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E278);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release(v2);
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }

  int64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_100065EF4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E478);
  int64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *int64_t v24 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_100066124()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v41 = *(void *)(v1 - 8);
  uint64_t v42 = v1;
  __chkstk_darwin(v1);
  uint64_t v40 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E328);
  uint64_t v37 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v44 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v36 = v44;
    uint64_t v35 = v37;
LABEL_28:
    *uint64_t v35 = v36;
    return result;
  }

  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  int64_t v38 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, v38, 8 * v8);
    uint64_t v6 = v44;
  }

  int64_t v10 = 0LL;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v43 = v3;
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v39 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v15 = v40;
  uint64_t v14 = v41;
  uint64_t v16 = v42;
  uint64_t v17 = v44;
  while (1)
  {
    if (v13)
    {
      uint64_t v45 = (v13 - 1) & v13;
      int64_t v46 = v10;
      unint64_t v18 = __clz(__rbit64(v13)) | (v10 << 6);
      uint64_t v19 = v43;
      goto LABEL_12;
    }

    int64_t v31 = v10 + 1;
    uint64_t v19 = v43;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v31 >= v39) {
      goto LABEL_26;
    }
    unint64_t v32 = *((void *)v38 + v31);
    int64_t v33 = v10 + 1;
    if (!v32)
    {
      int64_t v33 = v10 + 2;
      if (v10 + 2 >= v39) {
        goto LABEL_26;
      }
      unint64_t v32 = *((void *)v38 + v33);
      if (!v32) {
        break;
      }
    }

id sub_1000663E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ManagedCBPeripheralManager.KeyType(0LL);
  uint64_t v27 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E190);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (id)swift_release();
LABEL_28:
    uint64_t *v1 = v7;
    return result;
  }

  uint64_t v25 = v1;
  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v26 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v21 >= v15) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v26 + 8 * v11);
      if (!v22) {
        break;
      }
    }

void sub_10006661C()
{
  uint64_t v1 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0LL);
  uint64_t v36 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E1B8);
  unint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v38 = v4;
  if (!v5)
  {
    swift_release();
    uint64_t v30 = v38;
    uint64_t v29 = v32;
LABEL_28:
    *uint64_t v29 = v30;
    return;
  }

  uint64_t v6 = v4;
  uint64_t v7 = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v38;
  }

  uint64_t v33 = v3 + 64;
  int64_t v10 = 0LL;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  uint64_t v37 = v3;
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v34 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = (uint64_t)v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      uint64_t v17 = v37;
      goto LABEL_12;
    }

    int64_t v26 = v10 + 1;
    uint64_t v17 = v37;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v26 >= v34) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v10;
    if (!v27)
    {
      int64_t v10 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v10);
      if (!v27) {
        break;
      }
    }

void sub_10006689C()
{
}

void sub_1000668B0(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = a1(0LL);
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v28 - v7;
  sub_100004AEC(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    swift_release();
LABEL_28:
    *uint64_t v5 = v11;
    return;
  }

  uint64_t v29 = v5;
  uint64_t v12 = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  uint64_t v30 = v9 + 64;
  int64_t v15 = 0LL;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v19) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v30 + 8 * v25);
    ++v15;
    if (!v26)
    {
      int64_t v15 = v25 + 1;
      if (v25 + 1 >= v19) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v30 + 8 * v15);
      if (!v26) {
        break;
      }
    }

id sub_100066AE0()
{
  uint64_t v1 = v0;
  sub_100004AEC((uint64_t *)&unk_10099E198);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_100066C90()
{
  return sub_100066C9C(&qword_10099E268);
}

void *sub_100066C9C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100004AEC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v3);
    uint64_t *v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v7 + 8 * v10);
      if (!v19) {
        break;
      }
    }

void *sub_100066E34()
{
  return sub_100068FFC(&qword_10099E3C0);
}

id sub_100066E40()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E3A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

void *sub_100066FE0(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v41 = a1;
  uint64_t v4 = a1(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v39 = (char *)&v34 - v5;
  uint64_t v38 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(a2);
  int64_t v34 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v43 = v9;
  if (!v10)
  {
    id result = (void *)swift_release(v8);
    uint64_t v33 = v43;
    unint64_t v32 = v34;
LABEL_25:
    *unint64_t v32 = v33;
    return result;
  }

  uint64_t v11 = v9;
  id result = (void *)(v9 + 64);
  unint64_t v13 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    uint64_t v11 = v43;
  }

  int64_t v14 = 0LL;
  *(void *)(v11 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v42 = v8;
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v35 = v8 + 64;
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  unint64_t v19 = v37;
  uint64_t v18 = v38;
  uint64_t v20 = (uint64_t)v39;
  for (i = v43; ; id result = (void *)sub_10002218C(v20, *(void *)(i + 56) + v28, v27))
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      uint64_t v24 = v42;
      goto LABEL_9;
    }

    int64_t v29 = v14 + 1;
    uint64_t v24 = v42;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v29 >= v36) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v35 + 8 * v29);
    ++v14;
    if (!v30)
    {
      int64_t v14 = v29 + 1;
      if (v29 + 1 >= v36) {
        goto LABEL_23;
      }
      unint64_t v30 = *(void *)(v35 + 8 * v14);
      if (!v30) {
        break;
      }
    }

void *sub_1000672A4()
{
  uint64_t v1 = sub_100004AEC(&qword_10099E380);
  uint64_t v27 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E388);
  uint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v24 = v10;
    return result;
  }

  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v25 = v8 + 64;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }

void sub_100067528()
{
}

id sub_10006753C()
{
  return sub_100067550(type metadata accessor for BeaconStoreFileRecord, &qword_10099E528);
}

id sub_100067550(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = a1(0LL);
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - v7;
  sub_100004AEC(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (id)swift_release(v9);
LABEL_28:
    *uint64_t v5 = v11;
    return result;
  }

  int64_t v29 = v5;
  id result = (id)(v10 + 64);
  unint64_t v13 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  uint64_t v30 = v9 + 64;
  int64_t v15 = 0LL;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v19) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v30 + 8 * v25);
    ++v15;
    if (!v26)
    {
      int64_t v15 = v25 + 1;
      if (v25 + 1 >= v19) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v30 + 8 * v15);
      if (!v26) {
        break;
      }
    }

void *sub_100067778()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E4D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

void *sub_10006793C()
{
  return sub_100069858(&qword_10099E358);
}

void *sub_100067948()
{
  return sub_100066FE0(type metadata accessor for SafeLocation, &qword_10099E350);
}

void *sub_10006795C()
{
  uint64_t v1 = type metadata accessor for BeaconScanner.AISLookupState(0LL);
  uint64_t v36 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = sub_100004AEC(&qword_10099E338);
  uint64_t v3 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E340);
  uint64_t v30 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v38 = v6;
  if (!v7)
  {
    id result = (void *)swift_release();
    uint64_t v28 = v38;
    int64_t v27 = v30;
LABEL_25:
    *int64_t v27 = v28;
    return result;
  }

  uint64_t v8 = v6;
  id result = (void *)(v6 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    uint64_t v8 = v38;
  }

  int64_t v11 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  uint64_t v37 = v5;
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v31 = v5 + 64;
  int64_t v32 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v33;
  uint64_t v15 = v34;
  uint64_t v17 = (uint64_t)v35;
  for (uint64_t i = v38;
        ;
        id result = (void *)sub_10002218C( v17,  *(void *)(i + 56) + v23,  type metadata accessor for BeaconScanner.AISLookupState))
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v11 << 6);
      uint64_t v21 = v37;
      goto LABEL_9;
    }

    int64_t v24 = v11 + 1;
    uint64_t v21 = v37;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v11);
      if (!v25) {
        break;
      }
    }

void *sub_100067C28()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E2D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

id sub_100067DE8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100004AEC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v3);
    uint64_t *v2 = v5;
    return result;
  }

  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }

void *sub_100067F84(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = v2;
  sub_100004AEC(a1);
  uint64_t v5 = *v2;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v5);
    uint64_t *v4 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v12 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v27 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v27 >= v16) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v9 + 8 * v27);
    ++v12;
    if (!v28)
    {
      int64_t v12 = v27 + 1;
      if (v27 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v9 + 8 * v12);
      if (!v28) {
        break;
      }
    }

void sub_100068148()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E2A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }

void sub_1000682FC()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E2E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void sub_10006849C()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E3B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void *sub_100068650()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E1F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void sub_1000687EC()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E290);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void sub_100068998()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E288);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_100068B7C(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v42 = a1(0LL);
  uint64_t v6 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v36 - v7;
  uint64_t v43 = a2;
  uint64_t v8 = a2(0LL);
  uint64_t v40 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int64_t v39 = (char *)&v36 - v9;
  sub_100004AEC(a3);
  uint64_t v36 = v3;
  uint64_t v10 = *v3;
  uint64_t v11 = static _DictionaryStorage.copy(original:)(*v3);
  uint64_t v12 = *(void *)(v10 + 16);
  uint64_t v45 = v11;
  if (!v12)
  {
    id result = (void *)swift_release();
    uint64_t v35 = v45;
    uint64_t v34 = v36;
LABEL_25:
    *uint64_t v34 = v35;
    return result;
  }

  uint64_t v13 = v11;
  id result = (void *)(v11 + 64);
  unint64_t v15 = (unint64_t)((1LL << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v10 || (unint64_t)result >= v10 + 64 + 8 * v15)
  {
    id result = memmove(result, (const void *)(v10 + 64), 8 * v15);
    uint64_t v13 = v45;
  }

  int64_t v16 = 0LL;
  *(void *)(v13 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v44 = v10;
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 64);
  uint64_t v37 = v10 + 64;
  int64_t v38 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v20 = (uint64_t)v39;
  uint64_t v22 = v42;
  uint64_t v21 = v43;
  for (uint64_t i = v45;
        ;
        id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(i + 56) + v28,  v30,  v22))
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v16 << 6);
      uint64_t v26 = v44;
      goto LABEL_9;
    }

    int64_t v31 = v16 + 1;
    uint64_t v26 = v44;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v31 >= v38) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v37 + 8 * v31);
    ++v16;
    if (!v32)
    {
      int64_t v16 = v31 + 1;
      if (v31 + 1 >= v38) {
        goto LABEL_23;
      }
      unint64_t v32 = *(void *)(v37 + 8 * v16);
      if (!v32) {
        break;
      }
    }

void sub_100068E44(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100004AEC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    uint64_t *v2 = v5;
    return;
  }

  uint64_t v6 = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

void *sub_100068FF0()
{
  return sub_100068FFC(&qword_10099E258);
}

void *sub_100068FFC(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(a1);
  uint64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v7);
    *uint64_t v26 = v9;
    return result;
  }

  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  uint64_t v27 = v7 + 64;
  int64_t v13 = 0LL;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }

void sub_10006922C()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E250);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

void *sub_1000693EC(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = a1(0LL);
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - v7;
  sub_100004AEC(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release(v9);
LABEL_28:
    *uint64_t v5 = v11;
    return result;
  }

  unint64_t v29 = v5;
  id result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  uint64_t v30 = v9 + 64;
  int64_t v15 = 0LL;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v19) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v30 + 8 * v25);
    ++v15;
    if (!v26)
    {
      int64_t v15 = v25 + 1;
      if (v25 + 1 >= v19) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v30 + 8 * v15);
      if (!v26) {
        break;
      }
    }

void *sub_10006961C()
{
  return sub_1000693EC(type metadata accessor for BeaconKeyManager.FileKey, &qword_10099E1D8);
}

id sub_100069630(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(a1);
  unint64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *unint64_t v26 = v9;
    return result;
  }

  id result = (id)(v8 + 64);
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v27 = v7 + 64;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }

void *sub_100069858(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(a1);
  unint64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v7);
    *unint64_t v26 = v9;
    return result;
  }

  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  uint64_t v27 = v7 + 64;
  int64_t v13 = 0LL;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }

id sub_100069A88()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_10099E248);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void *sub_100069C4C()
{
  uint64_t v36 = type metadata accessor for UUID(0LL);
  uint64_t v1 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_10099E228);
  unint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v38 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v30 = v38;
    unint64_t v29 = v32;
LABEL_28:
    *unint64_t v29 = v30;
    return result;
  }

  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  uint64_t v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, v34, 8 * v8);
    uint64_t v6 = v38;
  }

  int64_t v10 = 0LL;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v37 = v3;
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v33 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v15 = v35;
  uint64_t v14 = v36;
  uint64_t v16 = v38;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v10 << 6);
      uint64_t v19 = v37;
      goto LABEL_12;
    }

    int64_t v26 = v10 + 1;
    uint64_t v19 = v37;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v26 >= v33) {
      goto LABEL_26;
    }
    unint64_t v27 = *((void *)v34 + v26);
    ++v10;
    if (!v27)
    {
      int64_t v10 = v26 + 1;
      if (v26 + 1 >= v33) {
        goto LABEL_26;
      }
      unint64_t v27 = *((void *)v34 + v10);
      if (!v27) {
        break;
      }
    }

void sub_100069EC4(__int128 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  int64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *((void *)a1 + 8);
  __int128 v12 = a1[1];
  __int128 v33 = *a1;
  __int128 v34 = v12;
  __int128 v13 = a1[2];
  __int128 v14 = a1[3];
  v30[1] = a1;
  __int128 v35 = v13;
  __int128 v36 = v14;
  uint64_t v37 = v11;
  Swift::Int v31 = Hasher._finalize()();
  uint64_t v32 = a2;
  uint64_t v15 = a2 + 56;
  uint64_t v16 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & *(void *)(a2 + 56);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  __n128 v20 = swift_bridgeObjectRetain(a2);
  Swift::UInt v21 = 0LL;
  int64_t v22 = 0LL;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v23 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (unint64_t i = v23 | (v22 << 6); ; unint64_t i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))( v10,  *(void *)(v32 + 48) + *(void *)(v5 + 72) * i,  v4,  v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0LL, 1LL, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    uint64_t v28 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v4, v28);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v21 ^= v29;
    if (v18) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v22++, 1LL)) {
      goto LABEL_21;
    }
    if (v22 >= v19) {
      goto LABEL_18;
    }
    unint64_t v26 = *(void *)(v15 + 8 * v22);
    if (!v26) {
      break;
    }
LABEL_14:
    unint64_t v18 = (v26 - 1) & v26;
  }

  int64_t v27 = v22 + 1;
  if (v22 + 1 >= v19)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v10, 1LL, 1LL, v4, v20);
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v21);
    return;
  }

  unint64_t v26 = *(void *)(v15 + 8 * v27);
  if (v26)
  {
    ++v22;
    goto LABEL_14;
  }

  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v22 >= v19) {
      goto LABEL_18;
    }
    unint64_t v26 = *(void *)(v15 + 8 * v22);
    ++v27;
    if (v26) {
      goto LABEL_14;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
}

void sub_10006A150(__int128 *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 8);
  __int128 v4 = a1[1];
  __int128 v21 = *a1;
  __int128 v22 = v4;
  __int128 v5 = a1[3];
  __int128 v23 = a1[2];
  __int128 v24 = v5;
  uint64_t v25 = v3;
  Swift::Int v6 = Hasher._finalize()();
  Swift::UInt v7 = 0LL;
  int64_t v8 = 0LL;
  uint64_t v9 = a2 + 56;
  uint64_t v10 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(a2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v8 << 6);
      goto LABEL_5;
    }

    if (__OFADD__(v8++, 1LL)) {
      goto LABEL_19;
    }
    if (v8 >= v13)
    {
LABEL_17:
      Hasher._combine(_:)(v7);
      return;
    }

    unint64_t v18 = *(void *)(v9 + 8 * v8);
    if (!v18) {
      break;
    }
LABEL_16:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v8 << 6);
LABEL_5:
    Swift::UInt v16 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v15);
    Hasher.init(_seed:)(v20, v6);
    Hasher._combine(_:)(v16);
    v7 ^= Hasher._finalize()();
  }

  int64_t v19 = v8 + 1;
  if (v8 + 1 >= v13) {
    goto LABEL_17;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v19);
  if (v18)
  {
    ++v8;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v8 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_17;
    }
    unint64_t v18 = *(void *)(v9 + 8 * v8);
    ++v19;
    if (v18) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t sub_10006A2B8()
{
  return 4LL;
}

uint64_t sub_10006A2C0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10006A2FC(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_10006A338(id a1, char a2)
{
  if (!a2) {
}
  }

id sub_10006A348(id result, char a2)
{
  if (!a2) {
    return result;
  }
  return result;
}

_OWORD *sub_10006A358(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_10006A368(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_errorRetain(result & 0x3FFFFFFFFFFFFFFFLL);
  }
  if (!(result >> 62)) {
    return swift_retain(result);
  }
  return result;
}

unint64_t sub_10006A388(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_errorRelease(result & 0x3FFFFFFFFFFFFFFFLL);
  }
  if (!(result >> 62)) {
    return swift_release(result);
  }
  return result;
}

uint64_t sub_10006A3A8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10006A3E4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10006A420(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_10006A45C()
{
  unint64_t result = qword_10099E348;
  if (!qword_10099E348)
  {
    uint64_t v1 = sub_100004B78(&qword_10099E338);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Identifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10099E348);
  }

  return result;
}

uint64_t sub_10006A4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099E380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006A4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099E380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006A538(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_10006A574(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

id sub_10006A580(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (id)swift_errorRetain(a1);
  }
  else {
    return a1;
  }
}

uint64_t sub_10006A58C(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_10006A598(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain(result);
  }
  return result;
}

uint64_t sub_10006A5A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006A5E8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10006A624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t *initializeBufferWithCopyOfBuffer for BeaconKeyManagerURLChangeSubscriber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for BeaconKeyManagerURLChangeSubscriber(void *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for BeaconKeyManagerURLChangeSubscriber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

uint64_t *assignWithTake for BeaconKeyManagerURLChangeSubscriber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconKeyManagerURLChangeSubscriber(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BeaconKeyManagerURLChangeSubscriber( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyManagerURLChangeSubscriber()
{
  return &type metadata for BeaconKeyManagerURLChangeSubscriber;
}

uint64_t sub_10006A7AC(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = sub_100004AEC(&qword_10099E590);
  uint64_t v5 = __chkstk_darwin(v4);
  Swift::UInt v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(int *)(v5 + 48);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v7, a1, v9);
  v7[v8] = *(_BYTE *)(a1 + v8);
  a2(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v7, v9);
}

uint64_t storeEnumTagSinglePayload for PublishingPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_10006A8BC + 4 * byte_1007E7EE5[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10006A8F0 + 4 * asc_1007E7EE0[v4]))();
}

uint64_t sub_10006A8F0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A8F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006A900LL);
  }
  return result;
}

uint64_t sub_10006A90C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006A914LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_10006A918(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A920(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PublishingPolicy()
{
  return &type metadata for PublishingPolicy;
}

unint64_t sub_10006A940()
{
  unint64_t result = qword_10099E598;
  if (!qword_10099E598)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E7FD4, &type metadata for PublishingPolicy);
    atomic_store(result, (unint64_t *)&qword_10099E598);
  }

  return result;
}

uint64_t sub_10006A984(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10006A9B8 + 4 * byte_1007E7EEA[a1]))( 0x7265776F50776F6CLL,  0xE800000000000000LL);
}

uint64_t sub_10006A9B8()
{
  return 0x6F506D756964656DLL;
}

uint64_t sub_10006A9D8()
{
  return 0x65776F5068676968LL;
}

uint64_t sub_10006A9F4()
{
  return 0x4F7265776F506E6FLL;
}

uint64_t sub_10006AA28()
{
  return 0x7265747461426E6FLL;
}

uint64_t sub_10006AA60()
{
  return 0x6F696E61706D6F63LL;
}

uint64_t sub_10006AA84()
{
  return 0x6857796669746F6ELL;
}

void sub_10006AAA8(char *a1)
{
}

Swift::Int sub_10006AAB4()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_100309F1C((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_10006AAF8(uint64_t a1)
{
}

Swift::Int sub_10006AB00(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_100309F1C((uint64_t)v4, v2);
  return Hasher._finalize()();
}

unint64_t sub_10006AB40@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10006AC24(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10006AB6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10006A984(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL sub_10006AB94(char *a1, char *a2)
{
  return qword_1007E8000[*a1] < qword_1007E8000[*a2];
}

BOOL sub_10006ABB8(char *a1, char *a2)
{
  return qword_1007E8000[*a2] >= qword_1007E8000[*a1];
}

BOOL sub_10006ABDC(char *a1, char *a2)
{
  return qword_1007E8000[*a1] >= qword_1007E8000[*a2];
}

BOOL sub_10006AC00(char *a1, char *a2)
{
  return qword_1007E8000[*a2] < qword_1007E8000[*a1];
}

unint64_t sub_10006AC24(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009325D0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9) {
    return 9LL;
  }
  else {
    return v3;
  }
}

uint64_t storeEnumTagSinglePayload for FinderActiveCache(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10006ACB8 + 4 * byte_1007E8055[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10006ACEC + 4 * byte_1007E8050[v4]))();
}

uint64_t sub_10006ACEC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006ACF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006ACFCLL);
  }
  return result;
}

uint64_t sub_10006AD08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006AD10LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10006AD14(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AD1C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FinderActiveCache()
{
  return &type metadata for FinderActiveCache;
}

Swift::Int sub_10006AD38()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  if (v1) {
    Swift::UInt v2 = 1LL;
  }
  else {
    Swift::UInt v2 = -1LL;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10006AD84()
{
  if (*v0) {
    Swift::UInt v1 = 1LL;
  }
  else {
    Swift::UInt v1 = -1LL;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10006ADB8(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2) {
    Swift::UInt v3 = 1LL;
  }
  else {
    Swift::UInt v3 = -1LL;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_10006AE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10006AF28();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10006AE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10006AF28();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *sub_10006AEA8@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1LL) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == -1LL) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  *a2 = v3;
  return result;
}

void sub_10006AEC8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1LL;
  if (!*v1) {
    uint64_t v2 = -1LL;
  }
  *a1 = v2;
}

unint64_t sub_10006AEE4()
{
  unint64_t result = qword_10099E5A0;
  if (!qword_10099E5A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E815C, &type metadata for FinderActiveCache);
    atomic_store(result, (unint64_t *)&qword_10099E5A0);
  }

  return result;
}

unint64_t sub_10006AF28()
{
  unint64_t result = qword_10099E5A8;
  if (!qword_10099E5A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8094, &type metadata for FinderActiveCache);
    atomic_store(result, (unint64_t *)&qword_10099E5A8);
  }

  return result;
}

uint64_t sub_10006AF6C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A29F38);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A29F38);
  if (qword_10099B0A0 != -1) {
    swift_once(&qword_10099B0A0, sub_10006BB0C);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A29F50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_10006AFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = sub_100004AEC(&qword_10099E6B0);
  __chkstk_darwin(v29);
  uint64_t v8 = (void *)((char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = sub_100004AEC(&qword_10099E6B8);
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009B1520);
  uint64_t v31 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a2 + 128, v30, 0LL, 0LL);
  uint64_t result = *(void *)(a2 + 128);
  uint64_t v16 = *(void *)(result + 16);
  if (v16)
  {
    v23[1] = *(void *)(a2 + 128);
    v23[2] = v3;
    unint64_t v17 = result + ((*(unsigned __int8 *)(v31 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
    uint64_t v27 = *(void *)(v31 + 72);
    uint64_t v28 = a3;
    unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v31 + 16);
    __n128 v18 = swift_bridgeObjectRetain(result);
    uint64_t v20 = v24;
    uint64_t v19 = v25;
    do
    {
      v26(v14, v17, v12, v18);
      uint64_t v21 = v28;
      uint64_t v22 = (uint64_t)v8 + *(int *)(v29 + 48);
      *uint64_t v8 = a1;
      sub_10006BBD4(v21, v22);
      swift_retain();
      AsyncStream.Continuation.yield(_:)(v8, v12);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v19);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
      v17 += v27;
      --v16;
    }

    while (v16);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_10006B1D8()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LeechScanningService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd20LeechScanningService);
}

uint64_t sub_10006B224()
{
  return sub_10006B298(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_10006B230(uint64_t a1)
{
  unint64_t result = sub_10006B254();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10006B254()
{
  unint64_t result = qword_10099E698;
  if (!qword_10099E698)
  {
    uint64_t v1 = type metadata accessor for LeechScanningService();
    unint64_t result = swift_getWitnessTable(&unk_1007E81E4, v1);
    atomic_store(result, &qword_10099E698);
  }

  return result;
}

uint64_t sub_10006B298(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10006B2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B1520);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (v11 + 40) & ~v11;
  uint64_t v13 = (char *)swift_allocObject(&unk_10093B020, v12 + v6, v11 | 7);
  *((void *)v13 + 2) = 0LL;
  *((void *)v13 + 3) = 0LL;
  *((void *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))( &v13[v12],  (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  swift_retain();
  sub_1003EDB00((uint64_t)v9, (uint64_t)&unk_10099E6C8, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_10006B3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009B1520);
  v5[7] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[8] = v8;
  void v5[9] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10006B450, a4, 0LL);
}

uint64_t sub_10006B450()
{
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 16LL))( *(void *)(v0 + 72),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
  uint64_t v2 = (unint64_t *)(v1 + 128);
  swift_beginAccess(v1 + 128, v0 + 16, 33LL, 0LL);
  unint64_t v3 = *(void *)(v1 + 128);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  *(void *)(v1 + 128) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v3 = sub_1004C488C(0, *(void *)(v3 + 16) + 1LL, 1, v3);
    unint64_t *v2 = v3;
  }

  unint64_t v6 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    unint64_t v3 = sub_1004C488C(v5 > 1, v6 + 1, 1, v3);
    unint64_t *v2 = v3;
  }

  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 56);
  *(void *)(v3 + 16) = v6 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( v3 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v6,
    v8,
    v9);
  swift_endAccess(v0 + 16);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006B564(uint64_t a1, int a2)
{
  *(_DWORD *)(v3 + 88) = a2;
  *(void *)(v3 + 32) = a1;
  *(void *)(v3 + 40) = v2;
  uint64_t v4 = sub_100004AEC(&qword_10099E6A8);
  *(void *)(v3 + 48) = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DiscoveredObject(0LL);
  *(void *)(v3 + 56) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 64) = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 72) = swift_task_alloc(v7);
  *(void *)(v3 + 80) = swift_task_alloc(v7);
  return swift_task_switch(sub_10006B5FC, 0LL, 0LL);
}

uint64_t sub_10006B5FC()
{
  uint64_t v1 = (void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);
  int v5 = *(_DWORD *)(v0 + 88);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  sub_1000ADC10(v6, v5, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1LL, v3) == 1)
  {
    sub_10006BACC(*(void *)(v0 + 48));
    if (qword_10099B098 != -1) {
      swift_once(&qword_10099B098, sub_10006AF6C);
    }
    uint64_t v7 = *v1;
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A29F38);
    swift_bridgeObjectRetain_n(v7, 2LL);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter(v10);
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *v1;
    if (v12)
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v35 = v15;
      *(_DWORD *)unint64_t v14 = 136446210;
      swift_bridgeObjectRetain(v13);
      uint64_t v17 = Dictionary.description.getter( v16,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 16) = sub_1003F11D4(v17, v19, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v13, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to parse: %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*v1, 2LL);
    }

    uint64_t v32 = *(void *)(v0 + 72);
    uint64_t v33 = *(void *)(v0 + 48);
    swift_task_dealloc(*(void *)(v0 + 80));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_10006BB90(*(void *)(v0 + 48), *(void *)(v0 + 80));
    if (qword_10099B098 != -1) {
      swift_once(&qword_10099B098, sub_10006AF6C);
    }
    uint64_t v21 = *(void *)(v0 + 72);
    uint64_t v20 = *(void *)(v0 + 80);
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000A720(v22, (uint64_t)qword_100A29F38);
    uint64_t v23 = sub_10006BBD4(v20, v21);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.debug.getter(v24);
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void *)(v0 + 72);
    if (v26)
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v28 = 136446210;
      uint64_t v35 = v29;
      uint64_t v30 = sub_1000B07D4();
      *(void *)(v0 + 24) = sub_1003F11D4(v30, v31, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_10006BC18(v27);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Discovered: %{public}s", v28, 0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      sub_10006BC18(*(void *)(v0 + 72));
    }

    return swift_task_switch(sub_10006B9E0, *(void *)(v0 + 40), 0LL);
  }

uint64_t sub_10006B9E0()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 40);
  type metadata accessor for Transaction(0LL);
  uint64_t v3 = swift_task_alloc(32LL);
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  static Transaction.named<A>(_:with:)("LeechScanningService", 20LL, 2LL, sub_10006BC54);
  swift_task_dealloc(v3);
  return swift_task_switch(sub_10006BA80, 0LL, 0LL);
}

uint64_t sub_10006BA80()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006BACC(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099E6A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10006BB0C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A29F50);
  sub_10000A720(v0, (uint64_t)qword_100A29F50);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000014LL,  0x80000001007E8180LL);
}

uint64_t sub_10006BB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveredObject(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006BBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveredObject(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006BC18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiscoveredObject(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10006BC54(uint64_t a1)
{
  return sub_10006AFFC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10006BC6C()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009B1520);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10006BCEC(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009B1520) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_10099E6C4);
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1000159BC;
  return sub_10006B3E8(a1, v5, v6, v7, v8);
}

ValueMetadata *type metadata accessor for ObservationStore()
{
  return &type metadata for ObservationStore;
}

void *sub_10006BD94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = *(void *)(type metadata accessor for ObservedAdvertisement(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = (_BYTE *)(v4 + a1 + 8);
  uint64_t v7 = _swiftEmptyArrayStorage;
  do
  {
    if ((*v6 & 1) == 0)
    {
      uint64_t v8 = *((void *)v6 - 1);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
        uint64_t v7 = sub_1004C4AAC(0LL, v7[2] + 1LL, 1, v7);
      }
      unint64_t v10 = v7[2];
      unint64_t v9 = v7[3];
      if (v10 >= v9 >> 1) {
        uint64_t v7 = sub_1004C4AAC((void *)(v9 > 1), v10 + 1, 1, v7);
      }
      v7[2] = v10 + 1;
      v7[v10 + 4] = v8;
    }

    v6 += v5;
    --v1;
  }

  while (v1);
  swift_bridgeObjectRelease();
  return v7;
}

void *sub_10006BEB0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    unint64_t v19 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v7, 0);
    uint64_t v8 = v19;
    uint64_t v9 = type metadata accessor for BeaconIdentifier(0LL);
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v17 = *(void *)(v10 + 72);
    uint64_t v18 = v9;
    BOOL v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 20), v3);
      unint64_t v19 = v8;
      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000328D0(v13 > 1, v14 + 1, 1);
        uint64_t v8 = v19;
      }

      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v14,
        v6,
        v3);
      v11 += v17;
      --v7;
    }

    while (v7);
  }

  return v8;
}

uint64_t sub_10006C020()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A29F68);
  sub_10000A720(v0, (uint64_t)qword_100A29F68);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000010LL,  0x8000000100851B20LL);
}

uint64_t sub_10006C0A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(a1 + 16)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1LL, 1LL, v4);
  }
  uint64_t v8 = sub_10030CF14(0xD000000000000015LL, 0x800000010084D7E0LL);
  if ((v9 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1LL, 1LL, v4);
  }
  double v10 = *(double *)(*(void *)(a1 + 56) + 8 * v8);
  uint64_t v11 = static Date.trustedNow.getter((uint64_t)v7);
  Date.addingTimeInterval(_:)(v11, -v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0LL, 1LL, v4);
}

uint64_t sub_10006C1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Connection.TransactionMode(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100474DE0();
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = __chkstk_darwin(v8);
    v15[-4] = a1;
    v15[-3] = a2;
    v15[-2] = v10;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for Connection.TransactionMode.deferred(_:),  v4);
    Connection.transaction(_:block:)(v7, sub_100086B20, &v15[-6]);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_release(v9);
  }

  else
  {
    unint64_t v12 = sub_100086500();
    uint64_t v13 = swift_allocError(&type metadata for DatabaseError, v12, 0LL, 0LL);
    *(_DWORD *)uint64_t v14 = 2;
    *(_BYTE *)(v14 + 4) = 1;
    return swift_willThrow(v13);
  }

uint64_t sub_10006C304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v252 = a3;
  uint64_t v248 = a2;
  uint64_t v4 = sub_100004AEC(&qword_1009AA730);
  __chkstk_darwin(v4);
  v211 = (char *)&v202 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v220 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  uint64_t v210 = *(void *)(v220 - 8);
  __chkstk_darwin(v220);
  uint64_t v206 = (uint64_t)&v202 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OnConflict(0LL);
  uint64_t v227 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v226 = (char *)&v202 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099E770);
  __chkstk_darwin(v9);
  uint64_t v223 = (uint64_t)&v202 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v234 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v222 = *(void *)(v234 - 8);
  __chkstk_darwin(v234);
  v230 = (uint64_t *)((char *)&v202 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v255 = type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v12 = __chkstk_darwin(v255);
  uint64_t v225 = (uint64_t)&v202 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v217 = (uint64_t)&v202 - v14;
  uint64_t v219 = type metadata accessor for Setter(0LL);
  uint64_t v240 = *(void *)(v219 - 8);
  __chkstk_darwin(v219);
  v232 = (char *)&v202 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v229 = type metadata accessor for Insert(0LL);
  uint64_t v228 = *(void *)(v229 - 8);
  uint64_t v16 = __chkstk_darwin(v229);
  v204 = (char *)&v202 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  v208 = (char *)&v202 - v19;
  __chkstk_darwin(v18);
  v218 = (char *)&v202 - v20;
  uint64_t v21 = sub_100004AEC(&qword_10099E710);
  __chkstk_darwin(v21);
  v233 = (char *)&v202 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v237 = type metadata accessor for Row(0LL);
  uint64_t v239 = *(void *)(v237 - 8);
  __chkstk_darwin(v237);
  v231 = (char *)&v202 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v249 = sub_100004AEC(&qword_10099E6D0);
  v253 = *(char **)(v249 - 8);
  uint64_t v24 = __chkstk_darwin(v249);
  BOOL v26 = (char *)&v202 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v24);
  v241 = (char *)&v202 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v31 = (char *)&v202 - v30;
  __chkstk_darwin(v29);
  v247 = (char *)&v202 - v32;
  uint64_t v254 = type metadata accessor for Table(0LL);
  v242 = *(void (**)(char *, uint64_t))(v254 - 8);
  uint64_t v33 = __chkstk_darwin(v254);
  v205 = (char *)&v202 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __chkstk_darwin(v33);
  v246 = (char *)&v202 - v36;
  __chkstk_darwin(v35);
  v251 = (char *)&v202 - v37;
  uint64_t v38 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v39 = __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v202 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v202 - v42;
  uint64_t v44 = type metadata accessor for MACAddress(0LL);
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v256 = a1;
  v257 = (char *)&v202 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = *(void *)(a1 + 16);
  unint64_t v48 = *(void *)(a1 + 24);
  uint64_t v238 = v7;
  uint64_t v244 = v45;
  uint64_t v245 = v46;
  unint64_t v250 = v48;
  if ((v48 & 0x2000000000000000LL) == 0)
  {
    unint64_t v50 = v48;
    sub_10001736C(v49, v48);
    sub_10001736C(v49, v50);
    sub_10001736C(v49, v50);
    sub_100178C64(6LL, v49, v50);
    uint64_t v51 = (uint64_t)v258;
    unint64_t v52 = v259;
    sub_10001736C((uint64_t)v258, v259);
    MACAddress.init(addressToSanitize:type:)(v51, v52, 1LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1LL, v44) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v257, v43, v44);
      sub_1000869A4(v49, v50);
      sub_100016F9C(v51, v52);
      goto LABEL_6;
    }

    __break(1u);
LABEL_71:
    __break(1u);
    JUMPOUT(0x10006E088LL);
  }

  unint64_t v50 = v48 & 0xDFFFFFFFFFFFFFFFLL;
  uint64_t v53 = v48;
  sub_10001736C(v49, v48 & 0xDFFFFFFFFFFFFFFFLL);
  sub_10001736C(v49, v50);
  sub_10001736C(v49, v50);
  MACAddress.init(addressToSanitize:type:)(v49, v50, 1LL);
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v257, v41, v44);
  sub_1000869A4(v49, v53);
LABEL_6:
  uint64_t v54 = v31;
  uint64_t v55 = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  uint64_t v57 = v255;
  uint64_t v56 = v256;
  int v58 = v241;
  if (qword_10099B908 != -1) {
    swift_once(&qword_10099B908, sub_10075183C);
  }
  int v59 = (char *)(v248 + v55);
  uint64_t v221 = sub_100004AEC(&qword_10099E6E0);
  uint64_t v60 = sub_10000A720(v221, (uint64_t)qword_100A2B460);
  LOBYTE(v258) = *(_BYTE *)(v56 + 9);
  unint64_t v61 = sub_1000864BC();
  uint64_t v212 = v60;
  unint64_t v235 = v61;
  == infix<A>(_:_:)(v60, &v258, &type metadata for UInt8, v61, &protocol witness table for Int64);
  if (qword_10099B940 != -1) {
    swift_once(&qword_10099B940, sub_100751C44);
  }
  uint64_t v213 = sub_100004AEC(&qword_10099E780);
  uint64_t v62 = sub_10000A720(v213, (uint64_t)qword_100A2B508);
  v258 = (char *)v49;
  unint64_t v259 = v50;
  unint64_t v224 = v50;
  uint64_t v63 = sub_100007864( &qword_10099E840,  (uint64_t (*)(uint64_t))&type metadata accessor for Blob,  (uint64_t)&protocol conformance descriptor for Blob);
  uint64_t v214 = v62;
  == infix<A>(_:_:)(v62, &v258, &type metadata for Data, &protocol witness table for Data, v63);
  && infix(_:_:)(v58, v26);
  uint64_t v64 = v54;
  int v65 = (void (*)(char *, uint64_t))*((void *)v253 + 1);
  int v66 = v26;
  uint64_t v67 = v249;
  v65(v66, v249);
  v65(v58, v67);
  uint64_t v68 = v58;
  if (qword_10099B970 != -1) {
    swift_once(&qword_10099B970, sub_100751FA0);
  }
  v253 = (char *)v49;
  uint64_t v207 = sub_100004AEC(&qword_10099E700);
  uint64_t v69 = sub_10000A720(v207, (uint64_t)qword_100A2B598);
  uint64_t v70 = v56 + *(int *)(v57 + 44);
  uint64_t v71 = type metadata accessor for Date(0LL);
  uint64_t v216 = v69;
  uint64_t v215 = v70;
  uint64_t v236 = v71;
  == infix<A>(_:_:)(v69, v70, v71, &protocol witness table for Date, &protocol witness table for String);
  v72 = v247;
  && infix(_:_:)(v64, v68);
  v65(v68, v67);
  v65(v64, v67);
  v73 = v65;
  v74 = v246;
  uint64_t v75 = v254;
  v241 = v59;
  QueryType.filter(_:)(v72, v254, &protocol witness table for Table);
  v209 = v73;
  v73(v72, v67);
  v76 = v251;
  if (qword_10099B8D8 != -1) {
    swift_once(&qword_10099B8D8, sub_1007514DC);
  }
  uint64_t v77 = sub_100004AEC(&qword_10099E760);
  uint64_t v78 = sub_10000A720(v77, (uint64_t)qword_100A2B3D0);
  uint64_t v260 = v77;
  v261 = (void *)sub_1000372EC( &qword_10099E7E0,  &qword_10099E760,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  v79 = sub_10000A7C8(&v258);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16LL))(v79, v78, v77);
  SchemaType.select(_:_:)(&v258, _swiftEmptyArrayStorage, v75, &protocol witness table for Table);
  v80 = v242;
  v81 = v74;
  v82 = (void (*)(char *, uint64_t))*((void *)v242 + 1);
  v82(v81, v75);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v258);
  uint64_t v260 = v75;
  v261 = &protocol witness table for Table;
  v83 = sub_10000A7C8(&v258);
  v84 = (void (*)(void *, char *, uint64_t))*((void *)v80 + 2);
  v84(v83, v76, v75);
  uint64_t v85 = v243;
  uint64_t v86 = Connection.prepare(_:)(&v258);
  if (v85)
  {
    sub_1000869A4((uint64_t)v253, v250);
    v82(v76, v75);
LABEL_16:
    (*(void (**)(char *, uint64_t))(v244 + 8))(v257, v245);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v258);
  }

  uint64_t v88 = v86;
  uint64_t v203 = v78;
  uint64_t v243 = 0LL;
  uint64_t v89 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v258);
  uint64_t v90 = dispatch thunk of _AnySequenceBox._makeIterator()(v89);
  uint64_t v91 = swift_release(v88);
  uint64_t v92 = (uint64_t)v233;
  dispatch thunk of _AnyIteratorBoxBase.next()(v91);
  swift_release(v90);
  uint64_t v93 = v239;
  uint64_t v94 = v237;
  int v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v239 + 48))(v92, 1LL, v237);
  v242 = v82;
  v202 = v84;
  if (v95 == 1)
  {
    sub_100015794(v92, &qword_10099E710);
    LOBYTE(v258) = *(_BYTE *)(v256 + 9);
    <- infix<A>(_:_:)(v212, &v258, &type metadata for UInt8, v235);
    uint64_t v96 = sub_100004AEC(&qword_10099E810);
    uint64_t v97 = swift_allocObject( v96,  ((*(unsigned __int8 *)(v240 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v240 + 80))
          + 10LL * *(void *)(v240 + 72),
            *(unsigned __int8 *)(v240 + 80) | 7LL);
    *(_OWORD *)(v97 + 16) = xmmword_1007E8270;
    uint64_t v239 = v97;
    unint64_t v98 = v224;
    if (qword_10099B938 != -1) {
      swift_once(&qword_10099B938, sub_100751BB0);
    }
    uint64_t v99 = sub_10000A720(v213, (uint64_t)qword_100A2B4F0);
    uint64_t v100 = MACAddress.data.getter();
    unint64_t v102 = v101;
    v258 = (char *)v100;
    unint64_t v259 = v101;
    <- infix<A>(_:_:)(v99, &v258, &type metadata for Data, &protocol witness table for Data);
    sub_100016F9C(v100, v102);
    v258 = v253;
    unint64_t v259 = v98;
    <- infix<A>(_:_:)(v214, &v258, &type metadata for Data, &protocol witness table for Data);
    if (qword_10099B948 != -1) {
      swift_once(&qword_10099B948, sub_100751CD8);
    }
    uint64_t v103 = v221;
    uint64_t v104 = sub_10000A720(v221, (uint64_t)qword_100A2B520);
    uint64_t v105 = v256;
    LOBYTE(v258) = *(_BYTE *)(v256 + 32);
    unint64_t v106 = v235;
    <- infix<A>(_:_:)(v104, &v258, &type metadata for UInt8, v235);
    if (qword_10099B950 != -1) {
      swift_once(&qword_10099B950, sub_100751D64);
    }
    uint64_t v107 = sub_10000A720(v103, (uint64_t)qword_100A2B538);
    LOBYTE(v258) = sub_100041014(*(_BYTE *)(v105 + 32) & 0xB);
    <- infix<A>(_:_:)(v107, &v258, &type metadata for UInt8, v106);
    uint64_t v108 = v254;
    if (qword_10099B958 != -1) {
      swift_once(&qword_10099B958, sub_100751DF8);
    }
    uint64_t v109 = sub_10000A720(v103, (uint64_t)qword_100A2B550);
    LOBYTE(v258) = *(_BYTE *)(v105 + 33);
    <- infix<A>(_:_:)(v109, &v258, &type metadata for UInt8, v106);
    if (qword_10099B960 != -1) {
      swift_once(&qword_10099B960, sub_100751E90);
    }
    uint64_t v110 = sub_100004AEC(&qword_10099E788);
    uint64_t v111 = sub_10000A720(v110, (uint64_t)qword_100A2B568);
    char v112 = *(_BYTE *)(v105 + 35);
    LOBYTE(v258) = *(_BYTE *)(v105 + 34);
    BYTE1(v258) = v112;
    <- infix<A>(_:_:)(v111, &v258, &type metadata for UInt8, v106);
    if (qword_10099B968 != -1) {
      swift_once(&qword_10099B968, sub_100751F18);
    }
    uint64_t v113 = sub_100004AEC(&qword_10099E790);
    uint64_t v114 = sub_10000A720(v113, (uint64_t)qword_100A2B580);
    LODWORD(v258) = *(_DWORD *)(v105 + 36);
    unint64_t v115 = sub_1000869AC();
    <- infix<A>(_:_:)(v114, &v258, &type metadata for Int32, v115);
    <- infix<A>(_:_:)(v216, v215, v236, &protocol witness table for Date);
    uint64_t v116 = v238;
    if (qword_10099B980 != -1) {
      swift_once(&qword_10099B980, sub_1007520C8);
    }
    uint64_t v117 = v249;
    uint64_t v118 = sub_10000A720(v249, (uint64_t)qword_100A2B5C8);
    LOBYTE(v258) = *(_BYTE *)(v105 + *(int *)(v255 + 56));
    <- infix<A>(_:_:)(v118, &v258, &type metadata for Bool, &protocol witness table for Bool);
    uint64_t v119 = v105;
    if (qword_10099B978 != -1) {
      swift_once(&qword_10099B978, sub_100752030);
    }
    uint64_t v120 = sub_10000A720(v117, (uint64_t)qword_100A2B5B0);
    LOBYTE(v258) = 0;
    <- infix<A>(_:_:)(v120, &v258, &type metadata for Bool, &protocol witness table for Bool);
    v121 = v218;
    v122 = v232;
    QueryType.insert(_:_:)(v232, v239, v108, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    uint64_t v123 = v240;
    (*(void (**)(char *, uint64_t))(v240 + 8))(v122, v219);
    uint64_t v124 = v243;
    uint64_t v125 = Connection.run(_:)(v121);
    if (v124)
    {
      sub_1000869A4((uint64_t)v253, v250);
      (*(void (**)(char *, uint64_t))(v228 + 8))(v121, v229);
      v126 = v251;
      uint64_t v127 = v108;
LABEL_54:
      v242(v126, v127);
      return (*(uint64_t (**)(char *, uint64_t))(v244 + 8))(v257, v245);
    }

    v141 = (char *)v125;
    uint64_t v243 = 0LL;
    (*(void (**)(char *, uint64_t))(v228 + 8))(v121, v229);
    uint64_t v140 = v255;
    v142 = v230;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v231, v92, v94);
    Row.subscript.getter(v203, &type metadata for Int64, &protocol witness table for Int64);
    v241 = v258;
    uint64_t v128 = v256;
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v129 = type metadata accessor for Logger(0LL);
    sub_10000A720(v129, (uint64_t)qword_100A2AB30);
    uint64_t v130 = v217;
    sub_10001DC4C(v128, v217, type metadata accessor for ObservedAdvertisement);
    uint64_t v131 = v225;
    sub_10001DC4C(v128, v225, type metadata accessor for ObservedAdvertisement);
    uint64_t v132 = (uint64_t)v253;
    uint64_t v133 = v250;
    sub_10008699C((uint64_t)v253, v250);
    uint64_t v134 = sub_10008699C(v132, v133);
    v135 = (os_log_s *)Logger.logObject.getter(v134);
    os_log_type_t v136 = static os_log_type_t.info.getter(v135);
    BOOL v137 = os_log_type_enabled(v135, v136);
    v138 = v230;
    if (v137)
    {
      v139 = (_DWORD *)swift_slowAlloc(42LL, -1LL);
      v233 = (char *)swift_slowAlloc(96LL, -1LL);
      v258 = v233;
      _DWORD *v139 = 136315906;
      __asm { BR              X10 }
    }

    sub_100018C68(v131, type metadata accessor for ObservedAdvertisement);
    sub_1000869A4(v132, v133);
    sub_1000869A4(v132, v133);
    sub_100018C68(v130, type metadata accessor for ObservedAdvertisement);
    (*(void (**)(char *, uint64_t))(v239 + 8))(v231, v94);
    uint64_t v116 = v238;
    uint64_t v108 = v254;
    uint64_t v140 = v255;
    uint64_t v123 = v240;
    uint64_t v119 = v256;
    v141 = v241;
    v142 = v138;
  }

  uint64_t v143 = v223;
  sub_10001581C(v119 + *(int *)(v140 + 48), v223, &qword_10099E770);
  int v144 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v222 + 48))(v143, 1LL, v234);
  v241 = v141;
  if (v144 == 1)
  {
    sub_100015794(v143, &qword_10099E770);
    uint64_t v145 = v220;
    uint64_t v146 = (uint64_t)v211;
    uint64_t v147 = v243;
  }

  else
  {
    sub_10002218C(v143, (uint64_t)v142, type metadata accessor for ObservedAdvertisement.Location);
    (*(void (**)(char *, void, uint64_t))(v227 + 104))(v226, enum case for OnConflict.ignore(_:), v116);
    uint64_t v148 = sub_100004AEC(&qword_10099E810);
    uint64_t v149 = swift_allocObject( v148,  ((*(unsigned __int8 *)(v123 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80))
           + 5LL * *(void *)(v123 + 72),
             *(unsigned __int8 *)(v123 + 80) | 7LL);
    uint64_t v150 = (uint64_t)v141;
    uint64_t v151 = v149;
    *(_OWORD *)(v149 + 16) = xmmword_1007E8280;
    v258 = (char *)v150;
    <- infix<A>(_:_:)(v203, &v258, &type metadata for Int64, &protocol witness table for Int64);
    if (qword_10099B988 != -1) {
      swift_once(&qword_10099B988, sub_100752154);
    }
    uint64_t v152 = sub_100004AEC(&qword_10099E778);
    uint64_t v153 = sub_10000A720(v152, (uint64_t)qword_100A2B5E0);
    v258 = (char *)*v142;
    <- infix<A>(_:_:)(v153, &v258, &type metadata for Double, &protocol witness table for Double);
    if (qword_10099B990 != -1) {
      swift_once(&qword_10099B990, sub_1007521E4);
    }
    uint64_t v154 = sub_10000A720(v152, (uint64_t)qword_100A2B5F8);
    v258 = (char *)v142[1];
    <- infix<A>(_:_:)(v154, &v258, &type metadata for Double, &protocol witness table for Double);
    if (qword_10099B998 != -1) {
      swift_once(&qword_10099B998, sub_100752278);
    }
    uint64_t v155 = sub_10000A720(v152, (uint64_t)qword_100A2B610);
    v258 = (char *)v142[2];
    <- infix<A>(_:_:)(v155, &v258, &type metadata for Double, &protocol witness table for Double);
    uint64_t v156 = v227;
    uint64_t v157 = v243;
    if (qword_10099B9A0 != -1) {
      swift_once(&qword_10099B9A0, sub_10075230C);
    }
    uint64_t v158 = sub_10000A720(v207, (uint64_t)qword_100A2B628);
    <- infix<A>(_:_:)(v158, (char *)v142 + *(int *)(v234 + 28), v236, &protocol witness table for Date);
    v159 = v208;
    v160 = v226;
    uint64_t v161 = v254;
    QueryType.insert(or:_:)(v226, v151, v254, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v156 + 8))(v160, v238);
    uint64_t v162 = v157;
    Connection.run(_:)(v159);
    uint64_t v163 = (uint64_t)v142;
    uint64_t v147 = v162;
    if (v162)
    {
      sub_1000869A4((uint64_t)v253, v250);
      (*(void (**)(char *, uint64_t))(v228 + 8))(v159, v229);
      sub_100018C68(v163, type metadata accessor for ObservedAdvertisement.Location);
      v126 = v251;
      uint64_t v127 = v161;
      goto LABEL_54;
    }

    (*(void (**)(char *, uint64_t))(v228 + 8))(v159, v229);
    sub_100018C68(v163, type metadata accessor for ObservedAdvertisement.Location);
    uint64_t v145 = v220;
    uint64_t v146 = (uint64_t)v211;
    uint64_t v119 = v256;
    uint64_t v108 = v161;
  }

  sub_10001581C(v119 + *(int *)(v255 + 52), v146, &qword_1009AA730);
  int v164 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v210 + 48))(v146, 1LL, v145);
  v165 = v242;
  v166 = v209;
  if (v164 != 1)
  {
    uint64_t v243 = v147;
    uint64_t v167 = v206;
    sub_10002218C(v146, v206, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    if (qword_10099B8E0 != -1) {
      swift_once(&qword_10099B8E0, sub_100751568);
    }
    uint64_t v168 = sub_100004AEC(&qword_10099E6D8);
    uint64_t v169 = sub_10000A720(v168, (uint64_t)qword_100A2B3E8);
    uint64_t v170 = type metadata accessor for UUID(0LL);
    v171 = v247;
    uint64_t v256 = v169;
    == infix<A>(_:_:)(v169, v167, v170, &protocol witness table for UUID, &protocol witness table for String);
    v172 = v246;
    QueryType.filter(_:)(v171, v108, &protocol witness table for Table);
    v166(v171, v249);
    v173 = v205;
    QueryType.limit(_:)(1LL, 0LL, v108, &protocol witness table for Table);
    v174 = v242;
    v242(v172, v108);
    uint64_t v260 = v108;
    v261 = &protocol witness table for Table;
    v175 = sub_10000A7C8(&v258);
    v202(v175, v173, v108);
    uint64_t v176 = v243;
    uint64_t v177 = Connection.prepare(_:)(&v258);
    if (v176)
    {
      sub_1000869A4((uint64_t)v253, v250);
      v174(v173, v108);
      sub_100018C68(v167, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v174(v251, v108);
      goto LABEL_16;
    }

    uint64_t v178 = v177;
    uint64_t v179 = v170;
    uint64_t v180 = v256;
    uint64_t v181 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v258);
    uint64_t v182 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v181);
    swift_release(v178);
    uint64_t v183 = *(void *)(v182 + 16);
    swift_release(v182);
    if (v183)
    {
      (*(void (**)(char *, void, uint64_t))(v227 + 104))(v226, enum case for OnConflict.ignore(_:), v238);
      uint64_t v184 = sub_100004AEC(&qword_10099E810);
      uint64_t v185 = swift_allocObject( v184,  ((*(unsigned __int8 *)(v240 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v240 + 80))
             + 4LL * *(void *)(v240 + 72),
               *(unsigned __int8 *)(v240 + 80) | 7LL);
      *(_OWORD *)(v185 + 16) = xmmword_1007E8290;
      v258 = v241;
      <- infix<A>(_:_:)(v203, &v258, &type metadata for Int64, &protocol witness table for Int64);
      uint64_t v186 = v206;
      <- infix<A>(_:_:)(v180, v206, v179, &protocol witness table for UUID);
      if (qword_10099B8F0 != -1) {
        swift_once(&qword_10099B8F0, sub_100751688);
      }
      uint64_t v187 = sub_10000A720(v221, (uint64_t)qword_100A2B418);
      uint64_t v188 = v220;
      LOBYTE(v258) = *(_BYTE *)(v186 + *(int *)(v220 + 20));
      <- infix<A>(_:_:)(v187, &v258, &type metadata for UInt8, v235);
      if (qword_10099B8E8 != -1) {
        swift_once(&qword_10099B8E8, sub_1007515FC);
      }
      uint64_t v189 = sub_100004AEC(&qword_10099E730);
      uint64_t v190 = sub_10000A720(v189, (uint64_t)qword_100A2B400);
      v258 = *(char **)(v186 + *(int *)(v188 + 24));
      unint64_t v191 = sub_100086818();
      <- infix<A>(_:_:)(v190, &v258, &type metadata for UInt64, v191);
      v192 = v204;
      v193 = v226;
      uint64_t v194 = v254;
      QueryType.insert(or:_:)(v226, v185, v254, &protocol witness table for Table);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v227 + 8))(v193, v238);
      Connection.run(_:)(v192);
      v195 = v205;
      sub_1000869A4((uint64_t)v253, v250);
      (*(void (**)(char *, uint64_t))(v228 + 8))(v192, v229);
      v196 = v195;
      v197 = v242;
      v242(v196, v194);
      sub_100018C68(v186, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v197(v251, v194);
    }

    else
    {
      unint64_t v198 = sub_100086AAC();
      uint64_t v199 = swift_allocError(&type metadata for ObservationStore.Error, v198, 0LL, 0LL);
      swift_willThrow(v199);
      sub_1000869A4((uint64_t)v253, v250);
      uint64_t v200 = v254;
      v201 = v242;
      v242(v205, v254);
      sub_100018C68(v206, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v201(v251, v200);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v244 + 8))(v257, v245);
  }

  sub_1000869A4((uint64_t)v253, v250);
  v165(v251, v108);
  (*(void (**)(char *, uint64_t))(v244 + 8))(v257, v245);
  return sub_100015794(v146, &qword_1009AA730);
}

uint64_t sub_10006E098(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v54 - v14;
  if (a1)
  {
    sub_10006C0A4(a1, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
    {
      sub_100015794((uint64_t)v8, (uint64_t *)&unk_10099D720);
      unint64_t v16 = sub_100086A68();
      uint64_t v17 = swift_allocError(&type metadata for ObservationStore.ObservationStoreError, v16, 0LL, 0LL);
      *uint64_t v18 = 0;
      swift_willThrow(v17);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
      uint64_t v19 = sub_10006E8E8((uint64_t)v15, a2);
      uint64_t v60 = v15;
      if (v2)
      {
        if (qword_10099B0A8 != -1) {
          swift_once(&qword_10099B0A8, sub_10006C020);
        }
        uint64_t v20 = type metadata accessor for Logger(0LL);
        sub_10000A720(v20, (uint64_t)qword_100A29F68);
        swift_errorRetain(v2);
        uint64_t v21 = swift_errorRetain(v2);
        uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
        os_log_type_t v23 = static os_log_type_t.error.getter(v22);
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v59 = a1;
          uint64_t v24 = swift_slowAlloc(12LL, -1LL);
          uint64_t v58 = v10;
          uint64_t v25 = (uint8_t *)v24;
          uint64_t v26 = swift_slowAlloc(8LL, -1LL);
          uint64_t v57 = a2;
          uint64_t v27 = (void *)v26;
          *(_DWORD *)uint64_t v25 = 138543362;
          swift_errorRetain(v2);
          uint64_t v28 = _swift_stdlib_bridgeErrorToNSError(v2);
          uint64_t v63 = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v25 + 4, v25 + 12);
          *uint64_t v27 = v28;
          swift_errorRelease(v2);
          swift_errorRelease(v2);
          _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Purge failed to delete advertisements: %{public}@.",  v25,  0xCu);
          uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099FB20);
          swift_arrayDestroy(v27, 1LL, v29);
          uint64_t v30 = v27;
          a2 = v57;
          swift_slowDealloc(v30, -1LL, -1LL);
          unint64_t v31 = v25;
          uint64_t v10 = v58;
          swift_slowDealloc(v31, -1LL, -1LL);

          swift_errorRelease(v2);
        }

        else
        {
          swift_errorRelease(v2);
          swift_errorRelease(v2);
          swift_errorRelease(v2);
        }

        uint64_t v32 = 0LL;
      }

      else
      {
        uint64_t v32 = (uint64_t)v19;
        if (qword_10099B0A8 != -1) {
          swift_once(&qword_10099B0A8, sub_10006C020);
        }
        uint64_t v33 = type metadata accessor for Logger(0LL);
        sub_10000A720(v33, (uint64_t)qword_100A29F68);
        uint64_t v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
        uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
        os_log_type_t v36 = static os_log_type_t.default.getter(v35);
        int v37 = v36;
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v38 = swift_slowAlloc(22LL, -1LL);
          uint64_t v57 = a2;
          uint64_t v39 = v38;
          uint64_t v59 = swift_slowAlloc(32LL, -1LL);
          uint64_t v63 = v59;
          *(_DWORD *)uint64_t v39 = 134218242;
          uint64_t v61 = v32;
          uint64_t v56 = &v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v39 + 4, v39 + 12);
          *(_WORD *)(v39 + 12) = 2082;
          uint64_t v55 = v39 + 14;
          uint64_t v40 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          LODWORD(v58) = v37;
          uint64_t v41 = v35;
          uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v9, v40);
          uint64_t v61 = sub_1003F11D4(v42, v43, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v56, v55, v39 + 22);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
          _os_log_impl( (void *)&_mh_execute_header,  v35,  (os_log_type_t)v58,  "Purge deleted %ld advertisements older than %{public}s.",  (uint8_t *)v39,  0x16u);
          uint64_t v44 = v59;
          swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v44, -1LL, -1LL);
          uint64_t v45 = v39;
          a2 = v57;
          swift_slowDealloc(v45, -1LL, -1LL);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
        }
      }

      uint64_t v46 = sub_10006ECE8(a2);
      if (qword_10099B0A8 != -1) {
        swift_once(&qword_10099B0A8, sub_10006C020);
      }
      uint64_t v47 = type metadata accessor for Logger(0LL);
      uint64_t v48 = sub_10000A720(v47, (uint64_t)qword_100A29F68);
      uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
      os_log_type_t v50 = static os_log_type_t.default.getter(v49);
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v59 = v32;
        uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v51 = 134217984;
        uint64_t v32 = v59;
        uint64_t v63 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v51 + 4, v51 + 12);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Purge deleted %ld reconciled advertisements.", v51, 0xCu);
        swift_slowDealloc(v51, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v10 + 8))(v60, v9);
      BOOL v52 = __OFADD__(v32, v46);
      uint64_t v3 = v32 + v46;
      if (v52)
      {
        __break(1u);

        swift_errorRelease(0LL);
        swift_errorRelease(0LL);
        swift_errorRelease(0LL);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v60, v9);
      }
    }
  }

  else
  {
    sub_10006E858();
    if (!v2) {
      return 0LL;
    }
  }

  return v3;
}

void (*sub_10006E858())(uint64_t, void *)
{
  uint64_t v1 = v0[6];
  v3[3] = *v0;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100086B3C,  v3,  v1,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  return sub_100084110();
}

uint64_t sub_10006E8A0()
{
  uint64_t v1 = v0[5];
  v3[3] = *v0;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100086B6C,  v3,  v1,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  return sub_100084DBC();
}

char *sub_10006E8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a1;
  uint64_t v4 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v36 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v44 = type metadata accessor for Table(0LL);
  uint64_t v42 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Delete(0LL);
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  __chkstk_darwin(v18);
  unint64_t v43 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100474DE0();
  if (v20)
  {
    uint64_t v21 = sub_10006F1CC(v20, a2);
    if (v2)
    {
      swift_release();
    }

    else
    {
      uint64_t v37 = v21;
      uint64_t v38 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
      if (qword_10099B970 != -1) {
        swift_once(&qword_10099B970, sub_100751FA0);
      }
      uint64_t v39 = v4;
      uint64_t v22 = sub_100004AEC(&qword_10099E700);
      uint64_t v23 = sub_10000A720(v22, (uint64_t)qword_100A2B598);
      uint64_t v24 = type metadata accessor for Date(0LL);
      < infix<A>(_:_:)(v23, v40, v24, &protocol witness table for Date, &protocol witness table for String);
      uint64_t v48 = v37;
      if (qword_10099B8D8 != -1) {
        swift_once(&qword_10099B8D8, sub_1007514DC);
      }
      uint64_t v25 = sub_100004AEC(&qword_10099E760);
      uint64_t v40 = sub_10000A720(v25, (uint64_t)qword_100A2B3D0);
      uint64_t v36 = sub_100004AEC(&qword_10099E7B0);
      uint64_t v26 = sub_1000372EC(&qword_10099E7B8, &qword_10099E7B0, (uint64_t)&protocol conformance descriptor for Set<A>);
      Collection<>.contains(_:)(v40, v36, v26, &protocol witness table for Int64);
      swift_bridgeObjectRelease();
      char v47 = 0;
      == infix<A>(_:_:)( v7,  &v47,  &type metadata for Bool,  &protocol witness table for Bool,  &protocol witness table for Int64);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v28 = v7;
      uint64_t v29 = v39;
      v27(v28, v39);
      && infix(_:_:)(v13, v10);
      v27(v10, v29);
      v27(v13, v29);
      uint64_t v30 = v44;
      QueryType.filter(_:)(v15, v44, &protocol witness table for Table);
      v27(v15, v29);
      unint64_t v31 = v43;
      QueryType.delete()(v30, &protocol witness table for Table);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v30);
      uint64_t v13 = (char *)Connection.run(_:)(v31);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v31, v46);
      swift_release();
    }
  }

  else
  {
    unint64_t v32 = sub_100086500();
    uint64_t v33 = swift_allocError(&type metadata for DatabaseError, v32, 0LL, 0LL);
    *(_DWORD *)uint64_t v34 = 2;
    *(_BYTE *)(v34 + 4) = 1;
    swift_willThrow(v33);
  }

  return v13;
}

uint64_t sub_10006ECE8(uint64_t a1)
{
  uint64_t v47 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v47 - 8);
  uint64_t v3 = __chkstk_darwin(v47);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v39 - v6;
  uint64_t v54 = type metadata accessor for Delete(0LL);
  uint64_t v49 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v48 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Table(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v46 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = sub_100474DE0();
  if (v15)
  {
    uint64_t v16 = sub_10006F1CC(v15, a1);
    if (v1)
    {
      swift_release();
    }

    else
    {
      uint64_t v40 = v7;
      unint64_t v43 = v16;
      uint64_t v44 = (void (*)(char *, uint64_t))(a1
                                                 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
      if (qword_10099B8D8 != -1) {
        swift_once(&qword_10099B8D8, sub_1007514DC);
      }
      uint64_t v17 = sub_100004AEC(&qword_10099E760);
      uint64_t v18 = sub_10000A720(v17, (uint64_t)qword_100A2B3D0);
      uint64_t v52 = v17;
      uint64_t v53 = sub_1000372EC( &qword_10099E7E0,  &qword_10099E760,  (uint64_t)&protocol conformance descriptor for Expression<A>);
      sub_10000A7C8(&v50);
      QueryType.subscript.getter(v18, v9);
      SchemaType.select(_:_:)(&v50, _swiftEmptyArrayStorage, v9, &protocol witness table for Table);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v50);
      Swift::String v19 = Expressible.asSQL()();
      object = v19._object;
      uint64_t countAndFlagsBits = v19._countAndFlagsBits;
      uint64_t v44 = *(void (**)(char *, uint64_t))(v10 + 8);
      v44(v14, v9);
      uint64_t v39 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
      unint64_t v50 = v43;
      uint64_t v20 = sub_100004AEC(&qword_10099E7B0);
      uint64_t v21 = sub_1000372EC(&qword_10099E7B8, &qword_10099E7B0, (uint64_t)&protocol conformance descriptor for Set<A>);
      Collection<>.contains(_:)(v18, v20, v21, &protocol witness table for Int64);
      swift_bridgeObjectRelease();
      LOBYTE(v50) = 0;
      uint64_t v22 = v40;
      == infix<A>(_:_:)( v5,  &v50,  &type metadata for Bool,  &protocol witness table for Bool,  &protocol witness table for Int64);
      uint64_t v23 = (void (*)(char *, uint64_t))*((void *)v45 + 1);
      uint64_t v24 = v5;
      uint64_t v25 = v47;
      v23(v24, v47);
      uint64_t v45 = v23;
      uint64_t v26 = v46;
      QueryType.filter(_:)(v22, v9, &protocol witness table for Table);
      v23(v22, v25);
      unint64_t v50 = 0LL;
      unint64_t v51 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(43LL);
      swift_bridgeObjectRelease();
      unint64_t v50 = 0xD000000000000028LL;
      unint64_t v51 = 0x8000000100851C00LL;
      v27._uint64_t countAndFlagsBits = countAndFlagsBits;
      v27._object = object;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._uint64_t countAndFlagsBits = 41LL;
      v28._object = (void *)0xE100000000000000LL;
      String.append(_:)(v28);
      unint64_t v29 = v50;
      unint64_t v30 = v51;
      uint64_t v31 = sub_1000372EC( &qword_10099E818,  &qword_10099E6D0,  (uint64_t)&protocol conformance descriptor for Expression<A>);
      ExpressionType.init(literal:)(v29, v30, v25, v31);
      QueryType.filter(_:)(v22, v9, &protocol witness table for Table);
      v45(v22, v25);
      unint64_t v32 = v26;
      uint64_t v33 = v44;
      v44(v32, v9);
      uint64_t v34 = v48;
      QueryType.delete()(v9, &protocol witness table for Table);
      v33(v14, v9);
      a1 = Connection.run(_:)(v34);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v34, v54);
      swift_release();
    }
  }

  else
  {
    unint64_t v35 = sub_100086500();
    uint64_t v36 = swift_allocError(&type metadata for DatabaseError, v35, 0LL, 0LL);
    *(_DWORD *)uint64_t v37 = 2;
    *(_BYTE *)(v37 + 4) = 1;
    swift_willThrow(v36);
  }

  return a1;
}

uint64_t sub_10006F1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v275 = a1;
  uint64_t v231 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  uint64_t v230 = *(void *)(v231 - 8);
  __chkstk_darwin(v231);
  v270 = (char *)&v207 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v266 = sub_100004AEC(&qword_10099E7C0);
  uint64_t v259 = *(void *)(v266 - 8);
  __chkstk_darwin(v266);
  v262 = (char *)&v207 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v5);
  v261 = (char *)&v207 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v260 = type metadata accessor for Date(0LL);
  uint64_t v269 = *(void *)(v260 - 8);
  uint64_t v7 = __chkstk_darwin(v260);
  v251 = (char *)&v207 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v250 = (char *)&v207 - v9;
  uint64_t v255 = sub_100004AEC(&qword_10099E760);
  uint64_t v246 = *(void *)(v255 - 8);
  uint64_t v10 = __chkstk_darwin(v255);
  v263 = (char *)&v207 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v239 = (char *)&v207 - v13;
  __chkstk_darwin(v12);
  uint64_t v238 = (char *)&v207 - v14;
  uint64_t v245 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v237 = *(void *)(v245 - 8);
  __chkstk_darwin(v245);
  uint64_t v244 = (char *)&v207 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v258 = type metadata accessor for UUID(0LL);
  uint64_t v254 = *(void *)(v258 - 8);
  uint64_t v16 = __chkstk_darwin(v258);
  uint64_t v249 = (char *)&v207 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  v257 = (char *)&v207 - v18;
  uint64_t v19 = type metadata accessor for Row(0LL);
  uint64_t v267 = *(void *)(v19 - 8);
  uint64_t v268 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  v265 = (char *)&v207 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v240 = (char *)&v207 - v22;
  uint64_t v23 = sub_100004AEC(&qword_10099E710);
  uint64_t v24 = __chkstk_darwin(v23);
  v264 = (char *)&v207 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  v241 = (char *)&v207 - v26;
  uint64_t v27 = type metadata accessor for Table(0LL);
  uint64_t v253 = *(void *)(v27 - 8);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v243 = (char *)&v207 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v236 = (char *)&v207 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  unint64_t v235 = (char *)&v207 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v242 = (char *)&v207 - v35;
  __chkstk_darwin(v34);
  uint64_t v252 = (char *)&v207 - v36;
  uint64_t v247 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v248 = *(void *)(v247 - 8);
  uint64_t v37 = __chkstk_darwin(v247);
  v233 = (char *)&v207 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = __chkstk_darwin(v37);
  v232 = (char *)&v207 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v234 = (char *)&v207 - v42;
  __chkstk_darwin(v41);
  uint64_t v256 = (char *)&v207 - v43;
  uint64_t v274 = sub_100004AEC(&qword_10099E7C8);
  uint64_t v44 = *(void *)(v274 - 8);
  uint64_t v45 = __chkstk_darwin(v274);
  uint64_t v47 = (char *)&v207 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = __chkstk_darwin(v45);
  unint64_t v50 = (char *)&v207 - v49;
  __chkstk_darwin(v48);
  uint64_t v52 = (char *)&v207 - v51;
  uint64_t v53 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = __chkstk_darwin(v53);
  uint64_t v57 = (char *)&v207 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ContinuousClock.init()(v55);
  uint64_t v271 = a2;
  uint64_t v58 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  uint64_t v272 = v27;
  SchemaType.count.getter(v27, &protocol witness table for Table);
  uint64_t v59 = v273;
  Connection.scalar<A>(_:)(&v277, v52, &type metadata for Int, &protocol witness table for Int);
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v52, v274);
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v57, v53);
  }

  else
  {
    uint64_t v227 = v58;
    uint64_t v273 = v54;
    uint64_t v228 = v57;
    uint64_t v229 = v53;
    uint64_t v61 = *(void (**)(char *, uint64_t))(v44 + 8);
    uint64_t v62 = v274;
    v61(v52, v274);
    uint64_t v63 = v277;
    uint64_t v64 = v271;
    SchemaType.count.getter(v272, &protocol witness table for Table);
    Connection.scalar<A>(_:)(&v277, v50, &type metadata for Int, &protocol witness table for Int);
    uint64_t v225 = (void (*)(char *, uint64_t))v63;
    v61(v50, v62);
    uint64_t v65 = v277;
    uint64_t v66 = v64 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
    SchemaType.count.getter(v272, &protocol witness table for Table);
    Connection.scalar<A>(_:)(&v277, v47, &type metadata for Int, &protocol witness table for Int);
    uint64_t v226 = v66;
    uint64_t v271 = 0LL;
    uint64_t v67 = v272;
    v61(v47, v274);
    uint64_t v68 = v277;
    if (qword_10099B0A8 != -1) {
      swift_once(&qword_10099B0A8, sub_10006C020);
    }
    uint64_t v69 = type metadata accessor for Logger(0LL);
    uint64_t v223 = sub_10000A720(v69, (uint64_t)qword_100A29F68);
    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v223);
    os_log_type_t v71 = static os_log_type_t.default.getter(v70);
    BOOL v72 = os_log_type_enabled(v70, v71);
    uint64_t v73 = (uint64_t)v225;
    if (v72)
    {
      uint64_t v74 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v74 = 134218496;
      uint64_t v277 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v277, v278, v74 + 4, v74 + 12);
      *(_WORD *)(v74 + 12) = 2048;
      uint64_t v277 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v277, v278, v74 + 14, v74 + 22);
      *(_WORD *)(v74 + 22) = 2048;
      uint64_t v277 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v277, v278, v74 + 24, v74 + 32);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "rowCounts: %ld/%ld/%ld", (uint8_t *)v74, 0x20u);
      swift_slowDealloc(v74, -1LL, -1LL);
    }

    v76 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v77 = static os_log_type_t.default.getter(v76);
    BOOL v78 = os_log_type_enabled(v76, v77);
    uint64_t v79 = v229;
    v80 = v270;
    if (v78)
    {
      v81 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Gathering high-value owned observations.", v81, 2u);
      swift_slowDealloc(v81, -1LL, -1LL);
    }

    v281 = &_swiftEmptySetSingleton;
    v82 = v228;
    ((void (*)(void))ContinuousClock.now.getter)();
    v83 = v252;
    if (qword_10099B8E0 != -1) {
      swift_once(&qword_10099B8E0, sub_100751568);
    }
    uint64_t v84 = sub_100004AEC(&qword_10099E6D8);
    uint64_t v85 = sub_10000A720(v84, (uint64_t)qword_100A2B3E8);
    uint64_t v279 = v84;
    v280 = (void *)sub_1000372EC( &qword_10099E7D0,  &qword_10099E6D8,  (uint64_t)&protocol conformance descriptor for Expression<A>);
    uint64_t v86 = sub_10000A7C8(&v277);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v84 - 8) + 16LL))(v86, v85, v84);
    SchemaType.select(distinct:_:)(&v277, _swiftEmptyArrayStorage, v67, &protocol witness table for Table);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v277);
    uint64_t v279 = v67;
    v280 = &protocol witness table for Table;
    v87 = sub_10000A7C8(&v277);
    uint64_t v88 = v253;
    uint64_t v89 = *(void (**)(void *, char *, uint64_t))(v253 + 16);
    v89(v87, v83, v67);
    uint64_t v90 = v271;
    uint64_t v91 = Connection.prepare(_:)(&v277);
    uint64_t v271 = v90;
    if (v90)
    {
      (*(void (**)(char *, uint64_t))(v88 + 8))(v83, v67);
      (*(void (**)(char *, uint64_t))(v248 + 8))(v256, v247);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v273 + 8))(v82, v79);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v277);
    }

    else
    {
      uint64_t v92 = v91;
      uint64_t v216 = (void (*)(void *, uint64_t, uint64_t))v89;
      uint64_t v217 = v85;
      uint64_t v93 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v277);
      uint64_t v94 = dispatch thunk of _AnySequenceBox._makeIterator()(v93);
      swift_release(v92);
      uint64_t v95 = swift_retain();
      uint64_t v96 = v241;
      uint64_t v211 = v94;
      dispatch thunk of _AnyIteratorBoxBase.next()(v95);
      uint64_t v97 = v267;
      uint64_t v98 = v268;
      uint64_t v99 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v267 + 48);
      if (v99(v96, 1LL, v268) == 1)
      {
LABEL_15:
        uint64_t v100 = v211;
        uint64_t v101 = swift_release(v211);
        unint64_t v102 = v234;
        ContinuousClock.now.getter(v101);
        uint64_t v103 = v281;
        uint64_t v104 = v102;
        uint64_t v105 = *(void (**)(char *, char *, uint64_t))(v248 + 16);
        unint64_t v106 = v232;
        uint64_t v107 = v256;
        uint64_t v108 = v247;
        v105(v232, v256, v247);
        uint64_t v109 = v233;
        v105(v233, v104, v108);
        uint64_t v110 = swift_bridgeObjectRetain(v103);
        uint64_t v111 = (os_log_s *)Logger.logObject.getter(v110);
        os_log_type_t v112 = static os_log_type_t.default.getter(v111);
        int v113 = v112;
        if (os_log_type_enabled(v111, v112))
        {
          uint64_t v114 = swift_slowAlloc(22LL, -1LL);
          LODWORD(v274) = v113;
          uint64_t v115 = v114;
          uint64_t v116 = swift_slowAlloc(32LL, -1LL);
          uint64_t v275 = v116;
          *(_DWORD *)uint64_t v115 = 134218242;
          uint64_t v276 = v103[2];
          uint64_t v277 = v116;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v276, &v277, v115 + 4, v115 + 12);
          uint64_t v117 = swift_bridgeObjectRelease();
          *(_WORD *)(v115 + 12) = 2082;
          static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v117);
          uint64_t v118 = sub_100007864( &qword_1009AE520,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
          uint64_t v119 = static Duration.description<A>(_:_:units:)(v106, v109, v80, v108, v118);
          uint64_t v120 = v80;
          unint64_t v122 = v121;
          (*(void (**)(char *, uint64_t))(v230 + 8))(v120, v231);
          uint64_t v276 = sub_1003F11D4(v119, v122, &v277);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v276, &v277, v115 + 14, v115 + 22);
          swift_bridgeObjectRelease();
          uint64_t v123 = *(void (**)(char *, uint64_t))(v248 + 8);
          v123(v106, v108);
          v123(v109, v108);
          _os_log_impl( (void *)&_mh_execute_header,  v111,  (os_log_type_t)v274,  "Found high-value owned observations count: %ld. Duration: %{public}s",  (uint8_t *)v115,  0x16u);
          uint64_t v124 = v275;
          swift_arrayDestroy(v275, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v124, -1LL, -1LL);
          swift_slowDealloc(v115, -1LL, -1LL);
          swift_release(v211);

          v123(v234, v108);
          (*(void (**)(char *, uint64_t))(v253 + 8))(v252, v272);
          v123(v256, v108);
        }

        else
        {

          uint64_t v200 = *(void (**)(char *, uint64_t))(v248 + 8);
          v200(v106, v108);
          v200(v109, v108);
          swift_release(v100);
          swift_bridgeObjectRelease();
          v200(v234, v108);
          (*(void (**)(char *, uint64_t))(v253 + 8))(v252, v272);
          v200(v107, v108);
        }

        (*(void (**)(char *, uint64_t))(v273 + 8))(v228, v229);
        swift_beginAccess(&v281, &v277, 0LL, 0LL);
        return (uint64_t)v281;
      }

      else
      {
        uint64_t v125 = &off_10099B000;
        v126 = *(void (**)(void, void, void))(v97 + 32);
        *((void *)&v127 + 1) = 2LL;
        __int128 v212 = xmmword_1007E67D0;
        *(void *)&__int128 v127 = 141558787LL;
        __int128 v209 = v127;
        v208 = (char *)&type metadata for Any + 8;
        uint64_t v128 = v258;
        uint64_t v129 = v240;
        unint64_t v224 = v99;
        uint64_t v221 = v126;
        while (1)
        {
          v126(v129, v96, v98);
          Row.subscript.getter(v217, v128, &protocol witness table for UUID);
          uint64_t v130 = v272;
          uint64_t v279 = v272;
          v280 = &protocol witness table for Table;
          uint64_t v131 = sub_10000A7C8(&v277);
          v216(v131, v226, v130);
          if (v125[283] != (_UNKNOWN *)-1LL) {
            swift_once(&qword_10099B8D8, sub_1007514DC);
          }
          uint64_t v132 = v255;
          uint64_t v133 = sub_10000A720(v255, (uint64_t)qword_100A2B3D0);
          uint64_t v134 = v238;
          QueryType.subscript.getter(v133, v130);
          v135 = v239;
          uint64_t v274 = v133;
          QueryType.subscript.getter(v133, v130);
          os_log_type_t v136 = v244;
          == infix<A>(_:_:)( v134,  v135,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
          BOOL v137 = *(void (**)(char *, uint64_t))(v246 + 8);
          v137(v135, v132);
          uint64_t v225 = v137;
          v137(v134, v132);
          QueryType.join(_:on:)(&v277, v136, v130, &protocol witness table for Table);
          uint64_t v222 = *(void (**)(char *, uint64_t))(v237 + 8);
          v222(v136, v245);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v277);
          if (qword_10099B970 != -1) {
            swift_once(&qword_10099B970, sub_100751FA0);
          }
          uint64_t v138 = sub_100004AEC(&qword_10099E700);
          uint64_t v139 = sub_10000A720(v138, (uint64_t)qword_100A2B598);
          uint64_t v279 = v266;
          v280 = (void *)sub_1000372EC( &qword_10099E7D8,  &qword_10099E7C0,  (uint64_t)&protocol conformance descriptor for Expression<A>);
          sub_10000A7C8(&v277);
          uint64_t v140 = sub_1000372EC( &qword_10099E708,  &qword_10099E700,  (uint64_t)&protocol conformance descriptor for Expression<A>);
          uint64_t v220 = v138;
          uint64_t v218 = v140;
          uint64_t v219 = v139;
          ExpressionType<>.max.getter(v138);
          uint64_t v141 = sub_100004AEC(&qword_10099E6F8);
          uint64_t v142 = swift_allocObject(v141, 72LL, 7LL);
          *(_OWORD *)(v142 + 16) = v212;
          (*(void (**)(char *, uint64_t, uint64_t))(v246 + 16))(v134, v274, v132);
          *(void *)(v142 + 56) = v132;
          *(void *)(v142 + 64) = sub_1000372EC( &qword_10099E7E0,  &qword_10099E760,  (uint64_t)&protocol conformance descriptor for Expression<A>);
          sub_10000A7C8((void *)(v142 + 32));
          QueryType.subscript.getter(v134, v130);
          v225(v134, v132);
          uint64_t v143 = v236;
          int v144 = v243;
          SchemaType.select(_:_:)(&v277, v142, v130, &protocol witness table for Table);
          swift_bridgeObjectRelease();
          uint64_t v145 = *(void (**)(char *, uint64_t))(v253 + 8);
          uint64_t v146 = v144;
          uint64_t v147 = v143;
          v145(v146, v130);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v277);
          uint64_t v148 = v244;
          == infix<A>(_:_:)(v217, v257, v258, &protocol witness table for UUID, &protocol witness table for String);
          uint64_t v149 = v235;
          QueryType.where(_:)(v148, v130, &protocol witness table for Table);
          v222(v148, v245);
          v145(v147, v130);
          uint64_t v150 = swift_allocObject(v141, 72LL, 7LL);
          *(_OWORD *)(v150 + 16) = v212;
          if (qword_10099B950 != -1) {
            swift_once(&qword_10099B950, sub_100751D64);
          }
          uint64_t v151 = sub_100004AEC(&qword_10099E6E0);
          uint64_t v152 = sub_10000A720(v151, (uint64_t)qword_100A2B538);
          *(void *)(v150 + 56) = v151;
          *(void *)(v150 + 64) = sub_1000372EC( &qword_10099E7E8,  &qword_10099E6E0,  (uint64_t)&protocol conformance descriptor for Expression<A>);
          uint64_t v153 = sub_10000A7C8((void *)(v150 + 32));
          (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v151 - 8) + 16LL))(v153, v152, v151);
          uint64_t v154 = v242;
          QueryType.group(_:)(v150, v130, &protocol witness table for Table);
          swift_bridgeObjectRelease();
          uint64_t v210 = v145;
          v145(v149, v130);
          uint64_t v279 = v130;
          v280 = &protocol witness table for Table;
          uint64_t v155 = sub_10000A7C8(&v277);
          v216(v155, (uint64_t)v154, v130);
          uint64_t v156 = v271;
          uint64_t v157 = Connection.prepare(_:)(&v277);
          uint64_t v271 = v156;
          v159 = v264;
          uint64_t v158 = v265;
          uint64_t v160 = v229;
          uint64_t v98 = v268;
          if (v156)
          {
            uint64_t v205 = v211;
            swift_release(v211);
            uint64_t v206 = v210;
            v210(v154, v130);
            (*(void (**)(char *, uint64_t))(v254 + 8))(v257, v258);
            (*(void (**)(char *, uint64_t))(v267 + 8))(v240, v98);
            v206(v252, v130);
            (*(void (**)(char *, uint64_t))(v248 + 8))(v256, v247);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v273 + 8))(v228, v160);
            swift_release(v205);
            return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v277);
          }

          uint64_t v161 = v157;
          uint64_t v162 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v277);
          uint64_t v163 = dispatch thunk of _AnySequenceBox._makeIterator()(v162);
          swift_release(v161);
          uint64_t v164 = swift_retain();
          uint64_t v222 = (void (*)(char *, uint64_t))v163;
          dispatch thunk of _AnyIteratorBoxBase.next()(v164);
          if (v224(v159, 1LL, v98) != 1) {
            break;
          }
          v80 = v270;
LABEL_27:
          v165 = v222;
          swift_release(v222);
          v210(v242, v130);
          uint64_t v128 = v258;
          (*(void (**)(char *, uint64_t))(v254 + 8))(v257, v258);
          uint64_t v129 = v240;
          (*(void (**)(char *, uint64_t))(v267 + 8))(v240, v98);
          uint64_t v166 = swift_release(v165);
          uint64_t v96 = v241;
          dispatch thunk of _AnyIteratorBoxBase.next()(v166);
          unsigned int v167 = v224(v96, 1LL, v98);
          uint64_t v125 = &off_10099B000;
          v126 = v221;
          if (v167 == 1) {
            goto LABEL_15;
          }
        }

        uint64_t v168 = v255;
        while (1)
        {
          v221(v158, v159, v98);
          v172 = v263;
          QueryType.subscript.getter(v274, v130);
          uint64_t v173 = v271;
          Row.get<A>(_:)(&v277, v172, &type metadata for Int64, &protocol witness table for Int64);
          if (v173) {
            break;
          }
          v225(v172, v168);
          uint64_t v174 = v277;
          v175 = v262;
          ExpressionType<>.max.getter(v220);
          uint64_t v176 = (uint64_t)v261;
          uint64_t v177 = v260;
          Row.get<A>(_:)(v175, v260, &protocol witness table for Date);
          uint64_t v271 = 0LL;
          (*(void (**)(char *, uint64_t))(v259 + 8))(v175, v266);
          uint64_t v178 = v269;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v269 + 48))(v176, 1LL, v177) == 1)
          {
            uint64_t v98 = v268;
            uint64_t v158 = v265;
            (*(void (**)(char *, uint64_t))(v267 + 8))(v265, v268);
            uint64_t v169 = sub_100015794(v176, (uint64_t *)&unk_10099D720);
            uint64_t v170 = (uint64_t (*)(char *, uint64_t, uint64_t))v224;
          }

          else
          {
            uint64_t v179 = v250;
            (*(void (**)(char *, uint64_t, uint64_t))(v178 + 32))(v250, v176, v177);
            uint64_t v180 = v174;
            sub_1000BDCDC(&v277, v174);
            uint64_t v181 = v254;
            uint64_t v182 = v249;
            uint64_t v183 = v258;
            (*(void (**)(char *, char *, uint64_t))(v254 + 16))(v249, v257, v258);
            uint64_t v184 = v251;
            uint64_t v185 = (*(uint64_t (**)(char *, char *, uint64_t))(v178 + 16))(v251, v179, v177);
            uint64_t v186 = (os_log_s *)Logger.logObject.getter(v185);
            os_log_type_t v187 = static os_log_type_t.info.getter(v186);
            int v188 = v187;
            if (os_log_type_enabled(v186, v187))
            {
              uint64_t v189 = swift_slowAlloc(42LL, -1LL);
              uint64_t v214 = v180;
              uint64_t v190 = v189;
              uint64_t v215 = swift_slowAlloc(64LL, -1LL);
              uint64_t v277 = v215;
              *(_DWORD *)uint64_t v190 = v209;
              *(void *)(v190 + 4) = 1752392040LL;
              *(_WORD *)(v190 + 12) = 2081;
              uint64_t v191 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              int v213 = v188;
              uint64_t v192 = dispatch thunk of CustomStringConvertible.description.getter(v183, v191);
              *(void *)(v190 + 14) = sub_1003F11D4(v192, v193, &v277);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v181 + 8))(v182, v183);
              *(_WORD *)(v190 + 22) = 2080;
              uint64_t v194 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
              uint64_t v195 = dispatch thunk of CustomStringConvertible.description.getter(v177, v194);
              *(void *)(v190 + 24) = sub_1003F11D4(v195, v196, &v277);
              swift_bridgeObjectRelease();
              v197 = *(void (**)(char *, uint64_t))(v269 + 8);
              v197(v184, v177);
              *(_WORD *)(v190 + 32) = 2048;
              *(void *)(v190 + 34) = v214;
              _os_log_impl( (void *)&_mh_execute_header,  v186,  (os_log_type_t)v213,  "Adding high-value Owned Observations for beacon: %{private,mask.hash}s, scanDate: %s, advId: %lld.",  (uint8_t *)v190,  0x2Au);
              uint64_t v198 = v215;
              swift_arrayDestroy(v215, 2LL, v208);
              swift_slowDealloc(v198, -1LL, -1LL);
              uint64_t v170 = (uint64_t (*)(char *, uint64_t, uint64_t))v224;
              swift_slowDealloc(v190, -1LL, -1LL);

              v197(v179, v177);
              uint64_t v98 = v268;
              uint64_t v158 = v265;
              uint64_t v169 = (*(uint64_t (**)(char *, uint64_t))(v267 + 8))(v265, v268);
              uint64_t v168 = v255;
            }

            else
            {

              uint64_t v199 = *(void (**)(char *, uint64_t))(v269 + 8);
              v199(v184, v177);
              (*(void (**)(char *, uint64_t))(v181 + 8))(v182, v183);
              v199(v179, v177);
              uint64_t v98 = v268;
              uint64_t v158 = v265;
              uint64_t v169 = (*(uint64_t (**)(char *, uint64_t))(v267 + 8))(v265, v268);
              uint64_t v168 = v255;
              uint64_t v170 = (uint64_t (*)(char *, uint64_t, uint64_t))v224;
            }
          }

          v159 = v264;
          dispatch thunk of _AnyIteratorBoxBase.next()(v169);
          int v171 = v170(v159, 1LL, v98);
          v80 = v270;
          uint64_t v130 = v272;
          if (v171 == 1) {
            goto LABEL_27;
          }
        }

        uint64_t v201 = v211;
        swift_release(v211);
        v202 = v222;
        swift_release(v222);
        v225(v172, v168);
        uint64_t v203 = *(void (**)(char *, uint64_t))(v267 + 8);
        v203(v158, v98);
        v204 = v210;
        v210(v242, v130);
        (*(void (**)(char *, uint64_t))(v254 + 8))(v257, v258);
        v203(v240, v98);
        v204(v252, v130);
        (*(void (**)(char *, uint64_t))(v248 + 8))(v256, v247);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v273 + 8))(v228, v229);
        swift_release(v201);
        return swift_release(v202);
      }
    }
  }

uint64_t sub_100070E28(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_10099E760);
  uint64_t v66 = *(void *)(v6 - 8);
  uint64_t v67 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v62 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v58 = (char *)&v55 - v9;
  uint64_t v10 = type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v65 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11);
  uint64_t v63 = (uint64_t)&v55 - v13;
  uint64_t v14 = sub_100004AEC(&qword_10099E710);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v59 = (char *)&v55 - v18;
  uint64_t v19 = type metadata accessor for Row(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v61 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v56 = (char *)&v55 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v57 = (char *)&v55 - v26;
  uint64_t v27 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v25);
  uint64_t v73 = _swiftEmptyArrayStorage;
  sub_1000329B8(0, v27 & ~(v27 >> 63), 0);
  uint64_t v28 = v73;
  uint64_t v29 = swift_retain();
  uint64_t v68 = dispatch thunk of _AnySequenceBox._makeIterator()(v29);
  uint64_t result = swift_release(a1);
  if (v27 < 0)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }

  uint64_t v64 = a2;
  uint64_t v71 = v20;
  if (v27)
  {
    uint64_t v60 = v19;
    do
    {
      uint64_t v31 = a2;
      dispatch thunk of _AnyIteratorBoxBase.next()(result);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1LL, v19);
      if ((_DWORD)result == 1) {
        goto LABEL_29;
      }
      uint64_t v69 = v3;
      uint64_t v32 = (uint64_t)v61;
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v61, v17, v19);
      if (qword_10099B8D8 != -1) {
        swift_once(&qword_10099B8D8, sub_1007514DC);
      }
      uint64_t v33 = v67;
      uint64_t v34 = sub_10000A720(v67, (uint64_t)qword_100A2B3D0);
      uint64_t v35 = type metadata accessor for Table(0LL);
      uint64_t v36 = v62;
      QueryType.subscript.getter(v34, v35);
      Row.subscript.getter(v36, &type metadata for Int64, &protocol witness table for Int64);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v36, v33);
      uint64_t v37 = v69;
      sub_1000767A4(v32, v72, (uint64_t)v70);
      uint64_t v3 = v37;
      if (v37)
      {
        swift_release(v28);
        swift_release(v68);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v17, v60);
        uint64_t v53 = v31;
        return swift_release(v53);
      }

      uint64_t v19 = v60;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v17, v60);
      uint64_t v28 = v73;
      if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
      {
        sub_1000329B8(0, v28[2] + 1LL, 1);
        uint64_t v28 = v73;
      }

      unint64_t v39 = v28[2];
      unint64_t v38 = v28[3];
      if (v39 >= v38 >> 1)
      {
        sub_1000329B8(v38 > 1, v39 + 1, 1);
        uint64_t v28 = v73;
      }

      v28[2] = v39 + 1;
      uint64_t result = sub_10002218C( (uint64_t)v70,  (uint64_t)v28 + ((*(unsigned __int8 *)(v65 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))
               + *(void *)(v65 + 72) * v39,
                 type metadata accessor for ObservedAdvertisement);
      --v27;
      a2 = v64;
      uint64_t v20 = v71;
    }

    while (v27);
  }

  uint64_t v40 = v3;
  uint64_t v41 = (uint64_t)v59;
  dispatch thunk of _AnyIteratorBoxBase.next()(result);
  uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v70(v41, 1LL, v19) == 1)
  {
LABEL_14:
    swift_release(v68);
    sub_100015794(v41, &qword_10099E710);
    swift_release(a2);
    return (uint64_t)v73;
  }

  else
  {
    uint64_t v69 = *(void (**)(void, void, void))(v20 + 32);
    uint64_t v42 = (uint64_t)v56;
    uint64_t v43 = v57;
    uint64_t v44 = v58;
    while (1)
    {
      v69(v43, v41, v19);
      (*(void (**)(uint64_t, char *, uint64_t))(v71 + 16))(v42, v43, v19);
      if (qword_10099B8D8 != -1) {
        swift_once(&qword_10099B8D8, sub_1007514DC);
      }
      uint64_t v45 = v67;
      uint64_t v46 = sub_10000A720(v67, (uint64_t)qword_100A2B3D0);
      uint64_t v47 = type metadata accessor for Table(0LL);
      QueryType.subscript.getter(v46, v47);
      Row.subscript.getter(v44, &type metadata for Int64, &protocol witness table for Int64);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v44, v45);
      sub_1000767A4(v42, v72, v63);
      if (v40) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v71 + 8))(v43, v19);
      uint64_t v48 = v73;
      if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
      {
        sub_1000329B8(0, v48[2] + 1LL, 1);
        uint64_t v48 = v73;
      }

      uint64_t v40 = 0LL;
      unint64_t v50 = v48[2];
      unint64_t v49 = v48[3];
      if (v50 >= v49 >> 1)
      {
        sub_1000329B8(v49 > 1, v50 + 1, 1);
        uint64_t v48 = v73;
      }

      v48[2] = v50 + 1;
      uint64_t v51 = sub_10002218C( v63,  (uint64_t)v48 + ((*(unsigned __int8 *)(v65 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))
            + *(void *)(v65 + 72) * v50,
              type metadata accessor for ObservedAdvertisement);
      uint64_t v41 = (uint64_t)v59;
      dispatch thunk of _AnyIteratorBoxBase.next()(v51);
      int v52 = v70(v41, 1LL, v19);
      a2 = v64;
      if (v52 == 1) {
        goto LABEL_14;
      }
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v43, v19);
    swift_release(v68);
    uint64_t v54 = v73;
    swift_release(a2);
    uint64_t v53 = v54;
    return swift_release(v53);
  }

uint64_t sub_1000714E4(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = a1;
  uint64_t v4 = type metadata accessor for DeviceEvent(0LL);
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5);
  uint64_t v45 = (uint64_t *)((char *)&v42 - v8);
  uint64_t v9 = sub_100004AEC(&qword_10099E710);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v50 = (char *)&v42 - v13;
  uint64_t v14 = type metadata accessor for Row(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v47 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v44 = (char *)&v42 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v43 = (char *)&v42 - v21;
  uint64_t v22 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v20);
  int v52 = _swiftEmptyArrayStorage;
  sub_100032A58(0, v22 & ~(v22 >> 63), 0);
  uint64_t v23 = swift_retain();
  uint64_t v51 = dispatch thunk of _AnySequenceBox._makeIterator()(v23);
  uint64_t result = swift_release();
  if (v22 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }

  uint64_t v48 = a2;
  if (v22)
  {
    uint64_t v46 = v7;
    do
    {
      dispatch thunk of _AnyIteratorBoxBase.next()(result);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1LL, v14);
      if ((_DWORD)result == 1) {
        goto LABEL_25;
      }
      uint64_t v25 = (uint64_t)v47;
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v47, v12, v14);
      swift_retain();
      sub_10007FF54(v25, a2, v7);
      if (v2)
      {
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
        return swift_release();
      }

      (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
      uint64_t v26 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
      {
        sub_100032A58(0, v26[2] + 1LL, 1);
        uint64_t v26 = v52;
      }

      unint64_t v28 = v26[2];
      unint64_t v27 = v26[3];
      if (v28 >= v27 >> 1)
      {
        sub_100032A58(v27 > 1, v28 + 1, 1);
        uint64_t v26 = v52;
      }

      _OWORD v26[2] = v28 + 1;
      uint64_t v7 = v46;
      uint64_t result = sub_10002218C( (uint64_t)v46,  (uint64_t)v26 + ((*(unsigned __int8 *)(v49 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))
               + *(void *)(v49 + 72) * v28,
                 type metadata accessor for DeviceEvent);
      --v22;
      a2 = v48;
    }

    while (v22);
  }

  dispatch thunk of _AnyIteratorBoxBase.next()(result);
  uint64_t v29 = (uint64_t)v50;
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v30(v50, 1LL, v14) == 1)
  {
LABEL_12:
    swift_release();
    sub_100015794(v29, &qword_10099E710);
    swift_release();
    return (uint64_t)v52;
  }

  else
  {
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 32);
    uint64_t v32 = v45;
    uint64_t v33 = v43;
    while (1)
    {
      v31(v33, v29, v14);
      uint64_t v34 = (uint64_t)v44;
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v33, v14);
      swift_retain();
      sub_10007FF54(v34, a2, v32);
      if (v2) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v15 + 8))(v33, v14);
      uint64_t v35 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
      {
        sub_100032A58(0, v35[2] + 1LL, 1);
        uint64_t v35 = v52;
      }

      unint64_t v37 = v35[2];
      unint64_t v36 = v35[3];
      if (v37 >= v36 >> 1)
      {
        sub_100032A58(v36 > 1, v37 + 1, 1);
        uint64_t v35 = v52;
      }

      v35[2] = v37 + 1;
      uint64_t v38 = (uint64_t)v35
      uint64_t v32 = v45;
      uint64_t v39 = sub_10002218C((uint64_t)v45, v38, type metadata accessor for DeviceEvent);
      uint64_t v40 = v50;
      dispatch thunk of _AnyIteratorBoxBase.next()(v39);
      uint64_t v29 = (uint64_t)v40;
      int v41 = v30(v40, 1LL, v14);
      a2 = v48;
      if (v41 == 1) {
        goto LABEL_12;
      }
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v33, v14);
    swift_release();
    swift_release();
    return swift_release();
  }

uint64_t sub_1000719BC(uint64_t a1)
{
  uint64_t v554 = type metadata accessor for Delete(0LL);
  uint64_t v553 = *(void *)(v554 - 8);
  __chkstk_darwin(v554);
  v570 = (char *)&v498 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_10099E770);
  __chkstk_darwin(v3);
  uint64_t v546 = (uint64_t)&v498 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v610 = type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v592 = *(void *)(v610 - 8);
  uint64_t v5 = __chkstk_darwin(v610);
  uint64_t v590 = (uint64_t)&v498 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  v595 = (char *)&v498 - v7;
  uint64_t v618 = type metadata accessor for Date(0LL);
  uint64_t v605 = *(void *)(v618 - 8);
  uint64_t v8 = __chkstk_darwin(v618);
  v585 = (char *)&v498 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  v579 = (char *)&v498 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v578 = (char *)&v498 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v543 = (char *)&v498 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v544 = (char *)&v498 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v541 = (char *)&v498 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v549 = (char *)&v498 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v498 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  v545 = (char *)&v498 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v558 = (char *)&v498 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v498 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  v551 = (char *)&v498 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v569 = (char *)&v498 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v498 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  v568 = (char *)&v498 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v609 = (char *)&v498 - v42;
  __chkstk_darwin(v41);
  v593 = (char *)&v498 - v43;
  uint64_t v44 = sub_100004AEC(&qword_10099FB70);
  uint64_t v45 = __chkstk_darwin(v44);
  uint64_t v588 = (uint64_t)&v498 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v45);
  uint64_t v612 = (uint64_t)&v498 - v47;
  uint64_t v575 = type metadata accessor for JoinType(0LL);
  uint64_t v574 = *(void *)(v575 - 8);
  __chkstk_darwin(v575);
  v566 = (char *)&v498 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v582 = sub_100004AEC(&qword_10099E760);
  uint64_t v565 = *(void *)(v582 - 8);
  uint64_t v49 = __chkstk_darwin(v582);
  v564 = (char *)&v498 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v49);
  v581 = (char *)&v498 - v51;
  uint64_t v611 = type metadata accessor for Row(0LL);
  uint64_t v603 = *(void *)(v611 - 8);
  uint64_t v52 = __chkstk_darwin(v611);
  v589 = (char *)&v498 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = __chkstk_darwin(v52);
  v594 = (char *)&v498 - v55;
  __chkstk_darwin(v54);
  v577 = (char *)&v498 - v56;
  uint64_t v57 = sub_100004AEC(&qword_10099E710);
  uint64_t v58 = __chkstk_darwin(v57);
  v591 = (char *)&v498 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = __chkstk_darwin(v58);
  v547 = (char *)&v498 - v61;
  __chkstk_darwin(v60);
  v576 = (char *)&v498 - v62;
  uint64_t v63 = type metadata accessor for Logger(0LL);
  uint64_t v587 = *(void *)(v63 - 8);
  uint64_t v64 = __chkstk_darwin(v63);
  v550 = (char *)&v498 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = __chkstk_darwin(v64);
  v556 = (char *)&v498 - v67;
  uint64_t v68 = __chkstk_darwin(v66);
  v555 = (char *)&v498 - v69;
  uint64_t v70 = __chkstk_darwin(v68);
  v584 = (char *)&v498 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  v542 = (char *)&v498 - v73;
  uint64_t v74 = __chkstk_darwin(v72);
  v548 = (char *)&v498 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  v557 = (char *)&v498 - v77;
  uint64_t v78 = __chkstk_darwin(v76);
  v572 = (char *)&v498 - v79;
  uint64_t v80 = __chkstk_darwin(v78);
  v559 = (char *)&v498 - v81;
  uint64_t v82 = __chkstk_darwin(v80);
  v540 = (char *)&v498 - v83;
  uint64_t v84 = __chkstk_darwin(v82);
  v571 = (char *)&v498 - v85;
  uint64_t v86 = __chkstk_darwin(v84);
  v567 = (char *)&v498 - v87;
  __chkstk_darwin(v86);
  v586 = (char *)&v498 - v88;
  uint64_t v602 = sub_100004AEC(&qword_10099E780);
  uint64_t v614 = *(void *)(v602 - 8);
  __chkstk_darwin(v602);
  v598 = (char *)&v498 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v600 = sub_100004AEC(&qword_10099E7C8);
  uint64_t v599 = *(void *)(v600 - 8);
  uint64_t v90 = __chkstk_darwin(v600);
  v580 = (char *)&v498 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v90);
  v606 = (char *)&v498 - v92;
  uint64_t v621 = sub_100004AEC(&qword_10099E7A0);
  uint64_t v597 = *(void *)(v621 - 8);
  __chkstk_darwin(v621);
  v601 = (char *)&v498 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = sub_100004AEC(&qword_10099E6D0);
  v596 = *(void (**)(char *, uint64_t))(v94 - 8);
  uint64_t v95 = __chkstk_darwin(v94);
  v563 = (char *)&v498 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = __chkstk_darwin(v95);
  v562 = (char *)&v498 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  v561 = (char *)&v498 - v100;
  __chkstk_darwin(v99);
  unint64_t v102 = (char *)&v498 - v101;
  uint64_t v615 = type metadata accessor for Table(0LL);
  v607 = *(void (**)(char *, uint64_t))(v615 - 8);
  uint64_t v103 = __chkstk_darwin(v615);
  v560 = (char *)&v498 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v105 = __chkstk_darwin(v103);
  v573 = (char *)&v498 - v106;
  uint64_t v107 = __chkstk_darwin(v105);
  v583 = (char *)&v498 - v108;
  uint64_t v109 = __chkstk_darwin(v107);
  v604 = (char *)&v498 - v110;
  uint64_t v111 = __chkstk_darwin(v109);
  v608 = (char *)&v498 - v112;
  __chkstk_darwin(v111);
  v616 = (char *)&v498 - v113;
  if (qword_10099B0A8 != -1) {
    swift_once(&qword_10099B0A8, sub_10006C020);
  }
  uint64_t v613 = sub_10000A720(v63, (uint64_t)qword_100A29F68);
  uint64_t v114 = (os_log_s *)Logger.logObject.getter(v613);
  os_log_type_t v115 = static os_log_type_t.default.getter(v114);
  if (os_log_type_enabled(v114, v115))
  {
    uint64_t v116 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v617 = v94;
    uint64_t v620 = v63;
    uint64_t v117 = v38;
    uint64_t v118 = a1;
    uint64_t v119 = v116;
    *(_WORD *)uint64_t v116 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v114,  v115,  "Decimation - starting to decimate low-value observations.",  v116,  2u);
    uint64_t v120 = v119;
    a1 = v118;
    uint64_t v38 = v117;
    uint64_t v63 = v620;
    uint64_t v94 = v617;
    swift_slowDealloc(v120, -1LL, -1LL);
  }

  v552 = v31;

  uint64_t v121 = sub_100474DE0();
  if (!v121)
  {
    unint64_t v127 = sub_100086500();
    uint64_t v128 = swift_allocError(&type metadata for DatabaseError, v127, 0LL, 0LL);
    *(_DWORD *)uint64_t v129 = 2;
    *(_BYTE *)(v129 + 4) = 1;
    return swift_willThrow(v128);
  }

  uint64_t v122 = v121;
  v538 = v38;
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v123 = v619;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v124 = sub_1006A0C00(v625);
  swift_bridgeObjectRelease();
  uint64_t v125 = sub_10006F1CC(v122, a1);
  if (v123) {
    return swift_release();
  }
  uint64_t v530 = v124;
  uint64_t v534 = v125;
  uint64_t v539 = v122;
  uint64_t v619 = 0LL;
  uint64_t v620 = v63;
  v526 = v24;
  uint64_t v527 = a1;
  uint64_t v130 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  if (qword_10099B940 != -1) {
    swift_once(&qword_10099B940, sub_100751C44);
  }
  uint64_t v131 = v602;
  uint64_t v132 = sub_10000A720(v602, (uint64_t)qword_100A2B508);
  uint64_t v627 = v131;
  uint64_t v532 = sub_1000372EC(&qword_10099E838, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  v628 = (void *)v532;
  uint64_t v133 = sub_10000A7C8(&v625);
  v531 = *(void (**)(void *, uint64_t, uint64_t))(v614 + 16);
  v531(v133, v132, v131);
  uint64_t v134 = v604;
  uint64_t v135 = v615;
  SchemaType.select(_:_:)(&v625, _swiftEmptyArrayStorage, v615, &protocol witness table for Table);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
  uint64_t v533 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  os_log_type_t v136 = v601;
  ExpressionType<>.length.getter(v131, v533);
  uint64_t v625 = 28LL;
  == infix<A>(_:_:)( v136,  &v625,  &type metadata for Int,  &protocol witness table for Int,  &protocol witness table for Int64);
  uint64_t v597 = *(void *)(v597 + 8);
  ((void (*)(char *, uint64_t))v597)(v136, v621);
  uint64_t v536 = v130;
  BOOL v137 = v608;
  QueryType.filter(_:)(v102, v135, &protocol witness table for Table);
  v535 = (void (*)(char *, uint64_t))*((void *)v596 + 1);
  v535(v102, v94);
  uint64_t v617 = v94;
  uint64_t v138 = (void (*)(char *, uint64_t))*((void *)v607 + 1);
  v138(v134, v135);
  v596 = v138;
  uint64_t v529 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v139 = swift_allocObject(v529, 72LL, 7LL);
  __int128 v528 = xmmword_1007E67D0;
  *(_OWORD *)(v139 + 16) = xmmword_1007E67D0;
  uint64_t v140 = v532;
  *(void *)(v139 + 56) = v131;
  *(void *)(v139 + 64) = v140;
  uint64_t v141 = sub_10000A7C8((void *)(v139 + 32));
  uint64_t v537 = v132;
  v531(v141, v132, v131);
  QueryType.group(_:)(v139, v135, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v138(v137, v135);
  uint64_t v142 = v533;
  ExpressionType<>.length.getter(v131, v533);
  uint64_t v625 = 28LL;
  == infix<A>(_:_:)( v136,  &v625,  &type metadata for Int,  &protocol witness table for Int,  &protocol witness table for Int64);
  ((void (*)(char *, uint64_t))v597)(v136, v621);
  QueryType.filter(_:)(v102, v135, &protocol witness table for Table);
  uint64_t v532 = (uint64_t)v102;
  v535(v102, v617);
  uint64_t v143 = v598;
  ExpressionType<>.distinct.getter(v131, v142, &protocol witness table for Data);
  ExpressionType<>.count.getter(v131, v142, &protocol witness table for Data);
  (*(void (**)(char *, uint64_t))(v614 + 8))(v143, v131);
  int v144 = v606;
  SchemaType.select<A>(_:)( v136,  v135,  &type metadata for Int,  &protocol witness table for Table,  &protocol witness table for Int);
  ((void (*)(char *, uint64_t))v597)(v136, v621);
  uint64_t v145 = (uint64_t (*)(char *, uint64_t))v596;
  v596(v137, v135);
  uint64_t v146 = v619;
  Connection.scalar<A>(_:)(&v625, v144, &type metadata for Int, &protocol witness table for Int);
  if (v146)
  {
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v599 + 8))(v144, v600);
    return v145(v616, v135);
  }

  uint64_t v147 = v625;
  uint64_t v148 = v587;
  uint64_t v149 = v586;
  uint64_t v150 = v620;
  uint64_t v614 = *(void *)(v587 + 16);
  uint64_t v151 = ((uint64_t (*)(char *, uint64_t, uint64_t))v614)(v586, v613, v620);
  uint64_t v152 = (os_log_s *)Logger.logObject.getter(v151);
  os_log_type_t v153 = static os_log_type_t.info.getter(v152);
  if (os_log_type_enabled(v152, v153))
  {
    uint64_t v154 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v154 = 134217984;
    uint64_t v149 = v586;
    uint64_t v150 = v620;
    uint64_t v625 = v147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v625, &v626, v154 + 4, v154 + 12);
    _os_log_impl((void *)&_mh_execute_header, v152, v153, "Decimation - uniqueAdvertisements count: %ld.", v154, 0xCu);
    uint64_t v155 = v154;
    uint64_t v148 = v587;
    swift_slowDealloc(v155, -1LL, -1LL);
  }

  uint64_t v156 = *(void (**)(char *, uint64_t))(v148 + 8);
  v156(v149, v150);
  uint64_t v627 = v135;
  v628 = &protocol witness table for Table;
  uint64_t v157 = sub_10000A7C8(&v625);
  uint64_t v158 = (void (*)(char *, uint64_t, uint64_t))*((void *)v607 + 2);
  v158((char *)v157, (uint64_t)v616, v135);
  Connection.prepare(_:)(&v625);
  uint64_t v159 = v611;
  v518 = v158;
  uint64_t v160 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
  uint64_t v161 = dispatch thunk of _AnySequenceBox._makeIterator()(v160);
  swift_release();
  uint64_t v162 = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
  uint64_t v163 = swift_retain();
  uint64_t v164 = v576;
  dispatch thunk of _AnyIteratorBoxBase.next()(v163);
  swift_release();
  uint64_t v165 = v603;
  uint64_t v166 = v159;
  uint64_t v587 = *(void *)(v603 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v587)(v164, 1LL, v159) == 1)
  {
LABEL_18:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v599 + 8))(v606, v600);
    return ((uint64_t (*)(char *, uint64_t))v596)(v616, v615);
  }

  v607 = v156;
  uint64_t v506 = v527 + v162;
  v521 = &v625;
  uint64_t v168 = *(void (**)(char *, char *, uint64_t))(v165 + 32);
  unsigned int v505 = enum case for JoinType.leftOuter(_:);
  v499 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v167 = 141558275LL;
  __int128 v504 = v167;
  *(void *)&__int128 v167 = 134218499LL;
  __int128 v510 = v167;
  *(void *)&__int128 v167 = 134218755LL;
  __int128 v500 = v167;
  *(void *)&__int128 v167 = 141558787LL;
  __int128 v511 = v167;
  *(void *)&__int128 v167 = 134219011LL;
  __int128 v503 = v167;
  uint64_t v169 = v576;
  uint64_t v170 = v537;
  uint64_t v171 = v166;
  uint64_t v507 = v161;
  v525 = v168;
  while (1)
  {
    v168(v577, v169, v171);
    Row.get<A>(_:)(&v625, v170, &type metadata for Data, &protocol witness table for Data);
    uint64_t v173 = v625;
    uint64_t v172 = v626;
    sub_10001736C(v625, v626);
    unint64_t v519 = v172;
    sub_100178C64(6LL, v173, v172);
    uint64_t v174 = v625;
    unint64_t v175 = v626;
    uint64_t v176 = Data.hexString.getter(v625, v626);
    unint64_t v178 = v177;
    sub_100016F9C(v174, v175);
    uint64_t v179 = v567;
    uint64_t v180 = v620;
    ((void (*)(char *, uint64_t, uint64_t))v614)(v567, v613, v620);
    uint64_t v181 = swift_bridgeObjectRetain_n(v178, 2LL);
    uint64_t v182 = (os_log_s *)Logger.logObject.getter(v181);
    os_log_type_t v183 = static os_log_type_t.info.getter(v182);
    BOOL v184 = os_log_type_enabled(v182, v183);
    v598 = (char *)v178;
    uint64_t v619 = 0LL;
    uint64_t v520 = v173;
    uint64_t v522 = v176;
    if (v184)
    {
      uint64_t v185 = swift_slowAlloc(22LL, -1LL);
      uint64_t v186 = swift_slowAlloc(32LL, -1LL);
      v586 = (char *)v186;
      *(_DWORD *)uint64_t v185 = v504;
      uint64_t v624 = 1752392040LL;
      uint64_t v625 = v186;
      os_log_type_t v187 = v521;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v185 + 4, v185 + 12);
      *(_WORD *)(v185 + 12) = 2081;
      swift_bridgeObjectRetain(v178);
      *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v176, v178, &v625));
      uint64_t v188 = v180;
      uint64_t v189 = v537;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v187, v185 + 14, v185 + 22);
      swift_bridgeObjectRelease_n(v178, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v182,  v183,  "Decimation - advertisementRow decimation within advertisement: %{private,mask.hash}s.",  (uint8_t *)v185,  0x16u);
      uint64_t v190 = v586;
      swift_arrayDestroy(v586, 1LL, v499);
      uint64_t v191 = v190;
      uint64_t v173 = v520;
      swift_slowDealloc(v191, -1LL, -1LL);
      swift_slowDealloc(v185, -1LL, -1LL);

      v607(v179, v188);
      uint64_t v192 = v532;
      unint64_t v193 = v608;
    }

    else
    {

      swift_bridgeObjectRelease_n(v178, 2LL);
      v607(v179, v180);
      uint64_t v192 = v532;
      unint64_t v193 = v608;
      uint64_t v189 = v537;
    }

    uint64_t v625 = v173;
    unint64_t v626 = v519;
    v531 = (void (*)(void *, uint64_t, uint64_t))sub_100007864( &qword_10099E840,  (uint64_t (*)(uint64_t))&type metadata accessor for Blob,  (uint64_t)&protocol conformance descriptor for Blob);
    == infix<A>(_:_:)(v189, &v625, &type metadata for Data, &protocol witness table for Data, v531);
    uint64_t v194 = v615;
    QueryType.filter(_:)(v192, v615, &protocol witness table for Table);
    v535((char *)v192, v617);
    uint64_t v195 = swift_allocObject(v529, 72LL, 7LL);
    *(_OWORD *)(v195 + 16) = v528;
    if (qword_10099B970 != -1) {
      swift_once(&qword_10099B970, sub_100751FA0);
    }
    uint64_t v196 = sub_100004AEC(&qword_10099E700);
    sub_10000A720(v196, (uint64_t)qword_100A2B598);
    uint64_t v197 = sub_1000372EC( &qword_10099E708,  &qword_10099E700,  (uint64_t)&protocol conformance descriptor for Expression<A>);
    ExpressionType.desc.getter(v196, v197);
    QueryType.order(_:)(v195, v194, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    uint64_t v198 = v596;
    v596(v193, v194);
    uint64_t v625 = v520;
    unint64_t v626 = v519;
    == infix<A>(_:_:)(v537, &v625, &type metadata for Data, &protocol witness table for Data, v531);
    QueryType.filter(_:)(v192, v194, &protocol witness table for Table);
    v535((char *)v192, v617);
    uint64_t v199 = v601;
    ExpressionType<>.count.getter(v602, v533, &protocol witness table for Data);
    uint64_t v200 = v580;
    SchemaType.select<A>(_:)( v199,  v194,  &type metadata for Int,  &protocol witness table for Table,  &protocol witness table for Int);
    ((void (*)(char *, uint64_t))v597)(v199, v621);
    v198(v193, v194);
    uint64_t v201 = v619;
    Connection.scalar<A>(_:)(&v625, v200, &type metadata for Int, &protocol witness table for Int);
    if (v201) {
      break;
    }
    uint64_t v202 = v625;
    uint64_t v203 = v571;
    uint64_t v204 = v620;
    ((void (*)(char *, uint64_t, uint64_t))v614)(v571, v613, v620);
    unint64_t v205 = (unint64_t)v598;
    uint64_t v206 = swift_bridgeObjectRetain_n(v598, 2LL);
    uint64_t v207 = (os_log_s *)Logger.logObject.getter(v206);
    os_log_type_t v208 = static os_log_type_t.info.getter(v207);
    BOOL v209 = os_log_type_enabled(v207, v208);
    uint64_t v513 = v202;
    if (v209)
    {
      uint64_t v210 = swift_slowAlloc(32LL, -1LL);
      uint64_t v211 = swift_slowAlloc(32LL, -1LL);
      uint64_t v624 = v202;
      uint64_t v625 = v211;
      *(_DWORD *)uint64_t v210 = v510;
      __int128 v212 = v521;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v210 + 4, v210 + 12);
      *(_WORD *)(v210 + 12) = 2160;
      uint64_t v624 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v212, v210 + 14, v210 + 22);
      *(_WORD *)(v210 + 22) = 2081;
      swift_bridgeObjectRetain(v205);
      *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v522, v205, &v625));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v212, v210 + 24, v210 + 32);
      swift_bridgeObjectRelease_n(v205, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v207,  v208,  "Decimation - byAdvertisement start count: %ld within advertisement: %{private,mask.hash}s.",  (uint8_t *)v210,  0x20u);
      swift_arrayDestroy(v211, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v211, -1LL, -1LL);
      swift_slowDealloc(v210, -1LL, -1LL);

      int v213 = v571;
    }

    else
    {

      swift_bridgeObjectRelease_n(v205, 2LL);
      int v213 = v203;
    }

    v607(v213, v204);
    uint64_t v619 = 0LL;
    if (qword_10099B8D8 != -1) {
      swift_once(&qword_10099B8D8, sub_1007514DC);
    }
    uint64_t v214 = sub_10000A720(v582, (uint64_t)qword_100A2B3D0);
    uint64_t v215 = v581;
    uint64_t v216 = v615;
    QueryType.subscript.getter(v214, v615);
    uint64_t v217 = v566;
    (*(void (**)(char *, void, uint64_t))(v574 + 104))(v566, v505, v575);
    uint64_t v627 = v216;
    v628 = &protocol witness table for Table;
    uint64_t v218 = (char *)sub_10000A7C8(&v625);
    v518(v218, v506, v216);
    uint64_t v219 = v564;
    v586 = (char *)v214;
    QueryType.subscript.getter(v214, v216);
    uint64_t v220 = v532;
    == infix<A>(_:_:)( v215,  v219,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
    v512 = *(void (**)(char *, uint64_t))(v565 + 8);
    v512(v219, v582);
    uint64_t v221 = v560;
    QueryType.join(_:_:on:)(v217, &v625, v220, v216, &protocol witness table for Table);
    uint64_t v222 = v617;
    uint64_t v223 = v535;
    v535((char *)v220, v617);
    (*(void (**)(char *, uint64_t))(v574 + 8))(v217, v575);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
    uint64_t v625 = v520;
    unint64_t v626 = v519;
    unint64_t v224 = v561;
    == infix<A>(_:_:)(v537, &v625, &type metadata for Data, &protocol witness table for Data, v531);
    uint64_t v625 = v534;
    uint64_t v225 = sub_100004AEC(&qword_10099E7B0);
    uint64_t v226 = sub_1000372EC(&qword_10099E7B8, &qword_10099E7B0, (uint64_t)&protocol conformance descriptor for Set<A>);
    uint64_t v227 = v563;
    uint64_t v509 = v225;
    uint64_t v508 = v226;
    Collection<>.contains(_:)(v581, v225, v226, &protocol witness table for Int64);
    LOBYTE(v625) = 0;
    uint64_t v228 = v562;
    == infix<A>(_:_:)( v227,  &v625,  &type metadata for Bool,  &protocol witness table for Bool,  &protocol witness table for Int64);
    v223(v227, v222);
    && infix(_:_:)(v224, v228);
    v223(v228, v222);
    v223(v224, v222);
    uint64_t v229 = v604;
    QueryType.filter(_:)(v220, v216, &protocol witness table for Table);
    v223((char *)v220, v222);
    uint64_t v230 = v596;
    v596(v221, v216);
    uint64_t v231 = swift_allocObject(v529, 72LL, 7LL);
    *(_OWORD *)(v231 + 16) = v528;
    if (qword_10099B998 != -1) {
      swift_once(&qword_10099B998, sub_100752278);
    }
    uint64_t v232 = sub_100004AEC(&qword_10099E778);
    uint64_t v233 = sub_10000A720(v232, (uint64_t)qword_100A2B610);
    uint64_t v234 = sub_1000372EC( &qword_10099E848,  &qword_10099E778,  (uint64_t)&protocol conformance descriptor for Expression<A>);
    ExpressionType.desc.getter(v232, v234);
    unint64_t v235 = v608;
    QueryType.order(_:)(v231, v216, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    v230(v229, v216);
    uint64_t v236 = v573;
    QueryType.limit(_:offset:)(1LL, v513 / 2, v216, &protocol witness table for Table);
    v230(v235, v216);
    uint64_t v627 = v216;
    v628 = &protocol witness table for Table;
    uint64_t v237 = (char *)sub_10000A7C8(&v625);
    v518(v237, (uint64_t)v236, v216);
    uint64_t v238 = v619;
    Connection.prepare(_:)(&v625);
    uint64_t v239 = v620;
    uint64_t v240 = v611;
    if (v238)
    {
      swift_errorRelease(v238);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
LABEL_37:
      uint64_t v244 = v559;
      uint64_t v619 = 0LL;
      ((void (*)(char *, uint64_t, uint64_t))v614)(v559, v613, v239);
      unint64_t v245 = (unint64_t)v598;
      uint64_t v246 = swift_bridgeObjectRetain_n(v598, 2LL);
      uint64_t v247 = (os_log_s *)Logger.logObject.getter(v246);
      os_log_type_t v248 = static os_log_type_t.info.getter(v247);
      if (os_log_type_enabled(v247, v248))
      {
        uint64_t v249 = swift_slowAlloc(22LL, -1LL);
        unint64_t v250 = v244;
        uint64_t v251 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v249 = v504;
        uint64_t v624 = 1752392040LL;
        uint64_t v625 = v251;
        uint64_t v252 = v521;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v249 + 4, v249 + 12);
        *(_WORD *)(v249 + 12) = 2081;
        swift_bridgeObjectRetain(v245);
        *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v522, v245, &v625));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v252, v249 + 14, v249 + 22);
        swift_bridgeObjectRelease_n(v245, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v247,  v248,  "Decimation - not found - lowerHalfMedianAccuracy: decimating all lower or equal,\n within advertisement: %{private,mask.hash}s.",  (uint8_t *)v249,  0x16u);
        swift_arrayDestroy(v251, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v251, -1LL, -1LL);
        swift_slowDealloc(v249, -1LL, -1LL);

        uint64_t v253 = v250;
      }

      else
      {

        swift_bridgeObjectRelease_n(v245, 2LL);
        uint64_t v253 = v244;
      }

      v607(v253, v239);
      double v254 = 0.0;
      goto LABEL_41;
    }

    uint64_t v241 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
    dispatch thunk of _AnySequenceBox._makeIterator()(v241);
    uint64_t v242 = swift_release();
    uint64_t v243 = (uint64_t)v547;
    dispatch thunk of _AnyIteratorBoxBase.next()(v242);
    swift_release();
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v587)(v243, 1LL, v240) == 1)
    {
      sub_100015794(v243, &qword_10099E710);
      goto LABEL_37;
    }

    Row.get<A>(_:)(&v624, v233, &type metadata for Double, &protocol witness table for Double);
    uint64_t v619 = 0LL;
    (*(void (**)(uint64_t, uint64_t))(v603 + 8))(v243, v240);
    double v254 = *(double *)&v624;
    v476 = v540;
    ((void (*)(char *, uint64_t, uint64_t))v614)(v540, v613, v239);
    unint64_t v477 = (unint64_t)v598;
    uint64_t v478 = swift_bridgeObjectRetain_n(v598, 2LL);
    v479 = (os_log_s *)Logger.logObject.getter(v478);
    os_log_type_t v480 = static os_log_type_t.info.getter(v479);
    if (os_log_type_enabled(v479, v480))
    {
      uint64_t v481 = swift_slowAlloc(32LL, -1LL);
      uint64_t v482 = swift_slowAlloc(32LL, -1LL);
      uint64_t v625 = v482;
      *(_DWORD *)uint64_t v481 = v510;
      *(double *)&uint64_t v624 = v254;
      v483 = v521;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v481 + 4, v481 + 12);
      *(_WORD *)(v481 + 12) = 2160;
      uint64_t v624 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v483, v481 + 14, v481 + 22);
      *(_WORD *)(v481 + 22) = 2081;
      swift_bridgeObjectRetain(v477);
      *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v522, v477, &v625));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v483, v481 + 24, v481 + 32);
      swift_bridgeObjectRelease_n(v477, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v479,  v480,  "Decimation - found - lowerHalfMedianAccuracy: %f,\nwithin advertisement: %{private,mask.hash}s.",  (uint8_t *)v481,  0x20u);
      swift_arrayDestroy(v482, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v482, -1LL, -1LL);
      swift_slowDealloc(v481, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v477, 2LL);
    }

    v607(v476, v239);
LABEL_41:
    uint64_t v255 = (uint64_t)v595;
    uint64_t v256 = v594;
    uint64_t v257 = v592;
    uint64_t v258 = swift_allocObject(&unk_10093B098, 24LL, 7LL);
    uint64_t v515 = v258;
    *(void *)(v258 + 16) = &_swiftEmptySetSingleton;
    v516 = (uint64_t *)(v258 + 16);
    uint64_t v259 = swift_allocObject(&unk_10093B098, 24LL, 7LL);
    *(void *)(v259 + 16) = &_swiftEmptySetSingleton;
    v523 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v257 + 56);
    uint64_t v260 = v523(v612, 1LL, 1LL, v610);
    static Date.distantPast.getter(v260);
    uint64_t v261 = v615;
    uint64_t v627 = v615;
    v628 = &protocol witness table for Table;
    v262 = (char *)sub_10000A7C8(&v625);
    v518(v262, (uint64_t)v583, v261);
    uint64_t v263 = v619;
    Connection.prepare(_:)(&v625);
    if (v263)
    {
      swift_bridgeObjectRelease();
      swift_release();
      sub_100016F9C(v520, v519);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v605 + 8))(v593, v618);
      sub_100015794(v612, &qword_10099FB70);
      uint64_t v491 = v615;
      v492 = v596;
      v596(v573, v615);
      v512(v581, v582);
      v493 = *(void (**)(char *, uint64_t))(v599 + 8);
      uint64_t v494 = v600;
      v493(v580, v600);
      v492(v583, v491);
      (*(void (**)(char *, uint64_t))(v603 + 8))(v577, v611);
      swift_release();
      v493(v606, v494);
      v492(v616, v491);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
      swift_release();
      return swift_release();
    }

    uint64_t v619 = 0LL;
    uint64_t v514 = v259;
    uint64_t v264 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
    uint64_t v265 = dispatch thunk of _AnySequenceBox._makeIterator()(v264);
    swift_release();
    uint64_t v524 = v259 + 16;
    swift_beginAccess(v259 + 16, v623, 0LL, 0LL);
    uint64_t v266 = swift_retain();
    uint64_t v267 = v591;
    dispatch thunk of _AnyIteratorBoxBase.next()(v266);
    v531 = (void (*)(void *, uint64_t, uint64_t))v265;
    swift_release();
    int v268 = ((uint64_t (*)(char *, uint64_t, uint64_t))v587)(v267, 1LL, v611);
    uint64_t v269 = v603;
    if (v268 != 1)
    {
      uint64_t v282 = v611;
      do
      {
        uint64_t v285 = v239;
        v525(v256, v267, v282);
        uint64_t v286 = (uint64_t)v589;
        (*(void (**)(char *, char *, uint64_t))(v269 + 16))(v589, v256, v282);
        v287 = v586;
        Row.subscript.getter(v586, &type metadata for Int64, &protocol witness table for Int64);
        uint64_t v288 = v619;
        sub_1000767A4(v286, v625, v255);
        if (v288)
        {
          swift_bridgeObjectRelease();
          swift_release();
          sub_100016F9C(v520, v519);
          swift_bridgeObjectRelease();
          v484 = *(void (**)(char *, uint64_t))(v603 + 8);
          v484(v256, v282);
          swift_release();
          (*(void (**)(char *, uint64_t))(v605 + 8))(v593, v618);
          sub_100015794(v612, &qword_10099FB70);
          uint64_t v485 = v615;
          v486 = v596;
          v596(v573, v615);
          v512(v581, v582);
          v487 = *(void (**)(char *, uint64_t))(v599 + 8);
          uint64_t v488 = v600;
          v487(v580, v600);
          v486(v583, v485);
          v484(v577, v282);
          swift_release();
          v487(v606, v488);
          v486(v616, v485);
          swift_release();
          return swift_release();
        }

        Row.get<A>(_:)(&v625, v287, &type metadata for Int64, &protocol witness table for Int64);
        uint64_t v619 = 0LL;
        v289 = (void (*)(char *, uint64_t))v625;
        uint64_t v290 = v610;
        uint64_t v291 = v255 + *(int *)(v610 + 44);
        uint64_t v292 = v605;
        v293 = *(void (**)(void))(v605 + 16);
        v294 = v609;
        uint64_t v295 = v618;
        ((void (*)(char *, uint64_t, uint64_t))v293)(v609, v291, v618);
        uint64_t v296 = v588;
        sub_10001581C(v612, v588, &qword_10099FB70);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v592 + 48))(v296, 1LL, v290) == 1)
        {
          sub_100015794(v296, &qword_10099FB70);
          swift_beginAccess(v524, &v625, 33LL, 0LL);
          v517 = v289;
          uint64_t v297 = (uint64_t)v289;
          v298 = v294;
          sub_1000BDCDC(&v624, v297);
          swift_endAccess(&v625);
          v299 = *(void (**)(char *, uint64_t))(v292 + 8);
          v300 = v593;
          v299(v593, v295);
          ((void (*)(char *, char *, uint64_t))v293)(v300, v298, v295);
          v301 = v584;
          uint64_t v302 = v285;
          ((void (*)(char *, uint64_t, uint64_t))v614)(v584, v613, v285);
          v303 = v578;
          ((void (*)(char *, char *, uint64_t))v293)(v578, v298, v295);
          v304 = v579;
          ((void (*)(char *, char *, uint64_t))v293)(v579, v303, v295);
          uint64_t v305 = v302;
          v306 = v585;
          (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v585, v303, v295);
          unint64_t v307 = (unint64_t)v598;
          uint64_t v308 = swift_bridgeObjectRetain_n(v598, 2LL);
          v309 = (os_log_s *)Logger.logObject.getter(v308);
          os_log_type_t v310 = static os_log_type_t.info.getter(v309);
          if (os_log_type_enabled(v309, v310))
          {
            uint64_t v311 = swift_slowAlloc(42LL, -1LL);
            uint64_t v312 = swift_slowAlloc(64LL, -1LL);
            *(_DWORD *)uint64_t v311 = v511;
            uint64_t v624 = 1752392040LL;
            uint64_t v625 = v312;
            v313 = v521;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v311 + 4, v311 + 12);
            *(_WORD *)(v311 + 12) = 2081;
            swift_bridgeObjectRetain(v307);
            *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v522, v307, &v625));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v313, v311 + 14, v311 + 22);
            swift_bridgeObjectRelease_n(v307, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v311 + 22) = 2080;
            uint64_t v314 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
            uint64_t v315 = dispatch thunk of CustomStringConvertible.description.getter(v618, v314);
            *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v315, v316, &v625));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v313, v311 + 24, v311 + 32);
            swift_bridgeObjectRelease();
            v299(v585, v618);
            v299(v304, v618);
            *(_WORD *)(v311 + 32) = 2048;
            uint64_t v624 = (uint64_t)v517;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v313, v311 + 34, v311 + 42);
            _os_log_impl( (void *)&_mh_execute_header,  v309,  v310,  "Decimation - preserveByKey (latest for advertisement): %{private,mask.hash}s,\n preserving scanDate: %s, advId: %lld.",  (uint8_t *)v311,  0x2Au);
            swift_arrayDestroy(v312, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v312, -1LL, -1LL);
            swift_slowDealloc(v311, -1LL, -1LL);

            uint64_t v239 = v620;
            v607(v584, v620);
            v299(v609, v618);
            uint64_t v269 = v603;
          }

          else
          {

            v299(v306, v295);
            v299(v304, v295);
            swift_bridgeObjectRelease_n(v307, 2LL);
            v607(v301, v305);
            v299(v609, v295);
            uint64_t v269 = v603;
            uint64_t v239 = v305;
          }

          uint64_t v255 = (uint64_t)v595;
          uint64_t v256 = v594;
          uint64_t v282 = v611;
          goto LABEL_48;
        }

        uint64_t v317 = (uint64_t)v289;
        sub_10002218C(v296, v590, type metadata accessor for ObservedAdvertisement);
        uint64_t v318 = v524;
        uint64_t v319 = v619;
        if (*(void *)(*(void *)v524 + 16LL) >= v530)
        {
          uint64_t v239 = v285;
          swift_beginAccess(v516, &v625, 33LL, 0LL);
          sub_1000BDCDC(&v624, (uint64_t)v289);
          swift_endAccess(&v625);
          v354 = v572;
          ((void (*)(char *, uint64_t, uint64_t))v614)(v572, v613, v285);
          v355 = v568;
          uint64_t v356 = v618;
          ((void (*)(char *, char *, uint64_t))v293)(v568, v294, v618);
          v357 = v538;
          v293();
          uint64_t v358 = v605;
          v359 = v569;
          (*(void (**)(char *, char *, uint64_t))(v605 + 32))(v569, v355, v356);
          unint64_t v360 = (unint64_t)v598;
          uint64_t v361 = swift_bridgeObjectRetain_n(v598, 2LL);
          v362 = (os_log_s *)Logger.logObject.getter(v361);
          os_log_type_t v363 = static os_log_type_t.info.getter(v362);
          LODWORD(v517) = v363;
          if (os_log_type_enabled(v362, v363))
          {
            uint64_t v364 = swift_slowAlloc(52LL, -1LL);
            os_log_t v501 = v362;
            uint64_t v365 = v364;
            uint64_t v366 = swift_slowAlloc(64LL, -1LL);
            uint64_t v502 = v366;
            *(_DWORD *)uint64_t v365 = v503;
            uint64_t v624 = v530;
            uint64_t v625 = v366;
            v367 = v521;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v365 + 4, v365 + 12);
            *(_WORD *)(v365 + 12) = 2048;
            uint64_t v624 = v317;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v367, v365 + 14, v365 + 22);
            *(_WORD *)(v365 + 22) = 2080;
            uint64_t v368 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
            uint64_t v369 = dispatch thunk of CustomStringConvertible.description.getter(v618, v368);
            *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v369, v370, &v625));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v367, v365 + 24, v365 + 32);
            swift_bridgeObjectRelease();
            v371 = *(void (**)(char *, uint64_t))(v605 + 8);
            v371(v359, v618);
            v371(v357, v618);
            *(_WORD *)(v365 + 32) = 2160;
            uint64_t v624 = 1752392040LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v367, v365 + 34, v365 + 42);
            *(_WORD *)(v365 + 42) = 2081;
            swift_bridgeObjectRetain(v360);
            *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v522, v360, &v625));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v367, v365 + 44, v365 + 52);
            swift_bridgeObjectRelease_n(v360, 2LL);
            swift_bridgeObjectRelease();
            os_log_t v372 = v501;
            _os_log_impl( (void *)&_mh_execute_header,  v501,  (os_log_type_t)v517,  "Decimation - remove all above limit - >= maxPayloads %ld currentId: %lld,\n scan date: %s,\n within advertisement: %{private,mask.hash}s.",  (uint8_t *)v365,  0x34u);
            uint64_t v373 = v502;
            swift_arrayDestroy(v502, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v373, -1LL, -1LL);
            swift_slowDealloc(v365, -1LL, -1LL);

            v607(v572, v620);
            sub_100018C68(v590, type metadata accessor for ObservedAdvertisement);
            v371(v609, v618);
            uint64_t v282 = v611;
            uint64_t v239 = v620;
LABEL_65:
            uint64_t v269 = v603;
            uint64_t v255 = (uint64_t)v595;
            uint64_t v256 = v594;
            goto LABEL_48;
          }

          swift_bridgeObjectRelease_n(v360, 2LL);

          v381 = *(void (**)(char *, uint64_t))(v358 + 8);
          v381(v359, v356);
          v381(v357, v356);
          v607(v354, v239);
          sub_100018C68(v590, type metadata accessor for ObservedAdvertisement);
          v381(v609, v356);
          uint64_t v269 = v603;
          uint64_t v255 = (uint64_t)v595;
          uint64_t v256 = v594;
          uint64_t v282 = v611;
        }

        else
        {
          v320 = v593;
          v321 = v294;
          double v322 = fabs(Date.timeIntervalSince(_:)(v593));
          OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
          uint64_t v619 = v319;
          uint64_t v323 = v625;
          double v324 = (double)sub_1006A0608(v625);
          uint64_t v325 = sub_1006A0C00(v323);
          swift_bridgeObjectRelease();
          if (v324 * 60.0 / (double)v325 < v322)
          {
            swift_beginAccess(v318, &v625, 33LL, 0LL);
            uint64_t v326 = v317;
            sub_1000BDCDC(&v624, v317);
            swift_endAccess(&v625);
            uint64_t v327 = v605;
            uint64_t v328 = v618;
            v517 = *(void (**)(char *, uint64_t))(v605 + 8);
            v517(v320, v618);
            ((void (*)(char *, char *, uint64_t))v293)(v320, v294, v328);
            v329 = v557;
            ((void (*)(char *, uint64_t, uint64_t))v614)(v557, v613, v620);
            v330 = v551;
            ((void (*)(char *, char *, uint64_t))v293)(v551, v321, v328);
            v331 = v552;
            ((void (*)(char *, char *, uint64_t))v293)(v552, v330, v328);
            uint64_t v332 = v328;
            v333 = *(void (**)(char *, char *, uint64_t))(v327 + 32);
            v334 = v558;
            v333(v558, v330, v328);
            unint64_t v335 = (unint64_t)v598;
            swift_bridgeObjectRetain_n(v598, 2LL);
            uint64_t v336 = v527;
            uint64_t v337 = swift_retain_n(v527, 2LL);
            v338 = (os_log_s *)Logger.logObject.getter(v337);
            os_log_type_t v339 = static os_log_type_t.info.getter(v338);
            if (os_log_type_enabled(v338, v339))
            {
              uint64_t v340 = swift_slowAlloc(52LL, -1LL);
              uint64_t v502 = swift_slowAlloc(64LL, -1LL);
              uint64_t v625 = v502;
              *(_DWORD *)uint64_t v340 = v503;
              os_log_t v501 = v338;
              uint64_t v341 = v619;
              OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
              uint64_t v619 = v341;
              uint64_t v342 = v624;
              double v343 = (double)sub_1006A0608(v624);
              uint64_t v344 = v326;
              uint64_t v345 = sub_1006A0C00(v342);
              swift_bridgeObjectRelease();
              *(double *)&uint64_t v624 = v343 * 60.0 / (double)v345;
              LOBYTE(v345) = v339;
              v346 = v521;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v340 + 4, v340 + 12);
              swift_release();
              swift_release();
              *(_WORD *)(v340 + 12) = 2048;
              uint64_t v624 = v344;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v346, v340 + 14, v340 + 22);
              *(_WORD *)(v340 + 22) = 2080;
              uint64_t v347 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
              uint64_t v348 = dispatch thunk of CustomStringConvertible.description.getter(v618, v347);
              *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v348, v349, &v625));
              uint64_t v350 = v618;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v346, v340 + 24, v340 + 32);
              swift_bridgeObjectRelease();
              v351 = v517;
              v517(v558, v350);
              v351(v331, v350);
              *(_WORD *)(v340 + 32) = 2160;
              uint64_t v624 = 1752392040LL;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v346, v340 + 34, v340 + 42);
              *(_WORD *)(v340 + 42) = 2081;
              swift_bridgeObjectRetain(v335);
              *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v522, v335, &v625));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v346, v340 + 44, v340 + 52);
              swift_bridgeObjectRelease_n(v335, 2LL);
              swift_bridgeObjectRelease();
              os_log_t v352 = v501;
              _os_log_impl( (void *)&_mh_execute_header,  v501,  (os_log_type_t)v345,  "Decimation - keep - > locationTimeResolution %f currentId: %lld,\n scan date: %s,\n within advertisement: %{private,mask.hash}s.",  (uint8_t *)v340,  0x34u);
              uint64_t v353 = v502;
              swift_arrayDestroy(v502, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v353, -1LL, -1LL);
              swift_slowDealloc(v340, -1LL, -1LL);

              uint64_t v239 = v620;
              v607(v557, v620);
              sub_100018C68(v590, type metadata accessor for ObservedAdvertisement);
              v351(v609, v350);
            }

            else
            {
              swift_bridgeObjectRelease_n(v335, 2LL);

              v382 = v334;
              v383 = v517;
              v517(v382, v332);
              v383(v331, v332);
              swift_release_n(v336, 2LL);
              uint64_t v239 = v620;
              v607(v329, v620);
              sub_100018C68(v590, type metadata accessor for ObservedAdvertisement);
              v383(v609, v332);
            }

            uint64_t v282 = v611;
            goto LABEL_65;
          }

          v374 = v595;
          int v375 = sub_100041014(v595[32] & 0xB);
          if (v375 != sub_100041014(*(_BYTE *)(v590 + 32) & 0xB))
          {
            swift_beginAccess(v524, &v625, 33LL, 0LL);
            uint64_t v384 = v317;
            sub_1000BDCDC(&v624, v317);
            swift_endAccess(&v625);
            uint64_t v385 = v605;
            v386 = *(void (**)(char *, uint64_t))(v605 + 8);
            v387 = v593;
            uint64_t v388 = v618;
            v386(v593, v618);
            v389 = v609;
            ((void (*)(char *, char *, uint64_t))v293)(v387, v609, v388);
            v390 = v548;
            ((void (*)(char *, uint64_t, uint64_t))v614)(v548, v613, v620);
            v391 = v545;
            ((void (*)(char *, char *, uint64_t))v293)(v545, v389, v388);
            v392 = v526;
            ((void (*)(char *, char *, uint64_t))v293)(v526, v391, v388);
            uint64_t v393 = v388;
            v394 = v549;
            (*(void (**)(char *, char *, uint64_t))(v385 + 32))(v549, v391, v388);
            unint64_t v395 = (unint64_t)v598;
            uint64_t v396 = swift_bridgeObjectRetain_n(v598, 2LL);
            v397 = (os_log_s *)Logger.logObject.getter(v396);
            os_log_type_t v398 = static os_log_type_t.info.getter(v397);
            LODWORD(v517) = v398;
            if (os_log_type_enabled(v397, v398))
            {
              uint64_t v399 = swift_slowAlloc(42LL, -1LL);
              uint64_t v502 = swift_slowAlloc(64LL, -1LL);
              uint64_t v624 = v384;
              uint64_t v625 = v502;
              *(_DWORD *)uint64_t v399 = v500;
              v400 = v521;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v399 + 4, v399 + 12);
              *(_WORD *)(v399 + 12) = 2080;
              uint64_t v401 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
              uint64_t v402 = dispatch thunk of CustomStringConvertible.description.getter(v618, v401);
              *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v402, v403, &v625));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v400, v399 + 14, v399 + 22);
              swift_bridgeObjectRelease();
              v386(v549, v618);
              v386(v392, v618);
              *(_WORD *)(v399 + 22) = 2160;
              uint64_t v624 = 1752392040LL;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v400, v399 + 24, v399 + 32);
              *(_WORD *)(v399 + 32) = 2081;
              swift_bridgeObjectRetain(v395);
              *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v522, v395, &v625));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v400, v399 + 34, v399 + 42);
              swift_bridgeObjectRelease_n(v395, 2LL);
              swift_bridgeObjectRelease();
              _os_log_impl( (void *)&_mh_execute_header,  v397,  (os_log_type_t)v517,  "Decimation - keep - multipart changed currentId: %lld,\n scan date: %s,\n within advertisement: %{private,mask.hash}s.",  (uint8_t *)v399,  0x2Au);
              uint64_t v404 = v502;
              swift_arrayDestroy(v502, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v404, -1LL, -1LL);
              swift_slowDealloc(v399, -1LL, -1LL);

              uint64_t v239 = v620;
              v607(v548, v620);
              sub_100018C68(v590, type metadata accessor for ObservedAdvertisement);
              v405 = v609;
              uint64_t v406 = v618;
            }

            else
            {
              swift_bridgeObjectRelease_n(v395, 2LL);

              v386(v394, v393);
              v386(v392, v393);
              uint64_t v239 = v620;
              v607(v390, v620);
              sub_100018C68(v590, type metadata accessor for ObservedAdvertisement);
              v405 = v609;
              uint64_t v406 = v393;
            }

            v386(v405, v406);
            uint64_t v269 = v603;
            uint64_t v255 = (uint64_t)v595;
            uint64_t v256 = v594;
            goto LABEL_78;
          }

          uint64_t v376 = v546;
          sub_10001581C((uint64_t)&v374[*(int *)(v610 + 48)], v546, &qword_10099E770);
          uint64_t v377 = type metadata accessor for ObservedAdvertisement.Location(0LL);
          int v378 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v377 - 8) + 48LL))(v376, 1LL, v377);
          uint64_t v256 = v594;
          uint64_t v379 = v620;
          if (v378 == 1)
          {
            sub_100015794(v376, &qword_10099E770);
            BOOL v380 = v254 > 1.79769313e308;
          }

          else
          {
            double v407 = *(double *)(v376 + 16);
            sub_100018C68(v376, type metadata accessor for ObservedAdvertisement.Location);
            BOOL v380 = v254 > v407;
          }

          uint64_t v269 = v603;
          if (!v380)
          {
            swift_beginAccess(v516, &v625, 33LL, 0LL);
            uint64_t v408 = v317;
            sub_1000BDCDC(&v624, v317);
            swift_endAccess(&v625);
            v409 = v542;
            ((void (*)(char *, uint64_t, uint64_t))v614)(v542, v613, v379);
            v410 = v541;
            uint64_t v411 = v618;
            ((void (*)(char *, char *, uint64_t))v293)(v541, v609, v618);
            ((void (*)(char *, char *, uint64_t))v293)(v544, v410, v411);
            uint64_t v412 = v605;
            v413 = v543;
            (*(void (**)(char *, char *, uint64_t))(v605 + 32))(v543, v410, v411);
            unint64_t v414 = (unint64_t)v598;
            uint64_t v415 = swift_bridgeObjectRetain_n(v598, 2LL);
            v416 = (void (*)(char *, uint64_t))Logger.logObject.getter(v415);
            os_log_type_t v417 = static os_log_type_t.info.getter(v416);
            v517 = v416;
            v418 = (os_log_s *)v416;
            os_log_type_t v419 = v417;
            if (os_log_type_enabled(v418, v417))
            {
              uint64_t v421 = swift_slowAlloc(42LL, -1LL);
              uint64_t v422 = swift_slowAlloc(64LL, -1LL);
              uint64_t v624 = v408;
              uint64_t v625 = v422;
              *(_DWORD *)uint64_t v421 = v500;
              v423 = v521;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v421 + 4, v421 + 12);
              *(_WORD *)(v421 + 12) = 2080;
              uint64_t v424 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
              v425 = v544;
              uint64_t v426 = dispatch thunk of CustomStringConvertible.description.getter(v618, v424);
              *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v426, v427, &v625));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v423, v421 + 14, v421 + 22);
              swift_bridgeObjectRelease();
              v428 = *(void (**)(char *, uint64_t))(v605 + 8);
              v428(v543, v618);
              v428(v425, v618);
              *(_WORD *)(v421 + 22) = 2160;
              uint64_t v624 = 1752392040LL;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v423, v421 + 24, v421 + 32);
              *(_WORD *)(v421 + 32) = 2081;
              swift_bridgeObjectRetain(v414);
              *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v522, v414, &v625));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v423, v421 + 34, v421 + 42);
              swift_bridgeObjectRelease_n(v414, 2LL);
              swift_bridgeObjectRelease();
              v429 = v517;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v517,  v419,  "Decimation - remove - worse than median accuracy currentId: %lld,\n scan date: %s,\n within advertisement: %{private,mask.hash}s.",  (uint8_t *)v421,  0x2Au);
              swift_arrayDestroy(v422, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v430 = v422;
              uint64_t v256 = v594;
              swift_slowDealloc(v430, -1LL, -1LL);
              swift_slowDealloc(v421, -1LL, -1LL);

              uint64_t v239 = v620;
              v607(v542, v620);
              sub_100018C68(v590, type metadata accessor for ObservedAdvertisement);
              v428(v609, v618);
            }

            else
            {
              swift_bridgeObjectRelease_n(v414, 2LL);

              v431 = *(void (**)(char *, uint64_t))(v412 + 8);
              v431(v413, v411);
              v431(v544, v411);
              uint64_t v239 = v620;
              v607(v409, v620);
              sub_100018C68(v590, type metadata accessor for ObservedAdvertisement);
              v431(v609, v411);
            }

            uint64_t v269 = v603;
            uint64_t v255 = (uint64_t)v595;
LABEL_78:
            uint64_t v282 = v611;
            goto LABEL_48;
          }

          sub_100018C68(v590, type metadata accessor for ObservedAdvertisement);
          (*(void (**)(char *, uint64_t))(v605 + 8))(v609, v618);
          uint64_t v255 = (uint64_t)v595;
          uint64_t v282 = v611;
          uint64_t v239 = v379;
        }

LABEL_48:
        uint64_t v283 = v612;
        sub_100015794(v612, &qword_10099FB70);
        sub_10001DC4C(v255, v283, type metadata accessor for ObservedAdvertisement);
        v523(v283, 0LL, 1LL, v610);
        sub_100018C68(v255, type metadata accessor for ObservedAdvertisement);
        (*(void (**)(char *, uint64_t))(v269 + 8))(v256, v282);
        uint64_t v284 = swift_retain();
        uint64_t v267 = v591;
        dispatch thunk of _AnyIteratorBoxBase.next()(v284);
        swift_release();
      }

      while (((unsigned int (*)(char *, uint64_t, uint64_t))v587)(v267, 1LL, v282) != 1);
    }

    swift_release();
    uint64_t v270 = v514;
    swift_bridgeObjectRetain(*(void *)(v514 + 16));
    uint64_t v534 = sub_10045D1BC(v271, v534);
    uint64_t v272 = v555;
    ((void (*)(char *, uint64_t, uint64_t))v614)(v555, v613, v239);
    unint64_t v273 = (unint64_t)v598;
    swift_bridgeObjectRetain_n(v598, 2LL);
    uint64_t v274 = swift_retain_n(v270, 2LL);
    uint64_t v275 = (os_log_s *)Logger.logObject.getter(v274);
    os_log_type_t v276 = static os_log_type_t.default.getter(v275);
    if (os_log_type_enabled(v275, v276))
    {
      uint64_t v277 = swift_slowAlloc(32LL, -1LL);
      uint64_t v278 = swift_slowAlloc(32LL, -1LL);
      uint64_t v625 = v278;
      *(_DWORD *)uint64_t v277 = v510;
      uint64_t v279 = *(void *)(*(void *)(v270 + 16) + 16LL);
      swift_release();
      uint64_t v624 = v279;
      v280 = v521;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v277 + 4, v277 + 12);
      swift_release();
      *(_WORD *)(v277 + 12) = 2160;
      uint64_t v624 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v280, v277 + 14, v277 + 22);
      *(_WORD *)(v277 + 22) = 2081;
      swift_bridgeObjectRetain(v273);
      *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v522, v273, &v625));
      v281 = v280;
      uint64_t v239 = v620;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v281, v277 + 24, v277 + 32);
      swift_bridgeObjectRelease_n(v273, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v275,  v276,  "Decimation - byAdvertisement preserving count: %ld,\nwithin advertisement: %{private,mask.hash}s.",  (uint8_t *)v277,  0x20u);
      swift_arrayDestroy(v278, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v278, -1LL, -1LL);
      swift_slowDealloc(v277, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v273, 2LL);
      swift_release_n(v270, 2LL);
    }

    v607(v272, v239);
    v432 = v616;
    uint64_t v433 = v520;
    uint64_t v434 = v619;
    v435 = v604;
    v518(v604, v536, v615);
    v436 = v516;
    swift_beginAccess(v516, v622, 0LL, 0LL);
    uint64_t v625 = *v436;
    swift_bridgeObjectRetain(v625);
    uint64_t v437 = v532;
    Collection<>.contains(_:)(v586, v509, v508, &protocol witness table for Int64);
    swift_bridgeObjectRelease();
    v438 = v608;
    QueryType.filter(_:)(v437, v615, &protocol witness table for Table);
    v535((char *)v437, v617);
    v439 = v435;
    v440 = v596;
    v596(v439, v615);
    v441 = v570;
    QueryType.delete()(v615, &protocol witness table for Table);
    v442 = v438;
    uint64_t v443 = v615;
    v440(v442, v615);
    Connection.run(_:)(v441);
    if (v434)
    {
      swift_bridgeObjectRelease();
      swift_release();
      sub_100016F9C(v433, v519);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v553 + 8))(v570, v554);
      (*(void (**)(char *, uint64_t))(v605 + 8))(v593, v618);
      sub_100015794(v612, &qword_10099FB70);
      v495 = v596;
      v596(v573, v443);
      v512(v581, v582);
      v496 = *(void (**)(char *, uint64_t))(v599 + 8);
      uint64_t v497 = v600;
      v496(v580, v600);
      v495(v583, v443);
      (*(void (**)(char *, uint64_t))(v603 + 8))(v577, v611);
      swift_release();
      v496(v606, v497);
      v495(v432, v443);
      swift_release();
      return swift_release();
    }

    v444 = v556;
    ((void (*)(char *, uint64_t, uint64_t))v614)(v556, v613, v239);
    unint64_t v445 = (unint64_t)v598;
    swift_bridgeObjectRetain_n(v598, 2LL);
    uint64_t v446 = v515;
    uint64_t v447 = swift_retain_n(v515, 2LL);
    v448 = (os_log_s *)Logger.logObject.getter(v447);
    os_log_type_t v449 = static os_log_type_t.default.getter(v448);
    if (os_log_type_enabled(v448, v449))
    {
      uint64_t v450 = swift_slowAlloc(32LL, -1LL);
      uint64_t v451 = swift_slowAlloc(32LL, -1LL);
      uint64_t v625 = v451;
      *(_DWORD *)uint64_t v450 = v510;
      uint64_t v452 = *(void *)(*(void *)(v446 + 16) + 16LL);
      swift_release();
      uint64_t v624 = v452;
      v453 = v521;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v450 + 4, v450 + 12);
      swift_release();
      *(_WORD *)(v450 + 12) = 2160;
      uint64_t v624 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v453, v450 + 14, v450 + 22);
      *(_WORD *)(v450 + 22) = 2081;
      swift_bridgeObjectRetain(v445);
      uint64_t v454 = v522;
      *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v522, v445, &v625));
      v455 = v453;
      uint64_t v239 = v620;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v455, v450 + 24, v450 + 32);
      swift_bridgeObjectRelease_n(v445, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v448,  v449,  "Decimation - remove - decimate count: %ld,\nwithin advertisement: %{private,mask.hash}s.",  (uint8_t *)v450,  0x20u);
      swift_arrayDestroy(v451, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v456 = v451;
      uint64_t v433 = v520;
      swift_slowDealloc(v456, -1LL, -1LL);
      swift_slowDealloc(v450, -1LL, -1LL);

      v607(v556, v239);
    }

    else
    {

      swift_bridgeObjectRelease_n(v445, 2LL);
      swift_release_n(v446, 2LL);
      v607(v444, v239);
      uint64_t v454 = v522;
    }

    Connection.scalar<A>(_:)(&v625, v580, &type metadata for Int, &protocol witness table for Int);
    uint64_t v457 = v625;
    uint64_t v458 = v239;
    v459 = v550;
    ((void (*)(char *, uint64_t, uint64_t))v614)(v550, v613, v458);
    swift_bridgeObjectRetain(v445);
    v461 = (os_log_s *)Logger.logObject.getter(v460);
    os_log_type_t v462 = static os_log_type_t.default.getter(v461);
    if (os_log_type_enabled(v461, v462))
    {
      double v463 = (double)v457 / (double)v513 * 100.0;
      uint64_t v464 = swift_slowAlloc(42LL, -1LL);
      uint64_t v619 = swift_slowAlloc(32LL, -1LL);
      uint64_t v624 = v457;
      uint64_t v625 = v619;
      *(_DWORD *)uint64_t v464 = v500;
      uint64_t v465 = v454;
      v466 = v521;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v521, v464 + 4, v464 + 12);
      *(_WORD *)(v464 + 12) = 2160;
      uint64_t v624 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v466, v464 + 14, v464 + 22);
      *(_WORD *)(v464 + 22) = 2081;
      swift_bridgeObjectRetain(v445);
      *(double *)&uint64_t v624 = COERCE_DOUBLE(sub_1003F11D4(v465, v445, &v625));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v466, v464 + 24, v464 + 32);
      swift_bridgeObjectRelease_n(v445, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v464 + 32) = 2048;
      *(double *)&uint64_t v624 = v463;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v466, v464 + 34, v464 + 42);
      _os_log_impl( (void *)&_mh_execute_header,  v461,  v462,  "Decimation - byAdvertisement end count: %ld\nwithin advertisement: %{private,mask.hash}s kept %f%%.",  (uint8_t *)v464,  0x2Au);
      uint64_t v467 = v619;
      swift_arrayDestroy(v619, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v468 = v467;
      uint64_t v469 = v603;
      swift_slowDealloc(v468, -1LL, -1LL);
      swift_slowDealloc(v464, -1LL, -1LL);

      sub_100016F9C(v520, v519);
      v607(v459, v620);
      (*(void (**)(char *, uint64_t))(v553 + 8))(v570, v554);
      (*(void (**)(char *, uint64_t))(v605 + 8))(v593, v618);
      sub_100015794(v612, &qword_10099FB70);
      uint64_t v470 = v615;
      v471 = v596;
      v596(v573, v615);
      v512(v581, v582);
      (*(void (**)(char *, uint64_t))(v599 + 8))(v580, v600);
      v471(v583, v470);
    }

    else
    {
      swift_bridgeObjectRelease_n(v445, 2LL);

      sub_100016F9C(v433, v519);
      v607(v459, v620);
      (*(void (**)(char *, uint64_t))(v553 + 8))(v570, v554);
      (*(void (**)(char *, uint64_t))(v605 + 8))(v593, v618);
      sub_100015794(v612, &qword_10099FB70);
      uint64_t v472 = v615;
      v473 = v596;
      v596(v573, v615);
      v512(v581, v582);
      (*(void (**)(char *, uint64_t))(v599 + 8))(v580, v600);
      v473(v583, v472);
      uint64_t v469 = v603;
    }

    uint64_t v171 = v611;
    (*(void (**)(char *, uint64_t))(v469 + 8))(v577, v611);
    swift_release();
    swift_release();
    uint64_t v170 = v537;
    uint64_t v474 = swift_retain();
    uint64_t v169 = v576;
    dispatch thunk of _AnyIteratorBoxBase.next()(v474);
    swift_release();
    int v475 = ((uint64_t (*)(char *, uint64_t, uint64_t))v587)(v169, 1LL, v171);
    uint64_t v168 = v525;
    if (v475 == 1) {
      goto LABEL_18;
    }
  }

  swift_bridgeObjectRelease();
  swift_release();
  sub_100016F9C(v520, v519);
  swift_bridgeObjectRelease();
  v489 = *(void (**)(char *, uint64_t))(v599 + 8);
  uint64_t v490 = v600;
  v489(v580, v600);
  v198(v583, v194);
  (*(void (**)(char *, uint64_t))(v603 + 8))(v577, v611);
  swift_release();
  v489(v606, v490);
  return ((uint64_t (*)(char *, uint64_t))v198)(v616, v194);
}

  BOOL v209 = [v144 identifier];
  uint64_t v210 = (uint64_t)v315;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v209);

  uint64_t v211 = v286;
  sub_10050B884(v210, v286);
  ((void (*)(uint64_t, unint64_t))v321)(v210, v139);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v284 + 48))(v211, 1LL, v285) == 1)
  {
    sub_100015794(v211, &qword_1009AA870);
  }

  else
  {
    __int128 v212 = v211;
    int v213 = v275;
    sub_10002218C(v212, v275, type metadata accessor for BeaconProductInfoRecord);
    uint64_t v214 = sub_10039E040();
    [v144 setAccessoryProductInfo:v214];

    sub_100018C68(v213, type metadata accessor for BeaconProductInfoRecord);
  }

  __break(1u);
  objc_autoreleasePoolPop((void *)v51);
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

    swift_once(&qword_10099B3C8, sub_1003B7ABC);
    goto LABEL_35;
  }

  uint64_t v95 = v0[80];
  v0[94] = 0LL;
  if (!v93[2])
  {
    __break(1u);
    goto LABEL_47;
  }

  uint64_t v96 = v0[83];
  uint64_t v97 = (unint64_t *)v0[81];
  uint64_t v98 = v0[79];
  uint64_t v99 = v0[75];
  uint64_t v100 = v0[73];
  uint64_t v101 = v0[62];
  uint64_t v103 = v93[4];
  unint64_t v102 = v93[5];
  uint64_t v104 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v95 + 16);
  v0[95] = v104;
  v104(v97, v96, v98);
  sub_10001581C(v99, v100, (uint64_t *)&unk_1009A34D0);
  v0[96] = sub_1003C3D10( v97,  v103,  v102,  v100,  v101,  &qword_1009AC0E8,  &qword_1009AC0F0,  &qword_1009AC198,  (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_1003C5774);
  if (v103 < 2)
  {
    uint64_t v122 = 0LL;
    uint64_t v123 = 0LL;
    uint64_t v124 = 0LL;
    uint64_t v125 = 0xF000000000000000LL;
  }

  else
  {
    uint64_t v110 = sub_100479DC4(v154[59], v103, *(void *)(v154[63] + 144LL));
    uint64_t v122 = v110;
    uint64_t v123 = v111;
    uint64_t v125 = v112;
    if (v112 >> 60 == 15) {
      uint64_t v124 = 0LL;
    }
    else {
      uint64_t v124 = v110;
    }
  }

  v154[100] = v124;
  v154[99] = v125;
  v154[98] = v123;
  v154[97] = v122;
  v126 = v154[91];
  unint64_t v127 = v154[90];
  uint64_t v128 = v154[85];
  uint64_t v129 = v154[84];
  sub_10001736C(v129, v128);
  PrivateKey.publicKey.getter(v129, v128);
  uint64_t v150 = v130;
  loga = v131;
  sub_10001736C(v127, v126);
  sub_100164D20(v122, v123, v125);
  sub_10045C258(v129, v128, v150, (unint64_t)loga, v127, v126, v122, v123, v154 + 2, v125, v103);
  v154[101] = 0LL;
  uint64_t v132 = *((_OWORD *)v154 + 1);
  *(_OWORD *)(v154 + 13) = *((_OWORD *)v154 + 2);
  uint64_t v133 = *((_OWORD *)v154 + 4);
  *(_OWORD *)(v154 + 15) = *((_OWORD *)v154 + 3);
  *(_OWORD *)(v154 + 17) = v133;
  v154[19] = v154[10];
  *(_OWORD *)(v154 + 11) = v132;
  sub_100164D20(v122, v123, v125);
  sub_100164EE8( v154 + 2,  (void (*)(void, void))sub_100018BE4,  (void (*)(uint64_t, uint64_t))sub_10001736C);
  return swift_task_switch(sub_1003C1100, 0LL, 0LL);
}

    uint64_t v26 = (v42 - 1) & v42;
    uint64_t v29 = __clz(__rbit64(v42)) + (v27 << 6);
    goto LABEL_29;
  }

      __break(1u);
      goto LABEL_49;
    }

  sub_1003CB388(&v52, &v51, (uint64_t *)&v50);
  return 1LL;
}

          if (!(_DWORD)v216)
          {
LABEL_36:
            if ((_DWORD)v227) {
              goto LABEL_37;
            }
            goto LABEL_50;
          }

    if (v71 < v58) {
      goto LABEL_129;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
    uint64_t v181 = v71;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      uint64_t v59 = v159;
    }
    else {
      uint64_t v59 = sub_1003CB1DC(0LL, *((void *)v159 + 2) + 1LL, 1, v159);
    }
    uint64_t v91 = *((void *)v59 + 2);
    uint64_t v90 = *((void *)v59 + 3);
    uint64_t v61 = v91 + 1;
    if (v91 >= v90 >> 1) {
      uint64_t v59 = sub_1003CB1DC((char *)(v90 > 1), v91 + 1, 1, v59);
    }
    *((void *)v59 + 2) = v61;
    uint64_t v92 = v59 + 32;
    uint64_t v93 = &v59[16 * v91 + 32];
    uint64_t v94 = v181;
    *(void *)uint64_t v93 = v164;
    *((void *)v93 + 1) = v94;
    if (v91) {
      break;
    }
    uint64_t v61 = 1LL;
LABEL_15:
    uint64_t v60 = v193[1];
    uint64_t v58 = v181;
    if (v181 >= v60) {
      goto LABEL_100;
    }
  }

  while (1)
  {
    uint64_t v95 = v61 - 1;
    if (v61 >= 4)
    {
      uint64_t v100 = &v92[16 * v61];
      uint64_t v101 = *((void *)v100 - 8);
      unint64_t v102 = *((void *)v100 - 7);
      uint64_t v106 = __OFSUB__(v102, v101);
      uint64_t v103 = v102 - v101;
      if (v106) {
        goto LABEL_118;
      }
      uint64_t v105 = *((void *)v100 - 6);
      uint64_t v104 = *((void *)v100 - 5);
      uint64_t v106 = __OFSUB__(v104, v105);
      uint64_t v98 = v104 - v105;
      uint64_t v99 = v106;
      if (v106) {
        goto LABEL_119;
      }
      uint64_t v107 = v61 - 2;
      uint64_t v108 = &v92[16 * v61 - 32];
      uint64_t v110 = *(void *)v108;
      uint64_t v109 = *((void *)v108 + 1);
      uint64_t v106 = __OFSUB__(v109, v110);
      uint64_t v111 = v109 - v110;
      if (v106) {
        goto LABEL_121;
      }
      uint64_t v106 = __OFADD__(v98, v111);
      uint64_t v112 = v98 + v111;
      if (v106) {
        goto LABEL_124;
      }
      if (v112 >= v103)
      {
        uint64_t v130 = &v92[16 * v95];
        uint64_t v132 = *(void *)v130;
        uint64_t v131 = *((void *)v130 + 1);
        uint64_t v106 = __OFSUB__(v131, v132);
        uint64_t v133 = v131 - v132;
        if (v106) {
          goto LABEL_128;
        }
        uint64_t v123 = v98 < v133;
        goto LABEL_85;
      }
    }

    else
    {
      if (v61 != 3)
      {
        uint64_t v124 = *((void *)v59 + 4);
        uint64_t v125 = *((void *)v59 + 5);
        uint64_t v106 = __OFSUB__(v125, v124);
        uint64_t v117 = v125 - v124;
        uint64_t v118 = v106;
        goto LABEL_79;
      }

      uint64_t v97 = *((void *)v59 + 4);
      uint64_t v96 = *((void *)v59 + 5);
      uint64_t v106 = __OFSUB__(v96, v97);
      uint64_t v98 = v96 - v97;
      uint64_t v99 = v106;
    }

    if ((v99 & 1) != 0) {
      goto LABEL_120;
    }
    uint64_t v107 = v61 - 2;
    uint64_t v113 = &v92[16 * v61 - 32];
    os_log_type_t v115 = *(void *)v113;
    uint64_t v114 = *((void *)v113 + 1);
    uint64_t v116 = __OFSUB__(v114, v115);
    uint64_t v117 = v114 - v115;
    uint64_t v118 = v116;
    if (v116) {
      goto LABEL_123;
    }
    uint64_t v119 = &v92[16 * v95];
    uint64_t v121 = *(void *)v119;
    uint64_t v120 = *((void *)v119 + 1);
    uint64_t v106 = __OFSUB__(v120, v121);
    uint64_t v122 = v120 - v121;
    if (v106) {
      goto LABEL_126;
    }
    if (__OFADD__(v117, v122)) {
      goto LABEL_127;
    }
    if (v117 + v122 >= v98)
    {
      uint64_t v123 = v98 < v122;
LABEL_85:
      if (v123) {
        uint64_t v95 = v107;
      }
      goto LABEL_87;
    }

uint64_t sub_1000767A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v64[1] = a2;
  uint64_t v66 = a3;
  uint64_t Error = type metadata accessor for QueryError(0LL);
  uint64_t v6 = *(void *)(Error - 8);
  uint64_t v7 = __chkstk_darwin(Error);
  uint64_t v69 = (char *)v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v64 - v9;
  uint64_t v70 = type metadata accessor for UUID(0LL);
  uint64_t v67 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v71 = (char *)v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v14 = (void *)((char *)v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = sub_100004AEC(&qword_1009AA730);
  __chkstk_darwin(v15);
  uint64_t v68 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_10099E770);
  __chkstk_darwin(v17);
  uint64_t v72 = (char *)v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B988 != -1) {
    swift_once(&qword_10099B988, sub_100752154);
  }
  uint64_t v19 = sub_100004AEC(&qword_10099E778);
  uint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A2B5E0);
  Row.get<A>(_:)(v73, v20, &type metadata for Double, &protocol witness table for Double);
  if (!v3)
  {
    uint64_t v21 = v73[0];
    if (qword_10099B990 != -1) {
      swift_once(&qword_10099B990, sub_1007521E4);
    }
    uint64_t v22 = sub_10000A720(v19, (uint64_t)qword_100A2B5F8);
    Row.get<A>(_:)(v73, v22, &type metadata for Double, &protocol witness table for Double);
    uint64_t v23 = v73[0];
    if (qword_10099B998 != -1) {
      swift_once(&qword_10099B998, sub_100752278);
    }
    uint64_t v24 = sub_10000A720(v19, (uint64_t)qword_100A2B610);
    Row.get<A>(_:)(v73, v24, &type metadata for Double, &protocol witness table for Double);
    uint64_t v25 = v73[0];
    if (qword_10099B9A0 != -1) {
      swift_once(&qword_10099B9A0, sub_10075230C);
    }
    uint64_t v26 = sub_100004AEC(&qword_10099E700);
    uint64_t v27 = sub_10000A720(v26, (uint64_t)qword_100A2B628);
    uint64_t v28 = v65;
    Row.get<A>(_:)(v14, v27, v65, &protocol witness table for Date);
    uint64_t v58 = type metadata accessor for ObservedAdvertisement.Location(0LL);
    uint64_t v59 = v14;
    uint64_t v60 = v72;
    (*(void (**)(char *, void *, uint64_t))(v12 + 32))(&v72[*(int *)(v58 + 28)], v59, v28);
    *(void *)uint64_t v60 = v21;
    *((void *)v60 + 1) = v23;
    *((void *)v60 + 2) = v25;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56LL))(v60, 0LL, 1LL, v58);
    goto LABEL_17;
  }

  v73[0] = v3;
  swift_errorRetain(v3);
  uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  int v30 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v10, Error);
  if (v30 != enum case for QueryError.noSuchColumn(_:))
  {
    uint64_t v60 = v72;
    if (v30 == enum case for QueryError.unexpectedNullValue(_:))
    {
      swift_errorRelease(v3);
      (*(void (**)(char *, uint64_t))(v6 + 96))(v10, Error);
      swift_bridgeObjectRelease();
      uint64_t v32 = type metadata accessor for ObservedAdvertisement.Location(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v60, 1LL, 1LL, v32);
      goto LABEL_16;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, Error);
LABEL_26:
    uint64_t v42 = swift_errorRelease(v73[0]);
    swift_willThrow(v42);
    uint64_t v43 = type metadata accessor for Row(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8LL))(a1, v43);
  }

  swift_errorRelease(v3);
  (*(void (**)(char *, uint64_t))(v6 + 96))(v10, Error);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v60 = v72;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v72, 1LL, 1LL, v31);
LABEL_16:
  swift_errorRelease(v73[0]);
LABEL_17:
  uint64_t v34 = v70;
  uint64_t v33 = v71;
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v35 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v36 = sub_10000A720(v35, (uint64_t)qword_100A2B3E8);
  Row.get<A>(_:)(v33, v36, v34, &protocol witness table for UUID);
  if (qword_10099B8F0 != -1) {
    swift_once(&qword_10099B8F0, sub_100751688);
  }
  uint64_t v37 = sub_100004AEC(&qword_10099E6E0);
  uint64_t v38 = sub_10000A720(v37, (uint64_t)qword_100A2B418);
  unint64_t v39 = sub_1000864BC();
  Row.get<A>(_:)(v73, v38, &type metadata for UInt8, v39);
  char v48 = v73[0];
  uint64_t v49 = v69;
  if (LOBYTE(v73[0]) <= 2u)
  {
    if (qword_10099B8E8 != -1) {
      swift_once(&qword_10099B8E8, sub_1007515FC);
    }
    uint64_t v50 = sub_100004AEC(&qword_10099E730);
    uint64_t v51 = sub_10000A720(v50, (uint64_t)qword_100A2B400);
    unint64_t v52 = sub_100086818();
    Row.get<A>(_:)(v73, v51, &type metadata for UInt64, v52);
    uint64_t v61 = v73[0];
    uint64_t v62 = v68;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v68, v71, v70);
    uint64_t v63 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
    v62[*(int *)(v63 + 20)] = v48;
    *(void *)&v62[*(int *)(v63 + 24)] = v61;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56LL))(v62, 0LL, 1LL, v63);
LABEL_30:
    if (qword_10099B940 != -1) {
      swift_once(&qword_10099B940, sub_100751C44);
    }
    uint64_t v46 = sub_100004AEC(&qword_10099E780);
    uint64_t v47 = sub_10000A720(v46, (uint64_t)qword_100A2B508);
    Row.subscript.getter(v47, &type metadata for Data, &protocol witness table for Data);
    __asm { BR              X10 }
  }

  unint64_t v55 = sub_1000867D4();
  uint64_t v56 = swift_allocError(&type metadata for ObservationStoreService.Error, v55, 0LL, 0LL);
  *uint64_t v57 = 0;
  swift_willThrow(v56);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v71, v34);
  v73[0] = v56;
  swift_errorRetain(v56);
  uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  if (swift_dynamicCast(v49, v73, v40, Error, 0LL))
  {
    int v41 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v49, Error);
    if (v41 == enum case for QueryError.noSuchColumn(_:))
    {
      swift_errorRelease(v56);
      (*(void (**)(char *, uint64_t))(v6 + 96))(v49, Error);
      swift_bridgeObjectRelease();
LABEL_29:
      swift_bridgeObjectRelease();
      uint64_t v45 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v68, 1LL, 1LL, v45);
      swift_errorRelease(v73[0]);
      goto LABEL_30;
    }

    if (v41 == enum case for QueryError.unexpectedNullValue(_:))
    {
      swift_errorRelease(v56);
      (*(void (**)(char *, uint64_t))(v6 + 96))(v49, Error);
      goto LABEL_29;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v49, Error);
  }

  uint64_t v53 = swift_errorRelease(v73[0]);
  swift_willThrow(v53);
  uint64_t v54 = type metadata accessor for Row(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8LL))(a1, v54);
  return sub_100015794((uint64_t)v60, &qword_10099E770);
}

uint64_t sub_1000774BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v93 = a3;
  uint64_t v96 = a2;
  uint64_t v85 = a1;
  uint64_t v5 = sub_100004AEC(&qword_10099E760);
  uint64_t v83 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v82 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v81 - v8;
  uint64_t v10 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v99 = v10;
  uint64_t v100 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v89 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v87 = (char *)&v81 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v90 = (char *)&v81 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v88 = (char *)&v81 - v19;
  __chkstk_darwin(v18);
  unint64_t v102 = (char *)&v81 - v20;
  uint64_t v21 = type metadata accessor for Table(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v98 = (char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v101 = (char *)&v81 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v91 = (char *)&v81 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v92 = (char *)&v81 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v94 = (char *)&v81 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v95 = (char *)&v81 - v34;
  uint64_t v35 = a4 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  uint64_t v104 = a4;
  uint64_t v36 = a4 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  uint64_t v106 = v33;
  uint64_t v107 = &protocol witness table for Table;
  uint64_t v37 = sub_10000A7C8(v105);
  uint64_t v84 = v22;
  uint64_t v103 = *(void (**)(void *, uint64_t, uint64_t))(v22 + 16);
  v103(v37, v36, v21);
  if (qword_10099B8D8 != -1) {
    swift_once(&qword_10099B8D8, sub_1007514DC);
  }
  uint64_t v38 = sub_10000A720(v5, (uint64_t)qword_100A2B3D0);
  uint64_t v97 = v5;
  uint64_t v39 = v38;
  uint64_t v81 = v35;
  QueryType.subscript.getter(v38, v21);
  uint64_t v40 = v82;
  QueryType.subscript.getter(v39, v21);
  int v41 = v102;
  == infix<A>(_:_:)( v9,  v40,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v83 + 8);
  uint64_t v43 = v97;
  v42(v40, v97);
  v42(v9, v43);
  QueryType.join(_:on:)(v105, v41, v21, &protocol witness table for Table);
  uint64_t v44 = v41;
  uint64_t v100 = *(void *)(v100 + 8);
  ((void (*)(char *, uint64_t))v100)(v41, v99);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
  uint64_t v45 = v104 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
  uint64_t v106 = v21;
  uint64_t v107 = &protocol witness table for Table;
  uint64_t v46 = sub_10000A7C8(v105);
  v103(v46, v45, v21);
  QueryType.subscript.getter(v39, v21);
  QueryType.subscript.getter(v39, v21);
  == infix<A>(_:_:)( v9,  v40,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  uint64_t v47 = v97;
  v42(v40, v97);
  char v48 = (void (*)(char *, uint64_t))v100;
  v42(v9, v47);
  uint64_t v49 = v98;
  QueryType.join(_:on:)(v105, v44, v21, &protocol witness table for Table);
  uint64_t v50 = v99;
  v48(v44, v99);
  uint64_t v98 = *(char **)(v84 + 8);
  ((void (*)(char *, uint64_t))v98)(v49, v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
  uint64_t v51 = v86;
  unint64_t v52 = sub_10006BEB0(v85);
  uint64_t v97 = v51;
  uint64_t v53 = sub_1006F1060((uint64_t)v52);
  swift_bridgeObjectRelease();
  v105[0] = v53;
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v54 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v55 = sub_10000A720(v54, (uint64_t)qword_100A2B3E8);
  uint64_t v56 = sub_100004AEC(&qword_1009A0B30);
  uint64_t v57 = sub_1000372EC(&qword_10099E880, &qword_1009A0B30, (uint64_t)&protocol conformance descriptor for Set<A>);
  uint64_t v58 = v88;
  Collection<>.contains(_:)(v55, v56, v57, &protocol witness table for UUID);
  swift_bridgeObjectRelease();
  if (qword_10099B908 != -1) {
    swift_once(&qword_10099B908, sub_10075183C);
  }
  uint64_t v59 = sub_100004AEC(&qword_10099E6E0);
  uint64_t v60 = sub_10000A720(v59, (uint64_t)qword_100A2B460);
  LOBYTE(v105[0]) = 1;
  unint64_t v61 = sub_1000864BC();
  uint64_t v62 = v87;
  == infix<A>(_:_:)(v60, v105, &type metadata for UInt8, v61, &protocol witness table for Int64);
  LOBYTE(v105[0]) = 2;
  uint64_t v63 = v89;
  == infix<A>(_:_:)(v60, v105, &type metadata for UInt8, v61, &protocol witness table for Int64);
  uint64_t v64 = v90;
  || infix(_:_:)(v62, v63);
  uint64_t v65 = (void (*)(char *, uint64_t))v100;
  ((void (*)(char *, uint64_t))v100)(v63, v50);
  v65(v62, v50);
  uint64_t v66 = v102;
  && infix(_:_:)(v58, v64);
  v65(v64, v50);
  v65(v58, v50);
  uint64_t v67 = v91;
  uint64_t v68 = v101;
  QueryType.filter(_:)(v66, v21, &protocol witness table for Table);
  v65(v66, v50);
  uint64_t v69 = (void (*)(char *, uint64_t))v98;
  ((void (*)(char *, uint64_t))v98)(v68, v21);
  if (qword_10099B978 != -1) {
    swift_once(&qword_10099B978, sub_100752030);
  }
  uint64_t v70 = sub_10000A720(v50, (uint64_t)qword_100A2B5B0);
  LOBYTE(v105[0]) = v93 & 1;
  == infix<A>(_:_:)( v70,  v105,  &type metadata for Bool,  &protocol witness table for Bool,  &protocol witness table for Int64);
  uint64_t v71 = v92;
  QueryType.filter(_:)(v66, v21, &protocol witness table for Table);
  v65(v66, v50);
  v69(v67, v21);
  uint64_t v72 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v73 = swift_allocObject(v72, 72LL, 7LL);
  *(_OWORD *)(v73 + 16) = xmmword_1007E67D0;
  if (qword_10099B970 != -1) {
    swift_once(&qword_10099B970, sub_100751FA0);
  }
  uint64_t v74 = sub_100004AEC(&qword_10099E700);
  sub_10000A720(v74, (uint64_t)qword_100A2B598);
  uint64_t v75 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v74, v75);
  uint64_t v76 = v94;
  QueryType.order(_:)(v73, v21, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v69(v71, v21);
  uint64_t v77 = v95;
  QueryType.limit(_:)(v96, 0LL, v21, &protocol witness table for Table);
  v69(v76, v21);
  uint64_t v106 = v21;
  uint64_t v107 = &protocol witness table for Table;
  uint64_t v78 = sub_10000A7C8(v105);
  v103(v78, (uint64_t)v77, v21);
  uint64_t v79 = sub_100080D7C((uint64_t)v105, v104, (uint64_t (*)(uint64_t, uint64_t))sub_100070E28, &qword_10099E768);
  v69(v77, v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
  return v79;
}

uint64_t sub_100077DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v44 = *(void *)(v49 - 8);
  uint64_t v5 = __chkstk_darwin(v49);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v38 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v38 - v14;
  uint64_t v47 = type metadata accessor for Table(0LL);
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = type metadata accessor for Delete(0LL);
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_10006BD94(a1);
  if (!v20[2]) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v21 = sub_100474DE0();
  if (v21)
  {
    uint64_t v43 = v19;
    uint64_t v22 = v21;
    uint64_t v23 = sub_10006F1CC(v21, a2);
    if (v2)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v40 = v23;
      uint64_t v42 = v22;
      uint64_t v41 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
      uint64_t v50 = v20;
      if (qword_10099B8D8 != -1) {
        swift_once(&qword_10099B8D8, sub_1007514DC);
      }
      uint64_t v28 = sub_100004AEC(&qword_10099E760);
      uint64_t v29 = sub_10000A720(v28, (uint64_t)qword_100A2B3D0);
      uint64_t v39 = v29;
      uint64_t v38 = sub_100004AEC(&qword_10099E888);
      uint64_t v30 = sub_1000372EC(&qword_10099E890, &qword_10099E888, (uint64_t)&protocol conformance descriptor for [A]);
      Collection<>.contains(_:)(v29, v38, v30, &protocol witness table for Int64);
      swift_bridgeObjectRelease();
      uint64_t v50 = (void *)v40;
      uint64_t v31 = sub_100004AEC(&qword_10099E7B0);
      uint64_t v32 = sub_1000372EC(&qword_10099E7B8, &qword_10099E7B0, (uint64_t)&protocol conformance descriptor for Set<A>);
      Collection<>.contains(_:)(v39, v31, v32, &protocol witness table for Int64);
      swift_bridgeObjectRelease();
      LOBYTE(v50) = 0;
      == infix<A>(_:_:)( v7,  &v50,  &type metadata for Bool,  &protocol witness table for Bool,  &protocol witness table for Int64);
      uint64_t v33 = *(void (**)(char *, uint64_t))(v44 + 8);
      uint64_t v34 = v7;
      uint64_t v35 = v49;
      v33(v34, v49);
      && infix(_:_:)(v13, v10);
      v33(v10, v35);
      v33(v13, v35);
      uint64_t v36 = v47;
      QueryType.filter(_:)(v15, v47, &protocol witness table for Table);
      v33(v15, v35);
      uint64_t v37 = v43;
      QueryType.delete()(v36, &protocol witness table for Table);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v36);
      Connection.run(_:)(v37);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v37, v48);
    }

    return swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
    unint64_t v25 = sub_100086500();
    uint64_t v26 = swift_allocError(&type metadata for DatabaseError, v25, 0LL, 0LL);
    *(_DWORD *)uint64_t v27 = 2;
    *(_BYTE *)(v27 + 4) = 1;
    return swift_willThrow(v26);
  }

uint64_t sub_1000781E4(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v4 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Table(0LL);
  uint64_t v34 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Update(0LL);
  uint64_t v35 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10006BD94(a1);
  if (!v13[2]) {
    return swift_bridgeObjectRelease();
  }
  if (sub_100474DE0())
  {
    uint64_t v30 = v7;
    uint64_t v31 = v10;
    uint64_t v29 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
    uint64_t v37 = v13;
    if (qword_10099B8D8 != -1) {
      swift_once(&qword_10099B8D8, sub_1007514DC);
    }
    uint64_t v14 = sub_100004AEC(&qword_10099E760);
    uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2B3D0);
    uint64_t v16 = sub_100004AEC(&qword_10099E888);
    uint64_t v17 = sub_1000372EC(&qword_10099E890, &qword_10099E888, (uint64_t)&protocol conformance descriptor for [A]);
    Collection<>.contains(_:)(v15, v16, v17, &protocol witness table for Int64);
    swift_bridgeObjectRelease();
    uint64_t v18 = v30;
    QueryType.filter(_:)(v6, v30, &protocol witness table for Table);
    uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v20 = v33;
    v19(v6, v33);
    uint64_t v21 = sub_100004AEC(&qword_10099E810);
    uint64_t v22 = type metadata accessor for Setter(0LL);
    uint64_t v23 = swift_allocObject( v21,  ((*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL))
          + *(void *)(*(void *)(v22 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v23 + 16) = xmmword_1007E67D0;
    if (qword_10099B978 != -1) {
      swift_once(&qword_10099B978, sub_100752030);
    }
    uint64_t v24 = sub_10000A720(v20, (uint64_t)qword_100A2B5B0);
    char v36 = 1;
    <- infix<A>(_:_:)(v24, &v36, &type metadata for Bool, &protocol witness table for Bool);
    QueryType.update(_:)(v23, v18, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v18);
    Connection.run(_:)(v12);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v31);
    return swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
    unint64_t v26 = sub_100086500();
    uint64_t v27 = swift_allocError(&type metadata for DatabaseError, v26, 0LL, 0LL);
    *(_DWORD *)uint64_t v28 = 2;
    *(_BYTE *)(v28 + 4) = 1;
    return swift_willThrow(v27);
  }

uint64_t sub_100078558(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_10099E7A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v42 = (char *)v40 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v40 - v14;
  __chkstk_darwin(v13);
  uint64_t v45 = (char *)v40 - v16;
  uint64_t v49 = type metadata accessor for Table(0LL);
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v43 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = type metadata accessor for Delete(0LL);
  uint64_t v48 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v46 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100474DE0();
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = sub_10006F1CC(v19, a1);
    if (!v1)
    {
      v40[0] = v21;
      uint64_t v41 = v7;
      v40[1] = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
      if (qword_10099B940 != -1) {
        swift_once(&qword_10099B940, sub_100751C44);
      }
      uint64_t v22 = sub_100004AEC(&qword_10099E780);
      sub_10000A720(v22, (uint64_t)qword_100A2B508);
      uint64_t v23 = sub_1000372EC( &qword_10099E7A8,  &qword_10099E780,  (uint64_t)&protocol conformance descriptor for Expression<A>);
      ExpressionType<>.length.getter(v22, v23);
      uint64_t v51 = 28LL;
      == infix<A>(_:_:)( v6,  &v51,  &type metadata for Int,  &protocol witness table for Int,  &protocol witness table for Int64);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      uint64_t v51 = v40[0];
      if (qword_10099B8D8 != -1) {
        swift_once(&qword_10099B8D8, sub_1007514DC);
      }
      uint64_t v24 = sub_100004AEC(&qword_10099E760);
      uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2B3D0);
      uint64_t v26 = sub_100004AEC(&qword_10099E7B0);
      uint64_t v27 = sub_1000372EC(&qword_10099E7B8, &qword_10099E7B0, (uint64_t)&protocol conformance descriptor for Set<A>);
      Collection<>.contains(_:)(v25, v26, v27, &protocol witness table for Int64);
      swift_bridgeObjectRelease();
      LOBYTE(v51) = 0;
      uint64_t v28 = v42;
      == infix<A>(_:_:)( v10,  &v51,  &type metadata for Bool,  &protocol witness table for Bool,  &protocol witness table for Int64);
      uint64_t v29 = *(void (**)(char *, uint64_t))(v44 + 8);
      uint64_t v30 = v10;
      uint64_t v31 = v41;
      v29(v30, v41);
      uint64_t v32 = v45;
      && infix(_:_:)(v15, v28);
      v29(v28, v31);
      v29(v15, v31);
      uint64_t v33 = v43;
      uint64_t v34 = v49;
      QueryType.filter(_:)(v32, v49, &protocol witness table for Table);
      v29(v32, v31);
      uint64_t v35 = v46;
      QueryType.delete()(v34, &protocol witness table for Table);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v34);
      Connection.run(_:)(v35);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v35, v50);
    }

    return swift_release(v20);
  }

  else
  {
    unint64_t v37 = sub_100086500();
    uint64_t v38 = swift_allocError(&type metadata for DatabaseError, v37, 0LL, 0LL);
    *(_DWORD *)uint64_t v39 = 2;
    *(_BYTE *)(v39 + 4) = 1;
    return swift_willThrow(v38);
  }

uint64_t sub_1000789D0(uint64_t a1, uint64_t a2)
{
  uint64_t v87 = sub_100004AEC(&qword_10099E760);
  uint64_t v75 = *(void (**)(char *, uint64_t))(v87 - 8);
  uint64_t v4 = __chkstk_darwin(v87);
  uint64_t v77 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v76 = (char *)&v69 - v6;
  uint64_t v90 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v74 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v79 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for JoinType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Table(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v86 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v78 = (char *)&v69 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v80 = (char *)&v69 - v19;
  __chkstk_darwin(v18);
  uint64_t v81 = (char *)&v69 - v20;
  int64_t v21 = *(void *)(a1 + 16);
  uint64_t v88 = v8;
  uint64_t v89 = a2;
  uint64_t v83 = v13;
  uint64_t v84 = v11;
  uint64_t v82 = v9;
  if (v21)
  {
    uint64_t v85 = v12;
    v92[0] = _swiftEmptyArrayStorage;
    sub_1000329E4(0, v21, 0);
    uint64_t v22 = (void *)v92[0];
    uint64_t v23 = sub_1006F6728(a1);
    uint64_t v25 = v24;
    int v27 = v26 & 1;
    uint64_t v91 = (char *)(a1 + 56);
    while ((v23 & 0x8000000000000000LL) == 0 && v23 < 1LL << *(_BYTE *)(a1 + 32))
    {
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v25) {
        goto LABEL_20;
      }
      LODWORD(v95) = v27;
      uint64_t v28 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v23);
      uint64_t v12 = *v28;
      uint64_t v29 = v28[1];
      sub_10008699C(*v28, v29);
      v92[0] = v22;
      unint64_t v31 = v22[2];
      unint64_t v30 = v22[3];
      if (v31 >= v30 >> 1)
      {
        sub_1000329E4(v30 > 1, v31 + 1, 1);
        uint64_t v22 = (void *)v92[0];
      }

      _OWORD v22[2] = v31 + 1;
      uint64_t v32 = &v22[2 * v31];
      v32[4] = v12;
      v32[5] = v29 & 0xDFFFFFFFFFFFFFFFLL;
      uint64_t v33 = sub_1001FE5FC(v23, v25, v95 & 1, a1);
      uint64_t v23 = v33;
      uint64_t v25 = v34;
      int v27 = v35 & 1;
      if (!--v21)
      {
        uint64_t v70 = v22;
        sub_100086B14(v33, v34, v27);
        a2 = v89;
        uint64_t v11 = v84;
        uint64_t v12 = v85;
        uint64_t v9 = v82;
        uint64_t v13 = v83;
        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v70 = _swiftEmptyArrayStorage;
LABEL_12:
  uint64_t v85 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  char v36 = *(void (**)(void))(v9 + 104);
  unsigned int v73 = enum case for JoinType.leftOuter(_:);
  uint64_t v72 = (void (*)(char *, void, uint64_t))v36;
  v36(v11);
  unint64_t v37 = (char *)(a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
  uint64_t v93 = v12;
  uint64_t v94 = &protocol witness table for Table;
  uint64_t v38 = sub_10000A7C8(v92);
  uint64_t v39 = *(void (**)(void *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v91 = v37;
  uint64_t v95 = v39;
  v39(v38, (uint64_t)v37, v12);
  if (qword_10099B8D8 != -1) {
LABEL_21:
  }
    swift_once(&qword_10099B8D8, sub_1007514DC);
  uint64_t v40 = v87;
  uint64_t v41 = sub_10000A720(v87, (uint64_t)qword_100A2B3D0);
  uint64_t v71 = v41;
  uint64_t v42 = v76;
  QueryType.subscript.getter(v41, v12);
  uint64_t v43 = v77;
  QueryType.subscript.getter(v41, v12);
  uint64_t v44 = v79;
  == infix<A>(_:_:)( v42,  v43,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  uint64_t v45 = (void (*)(char *, uint64_t))*((void *)v75 + 1);
  uint64_t v75 = v45;
  v45(v43, v40);
  v45(v42, v40);
  uint64_t v46 = v84;
  QueryType.join(_:_:on:)(v84, v92, v44, v12, &protocol witness table for Table);
  uint64_t v91 = *(char **)(v74 + 8);
  ((void (*)(char *, uint64_t))v91)(v44, v90);
  uint64_t v82 = *(void *)(v82 + 8);
  uint64_t v47 = v88;
  ((void (*)(char *, uint64_t))v82)(v46, v88);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
  v72(v46, v73, v47);
  uint64_t v48 = v89 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  uint64_t v93 = v12;
  uint64_t v94 = &protocol witness table for Table;
  uint64_t v49 = sub_10000A7C8(v92);
  v95(v49, v48, v12);
  uint64_t v50 = v71;
  QueryType.subscript.getter(v71, v12);
  QueryType.subscript.getter(v50, v12);
  == infix<A>(_:_:)( v42,  v43,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  uint64_t v51 = v87;
  unint64_t v52 = v75;
  v75(v43, v87);
  v52(v42, v51);
  uint64_t v53 = v78;
  uint64_t v54 = v86;
  QueryType.join(_:_:on:)(v46, v92, v44, v12, &protocol witness table for Table);
  ((void (*)(char *, uint64_t))v91)(v44, v90);
  ((void (*)(char *, uint64_t))v82)(v46, v88);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v83 + 8);
  v55(v54, v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
  v92[0] = v70;
  if (qword_10099B940 != -1) {
    swift_once(&qword_10099B940, sub_100751C44);
  }
  uint64_t v56 = sub_100004AEC(&qword_10099E780);
  uint64_t v57 = sub_10000A720(v56, (uint64_t)qword_100A2B508);
  uint64_t v58 = sub_100004AEC(&qword_10099E868);
  uint64_t v59 = sub_1000372EC(&qword_10099E870, &qword_10099E868, (uint64_t)&protocol conformance descriptor for [A]);
  Collection<>.contains(_:)(v57, v58, v59, &protocol witness table for Data);
  swift_bridgeObjectRelease();
  uint64_t v60 = v80;
  QueryType.filter(_:)(v44, v12, &protocol witness table for Table);
  ((void (*)(char *, uint64_t))v91)(v44, v90);
  v55(v53, v12);
  uint64_t v61 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v62 = swift_allocObject(v61, 72LL, 7LL);
  *(_OWORD *)(v62 + 16) = xmmword_1007E67D0;
  if (qword_10099B970 != -1) {
    swift_once(&qword_10099B970, sub_100751FA0);
  }
  uint64_t v63 = sub_100004AEC(&qword_10099E700);
  sub_10000A720(v63, (uint64_t)qword_100A2B598);
  uint64_t v64 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v63, v64);
  uint64_t v65 = v81;
  QueryType.order(_:)(v62, v12, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v55(v60, v12);
  uint64_t v93 = v12;
  uint64_t v94 = &protocol witness table for Table;
  uint64_t v66 = sub_10000A7C8(v92);
  v95(v66, (uint64_t)v65, v12);
  uint64_t v67 = sub_100080D7C((uint64_t)v92, v89, (uint64_t (*)(uint64_t, uint64_t))sub_100070E28, &qword_10099E768);
  v55(v65, v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
  return v67;
}

uint64_t sub_100079238(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v77 = *(void *)(v4 - 8);
  uint64_t v78 = v4;
  __chkstk_darwin(v4);
  uint64_t v76 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_10099E7A0);
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v73 = v6;
  __chkstk_darwin(v6);
  uint64_t v71 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099E760);
  uint64_t v68 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v62 - v12;
  uint64_t v69 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v67 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v81 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Table(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v66 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v74 = (char *)&v62 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v75 = (char *)&v62 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v79 = (char *)&v62 - v24;
  uint64_t v80 = a1;
  uint64_t v25 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  uint64_t v83 = v23;
  uint64_t v84 = &protocol witness table for Table;
  char v26 = sub_10000A7C8(v82);
  uint64_t v70 = v16;
  int v27 = *(void (**)(void *, char *, uint64_t))(v16 + 16);
  uint64_t v65 = v25;
  uint64_t v63 = v27;
  v27(v26, (char *)v25, v15);
  if (qword_10099B8D8 != -1) {
    swift_once(&qword_10099B8D8, sub_1007514DC);
  }
  uint64_t v28 = sub_10000A720(v8, (uint64_t)qword_100A2B3D0);
  QueryType.subscript.getter(v28, v15);
  QueryType.subscript.getter(v28, v15);
  uint64_t v29 = v81;
  == infix<A>(_:_:)( v13,  v11,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  unint64_t v30 = *(void (**)(char *, uint64_t))(v68 + 8);
  v30(v11, v8);
  v30(v13, v8);
  unint64_t v31 = v66;
  QueryType.join(_:on:)(v82, v29, v15, &protocol witness table for Table);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v67 + 8);
  uint64_t v33 = v69;
  v32(v29, v69);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v82);
  uint64_t v34 = v15;
  if (qword_10099B940 != -1) {
    swift_once(&qword_10099B940, sub_100751C44);
  }
  uint64_t v35 = sub_100004AEC(&qword_10099E780);
  sub_10000A720(v35, (uint64_t)qword_100A2B508);
  uint64_t v36 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  unint64_t v37 = v71;
  ExpressionType<>.length.getter(v35, v36);
  v82[0] = 6LL;
  uint64_t v38 = v81;
  == infix<A>(_:_:)( v37,  v82,  &type metadata for Int,  &protocol witness table for Int,  &protocol witness table for Int64);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v37, v73);
  uint64_t v39 = v74;
  QueryType.filter(_:)(v38, v34, &protocol witness table for Table);
  v32(v38, v33);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v70 + 8);
  v40(v31, v34);
  uint64_t v41 = v75;
  if (qword_10099B970 != -1) {
    swift_once(&qword_10099B970, sub_100751FA0);
  }
  uint64_t v42 = sub_100004AEC(&qword_10099E700);
  uint64_t v43 = sub_10000A720(v42, (uint64_t)qword_100A2B598);
  uint64_t v44 = v76;
  Date.init(timeIntervalSinceNow:)(v43, -a2);
  uint64_t v45 = v43;
  uint64_t v46 = v78;
  >= infix<A>(_:_:)(v45, v44, v78, &protocol witness table for Date, &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v44, v46);
  QueryType.filter(_:)(v38, v34, &protocol witness table for Table);
  v32(v38, v33);
  v40(v39, v34);
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v47 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v48 = sub_10000A720(v47, (uint64_t)qword_100A2B3E8);
  uint64_t v83 = v47;
  uint64_t v84 = (void *)sub_1000372EC( &qword_10099E7D0,  &qword_10099E6D8,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  uint64_t v49 = sub_10000A7C8(v82);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16LL))(v49, v48, v47);
  uint64_t v50 = v79;
  SchemaType.select(_:_:)(v82, _swiftEmptyArrayStorage, v34, &protocol witness table for Table);
  v40(v41, v34);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v82);
  uint64_t v51 = v80;
  uint64_t v52 = sub_1000799BC();
  if (v52)
  {
    uint64_t v53 = v52;
    uint64_t v83 = v34;
    uint64_t v84 = &protocol witness table for Table;
    uint64_t v54 = sub_10000A7C8(v82);
    v63(v54, v50, v34);
    uint64_t v51 = v53;
    uint64_t v55 = v64;
    Connection.prepare(_:)(v82);
    if (v55)
    {
      v40(v50, v34);
      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v82);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v82);
      uint64_t v59 = type metadata accessor for UUID(0LL);
      uint64_t v60 = dispatch thunk of _AnySequenceBox._map<A>(_:)(sub_100086428, 0LL, v59);
      swift_release();
      uint64_t v51 = sub_1006F1060(v60);
      swift_release();
      swift_bridgeObjectRelease();
      v40(v50, v34);
    }
  }

  else
  {
    unint64_t v56 = sub_100086500();
    uint64_t v57 = swift_allocError(&type metadata for DatabaseError, v56, 0LL, 0LL);
    *(_DWORD *)uint64_t v58 = 2;
    *(_BYTE *)(v58 + 4) = 1;
    swift_willThrow(v57);
    v40(v50, v34);
  }

  return v51;
}

uint64_t sub_1000799BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v3 = v2 + 4;
  uint64_t v4 = v2 + 5;
  os_unfair_lock_lock(v2 + 5);
  sub_1003AB4C8(v3, &v10);
  os_unfair_lock_unlock(v4);
  uint64_t v5 = 0LL;
  if (v10 == 1)
  {
    uint64_t v6 = *(void *)(v1 + 48);
    uint64_t v7 = sub_100004AEC(&qword_10099E758);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10008696C, v1, v6, (char *)&type metadata for () + 8, v7);
    uint64_t v8 = v10;
    if (v10)
    {
      uint64_t v5 = *(void *)(v10 + 16);
      swift_retain(v5);
      swift_release(v8);
    }

    else
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t sub_100079A88()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v3 = v2 + 4;
  uint64_t v4 = v2 + 5;
  os_unfair_lock_lock(v2 + 5);
  sub_1003AB4C8(v3, &v9);
  os_unfair_lock_unlock(v4);
  uint64_t v5 = 0LL;
  if (v9 == 1)
  {
    uint64_t v6 = *(void *)(v1 + 40);
    uint64_t v7 = sub_100004AEC(&qword_10099E758);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100086984, v1, v6, (char *)&type metadata for () + 8, v7);
    if (v9)
    {
      uint64_t v5 = *(void *)(v9 + 16);
      swift_retain();
      swift_release();
    }

    else
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t sub_100079B54(uint64_t a1, uint64_t a2)
{
  uint64_t v71 = a2;
  uint64_t v4 = sub_100004AEC(&qword_10099E760);
  uint64_t v62 = *(void *)(v4 - 8);
  uint64_t v63 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v60 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v59 = (char *)&v58 - v7;
  uint64_t v70 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v61 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v65 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = type metadata accessor for Table(0LL);
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v9 = __chkstk_darwin(v68);
  uint64_t v64 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  __chkstk_darwin(v11);
  uint64_t v67 = (char *)&v58 - v12;
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v66 = v15;
  if (v13)
  {
    v73[0] = _swiftEmptyArrayStorage;
    sub_1000329E4(0, v13, 0);
    uint64_t v14 = (void *)v73[0];
    uint64_t v16 = sub_1006F6728(a1);
    uint64_t v18 = v17;
    int v20 = v19 & 1;
    uint64_t v72 = (char *)(a1 + 56);
    while ((v16 & 0x8000000000000000LL) == 0 && v16 < 1LL << *(_BYTE *)(a1 + 32))
    {
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v18) {
        goto LABEL_19;
      }
      LODWORD(v76) = v20;
      uint64_t v21 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v16);
      uint64_t v2 = *v21;
      uint64_t v22 = v21[1];
      sub_10008699C(*v21, v22);
      v73[0] = v14;
      unint64_t v24 = v14[2];
      unint64_t v23 = v14[3];
      if (v24 >= v23 >> 1)
      {
        sub_1000329E4(v23 > 1, v24 + 1, 1);
        uint64_t v14 = (void *)v73[0];
      }

      v14[2] = v24 + 1;
      uint64_t v25 = &v14[2 * v24];
      v25[4] = v2;
      v25[5] = v22 & 0xDFFFFFFFFFFFFFFFLL;
      uint64_t v26 = sub_1001FE5FC(v16, v18, v76 & 1, a1);
      uint64_t v16 = v26;
      uint64_t v18 = v27;
      int v20 = v28 & 1;
      if (!--v13)
      {
        sub_100086B14(v26, v27, v20);
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  else
  {
LABEL_11:
    uint64_t v76 = v14;
    uint64_t v29 = v71 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
    uint64_t v2 = v68;
    uint64_t v74 = v68;
    uint64_t v75 = &protocol witness table for Table;
    unint64_t v30 = sub_10000A7C8(v73);
    unint64_t v31 = *(char **)(v69 + 16);
    uint64_t v58 = v29;
    uint64_t v72 = v31;
    ((void (*)(void *, uint64_t, uint64_t))v31)(v30, v29, v2);
    if (qword_10099B8D8 == -1) {
      goto LABEL_12;
    }
  }

  swift_once(&qword_10099B8D8, sub_1007514DC);
LABEL_12:
  uint64_t v32 = v63;
  uint64_t v33 = sub_10000A720(v63, (uint64_t)qword_100A2B3D0);
  uint64_t v34 = v59;
  QueryType.subscript.getter(v33, v2);
  uint64_t v35 = v60;
  QueryType.subscript.getter(v33, v2);
  uint64_t v36 = v65;
  == infix<A>(_:_:)( v34,  v35,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  unint64_t v37 = *(void (**)(char *, uint64_t))(v62 + 8);
  v37(v35, v32);
  v37(v34, v32);
  uint64_t v38 = v64;
  uint64_t v39 = v36;
  QueryType.join(_:on:)(v73, v36, v2, &protocol witness table for Table);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v61 + 8);
  v40(v36, v70);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v73);
  v73[0] = v76;
  uint64_t v41 = v2;
  if (qword_10099B940 != -1) {
    swift_once(&qword_10099B940, sub_100751C44);
  }
  uint64_t v42 = sub_100004AEC(&qword_10099E780);
  uint64_t v43 = sub_10000A720(v42, (uint64_t)qword_100A2B508);
  uint64_t v44 = sub_100004AEC(&qword_10099E868);
  uint64_t v45 = sub_1000372EC(&qword_10099E870, &qword_10099E868, (uint64_t)&protocol conformance descriptor for [A]);
  Collection<>.contains(_:)(v43, v44, v45, &protocol witness table for Data);
  swift_bridgeObjectRelease();
  uint64_t v46 = v66;
  QueryType.filter(_:)(v39, v2, &protocol witness table for Table);
  v40(v39, v70);
  uint64_t v47 = *(void (**)(char *, uint64_t))(v69 + 8);
  v47(v38, v41);
  uint64_t v48 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v49 = swift_allocObject(v48, 72LL, 7LL);
  *(_OWORD *)(v49 + 16) = xmmword_1007E67D0;
  uint64_t v50 = v46;
  uint64_t v51 = v41;
  if (qword_10099B9A0 != -1) {
    swift_once(&qword_10099B9A0, sub_10075230C);
  }
  uint64_t v52 = sub_100004AEC(&qword_10099E700);
  sub_10000A720(v52, (uint64_t)qword_100A2B628);
  uint64_t v53 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v52, v53);
  uint64_t v54 = v67;
  QueryType.order(_:)(v49, v51, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v47(v50, v51);
  uint64_t v74 = v51;
  uint64_t v75 = &protocol witness table for Table;
  uint64_t v55 = sub_10000A7C8(v73);
  ((void (*)(void *, char *, uint64_t))v72)(v55, v54, v51);
  uint64_t v56 = sub_10007A174((uint64_t)v73);
  v47(v54, v51);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v73);
  return v56;
}

uint64_t sub_10007A174(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v87 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v83 = (uint64_t *)((char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v4);
  uint64_t v78 = (uint64_t *)((char *)&v75 - v6);
  uint64_t v7 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v85 = *(void *)(v7 - 8);
  uint64_t v86 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v75 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v88 = (uint64_t *)((char *)&v75 - v14);
  __chkstk_darwin(v13);
  uint64_t v82 = (uint64_t)&v75 - v15;
  uint64_t v16 = sub_100004AEC(&qword_10099E710);
  uint64_t v17 = __chkstk_darwin(v16);
  char v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v81 = (char *)&v75 - v20;
  uint64_t v21 = type metadata accessor for Row(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v89 = (char *)&v75 - v27;
  __chkstk_darwin(v26);
  uint64_t v79 = (char *)&v75 - v28;
  uint64_t v29 = sub_1000799BC();
  if (!v29)
  {
    unint64_t v52 = sub_100086500();
    uint64_t v53 = swift_allocError(&type metadata for DatabaseError, v52, 0LL, 0LL);
    *(_DWORD *)uint64_t v54 = 2;
    *(_BYTE *)(v54 + 4) = 1;
    return swift_willThrow(v53);
  }

  uint64_t v30 = v29;
  uint64_t v91 = v22;
  uint64_t v31 = Connection.prepare(_:)(a1);
  if (v1) {
    return swift_release();
  }
  uint64_t v32 = v31;
  uint64_t v75 = v30;
  uint64_t v33 = swift_retain();
  uint64_t v34 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v33);
  uint64_t v93 = _swiftEmptyArrayStorage;
  sub_100032A00(0, v34 & ~(v34 >> 63), 0);
  uint64_t v35 = swift_retain();
  uint64_t v84 = dispatch thunk of _AnySequenceBox._makeIterator()(v35);
  uint64_t v76 = v32;
  uint64_t result = swift_release();
  if (v34 < 0)
  {
    __break(1u);
LABEL_41:
    __break(1u);
    return result;
  }

  uint64_t v80 = v3;
  uint64_t v37 = v91;
  if (v34)
  {
    uint64_t v77 = v19;
    do
    {
      dispatch thunk of _AnyIteratorBoxBase.next()(result);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v19, 1LL, v21);
      if ((_DWORD)result == 1) {
        goto LABEL_41;
      }
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v25, v19, v21);
      if (qword_10099B988 != -1) {
        swift_once(&qword_10099B988, sub_100752154);
      }
      uint64_t v38 = sub_100004AEC(&qword_10099E778);
      uint64_t v39 = sub_10000A720(v38, (uint64_t)qword_100A2B5E0);
      Row.get<A>(_:)(&v92, v39, &type metadata for Double, &protocol witness table for Double);
      *(void *)uint64_t v10 = v92;
      if (qword_10099B990 != -1) {
        swift_once(&qword_10099B990, sub_1007521E4);
      }
      uint64_t v40 = sub_10000A720(v38, (uint64_t)qword_100A2B5F8);
      Row.get<A>(_:)(&v92, v40, &type metadata for Double, &protocol witness table for Double);
      *((void *)v10 + 1) = v92;
      if (qword_10099B998 != -1) {
        swift_once(&qword_10099B998, sub_100752278);
      }
      uint64_t v41 = sub_10000A720(v38, (uint64_t)qword_100A2B610);
      Row.get<A>(_:)(&v92, v41, &type metadata for Double, &protocol witness table for Double);
      uint64_t v42 = v21;
      *((void *)v10 + 2) = v92;
      uint64_t v43 = v91;
      if (qword_10099B9A0 != -1) {
        swift_once(&qword_10099B9A0, sub_10075230C);
      }
      uint64_t v44 = sub_100004AEC(&qword_10099E700);
      uint64_t v45 = sub_10000A720(v44, (uint64_t)qword_100A2B628);
      uint64_t v46 = v83;
      Row.get<A>(_:)(v83, v45, v3, &protocol witness table for Date);
      uint64_t v47 = *(void (**)(char *, uint64_t))(v43 + 8);
      v47(v25, v42);
      uint64_t v48 = v46;
      uint64_t v21 = v42;
      (*(void (**)(char *, void *, uint64_t))(v87 + 32))(&v10[*(int *)(v86 + 28)], v48, v3);
      sub_10002218C((uint64_t)v10, (uint64_t)v90, type metadata accessor for ObservedAdvertisement.Location);
      char v19 = v77;
      v47(v77, v21);
      uint64_t v49 = v93;
      if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) == 0)
      {
        sub_100032A00(0, v49[2] + 1LL, 1);
        uint64_t v49 = v93;
      }

      unint64_t v51 = v49[2];
      unint64_t v50 = v49[3];
      if (v51 >= v50 >> 1)
      {
        sub_100032A00(v50 > 1, v51 + 1, 1);
        uint64_t v49 = v93;
      }

      v49[2] = v51 + 1;
      uint64_t result = sub_10002218C( (uint64_t)v90,  (uint64_t)v49 + ((*(unsigned __int8 *)(v85 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))
               + *(void *)(v85 + 72) * v51,
                 type metadata accessor for ObservedAdvertisement.Location);
      --v34;
      uint64_t v3 = v80;
      uint64_t v37 = v91;
    }

    while (v34);
  }

  uint64_t v55 = (uint64_t)v81;
  dispatch thunk of _AnyIteratorBoxBase.next()(result);
  uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  if (v90(v55, 1LL, v21) != 1)
  {
    uint64_t v83 = *(void **)(v37 + 32);
    uint64_t v58 = v79;
    do
    {
      ((void (*)(char *, uint64_t, uint64_t))v83)(v58, v55, v21);
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v89, v58, v21);
      if (qword_10099B988 != -1) {
        swift_once(&qword_10099B988, sub_100752154);
      }
      uint64_t v59 = sub_100004AEC(&qword_10099E778);
      uint64_t v60 = sub_10000A720(v59, (uint64_t)qword_100A2B5E0);
      Row.get<A>(_:)(&v92, v60, &type metadata for Double, &protocol witness table for Double);
      *uint64_t v88 = v92;
      if (qword_10099B990 != -1) {
        swift_once(&qword_10099B990, sub_1007521E4);
      }
      uint64_t v61 = sub_10000A720(v59, (uint64_t)qword_100A2B5F8);
      Row.get<A>(_:)(&v92, v61, &type metadata for Double, &protocol witness table for Double);
      v88[1] = v92;
      if (qword_10099B998 != -1) {
        swift_once(&qword_10099B998, sub_100752278);
      }
      uint64_t v62 = sub_10000A720(v59, (uint64_t)qword_100A2B610);
      Row.get<A>(_:)(&v92, v62, &type metadata for Double, &protocol witness table for Double);
      v88[2] = v92;
      if (qword_10099B9A0 != -1) {
        swift_once(&qword_10099B9A0, sub_10075230C);
      }
      uint64_t v63 = sub_100004AEC(&qword_10099E700);
      uint64_t v64 = sub_10000A720(v63, (uint64_t)qword_100A2B628);
      uint64_t v65 = v78;
      uint64_t v66 = v89;
      Row.get<A>(_:)(v78, v64, v3, &protocol witness table for Date);
      uint64_t v67 = *(void (**)(char *, uint64_t))(v91 + 8);
      v67(v66, v21);
      uint64_t v68 = v88;
      (*(void (**)(char *, void *, uint64_t))(v87 + 32))((char *)v88 + *(int *)(v86 + 28), v65, v3);
      uint64_t v69 = (uint64_t)v68;
      uint64_t v58 = v79;
      sub_10002218C(v69, v82, type metadata accessor for ObservedAdvertisement.Location);
      v67(v58, v21);
      uint64_t v70 = v93;
      if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) == 0)
      {
        sub_100032A00(0, v70[2] + 1LL, 1);
        uint64_t v70 = v93;
      }

      unint64_t v72 = v70[2];
      unint64_t v71 = v70[3];
      if (v72 >= v71 >> 1)
      {
        sub_100032A00(v71 > 1, v72 + 1, 1);
        uint64_t v70 = v93;
      }

      v70[2] = v72 + 1;
      uint64_t v73 = sub_10002218C( v82,  (uint64_t)v70 + ((*(unsigned __int8 *)(v85 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))
            + *(void *)(v85 + 72) * v72,
              type metadata accessor for ObservedAdvertisement.Location);
      uint64_t v55 = (uint64_t)v81;
      dispatch thunk of _AnyIteratorBoxBase.next()(v73);
      int v74 = v90(v55, 1LL, v21);
      uint64_t v3 = v80;
    }

    while (v74 != 1);
  }

  swift_release();
  sub_100015794(v55, &qword_10099E710);
  swift_release();
  swift_release_n(v76, 2LL);
  uint64_t v56 = v93;
  uint64_t v57 = sub_100004AEC(&qword_10099E878);
  uint64_t result = swift_allocObject(v57, 24LL, 7LL);
  *(void *)(result + 16) = v56;
  return result;
}

uint64_t sub_10007ABB0(uint64_t a1, uint64_t a2)
{
  uint64_t v102 = a1;
  uint64_t v111 = a2;
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v2);
  uint64_t v96 = (char *)v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = sub_100004AEC(&qword_10099E850);
  uint64_t v98 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v95 = (char *)v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = sub_100004AEC(&qword_10099E7A0);
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v90 = (char *)v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_10099E760);
  uint64_t v82 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v88 = (char *)v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v84 = (char *)v74 - v9;
  uint64_t v107 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v81 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v87 = (char *)v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for JoinType(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Table(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v103 = (char *)v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v83 = (char *)v74 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v89 = (char *)v74 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v93 = (char *)v74 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v94 = (char *)v74 - v26;
  __chkstk_darwin(v25);
  uint64_t v99 = (char *)v74 - v27;
  uint64_t v28 = sub_100004AEC(&qword_10099E858);
  uint64_t v97 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_1000372EC(&qword_10099E860, &qword_10099E858, (uint64_t)&protocol conformance descriptor for Expression<A>);
  uint64_t v106 = v30;
  uint64_t v101 = v28;
  ExpressionType.init(_:)(0xD000000000000010LL, 0x800000010084D8A0LL, v28, v31);
  uint64_t v32 = v111;
  uint64_t v33 = v111 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  uint64_t v80 = v12;
  uint64_t v34 = *(void (**)(void))(v12 + 104);
  uint64_t v86 = v14;
  unsigned int v79 = enum case for JoinType.leftOuter(_:);
  uint64_t v104 = v11;
  uint64_t v78 = (void (*)(char *, void, uint64_t))v34;
  v34(v14);
  uint64_t v35 = (void (*)(char *, uint64_t))(v32
                                             + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
  uint64_t v109 = v15;
  uint64_t v110 = &protocol witness table for Table;
  uint64_t v36 = sub_10000A7C8(&v108);
  uint64_t v85 = v16;
  uint64_t v37 = *(void (**)(void *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v76 = v35;
  uint64_t v105 = v37;
  v37(v36, (uint64_t)v35, v15);
  if (qword_10099B8D8 != -1) {
    swift_once(&qword_10099B8D8, sub_1007514DC);
  }
  uint64_t v38 = v6;
  uint64_t v39 = sub_10000A720(v6, (uint64_t)qword_100A2B3D0);
  uint64_t v75 = v39;
  uint64_t v40 = v84;
  QueryType.subscript.getter(v39, v15);
  uint64_t v41 = v88;
  QueryType.subscript.getter(v39, v15);
  uint64_t v42 = v87;
  == infix<A>(_:_:)( v40,  v41,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  v74[1] = v33;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v82 + 8);
  uint64_t v76 = v43;
  uint64_t v77 = v38;
  v43(v41, v38);
  v43(v40, v38);
  uint64_t v44 = v86;
  QueryType.join(_:_:on:)(v86, &v108, v42, v15, &protocol witness table for Table);
  uint64_t v81 = *(void *)(v81 + 8);
  ((void (*)(char *, uint64_t))v81)(v42, v107);
  uint64_t v82 = *(void *)(v80 + 8);
  uint64_t v45 = v104;
  ((void (*)(char *, uint64_t))v82)(v44, v104);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v108);
  v78(v44, v79, v45);
  uint64_t v46 = v111 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  uint64_t v109 = v15;
  uint64_t v110 = &protocol witness table for Table;
  uint64_t v47 = sub_10000A7C8(&v108);
  v105(v47, v46, v15);
  uint64_t v48 = v75;
  QueryType.subscript.getter(v75, v15);
  QueryType.subscript.getter(v48, v15);
  == infix<A>(_:_:)( v40,  v41,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  uint64_t v49 = v41;
  unint64_t v50 = (void (*)(char *, uint64_t))v81;
  uint64_t v51 = v77;
  unint64_t v52 = v76;
  v76(v49, v77);
  v52(v40, v51);
  uint64_t v53 = v83;
  uint64_t v54 = v103;
  QueryType.join(_:_:on:)(v44, &v108, v42, v15, &protocol witness table for Table);
  v50(v42, v107);
  ((void (*)(char *, uint64_t))v82)(v44, v104);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v85 + 8);
  v55(v54, v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v108);
  uint64_t v56 = v53;
  if (qword_10099B940 != -1) {
    swift_once(&qword_10099B940, sub_100751C44);
  }
  uint64_t v57 = sub_100004AEC(&qword_10099E780);
  sub_10000A720(v57, (uint64_t)qword_100A2B508);
  uint64_t v58 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  uint64_t v59 = v90;
  ExpressionType<>.length.getter(v57, v58);
  uint64_t v108 = 28LL;
  == infix<A>(_:_:)( v59,  &v108,  &type metadata for Int,  &protocol witness table for Int,  &protocol witness table for Int64);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v59, v92);
  uint64_t v60 = v89;
  QueryType.filter(_:)(v42, v15, &protocol witness table for Table);
  v50(v42, v107);
  v55(v56, v15);
  uint64_t v61 = type metadata accessor for UUID(0LL);
  uint64_t v62 = (uint64_t)v96;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v96, 1LL, 1LL, v61);
  uint64_t v63 = v95;
  == infix<A>(_:_:)(v106, v62, v61, &protocol witness table for UUID, &protocol witness table for String);
  sub_100015794(v62, &qword_10099D8A0);
  uint64_t v64 = v93;
  QueryType.filter(_:)(v63, v15, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v63, v100);
  v55(v60, v15);
  uint64_t v65 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v66 = swift_allocObject(v65, 72LL, 7LL);
  *(_OWORD *)(v66 + 16) = xmmword_1007E67D0;
  if (qword_10099B970 != -1) {
    swift_once(&qword_10099B970, sub_100751FA0);
  }
  uint64_t v67 = sub_100004AEC(&qword_10099E700);
  sub_10000A720(v67, (uint64_t)qword_100A2B598);
  uint64_t v68 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.asc.getter(v67, v68);
  uint64_t v69 = v94;
  QueryType.order(_:)(v66, v15, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v55(v64, v15);
  uint64_t v70 = v99;
  QueryType.limit(_:)(v102, 0LL, v15, &protocol witness table for Table);
  v55(v69, v15);
  uint64_t v109 = v15;
  uint64_t v110 = &protocol witness table for Table;
  unint64_t v71 = sub_10000A7C8(&v108);
  v105(v71, (uint64_t)v70, v15);
  uint64_t v72 = sub_100080D7C((uint64_t)&v108, v111, (uint64_t (*)(uint64_t, uint64_t))sub_100070E28, &qword_10099E768);
  v55(v70, v15);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v106, v101);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v108);
  return v72;
}

uint64_t sub_10007B5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v84 = a1;
  uint64_t v3 = sub_100004AEC(&qword_10099E710);
  __chkstk_darwin(v3);
  int v74 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Row(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099E760);
  uint64_t v80 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v71 - v13;
  uint64_t v83 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v79 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v90 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Table(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v81 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v82 = (char *)&v71 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v85 = (char *)&v71 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v86 = (char *)&v71 - v25;
  __chkstk_darwin(v24);
  uint64_t v87 = (char *)&v71 - v26;
  if (sub_1000799BC())
  {
    uint64_t v76 = v12;
    unint64_t v71 = v8;
    uint64_t v72 = v6;
    uint64_t v73 = v5;
    uint64_t v27 = (char *)(a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo);
    uint64_t v92 = v16;
    uint64_t v93 = &protocol witness table for Table;
    uint64_t v28 = sub_10000A7C8(v91);
    uint64_t v29 = *(void (**)(void *, char *, uint64_t))(v17 + 16);
    uint64_t v75 = v27;
    uint64_t v77 = v17;
    uint64_t v78 = v29;
    v29(v28, v27, v16);
    if (qword_10099B8D8 != -1) {
      swift_once(&qword_10099B8D8, sub_1007514DC);
    }
    uint64_t v30 = sub_10000A720(v9, (uint64_t)qword_100A2B3D0);
    QueryType.subscript.getter(v30, v16);
    uint64_t v31 = v76;
    QueryType.subscript.getter(v30, v16);
    uint64_t v32 = v90;
    == infix<A>(_:_:)( v14,  v31,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
    uint64_t v33 = *(void (**)(char *, uint64_t))(v80 + 8);
    v33(v31, v9);
    v33(v14, v9);
    uint64_t v34 = v81;
    QueryType.join(_:on:)(v91, v32, v16, &protocol witness table for Table);
    uint64_t v35 = v83;
    uint64_t v80 = *(void *)(v79 + 8);
    ((void (*)(char *, uint64_t))v80)(v32, v83);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v91);
    uint64_t v36 = v16;
    if (qword_10099B948 != -1) {
      swift_once(&qword_10099B948, sub_100751CD8);
    }
    uint64_t v37 = sub_100004AEC(&qword_10099E6E0);
    uint64_t v38 = sub_10000A720(v37, (uint64_t)qword_100A2B520);
    uint64_t v92 = v37;
    uint64_t v93 = (void *)sub_1000372EC( &qword_10099E7E8,  &qword_10099E6E0,  (uint64_t)&protocol conformance descriptor for Expression<A>);
    uint64_t v39 = sub_10000A7C8(v91);
    uint64_t v40 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16LL);
    uint64_t v79 = v38;
    v40(v39, v38, v37);
    uint64_t v41 = v82;
    SchemaType.select(_:_:)(v91, _swiftEmptyArrayStorage, v16, &protocol witness table for Table);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v77 + 8);
    v42(v34, v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v91);
    uint64_t v43 = v85;
    if (qword_10099B8E0 != -1) {
      swift_once(&qword_10099B8E0, sub_100751568);
    }
    uint64_t v44 = sub_100004AEC(&qword_10099E6D8);
    uint64_t v45 = sub_10000A720(v44, (uint64_t)qword_100A2B3E8);
    uint64_t v46 = v84 + *(int *)(type metadata accessor for BeaconIdentifier(0LL) + 20);
    uint64_t v47 = type metadata accessor for UUID(0LL);
    uint64_t v48 = v90;
    == infix<A>(_:_:)(v45, v46, v47, &protocol witness table for UUID, &protocol witness table for String);
    QueryType.filter(_:)(v48, v16, &protocol witness table for Table);
    ((void (*)(char *, uint64_t))v80)(v48, v35);
    v42(v41, v16);
    uint64_t v49 = sub_100004AEC(&qword_10099E6F8);
    uint64_t v50 = swift_allocObject(v49, 72LL, 7LL);
    *(_OWORD *)(v50 + 16) = xmmword_1007E67D0;
    uint64_t v51 = v43;
    if (qword_10099B970 != -1) {
      swift_once(&qword_10099B970, sub_100751FA0);
    }
    uint64_t v52 = sub_100004AEC(&qword_10099E700);
    sub_10000A720(v52, (uint64_t)qword_100A2B598);
    uint64_t v53 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
    ExpressionType.desc.getter(v52, v53);
    uint64_t v54 = v86;
    QueryType.order(_:)(v50, v36, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    v42(v51, v36);
    uint64_t v55 = v87;
    QueryType.limit(_:)(1LL, 0LL, v36, &protocol witness table for Table);
    v42(v54, v36);
    uint64_t v92 = v36;
    uint64_t v93 = &protocol witness table for Table;
    uint64_t v56 = sub_10000A7C8(v91);
    v78(v56, v55, v36);
    uint64_t v57 = v88;
    Connection.prepare(_:)(v91);
    if (v57)
    {
      v42(v55, v36);
      swift_release();
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v91);
    }

    else
    {
      uint64_t v62 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v91);
      dispatch thunk of _AnySequenceBox._makeIterator()(v62);
      uint64_t v63 = swift_release();
      uint64_t v64 = (uint64_t)v74;
      dispatch thunk of _AnyIteratorBoxBase.next()(v63);
      swift_release();
      uint64_t v65 = v72;
      uint64_t v66 = v73;
      int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v64, 1LL, v73);
      if (v67 == 1)
      {
        v42(v55, v36);
        swift_release();
        sub_100015794(v64, &qword_10099E710);
        int v68 = 0;
      }

      else
      {
        uint64_t v69 = v71;
        (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v71, v64, v66);
        unint64_t v70 = sub_1000864BC();
        Row.subscript.getter(v79, &type metadata for UInt8, v70);
        swift_release();
        (*(void (**)(char *, uint64_t))(v65 + 8))(v69, v66);
        v42(v55, v36);
        int v68 = LOBYTE(v91[0]);
      }

      return v68 | ((v67 == 1) << 8);
    }
  }

  else
  {
    unint64_t v59 = sub_100086500();
    uint64_t v60 = swift_allocError(&type metadata for DatabaseError, v59, 0LL, 0LL);
    *(_DWORD *)uint64_t v61 = 2;
    *(_BYTE *)(v61 + 4) = 1;
    return swift_willThrow(v60);
  }

uint64_t sub_10007BD98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v76 = a1;
  uint64_t v66 = a3;
  uint64_t v83 = sub_100004AEC(&qword_10099E760);
  uint64_t v72 = *(void *)(v83 - 8);
  uint64_t v4 = __chkstk_darwin(v83);
  uint64_t v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v66 - v7;
  uint64_t v85 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v71 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v91 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for JoinType(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Table(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v82 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v73 = (char *)&v66 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v77 = (char *)&v66 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v78 = (char *)&v66 - v23;
  __chkstk_darwin(v22);
  uint64_t v79 = (char *)&v66 - v24;
  uint64_t v81 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  uint64_t v70 = v11;
  uint64_t v25 = *(void (**)(void))(v11 + 104);
  uint64_t v75 = v13;
  unsigned int v69 = enum case for JoinType.leftOuter(_:);
  uint64_t v84 = v10;
  int v68 = (void (*)(char *, void, uint64_t))v25;
  v25(v13);
  uint64_t v87 = a2;
  uint64_t v26 = (void (*)(char *, uint64_t))(a2
                                             + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
  uint64_t v89 = v14;
  uint64_t v90 = &protocol witness table for Table;
  uint64_t v27 = sub_10000A7C8(v88);
  uint64_t v74 = v15;
  uint64_t v28 = *(void (**)(void *, uint64_t, uint64_t))(v15 + 16);
  int v67 = v26;
  uint64_t v86 = v28;
  v28(v27, (uint64_t)v26, v14);
  if (qword_10099B8D8 != -1) {
    swift_once(&qword_10099B8D8, sub_1007514DC);
  }
  uint64_t v29 = v83;
  uint64_t v30 = sub_10000A720(v83, (uint64_t)qword_100A2B3D0);
  uint64_t v31 = v29;
  QueryType.subscript.getter(v30, v14);
  QueryType.subscript.getter(v30, v14);
  == infix<A>(_:_:)( v8,  v6,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v72 + 8);
  int v67 = v32;
  v32(v6, v31);
  v32(v8, v31);
  uint64_t v33 = v75;
  QueryType.join(_:_:on:)(v75, v88, v91, v14, &protocol witness table for Table);
  uint64_t v71 = *(void *)(v71 + 8);
  ((void (*)(char *, uint64_t))v71)(v91, v85);
  uint64_t v72 = *(void *)(v70 + 8);
  uint64_t v34 = v84;
  ((void (*)(char *, uint64_t))v72)(v33, v84);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v88);
  v68(v33, v69, v34);
  uint64_t v35 = v87 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  uint64_t v89 = v14;
  uint64_t v90 = &protocol witness table for Table;
  uint64_t v36 = sub_10000A7C8(v88);
  v86(v36, v35, v14);
  QueryType.subscript.getter(v30, v14);
  QueryType.subscript.getter(v30, v14);
  == infix<A>(_:_:)( v8,  v6,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  uint64_t v37 = v6;
  uint64_t v38 = v83;
  uint64_t v39 = v67;
  v67(v37, v83);
  v39(v8, v38);
  uint64_t v40 = (void (*)(char *, uint64_t))v71;
  uint64_t v41 = v91;
  uint64_t v42 = v73;
  uint64_t v43 = v82;
  QueryType.join(_:_:on:)(v33, v88, v91, v14, &protocol witness table for Table);
  uint64_t v44 = v85;
  v40(v41, v85);
  ((void (*)(char *, uint64_t))v72)(v33, v84);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v74 + 8);
  v45(v43, v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v88);
  uint64_t v46 = v42;
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v47 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v48 = sub_10000A720(v47, (uint64_t)qword_100A2B3E8);
  uint64_t v49 = v76 + *(int *)(type metadata accessor for BeaconIdentifier(0LL) + 20);
  uint64_t v50 = type metadata accessor for UUID(0LL);
  == infix<A>(_:_:)(v48, v49, v50, &protocol witness table for UUID, &protocol witness table for String);
  uint64_t v51 = v77;
  QueryType.filter(_:)(v41, v14, &protocol witness table for Table);
  v40(v41, v44);
  v45(v46, v14);
  uint64_t v52 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v53 = swift_allocObject(v52, 72LL, 7LL);
  *(_OWORD *)(v53 + 16) = xmmword_1007E67D0;
  if (qword_10099B970 != -1) {
    swift_once(&qword_10099B970, sub_100751FA0);
  }
  uint64_t v54 = sub_100004AEC(&qword_10099E700);
  sub_10000A720(v54, (uint64_t)qword_100A2B598);
  uint64_t v55 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v54, v55);
  uint64_t v56 = v78;
  QueryType.order(_:)(v53, v14, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v45(v51, v14);
  uint64_t v57 = v79;
  QueryType.limit(_:)(1LL, 0LL, v14, &protocol witness table for Table);
  v45(v56, v14);
  uint64_t v89 = v14;
  uint64_t v90 = &protocol witness table for Table;
  uint64_t v58 = sub_10000A7C8(v88);
  v86(v58, (uint64_t)v57, v14);
  uint64_t v59 = v80;
  uint64_t v60 = sub_100080D7C((uint64_t)v88, v87, (uint64_t (*)(uint64_t, uint64_t))sub_100070E28, &qword_10099E768);
  if (v59)
  {
    v45(v57, v14);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v88);
  }

  else
  {
    uint64_t v62 = v60;
    uint64_t v63 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v88);
    uint64_t v64 = dispatch thunk of _AnySequenceBox._makeIterator()(v63);
    uint64_t v65 = swift_release(v62);
    dispatch thunk of _AnyIteratorBoxBase.next()(v65);
    swift_release(v64);
    return ((uint64_t (*)(char *, uint64_t))v45)(v57, v14);
  }

uint64_t sub_10007C50C(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099E7A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = sub_100004AEC(&qword_10099E760);
  uint64_t v86 = *(void *)(v98 - 8);
  uint64_t v6 = __chkstk_darwin(v98);
  uint64_t v88 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v87 = (char *)&v71 - v8;
  uint64_t v97 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v85 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v96 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = type metadata accessor for JoinType(0LL);
  uint64_t v94 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v99 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099E7C8);
  uint64_t v92 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v91 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Table(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v95 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v89 = (char *)&v71 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v71 - v19;
  uint64_t v21 = a1;
  uint64_t v90 = sub_1000799BC();
  if (v90)
  {
    uint64_t v81 = v11;
    uint64_t v82 = v5;
    uint64_t v83 = v3;
    uint64_t v84 = v2;
    uint64_t v22 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
    if (qword_10099B8D8 != -1) {
      swift_once(&qword_10099B8D8, sub_1007514DC);
    }
    uint64_t v23 = v98;
    uint64_t v24 = sub_10000A720(v98, (uint64_t)qword_100A2B3D0);
    uint64_t v103 = v23;
    uint64_t v104 = (void *)sub_1000372EC( &qword_10099E7E0,  &qword_10099E760,  (uint64_t)&protocol conformance descriptor for Expression<A>);
    sub_10000A7C8(&v101);
    QueryType.subscript.getter(v24, v13);
    uint64_t v76 = v22;
    uint64_t v77 = v20;
    SchemaType.select(_:_:)(&v101, _swiftEmptyArrayStorage, v13, &protocol witness table for Table);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v101);
    Swift::String v25 = Expressible.asSQL()();
    uint64_t countAndFlagsBits = v25._countAndFlagsBits;
    object = v25._object;
    uint64_t v78 = *(void (**)(char *, uint64_t))(v14 + 8);
    v78(v20, v13);
    uint64_t v26 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
    unsigned int v75 = enum case for JoinType.leftOuter(_:);
    uint64_t v74 = *(void (**)(char *))(v94 + 104);
    v74(v99);
    uint64_t v27 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
    uint64_t v103 = v13;
    uint64_t v104 = &protocol witness table for Table;
    uint64_t v28 = sub_10000A7C8(&v101);
    uint64_t v73 = *(void (**)(void *, uint64_t, uint64_t))(v14 + 16);
    v73(v28, v27, v13);
    uint64_t v29 = v87;
    uint64_t v72 = v24;
    uint64_t v71 = v26;
    QueryType.subscript.getter(v24, v13);
    uint64_t v30 = v88;
    QueryType.subscript.getter(v24, v13);
    uint64_t v31 = v96;
    == infix<A>(_:_:)( v29,  v30,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
    uint64_t v32 = *(void (**)(char *, uint64_t))(v86 + 8);
    uint64_t v33 = v98;
    v32(v30, v98);
    v32(v29, v33);
    uint64_t v34 = v99;
    QueryType.join(_:_:on:)(v99, &v101, v31, v13, &protocol witness table for Table);
    uint64_t v86 = *(void *)(v85 + 8);
    ((void (*)(char *, uint64_t))v86)(v31, v97);
    uint64_t v94 = *(void *)(v94 + 8);
    uint64_t v35 = v100;
    ((void (*)(char *, uint64_t))v94)(v34, v100);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v101);
    ((void (*)(char *, void, uint64_t))v74)(v34, v75, v35);
    uint64_t v103 = v13;
    uint64_t v104 = &protocol witness table for Table;
    uint64_t v36 = sub_10000A7C8(&v101);
    v73(v36, v76, v13);
    uint64_t v37 = v72;
    QueryType.subscript.getter(v72, v13);
    QueryType.subscript.getter(v37, v13);
    uint64_t v38 = v96;
    == infix<A>(_:_:)( v29,  v30,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
    uint64_t v39 = v98;
    v32(v30, v98);
    v32(v29, v39);
    uint64_t v40 = v89;
    uint64_t v41 = v99;
    uint64_t v42 = v95;
    QueryType.join(_:_:on:)(v99, &v101, v38, v13, &protocol witness table for Table);
    uint64_t v43 = v38;
    uint64_t v44 = v97;
    uint64_t v45 = (void (*)(char *, uint64_t))v86;
    ((void (*)(char *, uint64_t))v86)(v38, v97);
    ((void (*)(char *, uint64_t))v94)(v41, v100);
    uint64_t v46 = v78;
    v78(v42, v13);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v101);
    uint64_t v101 = 0LL;
    unint64_t v102 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(80LL);
    v47._object = (void *)0x8000000100851BB0LL;
    v47._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v47);
    uint64_t v105 = 28LL;
    v48._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v49 = v48._object;
    String.append(_:)(v48);
    swift_bridgeObjectRelease(v49);
    v50._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v50._object = (void *)0x8000000100851BD0LL;
    String.append(_:)(v50);
    v51._uint64_t countAndFlagsBits = countAndFlagsBits;
    uint64_t v52 = object;
    v51._object = object;
    String.append(_:)(v51);
    swift_bridgeObjectRelease(v52);
    v53._uint64_t countAndFlagsBits = 41LL;
    v53._object = (void *)0xE100000000000000LL;
    String.append(_:)(v53);
    uint64_t v54 = v101;
    unint64_t v55 = v102;
    uint64_t v56 = sub_1000372EC(&qword_10099E818, &qword_10099E6D0, (uint64_t)&protocol conformance descriptor for Expression<A>);
    uint64_t v57 = v54;
    uint64_t v58 = v44;
    uint64_t v59 = v77;
    ExpressionType.init(literal:)(v57, v55, v58, v56);
    QueryType.filter(_:)(v43, v13, &protocol witness table for Table);
    uint64_t v60 = v43;
    uint64_t v61 = v46;
    v45(v60, v58);
    v46(v40, v13);
    if (qword_10099B940 != -1) {
      swift_once(&qword_10099B940, sub_100751C44);
    }
    uint64_t v62 = sub_100004AEC(&qword_10099E780);
    sub_10000A720(v62, (uint64_t)qword_100A2B508);
    uint64_t v63 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
    uint64_t v64 = v82;
    ExpressionType<>.count.getter(v62, v63, &protocol witness table for Data);
    uint64_t v65 = v91;
    SchemaType.select<A>(_:)( v64,  v13,  &type metadata for Int,  &protocol witness table for Table,  &protocol witness table for Int);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v64, v84);
    v61(v59, v13);
    uint64_t v21 = v90;
    uint64_t v66 = v93;
    Connection.scalar<A>(_:)(&v101, v65, &type metadata for Int, &protocol witness table for Int);
    uint64_t v67 = v81;
    if (v66)
    {
      (*(void (**)(char *, uint64_t))(v92 + 8))(v65, v81);
      swift_release(v21);
    }

    else
    {
      swift_release(v21);
      uint64_t v21 = v101;
      (*(void (**)(char *, uint64_t))(v92 + 8))(v65, v67);
    }
  }

  else
  {
    unint64_t v68 = sub_100086500();
    swift_allocError(&type metadata for DatabaseError, v68, 0LL, 0LL);
    *(_DWORD *)uint64_t v69 = 2;
    *(_BYTE *)(v69 + 4) = 1;
    swift_willThrow();
  }

  return v21;
}

uint64_t sub_10007CE08@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v52 = a2;
  uint64_t v49 = a4;
  uint64_t v50 = a1;
  uint64_t v5 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v49 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v49 - v13;
  uint64_t v15 = type metadata accessor for Table(0LL);
  uint64_t v53 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v49 - v20;
  __chkstk_darwin(v19);
  uint64_t v57 = (char *)&v49 - v22;
  uint64_t v54 = a3;
  uint64_t v51 = a3 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keySyncMetadata;
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v23 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2B3E8);
  uint64_t v25 = type metadata accessor for UUID(0LL);
  == infix<A>(_:_:)(v24, v50, v25, &protocol witness table for UUID, &protocol witness table for String);
  if (qword_10099B9A8 != -1) {
    swift_once(&qword_10099B9A8, sub_1007523A0);
  }
  uint64_t v26 = sub_100004AEC(&qword_10099E6E0);
  uint64_t v27 = sub_10000A720(v26, (uint64_t)qword_100A2B640);
  LOBYTE(v56[0]) = v52;
  unint64_t v28 = sub_1000864BC();
  == infix<A>(_:_:)(v27, v56, &type metadata for UInt8, v28, &protocol witness table for Int64);
  && infix(_:_:)(v12, v9);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v9, v5);
  v29(v12, v5);
  QueryType.filter(_:)(v14, v15, &protocol witness table for Table);
  v29(v14, v5);
  uint64_t v30 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
  *(_OWORD *)(v31 + 16) = xmmword_1007E67D0;
  if (qword_10099B9A0 != -1) {
    swift_once(&qword_10099B9A0, sub_10075230C);
  }
  uint64_t v32 = sub_100004AEC(&qword_10099E700);
  sub_10000A720(v32, (uint64_t)qword_100A2B628);
  uint64_t v33 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v32, v33);
  QueryType.order(_:)(v31, v15, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  uint64_t v34 = v53;
  uint64_t v35 = *(void (**)(char *, uint64_t))(v53 + 8);
  v35(v18, v15);
  uint64_t v36 = v57;
  QueryType.limit(_:)(1LL, 0LL, v15, &protocol witness table for Table);
  v35(v21, v15);
  v56[3] = v15;
  v56[4] = &protocol witness table for Table;
  uint64_t v37 = sub_10000A7C8(v56);
  (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v37, v36, v15);
  uint64_t v38 = v55;
  uint64_t v39 = sub_10007D27C((uint64_t)v56);
  if (v38)
  {
    v35(v36, v15);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
  }

  else
  {
    uint64_t v41 = v39;
    uint64_t v42 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
    uint64_t v43 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v42);
    swift_release(v41);
    uint64_t v44 = *(void *)(v43 + 16);
    uint64_t v45 = type metadata accessor for KeySyncMetadata(0LL);
    uint64_t v46 = *(void *)(v45 - 8);
    if (v44)
    {
      uint64_t v47 = v49;
      sub_10001DC4C( v43 + ((*(unsigned __int8 *)(v46 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80)),  v49,  type metadata accessor for KeySyncMetadata);
      uint64_t v48 = 0LL;
    }

    else
    {
      uint64_t v48 = 1LL;
      uint64_t v47 = v49;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v47, v48, 1LL, v45);
    swift_release(v43);
    return ((uint64_t (*)(char *, uint64_t))v35)(v36, v15);
  }

uint64_t sub_10007D27C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for KeySyncMetadata(0LL);
  uint64_t v58 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v53 = (uint64_t)&v49 - v7;
  uint64_t v8 = sub_100004AEC(&qword_10099E710);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v49 - v12;
  uint64_t v14 = type metadata accessor for Row(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v55 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  int v52 = (char *)&v49 - v19;
  __chkstk_darwin(v18);
  uint64_t v51 = (char *)&v49 - v20;
  uint64_t v21 = sub_1000799BC();
  if (!v21)
  {
    unint64_t v24 = sub_100086500();
    uint64_t v25 = swift_allocError(&type metadata for DatabaseError, v24, 0LL, 0LL);
    *(_DWORD *)uint64_t v26 = 2;
    *(_BYTE *)(v26 + 4) = 1;
    return swift_willThrow(v25);
  }

  uint64_t v22 = v21;
  uint64_t v23 = Connection.prepare(_:)(a1);
  if (v1) {
    return swift_release(v22);
  }
  uint64_t v27 = v23;
  uint64_t v54 = v6;
  uint64_t v49 = v22;
  uint64_t v28 = swift_retain();
  uint64_t v29 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v28);
  uint64_t v59 = _swiftEmptyArrayStorage;
  sub_100032A2C(0, v29 & ~(v29 >> 63), 0);
  uint64_t v30 = swift_retain();
  uint64_t v57 = dispatch thunk of _AnySequenceBox._makeIterator()(v30);
  uint64_t v50 = v27;
  uint64_t result = swift_release(v27);
  if (v29 < 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }

  uint64_t v56 = v13;
  for (i = (uint64_t)v54; v29; uint64_t v13 = v56)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()(result);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1LL, v14);
    if ((_DWORD)result == 1) {
      goto LABEL_23;
    }
    uint64_t v32 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v55, v11, v14);
    sub_1000839D4(v32, i);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v14);
    uint64_t v33 = v59;
    if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
    {
      sub_100032A2C(0, v33[2] + 1LL, 1);
      uint64_t v33 = v59;
    }

    unint64_t v35 = v33[2];
    unint64_t v34 = v33[3];
    if (v35 >= v34 >> 1)
    {
      sub_100032A2C(v34 > 1, v35 + 1, 1);
      uint64_t v33 = v59;
    }

    v33[2] = v35 + 1;
    uint64_t v36 = (uint64_t)v33
    uint64_t i = (uint64_t)v54;
    uint64_t result = sub_10002218C((uint64_t)v54, v36, type metadata accessor for KeySyncMetadata);
    --v29;
  }

  dispatch thunk of _AnyIteratorBoxBase.next()(result);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v37(v13, 1LL, v14) != 1)
  {
    uint64_t v40 = *(void (**)(void))(v15 + 32);
    uint64_t v41 = v53;
    do
    {
      uint64_t v42 = v51;
      v40();
      uint64_t v43 = (uint64_t)v52;
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v42, v14);
      sub_1000839D4(v43, v41);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v42, v14);
      uint64_t v44 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
      {
        sub_100032A2C(0, v44[2] + 1LL, 1);
        uint64_t v44 = v59;
      }

      unint64_t v46 = v44[2];
      unint64_t v45 = v44[3];
      if (v46 >= v45 >> 1)
      {
        sub_100032A2C(v45 > 1, v46 + 1, 1);
        uint64_t v44 = v59;
      }

      v44[2] = v46 + 1;
      uint64_t v41 = v53;
      uint64_t v47 = sub_10002218C( v53,  (uint64_t)v44 + ((*(unsigned __int8 *)(v58 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))
            + *(void *)(v58 + 72) * v46,
              type metadata accessor for KeySyncMetadata);
      uint64_t v13 = v56;
      dispatch thunk of _AnyIteratorBoxBase.next()(v47);
    }

    while (v37(v13, 1LL, v14) != 1);
  }

  swift_release(v57);
  sub_100015794((uint64_t)v13, &qword_10099E710);
  swift_release(v49);
  swift_release_n(v50, 2LL);
  uint64_t v38 = v59;
  uint64_t v39 = sub_100004AEC(&qword_10099E720);
  uint64_t result = swift_allocObject(v39, 24LL, 7LL);
  *(void *)(result + 16) = v38;
  return result;
}

uint64_t sub_10007D7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for KeySyncMetadata(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099E830);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v34 - v13;
  sub_10007CE08(a1, *(unsigned __int8 *)(a1 + *(int *)(v5 + 20)), a2, (uint64_t)v12);
  if (v2)
  {
    if (qword_10099B0A8 != -1) {
      swift_once(&qword_10099B0A8, sub_10006C020);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A29F68);
    sub_10001DC4C(a1, (uint64_t)v8, type metadata accessor for KeySyncMetadata);
    swift_errorRetain(v2);
    uint64_t v16 = swift_errorRetain(v2);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    int v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v6;
      uint64_t v21 = v20;
      uint64_t v38 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v39 = swift_slowAlloc(32LL, -1LL);
      uint64_t v43 = v39;
      *(_DWORD *)uint64_t v21 = 141558531;
      uint64_t v41 = 1752392040LL;
      int v37 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v21 + 4, v21 + 12);
      *(_WORD *)(v21 + 12) = 2081;
      uint64_t v35 = v21 + 14;
      uint64_t v22 = type metadata accessor for UUID(0LL);
      uint64_t v23 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      os_log_t v36 = v17;
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
      uint64_t v41 = sub_1003F11D4(v24, v25, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v35, v21 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v8, type metadata accessor for KeySyncMetadata);
      *(_WORD *)(v21 + 22) = 2114;
      swift_errorRetain(v2);
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError(v2);
      uint64_t v41 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v21 + 24, v21 + 32);
      uint64_t v27 = v38;
      *uint64_t v38 = v26;
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      os_log_t v28 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v37,  "Last key sync value could not be read for beacon %{private,mask.hash}s, %{public}@",  (uint8_t *)v21,  0x20u);
      uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v27, 1LL, v29);
      swift_slowDealloc(v27, -1LL, -1LL);
      uint64_t v30 = v39;
      swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      uint64_t v31 = v21;
      uint64_t v6 = v40;
      swift_slowDealloc(v31, -1LL, -1LL);

      swift_errorRelease(v2);
    }

    else
    {
      swift_errorRelease(v2);
      sub_100018C68((uint64_t)v8, type metadata accessor for KeySyncMetadata);
      swift_errorRelease(v2);
      swift_errorRelease(v2);
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, 1LL, 1LL, v5);
  }

  else
  {
    sub_100015750((uint64_t)v12, (uint64_t)v14, &qword_10099E830);
  }

  char v32 = sub_1006CAB38(a1, (uint64_t)v14);
  sub_100015794((uint64_t)v14, &qword_10099E830);
  return v32 & 1;
}

uint64_t sub_10007DBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for KeySyncMetadata(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v46 = (uint64_t)&v39 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v47 = (uint64_t)&v39 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = type metadata accessor for Connection.TransactionMode(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100474DE0();
  if (v19)
  {
    uint64_t v44 = v5;
    unint64_t v45 = v8;
    uint64_t v20 = __chkstk_darwin(v19);
    *(&v39 - 4) = a2;
    *(&v39 - 3) = a1;
    *(&v39 - 2) = v20;
    uint64_t v21 = v20;
    (*(void (**)(char *, void, uint64_t))(v16 + 104))( v18,  enum case for Connection.TransactionMode.deferred(_:),  v15);
    Connection.transaction(_:block:)(v18, sub_100086A4C, &v39 - 6);
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      return swift_release(v21);
    }

    else
    {
      uint64_t v43 = v21;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      if (qword_10099B0A8 != -1) {
        swift_once(&qword_10099B0A8, sub_10006C020);
      }
      uint64_t v26 = type metadata accessor for Logger(0LL);
      sub_10000A720(v26, (uint64_t)qword_100A29F68);
      sub_10001DC4C(a1, (uint64_t)v14, type metadata accessor for KeySyncMetadata);
      uint64_t v27 = v47;
      sub_10001DC4C(a1, v47, type metadata accessor for KeySyncMetadata);
      uint64_t v28 = v46;
      sub_10001DC4C(a1, v46, type metadata accessor for KeySyncMetadata);
      uint64_t v29 = (uint64_t)v45;
      uint64_t v30 = sub_10001DC4C(a1, (uint64_t)v45, type metadata accessor for KeySyncMetadata);
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      int v32 = static os_log_type_t.default.getter(v31);
      if (os_log_type_enabled(v31, (os_log_type_t)v32))
      {
        int v41 = v32;
        uint64_t v42 = v31;
        uint64_t v33 = swift_slowAlloc(52LL, -1LL);
        uint64_t v40 = swift_slowAlloc(128LL, -1LL);
        uint64_t v50 = v40;
        *(_DWORD *)uint64_t v33 = 141559043;
        uint64_t v48 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v33 + 4, v33 + 12);
        *(_WORD *)(v33 + 12) = 2081;
        uint64_t v34 = type metadata accessor for UUID(0LL);
        uint64_t v35 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
        uint64_t v48 = sub_1003F11D4(v36, v37, &v50);
        uint64_t v38 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v33 + 14, v33 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v14, type metadata accessor for KeySyncMetadata);
        *(_WORD *)(v33 + 22) = 2082;
        __asm { BR              X10 }
      }

      sub_100018C68((uint64_t)v14, type metadata accessor for KeySyncMetadata);
      sub_100018C68(v27, type metadata accessor for KeySyncMetadata);
      sub_100018C68(v28, type metadata accessor for KeySyncMetadata);
      sub_100018C68(v29, type metadata accessor for KeySyncMetadata);

      return swift_release(v43);
    }
  }

  else
  {
    unint64_t v23 = sub_100086500();
    uint64_t v24 = swift_allocError(&type metadata for DatabaseError, v23, 0LL, 0LL);
    *(_DWORD *)uint64_t v25 = 2;
    *(_BYTE *)(v25 + 4) = 1;
    return swift_willThrow(v24);
  }

uint64_t sub_10007E2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v109 = a3;
  uint64_t v106 = type metadata accessor for KeySyncMetadata(0LL);
  uint64_t v5 = __chkstk_darwin(v106);
  uint64_t v108 = (uint64_t)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v110 = (char **)((char *)&v93 - v8);
  __chkstk_darwin(v7);
  uint64_t v107 = (uint64_t)&v93 - v9;
  uint64_t v10 = type metadata accessor for OnConflict(0LL);
  uint64_t v104 = *(void *)(v10 - 8);
  uint64_t v105 = v10;
  __chkstk_darwin(v10);
  uint64_t v103 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Insert(0LL);
  uint64_t v101 = *(void *)(v12 - 8);
  uint64_t v102 = v12;
  __chkstk_darwin(v12);
  uint64_t v100 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Table(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v93 - v23;
  uint64_t v111 = a2;
  uint64_t v25 = v112;
  uint64_t result = sub_10007D7E8(a2, a1);
  if (!v25)
  {
    uint64_t v93 = v17;
    uint64_t v94 = v22;
    uint64_t v95 = v15;
    uint64_t v96 = v19;
    uint64_t v97 = v14;
    uint64_t v98 = a1;
    uint64_t v99 = v24;
    uint64_t v112 = 0LL;
    uint64_t v27 = v111;
    if ((result & 1) != 0)
    {
      uint64_t v28 = v18;
      if (qword_10099B8E0 != -1) {
        swift_once(&qword_10099B8E0, sub_100751568);
      }
      uint64_t v29 = sub_100004AEC(&qword_10099E6D8);
      uint64_t v30 = sub_10000A720(v29, (uint64_t)qword_100A2B3E8);
      uint64_t v31 = type metadata accessor for UUID(0LL);
      int v32 = v93;
      == infix<A>(_:_:)(v30, v27, v31, &protocol witness table for UUID, &protocol witness table for String);
      uint64_t v33 = v94;
      QueryType.filter(_:)(v32, v18, &protocol witness table for Table);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v32, v97);
      uint64_t v34 = v99;
      QueryType.limit(_:)(1LL, 0LL, v18, &protocol witness table for Table);
      uint64_t v35 = v96;
      uint64_t v36 = *(char ***)(v96 + 8);
      ((void (*)(char *, uint64_t))v36)(v33, v18);
      v113[3] = v18;
      v113[4] = (uint64_t)&protocol witness table for Table;
      unint64_t v37 = sub_10000A7C8(v113);
      (*(void (**)(void *, char *, uint64_t))(v35 + 16))(v37, v34, v18);
      uint64_t v38 = v112;
      uint64_t v39 = Connection.prepare(_:)(v113);
      uint64_t v112 = v38;
      if (v38)
      {
        ((void (*)(char *, uint64_t))v36)(v34, v18);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
      }

      else
      {
        uint64_t v53 = v39;
        uint64_t v54 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
        uint64_t v55 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v54);
        swift_release(v53);
        uint64_t v56 = *(void *)(v55 + 16);
        swift_release(v55);
        if (v56)
        {
          uint64_t v110 = v36;
          uint64_t v107 = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keySyncMetadata;
          (*(void (**)(char *, void, uint64_t))(v104 + 104))( v103,  enum case for OnConflict.replace(_:),  v105);
          uint64_t v57 = sub_100004AEC(&qword_10099E810);
          uint64_t v58 = *(void *)(type metadata accessor for Setter(0LL) - 8);
          uint64_t v59 = v31;
          uint64_t v60 = *(void *)(v58 + 72);
          uint64_t v61 = *(unsigned __int8 *)(v58 + 80);
          uint64_t v62 = (v61 + 32) & ~v61;
          uint64_t v63 = swift_allocObject(v57, v62 + 6 * v60, v61 | 7);
          *(_OWORD *)(v63 + 16) = xmmword_1007E82A0;
          uint64_t v108 = v63;
          uint64_t v64 = v63 + v62;
          <- infix<A>(_:_:)(v30, v27, v59, &protocol witness table for UUID);
          if (qword_10099B9A8 != -1) {
            swift_once(&qword_10099B9A8, sub_1007523A0);
          }
          uint64_t v65 = sub_100004AEC(&qword_10099E6E0);
          uint64_t v66 = sub_10000A720(v65, (uint64_t)qword_100A2B640);
          uint64_t v67 = v106;
          LOBYTE(v113[0]) = *(_BYTE *)(v27 + *(int *)(v106 + 20));
          unint64_t v68 = sub_1000864BC();
          <- infix<A>(_:_:)(v66, v113, &type metadata for UInt8, v68);
          uint64_t v96 = v64 + 2 * v60;
          if (qword_10099B8F0 != -1) {
            swift_once(&qword_10099B8F0, sub_100751688);
          }
          uint64_t v69 = sub_10000A720(v65, (uint64_t)qword_100A2B418);
          uint64_t v70 = (void *)(v27 + *(int *)(v67 + 24));
          uint64_t v72 = v70[3];
          uint64_t v71 = v70[4];
          sub_100012ED8(v70, v72);
          LOBYTE(v113[0]) = sub_1005F5498(v72, v71);
          <- infix<A>(_:_:)(v69, v113, &type metadata for UInt8, v68);
          if (qword_10099B8F8 != -1) {
            swift_once(&qword_10099B8F8, sub_100751718);
          }
          v107 += v98;
          uint64_t v73 = sub_10000A720(v97, (uint64_t)qword_100A2B430);
          uint64_t v74 = v70[3];
          sub_100012ED8(v70, v74);
          LOBYTE(v113[0]) = sub_100454A30(v74) & 1;
          <- infix<A>(_:_:)(v73, v113, &type metadata for Bool, &protocol witness table for Bool);
          if (qword_10099B8E8 != -1) {
            swift_once(&qword_10099B8E8, sub_1007515FC);
          }
          uint64_t v75 = sub_100004AEC(&qword_10099E730);
          uint64_t v76 = sub_10000A720(v75, (uint64_t)qword_100A2B400);
          uint64_t v78 = v70[3];
          uint64_t v77 = v70[4];
          sub_100012ED8(v70, v78);
          dispatch thunk of RawRepresentable.rawValue.getter(v113, v78, *(void *)(v77 + 56));
          uint64_t v114 = v113[0];
          unint64_t v79 = sub_100086818();
          <- infix<A>(_:_:)(v76, &v114, &type metadata for UInt64, v79);
          uint64_t v80 = v111;
          if (qword_10099B9A0 != -1) {
            swift_once(&qword_10099B9A0, sub_10075230C);
          }
          uint64_t v81 = sub_100004AEC(&qword_10099E700);
          uint64_t v82 = sub_10000A720(v81, (uint64_t)qword_100A2B628);
          uint64_t v83 = v80 + *(int *)(v106 + 28);
          uint64_t v84 = type metadata accessor for Date(0LL);
          <- infix<A>(_:_:)(v82, v83, v84, &protocol witness table for Date);
          uint64_t v85 = v100;
          uint64_t v86 = v103;
          QueryType.insert(or:_:)(v103, v108, v28, &protocol witness table for Table);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v104 + 8))(v86, v105);
          Connection.run(_:)(v85);
          uint64_t v87 = (uint64_t (*)(char *, uint64_t))v110;
          (*(void (**)(char *, uint64_t))(v101 + 8))(v85, v102);
          return v87(v99, v28);
        }

        else
        {
          unint64_t v88 = sub_100086AAC();
          uint64_t v89 = swift_allocError(&type metadata for ObservationStore.Error, v88, 0LL, 0LL);
          swift_willThrow(v89);
          return ((uint64_t (*)(char *, uint64_t))v36)(v34, v18);
        }
      }
    }

    else
    {
      if (qword_10099B0A8 != -1) {
        swift_once(&qword_10099B0A8, sub_10006C020);
      }
      uint64_t v40 = type metadata accessor for Logger(0LL);
      sub_10000A720(v40, (uint64_t)qword_100A29F68);
      uint64_t v41 = v107;
      sub_10001DC4C(v27, v107, type metadata accessor for KeySyncMetadata);
      uint64_t v42 = (uint64_t)v110;
      sub_10001DC4C(v27, (uint64_t)v110, type metadata accessor for KeySyncMetadata);
      uint64_t v43 = v27;
      uint64_t v44 = v108;
      uint64_t v45 = sub_10001DC4C(v43, v108, type metadata accessor for KeySyncMetadata);
      uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
      int v47 = static os_log_type_t.info.getter(v46);
      if (os_log_type_enabled(v46, (os_log_type_t)v47))
      {
        LODWORD(v112) = v47;
        uint64_t v48 = swift_slowAlloc(42LL, -1LL);
        uint64_t v111 = swift_slowAlloc(96LL, -1LL);
        v113[0] = v111;
        *(_DWORD *)uint64_t v48 = 141558787;
        uint64_t v114 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v48 + 4, v48 + 12);
        *(_WORD *)(v48 + 12) = 2081;
        uint64_t v49 = type metadata accessor for UUID(0LL);
        uint64_t v50 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v49, v50);
        uint64_t v114 = sub_1003F11D4(v51, v52, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v48 + 14, v48 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v41, type metadata accessor for KeySyncMetadata);
        *(_WORD *)(v48 + 22) = 2082;
        __asm { BR              X10 }
      }

      sub_100018C68(v41, type metadata accessor for KeySyncMetadata);
      sub_100018C68(v42, type metadata accessor for KeySyncMetadata);
      sub_100018C68(v44, type metadata accessor for KeySyncMetadata);

      unint64_t v90 = sub_100086A68();
      uint64_t v91 = swift_allocError(&type metadata for ObservationStore.ObservationStoreError, v90, 0LL, 0LL);
      *uint64_t v92 = 1;
      return swift_willThrow(v91);
    }
  }

  return result;
}

uint64_t sub_10007EEC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Delete(0LL);
  uint64_t v34 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v33 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v35 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Table(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v30 - v12;
  uint64_t v40 = a1;
  if (sub_100474DE0())
  {
    uint64_t v30 = v5;
    uint64_t v31 = v2;
    uint64_t v32 = v4;
    if (qword_10099B8E0 != -1) {
      swift_once(&qword_10099B8E0, sub_100751568);
    }
    uint64_t v14 = sub_100004AEC(&qword_10099E6D8);
    uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2B3E8);
    uint64_t v38 = v14;
    uint64_t v39 = sub_1000372EC(&qword_10099E7D0, &qword_10099E6D8, (uint64_t)&protocol conformance descriptor for Expression<A>);
    sub_10000A7C8(&v36);
    type metadata accessor for UUID(0LL);
    QueryType.subscript.getter(v15, v7);
    SchemaType.select(_:_:)(&v36, _swiftEmptyArrayStorage, v7, &protocol witness table for Table);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v36);
    Swift::String v16 = Expressible.asSQL()();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
    v17(v13, v7);
    unint64_t v36 = 0LL;
    unint64_t v37 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(48LL);
    swift_bridgeObjectRelease();
    unint64_t v36 = 0xD00000000000002DLL;
    unint64_t v37 = 0x8000000100851B40LL;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 41LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    unint64_t v19 = v36;
    unint64_t v20 = v37;
    uint64_t v21 = sub_1000372EC(&qword_10099E818, &qword_10099E6D0, (uint64_t)&protocol conformance descriptor for Expression<A>);
    uint64_t v22 = v35;
    unint64_t v23 = v19;
    uint64_t v24 = v32;
    ExpressionType.init(literal:)(v23, v20, v32, v21);
    QueryType.filter(_:)(v22, v7, &protocol witness table for Table);
    uint64_t v25 = v33;
    QueryType.delete()(v7, &protocol witness table for Table);
    Connection.run(_:)(v25);
    swift_release();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v31);
    v17(v11, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v22, v24);
  }

  else
  {
    unint64_t v27 = sub_100086500();
    uint64_t v28 = swift_allocError(&type metadata for DatabaseError, v27, 0LL, 0LL);
    *(_DWORD *)uint64_t v29 = 2;
    *(_BYTE *)(v29 + 4) = 1;
    return swift_willThrow(v28);
  }

uint64_t sub_10007F270@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v116 = a3;
  int v123 = a2;
  uint64_t v114 = a1;
  uint64_t v7 = sub_100004AEC(&qword_10099E710);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v103 = type metadata accessor for Row(0LL);
  uint64_t v102 = *(void *)(v103 - 8);
  uint64_t v10 = __chkstk_darwin(v103);
  uint64_t v101 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v97 - v12;
  uint64_t v14 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v14);
  uint64_t v115 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = type metadata accessor for UUID(0LL);
  uint64_t v117 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v109 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = sub_100004AEC(&qword_10099E760);
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v17 = __chkstk_darwin(v124);
  uint64_t v113 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v111 = (char *)&v97 - v19;
  uint64_t v131 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v112 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  os_log_type_t v136 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for JoinType(0LL);
  uint64_t v125 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  v126 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for Table(0LL);
  uint64_t v132 = *(void *)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v129 = (char *)&v97 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v128 = (char *)&v97 - v30;
  __chkstk_darwin(v29);
  uint64_t v118 = (char *)&v97 - v31;
  if (sub_1000799BC())
  {
    uint64_t v108 = v26;
    uint64_t v99 = v9;
    uint64_t v98 = v13;
    uint64_t v100 = a5;
    uint64_t v32 = a4 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEvent;
    uint64_t v33 = *(void (**)(void))(v125 + 104);
    unsigned int v107 = enum case for JoinType.leftOuter(_:);
    uint64_t v106 = (void (*)(char *, void, uint64_t))v33;
    v33(v126);
    uint64_t v34 = (void (*)(char *, uint64_t))(a4
                                               + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEventLocation);
    uint64_t v134 = v23;
    uint64_t v135 = &protocol witness table for Table;
    uint64_t v35 = (char *)sub_10000A7C8(&v133);
    unint64_t v36 = *(void (**)(char *, char *, uint64_t))(v132 + 16);
    uint64_t v105 = v34;
    uint64_t v130 = v36;
    v36(v35, (char *)v34, v23);
    uint64_t v110 = a4;
    uint64_t v121 = v21;
    if (qword_10099B9C0 != -1) {
      swift_once(&qword_10099B9C0, sub_100752548);
    }
    uint64_t v37 = v124;
    uint64_t v38 = sub_10000A720(v124, (uint64_t)qword_100A2B688);
    uint64_t v39 = v111;
    uint64_t v104 = v32;
    QueryType.subscript.getter(v38, v23);
    uint64_t v40 = v113;
    QueryType.subscript.getter(v38, v23);
    == infix<A>(_:_:)( v39,  v40,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
    uint64_t v41 = *(void (**)(char *, uint64_t))(v122 + 8);
    uint64_t v105 = v41;
    v41(v40, v37);
    v41(v39, v37);
    uint64_t v42 = v126;
    QueryType.join(_:_:on:)(v126, &v133, v136, v23, &protocol witness table for Table);
    uint64_t v122 = *(void *)(v112 + 8);
    ((void (*)(char *, uint64_t))v122)(v136, v131);
    uint64_t v125 = *(void *)(v125 + 8);
    uint64_t v43 = v121;
    ((void (*)(char *, uint64_t))v125)(v42, v121);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v133);
    v106(v42, v107, v43);
    uint64_t v44 = v110 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_attachmentInfo;
    uint64_t v134 = v23;
    uint64_t v135 = &protocol witness table for Table;
    uint64_t v45 = (char *)sub_10000A7C8(&v133);
    v130(v45, (char *)v44, v23);
    QueryType.subscript.getter(v38, v23);
    uint64_t v46 = v38;
    int v47 = v136;
    QueryType.subscript.getter(v46, v23);
    uint64_t v48 = v131;
    == infix<A>(_:_:)( v39,  v40,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
    uint64_t v49 = v40;
    uint64_t v50 = v124;
    uint64_t v51 = v105;
    v105(v49, v124);
    unint64_t v52 = v39;
    uint64_t v53 = v129;
    uint64_t v54 = (void (*)(char *, uint64_t))v122;
    v51(v52, v50);
    uint64_t v55 = v128;
    QueryType.join(_:_:on:)(v42, &v133, v47, v23, &protocol witness table for Table);
    v54(v47, v48);
    ((void (*)(char *, uint64_t))v125)(v42, v121);
    uint64_t v56 = *(void (**)(char *, uint64_t))(v132 + 8);
    v56(v53, v23);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v133);
    if (qword_10099B8E0 != -1) {
      swift_once(&qword_10099B8E0, sub_100751568);
    }
    uint64_t v125 = sub_100004AEC(&qword_10099E6D8);
    uint64_t v57 = sub_10000A720(v125, (uint64_t)qword_100A2B3E8);
    uint64_t v58 = type metadata accessor for BeaconIdentifier(0LL);
    == infix<A>(_:_:)( v57,  v114 + *(int *)(v58 + 20),  v127,  &protocol witness table for UUID,  &protocol witness table for String);
    uint64_t v59 = v118;
    QueryType.filter(_:)(v47, v23, &protocol witness table for Table);
    v54(v47, v131);
    v56(v55, v23);
    uint64_t v60 = v117;
    uint64_t v61 = (uint64_t)v115;
    v126 = (char *)v56;
    if (v123 != 6)
    {
      v130(v53, v59, v23);
      if (qword_10099B9B0 != -1) {
        swift_once(&qword_10099B9B0, sub_100752428);
      }
      uint64_t v62 = sub_100004AEC(&qword_10099E7F8);
      uint64_t v63 = sub_10000A720(v62, (uint64_t)qword_100A2B658);
      LODWORD(v133) = v123;
      unint64_t v64 = sub_1000869F0();
      uint64_t v65 = v136;
      == infix<A>(_:_:)(v63, &v133, &type metadata for UInt32, v64, &protocol witness table for Int64);
      QueryType.filter(_:)(v65, v23, &protocol witness table for Table);
      ((void (*)(char *, uint64_t))v122)(v65, v131);
      uint64_t v56 = (void (*)(char *, uint64_t))v126;
      ((void (*)(char *, uint64_t))v126)(v53, v23);
      v56(v59, v23);
      (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v59, v55, v23);
    }

    sub_10001581C(v116, v61, &qword_10099D8A0);
    uint64_t v66 = v127;
    int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v61, 1LL, v127);
    unint64_t v68 = v130;
    if (v67 == 1)
    {
      sub_100015794(v61, &qword_10099D8A0);
    }

    else
    {
      uint64_t v73 = v61;
      uint64_t v74 = v109;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v109, v73, v66);
      v68(v53, v59, v23);
      if (qword_10099B9C8 != -1) {
        swift_once(&qword_10099B9C8, sub_1007525D8);
      }
      uint64_t v75 = sub_10000A720(v125, (uint64_t)qword_100A2B6A0);
      uint64_t v76 = v136;
      == infix<A>(_:_:)(v75, v74, v66, &protocol witness table for UUID, &protocol witness table for String);
      QueryType.filter(_:)(v76, v23, &protocol witness table for Table);
      ((void (*)(char *, uint64_t))v122)(v76, v131);
      uint64_t v56 = (void (*)(char *, uint64_t))v126;
      ((void (*)(char *, uint64_t))v126)(v53, v23);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v74, v66);
      v56(v59, v23);
      (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v59, v55, v23);
      unint64_t v68 = v130;
    }

    uint64_t v77 = v108;
    v68(v108, v59, v23);
    uint64_t v78 = sub_100004AEC(&qword_10099E6F8);
    uint64_t v79 = swift_allocObject(v78, 72LL, 7LL);
    *(_OWORD *)(v79 + 16) = xmmword_1007E67D0;
    if (qword_10099B9A0 != -1) {
      swift_once(&qword_10099B9A0, sub_10075230C);
    }
    uint64_t v80 = sub_100004AEC(&qword_10099E700);
    sub_10000A720(v80, (uint64_t)qword_100A2B628);
    uint64_t v81 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
    ExpressionType.desc.getter(v80, v81);
    uint64_t v82 = v129;
    QueryType.order(_:)(v79, v23, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    v56(v77, v23);
    uint64_t v83 = v128;
    QueryType.limit(_:)(1LL, 0LL, v23, &protocol witness table for Table);
    v56(v82, v23);
    v56(v59, v23);
    (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v59, v83, v23);
    uint64_t v134 = v23;
    uint64_t v135 = &protocol witness table for Table;
    uint64_t v84 = (char *)sub_10000A7C8(&v133);
    v130(v84, v59, v23);
    uint64_t v85 = v119;
    Connection.prepare(_:)(&v133);
    if (v85)
    {
      v56(v59, v23);
      swift_release();
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v133);
    }

    else
    {
      uint64_t v86 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v133);
      dispatch thunk of _AnySequenceBox._makeIterator()(v86);
      uint64_t v87 = swift_release();
      uint64_t v88 = (uint64_t)v99;
      dispatch thunk of _AnyIteratorBoxBase.next()(v87);
      swift_release();
      uint64_t v89 = v102;
      uint64_t v90 = v103;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v88, 1LL, v103) == 1)
      {
        v56(v59, v23);
        swift_release();
        sub_100015794(v88, &qword_10099E710);
        uint64_t v91 = type metadata accessor for DeviceEvent(0LL);
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56LL))( v100,  1LL,  1LL,  v91);
      }

      else
      {
        uint64_t v92 = v98;
        (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v98, v88, v90);
        uint64_t v93 = (uint64_t)v101;
        (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v101, v92, v90);
        uint64_t v94 = v110;
        swift_retain();
        uint64_t v95 = v100;
        sub_10007FF54(v93, v94, v100);
        swift_release();
        (*(void (**)(char *, uint64_t))(v89 + 8))(v92, v90);
        v56(v59, v23);
        uint64_t v96 = type metadata accessor for DeviceEvent(0LL);
        return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56LL))( v95,  0LL,  1LL,  v96);
      }
    }
  }

  else
  {
    unint64_t v69 = sub_100086500();
    uint64_t v70 = swift_allocError(&type metadata for DatabaseError, v69, 0LL, 0LL);
    *(_DWORD *)uint64_t v71 = 2;
    *(_BYTE *)(v71 + 4) = 1;
    return swift_willThrow(v70);
  }

uint64_t sub_10007FF54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v75 = a3;
  uint64_t Error = type metadata accessor for QueryError(0LL);
  uint64_t v76 = *(void *)(Error - 8);
  __chkstk_darwin(Error);
  uint64_t v7 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v83 = type metadata accessor for Date(0LL);
  uint64_t v74 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v82 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = sub_100004AEC(&qword_10099E700);
  uint64_t v73 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v80 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v71 = *(void *)(v10 - 8);
  uint64_t v72 = v10;
  __chkstk_darwin(v10);
  uint64_t v70 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_10099E760);
  uint64_t v68 = *(void *)(v12 - 8);
  uint64_t v69 = v12;
  __chkstk_darwin(v12);
  int v67 = (char *)v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Row(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AA880);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)v65 - v22;
  uint64_t v78 = v15;
  uint64_t v79 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  swift_retain();
  uint64_t v24 = (uint64_t)v17;
  uint64_t v25 = a2;
  uint64_t v26 = v77;
  sub_100083DB0(v24, v21);
  if (v26)
  {
    uint64_t v84 = v26;
    swift_errorRetain(v26);
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v28 = a1;
    if ((swift_dynamicCast(v7, &v84, v27, Error, 0LL) & 1) != 0)
    {
      uint64_t v29 = v76;
      int v30 = (*(uint64_t (**)(char *, uint64_t))(v76 + 88))(v7, Error);
      if (v30 == enum case for QueryError.noSuchColumn(_:))
      {
        swift_errorRelease(v26);
        (*(void (**)(char *, uint64_t))(v29 + 96))(v7, Error);
        swift_bridgeObjectRelease();
LABEL_8:
        swift_bridgeObjectRelease();
        uint64_t v32 = type metadata accessor for DeviceEvent.Location(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v23, 1LL, 1LL, v32);
        swift_errorRelease(v84);
        goto LABEL_9;
      }

      if (v30 == enum case for QueryError.unexpectedNullValue(_:))
      {
        swift_errorRelease(v26);
        (*(void (**)(char *, uint64_t))(v29 + 96))(v7, Error);
        goto LABEL_8;
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v7, Error);
    }

    uint64_t v64 = swift_errorRelease(v84);
    swift_willThrow(v64);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(a1, v79);
  }

  uint64_t v31 = type metadata accessor for DeviceEvent.Location(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v21, 0LL, 1LL, v31);
  sub_100015750((uint64_t)v21, (uint64_t)v23, (uint64_t *)&unk_1009AA880);
  uint64_t v28 = a1;
LABEL_9:
  uint64_t v66 = v23;
  v65[1] = v25;
  uint64_t v33 = v25 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEvent;
  uint64_t v34 = v72;
  if (qword_10099B9C0 != -1) {
    swift_once(&qword_10099B9C0, sub_100752548);
  }
  uint64_t v35 = v69;
  uint64_t v36 = sub_10000A720(v69, (uint64_t)qword_100A2B688);
  uint64_t v37 = type metadata accessor for Table(0LL);
  uint64_t v38 = v67;
  uint64_t v76 = v37;
  uint64_t v77 = v33;
  QueryType.subscript.getter(v36, v37);
  Row.subscript.getter(v38, &type metadata for Int64, &protocol witness table for Int64);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v38, v35);
  uint64_t v39 = v75;
  *uint64_t v75 = v84;
  *((_BYTE *)v39 + 8) = 0;
  uint64_t v40 = v70;
  if (qword_10099B910 != -1) {
    swift_once(&qword_10099B910, sub_1007518C8);
  }
  uint64_t v41 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v42 = sub_10000A720(v41, (uint64_t)qword_100A2B478);
  Row.subscript.getter(v42, v34, &protocol witness table for UUID);
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v69 = 0LL;
  uint64_t v43 = sub_10000A720(v41, (uint64_t)qword_100A2B3E8);
  uint64_t v44 = (int *)type metadata accessor for DeviceEvent(0LL);
  uint64_t v45 = (char *)v39 + v44[8];
  type metadata accessor for BeaconIdentifier(0LL);
  Row.subscript.getter(v43, v34, &protocol witness table for UUID);
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v45, v40, v34);
  if (qword_10099B9A0 != -1) {
    swift_once(&qword_10099B9A0, sub_10075230C);
  }
  uint64_t v46 = v81;
  uint64_t v47 = sub_10000A720(v81, (uint64_t)qword_100A2B628);
  uint64_t v48 = v80;
  uint64_t v49 = v83;
  QueryType.subscript.getter(v47, v76);
  uint64_t v50 = v82;
  Row.subscript.getter(v48, v49, &protocol witness table for Date);
  uint64_t v73 = *(void *)(v73 + 8);
  ((void (*)(char *, uint64_t))v73)(v48, v46);
  uint64_t v51 = (char *)v39 + v44[6];
  uint64_t v74 = *(void *)(v74 + 32);
  ((void (*)(char *, char *, uint64_t))v74)(v51, v50, v49);
  if (qword_10099B9B0 != -1) {
    swift_once(&qword_10099B9B0, sub_100752428);
  }
  uint64_t v52 = sub_100004AEC(&qword_10099E7F8);
  uint64_t v53 = sub_10000A720(v52, (uint64_t)qword_100A2B658);
  unint64_t v54 = sub_1000869F0();
  Row.subscript.getter(v53, &type metadata for UInt32, v54);
  char v55 = sub_100625E2C(v84);
  if (v55 == 6) {
    char v56 = 0;
  }
  else {
    char v56 = v55;
  }
  *((_BYTE *)v39 + 9) = v56;
  uint64_t v57 = (uint64_t)v66;
  sub_10001581C((uint64_t)v66, (uint64_t)v39 + v44[7], (uint64_t *)&unk_1009AA880);
  if (qword_10099B9B8 != -1) {
    swift_once(&qword_10099B9B8, sub_1007524B4);
  }
  uint64_t v58 = v81;
  uint64_t v59 = sub_10000A720(v81, (uint64_t)qword_100A2B670);
  uint64_t v60 = v80;
  uint64_t v61 = v83;
  QueryType.subscript.getter(v59, v76);
  uint64_t v62 = v82;
  Row.subscript.getter(v60, v61, &protocol witness table for Date);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v28, v79);
  ((void (*)(char *, uint64_t))v73)(v60, v58);
  sub_100015794(v57, (uint64_t *)&unk_1009AA880);
  return ((uint64_t (*)(char *, char *, uint64_t))v74)((char *)v39 + v44[9], v62, v61);
}

uint64_t sub_1000806FC(uint64_t a1)
{
  uint64_t v63 = sub_100004AEC(&qword_10099E760);
  uint64_t v57 = *(void *)(v63 - 8);
  uint64_t v2 = __chkstk_darwin(v63);
  uint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v49 - v5;
  uint64_t v66 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v56 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v52 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for JoinType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Table(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v64 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v60 = (char *)&v49 - v17;
  __chkstk_darwin(v16);
  uint64_t v61 = (char *)&v49 - v18;
  uint64_t v62 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEvent;
  uint64_t v55 = v9;
  uint64_t v19 = *(void (**)(void))(v9 + 104);
  uint64_t v59 = v11;
  unsigned int v54 = enum case for JoinType.leftOuter(_:);
  uint64_t v65 = v8;
  uint64_t v53 = (void (*)(char *, void, uint64_t))v19;
  v19(v11);
  uint64_t v71 = a1;
  uint64_t v20 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEventLocation;
  uint64_t v69 = v12;
  uint64_t v70 = &protocol witness table for Table;
  uint64_t v21 = sub_10000A7C8(v68);
  uint64_t v58 = v13;
  int v67 = *(void (**)(void *, uint64_t, uint64_t))(v13 + 16);
  v67(v21, v20, v12);
  if (qword_10099B9C0 != -1) {
    swift_once(&qword_10099B9C0, sub_100752548);
  }
  uint64_t v22 = v63;
  uint64_t v23 = sub_10000A720(v63, (uint64_t)qword_100A2B688);
  uint64_t v50 = v23;
  QueryType.subscript.getter(v23, v12);
  QueryType.subscript.getter(v23, v12);
  uint64_t v24 = v52;
  == infix<A>(_:_:)( v6,  v4,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v57 + 8);
  uint64_t v51 = v25;
  v25(v4, v22);
  v25(v6, v22);
  uint64_t v26 = v59;
  QueryType.join(_:_:on:)(v59, v68, v24, v12, &protocol witness table for Table);
  uint64_t v57 = *(void *)(v56 + 8);
  ((void (*)(char *, uint64_t))v57)(v24, v66);
  uint64_t v56 = *(void *)(v55 + 8);
  uint64_t v27 = v65;
  ((void (*)(char *, uint64_t))v56)(v26, v65);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v68);
  v53(v26, v54, v27);
  uint64_t v28 = v71 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_attachmentInfo;
  uint64_t v69 = v12;
  uint64_t v70 = &protocol witness table for Table;
  uint64_t v29 = sub_10000A7C8(v68);
  v67(v29, v28, v12);
  uint64_t v30 = v12;
  uint64_t v31 = v50;
  QueryType.subscript.getter(v50, v30);
  QueryType.subscript.getter(v31, v30);
  == infix<A>(_:_:)( v6,  v4,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
  uint64_t v32 = v4;
  uint64_t v33 = v63;
  uint64_t v34 = v51;
  v51(v32, v63);
  v34(v6, v33);
  uint64_t v35 = v60;
  uint64_t v36 = v64;
  QueryType.join(_:_:on:)(v26, v68, v24, v30, &protocol witness table for Table);
  ((void (*)(char *, uint64_t))v57)(v24, v66);
  ((void (*)(char *, uint64_t))v56)(v26, v65);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v58 + 8);
  v37(v36, v30);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v68);
  uint64_t v38 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v39 = swift_allocObject(v38, 112LL, 7LL);
  *(_OWORD *)(v39 + 16) = xmmword_1007E4750;
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v40 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v41 = sub_10000A720(v40, (uint64_t)qword_100A2B3E8);
  *(void *)(v39 + 56) = v40;
  *(void *)(v39 + 64) = sub_1000372EC( &qword_10099E7D0,  &qword_10099E6D8,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  uint64_t v42 = sub_10000A7C8((void *)(v39 + 32));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16LL))(v42, v41, v40);
  if (qword_10099B9A0 != -1) {
    swift_once(&qword_10099B9A0, sub_10075230C);
  }
  uint64_t v43 = sub_100004AEC(&qword_10099E700);
  sub_10000A720(v43, (uint64_t)qword_100A2B628);
  uint64_t v44 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v43, v44);
  uint64_t v45 = v61;
  QueryType.order(_:)(v39, v30, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v37(v35, v30);
  uint64_t v69 = v30;
  uint64_t v70 = &protocol witness table for Table;
  uint64_t v46 = sub_10000A7C8(v68);
  v67(v46, (uint64_t)v45, v30);
  uint64_t v47 = sub_100080D7C((uint64_t)v68, v71, sub_1000714E4, &qword_10099E7F0);
  v37(v45, v30);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v68);
  return v47;
}

uint64_t sub_100080D7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t *a4)
{
  uint64_t v9 = sub_1000799BC();
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = Connection.prepare(_:)(a1);
    if (v4)
    {
      return swift_release(v10);
    }

    else
    {
      uint64_t v16 = v11;
      swift_retain();
      uint64_t v17 = swift_retain();
      uint64_t v18 = a3(v17, a2);
      swift_release(v10);
      swift_release_n(v16, 2LL);
      uint64_t v19 = sub_100004AEC(a4);
      uint64_t result = swift_allocObject(v19, 24LL, 7LL);
      *(void *)(result + 16) = v18;
    }
  }

  else
  {
    unint64_t v13 = sub_100086500();
    uint64_t v14 = swift_allocError(&type metadata for DatabaseError, v13, 0LL, 0LL);
    *(_DWORD *)uint64_t v15 = 2;
    *(_BYTE *)(v15 + 4) = 1;
    return swift_willThrow(v14);
  }

  return result;
}

uint64_t sub_100080E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Connection.TransactionMode(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100474DE0();
  if (v8)
  {
    __chkstk_darwin(v8);
    v13[-2] = a2;
    v13[-1] = a1;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for Connection.TransactionMode.deferred(_:),  v4);
    Connection.transaction(_:block:)(v7, sub_100086A34, &v13[-4]);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_release();
  }

  else
  {
    unint64_t v10 = sub_100086500();
    uint64_t v11 = swift_allocError(&type metadata for DatabaseError, v10, 0LL, 0LL);
    *(_DWORD *)uint64_t v12 = 2;
    *(_BYTE *)(v12 + 4) = 1;
    return swift_willThrow(v11);
  }

char *sub_100080FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AA880);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DeviceEvent.Location(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t result = sub_100081128(a2, a1);
  if (!v2)
  {
    uint64_t v13 = (uint64_t)result;
    uint64_t v14 = type metadata accessor for DeviceEvent(0LL);
    sub_10001581C(a2 + *(int *)(v14 + 28), (uint64_t)v7, (uint64_t *)&unk_1009AA880);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
    {
      return (char *)sub_100015794((uint64_t)v7, (uint64_t *)&unk_1009AA880);
    }

    else
    {
      sub_10002218C((uint64_t)v7, (uint64_t)v11, type metadata accessor for DeviceEvent.Location);
      sub_1000824DC(v11, v13, a1);
      return (char *)sub_100018C68((uint64_t)v11, type metadata accessor for DeviceEvent.Location);
    }
  }

  return result;
}

char *sub_100081128(uint64_t a1, uint64_t a2)
{
  uint64_t v148 = a1;
  uint64_t v146 = type metadata accessor for Date(0LL);
  uint64_t v123 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v122 = (uint64_t)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v134 = type metadata accessor for OnConflict(0LL);
  uint64_t v133 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v132 = (char *)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = type metadata accessor for Insert(0LL);
  uint64_t v125 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v124 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v144 = type metadata accessor for DeviceEvent(0LL);
  uint64_t v6 = __chkstk_darwin(v144);
  uint64_t v127 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v121 = (uint64_t)&v110 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v110 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v129 = (uint64_t)&v110 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v128 = (uint64_t)&v110 - v16;
  __chkstk_darwin(v15);
  uint64_t v131 = (uint64_t)&v110 - v17;
  uint64_t v18 = sub_100004AEC(&qword_10099E710);
  __chkstk_darwin(v18);
  uint64_t v130 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for Row(0LL);
  uint64_t v137 = *(void *)(v20 - 8);
  uint64_t v138 = v20;
  __chkstk_darwin(v20);
  uint64_t v135 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v110 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v110 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)&v110 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v140 = (char *)&v110 - v34;
  __chkstk_darwin(v33);
  uint64_t v141 = (char *)&v110 - v35;
  uint64_t v147 = type metadata accessor for Table(0LL);
  uint64_t v36 = *(void *)(v147 - 8);
  uint64_t v37 = __chkstk_darwin(v147);
  uint64_t v142 = (char *)&v110 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v37);
  uint64_t v145 = (char *)&v110 - v39;
  uint64_t v40 = a2;
  if (sub_100474DE0())
  {
    uint64_t v136 = v36;
    uint64_t v110 = v12;
    uint64_t v41 = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEvent;
    if (qword_10099B9B0 != -1) {
      swift_once(&qword_10099B9B0, sub_100752428);
    }
    uint64_t v42 = sub_100004AEC(&qword_10099E7F8);
    uint64_t v43 = sub_10000A720(v42, (uint64_t)qword_100A2B658);
    uint64_t v44 = v148;
    LODWORD(v150) = *(unsigned __int8 *)(v148 + 9);
    unint64_t v45 = sub_1000869F0();
    uint64_t v118 = v43;
    unint64_t v117 = v45;
    == infix<A>(_:_:)(v43, &v150, &type metadata for UInt32, v45, &protocol witness table for Int64);
    if (qword_10099B9A0 != -1) {
      swift_once(&qword_10099B9A0, sub_10075230C);
    }
    uint64_t v139 = v40 + v41;
    uint64_t v119 = sub_100004AEC(&qword_10099E700);
    uint64_t v46 = sub_10000A720(v119, (uint64_t)qword_100A2B628);
    uint64_t v47 = v144;
    uint64_t v48 = v44 + *(int *)(v144 + 24);
    uint64_t v116 = v46;
    uint64_t v115 = v48;
    == infix<A>(_:_:)(v46, v48, v146, &protocol witness table for Date, &protocol witness table for String);
    && infix(_:_:)(v29, v26);
    uint64_t v49 = *(void (**)(char *, uint64_t))(v23 + 8);
    v49(v26, v22);
    v49(v29, v22);
    if (qword_10099B8E0 != -1) {
      swift_once(&qword_10099B8E0, sub_100751568);
    }
    uint64_t v50 = sub_100004AEC(&qword_10099E6D8);
    uint64_t v51 = sub_10000A720(v50, (uint64_t)qword_100A2B3E8);
    uint64_t v52 = (char *)(v44 + *(int *)(v47 + 32));
    uint64_t v111 = type metadata accessor for BeaconIdentifier(0LL);
    uint64_t v53 = &v52[*(int *)(v111 + 20)];
    uint64_t v54 = type metadata accessor for UUID(0LL);
    uint64_t v114 = v51;
    uint64_t v113 = v53;
    == infix<A>(_:_:)(v51, v53, v54, &protocol witness table for UUID, &protocol witness table for String);
    uint64_t v55 = v140;
    && infix(_:_:)(v32, v29);
    v49(v29, v22);
    v49(v32, v22);
    uint64_t v56 = v147;
    if (qword_10099B910 != -1) {
      swift_once(&qword_10099B910, sub_1007518C8);
    }
    uint64_t v112 = sub_10000A720(v50, (uint64_t)qword_100A2B478);
    uint64_t v120 = v54;
    == infix<A>(_:_:)(v112, v52, v54, &protocol witness table for UUID, &protocol witness table for String);
    uint64_t v57 = v141;
    && infix(_:_:)(v55, v32);
    v49(v32, v22);
    v49(v55, v22);
    uint64_t v58 = v142;
    QueryType.filter(_:)(v57, v56, &protocol witness table for Table);
    v49(v57, v22);
    uint64_t v59 = v58;
    uint64_t v26 = v52;
    if (qword_10099B9C0 != -1) {
      swift_once(&qword_10099B9C0, sub_100752548);
    }
    uint64_t v60 = sub_100004AEC(&qword_10099E760);
    uint64_t v61 = sub_10000A720(v60, (uint64_t)qword_100A2B688);
    uint64_t v151 = v60;
    uint64_t v152 = (void *)sub_1000372EC( &qword_10099E7E0,  &qword_10099E760,  (uint64_t)&protocol conformance descriptor for Expression<A>);
    uint64_t v62 = sub_10000A7C8(&v150);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16LL))(v62, v61, v60);
    uint64_t v63 = v145;
    SchemaType.select(_:_:)(&v150, _swiftEmptyArrayStorage, v56, &protocol witness table for Table);
    uint64_t v64 = v136;
    uint64_t v65 = *(void (**)(char *, uint64_t))(v136 + 8);
    v65(v59, v56);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v150);
    uint64_t v151 = v56;
    uint64_t v152 = &protocol witness table for Table;
    uint64_t v66 = sub_10000A7C8(&v150);
    (*(void (**)(void *, char *, uint64_t))(v64 + 16))(v66, v63, v56);
    uint64_t v67 = v143;
    Connection.prepare(_:)(&v150);
    if (v67)
    {
      v65(v63, v56);
      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v150);
    }

    else
    {
      uint64_t v143 = 0LL;
      uint64_t v72 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v150);
      dispatch thunk of _AnySequenceBox._makeIterator()(v72);
      uint64_t v73 = swift_release();
      uint64_t v74 = (uint64_t)v130;
      dispatch thunk of _AnyIteratorBoxBase.next()(v73);
      swift_release();
      uint64_t v76 = v137;
      uint64_t v75 = v138;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v74, 1LL, v138) == 1)
      {
        uint64_t v142 = (char *)v65;
        sub_100015794(v74, &qword_10099E710);
        (*(void (**)(char *, void, uint64_t))(v133 + 104))(v132, enum case for OnConflict.ignore(_:), v134);
        uint64_t v77 = sub_100004AEC(&qword_10099E810);
        uint64_t v78 = *(void *)(type metadata accessor for Setter(0LL) - 8);
        uint64_t v79 = swift_allocObject( v77,  ((*(unsigned __int8 *)(v78 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))
              + 5LL * *(void *)(v78 + 72),
                *(unsigned __int8 *)(v78 + 80) | 7LL);
        *(_OWORD *)(v79 + 16) = xmmword_1007E8280;
        LODWORD(v150) = *(unsigned __int8 *)(v148 + 9);
        <- infix<A>(_:_:)(v118, &v150, &type metadata for UInt32, v117);
        uint64_t v80 = v146;
        <- infix<A>(_:_:)(v116, v115, v146, &protocol witness table for Date);
        uint64_t v81 = v120;
        <- infix<A>(_:_:)(v114, v113, v120, &protocol witness table for UUID);
        <- infix<A>(_:_:)(v112, v26, v81, &protocol witness table for UUID);
        if (qword_10099B9B8 != -1) {
          swift_once(&qword_10099B9B8, sub_1007524B4);
        }
        uint64_t v82 = sub_10000A720(v119, (uint64_t)qword_100A2B670);
        uint64_t v83 = v122;
        static Date.trustedNow.getter(v122);
        <- infix<A>(_:_:)(v82, v83, v80, &protocol witness table for Date);
        (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v83, v80);
        uint64_t v84 = v124;
        uint64_t v85 = v132;
        uint64_t v86 = v147;
        QueryType.insert(or:_:)(v132, v79, v147, &protocol witness table for Table);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v133 + 8))(v85, v134);
        uint64_t v87 = v143;
        uint64_t v88 = Connection.run(_:)(v84);
        uint64_t v89 = (uint64_t)v127;
        if (v87)
        {
          swift_release();
          (*(void (**)(char *, uint64_t))(v125 + 8))(v84, v126);
          ((void (*)(char *, uint64_t))v142)(v145, v86);
        }

        else
        {
          uint64_t v141 = (char *)v88;
          uint64_t v143 = 0LL;
          if (qword_10099B0A8 != -1) {
            swift_once(&qword_10099B0A8, sub_10006C020);
          }
          uint64_t v99 = type metadata accessor for Logger(0LL);
          sub_10000A720(v99, (uint64_t)qword_100A29F68);
          uint64_t v100 = v148;
          uint64_t v101 = (uint64_t)v110;
          sub_10001DC4C(v148, (uint64_t)v110, type metadata accessor for DeviceEvent);
          uint64_t v102 = v121;
          sub_10001DC4C(v100, v121, type metadata accessor for DeviceEvent);
          uint64_t v103 = sub_10001DC4C(v100, v89, type metadata accessor for DeviceEvent);
          uint64_t v104 = (os_log_s *)Logger.logObject.getter(v103);
          int v105 = static os_log_type_t.info.getter(v104);
          if (os_log_type_enabled(v104, (os_log_type_t)v105))
          {
            LODWORD(v148) = v105;
            uint64_t v106 = swift_slowAlloc(52LL, -1LL);
            uint64_t v140 = (char *)swift_slowAlloc(96LL, -1LL);
            uint64_t v150 = v140;
            *(_DWORD *)uint64_t v106 = 141559043;
            uint64_t v153 = 1752392040LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v106 + 4, v106 + 12);
            *(_WORD *)(v106 + 12) = 2081;
            uint64_t v107 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter(v120, v107);
            uint64_t v153 = sub_1003F11D4(v108, v109, (uint64_t *)&v150);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v106 + 14, v106 + 22);
            swift_bridgeObjectRelease();
            sub_100018C68(v101, type metadata accessor for DeviceEvent);
            *(_WORD *)(v106 + 22) = 2082;
            __asm { BR              X10 }
          }

          swift_release();
          sub_100018C68(v89, type metadata accessor for DeviceEvent);
          sub_100018C68(v102, type metadata accessor for DeviceEvent);
          sub_100018C68(v101, type metadata accessor for DeviceEvent);
          (*(void (**)(char *, uint64_t))(v125 + 8))(v84, v126);
          ((void (*)(char *, uint64_t))v142)(v145, v86);
          return v141;
        }
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v135, v74, v75);
        Row.subscript.getter(v61, &type metadata for Int64, &protocol witness table for Int64);
        uint64_t v26 = v150;
        uint64_t v90 = v148;
        if (qword_10099B0A8 != -1) {
          swift_once(&qword_10099B0A8, sub_10006C020);
        }
        uint64_t v91 = type metadata accessor for Logger(0LL);
        sub_10000A720(v91, (uint64_t)qword_100A29F68);
        sub_10001DC4C(v90, v131, type metadata accessor for DeviceEvent);
        uint64_t v92 = v128;
        sub_10001DC4C(v90, v128, type metadata accessor for DeviceEvent);
        uint64_t v93 = v129;
        uint64_t v94 = sub_10001DC4C(v90, v129, type metadata accessor for DeviceEvent);
        uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
        int v96 = static os_log_type_t.info.getter(v95);
        if (os_log_type_enabled(v95, (os_log_type_t)v96))
        {
          LODWORD(v148) = v96;
          uint64_t v97 = (_DWORD *)swift_slowAlloc(52LL, -1LL);
          uint64_t v140 = (char *)swift_slowAlloc(96LL, -1LL);
          uint64_t v150 = v140;
          *uint64_t v97 = 136447235;
          uint64_t v98 = *(unsigned __int8 *)(v131 + 9);
          uint64_t v141 = v26;
          uint64_t v142 = (char *)v65;
          __asm { BR              X10 }
        }

        swift_release();
        sub_100018C68(v93, type metadata accessor for DeviceEvent);
        sub_100018C68(v92, type metadata accessor for DeviceEvent);
        sub_100018C68(v131, type metadata accessor for DeviceEvent);
        (*(void (**)(char *, uint64_t))(v137 + 8))(v135, v138);
        v65(v63, v56);
      }
    }
  }

  else
  {
    unint64_t v68 = sub_100086500();
    uint64_t v69 = swift_allocError(&type metadata for DatabaseError, v68, 0LL, 0LL);
    *(_DWORD *)uint64_t v70 = 2;
    *(_BYTE *)(v70 + 4) = 1;
    swift_willThrow(v69);
  }

  return v26;
}

uint64_t sub_1000824DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v100 = a2;
  uint64_t v93 = a1;
  uint64_t v92 = type metadata accessor for DeviceEvent.Location(0LL);
  __chkstk_darwin(v92);
  uint64_t v85 = (uint64_t)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = type metadata accessor for Date(0LL);
  uint64_t v87 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v86 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Update(0LL);
  uint64_t v88 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v89 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OnConflict(0LL);
  uint64_t v97 = *(void *)(v9 - 8);
  uint64_t v98 = v9;
  __chkstk_darwin(v9);
  int v96 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Insert(0LL);
  uint64_t v90 = *(void *)(v11 - 8);
  uint64_t v91 = v11;
  __chkstk_darwin(v11);
  uint64_t v94 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Table(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC(&qword_10099E710);
  __chkstk_darwin(v21);
  uint64_t v99 = (uint64_t)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_100474DE0())
  {
    uint64_t v82 = v7;
    uint64_t v81 = a3;
    uint64_t v23 = a3 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEventLocation;
    if (qword_10099B9C0 != -1) {
      swift_once(&qword_10099B9C0, sub_100752548);
    }
    uint64_t v24 = sub_100004AEC(&qword_10099E760);
    uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2B688);
    uint64_t v101 = v100;
    uint64_t v84 = v25;
    == infix<A>(_:_:)( v25,  &v101,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
    uint64_t v83 = v23;
    QueryType.filter(_:)(v16, v17, &protocol witness table for Table);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v79 = v13;
    uint64_t v80 = v26;
    v26(v16, v13);
    if (qword_10099B9A0 != -1) {
      swift_once(&qword_10099B9A0, sub_10075230C);
    }
    uint64_t v27 = sub_100004AEC(&qword_10099E700);
    uint64_t v28 = sub_10000A720(v27, (uint64_t)qword_100A2B628);
    v102[2] = v27;
    v102[3] = sub_1000372EC( &qword_10099E808,  &qword_10099E700,  (uint64_t)&protocol conformance descriptor for Expression<A>);
    uint64_t v29 = sub_10000A7C8(&v101);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16LL))(v29, v28, v27);
    v103[3] = v17;
    v103[4] = (uint64_t)&protocol witness table for Table;
    sub_10000A7C8(v103);
    SchemaType.select(_:_:)(&v101, _swiftEmptyArrayStorage, v17, &protocol witness table for Table);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v18 + 8);
    v30(v20, v17);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v101);
    Connection.prepare(_:)(v103);
    if (v3)
    {
      swift_release();
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
    }

    else
    {
      uint64_t v78 = v28;
      uint64_t v77 = v30;
      uint64_t v35 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
      dispatch thunk of _AnySequenceBox._makeIterator()(v35);
      uint64_t v36 = swift_release();
      uint64_t v37 = v99;
      dispatch thunk of _AnyIteratorBoxBase.next()(v36);
      swift_release();
      uint64_t v38 = type metadata accessor for Row(0LL);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48LL))(v37, 1LL, v38) == 1)
      {
        (*(void (**)(char *, void, uint64_t))(v97 + 104))(v96, enum case for OnConflict.replace(_:), v98);
        uint64_t v39 = sub_100004AEC(&qword_10099E810);
        uint64_t v40 = *(void *)(type metadata accessor for Setter(0LL) - 8);
        uint64_t v41 = *(void *)(v40 + 72);
        uint64_t v42 = *(unsigned __int8 *)(v40 + 80);
        uint64_t v43 = (v42 + 32) & ~v42;
        uint64_t v74 = v39;
        uint64_t v72 = v42 | 7;
        uint64_t v44 = swift_allocObject(v39, v43 + 5 * v41, v42 | 7);
        *(_OWORD *)(v44 + 16) = xmmword_1007E8280;
        uint64_t v73 = v43;
        uint64_t v76 = v44;
        uint64_t v45 = v44 + v43;
        v103[0] = v100;
        <- infix<A>(_:_:)(v84, v103, &type metadata for Int64, &protocol witness table for Int64);
        uint64_t v75 = v45 + v41;
        if (qword_10099B988 != -1) {
          swift_once(&qword_10099B988, sub_100752154);
        }
        uint64_t v46 = sub_100004AEC(&qword_10099E778);
        uint64_t v47 = sub_10000A720(v46, (uint64_t)qword_100A2B5E0);
        uint64_t v48 = v93;
        v103[0] = *v93;
        <- infix<A>(_:_:)(v47, v103, &type metadata for Double, &protocol witness table for Double);
        uint64_t v75 = v45 + 2 * v41;
        if (qword_10099B990 != -1) {
          swift_once(&qword_10099B990, sub_1007521E4);
        }
        uint64_t v49 = sub_10000A720(v46, (uint64_t)qword_100A2B5F8);
        v103[0] = v48[1];
        <- infix<A>(_:_:)(v49, v103, &type metadata for Double, &protocol witness table for Double);
        uint64_t v75 = v45 + 3 * v41;
        if (qword_10099B998 != -1) {
          swift_once(&qword_10099B998, sub_100752278);
        }
        uint64_t v50 = sub_10000A720(v46, (uint64_t)qword_100A2B610);
        v103[0] = v48[2];
        <- infix<A>(_:_:)(v50, v103, &type metadata for Double, &protocol witness table for Double);
        uint64_t v51 = (char *)v48 + *(int *)(v92 + 28);
        uint64_t v52 = v78;
        uint64_t v78 = v41;
        <- infix<A>(_:_:)(v52, v51, v95, &protocol witness table for Date);
        uint64_t v53 = v94;
        uint64_t v54 = v96;
        QueryType.insert(or:_:)(v96, v76, v17, &protocol witness table for Table);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v97 + 8))(v54, v98);
        Connection.run(_:)(v53);
        uint64_t v55 = v95;
        v103[0] = v100;
        == infix<A>(_:_:)( v84,  v103,  &type metadata for Int64,  &protocol witness table for Int64,  &protocol witness table for Int64);
        QueryType.filter(_:)(v16, v17, &protocol witness table for Table);
        v80(v16, v79);
        uint64_t v56 = swift_allocObject(v74, v73 + v78, v72);
        *(_OWORD *)(v56 + 16) = xmmword_1007E67D0;
        if (qword_10099B9B8 != -1) {
          swift_once(&qword_10099B9B8, sub_1007524B4);
        }
        uint64_t v57 = sub_10000A720(v27, (uint64_t)qword_100A2B670);
        uint64_t v58 = v86;
        static Date.trustedNow.getter(v86);
        <- infix<A>(_:_:)(v57, v58, v55, &protocol witness table for Date);
        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v58, v55);
        uint64_t v59 = v89;
        QueryType.update(_:)(v56, v17, &protocol witness table for Table);
        swift_bridgeObjectRelease();
        v77(v20, v17);
        Connection.run(_:)(v59);
        uint64_t v60 = v82;
        uint64_t v61 = (uint64_t)v93;
        if (qword_10099B0A8 != -1) {
          swift_once(&qword_10099B0A8, sub_10006C020);
        }
        uint64_t v62 = type metadata accessor for Logger(0LL);
        sub_10000A720(v62, (uint64_t)qword_100A29F68);
        uint64_t v63 = v85;
        uint64_t v64 = sub_10001DC4C(v61, v85, type metadata accessor for DeviceEvent.Location);
        uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
        os_log_type_t v66 = static os_log_type_t.info.getter(v65);
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = swift_slowAlloc(22LL, -1LL);
          uint64_t v68 = swift_slowAlloc(32LL, -1LL);
          v103[0] = v68;
          *(_DWORD *)uint64_t v67 = 136446466;
          uint64_t v69 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v95, v69);
          uint64_t v101 = sub_1003F11D4(v70, v71, v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v67 + 4, v67 + 12);
          swift_bridgeObjectRelease();
          sub_100018C68(v63, type metadata accessor for DeviceEvent.Location);
          *(_WORD *)(v67 + 12) = 2048;
          uint64_t v101 = v100;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v67 + 14, v67 + 22);
          _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "Updated location for device event ts: %{public}s (eventId=%lld).",  (uint8_t *)v67,  0x16u);
          swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1LL, -1LL);
          swift_slowDealloc(v67, -1LL, -1LL);

          swift_release();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v82);
        }

        else
        {

          swift_release();
          sub_100018C68(v63, type metadata accessor for DeviceEvent.Location);
          (*(void (**)(char *, uint64_t))(v88 + 8))(v59, v60);
        }

        (*(void (**)(char *, uint64_t))(v90 + 8))(v94, v91);
      }

      else
      {
        swift_release();
      }

      return sub_100015794(v99, &qword_10099E710);
    }
  }

  else
  {
    unint64_t v32 = sub_100086500();
    uint64_t v33 = swift_allocError(&type metadata for DatabaseError, v32, 0LL, 0LL);
    *(_DWORD *)uint64_t v34 = 2;
    *(_BYTE *)(v34 + 4) = 1;
    return swift_willThrow(v33);
  }

uint64_t sub_100083054(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a1;
  uint64_t v3 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Table(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v25 - v12;
  v25[1] = a2;
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v14 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2B3E8);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  == infix<A>(_:_:)(v15, v27, v16, &protocol witness table for UUID, &protocol witness table for String);
  QueryType.filter(_:)(v6, v7, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v17 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1007E67D0;
  if (qword_10099B9A0 != -1) {
    swift_once(&qword_10099B9A0, sub_10075230C);
  }
  uint64_t v19 = sub_100004AEC(&qword_10099E700);
  sub_10000A720(v19, (uint64_t)qword_100A2B628);
  uint64_t v20 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v19, v20);
  QueryType.order(_:)(v18, v7, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v11, v7);
  v26[3] = v7;
  v26[4] = &protocol witness table for Table;
  uint64_t v22 = sub_10000A7C8(v26);
  (*(void (**)(void *, char *, uint64_t))(v8 + 16))(v22, v13, v7);
  uint64_t v23 = sub_10007D27C((uint64_t)v26);
  v21(v13, v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  return v23;
}

uint64_t sub_100083300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v6 = *(void *)(v51 - 8);
  uint64_t v7 = __chkstk_darwin(v51);
  uint64_t v49 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v47 - v10;
  __chkstk_darwin(v9);
  uint64_t v50 = (char *)&v47 - v12;
  uint64_t v13 = type metadata accessor for Table(0LL);
  uint64_t v53 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v52 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v54 = (char *)&v47 - v16;
  int64_t v17 = *(void *)(a2 + 16);
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v56 = a3;
  if (v17)
  {
    uint64_t v47 = a1;
    uint64_t v48 = v6;
    v55[0] = _swiftEmptyArrayStorage;
    sub_100032A84(0, v17, 0);
    uint64_t v18 = (void *)v55[0];
    uint64_t v19 = (char *)(a2 + 32);
    unint64_t v20 = *(void *)(v55[0] + 16LL);
    do
    {
      char v22 = *v19++;
      char v21 = v22;
      v55[0] = v18;
      unint64_t v23 = v18[3];
      if (v20 >= v23 >> 1)
      {
        sub_100032A84(v23 > 1, v20 + 1, 1);
        uint64_t v18 = (void *)v55[0];
      }

      v18[2] = v20 + 1;
      *((_BYTE *)v18 + v20++ + 32) = v21;
      --v17;
    }

    while (v17);
    a3 = v56;
    a1 = v47;
    uint64_t v6 = v48;
  }

  uint64_t v48 = a3 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keySyncMetadata;
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v24 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2B3E8);
  uint64_t v26 = type metadata accessor for UUID(0LL);
  == infix<A>(_:_:)(v25, a1, v26, &protocol witness table for UUID, &protocol witness table for String);
  v55[0] = v18;
  if (qword_10099B9A8 != -1) {
    swift_once(&qword_10099B9A8, sub_1007523A0);
  }
  uint64_t v27 = sub_100004AEC(&qword_10099E6E0);
  uint64_t v28 = sub_10000A720(v27, (uint64_t)qword_100A2B640);
  uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009AC380);
  uint64_t v30 = sub_1000372EC(&qword_10099E6E8, (uint64_t *)&unk_1009AC380, (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v31 = sub_1000864BC();
  unint64_t v32 = v49;
  Collection<>.contains(_:)(v28, v29, v30, v31);
  swift_bridgeObjectRelease();
  uint64_t v33 = v50;
  && infix(_:_:)(v11, v32);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v35 = v51;
  v34(v32, v51);
  v34(v11, v35);
  uint64_t v36 = v52;
  QueryType.filter(_:)(v33, v13, &protocol witness table for Table);
  v34(v33, v35);
  uint64_t v37 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v38 = swift_allocObject(v37, 72LL, 7LL);
  *(_OWORD *)(v38 + 16) = xmmword_1007E67D0;
  if (qword_10099B9A0 != -1) {
    swift_once(&qword_10099B9A0, sub_10075230C);
  }
  uint64_t v39 = sub_100004AEC(&qword_10099E700);
  sub_10000A720(v39, (uint64_t)qword_100A2B628);
  uint64_t v40 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v39, v40);
  uint64_t v41 = v54;
  QueryType.order(_:)(v38, v13, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  uint64_t v42 = v53;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v53 + 8);
  v43(v36, v13);
  v55[3] = v13;
  v55[4] = &protocol witness table for Table;
  uint64_t v44 = sub_10000A7C8(v55);
  (*(void (**)(void *, char *, uint64_t))(v42 + 16))(v44, v41, v13);
  uint64_t v45 = sub_10007D27C((uint64_t)v55);
  v43(v41, v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
  return v45;
}

uint64_t sub_100083780(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v1 = type metadata accessor for Delete(0LL);
  uint64_t v21 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Table(0LL);
  uint64_t v20 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_100474DE0())
  {
    uint64_t v18 = v1;
    if (qword_10099B8E0 != -1) {
      swift_once(&qword_10099B8E0, sub_100751568);
    }
    uint64_t v11 = sub_100004AEC(&qword_10099E6D8);
    uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2B3E8);
    uint64_t v13 = type metadata accessor for UUID(0LL);
    == infix<A>(_:_:)(v12, v19, v13, &protocol witness table for UUID, &protocol witness table for String);
    QueryType.filter(_:)(v7, v8, &protocol witness table for Table);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    QueryType.delete()(v8, &protocol witness table for Table);
    Connection.run(_:)(v3);
    swift_release();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  }

  else
  {
    unint64_t v15 = sub_100086500();
    uint64_t v16 = swift_allocError(&type metadata for DatabaseError, v15, 0LL, 0LL);
    *(_DWORD *)uint64_t v17 = 2;
    *(_BYTE *)(v17 + 4) = 1;
    return swift_willThrow(v16);
  }

uint64_t sub_1000839D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v4 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2B3E8);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  Row.subscript.getter(v5, v6, &protocol witness table for UUID);
  if (qword_10099B9A8 != -1) {
    swift_once(&qword_10099B9A8, sub_1007523A0);
  }
  uint64_t v7 = sub_100004AEC(&qword_10099E6E0);
  uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_100A2B640);
  unint64_t v9 = sub_1000864BC();
  Row.subscript.getter(v8, &type metadata for UInt8, v9);
  char v10 = sub_100455B50(v33);
  if (v10 == 9) {
    char v11 = 0;
  }
  else {
    char v11 = v10;
  }
  uint64_t v12 = (int *)type metadata accessor for KeySyncMetadata(0LL);
  *(_BYTE *)(a2 + v12[5]) = v11;
  if (qword_10099B9A0 != -1) {
    swift_once(&qword_10099B9A0, sub_10075230C);
  }
  uint64_t v13 = sub_100004AEC(&qword_10099E700);
  uint64_t v14 = sub_10000A720(v13, (uint64_t)qword_100A2B628);
  uint64_t v15 = a2 + v12[7];
  uint64_t v16 = type metadata accessor for Date(0LL);
  Row.subscript.getter(v14, v16, &protocol witness table for Date);
  if (qword_10099B8F0 != -1) {
    swift_once(&qword_10099B8F0, sub_100751688);
  }
  uint64_t v17 = sub_10000A720(v7, (uint64_t)qword_100A2B418);
  uint64_t v18 = v36;
  Row.get<A>(_:)(&v33, v17, &type metadata for UInt8, v9);
  if (v18) {
    goto LABEL_22;
  }
  int v19 = v33;
  if (v33 > 2u)
  {
    unint64_t v27 = sub_1000867D4();
    uint64_t v28 = swift_allocError(&type metadata for ObservationStoreService.Error, v27, 0LL, 0LL);
    *uint64_t v29 = 0;
    swift_willThrow(v28);
LABEL_22:
    uint64_t v30 = type metadata accessor for Row(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8LL))(a1, v30);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a2, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
  }

  if (qword_10099B8E8 != -1) {
    swift_once(&qword_10099B8E8, sub_1007515FC);
  }
  uint64_t v20 = sub_100004AEC(&qword_10099E730);
  uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2B400);
  unint64_t v22 = sub_100086818();
  Row.subscript.getter(v21, &type metadata for UInt64, v22);
  uint64_t v23 = v33;
  if (qword_10099B8F8 != -1) {
    swift_once(&qword_10099B8F8, sub_100751718);
  }
  uint64_t v24 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2B430);
  Row.subscript.getter(v25, &type metadata for Bool, &protocol witness table for Bool);
  if (v19)
  {
    if (v19 == 1)
    {
      uint64_t v34 = &type metadata for SecondaryIndex;
      unint64_t v26 = sub_1000868A0();
    }

    else
    {
      uint64_t v34 = &type metadata for SecureLocationsIndex;
      unint64_t v26 = sub_10008685C();
    }
  }

  else if ((v33 & 1) != 0)
  {
    uint64_t v34 = &type metadata for PrimaryWildIndex;
    unint64_t v26 = sub_100086928();
  }

  else
  {
    uint64_t v34 = &type metadata for PrimaryIndex;
    unint64_t v26 = sub_1000868E4();
  }

  unint64_t v35 = v26;
  *(void *)&__int128 v33 = v23;
  uint64_t v32 = type metadata accessor for Row(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8LL))(a1, v32);
  return sub_100012EC0(&v33, a2 + v12[6]);
}

uint64_t sub_100083DB0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = sub_100004AEC(&qword_10099E700);
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_10099B988 != -1) {
    swift_once(&qword_10099B988, sub_100752154);
  }
  uint64_t v11 = sub_100004AEC(&qword_10099E778);
  uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2B5E0);
  Row.get<A>(_:)(&v25, v12, &type metadata for Double, &protocol witness table for Double);
  if (v2)
  {
    swift_release();
    uint64_t v15 = type metadata accessor for Row(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(a1, v15);
  }

  else
  {
    *(void *)uint64_t v24 = v25;
    if (qword_10099B990 != -1) {
      swift_once(&qword_10099B990, sub_1007521E4);
    }
    uint64_t v13 = sub_10000A720(v11, (uint64_t)qword_100A2B5F8);
    Row.get<A>(_:)(&v25, v13, &type metadata for Double, &protocol witness table for Double);
    *((void *)v24 + 1) = v25;
    if (qword_10099B998 != -1) {
      swift_once(&qword_10099B998, sub_100752278);
    }
    uint64_t v14 = sub_10000A720(v11, (uint64_t)qword_100A2B610);
    Row.get<A>(_:)(&v25, v14, &type metadata for Double, &protocol witness table for Double);
    *((void *)v24 + 2) = v25;
    if (qword_10099B9A0 != -1) {
      swift_once(&qword_10099B9A0, sub_10075230C);
    }
    uint64_t v17 = sub_10000A720(v23, (uint64_t)qword_100A2B628);
    uint64_t v18 = type metadata accessor for Table(0LL);
    QueryType.subscript.getter(v17, v18);
    Row.get<A>(_:)(v10, v6, v7, &protocol witness table for Date);
    swift_release();
    uint64_t v19 = type metadata accessor for Row(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(a1, v19);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v23);
    uint64_t v20 = type metadata accessor for DeviceEvent.Location(0LL);
    return (*(uint64_t (**)(char *, void *, uint64_t))(v8 + 32))(&v24[*(int *)(v20 + 28)], v10, v7);
  }

void (*sub_100084110())(uint64_t, void *)
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)v0;
  uint64_t v4 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v77 - v10;
  if (*(_BYTE *)(v0 + 57) == 1)
  {
    static SystemInfo.lockState.getter(v9);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))( v8,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v4);
    uint64_t v12 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v88, v4, v12);
    dispatch thunk of RawRepresentable.rawValue.getter(&v90, v4, v12);
    uint64_t v13 = v88;
    uint64_t v14 = v90;
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v11, v4);
    if (v13 == v14)
    {
      unint64_t v16 = sub_100086500();
      uint64_t v17 = swift_allocError(&type metadata for DatabaseError, v16, 0LL, 0LL);
      int v19 = 4;
LABEL_6:
      *(_DWORD *)uint64_t v18 = v19;
      *(_BYTE *)(v18 + 4) = 1;
      return (void (*)(uint64_t, void *))swift_willThrow(v17);
    }
  }

  uint64_t v20 = *(void *)(v2 + 48);
  uint64_t v21 = sub_100004AEC(&qword_10099E758);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10008696C, v2, v20, (char *)&type metadata for () + 8, v21);
  uint64_t v22 = v88;
  swift_release();
  if (v22)
  {
    unint64_t v23 = sub_100086500();
    uint64_t v17 = swift_allocError(&type metadata for DatabaseError, v23, 0LL, 0LL);
    int v19 = 3;
    goto LABEL_6;
  }

  if (qword_10099B8D0 != -1) {
    swift_once(&qword_10099B8D0, sub_1007513A4);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  unint64_t v26 = (void *)sub_10000A720(v25, (uint64_t)qword_1009BEA88);
  unsigned int v27 = *(unsigned __int8 *)(v2 + 56);
  uint64_t v28 = sub_100007864(&qword_10099E898, type metadata accessor for ObservationDatabase, (uint64_t)&unk_10081A8D0);
  uint64_t result = static Database.establishConnection(logger:temporary:)(v26, v27, v3, v28);
  if (!v1)
  {
    uint64_t v29 = __chkstk_darwin(result);
    *(&v77 - 2) = v2;
    *(&v77 - 1) = v29;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100086B54,  &v77 - 4,  v20,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
    swift_release();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10008696C, v2, v20, (char *)&type metadata for () + 8, v21);
    if (!v88)
    {
      unint64_t v49 = sub_100086500();
      uint64_t v17 = swift_allocError(&type metadata for DatabaseError, v49, 0LL, 0LL);
      int v19 = 2;
      goto LABEL_6;
    }

    uint64_t v30 = *(void *)(v88 + 24);
    swift_retain();
    swift_release();
    v31._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    v31._object = (void *)0x8000000100851C30LL;
    Connection.execute(_:)(v31);
    if (v32) {
      return (void (*)(uint64_t, void *))swift_release();
    }
    uint64_t v33 = sub_100085FE0();
    uint64_t v34 = Connection.handle.getter(v33);
    _sqlite3_maintain_load_factor(v34, 0LL);
    signed int v35 = Connection.userVersion.getter();
    int v37 = v35;
    signed int v38 = *(_DWORD *)(v2 + 40);
    if (v38 >= v35)
    {
      uint64_t v50 = qword_10099B3F8;
      LODWORD(v85) = *(_DWORD *)(v2 + 40);
      if (v35 >= v38)
      {
LABEL_28:
        if (v50 != -1) {
          swift_once(&qword_10099B3F8, sub_1003F1160);
        }
        sub_10000A720(v25, (uint64_t)qword_100A2A910);
        uint64_t v64 = swift_retain_n(v2, 3LL);
        uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
        os_log_type_t v66 = static os_log_type_t.default.getter(v65);
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = swift_slowAlloc(18LL, -1LL);
          uint64_t v68 = swift_slowAlloc(32LL, -1LL);
          uint64_t v88 = v68;
          *(_DWORD *)uint64_t v67 = 136446466;
          uint64_t v69 = sub_100085A78();
          uint64_t v90 = sub_1003F11D4(v69, v70, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v67 + 4, v67 + 12);
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v67 + 12) = 1024;
          swift_release();
          LODWORD(v90) = v85;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 4, v67 + 14, v67 + 18);
          swift_release();
          _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "%{public}s is available. [schema version %d]",  (uint8_t *)v67,  0x12u);
          swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1LL, -1LL);
          swift_slowDealloc(v67, -1LL, -1LL);
        }

        else
        {

          swift_release_n(v2, 3LL);
        }

        uint64_t v74 = *(os_unfair_lock_s **)(v2 + 24);
        uint64_t v75 = v74 + 4;
        uint64_t v76 = v74 + 5;
        os_unfair_lock_lock(v74 + 5);
        sub_1003AC1A0(v75);
        os_unfair_lock_unlock(v76);
        LOBYTE(v88) = 1;
        AsyncStreamProvider.yield(value:transaction:)(&v88, 0LL);
        return (void (*)(uint64_t, void *))swift_release();
      }

      if (qword_10099B3F8 != -1) {
        swift_once(&qword_10099B3F8, sub_1003F1160);
      }
      uint64_t v80 = (char *)&v90 + 4;
      uint64_t v81 = &v91;
      *(void *)&__int128 v36 = 136446722LL;
      __int128 v79 = v36;
      uint64_t v78 = (char *)&type metadata for Any + 8;
      unint64_t v83 = 0x8000000100851C50LL;
      while (v37 < v38)
      {
        LODWORD(v87) = v37 + 1;
        uint64_t v51 = sub_10000A720(v25, (uint64_t)qword_100A2A910);
        uint64_t v52 = swift_retain();
        uint64_t v84 = v51;
        uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
        os_log_type_t v54 = static os_log_type_t.default.getter(v53);
        BOOL v55 = os_log_type_enabled(v53, v54);
        int v86 = v37;
        if (v55)
        {
          uint64_t v56 = swift_slowAlloc(24LL, -1LL);
          uint64_t v82 = swift_slowAlloc(32LL, -1LL);
          uint64_t v88 = v82;
          *(_DWORD *)uint64_t v56 = v79;
          uint64_t v57 = sub_100085A78();
          uint64_t v90 = sub_1003F11D4(v57, v58, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v81, v56 + 4, v56 + 12);
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v56 + 12) = 1024;
          LODWORD(v90) = v86;
          uint64_t v59 = v80;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v80, v56 + 14, v56 + 18);
          *(_WORD *)(v56 + 18) = 1024;
          LODWORD(v90) = v87;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v59, v56 + 20, v56 + 24);
          _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "%{public}s migrating schema %d -> %d",  (uint8_t *)v56,  0x18u);
          uint64_t v60 = v82;
          swift_arrayDestroy(v82, 1LL, v78);
          swift_slowDealloc(v60, -1LL, -1LL);
          uint64_t v61 = v56;
          int v37 = v86;
          swift_slowDealloc(v61, -1LL, -1LL);
        }

        else
        {

          swift_release();
        }

        int v62 = v87;
        sub_100752CF4(v37, v87, v30);
        uint64_t v88 = 0LL;
        unint64_t v89 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(24LL);
        swift_bridgeObjectRelease();
        uint64_t v88 = 0xD000000000000016LL;
        unint64_t v89 = v83;
        LODWORD(v90) = v62;
        v63._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        Connection.run(_:_:)(v88, v89, _swiftEmptyArrayStorage);
        swift_bridgeObjectRelease();
        swift_release();
        int v37 = v62;
        signed int v38 = v85;
        if ((_DWORD)v85 == v62)
        {
          sub_100086544( (void (*)(void))type metadata accessor for ObservationDatabase,  (uint64_t (*)(char *, char *, char *))sub_100752B6C);
          uint64_t v50 = qword_10099B3F8;
          goto LABEL_28;
        }
      }

      __break(1u);
    }

    else if (qword_10099B3F8 == -1)
    {
LABEL_15:
      sub_10000A720(v25, (uint64_t)qword_100A2A910);
      uint64_t v39 = swift_retain_n(v2, 3LL);
      uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
      os_log_type_t v41 = static os_log_type_t.fault.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = swift_slowAlloc(24LL, -1LL);
        LODWORD(v85) = v38;
        uint64_t v43 = v42;
        uint64_t v44 = swift_slowAlloc(32LL, -1LL);
        int v86 = v37;
        uint64_t v45 = v44;
        uint64_t v88 = v44;
        *(_DWORD *)uint64_t v43 = 136446722;
        uint64_t v46 = sub_100085A78();
        uint64_t v90 = sub_1003F11D4(v46, v47, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v43 + 4, v43 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 1024;
        LODWORD(v90) = v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 4, v43 + 14, v43 + 18);
        *(_WORD *)(v43 + 18) = 1024;
        swift_release();
        LODWORD(v90) = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 4, v43 + 20, v43 + 24);
        swift_release();
        _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "%{public}s Schema too new! (%d) -- expected <= %d",  (uint8_t *)v43,  0x18u);
        swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v48 = v45;
        int v37 = v86;
        swift_slowDealloc(v48, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v2, 3LL);
      }

      unint64_t v71 = sub_100086500();
      uint64_t v72 = swift_allocError(&type metadata for DatabaseError, v71, 0LL, 0LL);
      *(_DWORD *)uint64_t v73 = v37;
      *(_BYTE *)(v73 + 4) = 0;
      swift_willThrow(v72);
      return (void (*)(uint64_t, void *))swift_release();
    }

    swift_once(&qword_10099B3F8, sub_1003F1160);
    goto LABEL_15;
  }

  return result;
}

uint64_t sub_100084DBC()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v69 - v10;
  if (*((_BYTE *)v0 + 49) == 1)
  {
    static SystemInfo.lockState.getter(v9);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))( v8,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v4);
    uint64_t v12 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v80, v4, v12);
    dispatch thunk of RawRepresentable.rawValue.getter(&v82, v4, v12);
    uint64_t v13 = v80;
    uint64_t v14 = v82;
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v11, v4);
    if (v13 == v14)
    {
      unint64_t v16 = sub_100086500();
      uint64_t v17 = swift_allocError(&type metadata for DatabaseError, v16, 0LL, 0LL);
      int v19 = 4;
LABEL_6:
      *(_DWORD *)uint64_t v18 = v19;
      *(_BYTE *)(v18 + 4) = 1;
      return swift_willThrow(v17);
    }
  }

  uint64_t v20 = v2[5];
  uint64_t v21 = sub_100004AEC(&qword_10099E758);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100086984, v2, v20, (char *)&type metadata for () + 8, v21);
  uint64_t v22 = v80;
  uint64_t v23 = swift_release();
  if (v22)
  {
    unint64_t v24 = sub_100086500();
    uint64_t v17 = swift_allocError(&type metadata for DatabaseError, v24, 0LL, 0LL);
    int v19 = 3;
    goto LABEL_6;
  }

  __chkstk_darwin(v23);
  *(&v69 - 2) = (uint64_t)v2;
  *(&v69 - 1) = v3;
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100086B84,  &v69 - 4,  v20,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  if (!v1)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100086984, v2, v20, (char *)&type metadata for () + 8, v21);
    if (!v80)
    {
      unint64_t v41 = sub_100086500();
      uint64_t v17 = swift_allocError(&type metadata for DatabaseError, v41, 0LL, 0LL);
      int v19 = 2;
      goto LABEL_6;
    }

    uint64_t v26 = *(void *)(v80 + 24);
    swift_retain();
    swift_release();
    v27._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    v27._object = (void *)0x8000000100851C30LL;
    Connection.execute(_:)(v27);
    if (v28) {
      return swift_release();
    }
    uint64_t v29 = sub_100086204();
    uint64_t v30 = Connection.handle.getter(v29);
    _sqlite3_maintain_load_factor(v30, 0LL);
    int v79 = Connection.userVersion.getter();
    int v32 = *((_DWORD *)v2 + 8);
    if (v32 < v79)
    {
      if (qword_10099B3F8 != -1) {
LABEL_40:
      }
        swift_once(&qword_10099B3F8, sub_1003F1160);
      uint64_t v33 = type metadata accessor for Logger(0LL);
      sub_10000A720(v33, (uint64_t)qword_100A2A910);
      uint64_t v34 = swift_retain_n(v2, 3LL);
      signed int v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.fault.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc(24LL, -1LL);
        uint64_t v38 = swift_slowAlloc(32LL, -1LL);
        uint64_t v80 = v38;
        *(_DWORD *)uint64_t v37 = 136446722;
        int v78 = v32;
        uint64_t v39 = sub_100085D2C();
        uint64_t v82 = sub_1003F11D4(v39, v40, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v37 + 4, v37 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 1024;
        LODWORD(v82) = v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 4, v37 + 14, v37 + 18);
        *(_WORD *)(v37 + 18) = 1024;
        swift_release();
        LODWORD(v82) = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 4, v37 + 20, v37 + 24);
        swift_release();
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "%{public}s Schema too new! (%d) -- expected <= %d",  (uint8_t *)v37,  0x18u);
        swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1LL, -1LL);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v2, 3LL);
      }

      unint64_t v58 = sub_100086500();
      uint64_t v59 = swift_allocError(&type metadata for DatabaseError, v58, 0LL, 0LL);
      *(_DWORD *)uint64_t v60 = v79;
      *(_BYTE *)(v60 + 4) = 0;
      swift_willThrow(v59);
      return swift_release();
    }

    if (v79 >= v32)
    {
      if (qword_10099B3F8 != -1) {
        swift_once(&qword_10099B3F8, sub_1003F1160);
      }
      uint64_t v61 = type metadata accessor for Logger(0LL);
      sub_10000A720(v61, (uint64_t)qword_100A2A910);
      uint64_t v62 = swift_retain_n(v2, 3LL);
      os_log_type_t v54 = (os_log_s *)Logger.logObject.getter(v62);
      os_log_type_t v55 = static os_log_type_t.default.getter(v54);
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = swift_slowAlloc(18LL, -1LL);
        uint64_t v57 = swift_slowAlloc(32LL, -1LL);
        int v78 = v32;
LABEL_35:
        uint64_t v63 = v57;
        uint64_t v80 = v57;
        *(_DWORD *)uint64_t v56 = 136446466;
        uint64_t v64 = sub_100085D2C();
        uint64_t v82 = sub_1003F11D4(v64, v65, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v56 + 4, v56 + 12);
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 12) = 1024;
        swift_release();
        LODWORD(v82) = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 4, v56 + 14, v56 + 18);
        swift_release();
        _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "%{public}s is available. [schema version %d]",  (uint8_t *)v56,  0x12u);
        swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v63, -1LL, -1LL);
        swift_slowDealloc(v56, -1LL, -1LL);

        goto LABEL_37;
      }
    }

    else
    {
      if (qword_10099B3F8 != -1) {
        swift_once(&qword_10099B3F8, sub_1003F1160);
      }
      uint64_t v72 = (char *)&v82 + 4;
      uint64_t v73 = &v83;
      *(void *)&__int128 v31 = 136446722LL;
      __int128 v71 = v31;
      unint64_t v70 = (char *)&type metadata for Any + 8;
      unint64_t v76 = 0x8000000100851C50LL;
      do
      {
        if (v79 >= v32)
        {
          __break(1u);
          goto LABEL_40;
        }

        int v78 = v79 + 1;
        uint64_t v75 = type metadata accessor for Logger(0LL);
        uint64_t v42 = sub_10000A720(v75, (uint64_t)qword_100A2A910);
        uint64_t v43 = swift_retain();
        uint64_t v77 = v42;
        uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
        os_log_type_t v45 = static os_log_type_t.default.getter(v44);
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = swift_slowAlloc(24LL, -1LL);
          uint64_t v74 = swift_slowAlloc(32LL, -1LL);
          uint64_t v80 = v74;
          *(_DWORD *)uint64_t v46 = v71;
          uint64_t v47 = sub_100085D2C();
          uint64_t v82 = sub_1003F11D4(v47, v48, &v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v73, v46 + 4, v46 + 12);
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v46 + 12) = 1024;
          LODWORD(v82) = v79;
          unint64_t v49 = v72;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v72, v46 + 14, v46 + 18);
          *(_WORD *)(v46 + 18) = 1024;
          LODWORD(v82) = v78;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v49, v46 + 20, v46 + 24);
          _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "%{public}s migrating schema %d -> %d",  (uint8_t *)v46,  0x18u);
          uint64_t v50 = v74;
          swift_arrayDestroy(v74, 1LL, v70);
          swift_slowDealloc(v50, -1LL, -1LL);
          swift_slowDealloc(v46, -1LL, -1LL);
        }

        else
        {

          swift_release();
        }

        int v51 = v78;
        sub_1003AC1AC(v79, v78, v26);
        uint64_t v80 = 0LL;
        unint64_t v81 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(24LL);
        swift_bridgeObjectRelease();
        uint64_t v80 = 0xD000000000000016LL;
        unint64_t v81 = v76;
        LODWORD(v82) = v51;
        v52._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
        String.append(_:)(v52);
        swift_bridgeObjectRelease();
        Connection.run(_:_:)(v80, v81, _swiftEmptyArrayStorage);
        swift_bridgeObjectRelease();
        swift_release();
        int v79 = v51;
      }

      while (v32 != v51);
      sub_100086544( (void (*)(void))type metadata accessor for StandaloneBeaconDatabase,  (uint64_t (*)(char *, char *, char *))sub_1003ABF8C);
      int v78 = v32;
      if (qword_10099B3F8 != -1) {
        swift_once(&qword_10099B3F8, sub_1003F1160);
      }
      sub_10000A720(v75, (uint64_t)qword_100A2A910);
      uint64_t v53 = swift_retain_n(v2, 3LL);
      os_log_type_t v54 = (os_log_s *)Logger.logObject.getter(v53);
      os_log_type_t v55 = static os_log_type_t.default.getter(v54);
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = swift_slowAlloc(18LL, -1LL);
        uint64_t v57 = swift_slowAlloc(32LL, -1LL);
        goto LABEL_35;
      }
    }

    swift_release_n(v2, 3LL);
LABEL_37:
    os_log_type_t v66 = (os_unfair_lock_s *)v2[2];
    uint64_t v67 = v66 + 4;
    uint64_t v68 = v66 + 5;
    os_unfair_lock_lock(v66 + 5);
    sub_1003AC1A0(v67);
    os_unfair_lock_unlock(v68);
    LOBYTE(v80) = 1;
    AsyncStreamProvider.yield(value:transaction:)(&v80, 0LL);
    return swift_release();
  }

  return result;
}

uint64_t sub_100085A78()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = sub_100004AEC(&qword_10099E758);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10008696C, v1, v2, (char *)&type metadata for () + 8, v3);
  if (v24)
  {
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    uint64_t v4 = type metadata accessor for ObservationDatabase(0LL);
    uint64_t v5 = sub_100007864(&qword_10099E8A0, type metadata accessor for ObservationDatabase, (uint64_t)&unk_10081A8A8);
    v6._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v4, v5);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 8250LL;
    v7._object = (void *)0xE200000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v4, v5);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0x206574694C515320LL;
    v9._object = (void *)0xE900000000000076LL;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = 0x322E33342E33LL;
    v10._object = (void *)0xE600000000000000LL;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = 32LL;
    v11._object = (void *)0xE100000000000000LL;
    String.append(_:)(v11);
    v13._uint64_t countAndFlagsBits = Connection.description.getter(v12);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 62LL;
    v14._object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    swift_release();
  }

  else
  {
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease();
    uint64_t v15 = type metadata accessor for ObservationDatabase(0LL);
    uint64_t v16 = sub_100007864(&qword_10099E8A0, type metadata accessor for ObservationDatabase, (uint64_t)&unk_10081A8A8);
    v17._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v15, v16);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 8250LL;
    v18._object = (void *)0xE200000000000000LL;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v15, v16);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 0x206574694C515320LL;
    v20._object = (void *)0xE900000000000076LL;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = 0x322E33342E33LL;
    v21._object = (void *)0xE600000000000000LL;
    String.append(_:)(v21);
    v22._object = (void *)0x8000000100851C70LL;
    v22._uint64_t countAndFlagsBits = 0xD000000000000010LL;
    String.append(_:)(v22);
  }

  return 60LL;
}

uint64_t sub_100085D2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = sub_100004AEC(&qword_10099E758);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100086984, v1, v2, (char *)&type metadata for () + 8, v3);
  if (v24)
  {
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    uint64_t v4 = type metadata accessor for StandaloneBeaconDatabase(0LL);
    uint64_t v5 = sub_100007864(&qword_10099E8A8, type metadata accessor for StandaloneBeaconDatabase, (uint64_t)&unk_1007FE3D0);
    v6._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v4, v5);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 8250LL;
    v7._object = (void *)0xE200000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v4, v5);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0x206574694C515320LL;
    v9._object = (void *)0xE900000000000076LL;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = 0x322E33342E33LL;
    v10._object = (void *)0xE600000000000000LL;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = 32LL;
    v11._object = (void *)0xE100000000000000LL;
    String.append(_:)(v11);
    v13._uint64_t countAndFlagsBits = Connection.description.getter(v12);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 62LL;
    v14._object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    swift_release();
  }

  else
  {
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease();
    uint64_t v15 = type metadata accessor for StandaloneBeaconDatabase(0LL);
    uint64_t v16 = sub_100007864(&qword_10099E8A8, type metadata accessor for StandaloneBeaconDatabase, (uint64_t)&unk_1007FE3D0);
    v17._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v15, v16);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 8250LL;
    v18._object = (void *)0xE200000000000000LL;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v15, v16);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 0x206574694C515320LL;
    v20._object = (void *)0xE900000000000076LL;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = 0x322E33342E33LL;
    v21._object = (void *)0xE600000000000000LL;
    String.append(_:)(v21);
    v22._object = (void *)0x8000000100851C70LL;
    v22._uint64_t countAndFlagsBits = 0xD000000000000010LL;
    String.append(_:)(v22);
  }

  return 60LL;
}

uint64_t sub_100085FE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  Swift::String v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  Swift::String v9 = (char *)&v23 - v8;
  if (*(_BYTE *)(v0 + 57) != 1) {
    goto LABEL_4;
  }
  static SystemInfo.lockState.getter(v7);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v6,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v2);
  uint64_t v10 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v24, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v23, v2, v10);
  uint64_t v12 = v23;
  uint64_t v11 = v24;
  Swift::String v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v13(v9, v2);
  if (v11 == v12)
  {
    unint64_t v14 = sub_100086500();
    uint64_t v15 = swift_allocError(&type metadata for DatabaseError, v14, 0LL, 0LL);
    int v17 = 4;
  }

  else
  {
LABEL_4:
    uint64_t v18 = *(void *)(v1 + 48);
    uint64_t v19 = sub_100004AEC(&qword_10099E758);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10008696C, v1, v18, (char *)&type metadata for () + 8, v19);
    if (v24)
    {
      swift_retain();
      swift_release();
      v20._object = (void *)0x8000000100851C90LL;
      v20._uint64_t countAndFlagsBits = 0xD000000000000010LL;
      Connection.execute(_:)(v20);
      return swift_release();
    }

    unint64_t v22 = sub_100086500();
    uint64_t v15 = swift_allocError(&type metadata for DatabaseError, v22, 0LL, 0LL);
    int v17 = 2;
  }

  *(_DWORD *)uint64_t v16 = v17;
  *(_BYTE *)(v16 + 4) = 1;
  return swift_willThrow(v15);
}

uint64_t sub_100086204()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  Swift::String v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  Swift::String v9 = (char *)&v23 - v8;
  if (*(_BYTE *)(v0 + 49) != 1) {
    goto LABEL_4;
  }
  static SystemInfo.lockState.getter(v7);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v6,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v2);
  uint64_t v10 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v24, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v23, v2, v10);
  uint64_t v12 = v23;
  uint64_t v11 = v24;
  Swift::String v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v13(v9, v2);
  if (v11 == v12)
  {
    unint64_t v14 = sub_100086500();
    uint64_t v15 = swift_allocError(&type metadata for DatabaseError, v14, 0LL, 0LL);
    int v17 = 4;
  }

  else
  {
LABEL_4:
    uint64_t v18 = *(void *)(v1 + 40);
    uint64_t v19 = sub_100004AEC(&qword_10099E758);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100086984, v1, v18, (char *)&type metadata for () + 8, v19);
    if (v24)
    {
      swift_retain();
      swift_release();
      v20._object = (void *)0x8000000100851C90LL;
      v20._uint64_t countAndFlagsBits = 0xD000000000000010LL;
      Connection.execute(_:)(v20);
      return swift_release();
    }

    unint64_t v22 = sub_100086500();
    uint64_t v15 = swift_allocError(&type metadata for DatabaseError, v22, 0LL, 0LL);
    int v17 = 2;
  }

  *(_DWORD *)uint64_t v16 = v17;
  *(_BYTE *)(v16 + 4) = 1;
  return swift_willThrow(v15);
}

uint64_t sub_100086428()
{
  if (qword_10099B8E0 != -1) {
    swift_once(&qword_10099B8E0, sub_100751568);
  }
  uint64_t v0 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2B3E8);
  uint64_t v2 = type metadata accessor for UUID(0LL);
  return Row.subscript.getter(v1, v2, &protocol witness table for UUID);
}

unint64_t sub_1000864BC()
{
  unint64_t result = qword_10099E6F0;
  if (!qword_10099E6F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_10099E6F0);
  }

  return result;
}

unint64_t sub_100086500()
{
  unint64_t result = qword_10099E718;
  if (!qword_10099E718)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DatabaseError, &type metadata for DatabaseError);
    atomic_store(result, (unint64_t *)&qword_10099E718);
  }

  return result;
}

uint64_t sub_100086544(void (*a1)(void), uint64_t (*a2)(char *, char *, char *))
{
  uint64_t v34 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v33 = *(void *)(v34 - 8);
  ((void (*)(void))__chkstk_darwin)();
  Swift::String v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  Swift::String v13 = (char *)&v32 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - v14;
  id v16 = [(id)objc_opt_self(NSFileManager) defaultManager];
  a1(0LL);
  uint64_t v17 = a2(v15, v13, v10);
  URLResourceValues.init()(v17);
  uint64_t v18 = URLResourceValues.isExcludedFromBackup.setter(1LL);
  URL.path.getter(v18);
  uint64_t v20 = v19;
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  LODWORD(v20) = [v16 fileExistsAtPath:v21];

  if (!(_DWORD)v20 || (uint64_t v22 = URL.setResourceValues(_:)(v6), !v2))
  {
    URL.path.getter(v22);
    uint64_t v24 = v23;
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    LODWORD(v24) = [v16 fileExistsAtPath:v25];

    if (!(_DWORD)v24 || (uint64_t v26 = URL.setResourceValues(_:)(v6), !v2))
    {
      URL.path.getter(v26);
      uint64_t v28 = v27;
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v28);
      LODWORD(v28) = [v16 fileExistsAtPath:v29];

      if ((_DWORD)v28) {
        URL.setResourceValues(_:)(v6);
      }
    }
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v34);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v32 + 8);
  v30(v10, v7);
  v30(v13, v7);
  return ((uint64_t (*)(char *, uint64_t))v30)(v15, v7);
}

unint64_t sub_1000867D4()
{
  unint64_t result = qword_10099E728;
  if (!qword_10099E728)
  {
    unint64_t result = swift_getWitnessTable(&unk_100817490, &type metadata for ObservationStoreService.Error);
    atomic_store(result, (unint64_t *)&qword_10099E728);
  }

  return result;
}

unint64_t sub_100086818()
{
  unint64_t result = qword_10099E738;
  if (!qword_10099E738)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_10099E738);
  }

  return result;
}

unint64_t sub_10008685C()
{
  unint64_t result = qword_10099E740;
  if (!qword_10099E740)
  {
    unint64_t result = swift_getWitnessTable(&unk_100810208, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_10099E740);
  }

  return result;
}

unint64_t sub_1000868A0()
{
  unint64_t result = qword_1009AC270;
  if (!qword_1009AC270)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E678, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1009AC270);
  }

  return result;
}

unint64_t sub_1000868E4()
{
  unint64_t result = qword_10099E748;
  if (!qword_10099E748)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008194C4, &type metadata for PrimaryIndex);
    atomic_store(result, (unint64_t *)&qword_10099E748);
  }

  return result;
}

unint64_t sub_100086928()
{
  unint64_t result = qword_10099E750;
  if (!qword_10099E750)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFA04, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_10099E750);
  }

  return result;
}

uint64_t sub_10008696C@<X0>(void *a1@<X8>)
{
  return sub_100751434(v1, a1);
}

uint64_t sub_100086984@<X0>(void *a1@<X8>)
{
  return sub_1003AB4AC(v1, a1);
}

uint64_t sub_10008699C(uint64_t a1, uint64_t a2)
{
  return sub_10001736C(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000869A4(uint64_t a1, uint64_t a2)
{
  return sub_100016F9C(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

unint64_t sub_1000869AC()
{
  unint64_t result = qword_10099E798;
  if (!qword_10099E798)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_10099E798);
  }

  return result;
}

unint64_t sub_1000869F0()
{
  unint64_t result = qword_10099E800;
  if (!qword_10099E800)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_10099E800);
  }

  return result;
}

char *sub_100086A34()
{
  return sub_100080FCC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100086A4C()
{
  return sub_10007E2B8(v0[2], v0[3], v0[4]);
}

unint64_t sub_100086A68()
{
  unint64_t result = qword_10099E820;
  if (!qword_10099E820)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8438, &type metadata for ObservationStore.ObservationStoreError);
    atomic_store(result, (unint64_t *)&qword_10099E820);
  }

  return result;
}

unint64_t sub_100086AAC()
{
  unint64_t result = qword_10099E828;
  if (!qword_10099E828)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E83F8, &type metadata for ObservationStore.Error);
    atomic_store(result, (unint64_t *)&qword_10099E828);
  }

  return result;
}

uint64_t sub_100086AF0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100086B14(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_100086B20()
{
  return sub_10006C304(v0[2], v0[3], v0[4]);
}

uint64_t sub_100086B3C()
{
  return sub_100752708(*(void *)(v0 + 16));
}

uint64_t sub_100086B54()
{
  return sub_100752CBC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100086B6C()
{
  return sub_1003ABB28(*(void *)(v0 + 16));
}

void (*sub_100086B84())(uint64_t, void *)
{
  return sub_1003AC0D8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t storeEnumTagSinglePayload for ObservationStore.Error(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100086BDC + 4 * byte_1007E82D8[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100086BFC + 4 * byte_1007E82DD[v4]))();
  }
}

_BYTE *sub_100086BDC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100086BFC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100086C04(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100086C0C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100086C14(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100086C1C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ObservationStore.Error()
{
  return &type metadata for ObservationStore.Error;
}

uint64_t storeEnumTagSinglePayload for ObservationStore.ObservationStoreError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100086C84 + 4 * byte_1007E82E7[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100086CB8 + 4 * byte_1007E82E2[v4]))();
}

uint64_t sub_100086CB8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100086CC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100086CC8LL);
  }
  return result;
}

uint64_t sub_100086CD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100086CDCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100086CE0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100086CE8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ObservationStore.ObservationStoreError()
{
  return &type metadata for ObservationStore.ObservationStoreError;
}

unint64_t sub_100086D08()
{
  unint64_t result = qword_10099E8B0;
  if (!qword_10099E8B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8368, &type metadata for ObservationStore.ObservationStoreError);
    atomic_store(result, (unint64_t *)&qword_10099E8B0);
  }

  return result;
}

unint64_t sub_100086D50()
{
  unint64_t result = qword_10099E8B8;
  if (!qword_10099E8B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E83D0, &type metadata for ObservationStore.Error);
    atomic_store(result, (unint64_t *)&qword_10099E8B8);
  }

  return result;
}

void *sub_100086D94(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v38 = *a2;
    *a1 = *a2;
    a1 = (void *)(v38 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v38);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_10001736C(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (void *)((char *)a1 + v13);
    id v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (void *)((char *)a1 + v14);
    uint64_t v19 = (void *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[9];
    *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    uint64_t v24 = a3[10];
    uint64_t v25 = a3[11];
    uint64_t v26 = (char *)a1 + v24;
    uint64_t v27 = (char *)a2 + v24;
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    v26[16] = v27[16];
    uint64_t v28 = (char *)a1 + v25;
    NSString v29 = (char *)a2 + v25;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    uint64_t v30 = a3[12];
    uint64_t v31 = a3[13];
    uint64_t v32 = (char *)a1 + v30;
    uint64_t v33 = (char *)a2 + v30;
    *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
    v32[4] = v33[4];
    *((_BYTE *)a1 + v31) = *((_BYTE *)a2 + v31);
    uint64_t v34 = a3[15];
    *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    signed int v35 = (void *)((char *)a1 + v34);
    os_log_type_t v36 = (void *)((char *)a2 + v34);
    uint64_t v37 = v36[1];
    *signed int v35 = *v36;
    v35[1] = v37;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v37);
  }

  return a1;
}

uint64_t sub_100086F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  sub_100016F9C(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100086F80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_10001736C(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)(a1 + v13);
  uint64_t v18 = (void *)(a2 + v13);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  uint64_t v23 = a3[10];
  uint64_t v24 = a3[11];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  uint64_t v29 = a3[12];
  uint64_t v30 = a3[13];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  uint64_t v33 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  uint64_t v34 = (void *)(a1 + v33);
  signed int v35 = (void *)(a2 + v33);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v36);
  return a1;
}

uint64_t sub_1000870C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_10001736C(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_100016F9C(v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  *uint64_t v19 = *v20;
  uint64_t v21 = v20[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(_WORD *)uint64_t v23 = *(_WORD *)v24;
  *(_BYTE *)(v23 + 2) = *(_BYTE *)(v24 + 2);
  *(_BYTE *)(v23 + 3) = *(_BYTE *)(v24 + 3);
  uint64_t v25 = a3[9];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (int *)(a2 + v25);
  int v28 = *v27;
  *(_BYTE *)(v26 + 4) = *((_BYTE *)v27 + 4);
  *(_DWORD *)uint64_t v26 = v28;
  uint64_t v29 = a3[10];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = (__int128 *)(a2 + v29);
  __int128 v32 = *v31;
  *(_BYTE *)(v30 + 16) = *((_BYTE *)v31 + 16);
  *(_OWORD *)uint64_t v30 = v32;
  uint64_t v33 = a3[11];
  uint64_t v34 = a1 + v33;
  signed int v35 = (uint64_t *)(a2 + v33);
  uint64_t v36 = *v35;
  *(_BYTE *)(v34 + 8) = *((_BYTE *)v35 + 8);
  *(void *)uint64_t v34 = v36;
  uint64_t v37 = a3[12];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  LODWORD(v36) = *(_DWORD *)v39;
  *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
  *(_DWORD *)uint64_t v38 = v36;
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  uint64_t v40 = a3[15];
  unint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (void *)(a2 + v40);
  void *v41 = *v42;
  uint64_t v43 = v42[1];
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100087278(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v8) = *(_DWORD *)(a2 + v8);
  uint64_t v9 = a3[9];
  uint64_t v10 = a3[10];
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a1 + v10;
  uint64_t v14 = a2 + v10;
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  uint64_t v15 = a3[11];
  uint64_t v16 = a3[12];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = a1 + v16;
  uint64_t v20 = a2 + v16;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  uint64_t v21 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_100087378(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  uint64_t v23 = a3[10];
  uint64_t v24 = a3[11];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  uint64_t v29 = a3[12];
  uint64_t v30 = a3[13];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  uint64_t v33 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  uint64_t v34 = (void *)(a1 + v33);
  signed int v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000874B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000874C4);
}

uint64_t sub_1000874C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 60) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_100087544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100087550);
}

uint64_t sub_100087550(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 60) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AccessoryMetadata(uint64_t a1)
{
  return sub_10008BED8(a1, qword_10099E918, (uint64_t)&nominal type descriptor for AccessoryMetadata);
}

uint64_t sub_1000875E0(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1007E84E8;
    v4[2] = &unk_1007E8500;
    v4[3] = &unk_1007E8500;
    v4[4] = &unk_1007E8518;
    v4[5] = &unk_1007E8530;
    v4[6] = &unk_1007E8548;
    v4[7] = &unk_1007E8560;
    v4[8] = &unk_1007E8578;
    void v4[9] = &unk_1007E8590;
    v4[10] = &unk_1007E85A8;
    v4[11] = &unk_1007E85C0;
    swift_initStructMetadata(a1, 256LL, 12LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unsigned __int8 *sub_1000876AC@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 4) {
    LOBYTE(v2) = 4;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_1000876C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10008E934();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100087720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10008E934();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10008776C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100087794 + 4 * byte_1007E8480[*v0]))( 1819047270LL,  0xE400000000000000LL);
}

uint64_t sub_100087794()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1000877A8()
{
  return 7827308LL;
}

uint64_t sub_1000877B8()
{
  return 0x6C61636974697263LL;
}

uint64_t sub_1000877DC()
{
  return 0x6E776F6E6B6E75LL;
}

void sub_1000877F4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  int v5 = (int *)type metadata accessor for RawAccessoryMetadata(0LL);
  unint64_t v6 = (uint64_t *)(v1 + v5[5]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v8 = *v6;
    Hasher._combine(_:)(1u);
    sub_10001736C(v8, v7);
    Data.hash(into:)(a1, v8, v7);
    sub_1000182F0(v8, v7);
  }

  uint64_t v9 = (uint64_t *)(v1 + v5[6]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v11 = *v9;
    Hasher._combine(_:)(1u);
    sub_10001736C(v11, v10);
    Data.hash(into:)(a1, v11, v10);
    sub_1000182F0(v11, v10);
  }

  uint64_t v12 = (uint64_t *)(v1 + v5[7]);
  unint64_t v13 = v12[1];
  if (v13 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v14 = *v12;
    Hasher._combine(_:)(1u);
    sub_10001736C(v14, v13);
    Data.hash(into:)(a1, v14, v13);
    sub_1000182F0(v14, v13);
  }

  uint64_t v15 = (uint64_t *)(v1 + v5[8]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v17 = *v15;
    Hasher._combine(_:)(1u);
    sub_10001736C(v17, v16);
    Data.hash(into:)(a1, v17, v16);
    sub_1000182F0(v17, v16);
  }

  uint64_t v18 = (uint64_t *)(v1 + v5[9]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v20 = *v18;
    Hasher._combine(_:)(1u);
    sub_10001736C(v20, v19);
    Data.hash(into:)(a1, v20, v19);
    sub_1000182F0(v20, v19);
  }

  uint64_t v21 = (uint64_t *)(v1 + v5[10]);
  unint64_t v22 = v21[1];
  if (v22 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v23 = *v21;
    Hasher._combine(_:)(1u);
    sub_10001736C(v23, v22);
    Data.hash(into:)(a1, v23, v22);
    sub_1000182F0(v23, v22);
  }

  uint64_t v24 = (uint64_t *)(v1 + v5[11]);
  unint64_t v25 = v24[1];
  if (v25 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v26 = *v24;
    Hasher._combine(_:)(1u);
    sub_10001736C(v26, v25);
    Data.hash(into:)(a1, v26, v25);
    sub_1000182F0(v26, v25);
  }

  uint64_t v27 = (uint64_t *)(v1 + v5[12]);
  unint64_t v28 = v27[1];
  if (v28 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v29 = *v27;
    Hasher._combine(_:)(1u);
    sub_10001736C(v29, v28);
    Data.hash(into:)(a1, v29, v28);
    sub_1000182F0(v29, v28);
  }

  uint64_t v30 = (uint64_t *)(v1 + v5[13]);
  unint64_t v31 = v30[1];
  if (v31 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v32 = *v30;
    Hasher._combine(_:)(1u);
    sub_10001736C(v32, v31);
    Data.hash(into:)(a1, v32, v31);
    sub_1000182F0(v32, v31);
  }

  uint64_t v33 = (uint64_t *)(v1 + v5[14]);
  unint64_t v34 = v33[1];
  if (v34 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v35 = *v33;
    Hasher._combine(_:)(1u);
    sub_10001736C(v35, v34);
    Data.hash(into:)(a1, v35, v34);
    sub_1000182F0(v35, v34);
  }

uint64_t sub_100087C34(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100087C6C + 4 * byte_1007E8485[a1]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

uint64_t sub_100087C6C()
{
  return 0x44746375646F7270LL;
}

unint64_t sub_100087C8C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100087CA8()
{
  return 0x6D614E6C65646F6DLL;
}

uint64_t sub_100087CC4()
{
  return 0x6465767265736572LL;
}

unint64_t sub_100087CDC()
{
  return 0xD000000000000011LL;
}

uint64_t sub_100087D18()
{
  return 0x657261776D726966LL;
}

uint64_t sub_100087D3C()
{
  return 0x5479726574746162LL;
}

uint64_t sub_100087D5C()
{
  return 0x4C79726574746162LL;
}

uint64_t sub_100087D7C()
{
  return 0x6556794D646E6966LL;
}

uint64_t sub_100087DA0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_10099EB48);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10008E978();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RawAccessoryMetadata.CodingKeys,  &type metadata for RawAccessoryMetadata.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v19) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v19, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for RawAccessoryMetadata(0LL);
    __int128 v19 = *(_OWORD *)(v3 + v14[5]);
    char v18 = 1;
    unint64_t v15 = sub_1000170A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    __int128 v19 = *(_OWORD *)(v3 + v14[6]);
    char v18 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    __int128 v19 = *(_OWORD *)(v3 + v14[7]);
    char v18 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    __int128 v19 = *(_OWORD *)(v3 + v14[8]);
    char v18 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    __int128 v19 = *(_OWORD *)(v3 + v14[9]);
    char v18 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    __int128 v19 = *(_OWORD *)(v3 + v14[10]);
    char v18 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    __int128 v19 = *(_OWORD *)(v3 + v14[11]);
    char v18 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    __int128 v19 = *(_OWORD *)(v3 + v14[12]);
    char v18 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    __int128 v19 = *(_OWORD *)(v3 + v14[13]);
    char v18 = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    __int128 v19 = *(_OWORD *)(v3 + v14[14]);
    char v18 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100088150@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v32 = sub_100004AEC(&qword_10099EB38);
  uint64_t v8 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = (int *)type metadata accessor for RawAccessoryMetadata(0LL);
  __chkstk_darwin(v36);
  uint64_t v35 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v33 = a1;
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_10008E978();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RawAccessoryMetadata.CodingKeys,  &type metadata for RawAccessoryMetadata.CodingKeys,  v14,  v12,  v13);
  if (v2)
  {
    uint64_t v34 = v2;
    char v18 = v35;
    __int128 v19 = v36;
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
    int v38 = 0;
    int v21 = 0;
    LODWORD(v32) = 0;
  }

  else
  {
    uint64_t v29 = a2;
    uint64_t v30 = v8;
    LOBYTE(v37) = 0;
    uint64_t v15 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v16 = v32;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v5, &v37, v32, v5, v15);
    uint64_t v17 = v5;
    uint64_t v23 = v35;
    (*(void (**)(char *, void *, uint64_t))(v31 + 32))(v35, v7, v5);
    char v39 = 1;
    unint64_t v24 = sub_100016FE0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v39,  v16,  &type metadata for Data,  v24);
    unint64_t v25 = v36;
    *(_OWORD *)&v23[v36[5]] = v37;
    char v39 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v39,  v16,  &type metadata for Data,  v24);
    *(_OWORD *)&v23[v25[6]] = v37;
    char v39 = 3;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v39,  v16,  &type metadata for Data,  v24);
    *(_OWORD *)&v23[v25[7]] = v37;
    char v39 = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v39,  v16,  &type metadata for Data,  v24);
    *(_OWORD *)&v23[v25[8]] = v37;
    char v39 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v39,  v16,  &type metadata for Data,  v24);
    *(_OWORD *)&v23[v25[9]] = v37;
    char v39 = 6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v39,  v16,  &type metadata for Data,  v24);
    *(_OWORD *)&v23[v25[10]] = v37;
    char v39 = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v39,  v16,  &type metadata for Data,  v24);
    int v38 = 1;
    uint64_t v26 = v17;
    *(_OWORD *)&v23[v25[11]] = v37;
    char v39 = 8;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v39,  v16,  &type metadata for Data,  v24);
    *(_OWORD *)&v23[v25[12]] = v37;
    char v39 = 9;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v39,  v16,  &type metadata for Data,  v24);
    uint64_t v34 = 0LL;
    *(_OWORD *)&v35[v36[13]] = v37;
    char v39 = 10;
    uint64_t v27 = v34;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v39,  v32,  &type metadata for Data,  v24);
    uint64_t v34 = v27;
    if (!v27)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v32);
      uint64_t v28 = (uint64_t)v35;
      *(_OWORD *)&v35[v36[14]] = v37;
      sub_10001DC4C(v28, v29, type metadata accessor for RawAccessoryMetadata);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
      return sub_100018C68(v28, type metadata accessor for RawAccessoryMetadata);
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v32);
    int v21 = 1;
    LODWORD(v32) = 1;
    char v18 = v35;
    __int128 v19 = v36;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v26);
    sub_1000182F0(*(void *)&v18[v19[5]], *(void *)&v18[v19[5] + 8]);
    sub_1000182F0(*(void *)&v18[v19[6]], *(void *)&v18[v19[6] + 8]);
    sub_1000182F0(*(void *)&v18[v19[7]], *(void *)&v18[v19[7] + 8]);
    sub_1000182F0(*(void *)&v18[v19[8]], *(void *)&v18[v19[8] + 8]);
    sub_1000182F0(*(void *)&v18[v19[9]], *(void *)&v18[v19[9] + 8]);
    char v22 = v38;
    uint64_t result = sub_1000182F0(*(void *)&v18[v19[10]], *(void *)&v18[v19[10] + 8]);
    if ((v22 & 1) != 0)
    {
      sub_1000182F0(*(void *)&v18[v19[11]], *(void *)&v18[v19[11] + 8]);
      goto LABEL_6;
    }
  }

  if (!v21)
  {
    if (!(_DWORD)v32) {
      return result;
    }
    return sub_1000182F0(*(void *)&v18[v19[13]], *(void *)&v18[v19[13] + 8]);
  }

LABEL_6:
  uint64_t result = sub_1000182F0(*(void *)&v18[v19[12]], *(void *)&v18[v19[12] + 8]);
  if ((v32 & 1) == 0) {
    return result;
  }
  return sub_1000182F0(*(void *)&v18[v19[13]], *(void *)&v18[v19[13] + 8]);
}

        uint64_t v17 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
      }

      goto LABEL_31;
    }

    while (1)
    {
      uint64_t v16 = v21 + 1;
      if (__OFADD__(v21, 1LL)) {
        break;
      }
      if (v16 >= v34) {
        goto LABEL_30;
      }
      uint64_t v20 = *(void *)(v33 + 8 * v16);
      ++v21;
      if (v20) {
        goto LABEL_22;
      }
    }
  }

  __break(1u);
}

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
          uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v59);
LABEL_7:
          uint64_t v5 = v51 + 1;
          if (v51 + 1 == a2) {
            return result;
          }
          goto LABEL_8;
        }
      }

      uint64_t v31 = 0LL;
LABEL_26:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v59);
      if (v21 >= v31) {
        goto LABEL_7;
      }
      uint64_t v32 = *a4;
      if (!*a4)
      {
LABEL_50:
        __break(1u);
        return result;
      }

      uint64_t v33 = v32 + 40 * v5;
      uint64_t v34 = v32 + 40 * (v5 - 1);
      sub_100012EC0((__int128 *)v33, (uint64_t)&v59);
      uint64_t v35 = *(_OWORD *)(v34 + 16);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
      *(_OWORD *)(v33 + 16) = v35;
      *(void *)(v33 + 32) = *(void *)(v34 + 32);
      uint64_t result = sub_100012EC0(&v59, v34);
      if (--v5 == v52) {
        goto LABEL_7;
      }
    }
  }

  return result;
}

    sub_100018BE4(v6, v7);
    sub_100018BE4(v9, v10);
    sub_1000182F0(v6, v7);
    sub_1000182F0(v9, v10);
    return 0LL;
  }

  if (v10 >> 60 != 15) {
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v13 = v4[6];
  unint64_t v14 = *(void *)(a1 + v13);
  uint64_t v15 = *(void *)(a1 + v13 + 8);
  uint64_t v16 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v16;
  char v18 = v16[1];
  sub_10001736C(v14, v15);
  sub_10001736C(v17, v18);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v14, v15);
  uint64_t v20 = v19;
  sub_100016F9C(v17, v18);
  sub_100016F9C(v14, v15);
  if ((v20 & 1) != 0)
  {
    int v21 = v4[7];
    char v22 = *(void *)(a1 + v21);
    uint64_t v23 = *(void *)(a1 + v21 + 8);
    unint64_t v24 = (uint64_t *)(a2 + v21);
    unint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    sub_10001736C(v22, v23);
    sub_10001736C(v25, v26);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v22, v23);
    uint64_t v28 = v27;
    sub_100016F9C(v25, v26);
    sub_100016F9C(v22, v23);
    if ((v28 & 1) != 0)
    {
      uint64_t v29 = v4[8];
      uint64_t v30 = *(void *)(a1 + v29);
      uint64_t v31 = *(void *)(a1 + v29 + 8);
      uint64_t v32 = (uint64_t *)(a2 + v29);
      uint64_t v33 = *v32;
      uint64_t v34 = v32[1];
      sub_10001736C(v30, v31);
      sub_10001736C(v33, v34);
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v30, v31);
      uint64_t v36 = v35;
      sub_100016F9C(v33, v34);
      sub_100016F9C(v30, v31);
      if ((v36 & 1) != 0)
      {
        __int128 v37 = v4[9];
        int v38 = a1 + v37;
        char v39 = *(void *)(a1 + v37);
        uint64_t v40 = *(void *)(v38 + 8);
        unint64_t v41 = (uint64_t *)(a2 + v37);
        uint64_t v42 = *v41;
        uint64_t v43 = v41[1];
        sub_10001736C(v39, v40);
        sub_10001736C(v42, v43);
        _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v39, v40);
        os_log_type_t v45 = v44;
        sub_100016F9C(v42, v43);
        sub_100016F9C(v39, v40);
        return v45 & 1;
      }
    }
  }

  return 0LL;
}

      sub_100018C68(*(void *)(v1 + 248), type metadata accessor for SharedBeaconRecord);
LABEL_7:
      if (v47 == ++v3) {
        goto LABEL_21;
      }
    }

    sub_100018C68(v10, type metadata accessor for SharedBeaconRecord);
    sub_10001DC4C(v11, v12, type metadata accessor for SharedBeaconRecord);
LABEL_4:
    uint64_t v5 = *(void *)(v1 + 232);
    uint64_t v4 = v49;
LABEL_5:
    sub_100018C68(v5, type metadata accessor for SharedBeaconRecord);
    goto LABEL_6;
  }

  uint64_t v43 = _swiftEmptyArrayStorage;
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v0 = (uint64_t)sub_1004E7594((uint64_t)v43);
  swift_release();
  if (qword_10099BA30 != -1) {
LABEL_29:
  }
    swift_once(&qword_10099BA30, sub_100795FD8);
  char v22 = *(void *)(v1 + 360);
  uint64_t v23 = type metadata accessor for Logger(0LL);
  *(void *)(v1 + 400) = sub_10000A720(v23, (uint64_t)qword_100A2B7D8);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v0);
  unint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  uint64_t v26 = static os_log_type_t.default.getter(v25);
  uint64_t v27 = os_log_type_enabled(v25, v26);
  uint64_t v28 = *(void *)(v1 + 360);
  if (v27)
  {
    uint64_t v29 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v29 = 134218240;
    *(void *)(v1 + 144) = *(void *)(v28 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2048;
    *(void *)(v1 + 152) = *(void *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Finding unpublished payloads for %ld owned beacons and %ld shared beacons.",  (uint8_t *)v29,  0x16u);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  int v51 = *(void *)(v1 + 360);
  sub_100184098(v0);
  *(void *)(v1 + 408) = v51;
  uint64_t v30 = *(void *)(v51 + 16);
  *(void *)(v1 + 416) = v30;
  if (v30)
  {
    *(void *)(v1 + 424) = 0LL;
    uint64_t v31 = *(void *)(v1 + 192);
    sub_100013044(v51 + 32, v1 + 56);
    sub_1003AEF0C(v31);
    uint64_t v32 = (void *)swift_task_alloc(dword_1009ABA44);
    *(void *)(v1 + 432) = v32;
    *uint64_t v32 = v1;
    v32[1] = sub_1003B2914;
    return sub_1003B2F74(v1 + 56, *(void *)(v1 + 192));
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v1 + 304);
    uint64_t v35 = *(void *)(v1 + 312);
    __int128 v37 = *(void *)(v1 + 272);
    uint64_t v36 = *(void *)(v1 + 280);
    int v38 = *(void *)(v1 + 264);
    uint64_t v40 = *(void *)(v1 + 240);
    char v39 = *(void *)(v1 + 248);
    unint64_t v41 = *(void *)(v1 + 232);
    uint64_t v42 = *(void *)(v1 + 224);
    uint64_t v44 = *(void *)(v1 + 216);
    uint64_t v46 = *(void *)(v1 + 192);
    unint64_t v48 = *(void *)(v1 + 184);
    uint64_t v50 = sub_1004E8378(*(void *)(v1 + 112));
    swift_bridgeObjectRelease();
    swift_task_dealloc(v35);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void *))(v1 + 8))(v50);
  }

      sub_100018C68(*(void *)(v0 + 216), type metadata accessor for SharedBeaconRecord);
LABEL_7:
      if (v53 == ++v2) {
        goto LABEL_21;
      }
    }

    sub_100018C68(v10, type metadata accessor for SharedBeaconRecord);
    sub_10001DC4C(v11, v12, type metadata accessor for SharedBeaconRecord);
LABEL_4:
    uint64_t v4 = *(void *)(v0 + 200);
    uint64_t v3 = v54;
LABEL_5:
    sub_100018C68(v4, type metadata accessor for SharedBeaconRecord);
    goto LABEL_6;
  }

  int v51 = _swiftEmptyArrayStorage;
LABEL_21:
  swift_bridgeObjectRelease();
  char v22 = sub_1004E7594((uint64_t)v51);
  *(void *)(v0 + 264) = v22;
  swift_release();
  uint64_t v23 = v22[2];
  *(void *)(v0 + 272) = v23;
  if (!v23)
  {
    if (qword_10099BA30 != -1) {
      goto LABEL_29;
    }
    goto LABEL_24;
  }

  *(void *)(v0 + 280) = 0LL;
  *(void *)(v0 + 288) = 0LL;
  unint64_t v24 = *(void *)(v0 + 128);
  unint64_t v25 = *(void *)(v0 + 112);
  uint64_t v26 = *(void *)(v0 + 264) + 32LL;
  swift_bridgeObjectRetain(v22);
  sub_100013044(v26, v0 + 16);
  uint64_t v27 = *(void *)(v0 + 40);
  uint64_t v28 = *(void *)(v0 + 48);
  sub_100012ED8((void *)(v0 + 16), v27);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v28 + 8) + 8LL) + 32LL))(v27);
  uint64_t v29 = type metadata accessor for Date(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v24, v25, v29);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v24, 0LL, 1LL, v29);
  uint64_t v31 = (void *)swift_task_alloc(dword_1009B6394);
  *(void *)(v0 + 296) = v31;
  *uint64_t v31 = v0;
  v31[1] = sub_1003B4750;
  return sub_1005EB9CC(*(void *)(v0 + 152));
}

  swift_release(v12);
  swift_bridgeObjectRelease();
  swift_release(v44);
  uint64_t v8 = v45;
  if (v45 != v42) {
    goto LABEL_7;
  }
  __int128 v37 = v41;
LABEL_61:
  swift_bridgeObjectRelease_n(v37, 2LL);
LABEL_62:
  sub_1004C1760();
}

    swift_task_dealloc(*(void *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if ((sub_10055FCD8() & 1) == 0)
  {
    __int128 v19 = type metadata accessor for XPCActivity(0LL);
    uint64_t v20 = sub_100007864( &qword_10099CAD0,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
    uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(v19, v20);
    uint64_t v17 = v21;
    char v18 = sub_1004F4C20;
    return swift_task_switch(v18, v15, v17);
  }

  if (qword_10099B530 != -1) {
    swift_once(&qword_10099B530, sub_1004F3B28);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_100A2ACB0);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Calling postMetrics()", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  uint64_t v12 = (void *)swift_task_alloc(dword_1009B2BDC);
  *(void *)(v0 + 64) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1004F4B90;
  return sub_1004F4C5C();
}

          uint64_t v13 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }

      uint64_t v17 = v15 + 4;
      if (v17 < v33)
      {
        uint64_t v16 = *(void *)(v4 + 8 * v17);
        if (v16)
        {
          uint64_t v8 = v17;
          goto LABEL_22;
        }

        while (1)
        {
          uint64_t v8 = v17 + 1;
          if (__OFADD__(v17, 1LL)) {
            goto LABEL_35;
          }
          if (v8 >= v33) {
            break;
          }
          uint64_t v16 = *(void *)(v4 + 8 * v8);
          ++v17;
          if (v16) {
            goto LABEL_22;
          }
        }
      }
    }

unsigned __int8 *sub_1000888C0@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_1000888D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10008E8F0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100088934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10008E8F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100088980()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000889B0 + 4 * byte_1007E8490[*v0]))( 0x64657265776F70LL,  0xE700000000000000LL);
}

uint64_t sub_1000889B0()
{
  return 0x61686365526E6F6ELL;
}

uint64_t sub_1000889D4()
{
  return 0x6167726168636572LL;
}

uint64_t sub_1000889F4()
{
  return 0x6E776F6E6B6E75LL;
}

uint64_t sub_100088A08()
{
  return sub_100087C34(*v0);
}

uint64_t sub_100088A10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10008C554(a1, a2);
  *a3 = result;
  return result;
}

void sub_100088A34(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_100088A40(uint64_t a1)
{
  unint64_t v2 = sub_10008E978();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100088A68(uint64_t a1)
{
  unint64_t v2 = sub_10008E978();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100088A90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100088150(a1, a2);
}

uint64_t sub_100088AA4(void *a1)
{
  return sub_100087DA0(a1);
}

Swift::Int sub_100088AB8(uint64_t a1, uint64_t a2)
{
  return sub_100089AA0(a1, a2, (void (*)(void *))sub_1000877F4);
}

Swift::Int sub_100088AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100089AF0(a1, a2, a3, (void (*)(void *))sub_1000877F4);
}

uint64_t sub_100088AD8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
  unint64_t v6 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v7 = (uint64_t *)(v1 + v6[5]);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_10001736C(*v7, v9);
  Data.hash(into:)(a1, v8, v9);
  sub_100016F9C(v8, v9);
  uint64_t v10 = (uint64_t *)(v2 + v6[6]);
  uint64_t v11 = v10[1];
  if (v11)
  {
    uint64_t v12 = *v10;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v11);
    String.hash(into:)(a1, v12, v11);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v13 = (uint64_t *)(v2 + v6[7]);
  uint64_t v14 = v13[1];
  if (v14)
  {
    uint64_t v15 = *v13;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v14);
    String.hash(into:)(a1, v15, v14);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v16 = v2 + v6[8];
  Swift::UInt8 v17 = *(_BYTE *)(v16 + 2);
  Swift::UInt8 v18 = *(_BYTE *)(v16 + 3);
  Hasher._combine(_:)(*(_WORD *)v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  __int128 v19 = (int *)(v2 + v6[9]);
  if ((v19[1] & 1) != 0)
  {
    LOBYTE(v20) = 0;
  }

  else
  {
    unsigned int v21 = *v19;
    unsigned int v20 = HIBYTE(*v19);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    Hasher._combine(_:)(BYTE2(v21));
  }

  Hasher._combine(_:)(v20);
  uint64_t v22 = v2 + v6[10];
  if (*(_BYTE *)(v22 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt32 v24 = *(_DWORD *)(v22 + 8);
    Swift::UInt32 v23 = *(_DWORD *)(v22 + 12);
    Swift::UInt32 v26 = *(_DWORD *)v22;
    Swift::UInt32 v25 = *(_DWORD *)(v22 + 4);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v26);
    Hasher._combine(_:)(v25);
    Hasher._combine(_:)(v24);
    Hasher._combine(_:)(v23);
  }

  uint64_t v27 = v2 + v6[11];
  if (*(_BYTE *)(v27 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v28 = *(void *)v27;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }

  uint64_t v29 = v2 + v6[12];
  if (*(_BYTE *)(v29 + 4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt32 v30 = *(_DWORD *)v29;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }

  int v31 = *(unsigned __int8 *)(v2 + v6[13]);
  if (v31 == 4) {
    LOBYTE(v31) = 0;
  }
  else {
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v31);
  int v32 = *(unsigned __int8 *)(v2 + v6[14]);
  if (v32 == 5) {
    LOBYTE(v32) = 0;
  }
  else {
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v32);
  uint64_t v33 = (uint64_t *)(v2 + v6[15]);
  uint64_t v34 = *v33;
  uint64_t v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  String.hash(into:)(a1, v34, v35);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100088DF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100088E30 + 4 * byte_1007E8494[a1]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

uint64_t sub_100088E30()
{
  return 0x44746375646F7270LL;
}

unint64_t sub_100088E50()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100088E6C()
{
  return 0x6D614E6C65646F6DLL;
}

uint64_t sub_100088E88()
{
  return 0x657261776D726966LL;
}

unint64_t sub_100088EC0()
{
  return 0xD000000000000025LL;
}

uint64_t sub_100088F14()
{
  return 0x5479726574746162LL;
}

uint64_t sub_100088F34()
{
  return 0x5379726574746162LL;
}

uint64_t sub_100088F54()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_100088F6C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_10099E9F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10008B820();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryMetadata.CodingKeys,  &type metadata for AccessoryMetadata.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v40) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v40, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for AccessoryMetadata(0LL);
    __int128 v40 = *(_OWORD *)(v3 + v14[5]);
    char v42 = 1;
    unint64_t v15 = sub_10008B9FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v40, &v42, v5, &type metadata for AccessoryProductData, v15);
    uint64_t v16 = (uint64_t *)(v3 + v14[6]);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    LOBYTE(v40) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v40, v5);
    __int128 v19 = (uint64_t *)(v3 + v14[7]);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    LOBYTE(v40) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v40, v5);
    LODWORD(v40) = *(_DWORD *)(v3 + v14[8]);
    char v42 = 4;
    unint64_t v22 = sub_10008BA40();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v40, &v42, v5, &type metadata for VersionNumber, v22);
    Swift::UInt32 v23 = (int *)(v3 + v14[9]);
    int v24 = *v23;
    LOBYTE(v23) = *((_BYTE *)v23 + 4);
    LODWORD(v40) = v24;
    BYTE4(v40) = (_BYTE)v23;
    char v42 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v40, &v42, v5, &type metadata for VersionNumber, v22);
    Swift::UInt32 v25 = (__int128 *)(v3 + v14[10]);
    char v26 = *((_BYTE *)v25 + 16);
    __int128 v40 = *v25;
    char v41 = v26;
    char v42 = 6;
    unint64_t v27 = sub_10008BA84();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v40,  &v42,  v5,  &type metadata for LocalFindableAccessoryFirmwareVersionNumber,  v27);
    Swift::UInt64 v28 = (uint64_t *)(v3 + v14[11]);
    uint64_t v29 = *v28;
    uint64_t v30 = *((unsigned __int8 *)v28 + 8);
    LOBYTE(v40) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v40, v5);
    int v31 = (int *)(v3 + v14[12]);
    int v32 = *v31;
    LOBYTE(v31) = *((_BYTE *)v31 + 4);
    LODWORD(v40) = v32;
    BYTE4(v40) = (_BYTE)v31;
    char v42 = 8;
    unint64_t v33 = sub_10008BAC8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v40, &v42, v5, &type metadata for AccessoryCapabilities, v33);
    LOBYTE(v40) = *(_BYTE *)(v3 + v14[13]);
    char v42 = 9;
    unint64_t v34 = sub_10008BB0C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v40, &v42, v5, &type metadata for AccessoryBatteryType, v34);
    LOBYTE(v40) = *(_BYTE *)(v3 + v14[14]);
    char v42 = 10;
    unint64_t v35 = sub_10008BB50();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v40, &v42, v5, &type metadata for AccessoryBatteryLevel, v35);
    uint64_t v36 = (uint64_t *)(v3 + v14[15]);
    uint64_t v37 = *v36;
    uint64_t v38 = v36[1];
    LOBYTE(v40) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v37, v38, &v40, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100089358@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v53 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v52 = sub_100004AEC(&qword_10099E9B8);
  uint64_t v7 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = &v13[*(int *)(v11 + 40)];
  *(void *)uint64_t v14 = 0LL;
  *((void *)v14 + 1) = 0LL;
  v14[16] = 1;
  uint64_t v57 = (int *)v11;
  unint64_t v58 = v13;
  unint64_t v15 = &v13[*(int *)(v11 + 60)];
  *(void *)unint64_t v15 = 0LL;
  *((void *)v15 + 1) = 0xE000000000000000LL;
  os_log_type_t v55 = a1;
  uint64_t v56 = v15;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_100012ED8(a1, v16);
  unint64_t v18 = sub_10008B820();
  os_log_type_t v54 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryMetadata.CodingKeys,  &type metadata for AccessoryMetadata.CodingKeys,  v18,  v16,  v17);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v50 = v7;
    LOBYTE(v59) = 0;
    uint64_t v19 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v20 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v4, &v59, v52, v4, v19);
    uint64_t v22 = (uint64_t)v58;
    (*(void (**)(char *, void *, uint64_t))(v53 + 32))(v58, v6, v4);
    char v61 = 1;
    unint64_t v23 = sub_10008B864();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v59,  &type metadata for AccessoryProductData,  &v61,  v20,  &type metadata for AccessoryProductData,  v23);
    int v24 = v57;
    *(_OWORD *)(v22 + v57[5]) = v59;
    LOBYTE(v59) = 2;
    uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v59, v20);
    char v26 = (uint64_t *)(v22 + v24[6]);
    *char v26 = v25;
    v26[1] = v27;
    LOBYTE(v59) = 3;
    uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v59, v20);
    uint64_t v29 = (uint64_t *)(v22 + v24[7]);
    *uint64_t v29 = v28;
    v29[1] = v30;
    char v61 = 4;
    unint64_t v31 = sub_10008B8A8();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v59,  &type metadata for VersionNumber,  &v61,  v20,  &type metadata for VersionNumber,  v31);
    *(_DWORD *)(v22 + v24[8]) = v59;
    char v61 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for VersionNumber,  &v61,  v20,  &type metadata for VersionNumber,  v31);
    char v32 = BYTE4(v59);
    uint64_t v33 = v22 + v24[9];
    *(_DWORD *)uint64_t v33 = v59;
    *(_BYTE *)(v33 + 4) = v32;
    char v61 = 6;
    unint64_t v34 = sub_10008B8EC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for LocalFindableAccessoryFirmwareVersionNumber,  &v61,  v20,  &type metadata for LocalFindableAccessoryFirmwareVersionNumber,  v34);
    char v35 = v60;
    *(_OWORD *)uint64_t v14 = v59;
    v14[16] = v35;
    LOBYTE(v59) = 7;
    uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v59, v20);
    uint64_t v37 = v22 + v24[11];
    *(void *)uint64_t v37 = v36;
    *(_BYTE *)(v37 + 8) = v38 & 1;
    char v61 = 8;
    unint64_t v39 = sub_10008B930();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for AccessoryCapabilities,  &v61,  v20,  &type metadata for AccessoryCapabilities,  v39);
    char v40 = BYTE4(v59);
    uint64_t v41 = v22 + v24[12];
    *(_DWORD *)uint64_t v41 = v59;
    *(_BYTE *)(v41 + 4) = v40;
    char v61 = 9;
    unint64_t v42 = sub_10008B974();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for AccessoryBatteryType,  &v61,  v20,  &type metadata for AccessoryBatteryType,  v42);
    v58[v57[13]] = v59;
    char v61 = 10;
    unint64_t v43 = sub_10008B9B8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for AccessoryBatteryLevel,  &v61,  v52,  &type metadata for AccessoryBatteryLevel,  v43);
    v58[v57[14]] = v59;
    LOBYTE(v59) = 11;
    uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)(&v59, v52);
    uint64_t v46 = v45;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v52);
    uint64_t v47 = (uint64_t *)v56;
    swift_bridgeObjectRelease();
    *uint64_t v47 = v44;
    v47[1] = v46;
    uint64_t v48 = (uint64_t)v58;
    sub_10001DC4C((uint64_t)v58, v51, type metadata accessor for AccessoryMetadata);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    return sub_100018C68(v48, type metadata accessor for AccessoryMetadata);
  }

uint64_t sub_1000899E4()
{
  return sub_100088DF8(*v0);
}

uint64_t sub_1000899EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10008CA58(a1, a2);
  *a3 = result;
  return result;
}

void sub_100089A10(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_100089A1C(uint64_t a1)
{
  unint64_t v2 = sub_10008B820();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100089A44(uint64_t a1)
{
  unint64_t v2 = sub_10008B820();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100089A6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100089358(a1, a2);
}

uint64_t sub_100089A80(void *a1)
{
  return sub_100088F6C(a1);
}

Swift::Int sub_100089A94(uint64_t a1, uint64_t a2)
{
  return sub_100089AA0(a1, a2, (void (*)(void *))sub_100088AD8);
}

Swift::Int sub_100089AA0(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  return Hasher._finalize()();
}

Swift::Int sub_100089AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100089AF0(a1, a2, a3, (void (*)(void *))sub_100088AD8);
}

Swift::Int sub_100089AF0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  return Hasher._finalize()();
}

uint64_t sub_100089B30()
{
  return sub_100007864(&qword_10099E978, type metadata accessor for AccessoryMetadata, (uint64_t)&unk_1007E85D8);
}

uint64_t sub_100089B5C()
{
  v46[0] = 0LL;
  v46[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(214LL);
  v1._uint64_t countAndFlagsBits = 0x5B203A64697BLL;
  v1._object = (void *)0xE600000000000000LL;
  String.append(_:)(v1);
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x8000000100851CB0LL;
  v5._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v5);
  uint64_t v6 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  Swift::String v45 = *(Swift::String *)(v0 + v6[5]);
  unint64_t v7 = sub_10008A064();
  v8._uint64_t countAndFlagsBits = RawRepresentable<>.hexString.getter(&type metadata for AccessoryProductData, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  v9._object = (void *)0x8000000100851CD0LL;
  String.append(_:)(v9);
  Swift::String v45 = *(Swift::String *)(v0 + v6[6]);
  uint64_t v10 = sub_100004AEC(&qword_1009A34B0);
  _print_unlocked<A, B>(_:_:)( &v45,  v46,  v10,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v11._uint64_t countAndFlagsBits = 0x4E6C65646F6D205DLL;
  v11._object = (void *)0xEE005B203A656D61LL;
  String.append(_:)(v11);
  Swift::String v45 = *(Swift::String *)(v0 + v6[7]);
  _print_unlocked<A, B>(_:_:)( &v45,  v46,  v10,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v12._object = (void *)0x8000000100851CF0LL;
  v12._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = sub_100451D18();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x8000000100851D10LL;
  v14._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v14);
  unint64_t v15 = (int *)(v0 + v6[9]);
  int v16 = *v15;
  LOBYTE(v15) = *((_BYTE *)v15 + 4);
  LODWORD(v45._countAndFlagsBits) = v16;
  BYTE4(v45._countAndFlagsBits) = (_BYTE)v15;
  uint64_t v17 = sub_100004AEC(&qword_10099E988);
  _print_unlocked<A, B>(_:_:)( &v45,  v46,  v17,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v18._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  v18._object = (void *)0x8000000100851D30LL;
  String.append(_:)(v18);
  uint64_t v19 = v0 + v6[11];
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = *(_BYTE *)(v19 + 8);
  v45._uint64_t countAndFlagsBits = v20;
  LOBYTE(v45._object) = v19;
  uint64_t v21 = sub_100004AEC(&qword_10099E990);
  _print_unlocked<A, B>(_:_:)( &v45,  v46,  v21,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v22._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v22._object = (void *)0x8000000100851D50LL;
  String.append(_:)(v22);
  unint64_t v23 = (int *)(v0 + v6[12]);
  int v24 = *v23;
  LOBYTE(v23) = *((_BYTE *)v23 + 4);
  LODWORD(v45._countAndFlagsBits) = v24;
  BYTE4(v45._countAndFlagsBits) = (_BYTE)v23;
  uint64_t v25 = sub_100004AEC(&qword_10099E998);
  _print_unlocked<A, B>(_:_:)( &v45,  v46,  v25,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v26._object = (void *)0x8000000100851D70LL;
  v26._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v26);
  LOBYTE(v45._countAndFlagsBits) = *(_BYTE *)(v0 + v6[13]);
  uint64_t v27 = sub_100004AEC(&qword_10099E9A0);
  _print_unlocked<A, B>(_:_:)( &v45,  v46,  v27,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v28._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v28._object = (void *)0x8000000100851D90LL;
  String.append(_:)(v28);
  LOBYTE(v45._countAndFlagsBits) = *(_BYTE *)(v0 + v6[14]);
  uint64_t v29 = sub_100004AEC(&qword_10099E9A8);
  _print_unlocked<A, B>(_:_:)( &v45,  v46,  v29,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v30._uint64_t countAndFlagsBits = 0x6F6973726576205DLL;
  v30._object = (void *)0xEC0000005B203A6ELL;
  String.append(_:)(v30);
  unint64_t v31 = (uint64_t *)(v0 + v6[15]);
  uint64_t v32 = *v31;
  uint64_t v33 = (void *)v31[1];
  swift_bridgeObjectRetain(v33);
  v34._uint64_t countAndFlagsBits = v32;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 32093LL;
  v35._object = (void *)0xE200000000000000LL;
  String.append(_:)(v35);
  uint64_t result = v46[0];
  uint64_t v37 = v0 + v6[10];
  if ((*(_BYTE *)(v37 + 16) & 1) == 0)
  {
    unint64_t v39 = *(void *)v37;
    unint64_t v38 = *(void *)(v37 + 8);
    v45._uint64_t countAndFlagsBits = 0LL;
    v45._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(42LL);
    swift_bridgeObjectRelease();
    v45._uint64_t countAndFlagsBits = 0xD000000000000028LL;
    v45._object = (void *)0x8000000100851DB0LL;
    unint64_t v40 = sub_10008B7DC();
    v44._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter( &type metadata for LocalFindableAccessoryFirmwareVersionNumber,  v40);
    v44._object = v41;
    v42._uint64_t countAndFlagsBits = 32LL;
    v42._object = (void *)0xE100000000000000LL;
    String.append(_:)(v42);
    v43._uint64_t countAndFlagsBits = sub_100597798(v39, v38);
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    return v46[0];
  }

  return result;
}

unint64_t sub_10008A064()
{
  unint64_t result = qword_10099E980;
  if (!qword_10099E980)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ECB68, &type metadata for AccessoryProductData);
    atomic_store(result, (unint64_t *)&qword_10099E980);
  }

  return result;
}

id sub_10008A0A8()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone(SPDiscoveredAccessoryMetadata) init];
  uint64_t v3 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v2 setProductData:isa];

  swift_bridgeObjectRetain(*(void *)(v1 + v3[6] + 8));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setManufacturerName:v5];

  swift_bridgeObjectRetain(*(void *)(v1 + v3[7] + 8));
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setModelName:v6];

  unint64_t v7 = (uint64_t *)(v1 + v3[11]);
  if (*((_BYTE *)v7 + 8)) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = *v7;
  }
  [v2 setAccessoryCategory:v8];
  Swift::String v9 = (unsigned int *)(v1 + v3[12]);
  unsigned int v10 = *v9;
  char v11 = *((_BYTE *)v9 + 4);
  if (v11) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = v10;
  }
  [v2 setAccessoryCapabilities:v12];
  sub_100451D18();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setFirmwareVersion:v13];

  uint64_t v14 = v1 + v3[10];
  if ((*(_BYTE *)(v14 + 16) & 1) == 0)
  {
    unint64_t v16 = *(void *)v14;
    unint64_t v15 = *(void *)(v14 + 8);
    unint64_t v17 = sub_10008B7DC();
    uint64_t v27 = CustomStringConvertible.typeDescription.getter( &type metadata for LocalFindableAccessoryFirmwareVersionNumber,  v17);
    uint64_t v28 = v18;
    v19._uint64_t countAndFlagsBits = 32LL;
    v19._object = (void *)0xE100000000000000LL;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = sub_100597798(v16, v15);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
  }

  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setFirmwareVersion:v21];

  if ((*(_BYTE *)(v1 + v3[9] + 4) & 1) == 0) {
    sub_100451D18();
  }
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setProtocolVersion:v22];

  if (*(_BYTE *)(v1 + v3[13]) == 4) {
    uint64_t v23 = 0LL;
  }
  else {
    uint64_t v23 = *(unsigned __int8 *)(v1 + v3[13]);
  }
  objc_msgSend(v2, "setBatteryType:", v23, v27, v28);
  if (*(_BYTE *)(v1 + v3[14]) == 5) {
    uint64_t v24 = 0LL;
  }
  else {
    uint64_t v24 = *(unsigned __int8 *)(v1 + v3[14]);
  }
  [v2 setBatteryState:v24];
  if ((v11 & 1) != 0) {
    unint64_t v25 = 0LL;
  }
  else {
    unint64_t v25 = sub_1006DA6DC(v10);
  }
  [v2 setCapabilities:v25];
  return v2;
}

uint64_t sub_10008A3E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = a2;
  uint64_t v3 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v4 = *((void *)v3 - 1);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v7 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = &v7[*(int *)(v5 + 40)];
  *(void *)uint64_t v8 = 0LL;
  *((void *)v8 + 1) = 0LL;
  v8[16] = 1;
  Swift::String v9 = &v7[*(int *)(v5 + 60)];
  *(void *)Swift::String v9 = 0LL;
  *((void *)v9 + 1) = 0xE000000000000000LL;
  id v10 = [a1 discoveredMetadata];
  id v11 = [v10 productData];
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  sub_1000F6254(v12, v14);
  if (v16 >> 60 == 15)
  {

LABEL_16:
    uint64_t v64 = v72;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v4 + 56))(v64, 1LL, 1LL, v3);
  }

  uint64_t v17 = v15;
  unint64_t v18 = v16;
  uint64_t v69 = v9;
  uint64_t v70 = v4;
  id v71 = a1;
  id v19 = [v10 protocolVersion];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  unint64_t v23 = sub_100452480(v20, v22);
  if ((v23 & 0x100000000LL) != 0)
  {

    sub_1000182F0(v17, v18);
    uint64_t v4 = v70;
    goto LABEL_16;
  }

  unint64_t v66 = v23;
  id v24 = [v71 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

  unint64_t v25 = &v7[v3[5]];
  *(void *)unint64_t v25 = v17;
  *((void *)v25 + 1) = v18;
  unint64_t v67 = v18;
  uint64_t v68 = v17;
  sub_10001736C(v17, v18);
  id v26 = [v10 manufacturerName];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  uint64_t v29 = v28;

  Swift::String v30 = (uint64_t *)&v7[v3[6]];
  *Swift::String v30 = v27;
  v30[1] = v29;
  id v31 = [v10 modelName];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  Swift::String v35 = (uint64_t *)&v7[v3[7]];
  *Swift::String v35 = v32;
  v35[1] = v34;
  id v36 = [v10 firmwareVersion];
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v39 = v38;

  unint64_t v40 = sub_100452480(v37, v39);
  if ((v40 & 0x100000000LL) != 0)
  {
    v65[1] = v35;
    void v65[2] = v30;
    *(_DWORD *)&v7[v3[8]] = 0;
    id v47 = [v10 firmwareVersion];
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v50 = v49;

    Swift::String v42 = sub_100597FE8(v48, v50);
    uint64_t v4 = v70;
    id v44 = v71;
    unint64_t v45 = v67;
    uint64_t v46 = v68;
    if ((v51 & 1) != 0)
    {

      sub_1000182F0(v46, v45);
      uint64_t v63 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v63 - 8) + 8LL))(v7, v63);
      sub_100016F9C(*(void *)v25, *((void *)v25 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }

  else
  {
    int v41 = v40;
    Swift::String v42 = 0LL;
    uint64_t v43 = 0LL;
    *(_DWORD *)&v7[v3[8]] = v41;
    uint64_t v4 = v70;
    id v44 = v71;
    unint64_t v45 = v67;
    uint64_t v46 = v68;
  }

  *(void *)uint64_t v8 = v42;
  *((void *)v8 + 1) = v43;
  v8[16] = 0;
  uint64_t v52 = &v7[v3[9]];
  *(_DWORD *)uint64_t v52 = v66;
  v52[4] = 0;
  id v53 = [v10 accessoryCategory];
  os_log_type_t v54 = &v7[v3[11]];
  *(void *)os_log_type_t v54 = v53;
  v54[8] = 0;
  unsigned int v55 = [v10 accessoryCapabilities];
  uint64_t v56 = &v7[v3[12]];
  *(_DWORD *)uint64_t v56 = v55;
  v56[4] = 0;
  unsigned int v57 = [v10 batteryType];
  if (v57 >= 3) {
    char v58 = 3;
  }
  else {
    char v58 = v57;
  }
  v7[v3[13]] = v58;
  unsigned int v59 = [v10 batteryState];

  sub_1000182F0(v46, v45);
  if (v59 >= 4) {
    char v60 = 4;
  }
  else {
    char v60 = v59;
  }
  v7[v3[14]] = v60;
  uint64_t v61 = v72;
  sub_10001DC4C((uint64_t)v7, v72, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v4 + 56))(v61, 0LL, 1LL, v3);
  return sub_100018C68((uint64_t)v7, type metadata accessor for AccessoryMetadata);
}

uint64_t sub_10008A850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v143 = (char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v7);
  Swift::String v9 = (char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v11 = a2 + v10[10];
  *(void *)uint64_t v11 = 0LL;
  *(void *)(v11 + 8) = 0LL;
  *(_BYTE *)(v11 + 16) = 1;
  uint64_t v12 = (void *)(a2 + v10[15]);
  *uint64_t v12 = 0LL;
  v12[1] = 0xE000000000000000LL;
  uint64_t v144 = v12;
  uint64_t v13 = type metadata accessor for RawAccessoryMetadata(0LL);
  uint64_t v14 = *(int *)(v13 + 20);
  uint64_t v147 = a1;
  uint64_t v15 = (uint64_t *)(a1 + v14);
  unint64_t v16 = v15[1];
  if (v16 >> 60 == 15) {
    goto LABEL_4;
  }
  uint64_t v17 = (int *)v13;
  uint64_t v142 = v5;
  uint64_t v18 = *v15;
  sub_10001736C(*v15, v16);
  sub_10001736C(v18, v16);
  sub_1000F6254(v18, v16);
  if (v20 >> 60 == 15)
  {
    sub_1000182F0(v18, v16);
LABEL_4:
    unint64_t v21 = sub_10008BF0C();
    uint64_t v22 = swift_allocError(&type metadata for AccessoryMetadata.Error, v21, 0LL, 0LL);
    *(_OWORD *)uint64_t v23 = xmmword_1007E8CF0;
    *(_BYTE *)(v23 + 16) = 1;
    swift_willThrow(v22);
LABEL_5:
    uint64_t v24 = v147;
LABEL_29:
    sub_100018C68(v24, type metadata accessor for RawAccessoryMetadata);
    return swift_bridgeObjectRelease();
  }

  uint64_t v138 = v4;
  uint64_t v139 = v19;
  unint64_t v140 = v20;
  uint64_t v141 = v18;
  uint64_t v24 = v147;
  uint64_t v25 = v147 + v17[11];
  unint64_t v26 = *(void *)(v25 + 8);
  if (v26 >> 60 == 15) {
    goto LABEL_13;
  }
  uint64_t v27 = *(void *)v25;
  sub_10001736C(*(void *)v25, *(void *)(v25 + 8));
  sub_10001736C(v27, v26);
  sub_10045288C(v27, v26);
  if ((v28 & 0x100000000LL) != 0)
  {
    sub_1000182F0(v27, v26);
LABEL_13:
    unint64_t v36 = sub_10008BF0C();
    uint64_t v37 = swift_allocError(&type metadata for AccessoryMetadata.Error, v36, 0LL, 0LL);
    *(_OWORD *)uint64_t v38 = xmmword_1007E8CE0;
    *(_BYTE *)(v38 + 16) = 1;
    swift_willThrow(v37);
    uint64_t v39 = v139;
    unint64_t v40 = v140;
LABEL_28:
    sub_1000182F0(v39, v40);
    sub_1000182F0(v141, v16);
    goto LABEL_29;
  }

  unint64_t v136 = v26;
  uint64_t v137 = v27;
  uint64_t v29 = (uint64_t *)(v24 + v17[7]);
  unint64_t v30 = v29[1];
  if (v30 >> 60 == 15)
  {
LABEL_15:
    unint64_t v41 = sub_10008BF0C();
    uint64_t v42 = swift_allocError(&type metadata for AccessoryMetadata.Error, v41, 0LL, 0LL);
    *(_OWORD *)uint64_t v43 = xmmword_1007E8CD0;
    *(_BYTE *)(v43 + 16) = 1;
    swift_willThrow(v42);
    uint64_t v44 = v139;
    unint64_t v45 = v140;
LABEL_27:
    sub_1000182F0(v44, v45);
    unint64_t v40 = v136;
    uint64_t v39 = v137;
    goto LABEL_28;
  }

  unint64_t v133 = v28;
  uint64_t v145 = *v29;
  uint64_t v31 = v145;
  unint64_t v146 = v30;
  sub_10001736C(v145, v30);
  unint64_t v135 = sub_100042F34();
  uint64_t v32 = DataProtocol.nullTerminatedUTF8String.getter(&type metadata for Data);
  if (!v33)
  {
    sub_1000182F0(v31, v30);
    uint64_t v24 = v147;
    goto LABEL_15;
  }

  uint64_t v134 = v31;
  uint64_t v24 = v147;
  uint64_t v34 = (uint64_t *)(v147 + v17[6]);
  unint64_t v35 = v34[1];
  if (v35 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
LABEL_20:
    unint64_t v53 = sub_10008BF0C();
    uint64_t v54 = swift_allocError(&type metadata for AccessoryMetadata.Error, v53, 0LL, 0LL);
    *(void *)uint64_t v55 = 0xD000000000000010LL;
    *(void *)(v55 + 8) = 0x8000000100851DE0LL;
    *(_BYTE *)(v55 + 16) = 1;
    swift_willThrow(v54);
    sub_1000182F0(v139, v140);
    uint64_t v44 = v134;
    unint64_t v45 = v30;
    goto LABEL_27;
  }

  uint64_t v129 = v32;
  uint64_t v131 = v33;
  unint64_t v132 = v30;
  uint64_t v145 = *v34;
  uint64_t v46 = v145;
  unint64_t v146 = v35;
  sub_10001736C(v145, v35);
  uint64_t v47 = DataProtocol.nullTerminatedUTF8String.getter(&type metadata for Data);
  if (!v48)
  {
    swift_bridgeObjectRelease();
    sub_1000182F0(v46, v35);
    uint64_t v24 = v147;
    unint64_t v30 = v132;
    goto LABEL_20;
  }

  uint64_t v130 = v46;
  unint64_t v135 = v35;
  uint64_t v24 = v147;
  uint64_t v49 = (uint64_t *)(v147 + v17[12]);
  unint64_t v50 = v49[1];
  if (v50 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v51 = v134;
    unint64_t v52 = v132;
LABEL_25:
    unint64_t v61 = sub_10008BF0C();
    uint64_t v62 = swift_allocError(&type metadata for AccessoryMetadata.Error, v61, 0LL, 0LL);
    *(_OWORD *)uint64_t v63 = xmmword_1007E8CC0;
    *(_BYTE *)(v63 + 16) = 1;
    swift_willThrow(v62);
    uint64_t v64 = v139;
    unint64_t v65 = v140;
LABEL_26:
    sub_1000182F0(v64, v65);
    sub_1000182F0(v130, v135);
    uint64_t v44 = v51;
    unint64_t v45 = v52;
    goto LABEL_27;
  }

  uint64_t v126 = v47;
  uint64_t v128 = v48;
  uint64_t v56 = *v49;
  sub_10001736C(*v49, v50);
  sub_10001736C(v56, v50);
  sub_10045288C(v56, v50);
  if ((v57 & 0x100000000LL) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000182F0(v56, v50);
    unint64_t v52 = v132;
    uint64_t v51 = v134;
    goto LABEL_25;
  }

  uint64_t v127 = v56;
  unint64_t v125 = v50;
  char v58 = (uint64_t *)(v24 + v17[9]);
  unint64_t v59 = v58[1];
  if (v59 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v60 = v127;
LABEL_32:
    unint64_t v70 = sub_10008BF0C();
    uint64_t v71 = swift_allocError(&type metadata for AccessoryMetadata.Error, v70, 0LL, 0LL);
    *(void *)uint64_t v72 = 0xD000000000000011LL;
    *(void *)(v72 + 8) = 0x8000000100851E00LL;
    *(_BYTE *)(v72 + 16) = 1;
    swift_willThrow(v71);
    sub_1000182F0(v139, v140);
    sub_1000182F0(v60, v125);
    sub_1000182F0(v130, v135);
    uint64_t v44 = v134;
    unint64_t v45 = v132;
    goto LABEL_27;
  }

  uint64_t v124 = v57;
  uint64_t v67 = *v58;
  sub_10001736C(*v58, v59);
  uint64_t v68 = sub_10001736C(v67, v59);
  static Endianness.current.getter(v68);
  sub_10008CFA4();
  FixedWidthInteger.init(data:ofEndianness:)(&v145, v67, v59, v9);
  unint64_t v69 = v59;
  uint64_t v60 = v127;
  if (v146 == 1)
  {
    sub_1000182F0(v67, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v147;
    goto LABEL_32;
  }

  unint64_t v122 = v69;
  uint64_t v123 = v67;
  uint64_t v24 = v147;
  uint64_t v73 = (uint64_t *)(v147 + v17[10]);
  unint64_t v74 = v73[1];
  if (v74 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_37:
    unint64_t v52 = v132;
    uint64_t v51 = v134;
    unint64_t v77 = sub_10008BF0C();
    uint64_t v78 = swift_allocError(&type metadata for AccessoryMetadata.Error, v77, 0LL, 0LL);
    *(void *)uint64_t v79 = 0xD000000000000015LL;
    *(void *)(v79 + 8) = 0x8000000100851E20LL;
    *(_BYTE *)(v79 + 16) = 1;
    swift_willThrow(v78);
    sub_1000182F0(v139, v140);
    sub_1000182F0(v123, v122);
    uint64_t v64 = v60;
    unint64_t v65 = v125;
    goto LABEL_26;
  }

  uint64_t v120 = v145;
  uint64_t v75 = *v73;
  sub_10001736C(*v73, v74);
  uint64_t v76 = sub_10001736C(v75, v74);
  static Endianness.current.getter(v76);
  sub_10008CFE8();
  uint64_t v121 = v75;
  FixedWidthInteger.init(data:ofEndianness:)(&v145, v75, v74, v9);
  if (BYTE4(v145) == 1)
  {
    sub_1000182F0(v121, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v147;
    goto LABEL_37;
  }

  uint64_t v80 = (uint64_t *)(v147 + v17[13]);
  unint64_t v81 = v80[1];
  if (v81 >> 60 == 15) {
    goto LABEL_41;
  }
  int v117 = v145;
  uint64_t v82 = *v80;
  sub_10001736C(*v80, v81);
  uint64_t v83 = sub_10001736C(v82, v81);
  static Endianness.current.getter(v83);
  unint64_t v84 = sub_100041584();
  uint64_t v119 = v82;
  unint64_t v118 = v84;
  FixedWidthInteger.init(data:ofEndianness:)(&v145, v82, v81, v9);
  if (BYTE1(v145) == 1)
  {
    sub_1000182F0(v119, v81);
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v85 = sub_10008BF0C();
    uint64_t v86 = swift_allocError(&type metadata for AccessoryMetadata.Error, v85, 0LL, 0LL);
    *(_OWORD *)uint64_t v87 = xmmword_1007E8CB0;
    *(_BYTE *)(v87 + 16) = 1;
    swift_willThrow(v86);
    uint64_t v88 = v139;
    unint64_t v89 = v140;
LABEL_42:
    sub_1000182F0(v88, v89);
    sub_1000182F0(v121, v74);
    sub_1000182F0(v123, v122);
    sub_1000182F0(v127, v125);
    sub_1000182F0(v130, v135);
    sub_1000182F0(v134, v132);
    sub_1000182F0(v137, v136);
    sub_1000182F0(v141, v16);
    goto LABEL_5;
  }

  int v90 = v145;
  int v116 = v90;
  uint64_t v91 = v147 + v17[14];
  unint64_t v92 = *(void *)(v91 + 8);
  if (v92 >> 60 == 15
    || (uint64_t v93 = *(void *)v91,
        uint64_t v94 = sub_10001736C(*(void *)v91, *(void *)(v91 + 8)),
        static Endianness.current.getter(v94),
        FixedWidthInteger.init(data:ofEndianness:)(&v145, v93, v92, v9),
        BYTE1(v145) == 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v95 = sub_10008BF0C();
    uint64_t v96 = swift_allocError(&type metadata for AccessoryMetadata.Error, v95, 0LL, 0LL);
    *(_OWORD *)uint64_t v97 = xmmword_1007E8CA0;
    *(_BYTE *)(v97 + 16) = 1;
    swift_willThrow(v96);
    sub_1000182F0(v139, v140);
    uint64_t v88 = v119;
    unint64_t v89 = v81;
    goto LABEL_42;
  }

  __int16 v98 = v133;
  uint64_t v144 = (void *)(v133 >> 24);
  unint64_t v118 = v133 >> 16;
  unsigned int v99 = v145;
  sub_1000182F0(v141, v16);
  sub_1000182F0(v137, v136);
  sub_1000182F0(v134, v132);
  sub_1000182F0(v130, v135);
  sub_1000182F0(v127, v125);
  sub_1000182F0(v123, v122);
  sub_1000182F0(v121, v74);
  sub_1000182F0(v119, v81);
  if (v99 >= 4) {
    char v100 = 4;
  }
  else {
    char v100 = v99;
  }
  uint64_t v102 = v142;
  uint64_t v101 = v143;
  uint64_t v103 = v147;
  uint64_t v104 = v138;
  (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v143, v147, v138);
  sub_100018C68(v103, type metadata accessor for RawAccessoryMetadata);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v102 + 32))(a2, v101, v104);
  int v105 = (void *)(a2 + v10[5]);
  unint64_t v106 = v140;
  *int v105 = v139;
  v105[1] = v106;
  uint64_t v107 = a2 + v10[8];
  *(_WORD *)uint64_t v107 = v98;
  *(_BYTE *)(v107 + 2) = v118;
  *(_BYTE *)(v107 + 3) = (_BYTE)v144;
  uint64_t v108 = (uint64_t *)(a2 + v10[7]);
  uint64_t v109 = v131;
  *uint64_t v108 = v129;
  v108[1] = v109;
  uint64_t v110 = (uint64_t *)(a2 + v10[6]);
  uint64_t v111 = v128;
  *uint64_t v110 = v126;
  v110[1] = v111;
  uint64_t v112 = a2 + v10[9];
  *(_DWORD *)uint64_t v112 = v124;
  *(_BYTE *)(v112 + 4) = 0;
  uint64_t v113 = a2 + v10[11];
  *(void *)uint64_t v113 = v120;
  *(_BYTE *)(v113 + 8) = 0;
  uint64_t v114 = a2 + v10[12];
  *(_DWORD *)uint64_t v114 = v117;
  *(_BYTE *)(v114 + 4) = 0;
  *(_BYTE *)(a2 + v10[13]) = v116;
  *(_BYTE *)(a2 + v10[14]) = v100;
  return result;
}

id sub_10008B3A8()
{
  id v1 = [objc_allocWithZone(SPRawAccessoryMetadata) init];
  id v2 = (int *)type metadata accessor for RawAccessoryMetadata(0LL);
  Class isa = 0LL;
  if (*(void *)(v0 + v2[5] + 8) >> 60 != 15LL) {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setProductData:isa];

  if (*(void *)(v0 + v2[6] + 8) >> 60 == 15LL) {
    Class v4 = 0LL;
  }
  else {
    Class v4 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setManufacturerName:v4];

  if (*(void *)(v0 + v2[7] + 8) >> 60 == 15LL) {
    Class v5 = 0LL;
  }
  else {
    Class v5 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setModelName:v5];

  if (*(void *)(v0 + v2[8] + 8) >> 60 == 15LL) {
    Class v6 = 0LL;
  }
  else {
    Class v6 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setReserved:v6];

  if (*(void *)(v0 + v2[9] + 8) >> 60 == 15LL) {
    Class v7 = 0LL;
  }
  else {
    Class v7 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setAccessoryCategory:v7];

  if (*(void *)(v0 + v2[10] + 8) >> 60 == 15LL) {
    Class v8 = 0LL;
  }
  else {
    Class v8 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setAccessoryCapabilities:v8];

  if (*(void *)(v0 + v2[11] + 8) >> 60 == 15LL) {
    Class v9 = 0LL;
  }
  else {
    Class v9 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setFirmwareVersion:v9];

  if (*(void *)(v0 + v2[12] + 8) >> 60 == 15LL) {
    Class v10 = 0LL;
  }
  else {
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setFindMyVersion:v10];

  if (*(void *)(v0 + v2[13] + 8) >> 60 == 15LL) {
    Class v11 = 0LL;
  }
  else {
    Class v11 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setBatteryType:v11];

  if (*(void *)(v0 + v2[14] + 8) >> 60 == 15LL) {
    Class v12 = 0LL;
  }
  else {
    Class v12 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v1 setBatteryLevel:v12];

  return v1;
}

uint64_t sub_10008B698(uint64_t a1, void *a2, char a3)
{
  if (!a3)
  {
    swift_errorRetain(a1);
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease();
    unint64_t v10 = 0xD000000000000013LL;
    unint64_t v11 = 0x8000000100851E70LL;
    uint64_t v9 = a1;
    swift_errorRetain(a1);
    uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    v7._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v9, v6);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    sub_10008D060(a1, (uint64_t)a2, 0);
    return v10;
  }

  if (a3 == 1)
  {
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease();
    unint64_t v10 = 0x726F43617461642ELL;
    unint64_t v11 = 0xEF28646574707572LL;
    v5._uint64_t countAndFlagsBits = a1;
    v5._object = a2;
    String.append(_:)(v5);
    return v10;
  }

  return 0x6E776F6E6B6E752ELL;
}

uint64_t sub_10008B7D0()
{
  return sub_10008B698(*(void *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

unint64_t sub_10008B7DC()
{
  unint64_t result = qword_10099E9B0;
  if (!qword_10099E9B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807C14, &type metadata for LocalFindableAccessoryFirmwareVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10099E9B0);
  }

  return result;
}

unint64_t sub_10008B820()
{
  unint64_t result = qword_10099E9C0;
  if (!qword_10099E9C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8B40, &type metadata for AccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099E9C0);
  }

  return result;
}

unint64_t sub_10008B864()
{
  unint64_t result = qword_10099E9C8;
  if (!qword_10099E9C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ECB40, &type metadata for AccessoryProductData);
    atomic_store(result, (unint64_t *)&qword_10099E9C8);
  }

  return result;
}

unint64_t sub_10008B8A8()
{
  unint64_t result = qword_10099E9D0;
  if (!qword_10099E9D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802114, &type metadata for VersionNumber);
    atomic_store(result, (unint64_t *)&qword_10099E9D0);
  }

  return result;
}

unint64_t sub_10008B8EC()
{
  unint64_t result = qword_10099E9D8;
  if (!qword_10099E9D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807BEC, &type metadata for LocalFindableAccessoryFirmwareVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10099E9D8);
  }

  return result;
}

unint64_t sub_10008B930()
{
  unint64_t result = qword_10099E9E0;
  if (!qword_10099E9E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008177D8, &type metadata for AccessoryCapabilities);
    atomic_store(result, (unint64_t *)&qword_10099E9E0);
  }

  return result;
}

unint64_t sub_10008B974()
{
  unint64_t result = qword_10099E9E8;
  if (!qword_10099E9E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8B18, &type metadata for AccessoryBatteryType);
    atomic_store(result, (unint64_t *)&qword_10099E9E8);
  }

  return result;
}

unint64_t sub_10008B9B8()
{
  unint64_t result = qword_10099E9F0;
  if (!qword_10099E9F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8AF0, &type metadata for AccessoryBatteryLevel);
    atomic_store(result, (unint64_t *)&qword_10099E9F0);
  }

  return result;
}

unint64_t sub_10008B9FC()
{
  unint64_t result = qword_10099EA00;
  if (!qword_10099EA00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ECB18, &type metadata for AccessoryProductData);
    atomic_store(result, (unint64_t *)&qword_10099EA00);
  }

  return result;
}

unint64_t sub_10008BA40()
{
  unint64_t result = qword_10099EA08;
  if (!qword_10099EA08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008020EC, &type metadata for VersionNumber);
    atomic_store(result, (unint64_t *)&qword_10099EA08);
  }

  return result;
}

unint64_t sub_10008BA84()
{
  unint64_t result = qword_10099EA10;
  if (!qword_10099EA10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807BC4, &type metadata for LocalFindableAccessoryFirmwareVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10099EA10);
  }

  return result;
}

unint64_t sub_10008BAC8()
{
  unint64_t result = qword_10099EA18;
  if (!qword_10099EA18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008177B0, &type metadata for AccessoryCapabilities);
    atomic_store(result, (unint64_t *)&qword_10099EA18);
  }

  return result;
}

unint64_t sub_10008BB0C()
{
  unint64_t result = qword_10099EA20;
  if (!qword_10099EA20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8AC8, &type metadata for AccessoryBatteryType);
    atomic_store(result, (unint64_t *)&qword_10099EA20);
  }

  return result;
}

unint64_t sub_10008BB50()
{
  unint64_t result = qword_10099EA28;
  if (!qword_10099EA28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8AA0, &type metadata for AccessoryBatteryLevel);
    atomic_store(result, (unint64_t *)&qword_10099EA28);
  }

  return result;
}

uint64_t sub_10008BB94(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  Class v4 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  unint64_t v7 = *(void *)(a1 + v5 + 8);
  Class v8 = (uint64_t *)(a2 + v5);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_10001736C(v6, v7);
  sub_10001736C(v9, v10);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
  char v12 = v11;
  sub_100016F9C(v9, v10);
  sub_100016F9C(v6, v7);
  if ((v12 & 1) == 0) {
    return 0LL;
  }
  uint64_t v13 = v4[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = *(void *)(a1 + v13 + 8);
  unint64_t v16 = (void *)(a2 + v13);
  uint64_t v17 = v16[1];
  if (!v15)
  {
    if (v17) {
      return 0LL;
    }
    goto LABEL_12;
  }

  if (!v17) {
    return 0LL;
  }
  BOOL v18 = *v14 == *v16 && v15 == v17;
  if (v18
    || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, *v16, v17, 0LL), uint64_t result = 0LL, (v19 & 1) != 0))
  {
LABEL_12:
    uint64_t v21 = v4[7];
    uint64_t v22 = (void *)(a1 + v21);
    uint64_t v23 = *(void *)(a1 + v21 + 8);
    uint64_t v24 = (void *)(a2 + v21);
    uint64_t v25 = v24[1];
    if (v23)
    {
      if (!v25) {
        return 0LL;
      }
      if (*v22 != *v24 || v23 != v25)
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, *v24, v25, 0LL);
        uint64_t result = 0LL;
        if ((v26 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v25)
    {
      return 0LL;
    }

    uint64_t result = 0LL;
    uint64_t v27 = v4[8];
    uint64_t v28 = a1 + v27;
    int v29 = *(unsigned __int16 *)(a1 + v27);
    unint64_t v30 = (unsigned __int16 *)(a2 + v27);
    if (v29 != *v30
      || *(unsigned __int8 *)(v28 + 2) != *((unsigned __int8 *)v30 + 2)
      || *(unsigned __int8 *)(v28 + 3) != *((unsigned __int8 *)v30 + 3))
    {
      return result;
    }

    uint64_t v31 = v4[9];
    uint64_t v32 = (_DWORD *)(a1 + v31);
    char v33 = *(_BYTE *)(a1 + v31 + 4);
    uint64_t v34 = (_DWORD *)(a2 + v31);
    int v35 = *(unsigned __int8 *)(a2 + v31 + 4);
    if ((v33 & 1) != 0)
    {
      if (!v35) {
        return 0LL;
      }
    }

    else
    {
      if (*v32 != *v34) {
        LOBYTE(v35) = 1;
      }
      if ((v35 & 1) != 0) {
        return 0LL;
      }
    }

    uint64_t v36 = v4[10];
    uint64_t v37 = (void *)(a1 + v36);
    char v38 = *(_BYTE *)(a1 + v36 + 16);
    uint64_t v39 = a2 + v36;
    if ((v38 & 1) != 0)
    {
      if (!*(_BYTE *)(v39 + 16)) {
        return 0LL;
      }
    }

    else
    {
      uint64_t result = 0LL;
      if ((*(_BYTE *)(v39 + 16) & 1) != 0 || *v37 != *(void *)v39 || v37[1] != *(void *)(v39 + 8)) {
        return result;
      }
    }

    uint64_t v40 = v4[11];
    unint64_t v41 = (void *)(a1 + v40);
    char v42 = *(_BYTE *)(a1 + v40 + 8);
    uint64_t v43 = (void *)(a2 + v40);
    int v44 = *(unsigned __int8 *)(a2 + v40 + 8);
    if ((v42 & 1) != 0)
    {
      if (!v44) {
        return 0LL;
      }
    }

    else
    {
      if (*v41 != *v43) {
        LOBYTE(v44) = 1;
      }
      if ((v44 & 1) != 0) {
        return 0LL;
      }
    }

    uint64_t v45 = v4[12];
    uint64_t v46 = (_DWORD *)(a1 + v45);
    char v47 = *(_BYTE *)(a1 + v45 + 4);
    uint64_t v48 = (_DWORD *)(a2 + v45);
    int v49 = *(unsigned __int8 *)(a2 + v45 + 4);
    if ((v47 & 1) != 0)
    {
      if (!v49) {
        return 0LL;
      }
    }

    else
    {
      if (*v46 != *v48) {
        LOBYTE(v49) = 1;
      }
      if ((v49 & 1) != 0) {
        return 0LL;
      }
    }

    uint64_t v50 = v4[13];
    int v51 = *(unsigned __int8 *)(a1 + v50);
    int v52 = *(unsigned __int8 *)(a2 + v50);
    if (v51 == 4)
    {
      if (v52 != 4) {
        return 0LL;
      }
    }

    else
    {
      uint64_t result = 0LL;
      if (v52 == 4 || v51 != v52) {
        return result;
      }
    }

    uint64_t v53 = v4[14];
    int v54 = *(unsigned __int8 *)(a1 + v53);
    int v55 = *(unsigned __int8 *)(a2 + v53);
    if (v54 != 5)
    {
      uint64_t result = 0LL;
      if (v55 == 5 || v54 != v55) {
        return result;
      }
      goto LABEL_58;
    }

    if (v55 == 5)
    {
LABEL_58:
      uint64_t v56 = v4[15];
      uint64_t v57 = *(void *)(a1 + v56);
      uint64_t v58 = *(void *)(a1 + v56 + 8);
      unint64_t v59 = (void *)(a2 + v56);
      uint64_t v60 = v59[1];
      if (v57 == *v59 && v58 == v60) {
        return 1LL;
      }
      else {
        return _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, *v59, v60, 0LL);
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t type metadata accessor for RawAccessoryMetadata(uint64_t a1)
{
  return sub_10008BED8(a1, qword_10099EA98, (uint64_t)&nominal type descriptor for RawAccessoryMetadata);
}

uint64_t sub_10008BED8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

unint64_t sub_10008BF0C()
{
  unint64_t result = qword_10099EA30;
  if (!qword_10099EA30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8A60, &type metadata for AccessoryMetadata.Error);
    atomic_store(result, (unint64_t *)&qword_10099EA30);
  }

  return result;
}

BOOL sub_10008BF50(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  Class v4 = (int *)type metadata accessor for RawAccessoryMetadata(0LL);
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  unint64_t v7 = *(void *)(a1 + v5 + 8);
  Class v8 = (uint64_t *)(a2 + v5);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }

  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100018BE4(v6, v7);
    sub_100018BE4(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    char v12 = v11;
    sub_1000182F0(v9, v10);
    sub_1000182F0(v6, v7);
    if ((v12 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v13 = v4[6];
  uint64_t v6 = *(void *)(a1 + v13);
  unint64_t v7 = *(void *)(a1 + v13 + 8);
  uint64_t v14 = (uint64_t *)(a2 + v13);
  uint64_t v9 = *v14;
  unint64_t v10 = v14[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }

  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100018BE4(v6, v7);
    sub_100018BE4(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    char v16 = v15;
    sub_1000182F0(v9, v10);
    sub_1000182F0(v6, v7);
    if ((v16 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v17 = v4[7];
  uint64_t v6 = *(void *)(a1 + v17);
  unint64_t v7 = *(void *)(a1 + v17 + 8);
  BOOL v18 = (uint64_t *)(a2 + v17);
  uint64_t v9 = *v18;
  unint64_t v10 = v18[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }

  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100018BE4(v6, v7);
    sub_100018BE4(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    char v20 = v19;
    sub_1000182F0(v9, v10);
    sub_1000182F0(v6, v7);
    if ((v20 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v21 = v4[8];
  uint64_t v6 = *(void *)(a1 + v21);
  unint64_t v7 = *(void *)(a1 + v21 + 8);
  uint64_t v22 = (uint64_t *)(a2 + v21);
  uint64_t v9 = *v22;
  unint64_t v10 = v22[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }

  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100018BE4(v6, v7);
    sub_100018BE4(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    char v24 = v23;
    sub_1000182F0(v9, v10);
    sub_1000182F0(v6, v7);
    if ((v24 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v25 = v4[9];
  uint64_t v6 = *(void *)(a1 + v25);
  unint64_t v7 = *(void *)(a1 + v25 + 8);
  char v26 = (uint64_t *)(a2 + v25);
  uint64_t v9 = *v26;
  unint64_t v10 = v26[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }

  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100018BE4(v6, v7);
    sub_100018BE4(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    char v28 = v27;
    sub_1000182F0(v9, v10);
    sub_1000182F0(v6, v7);
    if ((v28 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v29 = v4[10];
  uint64_t v6 = *(void *)(a1 + v29);
  unint64_t v7 = *(void *)(a1 + v29 + 8);
  unint64_t v30 = (uint64_t *)(a2 + v29);
  uint64_t v9 = *v30;
  unint64_t v10 = v30[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }

  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100018BE4(v6, v7);
    sub_100018BE4(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    char v32 = v31;
    sub_1000182F0(v9, v10);
    sub_1000182F0(v6, v7);
    if ((v32 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v33 = v4[11];
  uint64_t v6 = *(void *)(a1 + v33);
  unint64_t v7 = *(void *)(a1 + v33 + 8);
  uint64_t v34 = (uint64_t *)(a2 + v33);
  uint64_t v9 = *v34;
  unint64_t v10 = v34[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
  }

  else
  {
    if (v10 >> 60 == 15) {
      goto LABEL_46;
    }
    sub_100018BE4(v6, v7);
    sub_100018BE4(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    char v36 = v35;
    sub_1000182F0(v9, v10);
    sub_1000182F0(v6, v7);
    if ((v36 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v37 = v4[12];
  uint64_t v6 = *(void *)(a1 + v37);
  unint64_t v7 = *(void *)(a1 + v37 + 8);
  char v38 = (uint64_t *)(a2 + v37);
  uint64_t v9 = *v38;
  unint64_t v10 = v38[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }

  if (v10 >> 60 == 15) {
    goto LABEL_46;
  }
  sub_100018BE4(v6, v7);
  sub_100018BE4(v9, v10);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
  char v40 = v39;
  sub_1000182F0(v9, v10);
  sub_1000182F0(v6, v7);
  if ((v40 & 1) == 0) {
    return 0LL;
  }
LABEL_42:
  uint64_t v41 = v4[13];
  uint64_t v6 = *(void *)(a1 + v41);
  unint64_t v7 = *(void *)(a1 + v41 + 8);
  char v42 = (uint64_t *)(a2 + v41);
  uint64_t v9 = *v42;
  unint64_t v10 = v42[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 == 15) {
      goto LABEL_50;
    }
LABEL_46:
    sub_100018BE4(v6, v7);
    sub_100018BE4(v9, v10);
    sub_1000182F0(v6, v7);
    uint64_t v43 = v9;
    unint64_t v44 = v10;
LABEL_47:
    sub_1000182F0(v43, v44);
    return 0LL;
  }

  if (v10 >> 60 == 15) {
    goto LABEL_46;
  }
  sub_100018BE4(v6, v7);
  sub_100018BE4(v9, v10);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
  char v47 = v46;
  sub_1000182F0(v9, v10);
  sub_1000182F0(v6, v7);
  if ((v47 & 1) == 0) {
    return 0LL;
  }
LABEL_50:
  uint64_t v48 = v4[14];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = *(void *)(a1 + v48);
  unint64_t v51 = *(void *)(v49 + 8);
  int v52 = (uint64_t *)(a2 + v48);
  uint64_t v53 = *v52;
  unint64_t v54 = v52[1];
  if (v51 >> 60 == 15)
  {
    if (v54 >> 60 == 15) {
      return 1LL;
    }
LABEL_54:
    sub_100018BE4(v50, *(void *)(v49 + 8));
    sub_100018BE4(v53, v54);
    sub_1000182F0(v50, v51);
    uint64_t v43 = v53;
    unint64_t v44 = v54;
    goto LABEL_47;
  }

  if (v54 >> 60 == 15) {
    goto LABEL_54;
  }
  sub_100018BE4(v50, *(void *)(v49 + 8));
  sub_100018BE4(v53, v54);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v50, v51);
  char v56 = v55;
  sub_1000182F0(v53, v54);
  sub_1000182F0(v50, v51);
  return (v56 & 1) != 0;
}

uint64_t sub_10008C554(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x44746375646F7270LL && a2 == 0xEB00000000617461LL)
  {
    unint64_t v7 = 0xEB00000000617461LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746375646F7270LL, 0xEB00000000617461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v8 = 0x8000000100851DE0LL;
    if (a2 == 0x8000000100851DE0LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100851DE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065LL)
  {
    unint64_t v9 = 0xE900000000000065LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6C65646F6DLL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x6465767265736572LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v10 = 0xE800000000000000LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465767265736572LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x8000000100851E00LL)
  {
    unint64_t v11 = 0x8000000100851E00LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100851E00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x8000000100851E20LL)
  {
    unint64_t v12 = 0x8000000100851E20LL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100851E20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_43;
  }

  if (a1 == 0x657261776D726966LL && a2 == 0xEF6E6F6973726556LL)
  {
    unint64_t v13 = 0xEF6E6F6973726556LL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966LL, 0xEF6E6F6973726556LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_49;
  }

  if (a1 == 0x6556794D646E6966LL && a2 == 0xED00006E6F697372LL)
  {
    unint64_t v14 = 0xED00006E6F697372LL;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6556794D646E6966LL, 0xED00006E6F697372LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_55;
  }

  if (a1 == 0x5479726574746162LL && a2 == 0xEB00000000657079LL)
  {
    unint64_t v15 = 0xEB00000000657079LL;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5479726574746162LL, 0xEB00000000657079LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_61;
  }

  if (a1 == 0x4C79726574746162LL && a2 == 0xEC0000006C657665LL)
  {
    swift_bridgeObjectRelease(0xEC0000006C657665LL);
    return 10LL;
  }

  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C79726574746162LL, 0xEC0000006C657665LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0) {
      return 10LL;
    }
    else {
      return 11LL;
    }
  }

uint64_t sub_10008CA58(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x44746375646F7270LL && a2 == 0xEB00000000617461LL)
  {
    unint64_t v7 = 0xEB00000000617461LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746375646F7270LL, 0xEB00000000617461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v8 = 0x8000000100851DE0LL;
    if (a2 == 0x8000000100851DE0LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100851DE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065LL)
  {
    unint64_t v9 = 0xE900000000000065LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6C65646F6DLL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x657261776D726966LL && a2 == 0xEF6E6F6973726556LL)
  {
    unint64_t v10 = 0xEF6E6F6973726556LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966LL, 0xEF6E6F6973726556LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0x6C6F636F746F7270LL && a2 == 0xEF6E6F6973726556LL)
  {
    unint64_t v11 = 0xEF6E6F6973726556LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F636F746F7270LL, 0xEF6E6F6973726556LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0xD000000000000025LL && a2 == 0x8000000100851E40LL)
  {
    unint64_t v12 = 0x8000000100851E40LL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025LL, 0x8000000100851E40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_43;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x8000000100851E00LL)
  {
    unint64_t v13 = 0x8000000100851E00LL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100851E00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_49;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x8000000100851E20LL)
  {
    unint64_t v14 = 0x8000000100851E20LL;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100851E20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_55;
  }

  if (a1 == 0x5479726574746162LL && a2 == 0xEB00000000657079LL)
  {
    unint64_t v15 = 0xEB00000000657079LL;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5479726574746162LL, 0xEB00000000657079LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_61;
  }

  if (a1 == 0x5379726574746162LL && a2 == 0xEC00000065746174LL)
  {
    unint64_t v16 = 0xEC00000065746174LL;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5379726574746162LL, 0xEC00000065746174LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_67;
  }

  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 11LL;
  }

  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0) {
      return 11LL;
    }
    else {
      return 12LL;
    }
  }

unint64_t sub_10008CFA4()
{
  unint64_t result = qword_10099EA38;
  if (!qword_10099EA38)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_10099EA38);
  }

  return result;
}

unint64_t sub_10008CFE8()
{
  unint64_t result = qword_1009A6C60;
  if (!qword_1009A6C60)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_1009A6C60);
  }

  return result;
}

uint64_t sub_10008D030(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain(a2);
  }
  if (!a3) {
    return swift_errorRetain(result);
  }
  return result;
}

uint64_t destroy for AccessoryMetadata.Error(uint64_t a1)
{
  return sub_10008D060(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10008D060(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease(a2);
  }
  if (!a3) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t _s12searchpartyd17AccessoryMetadataV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10008D030(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AccessoryMetadata.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10008D030(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10008D060(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for AccessoryMetadata.Error(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AccessoryMetadata.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10008D060(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryMetadata.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryMetadata.Error( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10008D200(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10008D218(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryMetadata.Error()
{
  return &type metadata for AccessoryMetadata.Error;
}

uint64_t *sub_10008D240(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v13 = *(void *)v10;
      sub_10001736C(*(void *)v10, *((void *)v10 + 1));
      *(void *)unint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }

    uint64_t v14 = a3[6];
    unint64_t v15 = (char *)a1 + v14;
    unint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *((void *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    }

    else
    {
      uint64_t v18 = *(void *)v16;
      sub_10001736C(*(void *)v16, *((void *)v16 + 1));
      *(void *)unint64_t v15 = v18;
      *((void *)v15 + 1) = v17;
    }

    uint64_t v19 = a3[7];
    char v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    unint64_t v22 = *((void *)v21 + 1);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)char v20 = *(_OWORD *)v21;
    }

    else
    {
      uint64_t v23 = *(void *)v21;
      sub_10001736C(*(void *)v21, *((void *)v21 + 1));
      *(void *)char v20 = v23;
      *((void *)v20 + 1) = v22;
    }

    uint64_t v24 = a3[8];
    uint64_t v25 = (char *)a1 + v24;
    char v26 = (char *)a2 + v24;
    unint64_t v27 = *((void *)v26 + 1);
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    }

    else
    {
      uint64_t v28 = *(void *)v26;
      sub_10001736C(*(void *)v26, *((void *)v26 + 1));
      *(void *)uint64_t v25 = v28;
      *((void *)v25 + 1) = v27;
    }

    uint64_t v29 = a3[9];
    unint64_t v30 = (char *)a1 + v29;
    char v31 = (char *)a2 + v29;
    unint64_t v32 = *((void *)v31 + 1);
    if (v32 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
    }

    else
    {
      uint64_t v33 = *(void *)v31;
      sub_10001736C(*(void *)v31, *((void *)v31 + 1));
      *(void *)unint64_t v30 = v33;
      *((void *)v30 + 1) = v32;
    }

    uint64_t v34 = a3[10];
    char v35 = (char *)a1 + v34;
    char v36 = (char *)a2 + v34;
    unint64_t v37 = *((void *)v36 + 1);
    if (v37 >> 60 == 15)
    {
      *(_OWORD *)char v35 = *(_OWORD *)v36;
    }

    else
    {
      uint64_t v38 = *(void *)v36;
      sub_10001736C(*(void *)v36, *((void *)v36 + 1));
      *(void *)char v35 = v38;
      *((void *)v35 + 1) = v37;
    }

    uint64_t v39 = a3[11];
    char v40 = (char *)a1 + v39;
    uint64_t v41 = (char *)a2 + v39;
    unint64_t v42 = *((void *)v41 + 1);
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)char v40 = *(_OWORD *)v41;
    }

    else
    {
      uint64_t v43 = *(void *)v41;
      sub_10001736C(*(void *)v41, *((void *)v41 + 1));
      *(void *)char v40 = v43;
      *((void *)v40 + 1) = v42;
    }

    uint64_t v44 = a3[12];
    uint64_t v45 = (char *)a1 + v44;
    char v46 = (char *)a2 + v44;
    unint64_t v47 = *((void *)v46 + 1);
    if (v47 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    }

    else
    {
      uint64_t v48 = *(void *)v46;
      sub_10001736C(*(void *)v46, *((void *)v46 + 1));
      *(void *)uint64_t v45 = v48;
      *((void *)v45 + 1) = v47;
    }

    uint64_t v49 = a3[13];
    uint64_t v50 = (char *)a1 + v49;
    unint64_t v51 = (char *)a2 + v49;
    unint64_t v52 = *((void *)v51 + 1);
    if (v52 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
    }

    else
    {
      uint64_t v53 = *(void *)v51;
      sub_10001736C(*(void *)v51, *((void *)v51 + 1));
      *(void *)uint64_t v50 = v53;
      *((void *)v50 + 1) = v52;
    }

    uint64_t v54 = a3[14];
    char v55 = (char *)a1 + v54;
    char v56 = (char *)a2 + v54;
    unint64_t v57 = *((void *)v56 + 1);
    if (v57 >> 60 == 15)
    {
      *(_OWORD *)char v55 = *(_OWORD *)v56;
    }

    else
    {
      uint64_t v58 = *(void *)v56;
      sub_10001736C(*(void *)v56, *((void *)v56 + 1));
      *(void *)char v55 = v58;
      *((void *)v55 + 1) = v57;
    }
  }

  return a1;
}

uint64_t sub_10008D51C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  char v6 = (uint64_t *)(a1 + a2[5]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = sub_100016F9C(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + a2[6]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    uint64_t result = sub_100016F9C(*v8, v9);
  }
  unint64_t v10 = (uint64_t *)(a1 + a2[7]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    uint64_t result = sub_100016F9C(*v10, v11);
  }
  uint64_t v12 = (uint64_t *)(a1 + a2[8]);
  unint64_t v13 = v12[1];
  if (v13 >> 60 != 15) {
    uint64_t result = sub_100016F9C(*v12, v13);
  }
  uint64_t v14 = (uint64_t *)(a1 + a2[9]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    uint64_t result = sub_100016F9C(*v14, v15);
  }
  unint64_t v16 = (uint64_t *)(a1 + a2[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    uint64_t result = sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(a1 + a2[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    uint64_t result = sub_100016F9C(*v18, v19);
  }
  char v20 = (uint64_t *)(a1 + a2[12]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    uint64_t result = sub_100016F9C(*v20, v21);
  }
  unint64_t v22 = (uint64_t *)(a1 + a2[13]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    uint64_t result = sub_100016F9C(*v22, v23);
  }
  uint64_t v24 = (uint64_t *)(a1 + a2[14]);
  unint64_t v25 = v24[1];
  if (v25 >> 60 != 15) {
    return sub_100016F9C(*v24, v25);
  }
  return result;
}

uint64_t sub_10008D6A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v11 = *v9;
    sub_10001736C(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v16 = *v14;
    sub_10001736C(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8) = v15;
  }

  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  unint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }

  else
  {
    uint64_t v21 = *v19;
    sub_10001736C(*v19, v19[1]);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + 8) = v20;
  }

  uint64_t v22 = a3[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  unint64_t v25 = v24[1];
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }

  else
  {
    uint64_t v26 = *v24;
    sub_10001736C(*v24, v24[1]);
    *(void *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = v25;
  }

  uint64_t v27 = a3[9];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = (uint64_t *)(a2 + v27);
  unint64_t v30 = v29[1];
  if (v30 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  }

  else
  {
    uint64_t v31 = *v29;
    sub_10001736C(*v29, v29[1]);
    *(void *)uint64_t v28 = v31;
    *(void *)(v28 + 8) = v30;
  }

  uint64_t v32 = a3[10];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = (uint64_t *)(a2 + v32);
  unint64_t v35 = v34[1];
  if (v35 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  }

  else
  {
    uint64_t v36 = *v34;
    sub_10001736C(*v34, v34[1]);
    *(void *)uint64_t v33 = v36;
    *(void *)(v33 + 8) = v35;
  }

  uint64_t v37 = a3[11];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = (uint64_t *)(a2 + v37);
  unint64_t v40 = v39[1];
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  }

  else
  {
    uint64_t v41 = *v39;
    sub_10001736C(*v39, v39[1]);
    *(void *)uint64_t v38 = v41;
    *(void *)(v38 + 8) = v40;
  }

  uint64_t v42 = a3[12];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = (uint64_t *)(a2 + v42);
  unint64_t v45 = v44[1];
  if (v45 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
  }

  else
  {
    uint64_t v46 = *v44;
    sub_10001736C(*v44, v44[1]);
    *(void *)uint64_t v43 = v46;
    *(void *)(v43 + 8) = v45;
  }

  uint64_t v47 = a3[13];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = (uint64_t *)(a2 + v47);
  unint64_t v50 = v49[1];
  if (v50 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  }

  else
  {
    uint64_t v51 = *v49;
    sub_10001736C(*v49, v49[1]);
    *(void *)uint64_t v48 = v51;
    *(void *)(v48 + 8) = v50;
  }

  uint64_t v52 = a3[14];
  uint64_t v53 = a1 + v52;
  uint64_t v54 = (uint64_t *)(a2 + v52);
  unint64_t v55 = v54[1];
  if (v55 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
  }

  else
  {
    uint64_t v56 = *v54;
    sub_10001736C(*v54, v54[1]);
    *(void *)uint64_t v53 = v56;
    *(void *)(v53 + 8) = v55;
  }

  return a1;
}

uint64_t sub_10008D950(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15LL)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      sub_10001736C(v11, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v10 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }

  uint64_t v12 = *v9;
  sub_10001736C(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  sub_100016F9C(v13, v14);
LABEL_8:
  uint64_t v15 = a3[6];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 == 15LL)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v17;
      sub_10001736C(v19, v18);
      *uint64_t v16 = v19;
      v16[1] = v18;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v18 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)v16);
LABEL_13:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_15;
  }

  uint64_t v20 = *v17;
  sub_10001736C(v20, v18);
  uint64_t v21 = *v16;
  unint64_t v22 = v16[1];
  *uint64_t v16 = v20;
  v16[1] = v18;
  sub_100016F9C(v21, v22);
LABEL_15:
  uint64_t v23 = a3[7];
  uint64_t v24 = (uint64_t *)(a1 + v23);
  unint64_t v25 = (uint64_t *)(a2 + v23);
  unint64_t v26 = *(void *)(a2 + v23 + 8);
  if (*(void *)(a1 + v23 + 8) >> 60 == 15LL)
  {
    if (v26 >> 60 != 15)
    {
      uint64_t v27 = *v25;
      sub_10001736C(v27, v26);
      *uint64_t v24 = v27;
      v24[1] = v26;
      goto LABEL_22;
    }

    goto LABEL_20;
  }

  if (v26 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)v24);
LABEL_20:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    goto LABEL_22;
  }

  uint64_t v28 = *v25;
  sub_10001736C(v28, v26);
  uint64_t v29 = *v24;
  unint64_t v30 = v24[1];
  *uint64_t v24 = v28;
  v24[1] = v26;
  sub_100016F9C(v29, v30);
LABEL_22:
  uint64_t v31 = a3[8];
  uint64_t v32 = (uint64_t *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  unint64_t v34 = *(void *)(a2 + v31 + 8);
  if (*(void *)(a1 + v31 + 8) >> 60 == 15LL)
  {
    if (v34 >> 60 != 15)
    {
      uint64_t v35 = *v33;
      sub_10001736C(v35, v34);
      *uint64_t v32 = v35;
      v32[1] = v34;
      goto LABEL_29;
    }

    goto LABEL_27;
  }

  if (v34 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)v32);
LABEL_27:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    goto LABEL_29;
  }

  uint64_t v36 = *v33;
  sub_10001736C(v36, v34);
  uint64_t v37 = *v32;
  unint64_t v38 = v32[1];
  *uint64_t v32 = v36;
  v32[1] = v34;
  sub_100016F9C(v37, v38);
LABEL_29:
  uint64_t v39 = a3[9];
  unint64_t v40 = (uint64_t *)(a1 + v39);
  uint64_t v41 = (uint64_t *)(a2 + v39);
  unint64_t v42 = *(void *)(a2 + v39 + 8);
  if (*(void *)(a1 + v39 + 8) >> 60 == 15LL)
  {
    if (v42 >> 60 != 15)
    {
      uint64_t v43 = *v41;
      sub_10001736C(v43, v42);
      *unint64_t v40 = v43;
      v40[1] = v42;
      goto LABEL_36;
    }

    goto LABEL_34;
  }

  if (v42 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)v40);
LABEL_34:
    *(_OWORD *)unint64_t v40 = *(_OWORD *)v41;
    goto LABEL_36;
  }

  uint64_t v44 = *v41;
  sub_10001736C(v44, v42);
  uint64_t v45 = *v40;
  unint64_t v46 = v40[1];
  *unint64_t v40 = v44;
  v40[1] = v42;
  sub_100016F9C(v45, v46);
LABEL_36:
  uint64_t v47 = a3[10];
  uint64_t v48 = (uint64_t *)(a1 + v47);
  uint64_t v49 = (uint64_t *)(a2 + v47);
  unint64_t v50 = *(void *)(a2 + v47 + 8);
  if (*(void *)(a1 + v47 + 8) >> 60 == 15LL)
  {
    if (v50 >> 60 != 15)
    {
      uint64_t v51 = *v49;
      sub_10001736C(v51, v50);
      uint64_t *v48 = v51;
      v48[1] = v50;
      goto LABEL_43;
    }

    goto LABEL_41;
  }

  if (v50 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)v48);
LABEL_41:
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    goto LABEL_43;
  }

  uint64_t v52 = *v49;
  sub_10001736C(v52, v50);
  uint64_t v53 = *v48;
  unint64_t v54 = v48[1];
  uint64_t *v48 = v52;
  v48[1] = v50;
  sub_100016F9C(v53, v54);
LABEL_43:
  uint64_t v55 = a3[11];
  uint64_t v56 = (uint64_t *)(a1 + v55);
  unint64_t v57 = (uint64_t *)(a2 + v55);
  unint64_t v58 = *(void *)(a2 + v55 + 8);
  if (*(void *)(a1 + v55 + 8) >> 60 == 15LL)
  {
    if (v58 >> 60 != 15)
    {
      uint64_t v59 = *v57;
      sub_10001736C(v59, v58);
      *uint64_t v56 = v59;
      v56[1] = v58;
      goto LABEL_50;
    }

    goto LABEL_48;
  }

  if (v58 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)v56);
LABEL_48:
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    goto LABEL_50;
  }

  uint64_t v60 = *v57;
  sub_10001736C(v60, v58);
  uint64_t v61 = *v56;
  unint64_t v62 = v56[1];
  *uint64_t v56 = v60;
  v56[1] = v58;
  sub_100016F9C(v61, v62);
LABEL_50:
  uint64_t v63 = a3[12];
  uint64_t v64 = (uint64_t *)(a1 + v63);
  unint64_t v65 = (uint64_t *)(a2 + v63);
  unint64_t v66 = *(void *)(a2 + v63 + 8);
  if (*(void *)(a1 + v63 + 8) >> 60 == 15LL)
  {
    if (v66 >> 60 != 15)
    {
      uint64_t v67 = *v65;
      sub_10001736C(v67, v66);
      *uint64_t v64 = v67;
      v64[1] = v66;
      goto LABEL_57;
    }

    goto LABEL_55;
  }

  if (v66 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)v64);
LABEL_55:
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
    goto LABEL_57;
  }

  uint64_t v68 = *v65;
  sub_10001736C(v68, v66);
  uint64_t v69 = *v64;
  unint64_t v70 = v64[1];
  *uint64_t v64 = v68;
  v64[1] = v66;
  sub_100016F9C(v69, v70);
LABEL_57:
  uint64_t v71 = a3[13];
  uint64_t v72 = (uint64_t *)(a1 + v71);
  uint64_t v73 = (uint64_t *)(a2 + v71);
  unint64_t v74 = *(void *)(a2 + v71 + 8);
  if (*(void *)(a1 + v71 + 8) >> 60 == 15LL)
  {
    if (v74 >> 60 != 15)
    {
      uint64_t v75 = *v73;
      sub_10001736C(v75, v74);
      uint64_t *v72 = v75;
      v72[1] = v74;
      goto LABEL_64;
    }

    goto LABEL_62;
  }

  if (v74 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)v72);
LABEL_62:
    *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
    goto LABEL_64;
  }

  uint64_t v76 = *v73;
  sub_10001736C(v76, v74);
  uint64_t v77 = *v72;
  unint64_t v78 = v72[1];
  uint64_t *v72 = v76;
  v72[1] = v74;
  sub_100016F9C(v77, v78);
LABEL_64:
  uint64_t v79 = a3[14];
  uint64_t v80 = (uint64_t *)(a1 + v79);
  unint64_t v81 = (uint64_t *)(a2 + v79);
  unint64_t v82 = *(void *)(a2 + v79 + 8);
  if (*(void *)(a1 + v79 + 8) >> 60 != 15LL)
  {
    if (v82 >> 60 != 15)
    {
      uint64_t v84 = *v81;
      sub_10001736C(v84, v82);
      uint64_t v85 = *v80;
      unint64_t v86 = v80[1];
      uint64_t *v80 = v84;
      v80[1] = v82;
      sub_100016F9C(v85, v86);
      return a1;
    }

    sub_100041D4C((uint64_t)v80);
    goto LABEL_69;
  }

  if (v82 >> 60 == 15)
  {
LABEL_69:
    *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
    return a1;
  }

  uint64_t v83 = *v81;
  sub_10001736C(v83, v82);
  uint64_t *v80 = v83;
  v80[1] = v82;
  return a1;
}

uint64_t sub_10008DE90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_10008DF44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    sub_100041D4C(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }

  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v11;
  sub_100016F9C(v12, v10);
LABEL_6:
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_11;
  }

  unint64_t v17 = *(void *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    sub_100041D4C(v14);
    goto LABEL_9;
  }

  uint64_t v18 = *(void *)v14;
  *(void *)uint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = v17;
  sub_100016F9C(v18, v16);
LABEL_11:
  uint64_t v19 = a3[7];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  unint64_t v22 = *(void *)(a1 + v19 + 8);
  if (v22 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    goto LABEL_16;
  }

  unint64_t v23 = *(void *)(v21 + 8);
  if (v23 >> 60 == 15)
  {
    sub_100041D4C(v20);
    goto LABEL_14;
  }

  uint64_t v24 = *(void *)v20;
  *(void *)uint64_t v20 = *(void *)v21;
  *(void *)(v20 + 8) = v23;
  sub_100016F9C(v24, v22);
LABEL_16:
  uint64_t v25 = a3[8];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  unint64_t v28 = *(void *)(a1 + v25 + 8);
  if (v28 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    goto LABEL_21;
  }

  unint64_t v29 = *(void *)(v27 + 8);
  if (v29 >> 60 == 15)
  {
    sub_100041D4C(v26);
    goto LABEL_19;
  }

  uint64_t v30 = *(void *)v26;
  *(void *)uint64_t v26 = *(void *)v27;
  *(void *)(v26 + 8) = v29;
  sub_100016F9C(v30, v28);
LABEL_21:
  uint64_t v31 = a3[9];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  unint64_t v34 = *(void *)(a1 + v31 + 8);
  if (v34 >> 60 == 15)
  {
LABEL_24:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    goto LABEL_26;
  }

  unint64_t v35 = *(void *)(v33 + 8);
  if (v35 >> 60 == 15)
  {
    sub_100041D4C(v32);
    goto LABEL_24;
  }

  uint64_t v36 = *(void *)v32;
  *(void *)uint64_t v32 = *(void *)v33;
  *(void *)(v32 + 8) = v35;
  sub_100016F9C(v36, v34);
LABEL_26:
  uint64_t v37 = a3[10];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  unint64_t v40 = *(void *)(a1 + v37 + 8);
  if (v40 >> 60 == 15)
  {
LABEL_29:
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    goto LABEL_31;
  }

  unint64_t v41 = *(void *)(v39 + 8);
  if (v41 >> 60 == 15)
  {
    sub_100041D4C(v38);
    goto LABEL_29;
  }

  uint64_t v42 = *(void *)v38;
  *(void *)uint64_t v38 = *(void *)v39;
  *(void *)(v38 + 8) = v41;
  sub_100016F9C(v42, v40);
LABEL_31:
  uint64_t v43 = a3[11];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  unint64_t v46 = *(void *)(a1 + v43 + 8);
  if (v46 >> 60 == 15)
  {
LABEL_34:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_36;
  }

  unint64_t v47 = *(void *)(v45 + 8);
  if (v47 >> 60 == 15)
  {
    sub_100041D4C(v44);
    goto LABEL_34;
  }

  uint64_t v48 = *(void *)v44;
  *(void *)uint64_t v44 = *(void *)v45;
  *(void *)(v44 + 8) = v47;
  sub_100016F9C(v48, v46);
LABEL_36:
  uint64_t v49 = a3[12];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  unint64_t v52 = *(void *)(a1 + v49 + 8);
  if (v52 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
    goto LABEL_41;
  }

  unint64_t v53 = *(void *)(v51 + 8);
  if (v53 >> 60 == 15)
  {
    sub_100041D4C(v50);
    goto LABEL_39;
  }

  uint64_t v54 = *(void *)v50;
  *(void *)uint64_t v50 = *(void *)v51;
  *(void *)(v50 + 8) = v53;
  sub_100016F9C(v54, v52);
LABEL_41:
  uint64_t v55 = a3[13];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  unint64_t v58 = *(void *)(a1 + v55 + 8);
  if (v58 >> 60 == 15)
  {
LABEL_44:
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    goto LABEL_46;
  }

  unint64_t v59 = *(void *)(v57 + 8);
  if (v59 >> 60 == 15)
  {
    sub_100041D4C(v56);
    goto LABEL_44;
  }

  uint64_t v60 = *(void *)v56;
  *(void *)uint64_t v56 = *(void *)v57;
  *(void *)(v56 + 8) = v59;
  sub_100016F9C(v60, v58);
LABEL_46:
  uint64_t v61 = a3[14];
  unint64_t v62 = (uint64_t *)(a1 + v61);
  uint64_t v63 = (uint64_t *)(a2 + v61);
  unint64_t v64 = *(void *)(a1 + v61 + 8);
  if (v64 >> 60 != 15)
  {
    unint64_t v65 = v63[1];
    if (v65 >> 60 != 15)
    {
      uint64_t v66 = *v62;
      uint64_t *v62 = *v63;
      v62[1] = v65;
      sub_100016F9C(v66, v64);
      return a1;
    }

    sub_100041D4C((uint64_t)v62);
  }

  *(_OWORD *)unint64_t v62 = *(_OWORD *)v63;
  return a1;
}

uint64_t sub_10008E2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008E2C8);
}

uint64_t sub_10008E2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  BOOL v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  unsigned int v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10) {
    return 0LL;
  }
  else {
    return v11;
  }
}

uint64_t sub_10008E350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008E35C);
}

uint64_t sub_10008E35C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  BOOL v10 = (void *)(a1 + *(int *)(a4 + 20));
  *BOOL v10 = 0LL;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t sub_10008E3E4(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1007E86D8;
    v4[2] = &unk_1007E86D8;
    v4[3] = &unk_1007E86D8;
    v4[4] = &unk_1007E86D8;
    v4[5] = &unk_1007E86D8;
    v4[6] = &unk_1007E86D8;
    v4[7] = &unk_1007E86D8;
    v4[8] = &unk_1007E86D8;
    void v4[9] = &unk_1007E86D8;
    v4[10] = &unk_1007E86D8;
    swift_initStructMetadata(a1, 256LL, 11LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for IdentitySigningType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }

uint64_t storeEnumTagSinglePayload for AccessoryMetadata.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_10008E544 + 4 * byte_1007E84A5[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_10008E578 + 4 * byte_1007E84A0[v4]))();
}

uint64_t sub_10008E578(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10008E588LL);
  }
  return result;
}

uint64_t sub_10008E594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10008E59CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_10008E5A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E5A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryMetadata.CodingKeys()
{
  return &type metadata for AccessoryMetadata.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryBatteryLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10008E610 + 4 * byte_1007E84AF[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10008E644 + 4 * byte_1007E84AA[v4]))();
}

uint64_t sub_10008E644(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E64C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10008E654LL);
  }
  return result;
}

uint64_t sub_10008E660(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10008E668LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10008E66C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E674(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryBatteryLevel()
{
  return &type metadata for AccessoryBatteryLevel;
}

uint64_t storeEnumTagSinglePayload for AccessoryBatteryType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10008E6DC + 4 * byte_1007E84B9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10008E710 + 4 * byte_1007E84B4[v4]))();
}

uint64_t sub_10008E710(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E718(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10008E720LL);
  }
  return result;
}

uint64_t sub_10008E72C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10008E734LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10008E738(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E740(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryBatteryType()
{
  return &type metadata for AccessoryBatteryType;
}

unint64_t sub_10008E760()
{
  unint64_t result = qword_10099EAF8;
  if (!qword_10099EAF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E87D8, &type metadata for AccessoryBatteryType);
    atomic_store(result, (unint64_t *)&qword_10099EAF8);
  }

  return result;
}

unint64_t sub_10008E7A8()
{
  unint64_t result = qword_10099EB00;
  if (!qword_10099EB00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E88A0, &type metadata for AccessoryBatteryLevel);
    atomic_store(result, (unint64_t *)&qword_10099EB00);
  }

  return result;
}

unint64_t sub_10008E7F0()
{
  unint64_t result = qword_10099EB08;
  if (!qword_10099EB08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8958, &type metadata for AccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099EB08);
  }

  return result;
}

uint64_t sub_10008E834()
{
  return sub_100007864(&qword_10099EB10, type metadata accessor for RawAccessoryMetadata, (uint64_t)&unk_1007E8980);
}

unint64_t sub_10008E864()
{
  unint64_t result = qword_10099EB18;
  if (!qword_10099EB18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E88C8, &type metadata for AccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099EB18);
  }

  return result;
}

unint64_t sub_10008E8AC()
{
  unint64_t result = qword_10099EB20;
  if (!qword_10099EB20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E88F0, &type metadata for AccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099EB20);
  }

  return result;
}

unint64_t sub_10008E8F0()
{
  unint64_t result = qword_10099EB28;
  if (!qword_10099EB28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8760, &type metadata for AccessoryBatteryType);
    atomic_store(result, (unint64_t *)&qword_10099EB28);
  }

  return result;
}

unint64_t sub_10008E934()
{
  unint64_t result = qword_10099EB30;
  if (!qword_10099EB30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8828, &type metadata for AccessoryBatteryLevel);
    atomic_store(result, (unint64_t *)&qword_10099EB30);
  }

  return result;
}

unint64_t sub_10008E978()
{
  unint64_t result = qword_10099EB40;
  if (!qword_10099EB40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8C48, &type metadata for RawAccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099EB40);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for RawAccessoryMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

uint64_t storeEnumTagSinglePayload for RawAccessoryMetadata.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_10008EA98 + 4 * byte_1007E84C3[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10008EACC + 4 * byte_1007E84BE[v4]))();
}

uint64_t sub_10008EACC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008EAD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10008EADCLL);
  }
  return result;
}

uint64_t sub_10008EAE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10008EAF0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 10;
  return result;
}

uint64_t sub_10008EAF4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008EAFC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RawAccessoryMetadata.CodingKeys()
{
  return &type metadata for RawAccessoryMetadata.CodingKeys;
}

unint64_t sub_10008EB1C()
{
  unint64_t result = qword_10099EB50;
  if (!qword_10099EB50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8C20, &type metadata for RawAccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099EB50);
  }

  return result;
}

unint64_t sub_10008EB64()
{
  unint64_t result = qword_10099EB58;
  if (!qword_10099EB58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8B90, &type metadata for RawAccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099EB58);
  }

  return result;
}

unint64_t sub_10008EBAC()
{
  unint64_t result = qword_10099EB60;
  if (!qword_10099EB60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8BB8, &type metadata for RawAccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099EB60);
  }

  return result;
}

uint64_t sub_10008EBF0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1280(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008EC18@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1294(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008EC40()
{
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_10008EC88()
{
  return type metadata accessor for FirmwareUpdateScheduler(0LL);
}

uint64_t type metadata accessor for FirmwareUpdateScheduler(uint64_t a1)
{
  uint64_t result = qword_10099EBA0;
  if (!qword_10099EBA0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FirmwareUpdateScheduler);
  }
  return result;
}

void sub_10008ECCC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10008ED54(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

void sub_10008ED54(uint64_t a1)
{
  if (!qword_10099EBB0)
  {
    uint64_t v2 = sub_100004B78(&qword_1009A0840);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10099EBB0);
    }
  }

uint64_t sub_10008EDAC(uint64_t a1, uint64_t a2)
{
  return sub_10008EDB4(a2);
}

uint64_t sub_10008EDB4(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1007E8D38);
  char v3 = static AnyKeyPath.== infix(_:_:)(a1, KeyPath);
  uint64_t result = swift_release(KeyPath);
  if ((v3 & 1) != 0
    || (uint64_t v5 = swift_getKeyPath(&unk_1007E8D60),
        char v6 = static AnyKeyPath.== infix(_:_:)(a1, v5),
        uint64_t result = swift_release(v5),
        (v6 & 1) != 0))
  {
    uint64_t v7 = static os_log_type_t.default.getter(result);
    if (qword_10099B790 != -1) {
      swift_once(&qword_10099B790, sub_100651808);
    }
    uint64_t v8 = qword_100A2B0A0;
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_1007E4750;
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v11 = sub_1006A1280(v19);
    uint64_t result = swift_bridgeObjectRelease();
    if ((unsigned __int128)(v11 * (__int128)60LL) >> 64 == (60 * v11) >> 63)
    {
      uint64_t v12 = Double.description.getter(result, (double)(60 * v11));
      uint64_t v14 = v13;
      *(void *)(v10 + 56) = &type metadata for String;
      unint64_t v15 = sub_1000226F4();
      *(void *)(v10 + 64) = v15;
      *(void *)(v10 + 32) = v12;
      *(void *)(v10 + 40) = v14;
      OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
      uint64_t v16 = sub_1006A1294(v19);
      uint64_t result = swift_bridgeObjectRelease();
      if ((unsigned __int128)(v16 * (__int128)60LL) >> 64 == (60 * v16) >> 63)
      {
        uint64_t v17 = Double.description.getter(result, (double)(60 * v16));
        *(void *)(v10 + 96) = &type metadata for String;
        *(void *)(v10 + 104) = v15;
        *(void *)(v10 + 72) = v17;
        *(void *)(v10 + 80) = v18;
        os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  v8,  "Schedule configuration changed. Re-scheduling firmware update check with frequency: %@, grace period: %@",  104LL,  2LL,  v10);
        return swift_bridgeObjectRelease();
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10008F000@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1280(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008F028@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A1294(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008F050(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A0CB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10008F090()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A29F80);
  sub_10000A720(v0, (uint64_t)qword_100A29F80);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000013LL,  0x8000000100852060LL);
}

uint64_t sub_10008F110(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  char v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AB0();
  uint64_t v14 = (*(uint64_t (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v10);
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v17 = sub_100090114((unint64_t *)&qword_10099BAB0, (uint64_t *)&unk_1009A0CD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v16, v17, v4, v15);
  uint64_t v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003ALL,  0x8000000100851FD0LL,  v9,  v6,  v13,  0LL);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v18;
  return v2;
}

uint64_t sub_10008F2D4()
{
  return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.AccessoryPairingErrorManager.saveError",  68LL,  2LL,  sub_100090090);
}

uint64_t sub_10008F360(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v25 = *(void *)(v15 - 8);
  uint64_t v26 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v24[1] = *(void *)(a2 + 24);
  uint64_t v18 = (void *)swift_allocObject(&unk_10093B620, 64LL, 7LL);
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  v18[6] = a1;
  v18[7] = a6;
  aBlock[4] = sub_1000900EC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10093B638;
  uint64_t v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a5);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter(a3);
  unint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v22 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v21, v22, v12, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v26);
  return swift_release();
}

uint64_t sub_10008F580(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  id v72 = a2;
  uint64_t v9 = type metadata accessor for PairingError(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v77 = *(void *)(v12 - 8);
  uint64_t v78 = v12;
  __chkstk_darwin(v12);
  uint64_t v76 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for PairingErrorRecord(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v74 = v14;
  uint64_t v75 = v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v60 - v20;
  __chkstk_darwin(v19);
  unint64_t v70 = (char *)&v60 - v22;
  uint64_t v79 = *(void *)(a1 + 16);
  v82[0] = (uint64_t)sub_100576FBC();
  swift_bridgeObjectRetain(v82[0]);
  sub_100090154(v82);
  swift_bridgeObjectRelease();
  unint64_t v23 = *(void *)(v82[0] + 16);
  uint64_t v73 = v21;
  if (v23 >= 5)
  {
    unint64_t v64 = v23;
    uint64_t v71 = v82[0];
    unint64_t v66 = a4;
    uint64_t v24 = *(unsigned __int8 *)(v75 + 80);
    if (qword_10099B0B0 != -1) {
      swift_once(&qword_10099B0B0, sub_10008F090);
    }
    uint64_t v65 = a3;
    uint64_t v67 = v18;
    uint64_t v68 = v11;
    uint64_t v25 = (v24 + 32) & ~v24;
    uint64_t v26 = type metadata accessor for Logger(0LL);
    sub_10000A720(v26, (uint64_t)qword_100A29F80);
    uint64_t v27 = v71;
    uint64_t v28 = swift_retain_n(v71, 2LL);
    unint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.info.getter(v29);
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v69 = a5;
    if (v31)
    {
      uint64_t v62 = v27 + v25;
      uint64_t v63 = v25;
      unint64_t v32 = v64;
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      v82[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      uint64_t v61 = v33 + 4;
      uint64_t v35 = swift_retain();
      uint64_t v36 = ArraySlice.description.getter(v35, v62, 4LL, (2 * v32) | 1, v74);
      unint64_t v38 = v37;
      swift_release();
      uint64_t v80 = sub_1003F11D4(v36, v38, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v61, v33 + 12);
      swift_release_n(v27, 2LL);
      uint64_t v25 = v63;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Pruning %s.", v33, 0xCu);
      swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v27, 2LL);
      unint64_t v32 = v64;
    }

    uint64_t v39 = *(void *)(v75 + 72);
    swift_retain();
    unint64_t v40 = v32 - 4;
    uint64_t v75 = v39;
    uint64_t v41 = v27 + v25 + 4 * v39;
    uint64_t v42 = (uint64_t)v70;
    uint64_t v43 = v76;
    uint64_t v44 = v77;
    do
    {
      sub_10001DC4C(v41, v42, type metadata accessor for PairingErrorRecord);
      uint64_t v45 = *(void *)(v79 + 136);
      if (qword_10099B600 != -1) {
        swift_once(&qword_10099B600, sub_1005CAED0);
      }
      uint64_t v46 = v78;
      uint64_t v47 = sub_10000A720(v78, (uint64_t)qword_100A2AE58);
      uint64_t v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v47, v46);
      __chkstk_darwin(v48);
      *(&v60 - 4) = v45;
      *(&v60 - 3) = v42;
      *(&v60 - 2) = (uint64_t)v43;
      OS_dispatch_queue.sync<A>(execute:)(sub_1000901D4, &v60 - 6, &type metadata for Bool);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v46);
      sub_100018C68(v42, type metadata accessor for PairingErrorRecord);
      v41 += v75;
      --v40;
    }

    while (v40);
    swift_release_n(v71, 2LL);
    uint64_t v11 = v68;
    a5 = v69;
    uint64_t v21 = v73;
    a4 = v66;
    uint64_t v18 = v67;
    a3 = v65;
  }

  else
  {
    swift_release();
  }

  swift_bridgeObjectRetain(a4);
  sub_1005C9C5C(v72, a3, a4, (uint64_t)v11);
  UUID.init()(v49);
  sub_10001DC4C((uint64_t)v11, (uint64_t)&v21[*(int *)(v74 + 20)], type metadata accessor for PairingError);
  if (qword_10099B0B0 != -1) {
    swift_once(&qword_10099B0B0, sub_10008F090);
  }
  uint64_t v50 = type metadata accessor for Logger(0LL);
  sub_10000A720(v50, (uint64_t)qword_100A29F80);
  uint64_t v51 = sub_10001DC4C((uint64_t)v21, (uint64_t)v18, type metadata accessor for PairingErrorRecord);
  unint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v53 = static os_log_type_t.info.getter(v52);
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v55 = swift_slowAlloc(32LL, -1LL);
    v82[0] = v55;
    *(_DWORD *)uint64_t v54 = 136315138;
    uint64_t v56 = sub_1005CB078();
    uint64_t v80 = sub_1003F11D4(v56, v57, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v18, type metadata accessor for PairingErrorRecord);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Saving %s.", v54, 0xCu);
    swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v58 = v55;
    uint64_t v21 = v73;
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v18, type metadata accessor for PairingErrorRecord);
  }

  swift_retain();
  sub_1006B3298((uint64_t)v21, (uint64_t)sub_1000901F0, a5);
  swift_release();
  sub_100018C68((uint64_t)v21, type metadata accessor for PairingErrorRecord);
  return sub_100018C68((uint64_t)v11, type metadata accessor for PairingError);
}

void sub_10008FC20(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PairingErrorRecord(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v29 - v6;
  uint64_t v8 = sub_100004AEC(&qword_10099ED40);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_1000901F8(a1, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    uint64_t v11 = *v10;
    if (qword_10099B0B0 != -1) {
      swift_once(&qword_10099B0B0, sub_10008F090);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_10000A720(v12, (uint64_t)qword_100A29F80);
    swift_errorRetain(v11);
    uint64_t v13 = swift_errorRetain(v11);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v11;
      uint64_t v30 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_errorRetain(v11);
      uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v19 = String.init<A>(describing:)(&v29, v18);
      uint64_t v29 = sub_1003F11D4(v19, v20, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to save PairingErrorRecord. Error %s.", v16, 0xCu);
      swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);

      swift_errorRelease(v11);
    }

    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      swift_errorRelease(v11);
    }
  }

  else
  {
    sub_100090240((uint64_t)v10, (uint64_t)v7);
    if (qword_10099B0B0 != -1) {
      swift_once(&qword_10099B0B0, sub_10008F090);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A29F80);
    uint64_t v22 = sub_10001DC4C((uint64_t)v7, (uint64_t)v5, type metadata accessor for PairingErrorRecord);
    unint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.info.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v27 = sub_1005CB078();
      uint64_t v29 = sub_1003F11D4(v27, v28, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v5, type metadata accessor for PairingErrorRecord);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Saved: %s.", v25, 0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {

      sub_100018C68((uint64_t)v5, type metadata accessor for PairingErrorRecord);
    }

    sub_100018C68((uint64_t)v7, type metadata accessor for PairingErrorRecord);
  }

uint64_t sub_100090044()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for AccessoryPairingErrorManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd28AccessoryPairingErrorManager);
}

uint64_t sub_100090090(uint64_t a1)
{
  return sub_10008F360( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_1000900B0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000900EC()
{
  return sub_10008F580( *(void *)(v0 + 16),  *(void **)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_1000900FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009010C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100090114(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100004B78(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

Swift::Int sub_100090154(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for PairingErrorRecord(0LL) - 8);
  uint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = (void *)sub_1003D499C(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100090284(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1000901D4@<X0>(char *a1@<X8>)
{
  return sub_1005741E0(a1);
}

void sub_1000901F0(uint64_t a1)
{
}

uint64_t sub_1000901F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099ED40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100090240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PairingErrorRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

Swift::Int sub_100090284(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v143 = type metadata accessor for PairingErrorRecord(0LL);
  uint64_t v4 = *(void *)(v143 - 8);
  uint64_t v5 = __chkstk_darwin(v143);
  uint64_t v133 = (uint64_t)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v144 = (uint64_t)&v127 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v140 = (uint64_t)&v127 - v10;
  __chkstk_darwin(v9);
  uint64_t v139 = (uint64_t)&v127 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_138;
    }
    if (v12) {
      return sub_100090C70(0LL, v12, 1LL, a1);
    }
    return result;
  }

  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_146;
  }
  uint64_t v136 = v4;
  Swift::Int v129 = result;
  if (v12 < 2)
  {
    uint64_t v18 = (char *)_swiftEmptyArrayStorage;
    unint64_t v135 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v128 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
LABEL_104:
      if (v20 >= 2)
      {
        uint64_t v121 = *a1;
        do
        {
          unint64_t v122 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_133;
          }
          if (!v121) {
            goto LABEL_145;
          }
          uint64_t v123 = *(void *)&v18[16 * v122 + 32];
          uint64_t v124 = *(void *)&v18[16 * v20 + 24];
          sub_100090EC8( v121 + *(void *)(v136 + 72) * v123,  v121 + *(void *)(v136 + 72) * *(void *)&v18[16 * v20 + 16],  v121 + *(void *)(v136 + 72) * v124,  v135);
          if (v2) {
            break;
          }
          if (v124 < v123) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0) {
            uint64_t v18 = sub_1003CBA90((uint64_t)v18);
          }
          if (v122 >= *((void *)v18 + 2)) {
            goto LABEL_135;
          }
          unint64_t v125 = &v18[16 * v122 + 32];
          *(void *)unint64_t v125 = v123;
          *((void *)v125 + 1) = v124;
          unint64_t v126 = *((void *)v18 + 2);
          if (v20 > v126) {
            goto LABEL_136;
          }
          memmove(&v18[16 * v20 + 16], &v18[16 * v20 + 32], 16 * (v126 - v20));
          *((void *)v18 + 2) = v126 - 1;
          unint64_t v20 = v126 - 1;
        }

        while (v126 > 2);
      }

LABEL_115:
      swift_bridgeObjectRelease();
      v128[2] = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v143);
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v128 = (void *)v16;
    unint64_t v135 = v16 + ((v17 + 32) & ~v17);
  }

  Swift::Int v19 = 0LL;
  uint64_t v18 = (char *)_swiftEmptyArrayStorage;
  uint64_t v142 = a1;
  while (1)
  {
    Swift::Int v21 = v19;
    Swift::Int v22 = v19 + 1;
    Swift::Int v134 = v19;
    if (v19 + 1 >= v12)
    {
      Swift::Int v29 = v19 + 1;
      Swift::Int v38 = v19;
    }

    else
    {
      uint64_t v130 = v18;
      uint64_t v131 = v2;
      uint64_t v132 = *a1;
      uint64_t v23 = v132;
      Swift::Int v24 = *(void *)(v136 + 72);
      Swift::Int v141 = v12;
      uint64_t v25 = v139;
      sub_10001DC4C(v132 + v24 * v22, v139, type metadata accessor for PairingErrorRecord);
      uint64_t v26 = v140;
      sub_10001DC4C(v23 + v24 * v21, v140, type metadata accessor for PairingErrorRecord);
      uint64_t v27 = *(int *)(v143 + 20);
      uint64_t v137 = type metadata accessor for PairingError(0LL);
      uint64_t v138 = Date.compare(_:)(v26 + v27 + *(int *)(v137 + 24));
      sub_100018C68(v26, type metadata accessor for PairingErrorRecord);
      uint64_t v28 = v25;
      Swift::Int v12 = v141;
      sub_100018C68(v28, type metadata accessor for PairingErrorRecord);
      Swift::Int v29 = v21 + 2;
      Swift::Int v145 = v24;
      if (v21 + 2 < v12)
      {
        uint64_t v30 = v24 * v22;
        uint64_t v31 = v132;
        Swift::Int v32 = v24 * v29;
        while (1)
        {
          Swift::Int v33 = v29;
          uint64_t v34 = v139;
          int v35 = v138 == 1;
          sub_10001DC4C(v31 + v32, v139, type metadata accessor for PairingErrorRecord);
          uint64_t v36 = v140;
          sub_10001DC4C(v31 + v30, v140, type metadata accessor for PairingErrorRecord);
          int v37 = Date.compare(_:)(v36 + *(int *)(v143 + 20) + *(int *)(v137 + 24)) != 1;
          sub_100018C68(v36, type metadata accessor for PairingErrorRecord);
          sub_100018C68(v34, type metadata accessor for PairingErrorRecord);
          if (v35 == v37) {
            break;
          }
          Swift::Int v29 = v33 + 1;
          v31 += v145;
          Swift::Int v12 = v141;
          if (v141 == v33 + 1)
          {
            Swift::Int v29 = v141;
            a1 = v142;
            goto LABEL_23;
          }
        }

        Swift::Int v12 = v141;
        a1 = v142;
        Swift::Int v29 = v33;
      }

        __break(1u);
        JUMPOUT(0x1000AF3CCLL);
      }

      v209[2] = 0;
      *(_OWORD *)(v82 + 8) = xmmword_1007E7660;
      sub_10001736C(v144, *((unint64_t *)&v144 + 1));
      sub_10001736C(v144, *((unint64_t *)&v144 + 1));
      sub_100178C64(6LL, v144, *((uint64_t *)&v144 + 1));
      Swift::Int v145 = v217;
      sub_10001736C(v217, *((unint64_t *)&v217 + 1));
      unint64_t v146 = v201;
      uint64_t v204 = *((void *)&v145 + 1);
      uint64_t v211 = (uint8_t *)v145;
      MACAddress.init(addressToSanitize:type:)(v145, *((void *)&v145 + 1), 1LL);
      uint64_t v117 = v205;
      uint64_t v147 = v206;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v146, 1LL, v205) != 1)
      {
        uint64_t v148 = *(void (**)(char *, char *, uint64_t))(v147 + 32);
        uint64_t v149 = v199;
        v148(v199, v146, v117);
        sub_1000869A4(v144, *((uint64_t *)&v144 + 1));
        sub_1000B4B64((uint64_t)v213);
        sub_100016F9C((uint64_t)v211, v204);
        v148((char *)(v82 + v84[8]), v149, v117);
LABEL_80:
        uint64_t v81 = 0;
        uint64_t v211 = 0LL;
        uint64_t v204 = 0xC000000000000000LL;
        goto LABEL_81;
      }

      goto LABEL_113;
    }

    uint64_t v124 = v97;
    uint64_t v82 = (uint64_t)v209;
    v209[2] = v96 & 1;
    unint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
    uint64_t v127 = v126;
    a1 = v50;
    uint64_t v84 = (int *)v212;
    if (*(void *)(v50 + 16))
    {
      uint64_t v128 = v125;
      sub_10001736C((uint64_t)v211, v124);
      Swift::Int v129 = sub_10030CF14(v128, v127);
      uint64_t v117 = v205;
      if ((v130 & 1) != 0)
      {
        sub_10006A650(*(void *)(a1 + 56) + 32 * v129, (uint64_t)&v220);
      }

      else
      {
        uint64_t v220 = 0u;
        uint64_t v221 = 0u;
      }
    }

    else
    {
      uint64_t v220 = 0u;
      uint64_t v221 = 0u;
      sub_10001736C((uint64_t)v211, v124);
      uint64_t v117 = v205;
    }

    swift_bridgeObjectRelease();
    if (*((void *)&v221 + 1))
    {
      if ((swift_dynamicCast(&v217, &v220, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
      {
LABEL_69:
        MACAddress.init(stringLiteral:)(0x3030303030303030LL, 0xEC00000030303030LL);
LABEL_70:
        *(void *)(v82 + 8) = v211;
        *(void *)(v82 + 16) = v124;
        uint64_t v204 = v124;
        uint64_t v81 = 1;
LABEL_81:
        int v116 = 1;
        goto LABEL_82;
      }

      uint64_t v155 = v204;
      MACAddress.init(data:type:)(v217, *((void *)&v217 + 1), 1LL);
      uint64_t v156 = v206;
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v206 + 48))(v155, 1LL, v117) != 1)
      {
        uint64_t v190 = *(void (**)(char *, unint64_t, uint64_t))(v156 + 32);
        uint64_t v191 = v194;
        v190(v194, v155, v117);
        v190((char *)(v82 + v84[8]), (unint64_t)v191, v117);
        goto LABEL_70;
      }

      uint64_t v157 = (uint64_t *)&unk_1009AE480;
      uint64_t v158 = (__int128 *)v155;
    }

    else
    {
      uint64_t v157 = &qword_10099E200;
      uint64_t v158 = &v220;
    }

    sub_100015794((uint64_t)v158, v157);
    goto LABEL_69;
  }

  uint64_t v80 = v60;
  uint64_t v204 = v61;
  swift_bridgeObjectRelease();
  uint64_t v81 = v80;
  uint64_t v82 = (uint64_t)v209;
  v209[2] = BYTE1(v80) & 1;
  if (v80 != 1)
  {
    unint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
    unint64_t v120 = v119;
    a1 = v50;
    uint64_t v84 = (int *)v212;
    if (*(void *)(v50 + 16))
    {
      uint64_t v121 = v118;
      sub_10001736C((uint64_t)v211, v204);
      unint64_t v122 = sub_10030CF14(v121, v120);
      uint64_t v117 = v205;
      if ((v123 & 1) != 0)
      {
        sub_10006A650(*(void *)(a1 + 56) + 32 * v122, (uint64_t)&v220);
      }

      else
      {
        uint64_t v220 = 0u;
        uint64_t v221 = 0u;
      }
    }

    else
    {
      uint64_t v220 = 0u;
      uint64_t v221 = 0u;
      sub_10001736C((uint64_t)v211, v204);
      uint64_t v117 = v205;
    }

    swift_bridgeObjectRelease();
    if (*((void *)&v221 + 1))
    {
      if ((swift_dynamicCast(&v217, &v220, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
      {
LABEL_60:
        MACAddress.init(stringLiteral:)(0x3030303030303030LL, 0xEC00000030303030LL);
LABEL_61:
        int v116 = 0;
        uint64_t v154 = v204;
        *(void *)(v82 + 8) = v211;
        *(void *)(v82 + 16) = v154;
        goto LABEL_82;
      }

      uint64_t v150 = (__int128 *)v202;
      MACAddress.init(data:type:)(v217, *((void *)&v217 + 1), 1LL);
      uint64_t v151 = v206;
      if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v206 + 48))(v150, 1LL, v117) != 1)
      {
        uint64_t v188 = *(void (**)(char *, __int128 *, uint64_t))(v151 + 32);
        uint64_t v189 = v193;
        v188(v193, v150, v117);
        v188((char *)(v82 + v84[8]), (__int128 *)v189, v117);
        goto LABEL_61;
      }

      uint64_t v152 = (uint64_t *)&unk_1009AE480;
      uint64_t v153 = v150;
    }

    else
    {
      uint64_t v152 = &qword_10099E200;
      uint64_t v153 = &v220;
    }

    sub_100015794((uint64_t)v153, v152);
    goto LABEL_60;
  }

  a1 = v50;
  swift_bridgeObjectRetain(v50);
  sub_1000B354C(v83, v213);
  sub_100015750((uint64_t)v213, (uint64_t)&v220, &qword_1009A04F0);
  uint64_t v84 = (int *)v212;
  if (v222 >> 60 == 15)
  {
    if (qword_10099B8C8 != -1) {
      swift_once(&qword_10099B8C8, sub_10073B768);
    }
    uint64_t v85 = type metadata accessor for Logger(0LL);
    sub_10000A720(v85, (uint64_t)qword_100A2B390);
    swift_bridgeObjectRetain(v50);
    unint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
    uint64_t v88 = static os_log_type_t.error.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v90 = swift_slowAlloc(32LL, -1LL);
      *(void *)&uint64_t v217 = v90;
      *(_DWORD *)uint64_t v89 = 136446210;
      BOOL v209 = (char *)(v89 + 4);
      swift_bridgeObjectRetain(v50);
      uint64_t v210 = (char *)&type metadata for Any + 8;
      uint64_t v92 = Dictionary.description.getter( v91,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      uint64_t v94 = v93;
      swift_bridgeObjectRelease();
      *(void *)&v215[0] = sub_1003F11D4(v92, v94, (uint64_t *)&v217);
      uint64_t v95 = (int *)v212;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, (char *)v215 + 8, v209, v89 + 12);
      swift_bridgeObjectRelease_n(a1, 2LL);
      uint64_t v84 = v95;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "Failed to create BluetoothAdvertisementData from: %{public}s",  v89,  0xCu);
      swift_arrayDestroy(v90, 1LL, v210);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v89, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v50, 2LL);
    }

    sub_1000B4D10(v80, (uint64_t)v211, v204);
    goto LABEL_75;
  }

  uint64_t v136 = v220;
  *(_OWORD *)(v82 + 8) = xmmword_1007E7660;
  if ((*((void *)&v136 + 1) & 0x2000000000000000LL) == 0)
  {
    sub_10001736C(v136, *((unint64_t *)&v136 + 1));
    sub_10001736C(v136, *((unint64_t *)&v136 + 1));
    sub_100178C64(6LL, v136, *((uint64_t *)&v136 + 1));
    uint64_t v137 = v217;
    sub_10001736C(v217, *((unint64_t *)&v217 + 1));
    uint64_t v138 = v197;
    uint64_t v202 = v137;
    MACAddress.init(addressToSanitize:type:)(v137, *((void *)&v137 + 1), 1LL);
    uint64_t v139 = v205;
    uint64_t v140 = v206;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v138, 1LL, v205) != 1)
    {
      Swift::Int v141 = *(void (**)(char *, char *, uint64_t))(v140 + 32);
      uint64_t v142 = v195;
      v141(v195, v138, v139);
      sub_1000869A4(v136, *((uint64_t *)&v136 + 1));
      sub_1000B4B64((uint64_t)v213);
      sub_1000B4D10(v80, (uint64_t)v211, v204);
      sub_100016F9C(v202, *((unint64_t *)&v202 + 1));
      uint64_t v143 = (int *)v212;
      v141((char *)(v82 + *(int *)(v212 + 32)), v142, v139);
      uint64_t v84 = v143;
      int v116 = 0;
      uint64_t v211 = 0LL;
      uint64_t v204 = 0xC000000000000000LL;
      uint64_t v81 = 1;
      a1 = v50;
      uint64_t v117 = v139;
      goto LABEL_82;
    }

      swift_bridgeObjectRelease();
      v120[2] = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v15 = v12;
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v136);
    *(void *)(v17 + 16) = v16;
    Swift::Int v12 = v15;
    uint64_t v18 = *(unsigned __int8 *)(v4 + 80);
    unint64_t v120 = (void *)v17;
    uint64_t v127 = v17 + ((v18 + 32) & ~v18);
  }

  unint64_t v20 = 0LL;
  uint64_t v130 = v132 + 8;
  uint64_t v131 = v134 + 8;
  Swift::Int v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v133 = a1;
  while (1)
  {
    Swift::Int v22 = v20 + 1;
    unint64_t v126 = v20;
    if (v20 + 1 >= v12)
    {
      int v35 = v20 + 1;
    }

    else
    {
      uint64_t v23 = v4;
      Swift::Int v24 = *a1;
      uint64_t v25 = *(void *)(v23 + 72);
      sub_10001DC4C(*a1 + v25 * v22, v134, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v26 = v132;
      sub_10001DC4C(v24 + v25 * v20, v132, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v27 = *(int *)(v136 + 20);
      LODWORD(v135) = *(_DWORD *)(v131 + v27);
      LODWORD(v129) = *(_DWORD *)(v130 + v27);
      sub_100018C68(v26, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      sub_100018C68(v134, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      uint64_t v139 = v12;
      uint64_t v123 = v24;
      uint64_t v138 = v25;
      if (v20 + 2 >= v12)
      {
        int v35 = v20 + 2;
        uint64_t v4 = v128;
      }

      else
      {
        unint64_t v122 = v19;
        uint64_t v124 = v25 * v22;
        uint64_t v28 = v24;
        Swift::Int v29 = v20 + 2;
        uint64_t v30 = v25 * (v20 + 2);
        while (1)
        {
          uint64_t v31 = v135 < v129;
          Swift::Int v32 = v134;
          sub_10001DC4C(v28 + v30, v134, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          Swift::Int v33 = v132;
          sub_10001DC4C(v28 + v124, v132, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          uint64_t v34 = *(_DWORD *)(v131 + *(int *)(v136 + 20)) >= *(_DWORD *)(v130 + *(int *)(v136 + 20));
          sub_100018C68(v33, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          sub_100018C68(v32, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          if (v31 == v34) {
            break;
          }
          v28 += v138;
          ++v29;
          Swift::Int v12 = v139;
          if (v139 == v29)
          {
            int v35 = v139;
            uint64_t v4 = v128;
            a1 = v133;
            Swift::Int v19 = v122;
            unint64_t v20 = v126;
            goto LABEL_24;
          }
        }

        uint64_t v4 = v128;
        a1 = v133;
        Swift::Int v19 = v122;
        int v35 = v29;
        unint64_t v20 = v126;
        Swift::Int v12 = v139;
      }

      swift_bridgeObjectRelease();
      v118[2] = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v127);
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v126 + 80);
    unint64_t v118 = (void *)v16;
    unint64_t v125 = v16 + ((v17 + 32) & ~v17);
  }

  Swift::Int v19 = 0LL;
  uint64_t v18 = (char *)_swiftEmptyArrayStorage;
  uint64_t v131 = a1;
  while (1)
  {
    Swift::Int v21 = v19 + 1;
    uint64_t v124 = v19;
    if (v19 + 1 >= v12)
    {
      uint64_t v28 = v19 + 1;
      goto LABEL_24;
    }

    uint64_t v121 = *a1;
    Swift::Int v22 = v121;
    uint64_t v133 = *(void *)(v126 + 72);
    uint64_t v23 = v129;
    sub_10001581C(v121 + v133 * v21, (uint64_t)v129, (uint64_t *)&unk_1009AC320);
    Swift::Int v24 = v22 + v133 * v19;
    uint64_t v25 = v130;
    sub_10001581C(v24, (uint64_t)v130, (uint64_t *)&unk_1009AC320);
    uint64_t v26 = *v23;
    uint64_t v27 = *v25;
    sub_100015794((uint64_t)v25, (uint64_t *)&unk_1009AC320);
    sub_100015794((uint64_t)v23, (uint64_t *)&unk_1009AC320);
    uint64_t v28 = v19 + 2;
    if (v19 + 2 >= v12)
    {
LABEL_21:
      if (v27 >= v26) {
        goto LABEL_24;
      }
LABEL_42:
      if (v28 < v19) {
        goto LABEL_139;
      }
      if (v19 < v28)
      {
        uint64_t v128 = v12;
        unint64_t v120 = v18;
        uint64_t v50 = 0LL;
        uint64_t v51 = v133;
        uint64_t v52 = v133 * (v28 - 1);
        Swift::Int v53 = v28 * v133;
        uint64_t v54 = v19 * v133;
        do
        {
          if (v19 != v28 + v50 - 1)
          {
            unint64_t v122 = v2;
            uint64_t v55 = v121;
            if (!v121) {
              goto LABEL_144;
            }
            uint64_t v56 = v121 + v54;
            sub_100015750(v121 + v54, v123, (uint64_t *)&unk_1009AC320);
            if (v54 < v52 || v56 >= v55 + v53)
            {
              swift_arrayInitWithTakeFrontToBack(v55 + v54, v55 + v52, 1LL, v127);
            }

            else if (v54 != v52)
            {
              swift_arrayInitWithTakeBackToFront(v55 + v54, v55 + v52);
            }

            sub_100015750(v123, v55 + v52, (uint64_t *)&unk_1009AC320);
            a1 = v131;
            uint64_t v2 = v122;
            uint64_t v51 = v133;
          }

          ++v19;
          --v50;
          v52 -= v51;
          v53 -= v51;
          v54 += v51;
        }

        while (v19 < v28 + v50);
        uint64_t v18 = v120;
        Swift::Int v19 = v124;
        Swift::Int v12 = v128;
      }

      goto LABEL_24;
    }

    unint64_t v122 = v2;
    unint64_t v120 = v18;
    uint64_t v128 = v133 * v21;
    Swift::Int v29 = v121;
    uint64_t v30 = v19 + 2;
    uint64_t v31 = v133 * (v19 + 2);
    while (1)
    {
      Swift::Int v32 = v12;
      Swift::Int v33 = v129;
      sub_10001581C(v29 + v31, (uint64_t)v129, (uint64_t *)&unk_1009AC320);
      uint64_t v34 = v130;
      sub_10001581C(v29 + v128, (uint64_t)v130, (uint64_t *)&unk_1009AC320);
      int v35 = *v34 >= *v33;
      sub_100015794((uint64_t)v34, (uint64_t *)&unk_1009AC320);
      sub_100015794((uint64_t)v33, (uint64_t *)&unk_1009AC320);
      if (v27 < v26 == v35) {
        break;
      }
      v29 += v133;
      ++v30;
      Swift::Int v12 = v32;
      if (v32 == v30)
      {
        uint64_t v28 = v32;
        uint64_t v18 = v120;
        uint64_t v2 = v122;
        Swift::Int v19 = v124;
        goto LABEL_21;
      }
    }

    uint64_t v18 = v120;
    uint64_t v28 = v30;
    uint64_t v2 = v122;
    Swift::Int v19 = v124;
    Swift::Int v12 = v32;
    if (v27 < v26) {
      goto LABEL_42;
    }
LABEL_24:
    if (v28 >= v12) {
      goto LABEL_56;
    }
    if (__OFSUB__(v28, v19)) {
      goto LABEL_137;
    }
    if (v28 - v19 >= v119) {
      goto LABEL_56;
    }
    if (__OFADD__(v19, v119)) {
      goto LABEL_140;
    }
    uint64_t v36 = v19 + v119 >= v12 ? v12 : v19 + v119;
    if (v36 < v19) {
      break;
    }
    if (v28 != v36)
    {
      unint64_t v120 = v18;
      uint64_t v121 = v36;
      unint64_t v122 = v2;
      int v37 = *(void *)(v126 + 72);
      uint64_t v133 = v37 * (v28 - 1);
      uint64_t v128 = v37;
      Swift::Int v38 = v28 * v37;
      do
      {
        uint64_t v39 = 0LL;
        while (1)
        {
          Swift::Int v40 = v28;
          uint64_t v41 = *a1;
          Swift::Int v42 = v129;
          sub_10001581C(v38 + v39 + *a1, (uint64_t)v129, (uint64_t *)&unk_1009AC320);
          Swift::Int v43 = v133 + v39 + v41;
          uint64_t v44 = v130;
          sub_10001581C(v43, (uint64_t)v130, (uint64_t *)&unk_1009AC320);
          uint64_t v45 = *v42;
          Swift::Int v46 = *v44;
          sub_100015794((uint64_t)v44, (uint64_t *)&unk_1009AC320);
          sub_100015794((uint64_t)v42, (uint64_t *)&unk_1009AC320);
          if (v46 >= v45) {
            break;
          }
          unint64_t v47 = *a1;
          if (!*a1) {
            goto LABEL_142;
          }
          uint64_t v48 = v47 + v38 + v39;
          Swift::Int v49 = v47 + v133 + v39;
          sub_100015750(v48, v132, (uint64_t *)&unk_1009AC320);
          swift_arrayInitWithTakeFrontToBack(v48, v49, 1LL, v127);
          sub_100015750(v132, v49, (uint64_t *)&unk_1009AC320);
          v39 -= v128;
          ++v19;
          uint64_t v28 = v40;
          a1 = v131;
          if (v40 == v19) {
            goto LABEL_35;
          }
        }

        uint64_t v28 = v40;
LABEL_35:
        ++v28;
        v133 += v128;
        v38 += v128;
        Swift::Int v19 = v124;
      }

      while (v28 != v121);
      uint64_t v28 = v121;
      uint64_t v2 = v122;
      uint64_t v18 = v120;
    }

      swift_bridgeObjectRelease();
      v110[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v110 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(void *)(v7 + 16) = v6;
    uint64_t v110 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = *a1;
  uint64_t v109 = v10 + 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v112 = v3;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    uint64_t v18 = v17[1];
    if (v15 == *v17 && v16 == v18)
    {
      Swift::Int v21 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      unint64_t v20 = 0;
    }

    else
    {
      unint64_t v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 1LL);
      Swift::Int v21 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }

    Swift::Int v22 = (uint64_t *)(v109 + 16 * v21);
    do
    {
      Swift::Int v24 = *(v22 - 1);
      uint64_t v25 = *v22;
      uint64_t v26 = (void *)(v10 + 16 * v9);
      uint64_t v27 = v26[1];
      if (v24 == *v26 && v25 == v27)
      {
        if ((v20 & 1) != 0) {
          goto LABEL_37;
        }
      }

      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 1LL)) & 1) != 0)
      {
        goto LABEL_36;
      }

      v22 += 2;
      uint64_t v23 = v21 + 1;
      uint64_t v9 = v21;
      Swift::Int v21 = v23;
    }

    while (v23 < v3);
    Swift::Int v21 = v23;
LABEL_36:
    uint64_t v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13) {
        goto LABEL_155;
      }
      if (v13 < v21)
      {
        Swift::Int v29 = 16 * v21;
        uint64_t v30 = 16 * v13;
        uint64_t v31 = v21;
        Swift::Int v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10) {
              goto LABEL_158;
            }
            Swift::Int v33 = v10 + v29;
            uint64_t v34 = *(void *)(v10 + v30);
            int v35 = *(void *)(v10 + v30 + 8);
            *(_OWORD *)(v10 + v30) = *(_OWORD *)(v10 + v29 - 16);
            *(void *)(v33 - 16) = v34;
            *(void *)(v33 - 8) = v35;
          }

          ++v32;
          v29 -= 16LL;
          v30 += 16LL;
        }

        while (v32 < v31);
      }

LABEL_55:
    if (v29 < v38) {
      goto LABEL_132;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    Swift::Int v141 = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v18 = sub_1003CB1DC(0LL, *((void *)v18 + 2) + 1LL, 1, v18);
    }
    unint64_t v70 = *((void *)v18 + 2);
    unint64_t v69 = *((void *)v18 + 3);
    unint64_t v20 = v70 + 1;
    if (v70 >= v69 >> 1) {
      uint64_t v18 = sub_1003CB1DC((char *)(v69 > 1), v70 + 1, 1, v18);
    }
    uint64_t v71 = v2;
    *((void *)v18 + 2) = v20;
    id v72 = v18 + 32;
    uint64_t v73 = &v18[16 * v70 + 32];
    Swift::Int v74 = v141;
    *(void *)uint64_t v73 = v38;
    *((void *)v73 + 1) = v74;
    if (v70)
    {
      while (1)
      {
        unint64_t v75 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v80 = &v72[16 * v20];
          uint64_t v81 = *((void *)v80 - 8);
          uint64_t v82 = *((void *)v80 - 7);
          BOOL v86 = __OFSUB__(v82, v81);
          uint64_t v83 = v82 - v81;
          if (v86) {
            goto LABEL_121;
          }
          uint64_t v85 = *((void *)v80 - 6);
          uint64_t v84 = *((void *)v80 - 5);
          BOOL v86 = __OFSUB__(v84, v85);
          uint64_t v78 = v84 - v85;
          char v79 = v86;
          if (v86) {
            goto LABEL_122;
          }
          unint64_t v87 = v20 - 2;
          uint64_t v88 = &v72[16 * v20 - 32];
          uint64_t v90 = *(void *)v88;
          uint64_t v89 = *((void *)v88 + 1);
          BOOL v86 = __OFSUB__(v89, v90);
          uint64_t v91 = v89 - v90;
          if (v86) {
            goto LABEL_124;
          }
          BOOL v86 = __OFADD__(v78, v91);
          uint64_t v92 = v78 + v91;
          if (v86) {
            goto LABEL_127;
          }
          if (v92 >= v83)
          {
            uint64_t v110 = &v72[16 * v75];
            uint64_t v112 = *(void *)v110;
            uint64_t v111 = *((void *)v110 + 1);
            BOOL v86 = __OFSUB__(v111, v112);
            uint64_t v113 = v111 - v112;
            if (v86) {
              goto LABEL_131;
            }
            BOOL v103 = v78 < v113;
            goto LABEL_92;
          }
        }

        else
        {
          if (v20 != 3)
          {
            uint64_t v104 = *((void *)v18 + 4);
            uint64_t v105 = *((void *)v18 + 5);
            BOOL v86 = __OFSUB__(v105, v104);
            uint64_t v97 = v105 - v104;
            char v98 = v86;
            goto LABEL_86;
          }

          uint64_t v77 = *((void *)v18 + 4);
          uint64_t v76 = *((void *)v18 + 5);
          BOOL v86 = __OFSUB__(v76, v77);
          uint64_t v78 = v76 - v77;
          char v79 = v86;
        }

        if ((v79 & 1) != 0) {
          goto LABEL_123;
        }
        unint64_t v87 = v20 - 2;
        uint64_t v93 = &v72[16 * v20 - 32];
        uint64_t v95 = *(void *)v93;
        uint64_t v94 = *((void *)v93 + 1);
        BOOL v96 = __OFSUB__(v94, v95);
        uint64_t v97 = v94 - v95;
        char v98 = v96;
        if (v96) {
          goto LABEL_126;
        }
        unsigned int v99 = &v72[16 * v75];
        uint64_t v101 = *(void *)v99;
        uint64_t v100 = *((void *)v99 + 1);
        BOOL v86 = __OFSUB__(v100, v101);
        uint64_t v102 = v100 - v101;
        if (v86) {
          goto LABEL_129;
        }
        if (__OFADD__(v97, v102)) {
          goto LABEL_130;
        }
        if (v97 + v102 >= v78)
        {
          BOOL v103 = v78 < v102;
LABEL_92:
          if (v103) {
            unint64_t v75 = v87;
          }
          goto LABEL_94;
        }

    Swift::Int v74 = v65 + 1;
    uint64_t v68 = (uint64_t)v99;
    if (__OFADD__(v65, 1LL))
    {
      __break(1u);
      goto LABEL_81;
    }

    unint64_t v69 = (uint64_t)v98;
    uint64_t v41 = (char *)&qword_1009A6618;
    if (v74 >= v94)
    {
LABEL_63:
      uint64_t v76 = sub_100004AEC(&qword_1009A6618);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56LL))(v69, 1LL, 1LL, v76);
      uint64_t v63 = 0LL;
LABEL_64:
      sub_100015750(v69, v68, &qword_1009A6608);
      uint64_t v77 = sub_100004AEC(&qword_1009A6618);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 48LL))(v68, 1LL, v77) == 1)
      {
        swift_release();
        uint64_t v57 = v92;
        uint64_t v56 = v89;
        if (v92 == v91) {
          goto LABEL_79;
        }
        continue;
      }

      uint64_t v78 = *(void *)(v68 + *(int *)(v77 + 48));
      sub_10001DC4C((uint64_t)v100, v58, type metadata accessor for LocationFetcher);
      char v79 = v101;
      uint64_t v41 = v97;
      uint64_t v80 = v68;
      uint64_t v81 = v102;
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v97, v80, v102);
      uint64_t v82 = objc_autoreleasePoolPush();
      sub_100233900(v58, (uint64_t)v41, v78, v104);
      objc_autoreleasePoolPop(v82);
      swift_bridgeObjectRelease();
      sub_100018C68(v58, type metadata accessor for LocationFetcher);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v41, v81);
      if (v63) {
        goto LABEL_53;
      }
      goto LABEL_55;
    }

    break;
  }

  unint64_t v75 = *(void *)(v93 + 8 * v74);
  if (v75) {
    goto LABEL_58;
  }
  v65 += 2LL;
  if (v74 + 1 >= v94)
  {
    uint64_t v65 = v74;
    goto LABEL_63;
  }

  unint64_t v75 = *(void *)(v93 + 8 * v65);
  if (v75)
  {
    ++v74;
    goto LABEL_58;
  }

  if (v74 + 2 >= v94) {
    goto LABEL_63;
  }
  unint64_t v75 = *(void *)(v93 + 8 * (v74 + 2));
  if (v75)
  {
    v74 += 2LL;
    goto LABEL_58;
  }

  uint64_t v83 = v74 + 3;
  if (v74 + 3 >= v94)
  {
    uint64_t v65 = v74 + 2;
    goto LABEL_63;
  }

  unint64_t v75 = *(void *)(v93 + 8 * v83);
  if (v75)
  {
    v74 += 3LL;
LABEL_58:
    uint64_t v63 = (v75 - 1) & v75;
    uint64_t v67 = __clz(__rbit64(v75)) + (v74 << 6);
    uint64_t v65 = v74;
LABEL_54:
    unint64_t v70 = v95;
    (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v101 + 16))( v69,  *(void *)(v95 + 48) + *(void *)(v101 + 72) * v67,  v102,  v64);
    uint64_t v71 = *(void *)(v70 + 56);
    id v72 = sub_100004AEC(&qword_1009A6618);
    uint64_t v73 = *(void *)(v71 + 8 * v67);
    *(void *)(v69 + *(int *)(v72 + 48)) = v73;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56LL))(v69, 0LL, 1LL, v72);
    swift_bridgeObjectRetain(v73);
    goto LABEL_64;
  }

  while (1)
  {
    Swift::Int v74 = v83 + 1;
    if (__OFADD__(v83, 1LL)) {
      break;
    }
    if (v74 >= v94)
    {
      uint64_t v65 = (int64_t)v88;
      goto LABEL_63;
    }

    unint64_t v75 = *(void *)(v93 + 8 * v74);
    ++v83;
    if (v75) {
      goto LABEL_58;
    }
  }

        unint64_t v126 = (char *)v38 + 40;
        uint64_t v5 = v125;
        if ((unint64_t)v125 < v114)
        {
          uint64_t v6 = (char *)v39;
        }

        goto LABEL_123;
      }
    }

    goto LABEL_123;
  }

      uint64_t v182 = (v190 - 1) & v190;
      uint64_t v186 = __clz(__rbit64(v190)) + (v174 << 6);
    }

    os_log_type_t v187 = *(void *)(*(void *)(v176 + 56) + 8 * v186);
    uint64_t v188 = __OFADD__(*(void *)&v175, v187);
    *(void *)&v175 += v187;
  }

  while (!v188);
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  swift_release();
  objc_autoreleasePoolPop(v168);
  __break(1u);
}

      uint64_t v182 = (v190 - 1) & v190;
      uint64_t v186 = __clz(__rbit64(v190)) + (v174 << 6);
    }

    os_log_type_t v187 = *(void *)(*(void *)(v176 + 56) + 8 * v186);
    uint64_t v188 = __OFADD__(*(void *)&v175, v187);
    *(void *)&v175 += v187;
  }

  while (!v188);
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  swift_release();
  objc_autoreleasePoolPop(v168);
  __break(1u);
}

    uint64_t v157 = (void (*)(char *, char *, void))v105;
    uint64_t v158 = v119;
    uint64_t v159 = (void (*)(void, void, void))v38;
    uint64_t v160 = v248;
LABEL_57:
    sub_100018C68(v161, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    goto LABEL_58;
  }

  uint64_t v163 = v234;
  v105(v234, v104, v38);
  uint64_t v164 = v237;
  uint64_t v165 = sub_10001DC4C(v161, v237, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  uint64_t v166 = (os_log_s *)Logger.logObject.getter(v165);
  __int128 v167 = static os_log_type_t.error.getter(v166);
  if (os_log_type_enabled(v166, v167))
  {
    uint64_t v168 = swift_slowAlloc(32LL, -1LL);
    uint64_t v269 = (void (*)(void, void, void))swift_slowAlloc(64LL, -1LL);
    aBlock = (uint64_t)v269;
    *(_DWORD *)uint64_t v168 = 141558531;
    *(void *)&v280 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v168 + 4, v168 + 12);
    *(_WORD *)(v168 + 12) = 2081;
    uint64_t v169 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v170 = dispatch thunk of CustomStringConvertible.description.getter(v38, v169);
    *(void *)&v280 = sub_1003F11D4(v170, v171, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v168 + 14, v168 + 22);
    swift_bridgeObjectRelease();
    v238(v163, v38);
    *(_WORD *)(v168 + 22) = 2082;
    __asm { BR              X10 }
  }

  uint64_t v173 = (void (*)(uint64_t, uint64_t))v238;
  v238(v163, v38);
  sub_100018C68(v164, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);

  sub_100004AB0();
  uint64_t v210 = v252;
  uint64_t v211 = v251;
  __int128 v212 = v253;
  (*(void (**)(char *, void, uint64_t))(v252 + 104))( v251,  enum case for DispatchQoS.QoSClass.default(_:),  v253);
  int v213 = (void *)static OS_dispatch_queue.global(qos:)(v211);
  (*(void (**)(char *, uint64_t))(v210 + 8))(v211, v212);
  uint64_t v214 = swift_allocObject(&unk_100954A48, 32LL, 7LL);
  uint64_t v215 = v255;
  *(void *)(v214 + 16) = v254;
  *(void *)(v214 + 24) = v215;
  uint64_t v278 = (uint64_t (**)(void *, void *))sub_10039BBA4;
  uint64_t v279 = v214;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v275 = 1107296256LL;
  os_log_type_t v276 = sub_1001C31E8;
  uint64_t v277 = &unk_100954A60;
  uint64_t v216 = _Block_copy(&aBlock);
  uint64_t v217 = swift_retain();
  uint64_t v218 = v256;
  static DispatchQoS.unspecified.getter(v217);
  *(void *)&v280 = _swiftEmptyArrayStorage;
  uint64_t v219 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v220 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v221 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v222 = v220;
  uint64_t v223 = v248;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v280, v222, v221, v248, v219);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v218, v119, v216);
  _Block_release(v216);

  (*(void (**)(char *, uint64_t))(v258 + 8))(v119, v223);
  (*(void (**)(char *, uint64_t))(v257 + 8))(v218, v259);
  sub_100018C68(v245, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v173(v104, v38);
  return swift_release();
}

    a2 = (unint64_t)sub_1005996D8((void *)a2);
    goto LABEL_40;
  }

    a2 = (unint64_t)sub_1005996D8((void *)a2);
    goto LABEL_40;
  }

  CKRecordKeyValueSetting.subscript.getter( &v139,  0x65566D6574737973LL,  0xED00006E6F697372LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  char v98 = (unint64_t *)(v90 + v93[15]);
  uint64_t v100 = *v98;
  unsigned int v99 = v98[1];
  if (!*((void *)&v139 + 1))
  {
    uint64_t v101 = v135;
LABEL_60:
    *((void *)&v140 + 1) = &type metadata for String;
    Swift::Int v141 = &protocol witness table for String;
    *(void *)&uint64_t v139 = v100;
    *((void *)&v139 + 1) = v99;
    swift_bridgeObjectRetain(v99);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x65566D6574737973LL, 0xED00006E6F697372LL, ObjectType);
    goto LABEL_61;
  }

  if (v139 == __PAIR128__(v99, v100))
  {
    swift_bridgeObjectRelease();
    uint64_t v101 = v135;
    goto LABEL_61;
  }

  uint64_t v102 = _stringCompareWithSmolCheck(_:_:expecting:)(v139, *((void *)&v139 + 1), *v98, v98[1], 0LL);
  swift_bridgeObjectRelease();
  uint64_t v101 = v135;
  if ((v102 & 1) == 0) {
    goto LABEL_60;
  }
LABEL_61:
  CKRecordKeyValueSetting.subscript.getter( &v139,  0x6449726F646E6576LL,  0xE800000000000000LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  BOOL v103 = *(void *)(v90 + v93[16]);
  if ((BYTE8(v139) & 1) != 0)
  {
    uint64_t v104 = v136;
    uint64_t v105 = v134;
LABEL_64:
    *((void *)&v140 + 1) = &type metadata for Int;
    Swift::Int v141 = &protocol witness table for Int;
    *(void *)&uint64_t v139 = v103;
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x6449726F646E6576LL, 0xE800000000000000LL, ObjectType);
    goto LABEL_65;
  }

  uint64_t v104 = v136;
  uint64_t v105 = v134;
  if ((void)v139 != v103) {
    goto LABEL_64;
  }
LABEL_65:
  CKRecordKeyValueSetting.subscript.getter( &v139,  0x49746375646F7270LL,  0xE900000000000064LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  unint64_t v106 = *(void *)(v90 + v93[17]);
  if ((BYTE8(v139) & 1) != 0 || (void)v139 != v106)
  {
    *((void *)&v140 + 1) = &type metadata for Int;
    Swift::Int v141 = &protocol witness table for Int;
    *(void *)&uint64_t v139 = v106;
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x49746375646F7270LL, 0xE900000000000064LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v139,  0x65646F4D74736F6CLL,  0xEE00737574617453LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  uint64_t v107 = *(unsigned __int8 *)(v90 + v93[18]);
  if ((BYTE8(v139) & 1) != 0)
  {
    if ((_DWORD)v107 == 3) {
      goto LABEL_76;
    }
    goto LABEL_74;
  }

  if ((_DWORD)v107 == 3)
  {
    Swift::Int v141 = 0LL;
    uint64_t v139 = 0u;
    uint64_t v140 = 0u;
LABEL_75:
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x65646F4D74736F6CLL, 0xEE00737574617453LL, ObjectType);
    goto LABEL_76;
  }

  if ((void)v139 != v107)
  {
LABEL_74:
    *((void *)&v140 + 1) = &type metadata for Int;
    Swift::Int v141 = &protocol witness table for Int;
    *(void *)&uint64_t v139 = v107;
    goto LABEL_75;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v28 = v2[2];
  uint64_t v27 = v2[3];
  if (v28 >= v27 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v27 > 1), v28 + 1, 1, v2);
  }
  v2[2] = v28 + 1;
  Swift::Int v29 = &v2[2 * v28];
  v29[4] = 0x65676E61722ELL;
  v29[5] = 0xE600000000000000LL;
  if ((a1 & 0x200) == 0)
  {
LABEL_41:
    if ((a1 & 0x400) == 0) {
      goto LABEL_42;
    }
    goto LABEL_65;
  }

    __break(1u);
  }

  swift_release();
  uint64_t v204 = 0LL;
  char v98 = v208[0];
  unsigned int v99 = v182;
  if (!*(void *)(v208[0] + 16LL))
  {
    swift_bridgeObjectRelease();
    uint64_t v110 = v176;
    uint64_t v111 = ((uint64_t (*)(char *, uint64_t, uint64_t))v184)(v176, v190, v94);
    uint64_t v112 = (os_log_s *)Logger.logObject.getter(v111);
    uint64_t v113 = static os_log_type_t.default.getter(v112);
    if (os_log_type_enabled(v112, v113))
    {
      unint64_t v114 = swift_slowAlloc(22LL, -1LL);
      uint64_t v115 = swift_slowAlloc(32LL, -1LL);
      *(void *)&uint64_t v219 = v115;
      *(_DWORD *)unint64_t v114 = 141558275;
      uint64_t v217 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v114 + 4, v114 + 12);
      *(_WORD *)(v114 + 12) = 2081;
      int v116 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v117 = dispatch thunk of CustomStringConvertible.description.getter(v94, v116);
      uint64_t v217 = sub_1003F11D4(v117, v118, (uint64_t *)&v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v114 + 14, v114 + 22);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v185)(v110, v94);
      _os_log_impl( (void *)&_mh_execute_header,  v112,  v113,  "No purgable records for %{private,mask.hash}s",  (uint8_t *)v114,  0x16u);
      swift_arrayDestroy(v115, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v115, -1LL, -1LL);
      swift_slowDealloc(v114, -1LL, -1LL);
      swift_release();
    }

    else
    {
      swift_release();
      ((void (*)(char *, uint64_t))v185)(v110, v94);
    }

    swift_release();
    return 1LL;
  }

  uint64_t v206 = dispatch_group_create();
  uint64_t v100 = swift_allocObject(&unk_10097ACB0, 24LL, 7LL);
  unint64_t v205 = (void *)v100;
  *(void *)(v100 + 16) = 0LL;
  uint64_t v189 = (void *)(v100 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v184)(v99, v190, v94);
  swift_bridgeObjectRetain_n(v98, 2LL);
  uint64_t v102 = (os_log_s *)Logger.logObject.getter(v101);
  BOOL v103 = static os_log_type_t.default.getter(v102);
  if (os_log_type_enabled(v102, v103))
  {
    uint64_t v104 = swift_slowAlloc(32LL, -1LL);
    uint64_t v203 = swift_slowAlloc(32LL, -1LL);
    *(void *)&uint64_t v219 = v203;
    *(_DWORD *)uint64_t v104 = 141558531;
    uint64_t v217 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v104 + 4, v104 + 12);
    *(_WORD *)(v104 + 12) = 2081;
    uint64_t v105 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    unint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter(v94, v105);
    uint64_t v217 = sub_1003F11D4(v106, v107, (uint64_t *)&v219);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v104 + 14, v104 + 22);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v185)(v99, v94);
    *(_WORD *)(v104 + 22) = 2048;
    uint64_t v108 = *(void *)(v98 + 16);
    swift_bridgeObjectRelease();
    uint64_t v217 = v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v104 + 24, v104 + 32);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v102,  v103,  "Removing old OwnedDeviceKeyRecords for %{private,mask.hash}s count:%ld.",  (uint8_t *)v104,  0x20u);
    uint64_t v109 = v203;
    swift_arrayDestroy(v203, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v109, -1LL, -1LL);
    swift_slowDealloc(v104, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v185)(v99, v94);

    swift_bridgeObjectRelease();
  }

  swift_beginAccess(v208, &v219, 0LL, 0LL);
  uint64_t v119 = *(void *)(v208[0] + 16LL);
  unint64_t v120 = (uint64_t)v200;
  if (v119)
  {
    uint64_t v121 = *(unsigned __int8 *)(v180 + 80);
    unint64_t v122 = v208[0] + ((v121 + 32) & ~v121);
    uint64_t v123 = *(void *)(v180 + 72);
    uint64_t v202 = (v121 + 24) & ~v121;
    uint64_t v203 = v123;
    uint64_t v195 = (v174 + v202 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v196 = (char *)(v121 | 7);
    uint64_t v194 = v195 + 8;
    *(void *)&os_log_type_t v187 = v208[0];
    swift_bridgeObjectRetain(v208[0]);
    unint64_t v193 = xmmword_1007E67D0;
    do
    {
      sub_10001DC4C(v122, v120, type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v124 = v206;
      dispatch_group_enter(v206);
      unint64_t v125 = v197;
      sub_10001DC4C(v120, v197, type metadata accessor for OwnedDeviceKeyRecord);
      unint64_t v126 = swift_allocObject(&unk_10097ACD8, v194, v196);
      *(void *)(v126 + 16) = v205;
      sub_10002218C(v125, v126 + v202, type metadata accessor for OwnedDeviceKeyRecord);
      *(void *)(v126 + v195) = v124;
      swift_retain();
      uint64_t v127 = static os_log_type_t.default.getter(v124);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v128 = qword_100A2B018;
      Swift::Int v129 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v130 = swift_allocObject(v129, 72LL, 7LL);
      *(_OWORD *)(v130 + 16) = v193;
      uint64_t v131 = v198;
      sub_10001DC4C(v120, v198, type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v132 = String.init<A>(describing:)(v131, v199);
      Swift::Int v134 = v133;
      *(void *)(v130 + 56) = &type metadata for String;
      *(void *)(v130 + 64) = sub_1000226F4();
      *(void *)(v130 + 32) = v132;
      *(void *)(v130 + 40) = v134;
      unint64_t v120 = (uint64_t)v200;
      os_log(_:dso:log:_:_:)(v127, &_mh_execute_header, v128, "Attempting to remove: %@", 24LL, 2LL, v130);
      swift_bridgeObjectRelease();
      swift_retain();
      sub_100556968(v120, v201, (void (*)(void))sub_1007C5BB8, v126);
      swift_release_n(v126, 2LL);
      sub_100018C68(v120, type metadata accessor for OwnedDeviceKeyRecord);
      v122 += v203;
      --v119;
    }

    while (v119);
    swift_bridgeObjectRelease();
  }

  OS_dispatch_group.wait()();
  unint64_t v135 = v189;
  uint64_t v136 = swift_beginAccess(v189, &v217, 0LL, 0LL);
  if (!*v135)
  {
    uint64_t v148 = v173;
    uint64_t v149 = v191;
    ((void (*)(char *, uint64_t, uint64_t, __n128))v184)(v173, v190, v191, v136);
    uint64_t v150 = v208[0];
    swift_bridgeObjectRetain(v208[0]);
    uint64_t v152 = (os_log_s *)Logger.logObject.getter(v151);
    uint64_t v153 = static os_log_type_t.default.getter(v152);
    if (os_log_type_enabled(v152, v153))
    {
      uint64_t v154 = swift_slowAlloc(32LL, -1LL);
      uint64_t v203 = swift_slowAlloc(32LL, -1LL);
      uint64_t v216 = v203;
      *(_DWORD *)uint64_t v154 = 141558531;
      uint64_t v207 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v154 + 4, v154 + 12);
      *(_WORD *)(v154 + 12) = 2081;
      uint64_t v155 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v156 = dispatch thunk of CustomStringConvertible.description.getter(v149, v155);
      uint64_t v207 = sub_1003F11D4(v156, v157, &v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v154 + 14, v154 + 22);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v185)(v148, v149);
      *(_WORD *)(v154 + 22) = 2048;
      uint64_t v158 = *(void *)(v150 + 16);
      swift_bridgeObjectRelease();
      uint64_t v207 = v158;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v154 + 24, v154 + 32);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v152,  v153,  "Removing old OwnedDeviceKeyRecords success for %{private,mask.hash}s count:%ld.",  (uint8_t *)v154,  0x20u);
      uint64_t v159 = v203;
      swift_arrayDestroy(v203, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v159, -1LL, -1LL);
      swift_slowDealloc(v154, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v185)(v148, v149);

      swift_bridgeObjectRelease();
    }

    type metadata accessor for Transaction(0LL);
    __int128 v167 = swift_allocObject(&unk_10097AD28, 49LL, 7LL);
    *(_BYTE *)(v167 + 16) = 1;
    uint64_t v168 = v204;
    *(void *)(v167 + 24) = v186;
    *(void *)(v167 + 32) = v168;
    *(void *)(v167 + 40) = 0LL;
    *(_BYTE *)(v167 + 48) = 1;
    static Transaction.asyncTask(name:block:)("KeyPurgeStatus", 14LL, 2LL, &unk_1009C09E8, v167);
    uint64_t v169 = swift_release();
    uint64_t v170 = (os_log_s *)Logger.logObject.getter(v169);
    uint64_t v171 = static os_log_type_t.debug.getter(v170);
    if (os_log_type_enabled(v170, v171))
    {
      uint64_t v172 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v172 = 0;
      _os_log_impl((void *)&_mh_execute_header, v170, v171, "analytics: logged key purge status to CA", v172, 2u);
      swift_slowDealloc(v172, -1LL, -1LL);
    }

    swift_release();

    swift_release();
    swift_release();

    return 1LL;
  }

  swift_bridgeObjectRelease();
  uint64_t v137 = v175;
  uint64_t v138 = v191;
  ((void (*)(char *, uint64_t, uint64_t))v184)(v175, v190, v191);
  uint64_t v139 = v205;
  uint64_t v140 = swift_retain();
  Swift::Int v141 = (os_log_s *)Logger.logObject.getter(v140);
  uint64_t v142 = static os_log_type_t.default.getter(v141);
  if (os_log_type_enabled(v141, v142))
  {
    uint64_t v143 = swift_slowAlloc(32LL, -1LL);
    uint64_t v144 = swift_slowAlloc(32LL, -1LL);
    uint64_t v216 = v144;
    *(_DWORD *)uint64_t v143 = 134218499;
    uint64_t v207 = v139[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v143 + 4, v143 + 12);
    swift_release();
    *(_WORD *)(v143 + 12) = 2160;
    uint64_t v207 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v143 + 14, v143 + 22);
    *(_WORD *)(v143 + 22) = 2081;
    Swift::Int v145 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    unint64_t v146 = dispatch thunk of CustomStringConvertible.description.getter(v138, v145);
    uint64_t v207 = sub_1003F11D4(v146, v147, &v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v208, v143 + 24, v143 + 32);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v185)(v137, v138);
    _os_log_impl( (void *)&_mh_execute_header,  v141,  v142,  "Failed to remove %ld for %{private,mask.hash}s.",  (uint8_t *)v143,  0x20u);
    swift_arrayDestroy(v144, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v144, -1LL, -1LL);
    swift_slowDealloc(v143, -1LL, -1LL);
  }

  else
  {
    swift_release();
    ((void (*)(char *, uint64_t))v185)(v137, v138);
  }

  uint64_t v160 = *v189;
  type metadata accessor for Transaction(0LL);
  uint64_t v161 = swift_allocObject(&unk_10097AD00, 49LL, 7LL);
  *(_BYTE *)(v161 + 16) = 0;
  uint64_t v162 = v204;
  *(void *)(v161 + 24) = v186;
  *(void *)(v161 + 32) = v162;
  *(void *)(v161 + 40) = v160;
  *(_BYTE *)(v161 + 48) = 0;
  static Transaction.asyncTask(name:block:)("KeyPurgeStatus", 14LL, 2LL, &unk_1009C09E0, v161);
  uint64_t v163 = swift_release();
  uint64_t v164 = (os_log_s *)Logger.logObject.getter(v163);
  uint64_t v165 = static os_log_type_t.debug.getter(v164);
  if (os_log_type_enabled(v164, v165))
  {
    uint64_t v166 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v166 = 0;
    _os_log_impl((void *)&_mh_execute_header, v164, v165, "analytics: logged key purge status to CA", v166, 2u);
    swift_slowDealloc(v166, -1LL, -1LL);
  }

  swift_release();

  swift_release();
  swift_release();

  return 0LL;
}

LABEL_86:
        if ((v98 & 1) != 0) {
          goto LABEL_125;
        }
        unint64_t v106 = &v72[16 * v75];
        uint64_t v108 = *(void *)v106;
        uint64_t v107 = *((void *)v106 + 1);
        BOOL v86 = __OFSUB__(v107, v108);
        uint64_t v109 = v107 - v108;
        if (v86) {
          goto LABEL_128;
        }
        if (v109 < v97) {
          goto LABEL_14;
        }
LABEL_94:
        unint64_t v114 = v75 - 1;
        if (v75 - 1 >= v20)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }

        uint64_t v115 = *a1;
        if (!*a1) {
          goto LABEL_143;
        }
        int v116 = &v72[16 * v114];
        uint64_t v117 = *(void *)v116;
        unint64_t v118 = &v72[16 * v75];
        uint64_t v119 = *((void *)v118 + 1);
        sub_100090EC8( v115 + *(void *)(v136 + 72) * *(void *)v116,  v115 + *(void *)(v136 + 72) * *(void *)v118,  v115 + *(void *)(v136 + 72) * v119,  v135);
        if (v71) {
          goto LABEL_115;
        }
        if (v119 < v117) {
          goto LABEL_118;
        }
        if (v75 > *((void *)v18 + 2)) {
          goto LABEL_119;
        }
        *(void *)int v116 = v117;
        *(void *)&v72[16 * v114 + 8] = v119;
        unint64_t v120 = *((void *)v18 + 2);
        if (v75 >= v120) {
          goto LABEL_120;
        }
        unint64_t v20 = v120 - 1;
        memmove(&v72[16 * v75], v118 + 16, 16 * (v120 - 1 - v75));
        *((void *)v18 + 2) = v120 - 1;
        a1 = v142;
        if (v120 <= 2) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v20 = 1LL;
LABEL_14:
    Swift::Int v12 = a1[1];
    Swift::Int v19 = v141;
    uint64_t v2 = v71;
    if (v141 >= v12) {
      goto LABEL_104;
    }
  }

  if (__OFADD__(v38, v129)) {
    goto LABEL_140;
  }
  if (v38 + v129 >= v12) {
    Swift::Int v49 = v12;
  }
  else {
    Swift::Int v49 = v38 + v129;
  }
  if (v49 >= v38)
  {
    if (v29 != v49)
    {
      uint64_t v130 = v18;
      uint64_t v131 = v2;
      uint64_t v50 = *(void *)(v136 + 72);
      uint64_t v51 = v50 * (v29 - 1);
      uint64_t v137 = v50;
      uint64_t v52 = v29 * v50;
      uint64_t v132 = v49;
      do
      {
        uint64_t v54 = 0LL;
        Swift::Int v141 = v29;
        uint64_t v138 = v52;
        while (1)
        {
          Swift::Int v145 = v38;
          uint64_t v55 = v142;
          uint64_t v56 = *v142;
          uint64_t v57 = v52 + v54 + *v142;
          uint64_t v58 = v139;
          sub_10001DC4C(v57, v139, type metadata accessor for PairingErrorRecord);
          uint64_t v59 = v51;
          uint64_t v60 = v51 + v54 + v56;
          uint64_t v61 = v140;
          sub_10001DC4C(v60, v140, type metadata accessor for PairingErrorRecord);
          uint64_t v62 = *(int *)(v143 + 20);
          uint64_t v63 = type metadata accessor for PairingError(0LL);
          uint64_t v64 = Date.compare(_:)(v61 + v62 + *(int *)(v63 + 24));
          sub_100018C68(v61, type metadata accessor for PairingErrorRecord);
          sub_100018C68(v58, type metadata accessor for PairingErrorRecord);
          if (v64 != 1) {
            break;
          }
          uint64_t v65 = *v55;
          if (!*v55) {
            goto LABEL_142;
          }
          uint64_t v52 = v138;
          uint64_t v66 = v65 + v138 + v54;
          uint64_t v51 = v59;
          uint64_t v67 = v65 + v59 + v54;
          sub_100090240(v66, v144);
          swift_arrayInitWithTakeFrontToBack(v66, v67, 1LL, v143);
          sub_100090240(v144, v67);
          v54 -= v137;
          Swift::Int v38 = v145 + 1;
          Swift::Int v53 = v141;
          if (v141 == v145 + 1) {
            goto LABEL_48;
          }
        }

        Swift::Int v53 = v141;
        uint64_t v51 = v59;
        uint64_t v52 = v138;
LABEL_48:
        Swift::Int v29 = v53 + 1;
        v51 += v137;
        v52 += v137;
        Swift::Int v38 = v134;
      }

      while (v29 != v132);
      Swift::Int v29 = v132;
      uint64_t v18 = v130;
      uint64_t v2 = v131;
      a1 = v142;
    }

    goto LABEL_55;
  }

        __break(1u);
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_86;
  }

  uint64_t v136 = v132 + 17;
  uint64_t v232 = v132 + 27;
  BOOL v209 = v132[87];
  uint64_t v137 = v132[83];
  uint64_t v201 = v132[105];
  uint64_t v202 = v132[82];
  uint64_t v204 = *(void *)(v137 + 72);
  unint64_t v205 = result + ((*(unsigned __int8 *)(v137 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80));
  swift_bridgeObjectRetain(result);
  uint64_t v138 = 0LL;
  uint64_t v207 = v132 + 12;
  os_log_type_t v208 = v132 + 7;
  while (1)
  {
    uint64_t v219 = v138;
    sub_10001DC4C(v205 + v138 * v204, v135[84], type metadata accessor for OwnedBeaconGroup);
    sub_1001CC778();
    sub_100189694(v140, v28);
    uint64_t v142 = v141;
    *(void *)type = v128;
    swift_bridgeObjectRelease();
    uint64_t v143 = (unint64_t)v142 >> 62;
    uint64_t v144 = *(void *)((v142 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v142);
    if (v144) {
      goto LABEL_31;
    }
LABEL_26:
    uint64_t v139 = v135[84];
    swift_bridgeObjectRelease();
    sub_100018C68(v139, type metadata accessor for OwnedBeaconGroup);
LABEL_27:
    swift_bridgeObjectRelease();
LABEL_28:
    uint64_t v128 = *(void *)type;
    uint64_t v138 = v219 + 1;
    if (v219 + 1 == v206)
    {
      Swift::Int result = swift_bridgeObjectRelease();
      goto LABEL_74;
    }
  }

  if (v142 < 0) {
    uint64_t v189 = v142;
  }
  else {
    uint64_t v189 = v142 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v142);
  if (!_CocoaArrayWrapper.endIndex.getter(v189)) {
    goto LABEL_26;
  }
LABEL_31:
  uint64_t v215 = v142 & 0xC000000000000001LL;
  if ((v142 & 0xC000000000000001LL) != 0)
  {
    Swift::Int v145 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v142);
  }

  else
  {
    if (!*(void *)((v142 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_82;
    }
    Swift::Int v145 = *(id *)(v142 + 32);
  }

  uint64_t v237 = v145;
  swift_bridgeObjectRelease();
  if (v143)
  {
    if (v142 < 0) {
      uint64_t v147 = v142;
    }
    else {
      uint64_t v147 = v142 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v142);
    unint64_t v146 = _CocoaArrayWrapper.endIndex.getter(v147);
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v146 = *(void *)((v142 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v148 = v135[84];
  uint64_t v149 = *(void *)(*(void *)(v148 + *(int *)(v202 + 40)) + 16LL);
  if (v149 >= 0x100) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }
  if (v146 != v149)
  {
    sub_100018C68(v148, type metadata accessor for OwnedBeaconGroup);

    goto LABEL_27;
  }

  if (!v143)
  {
    uint64_t v150 = *(void *)((v142 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v142);
    uint64_t v151 = v237;
    if (v150) {
      goto LABEL_50;
    }
    goto LABEL_60;
  }

  if (v142 < 0) {
    uint64_t v152 = v142;
  }
  else {
    uint64_t v152 = v142 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v142);
  uint64_t v153 = v237;
  uint64_t v150 = _CocoaArrayWrapper.endIndex.getter(v152);
  if (!v150)
  {
LABEL_60:
    uint64_t v182 = v135[106];
    os_log_type_t v183 = v135[104];
    BOOL v184 = v135[84];
    swift_bridgeObjectRelease_n(v142, 2LL);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 16))(v182, v184 + *(int *)(v202 + 24), v183);
    uint64_t v185 = v237;
    uint64_t v186 = v135[54];
    os_log_type_t v187 = swift_isUniquelyReferenced_nonNull_native(v186);
    v238[0] = v186;
    sub_10005CC34((uint64_t)v185, v182, v187);
    v135[54] = v238[0];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v201 + 8))(v182, v183);

    sub_100018C68(v184, type metadata accessor for OwnedBeaconGroup);
LABEL_65:
    uint64_t v28 = v203;
    goto LABEL_28;
  }

        uint64_t v305 = 2LL;
        goto LABEL_70;
      }
    }

    uint64_t v151 = (uint64_t)v262;
    uint64_t v238 = *(dispatch_queue_t *)&v262[v256];
    sub_100013044((uint64_t)v306, (uint64_t)&v303);
    uint64_t v152 = (void *)swift_allocObject(&unk_10094D268, 96LL, 7LL);
    v152[2] = v151;
    sub_100012EC0(&v303, (uint64_t)(v152 + 3));
    v152[8] = &v305;
    v152[9] = v55;
    v152[10] = &v304;
    v152[11] = v293;
    swift_retain();
    sub_10002214C((uint64_t)v276, (uint64_t)v277);
    uint64_t v153 = swift_allocObject(&unk_10094D290, 32LL, 7LL);
    *(void *)(v153 + 16) = sub_1002D72BC;
    *(void *)(v153 + 24) = v152;
    v301 = sub_100095030;
    uint64_t v302 = v153;
    aBlock = _NSConcreteStackBlock;
    v298 = 1107296256LL;
    v299 = sub_100025BD4;
    v300 = &unk_10094D2A8;
    uint64_t v154 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(v238, v154);
    _Block_release(v154);
    LOBYTE(v154) = swift_isEscapingClosureAtFileLocation(v153, "", 151LL, 1926LL, 50LL, 1LL);
    Swift::Int result = swift_release();
    os_log_type_t v276 = sub_1002D72BC;
    uint64_t v277 = v152;
LABEL_26:
    (*(void (**)(char *, char *, uint64_t))(v292 + 16))(v291, v55, v296);
    uint64_t v77 = v304;
    uint64_t v78 = v305;
    char v79 = v62;
    swift_errorRetain(v77);
    v80.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    if (v77)
    {
      uint64_t v81 = (void *)_convertErrorToNSError(_:)(v77);
      swift_errorRelease(v77);
    }

    else
    {
      uint64_t v81 = 0LL;
    }

    uint64_t v82 = [objc_allocWithZone(SPBeaconTaskInformation) initWithName:v79 lastUpdated:v80.super.isa error:v81 state:v78];

    uint64_t v83 = *(void (**)(char *, uint64_t))(v292 + 8);
    v83(v291, v296);
    uint64_t v84 = v288;
    sub_10001581C(v293, v288, &qword_10099D8A0);
    uint64_t v85 = v295;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v294 + 48))(v84, 1LL, v295) == 1)
    {
      v56.super.Class isa = 0LL;
    }

    else
    {
      v56.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      v286((char *)v84, v85);
    }

    [v82 setCommandIdentifier:v56.super.isa];

    uint64_t v57 = v79;
    uint64_t v58 = v82;
    uint64_t v59 = v290;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v290);
    aBlock = v59;
    sub_10005D250((uint64_t)v58, v57, isUniquelyReferenced_nonNull_native);
    Swift::Int v53 = aBlock;

    swift_bridgeObjectRelease();
    uint64_t v54 = v293;
    sub_100015794(v293, &qword_10099D8A0);
    swift_errorRelease(v304);
    uint64_t v55 = v289;
    v83(v289, v296);
    ++v50;
    if (!--v49)
    {
      swift_bridgeObjectRelease();
      uint64_t v233 = (uint64_t)v277;
      uint64_t v234 = v276;
      unint64_t v235 = (uint64_t)v279;
      uint64_t v236 = v278;
      goto LABEL_128;
    }
  }

  swift_bridgeObjectRelease_n(v123, 2LL);
LABEL_60:
  if ((sub_100764B44() & 1) != 0)
  {
    uint64_t v127 = *(void *)&v262[v255];
    uint64_t v128 = v269;
    Swift::Int v129 = ((uint64_t (*)(char *, char *, uint64_t))v260)(v269, v261, v295);
    __chkstk_darwin(v129);
    *(&v237 - 2) = v127;
    *(&v237 - 1) = (uint64_t)v128;
    uint64_t v130 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
    OS_dispatch_queue.sync<A>(execute:)(sub_1002D72FC, &v237 - 4, v130);
    uint64_t v131 = aBlock;
    v286(v128, v295);
    uint64_t v305 = (uint64_t)[v131 state];
    uint64_t v132 = [v131 lastUpdated];
    uint64_t v133 = v270;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v132);

    (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v289, v133, v296);
    Swift::Int v134 = [v131 error];
    unint64_t v135 = v304;
    v304 = v134;
    swift_errorRelease(v135);
    uint64_t v136 = (void **)[v131 commandIdentifier];
    if (v136)
    {
      uint64_t v137 = v136;
      uint64_t v138 = (uint64_t)v271;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v136);

      uint64_t v139 = 0LL;
      uint64_t v131 = v137;
    }

    else
    {
      uint64_t v139 = 1LL;
      uint64_t v138 = (uint64_t)v271;
    }

    v63(v138, v139, 1LL, v295);
    sub_1000D4D50(v138, v293, &qword_10099D8A0);
    goto LABEL_70;
  }

  uint64_t v140 = (uint64_t)v262;
  uint64_t v238 = *(dispatch_queue_t *)&v262[v256];
  sub_100013044((uint64_t)v306, (uint64_t)&v303);
  Swift::Int v141 = (void *)swift_allocObject(&unk_10094D2E0, 96LL, 7LL);
  v141[2] = v140;
  sub_100012EC0(&v303, (uint64_t)(v141 + 3));
  v141[8] = &v305;
  v141[9] = v55;
  v141[10] = &v304;
  v141[11] = v293;
  swift_retain();
  sub_10002214C((uint64_t)v278, (uint64_t)v279);
  uint64_t v142 = swift_allocObject(&unk_10094D308, 32LL, 7LL);
  *(void *)(v142 + 16) = sub_1002D72E0;
  *(void *)(v142 + 24) = v141;
  v301 = sub_100154688;
  uint64_t v302 = v142;
  aBlock = _NSConcreteStackBlock;
  v298 = 1107296256LL;
  v299 = sub_100025BD4;
  v300 = &unk_10094D320;
  uint64_t v143 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v238, v143);
  _Block_release(v143);
  LOBYTE(v143) = swift_isEscapingClosureAtFileLocation(v142, "", 151LL, 1915LL, 54LL, 1LL);
  Swift::Int result = swift_release();
  if ((v143 & 1) == 0)
  {
    uint64_t v278 = sub_1002D72E0;
    uint64_t v279 = v141;
    goto LABEL_26;
  }

  __break(1u);
LABEL_130:
  __break(1u);
  return result;
}

        v306 = 2LL;
        goto LABEL_70;
      }
    }

    uint64_t v152 = v263;
    uint64_t v239 = *(dispatch_queue_t *)(v263 + v257);
    sub_100013044((uint64_t)v307, (uint64_t)&v304);
    uint64_t v153 = (void *)swift_allocObject(&unk_10094D380, 96LL, 7LL);
    v153[2] = v152;
    sub_100012EC0(&v304, (uint64_t)(v153 + 3));
    v153[8] = &v306;
    v153[9] = v55;
    v153[10] = &v305;
    v153[11] = v294;
    swift_retain();
    sub_10002214C((uint64_t)v277, (uint64_t)v278);
    uint64_t v154 = swift_allocObject(&unk_10094D3A8, 32LL, 7LL);
    *(void *)(v154 + 16) = sub_1002D72BC;
    *(void *)(v154 + 24) = v153;
    uint64_t v302 = sub_100154688;
    v303 = v154;
    aBlock = _NSConcreteStackBlock;
    v299 = 1107296256LL;
    v300 = sub_100025BD4;
    v301 = &unk_10094D3C0;
    uint64_t v155 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(v239, v155);
    _Block_release(v155);
    LOBYTE(v155) = swift_isEscapingClosureAtFileLocation(v154, "", 151LL, 1926LL, 50LL, 1LL);
    Swift::Int result = swift_release();
    uint64_t v277 = sub_1002D72BC;
    uint64_t v278 = v153;
LABEL_26:
    (*(void (**)(char *, char *, uint64_t))(v293 + 16))(v292, v55, v297);
    uint64_t v77 = v305;
    uint64_t v78 = v306;
    char v79 = v62;
    swift_errorRetain(v77);
    v80.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    if (v77)
    {
      uint64_t v81 = (void *)_convertErrorToNSError(_:)(v77);
      swift_errorRelease(v77);
    }

    else
    {
      uint64_t v81 = 0LL;
    }

    uint64_t v82 = [objc_allocWithZone(SPBeaconTaskInformation) initWithName:v79 lastUpdated:v80.super.isa error:v81 state:v78];

    uint64_t v83 = *(void (**)(char *, uint64_t))(v293 + 8);
    v83(v292, v297);
    uint64_t v84 = v289;
    sub_10001581C(v294, v289, &qword_10099D8A0);
    uint64_t v85 = v296;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v295 + 48))(v84, 1LL, v296) == 1)
    {
      v56.super.Class isa = 0LL;
    }

    else
    {
      v56.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      v287((char *)v84, v85);
    }

    [v82 setCommandIdentifier:v56.super.isa];

    uint64_t v57 = v79;
    uint64_t v58 = v82;
    uint64_t v59 = v291;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v291);
    aBlock = v59;
    sub_10005D250((uint64_t)v58, v57, isUniquelyReferenced_nonNull_native);
    Swift::Int v53 = aBlock;

    swift_bridgeObjectRelease();
    uint64_t v54 = v294;
    sub_100015794(v294, &qword_10099D8A0);
    swift_errorRelease(v305);
    uint64_t v55 = v290;
    v83(v290, v297);
    ++v50;
    if (!--v49)
    {
      swift_bridgeObjectRelease();
      uint64_t v234 = (uint64_t)v278;
      unint64_t v235 = v277;
      uint64_t v236 = (uint64_t)v280;
      uint64_t v237 = v279;
      goto LABEL_128;
    }
  }

  swift_bridgeObjectRelease_n(v123, 2LL);
LABEL_60:
  sub_1005D3400();
  if ((v127 & 1) != 0)
  {
    uint64_t v128 = *(void *)(v263 + v256);
    Swift::Int v129 = v270;
    uint64_t v130 = ((uint64_t (*)(char *, char *, uint64_t))v261)(v270, v262, v296);
    __chkstk_darwin(v130);
    *(&v238 - 2) = v128;
    *(&v238 - 1) = (uint64_t)v129;
    uint64_t v131 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
    OS_dispatch_queue.sync<A>(execute:)(sub_1002DDFD4, &v238 - 4, v131);
    uint64_t v132 = aBlock;
    v287(v129, v296);
    v306 = (uint64_t)[v132 state];
    uint64_t v133 = [v132 lastUpdated];
    Swift::Int v134 = v271;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v133);

    (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v290, v134, v297);
    unint64_t v135 = [v132 error];
    uint64_t v136 = v305;
    uint64_t v305 = v135;
    swift_errorRelease(v136);
    uint64_t v137 = (void **)[v132 commandIdentifier];
    if (v137)
    {
      uint64_t v138 = v137;
      uint64_t v139 = (uint64_t)v272;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v137);

      uint64_t v140 = 0LL;
      uint64_t v132 = v138;
    }

    else
    {
      uint64_t v140 = 1LL;
      uint64_t v139 = (uint64_t)v272;
    }

    v63(v139, v140, 1LL, v296);
    sub_1000D4D50(v139, v294, &qword_10099D8A0);
    goto LABEL_70;
  }

  Swift::Int v141 = v263;
  uint64_t v239 = *(dispatch_queue_t *)(v263 + v257);
  sub_100013044((uint64_t)v307, (uint64_t)&v304);
  uint64_t v142 = (void *)swift_allocObject(&unk_10094D3F8, 96LL, 7LL);
  v142[2] = v141;
  sub_100012EC0(&v304, (uint64_t)(v142 + 3));
  v142[8] = &v306;
  v142[9] = v55;
  v142[10] = &v305;
  v142[11] = v294;
  swift_retain();
  sub_10002214C((uint64_t)v279, (uint64_t)v280);
  uint64_t v143 = swift_allocObject(&unk_10094D420, 32LL, 7LL);
  *(void *)(v143 + 16) = sub_1002D72E0;
  *(void *)(v143 + 24) = v142;
  uint64_t v302 = sub_100154688;
  v303 = v143;
  aBlock = _NSConcreteStackBlock;
  v299 = 1107296256LL;
  v300 = sub_100025BD4;
  v301 = &unk_10094D438;
  uint64_t v144 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v239, v144);
  _Block_release(v144);
  LOBYTE(v144) = swift_isEscapingClosureAtFileLocation(v143, "", 151LL, 1915LL, 54LL, 1LL);
  Swift::Int result = swift_release();
  if ((v144 & 1) == 0)
  {
    uint64_t v279 = sub_1002D72E0;
    v280 = v142;
    goto LABEL_26;
  }

  __break(1u);
LABEL_130:
  __break(1u);
  return result;
}

  v351((uint64_t)v348, 1LL, 1LL, v43);
LABEL_87:
  swift_release();
  uint64_t v239 = sub_10051ABF8(v364, v329);
  swift_bridgeObjectRelease();
  if (qword_10099B538 != -1) {
    swift_once(&qword_10099B538, sub_1004F3B48);
  }
  uint64_t v240 = type metadata accessor for Logger(0LL);
  uint64_t v241 = sub_10000A720(v240, (uint64_t)qword_100A2ACC8);
  uint64_t v242 = v308;
  sub_10001DC4C(v335, v308, type metadata accessor for OwnedBeaconGroup);
  uint64_t v243 = swift_bridgeObjectRetain_n(v239, 2LL);
  uint64_t v244 = (os_log_s *)Logger.logObject.getter(v243);
  unint64_t v245 = static os_log_type_t.default.getter(v244);
  if (os_log_type_enabled(v244, v245))
  {
    uint64_t v246 = swift_slowAlloc(32LL, -1LL);
    uint64_t v356 = (uint64_t (*)(char *, char *, uint64_t))v241;
    uint64_t v247 = v246;
    v355 = swift_slowAlloc(64LL, -1LL);
    unint64_t v360 = (uint64_t (*)(void, void, void))v355;
    *(_DWORD *)uint64_t v247 = v306;
    os_log_type_t v363 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, &v364, v247 + 4, v247 + 12);
    *(_WORD *)(v247 + 12) = 2081;
    os_log_type_t v248 = v239;
    uint64_t v249 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    unint64_t v250 = v358;
    uint64_t v251 = dispatch thunk of CustomStringConvertible.description.getter(v358, v249);
    os_log_type_t v363 = sub_1003F11D4(v251, v252, (uint64_t *)&v360);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, &v364, v247 + 14, v247 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v242, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v247 + 22) = 2080;
    swift_bridgeObjectRetain(v239);
    uint64_t v253 = sub_100004AEC(&qword_1009A0B30);
    double v254 = sub_1000372EC(&qword_1009B2898, &qword_1009A0B30, (uint64_t)&protocol conformance descriptor for Set<A>);
    uint64_t v255 = Set.description.getter(v239, v253, v254);
    uint64_t v257 = v256;
    swift_bridgeObjectRelease();
    os_log_type_t v363 = sub_1003F11D4(v255, v257, (uint64_t *)&v360);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, &v364, v247 + 24, v247 + 32);
    swift_bridgeObjectRelease_n(v248, 2LL);
    uint64_t v239 = v248;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v244,  v245,  "MultipartStatus for %{private,mask.hash}s: %s)",  (uint8_t *)v247,  0x20u);
    uint64_t v258 = v355;
    swift_arrayDestroy(v355, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v259 = v329;
    swift_slowDealloc(v258, -1LL, -1LL);
    swift_slowDealloc(v247, -1LL, -1LL);

    uint64_t v260 = (uint64_t)v307;
  }

  else
  {
    sub_100018C68(v242, type metadata accessor for OwnedBeaconGroup);

    swift_bridgeObjectRelease_n(v239, 2LL);
    unint64_t v250 = v358;
    uint64_t v260 = (uint64_t)v307;
    uint64_t v259 = v329;
  }

  sub_10001581C(v259, v260, &qword_10099D8A0);
  uint64_t v261 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v260, 1LL, v250);
  v262 = v335;
  if (v261 == 1)
  {
    sub_100015794(v260, &qword_10099D8A0);
    uint64_t v263 = v262;
    uint64_t v264 = v305;
    uint64_t v265 = sub_10001DC4C(v263, v305, type metadata accessor for OwnedBeaconGroup);
    uint64_t v266 = (os_log_s *)Logger.logObject.getter(v265);
    uint64_t v267 = static os_log_type_t.default.getter(v266);
    if (os_log_type_enabled(v266, v267))
    {
      int v268 = swift_slowAlloc(22LL, -1LL);
      uint64_t v269 = swift_slowAlloc(32LL, -1LL);
      unint64_t v360 = (uint64_t (*)(void, void, void))v269;
      *(_DWORD *)int v268 = v328;
      os_log_type_t v363 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, &v364, v268 + 4, v268 + 12);
      *(_WORD *)(v268 + 12) = 2081;
      uint64_t v270 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v271 = dispatch thunk of CustomStringConvertible.description.getter(v358, v270);
      os_log_type_t v363 = sub_1003F11D4(v271, v272, (uint64_t *)&v360);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, &v364, v268 + 14, v268 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v264, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl( (void *)&_mh_execute_header,  v266,  v267,  "No primary beacon in group %{private,mask.hash}s.",  (uint8_t *)v268,  0x16u);
      swift_arrayDestroy(v269, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v269, -1LL, -1LL);
      swift_slowDealloc(v268, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v264, type metadata accessor for OwnedBeaconGroup);
    }

    os_log_type_t v276 = (uint64_t)v303;
    uint64_t v277 = v335;
    uint64_t v278 = sub_10050D998(v335);
    if (v278 == 3)
    {
      sub_100015794(v329, &qword_10099D8A0);
      return v239;
    }

    uint64_t v279 = v278;
    v280 = v302;
    v281 = v358;
    v351(v302, 1LL, 1LL, v358);
    uint64_t v237 = sub_100550D34((uint64_t)v239, v280);
    swift_bridgeObjectRelease();
    sub_100015794(v280, &qword_10099D8A0);
    sub_10001DC4C(v277, v276, type metadata accessor for OwnedBeaconGroup);
    uint64_t v282 = swift_bridgeObjectRetain_n(v237, 2LL);
    uint64_t v283 = (os_log_s *)Logger.logObject.getter(v282);
    uint64_t v284 = static os_log_type_t.default.getter(v283);
    if (os_log_type_enabled(v283, v284))
    {
      uint64_t v285 = swift_slowAlloc(42LL, -1LL);
      v357 = swift_slowAlloc(96LL, -1LL);
      unint64_t v360 = (uint64_t (*)(void, void, void))v357;
      *(_DWORD *)uint64_t v285 = 141558787;
      os_log_type_t v363 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, &v364, v285 + 4, v285 + 12);
      *(_WORD *)(v285 + 12) = 2081;
      uint64_t v286 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v287 = dispatch thunk of CustomStringConvertible.description.getter(v281, v286);
      os_log_type_t v363 = sub_1003F11D4(v287, v288, (uint64_t *)&v360);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, &v364, v285 + 14, v285 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v276, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v285 + 22) = 2080;
      v289 = 0x6574617261706573LL;
      uint64_t v290 = 0xE900000000000064LL;
      switch(v279)
      {
        case 1LL:
          break;
        case 2LL:
          uint64_t v290 = 0xE700000000000000LL;
          v289 = 0x646570756F7267LL;
          break;
        case 4LL:
          uint64_t v290 = 0xEF657361436E4964LL;
          break;
        default:
          uint64_t v290 = 0xE700000000000000LL;
          v289 = 0x6E776F6E6B6E75LL;
          break;
      }

      os_log_type_t v363 = sub_1003F11D4(v289, v290, (uint64_t *)&v360);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, &v364, v285 + 24, v285 + 32);
      swift_bridgeObjectRelease();
      *(_WORD *)(v285 + 32) = 2080;
      swift_bridgeObjectRetain(v237);
      uint64_t v291 = sub_100004AEC(&qword_1009A0B30);
      uint64_t v292 = sub_1000372EC(&qword_1009B2898, &qword_1009A0B30, (uint64_t)&protocol conformance descriptor for Set<A>);
      v293 = Set.description.getter(v237, v291, v292);
      uint64_t v295 = v294;
      swift_bridgeObjectRelease();
      os_log_type_t v363 = sub_1003F11D4(v293, v295, (uint64_t *)&v360);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, &v364, v285 + 34, v285 + 42);
      swift_bridgeObjectRelease_n(v237, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v283,  v284,  "Group %{private,mask.hash}s legacy status: %s. After separated: %s.",  (uint8_t *)v285,  0x2Au);
      uint64_t v296 = v357;
      swift_arrayDestroy(v357, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v296, -1LL, -1LL);
      swift_slowDealloc(v285, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v237, 2LL);

      sub_100018C68(v276, type metadata accessor for OwnedBeaconGroup);
    }

    uint64_t v275 = v329;
  }

  else
  {
    unint64_t v273 = v304;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v304, v260, v250);
    uint64_t v274 = v302;
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v302, v273, v250);
    v351(v274, 0LL, 1LL, v250);
    uint64_t v237 = sub_100550D34((uint64_t)v239, v274);
    swift_bridgeObjectRelease();
    sub_100015794(v274, &qword_10099D8A0);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v273, v250);
    uint64_t v275 = v259;
  }

  sub_100015794(v275, &qword_10099D8A0);
  return (void *)v237;
}

LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  Swift::Int result = (char *)swift_release();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100090C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v28 = a1;
  uint64_t v33 = type metadata accessor for PairingErrorRecord(0LL);
  uint64_t v7 = __chkstk_darwin(v33);
  uint64_t v34 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v30 = (uint64_t)&v26 - v10;
  uint64_t result = __chkstk_darwin(v9);
  Swift::Int v29 = (char *)&v26 - v13;
  uint64_t v32 = a3;
  uint64_t v27 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v37 = v14 * (v32 - 1);
    uint64_t v31 = v14;
    int v35 = a4;
    uint64_t v36 = v14 * v32;
    uint64_t v15 = (uint64_t)v29;
LABEL_5:
    uint64_t v16 = 0LL;
    uint64_t v17 = v28;
    while (1)
    {
      uint64_t v18 = *v35;
      sub_10001DC4C(v36 + v16 + *v35, v15, type metadata accessor for PairingErrorRecord);
      uint64_t v19 = v30;
      sub_10001DC4C(v37 + v16 + v18, v30, type metadata accessor for PairingErrorRecord);
      uint64_t v20 = *(int *)(v33 + 20);
      uint64_t v21 = type metadata accessor for PairingError(0LL);
      uint64_t v22 = Date.compare(_:)(v19 + v20 + *(int *)(v21 + 24));
      sub_100018C68(v19, type metadata accessor for PairingErrorRecord);
      uint64_t result = sub_100018C68(v15, type metadata accessor for PairingErrorRecord);
      if (v22 != 1)
      {
LABEL_4:
        v37 += v31;
        v36 += v31;
        if (++v32 == v27) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v23 = *v35;
      if (!*v35) {
        break;
      }
      uint64_t v24 = v23 + v36 + v16;
      uint64_t v25 = v23 + v37 + v16;
      sub_100090240(v24, v34);
      swift_arrayInitWithTakeFrontToBack(v24, v25, 1LL, v33);
      uint64_t result = sub_100090240(v34, v25);
      v16 -= v31;
      if (v32 == ++v17) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100090EC8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for PairingErrorRecord(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v50 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (a2 - a1 == 0x8000000000000000LL && v14 == -1) {
    goto LABEL_62;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v14 == -1) {
    goto LABEL_63;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v53 = a1;
  unint64_t v52 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000LL) == 0)
    {
      uint64_t v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v17, v8);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v28 = a4 + v19;
      unint64_t v51 = a4 + v19;
      unint64_t v53 = a2;
      if (v19 >= 1 && a1 < a2)
      {
        uint64_t v30 = -v14;
        unint64_t v47 = a4;
        uint64_t v48 = v8;
        unint64_t v46 = a1;
        do
        {
          unint64_t v49 = a3 + v30;
          sub_10001DC4C(v28 + v30, (uint64_t)v12, type metadata accessor for PairingErrorRecord);
          unint64_t v31 = a2 + v30;
          unint64_t v32 = a3;
          uint64_t v33 = (uint64_t)v12;
          uint64_t v34 = v50;
          sub_10001DC4C(a2 + v30, v50, type metadata accessor for PairingErrorRecord);
          uint64_t v35 = *(int *)(v8 + 20);
          uint64_t v36 = type metadata accessor for PairingError(0LL);
          uint64_t v37 = Date.compare(_:)(v34 + v35 + *(int *)(v36 + 24));
          uint64_t v38 = v34;
          uint64_t v12 = (char *)v33;
          sub_100018C68(v38, type metadata accessor for PairingErrorRecord);
          sub_100018C68(v33, type metadata accessor for PairingErrorRecord);
          if (v37 == 1)
          {
            a3 = v49;
            if (v32 < a2 || v49 >= a2)
            {
              uint64_t v8 = v48;
              swift_arrayInitWithTakeFrontToBack(v49, a2 + v30, 1LL, v48);
              unint64_t v41 = v46;
              unint64_t v40 = v47;
            }

            else
            {
              BOOL v39 = v32 == a2;
              unint64_t v40 = v47;
              uint64_t v8 = v48;
              unint64_t v41 = v46;
              if (!v39) {
                swift_arrayInitWithTakeBackToFront(v49, a2 + v30);
              }
            }

            v53 += v30;
          }

          else
          {
            unint64_t v42 = v51;
            unint64_t v43 = v51 + v30;
            v51 += v30;
            a3 = v49;
            if (v32 < v42 || v49 >= v42)
            {
              uint64_t v8 = v48;
              swift_arrayInitWithTakeFrontToBack(v49, v43, 1LL, v48);
            }

            else
            {
              uint64_t v8 = v48;
              if (v32 != v42) {
                swift_arrayInitWithTakeBackToFront(v49, v43);
              }
            }

            unint64_t v31 = a2;
            unint64_t v41 = v46;
            unint64_t v40 = v47;
          }

          unint64_t v28 = v51;
          if (v51 <= v40) {
            break;
          }
          a2 = v31;
        }

        while (v31 > v41);
      }

      goto LABEL_60;
    }
  }

  else if ((v16 & 0x8000000000000000LL) == 0)
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v16, v8);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v49 = a4 + v18;
    unint64_t v51 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      uint64_t v21 = v50;
      do
      {
        sub_10001DC4C(a2, (uint64_t)v12, type metadata accessor for PairingErrorRecord);
        sub_10001DC4C(a4, v21, type metadata accessor for PairingErrorRecord);
        uint64_t v22 = *(int *)(v8 + 20);
        uint64_t v23 = type metadata accessor for PairingError(0LL);
        uint64_t v24 = Date.compare(_:)(v21 + v22 + *(int *)(v23 + 24));
        sub_100018C68(v21, type metadata accessor for PairingErrorRecord);
        sub_100018C68((uint64_t)v12, type metadata accessor for PairingErrorRecord);
        unint64_t v25 = v53;
        if (v24 == 1)
        {
          unint64_t v26 = a2 + v14;
          if (v53 < a2 || v53 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack(v53, a2, 1LL, v8);
          }

          else if (v53 == a2)
          {
            unint64_t v25 = a2;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v53, a2);
          }
        }

        else
        {
          unint64_t v27 = v52 + v14;
          if (v53 < v52 || v53 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v53, v52, 1LL, v8);
          }

          else if (v53 != v52)
          {
            swift_arrayInitWithTakeBackToFront(v53, v52);
          }

          unint64_t v52 = v27;
          unint64_t v26 = a2;
        }

        unint64_t v53 = v25 + v14;
        a4 = v52;
        if (v52 >= v49) {
          break;
        }
        a2 = v26;
      }

      while (v26 < a3);
    }

LABEL_60:
    sub_1003CB4A0(&v53, &v52, (uint64_t *)&v51);
    return 1LL;
  }

    sub_1003CB37C(&v55, &v54, (uint64_t *)&v53);
    return 1LL;
  }

    sub_1003CB4BC(&v48, &v47, (uint64_t *)&v46);
    return 1LL;
  }

    sub_1003CB570(&v48, &v47, (uint64_t *)&v46);
    return 1LL;
  }

                  sub_1000A6F30(v59);
                  uint64_t v109 = sub_1001DC658(v115, (uint64_t *)&v121);
                  swift_release();
                  sub_1004E7C60(v109);
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  return;
                }
              }
            }
          }

    sub_1003CB718(&v48, &v47, (uint64_t *)&v46);
    return 1LL;
  }

    sub_1003CB8A0(&v48, &v47, (uint64_t *)&v46);
    return 1LL;
  }

    sub_1003CB4AC(&v48, &v47, (uint64_t *)&v46);
    return 1LL;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  unint64_t v31 = v2[2];
  uint64_t v30 = v2[3];
  if (v31 >= v30 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v30 > 1), v31 + 1, 1, v2);
  }
  v2[2] = v31 + 1;
  unint64_t v32 = &v2[2 * v31];
  v32[4] = 0x746164705577662ELL;
  v32[5] = 0xE900000000000065LL;
  if ((a1 & 0x400) == 0)
  {
LABEL_42:
    if ((a1 & 0x800) == 0) {
      goto LABEL_43;
    }
    goto LABEL_70;
  }

                swift_retain();
                return sub_100546F94(v54, a2, v8, v5);
              }

              uint64_t v9 = v39;
            }
          }
        }

        unint64_t v53 = 0;
        goto LABEL_61;
      }

      if (v47)
      {
        LODWORD(v52) = (v25 - 48);
        if (v52 <= 9)
        {
          if (v47 == 1) {
            goto LABEL_60;
          }
          if ((BYTE1(v25) - 48) <= 9u)
          {
            LODWORD(v52) = 10 * v52 + (BYTE1(v25) - 48);
            uint64_t v61 = v47 - 2;
            if (v61)
            {
              uint64_t v62 = (unsigned __int8 *)v94;
              while (1)
              {
                uint64_t v63 = *v62 - 48;
                if (v63 > 9) {
                  goto LABEL_58;
                }
                uint64_t v64 = 10LL * (int)v52;
                LODWORD(v52) = v64 + v63;
                unint64_t v53 = 0;
                ++v62;
                if (!--v61) {
                  goto LABEL_61;
                }
              }
            }

            goto LABEL_60;
          }
        }
      }
    }

LABEL_64:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  uint64_t v117 = v132;
  *uint64_t v132 = 0LL;
  v117[1] = 0LL;
  v117[2] = 0LL;
  v117[3] = 0LL;
  v117[4] = 0LL;
  v117[5] = 0xF000000000000000LL;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

    uint64_t v105 = v58;
    if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) != 0) {
      uint64_t v57 = v199;
    }
    else {
      uint64_t v57 = sub_1003CB1DC(0LL, *((void *)v199 + 2) + 1LL, 1, v199);
    }
    uint64_t v107 = *((void *)v57 + 2);
    unint64_t v106 = *((void *)v57 + 3);
    uint64_t v59 = v107 + 1;
    if (v107 >= v106 >> 1) {
      uint64_t v57 = sub_1003CB1DC((char *)(v106 > 1), v107 + 1, 1, v57);
    }
    uint64_t v58 = v105;
    *((void *)v57 + 2) = v59;
    uint64_t v108 = v57 + 32;
    uint64_t v109 = &v57[16 * v107 + 32];
    *(void *)uint64_t v109 = v202;
    *((void *)v109 + 1) = v56;
    if (v107) {
      break;
    }
    uint64_t v59 = 1LL;
LABEL_15:
    uint64_t v55 = v224[1];
    uint64_t v19 = v190;
    uint64_t v20 = v209;
    if (v56 >= v55)
    {
      unint64_t v177 = v186;
      if (v59 < 2) {
        goto LABEL_142;
      }
LABEL_129:
      unint64_t v178 = *v224;
      while (1)
      {
        uint64_t v179 = v59 - 2;
        if (v59 < 2) {
          break;
        }
        if (!v178) {
          goto LABEL_172;
        }
        uint64_t v180 = v57;
        uint64_t v181 = *(void *)&v57[16 * v179 + 32];
        uint64_t v182 = *(void *)&v57[16 * v59 + 24];
        os_log_type_t v183 = v207;
        sub_1001FDD04( v178 + *(void *)(v205 + 72) * v181,  v178 + *(void *)(v205 + 72) * *(void *)&v57[16 * v59 + 16],  v178 + *(void *)(v205 + 72) * v182,  v204);
        if (v183) {
          goto LABEL_127;
        }
        if (v182 < v181) {
          goto LABEL_161;
        }
        uint64_t v207 = 0LL;
        if ((swift_isUniquelyReferenced_nonNull_native(v180) & 1) == 0) {
          uint64_t v180 = sub_1003CBA90((uint64_t)v180);
        }
        if (v179 >= *((void *)v180 + 2)) {
          goto LABEL_162;
        }
        BOOL v184 = &v180[16 * v179 + 32];
        *(void *)BOOL v184 = v181;
        *((void *)v184 + 1) = v182;
        uint64_t v185 = *((void *)v180 + 2);
        if (v59 > v185) {
          goto LABEL_163;
        }
        memmove(&v180[16 * v59 + 16], &v180[16 * v59 + 32], 16 * (v185 - v59));
        uint64_t v57 = v180;
        *((void *)v180 + 2) = v185 - 1;
        uint64_t v59 = v185 - 1;
        if (v185 <= 2) {
          goto LABEL_142;
        }
      }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

        BOOL v103 = swift_isUniquelyReferenced_nonNull_native(v83);
        v164[0] = v83;
        sub_1000CC3D8(v97, v100, v103);
        uint64_t v83 = v164[0];
        swift_bridgeObjectRelease();
        if (v95 == v94) {
          break;
        }
      }

  uint64_t v131 = v204;
  uint64_t v132 = v203;
  uint64_t v133 = v202;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v229, 1LL, 1LL, v220);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_65:
  sub_100004AB0();
  Swift::Int v134 = v206;
  unint64_t v135 = v205;
  uint64_t v136 = v207;
  (*(void (**)(_BYTE *, void, uint64_t))(v206 + 104))( v205,  enum case for DispatchQoS.QoSClass.default(_:),  v207);
  uint64_t v137 = (void *)static OS_dispatch_queue.global(qos:)(v135);
  (*(void (**)(_BYTE *, uint64_t))(v134 + 8))(v135, v136);
  uint64_t v138 = swift_allocObject(&unk_100954728, 32LL, 7LL);
  uint64_t v139 = v209;
  *(void *)(v138 + 16) = v208;
  *(void *)(v138 + 24) = v139;
  os_log_type_t v248 = (uint64_t)sub_10020FF70;
  uint64_t v249 = v138;
  aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
  unint64_t v245 = 1107296256LL;
  uint64_t v246 = sub_1001C31E8;
  uint64_t v247 = &unk_100954740;
  uint64_t v140 = _Block_copy(&aBlock);
  Swift::Int v141 = swift_retain();
  uint64_t v142 = v210;
  static DispatchQoS.unspecified.getter(v141);
  uint64_t v243 = _swiftEmptyArrayStorage;
  uint64_t v143 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v144 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  Swift::Int v145 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v243, v144, v145, v131, v143);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v142, v133, v140);
  _Block_release(v140);

  (*(void (**)(_BYTE *, uint64_t))(v132 + 8))(v133, v131);
  (*(void (**)(_BYTE *, uint64_t))(v211 + 8))(v142, v212);
  swift_release();
  unint64_t v146 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v146);
  uint64_t v147 = v213;
  *(void *)&v195[-48] = v215;
  *(void *)&v195[-40] = v147;
  *(void *)&v195[-32] = v201;
  *(double *)&v195[-24] = a6;
  uint64_t v148 = v214;
  *(void *)&v195[-16] = v214;
  static Transaction.named<A>(_:with:)("SoundPlaybackManager.playSoundGroup", 35LL, 2LL, sub_100398DEC, &v195[-64]);
  return ((uint64_t (*)(_BYTE *, uint64_t))v219)(v148, v220);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for BatteryChargeState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100091400 + 4 * byte_1007E8DC5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100091434 + 4 * asc_1007E8DC0[v4]))();
}

uint64_t sub_100091434(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009143C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100091444LL);
  }
  return result;
}

uint64_t sub_100091450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100091458LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10009145C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100091464(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BatteryChargeState()
{
  return &type metadata for BatteryChargeState;
}

unint64_t sub_100091484()
{
  unint64_t result = qword_10099ED48;
  if (!qword_10099ED48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E8E24, &type metadata for BatteryChargeState);
    atomic_store(result, (unint64_t *)&qword_10099ED48);
  }

  return result;
}

uint64_t sub_1000914C8()
{
  uint64_t v1 = type metadata accessor for MACAddress(0LL);
  uint64_t v2 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x203A4B524920LL;
  v4._object = (void *)0xE600000000000000LL;
  String.append(_:)(v4);
  uint64_t v5 = type metadata accessor for PeripheralConnectionMaterial(0LL);
  v6._uint64_t countAndFlagsBits = Data.hexString.getter( *(void *)(v0 + *(int *)(v5 + 20)),  *(void *)(v0 + *(int *)(v5 + 20) + 8));
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 62LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  return 0x737365726464613CLL;
}

uint64_t sub_1000915D0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_10099F5A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100093AD8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PeripheralConnectionMaterial.CodingKeys,  &type metadata for PeripheralConnectionMaterial.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v18) = 0;
  uint64_t v12 = type metadata accessor for MACAddress(0LL);
  uint64_t v13 = sub_100007864( &qword_1009A5890,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    __int128 v18 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for PeripheralConnectionMaterial(0LL) + 20));
    char v17 = 1;
    unint64_t v14 = sub_1000170A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for Data, v14);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100091738@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v29 = type metadata accessor for MACAddress(0LL);
  uint64_t v26 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  unint64_t v27 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v28 = sub_100004AEC(&qword_10099F588);
  uint64_t v5 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for PeripheralConnectionMaterial(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v13 = sub_100093AD8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PeripheralConnectionMaterial.CodingKeys,  &type metadata for PeripheralConnectionMaterial.CodingKeys,  v13,  v12,  v11);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v23 = a1;
  uint64_t v24 = v5;
  uint64_t v14 = (uint64_t)v10;
  uint64_t v15 = v26;
  LOBYTE(v30) = 0;
  uint64_t v16 = sub_100007864( &qword_10099F598,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  __int128 v18 = v27;
  uint64_t v17 = v28;
  uint64_t v19 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v29, &v30, v28, v29, v16);
  (*(void (**)(uint64_t, void *, uint64_t))(v15 + 32))(v14, v18, v19);
  char v31 = 1;
  unint64_t v20 = sub_100016FE0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for Data, &v31, v17, &type metadata for Data, v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v17);
  *(_OWORD *)(v14 + *(int *)(v8 + 20)) = v30;
  sub_100093B1C(v14, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
  return sub_100093B60(v14);
}

uint64_t sub_1000919C0()
{
  if (*v0) {
    return 7041641LL;
  }
  else {
    return 0x73736572646461LL;
  }
}

uint64_t sub_1000919F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100093B9C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100091A18(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100091A24(uint64_t a1)
{
  unint64_t v2 = sub_100093AD8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100091A4C(uint64_t a1)
{
  unint64_t v2 = sub_100093AD8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100091A74@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100091738(a1, a2);
}

uint64_t sub_100091A88(void *a1)
{
  return sub_1000915D0(a1);
}

Swift::Int sub_100091A9C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MACAddress(0LL);
  uint64_t v4 = sub_100007864( &qword_10099F5A8,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  Data.hash(into:)(v6, *(void *)(v1 + *(int *)(a1 + 20)), *(void *)(v1 + *(int *)(a1 + 20) + 8));
  return Hasher._finalize()();
}

uint64_t sub_100091B28(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for MACAddress(0LL);
  uint64_t v6 = sub_100007864( &qword_10099F5A8,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  return Data.hash(into:)(a1, *(void *)(v2 + *(int *)(a2 + 20)), *(void *)(v2 + *(int *)(a2 + 20) + 8));
}

Swift::Int sub_100091B98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MACAddress(0LL);
  uint64_t v5 = sub_100007864( &qword_10099F5A8,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  Data.hash(into:)(v7, *(void *)(v2 + *(int *)(a2 + 20)), *(void *)(v2 + *(int *)(a2 + 20) + 8));
  return Hasher._finalize()();
}

void sub_100091C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static MACAddress.== infix(_:_:)(a1, a2) & 1) != 0) {
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0( *(void *)(a1 + *(int *)(a3 + 20)),  *(void *)(a1 + *(int *)(a3 + 20) + 8));
  }
}

uint64_t sub_100091C80()
{
  uint64_t result = Data.init(base64Encoded:options:)(0xD000000000000058LL, 0x8000000100852700LL, 0LL);
  qword_10099ED50 = result;
  qword_10099ED58 = v1;
  return result;
}

id sub_100091CBC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v2 + 32) = 0LL;
  *(void *)(v2 + 40) = 0LL;
  *(_OWORD *)(v2 + 48) = xmmword_1007E8EB0;
  *(_OWORD *)(v2 + 64) = xmmword_1007E8EB0;
  *(void *)(v2 + 80) = 0xF000000000000000LL;
  *(void *)(v2 + 88) = 0LL;
  *(void *)(v2 + 96) = 0LL;
  *(void *)(v2 + 104) = 0LL;
  *(void *)(v2 + 120) = 0LL;
  *(void *)(v2 + 128) = 0LL;
  uint64_t v4 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  *(void *)(v2 + 112) = 0xF000000000000000LL;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v37 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
  *uint64_t v6 = xmmword_1007E7660;
  uint64_t v34 = v6;
  uint64_t v35 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_encryptionKeyK1;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_encryptionKeyK1) = xmmword_1007E7660;
  uint64_t v36 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1) = xmmword_1007E7660;
  uint64_t v7 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(void *)(v7 + 32) = 0LL;
  uint64_t v8 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 32) = 0LL;
  uint64_t v9 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS2;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS2) = xmmword_1007E7660;
  uint64_t v10 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serverSeed;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serverSeed) = xmmword_1007E7660;
  uint64_t v11 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo;
  *(_OWORD *)uint64_t v11 = xmmword_1007E7660;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId) = xmmword_1007E7660;
  *(_WORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId) = 256;
  uint64_t v12 = (void *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryDisplayName);
  *uint64_t v12 = 0LL;
  v12[1] = 0LL;
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons) = 1LL;
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature) = xmmword_1007E7660;
  uint64_t v13 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial;
  uint64_t v14 = type metadata accessor for PeripheralConnectionMaterial(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1) = xmmword_1007E7660;
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndMACAddresses) = &_swiftEmptyDictionarySingleton;
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds) = &_swiftEmptyDictionarySingleton;
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds) = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId) = xmmword_1007E7660;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_isPairingEligibilityDataComplete) = 0;
  uint64_t v15 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_firmwareVersion;
  *(_DWORD *)uint64_t v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  uint64_t v16 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  uint64_t v17 = type metadata accessor for AccessoryProductInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v16, 1LL, 1LL, v17);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_skippedClassic) = 0;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey) = xmmword_1007E7660;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey) = xmmword_1007E7660;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_isSharedUnit) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_isManagedPeripheral) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePair) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePairSNs) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  sub_10001736C(a1, a2);
  unint64_t v18 = (unint64_t)sub_1006271CC();
  uint64_t v19 = (unint64_t *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
  *uint64_t v19 = v18;
  v19[1] = v20;
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (!v21)
  {
    uint64_t v32 = static os_log_type_t.error.getter(v18);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v32,  &_mh_execute_header,  qword_100A2B0A8,  "serialNumber is not available.",  30LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100016F9C(a1, a2);
    sub_100016F9C(*(void *)(v3 + 16), *(void *)(v3 + 24));
    sub_1000182F0(*(void *)(v3 + 40), *(void *)(v3 + 48));
    sub_1000182F0(*(void *)(v3 + 56), *(void *)(v3 + 64));
    sub_1000182F0(*(void *)(v3 + 72), *(void *)(v3 + 80));
    swift_bridgeObjectRelease();
    sub_1000182F0(*(void *)(v3 + 104), *(void *)(v3 + 112));
    swift_bridgeObjectRelease();
    sub_100015794(v37, &qword_10099D8A0);
    sub_1000182F0(*(void *)v34, *((void *)v34 + 1));
    sub_1000182F0(*(void *)v35, *(void *)(v35 + 8));
    sub_1000182F0(*(void *)v36, *(void *)(v36 + 8));
    sub_100015794(v7, &qword_10099F5B0);
    sub_100015794(v8, &qword_10099F5B8);
    sub_1000182F0(*(void *)v9, *(void *)(v9 + 8));
    sub_1000182F0(*(void *)v10, *(void *)(v10 + 8));
    sub_100093C7C( *(void *)v11,  *(void *)(v11 + 8),  *(void *)(v11 + 16),  *(void *)(v11 + 24),  *(void *)(v11 + 32),  *(void *)(v11 + 40),  *(void *)(v11 + 48),  *(void *)(v11 + 56),  *(void *)(v11 + 64),  *(void *)(v11 + 72));
    swift_bridgeObjectRelease();
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1 + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1 + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2 + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature + 8));
    sub_100015794( v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial,  &qword_10099F5C0);
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId + 8));
    sub_100015794(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, &qword_10099CE68);
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey + 8));
    sub_1000182F0( *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey + 8));
    swift_bridgeObjectRelease();
    uint64_t v33 = type metadata accessor for AccessoryPairingInfo(0LL);
    swift_deallocPartialClassInstance( v3,  v33,  *(unsigned int *)(*(void *)v3 + 48LL),  *(unsigned __int16 *)(*(void *)v3 + 52LL));
    return 0LL;
  }

  id result = (id)MobileGestalt_get_current_device(v18);
  if (result)
  {
    uint64_t v23 = result;
    MobileGestalt_get_uniqueChipID();

    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
    uint64_t v25 = (uint64_t *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    *uint64_t v25 = v24;
    v25[1] = v26;
    id result = (id)MobileGestalt_get_current_device(v24);
    if (result)
    {
      unint64_t v27 = result;
      MobileGestalt_get_chipID();

      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v30 = v29;
      sub_100016F9C(a1, a2);
      char v31 = (uint64_t *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
      *char v31 = v28;
      v31[1] = v30;
      return (id)v3;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100092498(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v64 = *(void *)(v4 - 8);
  uint64_t v65 = v4;
  __chkstk_darwin(v4);
  uint64_t v63 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  unint64_t v68 = *(void *)(v6 - 8);
  uint64_t v69 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v67 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = static os_log_type_t.info.getter(v7);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  uint64_t v10 = qword_100A2B0A8;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  __int128 v66 = xmmword_1007E67D0;
  *(_OWORD *)(v12 + 16) = xmmword_1007E67D0;
  if (a2 >> 60 == 15)
  {
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v13 = Data.hexString.getter(a1, a2);
    unint64_t v14 = v15;
  }

  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_1000226F4();
  *(void *)(v12 + 64) = v16;
  if (v14) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = 0LL;
  }
  unint64_t v18 = 0xE000000000000000LL;
  if (v14) {
    unint64_t v18 = v14;
  }
  *(void *)(v12 + 32) = v17;
  *(void *)(v12 + 40) = v18;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "E1 encryption key from server: %@.", 34LL, 2LL, v12);
  swift_bridgeObjectRelease();
  id v19 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v19)
  {
    unint64_t v20 = v19;
    uint64_t v21 = a1;
    unint64_t v22 = a2;
    if (a2 >> 60 == 15)
    {
      if (qword_10099B0B8 != -1) {
        id v19 = (id)swift_once(&qword_10099B0B8, sub_100091C80);
      }
      unint64_t v22 = qword_10099ED58;
      if ((unint64_t)qword_10099ED58 >> 60 == 15)
      {
        uint64_t v23 = static os_log_type_t.error.getter(v19);
        os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  qword_100A2B0A8,  "Invalid server public key.",  26LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_26:

        return 0LL;
      }

      uint64_t v21 = qword_10099ED50;
      sub_10001736C(qword_10099ED50, qword_10099ED58);
    }

    sub_100018BE4(a1, a2);
    id v24 = objc_msgSend(v20, "aa_primaryAppleAccount");
    if (v24)
    {
      uint64_t v25 = v24;
      id v26 = objc_msgSend(v24, "aa_personID");
      if (v26)
      {
        unint64_t v27 = v26;
        uint64_t v61 = v21;
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        uint64_t v30 = v29;

        uint64_t v32 = static os_log_type_t.debug.getter(v31);
        uint64_t v33 = qword_100A2B0A8;
        uint64_t v34 = swift_allocObject(v11, 72LL, 7LL);
        *(_OWORD *)(v34 + 16) = v66;
        *(void *)(v34 + 56) = &type metadata for String;
        *(void *)(v34 + 64) = v16;
        *(void *)(v34 + 32) = v28;
        *(void *)(v34 + 40) = v30;
        *(void *)&double v35 = swift_bridgeObjectRetain(v30).n128_u64[0];
        os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "DSID: %@.", 9LL, 2LL, v34, v35);
        uint64_t v36 = swift_bridgeObjectRelease();
        uint64_t v37 = v67;
        static String.Encoding.utf8.getter(v36);
        uint64_t v38 = String.data(using:allowLossyConversion:)(v37, 0LL, v28, v30);
        unint64_t v40 = v39;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v37, v69);
        if (v40 >> 60 != 15)
        {
          uint64_t v44 = v63;
          uint64_t v43 = v64;
          uint64_t v45 = v65;
          (*(void (**)(char *, void, uint64_t))(v64 + 104))( v63,  enum case for HashAlgorithm.sha256(_:),  v65);
          uint64_t v46 = Data.hash(algorithm:)(v44, v38, v40);
          unint64_t v48 = v47;
          (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
          uint64_t v49 = v38;
          uint64_t v50 = v61;
          sub_10001736C(v61, v22);
          uint64_t v51 = sub_10017D87C(v50, v22);
          uint64_t v69 = v49;
          unint64_t v53 = v52;
          sub_10001736C(v51, v52);
          *(void *)&__int128 v66 = objc_autoreleasePoolPush();
          uint64_t v67 = v46;
          unint64_t v68 = v48;
          sub_1004DEA64(&v70);
          objc_autoreleasePoolPop((void *)v66);
          sub_100016F9C(v51, v53);
          sub_100178400(v70, v71);

          sub_100016F9C(v50, v22);
          sub_100016F9C(v51, v53);
          sub_100016F9C(v67, v68);
          sub_1000182F0(v69, v40);

          uint64_t v55 = v70;
          unint64_t v56 = v71;
          uint64_t v57 = v62;
          uint64_t v58 = *(void *)(v62 + 40);
          unint64_t v59 = *(void *)(v62 + 48);
          *(void *)(v62 + 40) = v70;
          *(void *)(v57 + 48) = v56;
          sub_10001736C(v55, v56);
          sub_1000182F0(v58, v59);
          return v55;
        }

        uint64_t v41 = v61;
        goto LABEL_25;
      }
    }

    uint64_t v42 = static os_log_type_t.error.getter(v24);
    os_log(_:dso:log:_:_:)( v42,  &_mh_execute_header,  qword_100A2B0A8,  "Failed to obtain DSID from account.",  35LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v41 = v21;
LABEL_25:
    sub_100016F9C(v41, v22);
    goto LABEL_26;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000039LL,  0x8000000100852640LL,  "searchpartyd/AccessoryPairingInfo.swift",  39LL,  2LL,  173LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100092A74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = v3[8];
  if (v5 >> 60 == 15 || (unint64_t v6 = v3[6], v6 >> 60 == 15))
  {
    uint64_t v7 = static os_log_type_t.error.getter(a1);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_100A2B0A8,  "encryptedBlobE2 is not available.",  33LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_6:
    sub_100093D08(&v38);
    goto LABEL_7;
  }

  uint64_t v9 = v3[7];
  uint64_t v10 = v3[5];
  uint64_t v11 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
  if (!v11 || (uint64_t v12 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8)) == 0)
  {
    sub_100018BE4(v3[7], v3[8]);
    uint64_t v29 = sub_100018BE4(v10, v6);
    uint64_t v30 = static os_log_type_t.error.getter(v29);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_100A2B0A8,  "Owner device info is not available.",  35LL,  2LL,  _swiftEmptyArrayStorage);
    sub_1000182F0(v10, v6);
    sub_1000182F0(v9, v5);
    goto LABEL_6;
  }

  uint64_t v36 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
  uint64_t v37 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
  sub_100018BE4(v9, v5);
  sub_100018BE4(v10, v6);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  unsigned int v32 = static os_log_type_t.debug.getter(v15);
  uint64_t v34 = v11;
  uint64_t v35 = v10;
  uint64_t v33 = v12;
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  uint64_t v31 = qword_100A2B0A8;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_1007E67D0;
  sub_10001736C(v9, v5);
  Swift::String v18 = Data.base64EncodedString(options:)(0LL);
  sub_1000182F0(v9, v5);
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(Swift::String *)(v17 + 32) = v18;
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v31, "E2: %@", 6LL, 2LL, v17);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
  uint64_t v20 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
  uint64_t v21 = v3[2];
  unint64_t v22 = v3[3];
  uint64_t v23 = v3[11];
  uint64_t v24 = v3[12];
  uint64_t v25 = v3[13];
  unint64_t v26 = v3[14];
  *(void *)&__int128 v38 = a1;
  *((void *)&v38 + 1) = a2;
  uint64_t v39 = v9;
  unint64_t v40 = v5;
  uint64_t v41 = v36;
  uint64_t v42 = v33;
  uint64_t v43 = v37;
  uint64_t v44 = v34;
  uint64_t v45 = v19;
  uint64_t v46 = v20;
  uint64_t v47 = v21;
  unint64_t v48 = v22;
  uint64_t v49 = v35;
  unint64_t v50 = v6;
  uint64_t v51 = v23;
  uint64_t v52 = v24;
  uint64_t v53 = v25;
  uint64_t v27 = v24;
  uint64_t v28 = v25;
  unint64_t v54 = v26;
  DeviceInformationProviderFactory.init()();
  sub_10001736C(a1, a2);
  swift_bridgeObjectRetain(v20);
  sub_10001736C(v21, v22);
  swift_bridgeObjectRetain(v27);
  sub_100018BE4(v28, v26);
LABEL_7:
  sub_100093D24((uint64_t)&v38, (uint64_t)v55);
  return sub_100093D24((uint64_t)v55, a3);
}

uint64_t sub_100092DE0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = v2[10];
  if (v4 >> 60 == 15)
  {
    uint64_t v5 = static os_log_type_t.error.getter(a1);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t result = os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_100A2B0A8,  "encryptedBlobE4 is not available.",  33LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v7 = *(void *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    if (v7 && *(void *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8))
    {
      unint64_t v8 = *(void *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8);
      if (v8 >> 60 != 15)
      {
        uint64_t v27 = *(void *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
        uint64_t v28 = *(void *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
        uint64_t v18 = *(void *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
        uint64_t v25 = *(void *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
        uint64_t v26 = *(void *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
        uint64_t v21 = v2[11];
        uint64_t v22 = v2[12];
        uint64_t v23 = v2[13];
        unint64_t v24 = v2[14];
        uint64_t v29 = *(void *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
        uint64_t v30 = v2[9];
        sub_100018BE4(v30, v4);
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRetain(v29);
        sub_100018BE4(v25, v8);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v18);
        uint64_t result = sub_100018BE4(v23, v24);
        uint64_t v17 = v26;
        uint64_t v14 = v27;
        uint64_t v19 = v25;
        uint64_t v16 = v28;
        uint64_t v15 = v29;
        uint64_t v20 = v30;
        goto LABEL_16;
      }

      uint64_t v9 = v2[9];
      uint64_t v10 = sub_10001736C(v9, v2[10]);
      uint64_t v11 = static os_log_type_t.error.getter(v10);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_100A2B0A8,  "Missing pairing status!",  23LL,  2LL,  _swiftEmptyArrayStorage);
    }

    else
    {
      uint64_t v9 = v2[9];
      uint64_t v12 = sub_10001736C(v9, v2[10]);
      uint64_t v13 = static os_log_type_t.error.getter(v12);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_100A2B0A8,  "Owner device info is not available.",  35LL,  2LL,  _swiftEmptyArrayStorage);
    }

    uint64_t result = sub_1000182F0(v9, v4);
  }

  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  unint64_t v8 = 0LL;
  uint64_t v20 = 0LL;
  unint64_t v4 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  unint64_t v24 = 0LL;
LABEL_16:
  *a2 = v14;
  a2[1] = v15;
  a2[2] = v16;
  a2[3] = v7;
  a2[4] = v17;
  a2[5] = v18;
  a2[6] = v19;
  a2[7] = v8;
  a2[8] = v20;
  a2[9] = v4;
  a2[10] = v21;
  a2[11] = v22;
  a2[12] = v23;
  a2[13] = v24;
  return result;
}

uint64_t sub_1000930A8()
{
  return v0;
}

uint64_t sub_100093430()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100093454()
{
  return type metadata accessor for AccessoryPairingInfo(0LL);
}

uint64_t type metadata accessor for AccessoryPairingInfo(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_10099ED88, (uint64_t)&nominal type descriptor for AccessoryPairingInfo);
}

void sub_100093470(uint64_t a1)
{
  v8[0] = &unk_1007E8F28;
  v8[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[2] = &unk_1007E8F40;
  v8[3] = &unk_1007E8F40;
  v8[4] = &unk_1007E8F40;
  v8[5] = &unk_1007E8F58;
  v8[6] = &unk_1007E8F40;
  v8[7] = &unk_1007E8F58;
  sub_10009361C( 319LL,  (unint64_t *)&qword_1009AFA50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v8[8] = *(void *)(v2 - 8) + 64LL;
    v8[9] = &unk_1007E8F40;
    v8[10] = &unk_1007E8F40;
    v8[11] = &unk_1007E8F40;
    v8[12] = &unk_1007E8F70;
    v8[13] = &unk_1007E8F70;
    v8[14] = &unk_1007E8F40;
    v8[15] = &unk_1007E8F40;
    v8[16] = &unk_1007E8F88;
    v8[17] = &unk_1007E8F58;
    v8[18] = &unk_1007E8F58;
    v8[19] = &unk_1007E8FA0;
    v8[20] = &unk_1007E8F40;
    v8[21] = &unk_1007E8F40;
    v8[22] = &unk_1007E8F40;
    v8[23] = &unk_1007E8F40;
    v8[24] = &unk_1007E8F40;
    v8[25] = &unk_1007E8F40;
    v8[26] = &unk_1007E8F40;
    v8[27] = &unk_1007E8FB8;
    v8[28] = &unk_1007E8F58;
    v8[29] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[30] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v8[31] = &unk_1007E8F40;
    v8[32] = &unk_1007E8F40;
    v8[33] = &unk_1007E8F40;
    v8[34] = &unk_1007E8F40;
    v8[35] = &unk_1007E8F40;
    v8[36] = &unk_1007E8F40;
    sub_10009361C(319LL, &qword_10099ED98, type metadata accessor for PeripheralConnectionMaterial);
    if (v5 <= 0x3F)
    {
      v8[37] = *(void *)(v4 - 8) + 64LL;
      v8[38] = &unk_1007E8F40;
      v8[39] = &unk_1007E8F40;
      v8[40] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[41] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[42] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[43] = &unk_1007E8F40;
      v8[44] = &unk_1007E8FD0;
      v8[45] = &unk_1007E8FE8;
      sub_10009361C(319LL, (unint64_t *)&qword_10099EDA0, type metadata accessor for AccessoryProductInfo);
      if (v7 <= 0x3F)
      {
        v8[46] = *(void *)(v6 - 8) + 64LL;
        v8[47] = &unk_1007E8FD0;
        v8[48] = &unk_1007E8F40;
        v8[49] = &unk_1007E8F40;
        v8[50] = &unk_1007E8F40;
        v8[51] = &unk_1007E8F40;
        v8[52] = &unk_1007E8FD0;
        v8[53] = &unk_1007E8FD0;
        v8[54] = &unk_1007E8FD0;
        v8[55] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_updateClassMetadata2(a1, 256LL, 56LL, v8, a1 + 80);
      }
    }
  }

void sub_10009361C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t type metadata accessor for PeripheralConnectionMaterial(uint64_t a1)
{
  return sub_10008BED8(a1, qword_10099F548, (uint64_t)&nominal type descriptor for PeripheralConnectionMaterial);
}

uint64_t *sub_10009367C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    uint64_t v7 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_10001736C(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
  }

  return a1;
}

uint64_t sub_100093718(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return sub_100016F9C(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100093760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_10001736C(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t sub_1000937D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_10001736C(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_100016F9C(v12, v13);
  return a1;
}

uint64_t sub_100093848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000938A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100016F9C(v8, v9);
  return a1;
}

uint64_t sub_10009390C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100093918);
}

uint64_t sub_100093918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MACAddress(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000939A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000939B4);
}

uint64_t sub_1000939B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MACAddress(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  uint64_t v10 = (void *)(a1 + *(int *)(a4 + 20));
  *uint64_t v10 = 0LL;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_100093A3C(uint64_t a1)
{
  uint64_t result = type metadata accessor for MACAddress(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1007E8F28;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100093AAC()
{
  return sub_100007864( &qword_10099F580,  type metadata accessor for PeripheralConnectionMaterial,  (uint64_t)&unk_1007E9020);
}

unint64_t sub_100093AD8()
{
  unint64_t result = qword_10099F590;
  if (!qword_10099F590)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E91C4, &type metadata for PeripheralConnectionMaterial.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099F590);
  }

  return result;
}

uint64_t sub_100093B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeripheralConnectionMaterial(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100093B60(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PeripheralConnectionMaterial(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100093B9C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x73736572646461LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73736572646461LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 7041641 && a2 == 0xE300000000000000LL)
  {
    swift_bridgeObjectRelease(0xE300000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(7041641LL, 0xE300000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100093C7C( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a2 >> 60 != 15)
  {
    sub_100016F9C(result, a2);
    sub_100016F9C(a3, a4);
    sub_100016F9C(a5, a6);
    sub_1000182F0(a7, a8);
    return sub_1000182F0(a9, a10);
  }

  return result;
}

double sub_100093D08(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_100093D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099F5C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for PeripheralConnectionMaterial.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100093DB8 + 4 * byte_1007E8EC5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100093DEC + 4 * byte_1007E8EC0[v4]))();
}

uint64_t sub_100093DEC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100093DF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100093DFCLL);
  }
  return result;
}

uint64_t sub_100093E08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100093E10LL);
  }
  *(_BYTE *)double result = a2 + 1;
  return result;
}

uint64_t sub_100093E14(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100093E1C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PeripheralConnectionMaterial.CodingKeys()
{
  return &type metadata for PeripheralConnectionMaterial.CodingKeys;
}

unint64_t sub_100093E3C()
{
  unint64_t result = qword_10099F5D0;
  if (!qword_10099F5D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E919C, &type metadata for PeripheralConnectionMaterial.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099F5D0);
  }

  return result;
}

unint64_t sub_100093E84()
{
  unint64_t result = qword_10099F5D8;
  if (!qword_10099F5D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E910C, &type metadata for PeripheralConnectionMaterial.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099F5D8);
  }

  return result;
}

unint64_t sub_100093ECC()
{
  unint64_t result = qword_10099F5E0;
  if (!qword_10099F5E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9134, &type metadata for PeripheralConnectionMaterial.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099F5E0);
  }

  return result;
}

uint64_t sub_100093F10(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  unint64_t v3 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099CA60) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[13] = swift_task_alloc(v3);
  v2[14] = swift_task_alloc(v3);
  return swift_task_switch(sub_100093F7C, v1, 0LL);
}

uint64_t sub_100093F7C()
{
  uint64_t v1 = *(void *)(v0 + 96) + 144LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 16LL))
  {
    uint64_t v3 = *(void *)(v0 + 88);
    swift_bridgeObjectRetain(v2);
    unint64_t v4 = sub_10030D124(v3);
    if ((v5 & 1) != 0)
    {
      uint64_t v6 = *(void *)(v0 + 88);
      uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v4);
      *(void *)(v0 + 120) = v7;
      swift_retain();
      swift_bridgeObjectRelease();
      swift_beginAccess(v1, v0 + 40, 33LL, 0LL);
      uint64_t v8 = sub_100047CBC(v6);
      swift_endAccess(v0 + 40);
      swift_release(v8);
      return swift_task_switch(sub_10009408C, v7, 0LL);
    }

    swift_bridgeObjectRelease();
  }

  uint64_t v10 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009408C(uint64_t a1)
{
  uint64_t v2 = v1[14];
  uint64_t v3 = v1[15];
  uint64_t v5 = v1[12];
  uint64_t v4 = v1[13];
  static DispatchTime.now()(a1);
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v2, 0LL, 1LL, v6);
  sub_100015750(v2, v4, &qword_10099CA60);
  uint64_t v7 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime;
  swift_beginAccess(v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime, v1 + 8, 33LL, 0LL);
  sub_100015680(v4, v7);
  swift_endAccess(v1 + 8);
  return swift_task_switch(sub_100094154, v5, 0LL);
}

uint64_t sub_100094154()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  v0[16] = swift_allocObject(v1, 112LL, 15LL);
  swift_defaultActor_initialize();
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[17] = (uint64_t)v2;
  void *v2 = v0;
  v2[1] = (uint64_t *)sub_1000941C0;
  return sub_100713F88(v0[15]);
}

uint64_t sub_1000941C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 96LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 136LL));
  swift_release(v1);
  return swift_task_switch(sub_100094220, v2, 0LL);
}

uint64_t sub_100094220()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094260(uint64_t a1)
{
  uint64_t v3 = v1 + 152;
  uint64_t result = swift_beginAccess(v1 + 152, v11, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 152);
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain(v5);
    unint64_t v6 = sub_10030D124(a1);
    if ((v7 & 1) != 0)
    {
      uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_beginAccess(v3, v10, 33LL, 0LL);
      uint64_t v9 = sub_100047CBC(a1);
      swift_endAccess(v10);
      swift_release(v9);
      type metadata accessor for Transaction(0LL);
      swift_retain();
      static Transaction.asyncTask(name:block:)("Firmware.completeEvent", 22LL, 2LL, &unk_10099F7E8, v8);
      return swift_release_n(v8, 2LL);
    }

    else
    {
      return swift_bridgeObjectRelease();
    }
  }

  return result;
}

uint64_t sub_10009435C(uint64_t a1)
{
  v1[5] = a1;
  unint64_t v3 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099CA60) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[6] = swift_task_alloc(v3);
  v1[7] = swift_task_alloc(v3);
  return swift_task_switch(sub_1000943CC, a1, 0LL);
}

uint64_t sub_1000943CC(uint64_t a1)
{
  uint64_t v3 = v1[6];
  uint64_t v2 = v1[7];
  uint64_t v4 = v1[5];
  static DispatchTime.now()(a1);
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v2, 0LL, 1LL, v5);
  sub_100015750(v2, v3, &qword_10099CA60);
  uint64_t v6 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime, v1 + 2, 33LL, 0LL);
  sub_100015680(v3, v6);
  swift_endAccess(v1 + 2);
  return swift_task_switch(sub_10009448C, 0LL, 0LL);
}

uint64_t sub_10009448C()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  v0[8] = swift_allocObject(v1, 112LL, 15LL);
  swift_defaultActor_initialize();
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[9] = (uint64_t)v2;
  void *v2 = v0;
  v2[1] = (uint64_t *)sub_1000944F8;
  return sub_100713F88(v0[5]);
}

uint64_t sub_1000944F8()
{
  uint64_t v1 = *(void *)(*v0 + 64);
  uint64_t v3 = *(void *)(*v0 + 48);
  uint64_t v2 = *(void *)(*v0 + 56);
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 72));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100094564()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  unint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v3 = (dispatch_queue_s *)v0[16];
  uint64_t v4 = swift_allocObject(&unk_10093B8B0, 24LL, 7LL);
  swift_weakInit(v4 + 16, v1);
  uint64_t v5 = (void *)swift_allocObject(&unk_10093B8D8, 40LL, 7LL);
  v5[2] = v4;
  v5[3] = &v13;
  v5[4] = v2;
  uint64_t v6 = swift_allocObject(&unk_10093B900, 32LL, 7LL);
  *(void *)(v6 + 16) = sub_100095014;
  *(void *)(v6 + 24) = v5;
  aBlock[4] = sub_100095030;
  uint64_t v12 = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  aBlock[3] = &unk_10093B918;
  char v7 = _Block_copy(aBlock);
  uint64_t v8 = v12;
  swift_retain();
  swift_release(v8);
  dispatch_sync(v3, v7);
  _Block_release(v7);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v6, "", 115LL, 158LL, 39LL, 1LL);
  uint64_t result = swift_release(v6);
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = v13;
    swift_release(v5);
    return (uint64_t)v10;
  }

  return result;
}

uint64_t sub_1000946C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 120);
    uint64_t v7 = qword_10099B318;
    swift_retain();
    if (v7 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v8 = sub_1006A12BC(v12);
    swift_bridgeObjectRelease();
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v9 = sub_1006A12BC(v12);
    swift_bridgeObjectRelease();
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v10 = sub_1006A12A8(v12);
    uint64_t result = swift_bridgeObjectRelease();
    if ((unsigned __int128)(v10 * (__int128)60LL) >> 64 == (60 * v10) >> 63)
    {
      uint64_t v11 = sub_1006CD2E8((double)v8 * 60.0, (double)v9 * 60.0, (double)(60 * v10));
      swift_release(v6);
      swift_release(v5);
      *a2 = v11;
      return swift_bridgeObjectRelease();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100094874()
{
  swift_release(*(void *)(v0 + 136));
  swift_bridgeObjectRelease(*(void *)(v0 + 144));
  swift_bridgeObjectRelease(*(void *)(v0 + 152));
  swift_release(*(void *)(v0 + 160));
  swift_release(*(void *)(v0 + 168));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000948D0()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FirmwareUpdateService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd21FirmwareUpdateService);
}

uint64_t sub_100094908(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v8 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v10 = &v42[-v9];
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v11);
  unint64_t v13 = &v42[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100504F30(a1, (uint64_t)v13);
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v13, 1LL, v14) == 1)
  {
    sub_100015794((uint64_t)v13, (uint64_t *)&unk_1009A9C30);
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    unint64_t v51 = 0LL;
  }

  else
  {
    *((void *)&v50 + 1) = v14;
    unint64_t v51 = sub_100094F84();
    uint64_t v15 = sub_10000A7C8(&v49);
    sub_10001DBBC((uint64_t)v13, (uint64_t)v15);
  }

  sub_100015750((uint64_t)&v49, (uint64_t)v52, (uint64_t *)&unk_1009A9C40);
  sub_10001581C((uint64_t)v52, (uint64_t)&v47, (uint64_t *)&unk_1009A9C40);
  if (v48)
  {
    sub_100012EC0(&v47, (uint64_t)&v49);
    uint64_t v16 = *((void *)&v50 + 1);
    unint64_t v17 = v51;
    sub_100012ED8(&v49, *((uint64_t *)&v50 + 1));
    if (((*(uint64_t (**)(uint64_t, unint64_t))(v17 + 96))(v16, v17) & 1) != 0)
    {
      int v46 = *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for BeaconObservation(0LL) + 24));
      switch(v46)
      {
        case 1:
          uint64_t v22 = type metadata accessor for UUID(0LL);
          uint64_t v23 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL);
          int v43 = 1;
          uint64_t v19 = v23(v10, 1LL, 1LL, v22);
          goto LABEL_15;
        case 7:
        case 8:
        case 11:
          uint64_t v18 = type metadata accessor for UUID(0LL);
          uint64_t v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( v10,  1LL,  1LL,  v18);
          int v20 = 3;
          goto LABEL_14;
        case 10:
          uint64_t v24 = type metadata accessor for UUID(0LL);
          uint64_t v25 = *(void *)(v24 - 8);
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v25 + 16))(v10, a1, v24);
          uint64_t v19 = (*(uint64_t (**)(_BYTE *, void, uint64_t, uint64_t))(v25 + 56))(v10, 0LL, 1LL, v24);
          int v43 = 0;
          goto LABEL_15;
        case 16:
          uint64_t v26 = type metadata accessor for UUID(0LL);
          uint64_t v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))( v10,  1LL,  1LL,  v26);
          int v20 = 6;
          goto LABEL_14;
        case 34:
          uint64_t v27 = type metadata accessor for UUID(0LL);
          uint64_t v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))( v10,  1LL,  1LL,  v27);
          int v20 = 5;
          goto LABEL_14;
        case 35:
          uint64_t v28 = type metadata accessor for UUID(0LL);
          uint64_t v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))( v10,  1LL,  1LL,  v28);
          int v20 = 7;
LABEL_14:
          int v43 = v20;
LABEL_15:
          uint64_t v44 = v5;
          uint64_t v45 = v2;
          uint64_t v29 = static os_log_type_t.default.getter(v19);
          if (qword_10099B790 != -1) {
            swift_once(&qword_10099B790, sub_100651808);
          }
          uint64_t v30 = qword_100A2B0A0;
          uint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099D740);
          uint64_t v32 = swift_allocObject(v31, 112LL, 7LL);
          *(_OWORD *)(v32 + 16) = xmmword_1007E4750;
          uint64_t v33 = UUID.uuidString.getter(v32);
          uint64_t v35 = v34;
          *(void *)(v32 + 56) = &type metadata for String;
          unint64_t v36 = sub_1000226F4();
          *(void *)(v32 + 64) = v36;
          *(void *)(v32 + 32) = v33;
          *(void *)(v32 + 40) = v35;
          sub_10042C96C(v46);
          *(void *)(v32 + 96) = &type metadata for String;
          *(void *)(v32 + 104) = v36;
          *(void *)(v32 + 72) = v37;
          *(void *)(v32 + 80) = v38;
          os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Beacon (UUID: %@, type: %@) observed", 36LL, 2LL, v32);
          swift_bridgeObjectRelease();
          type metadata accessor for Transaction(0LL);
          sub_10001581C((uint64_t)v10, (uint64_t)v8, &qword_10099D8A0);
          uint64_t v39 = *(unsigned __int8 *)(v44 + 80);
          uint64_t v40 = (v39 + 25) & ~v39;
          uint64_t v41 = swift_allocObject(&unk_10093B888, v40 + v6, v39 | 7);
          *(void *)(v41 + 16) = v45;
          *(_BYTE *)(v41 + 24) = v43;
          sub_100015750((uint64_t)v8, v41 + v40, &qword_10099D8A0);
          swift_retain();
          static Transaction.asyncTask(name:block:)("Firmware.observation", 20LL, 2LL, &unk_10099F7D8, v41);
          swift_release(v41);
          sub_100015794((uint64_t)v10, &qword_10099D8A0);
          break;
        default:
          break;
      }
    }

    sub_100015794((uint64_t)v52, (uint64_t *)&unk_1009A9C40);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v49);
  }

  else
  {
    sub_100015794((uint64_t)v52, (uint64_t *)&unk_1009A9C40);
    return sub_100015794((uint64_t)&v47, (uint64_t *)&unk_1009A9C40);
  }

uint64_t sub_100094DCC(uint64_t a1)
{
  return swift_task_switch(sub_100094DE0, a1, 0LL);
}

uint64_t sub_100094DE0(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B790 != -1) {
    swift_once(&qword_10099B790, sub_100651808);
  }
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_100A2B0A0,  "initiateFirmwareUpdate: neither Me nor only iOS device. Firmware update is not allowed.",  87LL,  2LL,  _swiftEmptyArrayStorage);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100094E68(uint64_t a1)
{
  return sub_100094908(a1);
}

uint64_t sub_100094E88()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_10099D8A0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 25) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release(*(void *)(v0 + 16));
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100094F28()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_10099F7D4);
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100015D58;
  return swift_task_switch(sub_100094DE0, v2, 0LL);
}

unint64_t sub_100094F84()
{
  unint64_t result = qword_10099D000;
  if (!qword_10099D000)
  {
    uint64_t v1 = type metadata accessor for OwnedBeaconRecord(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10080B120, v1);
    atomic_store(result, (unint64_t *)&qword_10099D000);
  }

  return result;
}

uint64_t sub_100094FCC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100094FF0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100095014()
{
  return sub_1000946C8(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_100095020()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100095030()
{
  return sub_100025BB4(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100095038(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100095048(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100095050()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_10099F7E4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  void *v2 = v1;
  v2[1] = sub_1000159BC;
  return sub_10009435C(v0);
}

uint64_t *sub_100095098(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v13(v9, v10, v11);
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v17((char *)a2 + v14, 1LL, v11))
    {
      uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0LL, 1LL, v11);
    }

    uint64_t v20 = a3[7];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    if (v17(v22, 1LL, v11))
    {
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      v13(v21, v22, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v21, 0LL, 1LL, v11);
    }
  }

  return a1;
}

uint64_t sub_100095238(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v5, v6);
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v9(v8, 1LL, v6)) {
    v12(v8, v6);
  }
  uint64_t v10 = a1 + a2[7];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v10, 1LL, v6);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v6);
  }
  return result;
}

uint64_t sub_100095328(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
  v12(v8, v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v16((const void *)(a2 + v13), 1LL, v10))
  {
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0LL, 1LL, v10);
  }

  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  if (v16(v20, 1LL, v10))
  {
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    v12(v19, v20, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v19, 0LL, 1LL, v10);
  }

  return a1;
}

uint64_t sub_10009549C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  int v17 = v16((const void *)(a1 + v13), 1LL, v10);
  int v18 = v16(v15, 1LL, v10);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v14, v15, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
LABEL_6:
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  v12(v14, v15, v10);
LABEL_7:
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  int v23 = v16((const void *)(a1 + v20), 1LL, v10);
  int v24 = v16(v22, 1LL, v10);
  if (!v23)
  {
    if (!v24)
    {
      v12(v21, v22, v10);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v11 + 8))(v21, v10);
    goto LABEL_12;
  }

  if (v24)
  {
LABEL_12:
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v21, v22, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v21, 0LL, 1LL, v10);
  return a1;
}

uint64_t sub_100095698(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v16((const void *)(a2 + v13), 1LL, v10))
  {
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0LL, 1LL, v10);
  }

  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  if (v16(v20, 1LL, v10))
  {
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    v12(v19, v20, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v19, 0LL, 1LL, v10);
  }

  return a1;
}

uint64_t sub_10009580C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  int v17 = v16((const void *)(a1 + v13), 1LL, v10);
  int v18 = v16(v15, 1LL, v10);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
LABEL_6:
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  v12(v14, v15, v10);
LABEL_7:
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  int v23 = v16((const void *)(a1 + v20), 1LL, v10);
  int v24 = v16(v22, 1LL, v10);
  if (!v23)
  {
    if (!v24)
    {
      v12(v21, v22, v10);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v11 + 8))(v21, v10);
    goto LABEL_12;
  }

  if (v24)
  {
LABEL_12:
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v21, v22, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v21, 0LL, 1LL, v10);
  return a1;
}

uint64_t sub_100095A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100095A14);
}

uint64_t sub_100095A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v11;
      uint64_t v13 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
      uint64_t v12 = *(void *)(v8 - 8);
      uint64_t v13 = *(int *)(a3 + 24);
    }

    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_100095AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100095ABC);
}

uint64_t sub_100095ABC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D720);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = *(int *)(a4 + 24);
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for UpdateDeviceState(uint64_t a1)
{
  uint64_t result = qword_10099F848;
  if (!qword_10099F848) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UpdateDeviceState);
  }
  return result;
}

void sub_100095B9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for Date(319LL);
    if (v5 <= 0x3F)
    {
      v8[1] = *(void *)(v4 - 8) + 64LL;
      sub_10003FEF4(319LL);
      if (v7 <= 0x3F)
      {
        uint64_t v9 = *(void *)(v6 - 8) + 64LL;
        uint64_t v10 = v9;
        swift_initStructMetadata(a1, 256LL, 4LL, v8, a1 + 16);
      }
    }
  }

uint64_t sub_100095C3C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A118);
  sub_10000A720(v0, (uint64_t)qword_100A2A118);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000012LL,  0x8000000100852C40LL);
}

unint64_t sub_100095CBC(char a1)
{
  if (!a1) {
    return 0xD000000000000037LL;
  }
  if (a1 == 1) {
    return 0xD000000000000036LL;
  }
  return 0xD000000000000035LL;
}

uint64_t sub_100095D14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100306848(*a1, *a2);
}

Swift::Int sub_100095D20()
{
  return sub_10031334C(*v0);
}

uint64_t sub_100095D28(uint64_t a1)
{
  return sub_100309844(a1, *v1);
}

Swift::Int sub_100095D30(uint64_t a1)
{
  return sub_10030A604(a1, *v1);
}

unint64_t sub_100095D38@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10009AB38(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100095D64@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100095CBC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100095D8C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void v4[3] = a1;
  v4[4] = a3;
  uint64_t v5 = *a2;
  v4[5] = a4;
  v4[6] = v5;
  uint64_t v6 = sub_100004AEC(&qword_10099FB70);
  v4[7] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ObservedAdvertisement(0LL);
  v4[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v4[9] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[10] = swift_task_alloc(v9);
  void v4[11] = swift_task_alloc(v9);
  return swift_task_switch(sub_100095E28, 0LL, 0LL);
}

uint64_t sub_100095E28()
{
  uint64_t v2 = *(void *)(v1 + 24);
  if (!((unint64_t)v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v2);
    *(void *)(v1 + 96) = v3;
    if (v3) {
      goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v32 = *(void *)(v1 + 80);
    uint64_t v31 = *(void *)(v1 + 88);
    uint64_t v33 = *(void *)(v1 + 56);
    (*(void (**)(void))(v1 + 32))(0LL);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  if (v2 < 0) {
    uint64_t v30 = *(void *)(v1 + 24);
  }
  else {
    uint64_t v30 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v2);
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v30);
  *(void *)(v1 + 96) = v3;
  if (!v3) {
    goto LABEL_24;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v34 = (uint64_t *)(v1 + 16);
    while (1)
    {
      *(void *)(v1 + 104) = v4;
      uint64_t v6 = *(void *)(v1 + 24);
      id v7 = (v6 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v6)
         : *(id *)(v6 + 8 * v4 + 32);
      *(void *)(v1 + 112) = v7;
      uint64_t v8 = *(void *)(v1 + 64);
      uint64_t v9 = *(void *)(v1 + 72);
      uint64_t v10 = *(void *)(v1 + 56);
      uint64_t v0 = (os_log_s *)v7;
      sub_1003F7974(v0, 1, v10);
      sub_100015794(*(void *)(v1 + 56), &qword_10099FB70);
      if (qword_10099B0C0 != -1) {
        swift_once(&qword_10099B0C0, sub_100095C3C);
      }
      uint64_t v11 = type metadata accessor for Logger(0LL);
      uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2A118);
      uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v14 = static os_log_type_t.error.getter(v13);
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Error inserting observedAdvertisement: could not convert to ObservedAdvertisement.",  v15,  2u);
        swift_slowDealloc(v15, -1LL, -1LL);
        uint64_t v5 = v13;
      }

      else
      {
        uint64_t v5 = v0;
        uint64_t v0 = v13;
      }

      uint64_t v4 = *(void *)(v1 + 104) + 1LL;
      if (v4 == *(void *)(v1 + 96)) {
        goto LABEL_24;
      }
    }

    sub_10002218C(*(void *)(v1 + 56), *(void *)(v1 + 88), type metadata accessor for ObservedAdvertisement);
    if (qword_10099B0C0 == -1) {
      goto LABEL_16;
    }
  }

  swift_once(&qword_10099B0C0, sub_100095C3C);
LABEL_16:
  uint64_t v17 = *(void *)(v1 + 80);
  uint64_t v16 = *(void *)(v1 + 88);
  uint64_t v18 = type metadata accessor for Logger(0LL);
  *(void *)(v1 + 120) = sub_10000A720(v18, (uint64_t)qword_100A2A118);
  uint64_t v19 = sub_10009BDA0(v16, v17);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.info.getter(v20);
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = *(void *)(v1 + 80);
  if (v22)
  {
    int v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = v25;
    *(_DWORD *)int v24 = 136315138;
    sub_1000A869C();
    *uint64_t v34 = sub_1003F11D4(v26, v27, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v1 + 24, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v23, type metadata accessor for ObservedAdvertisement);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "observedAdvertisement: %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v1 + 80), type metadata accessor for ObservedAdvertisement);
  }

  -[os_log_s refreshGeotag](v0, "refreshGeotag");
  -[os_log_s observationValue](v0, "observationValue");
  uint64_t v35 = (uint64_t (*)(uint64_t))((char *)&dword_1009AD1A8 + dword_1009AD1A8);
  uint64_t v28 = (void *)swift_task_alloc(unk_1009AD1AC);
  *(void *)(v1 + 128) = v28;
  void *v28 = v1;
  v28[1] = sub_10009625C;
  return v35(*(void *)(v1 + 88));
}

uint64_t sub_10009625C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1000966C4;
  }
  else {
    uint64_t v3 = sub_1000962C0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000962C0()
{
  uint64_t v1 = *(void *)(v0 + 88);

  sub_100018C68(v1, type metadata accessor for ObservedAdvertisement);
  uint64_t v2 = *(void *)(v0 + 104) + 1LL;
  if (v2 == *(void *)(v0 + 96))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v3 = *(void *)(v0 + 88);
    uint64_t v5 = *(void *)(v0 + 56);
    (*(void (**)(void))(v0 + 32))(0LL);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v32 = (uint64_t *)(v0 + 16);
    while (1)
    {
      *(void *)(v0 + 104) = v2;
      uint64_t v9 = *(void *)(v0 + 24);
      id v10 = (v9 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v9)
          : *(id *)(v9 + 8 * v2 + 32);
      *(void *)(v0 + 112) = v10;
      uint64_t v11 = *(void *)(v0 + 64);
      uint64_t v12 = *(void *)(v0 + 72);
      uint64_t v13 = *(void *)(v0 + 56);
      os_log_type_t v14 = (os_log_s *)v10;
      sub_1003F7974(v14, 1, v13);
      sub_100015794(*(void *)(v0 + 56), &qword_10099FB70);
      if (qword_10099B0C0 != -1) {
        swift_once(&qword_10099B0C0, sub_100095C3C);
      }
      uint64_t v15 = type metadata accessor for Logger(0LL);
      uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2A118);
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.error.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        id v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v7 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Error inserting observedAdvertisement: could not convert to ObservedAdvertisement.",  v7,  2u);
        swift_slowDealloc(v7, -1LL, -1LL);
        uint64_t v8 = v17;
      }

      else
      {
        uint64_t v8 = v14;
        os_log_type_t v14 = v17;
      }

      uint64_t v2 = *(void *)(v0 + 104) + 1LL;
      if (v2 == *(void *)(v0 + 96)) {
        goto LABEL_2;
      }
    }

    sub_10002218C(*(void *)(v0 + 56), *(void *)(v0 + 88), type metadata accessor for ObservedAdvertisement);
    if (qword_10099B0C0 != -1) {
      swift_once(&qword_10099B0C0, sub_100095C3C);
    }
    uint64_t v20 = *(void *)(v0 + 80);
    uint64_t v19 = *(void *)(v0 + 88);
    uint64_t v21 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 120) = sub_10000A720(v21, (uint64_t)qword_100A2A118);
    uint64_t v22 = sub_10009BDA0(v19, v20);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.info.getter(v23);
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 80);
    if (v25)
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v34 = v28;
      *(_DWORD *)unint64_t v27 = 136315138;
      sub_1000A869C();
      *uint64_t v32 = sub_1003F11D4(v29, v30, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v0 + 24, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v26, type metadata accessor for ObservedAdvertisement);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "observedAdvertisement: %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 80), type metadata accessor for ObservedAdvertisement);
    }

    -[os_log_s refreshGeotag](v14, "refreshGeotag");
    -[os_log_s observationValue](v14, "observationValue");
    uint64_t v33 = (uint64_t (*)(uint64_t))((char *)&dword_1009AD1A8 + dword_1009AD1A8);
    uint64_t v31 = (void *)swift_task_alloc(unk_1009AD1AC);
    *(void *)(v0 + 128) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_10009625C;
    return v33(*(void *)(v0 + 88));
  }

uint64_t sub_1000966C4()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 136);
  if (v5)
  {
    uint64_t v7 = swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    uint64_t v9 = _convertErrorToNSError(_:)(v6);
    *(void *)(v7 + 4) = v9;
    *uint64_t v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error inserting observedAdvertisement: %@", (uint8_t *)v7, 0xCu);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(v6);
    swift_errorRelease(v6);
  }

  swift_errorRelease(v6);
  uint64_t v11 = *(void *)(v0 + 88);

  sub_100018C68(v11, type metadata accessor for ObservedAdvertisement);
  uint64_t v12 = *(void *)(v0 + 104) + 1LL;
  if (v12 == *(void *)(v0 + 96))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 88);
    uint64_t v15 = *(void *)(v0 + 56);
    (*(void (**)(void))(v0 + 32))(0LL);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v42 = (uint64_t *)(v0 + 16);
    while (1)
    {
      *(void *)(v0 + 104) = v12;
      uint64_t v19 = *(void *)(v0 + 24);
      id v20 = (v19 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v19)
          : *(id *)(v19 + 8 * v12 + 32);
      *(void *)(v0 + 112) = v20;
      uint64_t v21 = *(void *)(v0 + 64);
      uint64_t v22 = *(void *)(v0 + 72);
      uint64_t v23 = *(void *)(v0 + 56);
      os_log_type_t v24 = (os_log_s *)v20;
      sub_1003F7974(v24, 1, v23);
      sub_100015794(*(void *)(v0 + 56), &qword_10099FB70);
      if (qword_10099B0C0 != -1) {
        swift_once(&qword_10099B0C0, sub_100095C3C);
      }
      uint64_t v25 = type metadata accessor for Logger(0LL);
      uint64_t v26 = sub_10000A720(v25, (uint64_t)qword_100A2A118);
      unint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
      os_log_type_t v28 = static os_log_type_t.error.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "Error inserting observedAdvertisement: could not convert to ObservedAdvertisement.",  v17,  2u);
        swift_slowDealloc(v17, -1LL, -1LL);
        os_log_type_t v18 = v27;
      }

      else
      {
        os_log_type_t v18 = v24;
        os_log_type_t v24 = v27;
      }

      uint64_t v12 = *(void *)(v0 + 104) + 1LL;
      if (v12 == *(void *)(v0 + 96)) {
        goto LABEL_5;
      }
    }

    sub_10002218C(*(void *)(v0 + 56), *(void *)(v0 + 88), type metadata accessor for ObservedAdvertisement);
    if (qword_10099B0C0 != -1) {
      swift_once(&qword_10099B0C0, sub_100095C3C);
    }
    uint64_t v30 = *(void *)(v0 + 80);
    uint64_t v29 = *(void *)(v0 + 88);
    uint64_t v31 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 120) = sub_10000A720(v31, (uint64_t)qword_100A2A118);
    uint64_t v32 = sub_10009BDA0(v29, v30);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.info.getter(v33);
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = *(void *)(v0 + 80);
    if (v35)
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      sub_1000A869C();
      *uint64_t v42 = sub_1003F11D4(v39, v40, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v42, v0 + 24, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v36, type metadata accessor for ObservedAdvertisement);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "observedAdvertisement: %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 80), type metadata accessor for ObservedAdvertisement);
    }

    -[os_log_s refreshGeotag](v24, "refreshGeotag");
    -[os_log_s observationValue](v24, "observationValue");
    int v43 = (uint64_t (*)(uint64_t))((char *)&dword_1009AD1A8 + dword_1009AD1A8);
    uint64_t v41 = (void *)swift_task_alloc(unk_1009AD1AC);
    *(void *)(v0 + 128) = v41;
    void *v41 = v0;
    v41[1] = sub_10009625C;
    return v43(*(void *)(v0 + 88));
  }

void sub_100096CF4(uint64_t a1, char a2, void (*a3)(id))
{
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F0 != -1) {
    swift_once(&qword_10099B6F0, sub_100651034);
  }
  uint64_t v7 = qword_100A2B000;
  os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  qword_100A2B000,  "Received beaconPayloads search response.",  40LL,  2LL,  _swiftEmptyArrayStorage);
  if ((a2 & 1) != 0)
  {
    uint64_t v17 = swift_errorRetain(a1);
    uint64_t v18 = static os_log_type_t.default.getter(v17);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
    *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v30 = a1;
    swift_errorRetain(a1);
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v22 = String.init<A>(describing:)(&v30, v21);
    uint64_t v24 = v23;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_1000226F4();
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 40) = v24;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v7, "Error reading cached beacon: %@", 31LL, 2LL, v20);
    swift_bridgeObjectRelease();
    id v25 = [objc_allocWithZone(SPSearchResultMarker) init];
    id v26 = objc_allocWithZone(&OBJC_CLASS___SPBeaconPayloadCacheSearchResult);
    swift_errorRetain(a1);
    type metadata accessor for URL(0LL);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    os_log_type_t v28 = (void *)_convertErrorToNSError(_:)(a1);
    sub_100044A2C(a1, 1);
    id v16 = [v26 initWithFileURLs:isa searchResultMarker:v25 error:v28];

    sub_100044A2C(a1, 1);
  }

  else
  {
    uint64_t v8 = swift_bridgeObjectRetain(a1);
    uint64_t v9 = static os_log_type_t.default.getter(v8);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v12 = *(void *)(a1 + 16);
    *(void *)(v11 + 56) = &type metadata for Int;
    *(void *)(v11 + 64) = &protocol witness table for Int;
    *(void *)(v11 + 32) = v12;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v7, "Received cached beaconPayloads: %i", v29);
    swift_bridgeObjectRelease();
    id v13 = [objc_allocWithZone(SPSearchResultMarker) init];
    id v14 = objc_allocWithZone(&OBJC_CLASS___SPBeaconPayloadCacheSearchResult);
    type metadata accessor for URL(0LL);
    Class v15 = Array._bridgeToObjectiveC()().super.isa;
    sub_100044A2C(a1, 0);
    id v16 = [v14 initWithFileURLs:v15 searchResultMarker:v13 error:0];
  }

  a3(v16);
}

void sub_100097530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_1000975A4( void *a1, int a2, uint64_t a3, void *aBlock, unint64_t *a5, void *a6, void (*a7)(uint64_t, id, void *))
{
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = sub_100022898(0LL, a5, a6);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v13);
  _Block_copy(v12);
  id v15 = a1;
  a7(v14, v15, v12);
  _Block_release(v12);
  _Block_release(v12);

  return swift_bridgeObjectRelease();
}

void sub_1000976C8(uint64_t a1, void (*a2)(id))
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099FA30);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (void *)((char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = static os_log_type_t.default.getter(v6);
  if (qword_10099B6F0 != -1) {
    swift_once(&qword_10099B6F0, sub_100651034);
  }
  uint64_t v10 = qword_100A2B000;
  os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  qword_100A2B000,  "Received advertisement search response.",  39LL,  2LL,  _swiftEmptyArrayStorage);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  int v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v8, v4);
  if (v11 == enum case for LegacyResult.success<A>(_:))
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t v13 = *v8;
    uint64_t v14 = static os_log_type_t.default.getter(v12);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
    *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v17 = *(void *)(v13 + 16);
    *(void *)(v16 + 56) = &type metadata for Int;
    *(void *)(v16 + 64) = &protocol witness table for Int;
    *(void *)(v16 + 32) = v17;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v10, "Received cached advertisements: %i", LODWORD(v41[0]));
    swift_bridgeObjectRelease();
    if (v17)
    {
      uint64_t v44 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v17);
      uint64_t v18 = v13 + 32;
      do
      {
        sub_100013044(v18, (uint64_t)v41);
        uint64_t v19 = v42;
        uint64_t v20 = v43;
        sub_100012ED8(v41, v42);
        id v21 = sub_10012BE24(v19, v20);
        uint64_t v22 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
        uint64_t v23 = v44[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
        uint64_t v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
        specialized ContiguousArray._endMutation()(v24);
        v18 += 40LL;
        --v17;
      }

      while (v17);
    }

    swift_bridgeObjectRelease();
    id v38 = [objc_allocWithZone(SPSearchResultMarker) init];
    id v39 = objc_allocWithZone(&OBJC_CLASS___SPAdvertisementCacheSearchResult);
    sub_100022898(0LL, &qword_10099FB30, &OBJC_CLASS___SPBeaconAdvertisement_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v37 = [v39 initWithBeaconAdvertisements:isa searchResultMarker:v38 error:0];

    goto LABEL_11;
  }

  if (v11 == enum case for LegacyResult.failure<A>(_:))
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t v26 = *v8;
    uint64_t v27 = static os_log_type_t.default.getter(v25);
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
    *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    v41[0] = v26;
    swift_errorRetain(v26);
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v31 = String.init<A>(describing:)(v41, v30);
    uint64_t v33 = v32;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = sub_1000226F4();
    *(void *)(v29 + 32) = v31;
    *(void *)(v29 + 40) = v33;
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v10, "Error reading cached advertisements: %@", 39LL, 2LL, v29);
    swift_bridgeObjectRelease();
    id v34 = objc_allocWithZone(&OBJC_CLASS___SPAdvertisementCacheSearchResult);
    swift_errorRetain(v26);
    sub_100022898(0LL, &qword_10099FB30, &OBJC_CLASS___SPBeaconAdvertisement_ptr);
    Class v35 = Array._bridgeToObjectiveC()().super.isa;
    uint64_t v36 = (void *)_convertErrorToNSError(_:)(v26);
    swift_errorRelease(v26);
    id v37 = [v34 initWithBeaconAdvertisements:v35 searchResultMarker:0 error:v36];

    swift_errorRelease(v26);
LABEL_11:
    a2(v37);

    return;
  }

  _diagnoseUnexpectedEnumCase<A>(type:)(v4, v4);
  __break(1u);
}

uint64_t sub_100097C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 128) = a4;
  *(void *)(v5 + 136) = a5;
  return swift_task_switch(sub_100097CAC, 0LL, 0LL);
}

uint64_t sub_100097CAC()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 144) = v2;
    void *v2 = v0;
    v2[1] = sub_100097D90;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100097D90(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 152LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100097DEC, 0LL, 0LL);
}

uint64_t sub_100097DEC()
{
  uint64_t v1 = *(void *)(v0 + 152);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t v2 = dword_1009BCD5C;
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc(v2);
    *(void *)(v0 + 160) = v3;
    void *v3 = v0;
    v3[1] = sub_100097F34;
    return sub_1006D4CD8();
  }

  else
  {
    if (qword_10099B0C0 != -1) {
      swift_once(&qword_10099B0C0, sub_100095C3C);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_10000A720(v5, (uint64_t)qword_100A2A118);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Cleared anonymous observations due command.", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = *(void *)(v0 + 152);
    int v11 = *(void (**)(void))(v0 + 128);

    v11(0LL);
    swift_release(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100097F34()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 160);
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100098094;
  }

  else
  {
    swift_release(*(void *)(v2 + 152));
    uint64_t v4 = sub_100097FA0;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100097FA0()
{
  if (qword_10099B0C0 != -1) {
    swift_once(&qword_10099B0C0, sub_100095C3C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A118);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Cleared anonymous observations due command.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v7 = *(void (**)(void))(v0 + 128);

  v7(0LL);
  swift_release(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100098094()
{
  if (qword_10099B0C0 != -1) {
    swift_once(&qword_10099B0C0, sub_100095C3C);
  }
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2A118);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  os_log_type_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 168);
  if (v6)
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v8 = 138412290;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 120) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    *uint64_t v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Failed to clear observations due to command, error: %@.",  v8,  0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 168));
    swift_errorRelease(v7);
  }

  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v13 = *(void (**)(uint64_t))(v0 + 128);

  swift_errorRetain(v12);
  v13(v12);
  swift_errorRelease(v12);
  swift_errorRelease(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100098318()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AdvertisementCacheTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AdvertisementCacheTrampoline()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline);
}

id sub_10009837C()
{
  uint64_t v1 = *(void **)(v0 + 144);
  if (v1)
  {
    id v2 = *(id *)(v0 + 144);
  }

  else
  {
    uint64_t v3 = (objc_class *)type metadata accessor for AdvertisementCacheTrampoline();
    os_log_type_t v4 = (char *)objc_allocWithZone(v3);
    os_log_type_t v5 = &v4[OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation];
    *(void *)os_log_type_t v5 = v0;
    *((void *)v5 + 1) = &off_10093B9D8;
    *((void *)v5 + 2) = &off_10093B9A0;
    *((void *)v5 + 3) = &off_10093B960;
    *((void *)v5 + 4) = &off_100957FD8;
    *((void *)v5 + 5) = &off_10093B9E8;
    v10.receiver = v4;
    v10.super_class = v3;
    swift_retain();
    id v6 = objc_msgSendSuper2(&v10, "init");
    uint64_t v7 = *(void **)(v0 + 144);
    *(void *)(v0 + 144) = v6;
    id v2 = v6;

    uint64_t v1 = 0LL;
  }

  id v8 = v1;
  return v2;
}

uint64_t sub_100098444()
{
  v1[14] = v0;
  uint64_t v2 = type metadata accessor for MachServiceName(0LL);
  v1[15] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for XPCServiceDescription(0LL);
  v1[16] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[17] = v4;
  v1[18] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000984C4, v0, 0LL);
}

uint64_t sub_1000984C4()
{
  id v1 = sub_10009837C();
  if (qword_10099B0C8 != -1) {
    swift_once(&qword_10099B0C8, sub_100098ABC);
  }
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v20 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 112);
  id v6 = (id)qword_10099F890;
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v3,  0LL,  v1,  v6,  sub_10009BEC8,  v5,  0LL,  0LL,  0LL,  0LL);
  XPCSessionManager.register(service:)(v2);
  uint64_t v7 = swift_allocObject(&unk_10093BAA0, 24LL, 7LL);
  swift_weakInit(v7 + 16, v5);
  uint64_t v8 = sub_100004AEC(&qword_10099FAA8);
  uint64_t inited = swift_initStackObject(v8, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPFinderStateChangedNotification);
  uint64_t v12 = v11;
  uint64_t v13 = swift_allocObject(&unk_10093BAC8, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = sub_10009BEF0;
  *(void *)(v13 + 24) = v7;
  *(void *)(inited + 32) = v10;
  *(void *)(inited + 40) = v12;
  *(void *)(inited + 48) = sub_10009BF1C;
  *(void *)(inited + 56) = v13;
  uint64_t v14 = swift_allocObject(&unk_10093BAF0, 32LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = sub_10009BEF0;
  *(void *)(v14 + 24) = v7;
  *(void *)(inited + 64) = 0xD000000000000019LL;
  *(void *)(inited + 72) = 0x8000000100852BF0LL;
  *(void *)(inited + 80) = sub_10009CA0C;
  *(void *)(inited + 88) = v14;
  swift_retain_n(v7, 2LL);
  unint64_t v15 = sub_100412BD0(inited);
  uint64_t v16 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = DarwinNotificationHelper.init(notificationHandlers:)(v15);
  uint64_t v18 = *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_darwinHelper);
  *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_darwinHelper) = v17;
  swift_release(v18);
  type metadata accessor for Transaction(0LL);
  static Transaction.named<A>(_:with:)("AdvertisementCacheService.Startup", 33LL, 2LL, sub_10009BF24);
  swift_release(v7);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100098754(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    type metadata accessor for Transaction(0LL);
    static Transaction.asyncTask(name:block:)("LeechScanner.EvaluateState", 26LL, 2LL, &unk_1009AD108, 0LL);
    return swift_release(v4);
  }

  return result;
}

uint64_t sub_1000987D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v18[1] = *(void *)(a2 + 128);
  uint64_t v11 = swift_allocObject(&unk_10093BB18, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_10009BF68;
  uint64_t v21 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10093BB30;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v16 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v21);
}

void sub_1000989D0(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F8178();
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  id v6 = (void *)swift_allocObject(&unk_10093BB68, 40LL, 7LL);
  uint64_t v6[2] = 0LL;
  void v6[3] = 0LL;
  v6[4] = a1;
  swift_retain();
  uint64_t v7 = sub_10000BB68((uint64_t)v4, (uint64_t)&unk_10099FAC8, (uint64_t)v6);
  swift_release(v7);
  sub_100015794((uint64_t)v4, &qword_1009A9BF0);
  Transaction.capture()();
}

id sub_100098ABC()
{
  id result = sub_100098AD8();
  qword_10099F890 = (uint64_t)result;
  return result;
}

id sub_100098AD8()
{
  id v0 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___SPAdvertisementCacheXPCProtocol];
  uint64_t v1 = sub_1004B8468();
  uint64_t v2 = swift_allocObject( v1,  ((*(unsigned int *)(v1 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v1 + 52) | 7LL);
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v3 = sub_100022898(0LL, &qword_10099FAD0, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = sub_100022898(0LL, &qword_10099FAD8, &OBJC_CLASS___SPAdvertisement_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v2, "saveAdvertisements:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_1004B8468();
  uint64_t v5 = swift_allocObject( v4,  ((*(unsigned int *)(v4 + 48) + 7LL) & 0x1FFFFFFF8LL) + 8,  *(unsigned __int16 *)(v4 + 52) | 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v5 + 32) = sub_100022898(0LL, &qword_10099FAE0, &OBJC_CLASS___SPAdvertisementCacheSearchCriteria_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v5, "advertisementsForSearchCriteria:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_1004B8468();
  uint64_t v7 = swift_allocObject( v6,  ((*(unsigned int *)(v6 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v6 + 52) | 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(v7 + 32) = v3;
  *(void *)(v7 + 40) = sub_100022898(0LL, &qword_10099FAE8, &OBJC_CLASS___NSUUID_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v7, "markAdvertisementsProcessed:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1004B8468();
  uint64_t v9 = swift_allocObject( v8,  ((*(unsigned int *)(v8 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v8 + 52) | 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(v9 + 32) = v3;
  *(void *)(v9 + 40) = sub_100022898(0LL, &qword_10099FAF0, &OBJC_CLASS___SPBeaconPayload_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v9, "saveBeaconPayloads:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1004B8468();
  uint64_t v11 = swift_allocObject( v10,  ((*(unsigned int *)(v10 + 48) + 7LL) & 0x1FFFFFFF8LL) + 8,  *(unsigned __int16 *)(v10 + 52) | 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v11 + 32) = sub_100022898(0LL, &qword_10099FAF8, &OBJC_CLASS___SPBeaconPayloadCacheSearchCriteria_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v11, "beaconPayloadsForSearchCriteria:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_1004B8468();
  uint64_t v13 = swift_allocObject( v12,  ((*(unsigned int *)(v12 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v12 + 52) | 7LL);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(v13 + 32) = v3;
  *(void *)(v13 + 40) = sub_100022898(0LL, &qword_10099FB00, &OBJC_CLASS___NSURL_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v13, "markFilesProcessed:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100098DE0(void *a1)
{
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F0 != -1) {
    swift_once(&qword_10099B6F0, sub_100651034);
  }
  uint64_t v4 = qword_100A2B000;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v8 = *(void *)(v1 + 112);
  uint64_t v7 = *(void *)(v1 + 120);
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000226F4();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v7;
  *(void *)(v6 + 96) = sub_100022898(0LL, (unint64_t *)&unk_1009AB840, &OBJC_CLASS___NSXPCConnection_ptr);
  *(void *)(v6 + 104) = sub_10009BE70();
  *(void *)(v6 + 72) = a1;
  swift_bridgeObjectRetain(v7);
  id v9 = a1;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "in custom shouldAccept (%@) for %@", 34LL, 2LL, v6);
  swift_bridgeObjectRelease();
  char v12 = 0;
  unint64_t v10 = sub_10009BCE0();
  return NSXPCConnection.hasEntitlement<A>(_:)(&v12, &type metadata for AdvertisementCacheEntitlement, v10) & 1;
}

uint64_t sub_100098F18()
{
  swift_release(*(void *)(v0 + 136));
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_transactionManager;
  uint64_t v2 = type metadata accessor for PressuredExitTransactionManager(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_darwinHelper));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100098FA4()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100098FBC()
{
  return type metadata accessor for AdvertisementCacheService(0LL);
}

uint64_t type metadata accessor for AdvertisementCacheService(uint64_t a1)
{
  uint64_t result = qword_10099F8F8;
  if (!qword_10099F8F8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AdvertisementCacheService);
  }
  return result;
}

uint64_t sub_100099000(uint64_t a1)
{
  v4[1] = &unk_1007E93D8;
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_1007E93F0;
  uint64_t result = type metadata accessor for PressuredExitTransactionManager(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(result - 8) + 64LL;
    v4[6] = &unk_1007E93F0;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void *sub_1000990B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_defaultActor_initialize(v1);
  v1[14] = 0xD000000000000019LL;
  v1[15] = 0x80000001007E9380LL;
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v12 = (*(uint64_t (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v8);
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v15 = sub_100090114((unint64_t *)&qword_10099BAB0, (uint64_t *)&unk_1009A0CD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v14, v15, v2, v13);
  v1[16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003FLL,  0x8000000100852B40LL,  v7,  v4,  v11,  0LL);
  uint64_t v16 = type metadata accessor for XPCSessionManager(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = XPCSessionManager.init(name:)(0xD000000000000019LL, 0x80000001007E9380LL);
  v1[17] = v17;
  v1[18] = 0LL;
  PressuredExitTransactionManager.init()(v17);
  *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_darwinHelper) = 0LL;
  *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache) = _swiftEmptyDictionarySingleton;
  return v1;
}

uint64_t sub_100099310()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10099F90C);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100015D58;
  return sub_100098444();
}

uint64_t sub_100099354( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[30] = a8;
  v8[31] = v22;
  v8[28] = a6;
  v8[29] = a7;
  v8[26] = a4;
  v8[27] = a5;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v8[32] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[33] = v10;
  v8[34] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  v8[35] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[36] = v12;
  v8[37] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099FB48);
  v8[38] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for CachedHistoricalLocation(0LL);
  v8[39] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[40] = v15;
  v8[41] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099FB50);
  v8[42] = swift_task_alloc((*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for TimeBasedKey(0LL);
  v8[43] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v8[44] = v18;
  v8[45] = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for URL(0LL);
  v8[46] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v8[47] = v20;
  v8[48] = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000994A8, 0LL, 0LL);
}

uint64_t sub_1000994A8()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 184, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 104);
  if (*(void *)(v0 + 128))
  {
    uint64_t v3 = *(void *)(v0 + 208);
    sub_100012EC0((__int128 *)(v0 + 104), v0 + 64);
    swift_release(v3);
    sub_100012ED8((void *)(v0 + 64), *(void *)(v0 + 88));
    uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_10099C968 + dword_10099C968);
    uint64_t v4 = (void *)swift_task_alloc(unk_10099C96C);
    *(void *)(v0 + 392) = v4;
    void *v4 = v0;
    v4[1] = sub_1000995A0;
    return v5();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000995A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 392LL);
  *(void *)(*(void *)v1 + 40Hasher.init(_seed:)(v6, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000995FC, 0LL, 0LL);
}

uint64_t sub_1000995FC()
{
  uint64_t v1 = (void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 400);
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 376);
    uint64_t v3 = *(void *)(v0 + 384);
    uint64_t v5 = *(void *)(v0 + 368);
    uint64_t v6 = *(void *)(v0 + 232);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
    uint64_t v7 = type metadata accessor for BeaconPayloadFile(0LL);
    swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v8 = sub_10016D9D4(v3);
    if (!v8)
    {
LABEL_8:
      uint64_t v27 = *(void (**)(void, uint64_t))(v0 + 216);
      unint64_t v28 = sub_10009BC9C();
      uint64_t v29 = swift_allocError(&type metadata for AdvertisementCacheServiceError, v28, 0LL, 0LL);
      *uint64_t v30 = 3;
      v27(0LL, v29);
      swift_errorRelease(v29);
      swift_release(v2);
      goto LABEL_9;
    }

    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v0 + 344);
    uint64_t v11 = *(void *)(v0 + 352);
    uint64_t v12 = *(void *)(v0 + 336);
    uint64_t v14 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 248);
    uint64_t v15 = sub_1004AC2EC();
    uint64_t v17 = v16;
    ((void (*)(uint64_t, uint64_t))v15)(v14, v13);
    swift_release(v17);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1LL, v10) == 1)
    {
      uint64_t v18 = *(void *)(v0 + 336);
      swift_release(v9);
      sub_100015794(v18, (uint64_t *)&unk_10099FB50);
      goto LABEL_8;
    }

    uint64_t v23 = *(void *)(v0 + 360);
    uint64_t v24 = *(void *)(v0 + 344);
    sub_10002218C(*(void *)(v0 + 336), v23, type metadata accessor for TimeBasedKey);
    uint64_t v25 = (uint64_t *)(v23 + *(int *)(v24 + 24));
    unint64_t v26 = v25[5];
    if (v26 >> 60 == 15)
    {
      sub_100018C68(*(void *)(v0 + 360), type metadata accessor for TimeBasedKey);
      swift_release(v9);
      goto LABEL_8;
    }

    uint64_t v38 = v25[4];
    sub_10001736C(v38, v25[5]);
    SecKeyRef v124 = sub_100178F8C(v38, v26);
    unint64_t v125 = (void *)(v0 + 144);
    unint64_t v126 = v26;
    uint64_t v127 = v38;
    uint64_t v40 = *v25;
    unint64_t v39 = v25[1];
    uint64_t v41 = v25[2];
    unint64_t v42 = v25[3];
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = *v25;
    *(void *)(v0 + 24) = v39;
    *(void *)(v0 + 32) = v41;
    *(void *)(v0 + 40) = v42;
    *(void *)(v0 + 48) = v127;
    *(void *)(v0 + 56) = v126;
    sub_100018BE4(v40, v39);
    sub_10001736C(v41, v42);
    sub_100018BE4(v127, v126);
    uint64_t v43 = sub_1004DA048();
    unint64_t v45 = v44;
    unint64_t v46 = v39;
    unint64_t v47 = v45;
    sub_1000182F0(v40, v46);
    sub_100016F9C(v41, v42);
    sub_1000182F0(v127, v126);
    sub_100211CF0(v124, v43, v47, v0 + 144);
    uint64_t v48 = *(void *)(v0 + 312);
    uint64_t v49 = *(void *)(v0 + 320);
    uint64_t v50 = *(void *)(v0 + 304);
    sub_100016F9C(v43, v47);
    uint64_t v51 = *(void *)(v0 + 168);
    uint64_t v52 = *(void *)(v0 + 176);
    sub_100012ED8((void *)(v0 + 144), v51);
    (*(void (**)(uint64_t, uint64_t))(v52 + 24))(v51, v52);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v50, 1LL, v48) == 1)
    {
      uint64_t v53 = *(void *)(v0 + 360);
      unint64_t v54 = *(void (**)(void, void))(v0 + 216);
      sub_100015794(*(void *)(v0 + 304), &qword_10099FB48);
      v54(0LL, 0LL);
      swift_release(v9);

      sub_1000182F0(v127, v126);
      swift_release(v2);
      uint64_t v55 = v53;
    }

    else
    {
      sub_10002218C(*(void *)(v0 + 304), *(void *)(v0 + 328), type metadata accessor for CachedHistoricalLocation);
      uint64_t v57 = *(void *)(v0 + 168);
      uint64_t v56 = *(void *)(v0 + 176);
      sub_100012ED8(v125, v57);
      uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)(v56 + 8) + 8LL))(v57);
      unint64_t v60 = v59;
      uint64_t v62 = *(void *)(v0 + 168);
      uint64_t v61 = *(void *)(v0 + 176);
      sub_100012ED8(v125, v62);
      uint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)(v61 + 8) + 16LL))(v62);
      unint64_t v65 = v64;
      sub_10001736C(v58, v60);
      sub_1004A8638(v63, v65);
      sub_100016F9C(v63, v65);
      sub_100016F9C(v58, v60);
      unint64_t v122 = v60;
      uint64_t v123 = v58;
      uint64_t v67 = *(void *)(v0 + 168);
      uint64_t v66 = *(void *)(v0 + 176);
      sub_100012ED8(v125, v67);
      uint64_t v68 = (*(uint64_t (**)(uint64_t))(*(void *)(v66 + 8) + 8LL))(v67);
      unint64_t v120 = v69;
      uint64_t v121 = v68;
      uint64_t v70 = sub_100004AEC(&qword_10099D328);
      uint64_t v71 = swift_allocObject(v70, 33LL, 7LL);
      *(_OWORD *)(v71 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v72 = *(void *)(v0 + 168);
      uint64_t v73 = *(void *)(v0 + 176);
      sub_100012ED8(v125, v72);
      uint64_t v74 = *(void *)(v73 + 8);
      unint64_t v75 = *(uint64_t (**)(uint64_t, uint64_t))(v74 + 24);
      sub_10001736C(v123, v122);
      unsigned int v76 = v75(v72, v74);
      unint64_t v114 = *(double **)(v0 + 328);
      uint64_t v77 = *(void *)(v0 + 296);
      uint64_t v112 = *(void *)(v0 + 288);
      uint64_t v113 = *(void *)(v0 + 280);
      uint64_t v109 = *(void *)(v0 + 272);
      uint64_t v110 = *(void *)(v0 + 264);
      uint64_t v111 = *(void *)(v0 + 256);
      uint64_t v116 = *(void *)(v0 + 360);
      uint64_t v115 = *(void (**)(id, void))(v0 + 216);
      *(_BYTE *)(v71 + 32) = (v76 >> 4) & 3;
      uint64_t v117 = sub_1003D5760(v71);
      unint64_t v119 = v78;
      swift_bridgeObjectRelease();
      uint64_t v79 = swift_allocObject(v70, 33LL, 7LL);
      *(_OWORD *)(v79 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v81 = *(void *)(v0 + 168);
      uint64_t v80 = *(void *)(v0 + 176);
      sub_100012ED8(v125, v81);
      *(_BYTE *)(v79 + 32) = (*(unsigned __int8 (**)(uint64_t))(*(void *)(v80 + 8) + 24LL))(v81) >> 6;
      uint64_t v105 = sub_1003D5760(v79);
      unint64_t v118 = v82;
      swift_bridgeObjectRelease();
      uint64_t v84 = *(void *)(v0 + 168);
      uint64_t v83 = *(void *)(v0 + 176);
      sub_100012ED8(v125, v84);
      unsigned __int8 v107 = (*(uint64_t (**)(uint64_t))(*(void *)(v83 + 8) + 24LL))(v84);
      uint64_t v86 = *(void *)(v0 + 168);
      uint64_t v85 = *(void *)(v0 + 176);
      sub_100012ED8(v125, v86);
      uint64_t v106 = (*(uint64_t (**)(uint64_t))(*(void *)(v85 + 8) + 40LL))(v86);
      uint64_t v88 = *(void *)(v0 + 168);
      uint64_t v87 = *(void *)(v0 + 176);
      sub_100012ED8(v125, v88);
      uint64_t v104 = v77;
      uint64_t v89 = (*(uint64_t (**)(uint64_t))(*(void *)(v87 + 8) + 48LL))(v88);
      UUID.init()(v89);
      id v103 = objc_allocWithZone(&OBJC_CLASS___SPBeaconAdvertisement);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      Class v91 = Data._bridgeToObjectiveC()().super.isa;
      Class v92 = Data._bridgeToObjectiveC()().super.isa;
      Class v93 = Data._bridgeToObjectiveC()().super.isa;
      Class v94 = Date._bridgeToObjectiveC()().super.isa;
      Class v95 = UUID._bridgeToObjectiveC()().super.isa;
      id v108 = [v103 initWithAddress:isa publicKey:v91 deviceType:v92 batteryState:v93 rawStatus:v107 rssi:v106 scanDate:v94 recordIdentifier:v95];

      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
      (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v104, v113);
      sub_100016F9C(v105, v118);
      sub_100016F9C(v117, v119);
      sub_100016F9C(v123, v122);
      sub_100016F9C(v121, v120);
      double v96 = *v114;
      double v97 = v114[1];
      double v98 = v114[2];
      id v99 = objc_allocWithZone(&OBJC_CLASS___SPEstimatedLocation);
      Class v100 = Date._bridgeToObjectiveC()().super.isa;
      id v101 = [v99 initWithTimestamp:v100 latitude:0 longitude:v96 horizontalAccuracy:v97 altitude:v98 verticalAccuracy:-1.0 speed:-1.0 speedAccuracy:-1.0 cou rse:-1.0 courseAccuracy:-1.0 floorLevel:0xBFF0000000000000];

      [v108 setLocation:v101];
      id v102 = v108;
      v115(v108, 0LL);
      swift_release(v9);

      sub_1000182F0(v127, v126);
      swift_release(v2);

      sub_100016F9C(v123, v122);
      sub_100018C68((uint64_t)v114, type metadata accessor for CachedHistoricalLocation);
      uint64_t v55 = v116;
    }

    sub_100018C68(v55, type metadata accessor for TimeBasedKey);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v125);
  }

  else
  {
    uint64_t v19 = *(void (**)(void, uint64_t))(v0 + 216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v20 = sub_10009BC9C();
    uint64_t v21 = swift_allocError(&type metadata for AdvertisementCacheServiceError, v20, 0LL, 0LL);
    *uint64_t v22 = 2;
    v19(0LL, v21);
    swift_errorRelease(v21);
  }

LABEL_9:
  uint64_t v31 = *(void *)(v0 + 360);
  uint64_t v33 = *(void *)(v0 + 328);
  uint64_t v32 = *(void *)(v0 + 336);
  uint64_t v35 = *(void *)(v0 + 296);
  uint64_t v34 = *(void *)(v0 + 304);
  uint64_t v36 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 384));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  v37[2] = a3;
  uint64_t v38 = a2;
  uint64_t v40 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v20);
  uint64_t v21 = *(unsigned __int8 *)(v7 + 80);
  v37[1] = v19;
  uint64_t v22 = (uint64_t)v19 + ((v21 + 32) & ~v21);
  unint64_t v39 = *(void *)(v7 + 72);
  do
  {
    sub_10001DC4C(v22, (uint64_t)v9, type metadata accessor for RawSearchResult);
    uint64_t v23 = *v9;
    uint64_t v24 = *(double *)&v9[v6[6]];
    uint64_t v25 = *(double *)&v9[v6[7]];
    unint64_t v26 = *(double *)&v9[v6[8]];
    uint64_t v27 = objc_allocWithZone(&OBJC_CLASS___SPRawSearchResult);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v29 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v30 = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v31 = [v27 initWithHashedPublicKey:isa publicKey:v29 status:v23 timestamp:v30 latitude:v24 longitude:v25 horizontalAccuracy:v26];

    uint64_t v32 = sub_100018C68((uint64_t)v9, type metadata accessor for RawSearchResult);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v32);
    uint64_t v33 = v40[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
    uint64_t v34 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v31);
    specialized ContiguousArray._endMutation()(v34);
    v22 += v39;
    --v20;
  }

  while (v20);
  uint64_t v35 = v40;
  swift_bridgeObjectRelease();
  v38(v35);
  return swift_bridgeObjectRelease();
}

    uint64_t v18 = 0;
    goto LABEL_10;
  }

  if (v7[188] != (_UNKNOWN *)-1LL) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  unint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A2AE08);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  uint64_t v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Got empty locations after resolving labels. This shouldn't happen",  v23,  2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }
}

    swift_once(&qword_10099B310, sub_100348BDC);
    goto LABEL_4;
  }

  if (qword_10099B310 != -1) {
    swift_once(&qword_10099B310, sub_100348BDC);
  }
  uint64_t v16 = qword_100A2A6E8;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v18 + 56) = &type metadata for Bool;
  *(void *)(v18 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v18 + 32) = a1 & 1;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v16, "Automatic time value unchanged: %i", v19);
  return swift_bridgeObjectRelease();
}

                    unint64_t v42 = 0;
                    return v42 & 1;
                  }
                }

                else
                {
                  uint64_t v112 = v125;
                  sub_10001581C(v108, v125, &qword_1009A6DD0);
                  if (v110(v109, 1LL, v111) != 1)
                  {
                    uint64_t v113 = v124;
                    sub_1003A1130(v109, v124);
                    unint64_t v114 = sub_1002F6F8C(v112, v113);
                    sub_100018C68(v113, type metadata accessor for AccessoryInfoResponseContent.Configuration);
                    sub_100015794(v107, &qword_1009A6DD0);
                    sub_100015794(v104, &qword_1009A6DD0);
                    sub_100018C68(v112, type metadata accessor for AccessoryInfoResponseContent.Configuration);
                    sub_100015794(v108, &qword_1009A6DD0);
                    if (!v114) {
                      goto LABEL_9;
                    }
                    goto LABEL_57;
                  }

                  sub_100015794(v107, &qword_1009A6DD0);
                  sub_100015794(v104, &qword_1009A6DD0);
                  sub_100018C68(v112, type metadata accessor for AccessoryInfoResponseContent.Configuration);
                }

                uint64_t v80 = &qword_1009A8A80;
                uint64_t v81 = v108;
LABEL_44:
                sub_100015794(v81, v80);
                goto LABEL_9;
              }

              return v42 & 1;
            }

            sub_100015794((uint64_t)v26, (uint64_t *)&unk_1009A34D0);
            sub_100015794((uint64_t)v29, (uint64_t *)&unk_1009A34D0);
            (*(void (**)(char *, uint64_t))(v135 + 8))(v23, v78);
          }

          uint64_t v80 = &qword_1009A89C8;
          uint64_t v81 = v86;
          goto LABEL_44;
        }

        sub_100015794((uint64_t)v35, (uint64_t *)&unk_1009A34D0);
        sub_100015794((uint64_t)v37, (uint64_t *)&unk_1009A34D0);
        (*(void (**)(char *, uint64_t))(v135 + 8))(v32, v78);
      }

      uint64_t v80 = &qword_1009A89C8;
      uint64_t v81 = (uint64_t)v19;
      goto LABEL_44;
    }
  }

  return v42 & 1;
}

    uint64_t v19 = 0;
    goto LABEL_10;
  }

  __break(1u);
  return result;
}

    swift_once(&qword_10099B798, sub_100651870);
    goto LABEL_4;
  }

  uint64_t v50 = (void (*)(void *))v2[13];
  if (v50)
  {
    uint64_t v51 = v2[14];
    unint64_t v64 = 0;
    swift_retain();
    v50(v63);
    sub_10002214C((uint64_t)v50, v51);
    sub_100015794((uint64_t)v63, &qword_1009A7920);
  }

    sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009B5370);
    goto LABEL_23;
  }

  sub_10001581C((uint64_t)v10, (uint64_t)v14, &qword_10099D8A0);
  if (v27(v26, 1LL, v28) == 1)
  {
    sub_100015794((uint64_t)v17, &qword_10099D8A0);
    sub_100015794((uint64_t)v19, &qword_10099D8A0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v28);
    goto LABEL_9;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v26, v28);
  uint64_t v29 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v30 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v28, v29);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31(v7, v28);
  sub_100015794((uint64_t)v17, &qword_10099D8A0);
  sub_100015794((uint64_t)v19, &qword_10099D8A0);
  v31(v14, v28);
  sub_100015794((uint64_t)v10, &qword_10099D8A0);
  if ((v30 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_11:
  uint64_t v32 = v21;
  uint64_t v33 = v94;
  uint64_t v34 = v95;
  uint64_t v35 = v33[9];
  uint64_t v36 = *(uint64_t *)((char *)v34 + v35);
  id v37 = *(uint64_t *)((char *)v34 + v35 + 8);
  uint64_t v38 = (uint64_t *)(v32 + v35);
  unint64_t v39 = *v38;
  uint64_t v40 = v38[1];
  sub_10001736C(v36, v37);
  sub_10001736C(v39, v40);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v36, v37);
  unint64_t v42 = v41;
  sub_100016F9C(v39, v40);
  sub_100016F9C(v36, v37);
  if ((v42 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v43 = v33[10];
  unint64_t v44 = *(uint64_t *)((char *)v34 + v43);
  unint64_t v45 = *(uint64_t *)((char *)v34 + v43 + 8);
  unint64_t v46 = v32;
  unint64_t v47 = (uint64_t *)(v32 + v43);
  uint64_t v48 = *v47;
  uint64_t v49 = v47[1];
  if (v45 >> 60 != 15)
  {
    if (v49 >> 60 == 15) {
      goto LABEL_22;
    }
    sub_100018BE4(v44, v45);
    sub_100018BE4(v48, v49);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v44, v45);
    uint64_t v51 = v50;
    sub_1000182F0(v48, v49);
    sub_1000182F0(v44, v45);
    if ((v51 & 1) != 0) {
      goto LABEL_18;
    }
LABEL_23:
    uint64_t v55 = 0;
    return v55 & 1;
  }

  if (v49 >> 60 != 15) {
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v52 = v33[11];
  uint64_t v53 = v95;
  unint64_t v44 = *(uint64_t *)((char *)v95 + v52);
  unint64_t v45 = *(uint64_t *)((char *)v95 + v52 + 8);
  unint64_t v54 = (uint64_t *)(v46 + v52);
  uint64_t v48 = *v54;
  uint64_t v49 = v54[1];
  if (v45 >> 60 == 15)
  {
    if (v49 >> 60 == 15) {
      goto LABEL_26;
    }
LABEL_22:
    sub_100018BE4(v44, v45);
    sub_100018BE4(v48, v49);
    sub_1000182F0(v44, v45);
    sub_1000182F0(v48, v49);
    goto LABEL_23;
  }

  if (v49 >> 60 == 15) {
    goto LABEL_22;
  }
  sub_100018BE4(v44, v45);
  sub_100018BE4(v48, v49);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v44, v45);
  uint64_t v58 = v57;
  sub_1000182F0(v48, v49);
  sub_1000182F0(v44, v45);
  if ((v58 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_26:
  unint64_t v59 = v33[12];
  unint64_t v60 = *(uint64_t *)((char *)v53 + v59);
  uint64_t v61 = *(uint64_t *)((char *)v53 + v59 + 8);
  uint64_t v62 = (uint64_t *)(v46 + v59);
  uint64_t v63 = *v62;
  unint64_t v64 = v62[1];
  sub_10001736C(v60, v61);
  sub_10001736C(v63, v64);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v60, v61);
  uint64_t v66 = v65;
  sub_100016F9C(v63, v64);
  sub_100016F9C(v60, v61);
  if ((v66 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v67 = v33[13];
  uint64_t v68 = *(uint64_t *)((char *)v53 + v67);
  unint64_t v69 = *(uint64_t *)((char *)v53 + v67 + 8);
  uint64_t v70 = (uint64_t *)(v46 + v67);
  uint64_t v71 = *v70;
  uint64_t v72 = v70[1];
  sub_10001736C(v68, v69);
  sub_10001736C(v71, v72);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v68, v69);
  uint64_t v74 = v73;
  sub_100016F9C(v71, v72);
  sub_100016F9C(v68, v69);
  if ((v74 & 1) == 0) {
    goto LABEL_23;
  }
  unint64_t v75 = v33[14];
  unsigned int v76 = *(uint64_t *)((char *)v53 + v75);
  uint64_t v77 = *(uint64_t *)((char *)v53 + v75 + 8);
  unint64_t v78 = (void *)(v46 + v75);
  uint64_t v79 = v78[1];
  if (v76 == *v78 && v77 == v79
    || (v80 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, *v78, v79, 0LL), uint64_t v55 = 0, (v80 & 1) != 0))
  {
    if ((uint64_t v81 = v33[15],
          unint64_t v82 = *(uint64_t *)((char *)v53 + v81),
          uint64_t v83 = *(uint64_t *)((char *)v53 + v81 + 8),
          uint64_t v84 = (void *)(v46 + v81),
          uint64_t v85 = v84[1],
          v82 == *v84)
      && v83 == v85
      || (v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v84, v85, 0LL), uint64_t v55 = 0, (v86 & 1) != 0))
    {
      if (*(uint64_t *)((char *)v53 + v33[16]) != *(void *)(v46 + v33[16])
        || *(uint64_t *)((char *)v53 + v33[17]) != *(void *)(v46 + v33[17]))
      {
        goto LABEL_23;
      }

      uint64_t v87 = v33[18];
      uint64_t v88 = *((unsigned __int8 *)v53 + v87);
      uint64_t v89 = *(unsigned __int8 *)(v46 + v87);
      if (v88 == 3)
      {
        uint64_t v90 = v89 == 3;
        Class v91 = v94;
        Class v92 = v95;
        if (!v90) {
          goto LABEL_23;
        }
LABEL_43:
        if (*((unsigned __int8 *)v92 + v91[19]) == *(unsigned __int8 *)(v46 + v91[19]))
        {
          uint64_t v55 = *((_BYTE *)v95 + v94[20]) ^ *(_BYTE *)(v46 + v94[20]) ^ 1;
          return v55 & 1;
        }

        goto LABEL_23;
      }

      uint64_t v55 = 0;
      if (v89 != 3)
      {
        uint64_t v90 = v88 == v89;
        Class v91 = v94;
        Class v92 = v95;
        if (v90) {
          goto LABEL_43;
        }
      }
    }
  }

  return v55 & 1;
}

      uint64_t v41 = v82 + 1;
      if (__OFADD__(v82, 1LL))
      {
        __break(1u);
        goto LABEL_39;
      }

      if (v41 < v72)
      {
        unint64_t v42 = *(void *)(v71 + 8 * v41);
        if (v42) {
          goto LABEL_12;
        }
        uint64_t v43 = v82 + 2;
        ++v82;
        if (v41 + 1 < v72)
        {
          unint64_t v42 = *(void *)(v71 + 8 * v43);
          if (v42) {
            goto LABEL_15;
          }
          unint64_t v82 = v41 + 1;
          if (v41 + 2 < v72)
          {
            unint64_t v42 = *(void *)(v71 + 8 * (v41 + 2));
            if (v42)
            {
              v41 += 2LL;
              goto LABEL_12;
            }

            uint64_t v43 = v41 + 3;
            unint64_t v82 = v41 + 2;
            if (v41 + 3 < v72) {
              break;
            }
          }
        }
      }

  CKRecordKeyValueSetting.subscript.getter( &v52,  0x656475746974616CLL,  0xE800000000000000LL,  ObjectType,  &type metadata for Double,  &protocol witness table for Double);
  uint64_t v17 = *(double *)(v2 + v11[8]);
  if ((v53 & 1) != 0 || v52 != v17)
  {
    unint64_t v54 = &type metadata for Double;
    uint64_t v55 = &protocol witness table for Double;
    uint64_t v52 = v17;
    CKRecordKeyValueSetting.subscript.setter(&v52, 0x656475746974616CLL, 0xE800000000000000LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v52,  0x64757469676E6F6CLL,  0xE900000000000065LL,  ObjectType,  &type metadata for Double,  &protocol witness table for Double);
  uint64_t v18 = *(double *)(v2 + v11[9]);
  if ((v53 & 1) != 0 || v52 != v18)
  {
    unint64_t v54 = &type metadata for Double;
    uint64_t v55 = &protocol witness table for Double;
    uint64_t v52 = v18;
    CKRecordKeyValueSetting.subscript.setter(&v52, 0x64757469676E6F6CLL, 0xE900000000000065LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v52,  0x737569646172LL,  0xE600000000000000LL,  ObjectType,  &type metadata for Double,  &protocol witness table for Double);
  uint64_t v19 = *(double *)(v2 + v11[10]);
  if ((v53 & 1) != 0 || v52 != v19)
  {
    unint64_t v54 = &type metadata for Double;
    uint64_t v55 = &protocol witness table for Double;
    uint64_t v52 = v19;
    CKRecordKeyValueSetting.subscript.setter(&v52, 0x737569646172LL, 0xE600000000000000LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v52,  0x636E657265666572LL,  0xEE00656D61724665LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  *(void *)&unint64_t v20 = *(unsigned __int8 *)(v2 + v11[11]);
  if ((v53 & 1) != 0 || *(void *)&v52 != *(void *)&v20)
  {
    unint64_t v54 = &type metadata for Int;
    uint64_t v55 = &protocol witness table for Int;
    uint64_t v52 = v20;
    CKRecordKeyValueSetting.subscript.setter(&v52, 0x636E657265666572LL, 0xEE00656D61724665LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v52,  0x6C61766F72707061LL,  0xED00006574617453LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  *(void *)&uint64_t v21 = *(unsigned __int8 *)(v2 + v11[12]);
  if ((v53 & 1) != 0 || *(void *)&v52 != *(void *)&v21)
  {
    unint64_t v54 = &type metadata for Int;
    uint64_t v55 = &protocol witness table for Int;
    uint64_t v52 = v21;
    CKRecordKeyValueSetting.subscript.setter(&v52, 0x6C61766F72707061LL, 0xED00006574617453LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v52,  1701869940LL,  0xE400000000000000LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  *(void *)&uint64_t v22 = *(unsigned __int8 *)(v2 + v11[6]);
  if ((v53 & 1) != 0 || *(void *)&v52 != *(void *)&v22)
  {
    unint64_t v54 = &type metadata for Int;
    uint64_t v55 = &protocol witness table for Int;
    uint64_t v52 = v22;
    CKRecordKeyValueSetting.subscript.setter(&v52, 1701869940LL, 0xE400000000000000LL, ObjectType);
  }

  CKRecordKeyValueSetting.subscript.getter( &v52,  0x6C61766F72707061LL,  0xED00006574617453LL,  ObjectType,  &type metadata for Int,  &protocol witness table for Int);
  if ((v53 & 1) != 0 || *(void *)&v52 != *(void *)&v21)
  {
    unint64_t v54 = &type metadata for Int;
    uint64_t v55 = &protocol witness table for Int;
    uint64_t v52 = v21;
    CKRecordKeyValueSetting.subscript.setter(&v52, 0x6C61766F72707061LL, 0xED00006574617453LL, ObjectType);
  }

  uint64_t v23 = *(void *)(v2 + v11[13]);
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  if (v24)
  {
    unint64_t v46 = v7;
    uint64_t v52 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain(v23);
    sub_100032800(0, v24, 0);
    unint64_t v26 = (*(unsigned __int8 *)(v50 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    unint64_t v45 = v23;
    uint64_t v27 = v23 + v26;
    unint64_t v28 = *(void *)(v50 + 72);
    uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 16);
    do
    {
      uint64_t v30 = v48;
      uint64_t v31 = v49;
      uint64_t v32 = v29(v48, v27, v49);
      uint64_t v33 = UUID.uuidString.getter(v32);
      uint64_t v35 = v34;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v30, v31);
      uint64_t v25 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native(*(void *)&v52) & 1) == 0)
      {
        sub_100032800(0, *(void *)(*(void *)&v25 + 16LL) + 1LL, 1);
        uint64_t v25 = v52;
      }

      id v37 = *(void *)(*(void *)&v25 + 16LL);
      uint64_t v36 = *(void *)(*(void *)&v25 + 24LL);
      if (v37 >= v36 >> 1)
      {
        sub_100032800(v36 > 1, v37 + 1, 1);
        uint64_t v25 = v52;
      }

      *(void *)(*(void *)&v25 + 16LL) = v37 + 1;
      uint64_t v38 = (void *)(*(void *)&v25 + 16 * v37);
      v38[4] = v33;
      v38[5] = v35;
      v27 += v28;
      --v24;
    }

    while (v24);
    swift_bridgeObjectRelease();
    uint64_t v7 = v46;
  }

  *(double *)&unint64_t v39 = COERCE_DOUBLE(CKRecord.subscript.getter(0xD000000000000011LL, 0x8000000100866FE0LL));
  if (*(double *)&v39 != 0.0
    && (uint64_t v52 = *(double *)&v39,
        uint64_t v40 = sub_100004AEC((uint64_t *)&unk_10099D910),
        uint64_t v41 = sub_100004AEC(&qword_1009AED50),
        (swift_dynamicCast(&v51, &v52, v40, v41, 6LL) & 1) != 0)
    && (unint64_t v42 = sub_100125B04(v51, *(void **)&v25), swift_bridgeObjectRelease(), (v42 & 1) != 0))
  {
    swift_unknownObjectRelease(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v44 = String._bridgeToObjectiveC()();
    [v7 setObject:isa forKeyedSubscript:v44];
    swift_unknownObjectRelease(v7);
  }

  sub_1000F7994((uint64_t)v8);
  return v12;
}

uint64_t sub_100099EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099FA70);
  v5[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[21] = v7;
  v5[22] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  v5[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  _BYTE v5[24] = v9;
  v5[25] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for HashAlgorithm(0LL);
  v5[26] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[27] = v11;
  v5[28] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  v5[29] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  v5[30] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[31] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[32] = swift_task_alloc(v15);
  v5[33] = swift_task_alloc(v15);
  v5[34] = swift_task_alloc(v15);
  v5[35] = swift_task_alloc(v15);
  v5[36] = swift_task_alloc(v15);
  v5[37] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for ObservedAdvertisement(0LL);
  v5[38] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v5[39] = v17;
  v5[40] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10009A020, 0LL, 0LL);
}

uint64_t sub_10009A020()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C860 + dword_10099C860);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C864);
    *(void *)(v0 + 328) = v2;
    void *v2 = v0;
    v2[1] = sub_10009A104;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10009A104(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 328LL);
  *(void *)(*(void *)v1 + 336LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10009A160, 0LL, 0LL);
}

uint64_t sub_10009A160()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 336))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009AD314);
    *(void *)(v0 + 344) = v2;
    void *v2 = v0;
    v2[1] = sub_10009A270;
    return sub_10040F348();
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = *(void *)(v0 + 288);
    uint64_t v5 = *(void *)(v0 + 296);
    uint64_t v7 = *(void *)(v0 + 272);
    uint64_t v6 = *(void *)(v0 + 280);
    uint64_t v9 = *(void *)(v0 + 256);
    uint64_t v8 = *(void *)(v0 + 264);
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 176);
    swift_task_dealloc(*(void *)(v0 + 320));
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10009A270(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 344);
  *(void *)(v3 + 352) = a1;
  *(void *)(v3 + 360) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10009A9E4;
  }
  else {
    uint64_t v5 = sub_10009A2DC;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

void sub_10009A2DC()
{
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_19:
    uint64_t v52 = *(void *)(v0 + 336);
    (*(void (**)(void *, void))(v0 + 144))(v7, 0LL);
    swift_release(v52);
    swift_bridgeObjectRelease();
    uint64_t v53 = *(void *)(v0 + 288);
    uint64_t v54 = *(void *)(v0 + 296);
    uint64_t v56 = *(void *)(v0 + 272);
    uint64_t v55 = *(void *)(v0 + 280);
    uint64_t v58 = *(void *)(v0 + 256);
    uint64_t v57 = *(void *)(v0 + 264);
    uint64_t v60 = *(void *)(v0 + 224);
    uint64_t v59 = *(void *)(v0 + 232);
    uint64_t v61 = *(void *)(v0 + 200);
    uint64_t v89 = *(void *)(v0 + 176);
    swift_task_dealloc(*(void *)(v0 + 320));
    swift_task_dealloc(v54);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v89);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v5 = *(void **)(v0 + 248);
  uint64_t v65 = *(void *)(v0 + 216);
  uint64_t v66 = *(void *)(v0 + 304);
  uint64_t v87 = *(void *)(v0 + 192);
  uint64_t v64 = *(void *)(v0 + 168);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v86 = *(void *)(v3 + 72);
  unsigned int v63 = enum case for HashAlgorithm.sha256(_:);
  swift_bridgeObjectRetain(v1);
  uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v62 = v4;
  uint64_t v88 = v5;
  while (1)
  {
    sub_10009BDA0(v6, *(void *)(v0 + 320));
    unint64_t v8 = *(void *)(v4 + 24);
    if ((v8 & 0x2000000000000000LL) != 0)
    {
      uint64_t v39 = 1LL;
      goto LABEL_11;
    }

    uint64_t v72 = v6;
    uint64_t v73 = v7;
    uint64_t v74 = v2;
    uint64_t v75 = *(void *)(v0 + 320);
    uint64_t v9 = *(void *)(v0 + 280);
    uint64_t v77 = *(void *)(v0 + 288);
    uint64_t v79 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 224);
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 184);
    uint64_t v81 = *(void *)(v0 + 176);
    uint64_t v83 = *(void *)(v0 + 160);
    uint64_t v14 = *(void *)(v4 + 16);
    (*(void (**)(uint64_t, void, uint64_t))(v65 + 104))(v10, v63, v12);
    sub_10001736C(v14, v8);
    uint64_t v15 = Data.hash(algorithm:)(v10, v14, v8);
    unint64_t v85 = v16;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v10, v12);
    sub_1000869A4(v14, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16))(v11, v75 + *(int *)(v66 + 44), v13);
    sub_100650C80(v9);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012LL, 0x8000000100852B20LL, 1LL);
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v88[1];
    v17(v9, v79);
    uint64_t v18 = type metadata accessor for BeaconPayloadFile.MetaData(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v81, 1LL, 1LL, v18);
    uint64_t v19 = type metadata accessor for BeaconPayloadFile(0LL);
    uint64_t v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))( v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData,  1LL,  1LL,  v83);
    uint64_t v21 = v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate;
    uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D720);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v21, 1LL, 1LL, v22);
    uint64_t v23 = (void (*)(uint64_t, uint64_t, uint64_t))v88[2];
    v23(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL, v77, v79);
    uint64_t v24 = (uint64_t *)(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement);
    *uint64_t v24 = v15;
    v24[1] = v85;
    uint64_t v25 = v15;
    sub_10001736C(v15, v85);
    unint64_t v26 = objc_autoreleasePoolPush();
    double v27 = Date.timeIntervalSinceReferenceDate.getter(v26);
    if ((~*(void *)&v27 & 0x7FF0000000000000LL) == 0) {
      break;
    }
    if (v27 <= -9.22337204e18) {
      goto LABEL_21;
    }
    if (v27 >= 9.22337204e18) {
      goto LABEL_22;
    }
    uint64_t v68 = *(void *)(v0 + 288);
    uint64_t v71 = *(void *)(v0 + 280);
    uint64_t v84 = v23;
    uint64_t v28 = *(void *)(v0 + 272);
    uint64_t v70 = *(void *)(v0 + 264);
    uint64_t v29 = *(void *)(v0 + 240);
    uint64_t v82 = *(void *)(v0 + 232);
    uint64_t v78 = *(void *)(v0 + 200);
    uint64_t v76 = *(void *)(v0 + 184);
    uint64_t v80 = *(void *)(v0 + 176);
    *(void *)(v0 + 136) = (uint64_t)v27;
    uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    unint64_t v69 = v17;
    uint64_t v31 = v30;
    *(void *)(v0 + 120) = v25;
    *(void *)(v0 + 128) = v85;
    unint64_t v32 = sub_10009BDE4();
    uint64_t v33 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v32);
    URL.appendingPathComponent(_:isDirectory:)(v33, v34, 1LL);
    swift_bridgeObjectRelease();
    URL.appendingPathComponent(_:isDirectory:)(v67, v31, 0LL);
    swift_bridgeObjectRelease();
    v69(v28, v29);
    uint64_t v35 = (void (*)(uint64_t, uint64_t, uint64_t))v88[4];
    v35(v71, v70, v29);
    objc_autoreleasePoolPop(v26);
    sub_100016F9C(v25, v85);
    v69(v68, v29);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v78, v76);
    v35(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v71, v29);
    sub_10009BE28(v80, v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData);
    v84(v82, v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v29);
    swift_setDeallocating(v20);
    v69(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL, v29);
    sub_100016F9C( *(void *)(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement),  *(void *)(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement + 8));
    v69(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v29);
    sub_100015794( v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData,  (uint64_t *)&unk_10099FA70);
    sub_100015794(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, &qword_10099FA98);
    sub_100015794( v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate,  (uint64_t *)&unk_10099D890);
    uint64_t v36 = *(unsigned int *)(*(void *)v20 + 48LL);
    uint64_t v37 = *(unsigned __int16 *)(*(void *)v20 + 52LL);
    uint64_t v38 = v20;
    uint64_t v5 = v88;
    swift_deallocClassInstance(v38, v36, v37);
    uint64_t v39 = 0LL;
    uint64_t v7 = v73;
    uint64_t v2 = v74;
    uint64_t v4 = v62;
    uint64_t v6 = v72;
LABEL_11:
    uint64_t v40 = *(void *)(v0 + 320);
    uint64_t v42 = *(void *)(v0 + 232);
    uint64_t v41 = *(void *)(v0 + 240);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5[7])(v42, v39, 1LL, v41);
    sub_100018C68(v40, type metadata accessor for ObservedAdvertisement);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v5[6])(v42, 1LL, v41) == 1)
    {
      sub_100015794(*(void *)(v0 + 232), (uint64_t *)&unk_1009A34D0);
    }

    else
    {
      uint64_t v43 = v6;
      uint64_t v44 = *(void *)(v0 + 296);
      uint64_t v45 = *(void *)(v0 + 256);
      uint64_t v46 = *(void *)(v0 + 240);
      unint64_t v47 = (void (*)(uint64_t, uint64_t, uint64_t))v5[4];
      v47(v44, *(void *)(v0 + 232), v46);
      v47(v45, v44, v46);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
        uint64_t v7 = (void *)sub_1004C4C10(0, v7[2] + 1LL, 1, (unint64_t)v7);
      }
      unint64_t v49 = v7[2];
      unint64_t v48 = v7[3];
      if (v49 >= v48 >> 1) {
        uint64_t v7 = (void *)sub_1004C4C10(v48 > 1, v49 + 1, 1, (unint64_t)v7);
      }
      uint64_t v50 = *(void *)(v0 + 256);
      uint64_t v51 = *(void *)(v0 + 240);
      v7[2] = v49 + 1;
      v47( (uint64_t)v7 + ((*((unsigned __int8 *)v5 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v5 + 80))
      + v5[9] * v49,
        v50,
        v51);
      uint64_t v6 = v43;
    }

    v6 += v86;
    if (!--v2)
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 352), 2LL);
      goto LABEL_19;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
}

uint64_t sub_10009A9E4()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  swift_errorRetain(v1);
  v3(v1, 1LL);
  swift_release(v2);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v9 = *(void *)(v0 + 256);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 232);
  uint64_t v12 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 320));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009AAD8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  return sub_10009BAF8(a4);
}

uint64_t sub_10009AAE4( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  return sub_10009B0FC(a4, a5);
}

uint64_t sub_10009AAF0(uint64_t a1, void (*a2)(void))
{
  return sub_10009AFB8(a2);
}

uint64_t sub_10009AAFC(uint64_t a1)
{
  uint64_t result = sub_100007864( &qword_10099FA28,  type metadata accessor for AdvertisementCacheService,  (uint64_t)&unk_1007E9498);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10009AB38(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100932EB8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10009AB80(char a1)
{
  id v2 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v2)
  {
    unint64_t v3 = v2;
    char v11 = a1;
    unint64_t v4 = sub_10009BCE0();
    char v5 = NSXPCConnection.hasEntitlement<A>(_:)(&v11, &type metadata for AdvertisementCacheEntitlement, v4);

    if ((v5 & 1) != 0) {
      return 1LL;
    }
  }

  type metadata accessor for Transaction(0LL);
  uint64_t v6 = static Transaction.currentNSXPCConnection.getter();
  if (v6
    && (uint64_t v7 = (void *)v6,
        char v12 = a1,
        unint64_t v8 = sub_10009BCE0(),
        char v9 = NSXPCConnection.hasEntitlement<A>(_:)(&v12, &type metadata for AdvertisementCacheEntitlement, v8),
        v7,
        (v9 & 1) != 0))
  {
    return 1LL;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_10009AC48(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = swift_allocObject(&unk_10093BD20, 24LL, 7LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t v7 = (__int128 *)(a2
                  + OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation);
  swift_beginAccess(v7, v25, 0LL, 0LL);
  __int128 v21 = v7[1];
  __int128 v22 = *v7;
  __int128 v20 = v7[2];
  _Block_copy(a3);
  swift_unknownObjectRetain(v22);
  if ((sub_10009AB80(1) & 1) != 0) {
    goto LABEL_5;
  }
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v24[0] = 0x7365547265646E75LL;
  v24[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v23, v24, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v23 == 1)
  {
LABEL_5:
    type metadata accessor for Transaction(0LL);
    uint64_t v8 = swift_allocObject(&unk_10093BD48, 88LL, 7LL);
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = a1;
    *(_OWORD *)(v8 + 24) = v22;
    *(_OWORD *)(v8 + 40) = v21;
    *(_OWORD *)(v8 + 56) = v20;
    *(void *)(v8 + 72) = sub_10009C9E4;
    *(void *)(v8 + 80) = v6;
    swift_unknownObjectRetain(v22);
    swift_bridgeObjectRetain(a1);
    swift_retain();
    static Transaction.asyncTask(name:block:)("SaveObservedAdvertisment", 24LL, 2LL, &unk_10099FB68, v8);
    swift_release(v6);
    swift_unknownObjectRelease(v22);
    return swift_release(v8);
  }

  else
  {
    if (qword_10099B0C0 != -1) {
      swift_once(&qword_10099B0C0, sub_100095C3C);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2A118);
    char v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      v24[0] = v15;
      *(_DWORD *)uint64_t v14 = 136446210;
      uint64_t v23 = sub_1003F11D4(0xD000000000000036LL, 0x800000010084DAA0LL, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v14 + 4, v14 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Cannot save observedAdvertisement. Missing entitlement: %{public}s.",  v14,  0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    unint64_t v16 = sub_10009BC9C();
    uint64_t v17 = swift_allocError(&type metadata for AdvertisementCacheServiceError, v16, 0LL, 0LL);
    *uint64_t v18 = 0;
    uint64_t v19 = (void *)_convertErrorToNSError(_:)(v17);
    ((void (**)(void, void *))a3)[2](a3, v19);

    swift_errorRelease(v17);
    swift_release(v6);
    return swift_unknownObjectRelease(v22);
  }

uint64_t sub_10009AFB8(void (*a1)(void))
{
  uint64_t v2 = sub_10009AB80(1);
  if ((v2 & 1) != 0) {
    return ((uint64_t (*)(void))a1)(0LL);
  }
  uint64_t v4 = static os_log_type_t.error.getter(v2);
  if (qword_10099B6F0 != -1) {
    swift_once(&qword_10099B6F0, sub_100651034);
  }
  uint64_t v5 = qword_100A2B000;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000226F4();
  *(void *)(v7 + 32) = 0xD000000000000036LL;
  *(void *)(v7 + 40) = 0x800000010084DAA0LL;
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v5,  "Cannot mark files as processed. Missing entitlement: %@",  55LL,  2LL,  v7);
  swift_bridgeObjectRelease();
  unint64_t v8 = sub_10009BC9C();
  uint64_t v9 = swift_allocError(&type metadata for AdvertisementCacheServiceError, v8, 0LL, 0LL);
  *uint64_t v10 = 0;
  a1();
  return swift_errorRelease(v9);
}

uint64_t sub_10009B0FC(void (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10009AB80(2);
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v6, 1LL, 1LL, v8);
    uint64_t v9 = (void *)swift_allocObject(&unk_10093BA78, 48LL, 7LL);
    v9[2] = 0LL;
    v9[3] = 0LL;
    v9[4] = a1;
    v9[5] = a2;
    swift_retain();
    uint64_t v10 = sub_1003EDB00((uint64_t)v6, (uint64_t)&unk_10099FA68, (uint64_t)v9);
    return swift_release(v10);
  }

  else
  {
    uint64_t v12 = static os_log_type_t.error.getter(v7);
    if (qword_10099B6F0 != -1) {
      swift_once(&qword_10099B6F0, sub_100651034);
    }
    uint64_t v13 = qword_100A2B000;
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_1000226F4();
    *(void *)(v15 + 32) = 0xD000000000000035LL;
    *(void *)(v15 + 40) = 0x800000010084DAE0LL;
    os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  v13,  "Cannot read beacon payloads. Missing entitlement: %@",  52LL,  2LL,  v15);
    swift_bridgeObjectRelease();
    unint64_t v16 = sub_10009BC9C();
    uint64_t v17 = swift_allocError(&type metadata for AdvertisementCacheServiceError, v16, 0LL, 0LL);
    *uint64_t v18 = 0;
    a1(v17, 1LL);
    return swift_errorRelease(v17);
  }

uint64_t sub_10009B2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10009AB80(1);
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = static os_log_type_t.default.getter(v4);
    if (qword_10099B6F0 != -1) {
      swift_once(&qword_10099B6F0, sub_100651034);
    }
    uint64_t v6 = qword_100A2B000;
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v9 = *(void *)(a1 + 16);
    *(void *)(v8 + 56) = &type metadata for Int;
    *(void *)(v8 + 64) = &protocol witness table for Int;
    *(void *)(v8 + 32) = v9;
    char v10 = 2;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Disabled advertisement cache. Count: %i", v20);
  }

  else
  {
    uint64_t v11 = static os_log_type_t.error.getter(v4);
    if (qword_10099B6F0 != -1) {
      swift_once(&qword_10099B6F0, sub_100651034);
    }
    uint64_t v12 = qword_100A2B000;
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_1000226F4();
    *(void *)(v14 + 32) = 0xD000000000000036LL;
    *(void *)(v14 + 40) = 0x800000010084DAA0LL;
    os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  v12,  "Cannot save advertisements. Missing entitlement: %@",  51LL,  2LL,  v14);
    char v10 = 0;
  }

  swift_bridgeObjectRelease();
  unint64_t v15 = sub_10009BC9C();
  uint64_t v16 = swift_allocError(&type metadata for AdvertisementCacheServiceError, v15, 0LL, 0LL);
  *uint64_t v17 = v10;
  uint64_t v18 = (void *)_convertErrorToNSError(_:)(v16);
  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v18);

  return swift_errorRelease(v16);
}

void sub_10009B4D0(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = type metadata accessor for SPCachedAdvertisement(0LL);
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v46 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = _Block_copy(a3);
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  if (qword_10099B6F0 != -1) {
    swift_once(&qword_10099B6F0, sub_100651034);
  }
  uint64_t v11 = qword_100A2B000;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v38 = a1;
    }
    else {
      uint64_t v38 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  *(void *)(v13 + 56) = &type metadata for Int;
  *(void *)(v13 + 64) = &protocol witness table for Int;
  *(void *)(v13 + 32) = v14;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Trampolining save advertisements: %i", v39);
  swift_bridgeObjectRelease();
  unint64_t v15 = _swiftEmptyArrayStorage;
  if (!v14) {
    goto LABEL_15;
  }
  uint64_t v50 = _swiftEmptyArrayStorage;
  sub_100032B6C(0, v14 & ~(v14 >> 63), 0);
  if ((v14 & 0x8000000000000000LL) == 0)
  {
    uint64_t v40 = a2;
    uint64_t v41 = a3;
    uint64_t v16 = 0LL;
    unint64_t v15 = v50;
    unint64_t v42 = a1 & 0xC000000000000001LL;
    uint64_t v43 = v14;
    uint64_t v44 = a1;
    do
    {
      if (v42) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, a1);
      }
      else {
        id v17 = *(id *)(a1 + 8 * v16 + 32);
      }
      uint64_t v18 = v17;
      unsigned int v49 = [v17 status];
      id v19 = [v18 address];
      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v47 = v21;
      uint64_t v48 = v20;

      id v22 = [v18 advertisementData];
      uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v25 = v24;

      id v26 = [v18 reserved];
      uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v29 = v28;

      id v30 = [v18 rssi];
      id v31 = [v18 scanDate];
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v31);

      uint64_t v32 = v47;
      *(void *)uint64_t v8 = v48;
      *((void *)v8 + 1) = v32;
      *((void *)v8 + 2) = v23;
      *((void *)v8 + 3) = v25;
      v8[32] = v49;
      *((void *)v8 + 5) = v27;
      *((void *)v8 + 6) = v29;
      *((void *)v8 + 7) = v30;
      uint64_t v50 = v15;
      unint64_t v34 = v15[2];
      unint64_t v33 = v15[3];
      if (v34 >= v33 >> 1)
      {
        sub_100032B6C(v33 > 1, v34 + 1, 1);
        unint64_t v15 = v50;
      }

      ++v16;
      void v15[2] = v34 + 1;
      sub_10002218C( (uint64_t)v8,  (uint64_t)v15 + ((*(unsigned __int8 *)(v45 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))
      + *(void *)(v45 + 72) * v34,
        type metadata accessor for SPCachedAdvertisement);
      a1 = v44;
    }

    while (v43 != v16);
    a2 = v40;
    a3 = v41;
LABEL_15:
    uint64_t v35 = (uint64_t *)(a2
                    + OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation);
    swift_beginAccess( a2 + OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation,  &v50,  0LL,  0LL);
    uint64_t v36 = *v35;
    swift_unknownObjectRetain(v36);
    uint64_t v37 = sub_1004E7720((uint64_t)v15);
    swift_bridgeObjectRelease();
    _Block_copy(a3);
    sub_10009B2E0((uint64_t)v37, (uint64_t)a3);
    _Block_release(a3);
    swift_unknownObjectRelease(v36);
    swift_bridgeObjectRelease();
    _Block_release(a3);
    return;
  }

  __break(1u);
}

uint64_t sub_10009B894(uint64_t a1)
{
  uint64_t v2 = sub_10009AB80(1);
  if ((v2 & 1) != 0)
  {
    char v3 = 2;
  }

  else
  {
    uint64_t v4 = static os_log_type_t.error.getter(v2);
    if (qword_10099B6F0 != -1) {
      swift_once(&qword_10099B6F0, sub_100651034);
    }
    uint64_t v5 = qword_100A2B000;
    uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_1000226F4();
    *(void *)(v7 + 32) = 0xD000000000000036LL;
    *(void *)(v7 + 40) = 0x800000010084DAA0LL;
    os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v5,  "Cannot mark advertisements as processed. Missing entitlement: %@",  64LL,  2LL,  v7);
    swift_bridgeObjectRelease();
    char v3 = 0;
  }

  unint64_t v8 = sub_10009BC9C();
  uint64_t v9 = swift_allocError(&type metadata for AdvertisementCacheServiceError, v8, 0LL, 0LL);
  *uint64_t v10 = v3;
  uint64_t v11 = (void *)_convertErrorToNSError(_:)(v9);
  (*(void (**)(uint64_t, void *))(a1 + 16))(a1, v11);

  return swift_errorRelease(v9);
}

uint64_t sub_10009B9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F0 != -1) {
    swift_once(&qword_10099B6F0, sub_100651034);
  }
  uint64_t v7 = qword_100A2B000;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(v9 + 56) = &type metadata for Int;
  *(void *)(v9 + 64) = &protocol witness table for Int;
  *(void *)(v9 + 32) = v10;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Marking records for deletion: %i", v14);
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t *)(a2
                  + OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation);
  swift_beginAccess(v11, v15, 0LL, 0LL);
  uint64_t v12 = *v11;
  swift_unknownObjectRetain(v12);
  sub_10009B894(a3);
  return swift_unknownObjectRelease(v12);
}

uint64_t sub_10009BAF8(void (*a1)(uint64_t *))
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099FA30);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v6 = 2;
  uint64_t v7 = sub_10009AB80(2);
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = static os_log_type_t.error.getter(v7);
    if (qword_10099B6F0 != -1) {
      swift_once(&qword_10099B6F0, sub_100651034);
    }
    uint64_t v9 = qword_100A2B000;
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_1000226F4();
    *(void *)(v11 + 32) = 0xD000000000000035LL;
    *(void *)(v11 + 40) = 0x800000010084DAE0LL;
    os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  v9,  "Cannot read advertisements. Missing entitlement: %@",  51LL,  2LL,  v11);
    swift_bridgeObjectRelease();
    char v6 = 0;
  }

  unint64_t v12 = sub_10009BC9C();
  uint64_t v13 = swift_allocError(&type metadata for AdvertisementCacheServiceError, v12, 0LL, 0LL);
  *int v14 = v6;
  *uint64_t v5 = v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for LegacyResult.failure<A>(_:), v2);
  a1(v5);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_10009BC9C()
{
  unint64_t result = qword_10099FA48;
  if (!qword_10099FA48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9630, &type metadata for AdvertisementCacheServiceError);
    atomic_store(result, (unint64_t *)&qword_10099FA48);
  }

  return result;
}

unint64_t sub_10009BCE0()
{
  unint64_t result = qword_10099FA50;
  if (!qword_10099FA50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9608, &type metadata for AdvertisementCacheEntitlement);
    atomic_store(result, (unint64_t *)&qword_10099FA50);
  }

  return result;
}

uint64_t sub_10009BD28(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_10099FA64);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100015D58;
  return sub_100099EB8(a1, v4, v5, v7, v6);
}

uint64_t sub_10009BDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObservedAdvertisement(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10009BDE4()
{
  unint64_t result = qword_10099FA90;
  if (!qword_10099FA90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for HashedAdvertisement,  &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_10099FA90);
  }

  return result;
}

uint64_t sub_10009BE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099FA70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10009BE70()
{
  unint64_t result = qword_10099FAA0;
  if (!qword_10099FAA0)
  {
    uint64_t v1 = sub_100022898(255LL, (unint64_t *)&unk_1009AB840, &OBJC_CLASS___NSXPCConnection_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10099FAA0);
  }

  return result;
}

uint64_t sub_10009BECC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10009BEF0(uint64_t a1)
{
  return sub_100098754(a1, v1);
}

uint64_t sub_10009BEF8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10009BF1C(uint64_t a1)
{
  return sub_10019A488(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10009BF24(uint64_t a1)
{
  return sub_1000987D0(a1, v1);
}

uint64_t sub_10009BF3C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10009BF68()
{
}

uint64_t sub_10009BF70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009BF80(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10009BF88()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10009BFB4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009AD0EC);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000159BC;
  return sub_1003FA074();
}

uint64_t sub_10009C020()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10009C044(uint64_t a1)
{
}

uint64_t sub_10009C04C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2
                + OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation);
  swift_beginAccess(v5, v17, 0LL, 0LL);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[2];
  uint64_t ObjectType = swift_getObjectType(*v5);
  uint64_t v16 = v6;
  uint64_t v9 = qword_10099B318;
  swift_unknownObjectRetain(v6);
  if (v9 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v10 = sub_1006A0BEC(v15);
  swift_bridgeObjectRelease();
  if (qword_10099B8A0 != -1) {
    swift_once(&qword_10099B8A0, sub_1006E0F98);
  }
  uint64_t v11 = qword_100A2B2D8;
  uint64_t v12 = swift_allocObject(&unk_10093BC30, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  uint64_t v13 = *(void (**)(void, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v7 + 40);
  swift_bridgeObjectRetain(v11);
  swift_retain();
  v13(0LL, v11, v10, sub_10009C450, v12, ObjectType, v7);
  swift_bridgeObjectRelease();
  swift_release(v12);
  return swift_unknownObjectRelease(v16);
}

uint64_t sub_10009C1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1LL, 1LL, v7);
  uint64_t v9 = (void *)swift_allocObject(&unk_10093BBB8, 48LL, 7LL);
  v9[2] = 0LL;
  uint64_t v10 = v9 + 2;
  v9[3] = 0LL;
  v9[4] = a1;
  v9[5] = a2;
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  uint64_t v11 = swift_retain();
  if ((_DWORD)a1 == 1)
  {
    sub_100015794((uint64_t)v6, &qword_1009A9BF0);
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 7168LL;
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    uint64_t v14 = v15 | 0x1C00LL;
    uint64_t v16 = *v10;
    if (*v10)
    {
      uint64_t v17 = v9[3];
      uint64_t ObjectType = swift_getObjectType(*v10);
      swift_unknownObjectRetain(v16);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      uint64_t v13 = v19;
      swift_unknownObjectRelease(v16);
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
    }
  }

  uint64_t v20 = swift_allocObject(&unk_10093BBE0, 32LL, 7LL);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = &unk_10099FB10;
  *(void *)(v20 + 24) = v9;
  if (v13 | v12)
  {
    v24[0] = 0LL;
    v24[1] = 0LL;
    uint64_t v21 = v24;
    uint64_t v24[2] = v12;
    v24[3] = v13;
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  uint64_t v22 = swift_task_create(v14, v21, (char *)&type metadata for () + 8, &unk_1009AB890, v20);
  return swift_release(v22);
}

uint64_t sub_10009C3B4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10009C3E0()
{
  uint64_t v2 = swift_task_alloc(dword_10099FB0C);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100015D58;
  *(_OWORD *)(v2 + 128) = v3;
  return swift_task_switch(sub_100097CAC, 0LL, 0LL);
}

uint64_t sub_10009C440()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

void sub_10009C450(uint64_t a1)
{
}

void sub_10009C458(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10009C460()
{
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v16 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v15 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v2 | v6 | v11 | 7;
  swift_unknownObjectRelease(*((void *)v0 + 2));
  swift_release(*((void *)v0 + 4));
  swift_release(*((void *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v1 + 8))(&v0[v3], v17);
  (*(void (**)(char *, uint64_t))(v5 + 8))(&v0[v7], v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(&v0[v12], v9);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_10009C570(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  type metadata accessor for Date(0LL);
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = v1[5];
  uint64_t v13 = v1[6];
  uint64_t v14 = (void *)swift_task_alloc(dword_10099FB3C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100015D58;
  return sub_100099354(a1, v9, v10, v11, v12, v13, (uint64_t)v1 + v5, (uint64_t)v1 + v8);
}

void sub_10009C670(uint64_t a1, char a2)
{
}

uint64_t sub_10009C67C()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_10009C6B0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  __int128 v3 = *(_OWORD *)(v0 + 40);
  __int128 v4 = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v3;
  *(_OWORD *)(v1 + 48) = v4;
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v7 = (void *)swift_task_alloc(dword_10099FB64);
  *(void *)(v1 + 64) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10009C72C;
  return sub_100095D8C(v2, (uint64_t *)(v1 + 16), v6, v5);
}

uint64_t sub_10009C72C()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t storeEnumTagSinglePayload for AdvertisementCacheEntitlement( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10009C7C0 + 4 * byte_1007E9325[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10009C7F4 + 4 * asc_1007E9320[v4]))();
}

uint64_t sub_10009C7F4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009C7FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10009C804LL);
  }
  return result;
}

uint64_t sub_10009C810(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10009C818LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10009C81C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009C824(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementCacheEntitlement()
{
  return &type metadata for AdvertisementCacheEntitlement;
}

uint64_t storeEnumTagSinglePayload for AdvertisementCacheServiceError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10009C88C + 4 * byte_1007E932F[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10009C8C0 + 4 * byte_1007E932A[v4]))();
}

uint64_t sub_10009C8C0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009C8C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10009C8D0LL);
  }
  return result;
}

uint64_t sub_10009C8DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10009C8E4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10009C8E8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009C8F0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementCacheServiceError()
{
  return &type metadata for AdvertisementCacheServiceError;
}

unint64_t sub_10009C910()
{
  unint64_t result = qword_10099FB78;
  if (!qword_10099FB78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9540, &type metadata for AdvertisementCacheServiceError);
    atomic_store(result, (unint64_t *)&qword_10099FB78);
  }

  return result;
}

unint64_t sub_10009C958()
{
  unint64_t result = qword_10099FB80;
  if (!qword_10099FB80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E95E0, &type metadata for AdvertisementCacheEntitlement);
    atomic_store(result, (unint64_t *)&qword_10099FB80);
  }

  return result;
}

unint64_t sub_10009C9A0()
{
  unint64_t result = qword_10099FB88;
  if (!qword_10099FB88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9568, &type metadata for AdvertisementCacheEntitlement);
    atomic_store(result, (unint64_t *)&qword_10099FB88);
  }

  return result;
}

uint64_t sub_10009CA14@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[6];
  *a2 = a1[5];
  a2[1] = v2;
  uint64_t v3 = a1[4];
  a2[2] = a1[3];
  a2[3] = v3;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_10009CA4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AB0();
  uint64_t v12 = (*(uint64_t (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v8);
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v15 = sub_100090114((unint64_t *)&qword_10099BAB0, (uint64_t *)&unk_1009A0CD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v14, v15, v2, v13);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000046LL,  0x8000000100852F50LL,  v7,  v4,  v11,  0LL);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v16 = sub_1006A0B8C((uint64_t)v21);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = v16;
  *(void *)(v1 + 32) = v18;
  strcpy((char *)(v1 + 40), "/acsnservice");
  *(_BYTE *)(v1 + 53) = 0;
  *(_WORD *)(v1 + 54) = -5120;
  sub_10009CCA4();
  return v1;
}

uint64_t sub_10009CCA4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v18 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v17[1] = v0[2];
  uint64_t v9 = swift_allocObject(&unk_10093BF50, 24LL, 7LL);
  swift_weakInit(v9 + 16, v0);
  uint64_t v10 = swift_allocObject(&unk_10093BF78, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v9;
  *(void *)(v10 + 24) = v1;
  aBlock[4] = sub_10009CFE4;
  void aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10093BF90;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_retain();
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v15 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
  return swift_release();
}

uint64_t sub_10009CEC4(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = sub_10009D004();
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    v3[3] = v4;
    void v3[4] = v9;
    swift_bridgeObjectRelease();
    v3[5] = v6;
    v3[6] = v8;
    swift_release();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_10009CF48()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for AnonymousCrowdSourceNetworkURLComponents()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd40AnonymousCrowdSourceNetworkURLComponents);
}

uint64_t sub_10009CF9C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10009CFC0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10009CFE4()
{
  return sub_10009CEC4(*(void *)(v0 + 16));
}

uint64_t sub_10009CFEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009CFFC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10009D004()
{
  uint64_t v0 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v33[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v33[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v11 = v35;
  uint64_t v12 = sub_1006A0BAC(v35);
  if ((v12 & 1) != 0)
  {
    uint64_t v13 = static os_log_type_t.default.getter(v12);
    if (qword_10099B6E0 != -1) {
      swift_once(&qword_10099B6E0, sub_100650FD0);
    }
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_100A2AFE0,  "ACSN: Overriding host name using value from defaults.",  53LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v14 = sub_1006A0B8C(v11);
    swift_bridgeObjectRelease();
    return v14;
  }

  type metadata accessor for FMNAuthenticationProvider(0LL);
  (*(void (**)(_BYTE *, void, uint64_t))(v1 + 104))(v3, enum case for FMNAccountType.searchParty(_:), v0);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v3);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    uint64_t v15 = sub_10009D438((uint64_t)v6);
LABEL_14:
    uint64_t v31 = static os_log_type_t.default.getter(v15);
    if (qword_10099B6E0 != -1) {
      swift_once(&qword_10099B6E0, sub_100650FD0);
    }
    os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  qword_100A2AFE0,  "ACSN: Fallback to hard-coded host name.",  39LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v14 = sub_1006A0B8C(v11);
    swift_bridgeObjectRelease();
    return v14;
  }

  uint64_t v16 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
  uint64_t v17 = URL.host.getter(v16);
  if (!v18)
  {
    uint64_t v15 = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_14;
  }

  uint64_t v14 = v17;
  uint64_t v19 = v18;
  uint64_t v20 = swift_bridgeObjectRelease();
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  if (qword_10099B6E0 != -1) {
    swift_once(&qword_10099B6E0, sub_100650FD0);
  }
  uint64_t v22 = qword_100A2AFE0;
  uint64_t v23 = os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_100A2AFE0,  "ACSN: Using host name and path from authenticated setup bag.",  60LL,  2LL,  _swiftEmptyArrayStorage);
  unsigned int v34 = static os_log_type_t.default.getter(v23);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v25 = swift_allocObject(v24, 112LL, 7LL);
  *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(v25 + 56) = &type metadata for String;
  unint64_t v26 = sub_1000226F4();
  *(void *)(v25 + 64) = v26;
  *(void *)(v25 + 32) = v14;
  *(void *)(v25 + 40) = v19;
  swift_bridgeObjectRetain(v19);
  uint64_t v28 = URL.path.getter(v27);
  *(void *)(v25 + 96) = &type metadata for String;
  *(void *)(v25 + 104) = v26;
  *(void *)(v25 + 72) = v28;
  *(void *)(v25 + 80) = v29;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v22, "ACSN: hostName: [%@] path: [%@]", 31LL, 2LL, v25);
  uint64_t v30 = swift_bridgeObjectRelease();
  URL.path.getter(v30);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  return v14;
}

uint64_t sub_10009D438(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10009D478()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B9250);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v94 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099CE68);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v99 = type metadata accessor for LocalizationUtility.Table(0LL);
  uint64_t v97 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  double v98 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = v0 + *(int *)(type metadata accessor for UnwantedTrackingUserNotification(0LL) + 20);
  uint64_t v17 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  if (*(unsigned __int8 *)(v16 + v17[13]) - 2 >= 3)
  {
    uint64_t v23 = v16 + v17[12];
    uint64_t v24 = *(void **)(v23 + 16);
    if (!v24)
    {
      unint64_t v37 = 0xD00000000000001ALL;
      unint64_t v42 = "ALERT_ITEM_FOLLOWING_TITLE";
LABEL_32:
      unint64_t v85 = (unint64_t)(v42 - 32) | 0x8000000000000000LL;
      uint64_t v28 = _swiftEmptyArrayStorage;
      goto LABEL_33;
    }

    uint64_t v25 = *(void *)(v23 + 8);
    char v26 = *(_BYTE *)v23;
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v28 = (void *)swift_allocObject(v27, 72LL, 7LL);
    *((_OWORD *)v28 + 1) = xmmword_1007E67D0;
    uint64_t v29 = (void *)sub_1006054A8(v26, v25, v24);
    id v30 = [v29 description];

    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    uint64_t v33 = v32;

    uint64_t v34 = sub_1006E0A6C(v31, v33);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    v28[7] = &type metadata for String;
    v28[8] = sub_1000226F4();
    v28[4] = v34;
    v28[5] = v36;
    unint64_t v37 = 0xD000000000000026LL;
    uint64_t v38 = "ALERT_ITEM_FOLLOWING_WITH_HANDLE_TITLE";
    goto LABEL_29;
  }

  double v96 = v7;
  uint64_t v18 = v17;
  sub_10001581C(v16 + v17[15], (uint64_t)v10, &qword_10099CE68);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    sub_100015794((uint64_t)v10, &qword_10099CE68);
    sub_10001581C(v16 + v18[14], (uint64_t)v3, &qword_1009B9250);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4) == 1)
    {
      sub_100015794((uint64_t)v3, &qword_1009B9250);
      uint64_t v19 = v16 + v18[12];
      uint64_t v20 = *(void **)(v19 + 16);
      if (v20)
      {
        uint64_t v21 = *(void *)(v19 + 8);
        char v22 = *(_BYTE *)v19;
LABEL_26:
        uint64_t v75 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v28 = (void *)swift_allocObject(v75, 72LL, 7LL);
        *((_OWORD *)v28 + 1) = xmmword_1007E67D0;
        uint64_t v76 = (void *)sub_1006054A8(v22, v21, v20);
        id v77 = [v76 description];

        uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        uint64_t v80 = v79;

        uint64_t v81 = sub_1006E0A6C(v78, v80);
        uint64_t v83 = v82;
        swift_bridgeObjectRelease();
        v28[7] = &type metadata for String;
        v28[8] = sub_1000226F4();
        v28[4] = v81;
        v28[5] = v83;
        unint64_t v37 = 0xD000000000000036LL;
        uint64_t v38 = "ALERT_ITEM_FOLLOWING_WITH_HANDLE_UNKNOWN_TITLE_HAWKEYE";
        goto LABEL_29;
      }

      unint64_t v37 = 0xD00000000000002ALL;
      goto LABEL_31;
    }

    Class v95 = v18;
    uint64_t v43 = (uint64_t)v96;
    sub_10002218C((uint64_t)v3, (uint64_t)v96, type metadata accessor for AccessoryMetadata);
    BOOL v44 = sub_1000E1D48();
    uint64_t v45 = (uint64_t *)(v43 + *(int *)(v4 + 28));
    if (!v44)
    {
      uint64_t v40 = *v45;
      uint64_t v41 = v45[1];
      swift_bridgeObjectRetain(v41);
      uint64_t v51 = v43;
LABEL_22:
      sub_100018C68(v51, type metadata accessor for AccessoryMetadata);
      uint64_t v18 = v95;
      goto LABEL_23;
    }

    uint64_t v46 = (void *)v45[1];
    unint64_t v94 = (unint64_t)"WING_SUBTITLE_HAWKEYE";
    if (v46)
    {
      uint64_t v47 = *v45;
      unint64_t v100 = 0LL;
      unint64_t v101 = 0xE000000000000000LL;
      swift_bridgeObjectRetain(v46);
      _StringGuts.grow(_:)(31LL);
      swift_bridgeObjectRelease();
      unint64_t v100 = 0xD00000000000001DLL;
      unint64_t v101 = 0x8000000100853140LL;
      v48._uint64_t countAndFlagsBits = v47;
      v48._object = v46;
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      unint64_t v50 = v100;
      unint64_t v49 = v101;
    }

    else
    {
      unint64_t v49 = 0x80000001008530F0LL;
      unint64_t v50 = 0xD00000000000001CLL;
    }

    uint64_t v52 = enum case for LocalizationUtility.Table.default(_:);
    uint64_t v54 = v97;
    uint64_t v53 = v98;
    uint64_t v55 = v99;
    uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 104);
    v56(v98, enum case for LocalizationUtility.Table.default(_:), v99);
    uint64_t v40 = static LocalizationUtility.localizedString(key:table:)(v50, v49, v53);
    uint64_t v41 = v57;
    uint64_t v58 = *(void (**)(char *, uint64_t))(v54 + 8);
    v58(v53, v55);
    if (v40 == v50 && v41 == v49)
    {
      swift_bridgeObjectRelease();
      uint64_t v59 = (uint64_t)v96;
    }

    else
    {
      char v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, v50, v49, 0LL);
      swift_bridgeObjectRelease();
      uint64_t v59 = (uint64_t)v96;
      if ((v60 & 1) == 0)
      {
LABEL_21:
        uint64_t v51 = v59;
        goto LABEL_22;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v62 = v98;
    uint64_t v61 = v99;
    v56(v98, v52, v99);
    uint64_t v40 = static LocalizationUtility.localizedString(key:table:)(0xD00000000000001CLL, v94 | 0x8000000000000000LL, v62);
    uint64_t v41 = v63;
    v58(v62, v61);
    goto LABEL_21;
  }

  sub_10002218C((uint64_t)v10, (uint64_t)v14, type metadata accessor for AccessoryProductInfo);
  int v39 = (uint64_t *)&v14[*(int *)(v11 + 48)];
  uint64_t v40 = *v39;
  uint64_t v41 = v39[1];
  swift_bridgeObjectRetain(v41);
  sub_100018C68((uint64_t)v14, type metadata accessor for AccessoryProductInfo);
LABEL_23:
  uint64_t v64 = v16 + v18[12];
  uint64_t v20 = *(void **)(v64 + 16);
  if (!v20)
  {
    if (v41)
    {
      uint64_t v84 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v28 = (void *)swift_allocObject(v84, 72LL, 7LL);
      *((_OWORD *)v28 + 1) = xmmword_1007E67D0;
      v28[7] = &type metadata for String;
      v28[8] = sub_1000226F4();
      v28[4] = v40;
      v28[5] = v41;
      unint64_t v37 = 0xD000000000000021LL;
      uint64_t v38 = "ALERT_ITEM_FOLLOWING_TITLE_AIRPOD";
      goto LABEL_29;
    }

    unint64_t v37 = 0xD00000000000002ALL;
LABEL_31:
    unint64_t v42 = "ALERT_ITEM_FOLLOWING_TITLE_UNKNOWN_HAWKEYE";
    goto LABEL_32;
  }

  uint64_t v21 = *(void *)(v64 + 8);
  char v22 = *(_BYTE *)v64;
  if (!v41) {
    goto LABEL_26;
  }
  uint64_t v65 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v28 = (void *)swift_allocObject(v65, 112LL, 7LL);
  *((_OWORD *)v28 + 1) = xmmword_1007E4750;
  uint64_t v66 = (void *)sub_1006054A8(v22, v21, v20);
  id v67 = [v66 description];

  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
  uint64_t v70 = v69;

  uint64_t v71 = sub_1006E0A6C(v68, v70);
  uint64_t v73 = v72;
  swift_bridgeObjectRelease();
  v28[7] = &type metadata for String;
  unint64_t v74 = sub_1000226F4();
  v28[4] = v71;
  v28[5] = v73;
  v28[12] = &type metadata for String;
  v28[13] = v74;
  v28[8] = v74;
  v28[9] = v40;
  v28[10] = v41;
  unint64_t v37 = 0xD00000000000002ELL;
  uint64_t v38 = "ALERT_ITEM_FOLLOWING_WITH_HANDLE_TITLE_HAWKEYE";
LABEL_29:
  unint64_t v85 = (unint64_t)(v38 - 32) | 0x8000000000000000LL;
LABEL_33:
  uint64_t v86 = v97;
  uint64_t v87 = v98;
  uint64_t v88 = v99;
  (*(void (**)(char *, void, uint64_t))(v97 + 104))( v98,  enum case for LocalizationUtility.Table.default(_:),  v99);
  uint64_t v89 = static LocalizationUtility.localizedString(key:table:)(v37, v85, v87);
  uint64_t v91 = v90;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
  uint64_t v92 = String.init(format:arguments:)(v89, v91, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v92;
}

uint64_t sub_10009DC50()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B9250);
  __chkstk_darwin(v1);
  uint64_t v93 = (uint64_t)&v91 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099CE68);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for LocalizationUtility.Table(0LL);
  unint64_t v94 = *(void (***)(char *, uint64_t))(v14 - 8);
  __chkstk_darwin(v14);
  Class v95 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = v0 + *(int *)(type metadata accessor for UnwantedTrackingUserNotification(0LL) + 20);
  uint64_t v17 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v18 = v17;
  int v19 = *(unsigned __int8 *)(v16 + v17[13]);
  if (v19 == 3)
  {
    uint64_t v92 = v6;
    sub_10001581C(v16 + v17[15], (uint64_t)v9, &qword_10099CE68);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
    {
      sub_100015794((uint64_t)v9, &qword_10099CE68);
      uint64_t v23 = v93;
      sub_10001581C(v16 + v18[14], v93, &qword_1009B9250);
      int v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v23, 1LL, v3);
      uint64_t v25 = v14;
      if (v24 == 1)
      {
        sub_100015794(v93, &qword_1009B9250);
        uint64_t v27 = v94;
        char v26 = v95;
        ((void (*)(char *, void, uint64_t))v94[13])( v95,  enum case for LocalizationUtility.Table.default(_:),  v25);
        uint64_t v22 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000025LL, 0x80000001008530C0LL, v26);
        v27[1](v26, v25);
      }

      else
      {
        uint64_t v61 = (uint64_t)v92;
        sub_10002218C(v93, (uint64_t)v92, type metadata accessor for AccessoryMetadata);
        BOOL v62 = sub_1000E1D48();
        uint64_t v63 = v95;
        if (v62)
        {
          uint64_t v64 = (uint64_t *)(v61 + *(int *)(v3 + 28));
          uint64_t v65 = (void *)v64[1];
          if (v65)
          {
            uint64_t v66 = *v64;
            uint64_t v96 = 0LL;
            unint64_t v97 = 0xE000000000000000LL;
            swift_bridgeObjectRetain(v65);
            _StringGuts.grow(_:)(31LL);
            swift_bridgeObjectRelease();
            uint64_t v96 = 0xD00000000000001DLL;
            unint64_t v97 = 0x8000000100853140LL;
            v67._uint64_t countAndFlagsBits = v66;
            v67._object = v65;
            String.append(_:)(v67);
            swift_bridgeObjectRelease();
            uint64_t v69 = v96;
            unint64_t v68 = v97;
          }

          else
          {
            uint64_t v69 = 0xD00000000000001CLL;
            unint64_t v68 = 0x80000001008530F0LL;
          }

          uint64_t v71 = v94;
          uint64_t v72 = (void (**)(char *, uint64_t))v94[13];
          LODWORD(v93) = enum case for LocalizationUtility.Table.default(_:);
          ((void (*)(char *))v72)(v63);
          uint64_t v73 = static LocalizationUtility.localizedString(key:table:)(v69, v68, v63);
          uint64_t v75 = v74;
          uint64_t v76 = v71[1];
          v76(v63, v25);
          if (v73 == v69 && v75 == v68
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v73, v75, v69, v68, 0LL) & 1) != 0)
          {
            swift_bridgeObjectRelease();
            if (qword_10099B2F8 != -1) {
              swift_once(&qword_10099B2F8, sub_100340AA8);
            }
            uint64_t v77 = type metadata accessor for Logger(0LL);
            sub_10000A720(v77, (uint64_t)qword_100A2A6B0);
            swift_bridgeObjectRetain(v68);
            uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
            os_log_type_t v80 = static os_log_type_t.error.getter(v79);
            if (os_log_type_enabled(v79, v80))
            {
              uint64_t v81 = swift_slowAlloc(12LL, -1LL);
              unint64_t v94 = v72;
              uint64_t v82 = (uint8_t *)v81;
              uint64_t v83 = swift_slowAlloc(32LL, -1LL);
              uint64_t v96 = v83;
              *(_DWORD *)uint64_t v82 = 136315138;
              swift_bridgeObjectRetain(v68);
              uint64_t v98 = sub_1003F11D4(v69, v68, &v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v82 + 4, v82 + 12);
              swift_bridgeObjectRelease_n(v68, 3LL);
              _os_log_impl((void *)&_mh_execute_header, v79, v80, "No fallback translation for key: %s", v82, 0xCu);
              swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
              uint64_t v84 = v83;
              uint64_t v61 = (uint64_t)v92;
              uint64_t v63 = v95;
              swift_slowDealloc(v84, -1LL, -1LL);
              unint64_t v85 = v82;
              uint64_t v72 = v94;
              swift_slowDealloc(v85, -1LL, -1LL);
            }

            else
            {

              swift_bridgeObjectRelease_n(v68, 2LL);
            }

            ((void (*)(char *, void, uint64_t))v72)(v63, v93, v25);
            uint64_t v22 = static LocalizationUtility.localizedString(key:table:)( 0xD000000000000025LL,  0x80000001008530C0LL,  v63);
            v76(v63, v25);
          }

          else
          {
            swift_bridgeObjectRelease();
            ((void (*)(char *, void, uint64_t))v72)(v63, v93, v25);
            uint64_t v86 = static LocalizationUtility.localizedString(key:table:)( 0xD000000000000024LL,  0x8000000100853110LL,  v63);
            uint64_t v88 = v87;
            v76(v63, v25);
            uint64_t v89 = sub_100004AEC((uint64_t *)&unk_10099D740);
            uint64_t v90 = swift_allocObject(v89, 72LL, 7LL);
            *(_OWORD *)(v90 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
            *(void *)(v90 + 56) = &type metadata for String;
            *(void *)(v90 + 64) = sub_1000226F4();
            *(void *)(v90 + 32) = v73;
            *(void *)(v90 + 40) = v75;
            uint64_t v22 = String.init(format:_:)(v86, v88, v90);
            swift_bridgeObjectRelease();
          }
        }

        else
        {
          uint64_t v70 = v94;
          ((void (*)(char *, void, uint64_t))v94[13])( v95,  enum case for LocalizationUtility.Table.default(_:),  v25);
          uint64_t v22 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000025LL, 0x80000001008530C0LL, v63);
          v70[1](v63, v25);
        }

        sub_100018C68(v61, type metadata accessor for AccessoryMetadata);
      }
    }

    else
    {
      sub_10002218C((uint64_t)v9, (uint64_t)v13, type metadata accessor for AccessoryProductInfo);
      unint64_t v49 = v94;
      Swift::String v48 = v95;
      ((void (*)(char *, void, uint64_t))v94[13])( v95,  enum case for LocalizationUtility.Table.default(_:),  v14);
      uint64_t v50 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000024LL, 0x8000000100853110LL, v48);
      uint64_t v52 = v51;
      v49[1](v48, v14);
      uint64_t v53 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v54 = swift_allocObject(v53, 72LL, 7LL);
      *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v55 = &v13[*(int *)(v10 + 48)];
      uint64_t v57 = *(void *)v55;
      uint64_t v56 = *((void *)v55 + 1);
      *(void *)(v54 + 56) = &type metadata for String;
      *(void *)(v54 + 64) = sub_1000226F4();
      *(void *)(v54 + 32) = v57;
      *(void *)(v54 + 40) = v56;
      swift_bridgeObjectRetain(v56);
      uint64_t v22 = String.init(format:_:)(v50, v52, v54);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v13, type metadata accessor for AccessoryProductInfo);
    }
  }

  else if (v19 == 2)
  {
    uint64_t v21 = v94;
    uint64_t v20 = v95;
    ((void (*)(char *, void, uint64_t))v94[13])( v95,  enum case for LocalizationUtility.Table.default(_:),  v14);
    uint64_t v22 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000025LL, 0x80000001008530C0LL, v20);
    v21[1](v20, v14);
  }

  else
  {
    uint64_t v28 = (uint64_t *)(v16 + v17[12]);
    uint64_t v29 = (void *)v28[2];
    uint64_t v30 = v14;
    if (v29)
    {
      uint64_t v31 = *v28;
      uint64_t v32 = v28[1];
      uint64_t v34 = v94;
      uint64_t v33 = v95;
      ((void (*)(char *, void, uint64_t))v94[13])( v95,  enum case for LocalizationUtility.Table.default(_:),  v30);
      uint64_t v35 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000029LL, 0x8000000100853090LL, v33);
      uint64_t v37 = v36;
      v34[1](v33, v30);
      uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
      *(_OWORD *)(v39 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v40 = (void *)sub_1006054A8(v31, v32, v29);
      id v41 = [v40 description];

      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      uint64_t v44 = v43;

      uint64_t v45 = sub_1006E0A6C(v42, v44);
      uint64_t v47 = v46;
      swift_bridgeObjectRelease();
      *(void *)(v39 + 56) = &type metadata for String;
      *(void *)(v39 + 64) = sub_1000226F4();
      *(void *)(v39 + 32) = v45;
      *(void *)(v39 + 40) = v47;
      uint64_t v22 = String.init(format:_:)(v35, v37, v39);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v59 = v94;
      uint64_t v58 = v95;
      ((void (*)(char *, void, uint64_t))v94[13])( v95,  enum case for LocalizationUtility.Table.default(_:),  v30);
      uint64_t v22 = static LocalizationUtility.localizedString(key:table:)(0xD00000000000001DLL, 0x8000000100853070LL, v58);
      v59[1](v58, v30);
    }
  }

  return v22;
}

uint64_t sub_10009E5BC(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 24));
}

unint64_t sub_10009E5D0()
{
  return sub_100412CF8((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_10009E5DC()
{
  return *v0;
}

void *sub_10009E5E4(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v18 = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    uint64_t v252 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
    uint64_t v253 = v8;
    uint64_t v13 = v252[5];
    uint64_t v14 = &v8[v13];
    uint64_t v15 = &v9[v13];
    unint64_t v250 = a1;
    uint64_t v248 = a3;
    uint64_t v242 = v12;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&v9[v13], 1LL, v10))
    {
      uint64_t v16 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      v12(v14, v15, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0LL, 1LL, v10);
    }

    v253[v252[6]] = v9[v252[6]];
    uint64_t v19 = v252[7];
    uint64_t v20 = &v253[v19];
    uint64_t v21 = &v9[v19];
    uint64_t v22 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
    uint64_t v23 = v252[8];
    uint64_t v24 = *(void *)&v9[v23];
    *(void *)&v253[v23] = v24;
    v253[v252[9]] = v9[v252[9]];
    uint64_t v25 = v252[10];
    char v26 = &v253[v25];
    uint64_t v27 = &v9[v25];
    uint64_t v28 = v9;
    uint64_t v29 = type metadata accessor for Date(0LL);
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v31 = *(void (**)(char *, char *, uint64_t, __n128))(v30 + 16);
    __n128 v32 = swift_bridgeObjectRetain(v24);
    v31(v26, v27, v29, v32);
    uint64_t v33 = v252[11];
    uint64_t v34 = &v253[v33];
    uint64_t v35 = &v28[v33];
    uint64_t v251 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    uint64_t v249 = a2;
    uint64_t v246 = v30;
    uint64_t v247 = v29;
    unint64_t v245 = (void (*)(char *, char *, uint64_t))v31;
    if (v251(&v28[v33], 1LL, v29))
    {
      uint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      ((void (*)(char *, char *, uint64_t))v31)(v34, v35, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v34, 0LL, 1LL, v29);
    }

    uint64_t v37 = v28;
    uint64_t v38 = v252[12];
    uint64_t v39 = &v253[v38];
    uint64_t v40 = &v28[v38];
    *uint64_t v39 = *v40;
    uint64_t v41 = *((void *)v40 + 2);
    *((void *)v39 + 1) = *((void *)v40 + 1);
    *((void *)v39 + 2) = v41;
    v253[v252[13]] = v28[v252[13]];
    uint64_t v42 = v252[14];
    uint64_t v43 = &v253[v42];
    uint64_t v44 = &v28[v42];
    uint64_t v45 = (int *)type metadata accessor for AccessoryMetadata(0LL);
    uint64_t v46 = *((void *)v45 - 1);
    uint64_t v47 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v46 + 48);
    __n128 v48 = swift_bridgeObjectRetain(v41);
    if (v47(v44, 1LL, v45, v48))
    {
      uint64_t v49 = sub_100004AEC(&qword_1009B9250);
      memcpy(v43, v44, *(void *)(*(void *)(v49 - 8) + 64LL));
    }

    else
    {
      v242(v43, v44, v10);
      uint64_t v50 = v45[5];
      uint64_t v51 = (uint64_t *)&v43[v50];
      uint64_t v52 = (uint64_t *)&v44[v50];
      uint64_t v53 = *v52;
      unint64_t v54 = v52[1];
      sub_10001736C(*v52, v54);
      *uint64_t v51 = v53;
      v51[1] = v54;
      uint64_t v55 = v45[6];
      uint64_t v56 = &v43[v55];
      uint64_t v57 = &v44[v55];
      uint64_t v58 = *((void *)v57 + 1);
      *(void *)uint64_t v56 = *(void *)v57;
      *((void *)v56 + 1) = v58;
      uint64_t v59 = v45[7];
      char v60 = &v43[v59];
      uint64_t v61 = &v44[v59];
      uint64_t v62 = *((void *)v61 + 1);
      *(void *)char v60 = *(void *)v61;
      *((void *)v60 + 1) = v62;
      *(_DWORD *)&v43[v45[8]] = *(_DWORD *)&v44[v45[8]];
      uint64_t v63 = v45[9];
      uint64_t v64 = &v43[v63];
      uint64_t v65 = &v44[v63];
      *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
      v64[4] = v65[4];
      uint64_t v66 = v45[10];
      Swift::String v67 = &v43[v66];
      unint64_t v68 = &v44[v66];
      *(_OWORD *)Swift::String v67 = *(_OWORD *)v68;
      v67[16] = v68[16];
      uint64_t v69 = v45[11];
      uint64_t v70 = &v43[v69];
      uint64_t v71 = &v44[v69];
      v70[8] = v71[8];
      *(void *)uint64_t v70 = *(void *)v71;
      uint64_t v72 = v45[12];
      uint64_t v73 = &v43[v72];
      uint64_t v74 = &v44[v72];
      *(_DWORD *)uint64_t v73 = *(_DWORD *)v74;
      v73[4] = v74[4];
      v43[v45[13]] = v44[v45[13]];
      v43[v45[14]] = v44[v45[14]];
      uint64_t v75 = v45[15];
      uint64_t v76 = &v43[v75];
      uint64_t v77 = &v44[v75];
      uint64_t v78 = *((void *)v77 + 1);
      *(void *)uint64_t v76 = *(void *)v77;
      *((void *)v76 + 1) = v78;
      uint64_t v79 = *(void (**)(char *, void, uint64_t, int *, __n128))(v46 + 56);
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v62);
      __n128 v80 = swift_bridgeObjectRetain(v78);
      v79(v43, 0LL, 1LL, v45, v80);
    }

    uint64_t v81 = v252[15];
    uint64_t v82 = &v253[v81];
    uint64_t v83 = &v37[v81];
    uint64_t v84 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
    uint64_t v85 = *((void *)v84 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v85 + 48))(v83, 1LL, v84))
    {
      uint64_t v86 = sub_100004AEC(&qword_10099CE68);
      memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64LL));
      uint64_t v87 = v249;
      uint64_t v18 = v250;
      uint64_t v88 = v247;
      uint64_t v89 = v248;
      uint64_t v91 = v252;
      uint64_t v90 = v253;
      uint64_t v92 = v246;
    }

    else
    {
      uint64_t v241 = v85;
      *(void *)uint64_t v82 = *(void *)v83;
      v82[8] = v83[8];
      uint64_t v93 = v84[5];
      unint64_t v94 = &v82[v93];
      Class v95 = &v83[v93];
      uint64_t v96 = type metadata accessor for ServerStatusCode(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 16LL))(v94, v95, v96);
      v82[v84[6]] = v83[v84[6]];
      v82[v84[7]] = v83[v84[7]];
      uint64_t v97 = v84[8];
      uint64_t v98 = &v82[v97];
      uint64_t v99 = &v83[v97];
      uint64_t v239 = *((void *)v99 + 1);
      *(void *)uint64_t v98 = *(void *)v99;
      *((void *)v98 + 1) = v239;
      v82[v84[9]] = v83[v84[9]];
      v82[v84[10]] = v83[v84[10]];
      v82[v84[11]] = v83[v84[11]];
      uint64_t v100 = v84[12];
      unint64_t v101 = &v82[v100];
      id v102 = &v83[v100];
      uint64_t v103 = *((void *)v102 + 1);
      *(void *)unint64_t v101 = *(void *)v102;
      *((void *)v101 + 1) = v103;
      uint64_t v104 = v84[13];
      uint64_t v105 = &v82[v104];
      uint64_t v106 = &v83[v104];
      uint64_t v107 = *((void *)v106 + 1);
      *(void *)uint64_t v105 = *(void *)v106;
      *((void *)v105 + 1) = v107;
      uint64_t v108 = v84[14];
      uint64_t v109 = &v82[v108];
      uint64_t v110 = &v83[v108];
      *(void *)uint64_t v109 = *(void *)v110;
      v109[8] = v110[8];
      uint64_t v111 = v84[15];
      uint64_t v112 = &v82[v111];
      uint64_t v113 = &v83[v111];
      uint64_t v114 = *((void *)v113 + 1);
      *(void *)uint64_t v112 = *(void *)v113;
      *((void *)v112 + 1) = v114;
      uint64_t v115 = v84[16];
      __dst = &v82[v115];
      uint64_t v237 = &v83[v115];
      uint64_t v116 = type metadata accessor for URL(0LL);
      uint64_t v117 = *(void *)(v116 - 8);
      unint64_t v118 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v117 + 48);
      swift_bridgeObjectRetain(v239);
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRetain(v107);
      __n128 v119 = swift_bridgeObjectRetain(v114);
      uint64_t v244 = v117;
      if (v118(v237, 1LL, v116, v119))
      {
        uint64_t v120 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dst, v237, *(void *)(*(void *)(v120 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v117 + 16))(__dst, v237, v116);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v117 + 56))(__dst, 0LL, 1LL, v116);
      }

      uint64_t v240 = v37;
      uint64_t v121 = v84[17];
      unint64_t v122 = &v82[v121];
      uint64_t v123 = &v83[v121];
      SecKeyRef v124 = v118;
      uint64_t v243 = v116;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v118)(&v83[v121], 1LL, v116))
      {
        uint64_t v125 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v122, v123, *(void *)(*(void *)(v125 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v122, v123, v116);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v117 + 56))(v122, 0LL, 1LL, v116);
      }

      uint64_t v126 = v84[18];
      uint64_t v127 = &v82[v126];
      uint64_t v128 = &v83[v126];
      uint64_t v129 = *((void *)v128 + 1);
      *(void *)uint64_t v127 = *(void *)v128;
      *((void *)v127 + 1) = v129;
      *(void *)&v82[v84[19]] = *(void *)&v83[v84[19]];
      uint64_t v130 = v84[20];
      uint64_t v131 = &v82[v130];
      uint64_t v132 = &v83[v130];
      uint64_t v133 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
      uint64_t v134 = *((void *)v133 - 1);
      unint64_t v135 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v134 + 48);
      __n128 v136 = swift_bridgeObjectRetain(v129);
      if (v135(v132, 1LL, v133, v136))
      {
        uint64_t v137 = sub_100004AEC(&qword_1009A6DD0);
        memcpy(v131, v132, *(void *)(*(void *)(v137 - 8) + 64LL));
      }

      else
      {
        uint64_t v238 = v134;
        uint64_t v138 = *((void *)v132 + 1);
        *(void *)uint64_t v131 = *(void *)v132;
        *((void *)v131 + 1) = v138;
        uint64_t v139 = *((void *)v132 + 3);
        *((void *)v131 + 2) = *((void *)v132 + 2);
        *((void *)v131 + 3) = v139;
        uint64_t v140 = *((void *)v132 + 5);
        *((void *)v131 + 4) = *((void *)v132 + 4);
        *((void *)v131 + 5) = v140;
        *((_WORD *)v131 + 24) = *((_WORD *)v132 + 24);
        v131[72] = v132[72];
        uint64_t v141 = *((void *)v132 + 8);
        *((void *)v131 + 7) = *((void *)v132 + 7);
        *((void *)v131 + 8) = v141;
        uint64_t v142 = v133[10];
        __dsta = &v131[v142];
        uint64_t v143 = &v132[v142];
        swift_bridgeObjectRetain(v138);
        swift_bridgeObjectRetain(v139);
        __n128 v144 = swift_bridgeObjectRetain(v140);
        if (v124(v143, 1LL, v243, v144))
        {
          uint64_t v145 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
          memcpy(__dsta, v143, *(void *)(*(void *)(v145 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v244 + 16))(__dsta, v143, v243);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v244 + 56))(__dsta, 0LL, 1LL, v243);
        }

        uint64_t v146 = v133[11];
        uint64_t v147 = &v131[v146];
        uint64_t v148 = &v132[v146];
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v124)(&v132[v146], 1LL, v243))
        {
          uint64_t v149 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
          memcpy(v147, v148, *(void *)(*(void *)(v149 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v244 + 16))(v147, v148, v243);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v244 + 56))(v147, 0LL, 1LL, v243);
        }

        uint64_t v150 = v133[12];
        uint64_t v151 = &v131[v150];
        uint64_t v152 = &v132[v150];
        *(void *)uint64_t v151 = *(void *)v152;
        v151[8] = v152[8];
        uint64_t v153 = v133[13];
        uint64_t v154 = &v131[v153];
        uint64_t v155 = &v132[v153];
        uint64_t v156 = *((void *)v155 + 1);
        *(void *)uint64_t v154 = *(void *)v155;
        *((void *)v154 + 1) = v156;
        uint64_t v157 = v133[14];
        uint64_t v158 = *(void *)&v132[v157];
        *(void *)&v131[v157] = v158;
        uint64_t v159 = v133[15];
        uint64_t v160 = &v131[v159];
        uint64_t v161 = &v132[v159];
        uint64_t v162 = *((void *)v161 + 1);
        *(void *)uint64_t v160 = *(void *)v161;
        *((void *)v160 + 1) = v162;
        uint64_t v163 = v133[16];
        uint64_t v164 = *(void *)&v132[v163];
        *(void *)&v131[v163] = v164;
        uint64_t v165 = v133[17];
        uint64_t v166 = &v131[v165];
        __int128 v167 = &v132[v165];
        *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
        v166[16] = v167[16];
        uint64_t v168 = v133[18];
        uint64_t v169 = &v131[v168];
        uint64_t v170 = &v132[v168];
        *(_OWORD *)uint64_t v169 = *(_OWORD *)v170;
        v169[16] = v170[16];
        uint64_t v171 = *(void (**)(char *, void, uint64_t, int *, __n128))(v238 + 56);
        swift_bridgeObjectRetain(v156);
        swift_bridgeObjectRetain(v158);
        swift_bridgeObjectRetain(v162);
        __n128 v172 = swift_bridgeObjectRetain(v164);
        v171(v131, 0LL, 1LL, v133, v172);
      }

      *(_DWORD *)&v82[v84[21]] = *(_DWORD *)&v83[v84[21]];
      uint64_t v173 = v84[22];
      uint64_t v174 = *(void *)&v83[v173];
      *(void *)&v82[v173] = v174;
      uint64_t v175 = v84[23];
      uint64_t v176 = &v82[v175];
      unint64_t v177 = &v83[v175];
      unint64_t v178 = *(void *)&v83[v175 + 8];
      swift_bridgeObjectRetain(v174);
      if (v178 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v176 = *(_OWORD *)v177;
      }

      else
      {
        uint64_t v179 = *(void *)v177;
        sub_10001736C(v179, v178);
        *(void *)uint64_t v176 = v179;
        *((void *)v176 + 1) = v178;
      }

      uint64_t v180 = v84[24];
      uint64_t v181 = &v82[v180];
      uint64_t v182 = &v83[v180];
      unint64_t v183 = *((void *)v182 + 1);
      if (v183 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v181 = *(_OWORD *)v182;
      }

      else
      {
        uint64_t v184 = *(void *)v182;
        sub_10001736C(*(void *)v182, *((void *)v182 + 1));
        *(void *)uint64_t v181 = v184;
        *((void *)v181 + 1) = v183;
      }

      uint64_t v185 = *(void (**)(char *, char *, uint64_t))(v244 + 16);
      v185(&v82[v84[25]], &v83[v84[25]], v243);
      v185(&v82[v84[26]], &v83[v84[26]], v243);
      v185(&v82[v84[27]], &v83[v84[27]], v243);
      v185(&v82[v84[28]], &v83[v84[28]], v243);
      v185(&v82[v84[29]], &v83[v84[29]], v243);
      v185(&v82[v84[30]], &v83[v84[30]], v243);
      uint64_t v186 = v84[31];
      os_log_type_t v187 = &v82[v186];
      uint64_t v188 = &v83[v186];
      uint64_t v189 = *((void *)v188 + 1);
      *(void *)os_log_type_t v187 = *(void *)v188;
      *((void *)v187 + 1) = v189;
      uint64_t v190 = v84[32];
      uint64_t v191 = *(void *)&v83[v190];
      *(void *)&v82[v190] = v191;
      uint64_t v192 = v84[33];
      unint64_t v193 = &v82[v192];
      uint64_t v194 = &v83[v192];
      uint64_t v195 = *((void *)v194 + 1);
      *(void *)unint64_t v193 = *(void *)v194;
      *((void *)v193 + 1) = v195;
      uint64_t v196 = v84[34];
      uint64_t v197 = *(void *)&v83[v196];
      *(void *)&v82[v196] = v197;
      uint64_t v198 = v84[35];
      uint64_t v199 = &v82[v198];
      uint64_t v200 = &v83[v198];
      *(_OWORD *)uint64_t v199 = *(_OWORD *)v200;
      v199[16] = v200[16];
      uint64_t v201 = v84[36];
      uint64_t v202 = &v82[v201];
      uint64_t v203 = &v83[v201];
      *(_OWORD *)uint64_t v202 = *(_OWORD *)v203;
      v202[16] = v203[16];
      uint64_t v204 = v84[37];
      unint64_t v205 = &v82[v204];
      uint64_t v206 = &v83[v204];
      swift_bridgeObjectRetain(v189);
      swift_bridgeObjectRetain(v191);
      swift_bridgeObjectRetain(v195);
      __n128 v207 = swift_bridgeObjectRetain(v197);
      ((void (*)(char *, char *, uint64_t, __n128))v185)(v205, v206, v243, v207);
      v185(&v82[v84[38]], &v83[v84[38]], v243);
      v185(&v82[v84[39]], &v83[v84[39]], v243);
      v185(&v82[v84[40]], &v83[v84[40]], v243);
      v185(&v82[v84[41]], &v83[v84[41]], v243);
      v185(&v82[v84[42]], &v83[v84[42]], v243);
      v82[v84[43]] = v83[v84[43]];
      v82[v84[44]] = v83[v84[44]];
      v82[v84[45]] = v83[v84[45]];
      uint64_t v208 = v84[46];
      BOOL v209 = &v82[v208];
      uint64_t v210 = &v83[v208];
      uint64_t v211 = *((void *)v210 + 1);
      *(void *)BOOL v209 = *(void *)v210;
      *((void *)v209 + 1) = v211;
      uint64_t v212 = v84[47];
      int v213 = &v82[v212];
      uint64_t v214 = &v83[v212];
      uint64_t v215 = *((void *)v214 + 1);
      *(void *)int v213 = *(void *)v214;
      *((void *)v213 + 1) = v215;
      uint64_t v216 = *(void (**)(char *, void, uint64_t, int *, __n128))(v241 + 56);
      swift_bridgeObjectRetain(v211);
      __n128 v217 = swift_bridgeObjectRetain(v215);
      v216(v82, 0LL, 1LL, v84, v217);
      uint64_t v87 = v249;
      uint64_t v18 = v250;
      uint64_t v88 = v247;
      uint64_t v89 = v248;
      uint64_t v91 = v252;
      uint64_t v90 = v253;
      uint64_t v92 = v246;
      uint64_t v37 = v240;
    }

    v90[v91[16]] = v37[v91[16]];
    uint64_t v218 = v91[17];
    uint64_t v219 = *(void *)&v37[v218];
    *(void *)&v90[v218] = v219;
    uint64_t v220 = v91[18];
    uint64_t v221 = &v90[v220];
    uint64_t v222 = &v37[v220];
    __n128 v223 = swift_bridgeObjectRetain(v219);
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v251)(v222, 1LL, v88, v223))
    {
      uint64_t v224 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v221, v222, *(void *)(*(void *)(v224 - 8) + 64LL));
    }

    else
    {
      v245(v221, v222, v88);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v221, 0LL, 1LL, v88);
    }

    uint64_t v225 = v91[19];
    uint64_t v226 = &v90[v225];
    uint64_t v227 = &v37[v225];
    if (v251(&v37[v225], 1LL, v88))
    {
      uint64_t v228 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v226, v227, *(void *)(*(void *)(v228 - 8) + 64LL));
    }

    else
    {
      v245(v226, v227, v88);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v226, 0LL, 1LL, v88);
    }

    uint64_t v229 = v91[20];
    uint64_t v230 = &v90[v229];
    uint64_t v231 = (uint64_t *)&v37[v229];
    unint64_t v232 = v231[1];
    if (((v232 >> 60) | 4) == 0xF)
    {
      *(_OWORD *)uint64_t v230 = *(_OWORD *)v231;
    }

    else
    {
      uint64_t v233 = *v231;
      sub_10001736C(*v231, v231[1]);
      *(void *)uint64_t v230 = v233;
      *((void *)v230 + 1) = v232;
    }

    v90[v91[21]] = v37[v91[21]];
    *(_WORD *)&v90[v91[22]] = *(_WORD *)&v37[v91[22]];
    *((_BYTE *)v18 + *(int *)(v89 + swift_release(*(void *)(v0 + 24)) = *((_BYTE *)v87 + *(int *)(v89 + 24));
  }

  return v18;
}

uint64_t sub_10009F324(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  int v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v2, v3);
  uint64_t v6 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v7 = v2 + v6[5];
  uint64_t v8 = v2 + v6[7];
  uint64_t v9 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v2 + v6[10];
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  uint64_t v14 = v2 + v6[11];
  uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v15(v14, 1LL, v11)) {
    v13(v14, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + v6[14];
  uint64_t v17 = type metadata accessor for AccessoryMetadata(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(v16, 1LL, v17))
  {
    v5(v16, v3);
    sub_100016F9C(*(void *)(v16 + *(int *)(v17 + 20)), *(void *)(v16 + *(int *)(v17 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v18 = v2 + v6[15];
  uint64_t v19 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v19 - 1) + 48LL))(v18, 1LL, v19))
  {
    uint64_t v20 = v18 + v19[5];
    uint64_t v21 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8LL))(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v18 + v19[16];
    uint64_t v23 = type metadata accessor for URL(0LL);
    uint64_t v42 = *(void *)(v23 - 8);
    uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
    if (!v24(v22, 1LL, v23)) {
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v22, v23);
    }
    uint64_t v41 = v15;
    uint64_t v25 = v18 + v19[17];
    if (!v24(v25, 1LL, v23)) {
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v25, v23);
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v18 + v19[20];
    uint64_t v27 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48LL))(v26, 1LL, v27))
    {
      uint64_t v40 = v13;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v28 = v26 + *(int *)(v27 + 40);
      if (!v24(v28, 1LL, v23)) {
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v28, v23);
      }
      uint64_t v29 = v26 + *(int *)(v27 + 44);
      if (!v24(v29, 1LL, v23)) {
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v29, v23);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = v40;
    }

    swift_bridgeObjectRelease();
    uint64_t v30 = (uint64_t *)(v18 + v19[23]);
    unint64_t v31 = v30[1];
    uint64_t v15 = v41;
    if (v31 >> 60 != 15) {
      sub_100016F9C(*v30, v31);
    }
    __n128 v32 = (uint64_t *)(v18 + v19[24]);
    unint64_t v33 = v32[1];
    if (v33 >> 60 != 15) {
      sub_100016F9C(*v32, v33);
    }
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v34(v18 + v19[25], v23);
    v34(v18 + v19[26], v23);
    v34(v18 + v19[27], v23);
    v34(v18 + v19[28], v23);
    v34(v18 + v19[29], v23);
    v34(v18 + v19[30], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34(v18 + v19[37], v23);
    v34(v18 + v19[38], v23);
    v34(v18 + v19[39], v23);
    v34(v18 + v19[40], v23);
    v34(v18 + v19[41], v23);
    v34(v18 + v19[42], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t v35 = v2 + v6[18];
  if (!v15(v35, 1LL, v11)) {
    v13(v35, v11);
  }
  uint64_t v36 = v2 + v6[19];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(v36, 1LL, v11);
  if (!(_DWORD)result) {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v13)(v36, v11);
  }
  uint64_t v38 = (uint64_t *)(v2 + v6[20]);
  unint64_t v39 = v38[1];
  if (((v39 >> 60) | 4) != 0xF) {
    return sub_100016F9C(*v38, v39);
  }
  return result;
}

_BYTE *sub_10009F8E8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  uint64_t v248 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v249 = v7;
  uint64_t v12 = v248[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  uint64_t v244 = a3;
  unint64_t v245 = a2;
  __dst = v11;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&v8[v12], 1LL, v9))
  {
    uint64_t v15 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0LL, 1LL, v9);
  }

  v249[v248[6]] = v8[v248[6]];
  uint64_t v16 = v248[7];
  uint64_t v17 = &v249[v16];
  uint64_t v18 = &v8[v16];
  uint64_t v19 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
  uint64_t v20 = v248[8];
  uint64_t v21 = *(void *)&v8[v20];
  *(void *)&v249[v20] = v21;
  v249[v248[9]] = v8[v248[9]];
  uint64_t v22 = v248[10];
  uint64_t v23 = &v249[v22];
  uint64_t v24 = &v8[v22];
  uint64_t v25 = type metadata accessor for Date(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(void (**)(_BYTE *, _BYTE *, uint64_t, __n128))(v26 + 16);
  __n128 v28 = swift_bridgeObjectRetain(v21);
  v27(v23, v24, v25, v28);
  uint64_t v29 = v248[11];
  uint64_t v30 = &v249[v29];
  unint64_t v31 = &v8[v29];
  uint64_t v247 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48);
  uint64_t v246 = a1;
  uint64_t v242 = v26;
  uint64_t v243 = v25;
  uint64_t v241 = (void (*)(_BYTE *, _BYTE *, uint64_t))v27;
  if (v247(&v8[v29], 1LL, v25))
  {
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    ((void (*)(char *, char *, uint64_t))v27)(v30, v31, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v30, 0LL, 1LL, v25);
  }

  uint64_t v33 = v248[12];
  uint64_t v34 = &v249[v33];
  uint64_t v35 = &v8[v33];
  *uint64_t v34 = *v35;
  uint64_t v36 = *((void *)v35 + 2);
  *((void *)v34 + 1) = *((void *)v35 + 1);
  *((void *)v34 + 2) = v36;
  v249[v248[13]] = v8[v248[13]];
  uint64_t v37 = v248[14];
  uint64_t v38 = &v249[v37];
  unint64_t v39 = &v8[v37];
  uint64_t v40 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v41 = *((void *)v40 - 1);
  uint64_t v42 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v41 + 48);
  __n128 v43 = swift_bridgeObjectRetain(v36);
  if (v42(v39, 1LL, v40, v43))
  {
    uint64_t v44 = sub_100004AEC(&qword_1009B9250);
    memcpy(v38, v39, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    __dst(v38, v39, v9);
    uint64_t v45 = v40[5];
    uint64_t v46 = (uint64_t *)&v38[v45];
    uint64_t v47 = (uint64_t *)&v39[v45];
    uint64_t v48 = *v47;
    unint64_t v49 = v47[1];
    sub_10001736C(*v47, v49);
    *uint64_t v46 = v48;
    v46[1] = v49;
    uint64_t v50 = v40[6];
    uint64_t v51 = &v38[v50];
    uint64_t v52 = &v39[v50];
    uint64_t v53 = *((void *)v52 + 1);
    *(void *)uint64_t v51 = *(void *)v52;
    *((void *)v51 + 1) = v53;
    uint64_t v54 = v40[7];
    uint64_t v55 = &v38[v54];
    uint64_t v56 = &v39[v54];
    uint64_t v57 = *((void *)v56 + 1);
    *(void *)uint64_t v55 = *(void *)v56;
    *((void *)v55 + 1) = v57;
    *(_DWORD *)&v38[v40[8]] = *(_DWORD *)&v39[v40[8]];
    uint64_t v58 = v40[9];
    uint64_t v59 = &v38[v58];
    char v60 = &v39[v58];
    *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
    v59[4] = v60[4];
    uint64_t v61 = v40[10];
    uint64_t v62 = &v38[v61];
    uint64_t v63 = &v39[v61];
    *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
    v62[16] = v63[16];
    uint64_t v64 = v40[11];
    uint64_t v65 = &v38[v64];
    uint64_t v66 = &v39[v64];
    v65[8] = v66[8];
    *(void *)uint64_t v65 = *(void *)v66;
    uint64_t v67 = v40[12];
    unint64_t v68 = &v38[v67];
    uint64_t v69 = &v39[v67];
    *(_DWORD *)unint64_t v68 = *(_DWORD *)v69;
    v68[4] = v69[4];
    v38[v40[13]] = v39[v40[13]];
    v38[v40[14]] = v39[v40[14]];
    uint64_t v70 = v40[15];
    uint64_t v71 = &v38[v70];
    uint64_t v72 = &v39[v70];
    uint64_t v73 = *((void *)v72 + 1);
    *(void *)uint64_t v71 = *(void *)v72;
    *((void *)v71 + 1) = v73;
    uint64_t v74 = *(void (**)(char *, void, uint64_t, int *, __n128))(v41 + 56);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v57);
    __n128 v75 = swift_bridgeObjectRetain(v73);
    v74(v38, 0LL, 1LL, v40, v75);
  }

  uint64_t v76 = v248[15];
  uint64_t v77 = &v249[v76];
  uint64_t v78 = &v8[v76];
  uint64_t v79 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v80 = *((void *)v79 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v80 + 48))(v78, 1LL, v79))
  {
    uint64_t v81 = sub_100004AEC(&qword_10099CE68);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64LL));
    uint64_t v83 = v245;
    uint64_t v82 = v246;
    uint64_t v84 = v243;
    uint64_t v85 = v244;
    uint64_t v87 = v248;
    uint64_t v86 = v249;
    uint64_t v88 = v242;
  }

  else
  {
    uint64_t v236 = v80;
    *(void *)uint64_t v77 = *(void *)v78;
    v77[8] = v78[8];
    uint64_t v89 = v79[5];
    uint64_t v90 = &v77[v89];
    uint64_t v91 = &v78[v89];
    uint64_t v92 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v92 - 8) + 16LL))(v90, v91, v92);
    v77[v79[6]] = v78[v79[6]];
    v77[v79[7]] = v78[v79[7]];
    uint64_t v93 = v79[8];
    unint64_t v94 = &v77[v93];
    Class v95 = &v78[v93];
    uint64_t v233 = v95[1];
    *unint64_t v94 = *v95;
    v94[1] = v233;
    v77[v79[9]] = v78[v79[9]];
    v77[v79[10]] = v78[v79[10]];
    v77[v79[11]] = v78[v79[11]];
    uint64_t v96 = v79[12];
    uint64_t v97 = &v77[v96];
    uint64_t v98 = &v78[v96];
    uint64_t v99 = v98[1];
    *uint64_t v97 = *v98;
    v97[1] = v99;
    uint64_t v100 = v79[13];
    unint64_t v101 = &v77[v100];
    id v102 = &v78[v100];
    uint64_t v103 = v102[1];
    *unint64_t v101 = *v102;
    v101[1] = v103;
    uint64_t v104 = v79[14];
    uint64_t v105 = &v77[v104];
    uint64_t v106 = &v78[v104];
    *(void *)uint64_t v105 = *(void *)v106;
    v105[8] = v106[8];
    uint64_t v107 = v79[15];
    uint64_t v108 = &v77[v107];
    uint64_t v109 = &v78[v107];
    uint64_t v110 = v109[1];
    *uint64_t v108 = *v109;
    v108[1] = v110;
    uint64_t v111 = v79[16];
    __dsta = &v77[v111];
    uint64_t v231 = &v78[v111];
    uint64_t v112 = type metadata accessor for URL(0LL);
    uint64_t v113 = *(void *)(v112 - 8);
    uint64_t v114 = *(unsigned int (**)(void))(v113 + 48);
    swift_bridgeObjectRetain(v233);
    swift_bridgeObjectRetain(v99);
    swift_bridgeObjectRetain(v103);
    __n128 v115 = swift_bridgeObjectRetain(v110);
    uint64_t v240 = v113;
    unint64_t v235 = v8;
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v114)(v231, 1LL, v112, v115))
    {
      uint64_t v116 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dsta, v231, *(void *)(*(void *)(v116 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v113 + 16))(__dsta, v231, v112);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v113 + 56))(__dsta, 0LL, 1LL, v112);
    }

    uint64_t v117 = v79[17];
    unint64_t v118 = &v77[v117];
    __n128 v119 = &v78[v117];
    uint64_t v120 = v114;
    __dstb = (void *)v112;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v114)(&v78[v117], 1LL, v112))
    {
      uint64_t v121 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v118, v119, *(void *)(*(void *)(v121 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v240 + 16))(v118, v119, v112);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v240 + 56))(v118, 0LL, 1LL, v112);
    }

    uint64_t v122 = v79[18];
    uint64_t v123 = &v77[v122];
    SecKeyRef v124 = &v78[v122];
    uint64_t v125 = v124[1];
    *uint64_t v123 = *v124;
    v123[1] = v125;
    *(void *)&v77[v79[19]] = *(void *)&v78[v79[19]];
    uint64_t v126 = v79[20];
    uint64_t v127 = &v77[v126];
    uint64_t v128 = &v78[v126];
    uint64_t v129 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    uint64_t v130 = *((void *)v129 - 1);
    uint64_t v131 = *(unsigned int (**)(void *, uint64_t, int *, __n128))(v130 + 48);
    __n128 v132 = swift_bridgeObjectRetain(v125);
    if (v131((char *)v128, 1LL, v129, v132))
    {
      uint64_t v133 = sub_100004AEC(&qword_1009A6DD0);
      memcpy(v127, v128, *(void *)(*(void *)(v133 - 8) + 64LL));
    }

    else
    {
      uint64_t v234 = v130;
      uint64_t v134 = v128[1];
      *uint64_t v127 = *v128;
      v127[1] = v134;
      uint64_t v135 = v128[3];
      v127[2] = v128[2];
      v127[3] = v135;
      uint64_t v136 = v128[5];
      v127[4] = v128[4];
      v127[5] = v136;
      *((_WORD *)v127 + 24) = *((_WORD *)v128 + 24);
      *((_BYTE *)v127 + 72) = *((_BYTE *)v128 + 72);
      uint64_t v137 = v128[8];
      v127[7] = v128[7];
      v127[8] = v137;
      uint64_t v138 = v129[10];
      unint64_t v232 = (char *)v127 + v138;
      uint64_t v139 = (char *)v128 + v138;
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRetain(v135);
      __n128 v140 = swift_bridgeObjectRetain(v136);
      if (((unsigned int (*)(char *, uint64_t, void *, __n128))v120)(v139, 1LL, __dstb, v140))
      {
        uint64_t v141 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v232, v139, *(void *)(*(void *)(v141 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, void *))(v240 + 16))(v232, v139, __dstb);
        (*(void (**)(char *, void, uint64_t, void *))(v240 + 56))(v232, 0LL, 1LL, __dstb);
      }

      uint64_t v142 = v129[11];
      uint64_t v143 = (char *)v127 + v142;
      __n128 v144 = (char *)v128 + v142;
      if (v120())
      {
        uint64_t v145 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v143, v144, *(void *)(*(void *)(v145 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, void *))(v240 + 16))(v143, v144, __dstb);
        (*(void (**)(char *, void, uint64_t, void *))(v240 + 56))(v143, 0LL, 1LL, __dstb);
      }

      uint64_t v146 = v129[12];
      uint64_t v147 = (char *)v127 + v146;
      uint64_t v148 = (char *)v128 + v146;
      *(void *)uint64_t v147 = *(void *)v148;
      v147[8] = v148[8];
      uint64_t v149 = v129[13];
      uint64_t v150 = (void *)((char *)v127 + v149);
      uint64_t v151 = (void *)((char *)v128 + v149);
      uint64_t v152 = v151[1];
      *uint64_t v150 = *v151;
      v150[1] = v152;
      uint64_t v153 = v129[14];
      uint64_t v154 = *(void *)((char *)v128 + v153);
      *(void *)((char *)v127 + v153) = v154;
      uint64_t v155 = v129[15];
      uint64_t v156 = (void *)((char *)v127 + v155);
      uint64_t v157 = (void *)((char *)v128 + v155);
      uint64_t v158 = v157[1];
      *uint64_t v156 = *v157;
      v156[1] = v158;
      uint64_t v159 = v129[16];
      uint64_t v160 = *(void *)((char *)v128 + v159);
      *(void *)((char *)v127 + v159) = v160;
      uint64_t v161 = v129[17];
      uint64_t v162 = (char *)v127 + v161;
      uint64_t v163 = (char *)v128 + v161;
      *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
      v162[16] = v163[16];
      uint64_t v164 = v129[18];
      uint64_t v165 = (char *)v127 + v164;
      uint64_t v166 = (char *)v128 + v164;
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v166;
      v165[16] = v166[16];
      __int128 v167 = *(void (**)(void *, void, uint64_t, int *, __n128))(v234 + 56);
      swift_bridgeObjectRetain(v152);
      swift_bridgeObjectRetain(v154);
      swift_bridgeObjectRetain(v158);
      __n128 v168 = swift_bridgeObjectRetain(v160);
      v167(v127, 0LL, 1LL, v129, v168);
    }

    *(_DWORD *)&v77[v79[21]] = *(_DWORD *)&v78[v79[21]];
    uint64_t v169 = v79[22];
    uint64_t v170 = *(void *)&v78[v169];
    *(void *)&v77[v169] = v170;
    uint64_t v171 = v79[23];
    __n128 v172 = &v77[v171];
    uint64_t v173 = &v78[v171];
    unint64_t v174 = *(void *)&v78[v171 + 8];
    swift_bridgeObjectRetain(v170);
    if (v174 >> 60 == 15)
    {
      *(_OWORD *)__n128 v172 = *v173;
    }

    else
    {
      uint64_t v175 = *(void *)v173;
      sub_10001736C(v175, v174);
      *(void *)__n128 v172 = v175;
      *((void *)v172 + 1) = v174;
    }

    uint64_t v176 = v79[24];
    unint64_t v177 = &v77[v176];
    unint64_t v178 = &v78[v176];
    unint64_t v179 = *((void *)v178 + 1);
    if (v179 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v177 = *(_OWORD *)v178;
    }

    else
    {
      uint64_t v180 = *(void *)v178;
      sub_10001736C(*(void *)v178, *((void *)v178 + 1));
      *(void *)unint64_t v177 = v180;
      *((void *)v177 + 1) = v179;
    }

    uint64_t v181 = *(void (**)(_BYTE *, _BYTE *, void *))(v240 + 16);
    v181(&v77[v79[25]], &v78[v79[25]], __dstb);
    v181(&v77[v79[26]], &v78[v79[26]], __dstb);
    v181(&v77[v79[27]], &v78[v79[27]], __dstb);
    v181(&v77[v79[28]], &v78[v79[28]], __dstb);
    v181(&v77[v79[29]], &v78[v79[29]], __dstb);
    v181(&v77[v79[30]], &v78[v79[30]], __dstb);
    uint64_t v182 = v79[31];
    unint64_t v183 = &v77[v182];
    uint64_t v184 = &v78[v182];
    uint64_t v185 = v184[1];
    *unint64_t v183 = *v184;
    v183[1] = v185;
    uint64_t v186 = v79[32];
    uint64_t v187 = *(void *)&v78[v186];
    *(void *)&v77[v186] = v187;
    uint64_t v188 = v79[33];
    uint64_t v189 = &v77[v188];
    uint64_t v190 = &v78[v188];
    uint64_t v191 = v190[1];
    *uint64_t v189 = *v190;
    v189[1] = v191;
    uint64_t v192 = v79[34];
    uint64_t v193 = *(void *)&v78[v192];
    *(void *)&v77[v192] = v193;
    uint64_t v194 = v79[35];
    uint64_t v195 = &v77[v194];
    uint64_t v196 = &v78[v194];
    *(_OWORD *)uint64_t v195 = *(_OWORD *)v196;
    v195[16] = v196[16];
    uint64_t v197 = v79[36];
    uint64_t v198 = &v77[v197];
    uint64_t v199 = &v78[v197];
    *(_OWORD *)uint64_t v198 = *(_OWORD *)v199;
    v198[16] = v199[16];
    uint64_t v200 = v79[37];
    uint64_t v201 = &v77[v200];
    uint64_t v202 = &v78[v200];
    swift_bridgeObjectRetain(v185);
    swift_bridgeObjectRetain(v187);
    swift_bridgeObjectRetain(v191);
    __n128 v203 = swift_bridgeObjectRetain(v193);
    ((void (*)(_BYTE *, char *, void *, __n128))v181)(v201, v202, __dstb, v203);
    v181(&v77[v79[38]], &v78[v79[38]], __dstb);
    v181(&v77[v79[39]], &v78[v79[39]], __dstb);
    v181(&v77[v79[40]], &v78[v79[40]], __dstb);
    v181(&v77[v79[41]], &v78[v79[41]], __dstb);
    v181(&v77[v79[42]], &v78[v79[42]], __dstb);
    v77[v79[43]] = v78[v79[43]];
    v77[v79[44]] = v78[v79[44]];
    v77[v79[45]] = v78[v79[45]];
    uint64_t v204 = v79[46];
    unint64_t v205 = &v77[v204];
    uint64_t v206 = &v78[v204];
    uint64_t v207 = v206[1];
    void *v205 = *v206;
    v205[1] = v207;
    uint64_t v208 = v79[47];
    BOOL v209 = &v77[v208];
    uint64_t v210 = &v78[v208];
    uint64_t v211 = v210[1];
    *BOOL v209 = *v210;
    v209[1] = v211;
    uint64_t v212 = *(void (**)(_BYTE *, void, uint64_t, int *, __n128))(v236 + 56);
    swift_bridgeObjectRetain(v207);
    __n128 v213 = swift_bridgeObjectRetain(v211);
    v212(v77, 0LL, 1LL, v79, v213);
    uint64_t v83 = v245;
    uint64_t v82 = v246;
    uint64_t v84 = v243;
    uint64_t v85 = v244;
    uint64_t v87 = v248;
    uint64_t v86 = v249;
    uint64_t v88 = v242;
    uint64_t v8 = v235;
  }

  v86[v87[16]] = v8[v87[16]];
  uint64_t v214 = v87[17];
  uint64_t v215 = *(void *)&v8[v214];
  *(void *)&v86[v214] = v215;
  uint64_t v216 = v87[18];
  __n128 v217 = &v86[v216];
  uint64_t v218 = &v8[v216];
  __n128 v219 = swift_bridgeObjectRetain(v215);
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v247)(v218, 1LL, v84, v219))
  {
    uint64_t v220 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v217, v218, *(void *)(*(void *)(v220 - 8) + 64LL));
  }

  else
  {
    v241(v217, v218, v84);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v88 + 56))(v217, 0LL, 1LL, v84);
  }

  uint64_t v221 = v87[19];
  uint64_t v222 = &v86[v221];
  __n128 v223 = &v8[v221];
  if (v247(&v8[v221], 1LL, v84))
  {
    uint64_t v224 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v222, v223, *(void *)(*(void *)(v224 - 8) + 64LL));
  }

  else
  {
    v241(v222, v223, v84);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v88 + 56))(v222, 0LL, 1LL, v84);
  }

  uint64_t v225 = v87[20];
  uint64_t v226 = &v86[v225];
  uint64_t v227 = &v8[v225];
  unint64_t v228 = *((void *)v227 + 1);
  if (((v228 >> 60) | 4) == 0xF)
  {
    *(_OWORD *)uint64_t v226 = *(_OWORD *)v227;
  }

  else
  {
    uint64_t v229 = *(void *)v227;
    sub_10001736C(*(void *)v227, *((void *)v227 + 1));
    *(void *)uint64_t v226 = v229;
    *((void *)v226 + 1) = v228;
  }

  v86[v87[21]] = v8[v87[21]];
  *(_WORD *)&v86[v87[22]] = *(_WORD *)&v8[v87[22]];
  v82[*(int *)(v85 + 24)] = v83[*(int *)(v85 + 24)];
  return v82;
}

_BYTE *sub_1000A05F8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 24);
  v10(v6, v7, v8);
  uint64_t v497 = v7;
  uint64_t v498 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v11 = v498[5];
  uint64_t v12 = &v6[v11];
  uint64_t v13 = &v7[v11];
  uint64_t v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48);
  int v15 = v14(&v6[v11], 1LL, v8);
  int v16 = v14(v13, 1LL, v8);
  v493 = a2;
  v484 = v10;
  uint64_t v487 = v9;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v12, v13, v8);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v9 + 56))(v12, 0LL, 1LL, v8);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
LABEL_6:
    uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  v10(v12, v13, v8);
LABEL_7:
  v6[v498[6]] = v497[v498[6]];
  uint64_t v18 = v498[7];
  uint64_t v19 = &v6[v18];
  uint64_t v20 = &v497[v18];
  uint64_t v21 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v21 - 8) + 24LL))(v19, v20, v21);
  uint64_t v22 = v498[8];
  uint64_t v23 = *(void *)&v497[v22];
  *(void *)&v6[v22] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  v6[v498[9]] = v497[v498[9]];
  uint64_t v24 = v498[10];
  uint64_t v25 = &v6[v24];
  uint64_t v26 = &v497[v24];
  uint64_t v27 = type metadata accessor for Date(0LL);
  __n128 v28 = v6;
  uint64_t v29 = *(void *)(v27 - 8);
  uint64_t v490 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 24);
  v490(v25, v26, v27);
  uint64_t v30 = v498[11];
  unint64_t v31 = &v28[v30];
  uint64_t v32 = &v497[v30];
  uint64_t v495 = v29;
  uint64_t v33 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48);
  int v34 = v33(&v28[v30], 1LL, v27);
  uint64_t v496 = v27;
  v492 = v33;
  int v35 = v33(v32, 1LL, v27);
  uint64_t v494 = a1;
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v495 + 16))(v31, v32, v27);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v495 + 56))(v31, 0LL, 1LL, v27);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v35)
  {
    (*(void (**)(_BYTE *, uint64_t))(v495 + 8))(v31, v27);
LABEL_12:
    uint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_13;
  }

  v490(v31, v32, v27);
LABEL_13:
  uint64_t v37 = v28;
  uint64_t v38 = v498[12];
  unint64_t v39 = &v28[v38];
  uint64_t v40 = &v497[v38];
  *unint64_t v39 = *v40;
  *((void *)v39 + 1) = *((void *)v40 + 1);
  uint64_t v41 = *((void *)v40 + 2);
  *((void *)v39 + 2) = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease();
  v28[v498[13]] = v497[v498[13]];
  uint64_t v42 = v498[14];
  __n128 v43 = &v28[v42];
  uint64_t v44 = &v497[v42];
  uint64_t v45 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v46 = *((void *)v45 - 1);
  uint64_t v47 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v46 + 48);
  int v48 = v47(v43, 1LL, v45);
  int v49 = v47(v44, 1LL, v45);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v487 + 16))(v43, v44, v8);
      uint64_t v50 = v45[5];
      uint64_t v51 = (uint64_t *)&v43[v50];
      uint64_t v52 = (uint64_t *)&v44[v50];
      uint64_t v53 = *v52;
      unint64_t v54 = v52[1];
      sub_10001736C(*v52, v54);
      *uint64_t v51 = v53;
      v51[1] = v54;
      uint64_t v55 = v45[6];
      uint64_t v56 = &v43[v55];
      uint64_t v57 = &v44[v55];
      *uint64_t v56 = *v57;
      uint64_t v58 = v57[1];
      v56[1] = v58;
      uint64_t v59 = v45[7];
      char v60 = &v43[v59];
      uint64_t v61 = &v44[v59];
      void *v60 = *v61;
      uint64_t v62 = v61[1];
      v60[1] = v62;
      *(_DWORD *)&v43[v45[8]] = *(_DWORD *)&v44[v45[8]];
      uint64_t v63 = v45[9];
      uint64_t v64 = &v43[v63];
      uint64_t v65 = &v44[v63];
      int v66 = *(_DWORD *)v65;
      v64[4] = v65[4];
      *(_DWORD *)uint64_t v64 = v66;
      uint64_t v67 = v45[10];
      unint64_t v68 = &v43[v67];
      uint64_t v69 = &v44[v67];
      __int128 v70 = *(_OWORD *)v69;
      v68[16] = v69[16];
      *(_OWORD *)unint64_t v68 = v70;
      uint64_t v71 = v45[11];
      uint64_t v72 = &v43[v71];
      uint64_t v73 = &v44[v71];
      uint64_t v74 = *(void *)v73;
      v72[8] = v73[8];
      *(void *)uint64_t v72 = v74;
      uint64_t v75 = v45[12];
      uint64_t v76 = &v43[v75];
      uint64_t v77 = &v44[v75];
      LODWORD(v74) = *(_DWORD *)v77;
      v76[4] = v77[4];
      *(_DWORD *)uint64_t v76 = v74;
      v43[v45[13]] = v44[v45[13]];
      v43[v45[14]] = v44[v45[14]];
      uint64_t v78 = v45[15];
      uint64_t v79 = &v43[v78];
      uint64_t v80 = &v44[v78];
      void *v79 = *v80;
      uint64_t v81 = v80[1];
      v79[1] = v81;
      uint64_t v82 = *(void (**)(_BYTE *, void, uint64_t, int *, __n128))(v46 + 56);
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v62);
      __n128 v83 = swift_bridgeObjectRetain(v81);
      v82(v43, 0LL, 1LL, v45, v83);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v49)
  {
    sub_100018C68((uint64_t)v43, type metadata accessor for AccessoryMetadata);
LABEL_18:
    uint64_t v84 = sub_100004AEC(&qword_1009B9250);
    memcpy(v43, v44, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_19;
  }

  v484(v43, v44, v8);
  uint64_t v132 = v45[5];
  uint64_t v133 = (uint64_t *)&v43[v132];
  uint64_t v134 = (uint64_t *)&v44[v132];
  uint64_t v135 = *v134;
  unint64_t v136 = v134[1];
  sub_10001736C(*v134, v136);
  uint64_t v137 = *v133;
  unint64_t v138 = v133[1];
  *uint64_t v133 = v135;
  v133[1] = v136;
  sub_100016F9C(v137, v138);
  uint64_t v139 = v45[6];
  __n128 v140 = &v43[v139];
  uint64_t v141 = &v44[v139];
  *__n128 v140 = *v141;
  uint64_t v142 = v141[1];
  v140[1] = v142;
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRelease();
  uint64_t v143 = v45[7];
  __n128 v144 = &v43[v143];
  uint64_t v145 = &v44[v143];
  *__n128 v144 = *v145;
  uint64_t v146 = v145[1];
  v144[1] = v146;
  swift_bridgeObjectRetain(v146);
  swift_bridgeObjectRelease();
  uint64_t v147 = v45[8];
  uint64_t v148 = &v43[v147];
  uint64_t v149 = &v44[v147];
  *(_WORD *)uint64_t v148 = *(_WORD *)v149;
  v148[2] = v149[2];
  v148[3] = v149[3];
  uint64_t v150 = v45[9];
  uint64_t v151 = &v43[v150];
  uint64_t v152 = &v44[v150];
  int v153 = *(_DWORD *)v152;
  v151[4] = v152[4];
  *(_DWORD *)uint64_t v151 = v153;
  uint64_t v154 = v45[10];
  uint64_t v155 = &v43[v154];
  uint64_t v156 = &v44[v154];
  __int128 v157 = *(_OWORD *)v156;
  v155[16] = v156[16];
  *(_OWORD *)uint64_t v155 = v157;
  uint64_t v158 = v45[11];
  uint64_t v159 = &v43[v158];
  uint64_t v160 = &v44[v158];
  uint64_t v161 = *(void *)v160;
  v159[8] = v160[8];
  *(void *)uint64_t v159 = v161;
  uint64_t v162 = v45[12];
  uint64_t v163 = &v43[v162];
  uint64_t v164 = &v44[v162];
  LODWORD(v161) = *(_DWORD *)v164;
  v163[4] = v164[4];
  *(_DWORD *)uint64_t v163 = v161;
  v43[v45[13]] = v44[v45[13]];
  v43[v45[14]] = v44[v45[14]];
  uint64_t v165 = v45[15];
  uint64_t v166 = &v43[v165];
  __int128 v167 = &v44[v165];
  *uint64_t v166 = *v167;
  uint64_t v168 = v167[1];
  v166[1] = v168;
  swift_bridgeObjectRetain(v168);
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v85 = v498[15];
  uint64_t v86 = &v28[v85];
  uint64_t v87 = &v497[v85];
  uint64_t v88 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v89 = *((void *)v88 - 1);
  uint64_t v90 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v89 + 48);
  int v91 = v90(v86, 1LL, v88);
  int v92 = v90(v87, 1LL, v88);
  if (!v91)
  {
    if (v92)
    {
      sub_100018C68((uint64_t)v86, type metadata accessor for AccessoryProductInfo);
      goto LABEL_25;
    }

    uint64_t v169 = *(void *)v87;
    v86[8] = v87[8];
    *(void *)uint64_t v86 = v169;
    uint64_t v170 = v88[5];
    uint64_t v171 = &v86[v170];
    __n128 v172 = &v87[v170];
    uint64_t v173 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v173 - 8) + 24LL))(v171, v172, v173);
    v86[v88[6]] = v87[v88[6]];
    v86[v88[7]] = v87[v88[7]];
    uint64_t v174 = v88[8];
    uint64_t v175 = &v86[v174];
    uint64_t v176 = &v87[v174];
    void *v175 = *v176;
    uint64_t v177 = v176[1];
    v175[1] = v177;
    swift_bridgeObjectRetain(v177);
    swift_bridgeObjectRelease();
    v86[v88[9]] = v87[v88[9]];
    v86[v88[10]] = v87[v88[10]];
    v86[v88[11]] = v87[v88[11]];
    uint64_t v178 = v88[12];
    unint64_t v179 = &v86[v178];
    uint64_t v180 = &v87[v178];
    *unint64_t v179 = *v180;
    uint64_t v181 = v180[1];
    v179[1] = v181;
    swift_bridgeObjectRetain(v181);
    swift_bridgeObjectRelease();
    uint64_t v182 = v88[13];
    unint64_t v183 = &v86[v182];
    uint64_t v184 = &v87[v182];
    *unint64_t v183 = *v184;
    uint64_t v185 = v184[1];
    v183[1] = v185;
    swift_bridgeObjectRetain(v185);
    swift_bridgeObjectRelease();
    uint64_t v186 = v88[14];
    uint64_t v187 = &v86[v186];
    uint64_t v188 = &v87[v186];
    uint64_t v189 = *(void *)v188;
    v187[8] = v188[8];
    *(void *)uint64_t v187 = v189;
    uint64_t v190 = v88[15];
    uint64_t v191 = &v86[v190];
    uint64_t v192 = &v87[v190];
    *uint64_t v191 = *v192;
    uint64_t v193 = v192[1];
    v191[1] = v193;
    swift_bridgeObjectRetain(v193);
    swift_bridgeObjectRelease();
    uint64_t v194 = v88[16];
    uint64_t v195 = &v86[v194];
    uint64_t v196 = &v87[v194];
    uint64_t v197 = type metadata accessor for URL(0LL);
    uint64_t v198 = *(void *)(v197 - 8);
    uint64_t v199 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v198 + 48);
    int v200 = v199(v195, 1LL, v197);
    int v201 = v199(v196, 1LL, v197);
    if (v200)
    {
      if (!v201)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v198 + 16))(v195, v196, v197);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v198 + 56))(v195, 0LL, 1LL, v197);
        goto LABEL_44;
      }
    }

    else
    {
      if (!v201)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v198 + 24))(v195, v196, v197);
LABEL_44:
        uint64_t v228 = v88[17];
        uint64_t v229 = &v86[v228];
        uint64_t v230 = &v87[v228];
        int v231 = v199(&v86[v228], 1LL, v197);
        int v232 = v199(v230, 1LL, v197);
        uint64_t v489 = v198;
        uint64_t v482 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v199;
        if (v231)
        {
          if (!v232)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v198 + 16))(v229, v230, v197);
            (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v198 + 56))(v229, 0LL, 1LL, v197);
            goto LABEL_50;
          }
        }

        else
        {
          if (!v232)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v198 + 24))(v229, v230, v197);
LABEL_50:
            uint64_t v234 = v88[18];
            unint64_t v235 = &v86[v234];
            uint64_t v236 = &v87[v234];
            *unint64_t v235 = *v236;
            uint64_t v237 = v236[1];
            v235[1] = v237;
            swift_bridgeObjectRetain(v237);
            swift_bridgeObjectRelease();
            *(void *)&v86[v88[19]] = *(void *)&v87[v88[19]];
            uint64_t v238 = v88[20];
            uint64_t v239 = (uint64_t)&v86[v238];
            uint64_t v240 = &v87[v238];
            uint64_t v241 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
            __srca = (void *)*((void *)v241 - 1);
            uint64_t v242 = (uint64_t (*)(uint64_t, uint64_t, int *))__srca[6];
            int v243 = v242(v239, 1LL, v241);
            v486 = v241;
            int v244 = v242((uint64_t)v240, 1LL, v241);
            if (v243)
            {
              if (!v244)
              {
                *(void *)uint64_t v239 = *(void *)v240;
                uint64_t v245 = *((void *)v240 + 1);
                *(void *)(v239 + 8) = v245;
                *(void *)(v239 + swift_weakDestroy(v0 + 16) = *((void *)v240 + 2);
                uint64_t v246 = *((void *)v240 + 3);
                *(void *)(v239 + 24) = v246;
                *(void *)(v239 + 32) = *((void *)v240 + 4);
                uint64_t v247 = *((void *)v240 + 5);
                *(void *)(v239 + 40) = v247;
                *(_WORD *)(v239 + 48) = *((_WORD *)v240 + 24);
                *(void *)(v239 + 56) = *((void *)v240 + 7);
                uint64_t v248 = *((void *)v240 + 8);
                *(_BYTE *)(v239 + 72) = v240[72];
                *(void *)(v239 + 64) = v248;
                uint64_t v249 = v241[10];
                int v475 = (void *)(v239 + v249);
                unint64_t v250 = &v240[v249];
                swift_bridgeObjectRetain(v245);
                swift_bridgeObjectRetain(v246);
                __n128 v251 = swift_bridgeObjectRetain(v247);
                if (v482(v250, 1LL, v197, v251))
                {
                  uint64_t v252 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
                  memcpy(v475, v250, *(void *)(*(void *)(v252 - 8) + 64LL));
                }

                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 16))(v475, v250, v197);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v489 + 56))(v475, 0LL, 1LL, v197);
                }

                uint64_t v365 = v486[11];
                uint64_t v366 = (void *)(v239 + v365);
                v367 = &v240[v365];
                if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v482)(&v240[v365], 1LL, v197))
                {
                  uint64_t v368 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
                  memcpy(v366, v367, *(void *)(*(void *)(v368 - 8) + 64LL));
                }

                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 16))(v366, v367, v197);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v489 + 56))(v366, 0LL, 1LL, v197);
                }

                uint64_t v369 = v486[12];
                uint64_t v370 = v239 + v369;
                v371 = &v240[v369];
                uint64_t v372 = *(void *)v371;
                *(_BYTE *)(v370 + 8) = v371[8];
                *(void *)uint64_t v370 = v372;
                uint64_t v373 = v486[13];
                v374 = (void *)(v239 + v373);
                int v375 = &v240[v373];
                void *v374 = *v375;
                uint64_t v376 = v375[1];
                v374[1] = v376;
                uint64_t v377 = v486[14];
                uint64_t v378 = *(void *)&v240[v377];
                *(void *)(v239 + v377) = v378;
                uint64_t v379 = v486[15];
                BOOL v380 = (void *)(v239 + v379);
                v381 = &v240[v379];
                *BOOL v380 = *v381;
                uint64_t v382 = v381[1];
                v380[1] = v382;
                uint64_t v383 = v486[16];
                uint64_t v483 = *(void *)&v240[v383];
                *(void *)(v239 + v383) = v483;
                uint64_t v384 = v486[17];
                uint64_t v385 = v239 + v384;
                v386 = &v240[v384];
                __int128 v387 = *(_OWORD *)v386;
                *(_BYTE *)(v385 + swift_weakDestroy(v0 + 16) = v386[16];
                *(_OWORD *)uint64_t v385 = v387;
                uint64_t v388 = v486[18];
                uint64_t v389 = v239 + v388;
                v390 = &v240[v388];
                __int128 v391 = *(_OWORD *)v390;
                *(_BYTE *)(v389 + swift_weakDestroy(v0 + 16) = v390[16];
                *(_OWORD *)uint64_t v389 = v391;
                v392 = (void (*)(uint64_t, void, uint64_t, int *, __n128))__srca[7];
                swift_bridgeObjectRetain(v376);
                swift_bridgeObjectRetain(v378);
                swift_bridgeObjectRetain(v382);
                __n128 v393 = swift_bridgeObjectRetain(v483);
                v392(v239, 0LL, 1LL, v486, v393);
LABEL_115:
                *(_DWORD *)&v86[v88[21]] = *(_DWORD *)&v87[v88[21]];
                uint64_t v424 = v88[22];
                uint64_t v425 = *(void *)&v87[v424];
                *(void *)&v86[v424] = v425;
                swift_bridgeObjectRetain(v425);
                swift_bridgeObjectRelease();
                uint64_t v426 = v88[23];
                unint64_t v427 = (uint64_t *)&v86[v426];
                v428 = (uint64_t *)&v87[v426];
                unint64_t v429 = *(void *)&v87[v426 + 8];
                if (*(void *)&v86[v426 + 8] >> 60 == 15LL)
                {
                  if (v429 >> 60 != 15)
                  {
                    uint64_t v430 = *v428;
                    sub_10001736C(*v428, v429);
                    *unint64_t v427 = v430;
                    v427[1] = v429;
                    goto LABEL_122;
                  }
                }

                else
                {
                  if (v429 >> 60 != 15)
                  {
                    uint64_t v431 = *v428;
                    sub_10001736C(*v428, v429);
                    uint64_t v432 = *v427;
                    unint64_t v433 = v427[1];
                    *unint64_t v427 = v431;
                    v427[1] = v429;
                    sub_100016F9C(v432, v433);
LABEL_122:
                    uint64_t v434 = v88[24];
                    v435 = (uint64_t *)&v86[v434];
                    v436 = (uint64_t *)&v87[v434];
                    unint64_t v437 = *(void *)&v87[v434 + 8];
                    if (*(void *)&v86[v434 + 8] >> 60 == 15LL)
                    {
                      if (v437 >> 60 != 15)
                      {
                        uint64_t v438 = *v436;
                        sub_10001736C(*v436, v437);
                        uint64_t *v435 = v438;
                        v435[1] = v437;
LABEL_129:
                        v442 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v489 + 24);
                        v442(&v86[v88[25]], &v87[v88[25]], v197);
                        v442(&v86[v88[26]], &v87[v88[26]], v197);
                        v442(&v86[v88[27]], &v87[v88[27]], v197);
                        v442(&v86[v88[28]], &v87[v88[28]], v197);
                        v442(&v86[v88[29]], &v87[v88[29]], v197);
                        v442(&v86[v88[30]], &v87[v88[30]], v197);
                        uint64_t v443 = v88[31];
                        v444 = &v86[v443];
                        unint64_t v445 = &v87[v443];
                        void *v444 = *v445;
                        uint64_t v446 = v445[1];
                        v444[1] = v446;
                        swift_bridgeObjectRetain(v446);
                        swift_bridgeObjectRelease();
                        uint64_t v447 = v88[32];
                        uint64_t v448 = *(void *)&v87[v447];
                        *(void *)&v86[v447] = v448;
                        swift_bridgeObjectRetain(v448);
                        swift_bridgeObjectRelease();
                        uint64_t v449 = v88[33];
                        uint64_t v450 = &v86[v449];
                        uint64_t v451 = &v87[v449];
                        *uint64_t v450 = *v451;
                        uint64_t v452 = v451[1];
                        v450[1] = v452;
                        swift_bridgeObjectRetain(v452);
                        swift_bridgeObjectRelease();
                        uint64_t v453 = v88[34];
                        uint64_t v454 = *(void *)&v87[v453];
                        *(void *)&v86[v453] = v454;
                        swift_bridgeObjectRetain(v454);
                        swift_bridgeObjectRelease();
                        uint64_t v455 = v88[35];
                        uint64_t v456 = &v86[v455];
                        uint64_t v457 = &v87[v455];
                        __int128 v458 = *(_OWORD *)v457;
                        v456[16] = v457[16];
                        *(_OWORD *)uint64_t v456 = v458;
                        uint64_t v459 = v88[36];
                        uint64_t v460 = &v86[v459];
                        v461 = &v87[v459];
                        __int128 v462 = *(_OWORD *)v461;
                        v460[16] = v461[16];
                        *(_OWORD *)uint64_t v460 = v462;
                        v442(&v86[v88[37]], &v87[v88[37]], v197);
                        v442(&v86[v88[38]], &v87[v88[38]], v197);
                        v442(&v86[v88[39]], &v87[v88[39]], v197);
                        v442(&v86[v88[40]], &v87[v88[40]], v197);
                        v442(&v86[v88[41]], &v87[v88[41]], v197);
                        v442(&v86[v88[42]], &v87[v88[42]], v197);
                        v86[v88[43]] = v87[v88[43]];
                        v86[v88[44]] = v87[v88[44]];
                        v86[v88[45]] = v87[v88[45]];
                        uint64_t v463 = v88[46];
                        uint64_t v464 = &v86[v463];
                        uint64_t v465 = &v87[v463];
                        *uint64_t v464 = *v465;
                        uint64_t v466 = v465[1];
                        v464[1] = v466;
                        swift_bridgeObjectRetain(v466);
                        swift_bridgeObjectRelease();
                        uint64_t v467 = v88[47];
                        uint64_t v468 = &v86[v467];
                        uint64_t v469 = &v87[v467];
                        *uint64_t v468 = *v469;
                        uint64_t v470 = v469[1];
                        v468[1] = v470;
                        swift_bridgeObjectRetain(v470);
                        swift_bridgeObjectRelease();
                        goto LABEL_26;
                      }
                    }

                    else
                    {
                      if (v437 >> 60 != 15)
                      {
                        uint64_t v439 = *v436;
                        sub_10001736C(*v436, v437);
                        uint64_t v440 = *v435;
                        unint64_t v441 = v435[1];
                        uint64_t *v435 = v439;
                        v435[1] = v437;
                        sub_100016F9C(v440, v441);
                        goto LABEL_129;
                      }

                      sub_100041D4C((uint64_t)v435);
                    }

                    *(_OWORD *)v435 = *(_OWORD *)v436;
                    goto LABEL_129;
                  }

                  sub_100041D4C((uint64_t)v427);
                }

                *(_OWORD *)unint64_t v427 = *(_OWORD *)v428;
                goto LABEL_122;
              }

LABEL_56:
              uint64_t v253 = sub_100004AEC(&qword_1009A6DD0);
              memcpy((void *)v239, v240, *(void *)(*(void *)(v253 - 8) + 64LL));
              goto LABEL_115;
            }

            if (v244)
            {
              sub_100018C68(v239, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_56;
            }

            *(void *)uint64_t v239 = *(void *)v240;
            uint64_t v355 = *((void *)v240 + 1);
            *(void *)(v239 + 8) = v355;
            swift_bridgeObjectRetain(v355);
            swift_bridgeObjectRelease();
            *(void *)(v239 + swift_weakDestroy(v0 + 16) = *((void *)v240 + 2);
            uint64_t v356 = *((void *)v240 + 3);
            *(void *)(v239 + 24) = v356;
            swift_bridgeObjectRetain(v356);
            swift_bridgeObjectRelease();
            *(void *)(v239 + 32) = *((void *)v240 + 4);
            uint64_t v357 = *((void *)v240 + 5);
            *(void *)(v239 + 40) = v357;
            swift_bridgeObjectRetain(v357);
            swift_bridgeObjectRelease();
            *(_WORD *)(v239 + 48) = *((_WORD *)v240 + 24);
            *(void *)(v239 + 56) = *((void *)v240 + 7);
            uint64_t v358 = *((void *)v240 + 8);
            *(_BYTE *)(v239 + 72) = v240[72];
            *(void *)(v239 + 64) = v358;
            uint64_t v359 = v241[10];
            unint64_t v360 = &v240[v359];
            v476 = (void *)(v239 + v359);
            int v361 = ((uint64_t (*)(void))v482)();
            int v362 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v482)(v360, 1LL, v197);
            if (v361)
            {
              if (v362)
              {
                size_t v363 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
                uint64_t v364 = v476;
LABEL_103:
                memcpy(v364, v360, v363);
                goto LABEL_106;
              }

              (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 16))(v476, v360, v197);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v489 + 56))(v476, 0LL, 1LL, v197);
            }

            else
            {
              if (v362)
              {
                (*(void (**)(void *, uint64_t))(v489 + 8))(v476, v197);
                size_t v363 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
                uint64_t v364 = v476;
                goto LABEL_103;
              }

              (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 24))(v476, v360, v197);
            }

              int v243 = sub_100004AEC(&qword_1009A6DD0);
              memcpy((void *)v229, v230, *(void *)(*(void *)(v243 - 8) + 64LL));
              goto LABEL_115;
            }

            if (v234)
            {
              sub_100018C68(v229, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_56;
            }

            *(void *)uint64_t v229 = *(void *)v230;
            uint64_t v345 = *((void *)v230 + 1);
            *(void *)(v229 + 8) = v345;
            swift_bridgeObjectRetain(v345);
            swift_bridgeObjectRelease();
            *(void *)(v229 + swift_weakDestroy(v0 + 16) = *((void *)v230 + 2);
            v346 = *((void *)v230 + 3);
            *(void *)(v229 + 24) = v346;
            swift_bridgeObjectRetain(v346);
            swift_bridgeObjectRelease();
            *(void *)(v229 + 32) = *((void *)v230 + 4);
            uint64_t v347 = *((void *)v230 + 5);
            *(void *)(v229 + 40) = v347;
            swift_bridgeObjectRetain(v347);
            swift_bridgeObjectRelease();
            *(_WORD *)(v229 + 48) = *((_WORD *)v230 + 24);
            *(void *)(v229 + 56) = *((void *)v230 + 7);
            unint64_t v348 = *((void *)v230 + 8);
            *(_BYTE *)(v229 + 72) = v230[72];
            *(void *)(v229 + 64) = v348;
            uint64_t v349 = v231[10];
            unint64_t v350 = &v230[v349];
            __dstc = (void *)(v229 + v349);
            v351 = ((uint64_t (*)(void))v471)();
            uint64_t v352 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v471)(v350, 1LL, v188);
            if (v351)
            {
              if (v352)
              {
                uint64_t v353 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
                unint64_t v354 = __dstc;
LABEL_103:
                memcpy(v354, v350, v353);
                goto LABEL_106;
              }

              (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 16))(__dstc, v350, v188);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v477 + 56))(__dstc, 0LL, 1LL, v188);
            }

            else
            {
              if (v352)
              {
                (*(void (**)(void *, uint64_t))(v477 + 8))(__dstc, v188);
                uint64_t v353 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
                unint64_t v354 = __dstc;
                goto LABEL_103;
              }

              (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 24))(__dstc, v350, v188);
            }

    if (v35 < v20) {
      goto LABEL_132;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    uint64_t v135 = v35;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = sub_1003CB1DC(0LL, *((void *)v19 + 2) + 1LL, 1, v19);
    }
    char v60 = *((void *)v19 + 2);
    uint64_t v59 = *((void *)v19 + 3);
    uint64_t v21 = v60 + 1;
    if (v60 >= v59 >> 1) {
      uint64_t v19 = sub_1003CB1DC((char *)(v59 > 1), v60 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v21;
    uint64_t v61 = v19 + 32;
    uint64_t v62 = &v19[16 * v60 + 32];
    uint64_t v63 = v135;
    *(void *)uint64_t v62 = v20;
    *((void *)v62 + 1) = v63;
    if (v60)
    {
      while (1)
      {
        uint64_t v64 = v21 - 1;
        if (v21 >= 4)
        {
          uint64_t v69 = &v61[16 * v21];
          __int128 v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          uint64_t v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_121;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          uint64_t v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          unint64_t v68 = v75;
          if (v75) {
            goto LABEL_122;
          }
          uint64_t v76 = v21 - 2;
          uint64_t v77 = &v61[16 * v21 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          uint64_t v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_124;
          }
          uint64_t v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_127;
          }
          if (v81 >= v72)
          {
            uint64_t v99 = &v61[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            uint64_t v75 = __OFSUB__(v100, v101);
            id v102 = v100 - v101;
            if (v75) {
              goto LABEL_131;
            }
            int v92 = v67 < v102;
            goto LABEL_93;
          }
        }

        else
        {
          if (v21 != 3)
          {
            uint64_t v93 = *((void *)v19 + 4);
            uint64_t v94 = *((void *)v19 + 5);
            uint64_t v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            uint64_t v87 = v75;
            goto LABEL_87;
          }

          int v66 = *((void *)v19 + 4);
          uint64_t v65 = *((void *)v19 + 5);
          uint64_t v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          unint64_t v68 = v75;
        }

        if ((v68 & 1) != 0) {
          goto LABEL_123;
        }
        uint64_t v76 = v21 - 2;
        uint64_t v82 = &v61[16 * v21 - 32];
        uint64_t v84 = *(void *)v82;
        __n128 v83 = *((void *)v82 + 1);
        uint64_t v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        uint64_t v87 = v85;
        if (v85) {
          goto LABEL_126;
        }
        uint64_t v88 = &v61[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        uint64_t v75 = __OFSUB__(v89, v90);
        int v91 = v89 - v90;
        if (v75) {
          goto LABEL_129;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_130;
        }
        if (v86 + v91 >= v67)
        {
          int v92 = v67 < v91;
LABEL_93:
          if (v92) {
            uint64_t v64 = v76;
          }
          goto LABEL_95;
        }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  __n128 v28 = v2[2];
  uint64_t v27 = v2[3];
  if (v28 >= v27 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v27 > 1), v28 + 1, 1, v2);
  }
  v2[2] = v28 + 1;
  uint64_t v29 = &v2[2 * v28];
  v29[4] = 0xD00000000000001BLL;
  v29[5] = 0x80000001008632E0LL;
  if ((a1 & 0x200) == 0)
  {
LABEL_30:
    if ((a1 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }

    if (v28 < v19) {
      goto LABEL_132;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    uint64_t v133 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v18 = sub_1003CB1DC(0LL, *((void *)v18 + 2) + 1LL, 1, v18);
    }
    uint64_t v59 = *((void *)v18 + 2);
    uint64_t v58 = *((void *)v18 + 3);
    uint64_t v20 = v59 + 1;
    if (v59 >= v58 >> 1) {
      uint64_t v18 = sub_1003CB1DC((char *)(v58 > 1), v59 + 1, 1, v18);
    }
    *((void *)v18 + 2) = v20;
    char v60 = v18 + 32;
    uint64_t v61 = &v18[16 * v59 + 32];
    uint64_t v62 = v133;
    *(void *)uint64_t v61 = v19;
    *((void *)v61 + 1) = v62;
    if (v59)
    {
      while (1)
      {
        uint64_t v63 = v20 - 1;
        if (v20 >= 4)
        {
          unint64_t v68 = &v60[16 * v20];
          uint64_t v69 = *((void *)v68 - 8);
          __int128 v70 = *((void *)v68 - 7);
          uint64_t v74 = __OFSUB__(v70, v69);
          uint64_t v71 = v70 - v69;
          if (v74) {
            goto LABEL_121;
          }
          uint64_t v73 = *((void *)v68 - 6);
          uint64_t v72 = *((void *)v68 - 5);
          uint64_t v74 = __OFSUB__(v72, v73);
          int v66 = v72 - v73;
          uint64_t v67 = v74;
          if (v74) {
            goto LABEL_122;
          }
          uint64_t v75 = v20 - 2;
          uint64_t v76 = &v60[16 * v20 - 32];
          uint64_t v78 = *(void *)v76;
          uint64_t v77 = *((void *)v76 + 1);
          uint64_t v74 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          if (v74) {
            goto LABEL_124;
          }
          uint64_t v74 = __OFADD__(v66, v79);
          uint64_t v80 = v66 + v79;
          if (v74) {
            goto LABEL_127;
          }
          if (v80 >= v71)
          {
            uint64_t v98 = &v60[16 * v63];
            uint64_t v100 = *(void *)v98;
            uint64_t v99 = *((void *)v98 + 1);
            uint64_t v74 = __OFSUB__(v99, v100);
            uint64_t v101 = v99 - v100;
            if (v74) {
              goto LABEL_131;
            }
            int v91 = v66 < v101;
            goto LABEL_93;
          }
        }

        else
        {
          if (v20 != 3)
          {
            int v92 = *((void *)v18 + 4);
            uint64_t v93 = *((void *)v18 + 5);
            uint64_t v74 = __OFSUB__(v93, v92);
            uint64_t v85 = v93 - v92;
            uint64_t v86 = v74;
            goto LABEL_87;
          }

          uint64_t v65 = *((void *)v18 + 4);
          uint64_t v64 = *((void *)v18 + 5);
          uint64_t v74 = __OFSUB__(v64, v65);
          int v66 = v64 - v65;
          uint64_t v67 = v74;
        }

        if ((v67 & 1) != 0) {
          goto LABEL_123;
        }
        uint64_t v75 = v20 - 2;
        uint64_t v81 = &v60[16 * v20 - 32];
        __n128 v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        uint64_t v84 = __OFSUB__(v82, v83);
        uint64_t v85 = v82 - v83;
        uint64_t v86 = v84;
        if (v84) {
          goto LABEL_126;
        }
        uint64_t v87 = &v60[16 * v63];
        uint64_t v89 = *(void *)v87;
        uint64_t v88 = *((void *)v87 + 1);
        uint64_t v74 = __OFSUB__(v88, v89);
        uint64_t v90 = v88 - v89;
        if (v74) {
          goto LABEL_129;
        }
        if (__OFADD__(v85, v90)) {
          goto LABEL_130;
        }
        if (v85 + v90 >= v66)
        {
          int v91 = v66 < v90;
LABEL_93:
          if (v91) {
            uint64_t v63 = v75;
          }
          goto LABEL_95;
        }

        if (v28 < v29) {
          goto LABEL_141;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v142) & 1) == 0) {
          uint64_t v142 = sub_1003CB1DC(0LL, *((void *)v142 + 2) + 1LL, 1, v142);
        }
        uint64_t v51 = *((void *)v142 + 2);
        uint64_t v50 = *((void *)v142 + 3);
        uint64_t v52 = v51 + 1;
        if (v51 >= v50 >> 1) {
          uint64_t v142 = sub_1003CB1DC((char *)(v50 > 1), v51 + 1, 1, v142);
        }
        uint64_t v53 = v142;
        *((void *)v142 + 2) = v52;
        uint64_t v146 = (uint64_t)(v53 + 32);
        unint64_t v54 = &v53[16 * v51 + 32];
        *(void *)unint64_t v54 = v29;
        *((void *)v54 + 1) = v28;
        if (v51)
        {
          uint64_t v55 = v146;
          uint64_t v137 = v28;
          while (1)
          {
            uint64_t v56 = v52 - 1;
            if (v52 >= 4)
            {
              uint64_t v61 = v55 + 16 * v52;
              uint64_t v62 = *(void *)(v61 - 64);
              uint64_t v63 = *(void *)(v61 - 56);
              uint64_t v67 = __OFSUB__(v63, v62);
              uint64_t v64 = v63 - v62;
              if (v67) {
                goto LABEL_126;
              }
              int v66 = *(void *)(v61 - 48);
              uint64_t v65 = *(void *)(v61 - 40);
              uint64_t v67 = __OFSUB__(v65, v66);
              uint64_t v59 = v65 - v66;
              char v60 = v67;
              if (v67) {
                goto LABEL_127;
              }
              unint64_t v68 = v52 - 2;
              uint64_t v69 = (uint64_t *)(v55 + 16 * (v52 - 2));
              uint64_t v71 = *v69;
              __int128 v70 = v69[1];
              uint64_t v67 = __OFSUB__(v70, v71);
              uint64_t v72 = v70 - v71;
              if (v67) {
                goto LABEL_129;
              }
              uint64_t v67 = __OFADD__(v59, v72);
              uint64_t v73 = v59 + v72;
              if (v67) {
                goto LABEL_132;
              }
              if (v73 >= v64)
              {
                int v91 = (uint64_t *)(v55 + 16 * v56);
                uint64_t v93 = *v91;
                int v92 = v91[1];
                uint64_t v67 = __OFSUB__(v92, v93);
                uint64_t v94 = v92 - v93;
                if (v67)
                {
                  __break(1u);
                  goto LABEL_137;
                }

                uint64_t v84 = v59 < v94;
                goto LABEL_94;
              }
            }

            else
            {
              if (v52 != 3)
              {
                uint64_t v85 = *((void *)v142 + 4);
                uint64_t v86 = *((void *)v142 + 5);
                uint64_t v67 = __OFSUB__(v86, v85);
                uint64_t v78 = v86 - v85;
                uint64_t v79 = v67;
                goto LABEL_88;
              }

              uint64_t v58 = *((void *)v142 + 4);
              uint64_t v57 = *((void *)v142 + 5);
              uint64_t v67 = __OFSUB__(v57, v58);
              uint64_t v59 = v57 - v58;
              char v60 = v67;
            }

            if ((v60 & 1) != 0) {
              goto LABEL_128;
            }
            unint64_t v68 = v52 - 2;
            uint64_t v74 = (uint64_t *)(v55 + 16 * (v52 - 2));
            uint64_t v76 = *v74;
            uint64_t v75 = v74[1];
            uint64_t v77 = __OFSUB__(v75, v76);
            uint64_t v78 = v75 - v76;
            uint64_t v79 = v77;
            if (v77) {
              goto LABEL_131;
            }
            uint64_t v80 = (uint64_t *)(v55 + 16 * v56);
            uint64_t v82 = *v80;
            uint64_t v81 = v80[1];
            uint64_t v67 = __OFSUB__(v81, v82);
            __n128 v83 = v81 - v82;
            if (v67) {
              goto LABEL_134;
            }
            if (__OFADD__(v78, v83)) {
              goto LABEL_135;
            }
            if (v78 + v83 >= v59)
            {
              uint64_t v84 = v59 < v83;
LABEL_94:
              if (v84) {
                uint64_t v56 = v68;
              }
              goto LABEL_96;
            }

LABEL_106:
            uint64_t v394 = v241[11];
            unint64_t v395 = &v240[v394];
            unint64_t v477 = (void *)(v239 + v394);
            int v396 = ((uint64_t (*)(void))v482)();
            int v397 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v482)(v395, 1LL, v197);
            if (v396)
            {
              if (!v397)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 16))(v477, v395, v197);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v489 + 56))(v477, 0LL, 1LL, v197);
                goto LABEL_114;
              }

              size_t v398 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
              uint64_t v399 = v477;
            }

            else
            {
              if (!v397)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 24))(v477, v395, v197);
                goto LABEL_114;
              }

              (*(void (**)(void *, uint64_t))(v489 + 8))(v477, v197);
              size_t v398 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
              uint64_t v399 = v477;
            }

            memcpy(v399, v395, v398);
LABEL_114:
            uint64_t v400 = v241[12];
            uint64_t v401 = v239 + v400;
            uint64_t v402 = &v240[v400];
            uint64_t v403 = *(void *)v402;
            *(_BYTE *)(v401 + 8) = v402[8];
            *(void *)uint64_t v401 = v403;
            uint64_t v404 = v241[13];
            v405 = (void *)(v239 + v404);
            uint64_t v406 = &v240[v404];
            void *v405 = *v406;
            uint64_t v407 = v406[1];
            v405[1] = v407;
            swift_bridgeObjectRetain(v407);
            swift_bridgeObjectRelease();
            uint64_t v408 = v241[14];
            uint64_t v409 = *(void *)&v240[v408];
            *(void *)(v239 + v408) = v409;
            swift_bridgeObjectRetain(v409);
            swift_bridgeObjectRelease();
            uint64_t v410 = v241[15];
            uint64_t v411 = (void *)(v239 + v410);
            uint64_t v412 = &v240[v410];
            *uint64_t v411 = *v412;
            uint64_t v413 = v412[1];
            v411[1] = v413;
            swift_bridgeObjectRetain(v413);
            swift_bridgeObjectRelease();
            uint64_t v414 = v241[16];
            uint64_t v415 = *(void *)&v240[v414];
            *(void *)(v239 + v414) = v415;
            swift_bridgeObjectRetain(v415);
            swift_bridgeObjectRelease();
            uint64_t v416 = v241[17];
            uint64_t v417 = v239 + v416;
            v418 = &v240[v416];
            __int128 v419 = *(_OWORD *)v418;
            *(_BYTE *)(v417 + swift_weakDestroy(v0 + 16) = v418[16];
            *(_OWORD *)uint64_t v417 = v419;
            uint64_t v420 = v241[18];
            uint64_t v421 = v239 + v420;
            uint64_t v422 = &v240[v420];
            __int128 v423 = *(_OWORD *)v422;
            *(_BYTE *)(v421 + swift_weakDestroy(v0 + 16) = v422[16];
            *(_OWORD *)uint64_t v421 = v423;
            goto LABEL_115;
          }

          (*(void (**)(_BYTE *, uint64_t))(v198 + 8))(v229, v197);
        }

        uint64_t v233 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v229, v230, *(void *)(*(void *)(v233 - 8) + 64LL));
        goto LABEL_50;
      }

      (*(void (**)(_BYTE *, uint64_t))(v198 + 8))(v195, v197);
    }

    uint64_t v227 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v195, v196, *(void *)(*(void *)(v227 - 8) + 64LL));
    goto LABEL_44;
  }

  if (v92)
  {
LABEL_25:
    uint64_t v125 = sub_100004AEC(&qword_10099CE68);
    memcpy(v86, v87, *(void *)(*(void *)(v125 - 8) + 64LL));
LABEL_26:
    uint64_t v127 = v493;
    uint64_t v126 = v494;
    uint64_t v128 = v497;
    uint64_t v129 = v498;
    uint64_t v130 = v496;
    uint64_t v131 = v492;
    goto LABEL_69;
  }

  uint64_t v481 = v28;
  uint64_t v93 = *(void *)v87;
  v86[8] = v87[8];
  *(void *)uint64_t v86 = v93;
  uint64_t v94 = v88[5];
  Class v95 = &v86[v94];
  uint64_t v96 = &v87[v94];
  uint64_t v97 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v97 - 8) + 16LL))(v95, v96, v97);
  v86[v88[6]] = v87[v88[6]];
  v86[v88[7]] = v87[v88[7]];
  uint64_t v98 = v88[8];
  uint64_t v99 = &v86[v98];
  uint64_t v100 = &v87[v98];
  *uint64_t v99 = *v100;
  __srcb = (void *)v100[1];
  v99[1] = __srcb;
  v86[v88[9]] = v87[v88[9]];
  v86[v88[10]] = v87[v88[10]];
  v86[v88[11]] = v87[v88[11]];
  uint64_t v101 = v88[12];
  id v102 = &v86[v101];
  uint64_t v103 = &v87[v101];
  *id v102 = *v103;
  uint64_t v104 = v103[1];
  v102[1] = v104;
  uint64_t v105 = v88[13];
  uint64_t v106 = &v86[v105];
  uint64_t v107 = &v87[v105];
  *uint64_t v106 = *v107;
  uint64_t v108 = v107[1];
  v106[1] = v108;
  uint64_t v109 = v88[14];
  uint64_t v110 = &v86[v109];
  uint64_t v111 = &v87[v109];
  char v112 = v111[8];
  *(void *)uint64_t v110 = *(void *)v111;
  v110[8] = v112;
  uint64_t v113 = v88[15];
  uint64_t v114 = &v86[v113];
  __n128 v115 = &v87[v113];
  *uint64_t v114 = *v115;
  uint64_t v116 = v115[1];
  v114[1] = v116;
  uint64_t v117 = v88[16];
  __dst = &v86[v117];
  v473 = &v87[v117];
  uint64_t v118 = type metadata accessor for URL(0LL);
  uint64_t v119 = *(void *)(v118 - 8);
  uint64_t v120 = *(unsigned int (**)(char *, uint64_t, void *, __n128))(v119 + 48);
  swift_bridgeObjectRetain(__srcb);
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRetain(v108);
  uint64_t v121 = v116;
  uint64_t v122 = v120;
  __n128 v123 = swift_bridgeObjectRetain(v121);
  if (v120(v473, 1LL, (void *)v118, v123))
  {
    uint64_t v124 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(__dst, v473, *(void *)(*(void *)(v124 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v119 + 16))(__dst, v473, v118);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v119 + 56))(__dst, 0LL, 1LL, v118);
  }

  uint64_t v202 = v88[17];
  __n128 v203 = &v86[v202];
  uint64_t v204 = &v87[v202];
  uint64_t v485 = v89;
  uint64_t v488 = v119;
  v471 = v122;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v122)(&v87[v202], 1LL, v118))
  {
    uint64_t v205 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v203, v204, *(void *)(*(void *)(v205 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v119 + 16))(v203, v204, v118);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v119 + 56))(v203, 0LL, 1LL, v118);
  }

  uint64_t v206 = v88[18];
  uint64_t v207 = &v86[v206];
  uint64_t v208 = &v87[v206];
  *uint64_t v207 = *v208;
  uint64_t v209 = v208[1];
  v207[1] = v209;
  *(void *)&v86[v88[19]] = *(void *)&v87[v88[19]];
  uint64_t v210 = v88[20];
  uint64_t v211 = &v86[v210];
  uint64_t v212 = &v87[v210];
  __n128 v213 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v214 = (void *)*((void *)v213 - 1);
  uint64_t v215 = (unsigned int (*)(void *, uint64_t, int *, __n128))v214[6];
  __n128 v216 = swift_bridgeObjectRetain(v209);
  if (v215(v212, 1LL, v213, v216))
  {
    uint64_t v217 = sub_100004AEC(&qword_1009A6DD0);
    memcpy(v211, v212, *(void *)(*(void *)(v217 - 8) + 64LL));
  }

  else
  {
    uint64_t v474 = v214;
    __src = (void *)v118;
    void *v211 = *v212;
    uint64_t v218 = v212[1];
    v211[1] = v218;
    v211[2] = v212[2];
    uint64_t v219 = v212[3];
    v211[3] = v219;
    v211[4] = v212[4];
    uint64_t v220 = v212[5];
    v211[5] = v220;
    *((_WORD *)v211 + 24) = *((_WORD *)v212 + 24);
    v211[7] = v212[7];
    uint64_t v221 = v212[8];
    *((_BYTE *)v211 + 72) = *((_BYTE *)v212 + 72);
    v211[8] = v221;
    uint64_t v222 = v213[10];
    __n128 v223 = (char *)v211 + v222;
    uint64_t v224 = (char *)v212 + v222;
    swift_bridgeObjectRetain(v218);
    swift_bridgeObjectRetain(v219);
    __n128 v225 = swift_bridgeObjectRetain(v220);
    if (v471(v224, 1LL, __src, v225))
    {
      uint64_t v226 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v223, v224, *(void *)(*(void *)(v226 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, void *))(v488 + 16))(v223, v224, __src);
      (*(void (**)(char *, void, uint64_t, void *))(v488 + 56))(v223, 0LL, 1LL, __src);
    }

    uint64_t v254 = v213[11];
    uint64_t v255 = (char *)v211 + v254;
    uint64_t v256 = (char *)v212 + v254;
    if (((unsigned int (*)(char *, uint64_t, void *))v471)((char *)v212 + v254, 1LL, __src))
    {
      uint64_t v257 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v255, v256, *(void *)(*(void *)(v257 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, void *))(v488 + 16))(v255, v256, __src);
      (*(void (**)(char *, void, uint64_t, void *))(v488 + 56))(v255, 0LL, 1LL, __src);
    }

    uint64_t v258 = v213[12];
    uint64_t v259 = (char *)v211 + v258;
    uint64_t v260 = (char *)v212 + v258;
    uint64_t v261 = *(void *)v260;
    v259[8] = v260[8];
    *(void *)uint64_t v259 = v261;
    uint64_t v262 = v213[13];
    uint64_t v263 = (void *)((char *)v211 + v262);
    uint64_t v264 = (void *)((char *)v212 + v262);
    void *v263 = *v264;
    uint64_t v265 = v264[1];
    v263[1] = v265;
    uint64_t v266 = v213[14];
    uint64_t v267 = *(void *)((char *)v212 + v266);
    *(void *)((char *)v211 + v266) = v267;
    uint64_t v268 = v213[15];
    uint64_t v269 = (void *)((char *)v211 + v268);
    uint64_t v270 = (void *)((char *)v212 + v268);
    *uint64_t v269 = *v270;
    uint64_t v271 = v270[1];
    v269[1] = v271;
    uint64_t v272 = v213[16];
    uint64_t v273 = *(void *)((char *)v212 + v272);
    *(void *)((char *)v211 + v272) = v273;
    uint64_t v274 = v213[17];
    uint64_t v275 = (char *)v211 + v274;
    os_log_type_t v276 = (char *)v212 + v274;
    __int128 v277 = *(_OWORD *)v276;
    v275[16] = v276[16];
    *(_OWORD *)uint64_t v275 = v277;
    uint64_t v278 = v213[18];
    uint64_t v279 = (char *)v211 + v278;
    v280 = (char *)v212 + v278;
    __int128 v281 = *(_OWORD *)v280;
    v279[16] = v280[16];
    *(_OWORD *)uint64_t v279 = v281;
    uint64_t v282 = (void (*)(void *, void, uint64_t, int *, __n128))v474[7];
    swift_bridgeObjectRetain(v265);
    swift_bridgeObjectRetain(v267);
    swift_bridgeObjectRetain(v271);
    __n128 v283 = swift_bridgeObjectRetain(v273);
    v282(v211, 0LL, 1LL, v213, v283);
    uint64_t v118 = (uint64_t)__src;
  }

  *(_DWORD *)&v86[v88[21]] = *(_DWORD *)&v87[v88[21]];
  uint64_t v284 = v88[22];
  uint64_t v285 = *(void *)&v87[v284];
  *(void *)&v86[v284] = v285;
  uint64_t v286 = v88[23];
  v287 = &v86[v286];
  uint64_t v288 = &v87[v286];
  unint64_t v289 = *(void *)&v87[v286 + 8];
  swift_bridgeObjectRetain(v285);
  if (v289 >> 60 == 15)
  {
    *(_OWORD *)v287 = *v288;
  }

  else
  {
    uint64_t v290 = *(void *)v288;
    sub_10001736C(v290, v289);
    *(void *)v287 = v290;
    *((void *)v287 + 1) = v289;
  }

  uint64_t v291 = v88[24];
  uint64_t v292 = &v86[v291];
  v293 = &v87[v291];
  unint64_t v294 = *((void *)v293 + 1);
  if (v294 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v292 = *(_OWORD *)v293;
  }

  else
  {
    uint64_t v295 = *(void *)v293;
    sub_10001736C(*(void *)v293, *((void *)v293 + 1));
    *(void *)uint64_t v292 = v295;
    *((void *)v292 + 1) = v294;
  }

  uint64_t v296 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v488 + 16);
  v296(&v86[v88[25]], &v87[v88[25]], v118);
  v296(&v86[v88[26]], &v87[v88[26]], v118);
  v296(&v86[v88[27]], &v87[v88[27]], v118);
  v296(&v86[v88[28]], &v87[v88[28]], v118);
  v296(&v86[v88[29]], &v87[v88[29]], v118);
  v296(&v86[v88[30]], &v87[v88[30]], v118);
  uint64_t v297 = v88[31];
  v298 = &v86[v297];
  v299 = &v87[v297];
  void *v298 = *v299;
  uint64_t v300 = v299[1];
  v298[1] = v300;
  uint64_t v301 = v88[32];
  uint64_t v302 = *(void *)&v87[v301];
  *(void *)&v86[v301] = v302;
  uint64_t v303 = v88[33];
  v304 = &v86[v303];
  uint64_t v305 = &v87[v303];
  void *v304 = *v305;
  uint64_t v306 = v305[1];
  v304[1] = v306;
  uint64_t v307 = v88[34];
  uint64_t v308 = *(void *)&v87[v307];
  *(void *)&v86[v307] = v308;
  uint64_t v309 = v88[35];
  os_log_type_t v310 = &v86[v309];
  uint64_t v311 = &v87[v309];
  char v312 = v311[16];
  *(_OWORD *)os_log_type_t v310 = *(_OWORD *)v311;
  v310[16] = v312;
  uint64_t v313 = v88[36];
  uint64_t v314 = &v86[v313];
  uint64_t v315 = &v87[v313];
  char v316 = v315[16];
  *(_OWORD *)uint64_t v314 = *(_OWORD *)v315;
  v314[16] = v316;
  uint64_t v317 = v88[37];
  uint64_t v318 = &v86[v317];
  uint64_t v319 = &v87[v317];
  swift_bridgeObjectRetain(v300);
  swift_bridgeObjectRetain(v302);
  swift_bridgeObjectRetain(v306);
  __n128 v320 = swift_bridgeObjectRetain(v308);
  ((void (*)(_BYTE *, _BYTE *, uint64_t, __n128))v296)(v318, v319, v118, v320);
  v296(&v86[v88[38]], &v87[v88[38]], v118);
  v296(&v86[v88[39]], &v87[v88[39]], v118);
  v296(&v86[v88[40]], &v87[v88[40]], v118);
  v296(&v86[v88[41]], &v87[v88[41]], v118);
  v296(&v86[v88[42]], &v87[v88[42]], v118);
  v86[v88[43]] = v87[v88[43]];
  v86[v88[44]] = v87[v88[44]];
  v86[v88[45]] = v87[v88[45]];
  uint64_t v321 = v88[46];
  double v322 = &v86[v321];
  uint64_t v323 = &v87[v321];
  *double v322 = *v323;
  uint64_t v324 = v323[1];
  v322[1] = v324;
  uint64_t v325 = v88[47];
  uint64_t v326 = &v86[v325];
  uint64_t v327 = &v87[v325];
  *uint64_t v326 = *v327;
  uint64_t v328 = v327[1];
  v326[1] = v328;
  v329 = *(void (**)(_BYTE *, void, uint64_t, int *, __n128))(v485 + 56);
  swift_bridgeObjectRetain(v324);
  __n128 v330 = swift_bridgeObjectRetain(v328);
  v329(v86, 0LL, 1LL, v88, v330);
  uint64_t v127 = v493;
  uint64_t v126 = v494;
  uint64_t v128 = v497;
  uint64_t v129 = v498;
  uint64_t v130 = v496;
  uint64_t v131 = v492;
  uint64_t v37 = v481;
LABEL_69:
  v37[v129[16]] = v128[v129[16]];
  uint64_t v331 = v129[17];
  uint64_t v332 = *(void *)&v128[v331];
  *(void *)&v37[v331] = v332;
  swift_bridgeObjectRetain(v332);
  swift_bridgeObjectRelease();
  uint64_t v333 = v129[18];
  v334 = &v37[v333];
  unint64_t v335 = &v128[v333];
  int v336 = v131(&v37[v333], 1LL, v130);
  int v337 = v131(v335, 1LL, v130);
  if (v336)
  {
    if (!v337)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v495 + 16))(v334, v335, v130);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v495 + 56))(v334, 0LL, 1LL, v130);
      goto LABEL_75;
    }

    goto LABEL_74;
  }

  if (v337)
  {
    (*(void (**)(_BYTE *, uint64_t))(v495 + 8))(v334, v130);
LABEL_74:
    uint64_t v338 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v334, v335, *(void *)(*(void *)(v338 - 8) + 64LL));
    goto LABEL_75;
  }

  v490(v334, v335, v130);
LABEL_75:
  uint64_t v339 = v129[19];
  uint64_t v340 = &v37[v339];
  uint64_t v341 = &v128[v339];
  int v342 = v131(&v37[v339], 1LL, v130);
  int v343 = v131(v341, 1LL, v130);
  if (v342)
  {
    if (!v343)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v495 + 16))(v340, v341, v130);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v495 + 56))(v340, 0LL, 1LL, v130);
      goto LABEL_81;
    }

    goto LABEL_80;
  }

  if (v343)
  {
    (*(void (**)(_BYTE *, uint64_t))(v495 + 8))(v340, v130);
LABEL_80:
    uint64_t v344 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v340, v341, *(void *)(*(void *)(v344 - 8) + 64LL));
    goto LABEL_81;
  }

  v490(v340, v341, v130);
LABEL_81:
  uint64_t v345 = v129[20];
  v346 = (uint64_t *)&v37[v345];
  uint64_t v347 = (uint64_t *)&v128[v345];
  if (((*(void *)&v37[v345 + 8] >> 60) | 4) != 0xF)
  {
    unint64_t v350 = v347[1];
    if (((v350 >> 60) | 4) != 0xF)
    {
      uint64_t v352 = *v347;
      sub_10001736C(v352, v350);
      uint64_t v353 = *v346;
      unint64_t v354 = v346[1];
      uint64_t *v346 = v352;
      v346[1] = v350;
      sub_100016F9C(v353, v354);
      goto LABEL_87;
    }

    sub_1000A236C((uint64_t)v346);
    goto LABEL_86;
  }

  unint64_t v348 = v347[1];
  if (((v348 >> 60) | 4) == 0xF)
  {
LABEL_86:
    *(_OWORD *)v346 = *(_OWORD *)v347;
    goto LABEL_87;
  }

  uint64_t v349 = *v347;
  sub_10001736C(v349, v348);
  uint64_t *v346 = v349;
  v346[1] = v348;
LABEL_87:
  v37[v129[21]] = v128[v129[21]];
  *(_WORD *)&v37[v129[22]] = *(_WORD *)&v128[v129[22]];
  v126[*(int *)(a3 + 24)] = v127[*(int *)(a3 + 24)];
  return v126;
}

            uint64_t v383 = v231[11];
            uint64_t v384 = &v230[v383];
            __dstd = (void *)(v229 + v383);
            uint64_t v385 = ((uint64_t (*)(void))v471)();
            v386 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v471)(v384, 1LL, v188);
            if (v385)
            {
              if (!v386)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 16))(__dstd, v384, v188);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v477 + 56))(__dstd, 0LL, 1LL, v188);
                goto LABEL_114;
              }

              __int128 v387 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
              uint64_t v388 = __dstd;
            }

            else
            {
              if (!v386)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 24))(__dstd, v384, v188);
                goto LABEL_114;
              }

              (*(void (**)(void *, uint64_t))(v477 + 8))(__dstd, v188);
              __int128 v387 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
              uint64_t v388 = __dstd;
            }

            memcpy(v388, v384, v387);
LABEL_114:
            uint64_t v389 = v231[12];
            v390 = v229 + v389;
            __int128 v391 = &v230[v389];
            v392 = *(void *)v391;
            *(_BYTE *)(v390 + 8) = v391[8];
            *(void *)v390 = v392;
            __n128 v393 = v231[13];
            uint64_t v394 = (void *)(v229 + v393);
            unint64_t v395 = &v230[v393];
            char *v394 = *v395;
            int v396 = v395[1];
            v394[1] = v396;
            swift_bridgeObjectRetain(v396);
            swift_bridgeObjectRelease();
            int v397 = v231[14];
            size_t v398 = *(void *)&v230[v397];
            *(void *)(v229 + v397) = v398;
            swift_bridgeObjectRetain(v398);
            swift_bridgeObjectRelease();
            uint64_t v399 = v231[15];
            uint64_t v400 = (void *)(v229 + v399);
            uint64_t v401 = &v230[v399];
            uint64_t *v400 = *v401;
            uint64_t v402 = v401[1];
            v400[1] = v402;
            swift_bridgeObjectRetain(v402);
            swift_bridgeObjectRelease();
            uint64_t v403 = v231[16];
            uint64_t v404 = *(void *)&v230[v403];
            *(void *)(v229 + v403) = v404;
            swift_bridgeObjectRetain(v404);
            swift_bridgeObjectRelease();
            v405 = v231[17];
            uint64_t v406 = v229 + v405;
            uint64_t v407 = &v230[v405];
            uint64_t v408 = *(_OWORD *)v407;
            *(_BYTE *)(v406 + swift_weakDestroy(v0 + 16) = v407[16];
            *(_OWORD *)uint64_t v406 = v408;
            uint64_t v409 = v231[18];
            uint64_t v410 = v229 + v409;
            uint64_t v411 = &v230[v409];
            uint64_t v412 = *(_OWORD *)v411;
            *(_BYTE *)(v410 + swift_weakDestroy(v0 + 16) = v411[16];
            *(_OWORD *)uint64_t v410 = v412;
            goto LABEL_115;
          }

          (*(void (**)(_BYTE *, uint64_t))(v189 + 8))(v219, v188);
        }

        __n128 v223 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v219, v220, *(void *)(*(void *)(v223 - 8) + 64LL));
        goto LABEL_50;
      }

      (*(void (**)(_BYTE *, uint64_t))(v189 + 8))(v186, v188);
    }

    uint64_t v217 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v186, v187, *(void *)(*(void *)(v217 - 8) + 64LL));
    goto LABEL_44;
  }

  if (v89)
  {
LABEL_25:
    uint64_t v121 = sub_100004AEC(&qword_10099CE68);
    memcpy(v83, v84, *(void *)(*(void *)(v121 - 8) + 64LL));
LABEL_26:
    uint64_t v122 = v479;
    goto LABEL_69;
  }

  uint64_t v469 = a1;
  uint64_t v470 = v86;
  uint64_t v90 = *(void *)v84;
  v83[8] = v84[8];
  *(void *)__n128 v83 = v90;
  int v91 = v85[5];
  int v92 = &v83[v91];
  uint64_t v93 = &v84[v91];
  uint64_t v94 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v94 - 8) + 16LL))(v92, v93, v94);
  v83[v85[6]] = v84[v85[6]];
  v83[v85[7]] = v84[v85[7]];
  Class v95 = v85[8];
  uint64_t v96 = &v83[v95];
  uint64_t v97 = &v84[v95];
  *uint64_t v96 = *v97;
  __srcb = (void *)v97[1];
  v96[1] = __srcb;
  v83[v85[9]] = v84[v85[9]];
  v83[v85[10]] = v84[v85[10]];
  v83[v85[11]] = v84[v85[11]];
  uint64_t v98 = v85[12];
  uint64_t v99 = &v83[v98];
  uint64_t v100 = &v84[v98];
  *uint64_t v99 = *v100;
  uint64_t v101 = v100[1];
  v99[1] = v101;
  id v102 = v85[13];
  uint64_t v103 = &v83[v102];
  uint64_t v104 = &v84[v102];
  *uint64_t v103 = *v104;
  uint64_t v105 = v104[1];
  v103[1] = v105;
  uint64_t v106 = v85[14];
  uint64_t v107 = &v83[v106];
  uint64_t v108 = &v84[v106];
  uint64_t v109 = v108[8];
  *(void *)uint64_t v107 = *(void *)v108;
  v107[8] = v109;
  uint64_t v110 = v85[15];
  uint64_t v111 = &v83[v110];
  char v112 = &v84[v110];
  *uint64_t v111 = *v112;
  uint64_t v113 = v112[1];
  v111[1] = v113;
  uint64_t v114 = v85[16];
  __dst = &v83[v114];
  __n128 v115 = &v84[v114];
  uint64_t v116 = type metadata accessor for URL(0LL);
  uint64_t v117 = *(void *)(v116 - 8);
  uint64_t v118 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v117 + 48);
  swift_bridgeObjectRetain(__srcb);
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRetain(v105);
  uint64_t v119 = swift_bridgeObjectRetain(v113);
  if (v118(v115, 1LL, v116, v119))
  {
    uint64_t v120 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(__dst, v115, *(void *)(*(void *)(v120 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v117 + 16))(__dst, v115, v116);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v117 + 56))(__dst, 0LL, 1LL, v116);
  }

  uint64_t v193 = v85[17];
  uint64_t v194 = &v83[v193];
  uint64_t v195 = &v84[v193];
  v473 = v117;
  v476 = v116;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v118)(&v84[v193], 1LL, v116))
  {
    uint64_t v196 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v194, v195, *(void *)(*(void *)(v196 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v117 + 16))(v194, v195, v116);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v117 + 56))(v194, 0LL, 1LL, v116);
  }

  uint64_t v197 = v85[18];
  uint64_t v198 = &v83[v197];
  uint64_t v199 = &v84[v197];
  *uint64_t v198 = *v199;
  int v200 = v199[1];
  v198[1] = v200;
  *(void *)&v83[v85[19]] = *(void *)&v84[v85[19]];
  int v201 = v85[20];
  uint64_t v202 = &v83[v201];
  __n128 v203 = &v84[v201];
  uint64_t v204 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v205 = (void *)*((void *)v204 - 1);
  uint64_t v206 = (unsigned int (*)(void *, uint64_t, int *, __n128))v205[6];
  uint64_t v207 = swift_bridgeObjectRetain(v200);
  if (v206(v203, 1LL, v204, v207))
  {
    uint64_t v208 = sub_100004AEC(&qword_1009A6DD0);
    memcpy(v202, v203, *(void *)(*(void *)(v208 - 8) + 64LL));
  }

  else
  {
    __dsta = v205;
    *uint64_t v202 = *v203;
    uint64_t v209 = v203[1];
    v202[1] = v209;
    v202[2] = v203[2];
    uint64_t v210 = v203[3];
    v202[3] = v210;
    v202[4] = v203[4];
    uint64_t v211 = v203[5];
    v202[5] = v211;
    *((_WORD *)v202 + 24) = *((_WORD *)v203 + 24);
    v202[7] = v203[7];
    uint64_t v212 = v203[8];
    *((_BYTE *)v202 + 72) = *((_BYTE *)v203 + 72);
    v202[8] = v212;
    __n128 v213 = v204[10];
    __src = (char *)v202 + v213;
    uint64_t v214 = (char *)v203 + v213;
    swift_bridgeObjectRetain(v209);
    swift_bridgeObjectRetain(v210);
    uint64_t v215 = swift_bridgeObjectRetain(v211);
    if (v118(v214, 1LL, v476, v215))
    {
      __n128 v216 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__src, v214, *(void *)(*(void *)(v216 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v473 + 16))(__src, v214, v476);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v473 + 56))(__src, 0LL, 1LL, v476);
    }

    int v244 = v204[11];
    uint64_t v245 = (char *)v202 + v244;
    uint64_t v246 = (char *)v203 + v244;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v118)((char *)v203 + v244, 1LL, v476))
    {
      uint64_t v247 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v245, v246, *(void *)(*(void *)(v247 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v473 + 16))(v245, v246, v476);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v473 + 56))(v245, 0LL, 1LL, v476);
    }

    uint64_t v248 = v204[12];
    uint64_t v249 = (char *)v202 + v248;
    unint64_t v250 = (char *)v203 + v248;
    __n128 v251 = *(void *)v250;
    v249[8] = v250[8];
    *(void *)uint64_t v249 = v251;
    uint64_t v252 = v204[13];
    uint64_t v253 = (void *)((char *)v202 + v252);
    uint64_t v254 = (void *)((char *)v203 + v252);
    char *v253 = *v254;
    uint64_t v255 = v254[1];
    v253[1] = v255;
    uint64_t v256 = v204[14];
    uint64_t v257 = *(void *)((char *)v203 + v256);
    *(void *)((char *)v202 + v256) = v257;
    uint64_t v258 = v204[15];
    uint64_t v259 = (void *)((char *)v202 + v258);
    uint64_t v260 = (void *)((char *)v203 + v258);
    *uint64_t v259 = *v260;
    uint64_t v261 = v260[1];
    v259[1] = v261;
    uint64_t v262 = v204[16];
    uint64_t v263 = *(void *)((char *)v203 + v262);
    *(void *)((char *)v202 + v262) = v263;
    uint64_t v264 = v204[17];
    uint64_t v265 = (char *)v202 + v264;
    uint64_t v266 = (char *)v203 + v264;
    uint64_t v267 = *(_OWORD *)v266;
    v265[16] = v266[16];
    *(_OWORD *)uint64_t v265 = v267;
    uint64_t v268 = v204[18];
    uint64_t v269 = (char *)v202 + v268;
    uint64_t v270 = (char *)v203 + v268;
    uint64_t v271 = *(_OWORD *)v270;
    v269[16] = v270[16];
    *(_OWORD *)uint64_t v269 = v271;
    uint64_t v272 = (void (*)(void *, void, uint64_t, int *, __n128))__dsta[7];
    swift_bridgeObjectRetain(v255);
    swift_bridgeObjectRetain(v257);
    swift_bridgeObjectRetain(v261);
    uint64_t v273 = swift_bridgeObjectRetain(v263);
    v272(v202, 0LL, 1LL, v204, v273);
  }

  *(_DWORD *)&v83[v85[21]] = *(_DWORD *)&v84[v85[21]];
  uint64_t v274 = v85[22];
  uint64_t v275 = *(void *)&v84[v274];
  *(void *)&v83[v274] = v275;
  os_log_type_t v276 = v85[23];
  __int128 v277 = &v83[v276];
  uint64_t v278 = &v84[v276];
  uint64_t v279 = *(void *)&v84[v276 + 8];
  swift_bridgeObjectRetain(v275);
  if (v279 >> 60 == 15)
  {
    *(_OWORD *)__int128 v277 = *v278;
  }

  else
  {
    v280 = *(void *)v278;
    sub_10001736C(v280, v279);
    *(void *)__int128 v277 = v280;
    *((void *)v277 + 1) = v279;
  }

  __int128 v281 = v85[24];
  uint64_t v282 = &v83[v281];
  __n128 v283 = &v84[v281];
  uint64_t v284 = *((void *)v283 + 1);
  if (v284 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v282 = *(_OWORD *)v283;
  }

  else
  {
    uint64_t v285 = *(void *)v283;
    sub_10001736C(*(void *)v283, *((void *)v283 + 1));
    *(void *)uint64_t v282 = v285;
    *((void *)v282 + 1) = v284;
  }

  uint64_t v286 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v473 + 16);
  v286(&v83[v85[25]], &v84[v85[25]], v476);
  v286(&v83[v85[26]], &v84[v85[26]], v476);
  v286(&v83[v85[27]], &v84[v85[27]], v476);
  v286(&v83[v85[28]], &v84[v85[28]], v476);
  v286(&v83[v85[29]], &v84[v85[29]], v476);
  v286(&v83[v85[30]], &v84[v85[30]], v476);
  v287 = v85[31];
  uint64_t v288 = &v83[v287];
  unint64_t v289 = &v84[v287];
  *uint64_t v288 = *v289;
  uint64_t v290 = v289[1];
  v288[1] = v290;
  uint64_t v291 = v85[32];
  uint64_t v292 = *(void *)&v84[v291];
  *(void *)&v83[v291] = v292;
  v293 = v85[33];
  unint64_t v294 = &v83[v293];
  uint64_t v295 = &v84[v293];
  char *v294 = *v295;
  uint64_t v296 = v295[1];
  v294[1] = v296;
  uint64_t v297 = v85[34];
  v298 = *(void *)&v84[v297];
  *(void *)&v83[v297] = v298;
  v299 = v85[35];
  uint64_t v300 = &v83[v299];
  uint64_t v301 = &v84[v299];
  uint64_t v302 = v301[16];
  *(_OWORD *)uint64_t v300 = *(_OWORD *)v301;
  v300[16] = v302;
  uint64_t v303 = v85[36];
  v304 = &v83[v303];
  uint64_t v305 = &v84[v303];
  uint64_t v306 = v305[16];
  *(_OWORD *)v304 = *(_OWORD *)v305;
  v304[16] = v306;
  uint64_t v307 = v85[37];
  uint64_t v308 = &v83[v307];
  uint64_t v309 = &v84[v307];
  swift_bridgeObjectRetain(v290);
  swift_bridgeObjectRetain(v292);
  swift_bridgeObjectRetain(v296);
  os_log_type_t v310 = swift_bridgeObjectRetain(v298);
  ((void (*)(_BYTE *, _BYTE *, uint64_t, __n128))v286)(v308, v309, v476, v310);
  v286(&v83[v85[38]], &v84[v85[38]], v476);
  v286(&v83[v85[39]], &v84[v85[39]], v476);
  v286(&v83[v85[40]], &v84[v85[40]], v476);
  v286(&v83[v85[41]], &v84[v85[41]], v476);
  v286(&v83[v85[42]], &v84[v85[42]], v476);
  v83[v85[43]] = v84[v85[43]];
  v83[v85[44]] = v84[v85[44]];
  v83[v85[45]] = v84[v85[45]];
  uint64_t v311 = v85[46];
  char v312 = &v83[v311];
  uint64_t v313 = &v84[v311];
  *char v312 = *v313;
  uint64_t v314 = v313[1];
  v312[1] = v314;
  uint64_t v315 = v85[47];
  char v316 = &v83[v315];
  uint64_t v317 = &v84[v315];
  *char v316 = *v317;
  uint64_t v318 = v317[1];
  v316[1] = v318;
  uint64_t v319 = *(void (**)(_BYTE *, void, uint64_t, int *, __n128))(v470 + 56);
  swift_bridgeObjectRetain(v314);
  __n128 v320 = swift_bridgeObjectRetain(v318);
  v319(v83, 0LL, 1LL, v85, v320);
  uint64_t v80 = v480;
  uint64_t v79 = v481;
  uint64_t v81 = v482;
  uint64_t v122 = v479;
  a1 = v469;
LABEL_69:
  *(_BYTE *)(a1 + v80[16]) = *(_BYTE *)(v79 + v80[16]);
  uint64_t v321 = v80[17];
  double v322 = *(void *)(v79 + v321);
  *(void *)(a1 + v321) = v322;
  swift_bridgeObjectRetain(v322);
  swift_bridgeObjectRelease();
  uint64_t v323 = v80[18];
  uint64_t v324 = (void *)(a1 + v323);
  uint64_t v325 = (const void *)(v79 + v323);
  uint64_t v326 = v122(a1 + v323, 1LL, v81);
  uint64_t v327 = v122((uint64_t)v325, 1LL, v81);
  if (v326)
  {
    if (!v327)
    {
      (*(void (**)(void *, const void *, uint64_t))(v483 + 16))(v324, v325, v81);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v483 + 56))(v324, 0LL, 1LL, v81);
      goto LABEL_75;
    }

    goto LABEL_74;
  }

  if (v327)
  {
    (*(void (**)(void *, uint64_t))(v483 + 8))(v324, v81);
LABEL_74:
    uint64_t v328 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v324, v325, *(void *)(*(void *)(v328 - 8) + 64LL));
    goto LABEL_75;
  }

  v478((uint64_t)v324, (uint64_t)v325, v81);
LABEL_75:
  v329 = v80[19];
  __n128 v330 = (void *)(a1 + v329);
  uint64_t v331 = (const void *)(v79 + v329);
  uint64_t v332 = v122(a1 + v329, 1LL, v81);
  uint64_t v333 = v122((uint64_t)v331, 1LL, v81);
  if (v332)
  {
    if (!v333)
    {
      (*(void (**)(void *, const void *, uint64_t))(v483 + 16))(v330, v331, v81);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v483 + 56))(v330, 0LL, 1LL, v81);
      goto LABEL_81;
    }

    goto LABEL_80;
  }

  if (v333)
  {
    (*(void (**)(void *, uint64_t))(v483 + 8))(v330, v81);
LABEL_80:
    v334 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v330, v331, *(void *)(*(void *)(v334 - 8) + 64LL));
    goto LABEL_81;
  }

  v478((uint64_t)v330, (uint64_t)v331, v81);
LABEL_81:
  unint64_t v335 = v80[20];
  int v336 = (uint64_t *)(a1 + v335);
  int v337 = (uint64_t *)(v79 + v335);
  if (((*(void *)(a1 + v335 + 8) >> 60) | 4) != 0xF)
  {
    uint64_t v340 = v337[1];
    if (((v340 >> 60) | 4) != 0xF)
    {
      int v342 = *v337;
      sub_10001736C(v342, v340);
      int v343 = *v336;
      uint64_t v344 = v336[1];
      *int v336 = v342;
      v336[1] = v340;
      sub_100016F9C(v343, v344);
      goto LABEL_87;
    }

    sub_1000A236C((uint64_t)v336);
    goto LABEL_86;
  }

  uint64_t v338 = v337[1];
  if (((v338 >> 60) | 4) == 0xF)
  {
LABEL_86:
    *(_OWORD *)int v336 = *(_OWORD *)v337;
    goto LABEL_87;
  }

  uint64_t v339 = *v337;
  sub_10001736C(v339, v338);
  *int v336 = v339;
  v336[1] = v338;
LABEL_87:
  *(_BYTE *)(a1 + v80[21]) = *(_BYTE *)(v79 + v80[21]);
  *(_WORD *)(a1 + v80[22]) = *(_WORD *)(v79 + v80[22]);
  return a1;
}

        swift_bridgeObjectRelease();
        v127[2] = 0LL;
        return swift_bridgeObjectRelease();
      }
    }

    uint64_t v127 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v17 = v16 >> 1;
    uint64_t v18 = static Array._allocateBufferUninitialized(minimumCapacity:)(v16 >> 1, v144);
    *(void *)(v18 + swift_weakDestroy(v0 + 16) = v17;
    uint64_t v19 = *(unsigned __int8 *)(v136 + 80);
    uint64_t v127 = (void *)v18;
    uint64_t v134 = v18 + ((v19 + 32) & ~v19);
  }

  uint64_t v21 = 0LL;
  uint64_t v139 = v142 + 8;
  __n128 v140 = v141 + 8;
  uint64_t v22 = (char *)_swiftEmptyArrayStorage;
  uint64_t v135 = a1;
  while (1)
  {
    uint64_t v24 = v21;
    uint64_t v25 = v21 + 1;
    if (v21 + 1 >= v14) {
      goto LABEL_59;
    }
    uint64_t v129 = v22;
    uint64_t v26 = *a1;
    uint64_t v27 = *(void *)(v136 + 72);
    __n128 v28 = *a1 + v27 * v25;
    uint64_t v147 = v14;
    uint64_t v29 = v141;
    uint64_t v30 = v149;
    sub_10001DC4C(v28, v141, v149);
    unint64_t v31 = v142;
    sub_10001DC4C(v26 + v27 * v24, v142, v30);
    uint64_t v32 = *(int *)(v144 + 20);
    LODWORD(v146) = *(_DWORD *)(v140 + v32);
    LODWORD(v138) = *(_DWORD *)(v139 + v32);
    sub_100018C68(v31, v30);
    uint64_t v33 = v29;
    int v34 = v147;
    sub_100018C68(v33, v30);
    uint64_t v131 = v26;
    uint64_t v148 = v27;
    if (v24 + 2 >= v34)
    {
      uint64_t v25 = v24 + 2;
      __n128 v43 = v27;
      a3 = v130;
    }

    else
    {
      uint64_t v133 = v24;
      int v35 = v27 * v25;
      uint64_t v36 = v26;
      uint64_t v25 = v24 + 2;
      uint64_t v37 = v27 * (v24 + 2);
      while (1)
      {
        uint64_t v38 = v146 < v138;
        unint64_t v39 = v141;
        uint64_t v40 = v149;
        sub_10001DC4C(v36 + v37, v141, v149);
        uint64_t v41 = v142;
        sub_10001DC4C(v36 + v35, v142, v40);
        uint64_t v42 = *(_DWORD *)(v140 + *(int *)(v144 + 20)) >= *(_DWORD *)(v139 + *(int *)(v144 + 20));
        sub_100018C68(v41, v40);
        sub_100018C68(v39, v40);
        if (v38 == v42) {
          break;
        }
        __n128 v43 = v148;
        v36 += v148;
        if (v147 == ++v25)
        {
          int v34 = v147;
          uint64_t v25 = v147;
          uint64_t v30 = v149;
          a3 = v130;
          uint64_t v26 = v131;
          a1 = v135;
          uint64_t v24 = v133;
          goto LABEL_25;
        }
      }

      uint64_t v30 = v149;
      a3 = v130;
      uint64_t v26 = v131;
      a1 = v135;
      uint64_t v24 = v133;
      int v34 = v147;
      __n128 v43 = v148;
    }

uint64_t sub_1000A236C(uint64_t a1)
{
  return a1;
}

_BYTE *sub_1000A23A0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v10(v6, v7, v8);
  uint64_t v11 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = &v6[v12];
  uint64_t v14 = &v7[v12];
  uint64_t v126 = a2;
  uint64_t v120 = v10;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(&v7[v12], 1LL, v8))
  {
    uint64_t v15 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    v10(v13, v14, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0LL, 1LL, v8);
  }

  v6[v11[6]] = v7[v11[6]];
  uint64_t v16 = v11[7];
  uint64_t v17 = &v6[v16];
  uint64_t v18 = &v7[v16];
  uint64_t v19 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
  *(void *)&v6[v11[8]] = *(void *)&v7[v11[8]];
  v6[v11[9]] = v7[v11[9]];
  uint64_t v20 = v11[10];
  uint64_t v21 = &v6[v20];
  uint64_t v22 = &v7[v20];
  uint64_t v23 = type metadata accessor for Date(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32);
  v25(v21, v22, v23);
  uint64_t v26 = v11[11];
  uint64_t v27 = &v6[v26];
  __n128 v28 = &v7[v26];
  uint64_t v128 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48);
  uint64_t v127 = a1;
  uint64_t v123 = v24;
  uint64_t v124 = v23;
  uint64_t v122 = v25;
  if (v128(&v7[v26], 1LL, v23))
  {
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    v25(v27, v28, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v27, 0LL, 1LL, v23);
  }

  uint64_t v30 = v11[12];
  unint64_t v31 = &v6[v30];
  uint64_t v32 = &v7[v30];
  *(_OWORD *)unint64_t v31 = *(_OWORD *)v32;
  *((void *)v31 + 2) = *((void *)v32 + 2);
  v6[v11[13]] = v7[v11[13]];
  uint64_t v33 = v11[14];
  int v34 = &v6[v33];
  int v35 = &v7[v33];
  uint64_t v36 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v37 = *((void *)v36 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v37 + 48))(v35, 1LL, v36))
  {
    uint64_t v38 = sub_100004AEC(&qword_1009B9250);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    v120(v34, v35, v8);
    *(_OWORD *)&v34[v36[5]] = *(_OWORD *)&v35[v36[5]];
    *(_OWORD *)&v34[v36[6]] = *(_OWORD *)&v35[v36[6]];
    *(_OWORD *)&v34[v36[7]] = *(_OWORD *)&v35[v36[7]];
    *(_DWORD *)&v34[v36[8]] = *(_DWORD *)&v35[v36[8]];
    uint64_t v39 = v36[9];
    uint64_t v40 = &v34[v39];
    uint64_t v41 = &v35[v39];
    *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
    v40[4] = v41[4];
    uint64_t v42 = v36[10];
    __n128 v43 = &v34[v42];
    uint64_t v44 = &v35[v42];
    *(_OWORD *)__n128 v43 = *(_OWORD *)v44;
    v43[16] = v44[16];
    uint64_t v45 = v36[11];
    uint64_t v46 = &v34[v45];
    uint64_t v47 = &v35[v45];
    v46[8] = v47[8];
    *(void *)uint64_t v46 = *(void *)v47;
    uint64_t v48 = v36[12];
    int v49 = &v34[v48];
    uint64_t v50 = &v35[v48];
    *(_DWORD *)int v49 = *(_DWORD *)v50;
    v49[4] = v50[4];
    v34[v36[13]] = v35[v36[13]];
    v34[v36[14]] = v35[v36[14]];
    *(_OWORD *)&v34[v36[15]] = *(_OWORD *)&v35[v36[15]];
    (*(void (**)(char *, void, uint64_t, int *))(v37 + 56))(v34, 0LL, 1LL, v36);
  }

  uint64_t v51 = v11[15];
  uint64_t v52 = &v6[v51];
  uint64_t v53 = &v7[v51];
  unint64_t v54 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v55 = *((void *)v54 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v55 + 48))(v53, 1LL, v54))
  {
    uint64_t v56 = sub_100004AEC(&qword_10099CE68);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    uint64_t v118 = v55;
    *(void *)uint64_t v52 = *(void *)v53;
    v52[8] = v53[8];
    uint64_t v57 = v54[5];
    uint64_t v58 = &v52[v57];
    uint64_t v59 = &v53[v57];
    uint64_t v60 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32LL))(v58, v59, v60);
    v52[v54[6]] = v53[v54[6]];
    v52[v54[7]] = v53[v54[7]];
    *(_OWORD *)&v52[v54[8]] = *(_OWORD *)&v53[v54[8]];
    v52[v54[9]] = v53[v54[9]];
    v52[v54[10]] = v53[v54[10]];
    v52[v54[11]] = v53[v54[11]];
    *(_OWORD *)&v52[v54[12]] = *(_OWORD *)&v53[v54[12]];
    *(_OWORD *)&v52[v54[13]] = *(_OWORD *)&v53[v54[13]];
    uint64_t v61 = v54[14];
    uint64_t v62 = &v52[v61];
    uint64_t v63 = &v53[v61];
    v62[8] = v63[8];
    *(void *)uint64_t v62 = *(void *)v63;
    *(_OWORD *)&v52[v54[15]] = *(_OWORD *)&v53[v54[15]];
    uint64_t v64 = v54[16];
    uint64_t v65 = &v52[v64];
    int v66 = &v53[v64];
    uint64_t v67 = type metadata accessor for URL(0LL);
    uint64_t v68 = *(void *)(v67 - 8);
    uint64_t v121 = *(unsigned int (**)(void))(v68 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v121)(v66, 1LL, v67))
    {
      uint64_t v69 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v65, v66, v67);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0LL, 1LL, v67);
    }

    uint64_t v70 = v54[17];
    uint64_t v71 = &v52[v70];
    uint64_t v72 = &v53[v70];
    uint64_t v119 = v68;
    uint64_t v117 = v67;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v121)(&v53[v70], 1LL, v67))
    {
      uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v71, v72, v67);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v71, 0LL, 1LL, v67);
    }

    *(_OWORD *)&v52[v54[18]] = *(_OWORD *)&v53[v54[18]];
    *(void *)&v52[v54[19]] = *(void *)&v53[v54[19]];
    uint64_t v74 = v54[20];
    uint64_t v75 = &v52[v74];
    uint64_t v76 = &v53[v74];
    uint64_t v77 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    uint64_t v78 = *((void *)v77 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v78 + 48))(v76, 1LL, v77))
    {
      uint64_t v79 = sub_100004AEC(&qword_1009A6DD0);
      memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64LL));
      uint64_t v80 = v117;
    }

    else
    {
      uint64_t v114 = v75;
      __int128 v81 = *((_OWORD *)v76 + 1);
      *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v81;
      *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
      *((_WORD *)v75 + 24) = *((_WORD *)v76 + 24);
      uint64_t v82 = *((void *)v76 + 8);
      *((void *)v75 + 7) = *((void *)v76 + 7);
      *((void *)v75 + 8) = v82;
      v75[72] = v76[72];
      uint64_t v83 = v77[10];
      __dst = &v75[v83];
      __src = &v76[v83];
      uint64_t v80 = v117;
      if (v121())
      {
        uint64_t v84 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dst, __src, *(void *)(*(void *)(v84 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v119 + 32))(__dst, __src, v117);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(__dst, 0LL, 1LL, v117);
      }

      uint64_t v85 = v77[11];
      __dsta = (char *)v114 + v85;
      __srca = &v76[v85];
      if (v121())
      {
        uint64_t v86 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dsta, __srca, *(void *)(*(void *)(v86 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v119 + 32))(__dsta, __srca, v117);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(__dsta, 0LL, 1LL, v117);
      }

      uint64_t v87 = v77[12];
      uint64_t v88 = (char *)v114 + v87;
      uint64_t v89 = &v76[v87];
      *(void *)uint64_t v88 = *(void *)v89;
      v88[8] = v89[8];
      *(_OWORD *)((char *)v114 + v77[13]) = *(_OWORD *)&v76[v77[13]];
      *(void *)((char *)v114 + v77[14]) = *(void *)&v76[v77[14]];
      *(_OWORD *)((char *)v114 + v77[15]) = *(_OWORD *)&v76[v77[15]];
      *(void *)((char *)v114 + v77[16]) = *(void *)&v76[v77[16]];
      uint64_t v90 = v77[17];
      int v91 = (char *)v114 + v90;
      int v92 = &v76[v90];
      v91[16] = v92[16];
      *(_OWORD *)int v91 = *(_OWORD *)v92;
      uint64_t v93 = v77[18];
      uint64_t v94 = (char *)v114 + v93;
      Class v95 = &v76[v93];
      v94[16] = v95[16];
      *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v78 + 56))(v114, 0LL, 1LL, v77);
    }

    *(_DWORD *)&v52[v54[21]] = *(_DWORD *)&v53[v54[21]];
    *(void *)&v52[v54[22]] = *(void *)&v53[v54[22]];
    *(_OWORD *)&v52[v54[23]] = *(_OWORD *)&v53[v54[23]];
    *(_OWORD *)&v52[v54[24]] = *(_OWORD *)&v53[v54[24]];
    uint64_t v96 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v119 + 32);
    v96(&v52[v54[25]], &v53[v54[25]], v80);
    v96(&v52[v54[26]], &v53[v54[26]], v80);
    v96(&v52[v54[27]], &v53[v54[27]], v80);
    v96(&v52[v54[28]], &v53[v54[28]], v80);
    v96(&v52[v54[29]], &v53[v54[29]], v80);
    v96(&v52[v54[30]], &v53[v54[30]], v80);
    *(_OWORD *)&v52[v54[31]] = *(_OWORD *)&v53[v54[31]];
    *(void *)&v52[v54[32]] = *(void *)&v53[v54[32]];
    *(_OWORD *)&v52[v54[33]] = *(_OWORD *)&v53[v54[33]];
    *(void *)&v52[v54[34]] = *(void *)&v53[v54[34]];
    uint64_t v97 = v54[35];
    uint64_t v98 = &v52[v97];
    uint64_t v99 = &v53[v97];
    v98[16] = v99[16];
    *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
    uint64_t v100 = v54[36];
    uint64_t v101 = &v52[v100];
    id v102 = &v53[v100];
    v101[16] = v102[16];
    *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
    v96(&v52[v54[37]], &v53[v54[37]], v80);
    v96(&v52[v54[38]], &v53[v54[38]], v80);
    v96(&v52[v54[39]], &v53[v54[39]], v80);
    v96(&v52[v54[40]], &v53[v54[40]], v80);
    v96(&v52[v54[41]], &v53[v54[41]], v80);
    v96(&v52[v54[42]], &v53[v54[42]], v80);
    v52[v54[43]] = v53[v54[43]];
    v52[v54[44]] = v53[v54[44]];
    v52[v54[45]] = v53[v54[45]];
    *(_OWORD *)&v52[v54[46]] = *(_OWORD *)&v53[v54[46]];
    *(_OWORD *)&v52[v54[47]] = *(_OWORD *)&v53[v54[47]];
    (*(void (**)(char *, void, uint64_t, int *))(v118 + 56))(v52, 0LL, 1LL, v54);
  }

  v6[v11[16]] = v7[v11[16]];
  *(void *)&v6[v11[17]] = *(void *)&v7[v11[17]];
  uint64_t v103 = v11[18];
  uint64_t v104 = &v6[v103];
  uint64_t v105 = &v7[v103];
  if (v128(&v7[v103], 1LL, v124))
  {
    uint64_t v106 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v104, v105, *(void *)(*(void *)(v106 - 8) + 64LL));
  }

  else
  {
    v122(v104, v105, v124);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v104, 0LL, 1LL, v124);
  }

  uint64_t v107 = v11[19];
  uint64_t v108 = &v6[v107];
  uint64_t v109 = &v7[v107];
  if (v128(&v7[v107], 1LL, v124))
  {
    uint64_t v110 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v108, v109, *(void *)(*(void *)(v110 - 8) + 64LL));
  }

  else
  {
    v122(v108, v109, v124);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v108, 0LL, 1LL, v124);
  }

  *(_OWORD *)&v6[v11[20]] = *(_OWORD *)&v7[v11[20]];
  v6[v11[21]] = v7[v11[21]];
  *(_WORD *)&v6[v11[22]] = *(_WORD *)&v7[v11[22]];
  v127[*(int *)(a3 + 24)] = v126[*(int *)(a3 + 24)];
  return v127;
}

_BYTE *sub_1000A2EB0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 40);
  v10(v6, v7, v8);
  uint64_t v347 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v11 = v347[5];
  uint64_t v12 = &v6[v11];
  uint64_t v13 = &v7[v11];
  uint64_t v335 = v9;
  uint64_t v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v9) = v14(&v6[v11], 1LL, v8);
  int v15 = v14(v13, 1LL, v8);
  uint64_t v331 = v10;
  if ((_DWORD)v9)
  {
    if (!v15)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v335 + 32))(v12, v13, v8);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v335 + 56))(v12, 0LL, 1LL, v8);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(_BYTE *, uint64_t))(v335 + 8))(v12, v8);
LABEL_6:
    uint64_t v16 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  v10(v12, v13, v8);
LABEL_7:
  v6[v347[6]] = v7[v347[6]];
  uint64_t v17 = v347[7];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  uint64_t v20 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v20 - 8) + 40LL))(v18, v19, v20);
  *(void *)&v6[v347[8]] = *(void *)&v7[v347[8]];
  swift_bridgeObjectRelease();
  v6[v347[9]] = v7[v347[9]];
  uint64_t v21 = v347[10];
  uint64_t v22 = &v6[v21];
  uint64_t v23 = &v7[v21];
  uint64_t v24 = v7;
  uint64_t v25 = type metadata accessor for Date(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  v334 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 40);
  v334(v22, v23, v25);
  uint64_t v27 = v347[11];
  uint64_t v340 = v6;
  __n128 v28 = &v6[v27];
  uint64_t v29 = v24;
  uint64_t v30 = &v24[v27];
  uint64_t v345 = v26;
  unint64_t v31 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48);
  LODWORD(v24) = v31(v28, 1LL, v25);
  uint64_t v346 = v25;
  int v32 = v31(v30, 1LL, v25);
  int v343 = a2;
  uint64_t v344 = a1;
  if ((_DWORD)v24)
  {
    if (!v32)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v345 + 32))(v28, v30, v25);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v345 + 56))(v28, 0LL, 1LL, v25);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v32)
  {
    (*(void (**)(_BYTE *, uint64_t))(v345 + 8))(v28, v25);
LABEL_12:
    uint64_t v33 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v28, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_13;
  }

  v334(v28, v30, v25);
LABEL_13:
  int v34 = v29;
  int v35 = v340;
  uint64_t v36 = v347[12];
  uint64_t v37 = &v340[v36];
  uint64_t v38 = &v34[v36];
  _BYTE *v37 = *v38;
  uint64_t v40 = *((void *)v38 + 1);
  uint64_t v39 = *((void *)v38 + 2);
  *((void *)v37 + 1) = v40;
  *((void *)v37 + 2) = v39;
  swift_bridgeObjectRelease();
  v340[v347[13]] = v34[v347[13]];
  uint64_t v41 = v347[14];
  uint64_t v42 = &v340[v41];
  __n128 v43 = &v34[v41];
  uint64_t v44 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v45 = *((void *)v44 - 1);
  uint64_t v46 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v45 + 48);
  int v47 = v46(v42, 1LL, v44);
  int v48 = v46(v43, 1LL, v44);
  uint64_t v339 = v31;
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v335 + 32))(v42, v43, v8);
      *(_OWORD *)&v42[v44[5]] = *(_OWORD *)&v43[v44[5]];
      *(_OWORD *)&v42[v44[6]] = *(_OWORD *)&v43[v44[6]];
      *(_OWORD *)&v42[v44[7]] = *(_OWORD *)&v43[v44[7]];
      *(_DWORD *)&v42[v44[8]] = *(_DWORD *)&v43[v44[8]];
      uint64_t v49 = v44[9];
      uint64_t v50 = &v42[v49];
      uint64_t v51 = &v43[v49];
      *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      uint64_t v52 = v44[10];
      uint64_t v53 = &v42[v52];
      unint64_t v54 = &v43[v52];
      *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
      v53[16] = v54[16];
      uint64_t v55 = v44[11];
      uint64_t v56 = &v42[v55];
      uint64_t v57 = &v43[v55];
      v56[8] = v57[8];
      *(void *)uint64_t v56 = *(void *)v57;
      uint64_t v58 = v44[12];
      uint64_t v59 = &v42[v58];
      uint64_t v60 = &v43[v58];
      *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      v42[v44[13]] = v43[v44[13]];
      v42[v44[14]] = v43[v44[14]];
      *(_OWORD *)&v42[v44[15]] = *(_OWORD *)&v43[v44[15]];
      (*(void (**)(_BYTE *, void, uint64_t, int *))(v45 + 56))(v42, 0LL, 1LL, v44);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v48)
  {
    sub_100018C68((uint64_t)v42, type metadata accessor for AccessoryMetadata);
LABEL_18:
    uint64_t v61 = sub_100004AEC(&qword_1009B9250);
    memcpy(v42, v43, *(void *)(*(void *)(v61 - 8) + 64LL));
    goto LABEL_19;
  }

  v331(v42, v43, v8);
  uint64_t v83 = v44[5];
  uint64_t v84 = *(void *)&v42[v83];
  unint64_t v85 = *(void *)&v42[v83 + 8];
  *(_OWORD *)&v42[v83] = *(_OWORD *)&v43[v83];
  sub_100016F9C(v84, v85);
  uint64_t v86 = v44[6];
  uint64_t v87 = &v42[v86];
  uint64_t v88 = (uint64_t *)&v43[v86];
  uint64_t v90 = *v88;
  uint64_t v89 = v88[1];
  void *v87 = v90;
  v87[1] = v89;
  swift_bridgeObjectRelease();
  uint64_t v91 = v44[7];
  int v92 = &v42[v91];
  uint64_t v93 = (uint64_t *)&v43[v91];
  uint64_t v95 = *v93;
  uint64_t v94 = v93[1];
  *int v92 = v95;
  v92[1] = v94;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v42[v44[8]] = *(_DWORD *)&v43[v44[8]];
  uint64_t v96 = v44[9];
  uint64_t v97 = &v42[v96];
  uint64_t v98 = &v43[v96];
  *(_DWORD *)uint64_t v97 = *(_DWORD *)v98;
  v97[4] = v98[4];
  uint64_t v99 = v44[10];
  uint64_t v100 = &v42[v99];
  uint64_t v101 = &v43[v99];
  *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
  v100[16] = v101[16];
  uint64_t v102 = v44[11];
  uint64_t v103 = &v42[v102];
  uint64_t v104 = &v43[v102];
  *(void *)uint64_t v103 = *(void *)v104;
  v103[8] = v104[8];
  uint64_t v105 = v44[12];
  uint64_t v106 = &v42[v105];
  uint64_t v107 = &v43[v105];
  *(_DWORD *)uint64_t v106 = *(_DWORD *)v107;
  v106[4] = v107[4];
  v42[v44[13]] = v43[v44[13]];
  v42[v44[14]] = v43[v44[14]];
  uint64_t v108 = v44[15];
  uint64_t v109 = &v42[v108];
  uint64_t v110 = (uint64_t *)&v43[v108];
  uint64_t v112 = *v110;
  uint64_t v111 = v110[1];
  *uint64_t v109 = v112;
  v109[1] = v111;
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v62 = v347[15];
  uint64_t v63 = &v340[v62];
  uint64_t v64 = &v34[v62];
  uint64_t v65 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v341 = *((void *)v65 - 1);
  int v66 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v341 + 48);
  int v67 = v66(v63, 1LL, v65);
  int v68 = v66(v64, 1LL, v65);
  if (!v67)
  {
    if (v68)
    {
      sub_100018C68((uint64_t)v63, type metadata accessor for AccessoryProductInfo);
      goto LABEL_25;
    }

    *(void *)uint64_t v63 = *(void *)v64;
    v63[8] = v64[8];
    uint64_t v113 = v65[5];
    uint64_t v114 = &v63[v113];
    __n128 v115 = &v64[v113];
    uint64_t v116 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v116 - 8) + 40LL))(v114, v115, v116);
    v63[v65[6]] = v64[v65[6]];
    v63[v65[7]] = v64[v65[7]];
    uint64_t v117 = v65[8];
    uint64_t v118 = &v63[v117];
    uint64_t v119 = (uint64_t *)&v64[v117];
    uint64_t v121 = *v119;
    uint64_t v120 = v119[1];
    *uint64_t v118 = v121;
    v118[1] = v120;
    swift_bridgeObjectRelease();
    v63[v65[9]] = v64[v65[9]];
    v63[v65[10]] = v64[v65[10]];
    v63[v65[11]] = v64[v65[11]];
    uint64_t v122 = v65[12];
    uint64_t v123 = &v63[v122];
    uint64_t v124 = (uint64_t *)&v64[v122];
    uint64_t v126 = *v124;
    uint64_t v125 = v124[1];
    *uint64_t v123 = v126;
    v123[1] = v125;
    swift_bridgeObjectRelease();
    uint64_t v127 = v65[13];
    uint64_t v128 = &v63[v127];
    uint64_t v129 = (uint64_t *)&v64[v127];
    uint64_t v131 = *v129;
    uint64_t v130 = v129[1];
    *uint64_t v128 = v131;
    v128[1] = v130;
    swift_bridgeObjectRelease();
    uint64_t v132 = v65[14];
    uint64_t v133 = &v63[v132];
    uint64_t v134 = &v64[v132];
    *(void *)uint64_t v133 = *(void *)v134;
    v133[8] = v134[8];
    uint64_t v135 = v65[15];
    unint64_t v136 = &v63[v135];
    uint64_t v137 = (uint64_t *)&v64[v135];
    uint64_t v139 = *v137;
    uint64_t v138 = v137[1];
    *unint64_t v136 = v139;
    v136[1] = v138;
    swift_bridgeObjectRelease();
    uint64_t v140 = v65[16];
    uint64_t v141 = &v63[v140];
    uint64_t v142 = &v64[v140];
    uint64_t v143 = type metadata accessor for URL(0LL);
    uint64_t v337 = *(void *)(v143 - 8);
    __n128 v144 = *(unsigned int (**)(void))(v337 + 48);
    int v145 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v144)(v141, 1LL, v143);
    uint64_t v342 = v143;
    uint64_t v332 = v144;
    int v146 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v144)(v142, 1LL, v143);
    if (v145)
    {
      if (v146)
      {
        uint64_t v147 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v141, v142, *(void *)(*(void *)(v147 - 8) + 64LL));
        uint64_t v148 = v143;
      }

      else
      {
        uint64_t v148 = v143;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 32))(v141, v142, v143);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v337 + 56))(v141, 0LL, 1LL, v143);
      }
    }

    else
    {
      uint64_t v148 = v143;
      if (v146)
      {
        (*(void (**)(_BYTE *, uint64_t))(v337 + 8))(v141, v143);
        uint64_t v164 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v141, v142, *(void *)(*(void *)(v164 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 40))(v141, v142, v143);
      }
    }

    uint64_t v184 = v65[17];
    uint64_t v185 = &v63[v184];
    uint64_t v186 = &v64[v184];
    int v187 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v332)(&v63[v184], 1LL, v148);
    int v188 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v332)(v186, 1LL, v148);
    if (v187)
    {
      if (!v188)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 32))(v185, v186, v143);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v337 + 56))(v185, 0LL, 1LL, v143);
        goto LABEL_56;
      }
    }

    else
    {
      if (!v188)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 40))(v185, v186, v143);
LABEL_56:
        uint64_t v190 = v65[18];
        uint64_t v191 = &v63[v190];
        uint64_t v192 = (uint64_t *)&v64[v190];
        uint64_t v194 = *v192;
        uint64_t v193 = v192[1];
        *uint64_t v191 = v194;
        v191[1] = v193;
        swift_bridgeObjectRelease();
        *(void *)&v63[v65[19]] = *(void *)&v64[v65[19]];
        uint64_t v195 = v65[20];
        uint64_t v196 = &v63[v195];
        uint64_t v197 = &v64[v195];
        uint64_t v198 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
        uint64_t v324 = (void *)*((void *)v198 - 1);
        uint64_t v199 = (uint64_t (*)(_BYTE *, uint64_t, int *))v324[6];
        uint64_t v200 = (uint64_t)v196;
        LODWORD(v196) = v199(v196, 1LL, v198);
        uint64_t v327 = v198;
        __srcb = v197;
        int v201 = v199(v197, 1LL, v198);
        if ((_DWORD)v196)
        {
          if (!v201)
          {
            __int128 v202 = *((_OWORD *)v197 + 1);
            uint64_t v203 = v200;
            *(_OWORD *)uint64_t v200 = *__srcb;
            *(_OWORD *)(v200 + swift_weakDestroy(v0 + 16) = v202;
            *(_OWORD *)(v200 + 32) = __srcb[2];
            *(_WORD *)(v200 + 48) = *((_WORD *)__srcb + 24);
            uint64_t v204 = *((void *)__srcb + 8);
            *(void *)(v200 + 56) = *((void *)__srcb + 7);
            *(void *)(v200 + 64) = v204;
            *(_BYTE *)(v200 + 72) = *((_BYTE *)__srcb + 72);
            uint64_t v205 = v198[10];
            uint64_t v319 = (char *)__srcb + v205;
            __dst = (void *)(v200 + v205);
            uint64_t v206 = v342;
            if (v332())
            {
              uint64_t v207 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
              memcpy(__dst, v319, *(void *)(*(void *)(v207 - 8) + 64LL));
            }

            else
            {
              (*(void (**)(void *, char *, uint64_t))(v337 + 32))(__dst, v319, v342);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v337 + 56))(__dst, 0LL, 1LL, v342);
            }

            uint64_t v220 = v198[11];
            __dsta = (void *)(v203 + v220);
            uint64_t v221 = (char *)__srcb + v220;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v332)((char *)__srcb + v220, 1LL, v342))
            {
              uint64_t v222 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
              memcpy(__dsta, v221, *(void *)(*(void *)(v222 - 8) + 64LL));
              uint64_t v209 = v337;
            }

            else
            {
              __n128 v223 = v221;
              uint64_t v209 = v337;
              (*(void (**)(void *, char *, uint64_t))(v337 + 32))(__dsta, v223, v342);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v337 + 56))(__dsta, 0LL, 1LL, v342);
            }

            uint64_t v224 = v198[12];
            uint64_t v225 = v203 + v224;
            uint64_t v226 = (char *)__srcb + v224;
            *(void *)uint64_t v225 = *(void *)v226;
            *(_BYTE *)(v225 + 8) = v226[8];
            *(_OWORD *)(v203 + v198[13]) = *(_OWORD *)((char *)__srcb + v198[13]);
            *(void *)(v203 + v198[14]) = *(void *)((char *)__srcb + v198[14]);
            *(_OWORD *)(v203 + v198[15]) = *(_OWORD *)((char *)__srcb + v198[15]);
            *(void *)(v203 + v198[16]) = *(void *)((char *)__srcb + v198[16]);
            uint64_t v227 = v198[17];
            uint64_t v228 = v203 + v227;
            uint64_t v229 = (char *)__srcb + v227;
            *(_BYTE *)(v228 + swift_weakDestroy(v0 + 16) = v229[16];
            *(_OWORD *)uint64_t v228 = *(_OWORD *)v229;
            uint64_t v230 = v198[18];
            uint64_t v231 = v203 + v230;
            int v232 = (char *)__srcb + v230;
            *(_BYTE *)(v231 + swift_weakDestroy(v0 + 16) = v232[16];
            *(_OWORD *)uint64_t v231 = *(_OWORD *)v232;
            ((void (*)(uint64_t, void, uint64_t, int *))v324[7])(v203, 0LL, 1LL, v198);
LABEL_85:
            *(_DWORD *)&v63[v65[21]] = *(_DWORD *)&v64[v65[21]];
            *(void *)&v63[v65[22]] = *(void *)&v64[v65[22]];
            swift_bridgeObjectRelease();
            uint64_t v261 = v65[23];
            uint64_t v262 = (uint64_t *)&v63[v261];
            uint64_t v263 = (uint64_t *)&v64[v261];
            unint64_t v264 = *(void *)&v63[v261 + 8];
            if (v264 >> 60 != 15)
            {
              unint64_t v265 = v263[1];
              if (v265 >> 60 != 15)
              {
                uint64_t v266 = *v262;
                uint64_t *v262 = *v263;
                v262[1] = v265;
                sub_100016F9C(v266, v264);
LABEL_90:
                uint64_t v267 = v65[24];
                uint64_t v268 = (uint64_t *)&v63[v267];
                uint64_t v269 = (uint64_t *)&v64[v267];
                unint64_t v270 = *(void *)&v63[v267 + 8];
                if (v270 >> 60 != 15)
                {
                  unint64_t v271 = v269[1];
                  if (v271 >> 60 != 15)
                  {
                    uint64_t v272 = *v268;
                    *uint64_t v268 = *v269;
                    v268[1] = v271;
                    sub_100016F9C(v272, v270);
                    goto LABEL_95;
                  }

                  sub_100041D4C((uint64_t)v268);
                }

                *(_OWORD *)uint64_t v268 = *(_OWORD *)v269;
LABEL_95:
                uint64_t v273 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v209 + 40);
                v273(&v63[v65[25]], &v64[v65[25]], v206);
                v273(&v63[v65[26]], &v64[v65[26]], v206);
                v273(&v63[v65[27]], &v64[v65[27]], v206);
                v273(&v63[v65[28]], &v64[v65[28]], v206);
                v273(&v63[v65[29]], &v64[v65[29]], v206);
                v273(&v63[v65[30]], &v64[v65[30]], v206);
                uint64_t v274 = v65[31];
                uint64_t v275 = &v63[v274];
                os_log_type_t v276 = (uint64_t *)&v64[v274];
                uint64_t v278 = *v276;
                uint64_t v277 = v276[1];
                *uint64_t v275 = v278;
                v275[1] = v277;
                swift_bridgeObjectRelease();
                *(void *)&v63[v65[32]] = *(void *)&v64[v65[32]];
                swift_bridgeObjectRelease();
                uint64_t v279 = v65[33];
                v280 = &v63[v279];
                __int128 v281 = (uint64_t *)&v64[v279];
                uint64_t v283 = *v281;
                uint64_t v282 = v281[1];
                void *v280 = v283;
                v280[1] = v282;
                swift_bridgeObjectRelease();
                *(void *)&v63[v65[34]] = *(void *)&v64[v65[34]];
                swift_bridgeObjectRelease();
                uint64_t v284 = v65[35];
                uint64_t v285 = &v63[v284];
                uint64_t v286 = &v64[v284];
                *(_OWORD *)uint64_t v285 = *(_OWORD *)v286;
                v285[16] = v286[16];
                uint64_t v287 = v65[36];
                uint64_t v288 = &v63[v287];
                unint64_t v289 = &v64[v287];
                v288[16] = v289[16];
                *(_OWORD *)uint64_t v288 = *(_OWORD *)v289;
                v273(&v63[v65[37]], &v64[v65[37]], v206);
                v273(&v63[v65[38]], &v64[v65[38]], v206);
                v273(&v63[v65[39]], &v64[v65[39]], v206);
                v273(&v63[v65[40]], &v64[v65[40]], v206);
                v273(&v63[v65[41]], &v64[v65[41]], v206);
                v273(&v63[v65[42]], &v64[v65[42]], v206);
                v63[v65[43]] = v64[v65[43]];
                v63[v65[44]] = v64[v65[44]];
                v63[v65[45]] = v64[v65[45]];
                uint64_t v290 = v65[46];
                uint64_t v291 = &v63[v290];
                uint64_t v292 = (uint64_t *)&v64[v290];
                uint64_t v294 = *v292;
                uint64_t v293 = v292[1];
                *uint64_t v291 = v294;
                v291[1] = v293;
                swift_bridgeObjectRelease();
                uint64_t v295 = v65[47];
                uint64_t v296 = &v63[v295];
                uint64_t v297 = (uint64_t *)&v64[v295];
                uint64_t v299 = *v297;
                uint64_t v298 = v297[1];
                *uint64_t v296 = v299;
                v296[1] = v298;
                swift_bridgeObjectRelease();
                goto LABEL_96;
              }

              sub_100041D4C((uint64_t)v262);
            }

            *(_OWORD *)uint64_t v262 = *(_OWORD *)v263;
            goto LABEL_90;
          }

LABEL_62:
          uint64_t v208 = sub_100004AEC(&qword_1009A6DD0);
          memcpy((void *)v200, v197, *(void *)(*(void *)(v208 - 8) + 64LL));
          uint64_t v209 = v337;
          uint64_t v206 = v342;
          goto LABEL_85;
        }

        if (v201)
        {
          sub_100018C68(v200, type metadata accessor for AccessoryInfoResponseContent.Configuration);
          goto LABEL_62;
        }

        uint64_t v210 = *((void *)v197 + 1);
        uint64_t v211 = v200;
        *(void *)uint64_t v200 = *(void *)__srcb;
        *(void *)(v200 + 8) = v210;
        swift_bridgeObjectRelease();
        uint64_t v212 = *((void *)__srcb + 3);
        *(void *)(v200 + swift_weakDestroy(v0 + 16) = *((void *)__srcb + 2);
        *(void *)(v200 + 24) = v212;
        swift_bridgeObjectRelease();
        uint64_t v213 = *((void *)__srcb + 5);
        *(void *)(v200 + 32) = *((void *)__srcb + 4);
        *(void *)(v200 + 40) = v213;
        swift_bridgeObjectRelease();
        *(_WORD *)(v200 + 48) = *((_WORD *)__srcb + 24);
        uint64_t v214 = *((void *)__srcb + 8);
        *(void *)(v200 + 56) = *((void *)__srcb + 7);
        *(void *)(v200 + 64) = v214;
        *(_BYTE *)(v200 + 72) = *((_BYTE *)__srcb + 72);
        uint64_t v215 = v198[10];
        __n128 v216 = (char *)__srcb + v215;
        uint64_t v325 = (void *)(v200 + v215);
        unsigned int v320 = v332();
        int v217 = ((uint64_t (*)(char *, uint64_t, uint64_t))v332)(v216, 1LL, v342);
        if (v320)
        {
          if (v217)
          {
            uint64_t v218 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
            memcpy(v325, v216, *(void *)(*(void *)(v218 - 8) + 64LL));
            uint64_t v219 = v342;
          }

          else
          {
            uint64_t v219 = v342;
            (*(void (**)(void *, char *, uint64_t))(v337 + 32))(v325, v216, v342);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v337 + 56))(v325, 0LL, 1LL, v342);
          }
        }

        else
        {
          uint64_t v219 = v342;
          if (v217)
          {
            (*(void (**)(void *, uint64_t))(v337 + 8))(v325, v342);
            uint64_t v233 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
            memcpy(v325, v216, *(void *)(*(void *)(v233 - 8) + 64LL));
          }

          else
          {
            (*(void (**)(void *, char *, uint64_t))(v337 + 40))(v325, v216, v342);
          }
        }

        uint64_t v234 = v198[11];
        unint64_t v235 = (char *)__srcb + v234;
        __dstb = (void *)(v211 + v234);
        unsigned int v236 = v332();
        int v237 = ((uint64_t (*)(char *, uint64_t, uint64_t))v332)(v235, 1LL, v219);
        if (v236)
        {
          if (v237)
          {
            uint64_t v238 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
            memcpy(__dstb, v235, *(void *)(*(void *)(v238 - 8) + 64LL));
            uint64_t v239 = v342;
            uint64_t v240 = v327;
            uint64_t v209 = v337;
LABEL_84:
            uint64_t v242 = v240[12];
            uint64_t v243 = v211 + v242;
            int v244 = (char *)__srcb + v242;
            *(void *)uint64_t v243 = *(void *)v244;
            *(_BYTE *)(v243 + 8) = v244[8];
            uint64_t v245 = v240[13];
            uint64_t v246 = (void *)(v211 + v245);
            uint64_t v247 = (uint64_t *)((char *)__srcb + v245);
            uint64_t v249 = *v247;
            uint64_t v248 = v247[1];
            void *v246 = v249;
            v246[1] = v248;
            swift_bridgeObjectRelease();
            *(void *)(v211 + v240[14]) = *(void *)((char *)__srcb + v240[14]);
            swift_bridgeObjectRelease();
            uint64_t v250 = v240[15];
            __n128 v251 = (void *)(v211 + v250);
            uint64_t v252 = (uint64_t *)((char *)__srcb + v250);
            uint64_t v254 = *v252;
            uint64_t v253 = v252[1];
            void *v251 = v254;
            v251[1] = v253;
            swift_bridgeObjectRelease();
            *(void *)(v211 + v240[16]) = *(void *)((char *)__srcb + v240[16]);
            swift_bridgeObjectRelease();
            uint64_t v255 = v240[17];
            uint64_t v256 = v211 + v255;
            uint64_t v257 = (char *)__srcb + v255;
            *(_OWORD *)uint64_t v256 = *(_OWORD *)v257;
            *(_BYTE *)(v256 + swift_weakDestroy(v0 + 16) = v257[16];
            uint64_t v258 = v240[18];
            uint64_t v259 = v211 + v258;
            uint64_t v260 = (char *)__srcb + v258;
            *(_BYTE *)(v259 + swift_weakDestroy(v0 + 16) = v260[16];
            *(_OWORD *)uint64_t v259 = *(_OWORD *)v260;
            uint64_t v206 = v239;
            goto LABEL_85;
          }

          uint64_t v209 = v337;
          (*(void (**)(void *, char *, uint64_t))(v337 + 32))(__dstb, v235, v342);
          uint64_t v239 = v342;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v337 + 56))(__dstb, 0LL, 1LL, v342);
        }

        else
        {
          uint64_t v209 = v337;
          uint64_t v239 = v342;
          if (v237)
          {
            (*(void (**)(void *))(v337 + 8))(__dstb);
            uint64_t v241 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
            memcpy(__dstb, v235, *(void *)(*(void *)(v241 - 8) + 64LL));
          }

          else
          {
            (*(void (**)(void *, char *))(v337 + 40))(__dstb, v235);
          }
        }

        uint64_t v240 = v327;
        goto LABEL_84;
      }

      (*(void (**)(_BYTE *, uint64_t))(v337 + 8))(v185, v143);
    }

    uint64_t v189 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v185, v186, *(void *)(*(void *)(v189 - 8) + 64LL));
    goto LABEL_56;
  }

  if (v68)
  {
LABEL_25:
    uint64_t v82 = sub_100004AEC(&qword_10099CE68);
    memcpy(v63, v64, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_96;
  }

  *(void *)uint64_t v63 = *(void *)v64;
  v63[8] = v64[8];
  uint64_t v69 = v65[5];
  uint64_t v70 = &v63[v69];
  uint64_t v71 = &v64[v69];
  uint64_t v72 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v72 - 8) + 32LL))(v70, v71, v72);
  v63[v65[6]] = v64[v65[6]];
  v63[v65[7]] = v64[v65[7]];
  *(_OWORD *)&v63[v65[8]] = *(_OWORD *)&v64[v65[8]];
  v63[v65[9]] = v64[v65[9]];
  v63[v65[10]] = v64[v65[10]];
  v63[v65[11]] = v64[v65[11]];
  *(_OWORD *)&v63[v65[12]] = *(_OWORD *)&v64[v65[12]];
  *(_OWORD *)&v63[v65[13]] = *(_OWORD *)&v64[v65[13]];
  uint64_t v73 = v65[14];
  uint64_t v74 = &v63[v73];
  uint64_t v75 = &v64[v73];
  v74[8] = v75[8];
  *(void *)uint64_t v74 = *(void *)v75;
  *(_OWORD *)&v63[v65[15]] = *(_OWORD *)&v64[v65[15]];
  uint64_t v76 = v65[16];
  uint64_t v77 = &v63[v76];
  uint64_t v78 = &v64[v76];
  uint64_t v79 = type metadata accessor for URL(0LL);
  uint64_t v80 = *(void *)(v79 - 8);
  int v336 = *(unsigned int (**)(void))(v80 + 48);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v336)(v78, 1LL, v79))
  {
    uint64_t v81 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0LL, 1LL, v79);
  }

  uint64_t v149 = v65[17];
  uint64_t v150 = &v63[v149];
  uint64_t v151 = &v64[v149];
  uint64_t v333 = v80;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v336)(&v64[v149], 1LL, v79))
  {
    uint64_t v152 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v150, v151, *(void *)(*(void *)(v152 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 32))(v150, v151, v79);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v80 + 56))(v150, 0LL, 1LL, v79);
  }

  *(_OWORD *)&v63[v65[18]] = *(_OWORD *)&v64[v65[18]];
  *(void *)&v63[v65[19]] = *(void *)&v64[v65[19]];
  uint64_t v153 = v65[20];
  uint64_t v154 = &v63[v153];
  uint64_t v155 = &v64[v153];
  uint64_t v156 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v157 = *((void *)v156 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v157 + 48))(v155, 1LL, v156))
  {
    uint64_t v158 = sub_100004AEC(&qword_1009A6DD0);
    memcpy(v154, v155, *(void *)(*(void *)(v158 - 8) + 64LL));
  }

  else
  {
    uint64_t v326 = v157;
    __int128 v159 = v155[1];
    *uint64_t v154 = *v155;
    v154[1] = v159;
    v154[2] = v155[2];
    *((_WORD *)v154 + 24) = *((_WORD *)v155 + 24);
    uint64_t v160 = *((void *)v155 + 8);
    *((void *)v154 + 7) = *((void *)v155 + 7);
    *((void *)v154 + 8) = v160;
    *((_BYTE *)v154 + 72) = *((_BYTE *)v155 + 72);
    uint64_t v161 = v156[10];
    uint64_t v162 = (char *)v154 + v161;
    __src = (char *)v155 + v161;
    if (v336())
    {
      uint64_t v163 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v162, __src, *(void *)(*(void *)(v163 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v333 + 32))(v162, __src, v79);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v333 + 56))(v162, 0LL, 1LL, v79);
    }

    uint64_t v165 = v156[11];
    uint64_t v166 = (char *)v154 + v165;
    __srca = (char *)v155 + v165;
    if (v336())
    {
      uint64_t v167 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v166, __srca, *(void *)(*(void *)(v167 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v333 + 32))(v166, __srca, v79);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v333 + 56))(v166, 0LL, 1LL, v79);
    }

    uint64_t v168 = v156[12];
    uint64_t v169 = (char *)v154 + v168;
    uint64_t v170 = (char *)v155 + v168;
    *(void *)uint64_t v169 = *(void *)v170;
    v169[8] = v170[8];
    *(_OWORD *)((char *)v154 + v156[13]) = *(_OWORD *)((char *)v155 + v156[13]);
    *(void *)((char *)v154 + v156[14]) = *(void *)((char *)v155 + v156[14]);
    *(_OWORD *)((char *)v154 + v156[15]) = *(_OWORD *)((char *)v155 + v156[15]);
    *(void *)((char *)v154 + v156[16]) = *(void *)((char *)v155 + v156[16]);
    uint64_t v171 = v156[17];
    __n128 v172 = (char *)v154 + v171;
    uint64_t v173 = (char *)v155 + v171;
    v172[16] = v173[16];
    *(_OWORD *)__n128 v172 = *(_OWORD *)v173;
    uint64_t v174 = v156[18];
    uint64_t v175 = (char *)v154 + v174;
    uint64_t v176 = (char *)v155 + v174;
    v175[16] = v176[16];
    *(_OWORD *)uint64_t v175 = *(_OWORD *)v176;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v326 + 56))(v154, 0LL, 1LL, v156);
  }

  *(_DWORD *)&v63[v65[21]] = *(_DWORD *)&v64[v65[21]];
  *(void *)&v63[v65[22]] = *(void *)&v64[v65[22]];
  *(_OWORD *)&v63[v65[23]] = *(_OWORD *)&v64[v65[23]];
  *(_OWORD *)&v63[v65[24]] = *(_OWORD *)&v64[v65[24]];
  uint64_t v177 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v333 + 32);
  v177(&v63[v65[25]], &v64[v65[25]], v79);
  v177(&v63[v65[26]], &v64[v65[26]], v79);
  v177(&v63[v65[27]], &v64[v65[27]], v79);
  v177(&v63[v65[28]], &v64[v65[28]], v79);
  v177(&v63[v65[29]], &v64[v65[29]], v79);
  v177(&v63[v65[30]], &v64[v65[30]], v79);
  *(_OWORD *)&v63[v65[31]] = *(_OWORD *)&v64[v65[31]];
  *(void *)&v63[v65[32]] = *(void *)&v64[v65[32]];
  *(_OWORD *)&v63[v65[33]] = *(_OWORD *)&v64[v65[33]];
  *(void *)&v63[v65[34]] = *(void *)&v64[v65[34]];
  uint64_t v178 = v65[35];
  unint64_t v179 = &v63[v178];
  uint64_t v180 = &v64[v178];
  v179[16] = v180[16];
  *(_OWORD *)unint64_t v179 = *(_OWORD *)v180;
  uint64_t v181 = v65[36];
  uint64_t v182 = &v63[v181];
  unint64_t v183 = &v64[v181];
  v182[16] = v183[16];
  *(_OWORD *)uint64_t v182 = *(_OWORD *)v183;
  v177(&v63[v65[37]], &v64[v65[37]], v79);
  v177(&v63[v65[38]], &v64[v65[38]], v79);
  v177(&v63[v65[39]], &v64[v65[39]], v79);
  v177(&v63[v65[40]], &v64[v65[40]], v79);
  v177(&v63[v65[41]], &v64[v65[41]], v79);
  v177(&v63[v65[42]], &v64[v65[42]], v79);
  v63[v65[43]] = v64[v65[43]];
  v63[v65[44]] = v64[v65[44]];
  v63[v65[45]] = v64[v65[45]];
  *(_OWORD *)&v63[v65[46]] = *(_OWORD *)&v64[v65[46]];
  *(_OWORD *)&v63[v65[47]] = *(_OWORD *)&v64[v65[47]];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v341 + 56))(v63, 0LL, 1LL, v65);
LABEL_96:
  v35[v347[16]] = v34[v347[16]];
  *(void *)&v35[v347[17]] = *(void *)&v34[v347[17]];
  swift_bridgeObjectRelease();
  uint64_t v300 = v347[18];
  uint64_t v301 = &v35[v300];
  uint64_t v302 = &v34[v300];
  int v303 = v339(&v35[v300], 1LL, v346);
  int v304 = v339(v302, 1LL, v346);
  if (v303)
  {
    if (!v304)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v345 + 32))(v301, v302, v346);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v345 + 56))(v301, 0LL, 1LL, v346);
      goto LABEL_102;
    }

    goto LABEL_101;
  }

  if (v304)
  {
    (*(void (**)(_BYTE *, uint64_t))(v345 + 8))(v301, v346);
LABEL_101:
    uint64_t v305 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v301, v302, *(void *)(*(void *)(v305 - 8) + 64LL));
    goto LABEL_102;
  }

  v334(v301, v302, v346);
LABEL_102:
  uint64_t v306 = v347[19];
  uint64_t v307 = &v35[v306];
  uint64_t v308 = &v34[v306];
  int v309 = v339(&v35[v306], 1LL, v346);
  int v310 = v339(v308, 1LL, v346);
  if (v309)
  {
    if (!v310)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v345 + 32))(v307, v308, v346);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v345 + 56))(v307, 0LL, 1LL, v346);
      goto LABEL_108;
    }

    goto LABEL_107;
  }

  if (v310)
  {
    (*(void (**)(_BYTE *, uint64_t))(v345 + 8))(v307, v346);
LABEL_107:
    uint64_t v311 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v307, v308, *(void *)(*(void *)(v311 - 8) + 64LL));
    goto LABEL_108;
  }

  v334(v307, v308, v346);
LABEL_108:
  uint64_t v312 = v347[20];
  uint64_t v313 = (uint64_t *)&v35[v312];
  uint64_t v314 = (uint64_t *)&v34[v312];
  unint64_t v315 = *(void *)&v35[v312 + 8];
  if (((v315 >> 60) | 4) != 0xF)
  {
    unint64_t v316 = v314[1];
    if (((v316 >> 60) | 4) != 0xF)
    {
      uint64_t v318 = *v313;
      uint64_t *v313 = *v314;
      v313[1] = v316;
      sub_100016F9C(v318, v315);
      goto LABEL_112;
    }

    sub_1000A236C((uint64_t)v313);
  }

  *(_OWORD *)uint64_t v313 = *(_OWORD *)v314;
LABEL_112:
  v35[v347[21]] = v34[v347[21]];
  *(_WORD *)&v35[v347[22]] = *(_WORD *)&v34[v347[22]];
  v344[*(int *)(a3 + 24)] = v343[*(int *)(a3 + 24)];
  return v344;
}

    sub_1003CB4BC((unint64_t *)&v82, &v81, (uint64_t *)&v80);
    return 1LL;
  }

      __break(1u);
      goto LABEL_63;
    }

    uint64_t v155 = v51;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v59(v34, v54, v20);
    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    uint64_t v154 = qword_100A2A6C8;
    v58(v156, (unint64_t)v34, v20);
    if (qword_10099B6A0 != -1) {
      swift_once(&qword_10099B6A0, sub_100626B90);
    }
    aBlock = 7.45683732e247;
    *(double *)&uint64_t v161 = -5.98008217e197;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v159, &aBlock, sub_10000A71C, 0LL, &type metadata for Bool);
    swift_bridgeObjectRelease();
    if (v159 == 1)
    {
      uint64_t v60 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
      uint64_t v61 = [v60 isInternalBuild];

      if (v61)
      {
        if (qword_10099B020 != -1) {
          swift_once(&qword_10099B020, sub_10000A320);
        }
        uint64_t v62 = sub_10000A720(v137, (uint64_t)qword_10099C630);
        swift_beginAccess(v62, v157, 0LL, 0LL);
        uint64_t v63 = v62;
        uint64_t v64 = v136;
        sub_10001581C(v63, v136, (uint64_t *)&unk_10099D720);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v64, 1LL, v153) != 1)
        {
          uint64_t v42 = v143;
          (*(void (**)(void))(v53 + 32))();
          goto LABEL_8;
        }

        sub_100015794(v64, (uint64_t *)&unk_10099D720);
      }
    }

    My = type metadata accessor for Feature.FindMy(0LL);
    uint64_t v163 = (void *)My;
    uint64_t v164 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    int v66 = sub_10000A7C8(&aBlock);
    (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))(v66, v142, My);
    LOBYTE(My) = isFeatureEnabled(_:)(&aBlock);
    int v67 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if ((My & 1) == 0)
    {
      uint64_t v42 = v143;
      Date.init()(v67);
      goto LABEL_8;
    }

    sub_10063090C();
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_10099B6B0 != -1) {
      swift_once(&qword_10099B6B0, sub_1006307C8);
    }
    uint64_t v69 = qword_1009B8F50;
    uint64_t v70 = sub_100004AEC(&qword_10099CA88);
    uint64_t v71 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100015878, 0LL, v69, v139, v70);
    if (Current - aBlock - *(double *)&v161 > 86400.0)
    {
      OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10001588C,  0LL,  qword_1009B8F50,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
      uint64_t v138 = v31;
      uint64_t v72 = type metadata accessor for TaskPriority(0LL);
      uint64_t v73 = *(void *)(v72 - 8);
      uint64_t v74 = (uint64_t)v135;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56))(v135, 1LL, 1LL, v72);
      uint64_t v75 = swift_allocObject(&unk_100954B88, 32LL, 7LL);
      *(void *)(v75 + swift_weakDestroy(v0 + 16) = 0LL;
      uint64_t v76 = (uint64_t *)(v75 + 16);
      *(void *)(v75 + 24) = 0LL;
      uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v74, 1LL, v72);
      if ((_DWORD)v77 == 1)
      {
        sub_100015794(v74, &qword_1009A9BF0);
        uint64_t v78 = 0LL;
        uint64_t v79 = *v76;
        if (*v76) {
          goto LABEL_43;
        }
LABEL_47:
        uint64_t v82 = 0LL;
        uint64_t v84 = 0LL;
      }

      else
      {
        LOBYTE(v78) = TaskPriority.rawValue.getter(v77);
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v72);
        uint64_t v78 = v78;
        uint64_t v79 = *v76;
        if (!*v76) {
          goto LABEL_47;
        }
LABEL_43:
        uint64_t v80 = *(void *)(v75 + 24);
        uint64_t ObjectType = swift_getObjectType(v79);
        swift_unknownObjectRetain(v79);
        uint64_t v82 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v80);
        uint64_t v84 = v83;
        swift_unknownObjectRelease(v79);
      }

      uint64_t v42 = v143;
      unint64_t v85 = swift_allocObject(&unk_100954BB0, 32LL, 7LL);
      *(void *)(v85 + swift_weakDestroy(v0 + 16) = &unk_1009AAF18;
      *(void *)(v85 + 24) = v75;
      if (v84 | v82)
      {
        v158[0] = 0LL;
        v158[1] = 0LL;
        uint64_t v86 = v158;
        v158[2] = v82;
        v158[3] = v84;
      }

      else
      {
        uint64_t v86 = 0LL;
      }

      unint64_t v31 = v138;
      uint64_t v53 = v152;
      swift_task_create(v78 | 0x1C00, v86, (char *)&type metadata for () + 8, &unk_1009AAF20, v85);
      uint64_t v71 = swift_release();
      goto LABEL_52;
    }

    uint64_t v42 = v143;
LABEL_52:
    Date.init(timeIntervalSinceReferenceDate:)(v71);
LABEL_8:
    __n128 v43 = (uint64_t)v147;
    v59(v147, v156, v20);
    uint64_t v44 = v149;
    (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v43 + *(int *)(v149 + 20), v42, v153);
    *(_BYTE *)(v43 + *(int *)(v44 + swift_release(*(void *)(v0 + 24)) = v145;
    uint64_t v45 = sub_100004AEC(&qword_10099D318);
    uint64_t v46 = *(unsigned __int8 *)(v148 + 80);
    int v47 = (v46 + 32) & ~v46;
    int v48 = swift_allocObject(v45, v47 + *(void *)(v148 + 72), v46 | 7);
    *(_OWORD *)(v48 + swift_weakDestroy(v0 + 16) = v144;
    sub_10001DC4C(v43, v48 + v47, type metadata accessor for BeaconObservation);
    uint64_t v49 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v49);
    *(&v116 - 4) = v154;
    *(&v116 - 3) = v48;
    *(&v116 - 2) = 0LL;
    *(&v116 - 1) = 0LL;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
    swift_bridgeObjectRelease();
    sub_100018C68(v43, type metadata accessor for BeaconObservation);
    int v34 = v146;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v146, v20);
    uint64_t v40 = v155;
  }

  uint64_t v57 = v41 + 1;
  if (v41 + 1 >= v141) {
    goto LABEL_58;
  }
  uint64_t v56 = *(void *)(v140 + 8 * v57);
  if (v56) {
    goto LABEL_24;
  }
  uint64_t v57 = v41 + 2;
  if (v41 + 2 >= v141) {
    goto LABEL_58;
  }
  uint64_t v56 = *(void *)(v140 + 8 * v57);
  if (v56) {
    goto LABEL_24;
  }
  uint64_t v57 = v41 + 3;
  if (v41 + 3 >= v141) {
    goto LABEL_58;
  }
  uint64_t v56 = *(void *)(v140 + 8 * v57);
  if (v56) {
    goto LABEL_24;
  }
  uint64_t v57 = v41 + 4;
  if (v41 + 4 >= v141) {
    goto LABEL_58;
  }
  uint64_t v56 = *(void *)(v140 + 8 * v57);
  if (v56) {
    goto LABEL_24;
  }
  uint64_t v57 = v41 + 5;
  if (v41 + 5 >= v141)
  {
LABEL_58:
    uint64_t v87 = v130;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v150, 1LL, 1LL, v20);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }

  uint64_t v56 = *(void *)(v140 + 8 * v57);
  if (v56)
  {
LABEL_24:
    uint64_t v41 = v57;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v41 = v57 + 1;
    if (__OFADD__(v57, 1LL)) {
      break;
    }
    if (v41 >= v141) {
      goto LABEL_58;
    }
    uint64_t v56 = *(void *)(v140 + 8 * v41);
    ++v57;
    if (v56) {
      goto LABEL_25;
    }
  }

            uint64_t v252 = v123[11];
            uint64_t v253 = &v122[v252];
            uint64_t v340 = (void *)(v121 + v252);
            uint64_t v254 = ((uint64_t (*)(void))v80)();
            uint64_t v255 = v80(v253, 1LL, v78);
            if (v254)
            {
              if (!v255)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 16))(v340, v253, v78);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v344 + 56))(v340, 0LL, 1LL, v78);
                goto LABEL_70;
              }

              uint64_t v256 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
              uint64_t v257 = v340;
            }

            else
            {
              if (!v255)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 24))(v340, v253, v78);
                goto LABEL_70;
              }

              (*(void (**)(void *, uint64_t))(v344 + 8))(v340, v78);
              uint64_t v256 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
              uint64_t v257 = v340;
            }

            memcpy(v257, v253, v256);
LABEL_70:
            uint64_t v258 = v123[12];
            uint64_t v259 = v121 + v258;
            uint64_t v260 = &v122[v258];
            uint64_t v261 = *(void *)v260;
            *(_BYTE *)(v259 + 8) = v260[8];
            *(void *)uint64_t v259 = v261;
            uint64_t v262 = v123[13];
            uint64_t v263 = (void *)(v121 + v262);
            unint64_t v264 = &v122[v262];
            uint64_t *v263 = *v264;
            unint64_t v265 = v264[1];
            v263[1] = v265;
            swift_bridgeObjectRetain(v265);
            swift_bridgeObjectRelease();
            uint64_t v266 = v123[14];
            uint64_t v267 = *(void *)&v122[v266];
            *(void *)(v121 + v266) = v267;
            swift_bridgeObjectRetain(v267);
            swift_bridgeObjectRelease();
            uint64_t v268 = v123[15];
            uint64_t v269 = (void *)(v121 + v268);
            unint64_t v270 = &v122[v268];
            *uint64_t v269 = *v270;
            unint64_t v271 = v270[1];
            v269[1] = v271;
            swift_bridgeObjectRetain(v271);
            swift_bridgeObjectRelease();
            uint64_t v272 = v123[16];
            uint64_t v273 = *(void *)&v122[v272];
            *(void *)(v121 + v272) = v273;
            swift_bridgeObjectRetain(v273);
            swift_bridgeObjectRelease();
            uint64_t v274 = v123[17];
            uint64_t v275 = v121 + v274;
            os_log_type_t v276 = &v122[v274];
            uint64_t v277 = *(_OWORD *)v276;
            *(_BYTE *)(v275 + swift_weakDestroy(v0 + 16) = v276[16];
            *(_OWORD *)uint64_t v275 = v277;
            uint64_t v278 = v123[18];
            uint64_t v279 = v121 + v278;
            v280 = &v122[v278];
            __int128 v281 = *(_OWORD *)v280;
            *(_BYTE *)(v279 + swift_weakDestroy(v0 + 16) = v280[16];
            *(_OWORD *)uint64_t v279 = v281;
            goto LABEL_71;
          }

          (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v111, v78);
        }

        __n128 v115 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v111, v112, *(void *)(*(void *)(v115 - 8) + 64LL));
        goto LABEL_28;
      }

      (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v76, v78);
    }

    uint64_t v109 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v76, v77, *(void *)(*(void *)(v109 - 8) + 64LL));
    goto LABEL_22;
  }

  if (v15)
  {
LABEL_7:
    uint64_t v49 = sub_100004AEC(&qword_10099CE68);
    memcpy(v9, v10, *(void *)(*(void *)(v49 - 8) + 64LL));
    return v5;
  }

  __src = v12;
  uint64_t v345 = v5;
  uint64_t v16 = *(void *)v10;
  v9[8] = v10[8];
  *(void *)uint64_t v9 = v16;
  uint64_t v17 = v11[5];
  uint64_t v18 = &v9[v17];
  uint64_t v19 = &v10[v17];
  uint64_t v20 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v20 - 8) + 16LL))(v18, v19, v20);
  v9[v11[6]] = v10[v11[6]];
  v9[v11[7]] = v10[v11[7]];
  uint64_t v21 = v11[8];
  uint64_t v22 = &v9[v21];
  uint64_t v23 = &v10[v21];
  *uint64_t v22 = *v23;
  uint64_t v335 = (void *)v23[1];
  v22[1] = v335;
  v9[v11[9]] = v10[v11[9]];
  v9[v11[10]] = v10[v11[10]];
  v9[v11[11]] = v10[v11[11]];
  uint64_t v24 = v11[12];
  uint64_t v25 = &v9[v24];
  uint64_t v26 = &v10[v24];
  *uint64_t v25 = *v26;
  uint64_t v27 = v26[1];
  v25[1] = v27;
  __n128 v28 = v11[13];
  uint64_t v29 = &v9[v28];
  uint64_t v30 = &v10[v28];
  *uint64_t v29 = *v30;
  unint64_t v31 = v30[1];
  v29[1] = v31;
  int v32 = v11[14];
  uint64_t v33 = &v9[v32];
  int v34 = &v10[v32];
  int v35 = v34[8];
  *(void *)uint64_t v33 = *(void *)v34;
  v33[8] = v35;
  uint64_t v36 = v11[15];
  uint64_t v37 = &v9[v36];
  uint64_t v38 = &v10[v36];
  _BYTE *v37 = *v38;
  uint64_t v39 = v38[1];
  v37[1] = v39;
  uint64_t v40 = v11[16];
  __dst = &v9[v40];
  uint64_t v41 = &v10[v40];
  uint64_t v42 = type metadata accessor for URL(0LL);
  __n128 v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
  swift_bridgeObjectRetain(v335);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v31);
  uint64_t v45 = v39;
  uint64_t v46 = v44;
  int v47 = swift_bridgeObjectRetain(v45);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v44)(v41, 1LL, v42, v47))
  {
    int v48 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(__dst, v41, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 16))(__dst, v41, v42);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v43 + 56))(__dst, 0LL, 1LL, v42);
  }

  uint64_t v83 = v43;
  uint64_t v84 = v11[17];
  unint64_t v85 = &v9[v84];
  uint64_t v86 = &v10[v84];
  int v343 = v83;
  uint64_t v331 = v46;
  if (v46(&v10[v84], 1LL, v42))
  {
    uint64_t v87 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v85, v86, *(void *)(*(void *)(v87 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v83 + 16))(v85, v86, v42);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v83 + 56))(v85, 0LL, 1LL, v42);
  }

  uint64_t v88 = v11[18];
  uint64_t v89 = &v9[v88];
  uint64_t v90 = &v10[v88];
  *uint64_t v89 = *v90;
  uint64_t v91 = v90[1];
  v89[1] = v91;
  *(void *)&v9[v11[19]] = *(void *)&v10[v11[19]];
  int v92 = v11[20];
  uint64_t v93 = &v9[v92];
  uint64_t v94 = &v10[v92];
  uint64_t v95 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v96 = (void *)*((void *)v95 - 1);
  uint64_t v97 = (unsigned int (*)(void *, uint64_t, int *, __n128))v96[6];
  uint64_t v98 = swift_bridgeObjectRetain(v91);
  if (v97(v94, 1LL, v95, v98))
  {
    uint64_t v99 = sub_100004AEC(&qword_1009A6DD0);
    memcpy(v93, v94, *(void *)(*(void *)(v99 - 8) + 64LL));
  }

  else
  {
    __dsta = v96;
    *uint64_t v93 = *v94;
    uint64_t v100 = v94[1];
    v93[1] = v100;
    v93[2] = v94[2];
    uint64_t v101 = v94[3];
    v93[3] = v101;
    v93[4] = v94[4];
    uint64_t v102 = v94[5];
    v93[5] = v102;
    *((_WORD *)v93 + 24) = *((_WORD *)v94 + 24);
    v93[7] = v94[7];
    uint64_t v103 = v94[8];
    *((_BYTE *)v93 + 72) = *((_BYTE *)v94 + 72);
    v93[8] = v103;
    uint64_t v104 = v95[10];
    int v336 = (char *)v93 + v104;
    uint64_t v105 = (char *)v94 + v104;
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v101);
    uint64_t v106 = swift_bridgeObjectRetain(v102);
    uint64_t v107 = v331;
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v331)(v105, 1LL, v42, v106))
    {
      uint64_t v108 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v336, v105, *(void *)(*(void *)(v108 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v343 + 16))(v336, v105, v42);
      uint64_t v107 = v331;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v343 + 56))(v336, 0LL, 1LL, v42);
    }

    unint64_t v136 = v95[11];
    uint64_t v137 = (char *)v93 + v136;
    uint64_t v138 = (char *)v94 + v136;
    if (v107((char *)v94 + v136, 1LL, v42))
    {
      uint64_t v139 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v137, v138, *(void *)(*(void *)(v139 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v343 + 16))(v137, v138, v42);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v343 + 56))(v137, 0LL, 1LL, v42);
    }

    uint64_t v140 = v95[12];
    uint64_t v141 = (char *)v93 + v140;
    uint64_t v142 = (char *)v94 + v140;
    uint64_t v143 = *(void *)v142;
    v141[8] = v142[8];
    *(void *)uint64_t v141 = v143;
    __n128 v144 = v95[13];
    int v145 = (void *)((char *)v93 + v144);
    int v146 = (void *)((char *)v94 + v144);
    *int v145 = *v146;
    uint64_t v147 = v146[1];
    v145[1] = v147;
    uint64_t v148 = v95[14];
    uint64_t v149 = *(void *)((char *)v94 + v148);
    *(void *)((char *)v93 + v148) = v149;
    uint64_t v150 = v95[15];
    uint64_t v151 = (void *)((char *)v93 + v150);
    uint64_t v152 = (void *)((char *)v94 + v150);
    *uint64_t v151 = *v152;
    uint64_t v153 = v152[1];
    v151[1] = v153;
    uint64_t v154 = v95[16];
    uint64_t v155 = *(void *)((char *)v94 + v154);
    *(void *)((char *)v93 + v154) = v155;
    uint64_t v156 = v95[17];
    uint64_t v157 = (char *)v93 + v156;
    uint64_t v158 = (char *)v94 + v156;
    __int128 v159 = *(_OWORD *)v158;
    v157[16] = v158[16];
    *(_OWORD *)uint64_t v157 = v159;
    uint64_t v160 = v95[18];
    uint64_t v161 = (char *)v93 + v160;
    uint64_t v162 = (char *)v94 + v160;
    uint64_t v163 = *(_OWORD *)v162;
    v161[16] = v162[16];
    *(_OWORD *)uint64_t v161 = v163;
    uint64_t v164 = (void (*)(void *, void, uint64_t, int *, __n128))__dsta[7];
    swift_bridgeObjectRetain(v147);
    swift_bridgeObjectRetain(v149);
    swift_bridgeObjectRetain(v153);
    uint64_t v165 = swift_bridgeObjectRetain(v155);
    v164(v93, 0LL, 1LL, v95, v165);
  }

  *(_DWORD *)&v9[v11[21]] = *(_DWORD *)&v10[v11[21]];
  uint64_t v166 = v11[22];
  uint64_t v167 = *(void *)&v10[v166];
  *(void *)&v9[v166] = v167;
  uint64_t v168 = v11[23];
  uint64_t v169 = &v9[v168];
  uint64_t v170 = &v10[v168];
  uint64_t v171 = *(void *)&v10[v168 + 8];
  swift_bridgeObjectRetain(v167);
  if (v171 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v169 = *v170;
  }

  else
  {
    __n128 v172 = *(void *)v170;
    sub_10001736C(v172, v171);
    *(void *)uint64_t v169 = v172;
    *((void *)v169 + 1) = v171;
  }

  uint64_t v173 = v11[24];
  uint64_t v174 = &v9[v173];
  uint64_t v175 = &v10[v173];
  uint64_t v176 = *((void *)v175 + 1);
  if (v176 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v174 = *(_OWORD *)v175;
  }

  else
  {
    uint64_t v177 = *(void *)v175;
    sub_10001736C(*(void *)v175, *((void *)v175 + 1));
    *(void *)uint64_t v174 = v177;
    *((void *)v174 + 1) = v176;
  }

  uint64_t v178 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v343 + 16);
  v178(&v9[v11[25]], &v10[v11[25]], v42);
  v178(&v9[v11[26]], &v10[v11[26]], v42);
  v178(&v9[v11[27]], &v10[v11[27]], v42);
  v178(&v9[v11[28]], &v10[v11[28]], v42);
  v178(&v9[v11[29]], &v10[v11[29]], v42);
  v178(&v9[v11[30]], &v10[v11[30]], v42);
  unint64_t v179 = v11[31];
  uint64_t v180 = &v9[v179];
  uint64_t v181 = &v10[v179];
  *uint64_t v180 = *v181;
  uint64_t v182 = v181[1];
  v180[1] = v182;
  unint64_t v183 = v11[32];
  uint64_t v184 = *(void *)&v10[v183];
  *(void *)&v9[v183] = v184;
  uint64_t v185 = v11[33];
  uint64_t v186 = &v9[v185];
  int v187 = &v10[v185];
  *uint64_t v186 = *v187;
  int v188 = v187[1];
  v186[1] = v188;
  uint64_t v189 = v11[34];
  uint64_t v190 = *(void *)&v10[v189];
  *(void *)&v9[v189] = v190;
  uint64_t v191 = v11[35];
  uint64_t v192 = &v9[v191];
  uint64_t v193 = &v10[v191];
  uint64_t v194 = v193[16];
  *(_OWORD *)uint64_t v192 = *(_OWORD *)v193;
  v192[16] = v194;
  uint64_t v195 = v11[36];
  uint64_t v196 = &v9[v195];
  uint64_t v197 = &v10[v195];
  uint64_t v198 = v197[16];
  *(_OWORD *)uint64_t v196 = *(_OWORD *)v197;
  v196[16] = v198;
  uint64_t v199 = v11[37];
  uint64_t v200 = &v9[v199];
  int v201 = &v10[v199];
  swift_bridgeObjectRetain(v182);
  swift_bridgeObjectRetain(v184);
  swift_bridgeObjectRetain(v188);
  __int128 v202 = swift_bridgeObjectRetain(v190);
  ((void (*)(_BYTE *, _BYTE *, uint64_t, __n128))v178)(v200, v201, v42, v202);
  v178(&v9[v11[38]], &v10[v11[38]], v42);
  v178(&v9[v11[39]], &v10[v11[39]], v42);
  v178(&v9[v11[40]], &v10[v11[40]], v42);
  v178(&v9[v11[41]], &v10[v11[41]], v42);
  v178(&v9[v11[42]], &v10[v11[42]], v42);
  v9[v11[43]] = v10[v11[43]];
  v9[v11[44]] = v10[v11[44]];
  v9[v11[45]] = v10[v11[45]];
  uint64_t v203 = v11[46];
  uint64_t v204 = &v9[v203];
  uint64_t v205 = &v10[v203];
  _BYTE *v204 = *v205;
  uint64_t v206 = v205[1];
  v204[1] = v206;
  uint64_t v207 = v11[47];
  uint64_t v208 = &v9[v207];
  uint64_t v209 = &v10[v207];
  void *v208 = *v209;
  uint64_t v210 = v209[1];
  v208[1] = v210;
  uint64_t v211 = (void (*)(_BYTE *, void, uint64_t, int *, __n128))__src[7];
  swift_bridgeObjectRetain(v206);
  uint64_t v212 = swift_bridgeObjectRetain(v210);
  v211(v9, 0LL, 1LL, v11, v212);
  return v345;
}

      swift_bridgeObjectRelease();
      uint64_t v11 = v193;
      sub_10002218C(v211, (uint64_t)v193, type metadata accessor for BeaconObservation);
      uint64_t v120 = 0LL;
      uint64_t v82 = v195;
    }

    else
    {
      uint64_t v120 = 1LL;
    }

    uint64_t v121 = v212;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56))(v11, v120, 1LL, v212);
    swift_bridgeObjectRelease();
    uint64_t v122 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
    if (v122(v11, 1LL, v121) == 1)
    {
      sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009A5990);
      uint64_t v83 = v190;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v199 + 56))(v190, 1LL, 1LL, v200);
      uint64_t v24 = v207;
LABEL_28:
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v205, v203);
      uint64_t v84 = (uint64_t)v83;
      goto LABEL_29;
    }

    int v201 = v122;
    uint64_t v123 = &v11[*(int *)(v121 + 20)];
    uint64_t v125 = v199;
    uint64_t v124 = v200;
    uint64_t v83 = v190;
    uint64_t v185 = *(void (**)(char *, char *, uint64_t))(v199 + 16);
    v185(v190, v123, v200);
    sub_100018C68((uint64_t)v11, type metadata accessor for BeaconObservation);
    uint64_t v126 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v125 + 56);
    v126(v83, 0LL, 1LL, v124);
    uint64_t v127 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48);
    uint64_t v128 = v127(v83, 1LL, v124);
    uint64_t v24 = v207;
    if (v128 == 1) {
      goto LABEL_28;
    }
    unint64_t v183 = v126;
    uint64_t v129 = *(void (**)(char *, char *, uint64_t))(v199 + 32);
    v129(v186, v83, v200);
    uint64_t v182 = objc_autoreleasePoolPush();
    OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v3, v197);
    uint64_t v130 = v213;
    uint64_t v131 = v213[2];
    uint64_t v184 = v127;
    if (v131)
    {
      uint64_t v132 = sub_10030D124(v205);
      if ((v133 & 1) != 0) {
        break;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v138 = _swiftEmptyArrayStorage;
LABEL_97:
    objc_autoreleasePoolPop(v182);
    uint64_t v153 = v180;
    sub_1000F0A44((uint64_t)v138, v180);
    swift_bridgeObjectRelease();
    uint64_t v154 = v212;
    if (v201((char *)v153, 1LL, v212) == 1)
    {
      sub_100015794(v153, (uint64_t *)&unk_1009A5990);
      uint64_t v155 = v82;
      uint64_t v156 = 1LL;
      uint64_t v157 = v200;
    }

    else
    {
      uint64_t v158 = v153 + *(int *)(v154 + 20);
      uint64_t v157 = v200;
      v185(v82, (char *)v158, v200);
      sub_100018C68(v153, type metadata accessor for BeaconObservation);
      uint64_t v155 = v82;
      uint64_t v156 = 0LL;
    }

    v183(v155, v156, 1LL, v157);
    if (v184(v82, 1LL, v157) == 1)
    {
      (*(void (**)(char *, uint64_t))(v199 + 8))(v186, v157);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v205, v203);
      uint64_t v84 = (uint64_t)v82;
LABEL_29:
      sub_100015794(v84, (uint64_t *)&unk_10099D720);
      uint64_t v81 = v202;
    }

    else
    {
      __int128 v159 = v179;
      v129(v179, v82, v157);
      uint64_t v160 = v186;
      uint64_t v161 = static Date.< infix(_:_:)(v186, v159);
      if ((v161 & 1) != 0)
      {
        uint64_t v162 = v6;
        uint64_t v163 = static os_log_type_t.debug.getter(v161);
        if (qword_10099B790 != -1) {
          swift_once(&qword_10099B790, sub_100651808);
        }
        uint64_t v164 = qword_100A2B0A0;
        uint64_t v165 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v166 = swift_allocObject(v165, 72LL, 7LL);
        *(_OWORD *)(v166 + swift_weakDestroy(v0 + 16) = v177;
        uint64_t v167 = v205;
        uint64_t v168 = UUID.uuidString.getter(v166);
        uint64_t v170 = v169;
        *(void *)(v166 + 56) = &type metadata for String;
        *(void *)(v166 + 64) = sub_1000226F4();
        *(void *)(v166 + 32) = v168;
        *(void *)(v166 + 40) = v170;
        os_log(_:dso:log:_:_:)( v163,  &_mh_execute_header,  v164,  "Removing beacon from inProgress list: %@",  40LL,  2LL,  v166);
        swift_bridgeObjectRelease();
        uint64_t v171 = v178;
        sub_1003CF124(v167, v178);
        sub_100015794(v171, &qword_10099D8A0);
        __n128 v172 = v200;
        uint64_t v173 = *(void (**)(char *, uint64_t))(v199 + 8);
        v173(v179, v200);
        v173(v186, v172);
        uint64_t v24 = v207;
        (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v167, v203);
        uint64_t v3 = v181;
        uint64_t v6 = v162;
        uint64_t v82 = v195;
      }

      else
      {
        uint64_t v174 = v157;
        uint64_t v175 = *(void (**)(char *, uint64_t))(v199 + 8);
        v175(v159, v174);
        uint64_t v176 = v174;
        uint64_t v24 = v207;
        v175(v160, v176);
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v205, v203);
      }

      int v67 = v210;
      uint64_t v81 = v202;
    }
  }

  uint64_t v134 = *(void *)(v130[7] + 8 * v132);
  swift_bridgeObjectRetain(v134);
  swift_bridgeObjectRelease();
  uint64_t v135 = sub_1002FE5F8(v134);
  swift_bridgeObjectRelease();
  sub_1002FFE1C((uint64_t)v135);
  uint64_t v137 = v136;
  swift_release(v135);
  uint64_t v138 = _swiftEmptyArrayStorage;
  uint64_t v213 = _swiftEmptyArrayStorage;
  uint64_t v139 = *(void *)(v137 + 16);
  if (!v139)
  {
    uint64_t v24 = v207;
LABEL_96:
    swift_release(v137);
    uint64_t v82 = v195;
    goto LABEL_97;
  }

  uint64_t v198 = v129;
  uint64_t v140 = v6;
  uint64_t v141 = 0LL;
  uint64_t v142 = v212;
  uint64_t v143 = (uint64_t)v187;
  while (v141 < *(void *)(v137 + 16))
  {
    __n128 v144 = (*(unsigned __int8 *)(v67 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    int v145 = *(void *)(v67 + 72);
    sub_10001DC4C(v137 + v144 + v145 * v141, v143, type metadata accessor for BeaconObservation);
    int v146 = qword_100817138[*(char *)(v143 + *(int *)(v142 + 24))];
    if (v146 != 3)
    {
      uint64_t v149 = &stru_100000020.cmd + 1;
      while (1)
      {
        uint64_t v150 = v149 - 31;
        if (__OFADD__(v149 - 32, 1LL)) {
          goto LABEL_112;
        }
        ++v149;
        if (v150 == 3)
        {
          sub_100018C68(v143, type metadata accessor for BeaconObservation);
          goto LABEL_70;
        }
      }
    }

    sub_10002218C(v143, v196, type metadata accessor for BeaconObservation);
    if ((swift_isUniquelyReferenced_nonNull_native(v138) & 1) == 0) {
      sub_100032AA8(0, v138[2] + 1LL, 1);
    }
    uint64_t v138 = v213;
    uint64_t v148 = v213[2];
    uint64_t v147 = v213[3];
    if (v148 >= v147 >> 1)
    {
      sub_100032AA8(v147 > 1, v148 + 1, 1);
      uint64_t v138 = v213;
    }

    v138[2] = v148 + 1;
    sub_10002218C(v196, (uint64_t)v138 + v144 + v148 * v145, type metadata accessor for BeaconObservation);
    uint64_t v142 = v212;
    uint64_t v143 = (uint64_t)v187;
LABEL_70:
    ++v141;
    uint64_t v24 = v207;
    int v67 = v210;
    if (v141 == v139)
    {
      uint64_t v138 = v213;
      uint64_t v3 = v181;
      uint64_t v6 = v140;
      uint64_t v11 = v193;
      uint64_t v129 = v198;
      goto LABEL_96;
    }
  }

            dispatch thunk of BinaryInteger._lowWord.getter(v67, v68);
            (*(void (**)(char *, uint64_t))(v71 + 8))(v74, v67);
            v29.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
LABEL_63:
            v10.super.super.Class isa = v29.super.super.isa;
LABEL_64:
            sub_100728A70((uint64_t)v125);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v117);
            return v10.super.super.isa;
          }

          dispatch thunk of BinaryInteger._lowWord.getter(v11, v12);
          v36((char *)v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL), v11);
        }

        else
        {
          v36((char *)v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL), v11);
        }

uint64_t sub_1000A4818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A4824);
}

uint64_t sub_1000A4824(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 253)
  {
    unsigned int v4 = *a1;
    if (v4 >= 3) {
      return v4 - 2;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for WildModeAssociationRecord(0LL);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_1000A4898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A48A4);
}

_BYTE *sub_1000A48A4(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 253)
  {
    *uint64_t result = a2 + 2;
  }

  else
  {
    uint64_t v7 = type metadata accessor for WildModeAssociationRecord(0LL);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for UnwantedTrackingUserNotification(uint64_t a1)
{
  uint64_t result = qword_10099FCD8;
  if (!qword_10099FCD8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UnwantedTrackingUserNotification);
  }
  return result;
}

uint64_t sub_1000A4950(uint64_t a1)
{
  v4[0] = &unk_1007E96E8;
  uint64_t result = type metadata accessor for WildModeAssociationRecord(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1007E9700;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for MessagingError(void *a1, void *a2)
{
  uint64_t v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL) {
    swift_errorRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for MessagingError(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease(result);
  }
  return result;
}

unint64_t *assignWithCopy for MessagingError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF) {
      swift_errorRetain(*a2);
    }
    *a1 = v4;
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }

  else
  {
    swift_errorRetain(*a2);
    unint64_t v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }

  return a1;
}

unint64_t *assignWithTake for MessagingError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFF6 && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483639);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 8;
  if (v4 >= 0xA) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for MessagingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF7)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483639;
    if (a3 >= 0x7FFFFFF7) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFF7) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MessagingError()
{
  return &type metadata for MessagingError;
}

unint64_t sub_1000A4BC4(unint64_t a1)
{
  unint64_t result = 0xD000000000000012LL;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      unint64_t result = 0x616E7265746E692ELL;
      break;
    case 2uLL:
      unint64_t result = 0x74756F656D69742ELL;
      break;
    case 3uLL:
      unint64_t result = 0xD000000000000016LL;
      break;
    case 4uLL:
      unint64_t result = 0xD000000000000017LL;
      break;
    case 5uLL:
      unint64_t result = 0xD000000000000010LL;
      break;
    case 6uLL:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 7uLL:
      unint64_t result = 0x6E776F6E6B6E752ELL;
      break;
    case 8uLL:
      unint64_t result = 0xD000000000000018LL;
      break;
    default:
      strcpy((char *)v7, ".underlying(");
      BYTE5(v7[1]) = 0;
      HIWORD(v7[1]) = -5120;
      unint64_t v6 = a1;
      sub_1000A4D58(a1);
      swift_errorRetain(a1);
      uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      v5._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v6, v4);
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      sub_1000A4D68(a1);
      unint64_t result = v7[0];
      break;
  }

  return result;
}

unint64_t sub_1000A4D50()
{
  return sub_1000A4BC4(*v0);
}

unint64_t sub_1000A4D58(unint64_t result)
{
  if (result >= 9) {
    return swift_errorRetain(result);
  }
  return result;
}

unint64_t sub_1000A4D68(unint64_t result)
{
  if (result >= 9) {
    return swift_errorRelease(result);
  }
  return result;
}

ValueMetadata *type metadata accessor for SignalSource()
{
  return &type metadata for SignalSource;
}

uint64_t sub_1000A4DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A4DB0);
}

uint64_t sub_1000A4DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A4DC0);
}

uint64_t type metadata accessor for SelfBeaconingKeyEnvelope(uint64_t a1)
{
  return sub_10008BED8(a1, qword_10099FDD8, (uint64_t)&nominal type descriptor for SelfBeaconingKeyEnvelope);
}

uint64_t *sub_1000A4DDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v10);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
    swift_bridgeObjectRetain(v9);
  }

  return a1;
}

uint64_t sub_1000A4E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_1000A4EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_1000A4F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_1000A4F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000A4FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_1000A5038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A5044);
}

uint64_t sub_1000A5048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1000A50C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A50D0);
}

uint64_t sub_1000A50D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for LegacySelfBeaconingKeyEnvelope(uint64_t a1)
{
  return sub_10008BED8(a1, qword_10099FE68, (uint64_t)&nominal type descriptor for LegacySelfBeaconingKeyEnvelope);
}

uint64_t sub_1000A5160(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000A51D4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_10099FEA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1000A5BC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys,  &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys,  v11,  v9,  v10);
  char v20 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    uint64_t v19 = *(void *)(v3 + *(int *)(type metadata accessor for LegacySelfBeaconingKeyEnvelope(0LL) + 20));
    char v18 = 1;
    uint64_t v14 = sub_100004AEC(&qword_10099FEB0);
    uint64_t v15 = sub_1000A5C48( &qword_10099FEB8,  &qword_10099FEC0,  (uint64_t)&protocol conformance descriptor for CryptoKeys,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, v14, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A5368@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v29 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v26 = (void **)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v28 = sub_100004AEC(&qword_10099FEF0);
  uint64_t v5 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LegacySelfBeaconingKeyEnvelope(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v13 = sub_1000A5BC0();
  uint64_t v27 = v7;
  uint64_t v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys,  &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys,  v13,  v12,  v11);
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v24 = a1;
  uint64_t v30 = v5;
  uint64_t v15 = (uint64_t)v10;
  char v33 = 0;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  char v18 = v26;
  uint64_t v17 = v27;
  uint64_t v19 = v28;
  uint64_t v20 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v29, &v33, v28, v29, v16);
  (*(void (**)(uint64_t, void *, uint64_t))(v3 + 32))(v15, v18, v20);
  uint64_t v21 = sub_100004AEC(&qword_10099FEB0);
  char v32 = 1;
  uint64_t v22 = sub_1000A5C48( &qword_10099FEF8,  &qword_10099FF00,  (uint64_t)&protocol conformance descriptor for CryptoKeys,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, v21, &v32, v19, v21, v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v19);
  *(void *)(v15 + *(int *)(v8 + 20)) = v31;
  sub_10001DC4C(v15, v25, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  return sub_100018C68(v15, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
}

uint64_t sub_1000A5624(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_10099FEC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1000A5C04();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SelfBeaconingKeyEnvelope.CodingKeys,  &type metadata for SelfBeaconingKeyEnvelope.CodingKeys,  v11,  v9,  v10);
  char v20 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    uint64_t v19 = *(void *)(v3 + *(int *)(type metadata accessor for SelfBeaconingKeyEnvelope(0LL) + 20));
    char v18 = 1;
    uint64_t v14 = sub_100004AEC(&qword_10099FED8);
    uint64_t v15 = sub_1000A5CCC( &qword_10099FEE0,  &qword_10099FEE8,  (uint64_t)&unk_10080BE40,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, v14, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A57B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v29 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v26 = (void **)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v28 = sub_100004AEC(&qword_10099FF08);
  uint64_t v5 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SelfBeaconingKeyEnvelope(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v13 = sub_1000A5C04();
  uint64_t v27 = v7;
  uint64_t v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SelfBeaconingKeyEnvelope.CodingKeys,  &type metadata for SelfBeaconingKeyEnvelope.CodingKeys,  v13,  v12,  v11);
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v24 = a1;
  uint64_t v30 = v5;
  uint64_t v15 = (uint64_t)v10;
  char v33 = 0;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  char v18 = v26;
  uint64_t v17 = v27;
  uint64_t v19 = v28;
  uint64_t v20 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v29, &v33, v28, v29, v16);
  (*(void (**)(uint64_t, void *, uint64_t))(v3 + 32))(v15, v18, v20);
  uint64_t v21 = sub_100004AEC(&qword_10099FED8);
  char v32 = 1;
  uint64_t v22 = sub_1000A5CCC( &qword_10099FF10,  &qword_10099FF18,  (uint64_t)&unk_10080BE68,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, v21, &v32, v19, v21, v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v19);
  *(void *)(v15 + *(int *)(v8 + 20)) = v31;
  sub_10001DC4C(v15, v25, type metadata accessor for SelfBeaconingKeyEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  return sub_100018C68(v15, type metadata accessor for SelfBeaconingKeyEnvelope);
}

uint64_t sub_1000A5A74(uint64_t a1)
{
  unint64_t v2 = sub_1000A5BC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A5A9C(uint64_t a1)
{
  unint64_t v2 = sub_1000A5BC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A5AC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A5368(a1, a2);
}

uint64_t sub_1000A5AD8(void *a1)
{
  return sub_1000A51D4(a1);
}

uint64_t sub_1000A5AEC()
{
  if (*v0) {
    return 1937335659LL;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_1000A5B24@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000A5FE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A5B48(uint64_t a1)
{
  unint64_t v2 = sub_1000A5C04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A5B70(uint64_t a1)
{
  unint64_t v2 = sub_1000A5C04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A5B98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A57B8(a1, a2);
}

uint64_t sub_1000A5BAC(void *a1)
{
  return sub_1000A5624(a1);
}

unint64_t sub_1000A5BC0()
{
  unint64_t result = qword_10099FEA8;
  if (!qword_10099FEA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9B5C, &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099FEA8);
  }

  return result;
}

unint64_t sub_1000A5C04()
{
  unint64_t result = qword_10099FED0;
  if (!qword_10099FED0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9B0C, &type metadata for SelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099FED0);
  }

  return result;
}

uint64_t sub_1000A5C48(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100004B78(&qword_10099FEB0);
    sub_100007864(a2, type metadata accessor for CryptoKeys, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000A5CCC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100004B78(&qword_10099FED8);
    sub_100007864(a2, type metadata accessor for FamilyCryptoKeysV1, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

ValueMetadata *type metadata accessor for SelfBeaconingKeyEnvelope.CodingKeys()
{
  return &type metadata for SelfBeaconingKeyEnvelope.CodingKeys;
}

uint64_t _s12searchpartyd24SelfBeaconingKeyEnvelopeV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000A5DB4 + 4 * byte_1007E98A5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000A5DE8 + 4 * byte_1007E98A0[v4]))();
}

uint64_t sub_1000A5DE8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A5DF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A5DF8LL);
  }
  return result;
}

uint64_t sub_1000A5E04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A5E0CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000A5E10(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A5E18(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacySelfBeaconingKeyEnvelope.CodingKeys()
{
  return &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys;
}

unint64_t sub_1000A5E38()
{
  unint64_t result = qword_10099FF20;
  if (!qword_10099FF20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9A2C, &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099FF20);
  }

  return result;
}

unint64_t sub_1000A5E80()
{
  unint64_t result = qword_10099FF28;
  if (!qword_10099FF28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9AE4, &type metadata for SelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099FF28);
  }

  return result;
}

unint64_t sub_1000A5EC8()
{
  unint64_t result = qword_10099FF30;
  if (!qword_10099FF30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9A54, &type metadata for SelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099FF30);
  }

  return result;
}

unint64_t sub_1000A5F10()
{
  unint64_t result = qword_10099FF38;
  if (!qword_10099FF38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9A7C, &type metadata for SelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099FF38);
  }

  return result;
}

unint64_t sub_1000A5F58()
{
  unint64_t result = qword_10099FF40;
  if (!qword_10099FF40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E999C, &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099FF40);
  }

  return result;
}

unint64_t sub_1000A5FA0()
{
  unint64_t result = qword_10099FF48;
  if (!qword_10099FF48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E99C4, &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10099FF48);
  }

  return result;
}

uint64_t sub_1000A5FE4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 1937335659 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1937335659LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

void sub_1000A60D0(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = __CocoaSet.makeIterator()(v6);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A0080);
    uint64_t v9 = sub_1000372EC( (unint64_t *)&unk_1009AC330,  (uint64_t *)&unk_1009A0080,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
    uint64_t v10 = Set.Iterator.init(_cocoa:)(v36, v7, v8, v9);
    uint64_t v5 = v36[0];
    uint64_t v34 = v36[1];
    uint64_t v11 = v36[2];
    uint64_t v12 = v36[3];
    unint64_t v13 = v36[4];
  }

  else
  {
    uint64_t v14 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v34 = a1 + 56;
    uint64_t v15 = ~v14;
    uint64_t v16 = -v14;
    if (v16 < 64) {
      uint64_t v17 = ~(-1LL << v16);
    }
    else {
      uint64_t v17 = -1LL;
    }
    unint64_t v13 = v17 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v11 = v15;
    uint64_t v12 = 0LL;
  }

  int64_t v33 = (unint64_t)(v11 + 64) >> 6;
  while (v5 < 0)
  {
    uint64_t v21 = __CocoaSet.Iterator.next()(v10);
    if (!v21) {
      goto LABEL_39;
    }
    uint64_t v22 = v21;
    uint64_t v35 = v21;
    swift_unknownObjectRetain(v21);
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A0080);
    swift_dynamicCast(&v37, &v35, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
    uint64_t v24 = v37;
    uint64_t v25 = swift_unknownObjectRelease(v22);
    uint64_t v20 = v12;
    uint64_t v18 = v13;
    if (!v24) {
      goto LABEL_39;
    }
LABEL_35:
    XPCSession.proxy.getter(v25);
    uint64_t v30 = v37;
    if (v37)
    {
      uint64_t v31 = *a2;
      sub_1000A6F38();
      swift_bridgeObjectRetain(v31);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v30 receivedUpdatedLocations:isa];

      swift_unknownObjectRelease(v30);
      if (__OFADD__(*a3, 1LL))
      {
        __break(1u);
LABEL_39:
        sub_1000A6F30(v5);
        return;
      }

      ++*a3;
    }

    uint64_t v10 = (void *)swift_release();
    uint64_t v12 = v20;
    unint64_t v13 = v18;
  }

  if (v13)
  {
    uint64_t v18 = (v13 - 1) & v13;
    unint64_t v19 = __clz(__rbit64(v13)) | (v12 << 6);
    uint64_t v20 = v12;
LABEL_34:
    uint64_t v29 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
    uint64_t v25 = swift_retain();
    if (!v29) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }

  int64_t v26 = v12 + 1;
  if (!__OFADD__(v12, 1LL))
  {
    if (v26 >= v33) {
      goto LABEL_39;
    }
    unint64_t v27 = *(void *)(v34 + 8 * v26);
    uint64_t v20 = v12 + 1;
    if (!v27)
    {
      uint64_t v20 = v12 + 2;
      if (v12 + 2 >= v33) {
        goto LABEL_39;
      }
      unint64_t v27 = *(void *)(v34 + 8 * v20);
      if (!v27)
      {
        uint64_t v20 = v12 + 3;
        if (v12 + 3 >= v33) {
          goto LABEL_39;
        }
        unint64_t v27 = *(void *)(v34 + 8 * v20);
        if (!v27)
        {
          uint64_t v20 = v12 + 4;
          if (v12 + 4 >= v33) {
            goto LABEL_39;
          }
          unint64_t v27 = *(void *)(v34 + 8 * v20);
          if (!v27)
          {
            uint64_t v20 = v12 + 5;
            if (v12 + 5 >= v33) {
              goto LABEL_39;
            }
            unint64_t v27 = *(void *)(v34 + 8 * v20);
            if (!v27)
            {
              uint64_t v28 = v12 + 6;
              while (v33 != v28)
              {
                unint64_t v27 = *(void *)(v34 + 8 * v28++);
                if (v27)
                {
                  uint64_t v20 = v28 - 1;
                  goto LABEL_33;
                }
              }

              goto LABEL_39;
            }
          }
        }
      }
    }

uint64_t sub_1000A6404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v16 = (void *)swift_allocObject(&unk_10093C368, 56LL, 7LL);
  void v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  v16[6] = a5;
  aBlock[4] = sub_1000A6E4C;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10093C380;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(a5);
  static DispatchQoS.unspecified.getter(v18);
  unint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v10, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  return swift_release();
}

void sub_1000A662C(uint64_t a1, uint64_t a2, void (*a3)(void, __n128), uint64_t a4, uint64_t a5)
{
  uint64_t v72 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v71 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v70 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v68 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  int v67 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SecureLocation(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v65 = (void *)(a2 + 32);
  swift_beginAccess(a2 + 32, v82, 0LL, 0LL);
  uint64_t v16 = *(void *)(a2 + 32);
  if ((v16 & 0xC000000000000001LL) != 0)
  {
    if (v16 < 0) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v16 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v16);
    uint64_t v18 = __CocoaSet.count.getter(v17);
    swift_bridgeObjectRelease();
    if (v18) {
      goto LABEL_6;
    }
  }

  else if (*(void *)(v16 + 16))
  {
LABEL_6:
    uint64_t v64 = a4;
    uint64_t v81 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v19 = *(void *)(a5 + 16);
    if (v19)
    {
      uint64_t v62 = a3;
      uint64_t v63 = a1;
      uint64_t v20 = a5 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      uint64_t v66 = *(void *)(v13 + 72);
      uint64_t v61 = a5;
      swift_bridgeObjectRetain(a5);
      uint64_t v21 = v72;
      do
      {
        uint64_t v74 = v19;
        sub_1000A6E74(v20, (uint64_t)v15);
        id v22 = sub_1005EE368();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
        unint64_t v24 = *(void *)((v81 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v23 = *(void *)((v81 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v24 >= v23 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1LL);
        }
        uint64_t v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
        specialized Array._endMutation()(v25);
        if (qword_10099B850 != -1) {
          swift_once(&qword_10099B850, sub_1006BAC84);
        }
        uint64_t v26 = qword_100A2B210;
        uint64_t v27 = *v15;
        uint64_t v28 = v15[1];
        uint64_t v73 = *(void *)(qword_100A2B210 + 16);
        uint64_t v29 = swift_allocObject(&unk_10093C3B8, 41LL, 7LL);
        *(void *)(v29 + swift_weakDestroy(v0 + 16) = v26;
        *(void *)(v29 + 24) = v27;
        *(void *)(v29 + 32) = v28;
        *(_BYTE *)(v29 + 40) = 1;
        v80[3] = sub_1000A6EE4;
        v80[4] = v29;
        aBlock = _NSConcreteStackBlock;
        v80[0] = 1107296256LL;
        v80[1] = sub_1001C31E8;
        v80[2] = &unk_10093C3D0;
        uint64_t v30 = _Block_copy(&aBlock);
        swift_retain_n(v26, 2LL);
        uint64_t v31 = swift_bridgeObjectRetain_n(v28, 2LL);
        char v32 = v67;
        static DispatchQoS.unspecified.getter(v31);
        v75[0] = _swiftEmptyArrayStorage;
        uint64_t v33 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v34 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v35 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v36 = (uint64_t)v15;
        uint64_t v37 = v70;
        dispatch thunk of SetAlgebra.init<A>(_:)(v75, v34, v35, v21, v33);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v32, v37, v30);
        _Block_release(v30);
        uint64_t v38 = v37;
        uint64_t v15 = (uint64_t *)v36;
        (*(void (**)(char *, uint64_t))(v71 + 8))(v38, v21);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v32, v69);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        sub_1000A6EF4(v36);
        v20 += v66;
        uint64_t v19 = v74 - 1;
      }

      while (v74 != 1);
      swift_bridgeObjectRelease();
      a3 = v62;
    }

    uint64_t v78 = 0LL;
    swift_bridgeObjectRetain(*v65);
    sub_1000A60D0(v39, &v81, &v78);
    swift_bridgeObjectRelease();
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    uint64_t v41 = sub_10000A720(v40, (uint64_t)qword_100A2AE08);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v44 = 134217984;
      swift_beginAccess(&v78, v75, 0LL, 0LL);
      aBlock = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v80, v44 + 4, v44 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "SecureLocationsClientSession - sent to %ld clients.",  v44,  0xCu);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    __n128 v45 = swift_beginAccess(&v78, &aBlock, 0LL, 0LL);
    if (v78)
    {
      a3(0LL, v45);
    }

    else
    {
      type metadata accessor for SecureLocationsError(0LL);
      uint64_t v57 = v56;
      uint64_t v76 = 8LL;
      unint64_t v58 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v59 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
      _BridgedStoredNSError.init(_:userInfo:)(&v77, &v76, v58, v57, v59);
      uint64_t v60 = v77;
      ((void (*)(void *))a3)(v77);
    }

    swift_bridgeObjectRelease();
    goto LABEL_28;
  }

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v46 = type metadata accessor for Logger(0LL);
  uint64_t v47 = sub_10000A720(v46, (uint64_t)qword_100A2AE08);
  int v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v49 = static os_log_type_t.default.getter(v48);
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "SecureLocationsClientSession - receivedUpdatedLocations but no client sessions",  v50,  2u);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  type metadata accessor for SecureLocationsError(0LL);
  uint64_t v52 = v51;
  v75[0] = 8LL;
  unint64_t v53 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v54 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, v75, v53, v52, v54);
  uint64_t v55 = aBlock;
  ((void (*)(void **))a3)(aBlock);

LABEL_28:
  Transaction.capture()();
}

uint64_t sub_1000A6D6C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for SecureLocationsClientSessionPool(uint64_t a1)
{
  uint64_t result = qword_10099FF78;
  if (!qword_10099FF78) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsClientSessionPool);
  }
  return result;
}

uint64_t sub_1000A6DDC(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 256LL, 0LL, v2, a1 + 216);
}

uint64_t sub_1000A6E10()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1000A6E4C()
{
}

uint64_t sub_1000A6E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A6E6C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000A6E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SecureLocation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A6EB8()
{
  return swift_deallocObject(v0, 41LL, 7LL);
}

uint64_t sub_1000A6EE4()
{
  return sub_1006BC660(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_1000A6EF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SecureLocation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000A6F30(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_1000A6F38()
{
  unint64_t result = qword_1009A0090;
  if (!qword_1009A0090)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SPSecureLocation);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009A0090);
  }

  return result;
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.ObservationSource()
{
  return &type metadata for ObservedAdvertisement.ObservationSource;
}

uint64_t sub_1000A6F94(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v21 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    uint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    sub_10008699C(v7, v8);
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = v7;
    *(void *)(v4 + 24) = v8;
    int v9 = *((_DWORD *)a2 + 9);
    *(_DWORD *)(v4 + 32) = *((_DWORD *)a2 + 8);
    *(_DWORD *)(v4 + 36) = v9;
    uint64_t v10 = a3[11];
    uint64_t v11 = v4 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    v14(v11, v12, v13);
    uint64_t v15 = a3[12];
    uint64_t v16 = (void *)(v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for ObservedAdvertisement.Location(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
    {
      uint64_t v20 = sub_100004AEC(&qword_10099E770);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      void v16[2] = v17[2];
      v14((uint64_t)v16 + *(int *)(v18 + 28), (uint64_t)v17 + *(int *)(v18 + 28), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }

    uint64_t v22 = a3[13];
    unint64_t v23 = (char *)(v4 + v22);
    unint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25))
    {
      uint64_t v27 = sub_100004AEC(&qword_1009AA730);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      uint64_t v28 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v23, v24, v28);
      v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
      *(void *)&v23[*(int *)(v25 + 24)] = *(void *)&v24[*(int *)(v25 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
    }

    *(_BYTE *)(v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  }

  return v4;
}

uint64_t type metadata accessor for ObservedAdvertisement.Location(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A0258, (uint64_t)&nominal type descriptor for ObservedAdvertisement.Location);
}

uint64_t type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(uint64_t a1)
{
  return sub_10008BED8( a1,  qword_1009A01C0,  (uint64_t)&nominal type descriptor for ObservedAdvertisement.BeaconIndexInformation);
}

uint64_t sub_1000A71D4(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[11];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  uint64_t v7 = a1 + a2[12];
  uint64_t v8 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v9 = a1 + a2[13];
  uint64_t v10 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10);
  if (!(_DWORD)result)
  {
    uint64_t v12 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v9, v12);
  }

  return result;
}

uint64_t sub_1000A72D0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  sub_10008699C(v6, v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  int v8 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = v8;
  uint64_t v9 = a3[11];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  v13(v10, v11, v12);
  uint64_t v14 = a3[12];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
  {
    uint64_t v19 = sub_100004AEC(&qword_10099E770);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    void v15[2] = v16[2];
    v13((uint64_t)v15 + *(int *)(v17 + 28), (uint64_t)v16 + *(int *)(v17 + 28), v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  uint64_t v20 = a3[13];
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = sub_100004AEC(&qword_1009AA730);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    uint64_t v26 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v21, v22, v26);
    v21[*(int *)(v23 + 20)] = v22[*(int *)(v23 + 20)];
    *(void *)&v21[*(int *)(v23 + 24)] = *(void *)&v22[*(int *)(v23 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  }

  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_1000A74BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  sub_10008699C(v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  sub_1000869A4(v9, v10);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_WORD *)(a1 + 34) = *((_WORD *)a2 + 17);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  uint64_t v11 = *(int *)(a3 + 44);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v37 = *(void *)(v14 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 24);
  v15(v12, v13, v14);
  uint64_t v38 = a3;
  uint64_t v16 = *(int *)(a3 + 48);
  uint64_t v17 = (char *)(a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (v22)
  {
    if (!v23)
    {
      *(void *)uint64_t v17 = *(void *)v18;
      *((void *)v17 + 1) = *((void *)v18 + 1);
      *((void *)v17 + 2) = *((void *)v18 + 2);
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))( &v17[*(int *)(v19 + 28)],  &v18[*(int *)(v19 + 28)],  v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v23)
  {
    sub_100018C68((uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
LABEL_6:
    uint64_t v24 = sub_100004AEC(&qword_10099E770);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  *((void *)v17 + 2) = *((void *)v18 + 2);
  v15((uint64_t)&v17[*(int *)(v19 + 28)], (uint64_t)&v18[*(int *)(v19 + 28)], v14);
LABEL_7:
  uint64_t v25 = *(int *)(v38 + 52);
  uint64_t v26 = (_BYTE *)(a1 + v25);
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1LL, v28);
  int v32 = v30(v27, 1LL, v28);
  if (!v31)
  {
    if (!v32)
    {
      uint64_t v36 = type metadata accessor for UUID(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v36 - 8) + 24LL))(v26, v27, v36);
      v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
      *(void *)&v26[*(int *)(v28 + 24)] = *(void *)&v27[*(int *)(v28 + 24)];
      goto LABEL_13;
    }

    sub_100018C68((uint64_t)v26, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    goto LABEL_12;
  }

  if (v32)
  {
LABEL_12:
    uint64_t v34 = sub_100004AEC(&qword_1009AA730);
    memcpy(v26, v27, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v33 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v33 - 8) + 16LL))(v26, v27, v33);
  v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
  *(void *)&v26[*(int *)(v28 + 24)] = *(void *)&v27[*(int *)(v28 + 24)];
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
LABEL_13:
  *(_BYTE *)(a1 + *(int *)(v38 + 56)) = *((_BYTE *)a2 + *(int *)(v38 + 56));
  return a1;
}

uint64_t sub_1000A77B8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  int v6 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = v6;
  uint64_t v7 = a3[11];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  uint64_t v12 = a3[12];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_100004AEC(&qword_10099E770);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    void v13[2] = v14[2];
    v11((uint64_t)v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v18 = a3[13];
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  uint64_t v21 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_100004AEC(&qword_1009AA730);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    uint64_t v24 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v19, v20, v24);
    v19[*(int *)(v21 + 20)] = v20[*(int *)(v21 + 20)];
    *(void *)&v19[*(int *)(v21 + 24)] = *(void *)&v20[*(int *)(v21 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_1000A7998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  sub_1000869A4(v6, v7);
  int v8 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = v8;
  uint64_t v9 = *(int *)(a3 + 44);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v35 = *(void *)(v12 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 40);
  v13(v10, v11, v12);
  uint64_t v36 = a3;
  uint64_t v14 = *(int *)(a3 + 48);
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))( &v15[*(int *)(v17 + 28)],  &v16[*(int *)(v17 + 28)],  v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v21)
  {
    sub_100018C68((uint64_t)v15, type metadata accessor for ObservedAdvertisement.Location);
LABEL_6:
    uint64_t v22 = sub_100004AEC(&qword_10099E770);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((void *)v15 + 2) = *((void *)v16 + 2);
  v13((uint64_t)&v15[*(int *)(v17 + 28)], (uint64_t)&v16[*(int *)(v17 + 28)], v12);
LABEL_7:
  uint64_t v23 = *(int *)(v36 + 52);
  uint64_t v24 = (_BYTE *)(a1 + v23);
  uint64_t v25 = (_BYTE *)(a2 + v23);
  uint64_t v26 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1LL, v26);
  int v30 = v28(v25, 1LL, v26);
  if (!v29)
  {
    if (!v30)
    {
      uint64_t v34 = type metadata accessor for UUID(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v34 - 8) + 40LL))(v24, v25, v34);
      v24[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
      *(void *)&v24[*(int *)(v26 + 24)] = *(void *)&v25[*(int *)(v26 + 24)];
      goto LABEL_13;
    }

    sub_100018C68((uint64_t)v24, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    goto LABEL_12;
  }

  if (v30)
  {
LABEL_12:
    uint64_t v32 = sub_100004AEC(&qword_1009AA730);
    memcpy(v24, v25, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v31 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v31 - 8) + 32LL))(v24, v25, v31);
  v24[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
  *(void *)&v24[*(int *)(v26 + 24)] = *(void *)&v25[*(int *)(v26 + 24)];
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
LABEL_13:
  *(_BYTE *)(a1 + *(int *)(v36 + 56)) = *(_BYTE *)(a2 + *(int *)(v36 + 56));
  return a1;
}

uint64_t sub_1000A7C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A7C68);
}

uint64_t sub_1000A7C68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v10 = sub_100004AEC(&qword_10099E770);
  uint64_t v7 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v11 = sub_100004AEC(&qword_1009AA730);
  uint64_t v7 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v9 = a3[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unsigned int v13 = *(unsigned __int8 *)(a1 + a3[14]);
  if (v13 >= 2) {
    return ((v13 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000A7D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A7D54);
}

uint64_t sub_1000A7D54(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a4[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t v12 = sub_100004AEC(&qword_10099E770);
  uint64_t v9 = *(void *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v12;
    uint64_t v11 = a4[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t result = sub_100004AEC(&qword_1009AA730);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a4[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  *(_BYTE *)(a1 + a4[14]) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for ObservedAdvertisement(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009A00F8, (uint64_t)&nominal type descriptor for ObservedAdvertisement);
}

void sub_1000A7E34(uint64_t a1)
{
  v8[0] = "\t";
  v8[1] = &unk_1007E9C70;
  void v8[2] = &unk_1007E9C88;
  v8[3] = (char *)&value witness table for Builtin.Int8 + 64;
  v8[4] = (char *)&value witness table for Builtin.Int8 + 64;
  v8[5] = &unk_1007E9CA0;
  v8[6] = (char *)&value witness table for Builtin.Int32 + 64;
  uint64_t v2 = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v8[7] = *(void *)(v2 - 8) + 64LL;
    sub_10009361C(319LL, &qword_1009A0108, type metadata accessor for ObservedAdvertisement.Location);
    if (v5 <= 0x3F)
    {
      v8[8] = *(void *)(v4 - 8) + 64LL;
      sub_10009361C( 319LL,  (unint64_t *)&unk_1009A0110,  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      if (v7 <= 0x3F)
      {
        v8[9] = *(void *)(v6 - 8) + 64LL;
        v8[10] = &unk_1007E9CB8;
        swift_initStructMetadata(a1, 256LL, 11LL, v8, a1 + 16);
      }
    }
  }

void *sub_1000A7F44(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
  }

  return a1;
}

uint64_t sub_1000A7FD4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_1000A8008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_1000A806C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000A80D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_1000A8138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_1000A819C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A81A8);
}

uint64_t sub_1000A81A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3) {
    return v9 - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000A8220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A822C);
}

uint64_t sub_1000A822C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t sub_1000A82A4(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1007E9CE8;
    void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1000A8324(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t sub_1000A83B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t sub_1000A83EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

void *sub_1000A8450(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000A84BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000A8520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000A8584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A8590);
}

uint64_t sub_1000A8590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t sub_1000A85D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A85DC);
}

uint64_t sub_1000A85DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t sub_1000A8620(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_1000A869C()
{
  uint64_t v1 = v0;
  uint64_t v11 = sub_100004AEC(&qword_1009AA730);
  __chkstk_darwin(v11);
  uint64_t v10 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099E770);
  __chkstk_darwin(v9);
  if ((*(_BYTE *)(v0 + 35) & 1) == 0)
  {
    LOBYTE(v12) = *(_BYTE *)(v0 + 34);
    unint64_t v3 = sub_100041584();
    uint64_t v4 = FixedWidthInteger.data.getter(&type metadata for UInt8, v3);
    unint64_t v6 = v5;
    Data.hexString.getter(v4, v5);
    sub_100016F9C(v4, v6);
  }

  uint64_t v12 = 0LL;
  unint64_t v13 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(121LL);
  v7._uint64_t countAndFlagsBits = 0x3A656372756F733CLL;
  v7._object = (void *)0xE900000000000020LL;
  String.append(_:)(v7);
  __asm { BR              X10 }

uint64_t sub_1000A87FC()
{
  v5._uint64_t countAndFlagsBits = 0x747365767261682ELL;
  v5._object = (void *)0xEA00000000007265LL;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x8000000100853380LL;
  v6._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v6);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  sub_10008699C(v7, v8);
  v9._uint64_t countAndFlagsBits = sub_1000AFD00(v7, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  sub_1000869A4(v7, v8);
  v10._uint64_t countAndFlagsBits = 0x737574617473202CLL;
  v10._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = sub_100040BA4(*(unsigned __int8 *)(v0 + 32));
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x203A6B65202CLL;
  v12._object = (void *)0xE600000000000000LL;
  String.append(_:)(v12);
  char v13 = *(_BYTE *)(v0 + 33);
  *(void *)(v4 - 112) = 0x203A4D6F427BLL;
  *(void *)(v4 - 104) = 0xE600000000000000LL;
  if ((v13 & 4) != 0) {
    uint64_t v14 = 1702195828LL;
  }
  else {
    uint64_t v14 = 0x65736C6166LL;
  }
  if ((v13 & 4) != 0) {
    unint64_t v15 = 0xE400000000000000LL;
  }
  else {
    unint64_t v15 = 0xE500000000000000LL;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 125LL;
  v17._object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  String.append(_:)(*(Swift::String *)(v4 - 112));
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x203A746E6968202CLL;
  v18._object = (void *)0xE800000000000000LL;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = v1;
  v19._object = v3;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x7461446E61637320LL;
  v20._object = (void *)0xEB00000000203A65LL;
  String.append(_:)(v20);
  int v21 = (int *)type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v22 = type metadata accessor for Date(0LL);
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0x68736F507369202CLL;
  v25._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v25);
  if (*(_BYTE *)(v0 + v21[14])) {
    uint64_t v26 = 1702195828LL;
  }
  else {
    uint64_t v26 = 0x65736C6166LL;
  }
  if (*(_BYTE *)(v0 + v21[14])) {
    unint64_t v27 = 0xE400000000000000LL;
  }
  else {
    unint64_t v27 = 0xE500000000000000LL;
  }
  unint64_t v28 = v27;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  v29._object = (void *)0xEB00000000203A6ELL;
  v29._uint64_t countAndFlagsBits = 0x6F697461636F6C20LL;
  String.append(_:)(v29);
  sub_10001581C(v0 + v21[12], v2, &qword_10099E770);
  v30._uint64_t countAndFlagsBits = String.init<A>(describing:)(v2, *(void *)(v4 - 136));
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v31._object = (void *)0x80000001008533A0LL;
  String.append(_:)(v31);
  uint64_t v32 = *(void *)(v4 - 128);
  sub_10001581C(v0 + v21[13], v32, &qword_1009AA730);
  v33._uint64_t countAndFlagsBits = String.init<A>(describing:)(v32, *(void *)(v4 - 120));
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._uint64_t countAndFlagsBits = 62LL;
  v34._object = (void *)0xE100000000000000LL;
  String.append(_:)(v34);
  return *(void *)(v4 - 96);
}

void sub_1000A8B38(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009AA730);
  __chkstk_darwin(v8);
  Swift::String v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v11 = *(void *)v1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }

  Hasher._combine(_:)(*(_BYTE *)(v1 + 9));
  uint64_t v12 = *(void *)(v1 + 16);
  unint64_t v13 = *(void *)(v1 + 24);
  Hasher._combine(_:)((v13 >> 61) & 1);
  sub_10001736C(v12, v13 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)(a1, v12, v13 & 0xDFFFFFFFFFFFFFFFLL);
  sub_1000869A4(v12, v13);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 32));
  Hasher._combine(_:)(*(_BYTE *)(v1 + 33));
  if ((*(_BYTE *)(v1 + 35) & 1) != 0)
  {
    Swift::UInt8 v14 = 0;
  }

  else
  {
    Swift::UInt8 v14 = *(_BYTE *)(v1 + 34);
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(*(_DWORD *)(v1 + 36));
  uint64_t v15 = type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v16, v17);
  sub_100625818(a1);
  sub_10001581C(v1 + *(int *)(v15 + 52), (uint64_t)v10, &qword_1009AA730);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    sub_10002218C((uint64_t)v10, (uint64_t)v7, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    Hasher._combine(_:)(1u);
    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v19 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(a1, v18, v19);
    if (v7[*(int *)(v4 + 20)])
    {
      if (v7[*(int *)(v4 + 20)] == 1)
      {
        unint64_t v20 = 0xE900000000000079LL;
        uint64_t v21 = 0x7261646E6F636553LL;
      }

      else
      {
        unint64_t v20 = 0xEF736E6F69746163LL;
        uint64_t v21 = 0x6F4C657275636553LL;
      }
    }

    else
    {
      unint64_t v20 = 0xE700000000000000LL;
      uint64_t v21 = 0x7972616D697250LL;
    }

    String.hash(into:)(a1, v21, v20);
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(*(void *)&v7[*(int *)(v4 + 24)]);
    sub_100018C68((uint64_t)v7, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(v15 + 56)));
}

uint64_t sub_1000A8E50(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A8E80 + 4 * byte_1007E9BE4[a1]))( 0x6449766461LL,  0xE500000000000000LL);
}

uint64_t sub_1000A8E80()
{
  return 0x656372756F73LL;
}

uint64_t sub_1000A8E94()
{
  return 0x7369747265766461LL;
}

uint64_t sub_1000A8EB8()
{
  return 0x737574617473LL;
}

uint64_t sub_1000A8ECC()
{
  return 0x79654B6172747865LL;
}

uint64_t sub_1000A8EEC()
{
  return 1953393000LL;
}

uint64_t sub_1000A8EFC()
{
  return 1769173874LL;
}

uint64_t sub_1000A8F0C()
{
  return 0x657461446E616373LL;
}

unint64_t sub_1000A8F24()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1000A8F40()
{
  return 0x68736F507369LL;
}

uint64_t sub_1000A8F54()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1000A8F6C(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A0300);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1000AB864();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ObservedAdvertisement.CodingKeys,  &type metadata for ObservedAdvertisement.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = *((unsigned __int8 *)v3 + 8);
  LOBYTE(v34) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v34, v5);
  if (!v2)
  {
    LOBYTE(v34) = *((_BYTE *)v3 + 9);
    char v35 = 1;
    unint64_t v14 = sub_1000AB9B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v34,  &v35,  v5,  &type metadata for ObservedAdvertisement.ObservationSource,  v14);
    __int128 v34 = *((_OWORD *)v3 + 1);
    char v35 = 2;
    unint64_t v15 = sub_1000AB9FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v35, v5, &type metadata for AdvertisementUnion, v15);
    LOBYTE(v34) = *((_BYTE *)v3 + 32);
    char v35 = 3;
    unint64_t v16 = sub_1000ABA40();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v35, v5, &type metadata for Type18Status, v16);
    LOBYTE(v34) = *((_BYTE *)v3 + 33);
    char v35 = 4;
    unint64_t v17 = sub_1000ABA84();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v35, v5, &type metadata for ExtraKeyBits, v17);
    int v18 = *((unsigned __int8 *)v3 + 34);
    int v19 = *((unsigned __int8 *)v3 + 35);
    LOBYTE(v34) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18 | (v19 << 8), &v34, v5);
    uint64_t v20 = *((unsigned int *)v3 + 9);
    LOBYTE(v34) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v34, v5);
    uint64_t v21 = (int *)type metadata accessor for ObservedAdvertisement(0LL);
    uint64_t v22 = (uint64_t)v3 + v21[11];
    LOBYTE(v34) = 7;
    uint64_t v23 = type metadata accessor for Date(0LL);
    uint64_t v24 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v34, v5, v23, v24);
    uint64_t v25 = (uint64_t)v3 + v21[12];
    LOBYTE(v34) = 8;
    uint64_t v26 = type metadata accessor for ObservedAdvertisement.Location(0LL);
    uint64_t v27 = sub_100007864( &qword_1009A0328,  type metadata accessor for ObservedAdvertisement.Location,  (uint64_t)&unk_1007E9D74);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v34, v5, v26, v27);
    uint64_t v28 = (uint64_t)v3 + v21[13];
    LOBYTE(v34) = 9;
    uint64_t v29 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
    uint64_t v30 = sub_100007864( &qword_1009A0330,  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation,  (uint64_t)&unk_1007E9E7C);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v34, v5, v29, v30);
    uint64_t v31 = *((unsigned __int8 *)v3 + v21[14]);
    LOBYTE(v34) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v31, &v34, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A930C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v4 = sub_100004AEC(&qword_1009AA730);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099E770);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v47 = *(void *)(v10 - 8);
  uint64_t v48 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v46 = sub_100004AEC(&qword_1009A02C0);
  uint64_t v13 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  unint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v49 = (int *)type metadata accessor for ObservedAdvertisement(0LL);
  __chkstk_darwin(v49);
  uint64_t v50 = a1;
  uint64_t v51 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  sub_100012ED8(a1, v18);
  unint64_t v19 = sub_1000AB864();
  __n128 v45 = v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ObservedAdvertisement.CodingKeys,  &type metadata for ObservedAdvertisement.CodingKeys,  v19,  v18,  v17);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v50);
  }
  uint64_t v42 = v9;
  os_log_type_t v43 = v12;
  uint64_t v41 = v6;
  uint64_t v20 = v13;
  LOBYTE(v52) = 0;
  uint64_t v21 = v46;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v46);
  uint64_t v23 = v51;
  *uint64_t v51 = v22;
  *((_BYTE *)v23 + 8) = v24 & 1;
  char v53 = 1;
  unint64_t v25 = sub_1000AB8A8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v52,  &type metadata for ObservedAdvertisement.ObservationSource,  &v53,  v21,  &type metadata for ObservedAdvertisement.ObservationSource,  v25);
  *((_BYTE *)v23 + 9) = v52;
  char v53 = 2;
  unint64_t v26 = sub_1000AB8EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v52,  &type metadata for AdvertisementUnion,  &v53,  v21,  &type metadata for AdvertisementUnion,  v26);
  *((_OWORD *)v23 + 1) = v52;
  char v53 = 3;
  unint64_t v27 = sub_1000AB930();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v52,  &type metadata for Type18Status,  &v53,  v21,  &type metadata for Type18Status,  v27);
  *((_BYTE *)v23 + 32) = v52;
  char v53 = 4;
  unint64_t v28 = sub_1000AB974();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v52,  &type metadata for ExtraKeyBits,  &v53,  v21,  &type metadata for ExtraKeyBits,  v28);
  *((_BYTE *)v23 + 33) = v52;
  LOBYTE(v52) = 5;
  __int16 v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v21);
  *((_BYTE *)v23 + 34) = v29;
  *((_BYTE *)v23 + 35) = HIBYTE(v29) & 1;
  LOBYTE(v52) = 6;
  *((_DWORD *)v23 + 9) = KeyedDecodingContainer.decode(_:forKey:)(&v52, v21);
  LOBYTE(v52) = 7;
  uint64_t v30 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v31 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v48, &v52, v21, v48, v30);
  (*(void (**)(char *, void *, uint64_t))(v47 + 32))((char *)v23 + v49[11], v31, v48);
  uint64_t v32 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  LOBYTE(v52) = 8;
  uint64_t v33 = sub_100007864( &qword_1009A02F0,  type metadata accessor for ObservedAdvertisement.Location,  (uint64_t)&unk_1007E9D9C);
  uint64_t v34 = (uint64_t)v42;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v32, &v52, v21, v32, v33);
  sub_100015750(v34, (uint64_t)v23 + v49[12], &qword_10099E770);
  uint64_t v35 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  LOBYTE(v52) = 9;
  uint64_t v36 = sub_100007864( &qword_1009A02F8,  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation,  (uint64_t)&unk_1007E9EA4);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v35, &v52, v21, v35, v36);
  sub_100015750((uint64_t)v41, (uint64_t)v51 + v49[13], &qword_1009AA730);
  LOBYTE(v52) = 10;
  char v37 = KeyedDecodingContainer.decode(_:forKey:)(&v52, v46);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v45, v46);
  uint64_t v38 = (uint64_t)v51;
  *((_BYTE *)v51 + v49[14]) = v37 & 1;
  sub_10001DC4C(v38, v44, type metadata accessor for ObservedAdvertisement);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v50);
  return sub_100018C68(v38, type metadata accessor for ObservedAdvertisement);
}

uint64_t sub_1000A9960()
{
  return sub_1000A8E50(*v0);
}

uint64_t sub_1000A9968@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000AC0C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A998C(uint64_t a1)
{
  unint64_t v2 = sub_1000AB864();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A99B4(uint64_t a1)
{
  unint64_t v2 = sub_1000AB864();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A99DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A930C(a1, a2);
}

uint64_t sub_1000A99F0(void *a1)
{
  return sub_1000A8F6C(a1);
}

Swift::Int sub_1000A9A08()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A9A48(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000A9A84(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A0380);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1000ABB94();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ObservedAdvertisement.Location.CodingKeys,  &type metadata for ObservedAdvertisement.Location.CodingKeys,  v11,  v9,  v10);
  double v12 = *v3;
  char v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v23, v5, v12);
  if (!v2)
  {
    double v13 = v3[1];
    char v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v22, v5, v13);
    double v14 = v3[2];
    char v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v21, v5, v14);
    unint64_t v15 = (char *)v3 + *(int *)(type metadata accessor for ObservedAdvertisement.Location(0LL) + 28);
    char v20 = 3;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1000A9C28()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0LL;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0LL;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1000A9CE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v27 = type metadata accessor for Date(0LL);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  unint64_t v26 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100004AEC(&qword_1009A0370);
  uint64_t v4 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v10);
  unint64_t v12 = sub_1000ABB94();
  uint64_t v13 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ObservedAdvertisement.Location.CodingKeys,  &type metadata for ObservedAdvertisement.Location.CodingKeys,  v12,  v10,  v11);
  if (!v13)
  {
    uint64_t v29 = v7;
    uint64_t v14 = v4;
    uint64_t v16 = v26;
    uint64_t v15 = v27;
    char v33 = 0;
    uint64_t v17 = v28;
    KeyedDecodingContainer.decode(_:forKey:)(&v33, v28);
    *(void *)uint64_t v9 = v18;
    char v32 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v32, v17);
    *((void *)v9 + 1) = v19;
    char v31 = 2;
    KeyedDecodingContainer.decode(_:forKey:)(&v31, v17);
    *((void *)v9 + 2) = v21;
    char v30 = 3;
    uint64_t v22 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v30, v17, v15, v22);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
    uint64_t v23 = v24;
    (*(void (**)(char *, void *, uint64_t))(v25 + 32))(&v9[*(int *)(v29 + 28)], v16, v15);
    sub_10002218C((uint64_t)v9, v23, type metadata accessor for ObservedAdvertisement.Location);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1000A9F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AB820();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000A9FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AB820();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000AA00C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000AA03C + 4 * byte_1007E9BEF[*v0]))( 0x6E776F6E6B6E752ELL,  0xE800000000000000LL);
}

uint64_t sub_1000AA03C()
{
  return 0x747365767261682ELL;
}

uint64_t sub_1000AA058()
{
  return 0x6353686365656C2ELL;
}

uint64_t sub_1000AA07C()
{
  return 0x6E7363612ELL;
}

uint64_t sub_1000AA090()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000AA0C0 + 4 * byte_1007E9BF3[*v0]))( 0x656475746974616CLL,  0xE800000000000000LL);
}

uint64_t sub_1000AA0C0()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_1000AA0DC()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000AA0F8()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_1000AA118@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000AC52C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000AA13C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000AA148(uint64_t a1)
{
  unint64_t v2 = sub_1000ABB94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AA170(uint64_t a1)
{
  unint64_t v2 = sub_1000ABB94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AA198@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A9CE4(a1, a2);
}

uint64_t sub_1000AA1AC(void *a1)
{
  return sub_1000A9A84(a1);
}

uint64_t sub_1000AA1C4(uint64_t a1)
{
  unint64_t v2 = v1;
  if ((*v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *v2;
  }
  else {
    Swift::UInt64 v4 = 0LL;
  }
  Hasher._combine(_:)(v4);
  if ((v2[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2[1];
  }
  else {
    Swift::UInt64 v5 = 0LL;
  }
  Hasher._combine(_:)(v5);
  if ((v2[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v2[2];
  }
  else {
    Swift::UInt64 v6 = 0LL;
  }
  Hasher._combine(_:)(v6);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
}

Swift::Int sub_1000AA264(uint64_t a1)
{
  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v1;
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  if ((v1[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1[1];
  }
  else {
    Swift::UInt64 v3 = 0LL;
  }
  Hasher._combine(_:)(v3);
  if ((v1[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1[2];
  }
  else {
    Swift::UInt64 v4 = 0LL;
  }
  Hasher._combine(_:)(v4);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v8, v5, v6);
  return Hasher._finalize()();
}

uint64_t sub_1000AA324()
{
  return sub_100007864( &qword_1009A0298,  type metadata accessor for ObservedAdvertisement.Location,  (uint64_t)&unk_1007E9D0C);
}

uint64_t sub_1000AA350()
{
  uint64_t v1 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  if (*(_BYTE *)(v0 + *(int *)(v1 + 20)))
  {
    if (*(_BYTE *)(v0 + *(int *)(v1 + 20)) == 1)
    {
      unint64_t v2 = 0xEA00000000007972LL;
      unint64_t v3 = 0x61646E6F6365732ELL;
    }

    else
    {
      unint64_t v2 = 0x80000001008533C0LL;
      unint64_t v3 = 0xD000000000000010LL;
    }
  }

  else
  {
    unint64_t v2 = 0xE800000000000000LL;
    unint64_t v3 = 0x7972616D6972702ELL;
  }

  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 47LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 125LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  return 123LL;
}

uint64_t sub_1000AA464()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 47LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  uint64_t v5 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  if (*(_BYTE *)(v0 + *(int *)(v5 + 20)))
  {
    if (*(_BYTE *)(v0 + *(int *)(v5 + 20)) == 1)
    {
      unint64_t v6 = 0xEA00000000007972LL;
      unint64_t v7 = 0x61646E6F6365732ELL;
    }

    else
    {
      unint64_t v6 = 0x80000001008533C0LL;
      unint64_t v7 = 0xD000000000000010LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE800000000000000LL;
    unint64_t v7 = 0x7972616D6972702ELL;
  }

  unint64_t v8 = v6;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 47LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 125LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  return 123LL;
}

uint64_t sub_1000AA5D0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A0360);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1000ABAC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys,  &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys,  v11,  v9,  v10);
  char v22 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
    char v21 = *(_BYTE *)(v3 + *(int *)(v14 + 20));
    char v20 = 1;
    unint64_t v15 = sub_1000ABB50();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for BeaconKeyManager.KeySequence, v15);
    uint64_t v16 = *(void *)(v3 + *(int *)(v14 + 24));
    char v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v19, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1000AA768()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v1, v2);
  uint64_t v3 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  int v4 = *(unsigned __int8 *)(v0 + *(int *)(v3 + 20));
  if (*(_BYTE *)(v0 + *(int *)(v3 + 20)))
  {
    if (v4 == 1) {
      uint64_t v5 = 0x7261646E6F636553LL;
    }
    else {
      uint64_t v5 = 0x6F4C657275636553LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE900000000000079LL;
    }
    else {
      unint64_t v6 = 0xEF736E6F69746163LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE700000000000000LL;
    uint64_t v5 = 0x7972616D697250LL;
  }

  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v3 + 24)));
  return Hasher._finalize()();
}

uint64_t sub_1000AA874@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  char v30 = (void *)((char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v31 = sub_100004AEC(&qword_1009A0348);
  uint64_t v5 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v13 = sub_1000ABAC8();
  char v32 = v7;
  uint64_t v14 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys,  &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys,  v13,  v11,  v12);
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v33 = v8;
  uint64_t v15 = v5;
  uint64_t v16 = v10;
  BYTE1(v36) = 0;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v19 = v29;
  uint64_t v18 = v30;
  uint64_t v20 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v29, (char *)&v36 + 1, v31, v29, v17);
  v27[1] = v3;
  char v21 = *(void (**)(char *, void *, uint64_t))(v3 + 32);
  uint64_t v22 = (uint64_t)v16;
  v21(v16, v18, v19);
  char v35 = 1;
  unint64_t v23 = sub_1000ABB0C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v36,  &type metadata for BeaconKeyManager.KeySequence,  &v35,  v20,  &type metadata for BeaconKeyManager.KeySequence,  v23);
  uint64_t v24 = v33;
  *(_BYTE *)(v22 + *(int *)(v33 + 20)) = v36;
  char v34 = 2;
  uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v20);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v32, v20);
  *(void *)(v22 + *(int *)(v24 + swift_release(*(void *)(v0 + 24)) = v25;
  sub_10001DC4C(v22, v28, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return sub_100018C68(v22, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
}

unint64_t sub_1000AAB3C()
{
  uint64_t v1 = 0x65636E6575716573LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x7865646E69LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_1000AAB98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000AC6EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000AABBC(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1000AABC8(uint64_t a1)
{
  unint64_t v2 = sub_1000ABAC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AABF0(uint64_t a1)
{
  unint64_t v2 = sub_1000ABAC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AAC18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AA874(a1, a2);
}

uint64_t sub_1000AAC2C(void *a1)
{
  return sub_1000AA5D0(a1);
}

void sub_1000AAC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  int v7 = *(unsigned __int8 *)(v2 + *(int *)(a2 + 20));
  if (*(_BYTE *)(v2 + *(int *)(a2 + 20)))
  {
    if (v7 == 1) {
      uint64_t v8 = 0x7261646E6F636553LL;
    }
    else {
      uint64_t v8 = 0x6F4C657275636553LL;
    }
    if (v7 == 1) {
      unint64_t v9 = 0xE900000000000079LL;
    }
    else {
      unint64_t v9 = 0xEF736E6F69746163LL;
    }
  }

  else
  {
    unint64_t v9 = 0xE700000000000000LL;
    uint64_t v8 = 0x7972616D697250LL;
  }

  String.hash(into:)(a1, v8, v9);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int sub_1000AAD38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v10, v4, v5);
  int v6 = *(unsigned __int8 *)(v2 + *(int *)(a2 + 20));
  if (*(_BYTE *)(v2 + *(int *)(a2 + 20)))
  {
    if (v6 == 1) {
      uint64_t v7 = 0x7261646E6F636553LL;
    }
    else {
      uint64_t v7 = 0x6F4C657275636553LL;
    }
    if (v6 == 1) {
      unint64_t v8 = 0xE900000000000079LL;
    }
    else {
      unint64_t v8 = 0xEF736E6F69746163LL;
    }
  }

  else
  {
    unint64_t v8 = 0xE700000000000000LL;
    uint64_t v7 = 0x7972616D697250LL;
  }

  String.hash(into:)(v10, v7, v8);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

BOOL sub_1000AAE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static UUID.== infix(_:_:)(a1, a2) & 1) != 0
      && (sub_100305B8C(*(_BYTE *)(a1 + *(int *)(a3 + 20)), *(_BYTE *)(a2 + *(int *)(a3 + 20))) & 1) != 0
      && *(void *)(a1 + *(int *)(a3 + 24)) == *(void *)(a2 + *(int *)(a3 + 24));
}

uint64_t sub_1000AAE9C()
{
  return sub_100007864( &qword_1009A02A0,  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation,  (uint64_t)&unk_1007E9DC4);
}

uint64_t sub_1000AAEC8()
{
  return sub_100007864(&qword_1009A02A8, type metadata accessor for ObservedAdvertisement, (uint64_t)&unk_1007E9ECC);
}

unint64_t sub_1000AAEF8()
{
  unint64_t result = qword_1009A02B0;
  if (!qword_1009A02B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA09C, &type metadata for ObservedAdvertisement.ObservationSource);
    atomic_store(result, (unint64_t *)&qword_1009A02B0);
  }

  return result;
}

uint64_t sub_1000AAF3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

double MacBeaconConfig.initialNoBeaconDuration.getter()
{
  return *(double *)v0;
}

double MacBeaconConfig.fastRollAdvertisementDuration.getter()
{
  return *(double *)(v0 + 8);
}

double MacBeaconConfig.fastRollAdvertisementInterval.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t sub_1000AAF94(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0LL;
  }
  uint64_t v4 = *(int *)(type metadata accessor for ObservedAdvertisement.Location(0LL) + 28);
  return static Date.== infix(_:_:)((char *)a1 + v4, (char *)a2 + v4);
}

uint64_t sub_1000AB008(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  uint64_t v72 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v70 = (uint64_t)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = sub_100004AEC(&qword_1009A0338);
  __chkstk_darwin(v71);
  uint64_t v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009AA730);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v75 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v73 = (uint64_t)&v63 - v12;
  __chkstk_darwin(v11);
  uint64_t v74 = (uint64_t)&v63 - v13;
  uint64_t v14 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (double *)((char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = sub_100004AEC(&qword_1009A0340);
  __chkstk_darwin(v18);
  uint64_t v76 = (uint64_t)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100004AEC(&qword_10099E770);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v63 - v23;
  __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v63 - v26;
  char v28 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8)) {
      return v28 & 1;
    }
  }

  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v28 = 1;
    }
    if ((v28 & 1) != 0) {
      goto LABEL_49;
    }
  }

  uint64_t v66 = v4;
  int v67 = v7;
  uint64_t v68 = a1;
  uint64_t v69 = a2;
  uint64_t v29 = *(void *)(a1 + 16);
  uint64_t v30 = *(void *)(a1 + 24);
  uint64_t v31 = *(void *)(a2 + 16);
  uint64_t v32 = *(void *)(a2 + 24);
  if ((v30 & 0x2000000000000000LL) != 0)
  {
    if ((v32 & 0x2000000000000000LL) == 0) {
      goto LABEL_49;
    }
    unint64_t v63 = v30 & 0xDFFFFFFFFFFFFFFFLL;
    unint64_t v64 = v32 & 0xDFFFFFFFFFFFFFFFLL;
    uint64_t v65 = (double *)v25;
    sub_10008699C(v29, v30);
    sub_10008699C(v31, v32);
    uint64_t v33 = v29;
    uint64_t v34 = v63;
  }

  else
  {
    if ((v32 & 0x2000000000000000LL) != 0) {
      goto LABEL_49;
    }
    uint64_t v65 = (double *)v25;
    sub_10008699C(v29, v30);
    sub_10008699C(v31, v32);
    uint64_t v33 = v29;
    uint64_t v34 = v30;
  }

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v33, v34);
  LODWORD(v64) = v35;
  sub_1000869A4(v31, v32);
  sub_1000869A4(v29, v30);
  if ((v64 & 1) == 0) {
    goto LABEL_49;
  }
  uint64_t v37 = v68;
  uint64_t v36 = v69;
  if (*(unsigned __int8 *)(v68 + 32) != *(unsigned __int8 *)(v69 + 32)
    || *(unsigned __int8 *)(v68 + 33) != *(unsigned __int8 *)(v69 + 33))
  {
    goto LABEL_49;
  }

  char v28 = *(_BYTE *)(v69 + 35);
  if ((*(_BYTE *)(v68 + 35) & 1) != 0)
  {
    if (!*(_BYTE *)(v69 + 35)) {
      return v28 & 1;
    }
  }

  else
  {
    if ((v28 & 1) != 0) {
      goto LABEL_49;
    }
  }

  if (*(_DWORD *)(v68 + 36) != *(_DWORD *)(v69 + 36)
    || (uint64_t v38 = type metadata accessor for ObservedAdvertisement(0LL),
        (static Date.== infix(_:_:)(v37 + *(int *)(v38 + 44), v36 + *(int *)(v38 + 44)) & 1) == 0))
  {
LABEL_49:
    char v28 = 0;
    return v28 & 1;
  }

  sub_10001581C(v37 + *(int *)(v38 + 48), (uint64_t)v27, &qword_10099E770);
  unint64_t v64 = v38;
  sub_10001581C(v36 + *(int *)(v38 + 48), (uint64_t)v24, &qword_10099E770);
  uint64_t v39 = v76;
  uint64_t v40 = v76 + *(int *)(v18 + 48);
  sub_10001581C((uint64_t)v27, v76, &qword_10099E770);
  sub_10001581C((uint64_t)v24, v40, &qword_10099E770);
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v41(v39, 1LL, v14) == 1)
  {
    sub_100015794((uint64_t)v24, &qword_10099E770);
    sub_100015794((uint64_t)v27, &qword_10099E770);
    if (v41(v40, 1LL, v14) == 1)
    {
      sub_100015794(v76, &qword_10099E770);
      goto LABEL_27;
    }

    goto LABEL_33;
  }

  __int128 v52 = v65;
  sub_10001581C(v39, (uint64_t)v65, &qword_10099E770);
  if (v41(v40, 1LL, v14) == 1)
  {
    sub_100015794((uint64_t)v24, &qword_10099E770);
    sub_100015794((uint64_t)v27, &qword_10099E770);
    sub_100018C68((uint64_t)v52, type metadata accessor for ObservedAdvertisement.Location);
LABEL_33:
    char v53 = &qword_1009A0340;
    uint64_t v54 = v76;
LABEL_48:
    sub_100015794(v54, v53);
    goto LABEL_49;
  }

  sub_10002218C(v40, (uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
  if (*v52 != *v17 || v52[1] != v17[1] || v52[2] != v17[2])
  {
    sub_100018C68((uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
    sub_100015794((uint64_t)v24, &qword_10099E770);
    sub_100015794((uint64_t)v27, &qword_10099E770);
    sub_100018C68((uint64_t)v52, type metadata accessor for ObservedAdvertisement.Location);
    uint64_t v54 = v76;
    char v53 = &qword_10099E770;
    goto LABEL_48;
  }

  uint64_t v55 = (uint64_t)v52;
  char v56 = static Date.== infix(_:_:)((char *)v52 + *(int *)(v14 + 28), (char *)v17 + *(int *)(v14 + 28));
  sub_100018C68((uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
  sub_100015794((uint64_t)v24, &qword_10099E770);
  sub_100015794((uint64_t)v27, &qword_10099E770);
  uint64_t v36 = v69;
  sub_100018C68(v55, type metadata accessor for ObservedAdvertisement.Location);
  sub_100015794(v76, &qword_10099E770);
  if ((v56 & 1) == 0) {
    goto LABEL_49;
  }
LABEL_27:
  unint64_t v42 = v64;
  uint64_t v43 = v74;
  sub_10001581C(v37 + *(int *)(v64 + 52), v74, &qword_1009AA730);
  uint64_t v44 = v73;
  sub_10001581C(v36 + *(int *)(v42 + 52), v73, &qword_1009AA730);
  uint64_t v45 = (uint64_t)v67;
  uint64_t v46 = (uint64_t)&v67[*(int *)(v71 + 48)];
  sub_10001581C(v43, (uint64_t)v67, &qword_1009AA730);
  uint64_t v47 = v45;
  sub_10001581C(v44, v46, &qword_1009AA730);
  uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  uint64_t v49 = v66;
  int v50 = v48(v47, 1LL, v66);
  uint64_t v51 = v75;
  if (v50 != 1)
  {
    sub_10001581C(v47, v75, &qword_1009AA730);
    if (v48(v46, 1LL, v49) == 1)
    {
      sub_100015794(v44, &qword_1009AA730);
      sub_100015794(v43, &qword_1009AA730);
      sub_100018C68(v51, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      goto LABEL_42;
    }

    uint64_t v57 = v46;
    uint64_t v58 = v70;
    sub_10002218C(v57, v70, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    if ((static UUID.== infix(_:_:)(v51, v58) & 1) == 0
      || (sub_100305B8C(*(_BYTE *)(v51 + *(int *)(v66 + 20)), *(_BYTE *)(v58 + *(int *)(v66 + 20))) & 1) == 0)
    {
      sub_100018C68(v58, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_100015794(v44, &qword_1009AA730);
      sub_100015794(v43, &qword_1009AA730);
      sub_100018C68(v51, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      uint64_t v54 = (uint64_t)v67;
      char v53 = &qword_1009AA730;
      goto LABEL_48;
    }

    uint64_t v59 = *(int *)(v66 + 24);
    uint64_t v60 = *(void *)(v51 + v59);
    uint64_t v61 = *(void *)(v58 + v59);
    sub_100018C68(v58, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100015794(v44, &qword_1009AA730);
    sub_100015794(v43, &qword_1009AA730);
    sub_100018C68(v51, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100015794((uint64_t)v67, &qword_1009AA730);
    if (v60 == v61) {
      goto LABEL_30;
    }
    goto LABEL_49;
  }

  sub_100015794(v44, &qword_1009AA730);
  sub_100015794(v43, &qword_1009AA730);
  if (v48(v46, 1LL, v49) != 1)
  {
LABEL_42:
    char v53 = &qword_1009A0338;
    uint64_t v54 = (uint64_t)v67;
    goto LABEL_48;
  }

  sub_100015794((uint64_t)v67, &qword_1009AA730);
LABEL_30:
  char v28 = *(_BYTE *)(v37 + *(int *)(v42 + 56)) ^ *(_BYTE *)(v69 + *(int *)(v42 + 56)) ^ 1;
  return v28 & 1;
}

unint64_t sub_1000AB820()
{
  unint64_t result = qword_1009A02B8;
  if (!qword_1009A02B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA024, &type metadata for ObservedAdvertisement.ObservationSource);
    atomic_store(result, (unint64_t *)&qword_1009A02B8);
  }

  return result;
}

unint64_t sub_1000AB864()
{
  unint64_t result = qword_1009A02C8;
  if (!qword_1009A02C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA3A8, &type metadata for ObservedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A02C8);
  }

  return result;
}

unint64_t sub_1000AB8A8()
{
  unint64_t result = qword_1009A02D0;
  if (!qword_1009A02D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9FFC, &type metadata for ObservedAdvertisement.ObservationSource);
    atomic_store(result, (unint64_t *)&qword_1009A02D0);
  }

  return result;
}

unint64_t sub_1000AB8EC()
{
  unint64_t result = qword_1009A02D8;
  if (!qword_1009A02D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA814, &type metadata for AdvertisementUnion);
    atomic_store(result, (unint64_t *)&qword_1009A02D8);
  }

  return result;
}

unint64_t sub_1000AB930()
{
  unint64_t result = qword_1009A02E0;
  if (!qword_1009A02E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E74D0, &type metadata for Type18Status);
    atomic_store(result, (unint64_t *)&qword_1009A02E0);
  }

  return result;
}

unint64_t sub_1000AB974()
{
  unint64_t result = qword_1009A02E8;
  if (!qword_1009A02E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9A68, &type metadata for ExtraKeyBits);
    atomic_store(result, (unint64_t *)&qword_1009A02E8);
  }

  return result;
}

unint64_t sub_1000AB9B8()
{
  unint64_t result = qword_1009A0308;
  if (!qword_1009A0308)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E9FD4, &type metadata for ObservedAdvertisement.ObservationSource);
    atomic_store(result, (unint64_t *)&qword_1009A0308);
  }

  return result;
}

unint64_t sub_1000AB9FC()
{
  unint64_t result = qword_1009A0310;
  if (!qword_1009A0310)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA83C, &type metadata for AdvertisementUnion);
    atomic_store(result, (unint64_t *)&qword_1009A0310);
  }

  return result;
}

unint64_t sub_1000ABA40()
{
  unint64_t result = qword_1009A0318;
  if (!qword_1009A0318)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E74A8, &type metadata for Type18Status);
    atomic_store(result, (unint64_t *)&qword_1009A0318);
  }

  return result;
}

unint64_t sub_1000ABA84()
{
  unint64_t result = qword_1009A0320;
  if (!qword_1009A0320)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9A40, &type metadata for ExtraKeyBits);
    atomic_store(result, (unint64_t *)&qword_1009A0320);
  }

  return result;
}

unint64_t sub_1000ABAC8()
{
  unint64_t result = qword_1009A0350;
  if (!qword_1009A0350)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EA358,  &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0350);
  }

  return result;
}

unint64_t sub_1000ABB0C()
{
  unint64_t result = qword_1009A0358;
  if (!qword_1009A0358)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081C9B0, &type metadata for BeaconKeyManager.KeySequence);
    atomic_store(result, (unint64_t *)&qword_1009A0358);
  }

  return result;
}

unint64_t sub_1000ABB50()
{
  unint64_t result = qword_1009A0368;
  if (!qword_1009A0368)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081C988, &type metadata for BeaconKeyManager.KeySequence);
    atomic_store(result, (unint64_t *)&qword_1009A0368);
  }

  return result;
}

unint64_t sub_1000ABB94()
{
  unint64_t result = qword_1009A0378;
  if (!qword_1009A0378)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA308, &type metadata for ObservedAdvertisement.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0378);
  }

  return result;
}

uint64_t _s12searchpartyd21ObservedAdvertisementV17ObservationSourceOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000ABC24 + 4 * byte_1007E9BFC[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000ABC58 + 4 * byte_1007E9BF7[v4]))();
}

uint64_t sub_1000ABC58(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ABC60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000ABC68LL);
  }
  return result;
}

uint64_t sub_1000ABC74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000ABC7CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000ABC80(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ABC88(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.Location.CodingKeys()
{
  return &type metadata for ObservedAdvertisement.Location.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ObservedAdvertisement.BeaconIndexInformation.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000ABCF0 + 4 * byte_1007E9C06[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000ABD24 + 4 * byte_1007E9C01[v4]))();
}

uint64_t sub_1000ABD24(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ABD2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000ABD34LL);
  }
  return result;
}

uint64_t sub_1000ABD40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000ABD48LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000ABD4C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ABD54(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.BeaconIndexInformation.CodingKeys()
{
  return &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ObservedAdvertisement.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_1000ABDBC + 4 * byte_1007E9C10[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1000ABDF0 + 4 * byte_1007E9C0B[v4]))();
}

uint64_t sub_1000ABDF0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ABDF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000ABE00LL);
  }
  return result;
}

uint64_t sub_1000ABE0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000ABE14LL);
  }
  *(_BYTE *)unint64_t result = a2 + 10;
  return result;
}

uint64_t sub_1000ABE18(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ABE20(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.CodingKeys()
{
  return &type metadata for ObservedAdvertisement.CodingKeys;
}

unint64_t sub_1000ABE40()
{
  unint64_t result = qword_1009A0388;
  if (!qword_1009A0388)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA170, &type metadata for ObservedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0388);
  }

  return result;
}

unint64_t sub_1000ABE88()
{
  unint64_t result = qword_1009A0390;
  if (!qword_1009A0390)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EA228,  &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0390);
  }

  return result;
}

unint64_t sub_1000ABED0()
{
  unint64_t result = qword_1009A0398;
  if (!qword_1009A0398)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA2E0, &type metadata for ObservedAdvertisement.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0398);
  }

  return result;
}

unint64_t sub_1000ABF18()
{
  unint64_t result = qword_1009A03A0;
  if (!qword_1009A03A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA250, &type metadata for ObservedAdvertisement.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A03A0);
  }

  return result;
}

unint64_t sub_1000ABF60()
{
  unint64_t result = qword_1009A03A8;
  if (!qword_1009A03A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA278, &type metadata for ObservedAdvertisement.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A03A8);
  }

  return result;
}

unint64_t sub_1000ABFA8()
{
  unint64_t result = qword_1009A03B0;
  if (!qword_1009A03B0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EA198,  &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A03B0);
  }

  return result;
}

unint64_t sub_1000ABFF0()
{
  unint64_t result = qword_1009A03B8;
  if (!qword_1009A03B8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EA1C0,  &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A03B8);
  }

  return result;
}

unint64_t sub_1000AC038()
{
  unint64_t result = qword_1009A03C0;
  if (!qword_1009A03C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA0E0, &type metadata for ObservedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A03C0);
  }

  return result;
}

unint64_t sub_1000AC080()
{
  unint64_t result = qword_1009A03C8;
  if (!qword_1009A03C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA108, &type metadata for ObservedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A03C8);
  }

  return result;
}

uint64_t sub_1000AC0C4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6449766461LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449766461LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x656372756F73LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v7 = 0xE600000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x7369747265766461LL && a2 == 0xED0000746E656D65LL)
  {
    unint64_t v8 = 0xED0000746E656D65LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7369747265766461LL, 0xED0000746E656D65LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x737574617473LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v9 = 0xE600000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x79654B6172747865LL && a2 == 0xEC00000073746942LL)
  {
    unint64_t v10 = 0xEC00000073746942LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79654B6172747865LL, 0xEC00000073746942LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 1953393000 && a2 == 0xE400000000000000LL)
  {
    unint64_t v11 = 0xE400000000000000LL;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953393000LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_38;
  }

  if (a1 == 1769173874 && a2 == 0xE400000000000000LL)
  {
    unint64_t v12 = 0xE400000000000000LL;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1769173874LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_44;
  }

  if (a1 == 0x657461446E616373LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v13 = 0xE800000000000000LL;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657461446E616373LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_50;
  }

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v14 = 0xE800000000000000LL;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_56;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v15 = 0x80000001008533E0LL;
    if (a2 == 0x80000001008533E0LL) {
      goto LABEL_61;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001008533E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if (a1 == 0x68736F507369LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 10LL;
  }

  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x68736F507369LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0) {
      return 10LL;
    }
    else {
      return 11LL;
    }
  }

uint64_t sub_1000AC52C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065LL)
  {
    unint64_t v7 = 0xE900000000000065LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v8 = 0x800000010084E370LL;
    if (a2 == 0x800000010084E370LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010084E370LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    swift_bridgeObjectRelease(0xE900000000000070LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1000AC6EC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x65636E6575716573LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v6 = 0xE800000000000000LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6575716573LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0x7865646E69LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 2LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t storeEnumTagSinglePayload for MessagingCapability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000AC880 + 4 * byte_1007EA405[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000AC8B4 + 4 * byte_1007EA400[v4]))();
}

uint64_t sub_1000AC8B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AC8BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000AC8C4LL);
  }
  return result;
}

uint64_t sub_1000AC8D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000AC8D8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000AC8DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AC8E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessagingCapability()
{
  return &type metadata for MessagingCapability;
}

unint64_t sub_1000AC904()
{
  unint64_t result = qword_1009A03D0;
  if (!qword_1009A03D0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A03D8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A03D0);
  }

  return result;
}

void sub_1000AC950(void *a1@<X8>)
{
  *a1 = &off_100932FE0;
}

unint64_t sub_1000AC964()
{
  unint64_t result = qword_1009A03E0;
  if (!qword_1009A03E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA45C, &type metadata for MessagingCapability);
    atomic_store(result, (unint64_t *)&qword_1009A03E0);
  }

  return result;
}

uint64_t sub_1000AC9A8(void *a1)
{
  id v2 = [a1 recordZoneID];

  if (v2)
  {
    uint64_t v4 = (char *)[a1 databaseScope];
    uint64_t v5 = static os_log_type_t.default.getter(v4);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    uint64_t v6 = qword_100A2B020;
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v8 + 56) = sub_100022898(0LL, &qword_1009A0410, &OBJC_CLASS___CKRecordZoneNotification_ptr);
    *(void *)(v8 + 64) = sub_1000AD220(&qword_1009A0418, &qword_1009A0410, &OBJC_CLASS___CKRecordZoneNotification_ptr);
    *(void *)(v8 + 32) = a1;
    id v9 = a1;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "RecordZoneNotification: %@", 26LL, 2LL, v8);
    uint64_t v10 = swift_bridgeObjectRelease();
    if ((unint64_t)(v4 - 2) >= 2)
    {
      if (v4 == (char *)1)
      {
        uint64_t v17 = static os_log_type_t.default.getter(v10);
        return os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_100A2B020,  "Nothing",  7LL,  2LL,  _swiftEmptyArrayStorage);
      }

      else
      {
        uint64_t v18 = static os_log_type_t.error.getter(v10);
        uint64_t v19 = qword_100A2B020;
        uint64_t v20 = swift_allocObject(v7, 72LL, 7LL);
        *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        uint64_t v25 = v4;
        type metadata accessor for Scope(0LL);
        uint64_t v22 = String.init<A>(describing:)(&v25, v21);
        uint64_t v24 = v23;
        *(void *)(v20 + 56) = &type metadata for String;
        *(void *)(v20 + 64) = sub_1000226F4();
        *(void *)(v20 + 32) = v22;
        *(void *)(v20 + 40) = v24;
        os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Unknown databaseScope: %@", 25LL, 2LL, v20);
        return swift_bridgeObjectRelease();
      }
    }

    else
    {
      return QueueSynchronizer.conditionalSync<A>(_:)(sub_1000AD260);
    }
  }

  else
  {
    uint64_t v12 = static os_log_type_t.error.getter(v3);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    uint64_t v13 = qword_100A2B020;
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v15 + 56) = sub_100022898(0LL, &qword_1009A0410, &OBJC_CLASS___CKRecordZoneNotification_ptr);
    *(void *)(v15 + 64) = sub_1000AD220( &qword_1009A0418,  &qword_1009A0410,  &OBJC_CLASS___CKRecordZoneNotification_ptr);
    *(void *)(v15 + 32) = a1;
    id v16 = a1;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "No recordZoneID in %@", 21LL, 2LL, v15);
    return swift_bridgeObjectRelease();
  }

void sub_1000ACD04(void *a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B710 != -1) {
    swift_once(&qword_10099B710, sub_1006511CC);
  }
  uint64_t v3 = qword_100A2B020;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v5 + 56) = sub_100022898(0LL, &qword_1009A03E8, &OBJC_CLASS___APSIncomingMessage_ptr);
  *(void *)(v5 + 64) = sub_1000AD220(&qword_1009A03F0, &qword_1009A03E8, &OBJC_CLASS___APSIncomingMessage_ptr);
  *(void *)(v5 + 32) = a1;
  id v6 = a1;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "ContainerPushDelegate: didReceiveMessage: %@", 44LL, 2LL, v5);
  swift_bridgeObjectRelease();
  id v7 = [v6 userInfo];
  if (!v7)
  {
    __break(1u);
    JUMPOUT(0x1000AD210LL);
  }

  uint64_t v8 = v7;
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v7,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v38 =  [(id)objc_opt_self(CKNotification) notificationFromRemoteNotificationDictionary:isa];

  if (v38)
  {
    id v10 = [v38 notificationType];
    switch((unint64_t)v10)
    {
      case 1uLL:
        uint64_t v11 = static os_log_type_t.error.getter(v10);
        os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_100A2B020,  "Query notifications are not handled",  35LL,  2LL,  _swiftEmptyArrayStorage,  1LL,  2LL);
        goto LABEL_16;
      case 2uLL:
        uint64_t v19 = objc_opt_self(&OBJC_CLASS___CKRecordZoneNotification);
        uint64_t v20 = swift_dynamicCastObjCClass(v38, v19);
        if (!v20) {
          goto LABEL_15;
        }
        uint64_t v21 = (void *)v20;
        id v38 = v38;
        sub_1000AC9A8(v21);
        goto LABEL_13;
      case 3uLL:
        uint64_t v22 = static os_log_type_t.error.getter(v10);
        os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_100A2B020,  "Read notifications are not handled",  34LL,  2LL,  _swiftEmptyArrayStorage,  1LL,  2LL);
        goto LABEL_16;
      case 4uLL:
        uint64_t v23 = objc_opt_self(&OBJC_CLASS___CKDatabaseNotification);
        uint64_t v20 = swift_dynamicCastObjCClass(v38, v23);
        if (v20)
        {
          uint64_t v24 = v20;
          id v25 = v38;
          uint64_t v26 = static os_log_type_t.default.getter(v25);
          uint64_t v27 = qword_100A2B020;
          uint64_t v28 = swift_allocObject(v4, 72LL, 7LL);
          *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
          *(void *)(v28 + 56) = sub_100022898(0LL, &qword_1009A0400, &OBJC_CLASS___CKDatabaseNotification_ptr);
          *(void *)(v28 + 64) = sub_1000AD220( &qword_1009A0408,  &qword_1009A0400,  &OBJC_CLASS___CKDatabaseNotification_ptr);
          *(void *)(v28 + 32) = v24;
          id v38 = v25;
          os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "DatabaseNotification: %@", 24LL, 2LL, v28);
          swift_bridgeObjectRelease();
          QueueSynchronizer.conditionalSync<A>(_:)(sub_1000AD260);
LABEL_13:
        }

        else
        {
LABEL_15:
          uint64_t v37 = static os_log_type_t.error.getter(v20);
          os_log(_:dso:log:_:_:)( v37,  &_mh_execute_header,  qword_100A2B020,  "Unable to cast to CKRecordZoneNotification",  42LL,  2LL,  _swiftEmptyArrayStorage,  1LL,  2LL);
        }

LABEL_16:
        break;
      default:
        id v29 = v10;
        uint64_t v30 = static os_log_type_t.error.getter(v10);
        uint64_t v31 = qword_100A2B020;
        uint64_t v32 = swift_allocObject(v4, 72LL, 7LL);
        *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        id v39 = v29;
        type metadata accessor for NotificationType(0LL);
        uint64_t v34 = String.init<A>(describing:)(&v39, v33);
        uint64_t v36 = v35;
        *(void *)(v32 + 56) = &type metadata for String;
        *(void *)(v32 + 64) = sub_1000226F4();
        *(void *)(v32 + 32) = v34;
        *(void *)(v32 + 40) = v36;
        os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Unknown notificationType: %@", 28LL, 2LL, v32);
        swift_bridgeObjectRelease();

        return;
    }
  }

  else
  {
    uint64_t v12 = static os_log_type_t.error.getter(0LL);
    uint64_t v13 = qword_100A2B020;
    uint64_t v14 = swift_allocObject(v4, 72LL, 7LL);
    *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    id v39 = 0LL;
    uint64_t v15 = sub_100004AEC(&qword_1009A03F8);
    uint64_t v16 = String.init<A>(describing:)(&v39, v15);
    uint64_t v18 = v17;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_1000226F4();
    *(void *)(v14 + 32) = v16;
    *(void *)(v14 + 40) = v18;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Unknown notification: %@", 24LL, 2LL, v14);
    swift_bridgeObjectRelease();
  }

            __break(1u);
            goto LABEL_17;
          }

  while (v37 < v25[2])
  {
    id v39 = v37 + 1;
    sub_10001DC4C( (uint64_t)v25 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
    + *(void *)(v6 + 72) * v37,
      (uint64_t)v12,
      type metadata accessor for ShareRecord);
    uint64_t v40 = (uint64_t *)&v12[*(int *)(v5 + 40)];
    unint64_t v42 = *v40;
    uint64_t v41 = v40[1];
    uint64_t v43 = v42 & 0xFFFFFFFFFFFFLL;
    if ((v41 & 0x2000000000000000LL) != 0) {
      uint64_t v44 = HIBYTE(v41) & 0xF;
    }
    else {
      uint64_t v44 = v43;
    }
    if (v44)
    {
      sub_10002218C((uint64_t)v12, (uint64_t)v169, type metadata accessor for ShareRecord);
      uint64_t v45 = 0LL;
      ++v37;
      goto LABEL_24;
    }

    uint64_t v36 = sub_100018C68((uint64_t)v12, type metadata accessor for ShareRecord);
    ++v37;
    if (v26 == v39) {
      goto LABEL_22;
    }
  }

  __break(1u);
LABEL_41:
  uint64_t v79 = v36;
  swift_bridgeObjectRelease();
  sub_1001DBC78(v172);
  uint64_t v80 = v6;
  uint64_t v82 = sub_1006F16F8(v81);
  swift_bridgeObjectRelease();
  uint64_t v83 = CorrelationIdentifierMap.map(destinations:)(v82);
  uint64_t v163 = v80;
  if (v80)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v160 + 8))(v12, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }

  uint64_t v84 = v83;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v84 + 16) <= *(void *)(v79 + 16) >> 3)
  {
    v173[0] = v79;
    sub_1003CC2A4(v84);
    swift_bridgeObjectRelease();
    unint64_t v85 = (void *)v173[0];
  }

  else
  {
    unint64_t v85 = sub_1003CDEB8(v84, v79);
    swift_bridgeObjectRelease();
  }

  uint64_t v86 = v163;
  uint64_t v87 = CorrelationIdentifierMap.map(correlationIdentifiers:)(v85);
  uint64_t v88 = v171;
  if (v86)
  {
    (*(void (**)(_BYTE *, uint64_t))(v160 + 8))(v12, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }

  sub_1001DBF9C(v87);
  uint64_t v90 = v89;
  swift_bridgeObjectRelease();
  uint64_t v12 = (_BYTE *)sub_1006F1294(v90);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001DBC78(v88);
  int v92 = sub_1006F16F8(v91);
  swift_bridgeObjectRelease();
  id v6 = 0LL;
  uint64_t v93 = CorrelationIdentifierMap.map(destinations:)(v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001DBC78(v26);
  uint64_t v95 = sub_1006F16F8(v94);
  swift_bridgeObjectRelease();
  uint64_t v2 = CorrelationIdentifierMap.map(destinations:)(v95);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v93;
  if (*(void *)(v2 + 16) <= *(void *)(v93 + 16) >> 3) {
    goto LABEL_51;
  }
  uint64_t v96 = sub_1003CDEB8(v2, v93);
  swift_bridgeObjectRelease();
LABEL_52:
  uint64_t v97 = v161;
  uint64_t v98 = CorrelationIdentifierMap.map(correlationIdentifiers:)(v96);
  if (v6)
  {
    (*(void (**)(_BYTE *, uint64_t))(v160 + 8))(v97, v162);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }

  sub_1001DBF9C(v98);
  uint64_t v100 = v99;
  swift_bridgeObjectRelease();
  uint64_t v101 = a1;
  uint64_t v102 = sub_1006F1294(v100);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v103 = sub_1004138CC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v104 = (void *)v103;
  uint64_t v165 = (_BYTE *)*((void *)v101 + 2);
  uint64_t v163 = 0LL;
  if (!v165)
  {
    uint64_t v132 = swift_bridgeObjectRelease();
LABEL_84:
    LODWORD(v171) = static os_log_type_t.default.getter(v132);
    if (qword_10099B728 != -1) {
LABEL_87:
    }
      swift_once(&qword_10099B728, sub_1006512E8);
    uint64_t v167 = (_BYTE *)qword_100A2B038;
    uint64_t v133 = (uint64_t (*)(uint64_t))sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v169 = v133;
    uint64_t v134 = swift_allocObject(v133, 72LL, 7LL);
    __n128 v172 = xmmword_1007E67D0;
    *(_OWORD *)(v134 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v135 = UUID.uuidString.getter(v134);
    uint64_t v137 = v136;
    *(void *)(v134 + 56) = &type metadata for String;
    uint64_t v138 = sub_1000226F4();
    *(void *)(v134 + 64) = v138;
    uint64_t v168 = v138;
    *(void *)(v134 + 32) = v135;
    *(void *)(v134 + 40) = v137;
    os_log(_:dso:log:_:_:)(v171, &_mh_execute_header, v167, "Processing beacon: %@", 21LL, 2LL, v134);
    uint64_t v139 = swift_bridgeObjectRelease();
    uint64_t v140 = static os_log_type_t.default.getter(v139);
    uint64_t v171 = qword_100A2B038;
    uint64_t v141 = swift_allocObject(v133, 72LL, 7LL);
    *(_OWORD *)(v141 + swift_weakDestroy(v0 + 16) = v172;
    swift_bridgeObjectRetain(v12);
    uint64_t v142 = v170;
    __n128 v144 = Set.description.getter(v143, &type metadata for MessagingDestination, v170);
    int v146 = v145;
    swift_bridgeObjectRelease();
    *(void *)(v141 + 56) = &type metadata for String;
    *(void *)(v141 + 64) = v138;
    *(void *)(v141 + 32) = v144;
    *(void *)(v141 + 40) = v146;
    os_log(_:dso:log:_:_:)(v140, &_mh_execute_header, v171, "Possible shares  : %@", 21LL, 2LL, v141);
    uint64_t v147 = swift_bridgeObjectRelease();
    uint64_t v148 = static os_log_type_t.default.getter(v147);
    uint64_t v149 = qword_100A2B038;
    uint64_t v150 = swift_allocObject(v169, 72LL, 7LL);
    *(_OWORD *)(v150 + swift_weakDestroy(v0 + 16) = v172;
    swift_bridgeObjectRetain(v102);
    uint64_t v152 = Set.description.getter(v151, &type metadata for MessagingDestination, v142);
    uint64_t v154 = v153;
    swift_bridgeObjectRelease();
    uint64_t v155 = v168;
    *(void *)(v150 + 56) = &type metadata for String;
    *(void *)(v150 + 64) = v155;
    *(void *)(v150 + 32) = v152;
    *(void *)(v150 + 40) = v154;
    os_log(_:dso:log:_:_:)(v148, &_mh_execute_header, v149, "Shares to remove: %@", 20LL, 2LL, v150);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v160 + 8))(v161, v162);
    return v12;
  }

  uint64_t v164 = (char *)v101 + 32;
  *(void *)&__n128 v172 = v12 + 56;
  swift_bridgeObjectRetain(v103);
  uint64_t v169 = v101;
  swift_bridgeObjectRetain(v101);
  uint64_t v105 = 0LL;
  uint64_t v106 = v104;
  while (1)
  {
    uint64_t v109 = &v164[40 * v105];
    uint64_t v110 = v109[2];
    uint64_t v108 = (_BYTE *)v109[3];
    uint64_t v107 = v109[4];
    if (!*((void *)v12 + 2))
    {
      swift_bridgeObjectRetain(v109[2]);
      sub_100018BE4((uint64_t)v108, v107);
      swift_bridgeObjectRetain(v110);
      sub_100018BE4((uint64_t)v108, v107);
      swift_bridgeObjectRetain(v106);
      sub_1000182F0((uint64_t)v108, v107);
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }

    uint64_t v166 = v105;
    uint64_t v171 = (uint64_t)v106;
    uint64_t v111 = *(unsigned __int8 *)v109;
    uint64_t v112 = v109[1];
    Hasher.init(_seed:)(v173, *((void *)v12 + 5));
    Hasher._combine(_:)(v111);
    swift_bridgeObjectRetain(v110);
    sub_100018BE4((uint64_t)v108, v107);
    swift_bridgeObjectRetain(v110);
    uint64_t v167 = v108;
    uint64_t v168 = v107;
    sub_100018BE4((uint64_t)v108, v107);
    swift_bridgeObjectRetain(v171);
    swift_bridgeObjectRetain(v110);
    String.hash(into:)(v173, v112, v110);
    swift_bridgeObjectRelease();
    uint64_t v113 = Hasher._finalize()();
    uint64_t v114 = -1LL << v12[32];
    __n128 v115 = v113 & ~v114;
    if (((*(void *)(v172 + ((v115 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v115) & 1) != 0) {
      break;
    }
LABEL_56:
    uint64_t v108 = v167;
    uint64_t v107 = v168;
    sub_1000182F0((uint64_t)v167, v168);
    swift_bridgeObjectRelease();
    uint64_t v106 = (void *)v171;
    uint64_t v105 = v166;
LABEL_57:
    swift_bridgeObjectRelease();
    ++v105;
    sub_1000182F0((uint64_t)v108, v107);
    swift_bridgeObjectRelease();
    if ((_BYTE *)v105 == v165)
    {
      swift_bridgeObjectRelease();
      uint64_t v132 = swift_bridgeObjectRelease_n(v169, 2LL);
      goto LABEL_84;
    }
  }

  uint64_t v116 = ~v114;
  uint64_t v117 = *((void *)v12 + 6);
  while (1)
  {
    uint64_t v118 = (unsigned __int8 *)(v117 + 24 * v115);
    if (*v118 == (_DWORD)v111)
    {
      uint64_t v119 = *((void *)v118 + 1);
      uint64_t v120 = *((void *)v118 + 2);
      uint64_t v121 = v119 == v112 && v120 == v110;
      if (v121 || (_stringCompareWithSmolCheck(_:_:expecting:)(v119, v120, v112, v110, 0LL) & 1) != 0) {
        break;
      }
    }

    __n128 v115 = (v115 + 1) & v116;
    if (((*(void *)(v172 + ((v115 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v115) & 1) == 0) {
      goto LABEL_56;
    }
  }

  uint64_t v107 = v168;
  if (v168 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    uint64_t v106 = (void *)v171;
    uint64_t v105 = v166;
    uint64_t v108 = v167;
    goto LABEL_57;
  }

  uint64_t v108 = v167;
  sub_10001736C((uint64_t)v167, v168);
  sub_10001736C((uint64_t)v108, v107);
  uint64_t v122 = v171;
  LODWORD(v158) = swift_isUniquelyReferenced_nonNull_native(v171);
  v173[0] = v122;
  uint64_t v124 = sub_10030D3A8(v111, v112, v110);
  uint64_t v125 = *(void *)(v122 + 16);
  uint64_t v126 = (v123 & 1) == 0;
  uint64_t v127 = v125 + v126;
  if (__OFADD__(v125, v126))
  {
    __break(1u);
    goto LABEL_87;
  }

  if (*(void *)(v122 + 24) >= v127)
  {
    if ((v158 & 1) != 0)
    {
      uint64_t v106 = (void *)v173[0];
      if ((v123 & 1) == 0) {
        goto LABEL_80;
      }
    }

    else
    {
      uint64_t v157 = v123;
      uint64_t v158 = v124;
      sub_1000645BC();
      uint64_t v124 = v158;
      uint64_t v106 = (void *)v173[0];
      if ((v157 & 1) == 0) {
        goto LABEL_80;
      }
    }

    goto LABEL_78;
  }

  uint64_t v157 = v123;
  sub_10004EACC(v127, v158);
  uint64_t v128 = sub_10030D3A8(v111, v112, v110);
  if ((v157 & 1) == (v129 & 1))
  {
    uint64_t v124 = v128;
    uint64_t v106 = (void *)v173[0];
    if ((v157 & 1) == 0)
    {
LABEL_80:
      sub_100060C30(v124, v111, v112, v110, (uint64_t)v108, v107, v106);
      swift_bridgeObjectRetain(v110);
      goto LABEL_81;
    }

    v54[(v47 >> 6) + 8] |= 1LL << v47;
    v70(v54[6] + *(void *)(v61 + 72) * v47, (uint64_t)v73, v72);
    *(void *)(v54[7] + 8 * v47) = v42;
    uint64_t v55 = v54[2];
    char v56 = __OFADD__(v55, 1LL);
    uint64_t v57 = v55 + 1;
    if (v56) {
      goto LABEL_22;
    }
    v54[2] = v57;
LABEL_4:
    *a3 = v54;
    swift_bridgeObjectRelease();
    v69(v73, v72);
    uint64_t v31 = v68;
    uint64_t v30 = v41;
    sub_100018C68(v68, v41);
    v28 += v62;
    if (!--v25) {
      goto LABEL_20;
    }
  }

  sub_10004D508(v50, isUniquelyReferenced_nonNull_native);
  __int128 v52 = sub_10030D124((uint64_t)v73);
  a3 = v71;
  if ((v51 & 1) == (v53 & 1))
  {
    uint64_t v47 = v52;
    uint64_t v54 = v74;
    if ((v51 & 1) != 0) {
      goto LABEL_3;
    }
    goto LABEL_16;
  }

  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v72);
  __break(1u);
  return result;
}

            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
            uint64_t v68 = v34;
            sub_1000C9698(v37, v41, isUniquelyReferenced_nonNull_native);
            uint64_t v34 = v68;
            swift_bridgeObjectRelease();
            uint64_t v35 = 1LL;
            if (v38 == 2)
            {
LABEL_18:
              v67[0] = v34;
              sub_1000BDCF0(&v68, 8216LL);
              __asm { BR              X9 }
            }

            uint64_t v36 = v34 + 56;
          }
        }
      }

    id v6 = (v12 - 1) & v12;
    id v7 = __clz(__rbit64(v12)) + (v4 << 6);
  }

  uint64_t v43 = v75[13];
  uint64_t v87 = v75[16];
  uint64_t v90 = v75[12];
  uint64_t v83 = v75[9];
  uint64_t v103 = v75[8];
  uint64_t v44 = v43 + *(int *)(v83 + 48);
  ((void (*)(uint64_t))v100)(v43);
  *(void *)uint64_t v44 = v106;
  *(_BYTE *)(v44 + 8) = v99;
  *(void *)(v44 + swift_weakDestroy(v0 + 16) = v107;
  *(void *)(v44 + 24) = v24;
  *(void *)(v44 + 32) = v92;
  *(void *)(v44 + 40) = v26;
  *(void *)(v44 + 48) = v98;
  *(void *)(v44 + 56) = v78;
  *(_BYTE *)(v44 + 64) = v97;
  *(_BYTE *)(v44 + 65) = v96;
  *(void *)(v44 + 72) = v79;
  *(void *)(v44 + 80) = v95;
  *(void *)(v44 + 88) = v94;
  *(_BYTE *)(v44 + 96) = v93;
  uint64_t v45 = swift_task_alloc(32LL);
  *(void *)(v45 + swift_weakDestroy(v0 + 16) = v43;
  swift_retain();
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  uint64_t v104 = sub_10036D818(v103, (uint64_t (*)(char *, uint64_t, void, void))sub_10036E8E4, v45);
  swift_task_dealloc(v45);
  sub_100015794(v43, &qword_1009AA650);
  uint64_t v46 = v90 + *(int *)(v83 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v100)(v90, v87, v101);
  *(void *)uint64_t v46 = v106;
  *(_BYTE *)(v46 + 8) = v99;
  *(void *)(v46 + swift_weakDestroy(v0 + 16) = v107;
  *(void *)(v46 + 24) = v24;
  *(void *)(v46 + 32) = v92;
  *(void *)(v46 + 40) = v26;
  *(void *)(v46 + 48) = v98;
  *(void *)(v46 + 56) = v78;
  *(_BYTE *)(v46 + 64) = v97;
  *(_BYTE *)(v46 + 65) = v96;
  *(void *)(v46 + 72) = v79;
  *(void *)(v46 + 80) = v95;
  *(void *)(v46 + 88) = v94;
  *(_BYTE *)(v46 + 96) = v93;
  uint64_t v47 = swift_task_alloc(32LL);
  *(void *)(v47 + swift_weakDestroy(v0 + 16) = v90;
  swift_retain();
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  uint64_t v48 = sub_10036D9B0(v41, (uint64_t (*)(char *, void *, void, void))sub_10036E8EC, v47);
  swift_task_dealloc(v47);
  sub_100015794(v90, &qword_1009AA650);
  swift_bridgeObjectRelease();
  sub_1001859D0((uint64_t)v48);
  uint64_t v49 = v104[2];
  if (v49)
  {
    sub_100004AEC((uint64_t *)&unk_10099E440);
    int v50 = (void *)static _DictionaryStorage.allocate(capacity:)(v49);
  }

  else
  {
    int v50 = &_swiftEmptyDictionarySingleton;
  }

  v75[4] = v50;
  swift_bridgeObjectRetain(v104);
  sub_10036D27C(v51, 1, v74);
  v75[20] = v38;
  if (v38) {
    return swift_unexpectedError(v38, "Swift/Dictionary.swift", 22LL, 1LL, 489LL);
  }
  uint64_t v88 = v75[16];
  __int128 v52 = v75[13];
  uint64_t v105 = v75[11];
  char v53 = v75[9];
  uint64_t v91 = v75[10];
  swift_bridgeObjectRelease();
  uint64_t v54 = objc_allocWithZone(&OBJC_CLASS___SPLocationFetchResult);
  sub_10036E8F4();
  sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  char v56 = [v54 initWithResults:isa];
  v75[21] = v56;

  uint64_t v57 = *(int *)(v53 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v100)(v52, v88, v101);
  uint64_t v58 = *(unsigned __int8 *)(v91 + 80);
  uint64_t v59 = (v58 + 16) & ~v58;
  uint64_t v60 = v52 + v57;
  *(void *)uint64_t v60 = v106;
  *(_BYTE *)(v60 + 8) = v99;
  *(void *)(v60 + swift_weakDestroy(v0 + 16) = v107;
  *(void *)(v60 + 24) = v24;
  *(void *)(v60 + 32) = v92;
  *(void *)(v60 + 40) = v26;
  *(void *)(v60 + 48) = v98;
  *(void *)(v60 + 56) = v78;
  *(_BYTE *)(v60 + 64) = v97;
  *(_BYTE *)(v60 + 65) = v96;
  *(void *)(v60 + 72) = v79;
  *(void *)(v60 + 80) = v95;
  *(void *)(v60 + 88) = v94;
  *(_BYTE *)(v60 + 96) = v93;
  uint64_t v61 = (v105 + v59 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v62 = swift_allocObject(&unk_100953E58, v61 + 8, v58 | 7);
  v75[22] = v62;
  sub_100015750(v52, v62 + v59, &qword_1009AA650);
  *(void *)(v62 + v61) = v56;
  unint64_t v63 = async function pointer to unsafeBlocking<A>(_:)[1];
  unint64_t v64 = v56;
  uint64_t v65 = (void *)swift_task_alloc(v63);
  v75[23] = v65;
  uint64_t v66 = sub_100004AEC(&qword_1009AE4D0);
  *uint64_t v65 = v75;
  v65[1] = sub_10036AFE8;
  return unsafeBlocking<A>(_:)(v73, sub_10036EA04, v62, v66);
}

  if (!v24) {
    return result;
  }
  return swift_bridgeObjectRelease();
}

    swift_once(&qword_10099B798, sub_100651870);
    goto LABEL_8;
  }

  uint64_t v49 = v19;
  uint64_t v24 = *(void *)(v11 + v12);
  swift_retain();
  id v25 = [a1 discoveredMetadata];
  uint64_t v26 = [v25 firmwareVersion];

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  id v29 = v28;

  *(void *)(v24 + 88) = v27;
  *(void *)(v24 + 96) = v29;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v30 = [a1 discoveredMetadata];
  uint64_t v31 = [v30 productData];

  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  sub_1000F6254(v32, v34);
  if (v36 >> 60 == 15)
  {
    uint64_t v37 = static os_log_type_t.error.getter(v35);
    id v38 = v49;
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v37,  &_mh_execute_header,  qword_100A2B0A8,  "Invalid product data!",  21LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t result = sub_1000182F0(v38, v21);
    *(void *)a2 = 13LL;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    goto LABEL_13;
  }

  id v39 = *(void *)(v11 + v12);
  uint64_t v40 = *(void *)(v39 + 104);
  uint64_t v41 = *(void *)(v39 + 112);
  *(void *)(v39 + 104) = v35;
  *(void *)(v39 + 112) = v36;
  sub_1000182F0(v40, v41);
  unint64_t v42 = *(void *)(v11 + v12);
  uint64_t v43 = *(void *)(v42 + 16);
  uint64_t v44 = *(void *)(v42 + 24);
  *(void *)a2 = sub_1005CC560(v43, v44);
  *(void *)(a2 + 8) = v45;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v46;
  *(void *)(a2 + 24) = v47;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_BYTE *)(a2 + 80) = 0;
  return sub_10001736C(v43, v44);
}

      sub_100018C68(v41, type metadata accessor for BeaconProductInfoRecord);
    }

    else
    {
      sub_100018C68(v41, type metadata accessor for BeaconProductInfoRecord);
      uint64_t v40 = (uint64_t)v82;
    }

  uint64_t v26 = sub_100626F94(0, a1);
  if ((v27 & 1) == 0)
  {
    uint64_t v28 = [objc_allocWithZone(NSString) initWithBytes:a1 + 32 length:v26 encoding:String.Encoding.rawValue.getter()];
    swift_bridgeObjectRelease();
    if (v28)
    {
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    }

    else
    {
      uint64_t v21 = 0LL;
    }

    goto LABEL_20;
  }

  if (a3 >= 1 && v17 > 0) {
    goto LABEL_23;
  }
  return result;
}

  if ((a1 & 0x40) != 0)
  {
    uint64_t v17 = SPBeaconTaskNameEnableNotifyWhenFound;
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C5728(0LL, v2[2] + 1LL, 1, v2);
    }
    uint64_t v19 = v2[2];
    uint64_t v18 = v2[3];
    uint64_t v20 = v19 + 1;
    if (v19 >= v18 >> 1) {
      uint64_t v2 = sub_1004C5728((void *)(v18 > 1), v19 + 1, 1, v2);
    }
    v2[2] = v20;
    v2[v19 + 4] = v17;
    uint64_t v21 = v2[3];
    uint64_t v22 = v19 + 2;
    uint64_t v23 = SPBeaconTaskNameDisableNotifyWhenFound;
    v2[2] = v22;
    v2[v20 + 4] = v23;
    if ((a1 & 0x100) == 0)
    {
LABEL_18:
      if ((a1 & 0x400) == 0) {
        goto LABEL_19;
      }
      goto LABEL_37;
    }
  }

  else if ((a1 & 0x100) == 0)
  {
    goto LABEL_18;
  }

  uint64_t v24 = SPBeaconTaskNameBeginRanging;
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C5728(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v26 = v2[2];
  id v25 = v2[3];
  uint64_t v27 = v26 + 1;
  if (v26 >= v25 >> 1) {
    uint64_t v2 = sub_1004C5728((void *)(v25 > 1), v26 + 1, 1, v2);
  }
  v2[2] = v27;
  v2[v26 + 4] = v24;
  uint64_t v28 = v2[3];
  id v29 = v26 + 2;
  uint64_t v30 = SPBeaconTaskNameEndRanging;
  v2[2] = v29;
  v2[v27 + 4] = v30;
  if ((a1 & 0x400) == 0)
  {
LABEL_19:
    if ((a1 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }

    [v11 setCapabilities:sub_1006DA6DC(v27)];
    URL._bridgeToObjectiveC()((NSURL *)v13[25]);
    uint64_t v34 = v33;
    [v11 setDefaultHeroIcon:v33];

    URL._bridgeToObjectiveC()((NSURL *)v13[26]);
    uint64_t v36 = v35;
    [v11 setDefaultListIcon:v35];

    URL._bridgeToObjectiveC()((NSURL *)v13[27]);
    id v38 = v37;
    [v11 setDefaultHeroIcon2x:v37];

    URL._bridgeToObjectiveC()((NSURL *)v13[28]);
    uint64_t v40 = v39;
    [v11 setDefaultListIcon2x:v39];

    URL._bridgeToObjectiveC()((NSURL *)v13[29]);
    unint64_t v42 = v41;
    [v11 setDefaultHeroIcon3x:v41];

    URL._bridgeToObjectiveC()((NSURL *)v13[30]);
    uint64_t v44 = v43;
    [v11 setDefaultListIcon3x:v43];

    uint64_t v45 = *(void *)(v1 + v13[31] + 8);
    uint64_t v133 = v11;
    uint64_t v46 = *(void *)(v1 + v13[32]);
    uint64_t v47 = v1 + v13[35];
    uint64_t v48 = -1.0;
    uint64_t v49 = -1.0;
    if ((*(_BYTE *)(v47 + 16) & 1) == 0)
    {
      uint64_t v49 = *(double *)v47;
      uint64_t v48 = *(double *)(v47 + 8);
    }

    uint64_t v131 = v13;
    uint64_t v132 = v1;
    int v50 = objc_allocWithZone(&OBJC_CLASS___SPUnknownProductMetadata);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
    uint64_t v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v53);
    uint64_t v55 = v54;
    char v56 = v132;
    URL._bridgeToObjectiveC()(v57);
    uint64_t v59 = v58;
    uint64_t v60 = v131;
    URL._bridgeToObjectiveC()(v61);
    unint64_t v63 = v62;
    unint64_t v64 = [v50 initWithTitle:v51 description:isa percentageX:v55 percentageY:v59 image:v62 image2x:v49 image3x:v48];

    [v133 setLearnModeMetadata:v64];
    uint64_t v65 = *(void *)(v56 + v60[33] + 8);
    uint64_t v66 = *(void *)(v56 + v60[34]);
    int v67 = v56 + v60[36];
    uint64_t v68 = -1.0;
    uint64_t v69 = -1.0;
    if ((*(_BYTE *)(v67 + 16) & 1) == 0)
    {
      uint64_t v69 = *(double *)v67;
      uint64_t v68 = *(double *)(v67 + 8);
    }

    uint64_t v70 = objc_allocWithZone(&OBJC_CLASS___SPUnknownProductMetadata);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v66);
    uint64_t v71 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v72 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v73);
    uint64_t v75 = v74;
    URL._bridgeToObjectiveC()(v76);
    uint64_t v78 = v77;
    uint64_t v79 = v132;
    URL._bridgeToObjectiveC()(v80);
    uint64_t v82 = v81;
    uint64_t v11 = v131;
    uint64_t v83 = [v70 initWithTitle:v71 description:v72 percentageX:v75 percentageY:v78 image:v81 image2x:v69 image3x:v68];

    uint64_t v84 = v133;
    [v133 setDisableMetadata:v83];

    unint64_t v85 = *(void *)(v79 + v11[22]);
    if (v85)
    {
      uint64_t v86 = *(void *)(v85 + 16);
      if (v86)
      {
        unint64_t v136 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v86);
        uint64_t v87 = (uint64_t *)(v85 + 48);
        do
        {
          int v92 = *((unsigned __int8 *)v87 - 16);
          uint64_t v93 = *v87;
          uint64_t v94 = v87[2];
          uint64_t v95 = v87[4];
          uint64_t v134 = v87[3];
          uint64_t v135 = *((unsigned __int8 *)v87 + 40);
          uint64_t v96 = objc_allocWithZone(&OBJC_CLASS___SPAccessoryLayoutTemplate);
          swift_bridgeObjectRetain(v95);
          swift_bridgeObjectRetain(v93);
          uint64_t v97 = objc_msgSend(v96, "init", swift_bridgeObjectRetain(v94).n128_f64[0]);
          [v97 setPartIdentifier:v92];
          uint64_t v98 = String._bridgeToObjectiveC()();
          [v97 setPartType:v98];

          uint64_t v99 = String._bridgeToObjectiveC()();
          [v97 setPartName:v99];

          if (v95)
          {
            swift_bridgeObjectRetain(v95);
            uint64_t v88 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v88 = 0LL;
          }

          v87 += 8;
          [v97 setPartSymbol:v88];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          [v97 setIsPrimary:v135 & 1];
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v89);
          uint64_t v90 = v136[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v90);
          uint64_t v91 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v90, v97);
          specialized ContiguousArray._endMutation()(v91);
          --v86;
        }

        while (v86);
        uint64_t v79 = v132;
        uint64_t v84 = v133;
        uint64_t v11 = v131;
      }

      sub_10039E9B8();
      uint64_t v100 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v84 setLayoutTemplate:v100];
    }

    uint64_t v101 = (uint64_t *)(v79 + v11[14]);
    if ((v101[1] & 1) != 0) {
      break;
    }
    uint64_t v114 = *v101;
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v27 = sub_1006A0C70((uint64_t)v136);
    swift_bridgeObjectRelease();
    __n128 v115 = *(void *)(v27 + 16);
    if (!v115)
    {
LABEL_52:
      swift_bridgeObjectRelease();
      return v84;
    }

    uint64_t v1 = 0LL;
    uint64_t v13 = (int *)(v27 + 32);
    while (v1 < *(void *)(v27 + 16))
    {
      uint64_t v123 = *(uint64_t **)&v13[8 * v1 + 6];
      uint64_t v124 = v123[2];
      if (v124)
      {
        if (v123[4] == v114)
        {
          uint64_t v116 = v123 + 8;
          uint64_t v117 = v123 + 6;
LABEL_40:
          uint64_t v118 = *v117;
          uint64_t v119 = *v116;
          swift_bridgeObjectRetain(*v117);
          swift_bridgeObjectRetain(v119);
          uint64_t v120 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
          swift_bridgeObjectRetain(v118);
          swift_bridgeObjectRetain(v119);
          uint64_t v121 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          uint64_t v11 = (int *)String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          uint64_t v122 = [v120 initWithRoleId:v114 role:v121 roleEmoji:v11];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v84 = v133;
          [v133 setDefaultRole:v122];
        }

        else if (v124 != 1)
        {
          uint64_t v116 = v123 + 13;
          uint64_t v125 = 1LL;
          while (1)
          {
            uint64_t v126 = v125 + 1;
            if (__OFADD__(v125, 1LL)) {
              break;
            }
            if (*(v116 - 4) == v114)
            {
              uint64_t v117 = v116 - 2;
              goto LABEL_40;
            }

            v116 += 5;
            ++v125;
            if (v126 == v124) {
              goto LABEL_41;
            }
          }

          __break(1u);
          break;
        }
      }

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
      v56[0] = v26;
      sub_1000CA340(v29, v33, isUniquelyReferenced_nonNull_native);
      uint64_t v26 = v56[0];
      swift_bridgeObjectRelease();
      if (v27 == 6) {
        break;
      }
    }

uint64_t sub_1000AD220(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_100022898(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000AD260()
{
  return sub_100676424(v0);
}

void *sub_1000AD278(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
    id v7 = a2 + 1;
    unint64_t v8 = a2[2];
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v7;
    }

    else
    {
      uint64_t v10 = *v7;
      sub_10001736C(*v7, a2[2]);
      v4[1] = v10;
      void v4[2] = v8;
    }

    uint64_t v11 = a3[7];
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    uint64_t v14 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
    uint64_t v19 = a3[9];
    uint64_t v20 = (void *)((char *)v4 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    sub_10008699C(*v21, v23);
    *uint64_t v20 = v22;
    v20[1] = v23;
    uint64_t v24 = a3[11];
    *(void *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *((_BYTE *)v4 + v24) = *((_BYTE *)a2 + v24);
    uint64_t v25 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *(_WORD *)((char *)v4 + v25) = *(_WORD *)((char *)a2 + v25);
    uint64_t v26 = a3[14];
    uint64_t v27 = (void *)((char *)v4 + v26);
    uint64_t v28 = (uint64_t *)((char *)a2 + v26);
    uint64_t v29 = *v28;
    unint64_t v30 = v28[1];
    sub_10001736C(*v28, v30);
    *uint64_t v27 = v29;
    v27[1] = v30;
    *(_DWORD *)((char *)v4 + a3[15]) = *(_DWORD *)((char *)a2 + a3[15]);
  }

  return v4;
}

uint64_t sub_1000AD3F0(uint64_t a1, int *a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >> 60 != 15) {
    sub_100016F9C(*(void *)(a1 + 8), v4);
  }
  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  uint64_t v7 = a1 + a2[8];
  uint64_t v8 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  sub_1000869A4(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  return sub_100016F9C(*(void *)(a1 + a2[14]), *(void *)(a1 + a2[14] + 8));
}

uint64_t sub_1000AD494(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v6 = (uint64_t *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    sub_10001736C(*v6, *(void *)(a2 + 16));
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v7;
  }

  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  uint64_t v17 = a3[9];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  sub_10008699C(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  uint64_t v23 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_WORD *)(a1 + v23) = *(_WORD *)(a2 + v23);
  uint64_t v24 = a3[14];
  uint64_t v25 = (uint64_t *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v27 = *v26;
  unint64_t v28 = v26[1];
  sub_10001736C(*v26, v28);
  *uint64_t v25 = v27;
  v25[1] = v28;
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_1000AD5E0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v6 = (_OWORD *)(a1 + 8);
  unint64_t v7 = (uint64_t *)(a2 + 8);
  unint64_t v8 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 != 15LL)
  {
    if (v8 >> 60 != 15)
    {
      uint64_t v10 = *v7;
      sub_10001736C(*v7, *(void *)(a2 + 16));
      uint64_t v11 = *(void *)(a1 + 8);
      unint64_t v12 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = v10;
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v8;
      sub_100016F9C(v11, v12);
      goto LABEL_8;
    }

    sub_100041D4C(a1 + 8);
    goto LABEL_6;
  }

  if (v8 >> 60 == 15)
  {
LABEL_6:
    *uint64_t v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }

  uint64_t v9 = *v7;
  sub_10001736C(*v7, *(void *)(a2 + 16));
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v8;
LABEL_8:
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24LL))(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 24LL))(v18, v19, v20);
  uint64_t v21 = a3[9];
  uint64_t v22 = (uint64_t *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  sub_10008699C(*v23, v25);
  uint64_t v26 = *v22;
  uint64_t v27 = v22[1];
  *uint64_t v22 = v24;
  v22[1] = v25;
  sub_1000869A4(v26, v27);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_WORD *)(a1 + a3[13]) = *(_WORD *)(a2 + a3[13]);
  uint64_t v28 = a3[14];
  uint64_t v29 = (uint64_t *)(a1 + v28);
  unint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  sub_10001736C(*v30, v32);
  uint64_t v33 = *v29;
  unint64_t v34 = v29[1];
  *uint64_t v29 = v31;
  v29[1] = v32;
  sub_100016F9C(v33, v34);
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_1000AD788(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  uint64_t v14 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  uint64_t v16 = a3[14];
  *(_WORD *)(a1 + a3[13]) = *(_WORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + vswift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + v16);
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_1000AD878(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = *(void *)(a2 + 16);
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *v7;
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v9;
      sub_100016F9C(v10, v8);
      goto LABEL_6;
    }

    sub_100041D4C(a1 + 8);
  }

  *uint64_t v6 = *(_OWORD *)v7;
LABEL_6:
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40LL))(v16, v17, v18);
  uint64_t v19 = a3[9];
  uint64_t v20 = *(void *)(a1 + v19);
  uint64_t v21 = *(void *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_1000869A4(v20, v21);
  uint64_t v22 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  uint64_t v23 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_WORD *)(a1 + v23) = *(_WORD *)(a2 + v23);
  uint64_t v24 = a3[14];
  uint64_t v25 = *(void *)(a1 + v24);
  unint64_t v26 = *(void *)(a1 + v24 + 8);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  sub_100016F9C(v25, v26);
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_1000AD9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AD9D4);
}

uint64_t sub_1000AD9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 2);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = *(int *)(a3 + 28);
    }

    else
    {
      uint64_t v12 = type metadata accessor for MACAddress(0LL);
      uint64_t v11 = *(void *)(v12 - 8);
      uint64_t v13 = *(int *)(a3 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }

uint64_t sub_1000ADA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000ADA80);
}

uint64_t sub_1000ADA80(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 2) = a2 + 1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 28);
    }

    else
    {
      uint64_t v10 = type metadata accessor for MACAddress(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t type metadata accessor for DiscoveredObject(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A0478, (uint64_t)&nominal type descriptor for DiscoveredObject);
}

uint64_t sub_1000ADB2C(uint64_t a1)
{
  v5[0] = &unk_1007EA568;
  v5[1] = &unk_1007EA580;
  v5[2] = &unk_1007EA598;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v5[3] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for MACAddress(319LL);
    if (v4 <= 0x3F)
    {
      v5[4] = *(void *)(result - 8) + 64LL;
      v5[5] = &unk_1007EA5B0;
      v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[7] = (char *)&value witness table for Builtin.Int8 + 64;
      v5[8] = (char *)&value witness table for Builtin.Int8 + 64;
      void v5[9] = &unk_1007EA568;
      v5[10] = &unk_1007EA5C8;
      v5[11] = (char *)&value witness table for Builtin.Int32 + 64;
      swift_initStructMetadata(a1, 256LL, 12LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000ADC10@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LODWORD(v203) = a2;
  uint64_t v208 = a3;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v192 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v192 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  int v201 = (char *)&v192 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v200 = (char *)&v192 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v204 = (unint64_t)&v192 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v197 = (char *)&v192 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v196 = (char *)&v192 - v20;
  __chkstk_darwin(v19);
  *(void *)&__int128 v202 = (char *)&v192 - v21;
  uint64_t v22 = type metadata accessor for MACAddress(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v205 = v22;
  uint64_t v206 = v23;
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v26 = (char *)&v192 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v192 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v199 = (char *)&v192 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v198 = (char *)&v192 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v194 = (char *)&v192 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v195 = (char *)&v192 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  *((void *)&v202 + 1) = (char *)&v192 - v39;
  __chkstk_darwin(v38);
  uint64_t v193 = (char *)&v192 - v40;
  uint64_t v41 = type metadata accessor for UUID(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v192 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v192 - v46;
  uint64_t v212 = type metadata accessor for DiscoveredObject(0LL);
  uint64_t v207 = *(void *)(v212 - 8);
  __chkstk_darwin(v212);
  uint64_t v209 = (char *)&v192 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain(a1);
  uint64_t v210 = (char *)sub_1000B27C4(v49);
  if (!v210)
  {
    swift_bridgeObjectRetain(a1);
    sub_1000B354C(v69, v213);
    sub_100015750((uint64_t)v213, (uint64_t)&v220, &qword_1009A04F0);
    if (v222 >> 60 == 15)
    {
      if (qword_10099B8C8 != -1) {
        swift_once(&qword_10099B8C8, sub_10073B768);
      }
      uint64_t v70 = type metadata accessor for Logger(0LL);
      sub_10000A720(v70, (uint64_t)qword_100A2B390);
      swift_bridgeObjectRetain(a1);
      uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
      os_log_type_t v73 = static os_log_type_t.error.getter(v72);
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v75 = swift_slowAlloc(32LL, -1LL);
        *(void *)&__int128 v217 = v75;
        *(_DWORD *)uint64_t v74 = 136446210;
        uint64_t v211 = v74 + 4;
        swift_bridgeObjectRetain(a1);
        uint64_t v77 = Dictionary.description.getter( v76,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
        unint64_t v79 = v78;
        swift_bridgeObjectRelease();
        *(void *)&v215[0] = sub_1003F11D4(v77, v79, (uint64_t *)&v217);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, (char *)v215 + 8, v211, v74 + 12);
        swift_bridgeObjectRelease_n(a1, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v72,  v73,  "Failed to create BluetoothAdvertisementData from: %{public}s",  v74,  0xCu);
        swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1LL, -1LL);
        swift_slowDealloc(v74, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a1, 2LL);
      }

      uint64_t v132 = v207;
      uint64_t v131 = v208;
      uint64_t v84 = (int *)v212;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v132 + 56))(v131, 1LL, 1LL, v84);
    }

    __int128 v110 = v220;
    if ((*((void *)&v220 + 1) & 0x2000000000000000LL) != 0)
    {
      uint64_t v82 = (uint64_t)v209;
      v209[2] = 1;
      *(_OWORD *)(v82 + 8) = xmmword_1007E7660;
      sub_10001736C(v110, *((void *)&v110 + 1) & 0xDFFFFFFFFFFFFFFFLL);
      sub_10001736C(v110, *((void *)&v110 + 1) & 0xDFFFFFFFFFFFFFFFLL);
      MACAddress.init(addressToSanitize:type:)(v110, *((void *)&v110 + 1) & 0xDFFFFFFFFFFFFFFFLL, 1LL);
      uint64_t v117 = v205;
      uint64_t v133 = v206;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v10, 1LL, v205) != 1)
      {
        uint64_t v134 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
        v134(v29, v10, v117);
        sub_1000869A4(v110, *((uint64_t *)&v110 + 1));
        sub_1000B4B64((uint64_t)v213);
        uint64_t v135 = v29;
        uint64_t v84 = (int *)v212;
        v134((char *)(v82 + *(int *)(v212 + 32)), v135, v117);
        int v81 = 0;
        int v116 = 1;
        goto LABEL_82;
      }
    }

    else
    {
      *((void *)&v202 + 1) = a1;
      uint64_t v82 = (uint64_t)v209;
      v209[2] = 0;
      *(_OWORD *)(v82 + 8) = xmmword_1007E7660;
      sub_10001736C(v110, *((unint64_t *)&v110 + 1));
      sub_10001736C(v110, *((unint64_t *)&v110 + 1));
      sub_100178C64(6LL, v110, *((uint64_t *)&v110 + 1));
      __int128 v111 = v217;
      sub_10001736C(v217, *((unint64_t *)&v217 + 1));
      MACAddress.init(addressToSanitize:type:)(v111, *((void *)&v111 + 1), 1LL);
      uint64_t v113 = v205;
      uint64_t v112 = v206;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v7, 1LL, v205) != 1)
      {
        uint64_t v114 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
        v114(v26, v7, v113);
        sub_1000869A4(v110, *((uint64_t *)&v110 + 1));
        sub_1000B4B64((uint64_t)v213);
        sub_100016F9C(v111, *((unint64_t *)&v111 + 1));
        __n128 v115 = (int *)v212;
        v114((char *)(v82 + *(int *)(v212 + 32)), v26, v113);
        int v81 = 0;
        int v116 = 1;
        a1 = *((void *)&v202 + 1);
        uint64_t v117 = v113;
        uint64_t v84 = v115;
        goto LABEL_82;
      }

      __break(1u);
    }

    __break(1u);
    goto LABEL_112;
  }

  uint64_t v50 = a1;
  if (qword_10099B0D0 != -1) {
    swift_once(&qword_10099B0D0, sub_1000B0608);
  }
  uint64_t v51 = sub_10000A720(v41, (uint64_t)qword_100A2A140);
  __int128 v52 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v52(v47, v51, v41);
  char v53 = v210;
  if (*((void *)v210 + 2) && (unint64_t v54 = sub_10030D124((uint64_t)v47), (v55 & 1) != 0))
  {
    char v56 = (uint64_t *)(*((void *)v53 + 7) + 16 * v54);
    uint64_t v57 = *v56;
    unint64_t v58 = v56[1];
    sub_10001736C(*v56, v58);
  }

  else
  {
    uint64_t v57 = 0LL;
    unint64_t v58 = 0xF000000000000000LL;
  }

  uint64_t v59 = *(void (**)(char *, uint64_t))(v42 + 8);
  v59(v47, v41);
  uint64_t v60 = sub_1000B2C08(v57, v58);
  uint64_t v211 = (uint8_t *)v62;
  if ((v60 & 0xFF00) == 0x200)
  {
    if (qword_10099B0D8 != -1) {
      swift_once(&qword_10099B0D8, sub_1000B061C);
    }
    uint64_t v63 = sub_10000A720(v41, (uint64_t)qword_100A2A158);
    v52(v45, v63, v41);
    if (*((void *)v53 + 2) && (unint64_t v64 = sub_10030D124((uint64_t)v45), (v65 & 1) != 0))
    {
      uint64_t v66 = (uint64_t *)(*((void *)v53 + 7) + 16 * v64);
      uint64_t v67 = *v66;
      unint64_t v68 = v66[1];
      sub_10001736C(*v66, v68);
    }

    else
    {
      uint64_t v67 = 0LL;
      unint64_t v68 = 0xF000000000000000LL;
    }

    swift_bridgeObjectRelease();
    v59(v45, v41);
    char v96 = sub_1000B4C10(v67, v68);
    uint64_t v211 = (uint8_t *)v98;
    if (v96 == 2LL)
    {
      a1 = v50;
      swift_bridgeObjectRetain(v50);
      sub_1000B354C(v99, v213);
      sub_100015750((uint64_t)v213, (uint64_t)&v220, &qword_1009A04F0);
      uint64_t v84 = (int *)v212;
      uint64_t v82 = (uint64_t)v209;
      if (v222 >> 60 == 15)
      {
        if (qword_10099B8C8 != -1) {
          swift_once(&qword_10099B8C8, sub_10073B768);
        }
        uint64_t v100 = type metadata accessor for Logger(0LL);
        sub_10000A720(v100, (uint64_t)qword_100A2B390);
        swift_bridgeObjectRetain(v50);
        uint64_t v102 = (os_log_s *)Logger.logObject.getter(v101);
        os_log_type_t v103 = static os_log_type_t.error.getter(v102);
        if (os_log_type_enabled(v102, v103))
        {
          uint64_t v104 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v105 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v217 = v105;
          *(_DWORD *)uint64_t v104 = 136446210;
          swift_bridgeObjectRetain(v50);
          uint64_t v211 = (uint8_t *)&type metadata for Any + 8;
          uint64_t v107 = Dictionary.description.getter( v106,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
          unint64_t v109 = v108;
          swift_bridgeObjectRelease();
          *(void *)&v215[0] = sub_1003F11D4(v107, v109, (uint64_t *)&v217);
          uint64_t v84 = (int *)v212;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, (char *)v215 + 8, v104 + 4, v104 + 12);
          swift_bridgeObjectRelease_n(a1, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v102,  v103,  "Failed to create BluetoothAdvertisementData from: %{public}s",  v104,  0xCu);
          swift_arrayDestroy(v105, 1LL, v211);
          swift_slowDealloc(v105, -1LL, -1LL);
          swift_slowDealloc(v104, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v50, 2LL);
        }

LABEL_75:
        uint64_t v132 = v207;
        uint64_t v131 = v208;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v132 + 56))(v131, 1LL, 1LL, v84);
      }

      __int128 v144 = v220;
      if ((*((void *)&v220 + 1) & 0x2000000000000000LL) != 0)
      {
        v209[2] = 1;
        *(_OWORD *)(v82 + 8) = xmmword_1007E7660;
        sub_10001736C(v144, *((void *)&v144 + 1) & 0xDFFFFFFFFFFFFFFFLL);
        sub_10001736C(v144, *((void *)&v144 + 1) & 0xDFFFFFFFFFFFFFFFLL);
        uint64_t v162 = v200;
        MACAddress.init(addressToSanitize:type:)(v144, *((void *)&v144 + 1) & 0xDFFFFFFFFFFFFFFFLL, 1LL);
        uint64_t v117 = v205;
        uint64_t v163 = v206;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v162, 1LL, v205) != 1)
        {
          uint64_t v164 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
          uint64_t v165 = v198;
          v164(v198, v162, v117);
          sub_1000869A4(v144, *((uint64_t *)&v144 + 1));
          sub_1000B4B64((uint64_t)v213);
          v164((char *)(v82 + v84[8]), v165, v117);
          goto LABEL_80;
        }

LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }

  sub_10001736C(v136, *((void *)&v136 + 1) & 0xDFFFFFFFFFFFFFFFLL);
  sub_10001736C(v136, *((void *)&v136 + 1) & 0xDFFFFFFFFFFFFFFFLL);
  __int128 v159 = v196;
  MACAddress.init(addressToSanitize:type:)(v136, *((void *)&v136 + 1) & 0xDFFFFFFFFFFFFFFFLL, 1LL);
  uint64_t v117 = v205;
  uint64_t v160 = v206;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v159, 1LL, v205) == 1)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }

  uint64_t v161 = *(void (**)(uint64_t, char *, uint64_t))(v160 + 32);
  v161(*((void *)&v202 + 1), v159, v117);
  sub_1000869A4(v136, *((uint64_t *)&v136 + 1));
  sub_1000B4B64((uint64_t)v213);
  sub_1000B4D10(v80, (uint64_t)v211, v204);
  v161(v82 + v84[8], *((char **)&v202 + 1), v117);
  int v116 = 0;
  uint64_t v211 = 0LL;
  unint64_t v204 = 0xC000000000000000LL;
  int v81 = 1;
LABEL_82:
  *(_BYTE *)uint64_t v82 = v81;
  *(_BYTE *)(v82 + 1) = v116;
  uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataTimestamp);
  if (*(void *)(a1 + 16) && (uint64_t v168 = sub_10030CF14(v166, v167), (v169 & 1) != 0))
  {
    sub_10006A650(*(void *)(a1 + 56) + 32 * v168, (uint64_t)&v217);
  }

  else
  {
    __int128 v217 = 0u;
    __int128 v218 = 0u;
  }

  swift_bridgeObjectRelease();
  if (!*((void *)&v218 + 1))
  {
    sub_100015794((uint64_t)&v217, &qword_10099E200);
    goto LABEL_92;
  }

  uint64_t v170 = swift_dynamicCast(v215, &v217, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL);
  if ((v170 & 1) == 0)
  {
LABEL_92:
    if (qword_10099B8C8 != -1) {
      swift_once(&qword_10099B8C8, sub_10073B768);
    }
    uint64_t v171 = type metadata accessor for Logger(0LL);
    sub_10000A720(v171, (uint64_t)qword_100A2B390);
    swift_bridgeObjectRetain(a1);
    uint64_t v173 = (os_log_s *)Logger.logObject.getter(v172);
    os_log_type_t v174 = static os_log_type_t.error.getter(v173);
    if (os_log_type_enabled(v173, v174))
    {
      uint64_t v175 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v176 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v217 = v176;
      *(_DWORD *)uint64_t v175 = 136446210;
      uint64_t v203 = v175 + 4;
      swift_bridgeObjectRetain(a1);
      uint64_t v178 = Dictionary.description.getter( v177,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      unint64_t v180 = v179;
      swift_bridgeObjectRelease();
      *(void *)&v215[0] = sub_1003F11D4(v178, v180, (uint64_t *)&v217);
      uint64_t v84 = (int *)v212;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, (char *)v215 + 8, v203, v175 + 12);
      swift_bridgeObjectRelease_n(a1, 2LL);
      uint64_t v117 = v205;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v173,  v174,  "Expected CBAdvertisementDataTimestamp key in: %{public}s",  v175,  0xCu);
      swift_arrayDestroy(v176, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v176, -1LL, -1LL);
      uint64_t v181 = v175;
      uint64_t v82 = (uint64_t)v209;
      swift_slowDealloc(v181, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
    }

    uint64_t v132 = v207;
    uint64_t v131 = v208;
    uint64_t v182 = v206;
    if (v210) {
      sub_100016F9C((uint64_t)v211, v204);
    }
    sub_1000182F0(*(void *)(v82 + 8), *(void *)(v82 + 16));
    (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v82 + v84[8], v117);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v132 + 56))(v131, 1LL, 1LL, v84);
  }

  Date.init(timeIntervalSinceReferenceDate:)(v170);
  *(_DWORD *)(v82 + v84[15]) = (_DWORD)v203;
  if (v116)
  {
    if (v81) {
      goto LABEL_103;
    }
  }

  else if (v81 != 1)
  {
    goto LABEL_103;
  }

  swift_bridgeObjectRetain(a1);
  sub_1000B354C(v184, v214);
  sub_100015750((uint64_t)v214, (uint64_t)v215, &qword_1009A04F0);
  if (*((void *)&v216 + 1) >> 60 == 15LL)
  {
LABEL_103:
    Data.init(stringLiteral:)(0x3030303030303030LL, 0xEC00000030303030LL);
    __asm { BR              X10 }
  }

  __int128 v217 = v215[0];
  __int128 v218 = v215[1];
  __int128 v219 = v216;
  swift_bridgeObjectRelease();
  sub_1000B4BD4(&v217, &v223);
  sub_1000B4BD4(&v223, (_OWORD *)(v82 + v84[9]));
  *(void *)(v82 + v84[10]) = v218;
  *(_BYTE *)(v82 + v84[11]) = BYTE8(v218);
  __int128 v224 = v219;
  sub_1000B4BE4((uint64_t *)&v223);
  sub_100018BF8((uint64_t)&v224);
  sub_1000B4B64((uint64_t)v214);
  *(_OWORD *)(v82 + v84[14]) = v224;
  *(_BYTE *)(v82 + v84[12]) = BYTE9(v218);
  sub_100015750((uint64_t)&v218 + 10, (uint64_t)v225, &qword_1009A04F8);
  sub_100015750((uint64_t)v225, v82 + v84[13], &qword_1009A04F8);
  uint64_t v187 = v207;
  uint64_t v186 = v208;
  if (v210) {
    sub_100016F9C((uint64_t)v211, v204);
  }
  sub_10006BBD4(v82, v186);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v187 + 56))(v186, 0LL, 1LL, v84);
  return sub_100018C68(v82, type metadata accessor for DiscoveredObject);
}

      unint64_t v222 = v466;
LABEL_113:
      ((void (*)(uint64_t, uint64_t, uint64_t, char *))v463[7])(v464, 1LL, 1LL, v222);
      int v475 = 0LL;
      goto LABEL_114;
    }

      uint64_t v118 = swift_bridgeObjectRelease();
      *(void *)((v135 & 0xFFFFFFFFFFFFF8LL) + 0x10) = 0LL;
      specialized Array._endMutation()(v118);
      swift_bridgeObjectRelease();
      return;
    }
  }

  else
  {
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = sub_1006D4ACC();
    uint64_t v11 = static Array._allocateBufferUninitialized(minimumCapacity:)(v9, v10);
    *(void *)((v11 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v9;
    uint64_t v129 = (id *)((v11 & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v135 = v11;
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = *a1;
  uint64_t v15 = *a1 + 16;
  uint64_t v122 = *a1 - 8;
  char v123 = v15;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  uint64_t v127 = v6;
  uint64_t v134 = v14;
  while (1)
  {
    uint64_t v17 = v13 + 1;
    uint64_t v126 = v13;
    if (v13 + 1 < v6)
    {
      uint64_t v18 = v12;
      uint64_t v19 = *(void **)(v14 + 8 * v13);
      uint64_t v20 = *(id *)(v14 + 8 * v17);
      uint64_t v21 = v19;
      uint64_t v22 = [v20 timestamp];
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v22);

      uint64_t v23 = [v21 timestamp];
      uint64_t v24 = v132;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

      LODWORD(v128) = static Date.< infix(_:_:)(v5, v24);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v131 + 8);
      unint64_t v26 = v24;
      uint64_t v27 = v133;
      v25(v26, v133);
      v25(v5, v27);

      uint64_t v6 = v127;
      uint64_t v17 = v13 + 2;
      if (v13 + 2 < v6)
      {
        uint64_t v28 = (id *)(v123 + 8 * v13);
        while (1)
        {
          uint64_t v29 = v17;
          uint64_t v30 = *(v28 - 1);
          uint64_t v31 = *v28;
          uint64_t v32 = v30;
          uint64_t v33 = [v31 timestamp];
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

          uint64_t v34 = [v32 timestamp];
          uint64_t v35 = v132;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

          LODWORD(v34) = static Date.< infix(_:_:)(v5, v35);
          uint64_t v36 = v35;
          uint64_t v37 = v133;
          v25(v36, v133);
          v25(v5, v37);

          uint64_t v17 = v29 + 1;
          ++v28;
          uint64_t v6 = v127;
          if (v127 == v29 + 1)
          {
            uint64_t v17 = v127;
            goto LABEL_22;
          }
        }

        uint64_t v6 = v127;
        uint64_t v17 = v29;
LABEL_22:
        uint64_t v13 = v126;
      }

      uint64_t v12 = v18;
      uint64_t v14 = v134;
      if ((v128 & 1) != 0)
      {
        if (v17 < v13) {
          goto LABEL_135;
        }
        if (v13 < v17)
        {
          uint64_t v38 = (uint64_t *)(v122 + 8 * v17);
          uint64_t v39 = v17;
          uint64_t v40 = v13;
          uint64_t v41 = (uint64_t *)(v134 + 8 * v13);
          do
          {
            if (v40 != --v39)
            {
              if (!v14) {
                goto LABEL_140;
              }
              uint64_t v42 = *v41;
              char *v41 = *v38;
              *uint64_t v38 = v42;
            }

            ++v40;
            --v38;
            ++v41;
          }

          while (v40 < v39);
        }
      }
    }

    if (v17 < v6)
    {
      if (__OFSUB__(v17, v13)) {
        goto LABEL_133;
      }
      if (v17 - v13 < v124) {
        break;
      }
    }

void *sub_1000AF3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_10003299C(0, 0LL, 0);
  uint64_t v4 = _swiftEmptyArrayStorage;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  swift_bridgeObjectRetain(a1);
  sub_1006F26D4(&v34);
  char v6 = v34;
  uint64_t v5 = v35;
  uint64_t v8 = v36;
  uint64_t v7 = v37;
  uint64_t v9 = v38;
  sub_100015750((uint64_t)&v34, (uint64_t)v39, &qword_1009A0510);
  if (v40)
  {
    uint64_t v10 = sub_1000372EC( (unint64_t *)&qword_1009A0520,  &qword_1009A0518,  (uint64_t)&protocol conformance descriptor for <A> ArraySlice<A>);
    do
    {
      uint64_t v11 = sub_100004AEC(&qword_1009A0518);
      v33[3] = v11;
      v33[4] = v10;
      uint64_t v12 = (void *)swift_allocObject(&unk_10093C890, 48LL, 7LL);
      v33[0] = v12;
      v12[2] = v5;
      v12[3] = v8;
      v12[4] = v7;
      v12[5] = v9;
      uint64_t v13 = sub_100012ED8(v33, v11);
      uint64_t v14 = v13[2];
      uint64_t v15 = v13[3] >> 1;
      uint64_t v16 = v15 - v14;
      if (__OFSUB__(v15, v14)) {
        __break(1u);
      }
      if (v16)
      {
        uint64_t v17 = (const void *)(v13[1] + v14);
        if (v16 <= 14)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v29 = v15 - v14;
          memcpy(__dst, v17, v15 - v14);
          uint64_t v21 = *(void *)__dst;
          unint64_t v22 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v29 << 48);
          sub_1000B4D50((uint64_t)&v34);
        }

        else
        {
          uint64_t v18 = type metadata accessor for __DataStorage(0LL);
          swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
          sub_1000B4D50((uint64_t)&v34);
          uint64_t v19 = __DataStorage.init(bytes:length:)(v17, v16);
          uint64_t v20 = v19;
          if ((unint64_t)v16 >= 0x7FFFFFFF)
          {
            uint64_t v23 = type metadata accessor for Data.RangeReference(0LL);
            uint64_t v21 = swift_allocObject(v23, 32LL, 7LL);
            *(void *)(v21 + swift_weakDestroy(v0 + 16) = 0LL;
            *(void *)(v21 + 24) = v16;
            unint64_t v22 = v20 | 0x8000000000000000LL;
          }

          else
          {
            uint64_t v21 = v16 << 32;
            unint64_t v22 = v19 | 0x4000000000000000LL;
          }
        }
      }

      else
      {
        sub_1000B4D50((uint64_t)&v34);
        uint64_t v21 = 0LL;
        unint64_t v22 = 0xC000000000000000LL;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
      sub_1000B4D78((uint64_t)&v34);
      uint64_t v32 = v4;
      unint64_t v25 = v4[2];
      unint64_t v24 = v4[3];
      if (v25 >= v24 >> 1)
      {
        sub_10003299C(v24 > 1, v25 + 1, 1);
        uint64_t v4 = v32;
      }

      void v4[2] = v25 + 1;
      unint64_t v26 = &v4[3 * v25];
      *((_BYTE *)v26 + 32) = v6;
      void v26[5] = v21;
      v26[6] = v22;
      sub_1006F26D4(&v34);
      char v6 = v34;
      uint64_t v5 = v35;
      uint64_t v8 = v36;
      uint64_t v7 = v37;
      uint64_t v9 = v38;
      sub_100015750((uint64_t)&v34, (uint64_t)v39, &qword_1009A0510);
    }

    while (v40);
  }

  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000AF6B0(__int16 a1)
{
  if ((a1 & 0x100) != 0)
  {
    if ((_BYTE)a1) {
      return 0x5079636167656C2ELL;
    }
    else {
      return 0x3831657079742ELL;
    }
  }

  else
  {
    v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
    object = v1._object;
    String.append(_:)(v1);
    swift_bridgeObjectRelease(object);
    v3._uint64_t countAndFlagsBits = 41LL;
    v3._object = (void *)0xE100000000000000LL;
    String.append(_:)(v3);
    return 0x2868736F702ELL;
  }

uint64_t sub_1000AF76C(void *a1, unsigned int a2)
{
  unsigned int v34 = a2;
  uint64_t v3 = sub_100004AEC(&qword_1009A0720);
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A0728);
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A0730);
  uint64_t v28 = *(void *)(v9 - 8);
  uint64_t v29 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A0738);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_100012ED8(a1, v16);
  unint64_t v18 = sub_1000B7F20();
  uint64_t v19 = v17;
  uint64_t v20 = v34;
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AdvertismentType.CodingKeys,  &type metadata for AdvertismentType.CodingKeys,  v18,  v16,  v19);
  if ((v20 & 0x100) != 0)
  {
    if ((_BYTE)v20)
    {
      char v36 = 1;
      unint64_t v24 = sub_1000B7FA8();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for AdvertismentType.LegacyPoshCodingKeys,  &v36,  v12,  &type metadata for AdvertismentType.LegacyPoshCodingKeys,  v24);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
    }

    else
    {
      char v35 = 0;
      unint64_t v25 = sub_1000B7FEC();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for AdvertismentType.Type18CodingKeys,  &v35,  v12,  &type metadata for AdvertismentType.Type18CodingKeys,  v25);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
    }
  }

  else
  {
    char v37 = 2;
    unint64_t v21 = sub_1000B7F64();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for AdvertismentType.PoshCodingKeys,  &v37,  v12,  &type metadata for AdvertismentType.PoshCodingKeys,  v21);
    uint64_t v22 = v20;
    uint64_t v23 = v33;
    KeyedEncodingContainer.encode(_:forKey:)(v22);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v23);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_1000AF9E0()
{
  uint64_t v1 = 0x6F5079636167656CLL;
  if (*v0 != 1) {
    uint64_t v1 = 1752395632LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x383165707974LL;
  }
}

uint64_t sub_1000AFA34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000B73E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000AFA58(uint64_t a1)
{
  unint64_t v2 = sub_1000B7F20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AFA80(uint64_t a1)
{
  unint64_t v2 = sub_1000B7F20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AFAA8()
{
  return 0LL;
}

void sub_1000AFAB4(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000AFAC0(uint64_t a1)
{
  unint64_t v2 = sub_1000B7FA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AFAE8(uint64_t a1)
{
  unint64_t v2 = sub_1000B7FA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AFB18()
{
  return 0x6B726F7774656ELL;
}

uint64_t sub_1000AFB30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6B726F7774656ELL && a2 == 0xE700000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE700000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B726F7774656ELL, 0xE700000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000AFBC4(uint64_t a1)
{
  unint64_t v2 = sub_1000B7F64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AFBEC(uint64_t a1)
{
  unint64_t v2 = sub_1000B7F64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AFC14@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_1000AFC40(uint64_t a1)
{
  unint64_t v2 = sub_1000B7FEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AFC68(uint64_t a1)
{
  unint64_t v2 = sub_1000B7FEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AFC90@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000B7530(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = BYTE1(result) & 1;
  }

  return result;
}

uint64_t sub_1000AFCC0(void *a1)
{
  return sub_1000AF76C(a1, *v1 | (v1[1] << 8));
}

uint64_t sub_1000AFCE8()
{
  return sub_1000AF6B0(*v0 | (unsigned __int16)(v0[1] << 8));
}

uint64_t sub_1000AFD00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v4);
  char v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for MACAddress(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    strcpy((char *)v21, ".wild(advt: ");
    BYTE5(v21[1]) = 0;
    HIWORD(v21[1]) = -5120;
    uint64_t v19 = a1;
    unint64_t v20 = a2;
    sub_10008699C(a1, a2);
    unint64_t v11 = sub_1000B113C();
    uint64_t v12 = &type metadata for Advertisement;
LABEL_5:
    v17._uint64_t countAndFlagsBits = RawRepresentable<>.hexString.getter(v12, v11);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 41LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    sub_1000869A4(a1, a2);
    return v21[0];
  }

  v21[0] = 0LL;
  v21[1] = 0xE000000000000000LL;
  sub_10001736C(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease();
  v21[0] = 0xD000000000000014LL;
  v21[1] = 0x8000000100853590LL;
  sub_10001736C(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
  MACAddress.init(addressToSanitize:type:)(a1, a2 & 0xDFFFFFFFFFFFFFFFLL, 1LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    uint64_t v14 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v14);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v16._uint64_t countAndFlagsBits = 0x203A74766461202CLL;
    v16._object = (void *)0xE800000000000000LL;
    String.append(_:)(v16);
    uint64_t v19 = a1;
    unint64_t v20 = a2 & 0xDFFFFFFFFFFFFFFFLL;
    unint64_t v11 = sub_1000B1180();
    uint64_t v12 = &type metadata for NearOwnerAdvertisement;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000AFF48(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v35 = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009A0670);
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A0678);
  uint64_t v29 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A0680);
  uint64_t v32 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_100012ED8(a1, v15);
  unint64_t v16 = sub_1000B7294();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AdvertisementUnion.CodingKeys,  &type metadata for AdvertisementUnion.CodingKeys,  v16,  v15,  v14);
  if ((a3 & 0x2000000000000000LL) != 0)
  {
    LOBYTE(v33) = 1;
    uint64_t v22 = v35;
    sub_10001736C(v35, a3 & 0xDFFFFFFFFFFFFFFFLL);
    unint64_t v23 = sub_1000B72D8();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for AdvertisementUnion.NearOwnerCodingKeys,  &v33,  v11,  &type metadata for AdvertisementUnion.NearOwnerCodingKeys,  v23);
    uint64_t v33 = v22;
    unint64_t v34 = a3 & 0xDFFFFFFFFFFFFFFFLL;
    unint64_t v24 = sub_1000B731C();
    uint64_t v25 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, v26, v31, &type metadata for NearOwnerAdvertisement, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v25);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
    uint64_t v21 = v22;
  }

  else
  {
    LOBYTE(v33) = 0;
    uint64_t v17 = v35;
    sub_10001736C(v35, a3);
    unint64_t v18 = sub_1000B7360();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for AdvertisementUnion.WildCodingKeys,  &v33,  v11,  &type metadata for AdvertisementUnion.WildCodingKeys,  v18);
    uint64_t v33 = v17;
    unint64_t v34 = a3;
    unint64_t v19 = sub_1000B73A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, v20, v8, &type metadata for Advertisement, v19);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
    uint64_t v21 = v17;
  }

  return sub_1000869A4(v21, a3);
}

uint64_t sub_1000B01D4()
{
  if (*v0) {
    return 0x656E774F7261656ELL;
  }
  else {
    return 1684826487LL;
  }
}

uint64_t sub_1000B020C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000B7954(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B0230(uint64_t a1)
{
  unint64_t v2 = sub_1000B7294();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B0258(uint64_t a1)
{
  unint64_t v2 = sub_1000B7294();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B0280()
{
  return 12383LL;
}

uint64_t sub_1000B0290(uint64_t a1)
{
  unint64_t v2 = sub_1000B72D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B02B8(uint64_t a1)
{
  unint64_t v2 = sub_1000B72D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B02E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE200000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383LL, 0xE200000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000B035C(uint64_t a1)
{
  unint64_t v2 = sub_1000B7360();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B0384(uint64_t a1)
{
  unint64_t v2 = sub_1000B7360();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1000B03AC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000B7A40(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_1000B03D4(void *a1)
{
  return sub_1000AFF48(a1, *(void *)v1, *(void *)(v1 + 8));
}

Swift::Int sub_1000B03EC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)((v2 >> 61) & 1);
  sub_10001736C(v1, v2 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)(v4, v1, v2 & 0xDFFFFFFFFFFFFFFFLL);
  sub_1000869A4(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000B0464(uint64_t a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  Hasher._combine(_:)((v4 >> 61) & 1);
  sub_10001736C(v3, v4 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)(a1, v3, v4 & 0xDFFFFFFFFFFFFFFFLL);
  return sub_1000869A4(v3, v4);
}

Swift::Int sub_1000B04C8(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)((v3 >> 61) & 1);
  sub_10001736C(v2, v3 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)(v5, v2, v3 & 0xDFFFFFFFFFFFFFFFLL);
  sub_1000869A4(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1000B053C()
{
  return sub_1000AFD00(*v0, v0[1]);
}

uint64_t sub_1000B0544(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if ((v3 & 0x2000000000000000LL) != 0)
  {
    if ((v5 & 0x2000000000000000LL) != 0)
    {
      sub_10008699C(*a1, v3);
      sub_10008699C(v4, v5);
      uint64_t v6 = v2;
      unint64_t v7 = v3 & 0xDFFFFFFFFFFFFFFFLL;
      goto LABEL_7;
    }
  }

  else if ((v5 & 0x2000000000000000LL) == 0)
  {
    sub_10008699C(*a1, v3);
    sub_10008699C(v4, v5);
    uint64_t v6 = v2;
    unint64_t v7 = v3;
LABEL_7:
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    char v8 = v9;
    sub_1000869A4(v4, v5);
    sub_1000869A4(v2, v3);
    return v8 & 1;
  }

  char v8 = 0;
  return v8 & 1;
}

void sub_1000B0608(uint64_t a1)
{
}

void sub_1000B061C(uint64_t a1)
{
}

void sub_1000B0630(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  sub_10000A8AC(v3, a2);
  sub_10000A720(v3, (uint64_t)a2);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [(id)objc_opt_self(CBUUID) UUIDWithString:v4];

  sub_100598998();
}

uint64_t sub_1000B06D0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  sub_10008699C(*v0, v2);
  v3._uint64_t countAndFlagsBits = sub_1000AFD00(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  sub_1000869A4(v1, v2);
  v4._uint64_t countAndFlagsBits = 0x3A73757461747320LL;
  v4._object = (void *)0xE900000000000020LL;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0x3A64616F6C796170LL;
}

uint64_t sub_1000B07D4()
{
  uint64_t v1 = type metadata accessor for DefaultStringInterpolation.BinaryIntegerRadix(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::String v4 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v5 = *v0;
  if (v0[1] == 1)
  {
    if (*v0) {
      uint64_t v6 = 0x6F5079636167654CLL;
    }
    else {
      uint64_t v6 = 0x38312065707954LL;
    }
    if (*v0) {
      unint64_t v7 = (void *)0xEA00000000006873LL;
    }
    else {
      unint64_t v7 = (void *)0xE700000000000000LL;
    }
  }

  else
  {
    uint64_t v70 = 0x5B68736F50LL;
    unint64_t v71 = 0xE500000000000000LL;
    LOBYTE(v69._countAndFlagsBits) = v5;
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 93LL;
    v9._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v9);
    uint64_t v6 = v70;
    unint64_t v7 = (void *)v71;
  }

  uint64_t v10 = type metadata accessor for DiscoveredObject(0LL);
  uint64_t v11 = (int *)v10;
  uint64_t v12 = (uint64_t *)&v0[*(int *)(v10 + 36)];
  uint64_t v14 = *v12;
  unint64_t v13 = v12[1];
  if ((v13 & 0x2000000000000000LL) != 0)
  {
    uint64_t v70 = 0LL;
    unint64_t v71 = 0xE000000000000000LL;
    sub_10001736C(v14, v13 & 0xDFFFFFFFFFFFFFFFLL);
    _StringGuts.grow(_:)(70LL);
    v18._uint64_t countAndFlagsBits = 0x7461446E6163735BLL;
    v18._unint64_t object = (void *)0xEB00000000203A65LL;
    String.append(_:)(v18);
    uint64_t v19 = type metadata accessor for Date(0LL);
    uint64_t v20 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0x203A6570797420LL;
    v22._unint64_t object = (void *)0xE700000000000000LL;
    String.append(_:)(v22);
    v23._uint64_t countAndFlagsBits = v6;
    v23._unint64_t object = v7;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0x7373657264646120LL;
    v24._unint64_t object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v24);
    uint64_t v25 = type metadata accessor for MACAddress(0LL);
    uint64_t v26 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 0x203A56444120LL;
    v28._unint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v28);
    v69._uint64_t countAndFlagsBits = v14;
    v69._unint64_t object = (void *)(v13 & 0xDFFFFFFFFFFFFFFFLL);
    unint64_t v29 = sub_1000B1180();
    v30._uint64_t countAndFlagsBits = RawRepresentable<>.hexString.getter(&type metadata for NearOwnerAdvertisement, v29);
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 0x3A73757461747320LL;
    v31._unint64_t object = (void *)0xE900000000000020LL;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = sub_100040BA4(v0[v11[11]]);
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    unint64_t v33 = 0xE500000000000000LL;
    v34._uint64_t countAndFlagsBits = 0x203A6B6520LL;
    v34._unint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v34);
    char v35 = v0[v11[12]];
    v69._uint64_t countAndFlagsBits = 0x203A4D6F427BLL;
    v69._unint64_t object = (void *)0xE600000000000000LL;
    if ((v35 & 4) != 0) {
      uint64_t v36 = 1702195828LL;
    }
    else {
      uint64_t v36 = 0x65736C6166LL;
    }
    if ((v35 & 4) != 0) {
      unint64_t v33 = 0xE400000000000000LL;
    }
    unint64_t v37 = v33;
    String.append(_:)(*(Swift::String *)&v36);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 125LL;
    v38._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v38);
    uint64_t countAndFlagsBits = v69._countAndFlagsBits;
    unint64_t object = (unint64_t)v69._object;
  }

  else
  {
    uint64_t v15 = &v0[*(int *)(v10 + 52)];
    if ((v15[1] & 1) != 0)
    {
      sub_10001736C(v14, v13);
      unint64_t object = 0xE300000000000000LL;
      uint64_t v17 = 4271950LL;
    }

    else
    {
      char v40 = *v15;
      uint64_t v70 = 0LL;
      unint64_t v71 = 0xE000000000000000LL;
      LOBYTE(v69._countAndFlagsBits) = v40;
      (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for DefaultStringInterpolation.BinaryIntegerRadix.hex(_:),  v1);
      sub_10001736C(v14, v13);
      unint64_t v41 = sub_1000B1244();
      DefaultStringInterpolation.appendInterpolation<A>(_:radix:padded:)(&v69, v4, 1LL, &type metadata for UInt8, v41);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      uint64_t v17 = v70;
      unint64_t object = v71;
    }

    uint64_t v70 = 0LL;
    unint64_t v71 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(79LL);
    v42._uint64_t countAndFlagsBits = 0x7461446E6163735BLL;
    v42._unint64_t object = (void *)0xEB00000000203A65LL;
    String.append(_:)(v42);
    uint64_t v43 = type metadata accessor for Date(0LL);
    uint64_t v44 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._uint64_t countAndFlagsBits = 0x203A6570797420LL;
    v46._unint64_t object = (void *)0xE700000000000000LL;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = v6;
    v47._unint64_t object = v7;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._uint64_t countAndFlagsBits = 0x7373657264646120LL;
    v48._unint64_t object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v48);
    uint64_t v49 = type metadata accessor for MACAddress(0LL);
    uint64_t v50 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    v51._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v49, v50);
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._uint64_t countAndFlagsBits = 0x203A56444120LL;
    v52._unint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v52);
    v69._uint64_t countAndFlagsBits = v14;
    v69._unint64_t object = (void *)v13;
    unint64_t v53 = sub_1000B113C();
    v54._uint64_t countAndFlagsBits = RawRepresentable<>.hexString.getter(&type metadata for Advertisement, v53);
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v55._uint64_t countAndFlagsBits = 0x3A73757461747320LL;
    v55._unint64_t object = (void *)0xE900000000000020LL;
    String.append(_:)(v55);
    v56._uint64_t countAndFlagsBits = sub_100040BA4(v0[v11[11]]);
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    unint64_t v57 = 0xE500000000000000LL;
    v58._uint64_t countAndFlagsBits = 0x203A6B6520LL;
    v58._unint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v58);
    char v59 = v0[v11[12]];
    v69._uint64_t countAndFlagsBits = 0x203A4D6F427BLL;
    v69._unint64_t object = (void *)0xE600000000000000LL;
    if ((v59 & 4) != 0) {
      uint64_t v60 = 1702195828LL;
    }
    else {
      uint64_t v60 = 0x65736C6166LL;
    }
    if ((v59 & 4) != 0) {
      unint64_t v57 = 0xE400000000000000LL;
    }
    unint64_t v61 = v57;
    String.append(_:)(*(Swift::String *)&v60);
    swift_bridgeObjectRelease();
    v62._uint64_t countAndFlagsBits = 125LL;
    v62._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v62);
    String.append(_:)(v69);
    swift_bridgeObjectRelease();
    v63._uint64_t countAndFlagsBits = 0x203A746E696820LL;
    v63._unint64_t object = (void *)0xE700000000000000LL;
    String.append(_:)(v63);
    uint64_t countAndFlagsBits = v17;
  }

  unint64_t v64 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease();
  v65._uint64_t countAndFlagsBits = 0x203A6973737220LL;
  v65._unint64_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v65);
  LODWORD(v69._countAndFlagsBits) = *(_DWORD *)&v0[v11[15]];
  v66._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  v67._uint64_t countAndFlagsBits = 93LL;
  v67._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v67);
  sub_1000869A4(v14, v13);
  return v70;
}

uint64_t sub_1000B0EA8()
{
  uint64_t v9 = 0LL;
  unint64_t v10 = 0xE000000000000000LL;
  v1._uint64_t countAndFlagsBits = 0LL;
  v1._unint64_t object = (void *)0xE000000000000000LL;
  String.append(_:)(v1);
  v8._uint64_t countAndFlagsBits = 0LL;
  v8._unint64_t object = (void *)0xE000000000000000LL;
  v2._uint64_t countAndFlagsBits = 123LL;
  v2._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  uint64_t v3 = v0 + *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20);
  uint64_t v4 = sub_100004AEC(&qword_1009A06D8);
  _print_unlocked<A, B>(_:_:)( v3,  &v8,  v4,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v5._uint64_t countAndFlagsBits = 125LL;
  v5._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0LL;
  v6._unint64_t object = (void *)0xE000000000000000LL;
  String.append(_:)(v6);
  return v9;
}

uint64_t sub_1000B0F78()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009B9390);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for BeaconDetails(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DetailedDiscoveredObject(0LL);
  sub_1000B7E94(v0 + *(int *)(v8 + 20), (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v3, (uint64_t *)&unk_1009B9390);
    return sub_1000B07D4();
  }

  else
  {
    sub_1000B7EDC((uint64_t)v3, (uint64_t)v7);
    uint64_t v18 = 0LL;
    unint64_t v19 = 0xE000000000000000LL;
    v10._uint64_t countAndFlagsBits = sub_1000B07D4();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 32LL;
    v11._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v11);
    v17._uint64_t countAndFlagsBits = 0LL;
    v17._unint64_t object = (void *)0xE000000000000000LL;
    v12._uint64_t countAndFlagsBits = 123LL;
    v12._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v12);
    unint64_t v13 = &v7[*(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20)];
    uint64_t v14 = sub_100004AEC(&qword_1009A06D8);
    _print_unlocked<A, B>(_:_:)( v13,  &v17,  v14,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v15._uint64_t countAndFlagsBits = 125LL;
    v15._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    uint64_t v9 = v18;
    sub_100018C68((uint64_t)v7, type metadata accessor for BeaconDetails);
  }

  return v9;
}

unint64_t sub_1000B113C()
{
  unint64_t result = qword_1009A04D8;
  if (!qword_1009A04D8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_1009A04D8);
  }

  return result;
}

unint64_t sub_1000B1180()
{
  unint64_t result = qword_1009A04E0;
  if (!qword_1009A04E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearOwnerAdvertisement,  &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A04E0);
  }

  return result;
}

Swift::Int sub_1000B11C4(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = (void *)sub_1003D4974(v3);
  }
  uint64_t v4 = (char *)v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1000B1288(v6);
  *a1 = v3;
  return result;
}

unint64_t sub_1000B1244()
{
  unint64_t result = qword_1009A04E8;
  if (!qword_1009A04E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_1009A04E8);
  }

  return result;
}

Swift::Int sub_1000B1288(char **a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v147 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v133 = (char *)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  __int128 v144 = (char *)&v129 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v141 = (char *)&v129 - v9;
  __chkstk_darwin(v8);
  uint64_t v140 = (char *)&v129 - v10;
  Swift::Int v11 = (Swift::Int)a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_141;
    }
    if (v11) {
      return sub_1000B1D00(0LL, v11, 1LL, a1);
    }
    return result;
  }

  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_149;
  }
  uint64_t v143 = a1;
  Swift::Int v130 = result;
  uint64_t v136 = v1;
  if (v11 < 2)
  {
    Swift::String v17 = (char *)_swiftEmptyArrayStorage;
    unint64_t v135 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v147 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80));
    uint64_t v129 = _swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      unint64_t v19 = _swiftEmptyArrayStorage[2];
LABEL_107:
      if (v19 >= 2)
      {
        uint64_t v122 = *v143;
        do
        {
          unint64_t v123 = v19 - 2;
          if (v19 < 2) {
            goto LABEL_136;
          }
          if (!v122) {
            goto LABEL_148;
          }
          uint64_t v124 = *(void *)&v17[16 * v123 + 32];
          uint64_t v125 = *(void *)&v17[16 * v19 + 24];
          uint64_t v126 = v136;
          sub_1000B1F78( (unint64_t)&v122[*(void *)(v147 + 72) * v124],  (unint64_t)&v122[*(void *)(v147 + 72) * *(void *)&v17[16 * v19 + 16]],  (unint64_t)&v122[*(void *)(v147 + 72) * v125],  v135);
          uint64_t v136 = v126;
          if (v126) {
            break;
          }
          if (v125 < v124) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
            Swift::String v17 = sub_1003CBA90((uint64_t)v17);
          }
          if (v123 >= *((void *)v17 + 2)) {
            goto LABEL_138;
          }
          uint64_t v127 = &v17[16 * v123 + 32];
          *(void *)uint64_t v127 = v124;
          *((void *)v127 + 1) = v125;
          unint64_t v128 = *((void *)v17 + 2);
          if (v19 > v128) {
            goto LABEL_139;
          }
          memmove(&v17[16 * v19 + 16], &v17[16 * v19 + 32], 16 * (v128 - v19));
          *((void *)v17 + 2) = v128 - 1;
          unint64_t v19 = v128 - 1;
        }

        while (v128 > 2);
      }

LABEL_118:
      swift_bridgeObjectRelease();
      v129[2] = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, v3);
    *(void *)(v15 + swift_weakDestroy(v0 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v147 + 80);
    uint64_t v129 = (void *)v15;
    unint64_t v135 = v15 + ((v16 + 32) & ~v16);
  }

  uint64_t v18 = 0LL;
  Swift::String v17 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v20 = v18;
    uint64_t v21 = v18 + 1;
    uint64_t v134 = v18;
    if (v18 + 1 >= v11)
    {
      uint64_t v32 = v18 + 1;
      uint64_t v41 = v136;
      goto LABEL_58;
    }

    Swift::String v22 = *v143;
    Swift::Int v145 = v11;
    uint64_t v23 = v147;
    uint64_t v24 = *(void *)(v147 + 72);
    uint64_t v25 = *(void (**)(void, void, void))(v147 + 16);
    uint64_t v26 = v140;
    v25(v140, &v22[v24 * v21], v3);
    Swift::String v27 = &v22[v24 * v20];
    Swift::String v28 = v141;
    v25(v141, v27, v3);
    uint64_t v142 = sub_100007864( &qword_1009A0508,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    LODWORD(v139) = dispatch thunk of static Comparable.< infix(_:_:)(v26, v28, v3, v142);
    unint64_t v29 = *(void (**)(void, void))(v23 + 8);
    Swift::String v30 = v28;
    Swift::Int v20 = v134;
    v29(v30, v3);
    v29(v26, v3);
    Swift::String v31 = v22;
    uint64_t v32 = v20 + 2;
    __int128 v137 = v31;
    uint64_t v146 = v24;
    if (v20 + 2 >= v145)
    {
      uint64_t v41 = v136;
      Swift::Int v40 = v145;
      uint64_t v39 = v24;
    }

    else
    {
      uint64_t v131 = v17;
      uint64_t v138 = v24 * v21;
      unint64_t v33 = v31;
      uint64_t v34 = v24 * v32;
      do
      {
        uint64_t v35 = v32;
        uint64_t v36 = v140;
        v25(v140, &v33[v34], v3);
        unint64_t v37 = v141;
        v25(v141, &v33[v138], v3);
        int v38 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v37, v3, v142);
        v29(v37, v3);
        v29(v36, v3);
        if (((v139 ^ v38) & 1) != 0)
        {
          uint64_t v41 = v136;
          Swift::String v17 = v131;
          uint64_t v32 = v35;
          Swift::Int v20 = v134;
          Swift::Int v40 = v145;
          uint64_t v39 = v146;
          goto LABEL_26;
        }

        uint64_t v32 = v35 + 1;
        uint64_t v39 = v146;
        v33 += v146;
      }

      while (v145 != v35 + 1);
      Swift::Int v40 = v145;
      uint64_t v32 = v145;
      uint64_t v41 = v136;
      Swift::String v17 = v131;
      Swift::Int v20 = v134;
    }

      __break(1u);
      goto LABEL_119;
    }

      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }

    goto LABEL_20;
  }

LABEL_89:
        if ((v98 & 1) != 0) {
          goto LABEL_128;
        }
        uint64_t v106 = &v72[16 * v75];
        uint64_t v108 = *(void *)v106;
        uint64_t v107 = *((void *)v106 + 1);
        BOOL v86 = __OFSUB__(v107, v108);
        uint64_t v109 = v107 - v108;
        if (v86) {
          goto LABEL_131;
        }
        if (v109 < v97) {
          goto LABEL_14;
        }
LABEL_97:
        unint64_t v114 = v75 - 1;
        if (v75 - 1 >= v19)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }

        if (!*v143) {
          goto LABEL_146;
        }
        __n128 v115 = v17;
        int v116 = &v72[16 * v114];
        uint64_t v117 = *(void *)v116;
        uint64_t v118 = &v72[16 * v75];
        uint64_t v119 = *((void *)v118 + 1);
        uint64_t v120 = v136;
        sub_1000B1F78( (unint64_t)&(*v143)[*(void *)(v147 + 72) * *(void *)v116],  (unint64_t)&(*v143)[*(void *)(v147 + 72) * *(void *)v118],  (unint64_t)&(*v143)[*(void *)(v147 + 72) * v119],  v135);
        uint64_t v136 = v120;
        if (v120) {
          goto LABEL_118;
        }
        if (v119 < v117) {
          goto LABEL_121;
        }
        if (v75 > *((void *)v115 + 2)) {
          goto LABEL_122;
        }
        *(void *)int v116 = v117;
        *(void *)&v72[16 * v114 + 8] = v119;
        unint64_t v121 = *((void *)v115 + 2);
        if (v75 >= v121) {
          goto LABEL_123;
        }
        Swift::String v17 = v115;
        unint64_t v19 = v121 - 1;
        memmove(&v72[16 * v75], v118 + 16, 16 * (v121 - 1 - v75));
        *((void *)v115 + 2) = v121 - 1;
        if (v121 <= 2) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v19 = 1LL;
LABEL_14:
    Swift::Int v11 = (Swift::Int)v143[1];
    uint64_t v18 = v142;
    if (v142 >= v11) {
      goto LABEL_107;
    }
  }

        if ((v90 & 1) != 0) {
          goto LABEL_128;
        }
        char v98 = &v64[16 * v67];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        uint64_t v78 = __OFSUB__(v99, v100);
        uint64_t v101 = v99 - v100;
        if (v78) {
          goto LABEL_131;
        }
        if (v101 < v89) {
          goto LABEL_15;
        }
LABEL_97:
        uint64_t v106 = v67 - 1;
        if (v67 - 1 >= v20)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }

        uint64_t v107 = *a1;
        if (!*a1) {
          goto LABEL_146;
        }
        uint64_t v108 = v19;
        uint64_t v109 = &v64[16 * v106];
        __int128 v110 = *(void *)v109;
        uint64_t v111 = &v64[16 * v67];
        uint64_t v112 = *((void *)v111 + 1);
        uint64_t v113 = v132;
        sub_10023D9C8( v107 + *(void *)(v3 + 72) * *(void *)v109,  v107 + *(void *)(v3 + 72) * *(void *)v111,  v107 + *(void *)(v3 + 72) * v112,  v131);
        uint64_t v132 = v113;
        if (v113) {
          goto LABEL_117;
        }
        if (v112 < v110) {
          goto LABEL_121;
        }
        if (v67 > *((void *)v108 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v109 = v110;
        *(void *)&v64[16 * v106 + 8] = v112;
        unint64_t v114 = *((void *)v108 + 2);
        if (v67 >= v114) {
          goto LABEL_123;
        }
        unint64_t v19 = v108;
        Swift::Int v20 = v114 - 1;
        memmove(&v64[16 * v67], v111 + 16, 16 * (v114 - 1 - v67));
        *((void *)v108 + 2) = v114 - 1;
        a1 = v138;
        if (v114 <= 2) {
          goto LABEL_15;
        }
      }
    }

    Swift::Int v20 = 1LL;
LABEL_15:
    Swift::Int v11 = a1[1];
    uint64_t v18 = v137;
    if (v137 >= v11)
    {
      Swift::String v17 = v123;
      goto LABEL_106;
    }
  }

  uint64_t v125 = v19;
  int v38 = 0LL;
  uint64_t v39 = v141;
  Swift::Int v40 = v141 * (v30 - 1);
  uint64_t v41 = v30 * v141;
  uint64_t v42 = v21;
  uint64_t v43 = v21 * v141;
  a1 = v138;
  do
  {
    if (v42 != v30 + v38 - 1)
    {
      if (!v23) {
        goto LABEL_147;
      }
      sub_10002218C(v23 + v43, v129, type metadata accessor for FetchRequestBeacon);
      if (v43 < v40 || v23 + v43 >= (unint64_t)(v23 + v41))
      {
        swift_arrayInitWithTakeFrontToBack(v23 + v43, v23 + v40, 1LL, RequestBeacon);
      }

      else if (v43 != v40)
      {
        swift_arrayInitWithTakeBackToFront(v23 + v43, v23 + v40);
      }

      sub_10002218C(v129, v23 + v40, type metadata accessor for FetchRequestBeacon);
      a1 = v138;
      uint64_t v23 = v127;
      uint64_t v39 = v141;
    }

    ++v42;
    --v38;
    v40 -= v39;
    v41 -= v39;
    v43 += v39;
  }

  while (v42 < v30 + v38);
  unint64_t v19 = v125;
  uint64_t v3 = v126;
  uint64_t v21 = v130;
  unint64_t v29 = v140;
  if (v30 >= v140) {
    goto LABEL_58;
  }
LABEL_41:
  if (__OFSUB__(v30, v21)) {
    goto LABEL_140;
  }
  if (v30 - v21 >= v124) {
    goto LABEL_58;
  }
  if (__OFADD__(v21, v124)) {
    goto LABEL_143;
  }
  if (v21 + v124 >= v29) {
    uint64_t v44 = v29;
  }
  else {
    uint64_t v44 = v21 + v124;
  }
  if (v44 >= v21)
  {
    if (v30 != v44)
    {
      uint64_t v125 = v19;
      Swift::Int v45 = *(void *)(v3 + 72);
      uint64_t v46 = v45 * (v30 - 1);
      uint64_t v134 = v45;
      uint64_t v141 = v30 * v45;
      unint64_t v128 = v44;
      do
      {
        uint64_t v48 = 0LL;
        __int128 v137 = v30;
        while (1)
        {
          uint64_t v140 = v21;
          uint64_t v49 = *a1;
          uint64_t v50 = v135;
          sub_10001DC4C(v141 + v48 + *a1, v135, type metadata accessor for FetchRequestBeacon);
          Swift::Int v51 = v46;
          uint64_t v52 = v46 + v48 + v49;
          unint64_t v53 = a1;
          uint64_t v54 = v136;
          uint64_t v55 = sub_10001DC4C(v52, v136, type metadata accessor for FetchRequestBeacon);
          uint64_t v56 = UUID.hashValue.getter(v55);
          unint64_t v57 = UUID.hashValue.getter(v56);
          sub_100018C68(v54, type metadata accessor for FetchRequestBeacon);
          sub_100018C68(v50, type metadata accessor for FetchRequestBeacon);
          if (v56 >= v57) {
            break;
          }
          Swift::String v58 = *v53;
          if (!*v53) {
            goto LABEL_145;
          }
          char v59 = v58 + v141 + v48;
          uint64_t v46 = v51;
          uint64_t v60 = v58 + v51 + v48;
          sub_10002218C(v59, v139, type metadata accessor for FetchRequestBeacon);
          swift_arrayInitWithTakeFrontToBack(v59, v60, 1LL, RequestBeacon);
          sub_10002218C(v139, v60, type metadata accessor for FetchRequestBeacon);
          v48 -= v134;
          uint64_t v21 = v140 + 1;
          Swift::String v47 = v137;
          a1 = v138;
          if (v137 == v140 + 1) {
            goto LABEL_51;
          }
        }

        Swift::String v47 = v137;
        a1 = v53;
        uint64_t v46 = v51;
LABEL_51:
        Swift::String v30 = v47 + 1;
        v46 += v134;
        v141 += v134;
        uint64_t v21 = v130;
      }

      while (v30 != v128);
      Swift::String v30 = v128;
      unint64_t v19 = v125;
      uint64_t v3 = v126;
    }

    goto LABEL_58;
  }

      uint64_t v5 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v36);
      v125(v0, isUniquelyReferenced_nonNull_native);
      uint64_t v84 = v118;
      if (*v115 < v5) {
        goto LABEL_120;
      }
      goto LABEL_92;
    }

    if (v86 <= 64) {
      goto LABEL_89;
    }
    unint64_t v87 = swift_task_alloc(v123);
    os_log_type_t v88 = sub_10001563C();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v115,  &type metadata for Int64,  v88,  isUniquelyReferenced_nonNull_native,  v36);
    uint64_t v5 = dispatch thunk of static Comparable.< infix(_:_:)( v87,  v0,  isUniquelyReferenced_nonNull_native,  *(void *)(*(void *)(v36 + 32) + 8LL));
    v125(v87, isUniquelyReferenced_nonNull_native);
    v125(v0, isUniquelyReferenced_nonNull_native);
    swift_task_dealloc(v87);
    uint64_t v84 = v118;
    if ((v5 & 1) != 0) {
      goto LABEL_120;
    }
LABEL_92:
    swift_task_dealloc(v0);
    uint64_t v0 = v121;
LABEL_93:
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    uint64_t v91 = dispatch thunk of BinaryInteger._lowWord.getter(isUniquelyReferenced_nonNull_native, v36);
    v125(v126, isUniquelyReferenced_nonNull_native);
    swift_task_dealloc(v126);
    uint64_t v52 = __OFADD__(v91, v0);
    uint64_t v5 = v91 + v0;
    if (v52) {
      goto LABEL_119;
    }
    *(void *)(v1 + 744) = &type metadata for Int64;
    *(void *)(v1 + 752) = sub_10001563C();
    *(void *)(v1 + 720) = v5;
    *(_BYTE *)(v1 + 760) = 2;
    uint64_t v54 = v1 + 528;
    sub_10006A2FC(v1 + 720, v129);
    uint64_t v63 = (void *)(v1 + 768);
LABEL_95:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v63);
LABEL_96:
    swift_beginAccess(v8, v130, 33LL, 0LL);
    sub_10006A2C0(v54, v131);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    uint64_t v5 = *v8;
    uint64_t v143 = *v8;
    *uint64_t v8 = 0x8000000000000000LL;
    uint64_t v0 = sub_10030CF14(v19, v18);
    unint64_t v93 = *(void *)(v5 + 16);
    uint64_t v94 = (v92 & 1) == 0;
    uint64_t v95 = v93 + v94;
    if (__OFADD__(v93, v94)) {
      goto LABEL_116;
    }
    BOOL v96 = v92;
    if (*(void *)(v5 + 24) >= v95)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = v1 + 16;
        if ((v92 & 1) == 0) {
          goto LABEL_100;
        }
      }

      else
      {
        sub_10006191C();
        uint64_t v5 = v143;
        char isUniquelyReferenced_nonNull_native = v1 + 16;
        if ((v96 & 1) == 0) {
          goto LABEL_100;
        }
      }
    }

    else
    {
      sub_100049A7C(v95, isUniquelyReferenced_nonNull_native);
      uint64_t v5 = v143;
      uint64_t v97 = sub_10030CF14(v19, v18);
      if ((v96 & 1) != (v98 & 1)) {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      }
      uint64_t v0 = v97;
      char isUniquelyReferenced_nonNull_native = v1 + 16;
      if ((v96 & 1) == 0)
      {
LABEL_100:
        *(void *)(v5 + 8 * (v0 >> 6) + 64) |= 1LL << v0;
        uint64_t v99 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v0);
        *uint64_t v99 = v19;
        v99[1] = v18;
        sub_10006A2FC(v131, *(void *)(v5 + 56) + 48 * v0);
        uint64_t v100 = *(void *)(v5 + 16);
        uint64_t v52 = __OFADD__(v100, 1LL);
        uint64_t v101 = v100 + 1;
        if (v52) {
          goto LABEL_118;
        }
        *(void *)(v5 + swift_weakDestroy(v0 + 16) = v101;
        swift_bridgeObjectRetain(v18);
        goto LABEL_105;
      }
    }

    sub_100728A3C(v131, *(void *)(v5 + 56) + 48 * v0);
LABEL_105:
    *uint64_t v8 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(v130);
    sub_100728A70(v129);
    uint64_t v9 = v1 + 576;
LABEL_7:
    sub_100728A70(v9);
    uint64_t v3 = (void *)(v1 + 192);
    sub_10073AD08((void *)(v1 + 192));
    uint64_t v7 = v141;
  }

  Swift::String v22 = v1 + 288;
  *(void *)(v1 + 320) = 0LL;
  *uint64_t v134 = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_BYTE *)(v1 + 328) = -1;
LABEL_45:
  sub_100015794(v22, &qword_1009BE048);
  sub_10006A3E4((uint64_t)v3, v133);
  if (*(_BYTE *)(v1 + 185))
  {
    if (*(_BYTE *)(v1 + 185) == 1)
    {
      Swift::Int v40 = *(void *)(v1 + 144);
      *(void *)(v1 + 360) = &type metadata for Int64;
      *(void *)(v1 + 368) = sub_10001563C();
      *(void *)(v1 + 336) = v40;
      uint64_t v41 = 2;
    }

    else
    {
      uint64_t v42 = *(void *)(v1 + 144);
      *(void *)(v1 + 360) = &type metadata for Double;
      *(void *)(v1 + 368) = sub_1000156C8();
      *(void *)(v1 + 336) = v42;
      uint64_t v41 = 3;
    }

    *(_BYTE *)(v1 + 376) = v41;
  }

  else
  {
    sub_10006A2FC(v133, v140);
  }

  swift_beginAccess(v8, v136, 33LL, 0LL);
  sub_10006A2C0(v140, v137);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  uint64_t v5 = *v8;
  uint64_t v142 = *v8;
  *uint64_t v8 = 0x8000000000000000LL;
  uint64_t v0 = sub_10030CF14(v19, v18);
  uint64_t v44 = *(void *)(v5 + 16);
  Swift::Int v45 = (v43 & 1) == 0;
  uint64_t v46 = v44 + v45;
  if (!__OFADD__(v44, v45))
  {
    Swift::String v47 = v43;
    if (*(void *)(v5 + 24) >= v46)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = v1 + 16;
        if ((v43 & 1) == 0) {
          goto LABEL_58;
        }
      }

      else
      {
        sub_10006191C();
        uint64_t v5 = v142;
        char isUniquelyReferenced_nonNull_native = v1 + 16;
        if ((v47 & 1) == 0) {
          goto LABEL_58;
        }
      }
    }

    else
    {
      sub_100049A7C(v46, isUniquelyReferenced_nonNull_native);
      uint64_t v5 = v142;
      uint64_t v48 = sub_10030CF14(v19, v18);
      if ((v47 & 1) != (v49 & 1)) {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      }
      uint64_t v0 = v48;
      char isUniquelyReferenced_nonNull_native = v1 + 16;
      if ((v47 & 1) == 0)
      {
LABEL_58:
        *(void *)(v5 + 8 * (v0 >> 6) + 64) |= 1LL << v0;
        uint64_t v50 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v0);
        char *v50 = v19;
        v50[1] = v18;
        sub_10006A2FC(v137, *(void *)(v5 + 56) + 48 * v0);
        Swift::Int v51 = *(void *)(v5 + 16);
        uint64_t v52 = __OFADD__(v51, 1LL);
        unint64_t v53 = v51 + 1;
        if (v52) {
          goto LABEL_117;
        }
        *(void *)(v5 + swift_weakDestroy(v0 + 16) = v53;
        swift_bridgeObjectRetain(v18);
        goto LABEL_6;
      }
    }

    sub_100728A3C(v137, *(void *)(v5 + 56) + 48 * v0);
LABEL_6:
    *uint64_t v8 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(v136);
    uint64_t v9 = v1 + 336;
    goto LABEL_7;
  }

  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  ((void (*)(uint64_t, uint64_t))v0)(v5, isUniquelyReferenced_nonNull_native);
  Swift::Int result = swift_task_dealloc(v5);
LABEL_123:
  __break(1u);
  return result;
}

          if ((v85 & 1) != 0) {
            goto LABEL_131;
          }
          unint64_t v93 = &v59[16 * v62];
          uint64_t v95 = *(void *)v93;
          uint64_t v94 = *((void *)v93 + 1);
          os_log_type_t v73 = __OFSUB__(v94, v95);
          BOOL v96 = v94 - v95;
          if (v73) {
            goto LABEL_134;
          }
          if (v96 < v84) {
            goto LABEL_14;
          }
LABEL_97:
          uint64_t v101 = v62 - 1;
          if (v62 - 1 >= a3)
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
            goto LABEL_147;
          }

          uint64_t v102 = *v144;
          if (!*v144) {
            goto LABEL_149;
          }
          BOOL v103 = &v59[16 * v101];
          uint64_t v104 = *(void *)v103;
          uint64_t v105 = v62;
          uint64_t v3 = (uint64_t)&v59[16 * v62];
          uint64_t v106 = *(void *)(v3 + 8);
          uint64_t v107 = *(void *)(v137 + 72);
          uint64_t v108 = v102 + v107 * *(void *)v103;
          uint64_t v109 = v102 + v107 * *(void *)v3;
          __int128 v110 = v102 + v107 * v106;
          a3 = v146;
          swift_retain();
          uint64_t v111 = v108;
          uint64_t v112 = v138;
          sub_10074FF2C(v111, v109, v110, v135, v145);
          uint64_t v138 = v112;
          if (v112)
          {
LABEL_105:
            swift_bridgeObjectRelease();
            swift_release();
            v130[2] = 0LL;
            goto LABEL_120;
          }

          swift_release();
          Swift::Int v20 = v136;
          if (v106 < v104) {
            goto LABEL_124;
          }
          if (v105 > *((void *)v136 + 2)) {
            goto LABEL_125;
          }
          *(void *)BOOL v103 = v104;
          char v59 = (char *)v149;
          *(void *)(v149 + 16 * v101 + 8) = v106;
          uint64_t v113 = *((void *)v20 + 2);
          if (v105 >= v113) {
            goto LABEL_126;
          }
          a3 = v113 - 1;
          memmove((void *)v3, (const void *)(v3 + 16), 16 * (v113 - 1 - v105));
          *((void *)v20 + 2) = v113 - 1;
          if (v113 <= 2) {
            goto LABEL_14;
          }
        }
      }

      a3 = 1LL;
LABEL_14:
      uint64_t v13 = v144[1];
      uint64_t v21 = v143;
      if (v143 >= v13) {
        goto LABEL_108;
      }
      goto LABEL_15;
    }

    uint64_t v26 = v3 + 1;
    v28 += v24;
  }

  while (v143 != v3 + 1);
  uint64_t v13 = v143;
  uint64_t v26 = v143;
  Swift::String v22 = v134;
LABEL_21:
  if ((v149 & 1) != 0) {
    goto LABEL_25;
  }
LABEL_37:
  uint64_t v36 = v146;
  unint64_t v37 = (uint64_t *)v144;
  Swift::Int v20 = v136;
  if (v26 >= v13) {
    goto LABEL_57;
  }
LABEL_40:
  if (__OFSUB__(v26, v22)) {
    goto LABEL_143;
  }
  if (v26 - v22 >= v131) {
    goto LABEL_57;
  }
  if (__OFADD__(v22, v131)) {
    goto LABEL_146;
  }
  if (v22 + v131 >= v13) {
    uint64_t v41 = v13;
  }
  else {
    uint64_t v41 = v22 + v131;
  }
  if (v41 >= v22)
  {
    if (v26 != v41)
    {
      uint64_t v42 = v36;
      uint64_t v136 = v20;
      uint64_t v43 = *(void *)(v137 + 72);
      uint64_t v44 = v43 * (v26 - 1);
      uint64_t v139 = v43;
      Swift::Int v45 = v26 * v43;
      uint64_t v132 = v41;
      do
      {
        Swift::String v47 = 0LL;
        uint64_t v143 = v26;
        uint64_t v140 = v45;
        while (1)
        {
          uint64_t v149 = v22;
          uint64_t v48 = *v37;
          uint64_t v49 = v45 + v47 + *v37;
          uint64_t v50 = v141;
          a3 = (unint64_t)v37;
          sub_10001581C(v49, v141, &qword_1009AC1E0);
          Swift::Int v51 = v44;
          uint64_t v52 = v44 + v47 + v48;
          unint64_t v53 = v142;
          sub_10001581C(v52, v142, &qword_1009AC1E0);
          uint64_t v3 = v42;
          uint64_t v54 = v145(v50 + *(int *)(v147 + 48), v53 + *(int *)(v147 + 48));
          sub_100015794(v53, &qword_1009AC1E0);
          sub_100015794(v50, &qword_1009AC1E0);
          if ((v54 & 1) == 0) {
            break;
          }
          uint64_t v55 = *(void *)a3;
          if (!*(void *)a3) {
            goto LABEL_148;
          }
          Swift::Int v45 = v140;
          a3 = v55 + v140 + v47;
          uint64_t v44 = v51;
          uint64_t v3 = v55 + v51 + v47;
          sub_10074FEE4(a3, v148);
          swift_arrayInitWithTakeFrontToBack(a3, v3, 1LL, v147);
          sub_10074FEE4(v148, v3);
          v47 -= v139;
          Swift::String v22 = v149 + 1;
          uint64_t v46 = v143;
          unint64_t v37 = (uint64_t *)v144;
          uint64_t v42 = v146;
          if (v143 == v149 + 1) {
            goto LABEL_50;
          }
        }

        uint64_t v46 = v143;
        unint64_t v37 = (uint64_t *)a3;
        uint64_t v44 = v51;
        Swift::Int v45 = v140;
        uint64_t v42 = v3;
LABEL_50:
        uint64_t v26 = v46 + 1;
        v44 += v139;
        v45 += v139;
        Swift::String v22 = v134;
      }

      while (v26 != v132);
      uint64_t v26 = v132;
      Swift::Int v20 = v136;
    }

    goto LABEL_57;
  }

LABEL_38:
  Swift::String v47 = v143;
  if (v32 >= v40) {
    goto LABEL_58;
  }
LABEL_41:
  if (__OFSUB__(v32, v20)) {
    goto LABEL_140;
  }
  if (v32 - v20 >= v130) {
    goto LABEL_58;
  }
  if (__OFADD__(v20, v130)) {
    goto LABEL_143;
  }
  if (v20 + v130 >= v40) {
    Swift::Int v51 = v40;
  }
  else {
    Swift::Int v51 = v20 + v130;
  }
  if (v51 >= v20)
  {
    if (v32 != v51)
    {
      uint64_t v131 = v17;
      uint64_t v132 = v51;
      uint64_t v52 = *(void *)(v147 + 72);
      unint64_t v53 = *(char **)(v147 + 16);
      uint64_t v136 = v41;
      __int128 v137 = v53;
      uint64_t v54 = v52 * (v32 - 1);
      uint64_t v138 = v52;
      uint64_t v146 = v32 * v52;
      do
      {
        uint64_t v56 = 0LL;
        uint64_t v142 = v32;
        uint64_t v139 = (char *)v54;
        while (1)
        {
          Swift::Int v145 = v20;
          unint64_t v57 = *v47;
          Swift::String v58 = v140;
          char v59 = v47;
          uint64_t v60 = (void (*)(void, void, void))v137;
          ((void (*)(char *, char *, uint64_t))v137)(v140, &(*v47)[v146 + v56], v3);
          unint64_t v61 = &v57[v54 + v56];
          Swift::String v62 = v141;
          v60(v141, v61, v3);
          uint64_t v63 = sub_100007864( &qword_1009A0508,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v57) = dispatch thunk of static Comparable.< infix(_:_:)(v58, v62, v3, v63);
          unint64_t v64 = *(void (**)(void, void))(v147 + 8);
          v64(v62, v3);
          v64(v58, v3);
          Swift::String v65 = *v59;
          if (!*v59) {
            goto LABEL_145;
          }
          Swift::String v66 = &v65[v146 + v56];
          uint64_t v54 = (uint64_t)v139;
          Swift::String v67 = &v139[(void)v65 + v56];
          unint64_t v68 = *(void (**)(void, void, void))(v147 + 32);
          v68(v144, v66, v3);
          swift_arrayInitWithTakeFrontToBack(v66, v67, 1LL, v3);
          v68(v67, v144, v3);
          v56 -= v138;
          Swift::Int v20 = v145 + 1;
          uint64_t v55 = v142;
          Swift::String v47 = v143;
          if (v142 == v145 + 1) {
            goto LABEL_51;
          }
        }

        uint64_t v55 = v142;
        Swift::String v47 = v59;
        uint64_t v54 = (uint64_t)v139;
LABEL_51:
        uint64_t v32 = v55 + 1;
        v54 += v138;
        v146 += v138;
        Swift::Int v20 = v134;
      }

      while (v32 != v132);
      uint64_t v32 = v132;
      uint64_t v41 = v136;
      Swift::String v17 = v131;
    }

    goto LABEL_58;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

            uint64_t v14 = 0;
LABEL_39:
            if ((v14 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_61;
          }
        }
      }

      goto LABEL_35;
    }

    __break(1u);
  }

  __break(1u);
}

    swift_once(&qword_10099B1C8, sub_10020FF78);
    goto LABEL_11;
  }

  Swift::Int v45 = v0 + 88;
  uint64_t v46 = *(void **)(v0 + 216);
  Swift::String v47 = *(void *)(v0 + 224);
  uint64_t v48 = type metadata accessor for Logger(0LL);
  sub_10000A720(v48, (uint64_t)qword_100A2A370);
  swift_retain_n(v47, 2LL);
  uint64_t v49 = (os_log_s *)Logger.logObject.getter(v46);
  uint64_t v50 = static os_log_type_t.info.getter(v49);
  Swift::Int v51 = os_log_type_enabled(v49, v50);
  uint64_t v52 = *(void **)(v0 + 216);
  uint64_t v119 = v6;
  unint64_t v121 = *(void *)(v0 + 224);
  __n128 v115 = v1;
  if (v51)
  {
    unint64_t v53 = swift_slowAlloc(42LL, -1LL);
    uint64_t v112 = (void *)swift_slowAlloc(8LL, -1LL);
    unint64_t v114 = swift_slowAlloc(32LL, -1LL);
    unint64_t v128 = v114;
    *(_DWORD *)unint64_t v53 = 138413059;
    char *v122 = v52;
    uint64_t v113 = v50;
    uint64_t v54 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, v0 + 168, v53 + 4, v53 + 12);
    *uint64_t v112 = v52;

    *(_WORD *)(v53 + 12) = 2048;
    *(void *)(v0 + 168) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v53 + 14, v53 + 22);
    *(_WORD *)(v53 + 22) = 2160;
    *(void *)(v0 + 176) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v53 + 24, v53 + 32);
    *(_WORD *)(v53 + 32) = 2081;
    uint64_t v55 = type metadata accessor for UUID(0LL);
    uint64_t v56 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    unint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v55, v56);
    *(void *)(v0 + 184) = sub_1003F11D4(v57, v58, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v125, v53 + 34, v53 + 42);
    swift_bridgeObjectRelease();
    swift_release_n(v121, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v49,  v113,  "Adding measurement: %@. Adjusted RSSI: %ld. Beacon: %{private,mask.hash}s.",  (uint8_t *)v53,  0x2Au);
    char v59 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v112, 1LL, v59);
    swift_slowDealloc(v112, -1LL, -1LL);
    swift_arrayDestroy(v114, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v114, -1LL, -1LL);
    uint64_t v60 = v53;
    Swift::Int v45 = v0 + 88;
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v121, 2LL);
  }

  unint64_t v61 = [*v3 channel];
  uint64_t v63 = *v7;
  if (*(void *)(*v7 + 16LL) && (unint64_t v64 = sub_10030D384(v61, v62), (v65 & 1) != 0))
  {
    Swift::String v66 = v0 + 64;
    Swift::String v67 = *(void **)(*(void *)(v63 + 56) + 8 * v64);
    swift_bridgeObjectRetain(v67);
    if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0) {
      Swift::String v67 = sub_1004C5B10(0LL, v67[2] + 1LL, 1, v67);
    }
    unint64_t v70 = v67[2];
    Swift::String v69 = v67[3];
    if (v70 >= v69 >> 1) {
      Swift::String v67 = sub_1004C5B10((void *)(v69 > 1), v70 + 1, 1, v67);
    }
    unint64_t v71 = *v3;
    v67[2] = v70 + 1;
    v67[v70 + 4] = v119;
    uint64_t v72 = [v71 channel];
    swift_beginAccess(v7, v0 + 64, 33LL, 0LL);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    unint64_t v128 = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    unint64_t v75 = (uint64_t)v67;
    uint64_t v76 = (uint64_t)v72;
  }

  else
  {
    Swift::String v66 = v0 + 112;
    uint64_t v77 = [*v3 channel];
    uint64_t v78 = sub_100004AEC(&qword_10099D310);
    char v79 = swift_allocObject(v78, 40LL, 7LL);
    *(_OWORD *)(v79 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v79 + 32) = v119;
    swift_beginAccess(v7, v0 + 112, 33LL, 0LL);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    unint64_t v128 = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    unint64_t v75 = v79;
    uint64_t v76 = (uint64_t)v77;
  }

  sub_10005DAC8(v75, v76, isUniquelyReferenced_nonNull_native, v74);
  *uint64_t v7 = v128;
  swift_bridgeObjectRelease();
  uint64_t v80 = swift_endAccess(v66);
  uint64_t v81 = *(void *)(v0 + 272);
  uint64_t v82 = *(void *)(v0 + 280);
  uint64_t v83 = *(void *)(v0 + 256);
  uint64_t v84 = *(void *)(v0 + 264);
  uint64_t v85 = *(void *)(v0 + 248);
  BOOL v86 = *(void *)(v0 + 224);
  unint64_t v123 = *(void *)(v0 + 240);
  uint64_t v126 = *(void *)(v0 + 232);
  ContinuousClock.now.getter(v80);
  unint64_t v87 = v86 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastMeasurementTime;
  os_log_type_t v88 = swift_beginAccess(v87, v45, 0LL, 0LL);
  uint64_t v89 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v84 + 16);
  v89(v82, v87, v83, v88);
  uint64_t v90 = ContinuousClock.Instant.duration(to:)(v81);
  uint64_t v92 = v91;
  unint64_t v93 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
  *(void *)(v0 + 288) = v93;
  v93(v82, v83);
  uint64_t v94 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v89)(v82, v87, v83);
  static Duration.UnitsFormatStyle.Unit.seconds.getter(v94);
  uint64_t v95 = sub_100007864( &qword_1009AE520,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  BOOL v96 = static Duration.description<A>(_:_:units:)(v82, v81, v85, v83, v95);
  char v98 = v97;
  (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v85, v126);
  v93(v82, v83);
  if (qword_10099B1D0 != -1) {
    swift_once(&qword_10099B1D0, sub_10020FFF0);
  }
  if ((static Duration.< infix(_:_:)(v90, v92, qword_100A2A388, unk_100A2A390) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v108 = (void *)swift_task_alloc(dword_1009A62CC);
    *(void *)(v0 + 296) = v108;
    *uint64_t v108 = v0;
    v108[1] = sub_100211000;
    return sub_1002118E4();
  }

  uint64_t v127 = v93;
  swift_bridgeObjectRetain(v98);
  uint64_t v100 = (os_log_s *)Logger.logObject.getter(v99);
  uint64_t v101 = static os_log_type_t.debug.getter(v100);
  uint64_t v102 = os_log_type_enabled(v100, v101);
  BOOL v103 = *(void *)(v0 + 272);
  uint64_t v104 = *(void *)(v0 + 256);
  if (v102)
  {
    uint64_t v124 = *(void *)(v0 + 272);
    uint64_t v105 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v106 = swift_slowAlloc(32LL, -1LL);
    unint64_t v128 = v106;
    *(_DWORD *)uint64_t v105 = 136315138;
    swift_bridgeObjectRetain(v98);
    *uint64_t v117 = sub_1003F11D4(v96, v98, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, v115, v105 + 4, v105 + 12);
    swift_bridgeObjectRelease_n(v98, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v100,  v101,  "Not returning result yet. Duration since last update: %s",  v105,  0xCu);
    swift_arrayDestroy(v106, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v106, -1LL, -1LL);
    swift_slowDealloc(v105, -1LL, -1LL);

    uint64_t v107 = v124;
  }

  else
  {

    swift_bridgeObjectRelease_n(v98, 2LL);
    uint64_t v107 = v103;
  }

  v127(v107, v104);
LABEL_36:
  __int128 v110 = *(void *)(v0 + 272);
  uint64_t v111 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

              sub_1000A6F30(v3);
              return;
            }
          }
        }
      }
    }

              sub_1000A6F30(v5);
              return;
            }
          }
        }
      }
    }

      sub_100015794((uint64_t)v10, &qword_1009A89C8);
      return 0LL;
    }
  }

  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v112);
          v199[0] = v112;
          sub_1000CA340(v115, v119, isUniquelyReferenced_nonNull_native);
          uint64_t v112 = v199[0];
          swift_bridgeObjectRelease();
          if (v113 == 7)
          {
LABEL_40:
            uint64_t v101 = (uint64_t)v189;
            unint64_t v123 = sub_1004E55A0(v189[*(int *)(v191 + 24)], v112);
            swift_bridgeObjectRelease();
            if (v123)
            {
              sub_10002218C(v101, v186, type metadata accessor for BeaconObservation);
              uint64_t v124 = v200;
              uint64_t v125 = swift_isUniquelyReferenced_nonNull_native(v200);
              uint64_t v34 = v197;
              unint64_t v57 = (uint64_t)v198;
              if ((v125 & 1) == 0)
              {
                sub_100032AA8(0, v124[2] + 1LL, 1);
                uint64_t v124 = v200;
              }

              uint64_t v127 = v124[2];
              uint64_t v126 = v124[3];
              if (v127 >= v126 >> 1)
              {
                sub_100032AA8(v126 > 1, v127 + 1, 1);
                uint64_t v124 = v200;
              }

              v124[2] = v127 + 1;
              sub_10002218C(v186, (uint64_t)v124 + v185 + v127 * v180, type metadata accessor for BeaconObservation);
              uint64_t v46 = v190;
              uint64_t v44 = v192;
            }

            else
            {
              sub_100018C68(v101, type metadata accessor for BeaconObservation);
              uint64_t v46 = v190;
              uint64_t v44 = v192;
              uint64_t v34 = v197;
              unint64_t v57 = (uint64_t)v198;
            }

            uint64_t v109 = v195;
            uint64_t v107 = v178;
            if (v195 == v179)
            {
              uint64_t v108 = v200;
              Swift::String v69 = (uint64_t)v181;
              uint64_t v97 = (void *)v171;
              goto LABEL_54;
            }

            goto LABEL_29;
          }

          unint64_t v114 = v112 + 56;
        }
      }
    }

    __break(1u);
LABEL_77:
    swift_once(&qword_10099B330, sub_100374304);
  }

  sub_100015794(v75, &qword_10099D8A0);
  uint64_t v78 = v178;
  char v79 = v173(v178, v174, v52);
  uint64_t v80 = (os_log_s *)Logger.logObject.getter(v79);
  uint64_t v81 = static os_log_type_t.error.getter(v80);
  if (os_log_type_enabled(v80, v81))
  {
    uint64_t v82 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v83 = swift_slowAlloc(32LL, -1LL);
    v199[0] = v83;
    *(_DWORD *)uint64_t v82 = 136315138;
    uint64_t v84 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter(v52, v84);
    uint64_t v200 = (void *)sub_1003F11D4(v85, v86, v199);
    Swift::String v69 = (uint64_t)v181;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v82 + 4, v82 + 12);
    swift_bridgeObjectRelease();
    v172(v78, v52);
    _os_log_impl((void *)&_mh_execute_header, v80, v81, "Group %s has no member!", v82, 0xCu);
    swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1LL, -1LL);
    swift_slowDealloc(v82, -1LL, -1LL);
  }

  else
  {
    v172(v78, v52);
  }

  type metadata accessor for CommandError(0LL);
  uint64_t v129 = v128;
  uint64_t v200 = 0LL;
  Swift::Int v130 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v131 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
  _BridgedStoredNSError.init(_:userInfo:)(v199, &v200, v130, v129, v131);
  uint64_t v132 = (void *)v199[0];
  v193(v199[0]);

  return sub_100018C68(v69, type metadata accessor for OwnedBeaconGroup);
}

    swift_release(v11);
    swift_bridgeObjectRelease();
    uint64_t v8 = v49;
    uint64_t v7 = v50;
    uint64_t v35 = NSFileHandle.offset()();
    if (v36) {
      return sub_100016F9C(v8, (unint64_t)v7);
    }
    a3 = (unint64_t *)v35;
    a2 = *a4;
    unint64_t v37 = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = a2;
    if ((v37 & 1) != 0)
    {
LABEL_40:
      *(void *)(a2 + 8 * v41 + 32) = a3;
      *a4 = a2;
      Swift::Int v45 = (int *)v8;
      p_dst = v7;
      int v38 = sub_100042F34();
      NSFileHandle.write<A>(contentsOf:)(&v45, &type metadata for Data, v38);
      return sub_100016F9C(v8, (unint64_t)v7);
    }

    swift_release(v13);
    swift_bridgeObjectRelease();
    uint64_t v8 = v51;
    uint64_t v7 = v52;
    unint64_t v37 = NSFileHandle.offset()();
    if (v38) {
      return sub_100016F9C(v8, (unint64_t)v7);
    }
    a3 = (unint64_t *)v37;
    a2 = *a4;
    uint64_t v39 = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = a2;
    if ((v39 & 1) != 0)
    {
LABEL_40:
      *(void *)(a2 + 8 * v43 + 32) = a3;
      *a4 = a2;
      Swift::String v47 = (int *)v8;
      p_dst = v7;
      Swift::Int v40 = sub_100042F34();
      NSFileHandle.write<A>(contentsOf:)(&v47, &type metadata for Data, v40);
      return sub_100016F9C(v8, (unint64_t)v7);
    }

    swift_unknownObjectRelease_n(v4, 3LL);
    goto LABEL_39;
  }

  __break(1u);
}

  __break(1u);
}

  uint64_t v1 = v1 | 0x400;
  if ((a1 & 0x800) != 0)
  {
LABEL_39:
    uint64_t v1 = v1 | 0x800;
    if ((a1 & 0x200) == 0) {
      goto LABEL_42;
    }
LABEL_40:
    if ((v1 & 0x200) != 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }

      uint64_t v9 = v50;
    }

    *(void *)&v12[8 * v36] = v38 | v37;
    *(void *)(v8[6] + 8 * v35) = v32;
    uint64_t v44 = v8[2];
    uint64_t v15 = __OFADD__(v44, 1LL);
    Swift::Int v45 = v44 + 1;
    if (v15) {
      goto LABEL_45;
    }
    void v8[2] = v45;
LABEL_31:
    if (++v30 == v9) {
      return;
    }
  }

        Swift::String v28 = 0LL;
        goto LABEL_39;
      }

      if (v24)
      {
        if (v24 != 1 && (BYTE1(v21) - 48) <= 9u)
        {
          Swift::String v28 = 0LL;
          if ((-(BYTE1(v21) - 48) & 0xFFFFFF00) != 0)
          {
LABEL_39:
            unint64_t v29 = 1;
            goto LABEL_42;
          }

          if (v24 == 2)
          {
            unint64_t v29 = 0;
            Swift::String v28 = -(BYTE1(v21) - 48);
            goto LABEL_42;
          }

          if ((BYTE2(v21) - 48) <= 9u && ((10 * (48 - BYTE1(v21))) & 0xF00) == 0)
          {
            Swift::String v28 = (10 * (48 - BYTE1(v21))) - (BYTE2(v21) - 48);
            if ((v28 & 0xFFFFFF00) == 0)
            {
              uint64_t v41 = v24 - 3;
              if (v41)
              {
                uint64_t v42 = (unsigned __int8 *)&v49 + 3;
                while (1)
                {
                  uint64_t v43 = *v42 - 48;
                  if (v43 > 9) {
                    goto LABEL_38;
                  }
                  Swift::String v28 = (10 * v28) - v43;
                  if ((v28 & 0xFFFFFF00) != 0) {
                    goto LABEL_38;
                  }
                  unint64_t v29 = 0;
                  ++v42;
                  if (!--v41) {
                    goto LABEL_42;
                  }
                }
              }

        __break(1u);
        return _swiftEmptyArrayStorage;
      }

LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1000B1D00(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v30 = a1;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  int v38 = *(void **)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v37 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v34 = (char *)&v28 - v11;
  uint64_t result = __chkstk_darwin(v10);
  unint64_t v33 = (char *)&v28 - v13;
  uint64_t v36 = a3;
  uint64_t v29 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = v38[9];
    Swift::String v31 = (void (*)(char *, uint64_t, uint64_t))v38[2];
    uint64_t v32 = a4;
    uint64_t v40 = v14 * (v36 - 1);
    uint64_t v35 = v14;
    uint64_t v39 = v14 * v36;
LABEL_5:
    uint64_t v15 = 0LL;
    uint64_t v16 = v30;
    while (1)
    {
      uint64_t v17 = *a4;
      uint64_t v18 = v33;
      unint64_t v19 = v31;
      v31(v33, v39 + v15 + *a4, v7);
      Swift::Int v20 = v34;
      v19(v34, v40 + v15 + v17, v7);
      uint64_t v21 = sub_100007864( &qword_1009A0508,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      LOBYTE(v17) = dispatch thunk of static Comparable.< infix(_:_:)(v18, v20, v7, v21);
      Swift::String v22 = (void (*)(char *, uint64_t))v38[1];
      uint64_t v23 = v20;
      a4 = v32;
      v22(v23, v7);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v18, v7);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v40 += v35;
        v39 += v35;
        if (++v36 == v29) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v24 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v25 = v24 + v39 + v15;
      uint64_t v26 = v24 + v40 + v15;
      Swift::String v27 = (void (*)(char *, uint64_t, uint64_t))v38[4];
      v27(v37, v25, v7);
      swift_arrayInitWithTakeFrontToBack(v25, v26, 1LL, v7);
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v26, v37, v7);
      v15 -= v35;
      if (v36 == ++v16) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1000B1F78(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::Int v51 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v50 = (char *)&v45 - v12;
  uint64_t v52 = v9[9];
  if (!v52)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (a2 - a1 == 0x8000000000000000LL && v52 == -1) {
    goto LABEL_62;
  }
  int64_t v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v52 == -1) {
    goto LABEL_63;
  }
  uint64_t v14 = (uint64_t)(a2 - a1) / v52;
  unint64_t v55 = a1;
  unint64_t v54 = a4;
  uint64_t v15 = v13 / v52;
  if (v14 >= v13 / v52)
  {
    if ((v15 & 0x8000000000000000LL) == 0)
    {
      uint64_t v17 = v15 * v52;
      if (a4 < a2 || a2 + v17 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v15, v8);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v29 = a4 + v17;
      unint64_t v53 = a4 + v17;
      unint64_t v55 = a2;
      if (v17 >= 1 && a1 < a2)
      {
        uint64_t v31 = -v52;
        uint64_t v46 = (void (*)(char *, unint64_t, uint64_t))v9[2];
        Swift::String v47 = v9;
        unint64_t v48 = a4;
        unint64_t v49 = a1;
        do
        {
          uint64_t v52 = a3 + v31;
          uint64_t v32 = v50;
          unint64_t v33 = v46;
          v46(v50, v29 + v31, v8);
          unint64_t v34 = a2 + v31;
          uint64_t v35 = v31;
          uint64_t v36 = v51;
          v33(v51, v34, v8);
          uint64_t v37 = sub_100007864( &qword_1009A0508,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v33) = dispatch thunk of static Comparable.< infix(_:_:)(v32, v36, v8, v37);
          int v38 = (void (*)(char *, uint64_t))v9[1];
          v38(v36, v8);
          v38(v32, v8);
          if ((v33 & 1) != 0)
          {
            uint64_t v31 = v35;
            uint64_t v39 = v52;
            if (a3 < a2 || v52 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v52, v34, 1LL, v8);
              uint64_t v9 = v47;
              unint64_t v40 = v48;
              unint64_t v41 = v49;
            }

            else
            {
              uint64_t v9 = v47;
              unint64_t v40 = v48;
              unint64_t v41 = v49;
              if (a3 != a2) {
                swift_arrayInitWithTakeBackToFront(v52, v34);
              }
            }

            v55 += v31;
          }

          else
          {
            unint64_t v42 = v53;
            unint64_t v43 = v53 + v35;
            v53 += v35;
            uint64_t v31 = v35;
            uint64_t v39 = v52;
            if (a3 < v42 || v52 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack(v52, v43, 1LL, v8);
              unint64_t v34 = a2;
              uint64_t v9 = v47;
              unint64_t v40 = v48;
              unint64_t v41 = v49;
            }

            else
            {
              uint64_t v9 = v47;
              unint64_t v40 = v48;
              unint64_t v41 = v49;
              if (a3 != v42) {
                swift_arrayInitWithTakeBackToFront(v52, v43);
              }
              unint64_t v34 = a2;
            }
          }

          unint64_t v29 = v53;
          if (v53 <= v40) {
            break;
          }
          a2 = v34;
          a3 = v39;
        }

        while (v34 > v41);
      }

      goto LABEL_60;
    }
  }

  else if ((v14 & 0x8000000000000000LL) == 0)
  {
    uint64_t v16 = v14 * v52;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v14, v8);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v49 = a4 + v16;
    unint64_t v53 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      unint64_t v19 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      do
      {
        unint64_t v20 = a3;
        uint64_t v21 = v50;
        v19(v50, a2, v8);
        Swift::String v22 = v51;
        v19(v51, a4, v8);
        uint64_t v23 = sub_100007864( &qword_1009A0508,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        char v24 = dispatch thunk of static Comparable.< infix(_:_:)(v21, v22, v8, v23);
        uint64_t v25 = (void (*)(char *, uint64_t))v9[1];
        v25(v22, v8);
        v25(v21, v8);
        unint64_t v26 = v55;
        if ((v24 & 1) != 0)
        {
          unint64_t v27 = a2 + v52;
          if (v55 < a2 || v55 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v55, a2, 1LL, v8);
            a3 = v20;
          }

          else
          {
            a3 = v20;
            if (v55 == a2) {
              unint64_t v26 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront(v55, a2);
            }
          }
        }

        else
        {
          unint64_t v28 = v54 + v52;
          if (v55 < v54 || v55 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v55, v54, 1LL, v8);
            a3 = v20;
          }

          else
          {
            a3 = v20;
            if (v55 != v54) {
              swift_arrayInitWithTakeBackToFront(v55, v54);
            }
          }

          unint64_t v54 = v28;
          unint64_t v27 = a2;
        }

        unint64_t v55 = v26 + v52;
        a4 = v54;
        if (v54 >= v49) {
          break;
        }
        a2 = v27;
      }

      while (v27 < a3);
    }

void *sub_1000B24CC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v40 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = a1;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v14 = *(void *)(v6 + 72);
    unint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
    v36[1] = v12;
    v36[2] = v2;
    __n128 v15 = swift_bridgeObjectRetain(v12);
    uint64_t v44 = _swiftEmptyArrayStorage;
    uint64_t v16 = (uint64_t)v40;
    int v38 = v10;
    uint64_t v39 = a2;
    uint64_t v37 = v14;
    while (1)
    {
      v41(v10, v13, v5, v15);
      uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v17)(v10, 0LL, 1LL, v5);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v16, v10, v5);
      if (*(void *)(a2 + 16) && (unint64_t v18 = sub_10030D124(v16), (v19 & 1) != 0))
      {
        unint64_t v20 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v18);
        uint64_t v21 = *v20;
        unint64_t v22 = v20[1];
        sub_10001736C(*v20, v22);
        uint64_t v23 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v5, v23);
        uint64_t v43 = v24;
        v25._uint64_t countAndFlagsBits = 8250LL;
        v25._unint64_t object = (void *)0xE200000000000000LL;
        String.append(_:)(v25);
        v26._uint64_t countAndFlagsBits = Data.hexString.getter(v21, v22);
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        sub_100016F9C(v21, v22);
        uint64_t v27 = v42;
        uint64_t v28 = v43;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v40, v5);
        if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0) {
          uint64_t v44 = sub_1004C4120(0LL, v44[2] + 1LL, 1, v44);
        }
        unint64_t v30 = v44[2];
        unint64_t v29 = v44[3];
        if (v30 >= v29 >> 1) {
          uint64_t v44 = sub_1004C4120((void *)(v29 > 1), v30 + 1, 1, v44);
        }
        uint64_t v31 = v44;
        v44[2] = v30 + 1;
        uint64_t v32 = &v31[2 * v30];
        v32[4] = v27;
        v32[5] = v28;
        uint64_t v10 = v38;
        a2 = v39;
        uint64_t v16 = (uint64_t)v40;
        uint64_t v14 = v37;
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
      }

      v13 += v14;
      if (!--v11)
      {
        v17(v10, 1LL, 1LL, v5, v15);
        break;
      }
    }
  }

  else
  {
    unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    __n128 v34 = swift_bridgeObjectRetain(a1);
    uint64_t v44 = _swiftEmptyArrayStorage;
    v33(v10, 1LL, 1LL, v5, v34);
  }

  swift_bridgeObjectRelease();
  return v44;
}

uint64_t sub_1000B27C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v48 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceDataKey);
  if (!*(void *)(a1 + 16) || (uint64_t v7 = sub_10030CF14(v5, v6), (v8 & 1) == 0))
  {
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }

  sub_10006A650(*(void *)(a1 + 56) + 32 * v7, (uint64_t)&v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v52 + 1))
  {
LABEL_42:
    sub_100015794((uint64_t)&v51, &qword_10099E200);
    return 0LL;
  }

  uint64_t v9 = sub_100004AEC(&qword_1009A0528);
  uint64_t v10 = *(void *)(v50 + 64);
  uint64_t v44 = v50 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(v50 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v45 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v46 = v50;
  swift_bridgeObjectRetain(v50);
  int64_t v14 = 0LL;
  __n128 v15 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      int64_t v49 = v14;
      unint64_t v18 = v17 | (v14 << 6);
    }

    else
    {
      int64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_48;
      }
      if (v19 >= v45)
      {
LABEL_45:
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v15;
      }

      unint64_t v20 = *(void *)(v44 + 8 * v19);
      int64_t v21 = v14 + 1;
      if (!v20)
      {
        int64_t v21 = v14 + 2;
        if (v14 + 2 >= v45) {
          goto LABEL_45;
        }
        unint64_t v20 = *(void *)(v44 + 8 * v21);
        if (!v20)
        {
          int64_t v21 = v14 + 3;
          if (v14 + 3 >= v45) {
            goto LABEL_45;
          }
          unint64_t v20 = *(void *)(v44 + 8 * v21);
          if (!v20)
          {
            int64_t v21 = v14 + 4;
            if (v14 + 4 >= v45) {
              goto LABEL_45;
            }
            unint64_t v20 = *(void *)(v44 + 8 * v21);
            if (!v20)
            {
              int64_t v21 = v14 + 5;
              if (v14 + 5 >= v45) {
                goto LABEL_45;
              }
              unint64_t v20 = *(void *)(v44 + 8 * v21);
              if (!v20)
              {
                uint64_t v22 = v14 + 6;
                if (v14 + 6 >= v45) {
                  goto LABEL_45;
                }
                unint64_t v20 = *(void *)(v44 + 8 * v22);
                if (!v20)
                {
                  while (1)
                  {
                    int64_t v21 = v22 + 1;
                    if (__OFADD__(v22, 1LL)) {
                      goto LABEL_49;
                    }
                    if (v21 >= v45) {
                      goto LABEL_45;
                    }
                    unint64_t v20 = *(void *)(v44 + 8 * v21);
                    ++v22;
                    if (v20) {
                      goto LABEL_29;
                    }
                  }
                }

                int64_t v21 = v14 + 6;
              }
            }
          }
        }
      }

uint64_t sub_1000B2C08(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
  {
    Data.subscript.getter(0LL);
    Data.subscript.getter(1LL);
    __asm { BR              X10 }
  }

  return 512LL;
}

unint64_t sub_1000B2D1C(uint64_t a1, char a2, void *a3)
{
  LOBYTE(v4) = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (!v6) {
    return swift_bridgeObjectRelease();
  }
  unsigned __int8 v7 = *(_BYTE *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  sub_10001736C(v9, v8);
  if (v8 >> 60 == 15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v10 = (void *)*a3;
  unint64_t result = sub_10030D190(v7);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  BOOL v15 = __OFADD__(v13, v14);
  uint64_t v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  char v17 = v12;
  if (v10[3] < v16)
  {
    sub_10004AAD8(v16, v4 & 1);
    unint64_t result = sub_10030D190(v7);
    if ((v17 & 1) == (v18 & 1)) {
      goto LABEL_8;
    }
LABEL_6:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt8);
    __break(1u);
  }

  if ((v4 & 1) == 0)
  {
    unint64_t v21 = result;
    sub_10006232C();
    unint64_t result = v21;
    int64_t v19 = (void *)*a3;
    if ((v17 & 1) != 0)
    {
LABEL_9:
      uint64_t v20 = v19[7] + 16 * result;
      sub_100016F9C(*(void *)v20, *(void *)(v20 + 8));
      *(void *)uint64_t v20 = v9;
      *(void *)(v20 + 8) = v8;
      if (--v6)
      {
LABEL_15:
        uint64_t v4 = (unint64_t *)(a1 + 72);
        do
        {
          unsigned __int8 v7 = *((_BYTE *)v4 - 16);
          uint64_t v9 = *(v4 - 1);
          unint64_t v8 = *v4;
          sub_10001736C(v9, *v4);
          if (v8 >> 60 == 15) {
            break;
          }
          unint64_t v26 = (void *)*a3;
          unint64_t result = sub_10030D190(v7);
          uint64_t v28 = v26[2];
          BOOL v29 = (v27 & 1) == 0;
          BOOL v15 = __OFADD__(v28, v29);
          uint64_t v30 = v28 + v29;
          if (v15) {
            goto LABEL_25;
          }
          char v17 = v27;
          if (v26[3] < v30)
          {
            sub_10004AAD8(v30, 1LL);
            unint64_t result = sub_10030D190(v7);
            if ((v17 & 1) != (v31 & 1)) {
              goto LABEL_6;
            }
          }

          uint64_t v32 = (void *)*a3;
          if ((v17 & 1) != 0)
          {
            uint64_t v25 = v32[7] + 16 * result;
            sub_100016F9C(*(void *)v25, *(void *)(v25 + 8));
            *(void *)uint64_t v25 = v9;
            *(void *)(v25 + 8) = v8;
          }

          else
          {
            v32[(result >> 6) + 8] |= 1LL << result;
            *(_BYTE *)(v32[6] + result) = v7;
            BOOL v33 = (uint64_t *)(v32[7] + 16 * result);
            *BOOL v33 = v9;
            v33[1] = v8;
            uint64_t v34 = v32[2];
            BOOL v15 = __OFADD__(v34, 1LL);
            uint64_t v35 = v34 + 1;
            if (v15) {
              goto LABEL_26;
            }
            v32[2] = v35;
          }

          v4 += 3;
        }

        while (--v6);
      }

      return swift_bridgeObjectRelease();
    }

    goto LABEL_12;
  }

LABEL_8:
  int64_t v19 = (void *)*a3;
  if ((v17 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_12:
  v19[(result >> 6) + 8] |= 1LL << result;
  *(_BYTE *)(v19[6] + result) = v7;
  uint64_t v22 = (uint64_t *)(v19[7] + 16 * result);
  *uint64_t v22 = v9;
  v22[1] = v8;
  uint64_t v23 = v19[2];
  BOOL v15 = __OFADD__(v23, 1LL);
  uint64_t v24 = v23 + 1;
  if (!v15)
  {
    v19[2] = v24;
    if (--v6) {
      goto LABEL_15;
    }
    return swift_bridgeObjectRelease();
  }

    uint64_t v9 = MACAddress.data.getter(v3);
    return MACAddress.init(addressToSanitize:type:)(v9, v10, 1LL);
  }

  if (*(_BYTE *)(v1 + v3[13]) != 4) {
    goto LABEL_8;
  }
  uint64_t v5 = type metadata accessor for MACAddress(0LL);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  unsigned __int8 v7 = a1;
  unint64_t v8 = 1LL;
  return v6(v7, v8, 1LL, v5);
}

  int64_t v19 = 0;
  uint64_t v20 = 1;
  return v19 | (v20 << 8);
}

    swift_once(&qword_10099B798, sub_100651870);
    goto LABEL_5;
  }

  sub_100254338((uint64_t)v24, (uint64_t)v25);
  sub_100254374(v25, (uint64_t)v23);
  uint64_t v11 = swift_allocObject(&unk_10095F860, 57LL, 7LL);
  sub_100254338((uint64_t)v23, v11 + 16);
  char v12 = sub_100004AEC(&qword_1009B1350);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = Future.init(_:)(sub_1004D5934, v11);
  sub_1002543B0(v25);
  return v13;
}

      DirectorySequence.next()(v34);
      if (v67(v21, 1LL, v10) == 1) {
        break;
      }
    }
  }

  (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v57);
  uint64_t v28 = 1LL;
  BOOL v29 = v58;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v29, v28, 1LL, v69);
}

    uint64_t v28 = v3;
    sub_1003493E8((uint64_t)v8, v39);
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0) {
      sub_100032AA8(0, v22[2] + 1LL, 1);
    }
    uint64_t v22 = v40;
    uint64_t v30 = v40[2];
    BOOL v29 = v40[3];
    if (v30 >= v29 >> 1)
    {
      sub_100032AA8(v29 > 1, v30 + 1, 1);
      uint64_t v22 = v40;
    }

    _OWORD v22[2] = v30 + 1;
    unint64_t result = sub_1003493E8(v39, (uint64_t)v22 + v25 + v30 * v26);
    uint64_t v3 = v28;
    uint64_t v23 = v37;
    uint64_t v4 = v38;
LABEL_5:
    if (++v24 == v23)
    {
      uint64_t v22 = v40;
      char v12 = v35;
      uint64_t v11 = v36;
      goto LABEL_20;
    }
  }

  __break(1u);
  return result;
}

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v13, v19, 1LL, v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1LL, v6) == 1)
  {
    sub_100015794((uint64_t)v13, &qword_1009B9A70);
  }

  else
  {
    void v41[3] = v6;
    v41[4] = &off_1009585B8;
    uint64_t v20 = sub_10000A7C8(v41);
    sub_10002218C((uint64_t)v13, (uint64_t)v20, type metadata accessor for DefaultConfigurationLayer);
    swift_getAtKeyPath(v42, v41, a1);
    unint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
    uint64_t v22 = v43;
    if (v43)
    {
      uint64_t v23 = v47;
      uint64_t v24 = v42[1];
      *(_OWORD *)a3 = v42[0];
      *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = v24;
      *(_OWORD *)(a3 + 32) = v42[2];
      *(void *)(a3 + 48) = v22;
      *(_OWORD *)(a3 + 56) = v44;
      *(_OWORD *)(a3 + 72) = v45;
      *(_OWORD *)(a3 + 88) = v46;
      *(void *)(a3 + 104) = v23;
      return result;
    }
  }

  *(void *)&v42[0] = 0LL;
  *((void *)&v42[0] + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(40LL);
  v25._unint64_t object = (void *)0x800000010085A890LL;
  v25._uint64_t countAndFlagsBits = 0xD000000000000026LL;
  String.append(_:)(v25);
  v31[0] = a1;
  unint64_t v26 = sub_100004AEC(&qword_1009B9A78);
  _print_unlocked<A, B>(_:_:)( v31,  v42,  v26,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  *(void *)&v42[0],  *((void *)&v42[0] + 1),  "searchpartyd/Configuration.swift",  32LL,  2LL,  24LL,  0);
  __break(1u);
  return result;
}

  return v14;
}

  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, v16, 1LL, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v10, &qword_1009B9A70);
    return 2LL;
  }

  else
  {
    v21[3] = v4;
    v21[4] = &off_1009585B8;
    char v18 = sub_10000A7C8(v21);
    sub_1006A30E0((uint64_t)v10, (uint64_t)v18);
    swift_getAtKeyPath(&v20[1], v21, a1);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
    return v20[1];
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, v16, 1LL, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v10, &qword_1009B9A70);
    return 0LL;
  }

  else
  {
    v22[3] = v4;
    v22[4] = &off_1009585B8;
    char v18 = sub_10000A7C8(v22);
    sub_1006A30E0((uint64_t)v10, (uint64_t)v18);
    swift_getAtKeyPath(v21, v22, a1);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
    return v21[0];
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, v16, 1LL, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v10, &qword_1009B9A70);
    return 0LL;
  }

  else
  {
    v22[3] = v4;
    v22[4] = &off_1009585B8;
    char v18 = sub_10000A7C8(v22);
    sub_1006A30E0((uint64_t)v10, (uint64_t)v18);
    swift_getAtKeyPath(v21, v22, a1);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
    return v21[0];
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, v16, 1LL, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v10, &qword_1009B9A70);
    char v17 = 0LL;
    char v18 = 1;
  }

  else
  {
    v24[3] = v4;
    void v24[4] = &off_1009585B8;
    int64_t v19 = sub_10000A7C8(v24);
    sub_1006A30E0((uint64_t)v10, (uint64_t)v19);
    swift_getAtKeyPath(v23, v24, a1);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
    char v17 = LODWORD(v23[0]);
    char v18 = BYTE4(v23[0]);
  }

  return v17 | ((unint64_t)v18 << 32);
}

    sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009B5370);
    return 0LL;
  }

  sub_1003131AC((uint64_t)v10, (uint64_t)v14);
  if (v24(v23, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v17, &qword_10099D8A0);
    sub_100015794((uint64_t)v19, &qword_10099D8A0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    goto LABEL_8;
  }

  unint64_t v26 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v48, v23, v4);
  char v27 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v28 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v26, v4, v27);
  BOOL v29 = *(void (**)(char *, uint64_t))(v5 + 8);
  v29(v26, v4);
  sub_100015794((uint64_t)v17, &qword_10099D8A0);
  sub_100015794((uint64_t)v19, &qword_10099D8A0);
  v29(v14, v4);
  sub_100015794((uint64_t)v10, &qword_10099D8A0);
  if ((v28 & 1) == 0) {
    return 0LL;
  }
LABEL_10:
  char v31 = v45;
  uint64_t v30 = v46;
  uint64_t v32 = v47;
  if ((static Date.== infix(_:_:)(v45 + v46[7], v47 + v46[7]) & 1) == 0) {
    return 0LL;
  }
  BOOL v33 = v30[8];
  uint64_t v34 = *(void *)(v31 + v33);
  uint64_t v35 = *(void *)(v31 + v33 + 8);
  unint64_t v36 = (void *)(v32 + v33);
  char v37 = v36[1];
  if (v34 != *v36 || v35 != v37)
  {
    int v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, *v36, v37, 0LL);
    unint64_t result = 0LL;
    if ((v38 & 1) == 0) {
      return result;
    }
  }

  if (*(_DWORD *)(v31 + v30[9]) != *(_DWORD *)(v32 + v30[9])) {
    return 0LL;
  }
  uint64_t v39 = v30[10];
  BOOL v40 = *(void *)(v31 + v39);
  uint64_t v41 = *(void *)(v31 + v39 + 8);
  uint64_t v42 = (void *)(v32 + v39);
  uint64_t v43 = v42[1];
  if (v40 == *v42 && v41 == v43
    || (v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, *v42, v43, 0LL), unint64_t result = 0LL, (v44 & 1) != 0))
  {
    return 0LL;
  }

  return result;
}

  __break(1u);
  return result;
}

void sub_1000B2F8C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

unint64_t sub_1000B2FD0()
{
  if (BYTE6(v0) < 2uLL)
  {
    if (qword_10099B8C8 != -1) {
      swift_once(&qword_10099B8C8, sub_10073B768);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_10000A720(v3, (uint64_t)qword_100A2B390);
    sub_10001736C(v2, v0);
    uint64_t v4 = sub_10001736C(v2, v0);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      unsigned __int8 v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      v35[0] = v8;
      *(_DWORD *)unsigned __int8 v7 = 136446210;
      uint64_t v9 = Data.hexString.getter(v2, v0);
      uint64_t v34 = sub_1003F11D4(v9, v10, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      sub_100016F9C(v2, v0);
      sub_100016F9C(v2, v0);
      uint64_t v11 = "No TLV header: %{public}s";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v11, v7, 0xCu);
      swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
LABEL_25:

      return sub_100421DD4((uint64_t)_swiftEmptyArrayStorage);
    }

    goto LABEL_24;
  }

  if (v1)
  {
    if (v1 == 1)
    {
      LODWORD(v12) = HIDWORD(v2) - v2;
      if (!__OFSUB__(HIDWORD(v2), (_DWORD)v2))
      {
        uint64_t v12 = (int)v12;
        goto LABEL_12;
      }

      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }

    uint64_t v14 = *(void *)(v2 + 16);
    uint64_t v13 = *(void *)(v2 + 24);
    BOOL v15 = __OFSUB__(v13, v14);
    uint64_t v12 = v13 - v14;
    if (v15) {
      goto LABEL_37;
    }
  }

  else
  {
    uint64_t v12 = BYTE6(v0);
  }

LABEL_12:
  if (v12 > 31)
  {
    if (qword_10099B8C8 != -1) {
      swift_once(&qword_10099B8C8, sub_10073B768);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10000A720(v16, (uint64_t)qword_100A2B390);
    sub_10001736C(v2, v0);
    uint64_t v17 = sub_10001736C(v2, v0);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      unsigned __int8 v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      v35[0] = v8;
      *(_DWORD *)unsigned __int8 v7 = 136446210;
      uint64_t v18 = Data.hexString.getter(v2, v0);
      uint64_t v34 = sub_1003F11D4(v18, v19, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      sub_100016F9C(v2, v0);
      sub_100016F9C(v2, v0);
      uint64_t v11 = "TLV too large: %{public}s";
      goto LABEL_23;
    }

  unint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  unint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  unint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

      a2 = (a2 + 1) & v47;
      if (((*(void *)(v48 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_18;
      }
    }

    sub_100018C68((uint64_t)v16, type metadata accessor for BeaconStatus);
    sub_100018C68((uint64_t)v19, type metadata accessor for BeaconStatus);
    sub_10001DC4C((uint64_t)v21, (uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_10001DC4C(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
LABEL_11:
    sub_100018C68((uint64_t)v10, type metadata accessor for BeaconStatus);
    sub_100018C68((uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_100018C68((uint64_t)v21, type metadata accessor for BeaconStatus);
    goto LABEL_12;
  }

  unint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  unint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  unint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  uint64_t v21 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  unint64_t result = sub_10002218C( (uint64_t)a1,  *(void *)(v21 + 48) + *(void *)(v28 + 72) * a2,  type metadata accessor for RawSearchResult);
  unint64_t v23 = *(void *)(v21 + 16);
  uint64_t v24 = __OFADD__(v23, 1LL);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = v25;
    return result;
  }

  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v27);
  __break(1u);
  return result;
}

  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = v6;
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v18 = __OFADD__(v17, 1LL);
  unint64_t v19 = v17 + 1;
  if (!v18)
  {
    *(void *)(v16 + swift_weakDestroy(v0 + 16) = v19;
    return result;
  }

  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
  return result;
}

  unint64_t v23 = *v7;
  *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v23 + 48) + 8 * a2) = v13;
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = __OFADD__(v24, 1LL);
  uint64_t v26 = v24 + 1;
  if (!v25)
  {
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = v26;
    return result;
  }

  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

    sub_10002218C(*(void *)(v0 + 808), *(void *)(v0 + 800), type metadata accessor for BeaconEstimatedLocation);
    uint64_t v18 = *(void *)(v0 + 424);
    if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
    {
      sub_100032D0C(0, *(void *)(v18 + 16) + 1LL, 1);
      uint64_t v18 = *v169;
    }

    uint64_t v20 = *(void *)(v18 + 16);
    unint64_t v19 = *(void *)(v18 + 24);
    if (v20 >= v19 >> 1)
    {
      sub_100032D0C(v19 > 1, v20 + 1, 1);
      uint64_t v18 = *v169;
    }

    uint64_t v21 = *(void *)(v0 + 800);
    *(void *)(v18 + swift_weakDestroy(v0 + 16) = v20 + 1;
    sub_10002218C(v21, v18 + v7 + v20 * v8, type metadata accessor for BeaconEstimatedLocation);
    goto LABEL_4;
  }

  unint64_t v10 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v10 < 0) {
      Swift::String v62 = *v1;
    }
    else {
      Swift::String v62 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v1);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_bridgeObjectRelease();
    if (v11 >= v4)
    {
LABEL_14:
      sub_100498E5C(v4, v11);
      swift_endAccess(&v69);
      if (qword_10099B198 == -1) {
        goto LABEL_15;
      }
      goto LABEL_93;
    }
  }

  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v11 >= v4) {
      goto LABEL_14;
    }
  }

  __break(1u);
LABEL_93:
  swift_once(&qword_10099B198, sub_1001B4240);
LABEL_15:
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000A720(v12, (uint64_t)qword_100A2A2E0);
  uint64_t v13 = swift_retain();
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  BOOL v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v16 = 134217984;
    uint64_t v17 = *v1;
    if ((unint64_t)*v1 >> 62)
    {
      if (v17 < 0) {
        unint64_t v64 = *v1;
      }
      else {
        unint64_t v64 = v17 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v1);
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v64);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    Swift::String v69 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v16 + 4, v16 + 12);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Active controllers count after cleanup is %ld", v16, 0xCu);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

        unint64_t v19 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
        uint64_t v20 = (void *)static OS_os_log.default.getter(v19);
        uint64_t v21 = static os_log_type_t.default.getter(v20);
        os_log(_:dso:log:type:_:)( "FMIPStateManager: FMIP State changed",  36LL,  2LL,  &_mh_execute_header,  v20,  v21,  _swiftEmptyArrayStorage);

        uint64_t v22 = [v3 standardUserDefaults];
        unint64_t v23 = String._bridgeToObjectiveC()();
        [v22 setBool:a1 & 1 forKey:v23];

        LOBYTE(v22) = sub_1001BF158();
        uint64_t v24 = swift_allocObject(&unk_100946B38, 17LL, 7LL);
        *(_BYTE *)(v24 + swift_weakDestroy(v0 + 16) = v22 & 1;
        sub_1001C01A8((uint64_t)sub_1001C0E6C, v24);

        swift_release(v24);
        goto LABEL_13;
      }
    }

    else
    {
      sub_1001C0D4C((uint64_t)v27);
    }

    uint64_t v18 = 0LL;
    goto LABEL_12;
  }

  unsigned __int8 v7 = swift_errorRetain(a1);
  uint64_t v8 = static os_log_type_t.error.getter(v7);
  uint64_t v9 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v10 = (void *)static OS_os_log.default.getter(v9);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  v27[0] = a1;
  swift_errorRetain(a1);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v14 = String.init<A>(describing:)(v27, v13);
  uint64_t v16 = v15;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_1000226F4();
  *(void *)(v12 + 32) = v14;
  *(void *)(v12 + 40) = v16;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v10, "FMIPStateManager error getting fmip state: %@", 45LL, 2LL, v12);

  swift_bridgeObjectRelease();
  sub_10006A58C(a1, 1);
LABEL_13:
  Transaction.capture()();
}

    swift_once(&qword_10099B220, sub_1002673AC);
    goto LABEL_4;
  }

  uint64_t v34 = v22;
  uint64_t v35 = v23;
  unint64_t v36 = v24;
  char v37 = v25;
  int v38 = (_BYTE *)(a1 + *(int *)(v13 + 24));
  if (!v38[8]) {
    *((_BYTE *)v6 + 176) = *v38 & 1;
  }
  uint64_t v39 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v39);
  *(&v44 - 12) = (uint64_t)v6;
  *(&v44 - 11) = v34;
  *(&v44 - 10) = v35;
  *(&v44 - 9) = v36;
  *(&v44 - 8) = v37;
  *(&v44 - 7) = a3;
  BOOL v40 = v45;
  *(&v44 - 6) = a1;
  *(&v44 - 5) = v40;
  uint64_t v41 = v48;
  *(&v44 - 4) = (uint64_t)v47;
  *(&v44 - 3) = v41;
  *(&v44 - 2) = v46;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.DebugCommandManager.executeCommand",  64LL,  2LL,  sub_10028A55C,  &v44 - 14);
  return sub_100289940(v34, v35, v36, v37);
}

  uint64_t v44 = [v34 error];
  int64_t v45 = *v55;
  *unint64_t v55 = (uint64_t)v44;
  swift_errorRelease(v45);
  uint64_t v46 = [v34 commandIdentifier];
  uint64_t v47 = (uint64_t)v53;
  if (v46)
  {
    uint64_t v48 = v46;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

    int64_t v49 = 0LL;
  }

  else
  {
    int64_t v49 = 1LL;
  }

  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v47, v49, 1LL, v22);
  uint64_t v43 = v56;
  sub_100015750(v47, v56, &qword_10099D8A0);
  return sub_1000D4D50(v43, v57, &qword_10099D8A0);
}

    uint64_t v41 = &qword_1009A8A80;
    uint64_t v42 = (uint64_t)v18;
LABEL_20:
    sub_100015794(v42, v41);
    return 0LL;
  }

  sub_10001581C((uint64_t)v18, (uint64_t)v22, &qword_1009A6DD0);
  BOOL v40 = v37(v36, 1LL, v13);
  uint64_t v39 = v139;
  if (v40 == 1)
  {
    sub_100015794((uint64_t)v25, &qword_1009A6DD0);
    sub_100015794((uint64_t)v27, &qword_1009A6DD0);
    sub_100018C68((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_12;
  }

  uint64_t v43 = v134;
  sub_10002218C(v36, v134, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  uint64_t v44 = sub_1002F6F8C((uint64_t)v22, v43);
  sub_100018C68(v43, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  sub_100015794((uint64_t)v25, &qword_1009A6DD0);
  sub_100015794((uint64_t)v27, &qword_1009A6DD0);
  sub_100018C68((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  sub_100015794((uint64_t)v18, &qword_1009A6DD0);
  if (!v44) {
    return 0LL;
  }
LABEL_14:
  int64_t v45 = v129;
  uint64_t v46 = v128;
  uint64_t v47 = v138;
  sub_10001581C(v128 + *(int *)(v129 + 28), v138, &qword_1009A6DC8);
  uint64_t v48 = v130;
  sub_10001581C(v130 + *(int *)(v45 + 28), v39, &qword_1009A6DC8);
  int64_t v49 = (uint64_t)v131;
  uint64_t v50 = (uint64_t)&v131[*(int *)(v135 + 48)];
  sub_10001581C(v47, (uint64_t)v131, &qword_1009A6DC8);
  sub_10001581C(v39, v50, &qword_1009A6DC8);
  __int128 v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
  __int128 v52 = v137;
  if (v51(v49, 1LL, v137) == 1)
  {
    sub_100015794(v39, &qword_1009A6DC8);
    sub_100015794(v47, &qword_1009A6DC8);
    if (v51(v50, 1LL, v52) == 1)
    {
      sub_100015794((uint64_t)v131, &qword_1009A6DC8);
      goto LABEL_24;
    }

    goto LABEL_19;
  }

  unint64_t v53 = v133;
  sub_10001581C(v49, v133, &qword_1009A6DC8);
  if (v51(v50, 1LL, v52) == 1)
  {
    sub_100015794(v39, &qword_1009A6DC8);
    sub_100015794(v138, &qword_1009A6DC8);
    sub_100018C68(v53, type metadata accessor for AccessoryInfoResponseContent.Assets);
LABEL_19:
    uint64_t v41 = &qword_1009A8A78;
    uint64_t v42 = (uint64_t)v131;
    goto LABEL_20;
  }

  unint64_t v55 = v132;
  sub_10002218C(v50, v132, type metadata accessor for AccessoryInfoResponseContent.Assets);
  uint64_t v56 = sub_1002F624C(v53, v55);
  sub_100018C68(v55, type metadata accessor for AccessoryInfoResponseContent.Assets);
  sub_100015794(v39, &qword_1009A6DC8);
  sub_100015794(v138, &qword_1009A6DC8);
  sub_100018C68(v53, type metadata accessor for AccessoryInfoResponseContent.Assets);
  sub_100015794(v49, &qword_1009A6DC8);
  if ((v56 & 1) == 0) {
    return 0LL;
  }
LABEL_24:
  unint64_t v57 = *(int *)(v45 + 32);
  Swift::String v58 = (void *)(v46 + v57);
  char v59 = *(void *)(v46 + v57 + 8);
  uint64_t v60 = (void *)(v48 + v57);
  unint64_t v61 = v60[1];
  if (!v59)
  {
    if (v61) {
      return 0LL;
    }
    goto LABEL_31;
  }

  if (!v61) {
    return 0LL;
  }
  if (*v58 == *v60 && v59 == v61
    || (v62 = _stringCompareWithSmolCheck(_:_:expecting:)(*v58, v59, *v60, v61, 0LL), unint64_t result = 0LL, (v62 & 1) != 0))
  {
LABEL_31:
    uint64_t v63 = *(int *)(v129 + 36);
    Swift::String v65 = *(void *)(v46 + v63);
    unint64_t v64 = *(void *)(v46 + v63 + 8);
    Swift::String v66 = *(void *)(v46 + v63 + 16);
    Swift::String v67 = *(void *)(v46 + v63 + 24);
    Swift::String v69 = *(void *)(v46 + v63 + 32);
    unint64_t v68 = *(void *)(v46 + v63 + 40);
    unint64_t v70 = (uint64_t *)(v130 + v63);
    unint64_t v71 = *v70;
    uint64_t v72 = v70[1];
    os_log_type_t v73 = v70[2];
    uint64_t v139 = v70[3];
    uint64_t v74 = v70[4];
    unint64_t v75 = v70[5];
    if (v64)
    {
      if (v72)
      {
        uint64_t v136 = v70[4];
        if (v65 == v71 && v64 == v72) {
          goto LABEL_56;
        }
        uint64_t v76 = v65;
        uint64_t v77 = v64;
        unint64_t v135 = v67;
        uint64_t v138 = v64;
        uint64_t v78 = v68;
        char v79 = v65;
        uint64_t v80 = v69;
        uint64_t v81 = v66;
        uint64_t v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, v71, v72, 0LL);
        Swift::String v66 = v81;
        Swift::String v69 = v80;
        Swift::String v65 = v79;
        unint64_t v68 = v78;
        unint64_t v64 = v138;
        Swift::String v67 = v135;
        if ((v82 & 1) != 0)
        {
LABEL_56:
          if (v66 == v73 && v67 == v139) {
            goto LABEL_39;
          }
          uint64_t v83 = v67;
          unint64_t v135 = v67;
          uint64_t v84 = v64;
          uint64_t v85 = v68;
          BOOL v86 = v65;
          unint64_t v87 = v69;
          os_log_type_t v88 = v66;
          uint64_t v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v83, v73, v139, 0LL);
          Swift::String v66 = v88;
          Swift::String v69 = v87;
          Swift::String v65 = v86;
          unint64_t v68 = v85;
          unint64_t v64 = v84;
          Swift::String v67 = v135;
          if ((v89 & 1) != 0)
          {
LABEL_39:
            uint64_t v134 = v72;
            if (v69 == v136 && v68 == v75)
            {
              uint64_t v90 = v65;
              uint64_t v91 = v65;
              uint64_t v92 = v64;
              unint64_t v93 = v64;
              uint64_t v94 = v71;
              uint64_t v95 = v73;
              BOOL v96 = v66;
              uint64_t v97 = v67;
              char v98 = v67;
              uint64_t v99 = v68;
              sub_1002549B8(v91, v92, v66, v98, v69, v68);
              sub_1002549B8(v90, v93, v96, v97, v69, v99);
              sub_1002549B8(v94, v134, v95, v139, v69, v99);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1002F77C0(v90, v93, v96, v97, v69, v99);
            }

            else
            {
              uint64_t v119 = v68;
              uint64_t v120 = v66;
              LODWORD(v138) = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v68, v136, v75, 0LL);
              uint64_t v133 = v120;
              sub_1002549B8(v65, v64, v120, v67, v69, v119);
              sub_1002549B8(v65, v64, v120, v67, v69, v119);
              sub_1002549B8(v71, v134, v73, v139, v136, v75);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1002F77C0(v65, v64, v133, v67, v69, v119);
              unint64_t result = 0LL;
              if ((v138 & 1) == 0) {
                return result;
              }
            }

    BOOL v40 = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v37, v38, 1LL, v7);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v21, v46);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v37, 1LL, v7) == 1)
    {
      sub_100015794(v37, &qword_1009A4890);
      uint64_t v41 = type metadata accessor for Date(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))( v39,  1LL,  1LL,  v41);
    }

    else
    {
      uint64_t v42 = v37;
      uint64_t v43 = v47;
      sub_10002218C(v42, v47, type metadata accessor for WildModeAssociationRecord);
      sub_10001581C(v43 + *(int *)(v7 + 44), v39, (uint64_t *)&unk_10099D720);
      return sub_100018C68(v43, type metadata accessor for WildModeAssociationRecord);
    }
  }

            unint64_t v28 = v30;
LABEL_9:
            unint64_t v19 = (v29 - 1) & v29;
            uint64_t v22 = __clz(__rbit64(v29)) + (v28 << 6);
            uint64_t v20 = v28;
            goto LABEL_5;
          }
        }
      }
    }

  uint64_t v8 = 2;
  unint64_t result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  v8,  3451LL,  0);
  __break(1u);
  return result;
}

  uint64_t v12 = 2;
  unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  v12,  3451LL,  0);
  __break(1u);
  return result;
}

  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v10 = v2[2];
    uint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    uint64_t v11 = &v2[2 * v10];
    v11[4] = 0xD00000000000001ALL;
    v11[5] = 0x8000000100863340LL;
  }

  if ((a1 & 8) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    uint64_t v13 = v2[2];
    uint64_t v12 = v2[3];
    if (v13 >= v12 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v12 > 1), v13 + 1, 1, v2);
    }
    v2[2] = v13 + 1;
    uint64_t v14 = &v2[2 * v13];
    v14[4] = 0xD000000000000017LL;
    v14[5] = 0x8000000100863320LL;
  }

  if ((a1 & 0x10) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    uint64_t v16 = v2[2];
    BOOL v15 = v2[3];
    if (v16 >= v15 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v15 > 1), v16 + 1, 1, v2);
    }
    v2[2] = v16 + 1;
    uint64_t v17 = &v2[2 * v16];
    v17[4] = 0x657269757165722ELL;
    v17[5] = 0xEF417373616C4373LL;
    if ((a1 & 0x20) == 0)
    {
LABEL_26:
      if ((a1 & 0x40) == 0) {
        goto LABEL_27;
      }
      goto LABEL_46;
    }
  }

  else if ((a1 & 0x20) == 0)
  {
    goto LABEL_26;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  unint64_t v19 = v2[2];
  uint64_t v18 = v2[3];
  if (v19 >= v18 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v18 > 1), v19 + 1, 1, v2);
  }
  v2[2] = v19 + 1;
  uint64_t v20 = &v2[2 * v19];
  v20[4] = 0x657269757165722ELL;
  v20[5] = 0xEF427373616C4373LL;
  if ((a1 & 0x40) == 0)
  {
LABEL_27:
    if ((a1 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_51;
  }

  __break(1u);
  return result;
}

  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v10 = v2[2];
    uint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    uint64_t v11 = &v2[2 * v10];
    v11[4] = 0xD000000000000015LL;
    v11[5] = 0x8000000100864F00LL;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_31;
    }
  }

  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v13 = v2[2];
  uint64_t v12 = v2[3];
  if (v13 >= v12 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v12 > 1), v13 + 1, 1, v2);
  }
  v2[2] = v13 + 1;
  uint64_t v14 = &v2[2 * v13];
  v14[4] = 0x65746972772ELL;
  v14[5] = 0xE600000000000000LL;
  if ((a1 & 0x10) == 0)
  {
LABEL_15:
    if ((a1 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

    swift_willThrow(v19);
    sub_100016F9C(*(void *)(v4 - 112), *(void *)(v4 - 104));
    return v0;
  }

  unint64_t v0 = *(void *)(v4 - 96);
  if (!v0)
  {
    uint64_t v20 = static os_log_type_t.error.getter(v5);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_100A2AC90,  "CryptoUtil: diversifyKey: CryptorRef was not populated as expected.",  67LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v0 = type metadata accessor for CryptoError(0LL);
    uint64_t v21 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v0, v21, 0LL, 0LL);
    unint64_t v19 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v0 - 8) + 104LL))( v22,  enum case for CryptoError.unspecifiedError(_:),  v0);
    goto LABEL_12;
  }

  sub_100016F9C(v8, v9 | (v7 << 48));
  return v0;
}

  if (qword_10099B5E8 != -1) {
    char v31 = swift_once(&qword_10099B5E8, sub_1005C66A4);
  }
  uint64_t v42 = qword_100A2AE20;
  __chkstk_darwin(v31);
  *(&v122 - 4) = v42;
  *(&v122 - 3) = a1;
  *(&v122 - 2) = (uint64_t)v136;
  swift_retain();
  uint64_t v43 = sub_100004AEC(&qword_1009A34B0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100339B1C, &v122 - 6, v43);
  swift_release();
  uint64_t v44 = v141;
  int64_t v45 = v142[0];
  swift_bridgeObjectRelease();
  uint64_t v143 = v44;
  __int128 v144 = v45;
  if (qword_10099B178 != -1) {
    swift_once(&qword_10099B178, sub_100189C64);
  }
  uint64_t v46 = type metadata accessor for Logger(0LL);
  uint64_t v47 = sub_10000A720(v46, (uint64_t)qword_100A2A290);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v47);
  uint64_t v48 = static os_log_type_t.default.getter(v35);
  if (os_log_type_enabled(v35, v48))
  {
    int64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v50 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v139 = v50;
    *(_DWORD *)int64_t v49 = 136315138;
    swift_beginAccess(&v143, v137, 0LL, 0LL);
    uint64_t v141 = v143;
    v142[0] = v144;
    swift_bridgeObjectRetain(v144);
    __int128 v51 = String.init<A>(describing:)(&v141, v43);
    uint64_t v141 = sub_1003F11D4(v51, v52, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v35,  v48,  "liveLocations: no handle provided by server. Looking at fmf data %s",  v49,  0xCu);
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  uint64_t v77 = v2;
  unint64_t v28 = _BridgedStoredNSError.code.getter(&v75, v8, v11);
  if ((void)v75 == 21LL)
  {
    uint64_t v41 = static os_log_type_t.error.getter(v28);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    uint64_t v42 = qword_100A2B020;
    uint64_t v43 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v44 = swift_allocObject(v43, 72LL, 7LL);
    *(_OWORD *)(v44 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    BOOL v33 = v2;
    int64_t v45 = related decl 'e' for CKErrorCode.description.getter();
    uint64_t v47 = v46;

    *(void *)(v44 + 56) = &type metadata for String;
    *(void *)(v44 + 64) = sub_1000226F4();
    *(void *)(v44 + 32) = v45;
    *(void *)(v44 + 40) = v47;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "Change token expired: %@", 24LL, 2LL, v44);
    swift_bridgeObjectRelease();
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 16);
    if (Strong)
    {
      int64_t v49 = Strong;
      sub_10001E204(v3);
      swift_unknownObjectRelease(v49);
    }

    sub_1006775F0(0);
  }

  else if ((void)v75 == 26LL)
  {
    uint64_t v29 = static os_log_type_t.error.getter(v28);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    uint64_t v30 = qword_100A2B020;
    char v31 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v32 = swift_allocObject(v31, 72LL, 7LL);
    *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    BOOL v33 = v2;
    uint64_t v34 = related decl 'e' for CKErrorCode.description.getter();
    unint64_t v36 = v35;

    *(void *)(v32 + 56) = &type metadata for String;
    *(void *)(v32 + 64) = sub_1000226F4();
    *(void *)(v32 + 32) = v34;
    *(void *)(v32 + 40) = v36;
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Zone not found: %@", 18LL, 2LL, v32);
    swift_bridgeObjectRelease();
    char v37 = *(void *)(v3 + 80);
    *(void *)(v3 + 80) = 0LL;
    sub_100689248(v37);
    int v38 = *(void *)(v3 + 80);
    sub_100689258(v38);
    sub_1006889CC(v38);
    uint64_t v39 = sub_100689248(v38);
    BOOL v40 = static os_log_type_t.default.getter(v39);
    os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  qword_100A2B020,  "Setting zoneState to .unknown",  29LL,  2LL,  _swiftEmptyArrayStorage);
    sub_10067CA70(0);
  }

  else
  {
    uint64_t v50 = static os_log_type_t.error.getter(v28);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    __int128 v51 = qword_100A2B020;
    uint64_t v74 = sub_100004AEC((uint64_t *)&unk_10099D740);
    __int128 v52 = swift_allocObject(v74, 72LL, 7LL);
    os_log_type_t v73 = xmmword_1007E67D0;
    *(_OWORD *)(v52 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    BOOL v33 = v2;
    unint64_t v53 = related decl 'e' for CKErrorCode.description.getter();
    unint64_t v55 = v54;

    *(void *)(v52 + 56) = &type metadata for String;
    uint64_t v56 = sub_1000226F4();
    *(void *)(v52 + 64) = v56;
    *(void *)(v52 + 32) = v53;
    *(void *)(v52 + 40) = v55;
    os_log(_:dso:log:_:_:)( v50,  &_mh_execute_header,  v51,  "Uncaught public ckError, will try private handling: %@",  54LL,  2LL,  v52);
    swift_bridgeObjectRelease();
    uint64_t v77 = v33;
    unint64_t v57 = _BridgedStoredNSError.code.getter(&v75, v8, v11);
    switch((void)v75)
    {
      case 'n':
        char v59 = static os_log_type_t.error.getter(v57);
        uint64_t v60 = qword_100A2B020;
        unint64_t v61 = os_log(_:dso:log:_:_:)( v59,  &_mh_execute_header,  qword_100A2B020,  "Attempting to use Manatee from a non-HSA2 account!",  50LL,  2LL,  _swiftEmptyArrayStorage);
        if (*(_BYTE *)(v3 + 96) == 1)
        {
          *(_BYTE *)(v3 + 96) = 0;
          Swift::String v62 = static os_log_type_t.error.getter(v61);
          os_log(_:dso:log:_:_:)( v62,  &_mh_execute_header,  v60,  "Manatee was available, but is not available now.",  48LL,  2LL,  _swiftEmptyArrayStorage);
        }

        break;
      case 'p':
        uint64_t v63 = *(void *)(v3 + 80);
        *(void *)(v3 + 80) = 0LL;
        sub_100689248(v63);
        unint64_t v64 = *(void *)(v3 + 80);
        sub_100689258(v64);
        sub_1006889CC(v64);
        Swift::String v65 = sub_100689248(v64);
        Swift::String v66 = static os_log_type_t.default.getter(v65);
        os_log(_:dso:log:_:_:)( v66,  &_mh_execute_header,  qword_100A2B020,  "Setting zoneState to .unknown",  29LL,  2LL,  _swiftEmptyArrayStorage);
        sub_100681958();
        sub_10067CA70(4);
        sub_1006775F0(0);
        break;
      case 'o':
        Swift::String v58 = static os_log_type_t.error.getter(v57);
        os_log(_:dso:log:_:_:)( v58,  &_mh_execute_header,  qword_100A2B020,  "PCS Keys for com.apple.icloud.searchparty are not yet synced.",  61LL,  2LL,  _swiftEmptyArrayStorage);
        break;
      default:
        Swift::String v67 = static os_log_type_t.error.getter(v57);
        unint64_t v68 = qword_100A2B020;
        Swift::String v69 = swift_allocObject(v74, 72LL, 7LL);
        *(_OWORD *)(v69 + swift_weakDestroy(v0 + 16) = v73;
        BOOL v33 = v33;
        unint64_t v70 = related decl 'e' for CKErrorCode.description.getter();
        uint64_t v72 = v71;

        *(void *)(v69 + 56) = &type metadata for String;
        *(void *)(v69 + 64) = v56;
        *(void *)(v69 + 32) = v70;
        *(void *)(v69 + 40) = v72;
        os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v68, "Uncaught private error: %{public}@", 34LL, 2LL, v69);
        swift_bridgeObjectRelease();
        break;
    }
  }
}

  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v10 = v2[2];
    uint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    uint64_t v11 = &v2[2 * v10];
    v11[4] = 0x6B6F6F4C63666E2ELL;
    v11[5] = 0xEA00000000007075LL;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0) {
        goto LABEL_31;
      }
      goto LABEL_26;
    }
  }

  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v13 = v2[2];
  uint64_t v12 = v2[3];
  if (v13 >= v12 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v12 > 1), v13 + 1, 1, v2);
  }
  v2[2] = v13 + 1;
  uint64_t v14 = &v2[2 * v13];
  v14[4] = 0x6B6F6F4C656C622ELL;
  v14[5] = 0xEA00000000007075LL;
  if ((a1 & 0x10) != 0)
  {
LABEL_26:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    uint64_t v16 = v2[2];
    BOOL v15 = v2[3];
    if (v16 >= v15 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v15 > 1), v16 + 1, 1, v2);
    }
    v2[2] = v16 + 1;
    uint64_t v17 = &v2[2 * v16];
    v17[4] = 0x707261752ELL;
    v17[5] = 0xE500000000000000LL;
  }

  uint64_t v34 = a11;
  if (__OFADD__(*a11, 1LL))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    char v31 = (char *)sub_1004C6D6C(0, *((void *)v31 + 2) + 1LL, 1, (unint64_t)v31);
    *a3 = (uint64_t)v31;
    goto LABEL_19;
  }

  a3 = a12;
  uint64_t v47 = a13;
  ++*a11;
  sub_10001581C((uint64_t)v36, (uint64_t)v31, (uint64_t *)&unk_10099FA70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v31, 1LL, v22) == 1)
  {
    sub_100015794((uint64_t)v31, (uint64_t *)&unk_10099FA70);
    uint64_t v41 = v78;
    *a13 = *a11;
    if ((a10 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_22:
    sub_100015794((uint64_t)v36, (uint64_t *)&unk_10099FA70);
    swift_release();
    return *v79;
  }

  LOBYTE(v22) = a10;
  unint64_t v70 = a13;
  int64_t v49 = v77;
  sub_10002218C((uint64_t)v31, v77, type metadata accessor for BeaconPayloadFile.MetaData);
  unint64_t v23 = (uint64_t)v73;
  uint64_t v50 = (uint64_t)&v73[*(int *)(v76 + 48)];
  v43((uint64_t)v73, v72, v74);
  sub_10001DC4C(v49, v50, type metadata accessor for BeaconPayloadFile.MetaData);
  char v31 = (char *)*a12;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a12);
  *a12 = (uint64_t)v31;
  uint64_t v41 = v78;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_34;
  }
LABEL_19:
  unint64_t v53 = *((void *)v31 + 2);
  __int128 v52 = *((void *)v31 + 3);
  if (v53 >= v52 >> 1)
  {
    char v31 = (char *)sub_1004C6D6C(v52 > 1, v53 + 1, 1, (unint64_t)v31);
    *a3 = (uint64_t)v31;
  }

  *((void *)v31 + 2) = v53 + 1;
  sub_10074FEE4( v23,  (uint64_t)&v31[((*(unsigned __int8 *)(v75 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))
                + *(void *)(v75 + 72) * v53]);
  unint64_t v54 = *(void *)(*a3 + 16);
  sub_100018C68(v77, type metadata accessor for BeaconPayloadFile.MetaData);
  uint64_t v47 = v70;
  *unint64_t v70 = v54;
  if ((v22 & 1) != 0) {
    goto LABEL_22;
  }
LABEL_15:
  if (!v41)
  {
    sub_100015794((uint64_t)v36, (uint64_t *)&unk_10099FA70);
    swift_release();
    if (!v80) {
      void *v79 = *v34 < a9;
    }
    return *v79;
  }

  if (*(void *)(*a3 + 16) < a9)
  {
    uint64_t v48 = v69;
    swift_retain();
    sub_100015794((uint64_t)v36, (uint64_t *)&unk_10099FA70);
    swift_release();
    sub_10002214C(v41, v48);
    return *v79;
  }

  uint64_t v56 = v47;
  unint64_t v57 = v69;
  sub_1000372DC(v41, v69);
  sub_100751178(a3, (uint64_t (*)(uint64_t, uint64_t))v41, v57, (uint64_t (*)(uint64_t))sub_10059973C);
  Swift::String v58 = *a3;
  char v59 = *(void *)(*a3 + 16);
  if (v59 <= a9)
  {
    sub_100015794((uint64_t)v36, (uint64_t *)&unk_10099FA70);
    swift_release();
    sub_10002214C(v41, v57);
    return *v79;
  }

  if (!v59)
  {
    __break(1u);
LABEL_36:
    unint64_t result = sub_10059973C(v58);
    Swift::String v58 = result;
    uint64_t v60 = *(void *)(result + 16);
    if (v60) {
      goto LABEL_30;
    }
    goto LABEL_37;
  }

  unint64_t result = swift_isUniquelyReferenced_nonNull_native(*a3);
  if ((result & 1) == 0) {
    goto LABEL_36;
  }
  uint64_t v60 = *(void *)(v58 + 16);
  if (v60)
  {
LABEL_30:
    unint64_t v61 = v60 - 1;
    Swift::String v62 = v68;
    sub_10074FEE4( v58 + ((*(unsigned __int8 *)(v75 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))
    + *(void *)(v75 + 72) * (v60 - 1),
      v68);
    *(void *)(v58 + swift_weakDestroy(v0 + 16) = v61;
    *a3 = v58;
    uint64_t v63 = (uint64_t)v67;
    sub_10074FEE4(v62, (uint64_t)v67);
    swift_release();
    sub_10002214C(v41, v57);
    sub_100018C68(v63 + *(int *)(v76 + 48), type metadata accessor for BeaconPayloadFile.MetaData);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v63, v74);
    unint64_t v64 = *(void *)(*a3 + 16);
    sub_100015794((uint64_t)v36, (uint64_t *)&unk_10099FA70);
    *uint64_t v56 = v64;
    return *v79;
  }

  uint64_t v21 = 0LL;
  uint64_t v20 = (char *)_swiftEmptyArrayStorage;
LABEL_15:
  uint64_t v22 = v21;
  unint64_t v23 = v21 + 1;
  uint64_t v134 = v21;
  if (v21 + 1 >= v13)
  {
    uint64_t v26 = v21 + 1;
    goto LABEL_57;
  }

  uint64_t v136 = v20;
  a3 = *v144;
  uint64_t v24 = *(void *)(v137 + 72);
  uint64_t v25 = v141;
  sub_10001581C(*v144 + v24 * v23, v141, &qword_1009AC1E0);
  uint64_t v3 = v142;
  sub_10001581C(a3 + v24 * v22, v142, &qword_1009AC1E0);
  LODWORD(v149) = v145(v25 + *(int *)(v147 + 48), v3 + *(int *)(v147 + 48));
  sub_100015794(v3, &qword_1009AC1E0);
  sub_100015794(v25, &qword_1009AC1E0);
  uint64_t v26 = v22 + 2;
  uint64_t v140 = a3;
  if (v22 + 2 >= v13) {
    goto LABEL_21;
  }
  uint64_t v143 = v13;
  uint64_t v27 = v24 * v23;
  unint64_t v28 = a3;
  uint64_t v29 = v24 * v26;
  do
  {
    uint64_t v3 = v26;
    uint64_t v30 = v141;
    a3 = (unint64_t)&qword_1009AC1E0;
    sub_10001581C(v28 + v29, v141, &qword_1009AC1E0);
    char v31 = v142;
    sub_10001581C(v28 + v27, v142, &qword_1009AC1E0);
    uint64_t v32 = v145(v30 + *(int *)(v147 + 48), v31 + *(int *)(v147 + 48));
    sub_100015794(v31, &qword_1009AC1E0);
    sub_100015794(v30, &qword_1009AC1E0);
    if (((v149 ^ v32) & 1) != 0)
    {
      uint64_t v26 = v3;
      uint64_t v22 = v134;
      uint64_t v13 = v143;
      if ((v149 & 1) == 0) {
        goto LABEL_37;
      }
LABEL_25:
      if (v26 < v22) {
        goto LABEL_145;
      }
      if (v22 >= v26) {
        goto LABEL_37;
      }
      uint64_t v143 = v13;
      BOOL v33 = 0LL;
      uint64_t v3 = v24 * (v26 - 1);
      uint64_t v34 = v26 * v24;
      uint64_t v35 = v22 * v24;
      unint64_t v36 = v146;
      char v37 = (uint64_t *)v144;
      do
      {
        if (v22 != v26 + v33 - 1)
        {
          BOOL v40 = v140;
          if (!v140) {
            goto LABEL_150;
          }
          a3 = v140 + v35;
          uint64_t v149 = v140 + v3;
          sub_10074FEE4(v140 + v35, v133);
          if (v35 < v3 || a3 >= v40 + v34)
          {
            int v38 = v40 + v35;
            uint64_t v39 = v149;
            swift_arrayInitWithTakeFrontToBack(v38, v149, 1LL, v147);
          }

          else
          {
            uint64_t v39 = v149;
            if (v35 != v3) {
              swift_arrayInitWithTakeBackToFront(a3, v149);
            }
          }

          sub_10074FEE4(v133, v39);
          unint64_t v36 = v146;
          char v37 = (uint64_t *)v144;
        }

        ++v22;
        --v33;
        v3 -= v24;
        v34 -= v24;
        v35 += v24;
      }

      while (v22 < v26 + v33);
      uint64_t v20 = v136;
      uint64_t v22 = v134;
      uint64_t v13 = v143;
      if (v26 < v143) {
        goto LABEL_40;
      }
LABEL_57:
      if (v26 < v22) {
        goto LABEL_138;
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
      uint64_t v143 = v26;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v20 = sub_1003CB1DC(0LL, *((void *)v20 + 2) + 1LL, 1, v20);
      }
      Swift::String v58 = *((void *)v20 + 2);
      unint64_t v57 = *((void *)v20 + 3);
      a3 = v58 + 1;
      if (v58 >= v57 >> 1) {
        uint64_t v20 = sub_1003CB1DC((char *)(v57 > 1), v58 + 1, 1, v20);
      }
      *((void *)v20 + 2) = a3;
      char v59 = v20 + 32;
      uint64_t v60 = &v20[16 * v58 + 32];
      unint64_t v61 = v143;
      *(void *)uint64_t v60 = v22;
      *((void *)v60 + 1) = v61;
      if (v58)
      {
        uint64_t v149 = (uint64_t)(v20 + 32);
        uint64_t v136 = v20;
        while (1)
        {
          Swift::String v62 = a3 - 1;
          if (a3 >= 4)
          {
            Swift::String v67 = &v59[16 * a3];
            unint64_t v68 = *((void *)v67 - 8);
            Swift::String v69 = *((void *)v67 - 7);
            os_log_type_t v73 = __OFSUB__(v69, v68);
            unint64_t v70 = v69 - v68;
            if (v73) {
              goto LABEL_127;
            }
            uint64_t v72 = *((void *)v67 - 6);
            unint64_t v71 = *((void *)v67 - 5);
            os_log_type_t v73 = __OFSUB__(v71, v72);
            Swift::String v65 = v71 - v72;
            Swift::String v66 = v73;
            if (v73) {
              goto LABEL_128;
            }
            uint64_t v74 = a3 - 2;
            unint64_t v75 = &v59[16 * a3 - 32];
            uint64_t v77 = *(void *)v75;
            uint64_t v76 = *((void *)v75 + 1);
            os_log_type_t v73 = __OFSUB__(v76, v77);
            uint64_t v78 = v76 - v77;
            if (v73) {
              goto LABEL_130;
            }
            os_log_type_t v73 = __OFADD__(v65, v78);
            char v79 = v65 + v78;
            if (v73) {
              goto LABEL_133;
            }
            if (v79 >= v70)
            {
              uint64_t v97 = &v59[16 * v62];
              uint64_t v99 = *(void *)v97;
              char v98 = *((void *)v97 + 1);
              os_log_type_t v73 = __OFSUB__(v98, v99);
              uint64_t v100 = v98 - v99;
              if (v73) {
                goto LABEL_137;
              }
              uint64_t v90 = v65 < v100;
              goto LABEL_95;
            }
          }

          else
          {
            if (a3 != 3)
            {
              uint64_t v91 = *((void *)v20 + 4);
              uint64_t v92 = *((void *)v20 + 5);
              os_log_type_t v73 = __OFSUB__(v92, v91);
              uint64_t v84 = v92 - v91;
              uint64_t v85 = v73;
              goto LABEL_89;
            }

            unint64_t v64 = *((void *)v20 + 4);
            uint64_t v63 = *((void *)v20 + 5);
            os_log_type_t v73 = __OFSUB__(v63, v64);
            Swift::String v65 = v63 - v64;
            Swift::String v66 = v73;
          }

          if ((v66 & 1) != 0) {
            goto LABEL_129;
          }
          uint64_t v74 = a3 - 2;
          uint64_t v80 = &v59[16 * a3 - 32];
          uint64_t v82 = *(void *)v80;
          uint64_t v81 = *((void *)v80 + 1);
          uint64_t v83 = __OFSUB__(v81, v82);
          uint64_t v84 = v81 - v82;
          uint64_t v85 = v83;
          if (v83) {
            goto LABEL_132;
          }
          BOOL v86 = &v59[16 * v62];
          os_log_type_t v88 = *(void *)v86;
          unint64_t v87 = *((void *)v86 + 1);
          os_log_type_t v73 = __OFSUB__(v87, v88);
          uint64_t v89 = v87 - v88;
          if (v73) {
            goto LABEL_135;
          }
          if (__OFADD__(v84, v89)) {
            goto LABEL_136;
          }
          if (v84 + v89 >= v65)
          {
            uint64_t v90 = v65 < v89;
LABEL_95:
            if (v90) {
              Swift::String v62 = v74;
            }
            goto LABEL_97;
          }

  v77 &= 1u;
  uint64_t v39 = v77;
  BOOL v40 = v35[13];
  uint64_t v41 = (uint64_t *)(v23 + v35[12]);
  uint64_t v42 = *v41;
  uint64_t v43 = v41[1];
  uint64_t v44 = *(void *)(v23 + v40);
  int64_t v45 = *(void *)(v32 + v40 + 8);
  uint64_t v46 = (uint64_t *)(v32 + v35[9]);
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  *(void *)&uint64_t v89 = v42;
  *((void *)&v89 + 1) = v43;
  uint64_t v90 = v44;
  uint64_t v91 = v45;
  uint64_t v92 = v48;
  unint64_t v93 = v47 | 0x2000000000000000LL;
  int64_t v49 = v31;
  Swift::String v69 = v31;
  uint64_t v50 = v70;
  sub_10001DC4C(v49, v70, type metadata accessor for BeaconKeyManager.KeyCriteria);
  sub_10001736C(v42, v43);
  sub_10001736C(v44, v45);
  sub_10001736C(v48, v47);
  __int128 v51 = v86;
  __int128 v52 = sub_1007A4DE4(v74);
  unint64_t v53 = v80;
  sub_1007A5FA0(&v89, 1, v50, 1, v38 & 1, v39, v52, v80);
  sub_10001DC4C(v53 + *(int *)(v78 + 24), v50, type metadata accessor for BeaconKeyManager.KeyCriteria);
  sub_1007A50A4(v50);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v50, v75);
  Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  uint64_t v78 = type metadata accessor for Transaction(0LL);
  unint64_t v55 = v85;
  sub_10001DC4C(v53, v85, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  uint64_t v56 = v84;
  sub_10001DC4C(v32, v84, type metadata accessor for OwnedBeaconRecord);
  unint64_t v57 = *(unsigned __int8 *)(v82 + 80);
  Swift::String v58 = (v57 + 16) & ~v57;
  char v59 = (v83 + v58 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v60 = *(unsigned __int8 *)(v79 + 80);
  unint64_t v61 = (v60 + v59 + 8) & ~v60;
  Swift::String v62 = (v81 + v61 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v63 = swift_allocObject(&unk_10097AB70, v62 + 9, v57 | v60 | 7);
  sub_10002218C(v55, v63 + v58, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  *(void *)(v63 + v59) = v51;
  sub_10002218C(v56, v63 + v61, type metadata accessor for OwnedBeaconRecord);
  unint64_t v64 = v63 + v62;
  *(void *)unint64_t v64 = isa;
  *(_BYTE *)(v64 + 8) = v77;
  swift_retain();
  Swift::String v65 = isa;
  static Transaction.asyncTask(name:block:)("PrimaryInstruction", 18LL, 2LL, &unk_1009C09A0, v63);
  swift_release(v63);

  return sub_100018C68(v69, type metadata accessor for BeaconKeyManager.KeyCriteria);
}

void sub_1000B354C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v132 = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = type metadata accessor for MACAddress(0LL);
  uint64_t v6 = *(void *)(v130 - 8);
  uint64_t v7 = __chkstk_darwin(v130);
  uint64_t v9 = (char *)v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v128 = (char *)v122 - v10;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v127 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v129 = (uint64_t)v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)v122 - v18;
  swift_bridgeObjectRetain(a1);
  uint64_t v21 = sub_1000B27C4(v20);
  uint64_t v126 = v9;
  if (v21)
  {
    uint64_t v22 = v21;
    unint64_t v131 = v11;
    uint64_t v23 = v6;
    if (qword_10099B0D0 != -1) {
      swift_once(&qword_10099B0D0, sub_1000B0608);
    }
    uint64_t v125 = v5;
    uint64_t v24 = sub_10000A720(v13, (uint64_t)qword_100A2A140);
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v25(v19, v24, v13);
    if (*(void *)(v22 + 16) && (unint64_t v26 = sub_10030D124((uint64_t)v19), (v27 & 1) != 0))
    {
      unint64_t v28 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v26);
      uint64_t v30 = *v28;
      unint64_t v29 = v28[1];
      sub_10001736C(*v28, v29);
    }

    else
    {
      uint64_t v30 = 0LL;
      unint64_t v29 = 0xF000000000000000LL;
    }

    char v31 = *(void (**)(char *, uint64_t))(v14 + 8);
    v31(v19, v13);
    if ((sub_1000B2C08(v30, v29) & 0xFF00) == 0x200)
    {
      if (qword_10099B0D8 != -1) {
        swift_once(&qword_10099B0D8, sub_1000B061C);
      }
      uint64_t v34 = sub_10000A720(v13, (uint64_t)qword_100A2A158);
      v25(v17, v34, v13);
      if (*(void *)(v22 + 16))
      {
        unint64_t v35 = sub_10030D124((uint64_t)v17);
        uint64_t v6 = v23;
        if ((v36 & 1) != 0)
        {
          char v37 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v35);
          uint64_t v39 = *v37;
          unint64_t v38 = v37[1];
          sub_10001736C(*v37, v38);
        }

        else
        {
          uint64_t v39 = 0LL;
          unint64_t v38 = 0xF000000000000000LL;
        }
      }

      else
      {
        uint64_t v39 = 0LL;
        unint64_t v38 = 0xF000000000000000LL;
        uint64_t v6 = v23;
      }

      uint64_t v11 = v131;
      v31(v17, v13);
      if ((sub_1000B2C08(v39, v38) & 0xFF00) == 0x200)
      {
        swift_bridgeObjectRelease();
        if (qword_10099B8C8 != -1) {
          swift_once(&qword_10099B8C8, sub_10073B768);
        }
        uint64_t v63 = sub_10000A720(v11, (uint64_t)qword_100A2B390);
        uint64_t v64 = v127;
        uint64_t v65 = v129;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16))(v129, v63, v11);
        swift_bridgeObjectRetain(v22);
        Swift::String v67 = (os_log_s *)Logger.logObject.getter(v66);
        os_log_type_t v68 = static os_log_type_t.error.getter(v67);
        if (os_log_type_enabled(v67, v68))
        {
          Swift::String v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v70 = swift_slowAlloc(32LL, -1LL);
          uint64_t v71 = v70;
          uint64_t v134 = v70;
          *(_DWORD *)Swift::String v69 = 136446210;
          if (*(void *)(v22 + 16))
          {
            unint64_t v131 = v70;
            __n128 v72 = swift_bridgeObjectRetain_n(v22, 2LL);
            *(void *)&__int128 v136 = sub_1002FE4D0(v72);
            sub_1000B11C4(&v136);
            swift_bridgeObjectRelease();
            uint64_t v73 = v136;
            swift_bridgeObjectRetain(v22);
            uint64_t v74 = sub_1000B24CC(v73, v22);
            swift_release();
            swift_bridgeObjectRelease();
            *(void *)&__int128 v136 = 91LL;
            *((void *)&v136 + 1) = 0xE100000000000000LL;
            uint64_t v133 = v74;
            uint64_t v75 = sub_100004AEC(&qword_1009AED50);
            uint64_t v76 = sub_1000372EC( (unint64_t *)&qword_1009A0500,  &qword_1009AED50,  (uint64_t)&protocol conformance descriptor for [A]);
            uint64_t v77 = BidirectionalCollection<>.joined(separator:)(8251LL, 0xE200000000000000LL, v75, v76);
            char v79 = v78;
            swift_bridgeObjectRelease();
            v80._uint64_t countAndFlagsBits = v77;
            v80._unint64_t object = v79;
            String.append(_:)(v80);
            swift_bridgeObjectRelease();
            v81._uint64_t countAndFlagsBits = 93LL;
            v81._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v81);
            swift_bridgeObjectRelease();
            unint64_t v83 = *((void *)&v136 + 1);
            uint64_t v82 = v136;
            uint64_t v65 = v129;
            uint64_t v71 = v131;
          }

          else
          {
            unint64_t v83 = 0xE200000000000000LL;
            uint64_t v82 = 23899LL;
          }

          *(void *)&__int128 v136 = sub_1003F11D4(v82, v83, &v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, (char *)&v136 + 8, v69 + 4, v69 + 12);
          swift_bridgeObjectRelease_n(v22, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Unhandled serviceData: %{public}s", v69, 0xCu);
          swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v71, -1LL, -1LL);
          swift_slowDealloc(v69, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v22, 2LL);
        }

        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v11);
        goto LABEL_64;
      }

      unint64_t v51 = v62;
      uint64_t v129 = v61;
      swift_bridgeObjectRelease();
      uint64_t v44 = 0LL;
      unint64_t v45 = 0xC000000000000000LL;
    }

    else
    {
      unint64_t v51 = v33;
      uint64_t v129 = v32;
      swift_bridgeObjectRelease();
      uint64_t v44 = 0LL;
      unint64_t v45 = 0xC000000000000000LL;
      uint64_t v6 = v23;
      uint64_t v11 = v131;
    }

    goto LABEL_38;
  }

  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataManufacturerDataKey);
  if (!*(void *)(a1 + 16) || (v125 = v5, uint64_t v42 = sub_10030CF14(v40, v41), (v43 & 1) == 0))
  {
    __int128 v136 = 0u;
    __int128 v137 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }

  sub_10006A650(*(void *)(a1 + 56) + 32 * v42, (uint64_t)&v136);
  swift_bridgeObjectRelease();
  if (!*((void *)&v137 + 1))
  {
LABEL_23:
    sub_100015794((uint64_t)&v136, &qword_10099E200);
    goto LABEL_24;
  }

  if ((swift_dynamicCast(&v134, &v136, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
  {
    uint64_t v44 = v134;
    unint64_t v45 = v135;
    sub_10001736C(v134, v135);
    sub_1000B2F8C(v44, v45);
    uint64_t v47 = v46;
    if (!*(void *)(v46 + 16) || (unint64_t v48 = sub_10030D190(0x12u), (v49 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_10099B8C8 != -1) {
        swift_once(&qword_10099B8C8, sub_10073B768);
      }
      uint64_t v118 = sub_10000A720(v11, (uint64_t)qword_100A2B390);
      uint64_t v119 = (void *)Logger.logObject.getter(v118);
      os_log_type_t v120 = static os_log_type_t.error.getter(v119);
      if (!os_log_type_enabled((os_log_t)v119, v120))
      {
        sub_100016F9C(v44, v45);
        sub_100016F9C(v44, v45);

        goto LABEL_64;
      }

      unint64_t v121 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v121 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v119, v120, "No Type18 payload found!", v121, 2u);
      swift_slowDealloc(v121, -1LL, -1LL);
      sub_100016F9C(v44, v45);

      uint64_t v114 = v44;
      unint64_t v115 = v45;
      goto LABEL_57;
    }

    uint64_t v50 = (uint64_t *)(*(void *)(v47 + 56) + 16 * v48);
    unint64_t v51 = v50[1];
    uint64_t v129 = *v50;
    sub_10001736C(v129, v51);
    swift_bridgeObjectRelease();
    sub_100016F9C(v44, v45);
LABEL_38:
    uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
    if (*(void *)(a1 + 16) && (uint64_t v86 = sub_10030CF14(v84, v85), (v87 & 1) != 0))
    {
      sub_10006A650(*(void *)(a1 + 56) + 32 * v86, (uint64_t)&v136);
    }

    else
    {
      __int128 v136 = 0u;
      __int128 v137 = 0u;
    }

    swift_bridgeObjectRelease();
    if (*((void *)&v137 + 1))
    {
      if ((swift_dynamicCast(&v134, &v136, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
      {
        uint64_t v88 = v134;
        unint64_t v89 = v135;
        sub_10001736C(v134, v135);
        uint64_t v123 = v88;
        uint64_t v90 = v88;
        uint64_t v91 = (uint64_t)v125;
        MACAddress.init(data:type:)(v90, v89, 1LL);
        uint64_t v92 = v130;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v91, 1LL, v130) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v128, v91, v92);
          int v116 = (char *)&loc_1000B4098 + dword_1000B4B44[v51 >> 62];
          v122[3] = v89;
          __asm { BR              X9 }
        }

        swift_bridgeObjectRelease();
        sub_100015794(v91, (uint64_t *)&unk_1009AE480);
        if (qword_10099B8C8 != -1) {
          swift_once(&qword_10099B8C8, sub_10073B768);
        }
        sub_10000A720(v11, (uint64_t)qword_100A2B390);
        uint64_t v93 = v123;
        sub_10001736C(v123, v89);
        uint64_t v94 = sub_10001736C(v93, v89);
        uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
        os_log_type_t v96 = static os_log_type_t.error.getter(v95);
        if (os_log_type_enabled(v95, v96))
        {
          uint64_t v97 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v98 = swift_slowAlloc(32LL, -1LL);
          uint64_t v127 = v44;
          uint64_t v99 = v98;
          *(void *)&__int128 v136 = v98;
          unint64_t v131 = v51;
          *(_DWORD *)uint64_t v97 = 136446210;
          uint64_t v100 = Data.hexString.getter(v93, v89);
          uint64_t v134 = sub_1003F11D4(v100, v101, (uint64_t *)&v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v97 + 4, v97 + 12);
          swift_bridgeObjectRelease();
          sub_100016F9C(v93, v89);
          sub_100016F9C(v93, v89);
          _os_log_impl((void *)&_mh_execute_header, v95, v96, "Not a MAC address: %{public}s", v97, 0xCu);
          swift_arrayDestroy(v99, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v99, -1LL, -1LL);
          swift_slowDealloc(v97, -1LL, -1LL);

          sub_100016F9C(v93, v89);
          uint64_t v102 = v127;
          unint64_t v103 = v45;
LABEL_54:
          sub_100016F9C(v102, v103);
          uint64_t v114 = v129;
          unint64_t v115 = v131;
LABEL_57:
          sub_100016F9C(v114, v115);
          goto LABEL_64;
        }

        sub_100016F9C(v93, v89);
        sub_100016F9C(v93, v89);
        sub_100016F9C(v93, v89);
        goto LABEL_56;
      }
    }

    else
    {
      sub_100015794((uint64_t)&v136, &qword_10099E200);
    }

    if (qword_10099B8C8 != -1) {
      swift_once(&qword_10099B8C8, sub_10073B768);
    }
    sub_10000A720(v11, (uint64_t)qword_100A2B390);
    swift_bridgeObjectRetain(a1);
    uint64_t v105 = (os_log_s *)Logger.logObject.getter(v104);
    os_log_type_t v106 = static os_log_type_t.error.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      uint64_t v107 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v108 = swift_slowAlloc(32LL, -1LL);
      uint64_t v127 = v44;
      uint64_t v109 = v108;
      *(void *)&__int128 v136 = v108;
      unint64_t v131 = v51;
      *(_DWORD *)uint64_t v107 = 136446210;
      swift_bridgeObjectRetain(a1);
      uint64_t v111 = Dictionary.description.getter( v110,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      unint64_t v124 = v45;
      unint64_t v113 = v112;
      swift_bridgeObjectRelease();
      uint64_t v134 = sub_1003F11D4(v111, v113, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v107 + 4, v107 + 12);
      swift_bridgeObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v105,  v106,  "Missing critical data [CBAdvertisementDataDeviceAddress] in %{public}s",  v107,  0xCu);
      swift_arrayDestroy(v109, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1LL, -1LL);
      swift_slowDealloc(v107, -1LL, -1LL);

      uint64_t v102 = v127;
      unint64_t v103 = v124;
      goto LABEL_54;
    }

    swift_bridgeObjectRelease_n(a1, 2LL);

LABEL_56:
    sub_100016F9C(v44, v45);
    uint64_t v114 = v129;
    unint64_t v115 = v51;
    goto LABEL_57;
  }

uint64_t sub_1000B4B64(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B4B98(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a6 >> 60 != 15)
  {
    sub_1000869A4(result, a2);
    return sub_100016F9C(a5, a6);
  }

  return result;
}

_OWORD *sub_1000B4BD4(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t *sub_1000B4BE4(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000B4C10(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
  {
    Data.subscript.getter(0LL);
    __asm { BR              X10 }
  }

  return 2LL;
}

uint64_t sub_1000B4D10(uint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xFF00) != 0x200) {
    return sub_100016F9C(a2, a3);
  }
  return result;
}

uint64_t sub_1000B4D2C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000B4D50(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B4D78(uint64_t a1)
{
  return a1;
}

void *sub_1000B4DA0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
    uint64_t v7 = a2 + 1;
    unint64_t v8 = a2[2];
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v7;
    }

    else
    {
      uint64_t v10 = *v7;
      sub_10001736C(*v7, a2[2]);
      v4[1] = v10;
      void v4[2] = v8;
    }

    uint64_t v11 = (int *)type metadata accessor for DiscoveredObject(0LL);
    uint64_t v12 = v11[7];
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
    uint64_t v16 = v11[8];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    uint64_t v19 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
    uint64_t v20 = v11[9];
    uint64_t v21 = (void *)((char *)v4 + v20);
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    sub_10008699C(*v22, v24);
    *uint64_t v21 = v23;
    v21[1] = v24;
    *(void *)((char *)v4 + v11[10]) = *(uint64_t *)((char *)a2 + v11[10]);
    *((_BYTE *)v4 + v11[11]) = *((_BYTE *)a2 + v11[11]);
    *((_BYTE *)v4 + v11[12]) = *((_BYTE *)a2 + v11[12]);
    *(_WORD *)((char *)v4 + v11[13]) = *(_WORD *)((char *)a2 + v11[13]);
    uint64_t v25 = v11[14];
    unint64_t v26 = (void *)((char *)v4 + v25);
    char v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    sub_10001736C(*v27, v29);
    *unint64_t v26 = v28;
    v26[1] = v29;
    *(_DWORD *)((char *)v4 + v11[15]) = *(_DWORD *)((char *)a2 + v11[15]);
    uint64_t v30 = *(int *)(a3 + 20);
    char v31 = (char *)v4 + v30;
    uint64_t v32 = (char *)a2 + v30;
    uint64_t v33 = type metadata accessor for BeaconDetails(0LL);
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1LL, v33))
    {
      uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009B9390);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      uint64_t v36 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16LL))(v31, v32, v36);
      uint64_t v37 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20);
      __int128 v38 = *(_OWORD *)&v32[v37 + 24];
      *(_OWORD *)&v31[v37 + 24] = v38;
      (**(void (***)(void))(v38 - 8))();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
    }

    uint64_t v39 = *(int *)(a3 + 24);
    uint64_t v40 = (char *)v4 + v39;
    uint64_t v41 = (char *)a2 + v39;
    uint64_t v42 = (int *)type metadata accessor for AccessoryMetadata(0LL);
    uint64_t v43 = *((void *)v42 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v43 + 48))(v41, 1LL, v42))
    {
      uint64_t v44 = sub_100004AEC(&qword_1009B9250);
      memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
    }

    else
    {
      uint64_t v45 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16LL))(v40, v41, v45);
      uint64_t v46 = v42[5];
      uint64_t v47 = (uint64_t *)&v40[v46];
      unint64_t v48 = (uint64_t *)&v41[v46];
      uint64_t v49 = *v48;
      unint64_t v50 = v48[1];
      sub_10001736C(*v48, v50);
      *uint64_t v47 = v49;
      v47[1] = v50;
      uint64_t v51 = v42[6];
      uint64_t v52 = &v40[v51];
      unint64_t v53 = &v41[v51];
      uint64_t v54 = *((void *)v53 + 1);
      *(void *)uint64_t v52 = *(void *)v53;
      *((void *)v52 + 1) = v54;
      uint64_t v55 = v42[7];
      uint64_t v56 = &v40[v55];
      uint64_t v57 = &v41[v55];
      uint64_t v58 = *((void *)v57 + 1);
      *(void *)uint64_t v56 = *(void *)v57;
      *((void *)v56 + 1) = v58;
      *(_DWORD *)&v40[v42[8]] = *(_DWORD *)&v41[v42[8]];
      uint64_t v59 = v42[9];
      unint64_t v60 = &v40[v59];
      uint64_t v61 = &v41[v59];
      *(_DWORD *)unint64_t v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      uint64_t v62 = v42[10];
      uint64_t v63 = &v40[v62];
      uint64_t v64 = &v41[v62];
      *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
      v63[16] = v64[16];
      uint64_t v65 = v42[11];
      uint64_t v66 = &v40[v65];
      Swift::String v67 = &v41[v65];
      v66[8] = v67[8];
      *(void *)uint64_t v66 = *(void *)v67;
      uint64_t v68 = v42[12];
      Swift::String v69 = &v40[v68];
      uint64_t v70 = &v41[v68];
      *(_DWORD *)Swift::String v69 = *(_DWORD *)v70;
      v69[4] = v70[4];
      v40[v42[13]] = v41[v42[13]];
      v40[v42[14]] = v41[v42[14]];
      uint64_t v71 = v42[15];
      __n128 v72 = &v40[v71];
      uint64_t v73 = &v41[v71];
      uint64_t v74 = *((void *)v73 + 1);
      *(void *)__n128 v72 = *(void *)v73;
      *((void *)v72 + 1) = v74;
      uint64_t v75 = *(void (**)(char *, void, uint64_t, int *, __n128))(v43 + 56);
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v58);
      __n128 v76 = swift_bridgeObjectRetain(v74);
      v75(v40, 0LL, 1LL, v42, v76);
    }
  }

  return v4;
}

uint64_t type metadata accessor for BeaconDetails(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A0630, (uint64_t)&nominal type descriptor for BeaconDetails);
}

uint64_t sub_1000B5198(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >> 60 != 15) {
    sub_100016F9C(*(void *)(a1 + 8), v4);
  }
  int v5 = (int *)type metadata accessor for DiscoveredObject(0LL);
  uint64_t v6 = a1 + v5[7];
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  uint64_t v8 = a1 + v5[8];
  uint64_t v9 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  sub_1000869A4(*(void *)(a1 + v5[9]), *(void *)(a1 + v5[9] + 8));
  sub_100016F9C(*(void *)(a1 + v5[14]), *(void *)(a1 + v5[14] + 8));
  uint64_t v10 = a1 + *(int *)(a2 + 20);
  uint64_t v11 = type metadata accessor for BeaconDetails(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v10, v12);
    uint64_t v13 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v10 + *(int *)(v13 + 20)));
  }

  uint64_t v14 = a1 + *(int *)(a2 + 24);
  uint64_t v15 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15);
  if (!(_DWORD)result)
  {
    uint64_t v17 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(v14, v17);
    sub_100016F9C(*(void *)(v14 + *(int *)(v15 + 20)), *(void *)(v14 + *(int *)(v15 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_1000B5340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v6 = (uint64_t *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    sub_10001736C(*v6, *(void *)(a2 + 16));
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v7;
  }

  uint64_t v9 = (int *)type metadata accessor for DiscoveredObject(0LL);
  uint64_t v10 = v9[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
  uint64_t v14 = v9[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
  uint64_t v18 = v9[9];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  sub_10008699C(*v20, v22);
  *uint64_t v19 = v21;
  v19[1] = v22;
  *(void *)(a1 + v9[10]) = *(void *)(a2 + v9[10]);
  *(_BYTE *)(a1 + v9[11]) = *(_BYTE *)(a2 + v9[11]);
  *(_BYTE *)(a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
  *(_WORD *)(a1 + v9[13]) = *(_WORD *)(a2 + v9[13]);
  uint64_t v23 = v9[14];
  uint64_t v24 = (uint64_t *)(a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v26 = *v25;
  unint64_t v27 = v25[1];
  sub_10001736C(*v25, v27);
  *uint64_t v24 = v26;
  v24[1] = v27;
  *(_DWORD *)(a1 + v9[15]) = *(_DWORD *)(a2 + v9[15]);
  uint64_t v28 = *(int *)(a3 + 20);
  unint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  uint64_t v31 = type metadata accessor for BeaconDetails(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31))
  {
    uint64_t v33 = sub_100004AEC((uint64_t *)&unk_1009B9390);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    uint64_t v34 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v29, v30, v34);
    uint64_t v35 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20);
    __int128 v36 = *(_OWORD *)&v30[v35 + 24];
    *(_OWORD *)&v29[v35 + 24] = v36;
    (**(void (***)(void))(v36 - 8))();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0LL, 1LL, v31);
  }

  uint64_t v37 = *(int *)(a3 + 24);
  __int128 v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v41 = *((void *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1LL, v40))
  {
    uint64_t v42 = sub_100004AEC(&qword_1009B9250);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    uint64_t v43 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16LL))(v38, v39, v43);
    uint64_t v44 = v40[5];
    uint64_t v45 = (uint64_t *)&v38[v44];
    uint64_t v46 = (uint64_t *)&v39[v44];
    uint64_t v47 = *v46;
    unint64_t v48 = v46[1];
    sub_10001736C(*v46, v48);
    uint64_t *v45 = v47;
    v45[1] = v48;
    uint64_t v49 = v40[6];
    unint64_t v50 = &v38[v49];
    uint64_t v51 = &v39[v49];
    uint64_t v52 = *((void *)v51 + 1);
    *(void *)unint64_t v50 = *(void *)v51;
    *((void *)v50 + 1) = v52;
    uint64_t v53 = v40[7];
    uint64_t v54 = &v38[v53];
    uint64_t v55 = &v39[v53];
    uint64_t v56 = *((void *)v55 + 1);
    *(void *)uint64_t v54 = *(void *)v55;
    *((void *)v54 + 1) = v56;
    *(_DWORD *)&v38[v40[8]] = *(_DWORD *)&v39[v40[8]];
    uint64_t v57 = v40[9];
    uint64_t v58 = &v38[v57];
    uint64_t v59 = &v39[v57];
    *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
    v58[4] = v59[4];
    uint64_t v60 = v40[10];
    uint64_t v61 = &v38[v60];
    uint64_t v62 = &v39[v60];
    *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
    v61[16] = v62[16];
    uint64_t v63 = v40[11];
    uint64_t v64 = &v38[v63];
    uint64_t v65 = &v39[v63];
    v64[8] = v65[8];
    *(void *)uint64_t v64 = *(void *)v65;
    uint64_t v66 = v40[12];
    Swift::String v67 = &v38[v66];
    uint64_t v68 = &v39[v66];
    *(_DWORD *)Swift::String v67 = *(_DWORD *)v68;
    v67[4] = v68[4];
    v38[v40[13]] = v39[v40[13]];
    v38[v40[14]] = v39[v40[14]];
    uint64_t v69 = v40[15];
    uint64_t v70 = &v38[v69];
    uint64_t v71 = &v39[v69];
    uint64_t v72 = *((void *)v71 + 1);
    *(void *)uint64_t v70 = *(void *)v71;
    *((void *)v70 + 1) = v72;
    uint64_t v73 = *(void (**)(char *, void, uint64_t, int *, __n128))(v41 + 56);
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v56);
    __n128 v74 = swift_bridgeObjectRetain(v72);
    v73(v38, 0LL, 1LL, v40, v74);
  }

  return a1;
}

uint64_t sub_1000B56F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v6 = (_OWORD *)(a1 + 8);
  unint64_t v7 = (uint64_t *)(a2 + 8);
  unint64_t v8 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 == 15LL)
  {
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *v7;
      sub_10001736C(*v7, *(void *)(a2 + 16));
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v8;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v8 >> 60 == 15)
  {
    sub_100041D4C(a1 + 8);
LABEL_6:
    *uint64_t v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }

  uint64_t v10 = *v7;
  sub_10001736C(*v7, *(void *)(a2 + 16));
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v8;
  sub_100016F9C(v11, v12);
LABEL_8:
  uint64_t v13 = (int *)type metadata accessor for DiscoveredObject(0LL);
  uint64_t v14 = v13[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  uint64_t v18 = v13[8];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 24LL))(v19, v20, v21);
  uint64_t v22 = v13[9];
  uint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  sub_10008699C(*v24, v26);
  uint64_t v27 = *v23;
  uint64_t v28 = v23[1];
  *uint64_t v23 = v25;
  v23[1] = v26;
  sub_1000869A4(v27, v28);
  *(void *)(a1 + v13[10]) = *(void *)(a2 + v13[10]);
  *(_BYTE *)(a1 + v13[11]) = *(_BYTE *)(a2 + v13[11]);
  *(_BYTE *)(a1 + v13[12]) = *(_BYTE *)(a2 + v13[12]);
  *(_WORD *)(a1 + v13[13]) = *(_WORD *)(a2 + v13[13]);
  uint64_t v29 = v13[14];
  uint64_t v30 = (uint64_t *)(a1 + v29);
  uint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v32 = *v31;
  unint64_t v33 = v31[1];
  sub_10001736C(*v31, v33);
  uint64_t v34 = *v30;
  unint64_t v35 = v30[1];
  *uint64_t v30 = v32;
  v30[1] = v33;
  sub_100016F9C(v34, v35);
  *(_DWORD *)(a1 + v13[15]) = *(_DWORD *)(a2 + v13[15]);
  uint64_t v36 = *(int *)(a3 + 20);
  uint64_t v37 = (char *)(a1 + v36);
  __int128 v38 = (char *)(a2 + v36);
  uint64_t v39 = type metadata accessor for BeaconDetails(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  LODWORD(v30) = v41(v37, 1LL, v39);
  int v42 = v41(v38, 1LL, v39);
  if ((_DWORD)v30)
  {
    if (!v42)
    {
      uint64_t v43 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16LL))(v37, v38, v43);
      uint64_t v44 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20);
      uint64_t v45 = &v37[v44];
      uint64_t v46 = *(void *)&v38[v44 + 24];
      *((void *)v45 + 3) = v46;
      *((void *)v45 + 4) = *(void *)&v38[v44 + 32];
      (**(void (***)(void))(v46 - 8))();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0LL, 1LL, v39);
      goto LABEL_14;
    }

    goto LABEL_13;
  }

  if (v42)
  {
    sub_100018C68((uint64_t)v37, type metadata accessor for BeaconDetails);
LABEL_13:
    uint64_t v47 = sub_100004AEC((uint64_t *)&unk_1009B9390);
    memcpy(v37, v38, *(void *)(*(void *)(v47 - 8) + 64LL));
    goto LABEL_14;
  }

  uint64_t v93 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 24LL))(v37, v38, v93);
  uint64_t v94 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  sub_1000B5D38(&v37[*(int *)(v94 + 20)], &v38[*(int *)(v94 + 20)]);
LABEL_14:
  uint64_t v48 = *(int *)(a3 + 24);
  uint64_t v49 = (_BYTE *)(a1 + v48);
  unint64_t v50 = (_BYTE *)(a2 + v48);
  uint64_t v51 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v52 = *((void *)v51 - 1);
  uint64_t v53 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v52 + 48);
  int v54 = v53(v49, 1LL, v51);
  int v55 = v53(v50, 1LL, v51);
  if (!v54)
  {
    if (!v55)
    {
      uint64_t v95 = type metadata accessor for UUID(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v95 - 8) + 24LL))(v49, v50, v95);
      uint64_t v96 = v51[5];
      uint64_t v97 = (uint64_t *)&v49[v96];
      uint64_t v98 = (uint64_t *)&v50[v96];
      uint64_t v99 = *v98;
      unint64_t v100 = v98[1];
      sub_10001736C(*v98, v100);
      uint64_t v101 = *v97;
      unint64_t v102 = v97[1];
      *uint64_t v97 = v99;
      v97[1] = v100;
      sub_100016F9C(v101, v102);
      uint64_t v103 = v51[6];
      uint64_t v104 = &v49[v103];
      uint64_t v105 = &v50[v103];
      *uint64_t v104 = *v105;
      uint64_t v106 = v105[1];
      v104[1] = v106;
      swift_bridgeObjectRetain(v106);
      swift_bridgeObjectRelease();
      uint64_t v107 = v51[7];
      uint64_t v108 = &v49[v107];
      uint64_t v109 = &v50[v107];
      *uint64_t v108 = *v109;
      uint64_t v110 = v109[1];
      v108[1] = v110;
      swift_bridgeObjectRetain(v110);
      swift_bridgeObjectRelease();
      uint64_t v111 = v51[8];
      unint64_t v112 = &v49[v111];
      unint64_t v113 = &v50[v111];
      *(_WORD *)unint64_t v112 = *(_WORD *)v113;
      v112[2] = v113[2];
      v112[3] = v113[3];
      uint64_t v114 = v51[9];
      unint64_t v115 = &v49[v114];
      int v116 = &v50[v114];
      int v117 = *(_DWORD *)v116;
      v115[4] = v116[4];
      *(_DWORD *)unint64_t v115 = v117;
      uint64_t v118 = v51[10];
      uint64_t v119 = &v49[v118];
      os_log_type_t v120 = &v50[v118];
      __int128 v121 = *(_OWORD *)v120;
      v119[16] = v120[16];
      *(_OWORD *)uint64_t v119 = v121;
      uint64_t v122 = v51[11];
      uint64_t v123 = &v49[v122];
      unint64_t v124 = &v50[v122];
      uint64_t v125 = *(void *)v124;
      v123[8] = v124[8];
      *(void *)uint64_t v123 = v125;
      uint64_t v126 = v51[12];
      uint64_t v127 = &v49[v126];
      unint64_t v128 = &v50[v126];
      LODWORD(v125) = *(_DWORD *)v128;
      v127[4] = v128[4];
      *(_DWORD *)uint64_t v127 = v125;
      v49[v51[13]] = v50[v51[13]];
      v49[v51[14]] = v50[v51[14]];
      uint64_t v129 = v51[15];
      uint64_t v130 = &v49[v129];
      unint64_t v131 = &v50[v129];
      *uint64_t v130 = *v131;
      uint64_t v132 = v131[1];
      v130[1] = v132;
      swift_bridgeObjectRetain(v132);
      swift_bridgeObjectRelease();
      return a1;
    }

    sub_100018C68((uint64_t)v49, type metadata accessor for AccessoryMetadata);
    goto LABEL_19;
  }

  if (v55)
  {
LABEL_19:
    uint64_t v91 = sub_100004AEC(&qword_1009B9250);
    memcpy(v49, v50, *(void *)(*(void *)(v91 - 8) + 64LL));
    return a1;
  }

  uint64_t v56 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v56 - 8) + 16LL))(v49, v50, v56);
  uint64_t v57 = v51[5];
  uint64_t v58 = (uint64_t *)&v49[v57];
  uint64_t v59 = (uint64_t *)&v50[v57];
  uint64_t v60 = *v59;
  unint64_t v61 = v59[1];
  sub_10001736C(*v59, v61);
  *uint64_t v58 = v60;
  v58[1] = v61;
  uint64_t v62 = v51[6];
  uint64_t v63 = &v49[v62];
  uint64_t v64 = &v50[v62];
  *uint64_t v63 = *v64;
  uint64_t v65 = v64[1];
  v63[1] = v65;
  uint64_t v66 = v51[7];
  Swift::String v67 = &v49[v66];
  uint64_t v68 = &v50[v66];
  *Swift::String v67 = *v68;
  uint64_t v69 = v68[1];
  v67[1] = v69;
  *(_DWORD *)&v49[v51[8]] = *(_DWORD *)&v50[v51[8]];
  uint64_t v70 = v51[9];
  uint64_t v71 = &v49[v70];
  uint64_t v72 = &v50[v70];
  int v73 = *(_DWORD *)v72;
  v71[4] = v72[4];
  *(_DWORD *)uint64_t v71 = v73;
  uint64_t v74 = v51[10];
  uint64_t v75 = &v49[v74];
  __n128 v76 = &v50[v74];
  __int128 v77 = *(_OWORD *)v76;
  v75[16] = v76[16];
  *(_OWORD *)uint64_t v75 = v77;
  uint64_t v78 = v51[11];
  char v79 = &v49[v78];
  Swift::String v80 = &v50[v78];
  uint64_t v81 = *(void *)v80;
  v79[8] = v80[8];
  *(void *)char v79 = v81;
  uint64_t v82 = v51[12];
  unint64_t v83 = &v49[v82];
  uint64_t v84 = &v50[v82];
  LODWORD(v81) = *(_DWORD *)v84;
  v83[4] = v84[4];
  *(_DWORD *)unint64_t v83 = v81;
  v49[v51[13]] = v50[v51[13]];
  v49[v51[14]] = v50[v51[14]];
  uint64_t v85 = v51[15];
  uint64_t v86 = &v49[v85];
  char v87 = &v50[v85];
  *uint64_t v86 = *v87;
  uint64_t v88 = v87[1];
  v86[1] = v88;
  unint64_t v89 = *(void (**)(_BYTE *, void, uint64_t, int *, __n128))(v52 + 56);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v69);
  __n128 v90 = swift_bridgeObjectRetain(v88);
  v89(v49, 0LL, 1LL, v51, v90);
  return a1;
}

void *sub_1000B5D38(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        void *v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          void *v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          void *v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

uint64_t sub_1000B5EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = (int *)type metadata accessor for DiscoveredObject(0LL);
  uint64_t v7 = v6[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = v6[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  *(_OWORD *)(a1 + v6[9]) = *(_OWORD *)(a2 + v6[9]);
  *(void *)(a1 + v6[10]) = *(void *)(a2 + v6[10]);
  *(_BYTE *)(a1 + v6[11]) = *(_BYTE *)(a2 + v6[11]);
  *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
  *(_WORD *)(a1 + v6[13]) = *(_WORD *)(a2 + v6[13]);
  *(_OWORD *)(a1 + v6[14]) = *(_OWORD *)(a2 + v6[14]);
  *(_DWORD *)(a1 + v6[15]) = *(_DWORD *)(a2 + v6[15]);
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t v18 = type metadata accessor for BeaconDetails(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
  {
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009B9390);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    uint64_t v21 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32LL))(v16, v17, v21);
    uint64_t v22 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20);
    uint64_t v23 = &v16[v22];
    uint64_t v24 = &v17[v22];
    __int128 v25 = *((_OWORD *)v24 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v25;
    *((void *)v23 + 4) = *((void *)v24 + 4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  }

  uint64_t v26 = *(int *)(a3 + 24);
  uint64_t v27 = (char *)(a1 + v26);
  uint64_t v28 = (char *)(a2 + v26);
  uint64_t v29 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v30 = *((void *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1LL, v29))
  {
    uint64_t v31 = sub_100004AEC(&qword_1009B9250);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    uint64_t v32 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32LL))(v27, v28, v32);
    *(_OWORD *)&v27[v29[5]] = *(_OWORD *)&v28[v29[5]];
    *(_OWORD *)&v27[v29[6]] = *(_OWORD *)&v28[v29[6]];
    *(_OWORD *)&v27[v29[7]] = *(_OWORD *)&v28[v29[7]];
    *(_DWORD *)&v27[v29[8]] = *(_DWORD *)&v28[v29[8]];
    uint64_t v33 = v29[9];
    uint64_t v34 = &v27[v33];
    unint64_t v35 = &v28[v33];
    *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
    v34[4] = v35[4];
    uint64_t v36 = v29[10];
    uint64_t v37 = &v27[v36];
    __int128 v38 = &v28[v36];
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    v37[16] = v38[16];
    uint64_t v39 = v29[11];
    uint64_t v40 = &v27[v39];
    uint64_t v41 = &v28[v39];
    v40[8] = v41[8];
    *(void *)uint64_t v40 = *(void *)v41;
    uint64_t v42 = v29[12];
    uint64_t v43 = &v27[v42];
    uint64_t v44 = &v28[v42];
    *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
    v43[4] = v44[4];
    v27[v29[13]] = v28[v29[13]];
    v27[v29[14]] = v28[v29[14]];
    *(_OWORD *)&v27[v29[15]] = *(_OWORD *)&v28[v29[15]];
    (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v27, 0LL, 1LL, v29);
  }

  return a1;
}

uint64_t sub_1000B61B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v7 = (_OWORD *)(a2 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v9 = *(void *)(a2 + 16);
  if (v9 >> 60 == 15)
  {
    sub_100041D4C(a1 + 8);
LABEL_4:
    *uint64_t v6 = *v7;
    goto LABEL_6;
  }

  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)v7;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v9;
  sub_100016F9C(v10, v8);
LABEL_6:
  uint64_t v11 = (int *)type metadata accessor for DiscoveredObject(0LL);
  uint64_t v12 = v11[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40LL))(v13, v14, v15);
  uint64_t v16 = v11[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40LL))(v17, v18, v19);
  uint64_t v20 = v11[9];
  uint64_t v21 = *(void *)(a1 + v20);
  uint64_t v22 = *(void *)(a1 + v20 + 8);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  sub_1000869A4(v21, v22);
  *(void *)(a1 + v11[10]) = *(void *)(a2 + v11[10]);
  *(_BYTE *)(a1 + v11[11]) = *(_BYTE *)(a2 + v11[11]);
  *(_BYTE *)(a1 + v11[12]) = *(_BYTE *)(a2 + v11[12]);
  *(_WORD *)(a1 + v11[13]) = *(_WORD *)(a2 + v11[13]);
  uint64_t v23 = v11[14];
  uint64_t v24 = *(void *)(a1 + v23);
  unint64_t v25 = *(void *)(a1 + v23 + 8);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  sub_100016F9C(v24, v25);
  *(_DWORD *)(a1 + v11[15]) = *(_DWORD *)(a2 + v11[15]);
  uint64_t v26 = *(int *)(a3 + 20);
  uint64_t v27 = (char *)(a1 + v26);
  uint64_t v28 = (char *)(a2 + v26);
  uint64_t v29 = type metadata accessor for BeaconDetails(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1LL, v29);
  int v33 = v31(v28, 1LL, v29);
  if (v32)
  {
    if (!v33)
    {
      uint64_t v34 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v27, v28, v34);
      uint64_t v35 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20);
      uint64_t v36 = &v27[v35];
      uint64_t v37 = &v28[v35];
      __int128 v38 = *((_OWORD *)v37 + 1);
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v38;
      *((void *)v36 + 4) = *((void *)v37 + 4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
      goto LABEL_12;
    }

    goto LABEL_11;
  }

  if (v33)
  {
    sub_100018C68((uint64_t)v27, type metadata accessor for BeaconDetails);
LABEL_11:
    uint64_t v39 = sub_100004AEC((uint64_t *)&unk_1009B9390);
    memcpy(v27, v28, *(void *)(*(void *)(v39 - 8) + 64LL));
    goto LABEL_12;
  }

  uint64_t v63 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 40LL))(v27, v28, v63);
  uint64_t v64 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20);
  uint64_t v65 = &v27[v64];
  uint64_t v66 = &v28[v64];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v65);
  __int128 v67 = *((_OWORD *)v66 + 1);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *((_OWORD *)v65 + 1) = v67;
  *((void *)v65 + 4) = *((void *)v66 + 4);
LABEL_12:
  uint64_t v40 = *(int *)(a3 + 24);
  uint64_t v41 = (_BYTE *)(a1 + v40);
  uint64_t v42 = (_BYTE *)(a2 + v40);
  uint64_t v43 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v44 = *((void *)v43 - 1);
  uint64_t v45 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v44 + 48);
  int v46 = v45(v41, 1LL, v43);
  int v47 = v45(v42, 1LL, v43);
  if (!v46)
  {
    if (!v47)
    {
      uint64_t v68 = type metadata accessor for UUID(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v68 - 8) + 40LL))(v41, v42, v68);
      uint64_t v69 = v43[5];
      uint64_t v70 = *(void *)&v41[v69];
      unint64_t v71 = *(void *)&v41[v69 + 8];
      *(_OWORD *)&v41[v69] = *(_OWORD *)&v42[v69];
      sub_100016F9C(v70, v71);
      uint64_t v72 = v43[6];
      int v73 = &v41[v72];
      uint64_t v74 = (uint64_t *)&v42[v72];
      uint64_t v76 = *v74;
      uint64_t v75 = v74[1];
      *int v73 = v76;
      v73[1] = v75;
      swift_bridgeObjectRelease();
      uint64_t v77 = v43[7];
      uint64_t v78 = &v41[v77];
      char v79 = (uint64_t *)&v42[v77];
      uint64_t v81 = *v79;
      uint64_t v80 = v79[1];
      *uint64_t v78 = v81;
      v78[1] = v80;
      swift_bridgeObjectRelease();
      *(_DWORD *)&v41[v43[8]] = *(_DWORD *)&v42[v43[8]];
      uint64_t v82 = v43[9];
      unint64_t v83 = &v41[v82];
      uint64_t v84 = &v42[v82];
      *(_DWORD *)unint64_t v83 = *(_DWORD *)v84;
      v83[4] = v84[4];
      uint64_t v85 = v43[10];
      uint64_t v86 = &v41[v85];
      char v87 = &v42[v85];
      *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
      v86[16] = v87[16];
      uint64_t v88 = v43[11];
      unint64_t v89 = &v41[v88];
      __n128 v90 = &v42[v88];
      *(void *)unint64_t v89 = *(void *)v90;
      v89[8] = v90[8];
      uint64_t v91 = v43[12];
      uint64_t v92 = &v41[v91];
      uint64_t v93 = &v42[v91];
      *(_DWORD *)uint64_t v92 = *(_DWORD *)v93;
      v92[4] = v93[4];
      v41[v43[13]] = v42[v43[13]];
      v41[v43[14]] = v42[v43[14]];
      uint64_t v94 = v43[15];
      uint64_t v95 = &v41[v94];
      uint64_t v96 = (uint64_t *)&v42[v94];
      uint64_t v98 = *v96;
      uint64_t v97 = v96[1];
      *uint64_t v95 = v98;
      v95[1] = v97;
      swift_bridgeObjectRelease();
      return a1;
    }

    sub_100018C68((uint64_t)v41, type metadata accessor for AccessoryMetadata);
    goto LABEL_17;
  }

  if (v47)
  {
LABEL_17:
    uint64_t v61 = sub_100004AEC(&qword_1009B9250);
    memcpy(v41, v42, *(void *)(*(void *)(v61 - 8) + 64LL));
    return a1;
  }

  uint64_t v48 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v48 - 8) + 32LL))(v41, v42, v48);
  *(_OWORD *)&v41[v43[5]] = *(_OWORD *)&v42[v43[5]];
  *(_OWORD *)&v41[v43[6]] = *(_OWORD *)&v42[v43[6]];
  *(_OWORD *)&v41[v43[7]] = *(_OWORD *)&v42[v43[7]];
  *(_DWORD *)&v41[v43[8]] = *(_DWORD *)&v42[v43[8]];
  uint64_t v49 = v43[9];
  unint64_t v50 = &v41[v49];
  uint64_t v51 = &v42[v49];
  *(_DWORD *)unint64_t v50 = *(_DWORD *)v51;
  v50[4] = v51[4];
  uint64_t v52 = v43[10];
  uint64_t v53 = &v41[v52];
  int v54 = &v42[v52];
  *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
  v53[16] = v54[16];
  uint64_t v55 = v43[11];
  uint64_t v56 = &v41[v55];
  uint64_t v57 = &v42[v55];
  v56[8] = v57[8];
  *(void *)uint64_t v56 = *(void *)v57;
  uint64_t v58 = v43[12];
  uint64_t v59 = &v41[v58];
  uint64_t v60 = &v42[v58];
  *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
  v59[4] = v60[4];
  v41[v43[13]] = v42[v43[13]];
  v41[v43[14]] = v42[v43[14]];
  *(_OWORD *)&v41[v43[15]] = *(_OWORD *)&v42[v43[15]];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v44 + 56))(v41, 0LL, 1LL, v43);
  return a1;
}

uint64_t sub_1000B6700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B670C);
}

uint64_t sub_1000B670C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DiscoveredObject(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009B9390);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v11;
      uint64_t v13 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v8 = sub_100004AEC(&qword_1009B9250);
      uint64_t v12 = *(void *)(v8 - 8);
      uint64_t v13 = *(int *)(a3 + 24);
    }

    uint64_t v10 = a1 + v13;
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1000B67AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B67B8);
}

uint64_t sub_1000B67B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DiscoveredObject(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009B9390);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_100004AEC(&qword_1009B9250);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = *(int *)(a4 + 24);
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DetailedDiscoveredObject(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009A0588, (uint64_t)&nominal type descriptor for DetailedDiscoveredObject);
}

void sub_1000B6874(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiscoveredObject(319LL);
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    sub_10009361C(319LL, &qword_1009A0598, type metadata accessor for BeaconDetails);
    if (v5 <= 0x3F)
    {
      v8[1] = *(void *)(v4 - 8) + 64LL;
      sub_10009361C(319LL, (unint64_t *)&unk_1009A05A0, type metadata accessor for AccessoryMetadata);
      if (v7 <= 0x3F)
      {
        void v8[2] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 3LL, v8, a1 + 16);
      }
    }
  }

uint64_t *sub_1000B6934(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(v6 + 20);
    __int128 v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
  }

  return a1;
}

uint64_t sub_1000B69DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  unint64_t v3 = (void *)(a1 + *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20));
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3);
}

uint64_t sub_1000B6A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  uint64_t v5 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20);
  __int128 v6 = *(_OWORD *)(a2 + v5 + 24);
  *(_OWORD *)(a1 + v5 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  return a1;
}

uint64_t sub_1000B6A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  sub_1000B5D38((void *)(a1 + *(int *)(v5 + 20)), (void *)(a2 + *(int *)(v5 + 20)));
  return a1;
}

uint64_t sub_1000B6AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  uint64_t v5 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  __int128 v8 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(v6 + 32) = *(void *)(v7 + 32);
  return a1;
}

uint64_t sub_1000B6B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  uint64_t v5 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(a1 + v5));
  __int128 v8 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(v6 + 32) = *(void *)(v7 + 32);
  return a1;
}

uint64_t sub_1000B6BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B6BDC);
}

uint64_t sub_1000B6BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_1000B6C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B6C24);
}

uint64_t sub_1000B6C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_1000B6C64(uint64_t a1)
{
  uint64_t result = type metadata accessor for BeaconKeyManager.IndexInformation(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t destroy for BluetoothManufacturerData(uint64_t a1)
{
  return sub_100016F9C(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t initializeWithCopy for BluetoothManufacturerData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  sub_10008699C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v6 = *(void *)(a2 + 40);
  sub_10001736C(v7, v6);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for BluetoothManufacturerData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  sub_10008699C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_1000869A4(v6, v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 26);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  sub_10001736C(v9, v8);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v8;
  sub_100016F9C(v10, v11);
  return a1;
}

__n128 initializeWithTake for AccessoryInfoResponseContent.PublicKeys(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BluetoothManufacturerData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000869A4(v4, v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_100016F9C(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for BluetoothManufacturerData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 40) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 40) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BluetoothManufacturerData( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 48) = 0;
    }
    if (a2)
    {
      *(void *)(result + 32) = 0LL;
      *(void *)(result + 40) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BluetoothManufacturerData()
{
  return &type metadata for BluetoothManufacturerData;
}

uint64_t *initializeBufferWithCopyOfBuffer for AdvertisementUnion(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_10008699C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for AdvertisementUnion(uint64_t *a1)
{
  return sub_1000869A4(*a1, a1[1]);
}

uint64_t *assignWithCopy for AdvertisementUnion(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_10008699C(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1000869A4(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AdvertisementUnion(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000869A4(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AdvertisementUnion(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 3 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 8) & 0x1000000000000000LL) != 0)) | ((*(void *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AdvertisementUnion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 3) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 3) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }

  return result;
}

uint64_t sub_1000B706C(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 61) & 1LL;
}

uint64_t sub_1000B7078(uint64_t result)
{
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_1000B7088(uint64_t result, char a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementUnion()
{
  return &type metadata for AdvertisementUnion;
}

_WORD *initializeBufferWithCopyOfBuffer for AdvertismentType(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AdvertismentType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  unsigned int v2 = a2 + 0xFFFF;
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_1000B7104 + 4 * byte_1007EA520[v4]))();
}

uint64_t sub_1000B711C(unsigned __int16 *a1)
{
  uint64_t v1 = a1[1];
  if (a1[1]) {
    return (*a1 | ((_DWORD)v1 << 16)) - 0xFFFF;
  }
  return v1;
}

void sub_1000B7128(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2)) {
    JUMPOUT(0x1000B7130LL);
  }
  JUMPOUT(0x1000B7140LL);
}

uint64_t storeEnumTagSinglePayload for AdvertismentType(_WORD *a1, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (!a2) {
    return ((uint64_t (*)(void))((char *)sub_1000B71CC + 4 * byte_1007EA52A[v5]))();
  }
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_1000B71AC + 4 * byte_1007EA525[v5]))();
}

uint64_t sub_1000B71AC(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000B71CC(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_1000B71D4(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000B71DC(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000B71E4(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1000B71EC(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1000B71F8(unsigned __int8 *a1)
{
  if (a1[1]) {
    return (*a1 | (a1[1] << 8)) - 255;
  }
  else {
    return 0LL;
  }
}

_BYTE *sub_1000B7218(_BYTE *result, int a2)
{
  if (a2)
  {
    *__n128 result = a2 - 1;
    result[1] = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }

  else
  {
    result[1] = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for AdvertismentType()
{
  return &type metadata for AdvertismentType;
}

unint64_t sub_1000B7250()
{
  unint64_t result = qword_1009A0668;
  if (!qword_1009A0668)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA70C, &type metadata for AdvertisementUnion);
    atomic_store(result, (unint64_t *)&qword_1009A0668);
  }

  return result;
}

unint64_t sub_1000B7294()
{
  unint64_t result = qword_1009A0688;
  if (!qword_1009A0688)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAEFC, &type metadata for AdvertisementUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0688);
  }

  return result;
}

unint64_t sub_1000B72D8()
{
  unint64_t result = qword_1009A0690;
  if (!qword_1009A0690)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAEAC, &type metadata for AdvertisementUnion.NearOwnerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0690);
  }

  return result;
}

unint64_t sub_1000B731C()
{
  unint64_t result = qword_1009A0698;
  if (!qword_1009A0698)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearOwnerAdvertisement,  &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A0698);
  }

  return result;
}

unint64_t sub_1000B7360()
{
  unint64_t result = qword_1009A06A0;
  if (!qword_1009A06A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAE5C, &type metadata for AdvertisementUnion.WildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A06A0);
  }

  return result;
}

unint64_t sub_1000B73A4()
{
  unint64_t result = qword_1009A06A8;
  if (!qword_1009A06A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_1009A06A8);
  }

  return result;
}

uint64_t sub_1000B73E8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x383165707974LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x383165707974LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6F5079636167656CLL && a2 == 0xEA00000000006873LL)
  {
    unint64_t v7 = 0xEA00000000006873LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F5079636167656CLL, 0xEA00000000006873LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 1752395632 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1752395632LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1000B7530(void *a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A06E0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  uint64_t v41 = v3;
  __chkstk_darwin(v2);
  uint64_t v44 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = sub_100004AEC(&qword_1009A06E8);
  uint64_t v39 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v43 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A06F0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A06F8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  uint64_t v45 = a1;
  sub_100012ED8(a1, v14);
  unint64_t v16 = sub_1000B7F20();
  uint64_t v17 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AdvertismentType.CodingKeys,  &type metadata for AdvertismentType.CodingKeys,  v16,  v14,  v15);
  if (!v17)
  {
    uint64_t v38 = v7;
    uint64_t v46 = v6;
    uint64_t v19 = v43;
    uint64_t v18 = v44;
    uint64_t v20 = v11;
    uint64_t v21 = KeyedDecodingContainer.allKeys.getter(v10);
    if (*(void *)(v21 + 16) == 1LL)
    {
      if (*(_BYTE *)(v21 + 32))
      {
        if (*(_BYTE *)(v21 + 32) != 1)
        {
          char v49 = 2;
          unint64_t v33 = sub_1000B7F64();
          uint64_t v34 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for AdvertismentType.PoshCodingKeys,  &v49,  v10,  &type metadata for AdvertismentType.PoshCodingKeys,  v33);
          uint64_t v35 = v18;
          uint64_t v36 = v40;
          unsigned __int8 v23 = KeyedDecodingContainer.decode(_:forKey:)(v34, v40);
          (*(void (**)(char *, uint64_t))(v41 + 8))(v35, v36);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
          uint64_t v31 = v45;
          int v30 = 0;
          goto LABEL_9;
        }

        v48[0] = 1;
        unint64_t v22 = sub_1000B7FA8();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for AdvertismentType.LegacyPoshCodingKeys,  v48,  v10,  &type metadata for AdvertismentType.LegacyPoshCodingKeys,  v22);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v42);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        unsigned __int8 v23 = 1;
      }

      else
      {
        char v47 = 0;
        unint64_t v29 = sub_1000B7FEC();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for AdvertismentType.Type18CodingKeys,  &v47,  v10,  &type metadata for AdvertismentType.Type18CodingKeys,  v29);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v46);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        unsigned __int8 v23 = 0;
      }

      int v30 = 1;
      uint64_t v31 = v45;
LABEL_9:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
      return v23 | (v30 << 8);
    }

    uint64_t v24 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v24, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v26 = v25;
    sub_100004AEC(&qword_1009A5B60);
    *uint64_t v26 = &type metadata for AdvertismentType;
    uint64_t v27 = KeyedDecodingContainer.codingPath.getter(v10);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v27,  0xD00000000000002BLL,  0x80000001008535B0LL,  0LL);
    uint64_t v28 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104LL))( v26,  enum case for DecodingError.typeMismatch(_:),  v24);
    swift_willThrow(v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v10);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
}