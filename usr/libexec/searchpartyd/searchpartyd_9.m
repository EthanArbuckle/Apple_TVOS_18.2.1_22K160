void sub_1004A3E70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void v6[12];
  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2 = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[6] = &unk_100804A08;
    v6[7] = &unk_100804A08;
    v6[8] = &unk_100804A08;
    v6[9] = &unk_100804A08;
    sub_1004A3F40(319LL);
    if (v5 <= 0x3F)
    {
      v6[10] = *(void *)(v4 - 8) + 64LL;
      v6[11] = &unk_100804A08;
      swift_updateClassMetadata2(a1, 256LL, 12LL, v6, a1 + 80);
    }
  }

void sub_1004A3F40(uint64_t a1)
{
  if (!qword_1009AFA50)
  {
    uint64_t v2 = type metadata accessor for UUID(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009AFA50);
    }
  }

uint64_t sub_1004A3F94(void *a1, uint64_t a2)
{
  uint64_t v4 = a1;
  id v5 = [a1 services];
  if (v5)
  {
    v6 = v5;
    uint64_t v7 = sub_100022898(0LL, &qword_1009AFB08, &OBJC_CLASS___CBService_ptr);
    v8 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);
  }

  else
  {
    v8 = _swiftEmptyArrayStorage;
  }

  sub_1004A1B94();
  if (qword_10099BA58 != -1) {
    swift_once(&qword_10099BA58, sub_1007C94D4);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A2B858);
  id v10 = v2;
  v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v23 = a2;
    v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v14 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)v13 = 138412290;
    id v24 = v10;
    v22 = v8;
    v15 = v4;
    id v16 = v10;
    a2 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v13 + 4, v13 + 12);
    void *v14 = v10;

    uint64_t v4 = v15;
    v8 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "CBPeripheralDelegate: peripheral(didDiscoverServices:) called for %@",  v13,  0xCu);
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v14, 1LL, v17);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
  }

  __chkstk_darwin(v18);
  v21[2] = v10;
  v21[3] = v4;
  v21[4] = a2;
  v21[5] = v8;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1004A8180,  v21,  v19,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  return swift_bridgeObjectRelease();
}

void sub_1004A41F4(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (uint64_t *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  id v5 = *(void (**)(void))&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  if (v5)
  {
    uint64_t v7 = v4[1];
    if (a3)
    {
      sub_1000372DC(*(void *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise], v4[1]);
      swift_errorRetain(a3);
      if (qword_10099BA50 != -1) {
        swift_once(&qword_10099BA50, sub_1007C94A8);
      }
      uint64_t v8 = type metadata accessor for Logger(0LL);
      sub_10000A720(v8, (uint64_t)qword_100A2B840);
      uint64_t v9 = swift_errorRetain(a3);
      id v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.error.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        os_log_type_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v46 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)os_log_type_t v12 = 138412290;
        v13 = v5;
        uint64_t v14 = _convertErrorToNSError(_:)(a3);
        v50 = (char *)v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v12 + 4, v12 + 12);
        uint64_t *v46 = v14;
        id v5 = v13;
        swift_errorRelease(a3);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "didDiscoverServices error!: %@", v12, 0xCu);
        uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v46, 1LL, v15);
        swift_slowDealloc(v46, -1LL, -1LL);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(a3);
      }

      v50 = (char *)a3;
      __int16 v52 = 256;
      swift_errorRetain(a3);
      v5(&v50);
      sub_100015794((uint64_t)&v50, &qword_1009AFAF0);
      uint64_t v40 = *v4;
      uint64_t v41 = v4[1];
      *uint64_t v4 = 0LL;
      v4[1] = 0LL;
      sub_10002214C(v40, v41);
      swift_errorRelease(a3);
    }

    else
    {
      sub_1000372DC(*(void *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise], v4[1]);
      v27 = a1;
      v28 = sub_1004A568C(a4, (uint64_t)v27);

      if (qword_10099BA50 != -1) {
        swift_once(&qword_10099BA50, sub_1007C94A8);
      }
      uint64_t v29 = type metadata accessor for Logger(0LL);
      sub_10000A720(v29, (uint64_t)qword_100A2B840);
      swift_bridgeObjectRetain_n(v28, 2LL);
      v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.default.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v47 = v5;
        v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v45 = swift_slowAlloc(32LL, -1LL);
        v50 = (char *)v45;
        *(_DWORD *)v33 = 136446210;
        uint64_t v34 = type metadata accessor for Service();
        swift_bridgeObjectRetain(v28);
        uint64_t v36 = Array.description.getter(v35, v34);
        uint64_t v48 = v7;
        unint64_t v38 = v37;
        swift_bridgeObjectRelease();
        uint64_t v39 = v36;
        id v5 = v47;
        uint64_t v49 = sub_1003F11D4(v39, v38, (uint64_t *)&v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v33 + 4, v33 + 12);
        swift_bridgeObjectRelease_n(v28, 2LL);
        uint64_t v7 = v48;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "discovered services: %{public}s", v33, 0xCu);
        swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1LL, -1LL);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v28, 2LL);
      }

      swift_beginAccess(&v27[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], &v50, 33LL, 0LL);
      sub_100688134((uint64_t)v28);
      swift_endAccess(&v50);
      swift_bridgeObjectRelease();
      v50 = v27;
      HIBYTE(v52) = 0;
      v42 = v27;
      v5(&v50);
      sub_100015794((uint64_t)&v50, &qword_1009AFAF0);
      uint64_t v43 = *v4;
      uint64_t v44 = v4[1];
      *uint64_t v4 = 0LL;
      v4[1] = 0LL;
      sub_10002214C(v43, v44);
    }

    sub_10002214C((uint64_t)v5, v7);
  }

  else
  {
    if (qword_10099BA50 != -1) {
      swift_once(&qword_10099BA50, sub_1007C94A8);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_10000A720(v17, (uint64_t)qword_100A2B840);
    uint64_t v18 = a2;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v22 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)v21 = 138412290;
      v50 = v18;
      uint64_t v23 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v21 + 4, v21 + 12);
      void *v22 = v18;

      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "peripheral(didDiscoverServices:) called with no servicesPromise available!: %@",  v21,  0xCu);
      uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v22, 1LL, v24);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_1004A481C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v11, 0LL, 0LL);
  uint64_t v6 = *v5;
  v10[2] = a2;
  swift_bridgeObjectRetain(v6);
  sub_100373D00((uint64_t (*)(uint64_t *))sub_1004A8290, (uint64_t)v10, v6);
  uint64_t v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v8;
  return result;
}

void sub_1004A48B0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4 = a1;
  id v5 = (void *)(a1 + 48);
  uint64_t v6 = *(void (**)(void))(a1 + 48);
  if (v6)
  {
    uint64_t v8 = *(void *)(a1 + 56);
    if (a2)
    {
      sub_1000372DC(*(void *)(a1 + 48), *(void *)(a1 + 56));
      swift_errorRetain(a2);
      if (qword_10099BA50 != -1) {
        swift_once(&qword_10099BA50, sub_1007C94A8);
      }
      uint64_t v9 = type metadata accessor for Logger(0LL);
      sub_10000A720(v9, (uint64_t)qword_100A2B840);
      uint64_t v10 = swift_errorRetain(a2);
      os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
      os_log_type_t v12 = static os_log_type_t.error.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v51 = v6;
        v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v49 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)v13 = 138412290;
        uint64_t v14 = _convertErrorToNSError(_:)(a2);
        uint64_t Strong = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v55, v13 + 4, v13 + 12);
        *uint64_t v49 = v14;
        uint64_t v6 = v51;
        swift_errorRelease(a2);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "didDiscoverCharacteristicsFor error: %@", v13, 0xCu);
        uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v49, 1LL, v15);
        swift_slowDealloc(v49, -1LL, -1LL);
        swift_slowDealloc(v13, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(a2);
      }

      uint64_t Strong = a2;
      __int16 v56 = 256;
      swift_errorRetain(a2);
      v6(&Strong);
      sub_10002214C((uint64_t)v6, v8);
      swift_errorRelease(a2);
    }

    else
    {
      swift_retain();
      id v27 = [a3 characteristics];
      if (v27)
      {
        v28 = v27;
        uint64_t v29 = sub_100022898(0LL, &qword_1009AFAF8, &OBJC_CLASS___CBCharacteristic_ptr);
        uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);

        swift_retain();
        id v31 = a4;
        os_log_type_t v32 = sub_1004A5820(v30, (uint64_t)v31, v4);
        swift_bridgeObjectRelease();

        swift_release();
        uint64_t v33 = sub_1006F1E20((uint64_t)v32);
        swift_bridgeObjectRelease();
        if (qword_10099BA58 != -1) {
          swift_once(&qword_10099BA58, sub_1007C94D4);
        }
        uint64_t v34 = type metadata accessor for Logger(0LL);
        sub_10000A720(v34, (uint64_t)qword_100A2B858);
        swift_bridgeObjectRetain_n(v33, 2LL);
        uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
        os_log_type_t v37 = static os_log_type_t.info.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          __int16 v52 = v6;
          unint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v53 = v4;
          uint64_t v50 = swift_slowAlloc(32LL, -1LL);
          uint64_t Strong = v50;
          *(_DWORD *)unint64_t v38 = 136315138;
          uint64_t v39 = v8;
          uint64_t v40 = type metadata accessor for Characteristic();
          uint64_t v41 = sub_100007864( &qword_1009AFB00,  (uint64_t (*)(uint64_t))type metadata accessor for Characteristic,  (uint64_t)&unk_100805758);
          swift_bridgeObjectRetain(v33);
          uint64_t v43 = Set.description.getter(v42, v40, v41);
          unint64_t v45 = v44;
          swift_bridgeObjectRelease();
          uint64_t v46 = v43;
          uint64_t v8 = v39;
          uint64_t v57 = sub_1003F11D4(v46, v45, &Strong);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v38 + 4, v38 + 12);
          swift_bridgeObjectRelease_n(v33, 2LL);
          uint64_t v6 = v52;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "localCharacteristics: %s", v38, 0xCu);
          swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v4 = v53;
          swift_slowDealloc(v50, -1LL, -1LL);
          swift_slowDealloc(v38, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v33, 2LL);
        }

        swift_beginAccess(v4 + 40, &Strong, 33LL, 0LL);
        sub_100674000(v33);
        swift_endAccess(&Strong);
      }

      uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v4 + 16);
      HIBYTE(v56) = 0;
      v6(&Strong);
      sub_10002214C((uint64_t)v6, v8);
    }

    sub_100015794((uint64_t)&Strong, &qword_1009AFAF0);
    uint64_t v47 = *(void *)(v4 + 48);
    uint64_t v48 = *(void *)(v4 + 56);
    *id v5 = 0LL;
    v5[1] = 0LL;
    sub_10002214C(v47, v48);
  }

  else
  {
    if (qword_10099BA50 != -1) {
      swift_once(&qword_10099BA50, sub_1007C94A8);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10000A720(v16, (uint64_t)qword_100A2B840);
    uint64_t v17 = swift_retain_n(v4, 2LL);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t Strong = v21;
      *(_DWORD *)os_log_type_t v20 = 136315138;
      swift_retain();
      uint64_t v22 = sub_1006E281C();
      unint64_t v24 = v23;
      swift_release();
      uint64_t v57 = sub_1003F11D4(v22, v24, &Strong);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v20 + 4, v20 + 12);
      swift_release_n(v4, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "peripheral(didDiscoverCharacteristicsFor:) called with no characteristicsPromise available!: %s",  v20,  0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v4, 2LL);
    }
  }

void sub_1004A4F58(void *a1, uint64_t a2, void *a3)
{
  if (a1[13])
  {
    if (a2)
    {
      uint64_t v30 = (void *)a2;
      LOBYTE(v32) = 0;
      swift_retain();
      swift_errorRetain(a2);
      PassthroughSubject.send(completion:)(&v30);
      swift_release();
      sub_100015794((uint64_t)&v30, (uint64_t *)&unk_1009B1320);
    }

    else
    {
      swift_retain();
      id v9 = [a3 value];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
        unint64_t v13 = v12;
      }

      else
      {
        uint64_t v11 = 0LL;
        unint64_t v13 = 0xC000000000000000LL;
      }

      uint64_t v30 = (void *)v11;
      unint64_t v31 = v13;
      PassthroughSubject.send(_:)(&v30);
      swift_release();
      sub_100016F9C(v11, v13);
    }
  }

  else
  {
    uint64_t v7 = a1 + 9;
    uint64_t v6 = (void (*)(void **))a1[9];
    if (v6)
    {
      uint64_t v8 = a1[10];
      if (a2)
      {
        uint64_t v30 = a1;
        unint64_t v31 = a2;
        __int16 v32 = 264;
        swift_errorRetain(a2);
        swift_retain();
        sub_1000372DC((uint64_t)v6, v8);
      }

      else
      {
        swift_retain();
        id v23 = [a3 value];
        if (v23)
        {
          unint64_t v24 = v23;
          uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
          unint64_t v27 = v26;
        }

        else
        {
          uint64_t v25 = 0LL;
          unint64_t v27 = 0xC000000000000000LL;
        }

        uint64_t v30 = (void *)v25;
        unint64_t v31 = v27;
        HIBYTE(v32) = 0;
      }

      v6(&v30);
      sub_10002214C((uint64_t)v6, v8);
      sub_100015794((uint64_t)&v30, (uint64_t *)&unk_1009AFAE0);
      uint64_t v28 = a1[9];
      uint64_t v29 = a1[10];
      *uint64_t v7 = 0LL;
      v7[1] = 0LL;
      sub_10002214C(v28, v29);
    }

    else
    {
      if (qword_10099BA50 != -1) {
        swift_once(&qword_10099BA50, sub_1007C94A8);
      }
      uint64_t v14 = type metadata accessor for Logger(0LL);
      sub_10000A720(v14, (uint64_t)qword_100A2B840);
      uint64_t v15 = swift_retain_n(a1, 2LL);
      uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
      os_log_type_t v17 = static os_log_type_t.error.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v19 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v18 = 136315138;
        uint64_t v30 = (void *)v19;
        swift_retain();
        uint64_t v20 = sub_1004C395C();
        unint64_t v22 = v21;
        swift_release();
        uint64_t v33 = sub_1003F11D4(v20, v22, (uint64_t *)&v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v18 + 4, v18 + 12);
        swift_release_n(a1, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "didUpdateValueFor characteristic: %s called with no outstanding promise or subject!",  v18,  0xCu);
        swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1LL, -1LL);
        swift_slowDealloc(v18, -1LL, -1LL);
      }

      else
      {

        swift_release_n(a1, 2LL);
      }
    }
  }

uint64_t sub_1004A52A4@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t (*a3)(uint64_t *)@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ServiceUUID(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v11 = [a2 UUID];
  sub_100598998();

  unint64_t v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v19, 0LL, 0LL);
  uint64_t v13 = *v12;
  uint64_t v18 = v10;
  swift_bridgeObjectRetain(v13);
  sub_100373D00(a3, (uint64_t)v17, v13);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t result = sub_100018C68((uint64_t)v10, type metadata accessor for ServiceUUID);
  *a4 = v15;
  return result;
}

uint64_t sub_1004A53BC@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t (*a3)(uint64_t *)@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for CharacteristicUUID(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v11 = [a2 UUID];
  sub_100598998();

  swift_beginAccess(a1 + 40, v18, 0LL, 0LL);
  uint64_t v12 = *(void *)(a1 + 40);
  os_log_type_t v17 = v10;
  swift_bridgeObjectRetain(v12);
  sub_100373D2C(a3, (uint64_t)v16, v12);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t result = sub_100018C68((uint64_t)v10, type metadata accessor for CharacteristicUUID);
  *a4 = v14;
  return result;
}

uint64_t sub_1004A54C8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  sub_1000372DC(v3, v4);
  sub_10002214C(v3, v4);
  if (v3)
  {
    uint64_t result = swift_allocObject(&unk_10095E990, 32LL, 7LL);
    *(void *)(result + 16) = v3;
    *(void *)(result + 24) = v4;
    uint64_t v6 = sub_10009BF1C;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t result = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void sub_1004A5554(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void (*a6)(id, void *))
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a1;
  id v13 = a5;
  a6(v11, a5);
}

void *sub_1004A568C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v4) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v4);
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }

    uint64_t v6 = 0LL;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      }
      else {
        id v7 = *(id *)(a1 + 8 * v6 + 32);
      }
      id v8 = v7;
      ++v6;
      uint64_t v9 = type metadata accessor for Service();
      id v10 = (void *)swift_allocObject(v9, 64LL, 7LL);
      uint64_t v11 = sub_100004AEC(&qword_1009BB4F0);
      uint64_t v12 = swift_allocObject(v11, 20LL, 7LL);
      *(_DWORD *)(v12 + 16) = 0;
      void v10[3] = v12;
      v10[7] = 0LL;
      v10[5] = &_swiftEmptySetSingleton;
      v10[6] = 0LL;
      uint64_t v13 = swift_unknownObjectUnownedInit(v10 + 2, a2);
      v10[4] = v8;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      uint64_t v14 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      uint64_t v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v10);
      specialized ContiguousArray._endMutation()(v15);
      if (v4 == v6) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_14:
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }

  return result;
}

void *sub_1004A5820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v6) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v6);
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }

    uint64_t v8 = 0LL;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      }
      else {
        id v9 = *(id *)(a1 + 8 * v8 + 32);
      }
      id v10 = v9;
      ++v8;
      uint64_t v11 = type metadata accessor for Characteristic();
      uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
      uint64_t v13 = sub_100004AEC(&qword_1009BB4F0);
      uint64_t v14 = swift_allocObject(v13, 20LL, 7LL);
      *(_DWORD *)(v14 + 16) = 0;
      *(void *)(v12 + 16) = v14;
      *(void *)(v12 + 48) = &_swiftEmptySetSingleton;
      *(_OWORD *)(v12 + 56) = 0u;
      *(_OWORD *)(v12 + 72) = 0u;
      *(_OWORD *)(v12 + 88) = 0u;
      *(void *)(v12 + 104) = 0LL;
      swift_unknownObjectUnownedInit(v12 + 24, a2);
      *(void *)(v12 + 32) = a3;
      *(void *)(v12 + 40) = v10;
      uint64_t v15 = swift_unownedRetain(a3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      uint64_t v16 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v12);
      specialized ContiguousArray._endMutation()(v17);
      if (v6 == v8) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_14:
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }

  return result;
}

id sub_1004A59CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = OBJC_IVAR____TtC12searchpartyd10Peripheral_lock;
  uint64_t v12 = sub_100004AEC(&qword_1009BB4F0);
  uint64_t v13 = swift_allocObject(v12, 20LL, 7LL);
  *(void *)&v5[v11] = v13;
  *(void *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_services] = &_swiftEmptySetSingleton;
  *(_DWORD *)(v13 + 16) = 0;
  uint64_t v14 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_connectionPromise];
  *(void *)uint64_t v14 = 0LL;
  *((void *)v14 + 1) = 0LL;
  uint64_t v15 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_disconnectionPromise];
  *(void *)uint64_t v15 = 0LL;
  *((void *)v15 + 1) = 0LL;
  uint64_t v16 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  *(void *)uint64_t v16 = 0LL;
  *((void *)v16 + 1) = 0LL;
  uint64_t v17 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_sendDataPromise];
  *(void *)uint64_t v17 = 0LL;
  *((void *)v17 + 1) = 0LL;
  uint64_t v18 = (uint64_t)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_findMyIdentifier];
  uint64_t v19 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
  uint64_t v20 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName];
  *(void *)uint64_t v20 = 0LL;
  *((void *)v20 + 1) = 0LL;
  *(void *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] = a1;
  *(void *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData] = a2;
  *(void *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_RSSI] = a3;
  unint64_t v21 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen];
  uint64_t v22 = type metadata accessor for Date(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v21, a4, v22);
  swift_beginAccess(v18, &v49, 33LL, 0LL);
  unint64_t v24 = v5;
  id v25 = a1;
  sub_1004A5E60(a5, v18);
  swift_endAccess(&v49);

  unint64_t v26 = (objc_class *)type metadata accessor for Peripheral(0LL);
  v48.receiver = v24;
  v48.super_class = v26;
  id v27 = objc_msgSendSuper2(&v48, "init");
  id v28 = [v25 delegate];
  if (!v28) {
    goto LABEL_17;
  }
  id v29 = v28;
  if (v28 == v27)
  {
    id v39 = v27;
    goto LABEL_16;
  }

  uint64_t v30 = swift_dynamicCastClass(v28, v26);
  uint64_t v31 = qword_10099BA50;
  if (!v30)
  {
    if (qword_10099BA50 != -1) {
      swift_once(&qword_10099BA50, sub_1007C94A8);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    uint64_t v41 = sub_10000A720(v40, (uint64_t)qword_100A2B840);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.fault.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      unint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "CBPeripheral already has a delegate.", v44, 2u);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_unknownObjectRelease(v29);

      goto LABEL_17;
    }

    id v39 = v29;
LABEL_16:
    swift_unknownObjectRelease(v39);
    goto LABEL_17;
  }

  uint64_t v32 = v30;
  uint64_t v47 = a5;
  swift_unknownObjectRetain(v29);
  if (v31 != -1) {
    swift_once(&qword_10099BA50, sub_1007C94A8);
  }
  uint64_t v33 = type metadata accessor for Logger(0LL);
  sub_10000A720(v33, (uint64_t)qword_100A2B840);
  uint64_t v34 = swift_unknownObjectRetain_n(v29, 2LL);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.fault.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    os_log_type_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v46 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v37 = 138543362;
    uint64_t v49 = v32;
    swift_unknownObjectRetain(v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v37 + 4, v37 + 12);
    uint64_t *v46 = v32;
    swift_unknownObjectRelease_n(v29, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "CBPeripheral already has a delegate: %{public}@", v37, 0xCu);
    uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v46, 1LL, v38);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_unknownObjectRelease_n(v29, 2LL);
  }

  else
  {

    swift_unknownObjectRelease_n(v29, 4LL);
  }

  a5 = v47;
LABEL_17:
  objc_msgSend(v25, "setDelegate:", v27, v46);

  sub_100015794(a5, &qword_10099D8A0);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a4, v22);
  return v27;
}

uint64_t sub_1004A5E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004A5EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AFAB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004A5EF0(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v36 = a2;
  uint64_t v5 = type metadata accessor for ServiceUUID(0LL);
  __chkstk_darwin(v5);
  id v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [a1 UUID];
  sub_100598998();

  sub_1004A1B94();
  if (qword_10099BA58 != -1) {
    swift_once(&qword_10099BA58, sub_1007C94D4);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A2B858);
  id v10 = a1;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(8LL, -1LL);
    uint64_t v34 = v9;
    uint64_t v15 = (void *)v14;
    uint64_t v35 = v3;
    *(_DWORD *)uint64_t v13 = 138412290;
    id v39 = v10;
    uint64_t v16 = v10;
    uint64_t v3 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v13 + 4, v13 + 12);
    void *v15 = v10;

    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "CBPeripheralDelegate: peripheral(didDiscoverCharacteristicsFor:) %@",  v13,  0xCu);
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v15, 1LL, v17);
    uint64_t v18 = v15;
    uint64_t v9 = v34;
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    uint64_t v11 = (os_log_s *)v10;
  }

  uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
  __chkstk_darwin(v20);
  *(&v34 - 2) = v3;
  *(&v34 - 1) = (uint64_t)v7;
  uint64_t v21 = sub_100004AEC(&qword_1009AFAC0);
  uint64_t v22 = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1004A814C,  &v34 - 4,  v19,  (char *)&type metadata for () + 8,  v21);
  uint64_t v23 = v39;
  if (v39)
  {
    uint64_t v24 = v39[3];
    __chkstk_darwin(v22);
    uint64_t v25 = v36;
    *(&v34 - 4) = (uint64_t)v23;
    *(&v34 - 3) = v25;
    *(&v34 - 2) = (uint64_t)v10;
    *(&v34 - 1) = v3;
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1004A8164,  &v34 - 6,  v24,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
    swift_release_n(v23, 2LL);
  }

  else
  {
    if (qword_10099BA50 != -1) {
      swift_once(&qword_10099BA50, sub_1007C94A8);
    }
    sub_10000A720(v9, (uint64_t)qword_100A2B840);
    unint64_t v26 = v10;
    id v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v29 = 138412290;
      id v37 = v26;
      uint64_t v31 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v29 + 4, v29 + 12);
      *uint64_t v30 = v26;

      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Could not find Service for: %@", v29, 0xCu);
      uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v30, 1LL, v32);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      id v27 = (os_log_s *)v26;
    }
  }

  return sub_100018C68((uint64_t)v7, type metadata accessor for ServiceUUID);
}

void sub_1004A6340(void *a1, uint8_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1004A1B94();
  if (qword_10099BA58 != -1) {
    swift_once(&qword_10099BA58, sub_1007C94D4);
  }
  v63 = (uint8_t *)type metadata accessor for Logger(0LL);
  sub_10000A720((uint64_t)v63, (uint64_t)qword_100A2B858);
  id v10 = a1;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter(v11);
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v61 = v7;
  uint64_t v62 = v6;
  v60 = v9;
  if (v13)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(8LL, -1LL);
    v59 = a2;
    uint64_t v16 = (void *)v15;
    *(_DWORD *)uint64_t v14 = 138412290;
    v66 = v10;
    uint64_t v17 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v14 + 4, v14 + 12);
    *uint64_t v16 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "CBPeripheralDelegate: didUpdateValueFor: %@", v14, 0xCu);
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v16, 1LL, v18);
    uint64_t v19 = v16;
    a2 = v59;
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
  }

  id v20 = [v10 service];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
    uint64_t v23 = __chkstk_darwin(v20);
    *(&v57 - 2) = v3;
    *(&v57 - 1) = v23;
    uint64_t v24 = sub_100004AEC(&qword_1009AFAC0);
    uint64_t v25 = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1004A80B4,  &v57 - 4,  v22,  (char *)&type metadata for () + 8,  v24);
    uint64_t v26 = (uint64_t)v66;
    if (!v66)
    {
      if (qword_10099BA50 != -1) {
        swift_once(&qword_10099BA50, sub_1007C94A8);
      }
      sub_10000A720((uint64_t)v63, (uint64_t)qword_100A2B840);
      id v32 = v21;
      uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v34 = static os_log_type_t.error.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v36 = swift_slowAlloc(32LL, -1LL);
        v66 = (void *)v36;
        *(_DWORD *)uint64_t v35 = 136315138;
        v63 = v35 + 4;
        id v37 = [v32 UUID];
        uint64_t v38 = v60;
        sub_100598998();

        uint64_t v39 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v40 = v62;
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v62, v39);
        unint64_t v43 = v42;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v38, v40);
        uint64_t v64 = sub_1003F11D4(v41, v43, (uint64_t *)&v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v63, v35 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Could not find Service for: %s", v35, 0xCu);
        swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);

        return;
      }

      goto LABEL_19;
    }

    uint64_t v27 = v66[3];
    __chkstk_darwin(v25);
    *(&v57 - 2) = v26;
    *(&v57 - 1) = (uint64_t)v10;
    swift_retain();
    swift_retain();
    uint64_t v28 = sub_100004AEC(&qword_1009AFAC8);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004A80D4, &v57 - 4, v27, (char *)&type metadata for () + 8, v28);
    uint64_t v29 = swift_release();
    uint64_t v30 = (uint64_t)v66;
    if (v66)
    {
      uint64_t v31 = v66[2];
      __chkstk_darwin(v29);
      *(&v57 - 4) = v30;
      *(&v57 - 3) = (uint64_t)a2;
      *(&v57 - 2) = (uint64_t)v10;
      swift_retain();
      swift_retain();
      OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1004A8130,  &v57 - 6,  v31,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
      swift_release();
      swift_release_n(v30, 2LL);
      swift_release_n(v26, 2LL);

      return;
    }

    if (qword_10099BA50 != -1) {
      swift_once(&qword_10099BA50, sub_1007C94A8);
    }
    sub_10000A720((uint64_t)v63, (uint64_t)qword_100A2B840);
    unint64_t v44 = v10;
    id v32 = (id)Logger.logObject.getter(v44);
    os_log_type_t v45 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled((os_log_t)v32, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v63 = (uint8_t *)swift_slowAlloc(32LL, -1LL);
      v66 = v63;
      *(_DWORD *)uint64_t v46 = 136315138;
      uint64_t v47 = v46 + 12;
      uint64_t v58 = v46 + 4;
      v59 = v46;
      id v48 = [v44 UUID];
      uint64_t v49 = v60;
      sub_100598998();

      uint64_t v50 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v51 = v62;
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v62, v50);
      unint64_t v54 = v53;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v49, v51);
      uint64_t v64 = sub_1003F11D4(v52, v54, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v58, v47);

      swift_bridgeObjectRelease();
      uint64_t v55 = v59;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v32, v45, "Could not find Characteristic for: %s", v59, 0xCu);
      uint64_t v56 = (uint64_t)v63;
      swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);

      swift_release_n(v26, 2LL);
LABEL_19:

      return;
    }

    swift_release_n(v26, 2LL);
  }

void sub_1004A6A84(void *a1, uint64_t a2)
{
  uint64_t v69 = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v71 = *(void *)(v4 - 8);
  uint64_t v72 = v4;
  __chkstk_darwin(v4);
  v70 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v74 = v2;
  sub_1004A1B94();
  if (qword_10099BA58 != -1) {
    swift_once(&qword_10099BA58, sub_1007C94D4);
  }
  v73 = (void *)type metadata accessor for Logger(0LL);
  sub_10000A720((uint64_t)v73, (uint64_t)qword_100A2B858);
  uint64_t v6 = a1;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v10 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    v75 = v6;
    uint64_t v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v9 + 4, v9 + 12);
    *id v10 = v6;

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "CBPeripheralDelegate: didWriteValueFor: %@", v9, 0xCu);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v10, 1LL, v12);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
  }

  BOOL v13 = (uint8_t *)objc_msgSend(v6, "service", v69);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)&v74[OBJC_IVAR____TtC12searchpartyd10Peripheral_lock];
    uint64_t v16 = __chkstk_darwin(v13);
    *(&v69 - 2) = v17;
    *(&v69 - 1) = v16;
    uint64_t v18 = sub_100004AEC(&qword_1009AFAC0);
    uint64_t v19 = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1004A80B4,  &v69 - 4,  v15,  (char *)&type metadata for () + 8,  v18);
    uint64_t v20 = (uint64_t)v75;
    if (v75)
    {
      uint64_t v21 = v75[3];
      __chkstk_darwin(v19);
      *(&v69 - 2) = v20;
      *(&v69 - 1) = (uint64_t)v6;
      swift_retain();
      swift_retain();
      uint64_t v22 = sub_100004AEC(&qword_1009AFAC8);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004A80D4, &v69 - 4, v21, (char *)&type metadata for () + 8, v22);
      swift_release();
      uint64_t v23 = (uint64_t)v75;
      if (v75)
      {
        uint64_t v24 = swift_retain_n(v75, 3LL);
        uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
        os_log_type_t v26 = static os_log_type_t.info.getter(v25);
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v28 = swift_slowAlloc(32LL, -1LL);
          v74 = v14;
          v75 = (void *)v28;
          *(_DWORD *)uint64_t v27 = 136315138;
          uint64_t v72 = 0LL;
          swift_retain();
          uint64_t v29 = sub_1004C395C();
          unint64_t v31 = v30;
          swift_release();
          uint64_t v78 = sub_1003F11D4(v29, v31, (uint64_t *)&v75);
          uint64_t v14 = v74;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v27 + 4, v27 + 12);
          swift_release_n(v23, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "CBPeripheralDelegate: didWriteValueFor wrappedCharacteristic: %s",  v27,  0xCu);
          swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v28, -1LL, -1LL);
          swift_slowDealloc(v27, -1LL, -1LL);
        }

        else
        {

          swift_release_n(v23, 2LL);
        }

        uint64_t v56 = *(void *)(v23 + 16);
        swift_retain();
        uint64_t v57 = sub_100004AEC((uint64_t *)&unk_1009AFAD0);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004A80F4, v23, v56, (char *)&type metadata for () + 8, v57);
        swift_release();
        uint64_t v58 = (void (*)(void **))v75;
        if (v75)
        {
          uint64_t v59 = v76[0];
          uint64_t v60 = v69;
          if (v69)
          {
            v75 = (void *)v69;
            __int16 v77 = 256;
            sub_1000372DC((uint64_t)v58, v76[0]);
            swift_errorRetain(v60);
          }

          else
          {
            HIBYTE(v77) = 0;
            swift_retain();
          }

          v58(&v75);
          sub_10002214C((uint64_t)v58, v59);
          swift_release();
          sub_10002214C((uint64_t)v58, v59);
          swift_release();

          swift_release_n(v23, 2LL);
          sub_100015794((uint64_t)&v75, &qword_1009A7920);
          return;
        }

        if (qword_10099BA50 != -1) {
          swift_once(&qword_10099BA50, sub_1007C94A8);
        }
        sub_10000A720((uint64_t)v73, (uint64_t)qword_100A2B840);
        uint64_t v61 = swift_retain_n(v23, 2LL);
        os_log_type_t v45 = (os_log_s *)Logger.logObject.getter(v61);
        os_log_type_t v62 = static os_log_type_t.error.getter(v45);
        if (os_log_type_enabled(v45, v62))
        {
          v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v64 = swift_slowAlloc(32LL, -1LL);
          *(_DWORD *)v63 = 136315138;
          v74 = (uint8_t *)v20;
          v75 = (void *)v64;
          swift_retain();
          uint64_t v65 = sub_1004C395C();
          v66 = v14;
          unint64_t v68 = v67;
          swift_release();
          uint64_t v78 = sub_1003F11D4(v65, v68, (uint64_t *)&v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v63 + 4, v63 + 12);
          swift_release_n(v23, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v45,  v62,  "didWriteValueFor characteristic: %s called with no outstanding promise!",  v63,  0xCu);
          swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v64, -1LL, -1LL);
          swift_slowDealloc(v63, -1LL, -1LL);

          swift_release_n(v23, 2LL);
          goto LABEL_28;
        }

        swift_release_n(v23, 4LL);
      }

      else
      {
        if (qword_10099BA50 != -1) {
          swift_once(&qword_10099BA50, sub_1007C94A8);
        }
        sub_10000A720((uint64_t)v73, (uint64_t)qword_100A2B840);
        unint64_t v44 = v6;
        os_log_type_t v45 = (os_log_s *)Logger.logObject.getter(v44);
        os_log_type_t v46 = static os_log_type_t.error.getter(v45);
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v73 = (void *)swift_slowAlloc(32LL, -1LL);
          v74 = (uint8_t *)v20;
          v75 = v73;
          *(_DWORD *)uint64_t v47 = 136315138;
          uint64_t v69 = (uint64_t)(v47 + 4);
          id v48 = [v44 UUID];
          uint64_t v49 = v70;
          sub_100598998();

          uint64_t v50 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v51 = v72;
          uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v72, v50);
          unint64_t v54 = v53;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v49, v51);
          uint64_t v78 = sub_1003F11D4(v52, v54, (uint64_t *)&v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v69, v47 + 12);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Could not find Characteristic for: %s", v47, 0xCu);
          uint64_t v55 = (uint64_t)v73;
          swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v55, -1LL, -1LL);
          swift_slowDealloc(v47, -1LL, -1LL);

LABEL_28:
          swift_release_n(v74, 2LL);

          return;
        }
      }

      swift_release_n(v20, 2LL);
      return;
    }

    if (qword_10099BA50 != -1) {
      swift_once(&qword_10099BA50, sub_1007C94A8);
    }
    sub_10000A720((uint64_t)v73, (uint64_t)qword_100A2B840);
    id v32 = v14;
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v35 = 136315138;
      v74 = v35 + 4;
      v75 = (void *)v36;
      id v37 = -[uint8_t UUID](v32, "UUID");
      uint64_t v38 = v70;
      sub_100598998();

      uint64_t v39 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v40 = v72;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v72, v39);
      unint64_t v43 = v42;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v38, v40);
      uint64_t v78 = sub_1003F11D4(v41, v43, (uint64_t *)&v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v74, v35 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Could not find Service for: %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
    }
  }

void sub_1004A74FC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1004A1B94();
  if (qword_10099BA58 != -1) {
    swift_once(&qword_10099BA58, sub_1007C94D4);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_10000A720(v8, (uint64_t)qword_100A2B858);
  uint64_t v9 = a1;
  id v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v74 = v5;
  v75 = (uint8_t *)v4;
  v73 = v7;
  if (v12)
  {
    BOOL v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(8LL, -1LL);
    uint64_t v72 = v8;
    uint64_t v15 = (void *)v14;
    *(_DWORD *)BOOL v13 = 138412290;
    uint64_t v78 = v9;
    uint64_t v16 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v13 + 4, v13 + 12);
    void *v15 = v9;

    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "CBPeripheralDelegate: didUpdateNotificationStateFor: %@",  v13,  0xCu);
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v15, 1LL, v17);
    uint64_t v18 = v15;
    uint64_t v8 = v72;
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
  }

  id v19 = [v9 service];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
    uint64_t v22 = __chkstk_darwin(v19);
    *(&v69 - 2) = v2;
    *(&v69 - 1) = v22;
    uint64_t v23 = sub_100004AEC(&qword_1009AFAC0);
    uint64_t v24 = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1004A803C,  &v69 - 4,  v21,  (char *)&type metadata for () + 8,  v23);
    uint64_t v25 = (uint64_t)v78;
    if (v78)
    {
      uint64_t v26 = v78[3];
      __chkstk_darwin(v24);
      *(&v69 - 2) = v25;
      *(&v69 - 1) = (uint64_t)v9;
      swift_retain();
      swift_retain();
      uint64_t v27 = sub_100004AEC(&qword_1009AFAC8);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004A805C, &v69 - 4, v26, (char *)&type metadata for () + 8, v27);
      swift_release();
      uint64_t v28 = (uint64_t)v78;
      if (v78)
      {
        uint64_t v29 = (void *)v78[5];
        swift_retain();
        if ([v29 isNotifying])
        {
          if (qword_10099BA50 != -1) {
            swift_once(&qword_10099BA50, sub_1007C94A8);
          }
          sub_10000A720(v8, (uint64_t)qword_100A2B840);
          uint64_t v30 = swift_retain_n(v28, 2LL);
          unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
          os_log_type_t v32 = static os_log_type_t.info.getter(v31);
          if (os_log_type_enabled(v31, v32))
          {
            uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v34 = swift_slowAlloc(32LL, -1LL);
            uint64_t v78 = (void *)v34;
            *(_DWORD *)uint64_t v33 = 136315138;
            v75 = v33 + 4;
            swift_retain();
            uint64_t v35 = sub_1004C395C();
            unint64_t v37 = v36;
            swift_release();
            uint64_t v76 = sub_1003F11D4(v35, v37, (uint64_t *)&v78);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v75, v33 + 12);
            swift_release_n(v28, 2LL);
            swift_bridgeObjectRelease();
            uint64_t v38 = "Start notifying: %s.";
LABEL_26:
            _os_log_impl((void *)&_mh_execute_header, v31, v32, v38, v33, 0xCu);
            swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v34, -1LL, -1LL);
            swift_slowDealloc(v33, -1LL, -1LL);

            swift_release_n(v28, 2LL);
            swift_release_n(v25, 2LL);

            return;
          }
        }

        else
        {
          if (qword_10099BA50 != -1) {
            swift_once(&qword_10099BA50, sub_1007C94A8);
          }
          sub_10000A720(v8, (uint64_t)qword_100A2B840);
          uint64_t v65 = swift_retain_n(v28, 2LL);
          unint64_t v31 = (os_log_s *)Logger.logObject.getter(v65);
          os_log_type_t v32 = static os_log_type_t.info.getter(v31);
          if (os_log_type_enabled(v31, v32))
          {
            uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v34 = swift_slowAlloc(32LL, -1LL);
            uint64_t v78 = (void *)v34;
            *(_DWORD *)uint64_t v33 = 136315138;
            v75 = v33 + 4;
            swift_retain();
            uint64_t v66 = sub_1004C395C();
            unint64_t v68 = v67;
            swift_release();
            uint64_t v76 = sub_1003F11D4(v66, v68, (uint64_t *)&v78);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v75, v33 + 12);
            swift_release_n(v28, 2LL);
            swift_bridgeObjectRelease();
            uint64_t v38 = "Stop notifying: %s.";
            goto LABEL_26;
          }
        }

        swift_release_n(v28, 4LL);
      }

      else
      {
        if (qword_10099BA50 != -1) {
          swift_once(&qword_10099BA50, sub_1007C94A8);
        }
        sub_10000A720(v8, (uint64_t)qword_100A2B840);
        uint64_t v51 = v9;
        uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
        os_log_type_t v53 = static os_log_type_t.error.getter(v52);
        if (os_log_type_enabled(v52, v53))
        {
          unint64_t v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v72 = swift_slowAlloc(32LL, -1LL);
          uint64_t v78 = (void *)v72;
          *(_DWORD *)unint64_t v54 = 136315138;
          uint64_t v55 = v54 + 12;
          v70 = v54 + 4;
          uint64_t v71 = v54;
          id v56 = [v51 UUID];
          uint64_t v57 = v73;
          sub_100598998();

          uint64_t v58 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v59 = v75;
          uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v75, v58);
          unint64_t v62 = v61;
          (*(void (**)(char *, uint8_t *))(v74 + 8))(v57, v59);
          uint64_t v76 = sub_1003F11D4(v60, v62, (uint64_t *)&v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v70, v55);

          swift_bridgeObjectRelease();
          v63 = v71;
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "Could not find Characteristic for: %s", v71, 0xCu);
          uint64_t v64 = v72;
          swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v64, -1LL, -1LL);
          swift_slowDealloc(v63, -1LL, -1LL);

          swift_release_n(v25, 2LL);
          return;
        }
      }

      swift_release_n(v25, 2LL);
    }

    else
    {
      if (qword_10099BA50 != -1) {
        swift_once(&qword_10099BA50, sub_1007C94A8);
      }
      sub_10000A720(v8, (uint64_t)qword_100A2B840);
      id v39 = v20;
      uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
      os_log_type_t v41 = static os_log_type_t.error.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        unint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v43 = swift_slowAlloc(32LL, -1LL);
        uint64_t v78 = (void *)v43;
        *(_DWORD *)unint64_t v42 = 136315138;
        uint64_t v72 = (uint64_t)(v42 + 4);
        id v44 = [v39 UUID];
        os_log_type_t v45 = v73;
        sub_100598998();

        uint64_t v46 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v47 = v75;
        uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v75, v46);
        unint64_t v50 = v49;
        (*(void (**)(char *, uint8_t *))(v74 + 8))(v45, v47);
        uint64_t v76 = sub_1003F11D4(v48, v50, (uint64_t *)&v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v72, v42 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Could not find Service for: %s", v42, 0xCu);
        swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1LL, -1LL);
        swift_slowDealloc(v42, -1LL, -1LL);
      }

      else
      {
      }
    }
  }

void sub_1004A7E8C(void *a1)
{
  if (qword_10099BA58 != -1) {
    swift_once(&qword_10099BA58, sub_1007C94D4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2B858);
  id v9 = a1;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v4 = static os_log_type_t.info.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    id v10 = v9;
    id v7 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    void *v6 = v9;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "peripheralIsReady: %@", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
  }

uint64_t sub_1004A803C@<X0>(void *a1@<X8>)
{
  return sub_1004A52A4(*(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_1004A8098, a1);
}

uint64_t sub_1004A805C@<X0>(void *a1@<X8>)
{
  return sub_1004A53BC(*(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_1004A807C, a1);
}

uint64_t sub_1004A807C(uint64_t a1)
{
  return sub_1006E21FC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1004A8098(uint64_t a1)
{
  return sub_1004A3ADC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1004A80B4@<X0>(void *a1@<X8>)
{
  return sub_1004A52A4(*(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_1004A8290, a1);
}

uint64_t sub_1004A80D4@<X0>(void *a1@<X8>)
{
  return sub_1004A53BC(*(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_1004A8278, a1);
}

uint64_t sub_1004A80F4@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  return sub_1004A54C8(v1, a1);
}

uint64_t sub_1004A810C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1004A8130()
{
}

uint64_t sub_1004A814C@<X0>(void *a1@<X8>)
{
  return sub_1004A481C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_1004A8164()
{
}

void sub_1004A8180()
{
}

uint64_t sub_1004A819C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1004A81C8(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_1004A81D0()
{
  unint64_t result = qword_1009C0F80;
  if (!qword_1009C0F80)
  {
    uint64_t v1 = sub_100004B78((uint64_t *)&unk_1009A6E10);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Future<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1009C0F80);
  }

  return result;
}

uint64_t sub_1004A821C()
{
  return sub_1004A35DC(*(char **)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1004A8238()
{
  return sub_1004A1F70(*(void *)(v0 + 16));
}

void sub_1004A8254(void *a1@<X8>)
{
}

uint64_t sub_1004A8278(uint64_t a1)
{
  return sub_1004A807C(a1) & 1;
}

uint64_t sub_1004A8290(uint64_t a1)
{
  return sub_1004A8098(a1) & 1;
}

void sub_1004A82A8( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  int v43 = a5;
  int v44 = a4;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v22 = Date.timeIntervalSinceReferenceDate.getter(v18);
  if (v22 < 0.0 || v22 > 4294967300.0)
  {
    uint64_t v24 = static os_log_type_t.error.getter(v21);
    unint64_t v25 = sub_1001B9018();
    uint64_t v26 = (void *)static OS_os_log.default.getter(v25);
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  v26,  "BeaconPayloadv1: Invalid timestamp",  34LL,  2LL,  _swiftEmptyArrayStorage);
    char v27 = 1;
LABEL_19:

    unint64_t v33 = sub_1004AADFC();
    uint64_t v34 = swift_allocError(&type metadata for BeaconPayloadv1.PayloadCreationError, v33, 0LL, 0LL);
    *uint64_t v35 = v27;
    swift_willThrow(v34);
    sub_100016F9C(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a3, v16);
    return;
  }

  if (a7 < -90.0 || a7 > 90.0 || a8 < -180.0 || a8 > 180.0)
  {
    uint64_t v31 = static os_log_type_t.error.getter(v21);
    unint64_t v32 = sub_1001B9018();
    uint64_t v26 = (void *)static OS_os_log.default.getter(v32);
    char v27 = 2;
    os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  v26,  "BeaconPayloadv1: Invalid coordinates",  36LL,  2LL,  _swiftEmptyArrayStorage);
    goto LABEL_19;
  }

  *a6 = a1;
  a6[1] = a2;
  uint64_t v36 = sub_10001736C(a1, a2);
  double v38 = Date.timeIntervalSinceReferenceDate.getter(v36);
  if ((~*(void *)&v38 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }

  if (v38 <= -1.0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  if (v38 >= 4294967300.0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  Date.init(timeIntervalSinceReferenceDate:)(v37);
  sub_100016F9C(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a3, v16);
  id v39 = (int *)type metadata accessor for BeaconPayloadv1(0LL);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))((char *)a6 + v39[5], v20, v16);
  *((_BYTE *)a6 + v39[6]) = v44;
  double v40 = a7 * 10000000.0;
  if ((~COERCE__INT64(a7 * 10000000.0) & 0x7FF0000000000000LL) == 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  if (v40 <= -2147483650.0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v40 >= 2147483650.0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  *(double *)((char *)a6 + v39[7]) = (double)(int)v40 / 10000000.0;
  double v41 = a8 * 10000000.0;
  if ((~COERCE__INT64(a8 * 10000000.0) & 0x7FF0000000000000LL) == 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  if (v41 <= -2147483650.0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  if (v41 < 2147483650.0)
  {
    *(double *)((char *)a6 + v39[8]) = (double)(int)v41 / 10000000.0;
    *(double *)((char *)a6 + v39[9]) = a9;
    *((_BYTE *)a6 + v39[10]) = v43;
    return;
  }

void sub_1004A8638(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_1004A869C
     + *((int *)qword_1004A8840 + (sub_100012ED8(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }

uint64_t sub_1004A86AC()
{
  uint64_t v5 = v2;
  __int16 v6 = v3;
  char v7 = BYTE2(v3);
  char v8 = BYTE3(v3);
  char v9 = BYTE4(v3);
  char v10 = BYTE5(v3);
  sub_10001736C(v1, v0);
  Data._Representation.append(contentsOf:)(&v5, (char *)&v5 + BYTE6(v3));
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v11);
}

void BeaconPayloadv1.init(using:data:advertisement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for BeaconPayloadv1(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  __asm { BR              X10 }

uint64_t sub_1004A88F4()
{
  if (BYTE6(v4) < 0x78uLL)
  {
    uint64_t result = sub_1004A9CC8(v7, v6, v4, v3, v2, v5);
    if (v1) {
      return result;
    }
    return sub_1004A9C84(v5, v0);
  }

  uint64_t result = sub_1004A9670(v7, v6, v4, v3, v2, v8);
  uint64_t v5 = v8;
  if (!v1) {
    return sub_1004A9C84(v5, v0);
  }
  return result;
}

uint64_t type metadata accessor for BeaconPayloadv1(uint64_t a1)
{
  uint64_t result = qword_1009AFB90;
  if (!qword_1009AFB90) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconPayloadv1);
  }
  return result;
}

uint64_t BeaconPayloadv1.encode()()
{
  uint64_t v2 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v57 = (void (*)(char *, void, uint64_t))sub_1004A9144();
  unint64_t v58 = v6;
  uint64_t v8 = *v0;
  unint64_t v7 = v0[1];
  id v56 = (void (*)(char *, uint64_t))objc_autoreleasePoolPush();
  sub_10001736C(v8, v7);
  sub_1004DFE7C(v8, v7);
  if (!v1)
  {
    uint64_t v11 = v9;
    os_log_type_t v53 = v0;
    uint64_t v54 = v3;
    uint64_t v55 = v5;
    sub_100016F9C(v8, v7);
    uint64_t v12 = sub_1004DDA84(v11, 0);
    unint64_t v14 = v13;
    CCECCryptorRelease(v11);
    uint64_t v29 = sub_10017D59C(v12, v14);
    unint64_t v31 = v30;
    sub_10001736C(v29, v30);
    uint64_t v52 = (unsigned int *)objc_autoreleasePoolPush();
    uint64_t v33 = (uint64_t)v57;
    unint64_t v32 = v58;
    sub_1004DEA64((uint64_t *)&v60);
    objc_autoreleasePoolPop(v52);
    sub_100016F9C(v29, v31);
    sub_100016F9C(v29, v31);
    uint64_t v51 = v61;
    uint64_t v52 = v60;
    objc_autoreleasePoolPop(v56);
    sub_100016F9C(v33, v32);
    __int128 v64 = xmmword_1007E4480;
    uint64_t v34 = v54;
    uint64_t v35 = v55;
    uint64_t v36 = *(void (**)(char *))(v54 + 104);
    LODWORD(v58) = enum case for HashAlgorithm.sha256(_:);
    v36(v55);
    uint64_t v37 = Data.hash(algorithm:)(v35, v8, v7);
    unint64_t v39 = v38;
    double v40 = *(void (**)(char *, uint64_t))(v34 + 8);
    v40(v35, v2);
    sub_1004A8638(v37, v39);
    sub_100016F9C(v37, v39);
    uint64_t v41 = type metadata accessor for BeaconPayloadv1(0LL);
    uint64_t v42 = v53;
    double v43 = Date.timeIntervalSinceReferenceDate.getter(v41);
    if ((~*(void *)&v43 & 0x7FF0000000000000LL) != 0)
    {
      if (v43 > -1.0)
      {
        id v56 = v40;
        uint64_t v57 = (void (*)(char *, void, uint64_t))v36;
        if (v43 < 4294967300.0)
        {
          unsigned int v59 = bswap32(v43);
          unint64_t v62 = &type metadata for UnsafeRawBufferPointer;
          v63 = &protocol witness table for UnsafeRawBufferPointer;
          uint64_t v60 = &v59;
          unint64_t v61 = (uint64_t *)&v60;
          int v44 = sub_100012ED8(&v60, (uint64_t)&type metadata for UnsafeRawBufferPointer);
          Data._Representation.append(contentsOf:)(*v44, v44[1]);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v60);
          LOBYTE(v59) = *((_BYTE *)v42 + *(int *)(v41 + 24));
          unint64_t v62 = &type metadata for UnsafeRawBufferPointer;
          v63 = &protocol witness table for UnsafeRawBufferPointer;
          uint64_t v60 = &v59;
          unint64_t v61 = (uint64_t *)((char *)&v59 + 1);
          os_log_type_t v45 = sub_100012ED8(&v60, (uint64_t)&type metadata for UnsafeRawBufferPointer);
          Data._Representation.append(contentsOf:)(*v45, v45[1]);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v60);
          unint64_t v47 = (unint64_t)v51;
          uint64_t v46 = (uint64_t)v52;
          sub_1004A8638((uint64_t)v52, (uint64_t)v51);
          uint64_t v48 = *v42;
          uint64_t v49 = v42[1];
          unint64_t v50 = v55;
          v57(v55, v58, v2);
          uint64_t v15 = Data.hash(algorithm:)(v50, v48, v49);
          v56(v50, v2);
          sub_100016F9C(v46, v47);
          return v15;
        }

uint64_t sub_1004A8EE4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004A8F24 + 4 * byte_100804A30[a1]))( 0x7369747265766461LL,  0xED0000746E656D65LL);
}

uint64_t sub_1004A8F24()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_1004A8F44()
{
  return 0x617461446174656DLL;
}

unint64_t sub_1004A8F5C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1004A8F78()
{
  return 0x656475746974616CLL;
}

uint64_t sub_1004A8F90()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_1004A8FAC()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1004A8FCC()
{
  return 0x737574617473LL;
}

void sub_1004A8FE0(char *a1)
{
}

void sub_1004A8FEC()
{
}

void sub_1004A8FF8(uint64_t a1)
{
}

void sub_1004A9000(uint64_t a1)
{
}

unint64_t sub_1004A9008@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1004AB0E8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004A9034@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1004A8EE4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t BeaconPayloadv1.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for BeaconPayloadv1(0LL) + 20);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t BeaconPayloadv1.metaData.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1(0LL) + 24));
}

double BeaconPayloadv1.latitude.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1(0LL) + 28));
}

double BeaconPayloadv1.longitude.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1(0LL) + 32));
}

double BeaconPayloadv1.horizontalAccuracy.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1(0LL) + 36));
}

uint64_t BeaconPayloadv1.status.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1(0LL) + 40));
}

uint64_t sub_1004A9144()
{
  __int128 v16 = xmmword_1007E4480;
  uint64_t v1 = type metadata accessor for BeaconPayloadv1(0LL);
  double v2 = *(double *)(v0 + *(int *)(v1 + 28)) * 10000000.0;
  if ((~*(void *)&v2 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v2 <= -2147483650.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v2 >= 2147483650.0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v3 = (int *)v1;
  LODWORD(v12) = bswap32((int)v2);
  unint64_t v14 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&__int128 v13 = &v12;
  *((void *)&v13 + 1) = (char *)&v12 + 4;
  uint64_t v4 = sub_100012ED8(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v4, v4[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  double v5 = *(double *)(v0 + v3[8]) * 10000000.0;
  if ((~*(void *)&v5 & 0x7FF0000000000000LL) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v5 <= -2147483650.0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }

  if (v5 >= 2147483650.0) {
    goto LABEL_13;
  }
  LODWORD(v12) = bswap32((int)v5);
  unint64_t v14 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&__int128 v13 = &v12;
  *((void *)&v13 + 1) = (char *)&v12 + 4;
  unint64_t v6 = sub_100012ED8(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v6, v6[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  uint64_t v12 = *(void *)(v0 + v3[9]);
  __int128 v13 = xmmword_100804A20;
  unint64_t v7 = sub_100041584();
  scale<A, B>(_:_:)( &v11,  &v12,  &v13,  &type metadata for UInt8,  &type metadata for Double,  v7,  &protocol witness table for Double,  &protocol witness table for Double);
  unint64_t v14 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&__int128 v13 = &v11;
  *((void *)&v13 + 1) = &v12;
  uint64_t v8 = sub_100012ED8(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v8, v8[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  LOBYTE(v12) = *(_BYTE *)(v0 + v3[10]);
  unint64_t v14 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&__int128 v13 = &v12;
  *((void *)&v13 + 1) = (char *)&v12 + 1;
  uint64_t v9 = sub_100012ED8(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v9, v9[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  return v16;
}

uint64_t sub_1004A93C4()
{
  __int128 v16 = xmmword_1007E4480;
  uint64_t v1 = type metadata accessor for BeaconPayloadV2(0LL);
  double v2 = *(double *)(v0 + *(int *)(v1 + 24)) * 10000000.0;
  if ((~*(void *)&v2 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v2 <= -2147483650.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v2 >= 2147483650.0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v3 = (int *)v1;
  LODWORD(v12) = bswap32((int)v2);
  unint64_t v14 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&__int128 v13 = &v12;
  *((void *)&v13 + 1) = (char *)&v12 + 4;
  uint64_t v4 = sub_100012ED8(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v4, v4[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  double v5 = *(double *)(v0 + v3[7]) * 10000000.0;
  if ((~*(void *)&v5 & 0x7FF0000000000000LL) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v5 <= -2147483650.0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }

  if (v5 >= 2147483650.0) {
    goto LABEL_13;
  }
  LODWORD(v12) = bswap32((int)v5);
  unint64_t v14 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&__int128 v13 = &v12;
  *((void *)&v13 + 1) = (char *)&v12 + 4;
  unint64_t v6 = sub_100012ED8(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v6, v6[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  uint64_t v12 = *(void *)(v0 + v3[8]);
  __int128 v13 = xmmword_100804A20;
  unint64_t v7 = sub_100041584();
  scale<A, B>(_:_:)( &v11,  &v12,  &v13,  &type metadata for UInt8,  &type metadata for Double,  v7,  &protocol witness table for Double,  &protocol witness table for Double);
  unint64_t v14 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&__int128 v13 = &v11;
  *((void *)&v13 + 1) = &v12;
  uint64_t v8 = sub_100012ED8(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v8, v8[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  LOBYTE(v12) = *(_BYTE *)(v0 + v3[9]);
  unint64_t v14 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(void *)&__int128 v13 = &v12;
  *((void *)&v13 + 1) = (char *)&v12 + 1;
  uint64_t v9 = sub_100012ED8(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v9, v9[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  return v16;
}

uint64_t sub_1004A9648()
{
  uint64_t result = BeaconPayloadv1.encode()();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1004A9670@<X0>( void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v17[11] = a6;
  uint64_t v12 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001736C(a2, a3);
  uint64_t v15 = Data.subObject<A>(range:)( &v18,  32LL,  36LL,  0LL,  a2,  a3,  &type metadata for UInt32,  &protocol witness table for UInt32);
  if (!v6)
  {
    v17[9] = a4;
    v17[10] = v12;
    Date.init(timeIntervalSinceReferenceDate:)(v15);
    Data.subObject<A>(range:)( &v18,  36LL,  37LL,  0LL,  a2,  a3,  &type metadata for UInt8,  &protocol witness table for UInt8);
    v17[7] = a1;
    v17[8] = a2;
    v17[5] = v14;
    v17[6] = a5;
    __asm { BR              X10 }
  }

  sub_100016F9C(a4, a5);
  sub_100016F9C(a2, a3);

  return sub_100016F9C(a2, a3);
}

uint64_t sub_1004A9C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconPayloadv1(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004A9CC8@<X0>( void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v17[11] = a6;
  uint64_t v12 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001736C(a2, a3);
  uint64_t v15 = Data.subObject<A>(range:)( &v18,  0LL,  4LL,  0LL,  a2,  a3,  &type metadata for UInt32,  &protocol witness table for UInt32);
  if (!v6)
  {
    v17[9] = a4;
    v17[10] = v12;
    Date.init(timeIntervalSinceReferenceDate:)(v15);
    Data.subObject<A>(range:)(&v18, 4LL, 5LL, 0LL, a2, a3, &type metadata for UInt8, &protocol witness table for UInt8);
    v17[7] = a1;
    v17[8] = a2;
    v17[5] = v14;
    v17[6] = a5;
    __asm { BR              X10 }
  }

  sub_100016F9C(a4, a5);
  sub_100016F9C(a2, a3);

  return sub_100016F9C(a2, a3);
}

void sub_1004AA2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

BOOL _s12searchpartyd15BeaconPayloadv1V2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v66 = (int *)type metadata accessor for BeaconPayloadv1(0LL);
  uint64_t v4 = __chkstk_darwin(v66);
  uint64_t v75 = (uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  v73 = (char *)&v66 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v72 = (char *)&v66 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v68 = (char *)&v66 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v67 = (uint64_t)&v66 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v71 = (char *)&v66 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v70 = (uint64_t)&v66 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v69 = (uint64_t)&v66 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  *(void *)&__int128 v74 = (char *)&v66 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v66 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v66 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v66 - v28;
  uint64_t v30 = *a1;
  unint64_t v31 = a1[1];
  uint64_t v33 = *a2;
  unint64_t v32 = a2[1];
  sub_10001736C(*a1, v31);
  sub_10001736C(v33, v32);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v30, v31);
  char v35 = v34;
  sub_100016F9C(v33, v32);
  uint64_t v36 = v30;
  uint64_t v37 = (uint64_t)a2;
  unint64_t v38 = v31;
  uint64_t v39 = (uint64_t)a1;
  sub_100016F9C(v36, v38);
  sub_1004AAE40((uint64_t)a1, (uint64_t)v29);
  sub_1004AAE40((uint64_t)a2, (uint64_t)v27);
  if ((v35 & 1) == 0)
  {
    sub_1004AAE84((uint64_t)v27);
    sub_1004AAE84((uint64_t)v29);
    sub_1004AAE40((uint64_t)a1, (uint64_t)v24);
    uint64_t v65 = (uint64_t)a2;
    uint64_t v43 = v74;
    sub_1004AAE40(v65, v74);
    goto LABEL_9;
  }

  double v40 = v66;
  char v41 = static Date.== infix(_:_:)(&v29[v66[5]], &v27[v66[5]]);
  sub_1004AAE84((uint64_t)v27);
  sub_1004AAE84((uint64_t)v29);
  sub_1004AAE40((uint64_t)a1, (uint64_t)v24);
  uint64_t v42 = (uint64_t)a2;
  uint64_t v43 = v74;
  sub_1004AAE40(v42, v74);
  if ((v41 & 1) == 0)
  {
LABEL_9:
    sub_1004AAE84(v43);
    sub_1004AAE84((uint64_t)v24);
    uint64_t v46 = v69;
    sub_1004AAE40((uint64_t)a1, v69);
    uint64_t v47 = v70;
    sub_1004AAE40(v37, v70);
    uint64_t v49 = (uint64_t)v72;
    uint64_t v48 = (uint64_t)v73;
    uint64_t v50 = (uint64_t)v71;
    goto LABEL_10;
  }

  int v44 = v24[v40[6]];
  sub_1004AAE84((uint64_t)v24);
  int v45 = *(unsigned __int8 *)(v43 + v40[6]);
  sub_1004AAE84(v43);
  uint64_t v46 = v69;
  sub_1004AAE40((uint64_t)a1, v69);
  uint64_t v47 = v70;
  sub_1004AAE40(v37, v70);
  uint64_t v49 = (uint64_t)v72;
  uint64_t v48 = (uint64_t)v73;
  uint64_t v50 = (uint64_t)v71;
  if (v44 != v45)
  {
LABEL_10:
    sub_1004AAE84(v47);
    sub_1004AAE84(v46);
    sub_1004AAE40(v39, v50);
    uint64_t v54 = v67;
    sub_1004AAE40(v37, v67);
    uint64_t v55 = (uint64_t)v68;
    goto LABEL_11;
  }

  uint64_t v51 = v66;
  double v52 = *(double *)(v46 + v66[7]);
  sub_1004AAE84(v46);
  double v53 = *(double *)(v47 + v51[7]);
  sub_1004AAE84(v47);
  sub_1004AAE40(v39, v50);
  uint64_t v54 = v67;
  sub_1004AAE40(v37, v67);
  uint64_t v55 = (uint64_t)v68;
  if (v52 != v53)
  {
LABEL_11:
    sub_1004AAE84(v54);
    sub_1004AAE84(v50);
    sub_1004AAE40(v39, v55);
    sub_1004AAE40(v37, v49);
    goto LABEL_12;
  }

  double v56 = *(double *)(v50 + v51[8]);
  sub_1004AAE84(v50);
  double v57 = *(double *)(v54 + v51[8]);
  sub_1004AAE84(v54);
  sub_1004AAE40(v39, v55);
  sub_1004AAE40(v37, v49);
  if (v56 != v57)
  {
LABEL_12:
    sub_1004AAE84(v49);
    sub_1004AAE84(v55);
    sub_1004AAE40(v39, v48);
    uint64_t v61 = v75;
    sub_1004AAE40(v37, v75);
    goto LABEL_13;
  }

  uint64_t v77 = *(void *)(v55 + v51[9]);
  __int128 v74 = xmmword_100804A20;
  __int128 v76 = xmmword_100804A20;
  uint64_t v58 = v55;
  unint64_t v59 = sub_100041584();
  scale<A, B>(_:_:)( &v78,  &v77,  &v76,  &type metadata for UInt8,  &type metadata for Double,  v59,  &protocol witness table for Double,  &protocol witness table for Double);
  int v60 = v78;
  uint64_t v77 = *(void *)(v49 + v51[9]);
  __int128 v76 = v74;
  scale<A, B>(_:_:)( &v78,  &v77,  &v76,  &type metadata for UInt8,  &type metadata for Double,  v59,  &protocol witness table for Double,  &protocol witness table for Double);
  LODWORD(v59) = v78;
  sub_1004AAE84(v49);
  sub_1004AAE84(v58);
  sub_1004AAE40(v39, v48);
  uint64_t v61 = v75;
  sub_1004AAE40(v37, v75);
  if (v60 == (_DWORD)v59)
  {
    unint64_t v62 = v66;
    int v63 = *(unsigned __int8 *)(v48 + v66[10]);
    sub_1004AAE84(v48);
    LODWORD(v62) = *(unsigned __int8 *)(v61 + v62[10]);
    sub_1004AAE84(v61);
    return v63 == (_DWORD)v62;
  }

uint64_t *initializeBufferWithCopyOfBuffer for BeaconPayloadv1(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    uint64_t v13 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v14 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  }

  return a1;
}

uint64_t destroy for BeaconPayloadv1(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *initializeWithCopy for BeaconPayloadv1(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t *assignWithCopy for BeaconPayloadv1(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_OWORD *initializeWithTake for BeaconPayloadv1(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t *assignWithTake for BeaconPayloadv1(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconPayloadv1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004AAC58);
}

uint64_t sub_1004AAC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for BeaconPayloadv1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004AACEC);
}

char *sub_1004AACEC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1004AAD68(uint64_t a1)
{
  v4[0] = &unk_100804AE8;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int8 + 64;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_1004AADFC()
{
  unint64_t result = qword_1009AFBE0;
  if (!qword_1009AFBE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804C5C, &type metadata for BeaconPayloadv1.PayloadCreationError);
    atomic_store(result, (unint64_t *)&qword_1009AFBE0);
  }

  return result;
}

uint64_t sub_1004AAE40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconPayloadv1(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004AAE84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconPayloadv1(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadv1.PayloadCreationError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1004AAF0C + 4 * byte_100804A3D[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1004AAF40 + 4 * byte_100804A38[v4]))();
}

uint64_t sub_1004AAF40(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004AAF48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004AAF50LL);
  }
  return result;
}

uint64_t sub_1004AAF5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004AAF64LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1004AAF68(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004AAF70(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadv1.PayloadCreationError()
{
  return &type metadata for BeaconPayloadv1.PayloadCreationError;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadv1.EncodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1004AAFD8 + 4 * byte_100804A47[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1004AB00C + 4 * byte_100804A42[v4]))();
}

uint64_t sub_1004AB00C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004AB014(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004AB01CLL);
  }
  return result;
}

uint64_t sub_1004AB028(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004AB030LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1004AB034(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004AB03C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadv1.EncodingKeys()
{
  return &type metadata for BeaconPayloadv1.EncodingKeys;
}

unint64_t sub_1004AB05C()
{
  unint64_t result = qword_1009AFBE8;
  if (!qword_1009AFBE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804BCC, &type metadata for BeaconPayloadv1.EncodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AFBE8);
  }

  return result;
}

unint64_t sub_1004AB0A4()
{
  unint64_t result = qword_1009AFBF0;
  if (!qword_1009AFBF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100804C34, &type metadata for BeaconPayloadv1.PayloadCreationError);
    atomic_store(result, (unint64_t *)&qword_1009AFBF0);
  }

  return result;
}

unint64_t sub_1004AB0E8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100934BE0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8) {
    return 8LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1004AB130@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A0BB8(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1004AB15C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1008050E0);
  sub_1006A1FC0(KeyPath, v3, a2);
  return swift_release();
}

void sub_1004AB1A4()
{
  __asm { BR              X11 }

uint64_t sub_1004AB1E4@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (BYTE6(a2) != 6LL)
  {
    if ((_DWORD)a3 == 1)
    {
      LODWORD(a3) = HIDWORD(result) - result;
      if (!__OFSUB__(HIDWORD(result), (_DWORD)result)) {
        goto LABEL_11;
      }
      __break(1u);
    }

    if ((_DWORD)a3 != 2)
    {
      uint64_t v6 = BYTE6(a2);
      goto LABEL_13;
    }

    a3 = *(void *)(result + 16);
    uint64_t v4 = *(void *)(result + 24);
    BOOL v5 = __OFSUB__(v4, a3);
    uint64_t v6 = v4 - a3;
    if (!v5) {
      goto LABEL_13;
    }
    __break(1u);
LABEL_11:
    uint64_t v6 = (int)a3;
LABEL_13:
    uint64_t v8 = result;
    uint64_t v9 = v6;
    unint64_t v10 = sub_100117AD0();
    uint64_t v11 = swift_allocError(&type metadata for KeyRepresentableError, v10, 0LL, 0LL);
    *(void *)uint64_t v12 = 6LL;
    *(void *)(v12 + 8) = v9;
    *(_BYTE *)(v12 + 16) = 0;
    swift_willThrow(v11);
    sub_100016F9C(v8, a2);
    swift_unexpectedError(v11, "searchpartyd/KeyRepresentable.swift", 35LL, 1LL, 51LL);
    __break(1u);
    JUMPOUT(0x1004AB2E4LL);
  }

  *uint64_t v3 = result;
  v3[1] = a2;
  return result;
}

void sub_1004AB2F4()
{
  __asm { BR              X11 }

uint64_t sub_1004AB334@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (BYTE6(a2) != 32LL)
  {
    if ((_DWORD)a3 == 1)
    {
      LODWORD(a3) = HIDWORD(result) - result;
      if (!__OFSUB__(HIDWORD(result), (_DWORD)result)) {
        goto LABEL_11;
      }
      __break(1u);
    }

    if ((_DWORD)a3 != 2)
    {
      uint64_t v6 = BYTE6(a2);
      goto LABEL_13;
    }

    a3 = *(void *)(result + 16);
    uint64_t v4 = *(void *)(result + 24);
    BOOL v5 = __OFSUB__(v4, a3);
    uint64_t v6 = v4 - a3;
    if (!v5) {
      goto LABEL_13;
    }
    __break(1u);
LABEL_11:
    uint64_t v6 = (int)a3;
LABEL_13:
    uint64_t v8 = result;
    uint64_t v9 = v6;
    unint64_t v10 = sub_100117AD0();
    uint64_t v11 = swift_allocError(&type metadata for KeyRepresentableError, v10, 0LL, 0LL);
    *(void *)uint64_t v12 = 32LL;
    *(void *)(v12 + 8) = v9;
    *(_BYTE *)(v12 + 16) = 0;
    swift_willThrow(v11);
    sub_100016F9C(v8, a2);
    swift_unexpectedError(v11, "searchpartyd/KeyRepresentable.swift", 35LL, 1LL, 51LL);
    __break(1u);
    JUMPOUT(0x1004AB434LL);
  }

  *uint64_t v3 = result;
  v3[1] = a2;
  return result;
}

Swift::Int sub_1004AB444(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for KeySyncMetadataDisplay(0LL) - 8);
  uint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = (void *)sub_1003D4B2C(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1004B84B4(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1004AB4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a1, (uint64_t)v8, &qword_1009A9BF0);
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9);
  if ((_DWORD)v11 == 1)
  {
    sub_100015794((uint64_t)v8, &qword_1009A9BF0);
    uint64_t v12 = 4096LL;
    uint64_t v13 = *(void *)(a3 + 16);
    if (!v13)
    {
LABEL_6:
      uint64_t v19 = 0LL;
      return swift_task_create(v12, v19, (char *)&type metadata for () + 8, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    uint64_t v12 = v20 | 0x1000LL;
    uint64_t v13 = *(void *)(a3 + 16);
    if (!v13) {
      goto LABEL_6;
    }
  }

  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v13);
  swift_unknownObjectRetain(v13);
  uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
  uint64_t v18 = v17;
  swift_unknownObjectRelease(v13);
  if (!(v18 | v16)) {
    goto LABEL_6;
  }
  v22[0] = 0LL;
  v22[1] = 0LL;
  uint64_t v19 = v22;
  v22[2] = v16;
  v22[3] = v18;
  return swift_task_create(v12, v19, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_1004AB644(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2AB00, 0x63536E6F63616562LL, 0xEE00676E696E6E61LL);
}

uint64_t sub_1004AB670(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1004AB6AC + 4 * byte_100804CA0[a1]))( 0xD00000000000002BLL,  0x800000010084FE20LL);
}

unint64_t sub_1004AB6AC()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_1004AB6F4()
{
  return v0 + 12;
}

void sub_1004AB704()
{
}

uint64_t sub_1004AB71C(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2AB18, 0xD000000000000014LL, 0x80000001008644B0LL);
}

void sub_1004AB740(char *a1)
{
}

void sub_1004AB74C()
{
}

void sub_1004AB758(uint64_t a1)
{
}

void sub_1004AB760(uint64_t a1)
{
}

unint64_t sub_1004AB768@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1004BB07C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004AB794@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1004AB670(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_1004AB7BC()
{
  __int16 v1 = *(void **)(v0 + 248);
  if (v1)
  {
    id v2 = *(id *)(v0 + 248);
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 256);
    v11[4] = &off_10094CEB8;
    v11[5] = &off_10095ECF8;
    v11[6] = &off_10095EC78;
    v11[7] = &off_10093D310;
    v11[8] = &off_10095EC90;
    v11[9] = &off_100973028;
    v11[10] = &off_1009454E0;
    v11[11] = &off_10093F828;
    v11[12] = &off_10095CED8;
    v11[13] = &off_1009777F0;
    v11[3] = type metadata accessor for BeaconManagerService(0LL);
    v11[0] = v0;
    uint64_t v4 = (objc_class *)type metadata accessor for BeaconManagerTrampoline();
    BOOL v5 = (char *)objc_allocWithZone(v4);
    sub_1003525CC((uint64_t)v11, (uint64_t)&v5[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation]);
    *(void *)&v5[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_beaconStore] = v3;
    v10.receiver = v5;
    v10.super_class = v4;
    swift_retain();
    swift_retain();
    id v6 = objc_msgSendSuper2(&v10, "init");
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
    uint64_t v7 = *(void **)(v0 + 248);
    *(void *)(v0 + 248) = v6;
    id v2 = v6;

    __int16 v1 = 0LL;
  }

  id v8 = v1;
  return v2;
}

void *sub_1004AB8FC()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___handlers;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___handlers);
  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___handlers);
  }

  else
  {
    uint64_t v3 = sub_1004AB960(v0);
    *(void *)(v0 + v1) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease();
    uint64_t v2 = 0LL;
  }

  swift_bridgeObjectRetain(v2);
  return v3;
}

void *sub_1004AB960(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPEvaluateLocalBeaconingNotification);
  uint64_t v4 = v3;
  uint64_t v5 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
  swift_weakInit(v5 + 16, a1);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10005BCB8((uint64_t)sub_1004BD980, v5, v2, v4, isUniquelyReferenced_nonNull_native);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(FAFamilyUpdateNotification);
  uint64_t v9 = v8;
  uint64_t v10 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
  swift_weakInit(v10 + 16, a1);
  swift_retain();
  char v11 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10005BCB8((uint64_t)sub_1004BD9A0, v10, v7, v9, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKIdentityUpdateNotification);
  uint64_t v14 = v13;
  uint64_t v15 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
  swift_weakInit(v15 + 16, a1);
  swift_retain();
  char v16 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10005BCB8((uint64_t)sub_1004BD980, v15, v12, v14, v16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
  swift_weakInit(v17 + 16, a1);
  swift_retain();
  char v18 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10005BCB8((uint64_t)sub_1004BD980, v17, 0xD000000000000021LL, 0x800000010084DB20LL, v18);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v19 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
  swift_weakInit(v19 + 16, a1);
  swift_retain();
  char v20 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10005BCB8((uint64_t)sub_1004BD980, v19, 0xD000000000000019LL, 0x800000010084DB50LL, v20);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(RTLocationsOfInterestDidChangeNotification);
  uint64_t v23 = v22;
  uint64_t v24 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
  swift_weakInit(v24 + 16, a1);
  swift_retain();
  char v25 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10005BCB8((uint64_t)sub_1004BD9A8, v24, v21, v23, v25);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyDictionarySingleton;
}

uint64_t sub_1004ABCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B088 != -1) {
    swift_once(&qword_10099B088, sub_1000432EC);
  }
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100153690,  0LL,  qword_10099DF60,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  swift_beginAccess(a2 + 16, v23, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2 + 16);
  if (result)
  {
    id v12 = *(id *)(result + 56);
    swift_release();
    aBlock[4] = sub_1004BD9B0;
    aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_10095F3D8;
    uint64_t v13 = _Block_copy(aBlock);
    uint64_t v14 = swift_retain();
    static DispatchQoS.unspecified.getter(v14);
    uint64_t v21 = _swiftEmptyArrayStorage;
    uint64_t v15 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v20 = v7;
    uint64_t v16 = v4;
    uint64_t v17 = v15;
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v19 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v18, v19, v3, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v13);
    _Block_release(v13);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
    return swift_release();
  }

  return result;
}

uint64_t sub_1004ABF20(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_1004B1D44();
    return swift_release();
  }

  return result;
}

uint64_t sub_1004ABF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = static os_log_type_t.default.getter(result);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  qword_100A2B008,  "Self-Beacon State changed",  25LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing", 60LL, 2LL, a3);
    return swift_release();
  }

  return result;
}

uint64_t sub_1004AC068(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_1004B2100();
    return swift_release();
  }

  return result;
}

void *sub_1004AC0BC()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___unauthorizedTracking;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___unauthorizedTracking))
  {
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___unauthorizedTracking);
  }

  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = *(void *)(v0 + 256);
    uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_accessoryMetadataManager);
    uint64_t v6 = type metadata accessor for UnauthorizedTracking();
    swift_allocObject(v6, 48LL, 7LL);
    swift_retain();
    swift_retain();
    uint64_t v2 = sub_100340F80(v4, v5);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }

  swift_retain();
  return v2;
}

uint64_t sub_1004AC168()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___maskedIdentifierService;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___maskedIdentifierService))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___maskedIdentifierService);
  }

  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = type metadata accessor for MaskedIdentifierService();
    swift_allocObject(v4, 56LL, 7LL);
    uint64_t v5 = swift_retain();
    uint64_t v2 = sub_1006AC144(v5);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }

  swift_retain();
  return v2;
}

uint64_t sub_1004AC1F4()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___accessoryPairingValidator;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___accessoryPairingValidator))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___accessoryPairingValidator);
  }

  else
  {
    uint64_t v3 = type metadata accessor for AccessoryPairingValidator();
    uint64_t v2 = swift_allocObject(v3, 24LL, 7LL);
    uint64_t v4 = type metadata accessor for DeviceIdentityUtility(0LL);
    uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    swift_defaultActor_initialize(v5);
    uint64_t v6 = v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
    uint64_t v7 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
    *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0LL;
    *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
    *(_BYTE *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 9;
    *(void *)(v2 + 16) = v5;
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }

  swift_retain();
  return v2;
}

uint64_t (*sub_1004AC2EC())@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v1 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>))((char *)v0
                                                                              + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock);
  uint64_t v2 = *(void *)((char *)v0
                 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock);
  uint64_t v3 = *(void *)((char *)v0
                 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock
                 + 8);
  if (v2)
  {
    uint64_t v4 = *(uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>))((char *)v0
                                                                                 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock);
  }

  else
  {
    uint64_t v4 = sub_1004BD978;
    *uint64_t v1 = sub_1004BD978;
    v1[1] = v0;
    swift_retain_n(v0, 2LL);
    sub_10002214C(0LL, v3);
  }

  sub_1000372DC(v2, v3);
  return v4;
}

uint64_t sub_1004AC364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DateInterval(0LL);
  uint64_t v57 = *(void *)(v15 - 8);
  uint64_t v58 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_group_t v18 = dispatch_group_create();
  uint64_t v19 = *(void *)(a3 + 256);
  sub_100504C28(a1, (uint64_t)&v59);
  if (!v60)
  {

    sub_100015794((uint64_t)&v59, (uint64_t *)&unk_1009A9C40);
    uint64_t v33 = type metadata accessor for TimeBasedKey(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))( a4,  1LL,  1LL,  v33);
  }

  dispatch_group_t v56 = v18;
  sub_100012EC0(&v59, (uint64_t)v61);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  DateInterval.init(start:duration:)(v14, 1.0);
  uint64_t v20 = v62;
  uint64_t v21 = v63;
  uint64_t v22 = sub_100012ED8(v61, v62);
  uint64_t v23 = sub_10054CE6C((uint64_t)v22, (uint64_t)v17, 0, 1, 0, v19, v20, v21);
  uint64_t v25 = v23;
  uint64_t v27 = v26;
  if (v24)
  {
    if (v24 != 1)
    {
      uint64_t v40 = static os_log_type_t.default.getter(v23);
      if (qword_10099B6F8 != -1) {
        swift_once(&qword_10099B6F8, sub_100651098);
      }
      uint64_t v41 = qword_100A2B008;
      uint64_t v42 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v43 = swift_allocObject(v42, 72LL, 7LL);
      *(_OWORD *)(v43 + 16) = xmmword_1007E67D0;
      uint64_t v44 = v62;
      uint64_t v45 = v63;
      sub_100012ED8(v61, v62);
      uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v45 + 8) + 8LL) + 32LL))(v44);
      uint64_t v47 = UUID.uuidString.getter(v46);
      uint64_t v49 = v48;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v10, v55);
      *(void *)(v43 + 56) = &type metadata for String;
      *(void *)(v43 + 64) = sub_1000226F4();
      *(void *)(v43 + 32) = v47;
      *(void *)(v43 + 40) = v49;
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t))(v57 + 8))(v17, v58);
      uint64_t v50 = type metadata accessor for TimeBasedKey(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56LL))(a4, 1LL, 1LL, v50);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
    }

    uint64_t v28 = *(void *)(v23 + 16);
    uint64_t v29 = type metadata accessor for TimeBasedKey(0LL);
    uint64_t v30 = *(void *)(v29 - 8);
    if (v28)
    {
      uint64_t v31 = a4;
      sub_10001DC4C( v25 + ((*(unsigned __int8 *)(v30 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80)),  a4,  type metadata accessor for TimeBasedKey);
      uint64_t v32 = 0LL;
    }

    else
    {
      uint64_t v32 = 1LL;
      uint64_t v31 = a4;
    }

    dispatch_group_t v51 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v31, v32, 1LL, v29);

    sub_100117B2C(v25, v27, 1);
  }

  else
  {
    uint64_t v35 = *(void *)(v23 + 16);
    uint64_t v36 = type metadata accessor for TimeBasedKey(0LL);
    uint64_t v37 = *(void *)(v36 - 8);
    if (v35)
    {
      uint64_t v38 = a4;
      sub_10001DC4C( v25 + ((*(unsigned __int8 *)(v37 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80)),  a4,  type metadata accessor for TimeBasedKey);
      uint64_t v39 = 0LL;
    }

    else
    {
      uint64_t v39 = 1LL;
      uint64_t v38 = a4;
    }

    dispatch_group_t v52 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v38, v39, 1LL, v36);
    swift_bridgeObjectRetain(v25);

    sub_100117B2C(v25, v27, 0);
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v57 + 8))(v17, v58);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
}

uint64_t sub_1004AC784()
{
  uint64_t v1 = v0;
  type metadata accessor for Transaction(0LL);
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.beaconmanagerservice.startup",  58LL,  2LL,  sub_1004BCF0C);
  uint64_t v2 = sub_1005F955C();
  uint64_t result = static SystemInfo.isInternalBuild.getter(v2);
  if ((result & 1) != 0)
  {
    uint64_t v4 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
    swift_weakInit(v4 + 16, v1);
    uint64_t v5 = type metadata accessor for StateCapture(0LL);
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_keySyncMetadataStateCapture) = StateCapture.init(_:)(&unk_1009B0620, v4);
    return swift_release();
  }

  return result;
}

uint64_t sub_1004AC87C(void *a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v2);
  uint64_t v41 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_1009B0678);
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v47 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = a1[6];
  aBlock[4] = sub_1004BD00C;
  aBlock[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10095F1D0;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v49 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v16 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v15, v16, v6, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v46);
  uint64_t result = swift_release();
  uint64_t v18 = a1[5];
  if (v18)
  {
    aBlock[0] = *(void *)(v18 + 336);
    swift_retain();
    swift_retain();
    uint64_t v19 = sub_100004AEC(&qword_1009B0680);
    uint64_t v20 = sub_1000372EC( &qword_1009B0688,  &qword_1009B0680,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v21 = Publisher<>.sink(receiveValue:)(sub_1004BD014, a1, v19, v20);
    swift_release();
    swift_release();
    *(void *)((char *)a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_messagingDevicesChangedSubscription) = v21;
    swift_release();
    aBlock[0] = *(void *)(a1[32] + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher);
    uint64_t v22 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
    swift_weakInit(v22 + 16, a1);
    swift_retain();
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009B0690);
    uint64_t v24 = sub_1000372EC( (unint64_t *)&unk_1009AE5C0,  (uint64_t *)&unk_1009B0690,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v25 = Publisher<>.sink(receiveValue:)(sub_1004BD038, v22, v23, v24);
    swift_release();
    swift_release();
    *(void *)((char *)a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_recordDeletedSubscription) = v25;
    swift_release();
    uint64_t v26 = *(void *)((char *)a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_classicPairingSupport);
    aBlock[0] = *(void *)((char *)a1
                          + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedSubject);
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009B06A0);
    uint64_t v28 = sub_1000372EC( &qword_1009AE5D0,  (uint64_t *)&unk_1009B06A0,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    aBlock[0] = Publisher.eraseToAnyPublisher()(v27, v28);
    uint64_t v49 = *(void **)(v26 + 48);
    id v29 = v49;
    uint64_t v30 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
    uint64_t v31 = (uint64_t)v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v41, 1LL, 1LL, v30);
    id v32 = v29;
    uint64_t v33 = sub_100004AEC(&qword_1009B06B0);
    uint64_t v34 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v35 = sub_1000372EC( &qword_1009B06B8,  &qword_1009B06B0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    unint64_t v36 = sub_1004BD040();
    uint64_t v37 = v42;
    Publisher.receive<A>(on:options:)(&v49, v31, v33, v34, v35, v36);
    sub_100015794(v31, &qword_1009B0670);

    uint64_t v38 = sub_1000372EC( &qword_1009B06C8,  &qword_1009B0678,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    swift_retain();
    uint64_t v39 = v44;
    uint64_t v40 = Publisher<>.sink(receiveValue:)(sub_1004BD098, v26, v44, v38);
    swift_release();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v39);
    *(void *)(v26 + 152) = v40;
    swift_release();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1004ACDB8(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v2);
  v165 = (char *)&v162 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v166 = sub_100004AEC(&qword_1009B06D0);
  uint64_t v164 = *(void *)(v166 - 8);
  __chkstk_darwin(v166);
  v163 = (char *)&v162 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v169 = sub_100004AEC(&qword_1009B06D8);
  uint64_t v168 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  v167 = (char *)&v162 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v191 = type metadata accessor for XPCServiceDescription(0LL);
  uint64_t v184 = *(void *)(v191 - 8);
  uint64_t v6 = __chkstk_darwin(v191);
  v183 = (char *)&v162 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  v187 = (char *)&v162 - v8;
  uint64_t v186 = type metadata accessor for MachServiceName(0LL);
  v189 = *(void (**)(char *, uint64_t))(v186 - 8);
  uint64_t v9 = __chkstk_darwin(v186);
  v182 = (char *)&v162 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  v185 = (char *)&v162 - v12;
  __chkstk_darwin(v11);
  v190 = (char *)&v162 - v13;
  v188 = (void (*)(char *, char *, uint64_t))sub_100004AEC((uint64_t *)&unk_1009A0850);
  v181 = (void (**)(void, void))*((void *)v188 - 1);
  __chkstk_darwin(v188);
  uint64_t v180 = (uint64_t)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A0CB0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v179 = (uint64_t)&v162 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v178 = (uint64_t)&v162 - v18;
  uint64_t v19 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v19);
  v177 = (char *)&v162 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v176 = type metadata accessor for URL(0LL);
  uint64_t v175 = *(void *)(v176 - 8);
  uint64_t v21 = __chkstk_darwin(v176);
  uint64_t v173 = (uint64_t)&v162 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  v174 = (char *)&v162 - v23;
  uint64_t v24 = type metadata accessor for BeaconPayloadFileManager(0LL);
  __chkstk_darwin(v24);
  uint64_t v26 = (uint64_t *)((char *)&v162 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v172 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  id v29 = (char *)&v162 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v171 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v170 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  uint64_t v31 = (char *)&v162 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v162 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v33 + 104))( v35,  enum case for DispatchQoS.QoSClass.default(_:),  v32);
  uint64_t v162 = v36;
  uint64_t v37 = (void *)static OS_dispatch_queue.global(qos:)(v35);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
  v196 = sub_1004AE3FC;
  uint64_t v197 = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1001C31E8;
  v195 = (ValueMetadata *)&unk_10095F1F8;
  uint64_t v38 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v38);
  v193[0] = _swiftEmptyArrayStorage;
  uint64_t v39 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v41 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v193, v40, v41, v27, v39);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v31, v29, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v172 + 8))(v29, v27);
  (*(void (**)(char *, uint64_t))(v170 + 8))(v31, v171);
  uint64_t v42 = *(char **)(a1 + 256);
  sub_1004F8368();
  sub_10012F398();
  sub_10014CE00();
  uint64_t v43 = v173;
  sub_100650C80(v173);
  uint64_t v44 = (uint64_t)v174;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012LL, 0x8000000100852B20LL, 1LL);
  (*(void (**)(uint64_t, uint64_t))(v175 + 8))(v43, v176);
  sub_10074C740(v44, v26);
  sub_10074CA94((uint64_t)sub_1004B0310, 0LL);
  uint64_t v45 = sub_100018C68((uint64_t)v26, type metadata accessor for BeaconPayloadFileManager);
  uint64_t v46 = static os_log_type_t.default.getter(v45);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v47 = os_log(_:dso:log:_:_:)( v46,  &_mh_execute_header,  qword_100A2B008,  "Checking-in for com.apple.icloud.searchpartyuseragent.post-install.",  67LL,  2LL,  _swiftEmptyArrayStorage);
  static DispatchQoS.background.getter(v47);
  uint64_t v48 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
  swift_weakInit(v48 + 16, a1);
  uint64_t v49 = type metadata accessor for XPCActivity();
  swift_allocObject(v49, 112LL, 7LL);
  uint64_t v50 = sub_10045AD78( 0xD000000000000032LL,  (void *)0x8000000100864970LL,  (uint64_t)v31,  (uint64_t)sub_1004AE4D0,  0LL,  (uint64_t)sub_1004BD0A0,  v48);
  swift_release();
  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_checkInPostInstallXPCActivity) = v50;
  swift_release();
  dispatch_group_t v51 = sub_1004AB8FC();
  uint64_t v52 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_darwinHelper) = DarwinNotificationHelper.init(notificationHandlers:)(v51);
  uint64_t v53 = swift_release();
  uint64_t v54 = static os_log_type_t.default.getter(v53);
  os_log(_:dso:log:_:_:)( v54,  &_mh_execute_header,  qword_100A2B008,  "BeaconManagerService darwin handlers set",  40LL,  2LL,  _swiftEmptyArrayStorage);
  sub_1004AC168();
  swift_release();
  sub_1005F9108();
  sub_1004F7700();
  uint64_t v55 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locationFetchService);
  aBlock[0] = *(id *)&v42[OBJC_IVAR____TtC12searchpartyd11BeaconStore_estimatedLocationSubject];
  uint64_t v56 = sub_100004AEC(&qword_1009B06E0);
  uint64_t v57 = sub_1000372EC( &qword_1009B06E8,  &qword_1009B06E0,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  aBlock[0] = (id)Publisher.eraseToAnyPublisher()(v56, v57);
  uint64_t v58 = swift_allocObject(&unk_10095F230, 24LL, 7LL);
  swift_weakInit(v58 + 16, v55);
  uint64_t v59 = swift_allocObject(&unk_10095F258, 32LL, 7LL);
  *(void *)(v59 + 16) = sub_1004BD0A8;
  *(void *)(v59 + 24) = v58;
  uint64_t v60 = sub_100004AEC(&qword_1009B06F0);
  uint64_t v61 = sub_1000372EC( &qword_1009B06F8,  &qword_1009B06F0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v62 = Publisher<>.sink(receiveValue:)(sub_1004BD0D4, v59, v60, v61);
  swift_release();
  v55[21] = v62;
  swift_release();
  swift_release();
  uint64_t v63 = type metadata accessor for TaskPriority(0LL);
  uint64_t v64 = (uint64_t)v177;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56LL))(v177, 1LL, 1LL, v63);
  uint64_t v65 = (void *)swift_allocObject(&unk_10095F280, 40LL, 7LL);
  v65[2] = 0LL;
  v65[3] = 0LL;
  v65[4] = v55;
  swift_retain();
  sub_1004AB4C4(v64, (uint64_t)&unk_1009B0700, (uint64_t)v65);
  swift_release();
  sub_100015794(v64, &qword_1009A9BF0);
  uint64_t v66 = v55[14];
  uint64_t v67 = v55[15];
  v55[14] = &unk_1009B0710;
  v55[15] = a1;
  swift_retain();
  sub_10002214C(v66, v67);
  unint64_t v68 = *(void **)(a1 + 264);
  if (v68)
  {
    id v69 = v68;
    dispatch thunk of UserDefaultsObserver.start()();
  }

  uint64_t v70 = v186;
  uint64_t v72 = v189;
  uint64_t v71 = v190;
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  v177 = v42;
  uint64_t v73 = type metadata accessor for BeaconManagerService(0LL);
  v195 = (ValueMetadata *)v73;
  v196 = (uint64_t (*)())&off_10095EC68;
  aBlock[0] = (id)a1;
  swift_retain();
  uint64_t v74 = v178;
  sub_100031AEC((uint64_t)aBlock, v178);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  uint64_t v75 = sub_100004AEC(&qword_1009A0840);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56LL))(v74, 0LL, 1LL, v75);
  uint64_t v76 = v74;
  uint64_t v77 = v179;
  sub_100015750(v76, v179, &qword_1009A0CB0);
  uint64_t v78 = a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_configSubscription;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_configSubscription, aBlock, 33LL, 0LL);
  sub_1004BD1F0(v77, v78);
  swift_endAccess(aBlock);
  v195 = (ValueMetadata *)v73;
  v196 = (uint64_t (*)())&off_10095EC50;
  aBlock[0] = (id)a1;
  swift_retain();
  uint64_t v79 = v180;
  sub_1001BFAC0((uint64_t)aBlock, v180);
  ((void (**)(uint64_t, void (*)(char *, char *, uint64_t)))v181)[1](v79, v188);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  type metadata accessor for Transaction(0LL);
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing",  60LL,  2LL,  sub_100153838);
  sub_1004B1470();
  MachServiceName.init(_:)(0xD00000000000002BLL, 0x800000010084FE20LL);
  v80 = v185;
  v81 = (void (*)(char *, char *, uint64_t))*((void *)v72 + 2);
  v81(v185, v71, v70);
  id v82 = sub_1004AB7BC();
  if (qword_10099B4E0 != -1) {
    swift_once(&qword_10099B4E0, sub_1004B05B8);
  }
  v83 = (void *)qword_1009AFC00;
  swift_retain();
  id v84 = v83;
  v85 = v187;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v80,  0LL,  v82,  v84,  sub_1004BD238,  a1,  0LL,  0LL,  0LL,  0LL);
  uint64_t v180 = *(void *)(a1 + 240);
  XPCSessionManager.register(service:)(v85);
  MachServiceName.init(_:)(0xD000000000000038LL, 0x80000001008649E0LL);
  v181 = (void (**)(void, void))objc_opt_self(&OBJC_CLASS___NSXPCInterface);
  id v86 = [v181 interfaceWithProtocol:&OBJC_PROTOCOL___SPSimpleBeaconUpdateClientXPCProtocol];
  v87 = v182;
  v188 = v81;
  v81(v182, v80, v70);
  id v88 = sub_1004AB7BC();
  v89 = (void *)qword_1009AFC00;
  swift_retain();
  id v90 = v89;
  id v91 = v86;
  v92 = v183;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v87,  0LL,  v88,  v90,  v91,  sub_1004BD238,  a1,  0LL,  0LL,  0LL,  0LL);
  XPCSessionManager.register(service:)(v92);

  v93 = *(void (**)(char *, uint64_t))(v184 + 8);
  uint64_t v94 = v191;
  v93(v92, v191);
  v95 = (void (*)(char *, uint64_t))*((void *)v189 + 1);
  v95(v80, v70);
  v96 = v95;
  v189 = v95;
  v93(v85, v94);
  v97 = v93;
  v98 = v190;
  v96(v190, v70);
  MachServiceName.init(_:)(0xD00000000000002CLL, 0x800000010084FE50LL);
  v188(v80, v98, v70);
  id v99 = sub_1004AB7BC();
  id v100 = v181;
  id v101 = [v181 interfaceWithProtocol:&OBJC_PROTOCOL___SPPairingManagerXPCProtocol];
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v80,  0LL,  v99,  v101,  sub_1004BD254,  a1,  0LL,  0LL,  0LL,  0LL);
  XPCSessionManager.register(service:)(v85);
  v97(v85, v94);
  v102 = v189;
  v189(v98, v70);
  sub_1004B08C8();
  MachServiceName.init(_:)(0xD000000000000027LL, 0x8000000100850130LL);
  id v103 = [v100 interfaceWithProtocol:&OBJC_PROTOCOL___SPCBPeripheralManagementXPCProtocol];
  v188(v80, v98, v70);
  id v104 = sub_1004AB7BC();
  id v105 = v103;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v80,  0LL,  v104,  v105,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL);
  XPCSessionManager.register(service:)(v85);

  v97(v85, v191);
  v102(v98, v70);
  sub_100165234();
  if (!*(void *)(a1 + 40))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    return;
  }

  uint64_t v106 = swift_retain();
  AnyCurrentValuePublisher.publisher.getter(v106);
  swift_release();
  uint64_t v107 = (uint64_t)v177;
  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  uint64_t v108 = swift_retain();
  AnyCurrentValuePublisher.publisher.getter(v108);
  swift_release();
  id v109 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  id v110 = CurrentLocationMonitor.init(mode:desiredAccuracy:)(1, 0LL, 1);
  v195 = &type metadata for SystemInfo;
  v196 = (uint64_t (*)())&off_10096DAE8;
  sub_100013044((uint64_t)aBlock, (uint64_t)v193);
  uint64_t v111 = sub_100037298((uint64_t)v193, v193[3]);
  __chkstk_darwin(v111);
  (*(void (**)(void))(v112 + 16))();
  v192[3] = &type metadata for SystemInfo;
  v192[4] = &off_10096DAE8;
  uint64_t v113 = type metadata accessor for SeparationMonitoringStateDecider();
  v114 = (void *)swift_allocObject(v113, 104LL, 7LL);
  uint64_t v115 = sub_100037298((uint64_t)v192, (uint64_t)&type metadata for SystemInfo);
  __chkstk_darwin(v115);
  (*(void (**)(void))(v116 + 16))();
  uint64_t v117 = swift_retain();
  v118 = sub_1004BB0C4(v117, 6, (uint64_t)v110, v114);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v192);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v193);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  swift_release();
  swift_release();

  *(void *)(a1 + 192) = v118;
  swift_retain();
  swift_release();
  uint64_t v119 = *(void *)(a1 + 192);
  if (v119)
  {
    aBlock[0] = *(id *)(v119 + 88);
    uint64_t v120 = sub_100004AEC(&qword_1009B07D8);
    uint64_t v121 = sub_1000372EC( &qword_1009B07E0,  &qword_1009B07D8,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    unint64_t v122 = sub_1004BD29C();
    v123 = v163;
    Publisher<>.removeDuplicates()(v120, v121, v122);
    aBlock[0] = *(id *)(a1 + 48);
    id v124 = aBlock[0];
    uint64_t v125 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
    uint64_t v126 = (uint64_t)v165;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v125 - 8) + 56LL))(v165, 1LL, 1LL, v125);
    uint64_t v127 = sub_1000372EC( &qword_1009B07F0,  &qword_1009B06D0,  (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
    unint64_t v128 = sub_1004BD040();
    id v129 = v124;
    v130 = v167;
    uint64_t v131 = v166;
    Publisher.receive<A>(on:options:)(aBlock, v126, v166, v162, v127, v128);
    sub_100015794(v126, &qword_1009B0670);

    (*(void (**)(char *, uint64_t))(v164 + 8))(v123, v131);
    uint64_t v132 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
    swift_weakInit(v132 + 16, a1);
    uint64_t v133 = sub_1000372EC( &qword_1009B07F8,  &qword_1009B06D8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    uint64_t v134 = v169;
    uint64_t v135 = Publisher<>.sink(receiveValue:)(sub_1004BD2E0, v132, v169, v133);
    swift_release();
    (*(void (**)(char *, uint64_t))(v168 + 8))(v130, v134);
  }

  else
  {
    uint64_t v135 = 0LL;
  }

  *(void *)(a1 + 208) = v135;
  swift_release();
  uint64_t v136 = qword_10099B300;
  swift_retain();
  if (v136 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v137 = qword_100A2A6C8;
  uint64_t v138 = type metadata accessor for SeparationStateSyncManager(0LL);
  uint64_t v139 = swift_allocObject(v138, *(unsigned int *)(v138 + 48), *(unsigned __int16 *)(v138 + 52));
  *(_OWORD *)(v139 + 40) = 0u;
  *(_OWORD *)(v139 + 56) = 0u;
  *(void *)(v139 + 72) = 0LL;
  uint64_t v140 = v139 + OBJC_IVAR____TtC12searchpartyd26SeparationStateSyncManager_observationStoreSubscription;
  uint64_t v141 = sub_100004AEC(&qword_1009B0800);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 56LL))(v140, 1LL, 1LL, v141);
  *(void *)(v139 + 16) = v107;
  *(void *)(v139 + 24) = v137;
  *(void *)(v139 + 32) = v118;
  *(void *)(a1 + 200) = v139;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  if (!*(void *)(a1 + 40)) {
    goto LABEL_23;
  }
  swift_retain();
  sub_10020165C();
  swift_release();
  LOBYTE(aBlock[0]) = 0;
  uint64_t v142 = sub_100004AEC(&qword_1009B0808);
  swift_allocObject(v142, *(unsigned int *)(v142 + 48), *(unsigned __int16 *)(v142 + 52));
  uint64_t v143 = CurrentValueSubject.init(_:)(aBlock);
  CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v143);
  swift_release();
  uint64_t v144 = swift_retain();
  CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v144);
  uint64_t v145 = type metadata accessor for PersistentConnectionObserver();
  v146 = (void *)swift_allocObject(v145, 40LL, 7LL);
  v146[4] = _swiftEmptyArrayStorage;
  LOBYTE(aBlock[0]) = 0;
  uint64_t v147 = sub_100004AEC(&qword_1009B0810);
  swift_allocObject(v147, *(unsigned int *)(v147 + 48), *(unsigned __int16 *)(v147 + 52));
  swift_retain();
  v146[2] = CurrentValueSubject.init(_:)(aBlock);
  uint64_t v148 = swift_retain();
  uint64_t v149 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v148);
  swift_release();
  v146[3] = v149;
  swift_release();
  swift_release();
  swift_release();
  *(void *)(a1 + 176) = v146;
  swift_release();
  if (*(void *)(a1 + 176))
  {
    uint64_t v150 = swift_retain();
    v151 = (void *)AnyCurrentValuePublisher.publisher.getter(v150);
    swift_release();
    aBlock[0] = v151;
    uint64_t v152 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
    swift_weakInit(v152 + 16, a1);
    uint64_t v153 = sub_100004AEC(&qword_1009B0818);
    uint64_t v154 = sub_1000372EC( (unint64_t *)&unk_1009B0820,  &qword_1009B0818,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v155 = Publisher<>.sink(receiveValue:)(sub_1004BD2E8, v152, v153, v154);
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v155 = 0LL;
  }

  *(void *)(a1 + 184) = v155;
  swift_release();
  sub_10047D608();
  v156 = (uint64_t (**)())(v107 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler);
  uint64_t v157 = *(void *)(v107 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler);
  uint64_t v158 = *(void *)(v107 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler + 8);
  *v156 = sub_1004BD2F0;
  v156[1] = (uint64_t (*)())a1;
  swift_retain();
  sub_10002214C(v157, v158);
  v159 = (uint64_t (**)(uint64_t))(v107 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  uint64_t v160 = *(void *)(v107 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  uint64_t v161 = *(void *)(v107 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
  *v159 = sub_1004BD2F8;
  v159[1] = (uint64_t (*)(uint64_t))a1;
  swift_retain();
  sub_10002214C(v160, v161);
  swift_retain();
  sub_10055F194(v107, a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_1004AE3FC()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Date.trustedNow.getter((uint64_t)v3);
  uint64_t v4 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v5 = static os_log_type_t.default.getter(v4);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  return os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_100A2B008,  "TimeLatchRecord: first read is done",  35LL,  2LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_1004AE4D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100015750(a1, a2, &qword_1009AECF0);
}

uint64_t sub_1004AE4F0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_100458824();
    }

    else if (a3 == 2)
    {
      uint64_t v7 = sub_1001333F0();
      uint64_t v8 = static os_log_type_t.default.getter(v7);
      if (qword_10099B6F8 != -1)
      {
        uint64_t v9 = v8;
        swift_once(&qword_10099B6F8, sub_100651098);
        uint64_t v8 = v9;
      }

      os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_100A2B008,  "Running com.apple.icloud.searchpartyuseragent.post-install - task completed.",  76LL,  2LL,  _swiftEmptyArrayStorage);
      sub_100458840();
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_1004AE5EC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_1004AE604, 0LL, 0LL);
}

uint64_t sub_1004AE604()
{
  uint64_t v1 = (__int128 *)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = swift_allocObject(&unk_10095F3C0, 113LL, 7LL);
  v0[4] = v3;
  *(void *)(v3 + 16) = v2;
  __int128 v4 = v1[2];
  __int128 v5 = v1[3];
  __int128 v6 = v1[4];
  *(_OWORD *)(v3 + 97) = *(__int128 *)((char *)v1 + 73);
  *(_OWORD *)(v3 + 88) = v6;
  *(_OWORD *)(v3 + 72) = v5;
  *(_OWORD *)(v3 + 56) = v4;
  __int128 v7 = *v1;
  *(_OWORD *)(v3 + 40) = v1[1];
  *(_OWORD *)(v3 + 24) = v7;
  swift_retain();
  sub_1001B142C(v1);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v0[5] = v8;
  void *v8 = v0;
  v8[1] = sub_1004AE6C8;
  return unsafeBlocking<A>(_:)(v8, sub_1004BD96C, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1004AE6C8()
{
  return swift_task_switch(sub_10015C680, 0LL, 0LL);
}

uint64_t sub_1004AE724(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v18, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    int v6 = *(unsigned __int8 *)(result + 224);
    if (v2 == 7)
    {
      if (v6 == 7) {
        return swift_release();
      }
    }

    else if (v2 == 6)
    {
      if (v6 == 6) {
        return swift_release();
      }
    }

    else if ((v6 & 0xFE) != 6)
    {
      sub_100306360(v2);
      if ((v7 & 1) != 0) {
        return swift_release();
      }
    }

    *(_BYTE *)(v5 + 224) = v2;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A2AAA0);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      v17[0] = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      LOBYTE(v16) = v2;
      uint64_t v14 = String.init<A>(describing:)( &v16,  &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy);
      uint64_t v16 = sub_1003F11D4(v14, v15, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Notifying clients of separation monitoring policy change to: %s",  v12,  0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    swift_retain();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
    type metadata accessor for Transaction(0LL);
    static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2C10,  0LL);
    swift_release();
    swift_retain();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
    static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_1004AE9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    swift_retain();
    swift_release();
    sub_1004F1250();
    return swift_release();
  }

  return result;
}

uint64_t sub_1004AEA40(uint64_t a1)
{
  uint64_t v1 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  qword_100A2B008,  "resetHandler called on BeaconManagerService",  43LL,  2LL,  _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0LL);
  return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing",  60LL,  2LL,  sub_100153838);
}

uint64_t sub_1004AEB08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v18 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = static os_log_type_t.default.getter(v8);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_100A2B008,  "beaconStoreChanged called on BeaconManagerService",  49LL,  2LL,  _swiftEmptyArrayStorage,  v18);
  aBlock[4] = sub_1004BD8B4;
  aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_10095F388;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v16 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release();
}

uint64_t sub_1004AED38(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1004AED8C()
{
  return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.cloudCoordinatorAvailableTransaction",  66LL,  2LL,  sub_1004BD89C);
}

uint64_t sub_1004AEDF4(Swift::Void (__swiftcall *a1)(), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_100A2B008,  "BeaconManagerService: CloudKit is available",  43LL,  2LL,  _swiftEmptyArrayStorage);
  v24[1] = type metadata accessor for Transaction(0LL);
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing",  60LL,  2LL,  sub_100153838);
  sub_1001320A0((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    uint64_t v16 = sub_100015794((uint64_t)v9, (uint64_t *)&unk_1009A9C30);
  }

  else
  {
    sub_10002218C((uint64_t)v9, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    sub_1004BB1E8((uint64_t)v14, a2, a1);
    swift_release();
    uint64_t v16 = sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }

  static DispatchQoS.background.getter(v16);
  uint64_t v17 = swift_allocObject(&unk_10095F2A8, 32LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_100805430;
  uint64_t v18 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
  swift_weakInit(v18 + 16, a2);
  uint64_t v19 = type metadata accessor for XPCActivity();
  swift_allocObject(v19, 112LL, 7LL);
  uint64_t v20 = sub_10045AD78( 0xD000000000000038LL,  (void *)0x8000000100864A50LL,  (uint64_t)v6,  (uint64_t)sub_1004BD310,  v17,  (uint64_t)sub_1004BD318,  v18);
  swift_release();
  swift_release();
  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pruneActivity) = v20;
  uint64_t v21 = swift_release();
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_shouldForceFetch) == 1)
  {
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_100A2B008,  "Forcing a CloudKit fetch since this is the first launch since reboot",  68LL,  2LL,  _swiftEmptyArrayStorage);
    sub_1004F730C();
    sub_10067488C();
    swift_release();
  }

  return static Transaction.named<A>(_:with:)("productInfoMigration", 20LL, 2LL, sub_1004BD320);
}

uint64_t sub_1004AF15C(void *a1, uint64_t a2)
{
  uint64_t v45 = type metadata accessor for ShareRecord(0LL);
  uint64_t v4 = *(void *)(v45 - 8);
  uint64_t v5 = __chkstk_darwin(v45);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v38 - v8;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v47, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v40 = v11;
    v38[0] = v4;
    uint64_t v46 = result;
    LODWORD(v42) = static os_log_type_t.debug.getter(result);
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    uint64_t v41 = qword_100A2B058;
    uint64_t v44 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v15 = swift_allocObject(v44, 72LL, 7LL);
    __int128 v43 = xmmword_1007E67D0;
    *(_OWORD *)(v15 + 16) = xmmword_1007E67D0;
    uint64_t v16 = a1[4];
    uint64_t v39 = a1[3];
    uint64_t v17 = v39;
    v38[1] = sub_100012ED8(a1, v39);
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 32);
    uint64_t v20 = v19(v17, v18);
    uint64_t v21 = UUID.uuidString.getter(v20);
    uint64_t v23 = v22;
    uint64_t v24 = *(void (**)(char *, uint64_t))(v40 + 8);
    v24(v13, v10);
    *(void *)(v15 + 56) = &type metadata for String;
    unint64_t v25 = sub_1000226F4();
    uint64_t v40 = v10;
    unint64_t v26 = v25;
    *(void *)(v15 + 64) = v25;
    *(void *)(v15 + 32) = v21;
    *(void *)(v15 + 40) = v23;
    os_log(_:dso:log:_:_:)( v42,  &_mh_execute_header,  v41,  "Unsharing cloudBackedRecord %@",  30LL,  2LL,  v15);
    swift_bridgeObjectRelease();
    v19(v39, v18);
    uint64_t v27 = sub_1005777D8();
    v24(v13, v40);
    uint64_t v28 = v27[2];
    if (v28)
    {
      uint64_t v29 = *(unsigned __int8 *)(v38[0] + 80LL);
      uint64_t v42 = v27;
      uint64_t v30 = (uint64_t)v27 + ((v29 + 32) & ~v29);
      uint64_t v31 = *(void *)(v38[0] + 72LL);
      while (1)
      {
        uint64_t v32 = sub_10001DC4C(v30, (uint64_t)v9, type metadata accessor for ShareRecord);
        uint64_t v33 = static os_log_type_t.debug.getter(v32);
        uint64_t v34 = qword_100A2B058;
        uint64_t v35 = swift_allocObject(v44, 72LL, 7LL);
        *(_OWORD *)(v35 + 16) = v43;
        sub_10001DC4C((uint64_t)v9, (uint64_t)v7, type metadata accessor for ShareRecord);
        uint64_t v36 = String.init<A>(describing:)(v7, v45);
        *(void *)(v35 + 56) = &type metadata for String;
        *(void *)(v35 + 64) = v26;
        *(void *)(v35 + 32) = v36;
        *(void *)(v35 + 40) = v37;
        os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Unsharing SharedRecord %@", 25LL, 2LL, v35);
        uint64_t result = swift_bridgeObjectRelease();
        if (!*(void *)(v46 + 40)) {
          break;
        }
        swift_retain();
        sub_1001DD324((uint64_t)v9, (uint64_t)DeviceInformationProviderFactory.init(), 0LL);
        swift_release();
        sub_100018C68((uint64_t)v9, type metadata accessor for ShareRecord);
        v30 += v31;
        if (!--v28) {
          goto LABEL_8;
        }
      }

      __break(1u);
    }

    else
    {
LABEL_8:
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }

  return result;
}

uint64_t sub_1004AF4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for StateCaptureDateType(0LL);
  v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v3[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[13] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[14] = swift_task_alloc(v8);
  v3[15] = swift_task_alloc(v8);
  uint64_t v9 = *(void *)(type metadata accessor for KeySyncMetadataDisplay(0LL) - 8);
  v3[16] = v9;
  v3[17] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for StateCaptureHintAPI(0LL);
  v3[18] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[19] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[20] = swift_task_alloc(v12);
  v3[21] = swift_task_alloc(v12);
  return swift_task_switch(sub_1004AF5FC, 0LL, 0LL);
}

uint64_t sub_1004AF5FC()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 152);
  StateCaptureHint.api.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for StateCaptureHintAPI.request(_:), v3);
  uint64_t v5 = sub_100007864( &qword_1009A61C8,  (uint64_t (*)(uint64_t))&type metadata accessor for StateCaptureHintAPI,  (uint64_t)&protocol conformance descriptor for StateCaptureHintAPI);
  dispatch thunk of RawRepresentable.rawValue.getter((void *)(v0 + 208), v3, v5);
  dispatch thunk of RawRepresentable.rawValue.getter((void *)(v0 + 212), v3, v5);
  int v7 = *(_DWORD *)(v0 + 208);
  int v6 = *(_DWORD *)(v0 + 212);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v2, v3);
  v8(v1, v3);
  if (v7 == v6
    && (uint64_t v9 = *(void *)(v0 + 64) + 16LL,
        swift_beginAccess(v9, v0 + 16, 0LL, 0LL),
        uint64_t Strong = swift_weakLoadStrong(v9),
        (*(void *)(v0 + 176) = Strong) != 0LL))
  {
    uint64_t v11 = (void *)swift_task_alloc(dword_1009A7DDC);
    *(void *)(v0 + 184) = v11;
    void *v11 = v0;
    v11[1] = sub_1004AF80C;
    return sub_1002AEB14();
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 160);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v15 = *(void *)(v0 + 136);
    uint64_t v17 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 120);
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 48);
    uint64_t v20 = type metadata accessor for StateCaptureStateData(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1004AF80C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 184);
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = sub_1004AFFF4;
  }

  else
  {
    swift_release();
    uint64_t v5 = sub_1004AF8CC;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1004AF8CC()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[16];
    uint64_t v4 = v0[13];
    uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v6 = (v5 + 32) & ~v5;
    uint64_t v7 = v1 + v6;
    uint64_t v87 = *(void *)(v3 + 72);
    uint64_t v90 = v6 + v87;
    uint64_t v91 = v6;
    uint64_t v89 = v5 | 7;
    uint64_t v85 = v0[25];
    id v86 = v0 + 15;
    v92 = v0 + 14;
    swift_bridgeObjectRetain(v1);
    unint64_t v8 = _swiftEmptyDictionarySingleton;
    uint64_t v88 = v4;
    while (1)
    {
      sub_10001DC4C(v7, v0[17], type metadata accessor for KeySyncMetadataDisplay);
      if (!v8[2])
      {
        uint64_t v31 = v2;
        uint64_t v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16);
        goto LABEL_15;
      }

      unint64_t v12 = sub_10030D124(v0[17]);
      uint64_t v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16);
      if ((v14 & 1) == 0) {
        break;
      }
      uint64_t v15 = v0[17];
      uint64_t v16 = *(void **)(v8[7] + 8 * v12);
      v13(v0[15], v15, v0[12]);
      uint64_t v17 = sub_100004AEC(&qword_1009B0630);
      uint64_t v18 = swift_allocObject(v17, v90, v89);
      *(_OWORD *)(v18 + 16) = xmmword_1007E67D0;
      sub_10001DC4C(v15, v18 + v91, type metadata accessor for KeySyncMetadataDisplay);
      uint64_t v94 = v16;
      swift_bridgeObjectRetain(v16);
      sub_100185620(v18);
      swift_bridgeObjectRetain(v94);
      sub_1004AB444(&v94);
      if (v85) {
        return swift_release();
      }
      uint64_t v19 = *v86;
      swift_bridgeObjectRelease();
      uint64_t v20 = v94;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
      uint64_t v94 = v8;
      unint64_t v23 = sub_10030D124(v19);
      uint64_t v24 = v8[2];
      BOOL v25 = (v22 & 1) == 0;
      uint64_t v26 = v24 + v25;
      if (__OFADD__(v24, v25)) {
        goto LABEL_44;
      }
      char v27 = v22;
      if (v8[3] >= v26)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100066E34();
          unint64_t v8 = v94;
        }
      }

      else
      {
        uint64_t v28 = *v86;
        sub_1000540AC(v26, isUniquelyReferenced_nonNull_native);
        unint64_t v8 = v94;
        unint64_t v29 = sub_10030D124(v28);
        if ((v27 & 1) != (v30 & 1)) {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v0[12]);
        }
        unint64_t v23 = v29;
      }

      if ((v27 & 1) != 0)
      {
        uint64_t v52 = v8[7];
        swift_bridgeObjectRelease();
        *(void *)(v52 + 8 * v23) = v20;
        uint64_t v4 = v88;
      }

      else
      {
        uint64_t v53 = v0[15];
        uint64_t v54 = v0[12];
        v8[(v23 >> 6) + 8] |= 1LL << v23;
        uint64_t v4 = v88;
        v13(v8[6] + *(void *)(v88 + 72) * v23, v53, v54);
        *(void *)(v8[7] + 8 * v23) = v20;
        uint64_t v55 = v8[2];
        BOOL v50 = __OFADD__(v55, 1LL);
        uint64_t v56 = v55 + 1;
        if (v50) {
          goto LABEL_45;
        }
        v8[2] = v56;
      }

      swift_bridgeObjectRelease();
      uint64_t v85 = 0LL;
      uint64_t v10 = v86;
LABEL_5:
      uint64_t v11 = v0[17];
      (*(void (**)(uint64_t, void))(v4 + 8))(*v10, v0[12]);
      sub_100018C68(v11, type metadata accessor for KeySyncMetadataDisplay);
      v7 += v87;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        uint64_t v57 = v85;
        goto LABEL_35;
      }
    }

    uint64_t v31 = v2;
LABEL_15:
    uint64_t v32 = v0[17];
    uint64_t v33 = v0[14];
    uint64_t v34 = v13;
    v13(v33, v32, v0[12]);
    uint64_t v35 = sub_100004AEC(&qword_1009B0630);
    uint64_t v36 = swift_allocObject(v35, v90, v89);
    *(_OWORD *)(v36 + 16) = xmmword_1007E67D0;
    sub_10001DC4C(v32, v36 + v91, type metadata accessor for KeySyncMetadataDisplay);
    uint64_t v37 = swift_isUniquelyReferenced_nonNull_native(v8);
    uint64_t v94 = v8;
    unint64_t v39 = sub_10030D124(v33);
    uint64_t v40 = v8[2];
    BOOL v41 = (v38 & 1) == 0;
    uint64_t v42 = v40 + v41;
    if (__OFADD__(v40, v41))
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
    }

    char v43 = v38;
    if (v8[3] < v42)
    {
      uint64_t v44 = *v92;
      sub_1000540AC(v42, v37);
      unint64_t v8 = v94;
      unint64_t v45 = sub_10030D124(v44);
      if ((v43 & 1) != (v46 & 1)) {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v93[12]);
      }
      unint64_t v39 = v45;
      if ((v43 & 1) == 0) {
        goto LABEL_22;
      }
LABEL_3:
      uint64_t v9 = v8[7];
      swift_bridgeObjectRelease();
      *(void *)(v9 + 8 * v39) = v36;
      uint64_t v4 = v88;
LABEL_4:
      swift_bridgeObjectRelease();
      uint64_t v10 = v92;
      uint64_t v0 = v93;
      uint64_t v2 = v31;
      goto LABEL_5;
    }

    if ((v37 & 1) != 0)
    {
      if ((v38 & 1) != 0) {
        goto LABEL_3;
      }
    }

    else
    {
      sub_100066E34();
      unint64_t v8 = v94;
      if ((v43 & 1) != 0) {
        goto LABEL_3;
      }
    }

uint64_t sub_1004AFFF4()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B00A8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (int *)type metadata accessor for KeySyncMetadataDisplay(0LL);
  uint64_t v6 = *((void *)v5 - 1);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *a1;
  int64_t v11 = *(void *)(v10 + 16);
  unint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    v32[0] = a2;
    v32[1] = v2;
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_100032800(0, v11, 0);
    uint64_t v13 = v10 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v33 = *(void *)(v6 + 72);
    do
    {
      sub_10001DC4C(v13, (uint64_t)v9, type metadata accessor for KeySyncMetadataDisplay);
      char v14 = &v9[v5[7]];
      uint64_t v15 = *((void *)v14 + 1);
      uint64_t v35 = *(void *)v14;
      uint64_t v36 = v15;
      swift_bridgeObjectRetain(v15);
      v16._countAndFlagsBits = 47LL;
      v16._object = (void *)0xE100000000000000LL;
      String.append(_:)(v16);
      uint64_t v34 = *(void *)&v9[v5[6]];
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 32LL;
      v18._object = (void *)0xE100000000000000LL;
      String.append(_:)(v18);
      uint64_t v19 = (uint64_t *)&v9[v5[5]];
      uint64_t v20 = *v19;
      uint64_t v21 = (void *)v19[1];
      swift_bridgeObjectRetain(v21);
      v22._countAndFlagsBits = v20;
      v22._object = v21;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 8250LL;
      v23._object = (void *)0xE200000000000000LL;
      String.append(_:)(v23);
      uint64_t v24 = type metadata accessor for Date(0LL);
      uint64_t v25 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      uint64_t v27 = v35;
      uint64_t v28 = v36;
      sub_100018C68((uint64_t)v9, type metadata accessor for KeySyncMetadataDisplay);
      unint64_t v12 = v37;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v37);
      if ((result & 1) == 0)
      {
        uint64_t result = sub_100032800(0, v12[2] + 1LL, 1);
        unint64_t v12 = v37;
      }

      unint64_t v30 = v12[2];
      unint64_t v29 = v12[3];
      if (v30 >= v29 >> 1)
      {
        uint64_t result = sub_100032800(v29 > 1, v30 + 1, 1);
        unint64_t v12 = v37;
      }

      v12[2] = v30 + 1;
      uint64_t v31 = &v12[2 * v30];
      v31[4] = v27;
      v31[5] = v28;
      v13 += v33;
      --v11;
    }

    while (v11);
    a2 = (void *)v32[0];
  }

  *a2 = v12;
  return result;
}

void sub_1004B0310(uint64_t a1)
{
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AB18);
  swift_errorRetain(a1);
  uint64_t v3 = swift_errorRetain(a1);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v4 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    if (a1)
    {
      swift_errorRetain(a1);
      uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v10 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    }

    else
    {
      uint64_t v10 = 0LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
      uint64_t v7 = 0LL;
    }

    uint64_t *v6 = v7;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v4,  "Did delete all beacon payload cache files with result: %@.",  v5,  0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

uint64_t sub_1004B0528()
{
  char v5 = 0;
  unint64_t v0 = sub_1002DB000();
  if ((NSXPCConnection.hasEntitlement<A>(_:)(&v5, &type metadata for BeaconManagerEntitlement, v0) & 1) != 0
    || (char v4 = 3, (NSXPCConnection.hasEntitlement<A>(_:)(&v4, &type metadata for BeaconManagerEntitlement, v0) & 1) != 0))
  {
    char v1 = 1;
  }

  else
  {
    char v3 = 4;
    char v1 = NSXPCConnection.hasEntitlement<A>(_:)(&v3, &type metadata for BeaconManagerEntitlement, v0);
  }

  return v1 & 1;
}

id sub_1004B05B8()
{
  id result = sub_1004B05D4();
  qword_1009AFC00 = (uint64_t)result;
  return result;
}

id sub_1004B05D4()
{
  id v0 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___SPBeaconManagerXPCProtocol];
  uint64_t v1 = sub_1004B8468();
  uint64_t v2 = swift_allocObject( v1,  ((*(unsigned int *)(v1 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v1 + 52) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_1007E4750;
  uint64_t v3 = sub_100022898(0LL, &qword_10099FAE8, &OBJC_CLASS___NSUUID_ptr);
  *(void *)(v2 + 32) = v3;
  uint64_t v4 = sub_100022898(0LL, &qword_10099FAD0, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v2 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v2, "commandKeysForUUIDs:dateInterval:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_1004B8468();
  uint64_t v6 = swift_allocObject( v5,  ((*(unsigned int *)(v5 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v5 + 52) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007E4750;
  *(void *)(v6 + 32) = v3;
  *(void *)(v6 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v6, "commandKeysForUUIDs:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1004B8468();
  uint64_t v8 = swift_allocObject( v7,  ((*(unsigned int *)(v7 + 48) + 7LL) & 0x1FFFFFFF8LL) + 8,  *(unsigned __int16 *)(v7 + 52) | 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1007E67D0;
  *(void *)(v8 + 32) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v8, "commandKeysForUUID:withCriteria:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_1004B8468();
  uint64_t v10 = swift_allocObject( v9,  ((*(unsigned int *)(v9 + 48) + 7LL) & 0x1FFFFFFF8LL) + 8,  *(unsigned __int16 *)(v9 + 52) | 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1007E67D0;
  *(void *)(v10 + 32) = sub_100022898(0LL, &qword_1009B08C0, &OBJC_CLASS___SPCommandKeysCriteria_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v10, "commandKeysForUUID:withCriteria:completion:", 1LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1004B8468();
  uint64_t v12 = swift_allocObject( v11,  ((*(unsigned int *)(v11 + 48) + 7LL) & 0x1FFFFFFF8LL) + 32,  *(unsigned __int16 *)(v11 + 52) | 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_1007E8290;
  *(void *)(v12 + 32) = v3;
  *(void *)(v12 + 40) = v4;
  *(void *)(v12 + 48) = sub_100022898(0LL, (unint64_t *)&qword_1009B08C8, &OBJC_CLASS___NSDictionary_ptr);
  *(void *)(v12 + 56) = sub_100022898(0LL, &qword_1009AC0E0, &OBJC_CLASS___NSFileHandle_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v12, "fetchAllKeyMapFileDescriptorsWithCompletion:", 0LL, 1LL);
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_1004B8468();
  uint64_t v14 = swift_allocObject( v13,  ((*(unsigned int *)(v13 + 48) + 7LL) & 0x1FFFFFFF8LL) + 8,  *(unsigned __int16 *)(v13 + 52) | 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_1007E67D0;
  *(void *)(v14 + 32) = sub_100022898(0LL, (unint64_t *)&qword_10099DFA0, &OBJC_CLASS___NSError_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v14, "fetchAllKeyMapFileDescriptorsWithCompletion:", 1LL, 1LL);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1004B08C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for XPCServiceDescription(0LL);
  uint64_t v49 = *(void *)(v2 - 8);
  uint64_t v50 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v48 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  char v43 = (char *)v40 - v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v40 - v7;
  uint64_t v9 = type metadata accessor for MachServiceName(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v45 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v40 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  Swift::String v18 = (char *)v40 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v40 - v19;
  MachServiceName.init(_:)(0xD00000000000002ALL, 0x800000010084E230LL);
  char v46 = v20;
  uint64_t v47 = v10;
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v21(v18, v20, v9);
  id v22 = sub_1004AB7BC();
  if (qword_10099B4E8 != -1) {
    swift_once(&qword_10099B4E8, sub_1004B0CFC);
  }
  id v23 = (id)qword_1009AFC08;
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v18,  0LL,  v22,  v23,  sub_1004BCE90,  v1,  0LL,  0LL,  0LL,  0LL);
  v40[1] = *(void *)(v1 + 240);
  XPCSessionManager.register(service:)(v8);
  MachServiceName.init(_:)(0xD000000000000030LL, 0x8000000100864830LL);
  uint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
  uint64_t v44 = v8;
  uint64_t v25 = v24;
  id v26 = [v24 interfaceWithProtocol:&OBJC_PROTOCOL___SPLocationFetchClientXPCProtocol];
  v21(v15, v18, v9);
  id v27 = sub_1004AB7BC();
  uint64_t v28 = (void *)qword_1009AFC08;
  swift_retain();
  id v29 = v28;
  id v41 = v26;
  uint64_t v42 = v18;
  unint64_t v30 = v43;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v15,  0LL,  v27,  v29,  v41,  sub_1004BCE90,  v1,  0LL,  0LL,  0LL,  0LL);
  XPCSessionManager.register(service:)(v30);
  MachServiceName.init(_:)(0xD00000000000002BLL, 0x8000000100864870LL);
  uint64_t v31 = v45;
  v21(v45, v15, v9);
  id v32 = sub_1004AB7BC();
  id v33 = [v25 interfaceWithProtocol:&OBJC_PROTOCOL___SPBeaconScanningXPCProtocol];
  id v34 = [v25 interfaceWithProtocol:&OBJC_PROTOCOL___SPBeaconScanningXPCClientProtocol];
  swift_retain();
  uint64_t v35 = v48;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v31,  0LL,  v32,  v33,  v34,  sub_1004BCE90,  v1,  0LL,  0LL,  0LL,  0LL);
  XPCSessionManager.register(service:)(v35);

  uint64_t v36 = v50;
  uint64_t v37 = *(void (**)(char *, uint64_t))(v49 + 8);
  v37(v35, v50);
  char v38 = *(void (**)(char *, uint64_t))(v47 + 8);
  v38(v15, v9);
  v37(v30, v36);
  v38(v42, v9);
  v37(v44, v36);
  return ((uint64_t (*)(char *, uint64_t))v38)(v46, v9);
}

id sub_1004B0CFC()
{
  id result = sub_1004B0D18();
  qword_1009AFC08 = (uint64_t)result;
  return result;
}

id sub_1004B0D18()
{
  id v0 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___SPOwnerSessionXPCProtocol];
  uint64_t v1 = sub_1004B8468();
  uint64_t v2 = swift_allocObject( v1,  ((*(unsigned int *)(v1 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v1 + 52) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_1007E4750;
  uint64_t v3 = sub_100022898(0LL, &qword_10099FAD0, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v2 + 32) = v3;
  uint64_t v4 = sub_100022898(0LL, &qword_10099FAE8, &OBJC_CLASS___NSUUID_ptr);
  *(void *)(v2 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v2,  "latestLocationsForIdentifiers:fetchLimit:sources:completion:",  0LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_1004B8468();
  uint64_t v6 = swift_allocObject( v5,  ((*(unsigned int *)(v5 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v5 + 52) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007E4750;
  uint64_t v7 = sub_100022898(0LL, &qword_1009B05D0, &OBJC_CLASS___NSSet_ptr);
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = sub_100022898(0LL, &qword_1009AF510, &OBJC_CLASS___NSString_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v6,  "latestLocationsForIdentifiers:fetchLimit:sources:completion:",  2LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1004B8468();
  uint64_t v9 = swift_allocObject( v8,  ((*(unsigned int *)(v8 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v8 + 52) | 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1007E4750;
  *(void *)(v9 + 32) = v3;
  *(void *)(v9 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v9, "beaconGroupsForUUIDs:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1004B8468();
  uint64_t v11 = swift_allocObject( v10,  ((*(unsigned int *)(v10 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v10 + 52) | 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_1007E4750;
  *(void *)(v11 + 32) = v3;
  *(void *)(v11 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v11, "standaloneBeaconsForUUIDs:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_1004B8468();
  uint64_t v13 = swift_allocObject( v12,  ((*(unsigned int *)(v12 + 48) + 7LL) & 0x1FFFFFFF8LL) + 32,  *(unsigned __int16 *)(v12 + 52) | 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_1007E8290;
  *(void *)(v13 + 32) = v7;
  uint64_t v14 = sub_100022898(0LL, &qword_1009A9C70, &OBJC_CLASS___SPUnauthorizedTrackingObservation_ptr);
  *(void *)(v13 + 40) = v14;
  uint64_t v15 = sub_100022898(0LL, &qword_1009B05D8, &OBJC_CLASS___SPObservationLocation_ptr);
  *(void *)(v13 + 48) = v15;
  uint64_t v16 = sub_100022898(0LL, (unint64_t *)&unk_1009B05E0, &OBJC_CLASS___SPUnauthorizedTrackingAdvertisement_ptr);
  *(void *)(v13 + 56) = v16;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v13,  "didObserveUnauthorizedTrackingWithCompletion:completion:",  0LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v17 = sub_1004B8468();
  uint64_t v18 = swift_allocObject( v17,  ((*(unsigned int *)(v17 + 48) + 7LL) & 0x1FFFFFFF8LL) + 32,  *(unsigned __int16 *)(v17 + 52) | 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1007E8290;
  *(void *)(v18 + 32) = v3;
  *(void *)(v18 + 40) = v14;
  *(void *)(v18 + 48) = v15;
  *(void *)(v18 + 56) = v16;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v18,  "didWithdrawUnauthorizedTrackingWithCompletion:completion:",  0LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_1004B8468();
  uint64_t v20 = swift_allocObject( v19,  ((*(unsigned int *)(v19 + 48) + 7LL) & 0x1FFFFFFF8LL) + 32,  *(unsigned __int16 *)(v19 + 52) | 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_1007E8290;
  *(void *)(v20 + 32) = v3;
  *(void *)(v20 + 40) = v14;
  *(void *)(v20 + 48) = v15;
  *(void *)(v20 + 56) = v16;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v20,  "didDetectUnauthorizedTrackingWithCompletion:completion:",  0LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_1004B8468();
  uint64_t v22 = swift_allocObject( v21,  ((*(unsigned int *)(v21 + 48) + 7LL) & 0x1FFFFFFF8LL) + 32,  *(unsigned __int16 *)(v21 + 52) | 7LL);
  *(_OWORD *)(v22 + 16) = xmmword_1007E8290;
  *(void *)(v22 + 32) = v3;
  *(void *)(v22 + 40) = v14;
  *(void *)(v22 + 48) = v15;
  *(void *)(v22 + 56) = v16;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v22,  "didUpdateUnauthorizedTrackingWithCompletion:completion:",  0LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v23 = sub_1004B8468();
  uint64_t v24 = swift_allocObject( v23,  ((*(unsigned int *)(v23 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v23 + 52) | 7LL);
  *(_OWORD *)(v24 + 16) = xmmword_1007E4750;
  *(void *)(v24 + 32) = v3;
  *(void *)(v24 + 40) = sub_100022898(0LL, (unint64_t *)&unk_1009B9A40, &OBJC_CLASS___SPBeaconObservation_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v24, "updateBeaconObservations:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v25 = sub_1004B8468();
  uint64_t v26 = swift_allocObject( v25,  ((*(unsigned int *)(v25 + 48) + 7LL) & 0x1FFFFFFF8LL) + 8,  *(unsigned __int16 *)(v25 + 52) | 7LL);
  *(_OWORD *)(v26 + 16) = xmmword_1007E67D0;
  *(void *)(v26 + 32) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v26,  "tagSeparationStateChanged:beaconUUID:location:completion:",  1LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1004B8468();
  uint64_t v28 = swift_allocObject( v27,  ((*(unsigned int *)(v27 + 48) + 7LL) & 0x1FFFFFFF8LL) + 8,  *(unsigned __int16 *)(v27 + 52) | 7LL);
  *(_OWORD *)(v28 + 16) = xmmword_1007E67D0;
  *(void *)(v28 + 32) = sub_100022898(0LL, (unint64_t *)&qword_1009A9C60, &OBJC_CLASS___SPBeaconLocation_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v28,  "tagSeparationStateChanged:beaconUUID:location:completion:",  2LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_1004B8468();
  uint64_t v30 = swift_allocObject( v29,  ((*(unsigned int *)(v29 + 48) + 7LL) & 0x1FFFFFFF8LL) + 24,  *(unsigned __int16 *)(v29 + 52) | 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1007E4050;
  *(void *)(v30 + 32) = v3;
  *(void *)(v30 + 40) = v4;
  *(void *)(v30 + 48) = sub_100022898(0LL, &qword_1009A9C78, &OBJC_CLASS___SPUnknownBeacon_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v30, "unknownBeaconsForUUIDs:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_1004B8468();
  uint64_t v32 = swift_allocObject( v31,  ((*(unsigned int *)(v31 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v31 + 52) | 7LL);
  *(_OWORD *)(v32 + 16) = xmmword_1007E4750;
  *(void *)(v32 + 32) = v3;
  *(void *)(v32 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v32,  "enableSeparationMonitoringForBeacons:completion:",  0LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v33 = sub_1004B8468();
  uint64_t v34 = swift_allocObject( v33,  ((*(unsigned int *)(v33 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v33 + 52) | 7LL);
  *(_OWORD *)(v34 + 16) = xmmword_1007E4750;
  *(void *)(v34 + 32) = v3;
  *(void *)(v34 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v34,  "disableSeparationMonitoringForBeacons:completion:",  0LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_1004B8468();
  uint64_t v36 = swift_allocObject( v35,  ((*(unsigned int *)(v35 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v35 + 52) | 7LL);
  *(_OWORD *)(v36 + 16) = xmmword_1007E4750;
  *(void *)(v36 + 32) = v3;
  *(void *)(v36 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v36, "assignSafeLocation:to:completion:", 1LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v37 = sub_1004B8468();
  uint64_t v38 = swift_allocObject( v37,  ((*(unsigned int *)(v37 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v37 + 52) | 7LL);
  *(_OWORD *)(v38 + 16) = xmmword_1007E4750;
  *(void *)(v38 + 32) = v3;
  *(void *)(v38 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v38, "unassignSafeLocation:from:completion:", 1LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v39 = sub_1004B8468();
  uint64_t v40 = swift_allocObject( v39,  ((*(unsigned int *)(v39 + 48) + 7LL) & 0x1FFFFFFF8LL) + 16,  *(unsigned __int16 *)(v39 + 52) | 7LL);
  *(_OWORD *)(v40 + 16) = xmmword_1007E4750;
  *(void *)(v40 + 32) = v7;
  *(void *)(v40 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v40,  "publishSeparationEventForBeacons:eventType:region:completion:",  0LL,  0LL);
  swift_bridgeObjectRelease();
  uint64_t v41 = sub_100022898(0LL, (unint64_t *)&unk_1009B05F0, &OBJC_CLASS___CLCircularRegion_ptr);
  [v0 setClass:swift_getObjCClassFromMetadata(v41) forSelector:"publishSeparationEventForBeacons:eventType:region:completion:" argumentIndex:1 ofReply:0];
  uint64_t v42 = sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
  [v0 setClass:swift_getObjCClassFromMetadata(v42) forSelector:"updateSafeLocation:completion:" argumentIndex:0 ofReply:0];
  return v0;
}

uint64_t sub_1004B1470()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v1 + 48);
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    static DispatchQoS.background.getter(result);
    uint64_t v12 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
    swift_weakInit(v12 + 16, v1);
    uint64_t v13 = type metadata accessor for XPCActivity();
    swift_allocObject(v13, 112LL, 7LL);
    uint64_t v14 = sub_10045AD78( 0xD00000000000002ELL,  (void *)0x80000001008647A0LL,  (uint64_t)v4,  (uint64_t)sub_1004B15F8,  0LL,  (uint64_t)sub_1004BCE88,  v12);
    swift_release();
    *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_afterFirstUnlockActivity) = v14;
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004B15F8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v17 - v8;
  static SystemInfo.lockState.getter(v7);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v6,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v2);
  uint64_t v10 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v2, v10);
  uint64_t v12 = v17;
  uint64_t v11 = v18;
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v9, v2);
  BOOL v15 = v11 == v12;
  *a1 = 2LL * (v11 != v12);
  a1[1] = v15;
  if (v11 == v12) {
    uint64_t v16 = 576LL;
  }
  else {
    uint64_t v16 = 0LL;
  }
  a1[2] = v15;
  a1[3] = v15;
  a1[4] = v16;
  return result;
}

uint64_t sub_1004B173C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v12, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_100458824();
    }

    else if (a3 == 2)
    {
      uint64_t v8 = static os_log_type_t.default.getter(v7);
      if (qword_10099B6F8 != -1)
      {
        uint64_t v11 = v8;
        swift_once(&qword_10099B6F8, sub_100651098);
        uint64_t v8 = v11;
      }

      os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_100A2B008,  "Running afterFirstUnlockActivity.",  33LL,  2LL,  _swiftEmptyArrayStorage);
      sub_10012F398();
      type metadata accessor for Transaction(0LL);
      static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing",  60LL,  2LL,  sub_100153838);
      uint64_t v9 = sub_100458840();
      if (qword_10099BA48 != -1) {
        uint64_t v9 = swift_once(&qword_10099BA48, sub_1007C7B1C);
      }
      uint64_t v10 = static os_log_type_t.default.getter(v9);
      if (qword_10099BA38 != -1) {
        swift_once(&qword_10099BA38, sub_1007C7A44);
      }
      os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  qword_100A2B818,  "SystemInfoDynamic: Forcing Refresh",  34LL,  2LL,  _swiftEmptyArrayStorage);
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_1004B18FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = v20[0];
  uint64_t v9 = v20[1];
  uint64_t v10 = v20[2];
  uint64_t v11 = v20[3];
  uint64_t v12 = v20[4];
  uint64_t result = sub_100015750(a1, (uint64_t)v21, &qword_1009AECF0);
  BOOL v14 = v21[0] == 2LL;
  if (v21[0] == 2LL) {
    uint64_t v15 = 257LL;
  }
  else {
    uint64_t v15 = v8;
  }
  if (v21[0] == 2LL) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = v9;
  }
  if (v21[0] == 2LL) {
    uint64_t v17 = a2;
  }
  else {
    uint64_t v17 = v10;
  }
  if (v21[0] == 2LL) {
    uint64_t v18 = a3;
  }
  else {
    uint64_t v18 = v11;
  }
  *a4 = v15;
  a4[1] = v16;
  if (v14) {
    uint64_t v19 = 576LL;
  }
  else {
    uint64_t v19 = v12;
  }
  a4[2] = v17;
  a4[3] = v18;
  a4[4] = v19;
  return result;
}

uint64_t sub_1004B19AC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_100458824();
    }

    else if (a3 == 2)
    {
      uint64_t v8 = static os_log_type_t.default.getter(v7);
      if (qword_10099B750 != -1)
      {
        uint64_t v9 = v8;
        swift_once(&qword_10099B750, sub_1006514DC);
        uint64_t v8 = v9;
      }

      os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_100A2B060,  "pruning BeaconManagerService",  28LL,  2LL,  _swiftEmptyArrayStorage);
      swift_retain();
      sub_1004F14B0();
      swift_release();
      swift_retain();
      sub_1004F1784();
      swift_release();
      sub_100458840();
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_1004B1AD0(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  return swift_task_switch(sub_1004B1AE8, 0LL, 0LL);
}

uint64_t sub_1004B1AE8()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C908 + dword_10099C908);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C90C);
    *(void *)(v0 + 128) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1004B1BE8;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004B1BE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004B1C44, 0LL, 0LL);
}

uint64_t sub_1004B1C44()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 136))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_100104784();
    swift_release();
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2A1C8);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing NotifyWhenFoundManager.", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B1D44()
{
  uint64_t v42 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v42);
  EnumCaseMultiPayload = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v3 = *(void *)(v41 - 8);
  uint64_t v4 = __chkstk_darwin(v41);
  uint64_t v40 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v35 = v0;
  uint64_t v12 = (void *)v0[7];
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)(v11);
  uint64_t v15 = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v0 = (void *)static os_log_type_t.default.getter(v15);
  if (qword_10099B728 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v0,  &_mh_execute_header,  qword_100A2B038,  "Family updated",  14LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v17 = sub_100506C30();
    uint64_t v18 = v17;
    char v43 = _swiftEmptyArrayStorage;
    uint64_t v39 = *((void *)v17 + 2);
    if (!v39) {
      break;
    }
    uint64_t v19 = (uint64_t)EnumCaseMultiPayload;
    unint64_t v20 = 0LL;
    uint64_t v0 = _swiftEmptyArrayStorage;
    uint64_t v21 = type metadata accessor for OwnedBeaconRecord;
    uint64_t v36 = v3;
    uint64_t v37 = EnumCaseMultiPayload;
    uint64_t v38 = v17;
    while (v20 < *((void *)v18 + 2))
    {
      unint64_t v22 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v23 = *(void *)(v3 + 72);
      sub_10001DC4C((uint64_t)&v18[v22 + v23 * v20], (uint64_t)v7, v21);
      sub_10001DC4C((uint64_t)&v7[*(int *)(v41 + 24)], v19, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = (char *)swift_getEnumCaseMultiPayload(v19, v42);
      sub_100018C68(v19, type metadata accessor for StableIdentifier);
      if ((_DWORD)EnumCaseMultiPayload == 4)
      {
        sub_100018C68((uint64_t)v7, v21);
        uint64_t v18 = v38;
      }

      else
      {
        uint64_t v24 = v21;
        sub_10002218C((uint64_t)v7, v40, v21);
        if ((swift_isUniquelyReferenced_nonNull_native(v0) & 1) == 0) {
          sub_1000328A4(0, v0[2] + 1LL, 1);
        }
        uint64_t v0 = v43;
        unint64_t v26 = v43[2];
        unint64_t v25 = v43[3];
        uint64_t v18 = v38;
        if (v26 >= v25 >> 1)
        {
          sub_1000328A4(v25 > 1, v26 + 1, 1);
          uint64_t v0 = v43;
        }

        v0[2] = v26 + 1;
        uint64_t v27 = (uint64_t)v0 + v22 + v26 * v23;
        uint64_t v21 = v24;
        sub_10002218C(v40, v27, v24);
        uint64_t v3 = v36;
        uint64_t v19 = (uint64_t)v37;
      }

      if (v39 == ++v20)
      {
        uint64_t v16 = v43;
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_once(&qword_10099B728, sub_1006512E8);
  }

uint64_t sub_1004B2100()
{
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AAA0);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "Received RTLocationsOfInterestDidChange notification, scheduling safe lcoation update.",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v5);
  return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.LocationOfInterestProvider.updateAllSafeLocationsWithLOI",  86LL,  2LL,  sub_10049DD94);
}

uint64_t sub_1004B2240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  *(void *)(v4 + 24) = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1004B229C, 0LL, 0LL);
}

uint64_t sub_1004B229C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  os_log_type_t v3 = (void *)swift_task_alloc(dword_1009B04CC);
  *(void *)(v0 + 32) = v3;
  *os_log_type_t v3 = v0;
  v3[1] = sub_1004B2310;
  return sub_1004BB818(*(void *)(v0 + 24));
}

uint64_t sub_1004B2310()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 40LL) = v0;
  swift_task_dealloc(v2);
  sub_100015794(v3, (uint64_t *)&unk_1009A9C30);
  if (v0) {
    uint64_t v4 = sub_1004B23C0;
  }
  else {
    uint64_t v4 = sub_1004B2384;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1004B2384()
{
  uint64_t v1 = *(void *)(v0 + 24);
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B23C0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004B23FC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void **a4)
{
  uint64_t v42 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v42);
  uint64_t v41 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = __chkstk_darwin(v44);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  id v13 = (char *)&v38 - v12;
  char v14 = objc_autoreleasePoolPush();
  sub_1004B832C(a1);
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  uint64_t v19 = a2 + 16;
  objc_autoreleasePoolPop(v14);
  if (!v18)
  {
    uint64_t v16 = 0x6E616843206F4E3CLL;
    unint64_t v18 = 0xEE003E6761546567LL;
  }

  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_10000A720(v20, (uint64_t)qword_100A2AB18);
  uint64_t v43 = a1;
  sub_10001DC4C(a1, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
  swift_bridgeObjectRetain(v18);
  unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc(22LL, -1LL);
    uint64_t v25 = swift_slowAlloc(64LL, -1LL);
    uint64_t v40 = a4;
    uint64_t v26 = v25;
    v46[0] = v25;
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v39 = a3;
    swift_bridgeObjectRetain(v18);
    uint64_t v45 = sub_1003F11D4(v16, v18, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease_n(v18, 3LL);
    *(_WORD *)(v24 + 12) = 2080;
    sub_10001DC4C((uint64_t)v13, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    uint64_t v27 = String.init<A>(describing:)(v11, v44);
    uint64_t v45 = sub_1003F11D4(v27, v28, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    a3 = v39;
    sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Successfully updated local beacon [tag: %s]: %s ",  (uint8_t *)v24,  0x16u);
    swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v29 = v26;
    a4 = v40;
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v18, 2LL);
    sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
  }

  swift_beginAccess(v19, v46, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v19);
  uint64_t v31 = v43;
  if (Strong)
  {
    uint64_t v32 = Strong;
    uint64_t v33 = v44;
    uint64_t v34 = sub_1005777D8();
    if (v34[2]
      && (uint64_t v35 = v41,
          sub_10001DC4C(v31 + *(int *)(v33 + 24), v41, type metadata accessor for StableIdentifier),
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v35, v42),
          sub_100018C68(v35, type metadata accessor for StableIdentifier),
          !EnumCaseMultiPayload))
    {
      uint64_t v37 = *(void *)(v32 + 40);
      if (v37)
      {
        swift_retain();
        swift_retain();
        sub_10020B9D0((uint64_t)v34, v31, v37, a3, a4);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
      }

      else
      {
        __break(1u);
        objc_autoreleasePoolPop(0LL);
        __break(1u);
      }
    }

    else
    {
      ((void (*)(void))a3)();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }

uint64_t sub_1004B282C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *), uint64_t a7, void (*a8)(void))
{
  uint64_t v51 = a7;
  uint64_t v52 = a8;
  uint64_t v49 = a2;
  uint64_t v50 = a6;
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v45 = a3;
  uint64_t v9 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v46 = (uint64_t)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v44 = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(v44 + 64);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v43 - v19;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v21);
  os_log_type_t v23 = (uint64_t *)((char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v23, (uint64_t *)&unk_1009B0830);
  if (swift_getEnumCaseMultiPayload(v23, v21) == 1)
  {
    uint64_t v24 = *v23;
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_10000A720(v25, (uint64_t)qword_100A2AB18);
    swift_errorRetain(v24);
    uint64_t v26 = swift_errorRetain(v24);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v53 = v24;
      uint64_t v54 = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_errorRetain(v24);
      uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v32 = String.init<A>(describing:)(&v53, v31);
      uint64_t v53 = sub_1003F11D4(v32, v33, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v24);
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to update local beacon: %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v24);
      swift_errorRelease(v24);
    }

    v52();
    return swift_errorRelease(v24);
  }

  else
  {
    sub_10002218C((uint64_t)v23, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
    sub_10001581C(v49, (uint64_t)v11, &qword_1009AE490);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
    {
      sub_100015794((uint64_t)v11, &qword_1009AE490);
      v50(v20);
    }

    else
    {
      uint64_t v35 = (uint64_t)v11;
      uint64_t v36 = v46;
      sub_10002218C(v35, v46, type metadata accessor for BeaconNamingRecord);
      uint64_t v37 = *(void *)(v45 + 256);
      sub_10001DC4C((uint64_t)v20, (uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
      uint64_t v38 = *(unsigned __int8 *)(v44 + 80);
      uint64_t v39 = (v38 + 32) & ~v38;
      uint64_t v40 = swift_allocObject(&unk_10095F370, v39 + v16, v38 | 7);
      uint64_t v41 = v51;
      *(void *)(v40 + 16) = v50;
      *(void *)(v40 + 24) = v41;
      sub_10002218C((uint64_t)v18, v40 + v39, type metadata accessor for OwnedBeaconRecord);
      uint64_t v42 = v48;
      swift_bridgeObjectRetain_n(v48, 2LL);
      swift_retain();
      sub_10055F5D4( v36,  0,  (void (*)(uint64_t))sub_1004BD85C,  (void (*)(uint64_t))v40,  v37,  v47,  v42);
      swift_release();
      swift_bridgeObjectRelease_n(v42, 2LL);
      sub_100018C68(v36, type metadata accessor for BeaconNamingRecord);
    }

    return sub_100018C68((uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
  }

uint64_t sub_1004B2CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord(0LL) + 32));
  swift_bridgeObjectRetain(a3);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_1004B2CF4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (a1)
  {
    uint64_t v3 = a1;
    uint64_t v4 = swift_errorRetain(a1);
    uint64_t v5 = static os_log_type_t.error.getter(v4);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v6 = qword_100A2B008;
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + 16) = xmmword_1007E67D0;
    uint64_t v14 = v3;
    swift_errorRetain(v3);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v10 = String.init<A>(describing:)(&v14, v9);
    uint64_t v12 = v11;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_1000226F4();
    *(void *)(v8 + 32) = v10;
    *(void *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Error from updateSharedBeaconRecord: %@", 39LL, 2LL, v8);
    swift_bridgeObjectRelease();
    a1 = swift_errorRelease(v3);
  }

  return a2(a1);
}

uint64_t sub_1004B2E20(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v4);
  uint64_t v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  __chkstk_darwin(v6);
  uint64_t v37 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (uint64_t *)((char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = (void *)v2[7];
  *unint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    uint64_t v38 = v9;
    uint64_t v22 = dispatch_group_create();
    sub_10001581C(a1, (uint64_t)v14, (uint64_t *)&unk_1009A9C30);
    uint64_t v23 = v2[32];
    uint64_t v24 = *(void *)(v23 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    uint64_t v25 = type metadata accessor for BeaconKeyManager(0LL);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v23, v24, (char *)&type metadata for () + 8, v25);
    uint64_t v26 = v42;
    uint64_t v27 = type metadata accessor for LocalBeaconingManager(0LL);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    v2[4] = sub_100654F4C((uint64_t)v14, v26);
    swift_retain();
    swift_release();
    uint64_t v28 = a1;
    sub_10001581C(a1, (uint64_t)v12, (uint64_t *)&unk_1009A9C30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v12, 1LL, v40) == 1)
    {
      sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A9C30);
    }

    else
    {
      uint64_t v29 = v37;
      sub_10002218C( (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v37,  type metadata accessor for OwnedBeaconRecord);
      sub_1004B32B8(v29);
      sub_100018C68(v29, type metadata accessor for OwnedBeaconRecord);
    }

    dispatch_group_enter(v22);
    uint64_t v30 = type metadata accessor for TaskPriority(0LL);
    uint64_t v31 = (uint64_t)v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v41, 1LL, 1LL, v30);
    sub_10001581C(v28, (uint64_t)v14, (uint64_t *)&unk_1009A9C30);
    uint64_t v32 = *(unsigned __int8 *)(v38 + 80);
    uint64_t v33 = (v32 + 48) & ~v32;
    uint64_t v34 = (void *)swift_allocObject(&unk_10095F190, v33 + v10, v32 | 7);
    v34[2] = 0LL;
    v34[3] = 0LL;
    v34[4] = v22;
    v34[5] = v2;
    sub_100015750((uint64_t)v14, (uint64_t)v34 + v33, (uint64_t *)&unk_1009A9C30);
    uint64_t v35 = v22;
    swift_retain();
    sub_1003B76DC(v31, (uint64_t)&unk_1009B0558, (uint64_t)v34);
    swift_release();
    OS_dispatch_group.wait()();

    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004B319C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a4;
  uint64_t v8 = (void *)swift_task_alloc(dword_1009B04CC);
  *(void *)(v6 + 24) = v8;
  void *v8 = v6;
  v8[1] = sub_1004B31EC;
  return sub_1004BB818(a6);
}

uint64_t sub_1004B31EC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 32LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1004B3284;
  }
  else {
    uint64_t v3 = sub_1004B3250;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1004B3250()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B3284()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B32B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v75 = a1;
  uint64_t v3 = sub_100004AEC(&qword_1009B0540);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OfflineFindingInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v74 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009B0548);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v72 - v13;
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(_BYTE **)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v81[0] = (id)0x7365547265646E75LL;
  v81[1] = (id)0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v79, v81, sub_10000A71C, 0LL, &type metadata for Bool);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v79 & 1) == 0)
  {
    uint64_t v19 = *(void **)(v1 + 56);
    *uint64_t v17 = v19;
    (*((void (**)(void *, void, uint64_t))v15 + 13))( v17,  enum case for DispatchPredicate.onQueue(_:),  v14);
    id v20 = v19;
    LOBYTE(v19) = _dispatchPreconditionTest(_:)(v17);
    uint64_t result = (*((uint64_t (**)(void *, uint64_t))v15 + 1))(v17, v14);
    if ((v19 & 1) != 0)
    {
      uint64_t v21 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) & 1) != 0) {
        return result;
      }
      *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 1;
      uint64_t v15 = v76;
      sub_10068C124(v76);
      sub_10001581C((uint64_t)v15, (uint64_t)v12, &qword_1009B0548);
      if (swift_getEnumCaseMultiPayload(v12, v9) != 1)
      {
        sub_100015794((uint64_t)v15, &qword_1009B0548);
        uint64_t v27 = (uint64_t)v12;
        return sub_100015794(v27, &qword_1009B0548);
      }

      *(_BYTE *)(v2 + v21) = 0;
      sub_100134468(v75, (uint64_t)v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) != 1)
      {
        sub_10002218C((uint64_t)v5, v74, type metadata accessor for OfflineFindingInfo);
        unint64_t v28 = sub_1005A7ED4();
        if (qword_10099B238 != -1) {
          swift_once(&qword_10099B238, sub_10028EB6C);
        }
        uint64_t v29 = type metadata accessor for Logger(0LL);
        uint64_t v30 = sub_10000A720(v29, (uint64_t)qword_100A2A488);
        swift_bridgeObjectRetain_n(v28, 2LL);
        uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
        os_log_type_t v33 = static os_log_type_t.debug.getter(v32);
        BOOL v34 = os_log_type_enabled(v32, v33);
        uint64_t v75 = v30;
        if (v34)
        {
          uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v36 = (void *)swift_slowAlloc(32LL, -1LL);
          v81[0] = v36;
          *(_DWORD *)uint64_t v35 = 136315138;
          uint64_t v73 = v35 + 4;
          swift_bridgeObjectRetain(v28);
          uint64_t v38 = Dictionary.description.getter( v37,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
          unint64_t v40 = v39;
          swift_bridgeObjectRelease();
          uint64_t v79 = sub_1003F11D4(v38, v40, (uint64_t *)v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v73, v35 + 12);
          swift_bridgeObjectRelease_n(v28, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "offineFindingInfo: %s", v35, 0xCu);
          swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v36, -1LL, -1LL);
          swift_slowDealloc(v35, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v28, 2LL);
        }

        swift_bridgeObjectRetain_n(v28, 2LL);
        uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
        os_log_type_t v43 = static os_log_type_t.debug.getter(v42);
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v45 = (void *)swift_slowAlloc(32LL, -1LL);
          v81[0] = v45;
          *(_DWORD *)uint64_t v44 = 136315138;
          uint64_t v73 = v44 + 4;
          swift_bridgeObjectRetain(v28);
          uint64_t v47 = Dictionary.description.getter( v46,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
          unint64_t v49 = v48;
          swift_bridgeObjectRelease();
          uint64_t v79 = sub_1003F11D4(v47, v49, (uint64_t *)v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v73, v44 + 12);
          swift_bridgeObjectRelease_n(v28, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "dict: %s", v44, 0xCu);
          swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v45, -1LL, -1LL);
          swift_slowDealloc(v44, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v28, 2LL);
        }

        uint64_t v50 = v76;
        uint64_t v51 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v81[0] = 0LL;
        id v53 = [v51 dataWithPropertyList:isa format:200 options:0 error:v81];

        id v54 = v81[0];
        if (v53)
        {
          swift_bridgeObjectRelease();
          uint64_t v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
          unint64_t v57 = v56;

          sub_10068CA30(v55, v57);
          sub_100016F9C(v55, v57);
        }

        else
        {
          uint64_t v58 = v54;
          uint64_t v59 = _convertNSErrorToError(_:)(v54);

          swift_willThrow(v60);
          swift_errorRetain(v59);
          swift_bridgeObjectRetain(v28);
          uint64_t v61 = swift_errorRetain(v59);
          unint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
          os_log_type_t v63 = static os_log_type_t.error.getter(v62);
          if (os_log_type_enabled(v62, v63))
          {
            uint64_t v64 = swift_slowAlloc(22LL, -1LL);
            uint64_t v65 = (void *)swift_slowAlloc(64LL, -1LL);
            v81[0] = v65;
            *(_DWORD *)uint64_t v64 = 136315394;
            swift_bridgeObjectRetain(v28);
            uint64_t v76 = (char *)&type metadata for Any + 8;
            uint64_t v67 = Dictionary.description.getter( v66,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
            unint64_t v69 = v68;
            swift_bridgeObjectRelease();
            uint64_t v79 = sub_1003F11D4(v67, v69, (uint64_t *)v81);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v64 + 4, v64 + 12);
            swift_bridgeObjectRelease_n(v28, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v64 + 12) = 2080;
            swift_getErrorValue(v59, v78, v77);
            uint64_t v70 = Error.localizedDescription.getter(v77[1], v77[2]);
            uint64_t v79 = sub_1003F11D4(v70, v71, (uint64_t *)v81);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v64 + 14, v64 + 22);
            swift_bridgeObjectRelease();
            swift_errorRelease(v59);
            swift_errorRelease(v59);
            _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "Error converting offlineFindingInfo to data: %s error: %s",  (uint8_t *)v64,  0x16u);
            swift_arrayDestroy(v65, 2LL, v76);
            swift_slowDealloc(v65, -1LL, -1LL);
            swift_slowDealloc(v64, -1LL, -1LL);
          }

          else
          {

            swift_errorRelease(v59);
            swift_errorRelease(v59);
            swift_bridgeObjectRelease_n(v28, 2LL);
          }

          swift_errorRelease(v59);
        }

        sub_100018C68(v74, type metadata accessor for OfflineFindingInfo);
        uint64_t v27 = (uint64_t)v50;
        return sub_100015794(v27, &qword_1009B0548);
      }

      sub_100015794((uint64_t)v5, &qword_1009B0540);
      if (qword_10099B238 == -1)
      {
LABEL_9:
        uint64_t v22 = type metadata accessor for Logger(0LL);
        uint64_t v23 = sub_10000A720(v22, (uint64_t)qword_100A2A488);
        uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
        os_log_type_t v25 = static os_log_type_t.error.getter(v24);
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "offineFindingInfo retured nil", v26, 2u);
          swift_slowDealloc(v26, -1LL, -1LL);
        }

        uint64_t v27 = (uint64_t)v15;
        return sub_100015794(v27, &qword_1009B0548);
      }
    }

    else
    {
      __break(1u);
    }

    swift_once(&qword_10099B238, sub_10028EB6C);
    goto LABEL_9;
  }

  return result;
}

void sub_1004B3C34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = sub_100004AEC(&qword_1009AF860);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  XPCSession.proxy.getter(v10);
  uint64_t v11 = v19;
  if (v19)
  {
    if (a4 >> 60 == 15) {
      Class isa = 0LL;
    }
    else {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v7);
    uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v14 = (v13 + 24) & ~v13;
    uint64_t v15 = swift_allocObject(&unk_10095EEE8, v14 + v9, v13 | 7);
    *(void *)(v15 + 16) = a2;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v15 + v14,  (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
    aBlock[4] = sub_1004BC108;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10033A8C4;
    id aBlock[3] = &unk_10095EF00;
    uint64_t v16 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v11 pushLocalBeaconInfo:isa completion:v16];
    swift_unknownObjectRelease(v11);
    _Block_release(v16);
  }

uint64_t sub_1004B3DC8(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_10000A720(v2, (uint64_t)qword_100A2AB18);
    uint64_t v3 = swift_errorRetain(a1);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v6 = 138543362;
      uint64_t v8 = _convertErrorToNSError(_:)(a1);
      uint64_t v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
      *uint64_t v7 = v8;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error from pushLocalBeaconInfo: %{public}@", v6, 0xCu);
      uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v7, 1LL, v9);
      swift_slowDealloc(v7, -1LL, -1LL);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a1);
    }

    uint64_t v13 = a1;
    uint64_t v12 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(throwing:)(&v13, v12);
  }

  else
  {
    uint64_t v10 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(returning:)(v10, v10);
  }

void sub_1004B3F98(uint64_t a1)
{
  uint64_t v1 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v2 = qword_100A2B008;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + 16) = xmmword_1007E67D0;
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v6 = UUID.uuidString.getter(v5);
  uint64_t v8 = v7;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000226F4();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, v2, "Removing poisoned local beacon: %@", 34LL, 2LL, v4);
  swift_bridgeObjectRelease();
  sub_1004B40FC();
  id v9 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  id v10 = String._bridgeToObjectiveC()();
  [v9 removeObjectForKey:v10];
}

uint64_t sub_1004B40FC()
{
  uint64_t v36 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v1 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v3 = (char *)v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_group_t v33 = dispatch_group_create();
  uint64_t v31 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
  uint64_t v32 = sub_1005067E8();
  uint64_t v34 = v0;
  sub_10012E6EC((uint64_t)v32);
  uint64_t v8 = sub_1005067E8();
  int64_t v9 = v8[2];
  if (v9)
  {
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v9, 0);
    uint64_t v10 = *(unsigned __int8 *)(v1 + 80);
    v30[1] = v8;
    uint64_t v11 = (uint64_t)v8 + ((v10 + 32) & ~v10);
    uint64_t v12 = *(void *)(v1 + 72);
    uint64_t v35 = v12;
    do
    {
      sub_10001DC4C(v11, (uint64_t)v3, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v3[*(int *)(v36 + 20)], v4);
      sub_100018C68((uint64_t)v3, type metadata accessor for OwnedBeaconRecord);
      uint64_t v13 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
      {
        sub_1000328D0(0, v13[2] + 1LL, 1);
        uint64_t v12 = v35;
        uint64_t v13 = v37;
      }

      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      if (v15 >= v14 >> 1)
      {
        sub_1000328D0(v14 > 1, v15 + 1, 1);
        uint64_t v12 = v35;
        uint64_t v13 = v37;
      }

      v13[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))( (unint64_t)v13 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 72) * v15,
        v7,
        v4);
      uint64_t v37 = v13;
      v11 += v12;
      --v9;
    }

    while (v9);
    uint64_t v16 = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v16 = swift_bridgeObjectRelease();
    uint64_t v13 = _swiftEmptyArrayStorage;
  }

  uint64_t v17 = static os_log_type_t.default.getter(v16);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v18 = qword_100A2B008;
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_1007E67D0;
  swift_bridgeObjectRetain(v13);
  uint64_t v22 = Array.description.getter(v21, v4);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = sub_1000226F4();
  *(void *)(v20 + 32) = v22;
  *(void *)(v20 + 40) = v24;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "removeLocalBeaconRecord: %@", 27LL, 2LL, v20);
  swift_bridgeObjectRelease();
  uint64_t v25 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v25);
  dispatch_group_t v27 = v33;
  uint64_t v26 = v34;
  v30[-6] = v13;
  v30[-5] = v27;
  unint64_t v28 = v32;
  v30[-4] = v26;
  v30[-3] = v28;
  v30[-2] = v31;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconManagerService.removeLocalBeaconRecord",  74LL,  2LL,  sub_1004BAC18);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_1004B4484()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v77 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  __chkstk_darwin(v5);
  uint64_t v74 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v79 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  uint64_t v7 = __chkstk_darwin(v79);
  int64_t v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v73 - v11;
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v73 - v13;
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v81 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v76 = (uint64_t)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v75 = (uint64_t)&v73 - v19;
  __chkstk_darwin(v18);
  uint64_t v80 = (uint64_t)&v73 - v20;
  uint64_t v21 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t *)((char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v25 = *(void **)(v1 + 56);
  *uint64_t v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  uint64_t v27 = (*(uint64_t (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if ((v25 & 1) != 0)
  {
    uint64_t v21 = static os_log_type_t.default.getter(v27);
    if (qword_10099B6F8 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B6F8, sub_100651098);
LABEL_3:
  os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_100A2B008,  "turnLocalBeaconingOn()",  22LL,  2LL,  _swiftEmptyArrayStorage);
  sub_1001320A0((uint64_t)v14);
  unint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
  if (v28(v14, 1LL, v15) == 1)
  {
    sub_100015794((uint64_t)v14, (uint64_t *)&unk_1009A9C30);
    goto LABEL_5;
  }

  uint64_t v38 = v80;
  sub_10002218C((uint64_t)v14, v80, type metadata accessor for OwnedBeaconRecord);
  sub_1004F730C();
  uint64_t v39 = 0LL;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  swift_release();
  if (v84[0] != 1)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 0;
    sub_10001DC4C(v38, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v12, 0LL, 1LL, v15);
    sub_1004B2E20((uint64_t)v12);
    sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A9C30);
    uint64_t v50 = v38;
LABEL_24:
    sub_100018C68(v50, type metadata accessor for OwnedBeaconRecord);
    return;
  }

  id v40 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v41 = String._bridgeToObjectiveC()();
  id v42 = [v40 stringForKey:v41];

  if (!v42)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v4, 1LL, 1LL, v78);
    goto LABEL_15;
  }

  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v45 = v44;

  UUID.init(uuidString:)(v43, v45);
  swift_bridgeObjectRelease();
  uint64_t v47 = v77;
  uint64_t v46 = v78;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v4, 1LL, v78) == 1)
  {
LABEL_15:
    uint64_t v51 = sub_100015794((uint64_t)v4, &qword_10099D8A0);
    goto LABEL_16;
  }

  uint64_t v73 = 0LL;
  unint64_t v48 = v74;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v74, v4, v46);
  uint64_t v49 = v80;
  if ((static UUID.== infix(_:_:)(v48, v80 + *(int *)(v15 + 20)) & 1) == 0)
  {
    uint64_t v51 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v48, v46);
    uint64_t v39 = v73;
LABEL_16:
    uint64_t v52 = static os_log_type_t.default.getter(v51);
    uint64_t v53 = os_log(_:dso:log:_:_:)( v52,  &_mh_execute_header,  qword_100A2B008,  "Local beacon record already exists",  34LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v54 = v80;
    if (*(void *)(v80 + *(int *)(v15 + 44) + 8) >> 60 == 15LL)
    {
      uint64_t v73 = v39;
      uint64_t v55 = static os_log_type_t.default.getter(v53);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v56 = qword_100A2B018;
      uint64_t v57 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v58 = swift_allocObject(v57, 72LL, 7LL);
      __int128 v79 = xmmword_1007E67D0;
      *(_OWORD *)(v58 + 16) = xmmword_1007E67D0;
      uint64_t v59 = v75;
      sub_10001DC4C(v54, v75, type metadata accessor for OwnedBeaconRecord);
      uint64_t v60 = String.init<A>(describing:)(v59, v15);
      uint64_t v62 = v61;
      *(void *)(v58 + 56) = &type metadata for String;
      unint64_t v63 = sub_1000226F4();
      *(void *)(v58 + 64) = v63;
      *(void *)(v58 + 32) = v60;
      *(void *)(v58 + 40) = v62;
      uint64_t v64 = v80;
      os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v56, "Upgrade local beacon: %@", 24LL, 2LL, v58);
      swift_bridgeObjectRelease();
      uint64_t v65 = v76;
      uint64_t v66 = v73;
      uint64_t v67 = sub_1004B61EC(v64, v76);
      if (v66)
      {
        uint64_t v68 = static os_log_type_t.error.getter(v67);
        uint64_t v69 = qword_100A2B018;
        uint64_t v70 = swift_allocObject(v57, 72LL, 7LL);
        *(_OWORD *)(v70 + 16) = v79;
        swift_getErrorValue(v66, v83, v82);
        uint64_t v71 = Error.localizedDescription.getter(v82[1], v82[2]);
        *(void *)(v70 + 56) = &type metadata for String;
        *(void *)(v70 + 64) = v63;
        *(void *)(v70 + 32) = v71;
        *(void *)(v70 + 40) = v72;
        os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Local record upgrade failed: %@", 31LL, 2LL, v70);
        swift_bridgeObjectRelease();
        sub_10001DC4C(v64, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v12, 0LL, 1LL, v15);
        sub_1004B2E20((uint64_t)v12);
        swift_errorRelease(v66);
        sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A9C30);
      }

      else
      {
        sub_10001DC4C(v65, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v12, 0LL, 1LL, v15);
        sub_1004B2E20((uint64_t)v12);
        sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A9C30);
        sub_100018C68(v65, type metadata accessor for OwnedBeaconRecord);
      }

      uint64_t v50 = v64;
    }

    else
    {
      sub_10001DC4C(v80, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v12, 0LL, 1LL, v15);
      sub_1004B2E20((uint64_t)v12);
      sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A9C30);
      uint64_t v50 = v54;
    }

    goto LABEL_24;
  }

  sub_1004B3F98(v49);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v46);
  sub_100018C68(v49, type metadata accessor for OwnedBeaconRecord);
LABEL_5:
  uint64_t v29 = v79;
  uint64_t v30 = dispatch_group_create();
  dispatch_group_enter(v30);
  uint64_t v31 = swift_allocBox(v29);
  uint64_t v33 = v32;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v32, 1LL, 1LL, v15);
  uint64_t v34 = (void *)swift_allocObject(&unk_10095F140, 40LL, 7LL);
  v34[2] = v30;
  v34[3] = v1;
  v34[4] = v31;
  uint64_t v35 = v30;
  swift_retain();
  swift_retain();
  sub_100130DAC((uint64_t)sub_1004BCAA4, (uint64_t)v34);
  swift_release();
  OS_dispatch_group.wait()();
  *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 0;
  swift_beginAccess(v33, v84, 0LL, 0LL);
  sub_10001581C(v33, (uint64_t)v12, (uint64_t *)&unk_1009A9C30);
  sub_1004B2E20((uint64_t)v12);
  sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A9C30);
  sub_10001581C(v33, (uint64_t)v9, (uint64_t *)&unk_1009A9C30);
  if (v28(v9, 1LL, v15) == 1)
  {
    uint64_t v36 = sub_100015794((uint64_t)v9, (uint64_t *)&unk_1009A9C30);
    uint64_t v37 = static os_log_type_t.error.getter(v36);
    os_log(_:dso:log:_:_:)( v37,  &_mh_execute_header,  qword_100A2B008,  "Error creating local beacon.",  28LL,  2LL,  _swiftEmptyArrayStorage);
    swift_release();
  }

  else
  {

    sub_100015794((uint64_t)v9, (uint64_t *)&unk_1009A9C30);
    swift_release();
  }

void sub_1004B4DF0(uint64_t a1, dispatch_group_s *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = swift_projectBox(a4);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(a1, 1LL, v17) != 1)
  {
    uint64_t v33 = *(void *)(a3 + 56);
    aBlock[4] = sub_1004BCAF8;
    aBlock[5] = a3;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    id aBlock[3] = &unk_10095F158;
    uint64_t v18 = _Block_copy(aBlock);
    uint64_t v32 = v13;
    uint64_t v19 = v18;
    uint64_t v20 = swift_retain();
    static DispatchQoS.unspecified.getter(v20);
    uint64_t v34 = _swiftEmptyArrayStorage;
    uint64_t v21 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v30 = v9;
    uint64_t v22 = a1;
    uint64_t v23 = a2;
    uint64_t v24 = v21;
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v31 = v12;
    uint64_t v26 = v25;
    uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v28 = v24;
    a2 = v23;
    a1 = v22;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v26, v27, v8, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v11, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v31);
    swift_release();
  }

  swift_beginAccess(v16, aBlock, 1LL, 0LL);
  sub_1004BCAB0(a1, v16);
  dispatch_group_leave(a2);
}

void sub_1004B5048()
{
  uint64_t v1 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void **)(v0 + 56);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v4 = static os_log_type_t.default.getter(v10);
  if (qword_10099B6F8 != -1) {
LABEL_5:
  }
    swift_once(&qword_10099B6F8, sub_100651098);
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_100A2B008,  "turnLocalBeaconingOff()",  23LL,  2LL,  _swiftEmptyArrayStorage);
  *(void *)(v0 + 32) = 0LL;
  uint64_t v11 = swift_release();
  sub_10012E6EC(v11);
  uint64_t v12 = dispatch_group_create();
  dispatch_group_enter(v12);
  uint64_t v13 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v3, 1LL, 1LL, v13);
  uint64_t v14 = (void *)swift_allocObject(&unk_10095F118, 48LL, 7LL);
  v14[2] = 0LL;
  v14[3] = 0LL;
  v14[4] = v12;
  v14[5] = v0;
  uint64_t v15 = v12;
  swift_retain();
  sub_1003B76DC((uint64_t)v3, (uint64_t)&unk_1009B0538, (uint64_t)v14);
  swift_release();
  OS_dispatch_group.wait()();
}

uint64_t sub_1004B5224(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t result = __chkstk_darwin(v5);
  id v9 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v12 = a2 + ((v11 + 32) & ~v11);
    uint64_t v18 = *(void *)(v8 + 72);
    uint64_t v13 = (v11 + 24) & ~v11;
    v16[2] = v2;
    uint64_t v17 = v13 + v7;
    uint64_t v14 = v11 | 7;
    v16[1] = a2;
    swift_bridgeObjectRetain(a2);
    do
    {
      sub_10001DC4C(v12, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      uint64_t v15 = swift_allocObject(&unk_10095F0F0, v17, v14);
      *(void *)(v15 + 16) = a1;
      sub_10002218C((uint64_t)v9, v15 + v13, type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      sub_100135060(v12, 0, (uint64_t)sub_1004BC9DC, v15);
      swift_release();
      v12 += v18;
      --v10;
    }

    while (v10);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_1004B5374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  if (a1)
  {
    uint64_t v9 = swift_errorRetain(a1);
    uint64_t v10 = static os_log_type_t.default.getter(v9);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v11 = qword_100A2B008;
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
    *(_OWORD *)(v13 + 16) = xmmword_1007E67D0;
    uint64_t v27 = a1;
    swift_errorRetain(a1);
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v15 = String.init<A>(describing:)(&v27, v14);
    uint64_t v17 = v16;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_1000226F4();
    *(void *)(v13 + 32) = v15;
    *(void *)(v13 + 40) = v17;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Processed and delete failed with error - %@", 43LL, 2LL, v13);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v19 = static os_log_type_t.default.getter(v8);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v20 = qword_100A2B008;
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
    *(_OWORD *)(v22 + 16) = xmmword_1007E67D0;
    sub_10001DC4C(a3, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    uint64_t v23 = String.init<A>(describing:)(v7, v5);
    uint64_t v25 = v24;
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_1000226F4();
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 40) = v25;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Processed and deleted %@", 24LL, 2LL, v22);
    return swift_bridgeObjectRelease();
  }

uint64_t sub_1004B55A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v18[1] = *(void *)(a2 + 56);
  uint64_t v11 = swift_allocObject(&unk_10095ED58, 32LL, 7LL);
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  aBlock[4] = sub_1004BAB2C;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_10095ED70;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v16 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_1004B57B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = *(void **)(v1 + 56);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v2 = *(void *)(v1 + 256);
  if (qword_10099B610 != -1) {
LABEL_5:
  }
    swift_once(&qword_10099B610, sub_1005D3C50);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A2AE80);
  uint64_t v10 = sub_10057BCE0(v9);
  swift_retain();
  uint64_t v11 = sub_1004B9884((uint64_t)v10, v2);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v12 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v12);
  *(void *)&v14[-16] = v11;
  *(void *)&v14[-8] = v1;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.RecordsPendingDeletion", 52LL, 2LL, sub_1004BC70C);
  swift_bridgeObjectRelease();
  return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.reevaluateLocalBeaconing",  54LL,  2LL,  sub_1004BC724);
}

void sub_1004B5968(int a1, uint64_t a2)
{
  unsigned int v4 = sub_100627288();
  uint64_t v24 = a2;
  uint64_t v5 = sub_1001BEF0C();
  uint64_t v28 = v5;
  type metadata accessor for CLAuthorizationStatus(0LL);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000D44D4, v27, v6);

  int v7 = v29;
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  int v8 = sub_1006A0BB8(v29);
  swift_bridgeObjectRelease();
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  BOOL v9 = sub_1004BA6F4();
  swift_bridgeObjectRelease();
  id v10 = sub_1001BF158();
  char v11 = (char)v10;
  uint64_t v12 = static os_log_type_t.default.getter(v10);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  unsigned int v13 = v7 - 3;
  BOOL v14 = (v7 - 3) < 2;
  uint64_t v15 = qword_100A2B008;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 232LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_1007E8280;
  *(void *)(v17 + 56) = &type metadata for Bool;
  *(void *)(v17 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 32) = v11 & 1;
  *(void *)(v17 + 96) = &type metadata for Bool;
  *(void *)(v17 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 72) = v8 & 1;
  *(void *)(v17 + 136) = &type metadata for Bool;
  *(void *)(v17 + 144) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 112) = v9;
  *(void *)(v17 + 176) = &type metadata for Bool;
  *(void *)(v17 + 184) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 152) = v4 & 1;
  *(void *)(v17 + 216) = &type metadata for Bool;
  *(void *)(v17 + 224) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 192) = v14;
  os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  v15,  "EnableLocalBeaconing preference changed -- \n fmipEnabled: %d \n localBeaconingAllowed: %ld \n serviceEnabled: %d \n locationServicesEnabled: %d \n fmipLocationServicesEnabled: %d",  v23,  v24,  v2,  a1,  v27[0]);
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    if ((v8 & v9 & v4 & 1) != 0 && v13 <= 1) {
      sub_1004B4484();
    }
    else {
      sub_1004B5048();
    }
  }

  else
  {
    sub_1004B5048();
    *(_BYTE *)(v25 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 0;
  }

  uint64_t v18 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = (const __CFString *)SPBeaconingStateChangedNotification;
    uint64_t v21 = static os_log_type_t.default.getter(v18);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_100A2B018,  "Posting SPBeaconingStateChangedNotification Darwin notification",  63LL,  2LL,  _swiftEmptyArrayStorage);
    CFNotificationCenterPostNotification(v19, v20, 0LL, 0LL, 1u);
  }

  else
  {
    uint64_t v22 = static os_log_type_t.error.getter(0LL);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_100A2B018,  "CFNotificationCenterGetDarwinNotifyCenter return nil!",  53LL,  2LL,  _swiftEmptyArrayStorage);
  }

  Transaction.capture()();
}

uint64_t sub_1004B5D04(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t result = os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_100A2B008,  "Clearing any registered XPC activities",  38LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pruneActivity);
  if (v4)
  {
    *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pruneActivity) = 0LL;
    uint64_t v5 = *(dispatch_queue_s **)(v4 + 16);
    uint64_t v6 = swift_allocObject(&unk_10095F0A0, 32LL, 7LL);
    *(void *)(v6 + 16) = sub_10020D094;
    *(void *)(v6 + 24) = v4;
    uint64_t v16 = sub_100154688;
    uint64_t v17 = v6;
    uint64_t v12 = _NSConcreteStackBlock;
    uint64_t v13 = 1107296256LL;
    BOOL v14 = sub_100025BD4;
    uint64_t v15 = &unk_10095F0B8;
    int v7 = _Block_copy(&v12);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v5, v7);
    _Block_release(v7);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v6, "", 90LL, 53LL, 20LL, 1LL);
    swift_release_n(v4, 2LL);
    uint64_t result = swift_release();
    if ((v5 & 1) != 0)
    {
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
  }

  uint64_t v8 = *(void *)(v1 + 40);
  if (v8)
  {
    BOOL v9 = *(dispatch_queue_s **)(v8 + 48);
    uint64_t v10 = swift_allocObject(&unk_10095F050, 32LL, 7LL);
    *(void *)(v10 + 16) = sub_1004BC6E4;
    *(void *)(v10 + 24) = v8;
    uint64_t v16 = sub_100154688;
    uint64_t v17 = v10;
    uint64_t v12 = _NSConcreteStackBlock;
    uint64_t v13 = 1107296256LL;
    BOOL v14 = sub_100025BD4;
    uint64_t v15 = &unk_10095F068;
    char v11 = _Block_copy(&v12);
    swift_retain_n(v8, 2LL);
    swift_retain();
    swift_release();
    dispatch_sync(v9, v11);
    _Block_release(v11);
    LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v10, "", 113LL, 571LL, 30LL, 1LL);
    swift_release_n(v8, 2LL);
    uint64_t result = swift_release();
    __break(1u);
    goto LABEL_8;
  }

uint64_t sub_1004B5F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(v2 + 48);
  uint64_t v13 = (void *)swift_allocObject(&unk_10095F000, 40LL, 7LL);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1004BC6BC;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_10095F018;
  BOOL v14 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_1004B616C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 256);
  type metadata accessor for Transaction(0LL);
  v6[3] = 0LL;
  v6[4] = 0LL;
  void v6[2] = v3;
  uint64_t v4 = static Transaction.named<A>(_:with:)( "com.apple.searchpartyd.beaconstore.repairdatastore",  50LL,  2LL,  sub_1004BC6C8,  v6);
  return a2(v4);
}

uint64_t sub_1004B61EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v17;
  unint64_t v4 = v18;
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord(0LL);
  if (*(void *)(a1 + *(int *)(v6 + 44) + 8) >> 60 == 15LL)
  {
    uint64_t v7 = v6;
    uint64_t v8 = dispatch_group_create();
    uint64_t v9 = swift_allocBox(v7);
    uint64_t v11 = v10;
    sub_10001DC4C(a1, v10, type metadata accessor for OwnedBeaconRecord);
    dispatch_group_enter(v8);
    uint64_t v12 = swift_allocObject(&unk_10095EFB0, 32LL, 7LL);
    *(void *)(v12 + 16) = v17;
    *(void *)(v12 + 24) = v4;
    uint64_t v16 = a2;
    uint64_t v13 = swift_allocObject(&unk_10095EFD8, 32LL, 7LL);
    *(void *)(v13 + 16) = v9;
    *(void *)(v13 + 24) = v8;
    sub_10001736C(v5, v4);
    swift_retain();
    BOOL v14 = v8;
    sub_1002B2F50( a1,  0,  (void (*)(uint64_t))sub_1004BC674,  v12,  sub_1004BC6A8,  (void (*)(uint64_t))v13);
    swift_release();
    swift_release();
    OS_dispatch_group.wait()();

    swift_beginAccess(v11, &v17, 0LL, 0LL);
    sub_10001DC4C(v11, v16, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    return sub_100016F9C(v5, v4);
  }

  else
  {
    sub_10001DC4C(a1, a2, type metadata accessor for OwnedBeaconRecord);
    return sub_100016F9C(v17, v18);
  }

void sub_1004B63A0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v34 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v14);
  uint64_t v16 = &v31[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v17 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v17)
  {
    unint64_t v18 = v17;
    int v32 = a1;
    uint64_t v33 = a2;
    uint64_t v19 = sub_100004AEC(&qword_1009B04F8);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    id v20 = v18;
    uint64_t v21 = XPCSession.init(connection:)();
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v16, 1LL, 1LL, v23);
      uint64_t v24 = swift_allocObject(&unk_10095EF88, 72LL, 7LL);
      *(void *)(v24 + 16) = 0LL;
      *(void *)(v24 + 24) = 0LL;
      *(void *)(v24 + 32) = v4;
      *(void *)(v24 + 40) = v22;
      *(_BYTE *)(v24 + 48) = v32 & 1;
      *(void *)(v24 + 56) = v33;
      *(void *)(v24 + 64) = a3;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1003EDB00((uint64_t)v16, (uint64_t)&unk_1009B0508, v24);
      swift_release();
      swift_release();

      return;
    }

    a2 = v33;
  }

  uint64_t v25 = swift_allocObject(&unk_10095EF38, 32LL, 7LL);
  *(void *)(v25 + 16) = a2;
  *(void *)(v25 + 24) = a3;
  aBlock[4] = sub_1004BC598;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_10095EF50;
  uint64_t v26 = _Block_copy(aBlock);
  uint64_t v27 = swift_retain();
  static DispatchQoS.unspecified.getter(v27);
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v28 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v30 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v29, v30, v8, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v26);
  _Block_release(v26);
  (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v10, v8);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v34);
  swift_release();
}

uint64_t sub_1004B66D4(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0LL);
  uint64_t v3 = sub_100007864( (unint64_t *)&unk_1009B0510,  type metadata accessor for BluetoothCommunicationCoordinator.Error,  (uint64_t)&unk_100819EE8);
  uint64_t v4 = swift_allocError(v2, v3, 0LL, 0LL);
  swift_storeEnumTagMultiPayload(v5, v2, 12LL);
  a1(v4);
  return swift_errorRelease(v4);
}

uint64_t sub_1004B6758( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 48) = a7;
  *(void *)(v8 + 56) = a8;
  *(_BYTE *)(v8 + 120) = a6;
  *(void *)(v8 + 32) = a4;
  *(void *)(v8 + 40) = a5;
  return swift_task_switch(sub_1004B6778, 0LL, 0LL);
}

uint64_t sub_1004B6778()
{
  uint64_t v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 64) = v2;
  uint64_t v3 = type metadata accessor for BeaconKeyManager(0LL);
  *uint64_t v2 = v0;
  v2[1] = sub_1004B67F0;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_1004BC648, *(void *)(v0 + 32), v3);
}

uint64_t sub_1004B67F0()
{
  return swift_task_switch(sub_1004B6850, 0LL, 0LL);
}

uint64_t sub_1004B6850()
{
  uint64_t v1 = v0[2];
  v0[9] = v1;
  uint64_t v2 = type metadata accessor for BeaconScanner();
  swift_allocObject(v2, 160LL, 15LL);
  uint64_t v3 = dword_1009B944C;
  swift_retain();
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1004B68E4;
  return sub_10064260C(v0[5], v1);
}

uint64_t sub_1004B68E4(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 80);
  uint64_t v5 = *v2;
  *(void *)(v5 + 88) = a1;
  *(void *)(v5 + 96) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_1004B69EC, 0LL, 0LL);
  }
  uint64_t v7 = (void *)swift_task_alloc(dword_1009B90EC);
  *(void *)(v5 + 104) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1004B6988;
  return sub_100642B70(*(_BYTE *)(v5 + 120));
}

uint64_t sub_1004B6988()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1004B6BFC;
  }
  else {
    uint64_t v3 = sub_1004B6BA8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1004B69EC()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_release();
  if (qword_10099B4D0 != -1) {
    swift_once(&qword_10099B4D0, sub_1004AB644);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AB00);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    uint64_t v8 = _convertErrorToNSError(_:)(v1);
    *(void *)(v0 + 24) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beacon scan error: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
  }

  uint64_t v10 = *(void (**)(uint64_t))(v0 + 48);

  swift_errorRetain(v1);
  v10(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B6BA8()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  (*(void (**)(void))(v0 + 48))(0LL);
  swift_release(v1);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B6BFC()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_release();
  if (qword_10099B4D0 != -1) {
    swift_once(&qword_10099B4D0, sub_1004AB644);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AB00);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    uint64_t v8 = _convertErrorToNSError(_:)(v1);
    *(void *)(v0 + 24) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beacon scan error: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
  }

  uint64_t v10 = *(void (**)(uint64_t))(v0 + 48);

  swift_errorRetain(v1);
  v10(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B6DC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 256);
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0LL);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v3, v4, (char *)&type metadata for () + 8, v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1004B6E38(uint64_t a1, int a2)
{
  *(_DWORD *)(v3 + 160) = a2;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = v2;
  return swift_task_switch(sub_1004B6E54, 0LL, 0LL);
}

uint64_t sub_1004B6E54()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C9B0 + dword_10099C9B0);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C9B4);
    *(void *)(v0 + 136) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1004B6F54;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004B6F54(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004B6FB0, 0LL, 0LL);
}

uint64_t sub_1004B6FB0()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 144))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_10099E6A4);
    *(void *)(v0 + 152) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1004B70E0;
    return sub_10006B564(*(void *)(v0 + 120), *(_DWORD *)(v0 + 160));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2AB18);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to get LeechScanningService!", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1004B70E0()
{
  return swift_task_switch(sub_100133140, 0LL, 0LL);
}

id *sub_1004B7134()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  sub_100015794((uint64_t)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_configSubscription, &qword_1009A0CB0);
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_transactionManager;
  uint64_t v2 = type metadata accessor for PressuredExitTransactionManager(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1004BD9B8(*(uint64_t *)((char *)v0
                           + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconKeyManagerURLChangedSubscription));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  sub_10002214C( *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock),  *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock + 8));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1004BD9C8((id *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_cbPeripheralManager));
  return v0;
}

uint64_t sub_1004B7504()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1004B7528()
{
  return type metadata accessor for BeaconManagerService(0LL);
}

uint64_t type metadata accessor for BeaconManagerService(uint64_t a1)
{
  uint64_t result = qword_1009AFC90;
  if (!qword_1009AFC90) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconManagerService);
  }
  return result;
}

void sub_1004B756C(uint64_t a1)
{
  v6[0] = &unk_100804F28;
  v6[1] = &unk_100804F40;
  void v6[2] = &unk_100804F40;
  v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v6[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[7] = &unk_100804F40;
  v6[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[17] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[18] = &unk_100804F40;
  v6[19] = &unk_100804F40;
  v6[20] = &unk_100804F40;
  v6[21] = &unk_100804F40;
  v6[22] = &unk_100804F40;
  v6[23] = &unk_100804F40;
  v6[24] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[25] = &unk_100804F58;
  v6[26] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[27] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[28] = &unk_100804F40;
  v6[29] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[30] = &unk_100804F40;
  sub_10008ED54(319LL);
  if (v3 <= 0x3F)
  {
    v6[31] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for PressuredExitTransactionManager(319LL);
    if (v5 <= 0x3F)
    {
      v6[32] = *(void *)(v4 - 8) + 64LL;
      v6[33] = &unk_100804F40;
      v6[34] = &unk_100804F40;
      v6[35] = &unk_100804F40;
      v6[36] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[37] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[38] = &unk_100804F40;
      v6[39] = &unk_100804F40;
      v6[40] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[41] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[42] = &unk_100804F40;
      v6[43] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[44] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[45] = &unk_100804F70;
      v6[46] = &unk_100804F40;
      v6[47] = &unk_100804F40;
      v6[48] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[49] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[50] = &unk_100804F40;
      v6[51] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[52] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[53] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[54] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[55] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[56] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[57] = &unk_100804F40;
      v6[58] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[59] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[60] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[61] = &unk_100804F40;
      v6[62] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[63] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[64] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[65] = &unk_100804F88;
      v6[66] = &unk_100804FA0;
      v6[67] = &unk_100804FA0;
      v6[68] = &unk_100804F40;
      v6[69] = &unk_100804F40;
      v6[70] = &unk_100804F40;
      v6[71] = &unk_100804F40;
      v6[72] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[73] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[74] = &unk_100804FB8;
      v6[75] = &unk_100804FA0;
      swift_updateClassMetadata2(a1, 256LL, 76LL, v6, a1 + 80);
    }
  }

uint64_t sub_1004B7710()
{
  return sub_1004AC784();
}

void sub_1004B7738()
{
  *(_BYTE *)(*v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_shouldForceFetch) = 1;
}

uint64_t sub_1004B7750(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_1009AED9C);
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_10033ED2C;
  return sub_10045D778(a1);
}

uint64_t sub_1004B77AC(uint64_t a1, int a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = swift_task_alloc(dword_1009AFCA4);
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = sub_100015D58;
  *(_DWORD *)(v7 + 160) = a2;
  *(void *)(v7 + 120) = a1;
  *(void *)(v7 + 128) = v6;
  return swift_task_switch(sub_1004B6E54, 0LL, 0LL);
}

void sub_1004B7820(uint64_t a1, void *a2)
{
}

uint64_t sub_1004B7844(uint64_t a1)
{
  uint64_t v2 = v1;
  char v3 = a1;
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v5 = qword_100A2B008;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1007E67D0;
  *(void *)(v7 + 56) = &type metadata for Bool;
  *(void *)(v7 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v7 + 32) = v3 & 1;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "FMIP State changed to %i", v12);
  swift_bridgeObjectRelease();
  if ((v3 & 1) == 0) {
    sub_1004B40FC();
  }
  type metadata accessor for Transaction(0LL);
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing",  60LL,  2LL,  sub_100153838);
  uint64_t v8 = *(dispatch_queue_s **)(v2 + 48);
  uint64_t v9 = swift_allocObject(&unk_10095EE48, 32LL, 7LL);
  *(void *)(v9 + 16) = sub_1004BABF8;
  *(void *)(v9 + 24) = v2;
  aBlock[4] = sub_100095030;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  id aBlock[3] = &unk_10095EE60;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v10);
  _Block_release(v10);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v9, "", 129LL, 2094LL, 27LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  return result;
}

uint64_t sub_1004B7A48(uint64_t a1)
{
  char v1 = a1;
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v3 = qword_100A2B008;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1007E67D0;
  *(void *)(v5 + 56) = &type metadata for Bool;
  *(void *)(v5 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v5 + 32) = v1 & 1;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "FMIP location services changed to %i", v7);
  swift_bridgeObjectRelease();
  type metadata accessor for Transaction(0LL);
  return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing",  60LL,  2LL,  sub_100153838);
}

uint64_t sub_1004B7B68(uint64_t a1, uint64_t a2, dispatch_group_s *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v66 = a5;
  uint64_t v67 = a6;
  uint64_t v64 = a1;
  uint64_t v65 = a4;
  dispatch_group_t v68 = a3;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  unint64_t v63 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v62 = (char *)&v47 - v11;
  uint64_t v51 = type metadata accessor for DispatchTime(0LL);
  uint64_t v50 = *(void *)(v51 - 8);
  uint64_t v12 = __chkstk_darwin(v51);
  unint64_t v48 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v49 = (char *)&v47 - v14;
  uint64_t v15 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v15);
  id v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v52 = a2;
  if (v18)
  {
    uint64_t v19 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v20 = (v19 + 32) & ~v19;
    uint64_t v21 = a2;
    uint64_t v22 = a2 + v20;
    uint64_t v23 = *(void *)(v8 + 72);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    uint64_t v58 = v19 | 7;
    uint64_t v59 = v23;
    uint64_t v60 = v20;
    unint64_t v57 = (v9 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v54 = v55 + 8;
    __n128 v25 = swift_bridgeObjectRetain(v21);
    uint64_t v71 = v8;
    uint64_t v61 = v17;
    uint64_t v26 = v66;
    while (1)
    {
      v24(v17, v22, v7, v25);
      uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v27)(v17, 0LL, 1LL, v7);
      uint64_t v53 = v27;
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
      uint64_t v70 = v18;
      uint64_t v29 = (uint64_t)v62;
      v28(v62, v17, v7);
      uint64_t v69 = v22;
      dispatch_group_t v30 = v68;
      dispatch_group_enter(v68);
      uint64_t v31 = v63;
      ((void (*)(char *, uint64_t, uint64_t))v24)(v63, v29, v7);
      uint64_t v32 = swift_allocObject(&unk_10095EE98, v54, v58);
      *(void *)(v32 + 16) = v64;
      *(void *)(v32 + 24) = v30;
      v28((char *)(v32 + v60), v31, v7);
      *(void *)(v32 + v57) = v65;
      *(void *)(v32 + v56) = v26;
      *(void *)(v32 + v55) = v67;
      swift_retain();
      uint64_t v33 = v30;
      uint64_t v34 = v69;
      swift_retain();
      swift_bridgeObjectRetain(v26);
      id v17 = v61;
      swift_retain();
      sub_100133CA4(v29, 0, (void (*)(void))sub_1004BACF8, v32);
      uint64_t v8 = v71;
      swift_release();
      uint64_t v35 = v29;
      uint64_t v36 = v70;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v35, v7);
      uint64_t v22 = v34 + v59;
      uint64_t v18 = v36 - 1;
      if (!v18)
      {
        v53(v17, 1LL, 1LL, v7, v25);
        break;
      }
    }
  }

  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
    __n128 v38 = swift_bridgeObjectRetain(a2);
    v37(v17, 1LL, 1LL, v7, v38);
  }

  uint64_t v39 = swift_bridgeObjectRelease();
  id v40 = v48;
  static DispatchTime.now()(v39);
  NSString v41 = v49;
  + infix(_:_:)(v40, 30.0);
  id v42 = *(void (**)(char *, uint64_t))(v50 + 8);
  uint64_t v43 = v51;
  v42(v40, v51);
  uint64_t v44 = OS_dispatch_group.wait(timeout:)(v41) & 1;
  v42(v41, v43);
  uint64_t result = static DispatchTimeoutResult.== infix(_:_:)(v44, 1LL);
  if ((result & 1) != 0)
  {
    uint64_t v46 = static os_log_type_t.error.getter(result);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    return os_log(_:dso:log:_:_:)( v46,  &_mh_execute_header,  qword_100A2B008,  "Timed out waiting for removeBeacon to finish",  44LL,  2LL,  _swiftEmptyArrayStorage);
  }

  return result;
}

void sub_1004B7F98(uint64_t a1, uint64_t a2, dispatch_group_s *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  if (a1)
  {
    uint64_t v14 = static os_log_type_t.error.getter(v13);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    dispatch_group_leave(a3);
  }

  else
  {
    dispatch_group_t v33 = a3;
    uint64_t v15 = static os_log_type_t.default.getter(v13);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v16 = qword_100A2B008;
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_OWORD *)(v18 + 16) = xmmword_1007E67D0;
    uint64_t v19 = type metadata accessor for UUID(0LL);
    uint64_t v20 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
    uint64_t v23 = v22;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_1000226F4();
    *(void *)(v18 + 32) = v21;
    *(void *)(v18 + 40) = v23;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Local beaconing record %@ destroyed", 35LL, 2LL, v18);
    swift_bridgeObjectRelease();
    uint64_t v24 = dispatch_group_create();
    dispatch_group_enter(v24);
    uint64_t v25 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v12, 1LL, 1LL, v25);
    uint64_t v26 = (void *)swift_allocObject(&unk_10095EEC0, 48LL, 7LL);
    v26[2] = 0LL;
    v26[3] = 0LL;
    v26[4] = v24;
    v26[5] = a5;
    uint64_t v27 = v24;
    swift_retain();
    sub_1003B76DC((uint64_t)v12, (uint64_t)&unk_1009B04B8, (uint64_t)v26);
    swift_release();
    OS_dispatch_group.wait()();

    uint64_t v28 = *(void *)(a6 + 16);
    if (v28)
    {
      uint64_t v29 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
      uint64_t v30 = a6 + ((*(unsigned __int8 *)(v29 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
      uint64_t v31 = *(void *)(v29 + 72);
      swift_bridgeObjectRetain(a6);
      do
      {
        sub_1004BDCFC(v30);
        v30 += v31;
        --v28;
      }

      while (v28);
      swift_bridgeObjectRelease();
    }

    dispatch_group_leave(v33);
  }

uint64_t sub_1004B8280(uint64_t a1)
{
  return sub_1004B7844(a1);
}

uint64_t sub_1004B82A0(uint64_t a1)
{
  return sub_1004B7A48(a1);
}

uint64_t sub_1004B82C0(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2AB30, 0xD000000000000016LL, 0x8000000100864240LL);
}

uint64_t sub_1004B82E4(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100012ED8(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 424))(v1, v2);
}

void sub_1004B832C(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1004B8468()
{
  uint64_t v0 = sub_100004AEC(&qword_1009B0600);
  else {
    uint64_t v1 = 0LL;
  }
  if (v1) {
    uint64_t v2 = &qword_1009B0610;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_1009B0608;
  }
  return sub_100004AEC(v2);
}

Swift::Int sub_1004B84B4(void *a1)
{
  uint64_t v134 = type metadata accessor for KeySyncMetadataDisplay(0LL);
  uint64_t v127 = *(void *)(v134 - 8);
  uint64_t v3 = __chkstk_darwin(v134);
  uint64_t v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v135 = (uint64_t)&v120 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  uint64_t v131 = (uint64_t)&v120 - v9;
  Swift::Int v10 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0) {
      goto LABEL_139;
    }
    if (v10) {
      return sub_1004B8EB0(0LL, v10, 1LL, a1);
    }
    return result;
  }

  if (v10 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v10 + 1;
  }
  if (v10 < -1) {
    goto LABEL_147;
  }
  uint64_t v133 = a1;
  Swift::Int v122 = result;
  uint64_t v128 = v1;
  if (v10 < 2)
  {
    uint64_t v16 = (char *)_swiftEmptyArrayStorage;
    unint64_t v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    uint64_t v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      unint64_t v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      uint64_t v112 = v16;
      if (v18 >= 2)
      {
        uint64_t v113 = *v133;
        do
        {
          unint64_t v114 = v18 - 2;
          if (v18 < 2) {
            goto LABEL_134;
          }
          if (!v113) {
            goto LABEL_146;
          }
          uint64_t v115 = *(void *)&v112[16 * v114 + 32];
          uint64_t v116 = *(void *)&v112[16 * v18 + 24];
          uint64_t v117 = v128;
          sub_1004B90EC( v113 + *(void *)(v127 + 72) * v115,  v113 + *(void *)(v127 + 72) * *(void *)&v112[16 * v18 + 16],  v113 + *(void *)(v127 + 72) * v116,  v126);
          uint64_t v128 = v117;
          if (v117) {
            break;
          }
          if (v116 < v115) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0) {
            uint64_t v112 = sub_1003CBA90((uint64_t)v112);
          }
          if (v114 >= *((void *)v112 + 2)) {
            goto LABEL_136;
          }
          v118 = &v112[16 * v114 + 32];
          *(void *)v118 = v115;
          *((void *)v118 + 1) = v116;
          unint64_t v119 = *((void *)v112 + 2);
          if (v18 > v119) {
            goto LABEL_137;
          }
          memmove(&v112[16 * v18 + 16], &v112[16 * v18 + 32], 16 * (v119 - v18));
          *((void *)v112 + 2) = v119 - 1;
          unint64_t v18 = v119 - 1;
        }

        while (v119 > 2);
      }

uint64_t sub_1004B8EB0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v30 = type metadata accessor for KeySyncMetadataDisplay(0LL);
  uint64_t v7 = __chkstk_darwin(v30);
  uint64_t v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v27 = (uint64_t)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v29 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v33 = v15 * (v29 - 1);
    uint64_t v28 = v15;
    uint64_t v32 = v15 * v29;
LABEL_5:
    uint64_t v16 = 0LL;
    uint64_t v17 = v26;
    while (1)
    {
      uint64_t v18 = *a4;
      sub_10001DC4C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for KeySyncMetadataDisplay);
      uint64_t v19 = v27;
      sub_10001DC4C(v33 + v16 + v18, v27, type metadata accessor for KeySyncMetadataDisplay);
      LOBYTE(v18) = static Date.> infix(_:_:)(&v14[*(int *)(v30 + 32)], v19 + *(int *)(v30 + 32));
      sub_100018C68(v19, type metadata accessor for KeySyncMetadataDisplay);
      uint64_t result = sub_100018C68((uint64_t)v14, type metadata accessor for KeySyncMetadataDisplay);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v20 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v21 = a4;
      uint64_t v22 = v20 + v32 + v16;
      uint64_t v23 = v20 + v33 + v16;
      sub_10002218C(v22, v31, type metadata accessor for KeySyncMetadataDisplay);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1LL, v30);
      uint64_t result = sub_10002218C(v31, v23, type metadata accessor for KeySyncMetadataDisplay);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1004B90EC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v45 = type metadata accessor for KeySyncMetadataDisplay(0LL);
  uint64_t v8 = __chkstk_darwin(v45);
  uint64_t v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (a2 - a1 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_62;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_63;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v48 = a1;
  unint64_t v47 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000LL) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v25 = a4 + v18;
      unint64_t v46 = a4 + v18;
      unint64_t v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v27 = -v13;
        unint64_t v42 = a4;
        unint64_t v43 = a1;
        do
        {
          unint64_t v28 = a3 + v27;
          sub_10001DC4C(v25 + v27, (uint64_t)v11, type metadata accessor for KeySyncMetadataDisplay);
          unint64_t v29 = a2 + v27;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v44;
          sub_10001DC4C(a2 + v27, v44, type metadata accessor for KeySyncMetadataDisplay);
          char v33 = static Date.> infix(_:_:)(v31 + *(int *)(v45 + 32), v32 + *(int *)(v45 + 32));
          uint64_t v34 = v32;
          uint64_t v11 = (char *)v31;
          sub_100018C68(v34, type metadata accessor for KeySyncMetadataDisplay);
          sub_100018C68(v31, type metadata accessor for KeySyncMetadataDisplay);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1LL, v45);
              unint64_t v37 = v42;
              unint64_t v36 = v43;
            }

            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
              }
            }

            v48 += v27;
          }

          else
          {
            unint64_t v38 = v46;
            unint64_t v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1LL, v45);
              unint64_t v29 = a2;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
            }

            else
            {
              BOOL v35 = v30 == v38;
              unint64_t v37 = v42;
              unint64_t v36 = v43;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront(v28, v39);
              }
              unint64_t v29 = a2;
            }
          }

          unint64_t v25 = v46;
          if (v46 <= v37) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }

        while (v29 > v36);
      }

      goto LABEL_60;
    }
  }

  else if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v43 = a4 + v17;
    unint64_t v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v20 = v44;
      do
      {
        sub_10001DC4C(a2, (uint64_t)v11, type metadata accessor for KeySyncMetadataDisplay);
        sub_10001DC4C(a4, v20, type metadata accessor for KeySyncMetadataDisplay);
        char v21 = static Date.> infix(_:_:)(&v11[*(int *)(v45 + 32)], v20 + *(int *)(v45 + 32));
        sub_100018C68(v20, type metadata accessor for KeySyncMetadataDisplay);
        sub_100018C68((uint64_t)v11, type metadata accessor for KeySyncMetadataDisplay);
        unint64_t v22 = v48;
        if ((v21 & 1) != 0)
        {
          unint64_t v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1LL, v45);
          }

          else if (v48 == a2)
          {
            unint64_t v22 = a2;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }

        else
        {
          unint64_t v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1LL, v45);
          }

          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }

          unint64_t v47 = v24;
          unint64_t v23 = a2;
        }

        unint64_t v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43) {
          break;
        }
        a2 = v23;
      }

      while (v23 < a3);
    }

uint64_t sub_1004B959C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  unint64_t v36 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  BOOL v35 = (char *)&v31 - v5;
  sub_100004AEC((uint64_t *)&unk_1009B0660);
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v7 = result;
  int64_t v8 = 0LL;
  uint64_t v37 = result;
  uint64_t v38 = a1;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v10 = a1 + 64;
  uint64_t v9 = v11;
  uint64_t v12 = 1LL << *(_BYTE *)(v10 - 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & v9;
  uint64_t v32 = v10;
  int64_t v33 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v34 = result + 64;
  uint64_t v16 = v35;
  uint64_t v15 = v36;
  if ((v13 & v9) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  int64_t v40 = v8;
  for (unint64_t i = v17 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v20 << 6))
  {
    uint64_t v24 = v38;
    uint64_t v23 = v39;
    unint64_t v25 = *(void *)(v39 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v16, *(void *)(v38 + 48) + v25, v2);
    uint64_t v26 = *(void *)(*(void *)(v24 + 56) + 8 * i);
    uint64_t v43 = v26;
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v27(v15, v16, v2);
    swift_bridgeObjectRetain(v26);
    uint64_t v28 = v41;
    sub_1004B00A8(&v43, &v42);
    uint64_t v41 = v28;
    if (v28)
    {
      uint64_t v7 = v37;
      swift_release();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v2);
      swift_bridgeObjectRelease();
      return v7;
    }

    swift_bridgeObjectRelease();
    *(void *)(v34 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v7 = v37;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v37 + 48) + v25, v15, v2);
    *(void *)(*(void *)(v7 + 56) + 8 * i) = v42;
    uint64_t v29 = *(void *)(v7 + 16);
    BOOL v19 = __OFADD__(v29, 1LL);
    uint64_t v30 = v29 + 1;
    if (v19)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    *(void *)(v7 + 16) = v30;
    int64_t v8 = v40;
    if (v14) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v19 = __OFADD__(v8, 1LL);
    int64_t v20 = v8 + 1;
    if (v19) {
      goto LABEL_27;
    }
    if (v20 >= v33) {
      return v7;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v20);
    if (!v21) {
      break;
    }
LABEL_15:
    unint64_t v14 = (v21 - 1) & v21;
    int64_t v40 = v20;
  }

  int64_t v22 = v20 + 1;
  if (v20 + 1 >= v33) {
    return v7;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21) {
    goto LABEL_14;
  }
  int64_t v22 = v20 + 2;
  if (v20 + 2 >= v33) {
    return v7;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21) {
    goto LABEL_14;
  }
  int64_t v22 = v20 + 3;
  if (v20 + 3 >= v33) {
    return v7;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21)
  {
LABEL_14:
    int64_t v20 = v22;
    goto LABEL_15;
  }

  while (1)
  {
    int64_t v20 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v20 >= v33) {
      return v7;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v20);
    ++v22;
    if (v21) {
      goto LABEL_15;
    }
  }

void *sub_1004B9884(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v53 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v46 - v11;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v52 = (uint64_t)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v47 = (uint64_t)v46 - v20;
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    uint64_t v50 = v12;
    uint64_t v22 = v2;
    uint64_t v63 = v21;
    uint64_t v60 = type metadata accessor for BeaconStoreFileRecord(0LL);
    uint64_t v23 = *(void *)(v60 - 8);
    uint64_t v24 = a1;
    uint64_t v25 = a1 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    uint64_t v59 = *(void *)(v23 + 72);
    v46[1] = v24;
    swift_bridgeObjectRetain(v24);
    uint64_t v56 = v8;
    uint64_t v57 = _swiftEmptyArrayStorage;
    uint64_t v51 = v6;
    uint64_t v48 = v16;
    uint64_t v49 = v15;
    uint64_t v55 = v17;
    while (1)
    {
      sub_10001581C(v25 + *(int *)(v60 + 20), (uint64_t)v6, (uint64_t *)&unk_1009A34D0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
      {
        sub_100015794((uint64_t)v6, (uint64_t *)&unk_1009A34D0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1LL, 1LL, v16);
      }

      else
      {
        uint64_t v58 = v22;
        uint64_t v26 = v50;
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v50, v6, v7);
        uint64_t v27 = *(void *)(v54 + 136);
        if (qword_10099B610 != -1) {
          swift_once(&qword_10099B610, sub_1005D3C50);
        }
        uint64_t v28 = sub_10000A720(v7, (uint64_t)qword_100A2AE80);
        uint64_t v29 = v7;
        uint64_t v30 = v53;
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v53, v28, v29);
        uint64_t v31 = objc_autoreleasePoolPush();
        __chkstk_darwin(v31);
        v46[-4] = v26;
        v46[-3] = v27;
        v46[-2] = v30;
        uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009A9C40);
        uint64_t v33 = v58;
        OS_dispatch_queue.sync<A>(execute:)(sub_1004BCA1C, &v46[-6], v32);
        uint64_t v34 = v31;
        uint64_t v8 = v56;
        objc_autoreleasePoolPop(v34);
        BOOL v35 = *(void (**)(char *, uint64_t))(v8 + 8);
        unint64_t v36 = v30;
        uint64_t v7 = v29;
        v35(v36, v29);
        v35(v26, v29);
        if (v62)
        {
          uint64_t v37 = sub_100004AEC(&qword_1009B0530);
          uint64_t v16 = v48;
          uint64_t v15 = v49;
          int v38 = swift_dynamicCast(v49, v61, v37, v48, 6LL);
          uint64_t v17 = v55;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v15, v38 ^ 1u, 1LL, v16);
        }

        else
        {
          sub_100015794((uint64_t)v61, (uint64_t *)&unk_1009A9C40);
          uint64_t v17 = v55;
          uint64_t v16 = v48;
          uint64_t v15 = v49;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v49, 1LL, 1LL, v48);
        }

        int v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16);
        uint64_t v6 = v51;
        if (v39 != 1)
        {
          uint64_t v40 = v47;
          sub_10002218C((uint64_t)v15, v47, type metadata accessor for OwnedBeaconRecord);
          sub_10002218C(v40, v52, type metadata accessor for OwnedBeaconRecord);
          if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) != 0) {
            unint64_t v41 = (unint64_t)v57;
          }
          else {
            unint64_t v41 = sub_1004C46DC(0, v57[2] + 1LL, 1, (unint64_t)v57);
          }
          unint64_t v43 = *(void *)(v41 + 16);
          unint64_t v42 = *(void *)(v41 + 24);
          uint64_t v22 = v33;
          if (v43 >= v42 >> 1) {
            unint64_t v41 = sub_1004C46DC(v42 > 1, v43 + 1, 1, v41);
          }
          *(void *)(v41 + 16) = v43 + 1;
          uint64_t v17 = v55;
          unint64_t v44 = (*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
          uint64_t v57 = (void *)v41;
          sub_10002218C(v52, v41 + v44 + *(void *)(v55 + 72) * v43, type metadata accessor for OwnedBeaconRecord);
          uint64_t v8 = v56;
          goto LABEL_5;
        }

        uint64_t v22 = v33;
      }

      sub_100015794((uint64_t)v15, (uint64_t *)&unk_1009A9C30);
LABEL_5:
      v25 += v59;
      if (!--v63)
      {
        swift_bridgeObjectRelease();
        return v57;
      }
    }
  }

  return _swiftEmptyArrayStorage;
}

void sub_1004B9D74()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void (***)(void, void))(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v30 = v5;
    uint64_t v14 = (void *)SPSelfBeaconingChangedNotification;
    uint64_t v15 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v29 = v1;
    uint64_t v16 = (void *)static OS_os_log.default.getter(v15);
    uint64_t v17 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:type:_:)( "Posting SPSelfBeaconingChangedNotification Darwin notification",  62LL,  2LL,  &_mh_execute_header,  v16,  v17,  _swiftEmptyArrayStorage);

    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for DispatchQoS.QoSClass.default(_:),  v8);
    uint64_t v18 = static OS_dispatch_queue.global(qos:)(v11);
    uint64_t v28 = v4;
    uint64_t v19 = (void *)v18;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v20 = swift_allocObject(&unk_10095EDA8, 32LL, 7LL);
    *(void *)(v20 + 16) = v13;
    *(void *)(v20 + 24) = v14;
    aBlock[4] = sub_1004BDCE4;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    id aBlock[3] = &unk_10095EDC0;
    uint64_t v21 = _Block_copy(aBlock);
    uint64_t v22 = v13;
    static DispatchQoS.unspecified.getter(v14);
    uint64_t v31 = _swiftEmptyArrayStorage;
    uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v24, v25, v0, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v3, v0);
    ((void (**)(char *, uint64_t))v30)[1](v7, v28);
    swift_release();
  }

  else
  {
    uint64_t v26 = static os_log_type_t.error.getter(0LL);
    uint64_t v27 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v30 = (void (**)(void, void))static OS_os_log.default.getter(v27);
    os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  v30,  "CFNotificationCenterGetDarwinNotifyCenter return nil!",  53LL,  2LL,  _swiftEmptyArrayStorage);
  }

void sub_1004BA0F0()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void (***)(void, void))(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v30 = v5;
    uint64_t v14 = (void *)SPServiceSettingsChangedNotification;
    uint64_t v15 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v29 = v1;
    uint64_t v16 = (void *)static OS_os_log.default.getter(v15);
    uint64_t v17 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:type:_:)( "Posting SPServiceSettingsChangedNotification Darwin notification",  64LL,  2LL,  &_mh_execute_header,  v16,  v17,  _swiftEmptyArrayStorage);

    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for DispatchQoS.QoSClass.default(_:),  v8);
    uint64_t v18 = static OS_dispatch_queue.global(qos:)(v11);
    uint64_t v28 = v4;
    uint64_t v19 = (void *)v18;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v20 = swift_allocObject(&unk_10095EDF8, 32LL, 7LL);
    *(void *)(v20 + 16) = v13;
    *(void *)(v20 + 24) = v14;
    aBlock[4] = sub_1004BAB9C;
    uint64_t v33 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    id aBlock[3] = &unk_10095EE10;
    uint64_t v21 = _Block_copy(aBlock);
    uint64_t v22 = v13;
    static DispatchQoS.unspecified.getter(v14);
    uint64_t v31 = _swiftEmptyArrayStorage;
    uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v24, v25, v0, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v3, v0);
    ((void (**)(char *, uint64_t))v30)[1](v7, v28);
    swift_release(v33);
  }

  else
  {
    uint64_t v26 = static os_log_type_t.error.getter(0LL);
    uint64_t v27 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v30 = (void (**)(void, void))static OS_os_log.default.getter(v27);
    os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  v30,  "CFNotificationCenterGetDarwinNotifyCenter return nil!",  53LL,  2LL,  _swiftEmptyArrayStorage);
  }

void sub_1004BA46C(void *a1)
{
  uint64_t v2 = *a1;
  type metadata accessor for AnyKeyPath(0LL);
  uint64_t KeyPath = swift_getKeyPath(&unk_100805040);
  char v4 = static AnyKeyPath.== infix(_:_:)(a1, KeyPath);
  swift_release();
  if ((v4 & 1) != 0
    || (uint64_t v5 = swift_getKeyPath(&unk_100805068),
        char v6 = static AnyKeyPath.== infix(_:_:)(a1, v5),
        swift_release(),
        (v6 & 1) != 0)
    || (uint64_t v7 = swift_getKeyPath(&unk_100805090),
        char v8 = static AnyKeyPath.== infix(_:_:)(a1, v7),
        swift_release(),
        (v8 & 1) != 0))
  {
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing",  60LL,  2LL,  sub_100153838);
    sub_1004F1250();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
    type metadata accessor for Transaction(0LL);
    static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
  }

  uint64_t v9 = swift_getKeyPath(&unk_1008050B8);
  char v10 = static AnyKeyPath.== infix(_:_:)(a1, v9);
  uint64_t v11 = swift_release();
  if ((v10 & 1) != 0) {
    sub_1004B9D74();
  }
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v13 = qword_100A2B018;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1007E67D0;
  uint64_t v20 = a1;
  uint64_t v16 = type metadata accessor for KeyPath( 0LL,  &type metadata for Configuration,  *(void *)(class metadata base offset for KeyPath + v2 + 8));
  swift_retain();
  uint64_t v17 = String.init<A>(describing:)(&v20, v16);
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_1000226F4();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)( v12,  &_mh_execute_header,  v13,  "Posting ServiceSettingsChanged Notification for change in %@",  60LL,  2LL,  v15);
  swift_bridgeObjectRelease();
  sub_1004BA0F0();
}

BOOL sub_1004BA6F4()
{
  if (qword_10099B318 != -1) {
    goto LABEL_34;
  }
  while (1)
  {
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v0 = (void *)sub_1006A0E1C(v30);
    uint64_t v1 = SPServiceStateEnabled;
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    if (v2 == v5 && v4 == v6) {
      char v8 = 1;
    }
    else {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0LL);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_1006A0F10(v30);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v9 + 16);
    if (!v10) {
      goto LABEL_18;
    }
    uint64_t v11 = SPDisabledReasonNone;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v9 + 32));
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    if (v12 != v15 || v14 != v16) {
      break;
    }
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRelease_n(v14, 2LL);
    if (v10 == 1)
    {
LABEL_17:
      swift_bridgeObjectRelease();
LABEL_18:
      swift_bridgeObjectRelease();
      return (v8 & 1) != 0;
    }

void sub_1004BA974(uint64_t a1)
{
  if (qword_10099B318 != -1) {
    a1 = swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v1 = static os_log_type_t.default.getter(a1);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  qword_100A2B070,  "ConfigurationCoordinator resetting by overriding saved config on disk.",  70LL,  2LL,  _swiftEmptyArrayStorage);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1004BAAB0);
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  id v3 = String._bridgeToObjectiveC()();
  [v2 removeObjectForKey:v3];
}

uint64_t sub_1004BAAB0()
{
  return sub_100025BF4(v0);
}

uint64_t sub_1004BAAC8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A0BB8(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1004BAB00()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1004BAB2C()
{
  return sub_1004B57B0();
}

uint64_t sub_1004BAB58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004BAB68(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1004BAB70()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1004BAB9C()
{
}

uint64_t sub_1004BABB0(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100012ED8(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 424))(v1, v2);
}

void sub_1004BABF8()
{
  *(_BYTE *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_notifiedDaemonConfigurationChangedOnce) = 0;
}

uint64_t sub_1004BAC08()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1004BAC18(uint64_t a1)
{
  return sub_1004B7B68( a1,  *(void *)(v1 + 16),  *(dispatch_group_s **)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_1004BAC38()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  swift_bridgeObjectRelease(*(void *)(v0 + v7));
  swift_release(*(void *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v5);
}

void sub_1004BACF8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1004B7F98( a1,  *(void *)(v1 + 16),  *(dispatch_group_s **)(v1 + 24),  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1004BAD68(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc(dword_1009B04B4);
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_1004B2240(a1, v4, v5, v6);
}

void sub_1004BADE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v26 - v9;
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v11 = qword_100A2A6C8;
  uint64_t v12 = objc_autoreleasePoolPush();
  sub_100346B24(v11, a1, 0LL, 0LL, &v29);
  objc_autoreleasePoolPop(v12);
  uint64_t v13 = v29;
  uint64_t v14 = v29[2];
  if (v14)
  {
    uint64_t v27 = a2;
    char v29 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v14);
    uint64_t v15 = *(unsigned __int8 *)(v5 + 80);
    v26[1] = v13;
    uint64_t v16 = (uint64_t)v13 + ((v15 + 32) & ~v15);
    uint64_t v28 = *(void *)(v5 + 72);
    do
    {
      sub_10001DC4C(v16, (uint64_t)v10, type metadata accessor for BeaconObservation);
      sub_10001DC4C((uint64_t)v10, (uint64_t)v8, type metadata accessor for BeaconObservation);
      id v17 = objc_allocWithZone(&OBJC_CLASS___SPBeaconObservation);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v19 = qword_1008052D0[v8[*(int *)(v4 + 24)]];
      Class v20 = Date._bridgeToObjectiveC()().super.isa;
      id v21 = [v17 initWithBeaconIdentifier:isa type:v19 date:v20 location:0];

      sub_100018C68((uint64_t)v8, type metadata accessor for BeaconObservation);
      uint64_t v22 = sub_100018C68((uint64_t)v10, type metadata accessor for BeaconObservation);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      uint64_t v23 = v29[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      uint64_t v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      specialized ContiguousArray._endMutation()(v24);
      v16 += v28;
      --v14;
    }

    while (v14);
    swift_bridgeObjectRelease();
    a2 = v27;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  sub_100022898(0LL, (unint64_t *)&unk_1009B9A40, &OBJC_CLASS___SPBeaconObservation_ptr);
  Class v25 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, v25);
  swift_bridgeObjectRelease();
}

unint64_t sub_1004BB07C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936758, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

void *sub_1004BB0C4(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  v11[3] = &type metadata for SystemInfo;
  v11[4] = &off_10096DAE8;
  a4[12] = _swiftEmptyArrayStorage;
  a4[2] = a1;
  LOBYTE(v10[0]) = a2;
  uint64_t v6 = sub_100004AEC(&qword_1009B07D8);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  swift_retain();
  a4[11] = CurrentValueSubject.init(_:)(v10);
  sub_100013044((uint64_t)v11, (uint64_t)(a4 + 3));
  a4[8] = a3;
  a4[9] = &protocol witness table for CurrentLocationMonitor;
  v10[0] = 0LL;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009B0850);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  swift_unknownObjectRetain(a3);
  a4[10] = CurrentValueSubject.init(_:)(v10);
  uint64_t v8 = a3 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess(a3 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate, v10, 1LL, 0LL);
  *(void *)(v8 + 8) = &off_100939268;
  swift_unknownObjectWeakAssign(v8, a4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
  return a4;
}

uint64_t sub_1004BB1E8(uint64_t a1, uint64_t a2, Swift::Void (__swiftcall *a3)())
{
  uint64_t v80 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v80);
  uint64_t v73 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v74 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009AE490);
  uint64_t v70 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v72 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v69 - v14;
  uint64_t v71 = v16;
  __chkstk_darwin(v13);
  uint64_t v81 = (uint64_t)&v69 - v17;
  uint64_t v18 = swift_retain();
  id v19 = (id)MobileGestalt_get_current_device(v18);
  if (v19)
  {
    Class v20 = v19;
    id v21 = (id)MobileGestalt_copy_userAssignedDeviceName_obj();

    if (v21)
    {
      uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      unint64_t v79 = v23;
    }

    else
    {
      uint64_t v75 = 0LL;
      unint64_t v79 = 0xE000000000000000LL;
    }

    id v24 = (id)MobileGestalt_get_current_device(v22);
    if (v24)
    {
      Class v25 = v24;
      uint64_t v78 = a3;
      id v26 = (id)MobileGestalt_copy_buildVersion_obj();

      if (v26)
      {
        uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        unint64_t v29 = v28;
      }

      else
      {
        uint64_t v76 = 0LL;
        unint64_t v29 = 0xE000000000000000LL;
      }

      uint64_t v77 = a2;
      uint64_t v30 = a1;
      __chkstk_darwin(v27);
      uint64_t v69 = v31;
      *(&v69 - 2) = v31;
      *(&v69 - 1) = v32;
      uint64_t v33 = v81;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_10014F098);
      sub_10001581C(v33, (uint64_t)v15, &qword_1009AE490);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 1LL, v7) == 1)
      {
        sub_100015794((uint64_t)v15, &qword_1009AE490);
        uint64_t v34 = v30;
        uint64_t v35 = v76;
        uint64_t v36 = v77;
        unint64_t v37 = v79;
        goto LABEL_22;
      }

      uint64_t v38 = (uint64_t)v15;
      uint64_t v39 = v74;
      sub_10002218C(v38, v74, type metadata accessor for BeaconNamingRecord);
      uint64_t v40 = (void *)(v39 + *(int *)(v7 + 32));
      uint64_t v41 = v40[1];
      unint64_t v37 = v79;
      if (*v40 == v75 && v41 == v79)
      {
        uint64_t v34 = v30;
        uint64_t v42 = v73;
        sub_10001DC4C(v30, v73, type metadata accessor for OwnedBeaconRecord);
        uint64_t v35 = v76;
      }

      else
      {
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)(*v40, v41, v75, v79, 0LL);
        uint64_t v34 = v30;
        uint64_t v42 = v73;
        sub_10001DC4C(v30, v73, type metadata accessor for OwnedBeaconRecord);
        uint64_t v35 = v76;
        if ((v43 & 1) == 0)
        {
          sub_100018C68(v42, type metadata accessor for OwnedBeaconRecord);
          uint64_t v36 = v77;
          goto LABEL_21;
        }
      }

      unint64_t v44 = (void *)(v42 + *(int *)(v80 + 60));
      uint64_t v45 = v44[1];
      uint64_t v36 = v77;
      if (*v44 == v35 && v45 == v29)
      {
        sub_100018C68(v42, type metadata accessor for OwnedBeaconRecord);
LABEL_19:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Transaction.capture()();
        sub_100018C68(v39, type metadata accessor for BeaconNamingRecord);
LABEL_27:
        sub_100015794(v81, &qword_1009AE490);
        return swift_release();
      }

      char v46 = _stringCompareWithSmolCheck(_:_:expecting:)(*v44, v45, v35, v29, 0LL);
      sub_100018C68(v42, type metadata accessor for OwnedBeaconRecord);
      if ((v46 & 1) != 0) {
        goto LABEL_19;
      }
LABEL_21:
      sub_100018C68(v39, type metadata accessor for BeaconNamingRecord);
LABEL_22:
      uint64_t v47 = (void *)(v34 + *(int *)(v80 + 60));
      uint64_t v48 = v47[1];
      if (*v47 == v35 && v48 == v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v47, v48, v35, v29, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Transaction.capture()();
      }

      else
      {
        uint64_t v49 = swift_allocObject(&unk_10095F1B8, 24LL, 7LL);
        swift_weakInit(v49 + 16, v36);
        uint64_t v50 = (void (*)(uint64_t))swift_allocObject(&unk_10095F2D0, 40LL, 7LL);
        unint64_t v79 = v37;
        uint64_t v51 = v50;
        *((void *)v50 + 2) = v49;
        *((void *)v50 + 3) = j_j___s10FindMyBase11TransactionC7captureyyF;
        *((void *)v50 + 4) = v78;
        uint64_t v52 = swift_allocObject(&unk_10095F2F8, 32LL, 7LL);
        *(void *)(v52 + 16) = v35;
        *(void *)(v52 + 24) = v29;
        uint64_t v53 = v72;
        sub_10001581C(v81, v72, &qword_1009AE490);
        uint64_t v54 = *(unsigned __int8 *)(v70 + 80);
        uint64_t v80 = v34;
        uint64_t v55 = (v54 + 16) & ~v54;
        unint64_t v56 = (v71 + v55 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v58 = v36;
        unint64_t v59 = (v57 + 23) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v60 = (v59 + 23) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v61 = swift_allocObject(&unk_10095F320, v60 + 16, v54 | 7);
        sub_100015750(v53, v61 + v55, &qword_1009AE490);
        *(void *)(v61 + v56) = v58;
        uint64_t v62 = (uint64_t *)(v61 + v57);
        unint64_t v64 = v78;
        unint64_t v63 = v79;
        *uint64_t v62 = v75;
        v62[1] = v63;
        uint64_t v65 = (void (**)(uint64_t))(v61 + v59);
        *uint64_t v65 = sub_1004BD3B0;
        v65[1] = v51;
        uint64_t v66 = (Swift::Void (__swiftcall **)())(v61 + v60);
        int *v66 = j_j___s10FindMyBase11TransactionC7captureyyF;
        v66[1] = v64;
        uint64_t v67 = swift_allocObject(&unk_10095F348, 32LL, 7LL);
        *(void *)(v67 + 16) = sub_1004BD528;
        *(void *)(v67 + 24) = v61;
        swift_retain_n(v64, 2LL);
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1002B2F50( v80,  0,  (void (*)(uint64_t))sub_1000DF600,  v52,  (void (*)(uint64_t))sub_1000228F4,  (void (*)(uint64_t))v67);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }

      goto LABEL_27;
    }
  }

  else
  {
    swift_release();
    __break(1u);
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1004BB818(uint64_t a1)
{
  v1[7] = a1;
  uint64_t v2 = type metadata accessor for XPCServiceDescription(0LL);
  v1[8] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[9] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[10] = swift_task_alloc(v4);
  v1[11] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for MachServiceName(0LL);
  v1[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[13] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[14] = swift_task_alloc(v7);
  v1[15] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for Date(0LL);
  v1[16] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v1[17] = v9;
  v1[18] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  v1[19] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v1[20] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[21] = swift_task_alloc(v12);
  v1[22] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for LocalBeaconKeyInfo(0LL);
  v1[23] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v1[24] = v14;
  v1[25] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v1[26] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord(0LL);
  v1[27] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v1[28] = v17;
  v1[29] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1004BB994, 0LL, 0LL);
}

uint64_t sub_1004BB994()
{
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  *(void *)(v0 + 40) = My;
  *(void *)(v0 + 48) = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v2 = sub_10000A7C8((void *)(v0 + 16));
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v2,  enum case for Feature.FindMy.tribeca(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if ((My & 1) != 0)
  {
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v5 = *(void *)(v0 + 208);
    sub_10001581C(*(void *)(v0 + 56), v5, (uint64_t *)&unk_1009A9C30);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1LL, v3) == 1)
    {
      sub_100015794(*(void *)(v0 + 208), (uint64_t *)&unk_1009A9C30);
      uint64_t v6 = 0LL;
      unint64_t v7 = 0xF000000000000000LL;
    }

    else
    {
      uint64_t v17 = *(void *)(v0 + 232);
      uint64_t v18 = *(int **)(v0 + 216);
      uint64_t v19 = *(void *)(v0 + 176);
      uint64_t v56 = *(void *)(v0 + 200);
      uint64_t v58 = *(void *)(v0 + 184);
      uint64_t v20 = *(void *)(v0 + 160);
      uint64_t v21 = *(void *)(v0 + 168);
      uint64_t v22 = *(void *)(v0 + 144);
      uint64_t v23 = *(void *)(v0 + 152);
      uint64_t v25 = *(void *)(v0 + 128);
      uint64_t v24 = *(void *)(v0 + 136);
      sub_10002218C(*(void *)(v0 + 208), v17, type metadata accessor for OwnedBeaconRecord);
      uid_t v26 = getuid();
      sub_1005E2270(v26);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v21, v17 + v18[5], v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, v17 + v18[8], v25);
      uint64_t v27 = (uint64_t *)(v17 + v18[13]);
      uint64_t v28 = *v27;
      unint64_t v29 = v27[1];
      uint64_t v30 = (uint64_t *)(v17 + v18[9]);
      uint64_t v31 = *v30;
      unint64_t v32 = v30[1];
      sub_10001736C(v28, v29);
      sub_10001736C(v31, v32);
      LocalBeaconKeyInfo.init(userIdentifier:beaconIdentifier:pairDate:publicKey:sharedSecretKey:)( v19,  v21,  v22,  v28,  v29,  v31,  v32);
      uint64_t v33 = type metadata accessor for PropertyListEncoder(0LL);
      uint64_t v34 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
      PropertyListEncoder.init()(v34);
      uint64_t v35 = sub_100007864( &qword_1009B04E0,  (uint64_t (*)(uint64_t))&type metadata accessor for LocalBeaconKeyInfo,  (uint64_t)&protocol conformance descriptor for LocalBeaconKeyInfo);
      uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v56, v58, v35);
      unint64_t v7 = v36;
      uint64_t v37 = *(void *)(v0 + 232);
      uint64_t v38 = *(void *)(v0 + 192);
      uint64_t v39 = *(void *)(v0 + 200);
      uint64_t v40 = *(void *)(v0 + 184);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
      sub_100018C68(v37, type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v57 = v6;
    unint64_t v59 = v7;
    *(void *)(v0 + 240) = v6;
    *(void *)(v0 + 248) = v7;
    uint64_t v43 = *(void *)(v0 + 112);
    uint64_t v42 = *(void *)(v0 + 120);
    uint64_t v45 = *(void *)(v0 + 96);
    uint64_t v44 = *(void *)(v0 + 104);
    uint64_t v46 = *(void *)(v0 + 80);
    uint64_t v47 = *(void *)(v0 + 88);
    uint64_t v49 = *(void *)(v0 + 64);
    uint64_t v48 = *(void *)(v0 + 72);
    MachServiceName.init(_:)(0xD000000000000026LL, 0x8000000100864480LL);
    id v50 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL____TtP7SPOwner33FindMyBeaconDaemonPushXPCProtocol_];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v43, v42, v45);
    id v51 = v50;
    XPCServiceDescription.init(name:options:remoteObjectInterface:interruptionHandler:invalidationHandler:)( v43,  0LL,  v51,  0LL,  0LL,  0LL,  0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v46, v47, v49);
    uint64_t v52 = sub_100004AEC(&qword_1009B04D8);
    swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
    uint64_t v53 = XPCSession.init(service:)(v46);
    *(void *)(v0 + 256) = v53;
    XPCSession.resume()();

    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v45);
    uint64_t v54 = (void *)swift_task_alloc(48LL);
    *(void *)(v0 + 264) = v54;
    v54[2] = v53;
    v54[3] = v57;
    v54[4] = v59;
    uint64_t v55 = (void *)swift_task_alloc(async function pointer to withCancellableCheckedThrowingContinuation<A>(_:)[1]);
    *(void *)(v0 + 272) = v55;
    *uint64_t v55 = v0;
    v55[1] = sub_1004BBE84;
    return withCancellableCheckedThrowingContinuation<A>(_:)();
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v11 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 176);
    uint64_t v12 = *(void *)(v0 + 144);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v13 = *(void *)(v0 + 120);
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v15 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 232));
    swift_task_dealloc(v9);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1004BBE84()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 272);
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(*(void *)(v2 + 264));
  if (v0) {
    uint64_t v4 = sub_1004BBFB4;
  }
  else {
    uint64_t v4 = sub_1004BBEF0;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1004BBEF0()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004BBFB4()
{
  unint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 240);
  swift_release();
  sub_1000182F0(v2, v1);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004BC084(uint64_t a1)
{
}

uint64_t sub_1004BC090()
{
  uint64_t v1 = sub_100004AEC(&qword_1009AF860);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004BC108(uint64_t a1)
{
  return sub_1004B3DC8(a1);
}

uint64_t sub_1004BC14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[15] = a2;
  v3[16] = a3;
  uint64_t v4 = type metadata accessor for KeySyncMetadata(0LL);
  v3[17] = v4;
  v3[18] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1004BC1A8, 0LL, 0LL);
}

uint64_t sub_1004BC1A8()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 152) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1004BC294;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004BC294(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 160LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004BC2F0, 0LL, 0LL);
}

uint64_t sub_1004BC2F0()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 160))
  {
    uint64_t v3 = *(int **)(v0 + 136);
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(v2, v4, v6);
    uint64_t v7 = (void *)(v2 + v3[6]);
    v7[3] = &type metadata for PrimaryIndex;
    v7[4] = sub_1000868E4();
    *uint64_t v7 = v5;
    static Date.trustedNow.getter(v2 + v3[7]);
    *(_BYTE *)(v2 + v3[5]) = 4;
    uint64_t v8 = (void *)swift_task_alloc(dword_1009BCDBC);
    *(void *)(v0 + 168) = v8;
    void *v8 = v0;
    v8[1] = sub_1004BC494;
    return sub_1006D55B8(*(void *)(v0 + 144));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2AB30);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to get ObservationStoreService", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    swift_task_dealloc(*(void *)(v0 + 144));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1004BC494()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1004BC548;
  }
  else {
    uint64_t v3 = sub_1004BC4F8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1004BC4F8()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_release();
  sub_100018C68(v1, type metadata accessor for KeySyncMetadata);
  swift_task_dealloc(*(void *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004BC548()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_release();
  sub_100018C68(v1, type metadata accessor for KeySyncMetadata);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004BC598()
{
  return sub_1004B66D4(*(void (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1004BC5A0()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1004BC5DC()
{
  char v2 = *(_BYTE *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_1009B0504);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  __int128 v5 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000159BC;
  *(_BYTE *)(v3 + 120) = v2;
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = v5;
  return swift_task_switch(sub_1004B6778, 0LL, 0LL);
}

uint64_t sub_1004BC648@<X0>(void *a1@<X8>)
{
  return sub_1004B6DC0(v1, a1);
}

uint64_t sub_1004BC650()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1004BC674(uint64_t *a1)
{
  return sub_100520178(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1004BC67C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1004BC6A8(uint64_t a1)
{
}

uint64_t sub_1004BC6B0()
{
  return sub_1004BD380((void (*)(void))&_swift_release);
}

uint64_t sub_1004BC6BC()
{
  return sub_1004B616C(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1004BC6C8(uint64_t a1)
{
  return sub_100520FB0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1004BC6E4()
{
  return sub_1001E4468(v0);
}

uint64_t sub_1004BC6EC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1004BC6FC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1004BC70C(uint64_t a1)
{
  return sub_1004B5224(a1, *(void *)(v1 + 16));
}

void sub_1004BC724(int a1)
{
}

uint64_t sub_1004BC73C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1004BC9DC(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_1004B5374(a1, *(void *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_1004BCA1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100574E00(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1004BCA3C()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1004BCA70()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1004BCAA4(uint64_t a1)
{
}

uint64_t sub_1004BCAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004BCAFC()
{
  uint64_t v1 = *(void *)(sub_100004AEC((uint64_t *)&unk_1009A9C30) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48LL))(v0 + v3, 1LL, v6))
  {
    sub_100016F9C(*(void *)v5, *(void *)(v5 + 8));
    uint64_t v7 = v5 + v6[5];
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v10(v7, v8);
    uint64_t v11 = v5 + v6[6];
    uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
    switch(swift_getEnumCaseMultiPayload(v11, v12))
    {
      case 0u:
      case 4u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2u:
        v10(v11, v8);
        uint64_t v21 = v10;
        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      case 3u:
        v10(v11, v8);
        uint64_t v21 = v10;
        sub_100004AEC((uint64_t *)&unk_1009AF840);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_6:
        uint64_t v10 = v21;
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }

    uint64_t v13 = v5 + v6[7];
    uint64_t v14 = v5 + v6[8];
    uint64_t v15 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
    sub_100016F9C(*(void *)(v5 + v6[9]), *(void *)(v5 + v6[9] + 8));
    uint64_t v16 = (uint64_t *)(v5 + v6[10]);
    unint64_t v17 = v16[1];
    if (v17 >> 60 != 15) {
      sub_100016F9C(*v16, v17);
    }
    uint64_t v18 = (uint64_t *)(v5 + v6[11]);
    unint64_t v19 = v18[1];
    if (v19 >> 60 != 15) {
      sub_100016F9C(*v18, v19);
    }
    sub_100016F9C(*(void *)(v5 + v6[12]), *(void *)(v5 + v6[12] + 8));
    sub_100016F9C(*(void *)(v5 + v6[13]), *(void *)(v5 + v6[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1004BCDCC()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A9C30) - 8) + 80LL);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((v2 + 48) & ~v2);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009B0554);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000159BC;
  v5[2] = v3;
  uint64_t v6 = (void *)swift_task_alloc(dword_1009B04CC);
  v5[3] = v6;
  void *v6 = v5;
  v6[1] = sub_1004B31EC;
  return sub_1004BB818(v4);
}

uint64_t sub_1004BCE64()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1004BCE88(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1004B173C(a1, a2, a3, v3);
}

uint64_t sub_1004BCE94()
{
  unint64_t v0 = sub_1004BCEC8();
  return NSXPCConnection.hasEntitlement<A>(_:)(v0, &type metadata for OwnerSessionEntitlement, v0) & 1;
}

unint64_t sub_1004BCEC8()
{
  unint64_t result = qword_1009B05C8;
  if (!qword_1009B05C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC3E8, &type metadata for OwnerSessionEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009B05C8);
  }

  return result;
}

uint64_t sub_1004BCF0C()
{
  return sub_1004AC87C(v0);
}

uint64_t sub_1004BCF24(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_1009B061C);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_100015D58;
  return sub_1004AF4D8(a1, a2, v2);
}

unint64_t sub_1004BCF88()
{
  unint64_t result = qword_1009B0640;
  if (!qword_1009B0640)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B0638);
    sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    sub_1001DAAA0();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009B0640);
  }

  return result;
}

void sub_1004BD00C()
{
}

uint64_t sub_1004BD014()
{
  return sub_1004E696C(0x15u);
}

uint64_t sub_1004BD038(void *a1)
{
  return sub_1004AF15C(a1, v1);
}

unint64_t sub_1004BD040()
{
  unint64_t result = qword_1009B06C0;
  if (!qword_1009B06C0)
  {
    uint64_t v1 = sub_100022898(255LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_1009B06C0);
  }

  return result;
}

void sub_1004BD098(uint64_t *a1)
{
}

uint64_t sub_1004BD0A0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1004AE4F0(a1, a2, a3, v3);
}

uint64_t sub_1004BD0A8(uint64_t a1, uint64_t a2)
{
  return sub_10035D474(a1, a2, v2);
}

uint64_t sub_1004BD0B0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1004BD0D4(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = sub_100004AEC(&qword_1009B08D0);
  return v3(a1, a1 + *(int *)(v4 + 48));
}

uint64_t sub_1004BD118()
{
  return sub_1004BD380((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1004BD124(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009AA724);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_10036336C(a1, v4, v5, v6);
}

uint64_t sub_1004BD190(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_1009B070C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100015D58;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_1004AE604, 0LL, 0LL);
}

uint64_t sub_1004BD1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A0CB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004BD238()
{
  return sub_1004B0528() & 1;
}

uint64_t sub_1004BD254()
{
  char v2 = 1;
  unint64_t v0 = sub_1002DB000();
  return NSXPCConnection.hasEntitlement<A>(_:)(&v2, &type metadata for BeaconManagerEntitlement, v0) & 1;
}

unint64_t sub_1004BD29C()
{
  unint64_t result = qword_1009B07E8;
  if (!qword_1009B07E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007E48A0,  &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy);
    atomic_store(result, (unint64_t *)&qword_1009B07E8);
  }

  return result;
}

uint64_t sub_1004BD2E0(unsigned __int8 *a1)
{
  return sub_1004AE724(a1, v1);
}

uint64_t sub_1004BD2E8(uint64_t a1)
{
  return sub_1004AE9D8(a1, v1);
}

uint64_t sub_1004BD2F0()
{
  return sub_1004AEA40(v0);
}

uint64_t sub_1004BD2F8(uint64_t a1)
{
  return sub_1004AEB08(a1, v1);
}

uint64_t sub_1004BD300()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1004BD310@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004B18FC(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1004BD318(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1004B19AC(a1, a2, a3, v3);
}

uint64_t sub_1004BD320(uint64_t a1)
{
  return swift_release();
}

uint64_t sub_1004BD374()
{
  return sub_1004BD380((void (*)(void))&_swift_release);
}

uint64_t sub_1004BD380(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

void sub_1004BD3B0(uint64_t a1)
{
}

uint64_t sub_1004BD3BC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1004BD3E0()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009AE490) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for BeaconNamingRecord(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v0 + v3, 1LL, v6))
  {
    sub_100016F9C(*(void *)v5, *(void *)(v5 + 8));
    uint64_t v7 = v5 + *(int *)(v6 + 20);
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
    v9(v7, v8);
    v9(v5 + *(int *)(v6 + 24), v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject( v0,  ((((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
         + 16,
           v2 | 7);
}

uint64_t sub_1004BD528(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_100004AEC(&qword_1009AE490) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1004B282C( a1,  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + v6),  *(void *)(v1 + v6 + 8),  *(void (**)(char *))(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void (**)(void))(v1 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1004BD5BC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1004BD85C()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_1004BD89C(Swift::Void (__swiftcall *a1)())
{
  return sub_1004AEDF4(a1, v1);
}

uint64_t sub_1004BD8B4()
{
  return sub_1004AED38(v0);
}

uint64_t sub_1004BD8BC()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009B0844);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100015D58;
  v2[15] = v0;
  return swift_task_switch(sub_1004B1AE8, 0LL, 0LL);
}

uint64_t sub_1004BD918()
{
  return swift_deallocObject(v0, 113LL, 7LL);
}

uint64_t sub_1004BD96C()
{
  return sub_100191EC0((unsigned __int8 *)(v0 + 24), *(void *)(v0 + 16));
}

uint64_t sub_1004BD978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1004AC364(a1, a2, v3, a3);
}

uint64_t sub_1004BD980(uint64_t a1)
{
  return sub_1004ABF74(a1, v1, (uint64_t)sub_100153838);
}

uint64_t sub_1004BD9A0(uint64_t a1)
{
  return sub_1004ABCBC(a1, v1);
}

uint64_t sub_1004BD9A8(uint64_t a1)
{
  return sub_1004AC068(a1, v1);
}

uint64_t sub_1004BD9B0()
{
  return sub_1004ABF20(v0);
}

uint64_t sub_1004BD9B8(uint64_t result)
{
  if (result != 1) {
    return swift_release(result);
  }
  return result;
}

void *sub_1004BD9C8(void *a1)
{
  return a1;
}

uint64_t storeEnumTagSinglePayload for BeaconManagerEntitlement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1004BDA48 + 4 * byte_100804CBB[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1004BDA7C + 4 * byte_100804CB6[v4]))();
}

uint64_t sub_1004BDA7C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004BDA84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004BDA8CLL);
  }
  return result;
}

uint64_t sub_1004BDA98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004BDAA0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1004BDAA4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004BDAAC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerEntitlement()
{
  return &type metadata for BeaconManagerEntitlement;
}

uint64_t storeEnumTagSinglePayload for BeaconManagerService.BeaconManagerServiceError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF1) {
    return ((uint64_t (*)(void))((char *)&loc_1004BDB14 + 4 * byte_100804CC5[v4]))();
  }
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1004BDB48 + 4 * byte_100804CC0[v4]))();
}

uint64_t sub_1004BDB48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004BDB50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004BDB58LL);
  }
  return result;
}

uint64_t sub_1004BDB64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004BDB6CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 14;
  return result;
}

uint64_t sub_1004BDB70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004BDB78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerService.BeaconManagerServiceError()
{
  return &type metadata for BeaconManagerService.BeaconManagerServiceError;
}

unint64_t sub_1004BDB98()
{
  unint64_t result = qword_1009B08D8;
  if (!qword_1009B08D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080519C, &type metadata for BeaconManagerService.BeaconManagerServiceError);
    atomic_store(result, (unint64_t *)&qword_1009B08D8);
  }

  return result;
}

unint64_t sub_1004BDBE0()
{
  unint64_t result = qword_1009B08E0;
  if (!qword_1009B08E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080523C, &type metadata for BeaconManagerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009B08E0);
  }

  return result;
}

unint64_t sub_1004BDC28()
{
  unint64_t result = qword_1009B08E8;
  if (!qword_1009B08E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008051C4, &type metadata for BeaconManagerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009B08E8);
  }

  return result;
}

uint64_t sub_1004BDCEC(uint64_t a1)
{
  return sub_1004BDD0C(a1, "Paired %{private,mask.hash}s [%s]", 0LL);
}

uint64_t sub_1004BDCFC(uint64_t a1)
{
  return sub_1004BDD0C(a1, "Unpaired %{private,mask.hash}s [%s]", 1LL);
}

uint64_t sub_1004BDD0C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v37 = a2;
  uint64_t v5 = type metadata accessor for PairingEvent(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - v12;
  if (qword_10099B4F8 != -1) {
    swift_once(&qword_10099B4F8, sub_1004C0488);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_100A2AC58);
  sub_1004C0508(a1, (uint64_t)v13);
  uint64_t v15 = sub_1004C0508(a1, (uint64_t)v11);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = v5;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc(64LL, -1LL);
    uint64_t v33 = v20;
    *(_DWORD *)uint64_t v19 = 141558531;
    uint64_t v38 = 1752392040LL;
    uint64_t v39 = v20;
    uint64_t v35 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    unsigned int v36 = a3;
    uint64_t v21 = type metadata accessor for UUID(0LL);
    unint64_t v22 = sub_1000F620C();
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    uint64_t v38 = sub_1003F11D4(v23, v24, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v19 + 22) = 2080;
    sub_1005D3A0C();
    uid_t v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    unint64_t v29 = v28;

    uint64_t v38 = sub_1003F11D4(v27, v29, &v39);
    a1 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v19 + 24, v19 + 32);
    a3 = v36;
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v37, (uint8_t *)v19, 0x20u);
    uint64_t v30 = v33;
    swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    uint64_t v31 = v19;
    uint64_t v5 = v34;
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
  }

  sub_1004C0508(a1, (uint64_t)v7);
  swift_storeEnumTagMultiPayload(v7, v5, a3);
  PassthroughSubject.send(_:)(v7);
  return sub_100018C68((uint64_t)v7, type metadata accessor for PairingEvent);
}

uint64_t type metadata accessor for LocalPairingMonitor()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd19LocalPairingMonitor);
}

unint64_t sub_1004BE07C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v10 = *(int *)(v9 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
    uint64_t v14 = (char *)a2 + *(int *)(v9 + 24);
    uint64_t v15 = type metadata accessor for StableIdentifier(0LL);
    int v16 = swift_getEnumCaseMultiPayload(v14, v15);
    if (EnumCaseMultiPayload == 1) {
      __asm { BR              X10 }
    }

    __asm { BR              X10 }
  }

  uint64_t v17 = *a2;
  *a1 = *a2;
  unint64_t v18 = v17 + ((v5 + 16LL) & ~(unint64_t)v5);
  swift_retain();
  return v18;
}

uint64_t sub_1004BE874(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  sub_100016F9C(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v5 = a1 + v4[5];
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = a1 + v4[6];
  uint64_t v10 = type metadata accessor for StableIdentifier(0LL);
  int v11 = swift_getEnumCaseMultiPayload(v9, v10);
  if (EnumCaseMultiPayload == 1)
  {
    switch(v11)
    {
      case 0:
      case 4:
        goto LABEL_7;
      case 1:
        goto LABEL_4;
      case 2:
        goto LABEL_5;
      case 3:
        goto LABEL_6;
      default:
        break;
    }
  }

  else
  {
    switch(v11)
    {
      case 0:
      case 4:
        goto LABEL_7;
      case 1:
LABEL_4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2:
LABEL_5:
        v8(v9, v6);
        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3:
LABEL_6:
        v8(v9, v6);
        sub_100004AEC((uint64_t *)&unk_1009AF840);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }

  uint64_t v12 = a1 + v4[7];
  uint64_t v13 = a1 + v4[8];
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  sub_100016F9C(*(void *)(a1 + v4[9]), *(void *)(a1 + v4[9] + 8));
  uint64_t v15 = (uint64_t *)(a1 + v4[10]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_100016F9C(*v15, v16);
  }
  uint64_t v17 = (uint64_t *)(a1 + v4[11]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100016F9C(*v17, v18);
  }
  sub_100016F9C(*(void *)(a1 + v4[12]), *(void *)(a1 + v4[12] + 8));
  sub_100016F9C(*(void *)(a1 + v4[13]), *(void *)(a1 + v4[13] + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1004BEAF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v10 = (char *)a1 + v9;
  int v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  uint64_t v13 = (char *)a2 + *(int *)(v8 + 24);
  uint64_t v14 = type metadata accessor for StableIdentifier(0LL);
  int v15 = swift_getEnumCaseMultiPayload(v13, v14);
  if (EnumCaseMultiPayload == 1) {
    __asm { BR              X10 }
  }

  __asm { BR              X10 }

void sub_1004BEBFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void *, const void *, uint64_t))
{
  uint64_t v20 = v19[1];
  *unint64_t v16 = *v19;
  v16[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_storeEnumTagMultiPayload(v16, v17, v18);
  uint64_t v21 = v14[7];
  unint64_t v22 = (void *)(v11 + v21);
  uint64_t v23 = (const void *)(v13 + v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13 + v21, 1LL, v15))
  {
    uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    a11(v22, v23, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v22, 0LL, 1LL, v15);
  }

  uint64_t v25 = v14[8];
  uint64_t v26 = v11 + v25;
  uint64_t v27 = v13 + v25;
  uint64_t v28 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16LL))(v26, v27, v28);
  uint64_t v29 = v14[9];
  uint64_t v30 = (uint64_t *)(v11 + v29);
  uint64_t v31 = (uint64_t *)(v13 + v29);
  uint64_t v32 = *v31;
  unint64_t v33 = v31[1];
  sub_10001736C(*v31, v33);
  *uint64_t v30 = v32;
  v30[1] = v33;
  uint64_t v34 = v14[10];
  uint64_t v35 = v11 + v34;
  unsigned int v36 = (uint64_t *)(v13 + v34);
  unint64_t v37 = v36[1];
  if (v37 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  }

  else
  {
    uint64_t v38 = *v36;
    sub_10001736C(*v36, v36[1]);
    *(void *)uint64_t v35 = v38;
    *(void *)(v35 + 8) = v37;
  }

  uint64_t v39 = v14[11];
  uint64_t v40 = v11 + v39;
  uint64_t v41 = (uint64_t *)(v13 + v39);
  unint64_t v42 = v41[1];
  if (v42 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  }

  else
  {
    uint64_t v43 = *v41;
    sub_10001736C(*v41, v41[1]);
    *(void *)uint64_t v40 = v43;
    *(void *)(v40 + 8) = v42;
  }

  uint64_t v44 = v14[12];
  uint64_t v45 = (uint64_t *)(v11 + v44);
  uint64_t v46 = (uint64_t *)(v13 + v44);
  uint64_t v47 = *v46;
  unint64_t v48 = v46[1];
  sub_10001736C(*v46, v48);
  *uint64_t v45 = v47;
  v45[1] = v48;
  uint64_t v49 = v14[13];
  id v50 = (uint64_t *)(v11 + v49);
  id v51 = (uint64_t *)(v13 + v49);
  uint64_t v52 = *v51;
  unint64_t v53 = v51[1];
  sub_10001736C(*v51, v53);
  uint64_t *v50 = v52;
  v50[1] = v53;
  uint64_t v54 = v14[14];
  uint64_t v55 = (void *)(v11 + v54);
  uint64_t v56 = (void *)(v13 + v54);
  uint64_t v57 = v56[1];
  *uint64_t v55 = *v56;
  v55[1] = v57;
  uint64_t v58 = v14[15];
  unint64_t v59 = (void *)(v11 + v58);
  unint64_t v60 = (void *)(v13 + v58);
  uint64_t v61 = v60[1];
  void *v59 = *v60;
  v59[1] = v61;
  JUMPOUT(0x1004BF1E4LL);
}

void sub_1004BEC08()
{
  uint64_t v2 = v1[1];
  *uint64_t v0 = *v1;
  v0[1] = v2;
  uint64_t v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  uint64_t v4 = v1[5];
  v0[4] = v1[4];
  v0[5] = v4;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  JUMPOUT(0x1004BED38LL);
}

void sub_1004BEEF8()
{
  uint64_t v2 = v1[1];
  *uint64_t v0 = *v1;
  v0[1] = v2;
  uint64_t v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  uint64_t v4 = v1[5];
  v0[4] = v1[4];
  v0[5] = v4;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  JUMPOUT(0x1004BF028LL);
}

uint64_t sub_1004BF260(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)result;
  if ((uint64_t *)result != a2)
  {
    sub_100018C68(result, type metadata accessor for PairingEvent);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *uint64_t v3 = v7;
    v3[1] = v8;
    uint64_t v9 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v10 = *(int *)(v9 + 20);
    uint64_t v11 = (char *)v3 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
    uint64_t v14 = (char *)a2 + *(int *)(v9 + 24);
    uint64_t v15 = type metadata accessor for StableIdentifier(0LL);
    int v16 = swift_getEnumCaseMultiPayload(v14, v15);
    if (EnumCaseMultiPayload == 1) {
      __asm { BR              X10 }
    }

    __asm { BR              X10 }
  }

  return result;
}

uint64_t type metadata accessor for PairingEvent(uint64_t a1)
{
  uint64_t result = qword_1009B0AD8;
  if (!qword_1009B0AD8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PairingEvent);
  }
  return result;
}

_OWORD *sub_1004BFAE0(_OWORD *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *a1 = *(_OWORD *)a2;
  uint64_t v6 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v7 = v6[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  uint64_t v13 = v6[6];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for StableIdentifier(0LL);
  int v17 = swift_getEnumCaseMultiPayload(v15, v16);
  if (EnumCaseMultiPayload == 1)
  {
    if (v17 == 3)
    {
      v12(v14, v15, v10);
      uint64_t v20 = (int *)sub_100004AEC((uint64_t *)&unk_1009AF840);
      *(_OWORD *)&v14[v20[12]] = *(_OWORD *)&v15[v20[12]];
      *(_OWORD *)&v14[v20[16]] = *(_OWORD *)&v15[v20[16]];
      *(_OWORD *)&v14[v20[20]] = *(_OWORD *)&v15[v20[20]];
      v14[v20[24]] = v15[v20[24]];
      swift_storeEnumTagMultiPayload(v14, v16, 3LL);
    }

    else if (v17 == 2)
    {
      v12(v14, v15, v10);
      uint64_t v18 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
      *(_OWORD *)&v14[v18[12]] = *(_OWORD *)&v15[v18[12]];
      *(_OWORD *)&v14[v18[16]] = *(_OWORD *)&v15[v18[16]];
      *(_OWORD *)&v14[v18[20]] = *(_OWORD *)&v15[v18[20]];
      *(_WORD *)&v14[v18[24]] = *(_WORD *)&v15[v18[24]];
      *(_OWORD *)&v14[v18[28]] = *(_OWORD *)&v15[v18[28]];
      swift_storeEnumTagMultiPayload(v14, v16, 2LL);
    }

    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    uint64_t v21 = v6[7];
    unint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = &a2[v21];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a2[v21], 1LL, v10))
    {
      uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      v12(v22, v23, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v22, 0LL, 1LL, v10);
    }

    uint64_t v25 = v6[8];
    uint64_t v26 = (char *)a1 + v25;
    uint64_t v27 = &a2[v25];
    uint64_t v28 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v26, v27, v28);
    uint64_t v29 = 1LL;
  }

  else
  {
    if (v17 == 3)
    {
      v12(v14, v15, v10);
      uint64_t v30 = (int *)sub_100004AEC((uint64_t *)&unk_1009AF840);
      *(_OWORD *)&v14[v30[12]] = *(_OWORD *)&v15[v30[12]];
      *(_OWORD *)&v14[v30[16]] = *(_OWORD *)&v15[v30[16]];
      *(_OWORD *)&v14[v30[20]] = *(_OWORD *)&v15[v30[20]];
      v14[v30[24]] = v15[v30[24]];
      swift_storeEnumTagMultiPayload(v14, v16, 3LL);
    }

    else if (v17 == 2)
    {
      v12(v14, v15, v10);
      uint64_t v19 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
      *(_OWORD *)&v14[v19[12]] = *(_OWORD *)&v15[v19[12]];
      *(_OWORD *)&v14[v19[16]] = *(_OWORD *)&v15[v19[16]];
      *(_OWORD *)&v14[v19[20]] = *(_OWORD *)&v15[v19[20]];
      *(_WORD *)&v14[v19[24]] = *(_WORD *)&v15[v19[24]];
      *(_OWORD *)&v14[v19[28]] = *(_OWORD *)&v15[v19[28]];
      swift_storeEnumTagMultiPayload(v14, v16, 2LL);
    }

    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    uint64_t v31 = v6[7];
    uint64_t v32 = (char *)a1 + v31;
    unint64_t v33 = &a2[v31];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a2[v31], 1LL, v10))
    {
      uint64_t v34 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      v12(v32, v33, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v32, 0LL, 1LL, v10);
    }

    uint64_t v35 = v6[8];
    unsigned int v36 = (char *)a1 + v35;
    unint64_t v37 = &a2[v35];
    uint64_t v38 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32LL))(v36, v37, v38);
    uint64_t v29 = 0LL;
  }

  *(_OWORD *)((char *)a1 + v6[9]) = *(_OWORD *)&a2[v6[9]];
  *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)&a2[v6[10]];
  *(_OWORD *)((char *)a1 + v6[11]) = *(_OWORD *)&a2[v6[11]];
  *(_OWORD *)((char *)a1 + v6[12]) = *(_OWORD *)&a2[v6[12]];
  *(_OWORD *)((char *)a1 + v6[13]) = *(_OWORD *)&a2[v6[13]];
  *(_OWORD *)((char *)a1 + v6[14]) = *(_OWORD *)&a2[v6[14]];
  *(_OWORD *)((char *)a1 + v6[15]) = *(_OWORD *)&a2[v6[15]];
  *(void *)((char *)a1 + v6[16]) = *(void *)&a2[v6[16]];
  *(void *)((char *)a1 + v6[17]) = *(void *)&a2[v6[17]];
  *((_BYTE *)a1 + v6[18]) = a2[v6[18]];
  *((_BYTE *)a1 + v6[19]) = a2[v6[19]];
  *((_BYTE *)a1 + v6[20]) = a2[v6[20]];
  swift_storeEnumTagMultiPayload(a1, a3, v29);
  return a1;
}

char *sub_1004BFF70(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for PairingEvent);
    uint64_t v42 = a3;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v8 = v7[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for UUID(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v13(v9, v10, v11);
    uint64_t v14 = v7[6];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = type metadata accessor for StableIdentifier(0LL);
    int v18 = swift_getEnumCaseMultiPayload(v16, v17);
    if (EnumCaseMultiPayload == 1)
    {
      if (v18 == 3)
      {
        v13(v15, v16, v11);
        uint64_t v21 = (int *)sub_100004AEC((uint64_t *)&unk_1009AF840);
        *(_OWORD *)&v15[v21[12]] = *(_OWORD *)&v16[v21[12]];
        *(_OWORD *)&v15[v21[16]] = *(_OWORD *)&v16[v21[16]];
        *(_OWORD *)&v15[v21[20]] = *(_OWORD *)&v16[v21[20]];
        v15[v21[24]] = v16[v21[24]];
        swift_storeEnumTagMultiPayload(v15, v17, 3LL);
      }

      else if (v18 == 2)
      {
        v13(v15, v16, v11);
        uint64_t v19 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
        *(_OWORD *)&v15[v19[12]] = *(_OWORD *)&v16[v19[12]];
        *(_OWORD *)&v15[v19[16]] = *(_OWORD *)&v16[v19[16]];
        *(_OWORD *)&v15[v19[20]] = *(_OWORD *)&v16[v19[20]];
        *(_WORD *)&v15[v19[24]] = *(_WORD *)&v16[v19[24]];
        *(_OWORD *)&v15[v19[28]] = *(_OWORD *)&v16[v19[28]];
        swift_storeEnumTagMultiPayload(v15, v17, 2LL);
      }

      else
      {
        memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      uint64_t v22 = v7[7];
      uint64_t v23 = &a1[v22];
      uint64_t v24 = &a2[v22];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v22], 1LL, v11))
      {
        uint64_t v25 = sub_100004AEC(&qword_10099D8A0);
        memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
      }

      else
      {
        v13(v23, v24, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v23, 0LL, 1LL, v11);
      }

      uint64_t v26 = v42;
      uint64_t v27 = v7[8];
      uint64_t v28 = &a1[v27];
      uint64_t v29 = &a2[v27];
      uint64_t v30 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32LL))(v28, v29, v30);
      uint64_t v31 = 1LL;
    }

    else
    {
      if (v18 == 3)
      {
        v13(v15, v16, v11);
        uint64_t v32 = (int *)sub_100004AEC((uint64_t *)&unk_1009AF840);
        *(_OWORD *)&v15[v32[12]] = *(_OWORD *)&v16[v32[12]];
        *(_OWORD *)&v15[v32[16]] = *(_OWORD *)&v16[v32[16]];
        *(_OWORD *)&v15[v32[20]] = *(_OWORD *)&v16[v32[20]];
        v15[v32[24]] = v16[v32[24]];
        swift_storeEnumTagMultiPayload(v15, v17, 3LL);
      }

      else if (v18 == 2)
      {
        v13(v15, v16, v11);
        uint64_t v20 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
        *(_OWORD *)&v15[v20[12]] = *(_OWORD *)&v16[v20[12]];
        *(_OWORD *)&v15[v20[16]] = *(_OWORD *)&v16[v20[16]];
        *(_OWORD *)&v15[v20[20]] = *(_OWORD *)&v16[v20[20]];
        *(_WORD *)&v15[v20[24]] = *(_WORD *)&v16[v20[24]];
        *(_OWORD *)&v15[v20[28]] = *(_OWORD *)&v16[v20[28]];
        swift_storeEnumTagMultiPayload(v15, v17, 2LL);
      }

      else
      {
        memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      uint64_t v33 = v7[7];
      uint64_t v34 = &a1[v33];
      uint64_t v35 = &a2[v33];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v33], 1LL, v11))
      {
        uint64_t v36 = sub_100004AEC(&qword_10099D8A0);
        memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
      }

      else
      {
        v13(v34, v35, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v34, 0LL, 1LL, v11);
      }

      uint64_t v26 = v42;
      uint64_t v37 = v7[8];
      uint64_t v38 = &a1[v37];
      uint64_t v39 = &a2[v37];
      uint64_t v40 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32LL))(v38, v39, v40);
      uint64_t v31 = 0LL;
    }

    *(_OWORD *)&a1[v7[9]] = *(_OWORD *)&a2[v7[9]];
    *(_OWORD *)&a1[v7[10]] = *(_OWORD *)&a2[v7[10]];
    *(_OWORD *)&a1[v7[11]] = *(_OWORD *)&a2[v7[11]];
    *(_OWORD *)&a1[v7[12]] = *(_OWORD *)&a2[v7[12]];
    *(_OWORD *)&a1[v7[13]] = *(_OWORD *)&a2[v7[13]];
    *(_OWORD *)&a1[v7[14]] = *(_OWORD *)&a2[v7[14]];
    *(_OWORD *)&a1[v7[15]] = *(_OWORD *)&a2[v7[15]];
    *(void *)&a1[v7[16]] = *(void *)&a2[v7[16]];
    *(void *)&a1[v7[17]] = *(void *)&a2[v7[17]];
    a1[v7[18]] = a2[v7[18]];
    a1[v7[19]] = a2[v7[19]];
    a1[v7[20]] = a2[v7[20]];
    swift_storeEnumTagMultiPayload(a1, v26, v31);
  }

  return a1;
}

uint64_t sub_1004C0424(uint64_t a1)
{
  uint64_t result = type metadata accessor for OwnedBeaconRecord(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t sub_1004C0488()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AC58);
  sub_10000A720(v0, (uint64_t)qword_100A2AC58);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000013LL,  0x8000000100850D00LL);
}

uint64_t sub_1004C0508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for MetricsResponse()
{
  return &type metadata for MetricsResponse;
}

uint64_t sub_1004C055C(uint64_t a1)
{
  unint64_t v2 = sub_1004C0670();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C0584(uint64_t a1)
{
  unint64_t v2 = sub_1004C0670();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C05AC(void *a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009B0B10);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100012ED8(a1, v6);
  unint64_t v8 = sub_1004C0670();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MetricsResponse.CodingKeys,  &type metadata for MetricsResponse.CodingKeys,  v8,  v6,  v7);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1004C0670()
{
  unint64_t result = qword_1009B0B18;
  if (!qword_1009B0B18)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805574, &type metadata for MetricsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B0B18);
  }

  return result;
}

ValueMetadata *type metadata accessor for MetricsResponse.CodingKeys()
{
  return &type metadata for MetricsResponse.CodingKeys;
}

unint64_t sub_1004C06C8()
{
  unint64_t result = qword_1009B0B20;
  if (!qword_1009B0B20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805524, &type metadata for MetricsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B0B20);
  }

  return result;
}

unint64_t sub_1004C0710()
{
  unint64_t result = qword_1009B0B28;
  if (!qword_1009B0B28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080554C, &type metadata for MetricsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B0B28);
  }

  return result;
}

uint64_t sub_1004C0754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5 = 0LL;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v56 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = &_swiftEmptyDictionarySingleton;
  uint64_t v55 = a3 + 64;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v5 << 6);
LABEL_20:
    int v18 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v14);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    uint64_t v12 = HIBYTE(v20) & 0xF;
    uint64_t v21 = v19 & 0xFFFFFFFFFFFFLL;
    if ((v20 & 0x2000000000000000LL) != 0) {
      uint64_t v22 = HIBYTE(v20) & 0xF;
    }
    else {
      uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
    }
    if (v22)
    {
      uint64_t v23 = *(void *)(*(void *)(a3 + 56) + 8 * v14);
      if ((v20 & 0x1000000000000000LL) != 0)
      {
        swift_bridgeObjectRetain(v20);
        uint64_t v11 = sub_1001B93AC(v19, v20, 10LL);
        char v52 = v51;
        swift_bridgeObjectRelease();
        if ((v52 & 1) == 0)
        {
LABEL_30:
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
          v57[0] = v10;
          unint64_t v29 = sub_10030CE48(v11);
          uint64_t v30 = v10[2];
          BOOL v31 = (v28 & 1) == 0;
          uint64_t v32 = v30 + v31;
          if (__OFADD__(v30, v31)) {
            goto LABEL_92;
          }
          char v33 = v28;
          if (v10[3] >= v32)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_100062CCC();
            }
          }

          else
          {
            sub_10004BB00(v32, isUniquelyReferenced_nonNull_native);
            unint64_t v34 = sub_10030CE48(v11);
            if ((v33 & 1) != (v35 & 1)) {
              goto LABEL_94;
            }
            unint64_t v29 = v34;
          }

          uint64_t v6 = v55;
          uint64_t v10 = (void *)v57[0];
          if ((v33 & 1) != 0)
          {
            *(void *)(*(void *)(v57[0] + 56LL) + 8 * v29) = v23;
          }

          else
          {
            *(void *)(v57[0] + 8 * (v29 >> 6) + 64) |= 1LL << v29;
            uint64_t v48 = 8 * v29;
            *(void *)(v10[6] + v48) = v11;
            *(void *)(v10[7] + v48) = v23;
            uint64_t v49 = v10[2];
            BOOL v15 = __OFADD__(v49, 1LL);
            uint64_t v50 = v49 + 1;
            if (v15) {
              goto LABEL_93;
            }
            v10[2] = v50;
          }

          swift_bridgeObjectRelease();
        }
      }

      else if ((v20 & 0x2000000000000000LL) != 0)
      {
        v57[0] = v19;
        v57[1] = v20 & 0xFFFFFFFFFFFFFFLL;
        if (v19 == 43)
        {
          if (!v12) {
            goto LABEL_90;
          }
          if (v12 == 1)
          {
LABEL_86:
            uint64_t v11 = 0LL;
            goto LABEL_6;
          }

          if ((BYTE1(v19) - 48) <= 9u)
          {
            uint64_t v11 = (BYTE1(v19) - 48);
            if (v12 == 2) {
              goto LABEL_56;
            }
            if ((BYTE2(v19) - 48) <= 9u)
            {
              uint64_t v11 = 10LL * (BYTE1(v19) - 48) + (BYTE2(v19) - 48);
              uint64_t v36 = v12 - 3;
              if (v12 == 3) {
                goto LABEL_56;
              }
              uint64_t v37 = (unsigned __int8 *)v57 + 3;
              while (1)
              {
                unsigned int v38 = *v37 - 48;
                if (v38 > 9) {
                  break;
                }
                uint64_t v39 = 10 * v11;
                uint64_t v11 = v39 + v38;
                LOBYTE(v12) = 0;
                ++v37;
                if (!--v36) {
                  goto LABEL_6;
                }
              }
            }
          }
        }

        else if (v19 == 45)
        {
          if (!v12) {
            goto LABEL_89;
          }
          if (v12 == 1) {
            goto LABEL_86;
          }
          if ((BYTE1(v19) - 48) <= 9u)
          {
            if (v12 == 2)
            {
              LOBYTE(v12) = 0;
              uint64_t v11 = -(uint64_t)(BYTE1(v19) - 48);
              goto LABEL_6;
            }

            if ((BYTE2(v19) - 48) <= 9u)
            {
              uint64_t v11 = -10LL * (BYTE1(v19) - 48) - (BYTE2(v19) - 48);
              uint64_t v40 = v12 - 3;
              if (v12 == 3) {
                goto LABEL_56;
              }
              uint64_t v41 = (unsigned __int8 *)v57 + 3;
              while (1)
              {
                unsigned int v42 = *v41 - 48;
                if (v42 > 9) {
                  break;
                }
                uint64_t v43 = 10 * v11;
                uint64_t v11 = v43 - v42;
                LOBYTE(v12) = 0;
                ++v41;
                if (!--v40) {
                  goto LABEL_6;
                }
              }
            }
          }
        }

        else if (v12 && (v19 - 48) <= 9u)
        {
          uint64_t v11 = (v19 - 48);
          if (v12 == 1) {
            goto LABEL_56;
          }
          if ((BYTE1(v19) - 48) <= 9u)
          {
            uint64_t v11 = 10LL * (v19 - 48) + (BYTE1(v19) - 48);
            uint64_t v44 = v12 - 2;
            if (v12 == 2)
            {
LABEL_56:
              LOBYTE(v12) = 0;
              goto LABEL_6;
            }

            uint64_t v45 = (unsigned __int8 *)v57 + 2;
            while (1)
            {
              unsigned int v46 = *v45 - 48;
              if (v46 > 9) {
                break;
              }
              uint64_t v47 = 10 * v11;
              uint64_t v11 = v47 + v46;
              LOBYTE(v12) = 0;
              ++v45;
              if (!--v44) {
                goto LABEL_6;
              }
            }
          }
        }

        uint64_t v11 = 0LL;
        LOBYTE(v12) = 1;
LABEL_6:
        if ((v12 & 1) == 0) {
          goto LABEL_30;
        }
      }

      else
      {
        if ((v19 & 0x1000000000000000LL) != 0) {
          uint64_t v24 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t v24 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v19, v20);
        }
        uint64_t v25 = sub_1001B91C8(v24, v21, 10LL);
        if ((v26 & 1) == 0)
        {
          uint64_t v11 = (uint64_t)v25;
          goto LABEL_30;
        }
      }
    }
  }

  BOOL v15 = __OFADD__(v5++, 1LL);
  if (v15)
  {
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }

  if (v5 >= v56) {
    goto LABEL_87;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v5);
  if (v16)
  {
LABEL_19:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
    goto LABEL_20;
  }

  int64_t v17 = v5 + 1;
  if (v5 + 1 >= v56) {
    goto LABEL_87;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v5 + 2;
  if (v5 + 2 >= v56) {
    goto LABEL_87;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v5 + 3;
  if (v5 + 3 >= v56)
  {
LABEL_87:
    swift_release(a3);
    uint64_t result = v54;
    *(void *)(v54 + swift_weakDestroy(v0 + 16) = v10;
    return result;
  }

  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v5 = v17;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v5 >= v56) {
      goto LABEL_87;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }

unint64_t sub_1004C0C70()
{
  uint64_t v1 = v0[2];
  uint64_t v33 = v1 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(v1 + 64);
  int64_t v34 = (unint64_t)(v2 + 63) >> 6;
  uint64_t v35 = v0[2];
  swift_bridgeObjectRetain(v1);
  int64_t v5 = 0LL;
  uint64_t v6 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v5 << 6);
    }

    else
    {
      int64_t v9 = v5 + 1;
      if (__OFADD__(v5, 1LL)) {
        goto LABEL_36;
      }
      if (v9 >= v34)
      {
LABEL_33:
        swift_release(v35);
        uint64_t v29 = sub_100004AEC(&qword_1009B0D38);
        uint64_t inited = swift_initStackObject(v29, v36);
        *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        uint64_t v31 = v0[4];
        *(void *)(inited + 32) = v0[3];
        *(void *)(inited + 40) = v31;
        *(void *)(inited + 48) = v6;
        swift_bridgeObjectRetain(v31);
        return sub_100412E54(inited);
      }

      unint64_t v10 = *(void *)(v33 + 8 * v9);
      ++v5;
      if (!v10)
      {
        int64_t v5 = v9 + 1;
        if (v9 + 1 >= v34) {
          goto LABEL_33;
        }
        unint64_t v10 = *(void *)(v33 + 8 * v5);
        if (!v10)
        {
          int64_t v5 = v9 + 2;
          if (v9 + 2 >= v34) {
            goto LABEL_33;
          }
          unint64_t v10 = *(void *)(v33 + 8 * v5);
          if (!v10)
          {
            int64_t v11 = v9 + 3;
            if (v11 >= v34) {
              goto LABEL_33;
            }
            unint64_t v10 = *(void *)(v33 + 8 * v11);
            if (!v10)
            {
              while (1)
              {
                int64_t v5 = v11 + 1;
                if (__OFADD__(v11, 1LL)) {
                  goto LABEL_37;
                }
                if (v5 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v10 = *(void *)(v33 + 8 * v5);
                ++v11;
                if (v10) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v5 = v11;
          }
        }
      }

uint64_t sub_1004C0F90()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for Failure()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd7Failure);
}

uint64_t sub_1004C0FDC()
{
  uint64_t updated = type metadata accessor for FirmwareUpdateAlertCoordinator();
  uint64_t v1 = swift_allocObject(updated, 40LL, 7LL);
  uint64_t result = sub_1004C1014();
  qword_100A2AC70 = v1;
  return result;
}

uint64_t sub_1004C1014()
{
  uint64_t v1 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  int64_t v11 = (char *)&v67 - v10;
  __chkstk_darwin(v9);
  uint64_t v78 = (uint64_t)&v67 - v12;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0xD00000000000001BLL;
  *(void *)(v0 + 24) = 0x8000000100864DB0LL;
  uint64_t v67 = v0;
  unint64_t v82 = sub_100412E40((uint64_t)_swiftEmptyArrayStorage);
  id v13 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 objectForKey:v14];

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)(v80, v15);
    swift_unknownObjectRelease(v15);
  }

  else
  {
    memset(v80, 0, sizeof(v80));
  }

  sub_100015750((uint64_t)v80, (uint64_t)v81, &qword_10099E200);
  if (!v81[3])
  {
    sub_100015794((uint64_t)v81, &qword_10099E200);
    goto LABEL_71;
  }

  uint64_t v16 = sub_100004AEC(&qword_1009B0D40);
  if ((swift_dynamicCast(&v79, v81, (char *)&type metadata for Any + 8, v16, 6LL) & 1) == 0)
  {
LABEL_71:
    uint64_t result = v67;
    *(void *)(v67 + 32) = v82;
    return result;
  }

  uint64_t result = v79;
  if (!*(void *)(v79 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_71;
  }

  int64_t v18 = 0LL;
  uint64_t v19 = *(void *)(v79 + 64);
  uint64_t v69 = v79 + 64;
  uint64_t v20 = 1LL << *(_BYTE *)(v79 + 32);
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  else {
    uint64_t v21 = -1LL;
  }
  unint64_t v22 = v21 & v19;
  int64_t v70 = (unint64_t)(v20 + 63) >> 6;
  __int128 v77 = xmmword_1007F8BB0;
  uint64_t v74 = v11;
  char v68 = v3;
  uint64_t v71 = v79;
  while (1)
  {
    if (v22)
    {
      uint64_t v72 = (v22 - 1) & v22;
      int64_t v73 = v18;
      unint64_t v23 = __clz(__rbit64(v22)) | (v18 << 6);
      goto LABEL_29;
    }

    int64_t v24 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      goto LABEL_74;
    }
    if (v24 >= v70)
    {
LABEL_69:
      swift_release(result);
      goto LABEL_71;
    }

    unint64_t v25 = *(void *)(v69 + 8 * v24);
    int64_t v26 = v18 + 1;
    if (v25) {
      goto LABEL_28;
    }
    int64_t v26 = v18 + 2;
    if (v18 + 2 >= v70) {
      goto LABEL_69;
    }
    unint64_t v25 = *(void *)(v69 + 8 * v26);
    if (v25) {
      goto LABEL_28;
    }
    int64_t v26 = v18 + 3;
    if (v18 + 3 >= v70) {
      goto LABEL_69;
    }
    unint64_t v25 = *(void *)(v69 + 8 * v26);
    if (v25) {
      goto LABEL_28;
    }
    uint64_t v27 = v18 + 4;
    if (v18 + 4 >= v70) {
      goto LABEL_69;
    }
    unint64_t v25 = *(void *)(v69 + 8 * v27);
    if (!v25) {
      break;
    }
    int64_t v26 = v18 + 4;
LABEL_28:
    uint64_t v72 = (v25 - 1) & v25;
    int64_t v73 = v26;
    unint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_29:
    uint64_t v28 = (uint64_t *)(*(void *)(result + 48) + 16 * v23);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(*(void *)(result + 56) + 8 * v23);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    UUID.init(uuidString:)(v29, v30);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4) == 1)
    {
      swift_bridgeObjectRelease();
      sub_100015794((uint64_t)v3, &qword_10099D8A0);
      goto LABEL_12;
    }

    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v78, v3, v4);
    int64_t v32 = 0LL;
    uint64_t v33 = *(void *)(v31 + 64);
    uint64_t v75 = v31 + 64;
    uint64_t v34 = 1LL << *(_BYTE *)(v31 + 32);
    if (v34 < 64) {
      uint64_t v35 = ~(-1LL << v34);
    }
    else {
      uint64_t v35 = -1LL;
    }
    unint64_t v36 = v35 & v33;
    int64_t v76 = (unint64_t)(v34 + 63) >> 6;
    if ((v35 & v33) != 0)
    {
      while (1)
      {
        unint64_t v42 = __clz(__rbit64(v36));
        v36 &= v36 - 1;
        unint64_t v43 = v42 | (v32 << 6);
LABEL_51:
        uint64_t v47 = (uint64_t *)(*(void *)(v31 + 48) + 16 * v43);
        uint64_t v48 = *v47;
        uint64_t v49 = v47[1];
        uint64_t v50 = *(void *)(*(void *)(v31 + 56) + 8 * v43);
        uint64_t v51 = type metadata accessor for Failure();
        uint64_t v52 = swift_allocObject(v51, 40LL, 7LL);
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRetain(v50);
        sub_1004C0754(v48, v49, v50);
        unint64_t v53 = v82;
        if (!*(void *)(v82 + 16)) {
          goto LABEL_35;
        }
        unint64_t v54 = sub_10030D124(v78);
        if ((v55 & 1) == 0) {
          goto LABEL_35;
        }
        uint64_t v56 = *(void *)(*(void *)(v53 + 56) + 8 * v54);
        if ((unint64_t)v56 >> 62)
        {
          if (v56 < 0) {
            uint64_t v65 = v56;
          }
          else {
            uint64_t v65 = v56 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v56);
          uint64_t v66 = _CocoaArrayWrapper.endIndex.getter(v65);
          swift_bridgeObjectRelease();
          if (!v66) {
            goto LABEL_35;
          }
LABEL_55:
          uint64_t v57 = v74;
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v74, v78, v4);
          unint64_t v59 = sub_1006B9EE4(v81);
          if (*v58)
          {
            unint64_t v60 = v58;
            uint64_t v61 = swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
            unint64_t v63 = *(void *)((*v60 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v62 = *(void *)((*v60 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v63 >= v62 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1LL);
            }
            uint64_t v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v52);
            specialized Array._endMutation()(v64);
            ((void (*)(void *, void))v59)(v81, 0LL);
            swift_release(v52);
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v74, v4);
          }

          else
          {
            ((void (*)(void *, void))v59)(v81, 0LL);
            swift_release(v52);
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v57, v4);
          }

          if (!v36) {
            break;
          }
        }

        else
        {
          if (*(void *)((v56 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_55;
          }
LABEL_35:
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v78, v4);
          uint64_t v37 = sub_100004AEC(&qword_1009B0610);
          uint64_t v38 = swift_allocObject(v37, 40LL, 7LL);
          *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = v77;
          *(void *)(v38 + 32) = v52;
          v81[0] = v38;
          specialized Array._endMutation()(v38);
          uint64_t v39 = v81[0];
          swift_retain();
          unint64_t v40 = v82;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v82);
          v81[0] = v40;
          sub_10005C50C(v39, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
          unint64_t v82 = v81[0];
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
          uint64_t result = swift_release(v52);
          if (!v36) {
            break;
          }
        }
      }
    }

    int64_t v44 = v32 + 1;
    if (__OFADD__(v32, 1LL))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }

    if (v44 < v76)
    {
      unint64_t v45 = *(void *)(v75 + 8 * v44);
      ++v32;
      if (v45) {
        goto LABEL_50;
      }
      int64_t v32 = v44 + 1;
      if (v44 + 1 < v76)
      {
        unint64_t v45 = *(void *)(v75 + 8 * v32);
        if (v45) {
          goto LABEL_50;
        }
        int64_t v32 = v44 + 2;
        if (v44 + 2 < v76)
        {
          unint64_t v45 = *(void *)(v75 + 8 * v32);
          if (v45) {
            goto LABEL_50;
          }
          int64_t v46 = v44 + 3;
          if (v46 < v76)
          {
            unint64_t v45 = *(void *)(v75 + 8 * v46);
            if (v45)
            {
              int64_t v32 = v46;
LABEL_50:
              unint64_t v36 = (v45 - 1) & v45;
              unint64_t v43 = __clz(__rbit64(v45)) + (v32 << 6);
              goto LABEL_51;
            }

            while (1)
            {
              int64_t v32 = v46 + 1;
              if (__OFADD__(v46, 1LL)) {
                goto LABEL_73;
              }
              if (v32 >= v76) {
                break;
              }
              unint64_t v45 = *(void *)(v75 + 8 * v32);
              ++v46;
              if (v45) {
                goto LABEL_50;
              }
            }
          }
        }
      }
    }

    swift_release(v31);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v78, v4);
    uint64_t v3 = v68;
LABEL_12:
    uint64_t result = v71;
    unint64_t v22 = v72;
    int64_t v18 = v73;
  }

  while (1)
  {
    int64_t v26 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v26 >= v70) {
      goto LABEL_69;
    }
    unint64_t v25 = *(void *)(v69 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_28;
    }
  }

void sub_1004C1760()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_1009B0D20);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v43 - v8;
  unint64_t v10 = sub_100412E60((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v11 = *(void *)(v0 + 32);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v45 = v0;
  uint64_t v46 = v11 + 64;
  uint64_t v13 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v47 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v48 = v11;
  int64_t v44 = v47 - 1;
  __n128 v16 = swift_bridgeObjectRetain(v11);
  uint64_t v52 = v1;
  int64_t v53 = 0LL;
  uint64_t v50 = v7;
  uint64_t v51 = v2;
  uint64_t v49 = v9;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      uint64_t v18 = (v15 - 1) & v15;
      unint64_t v19 = v17 | (v53 << 6);
LABEL_7:
      uint64_t v20 = v48;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v2 + 16))( v7,  *(void *)(v48 + 48) + *(void *)(v2 + 72) * v19,  v1,  v16);
      uint64_t v21 = *(void *)(v20 + 56);
      uint64_t v22 = sub_100004AEC(&qword_1009B0D28);
      uint64_t v23 = *(void *)(v21 + 8 * v19);
      *(void *)&v7[*(int *)(v22 + 48)] = v23;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v7, 0LL, 1LL, v22);
      swift_bridgeObjectRetain(v23);
      goto LABEL_26;
    }

    int64_t v24 = v53 + 1;
    if (__OFADD__(v53, 1LL)) {
      goto LABEL_42;
    }
    if (v24 < v47)
    {
      unint64_t v25 = *(void *)(v46 + 8 * v24);
      if (v25) {
        goto LABEL_11;
      }
      int64_t v26 = v53 + 2;
      ++v53;
      if (v24 + 1 < v47)
      {
        unint64_t v25 = *(void *)(v46 + 8 * v26);
        if (v25) {
          goto LABEL_14;
        }
        int64_t v53 = v24 + 1;
        if (v24 + 2 < v47)
        {
          unint64_t v25 = *(void *)(v46 + 8 * (v24 + 2));
          if (v25)
          {
            v24 += 2LL;
            goto LABEL_11;
          }

          int64_t v26 = v24 + 3;
          int64_t v53 = v24 + 2;
          if (v24 + 3 < v47) {
            break;
          }
        }
      }
    }

void sub_1004C1C3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  if (!*(void *)(v2 + 16)) {
    goto LABEL_62;
  }
  swift_bridgeObjectRetain(*(void *)(v1 + 32));
  unint64_t v4 = sub_10030D124(a1);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }

  uint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8 * v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v6);
  uint64_t v42 = v7;
  if (!v7)
  {
LABEL_60:
    uint64_t v37 = v6;
    goto LABEL_61;
  }

  while (1)
  {
    uint64_t v8 = 0LL;
    unint64_t v43 = v6 & 0xC000000000000001LL;
    uint64_t v40 = v6 + 32;
    uint64_t v41 = v6;
LABEL_7:
    if (v43)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v41);
      BOOL v9 = __OFADD__(v8, 1LL);
      uint64_t v10 = v8 + 1;
      if (!v9) {
        break;
      }
      goto LABEL_54;
    }

    uint64_t v6 = *(void *)(v40 + 8 * v8);
    swift_retain();
    BOOL v9 = __OFADD__(v8, 1LL);
    uint64_t v10 = v8 + 1;
    if (!v9) {
      break;
    }
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    if (v6 < 0) {
      uint64_t v38 = v6;
    }
    else {
      uint64_t v38 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v6, 2LL);
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease();
    uint64_t v42 = v39;
    if (!v39) {
      goto LABEL_60;
    }
  }

  uint64_t v45 = v10;
  uint64_t v11 = (void *)(v6 + 16);
  swift_beginAccess(v6 + 16, v49, 0LL, 0LL);
  uint64_t v44 = v6;
  uint64_t v12 = *(void *)(v6 + 16);
  uint64_t v13 = v12 + 64;
  uint64_t v14 = 1LL << *(_BYTE *)(v12 + 32);
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & *(void *)(v12 + 64);
  int64_t v46 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain_n(v12, 2LL);
  int64_t v17 = 0LL;
  while (2)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_38;
    }

    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      goto LABEL_53;
    }
    if (v20 < v46)
    {
      unint64_t v21 = *(void *)(v13 + 8 * v20);
      ++v17;
      if (!v21)
      {
        int64_t v17 = v20 + 1;
        if (v20 + 1 >= v46) {
          break;
        }
        unint64_t v21 = *(void *)(v13 + 8 * v17);
        if (!v21)
        {
          int64_t v17 = v20 + 2;
          if (v20 + 2 >= v46) {
            break;
          }
          unint64_t v21 = *(void *)(v13 + 8 * v17);
          if (!v21)
          {
            int64_t v17 = v20 + 3;
            if (v20 + 3 >= v46) {
              break;
            }
            unint64_t v21 = *(void *)(v13 + 8 * v17);
            if (!v21)
            {
              int64_t v17 = v20 + 4;
              if (v20 + 4 >= v46) {
                break;
              }
              unint64_t v21 = *(void *)(v13 + 8 * v17);
              if (!v21)
              {
                int64_t v22 = v20 + 5;
                if (v22 >= v46) {
                  break;
                }
                unint64_t v21 = *(void *)(v13 + 8 * v22);
                if (!v21)
                {
                  while (1)
                  {
                    int64_t v17 = v22 + 1;
                    if (__OFADD__(v22, 1LL)) {
                      goto LABEL_55;
                    }
                    if (v17 >= v46) {
                      goto LABEL_6;
                    }
                    unint64_t v21 = *(void *)(v13 + 8 * v17);
                    ++v22;
                    if (v21) {
                      goto LABEL_37;
                    }
                  }
                }

                int64_t v17 = v22;
              }
            }
          }
        }
      }

uint64_t sub_1004C2058()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for FirmwareUpdateAlertCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd30FirmwareUpdateAlertCoordinator);
}

uint64_t sub_1004C20A4()
{
  return sub_1004C2474("markActive()", (uint64_t)sub_1004C26D4);
}

uint64_t sub_1004C20B8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v31 = *(void *)(v3 - 8);
  uint64_t v32 = v3;
  __chkstk_darwin(v3);
  char v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v33 = type metadata accessor for DispatchTime(0LL);
  uint64_t v29 = *(void *)(v33 - 8);
  uint64_t v6 = __chkstk_darwin(v33);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v30 = (char *)&v29 - v9;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0) {
    os_activity(name:block:)("AppActivity.markActive", 22LL, 2LL, sub_1004C26EC);
  }
  uint64_t v34 = v1;
  *(_BYTE *)(a1 + 48) = 1;
  if (*(void *)(a1 + 56))
  {
    uint64_t v13 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v13);
    swift_release();
  }

  uint64_t v14 = swift_allocObject(&unk_10095F6A0, 24LL, 7LL);
  swift_weakInit(v14 + 16, a1);
  aBlock[4] = sub_1004C274C;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_10095F6B8;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v36 = _swiftEmptyArrayStorage;
  unint64_t v16 = sub_10012DDCC();
  swift_retain();
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v18 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v17, v18, v10, v16);
  uint64_t v19 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  uint64_t v20 = DispatchWorkItem.init(flags:block:)(v12, v15);
  swift_release();
  swift_release();
  *(void *)(a1 + 56) = v20;
  swift_retain();
  uint64_t v21 = swift_release();
  uint64_t result = static DispatchTime.now()(v21);
  double v23 = *(double *)(a1 + 16);
  if ((~*(void *)&v23 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (v23 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (v23 < 9.22337204e18)
  {
    *char v5 = (uint64_t)v23;
    uint64_t v25 = v31;
    uint64_t v24 = v32;
    (*(void (**)(void *, void, uint64_t))(v31 + 104))( v5,  enum case for DispatchTimeInterval.seconds(_:),  v32);
    unint64_t v26 = v30;
    + infix(_:_:)(v8, v5);
    (*(void (**)(void *, uint64_t))(v25 + 8))(v5, v24);
    uint64_t v27 = *(void (**)(char *, uint64_t))(v29 + 8);
    uint64_t v28 = v33;
    v27(v8, v33);
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v26, v20);
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v27)(v26, v28);
  }

uint64_t sub_1004C240C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_1004C2460();
    return swift_release();
  }

  return result;
}

uint64_t sub_1004C2460()
{
  return sub_1004C2474("markInactive()", (uint64_t)sub_1004C265C);
}

uint64_t sub_1004C2474(const char *a1, uint64_t a2)
{
  uint64_t v5 = v2;
  if (qword_10099B508 != -1) {
    swift_once(&qword_10099B508, sub_1004C25E0);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2AC78);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a1, v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return OSAllocatedUnfairLock.callAsFunction<A>(_:)( a2,  v5,  *(void *)(v5 + 24),  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
}

uint64_t sub_1004C257C()
{
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for AppActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd11AppActivity);
}

uint64_t sub_1004C25E0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AC78);
  sub_10000A720(v0, (uint64_t)qword_100A2AC78);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x7669746341707061LL,  0xEB00000000797469LL);
}

uint64_t sub_1004C265C()
{
  if (*(_BYTE *)(v0 + 48) == 1) {
    uint64_t result = os_activity(name:block:)("AppActivity.markInactive", 24LL, 2LL, sub_1004C269C);
  }
  *(_BYTE *)(v0 + 48) = 0;
  return result;
}

uint64_t sub_1004C269C()
{
  char v1 = 0;
  return CurrentValueSubject.send(_:)(&v1);
}

uint64_t sub_1004C26D4()
{
  return sub_1004C20B8(v0);
}

uint64_t sub_1004C26EC()
{
  char v1 = 1;
  return CurrentValueSubject.send(_:)(&v1);
}

uint64_t sub_1004C2728()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1004C274C()
{
  return sub_1004C240C(v0);
}

uint64_t sub_1004C2754(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004C2764(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1004C276C(void (*a1)(_BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  v10[2] = a3;
  void v10[3] = a1;
  v10[4] = a2;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A9C90);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004C8F98, v10, v5, (char *)&type metadata for () + 8, v6);
  sub_1004C8F50((uint64_t)v13, (uint64_t)v11);
  if (v11[40] == 255)
  {
    sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009A9C90);
    uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(a3 + 24);
    id v8 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

    [v8 readValueForCharacteristic:*(void *)(a3 + 40)];
  }

  else
  {
    sub_100254338((uint64_t)v11, (uint64_t)v12);
    sub_100254374(v12, (uint64_t)v11);
    v11[41] = 1;
    a1(v11);
    sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009AFAE0);
    sub_1002543B0(v12);
  }

  return sub_100015794((uint64_t)v13, (uint64_t *)&unk_1009A9C90);
}

uint64_t sub_1004C28AC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1[9] || a1[13])
  {
    *(void *)a4 = a1;
    *(_BYTE *)(a4 + 40) = 6;
    return swift_retain();
  }

  else
  {
    uint64_t v6 = a1[10];
    a1[9] = a2;
    a1[10] = a3;
    swift_retain();
    uint64_t result = sub_10002214C(0LL, v6);
    *(void *)(a4 + 32) = 0LL;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + swift_weakDestroy(v0 + 16) = 0u;
    *(_BYTE *)(a4 + 40) = -1;
  }

  return result;
}

uint64_t sub_1004C2924(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_10099BA58 != -1) {
    swift_once(&qword_10099BA58, sub_1007C94D4);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2B858);
  sub_10001736C(a1, a2);
  swift_retain();
  sub_10001736C(a1, a2);
  uint64_t v7 = swift_retain();
  id v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v22 = swift_slowAlloc(64LL, -1LL);
    uint64_t v24 = v22;
    *(_DWORD *)uint64_t v10 = 136315394;
    sub_10001736C(a1, a2);
    uint64_t v11 = Data.description.getter(a1, a2);
    unint64_t v13 = v12;
    sub_100016F9C(a1, a2);
    uint64_t v23 = sub_1003F11D4(v11, v13, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    sub_100016F9C(a1, a2);
    sub_100016F9C(a1, a2);
    *(_WORD *)(v10 + 12) = 2080;
    swift_retain();
    uint64_t v14 = sub_1004C395C();
    unint64_t v16 = v15;
    swift_release();
    uint64_t v23 = sub_1003F11D4(v14, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v10 + 14, v10 + 22);
    swift_release_n(v3, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Writing %s to %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v22, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    sub_100016F9C(a1, a2);
    sub_100016F9C(a1, a2);

    swift_release_n(v2, 2LL);
  }

  uint64_t v17 = (void *)swift_allocObject(&unk_10095F790, 40LL, 7LL);
  uint64_t v17[2] = v3;
  v17[3] = a1;
  v17[4] = a2;
  uint64_t v18 = sub_100004AEC(&qword_1009B1350);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  sub_10001736C(a1, a2);
  swift_retain();
  uint64_t v24 = Future.init(_:)(sub_1004C8F28, v17);
  uint64_t v19 = sub_1000372EC( (unint64_t *)&unk_1009B1358,  &qword_1009B1350,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v20 = Publisher.eraseToAnyPublisher()(v18, v19);
  swift_release();
  return v20;
}

uint64_t sub_1004C2C4C(void (*a1)(_BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  v11[2] = a3;
  v11[3] = a1;
  v11[4] = a2;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A9C90);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004C8F34, v11, v5, (char *)&type metadata for () + 8, v6);
  sub_1004C8F50((uint64_t)v14, (uint64_t)v12);
  if (v12[40] == 255)
  {
    sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A9C90);
    uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(a3 + 24);
    id v8 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v8 writeValue:isa forCharacteristic:*(void *)(a3 + 40) type:0];
  }

  else
  {
    sub_100254338((uint64_t)v12, (uint64_t)v13);
    sub_100254374(v13, (uint64_t)v12);
    v12[41] = 1;
    a1(v12);
    sub_100015794((uint64_t)v12, &qword_1009A7920);
    sub_1002543B0(v13);
  }

  return sub_100015794((uint64_t)v14, (uint64_t *)&unk_1009A9C90);
}

uint64_t sub_1004C2DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a1 + 88))
  {
    *(void *)a4 = a1;
    *(_BYTE *)(a4 + 40) = 6;
    return swift_retain();
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 96);
    *(void *)(a1 + 88) = a2;
    *(void *)(a1 + 96) = a3;
    swift_retain();
    uint64_t result = sub_10002214C(0LL, v6);
    *(void *)(a4 + 32) = 0LL;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + swift_weakDestroy(v0 + 16) = 0u;
    *(_BYTE *)(a4 + 40) = -1;
  }

  return result;
}

uint64_t sub_1004C2E34@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1[13])
  {
    uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009C0FE0);
    uint64_t v4 = sub_1000372EC( (unint64_t *)&unk_1009B1330,  (uint64_t *)&unk_1009C0FE0,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    uint64_t result = Publisher.eraseToAnyPublisher()(v3, v4);
    *a2 = result;
  }

  else if (a1[9])
  {
    unint64_t v7 = sub_100122CD4();
    swift_allocError(&type metadata for CentralManager.Error, v7, 0LL, 0LL);
    *(void *)uint64_t v8 = a1;
    *(_BYTE *)(v8 + 40) = 6;
    uint64_t v9 = swift_retain();
    return swift_willThrow(v9);
  }

  else
  {
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009C0FE0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    a1[13] = PassthroughSubject.init()();
    swift_retain();
    swift_release();
    uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 3);
    id v12 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

    [v12 setNotifyValue:1 forCharacteristic:a1[5]];
    uint64_t v13 = sub_1000372EC( (unint64_t *)&unk_1009B1330,  (uint64_t *)&unk_1009C0FE0,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    uint64_t v14 = Publisher.eraseToAnyPublisher()(v10, v13);
    uint64_t result = swift_release();
    *a2 = v14;
  }

  return result;
}

uint64_t sub_1004C2FD4(uint64_t a1)
{
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 24);
  id v3 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

  [v3 setNotifyValue:0 forCharacteristic:*(void *)(a1 + 40)];
  if (*(void *)(a1 + 104))
  {
    uint64_t v6 = 0LL;
    memset(v5, 0, sizeof(v5));
    char v7 = -1;
    swift_retain();
    PassthroughSubject.send(completion:)(v5);
    swift_release();
    sub_100015794((uint64_t)v5, (uint64_t *)&unk_1009B1320);
  }

  *(void *)(a1 + 104) = 0LL;
  return swift_release();
}

uint64_t sub_1004C30A4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B1340);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004C8EC0, v1, v4, (char *)&type metadata for () + 8, v5);
  uint64_t v6 = v60;
  __int128 v55 = *(_OWORD *)((char *)v61 + 8);
  if (v60)
  {
    uint64_t v7 = *(void *)&v61[0];
    uint64_t v8 = swift_allocObject(&unk_10095F718, 32LL, 7LL);
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = v60;
    *(void *)(v8 + 24) = v7;
    uint64_t v9 = sub_1000228F4;
    uint64_t v10 = v55;
    if ((void)v55) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v10 = *((void *)&v61[0] + 1);
    if (*((void *)&v61[0] + 1))
    {
LABEL_3:
      uint64_t v11 = swift_allocObject(&unk_10095F6F0, 32LL, 7LL);
      *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = v55;
      id v12 = sub_100039568;
      uint64_t v13 = &off_10099B000;
      if (!v6) {
        goto LABEL_4;
      }
LABEL_11:
      uint64_t v32 = qword_10099B8C8;
      swift_retain();
      if (v32 != -1) {
        swift_once(&qword_10099B8C8, sub_10073B768);
      }
      uint64_t v33 = type metadata accessor for Logger(0LL);
      sub_10000A720(v33, (uint64_t)qword_100A2B390);
      sub_100254374(a1, (uint64_t)&v60);
      uint64_t v34 = swift_retain_n(v2, 2LL);
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.error.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        int64_t v53 = v12;
        uint64_t v37 = swift_slowAlloc(22LL, -1LL);
        uint64_t v57 = v9;
        uint64_t v38 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v50 = swift_slowAlloc(32LL, -1LL);
        uint64_t v59 = v50;
        *(_DWORD *)uint64_t v37 = 136446466;
        uint64_t v51 = a1;
        swift_retain();
        uint64_t v39 = sub_1004C395C();
        uint64_t v54 = v11;
        unint64_t v41 = v40;
        swift_release();
        uint64_t v58 = sub_1003F11D4(v39, v41, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v37 + 4, v37 + 12);
        swift_release_n(v2, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2112;
        unint64_t v42 = sub_100122CD4();
        uint64_t v43 = swift_allocError(&type metadata for CentralManager.Error, v42, 0LL, 0LL);
        sub_100254374(&v60, v44);
        uint64_t v45 = _swift_stdlib_bridgeErrorToNSError(v43);
        uint64_t v58 = v45;
        uint64_t v11 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v37 + 14, v37 + 22);
        *uint64_t v38 = v45;
        a1 = v51;
        sub_1002543B0(&v60);
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "%{public}s: Sending %@ failure to readPromise",  (uint8_t *)v37,  0x16u);
        uint64_t v46 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v38, 1LL, v46);
        int64_t v47 = v38;
        uint64_t v9 = v57;
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1LL, -1LL);
        uint64_t v48 = v37;
        id v12 = v53;
        swift_slowDealloc(v48, -1LL, -1LL);
      }

      else
      {
        swift_release_n(v2, 2LL);
        sub_1002543B0(&v60);
      }

      uint64_t v60 = 11LL;
      memset(v61, 0, sizeof(v61));
      __int16 v62 = 267;
      v9();
      sub_10002214C((uint64_t)v9, v8);
      sub_100015794((uint64_t)&v60, (uint64_t *)&unk_1009AFAE0);
      uint64_t v13 = &off_10099B000;
      if (v10) {
        goto LABEL_5;
      }
      return sub_10002214C((uint64_t)v9, v8);
    }
  }

  id v12 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v13 = &off_10099B000;
  if (v6) {
    goto LABEL_11;
  }
LABEL_4:
  if (!v10) {
    return sub_10002214C((uint64_t)v9, v8);
  }
LABEL_5:
  uint64_t v14 = v13[281];
  swift_retain();
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10000A720(v15, (uint64_t)qword_100A2B390);
  sub_100254374(a1, (uint64_t)&v60);
  uint64_t v16 = swift_retain_n(v2, 2LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    unint64_t v56 = v9;
    uint64_t v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v52 = v12;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v59 = v21;
    *(_DWORD *)uint64_t v19 = 136446466;
    swift_retain();
    uint64_t v22 = sub_1004C395C();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v58 = sub_1003F11D4(v22, v24, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v19 + 4, v19 + 12);
    swift_release_n(v2, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2112;
    unint64_t v25 = sub_100122CD4();
    uint64_t v26 = swift_allocError(&type metadata for CentralManager.Error, v25, 0LL, 0LL);
    sub_100254374(&v60, v27);
    uint64_t v28 = _swift_stdlib_bridgeErrorToNSError(v26);
    uint64_t v58 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v19 + 14, v19 + 22);
    *uint64_t v20 = v28;
    sub_1002543B0(&v60);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "%{public}s: Sending %@ failure to writePromise",  (uint8_t *)v19,  0x16u);
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v20, 1LL, v29);
    char v30 = v20;
    uint64_t v9 = v56;
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v31 = v21;
    id v12 = v52;
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v2, 2LL);
    sub_1002543B0(&v60);
  }

  uint64_t v60 = 11LL;
  memset(v61, 0, sizeof(v61));
  __int16 v62 = 267;
  v12();
  sub_10002214C((uint64_t)v12, v11);
  sub_10002214C((uint64_t)v12, v11);
  sub_10002214C((uint64_t)v9, v8);
  return sub_100015794((uint64_t)&v60, &qword_1009A7920);
}

uint64_t sub_1004C3704@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = (uint64_t (*)())a1[9];
  uint64_t v5 = a1[10];
  a1[9] = 0LL;
  a1[10] = 0LL;
  sub_1000372DC((uint64_t)v4, v5);
  sub_10002214C((uint64_t)v4, v5);
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[12];
  a1[11] = 0LL;
  a1[12] = 0LL;
  sub_1000372DC(v6, v7);
  sub_10002214C(v6, v7);
  if (!v4)
  {
    uint64_t v8 = 0LL;
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v10 = 0LL;
    uint64_t result = 0LL;
    goto LABEL_6;
  }

  uint64_t v8 = swift_allocObject(&unk_10095F768, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v8 + 24) = v5;
  uint64_t v4 = sub_1000228F4;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t result = swift_allocObject(&unk_10095F740, 32LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(result + 24) = v7;
  uint64_t v10 = sub_100039568;
LABEL_6:
  *a2 = v4;
  a2[1] = (uint64_t (*)())v8;
  a2[2] = v10;
  a2[3] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_1004C37EC()
{
  swift_bridgeObjectRelease();
  sub_10002214C(*(void *)(v0 + 56), *(void *)(v0 + 64));
  sub_10002214C(*(void *)(v0 + 72), *(void *)(v0 + 80));
  sub_10002214C(*(void *)(v0 + 88), *(void *)(v0 + 96));
  swift_release();
  return v0;
}

uint64_t sub_1004C3848()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

Swift::Int sub_1004C3868()
{
  return Hasher._finalize()();
}

void sub_1004C38AC(uint64_t a1)
{
  id v3 = *(id *)(*(void *)v1 + 40LL);
  NSObject.hash(into:)(a1);
}

Swift::Int sub_1004C38F4(uint64_t a1)
{
  id v2 = *(id *)(*(void *)v1 + 40LL);
  NSObject.hash(into:)(v4);

  return Hasher._finalize()();
}

BOOL sub_1004C3940(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 40LL) == *(void *)(*(void *)a2 + 40LL);
}

uint64_t sub_1004C395C()
{
  uint64_t v1 = type metadata accessor for CharacteristicUUID(0LL);
  __chkstk_darwin(v1);
  id v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v25[0] = 0LL;
  v25[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(29LL);
  v4._countAndFlagsBits = 60LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  uint64_t v24 = v0;
  uint64_t v5 = type metadata accessor for Characteristic();
  uint64_t v6 = sub_1004C8520(&qword_1009B1108, (uint64_t)&unk_100805708);
  v7._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v5, v6);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 32LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v5, v6);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8250LL;
  v10._object = (void *)0xE200000000000000LL;
  String.append(_:)(v10);
  uint64_t v11 = *(void **)(v0 + 40);
  id v12 = [v11 UUID];
  sub_100598998();

  _print_unlocked<A, B>(_:_:)( v3,  v25,  v1,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  sub_1004C855C((uint64_t)v3);
  v13._countAndFlagsBits = 0x796669746F6E203ALL;
  v13._object = (void *)0xED0000203A676E69LL;
  String.append(_:)(v13);
  unsigned int v14 = [v11 isNotifying];
  BOOL v15 = v14 == 0;
  if (v14) {
    uint64_t v16 = 1702195828LL;
  }
  else {
    uint64_t v16 = 0x65736C6166LL;
  }
  if (v15) {
    unint64_t v17 = 0xE500000000000000LL;
  }
  else {
    unint64_t v17 = 0xE400000000000000LL;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 32LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = CBCharacteristicProperties.description.getter((__int16)[v11 properties]);
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 62LL;
  v21._object = (void *)0xE100000000000000LL;
  String.append(_:)(v21);
  return v25[0];
}

uint64_t CBCharacteristicProperties.description.getter(__int16 a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }

  uint64_t v2 = sub_1004C4120(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  uint64_t v5 = &v2[2 * v4];
  v5[4] = 0x616364616F72622ELL;
  v5[5] = 0xEA00000000007473LL;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    Swift::String v8 = &v2[2 * v7];
    v8[4] = 0x646165722ELL;
    v8[5] = 0xE500000000000000LL;
  }

uint64_t sub_1004C40F8()
{
  return sub_1004C395C();
}

uint64_t sub_1004C4118()
{
  return CBCharacteristicProperties.description.getter(*v0);
}

void *sub_1004C4120(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_1009AF520);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      unsigned int v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      unsigned int v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C6EF8(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for Characteristic()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd14Characteristic);
}

uint64_t sub_1004C424C()
{
  return sub_1004C8520(&qword_1009B1030, (uint64_t)&unk_100805730);
}

void *sub_1004C4270(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_1009B1048);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      unsigned int v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      unsigned int v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C70DC(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1004C437C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_1009B1050);
      uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4]) {
          memmove(v13, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C6FE8(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1004C449C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C4C30(a1, a2, a3, a4, &qword_1009B1530);
}

uint64_t sub_1004C44A8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  &qword_1009B1058,  (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_1004C44BC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009A9C20,  (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1004C44D0( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100004AEC(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  unint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  void v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23, v25);
    }

    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1004C8CB8(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_1004C46DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, (uint64_t *)&unk_1009B1090, type metadata accessor for OwnedBeaconRecord);
}

void *sub_1004C46F0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C573C(a1, a2, a3, a4, &qword_1009A8E60, type metadata accessor for SPDisabledReason);
}

uint64_t sub_1004C4704(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B10F8, type metadata accessor for BeaconStoreFileRecord);
}

uint64_t sub_1004C4718(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B1300, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_1004C472C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D300, type metadata accessor for DefaultConfigurationLayer);
}

void *sub_1004C4740(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C55D4(a1, a2, a3, a4, (uint64_t *)&unk_1009B1080, &qword_1009B0530);
}

uint64_t sub_1004C4754(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, &qword_10099D2F0, &qword_1009A0840);
}

void *sub_1004C4768(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B1370);
      uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C72D8(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C488C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, &qword_1009B1518, (uint64_t *)&unk_1009B1520);
}

uint64_t sub_1004C48A0(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100004AEC(a5);
  uint64_t v14 = *(void *)(sub_100004AEC(a6) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  unint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  void v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = sub_100004AEC(a6);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23, v25);
    }

    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1004C8BA0(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

void *sub_1004C4AAC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C4AB8(a1, a2, a3, a4, &qword_1009B1150);
}

void *sub_1004C4AB8(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      uint64_t v11 = sub_100004AEC(a5);
      uint64_t v12 = (void *)swift_allocObject(v11, 8 * v10 + 32, 7LL);
      int64_t v13 = j__malloc_size(v12);
      uint64_t v14 = v13 - 32;
      if (v13 < 32) {
        uint64_t v14 = v13 - 25;
      }
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 3);
      uint64_t v15 = v12 + 4;
      if ((v6 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v12 = _swiftEmptyArrayStorage;
      uint64_t v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v9 + 4]) {
          memmove(v15, a4 + 4, 8 * v9);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C8070(0LL, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C4BC0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B12F0, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_1004C4BD4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D5A8, type metadata accessor for UpdateDeviceState);
}

uint64_t sub_1004C4BE8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, (uint64_t *)&unk_1009B1070, (uint64_t *)&unk_1009AE460);
}

uint64_t sub_1004C4BFC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D358, type metadata accessor for ObservedAdvertisement);
}

uint64_t sub_1004C4C10(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B1060,  (uint64_t (*)(void))&type metadata accessor for URL);
}

void *sub_1004C4C24(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C4C30(a1, a2, a3, a4, &qword_1009B1548);
}

void *sub_1004C4C30(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = a4[3];
  int64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v9 = a4[2];
    if (v8 <= v9) {
      int64_t v10 = a4[2];
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      uint64_t v11 = sub_100004AEC(a5);
      uint64_t v12 = (void *)swift_allocObject(v11, v10 + 32, 7LL);
      size_t v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * v13 - 64;
      uint64_t v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v12 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C8158(0LL, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }

  __break(1u);
  return result;
}

void *sub_1004C4D24(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B1560);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C7BB8(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C4E30(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B12E0, type metadata accessor for LostModeRecord);
}

uint64_t sub_1004C4E44(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, (uint64_t *)&unk_1009B1290, type metadata accessor for LocationProvider);
}

uint64_t sub_1004C4E58(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B12F8, type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_1004C4E6C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D4C0, type metadata accessor for ShareRecord);
}

uint64_t sub_1004C4E80(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D380, type metadata accessor for SafeLocation);
}

uint64_t sub_1004C4E94(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B12E8, type metadata accessor for LeashRecord);
}

void *sub_1004C4EA8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B1130);
      uint64_t v11 = (void *)swift_allocObject(v10, 5 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 5);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C7CA8(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1004C4FBC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_10099D3B8);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C76D4(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1004C50C8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_1009B10C8);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C7D90(0LL, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C51D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B1210, type metadata accessor for TimeBasedKey);
}

uint64_t sub_1004C51E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B14E0,  type metadata accessor for NotifyMeRequest.Subscription);
}

uint64_t sub_1004C51FC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, &qword_1009A17F8, (uint64_t *)&unk_1009B14F0);
}

uint64_t sub_1004C5210(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B11E8, type metadata accessor for AccessoryProductInfo);
}

uint64_t sub_1004C5224(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B1100, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
}

void *sub_1004C5238(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B10E0);
      uint64_t v11 = (void *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4]) {
          memmove(v13, a4 + 4, 48 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C75E0(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1004C535C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B14C0);
      uint64_t v11 = (void *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4]) {
          memmove(v13, a4 + 4, 48 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C73CC(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C5480(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, (uint64_t *)&unk_1009B12B0, type metadata accessor for OwnedBeaconGroup);
}

void *sub_1004C5494(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C4C30(a1, a2, a3, a4, &qword_1009B1460);
}

void *sub_1004C54A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_1009B13E0);
      uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C7E78(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C55AC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B1308, type metadata accessor for SharedBeaconGroup);
}

void *sub_1004C55C0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C55D4(a1, a2, a3, a4, &qword_10099D450, (uint64_t *)&unk_1009B1230);
}

void *sub_1004C55D4(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_100004AEC(a5);
      uint64_t v14 = (void *)swift_allocObject(v13, 40 * v12 + 32, 7LL);
      size_t v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      uint64_t v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4]) {
          memmove(v16, a4 + 4, 40 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C8598(0LL, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v14;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C5700(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B10F0, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_1004C5714(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B13B0, type metadata accessor for FetchRequestBeacon);
}

void *sub_1004C5728(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C573C(a1, a2, a3, a4, (uint64_t *)&unk_1009B1220, type metadata accessor for SPBeaconTaskName);
}

void *sub_1004C573C( void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_100004AEC(a5);
      uint64_t v14 = (void *)swift_allocObject(v13, 8 * v12 + 32, 7LL);
      int64_t v15 = j__malloc_size(v14);
      uint64_t v16 = v15 - 32;
      if (v15 < 32) {
        uint64_t v16 = v15 - 25;
      }
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      uint64_t v17 = v14 + 4;
      if ((v8 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      uint64_t v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4]) {
          memmove(v17, a4 + 4, 8 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C77C4(0LL, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v14;
  }

  __break(1u);
  return result;
}

void *sub_1004C5854(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_1009B11A0);
      uint64_t v11 = (void *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4]) {
          memmove(v13, a4 + 4, 48 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C7AC4(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1004C5978(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B1310);
      uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C8070(0LL, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C5A84(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D498, type metadata accessor for WildModeAssociationRecord);
}

uint64_t sub_1004C5A98(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B1468, type metadata accessor for AirPodsLostModeContent.Device);
}

uint64_t sub_1004C5AAC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  &qword_1009B1368,  (uint64_t (*)(void))&type metadata accessor for Destination);
}

uint64_t sub_1004C5AC0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, (uint64_t *)&unk_1009B14B0, (uint64_t *)&unk_1009A0850);
}

void *sub_1004C5AD4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C64AC(a1, a2, a3, a4, &qword_1009B1538, &qword_1009B1540);
}

uint64_t sub_1004C5AE8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D318, type metadata accessor for BeaconObservation);
}

uint64_t sub_1004C5AFC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, (uint64_t *)&unk_1009B1110, &qword_1009A24D8);
}

void *sub_1004C5B10(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C4AB8(a1, a2, a3, a4, &qword_10099D310);
}

void *sub_1004C5B1C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C55D4(a1, a2, a3, a4, &qword_1009B1498, (uint64_t *)&unk_1009B14A0);
}

uint64_t sub_1004C5B30(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, &qword_1009B1038, &qword_1009B1040);
}

void *sub_1004C5B44(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C4C30(a1, a2, a3, a4, &qword_10099D328);
}

uint64_t sub_1004C5B50(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D4E8, type metadata accessor for RawSearchResult);
}

void *sub_1004C5B64(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B1190);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C7F68(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1004C5C70(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C55D4(a1, a2, a3, a4, (uint64_t *)&unk_1009AA770, (uint64_t *)&unk_1009B1380);
}

void *sub_1004C5C84(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C5CAC(a1, a2, a3, a4, &qword_1009B1390, &qword_1009B1398);
}

void *sub_1004C5C98(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C5CAC(a1, a2, a3, a4, &qword_1009B13A0, &qword_1009B13A8);
}

void *sub_1004C5CAC(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_100004AEC(a5);
      uint64_t v14 = (void *)swift_allocObject(v13, 8 * v12 + 32, 7LL);
      int64_t v15 = j__malloc_size(v14);
      uint64_t v16 = v15 - 32;
      if (v15 < 32) {
        uint64_t v16 = v15 - 25;
      }
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      uint64_t v17 = v14 + 4;
      if ((v8 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      uint64_t v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4]) {
          memmove(v17, a4 + 4, 8 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C8A9C(0LL, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v14;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C5DC4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B13B8, type metadata accessor for FetchRequestBeacon_OwnedDevice);
}

uint64_t sub_1004C5DD8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, (uint64_t *)&unk_1009B13D0, &qword_1009A6710);
}

void *sub_1004C5DEC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_1009B1478);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C74D8(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1004C5EF8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_1009A6C78);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C78C8(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C6004(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D540, type metadata accessor for SecureLocation);
}

uint64_t sub_1004C6018(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B12C0,  type metadata accessor for SecureLocationsCachedPayload);
}

void *sub_1004C602C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_10099D538);
      uint64_t v11 = (void *)swift_allocObject(v10, 88 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[11 * v8 + 4]) {
          memmove(v13, a4 + 4, 88 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C823C(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C6154(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B11C0,  (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
}

uint64_t sub_1004C6168(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D3F8, type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_1004C617C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009A17F0, type metadata accessor for NotifyWhenFoundRecord);
}

uint64_t sub_1004C6190(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B12D8, type metadata accessor for LostModeInfoRecord);
}

uint64_t sub_1004C61A4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B1240, _s18ConnectionKeyGroupVMa);
}

void *sub_1004C61B8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C4AB8(a1, a2, a3, a4, &qword_1009B10C0);
}

uint64_t sub_1004C61C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B0630, type metadata accessor for KeySyncMetadataDisplay);
}

void *sub_1004C61D8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C6DD0(a1, a2, a3, a4, (uint64_t *)&unk_1009B1400);
}

void *sub_1004C61EC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_1009B1470);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C832C(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1004C62F8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C5CAC(a1, a2, a3, a4, &qword_1009A60C8, &qword_1009B1500);
}

uint64_t sub_1004C630C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, (uint64_t *)&unk_1009B10A0, &qword_1009B0800);
}

uint64_t sub_1004C6320(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, &qword_10099D510, (uint64_t *)&unk_1009AA7E0);
}

uint64_t sub_1004C6334(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, &qword_1009AA800, (uint64_t *)&unk_1009AA760);
}

uint64_t sub_1004C6348(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  &qword_1009B1218,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

void *sub_1004C635C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C55D4(a1, a2, a3, a4, &qword_1009B1450, &qword_1009B1458);
}

void *sub_1004C6370(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_10099D560);
      uint64_t v11 = (void *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v8 + 4]) {
          memmove(v13, a4 + 4, 56 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C79D0(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1004C6498(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C64AC(a1, a2, a3, a4, (uint64_t *)&unk_1009B1430, &qword_10099D3E8);
}

void *sub_1004C64AC(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_100004AEC(a5);
      uint64_t v14 = (void *)swift_allocObject(v13, 16 * v12 + 32, 7LL);
      int64_t v15 = j__malloc_size(v14);
      uint64_t v16 = v15 - 32;
      if (v15 < 32) {
        uint64_t v16 = v15 - 17;
      }
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 4);
      uint64_t v17 = v14 + 4;
      if ((v8 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      uint64_t v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[2 * v11 + 4]) {
          memmove(v17, a4 + 4, 16 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004C841C(0LL, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v14;
  }

  __break(1u);
  return result;
}

void *sub_1004C65C4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C55D4(a1, a2, a3, a4, (uint64_t *)&unk_1009B1440, &qword_10099D550);
}

uint64_t sub_1004C65D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B10D0,  type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
}

void *sub_1004C65EC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C5CAC(a1, a2, a3, a4, (uint64_t *)&unk_1009B10B0, (uint64_t *)&unk_1009AC1B0);
}

uint64_t sub_1004C6600(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B11A8, type metadata accessor for BeaconKeyManager.IndexInformation);
}

uint64_t sub_1004C6614(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, (uint64_t *)&unk_1009B1200, &qword_1009AC230);
}

uint64_t sub_1004C6628(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B1420,  type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
}

uint64_t sub_1004C663C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, &qword_10099D410, &qword_1009B11D0);
}

void *sub_1004C6650(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AE418);
      uint64_t v11 = (void *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4]) {
          memmove(v13, a4 + 4, 48 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C71CC(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C6774(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, &qword_1009B1508, &qword_1009B1510);
}

uint64_t sub_1004C6788(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D368, type metadata accessor for ManagedCBPeripheralBeaconInfo);
}

void *sub_1004C679C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C55D4(a1, a2, a3, a4, (uint64_t *)&unk_1009B11B0, &qword_10099D408);
}

uint64_t sub_1004C67B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  &qword_1009B1558,  (uint64_t (*)(void))&type metadata accessor for Bit);
}

uint64_t sub_1004C67C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, (uint64_t *)&unk_1009B12A0, type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_1004C67D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B12D0, type metadata accessor for SecureLocationsCachedSharedKey);
}

void *sub_1004C67EC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C55D4(a1, a2, a3, a4, (uint64_t *)&unk_1009B14D0, &qword_1009A3308);
}

void *sub_1004C6800(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_10099D6A8);
      uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C86A0(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C6920(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009B1550, type metadata accessor for FetchResponse.SearchResult);
}

uint64_t sub_1004C6934(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, (uint64_t *)&unk_1009B1120, &qword_10099D4A0);
}

uint64_t sub_1004C6948(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B1280,  type metadata accessor for UTInfoPublishRequestBody.State);
}

uint64_t sub_1004C695C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D338, type metadata accessor for KeyGenerationBeaconInfo);
}

void *sub_1004C6970(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B1270);
      uint64_t v11 = (void *)swift_allocObject(v10, 88 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[11 * v8 + 4]) {
          memmove(v13, a4 + 4, 88 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C8794(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C6A98(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B1180,  type metadata accessor for BeaconKeyManager.PersistenceInstruction);
}

void *sub_1004C6AAC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B13C0);
      uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C8884(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C6BD0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B1260,  type metadata accessor for LocationOfInterestProvider.RemappingOperation);
}

uint64_t sub_1004C6BE4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, &qword_1009B1248, (uint64_t *)&unk_1009B1250);
}

void *sub_1004C6BF8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100004AEC(&qword_1009B11F0);
      uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C8990(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C6D1C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_1009A6DE0, type metadata accessor for AccessoryMetadata);
}

uint64_t sub_1004C6D30(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, (uint64_t *)&unk_1009B11D8, type metadata accessor for BeaconProductInfoRecord);
}

void *sub_1004C6D44(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C5CAC(a1, a2, a3, a4, &qword_1009B1140, &qword_1009B1148);
}

uint64_t sub_1004C6D58(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, &qword_1009B13E8, (uint64_t *)&unk_1009B13F0);
}

uint64_t sub_1004C6D6C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C48A0(a1, a2, a3, a4, &qword_10099D3C0, &qword_1009AC1E0);
}

uint64_t sub_1004C6D80(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0(a1, a2, a3, a4, &qword_10099D3F0, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
}

uint64_t sub_1004C6D94(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1004C44D0( a1,  a2,  a3,  a4,  (uint64_t *)&unk_1009B1170,  type metadata accessor for BeaconKeyManager.KeyMapInfo);
}

void *sub_1004C6DA8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C5CAC(a1, a2, a3, a4, (uint64_t *)&unk_1009B1158, (uint64_t *)&unk_1009AC210);
}

void *sub_1004C6DBC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1004C6DD0(a1, a2, a3, a4, &qword_1009B1168);
}

void *sub_1004C6DD0(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      uint64_t v11 = sub_100004AEC(a5);
      size_t v12 = (void *)swift_allocObject(v11, 40 * v10 + 32, 7LL);
      size_t v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 40);
      uint64_t v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[5 * v9 + 4]) {
          memmove(v14, a4 + 4, 40 * v9);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      size_t v12 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004C8DD0(0LL, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004C6EF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C6FE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 40 * a1 + 32;
  unint64_t v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C70DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C71CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 48 * a1 + 32;
  unint64_t v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    sub_100004AEC((uint64_t *)&unk_1009B1410);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C72D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 24 * a1 + 32;
  unint64_t v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C73CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 48 * a1 + 32;
  unint64_t v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    sub_100004AEC((uint64_t *)&unk_1009A34E0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C74D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100004AEC((uint64_t *)&unk_1009B1480);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C75E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 48 * a1 + 32;
  unint64_t v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C76D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C77C4( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v5 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v7 = a4 + 8 * a1 + 32;
    unint64_t v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      a5(0LL);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C78C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 32 * a1 + 32;
    unint64_t v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      sub_100004AEC(&qword_1009B1490);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C79D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 56 * a1 + 32;
  unint64_t v6 = a3 + 56 * v4;
  if (v5 >= v6 || v5 + 56 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C7AC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 48 * a1 + 32;
  unint64_t v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C7BB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1004C7CA8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = (char *)(a4 + 5 * a1 + 32);
  size_t v6 = 5 * v4;
  unint64_t v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1004C7D90(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C7E78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C7F68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 32 * a1 + 32;
    unint64_t v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      sub_100004AEC(&qword_1009ABA48);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1004C8070(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1004C8158(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if ((v4 & 0x8000000000000000LL) != 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C823C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 88 * a1 + 32;
  unint64_t v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C832C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C841C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v5 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v7 = a4 + 16 * a1 + 32;
    unint64_t v8 = a3 + 16 * v5;
    if (v7 >= v8 || v7 + 16 * v5 <= a3)
    {
      sub_100004AEC(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C8520(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for Characteristic();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1004C855C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CharacteristicUUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1004C8598(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 40 * a1 + 32;
  unint64_t v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_100004AEC(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C86A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 24 * a1 + 32;
  unint64_t v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C8794(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 88 * a1 + 32;
  unint64_t v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C8884(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100004AEC(&qword_10099D4F8);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C8990(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100004AEC(&qword_1009B11F8);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C8A9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v5 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v7 = a4 + 8 * a1 + 32;
    unint64_t v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      sub_100004AEC(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004C8BA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(sub_100004AEC(a5) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C8CB8( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C8DD0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 40 * a1 + 32;
  unint64_t v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C8EC0@<X0>(uint64_t (**a1)()@<X8>)
{
  return sub_1004C3704(v1, a1);
}

uint64_t sub_1004C8ED8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1004C8EFC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1004C8F28(void (*a1)(_BYTE *), uint64_t a2)
{
  return sub_1004C2C4C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1004C8F34@<X0>(uint64_t a1@<X8>)
{
  return sub_1004C2DC4(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1004C8F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A9C90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004C8F98@<X0>(uint64_t a1@<X8>)
{
  return sub_1004C28AC(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void *sub_1004C8FC0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_DWORD *)(a1 + 2) = *(_DWORD *)((char *)a2 + 2);
    *(_BYTE *)(a1 + 6) = *((_BYTE *)a2 + 6);
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for Bit(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    *((_BYTE *)v4 + *(int *)(a3 + 36)) = *((_BYTE *)a2 + *(int *)(a3 + 36));
  }

  return v4;
}

uint64_t sub_1004C9074(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 32);
  uint64_t v3 = type metadata accessor for Bit(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t sub_1004C90AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Bit(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

_BYTE *sub_1004C9134(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Bit(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  a1[*(int *)(a3 + 36)] = a2[*(int *)(a3 + 36)];
  return a1;
}

uint64_t sub_1004C91DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Bit(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_1004C9264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Bit(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_1004C9304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004C9310);
}

uint64_t sub_1004C9310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 3);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = type metadata accessor for Bit(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v10);
  }

uint64_t sub_1004C938C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004C9398);
}

uint64_t sub_1004C9398(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 3) = a2 + 1;
  }

  else
  {
    uint64_t v7 = type metadata accessor for Bit(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for BeaconPayloadMetaDataV2(uint64_t a1)
{
  uint64_t result = qword_1009B15C8;
  if (!qword_1009B15C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconPayloadMetaDataV2);
  }
  return result;
}

uint64_t sub_1004C9444(uint64_t a1)
{
  v4[0] = &unk_1008057C8;
  v4[1] = &unk_1008057E0;
  void v4[2] = &unk_1008057F8;
  v4[3] = (char *)&value witness table for Builtin.Int8 + 64;
  uint64_t result = type metadata accessor for Bit(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = (char *)&value witness table for Builtin.Int8 + 64;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1004C94D8(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_100012ED8(a1, v2);
  dispatch thunk of BinaryEncoding.container()(v34, v2, v3);
  int v4 = v1[6] - 1;
  if ((v4 & 0xFFFFFF00) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  LOBYTE(v31) = *v1;
  unint64_t v5 = sub_100041584();
  uint64_t v30 = FixedWidthInteger.bits()(&type metadata for UInt8, v5);
  if (*(void *)(v30 + 16) < 2uLL)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v29 = type metadata accessor for Bit(0LL);
  uint64_t v6 = *(void *)(v29 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  LOBYTE(v31) = v1[1];
  uint64_t v28 = FixedWidthInteger.bits()(&type metadata for UInt8, v5);
  if (*(void *)(v28 + 16) < 2uLL)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  LOBYTE(v31) = v1[2];
  uint64_t v27 = FixedWidthInteger.bits()(&type metadata for UInt8, v5);
  if (*(void *)(v27 + 16) < 3uLL)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  LOBYTE(v31) = v4;
  uint64_t v8 = FixedWidthInteger.bits()(&type metadata for UInt8, v5);
  if (*(void *)(v8 + 16) < 4uLL)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    __break(1u);
LABEL_17:
    __break(1u);
  }

  uint64_t v9 = v8;
  uint64_t v10 = (v7 + 32) & ~v7;
  uint64_t v11 = sub_100004AEC(&qword_1009B1558);
  uint64_t v12 = swift_allocObject(v11, *(void *)(v6 + 72) + v10, v7 | 7);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v13 = type metadata accessor for BeaconPayloadMetaDataV2(0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 16))(v12 + v10, &v1[*(int *)(v13 + 32)], v29);
  LOBYTE(v31) = v1[*(int *)(v13 + 36)];
  uint64_t v14 = FixedWidthInteger.bits()(&type metadata for UInt8, v5);
  if (*(void *)(v14 + 16) < 4uLL) {
    goto LABEL_15;
  }
  uint64_t v15 = v14;
  uint64_t v31 = v30;
  uint64_t v32 = v30 + v10;
  __int128 v33 = xmmword_1008057A0;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v28);
  sub_1006A0220(v16, v28 + v10, 0LL, 5uLL);
  swift_bridgeObjectRelease();
  uint64_t v17 = (void *)swift_unknownObjectRetain(v27);
  sub_1006A0220(v17, v27 + v10, 0LL, 7uLL);
  swift_bridgeObjectRelease();
  unint64_t v18 = (void *)swift_unknownObjectRetain(v9);
  sub_1006A0220(v18, v9 + v10, 0LL, 9uLL);
  swift_bridgeObjectRelease();
  if (__OFADD__(2LL, 1LL)) {
    goto LABEL_17;
  }
  uint64_t v19 = v31;
  uint64_t v31 = sub_1004C67B0(0, 3LL, 0, (unint64_t)_swiftEmptyArrayStorage);
  uint64_t v20 = swift_unknownObjectRetain(v19);
  sub_100185E24(v20, v32, 0LL, 5uLL);
  swift_bridgeObjectRetain(v12);
  sub_1001863B8(v21);
  swift_unknownObjectRelease(v19);
  swift_setDeallocating(v12);
  swift_arrayDestroy(v12 + v10, *(void *)(v12 + 16), v29);
  swift_deallocClassInstance(v12, 32LL, 7LL);
  uint64_t v22 = swift_unknownObjectRetain(v15);
  sub_100185E24(v22, v15 + v10, 0LL, 9uLL);
  unint64_t v23 = sub_1000F4D24();
  FixedWidthInteger.init(bits:)(&v31, v31, &type metadata for UInt16, v23);
  LOWORD(v31) = bswap32((unsigned __int16)v31) >> 16;
  uint64_t v24 = v35;
  uint64_t v25 = v36;
  sub_100037298((uint64_t)v34, v35);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v31, &type metadata for UInt16, v23, v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
}

uint64_t sub_1004C98F8(void *a1)
{
  return sub_1004C94D8(a1);
}

void sub_1004C990C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x1004C9A68LL);
}

uint64_t sub_1004C9A9C(uint64_t a1)
{
  return sub_1004C9AB4(a1, qword_1009B1610);
}

uint64_t sub_1004C9AA8(uint64_t a1)
{
  return sub_1004C9AB4(a1, qword_1009B1628);
}

uint64_t sub_1004C9AB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  sub_10000A8AC(v3, a2);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)a2);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v4, 60.0);
}

uint64_t sub_1004C9B00(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v50 = a3;
  uint64_t v52 = a1;
  uint64_t v53 = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v5);
  uint64_t v51 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AB0();
  uint64_t v17 = (*(uint64_t (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v13);
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v20 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v19, v20, v7, v18);
  uint64_t v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003DLL,  0x8000000100865E10LL,  v12,  v9,  v16,  0LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v21;
  *(void *)(v4 + 80) = &_swiftEmptySetSingleton;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(void *)(v4 + 120) = 0LL;
  *(void *)(v4 + 128) = 0xF000000000000000LL;
  *(void *)(v4 + 136) = _swiftEmptyArrayStorage;
  uint64_t v22 = static os_log_type_t.debug.getter(v21);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_100A2B0A8,  "AccessoryPairingSession.init()",  30LL,  2LL,  _swiftEmptyArrayStorage,  v50);
  uint64_t v24 = v52;
  uint64_t v23 = v53;
  *(void *)(v4 + swift_unknownObjectUnownedDestroy(v0 + 24) = v52;
  *(void *)(v4 + 40) = v23;
  uint64_t v25 = type metadata accessor for AccessoryPairingValidator();
  uint64_t v26 = swift_allocObject(v25, 24LL, 7LL);
  uint64_t v27 = type metadata accessor for DeviceIdentityUtility(0LL);
  uint64_t v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize(v28);
  uint64_t v29 = v28 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v30 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v29, 1LL, 1LL, v30);
  *(void *)(v28 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0LL;
  *(void *)(v28 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v28 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 9;
  *(void *)(v26 + swift_weakDestroy(v0 + 16) = v28;
  uint64_t v31 = v50;
  *(void *)(v4 + 56) = v26;
  *(void *)(v4 + 64) = v31;
  uint64_t v32 = type metadata accessor for AccessoryPairingErrorManager();
  swift_allocObject(v32, 32LL, 7LL);
  swift_retain();
  __int128 v33 = v31;
  *(void *)(v4 + 48) = sub_10008F110(v24);
  id v34 = [*(id *)&v33[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
  uint64_t v35 = (uint64_t)v51;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

  uint64_t v36 = *(void *)(v4 + 56);
  uint64_t v37 = *(void **)(v4 + 16);
  uint64_t v38 = type metadata accessor for AccessoryPairingCoordinator(0LL);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  swift_retain();
  uint64_t v39 = sub_1006EA530(v35, v36, v37);
  unint64_t v40 = v39;
  if (v39)
  {
    *(void *)(v4 + 72) = v39;
    swift_retain();
    uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009B5B20);
    unsafeFromAsyncTask<A>(_:)(&unk_1009C0FD0, 0LL, v41);
    unint64_t v42 = v54;
    if (v54)
    {
      swift_release();
      swift_release();
      swift_release();

      *(void *)(v4 + 32) = v42;
      return v4;
    }

    unint64_t v43 = sub_100122CD4();
    uint64_t v44 = swift_allocError(&type metadata for CentralManager.Error, v43, 0LL, 0LL);
    *(void *)uint64_t v45 = 15LL;
    *(_OWORD *)(v45 + 8) = 0u;
    *(_OWORD *)(v45 + swift_unknownObjectUnownedDestroy(v0 + 24) = 0u;
    *(_BYTE *)(v45 + 40) = 11;
    swift_willThrow(v44);
    uint64_t v46 = swift_errorRelease(v44);
    uint64_t v47 = static os_log_type_t.error.getter(v46);
    os_log(_:dso:log:_:_:)( v47,  &_mh_execute_header,  qword_100A2B0A8,  "AccessoryPairingSession.init: missing central manager service!",  62LL,  2LL,  _swiftEmptyArrayStorage);
    swift_release();
  }

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  if (v40) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10002214C(*(void *)(v4 + 104), *(void *)(v4 + 112));
  sub_1000182F0(*(void *)(v4 + 120), *(void *)(v4 + 128));
  swift_bridgeObjectRelease();
  uint64_t v48 = type metadata accessor for AccessoryPairingSession();
  swift_deallocPartialClassInstance(v4, v48, 144LL, 7LL);
  return 0LL;
}

uint64_t sub_1004CA070(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.debug.getter(a1);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_100A2B0A8,  "AccessoryPairingSession.deinit",  30LL,  2LL,  _swiftEmptyArrayStorage);

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10002214C(*(void *)(v1 + 104), *(void *)(v1 + 112));
  sub_1000182F0(*(void *)(v1 + 120), *(void *)(v1 + 128));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1004CA15C(uint64_t a1)
{
  return swift_deallocClassInstance(v1, 144LL, 7LL);
}

uint64_t type metadata accessor for AccessoryPairingSession()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd23AccessoryPairingSession);
}

void sub_1004CA19C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = a2;
  uint64_t v90 = a3;
  uint64_t v88 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v86 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  BOOL v85 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v84 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v83 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v81 = *(void *)(v7 - 8);
  uint64_t v82 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A9BF0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v80 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = static os_log_type_t.default.getter(v11);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  uint64_t v14 = qword_100A2B0A8;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 112LL, 7LL);
  __int128 v79 = xmmword_1007E4750;
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)&__int128 aBlock = *v3;
  uint64_t v17 = sub_100004AEC(&qword_1009B19B0);
  uint64_t v18 = String.init<A>(describing:)(&aBlock, v17);
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v21 = sub_1000226F4();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v21;
  *(void *)(v16 + 64) = v21;
  *(void *)(v16 + 72) = 0xD000000000000021LL;
  *(void *)(v16 + 80) = 0x8000000100865BD0LL;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "%{public}@: %{public}@", 22LL, 2LL, v16);
  swift_bridgeObjectRelease();
  if ([a1 isBatteryTooLow])
  {
    sub_100004AB0();
    uint64_t v23 = v81;
    uint64_t v22 = v82;
    (*(void (**)(char *, void, uint64_t))(v81 + 104))( v9,  enum case for DispatchQoS.QoSClass.default(_:),  v82);
    uint64_t v24 = (void *)static OS_dispatch_queue.global(qos:)(v9);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v22);
    uint64_t v25 = swift_allocObject(&unk_10095FEC8, 32LL, 7LL);
    uint64_t v26 = v90;
    *(void *)(v25 + swift_weakDestroy(v0 + 16) = v89;
    *(void *)(v25 + swift_unknownObjectUnownedDestroy(v0 + 24) = v26;
    uint64_t v96 = sub_1004D7890;
    uint64_t v97 = v25;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    uint64_t v94 = sub_1001C31E8;
    v95 = &unk_10095FEE0;
    uint64_t v27 = _Block_copy(&aBlock);
    uint64_t v28 = swift_retain();
    uint64_t v29 = v83;
    static DispatchQoS.unspecified.getter(v28);
    uint64_t v92 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    __int128 v33 = v85;
    uint64_t v34 = v31;
    uint64_t v35 = v88;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v92, v34, v32, v88, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v29, v33, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v86 + 8))(v33, v35);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v29, v87);
    swift_release();
    type metadata accessor for SPPairingSessionError(0LL);
    uint64_t v37 = v36;
    uint64_t v92 = 15LL;
    unint64_t v38 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v39 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v92, v38, v37, v39);
    unint64_t v40 = (void *)aBlock;
    sub_10008F2D4();
  }

  else
  {
    uint64_t v41 = v3;
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v42 = sub_1006A1308(aBlock);
    swift_bridgeObjectRelease();
    uint64_t v43 = v3[3];
    uint64_t v44 = sub_100508D04();
    if ((uint64_t)v44 >= v42)
    {
      uint64_t v51 = v44;
      uint64_t v52 = static os_log_type_t.error.getter(v44);
      uint64_t v78 = v41;
      uint64_t v53 = v52;
      uint64_t v54 = qword_100A2B0A8;
      uint64_t v55 = swift_allocObject(v15, 112LL, 7LL);
      *(_OWORD *)(v55 + swift_weakDestroy(v0 + 16) = v79;
      *(void *)(v55 + 56) = &type metadata for Int;
      *(void *)(v55 + 64) = &protocol witness table for Int;
      *(void *)(v55 + 32) = v42;
      *(void *)(v55 + 96) = &type metadata for Int;
      *(void *)(v55 + 104) = &protocol witness table for Int;
      *(void *)(v55 + 72) = v51;
      os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v54, "Limit reached %i. Current count: %i", v77, (_DWORD)v78);
      swift_bridgeObjectRelease();
      sub_100004AB0();
      uint64_t v80 = v51;
      uint64_t v57 = v81;
      uint64_t v56 = v82;
      (*(void (**)(char *, void, uint64_t))(v81 + 104))( v9,  enum case for DispatchQoS.QoSClass.default(_:),  v82);
      uint64_t v58 = (void *)static OS_dispatch_queue.global(qos:)(v9);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v9, v56);
      uint64_t v59 = swift_allocObject(&unk_10095FE28, 32LL, 7LL);
      uint64_t v60 = v90;
      *(void *)(v59 + swift_weakDestroy(v0 + 16) = v89;
      *(void *)(v59 + swift_unknownObjectUnownedDestroy(v0 + 24) = v60;
      uint64_t v96 = sub_1004D7800;
      uint64_t v97 = v59;
      *(void *)&__int128 aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      uint64_t v94 = sub_1001C31E8;
      v95 = &unk_10095FE40;
      uint64_t v61 = _Block_copy(&aBlock);
      uint64_t v62 = swift_retain();
      unint64_t v63 = v83;
      static DispatchQoS.unspecified.getter(v62);
      uint64_t v92 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v64 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v65 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v66 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v67 = v85;
      uint64_t v68 = v88;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v92, v65, v66, v88, v64);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v63, v67, v61);
      _Block_release(v61);

      (*(void (**)(char *, uint64_t))(v86 + 8))(v67, v68);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v63, v87);
      swift_release();
      type metadata accessor for SPPairingSessionError(0LL);
      uint64_t v70 = v69;
      *(void *)&__int128 aBlock = 17LL;
      unint64_t v71 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v72 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
      _BridgedStoredNSError.init(_:userInfo:)(&v92, &aBlock, v71, v70, v72);
      int64_t v73 = (void *)v92;
      *(void *)&__int128 aBlock = 0LL;
      *((void *)&aBlock + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(35LL);
      swift_bridgeObjectRelease();
      strcpy((char *)&aBlock, "Limit reached ");
      HIBYTE(aBlock) = -18;
      uint64_t v91 = (char *)v42;
      v74._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v74);
      swift_bridgeObjectRelease();
      v75._object = (void *)0x8000000100865C30LL;
      v75._countAndFlagsBits = 0xD000000000000011LL;
      String.append(_:)(v75);
      uint64_t v91 = v80;
      v76._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v76);
      swift_bridgeObjectRelease();
      sub_10008F2D4();

      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v45 = (void *)swift_allocObject(&unk_10095FE78, 48LL, 7LL);
      uint64_t v46 = v90;
      v45[2] = v89;
      v45[3] = v46;
      v45[4] = v41;
      v45[5] = a1;
      uint64_t v47 = type metadata accessor for TaskPriority(0LL);
      uint64_t v48 = (uint64_t)v80;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))(v80, 1LL, 1LL, v47);
      uint64_t v49 = (void *)swift_allocObject(&unk_10095FEA0, 56LL, 7LL);
      v49[2] = 0LL;
      v49[3] = 0LL;
      v49[4] = v43;
      v49[5] = sub_1004D7850;
      v49[6] = v45;
      swift_retain();
      swift_retain();
      id v50 = a1;
      swift_retain();
      swift_retain();
      sub_1003EDB00(v48, (uint64_t)&unk_1009A2638, (uint64_t)v49);
      swift_release();
      swift_release();
    }
  }

void sub_1004CAAB4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v48 = a5;
  uint64_t v49 = a3;
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v50 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a1 & 1) != 0)
  {
    uint64_t v20 = v17;
    unint64_t v21 = (void *)swift_allocObject(&unk_10095FF68, 48LL, 7LL);
    uint64_t v22 = v48;
    v21[2] = v48;
    v21[3] = a4;
    v21[4] = a2;
    v21[5] = v49;
    uint64_t v56 = sub_1004D78FC;
    uint64_t v57 = v21;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v53 = 1107296256LL;
    uint64_t v54 = sub_1001C31E8;
    uint64_t v55 = &unk_10095FF80;
    uint64_t v23 = _Block_copy(&aBlock);
    id v24 = v22;
    swift_retain();
    uint64_t v25 = swift_retain();
    static DispatchQoS.unspecified.getter(v25);
    uint64_t v51 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v26 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v28 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v27, v28, v12, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v14, v23);
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v14, v12);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v20);
    swift_release();
  }

  else
  {
    uint64_t v45 = a2;
    uint64_t v46 = a4;
    uint64_t v47 = v16;
    uint64_t v48 = (void *)v17;
    uint64_t v29 = static os_log_type_t.error.getter(v17);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  qword_100A2B0A8,  "initiatePairing - manatee not available!",  40LL,  2LL);
    sub_100004AB0();
    (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for DispatchQoS.QoSClass.default(_:),  v8);
    uint64_t v30 = (void *)static OS_dispatch_queue.global(qos:)(v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v31 = swift_allocObject(&unk_10095FF18, 32LL, 7LL);
    uint64_t v32 = v49;
    *(void *)(v31 + swift_weakDestroy(v0 + 16) = v45;
    *(void *)(v31 + swift_unknownObjectUnownedDestroy(v0 + 24) = v32;
    uint64_t v56 = sub_1004D78AC;
    uint64_t v57 = (void *)v31;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v53 = 1107296256LL;
    uint64_t v54 = sub_1001C31E8;
    uint64_t v55 = &unk_10095FF30;
    __int128 v33 = _Block_copy(&aBlock);
    uint64_t v34 = swift_retain();
    uint64_t v35 = v19;
    static DispatchQoS.unspecified.getter(v34);
    uint64_t v51 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v36 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v38 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v37, v38, v12, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v35, v14, v33);
    _Block_release(v33);

    (*(void (**)(char *, uint64_t))(v50 + 8))(v14, v12);
    (*(void (**)(char *, void *))(v47 + 8))(v35, v48);
    swift_release();
    type metadata accessor for SPPairingSessionError(0LL);
    uint64_t v40 = v39;
    uint64_t v51 = 20LL;
    unint64_t v41 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v42 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v51, v41, v40, v42);
    uint64_t v43 = aBlock;
    sub_10008F2D4();
  }

uint64_t sub_1004CAF80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v120 = a3;
  uint64_t v121 = a4;
  uint64_t v122 = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = sub_100004AEC(&qword_1009A7AC8);
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = sub_100004AEC(&qword_1009A7B78);
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v98 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = sub_100004AEC(&qword_1009A7B80);
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v102 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = sub_100004AEC(&qword_1009A7B88);
  uint64_t v107 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  id v105 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v112 = sub_100004AEC(&qword_1009A7B90);
  uint64_t v110 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v106 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v113 = sub_100004AEC(&qword_1009A7B98);
  uint64_t v111 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v108 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009B19C0);
  uint64_t v115 = *(void *)(v15 - 8);
  uint64_t v116 = v15;
  __chkstk_darwin(v15);
  unint64_t v114 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009B19C8);
  uint64_t v118 = *(void *)(v17 - 8);
  uint64_t v119 = v17;
  __chkstk_darwin(v17);
  uint64_t v117 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for UUID(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = static os_log_type_t.default.getter(v21);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  uint64_t v25 = qword_100A2B0A8;
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
  *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  id v28 = [a1 identifier];
  uint64_t v101 = a1;
  id v29 = v28;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

  uint64_t v31 = UUID.uuidString.getter(v30);
  uint64_t v33 = v32;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 64) = sub_1000226F4();
  *(void *)(v27 + 32) = v31;
  *(void *)(v27 + 40) = v33;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Initiate pairing with accessory %@.", 35LL, 2LL, v27);
  swift_bridgeObjectRelease();
  uint64_t v34 = v122;
  id v123 = (id)sub_1007CEDA0(*(char **)(v122 + 64), 0LL);
  id v124 = *(id *)(v34 + 16);
  id v35 = v124;
  uint64_t v95 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56LL);
  v36(v7, 1LL, 1LL, v95);
  uint64_t v37 = v36;
  uint64_t v94 = v36;
  id v89 = v35;
  uint64_t v38 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
  unint64_t v39 = sub_100004AB0();
  uint64_t v40 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v41 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  uint64_t v91 = v38;
  unint64_t v93 = v39;
  uint64_t v92 = v40;
  Publisher.receive<A>(on:options:)(&v124, v7, v38, v39, v40, v41);
  sub_100015794((uint64_t)v7, &qword_1009B0670);

  uint64_t v42 = swift_release();
  uint64_t v43 = static Subscribers.Demand.unlimited.getter(v42);
  uint64_t v44 = v9;
  uint64_t v45 = type metadata accessor for Peripheral(0LL);
  uint64_t v90 = v45;
  uint64_t v46 = sub_1000372EC( &qword_1009A7AE8,  &qword_1009A7AC8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v47 = v98;
  uint64_t v48 = v43;
  uint64_t v49 = v97;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v48, sub_1004CB944, 0LL, v97, v45, v38, v46, v40);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v44, v49);
  uint64_t v50 = v89;
  id v123 = v89;
  uint64_t v51 = v95;
  v37(v7, 1LL, 1LL, v95);
  uint64_t v52 = sub_1000372EC( &qword_1009A7BB8,  &qword_1009A7B78,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  id v53 = v50;
  uint64_t v54 = v102;
  uint64_t v55 = v100;
  Publisher.receive<A>(on:options:)(&v123, v7, v100, v39, v52, v41);
  sub_100015794((uint64_t)v7, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v99 + 8))(v47, v55);
  uint64_t v56 = swift_allocObject(&unk_10095F888, 24LL, 7LL);
  uint64_t v57 = swift_weakInit(v56 + 16, v122);
  uint64_t v58 = static Subscribers.Demand.unlimited.getter(v57);
  uint64_t v59 = sub_1000372EC( &qword_1009A7BC0,  &qword_1009A7B80,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v60 = v105;
  uint64_t v61 = v104;
  uint64_t v62 = v90;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v58, sub_1004D7908, v56, v104, v90, v91, v59, v92);
  swift_release();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v54, v61);
  id v123 = v53;
  v94(v7, 1LL, 1LL, v51);
  uint64_t v63 = sub_1000372EC( &qword_1009A7BC8,  &qword_1009A7B88,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  id v64 = v53;
  uint64_t v65 = v106;
  uint64_t v66 = v109;
  Publisher.receive<A>(on:options:)(&v123, v7, v109, v93, v63, v41);
  sub_100015794((uint64_t)v7, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v107 + 8))(v60, v66);
  uint64_t v67 = sub_1000372EC( &qword_1009A7BD0,  &qword_1009A7B90,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v68 = v108;
  uint64_t v69 = v112;
  Publisher.compactMap<A>(_:)(sub_1002673A0, 0LL, v112, v62, v67);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v65, v69);
  uint64_t v70 = sub_100004AEC(&qword_1009AFAF0);
  uint64_t v71 = v113;
  uint64_t v72 = v114;
  Publishers.CompactMap.map<A>(_:)(sub_100254DD0, 0LL, v113, v70);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v68, v71);
  uint64_t v73 = sub_100004AEC(&qword_1009A6C28);
  uint64_t v74 = sub_1000372EC( &qword_1009B19D0,  &qword_1009B19C0,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  uint64_t v75 = sub_1000372EC(&qword_1009A6C38, &qword_1009A6C28, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v76 = v116;
  int v77 = v117;
  Publisher.catch<A>(_:)(sub_10024FF78, 0LL, v116, v73, v74, v75);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v72, v76);
  uint64_t v78 = swift_allocObject(&unk_10095F888, 24LL, 7LL);
  uint64_t v79 = v122;
  swift_weakInit(v78 + 16, v122);
  uint64_t v80 = (void *)swift_allocObject(&unk_10095FFB8, 48LL, 7LL);
  uint64_t v81 = v120;
  uint64_t v82 = v121;
  _OWORD v80[2] = v78;
  v80[3] = v81;
  uint64_t v83 = v101;
  v80[4] = v82;
  v80[5] = v83;
  uint64_t v84 = sub_1000372EC( &qword_1009B19D8,  &qword_1009B19C8,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  id v85 = v83;
  uint64_t v86 = v119;
  Publisher<>.sink(receiveValue:)(sub_1004D7944, v80, v119, v84);
  swift_release();
  (*(void (**)(char *, uint64_t))(v118 + 8))(v77, v86);
  swift_beginAccess(v79 + 80, &v123, 33LL, 0LL);
  AnyCancellable.store(in:)(v79 + 80);
  swift_endAccess(&v123);
  return swift_release();
}

uint64_t sub_1004CB944@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100004AEC(&qword_10099D578);
  uint64_t inited = swift_initStackObject(v2, v7);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 56) = &type metadata for BAServiceIdentifier;
  *(void *)(inited + 64) = &off_10094C298;
  *(_BYTE *)(inited + 32) = 1;
  uint64_t v4 = sub_1004A3734(inited);
  swift_setDeallocating(inited);
  uint64_t v5 = sub_100004AEC(&qword_10099D580);
  uint64_t result = swift_arrayDestroy(inited + 32, 1LL, v5);
  *a1 = v4;
  return result;
}

uint64_t sub_1004CB9E8@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v5 = sub_100004AEC(&qword_1009C0FF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A6E00);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (char *)*a1;
  v43[3] = &type metadata for BAServiceIdentifier;
  v43[4] = &off_10094C298;
  LOBYTE(v43[0]) = 1;
  uint64_t v14 = (uint64_t *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v42, 0LL, 0LL);
  uint64_t v15 = *v14;
  unint64_t v39 = v43;
  swift_bridgeObjectRetain(v15);
  sub_100373D00((uint64_t (*)(uint64_t *))sub_100254D88, (uint64_t)v38, v15);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
  if (v17)
  {
    uint64_t v19 = sub_1004E8280((uint64_t)&off_100936EB0);
    uint64_t v20 = swift_allocObject(&unk_100960080, 32LL, 7LL);
    *(void *)(v20 + swift_weakDestroy(v0 + 16) = v17;
    *(void *)(v20 + swift_unknownObjectUnownedDestroy(v0 + 24) = v19;
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A6E10);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    swift_retain();
    swift_bridgeObjectRetain(v19);
    v43[0] = Future.init(_:)(sub_100254A08, v20);
    uint64_t v22 = sub_1000372EC( (unint64_t *)&qword_1009C0F80,  (uint64_t *)&unk_1009A6E10,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v23 = Publisher.eraseToAnyPublisher()(v21, v22);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }

  else
  {
    uint64_t v36 = v10;
    uint64_t v25 = a2 + 16;
    uint64_t v26 = static os_log_type_t.error.getter(v18);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  qword_100A2B0A8,  "No FindMy service",  17LL,  2LL,  _swiftEmptyArrayStorage);
    swift_beginAccess(v25, v43, 0LL, 0LL);
    if (swift_weakLoadStrong(v25))
    {
      swift_retain();
      swift_release();
      type metadata accessor for SPPairingSessionError(0LL);
      uint64_t v28 = v27;
      uint64_t v40 = 7LL;
      unint64_t v29 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v30 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
      _BridgedStoredNSError.init(_:userInfo:)(v41, &v40, v29, v28, v30);
      uint64_t v31 = (void *)v41[0];
      sub_10008F2D4();

      swift_release();
    }

    v41[0] = v13;
    uint64_t v32 = type metadata accessor for Peripheral(0LL);
    uint64_t v33 = v13;
    Just.init(_:)(v41, v32);
    unint64_t v34 = sub_100122CD4();
    Just.setFailureType<A>(to:)( &type metadata for CentralManager.Error,  v5,  &type metadata for CentralManager.Error,  v34);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v35 = sub_1000372EC( &qword_1009A6E08,  &qword_1009A6E00,  (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
    uint64_t v23 = Publisher.eraseToAnyPublisher()(v9, v35);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v12, v9);
  }

  *uint64_t v37 = v23;
  return result;
}

uint64_t sub_1004CBDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v69 = a5;
  uint64_t v76 = a4;
  uint64_t v75 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v74 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v88, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    uint64_t v73 = Strong;
    sub_10001581C(a1, (uint64_t)v86, &qword_1009AFAF0);
    uint64_t v72 = v7;
    uint64_t v71 = v11;
    uint64_t v70 = v8;
    if ((v87 & 1) != 0)
    {
      uint64_t v19 = sub_100254338((uint64_t)v86, (uint64_t)v85);
      uint64_t v20 = static os_log_type_t.error.getter(v19);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      uint64_t v21 = qword_100A2B0A8;
      uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
      *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      sub_1007C9800();
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      *(void *)(v23 + 56) = &type metadata for String;
      *(void *)(v23 + 64) = sub_1000226F4();
      *(void *)(v23 + 32) = v25;
      *(void *)(v23 + 40) = v27;
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "initiatePairing error %@", 24LL, 2LL, v23);
      swift_bridgeObjectRelease();
      sub_100004AB0();
      (*(void (**)(char *, void, uint64_t))(v15 + 104))( v17,  enum case for DispatchQoS.QoSClass.default(_:),  v14);
      uint64_t v28 = (void *)static OS_dispatch_queue.global(qos:)(v17);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      uint64_t v29 = swift_allocObject(&unk_10095FFE0, 32LL, 7LL);
      uint64_t v30 = v76;
      *(void *)(v29 + swift_weakDestroy(v0 + 16) = v75;
      *(void *)(v29 + swift_unknownObjectUnownedDestroy(v0 + 24) = v30;
      uint64_t v83 = sub_100433A48;
      uint64_t v84 = v29;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v80 = 1107296256LL;
      uint64_t v81 = sub_1001C31E8;
      uint64_t v82 = (ValueMetadata *)&unk_10095FFF8;
      uint64_t v31 = _Block_copy(&aBlock);
      uint64_t v32 = swift_retain();
      static DispatchQoS.unspecified.getter(v32);
      v77[0] = _swiftEmptyArrayStorage;
      uint64_t v33 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v34 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v35 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v36 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)(v77, v34, v35, v72, v33);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v31);
      _Block_release(v31);
      swift_release();

      (*(void (**)(char *, uint64_t))(v70 + 8))(v10, v36);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v13, v71);
      sub_1002543B0(v85);
      return swift_release();
    }

    uint64_t v82 = &type metadata for BAServiceIdentifier;
    uint64_t v83 = (void (*)())&off_10094C298;
    LOBYTE(aBlock) = 1;
    id v68 = (id)v86[0];
    unint64_t v39 = (uint64_t *)(v86[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
    swift_beginAccess(v86[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v85, 0LL, 0LL);
    uint64_t v40 = *v39;
    __chkstk_darwin(v41);
    *(&v68 - 2) = &aBlock;
    swift_bridgeObjectRetain(v40);
    sub_100373D00((uint64_t (*)(uint64_t *))sub_100254D88, (uint64_t)(&v68 - 4), v40);
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v44 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if (v43)
    {
      uint64_t v82 = &type metadata for BACharacteristicIdentifier.FindMy;
      uint64_t v83 = (void (*)())&off_10094C288;
      LOBYTE(aBlock) = 0;
      swift_beginAccess(v43 + 40, v77, 0LL, 0LL);
      uint64_t v45 = *(void *)(v43 + 40);
      __chkstk_darwin(v46);
      *(&v68 - 2) = v47;
      swift_bridgeObjectRetain(v45);
      sub_100373D2C((uint64_t (*)(uint64_t *))sub_1004D7AA0, (uint64_t)(&v68 - 4), v45);
      uint64_t v49 = v48;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      if (v49)
      {
        uint64_t v50 = v69;
        uint64_t v51 = v75;
        uint64_t v52 = v76;
        sub_1004D00C4(v69, v49, v75, v76);
        sub_1004CF2C0(v50, v49, v51, v52);

        swift_release();
        swift_release();
        return swift_release();
      }

      uint64_t v44 = swift_release();
    }

    uint64_t v53 = static os_log_type_t.error.getter(v44);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v53,  &_mh_execute_header,  qword_100A2B0A8,  "No pairing characteristic!",  26LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for SPPairingSessionError(0LL);
    uint64_t v55 = v54;
    v78[0] = 7LL;
    unint64_t v56 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v57 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, v78, v56, v55, v57);
    uint64_t v58 = aBlock;
    sub_10008F2D4();

    sub_100004AB0();
    (*(void (**)(char *, void, uint64_t))(v15 + 104))( v17,  enum case for DispatchQoS.QoSClass.default(_:),  v14);
    uint64_t v59 = (void *)static OS_dispatch_queue.global(qos:)(v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v60 = swift_allocObject(&unk_100960030, 32LL, 7LL);
    uint64_t v61 = v76;
    *(void *)(v60 + swift_weakDestroy(v0 + 16) = v75;
    *(void *)(v60 + swift_unknownObjectUnownedDestroy(v0 + 24) = v61;
    uint64_t v83 = sub_1004D7950;
    uint64_t v84 = v60;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v80 = 1107296256LL;
    uint64_t v81 = sub_1001C31E8;
    uint64_t v82 = (ValueMetadata *)&unk_100960048;
    uint64_t v62 = _Block_copy(&aBlock);
    uint64_t v63 = swift_retain();
    static DispatchQoS.unspecified.getter(v63);
    v78[0] = _swiftEmptyArrayStorage;
    uint64_t v64 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v65 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v66 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v67 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)(v78, v65, v66, v72, v64);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v62);

    _Block_release(v62);
    swift_release();

    (*(void (**)(char *, uint64_t))(v70 + 8))(v10, v67);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v13, v71);
    return swift_release();
  }

  uint64_t v37 = static os_log_type_t.error.getter(0LL);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  return os_log(_:dso:log:_:_:)( v37,  &_mh_execute_header,  qword_100A2B0A8,  "Missing self!",  13LL,  2LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_1004CC67C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v35 = a4;
  uint64_t v36 = a2;
  uint64_t v33 = a3;
  uint64_t v34 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v39 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v38 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = static os_log_type_t.default.getter(v10);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  uint64_t v14 = qword_100A2B0A8;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 112LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  aBlock[0] = *v4;
  uint64_t v17 = sub_100004AEC(&qword_1009B19B0);
  uint64_t v18 = String.init<A>(describing:)(aBlock, v17);
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v21 = sub_1000226F4();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v21;
  *(void *)(v16 + 64) = v21;
  *(void *)(v16 + 72) = 0xD00000000000002FLL;
  *(void *)(v16 + 80) = 0x8000000100865A20LL;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "%{public}@: %{public}@", 22LL, 2LL, v16);
  swift_bridgeObjectRelease();
  uint64_t v22 = (void *)swift_allocObject(&unk_10095FC98, 56LL, 7LL);
  uint64_t v23 = v33;
  uint64_t v24 = v34;
  v22[2] = v34;
  v22[3] = v5;
  uint64_t v26 = v35;
  uint64_t v25 = v36;
  void v22[4] = v23;
  v22[5] = v26;
  v22[6] = v25;
  aBlock[4] = sub_1004D76D0;
  void aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_10095FCB0;
  uint64_t v27 = _Block_copy(aBlock);
  id v28 = v24;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter(v25);
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v29 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v31 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v30, v31, v6, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
  return swift_release();
}

void sub_1004CC980(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v71 = a5;
  uint64_t v82 = a3;
  uint64_t v83 = a4;
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v7);
  id v68 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v77 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v76 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v79 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v78 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v74 = *(void *)(v11 - 8);
  uint64_t v75 = v11;
  __chkstk_darwin(v11);
  uint64_t v73 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  uint64_t v13 = __chkstk_darwin(v69);
  uint64_t v70 = (char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v72 = (char *)v65 - v15;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = static os_log_type_t.default.getter(v18);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  uint64_t v22 = qword_100A2B0A8;
  uint64_t v67 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v23 = swift_allocObject(v67, 72LL, 7LL);
  __int128 v66 = xmmword_1007E67D0;
  *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v84 = (uint64_t)a1;
  id v24 = [a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

  uint64_t v26 = UUID.uuidString.getter(v25);
  uint64_t v28 = v27;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v29 = sub_1000226F4();
  *(void *)(v23 + 64) = v29;
  *(void *)(v23 + 32) = v26;
  *(void *)(v23 + 40) = v28;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Finalize pairing with accessory %@.", 35LL, 2LL, v23);
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(a2 + 72);
  uint64_t v31 = v30 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  swift_beginAccess( v30 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext,  v90,  0LL,  0LL);
  sub_10001581C(v31, (uint64_t)&aBlock, &qword_10099CE58);
  if (v93)
  {
    uint64_t v32 = sub_100004AEC(&qword_1009B19B8);
    uint64_t v33 = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
    uint64_t v34 = swift_dynamicCast(v85, &aBlock, v32, v33, 6LL);
    uint64_t v35 = v84;
    if ((v34 & 1) != 0)
    {
      uint64_t v36 = v85[0];
      uint64_t v37 = *(void *)(v30 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
          + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
      swift_beginAccess(v37, &v86, 0LL, 0LL);
      sub_10001581C(v37, (uint64_t)&aBlock, &qword_10099F5B8);
      if (v93)
      {
        v65[0] = v29;
        sub_100012EC0(&aBlock, (uint64_t)v87);
        uint64_t v39 = v88;
        uint64_t v38 = v89;
        sub_100012ED8(v87, v88);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v38 + 8) + 8LL) + 40LL))(v39);
        unint64_t v41 = v40;
        CCCKGGetOpeningSize(224LL, 10LL);
        uint64_t v42 = (char *)&loc_1004CCD68 + dword_1004CDBD4[v41 >> 62];
        v65[1] = v36;
        __asm { BR              X10 }
      }

      swift_release();
      uint64_t v34 = sub_100015794((uint64_t)&aBlock, &qword_10099F5B8);
    }

    uint64_t v43 = v82;
  }

  else
  {
    uint64_t v34 = sub_100015794((uint64_t)&aBlock, &qword_10099CE58);
    uint64_t v43 = v82;
    uint64_t v35 = v84;
  }

  uint64_t v44 = static os_log_type_t.error.getter(v34);
  os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  qword_100A2B0A8,  "Missing context to generate initial pairing data!",  49LL,  2LL,  _swiftEmptyArrayStorage);
  sub_1004CDC90(v35, 0LL, 0LL);
  sub_100004AB0();
  uint64_t v46 = v73;
  uint64_t v45 = v74;
  uint64_t v47 = v75;
  (*(void (**)(char *, void, uint64_t))(v74 + 104))( v73,  enum case for DispatchQoS.QoSClass.default(_:),  v75);
  uint64_t v48 = (void *)static OS_dispatch_queue.global(qos:)(v46);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  uint64_t v49 = swift_allocObject(&unk_10095FCE8, 32LL, 7LL);
  uint64_t v50 = v83;
  *(void *)(v49 + swift_weakDestroy(v0 + 16) = v43;
  *(void *)(v49 + swift_unknownObjectUnownedDestroy(v0 + 24) = v50;
  uint64_t v94 = sub_1004D76E0;
  uint64_t v95 = v49;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  uint64_t v92 = sub_1001C31E8;
  unint64_t v93 = &unk_10095FD00;
  uint64_t v51 = _Block_copy(&aBlock);
  uint64_t v52 = swift_retain();
  uint64_t v53 = v78;
  static DispatchQoS.unspecified.getter(v52);
  v85[0] = _swiftEmptyArrayStorage;
  uint64_t v54 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v55 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v56 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v57 = v76;
  uint64_t v58 = v55;
  uint64_t v59 = v80;
  dispatch thunk of SetAlgebra.init<A>(_:)(v85, v58, v56, v80, v54);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v53, v57, v51);
  _Block_release(v51);

  (*(void (**)(char *, uint64_t))(v77 + 8))(v57, v59);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v53, v81);
  swift_release();
  type metadata accessor for SPPairingSessionError(0LL);
  uint64_t v61 = v60;
  v85[0] = 7LL;
  unint64_t v62 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v63 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, v85, v62, v61, v63);
  uint64_t v64 = (void *)aBlock;
  sub_10008F2D4();
}

void sub_1004CDBE4(void (*a1)(void, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v5;
  uint64_t v10 = a3;
  unint64_t v7 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  _BridgedStoredNSError.init(_:userInfo:)(&v11, &v10, v7, v6, v8);
  uint64_t v9 = v11;
  a1(0LL, v11);
}

uint64_t sub_1004CDC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = (void *)v3[2];
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    uint64_t v15 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v15);
    *(void *)&v16[-48] = v3;
    *(void *)&v16[-40] = a1;
    *(void *)&v16[-32] = a2;
    *(void *)&v16[-24] = a3;
    *(void *)&v16[-16] = v7;
    return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.AccessoryPairingSession.unpair",  60LL,  2LL,  sub_1004D74A0);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004CDDD0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v96 = a5;
  uint64_t v95 = a4;
  id v79 = a3;
  uint64_t v94 = a1;
  uint64_t v6 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = sub_100004AEC(&qword_1009B1950);
  uint64_t v82 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009B1958);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v80 = v11;
  uint64_t v81 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009B1960);
  uint64_t v83 = *(void *)(v15 - 8);
  uint64_t v84 = v15;
  __chkstk_darwin(v15);
  uint64_t v78 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009B1968);
  uint64_t v86 = *(void *)(v17 - 8);
  uint64_t v87 = v17;
  __chkstk_darwin(v17);
  id v85 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC(&qword_1009B1970);
  uint64_t v89 = *(void *)(v19 - 8);
  uint64_t v90 = v19;
  __chkstk_darwin(v19);
  uint64_t v88 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC(&qword_1009B1978);
  uint64_t v92 = *(void *)(v21 - 8);
  uint64_t v93 = v21;
  __chkstk_darwin(v21);
  uint64_t v91 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v97[0] = (id)sub_1006EAA70();
  id v98 = *(id *)(a2 + 16);
  id v23 = v98;
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL);
  uint64_t v77 = v24;
  uint64_t v75 = v25;
  ((void (*)(char *, uint64_t, uint64_t))v25)(v8, 1LL, 1LL);
  id v74 = v23;
  uint64_t v26 = sub_100004AEC(&qword_1009B1350);
  unint64_t v27 = sub_100004AB0();
  uint64_t v28 = sub_1000372EC( (unint64_t *)&unk_1009B1358,  &qword_1009B1350,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v29 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  unint64_t v76 = v27;
  uint64_t v72 = v29;
  Publisher.receive<A>(on:options:)(&v98, v8, v26, v27, v28, v29);
  sub_100015794((uint64_t)v8, &qword_1009B0670);

  swift_release();
  uint64_t v30 = swift_allocObject(&unk_10095FB58, 32LL, 7LL);
  uint64_t v31 = v79;
  *(void *)(v30 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v30 + swift_unknownObjectUnownedDestroy(v0 + 24) = v31;
  uint64_t v32 = swift_allocObject(&unk_10095FB80, 32LL, 7LL);
  *(void *)(v32 + swift_weakDestroy(v0 + 16) = sub_1004D74C4;
  *(void *)(v32 + swift_unknownObjectUnownedDestroy(v0 + 24) = v30;
  swift_retain();
  id v79 = v31;
  uint64_t v33 = static Subscribers.Demand.unlimited.getter(v79);
  uint64_t v34 = sub_1000372EC( &qword_1009B1980,  &qword_1009B1950,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v35 = v73;
  Publisher.flatMap<A, B>(maxPublishers:_:)( v33,  sub_1004D74E8,  v32,  v73,  (char *)&type metadata for () + 8,  v26,  v34,  v28);
  swift_release();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v10, v35);
  uint64_t v36 = swift_allocObject(&unk_10095FBA8, 32LL, 7LL);
  *(void *)(v36 + swift_weakDestroy(v0 + 16) = sub_1004D7510;
  *(void *)(v36 + swift_unknownObjectUnownedDestroy(v0 + 24) = a2;
  uint64_t v82 = a2;
  uint64_t v37 = swift_retain();
  uint64_t v38 = static Subscribers.Demand.unlimited.getter(v37);
  uint64_t v39 = type metadata accessor for Peripheral(0LL);
  uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
  uint64_t v41 = sub_1000372EC( &qword_1009B1988,  &qword_1009B1958,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v42 = v78;
  uint64_t v43 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v44 = v80;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v38, sub_1004D74E8, v36, v80, v39, v40, v41, v43);
  swift_release();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v14, v44);
  if (qword_10099B518 != -1) {
    swift_once(&qword_10099B518, sub_1004C9AA8);
  }
  uint64_t v45 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v46 = sub_10000A720(v45, (uint64_t)qword_1009B1628);
  uint64_t v47 = v74;
  v97[0] = v74;
  v75(v8, 1LL, 1LL, v77);
  uint64_t v48 = sub_1000372EC( &qword_1009B1990,  &qword_1009B1960,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  id v49 = v47;
  uint64_t v50 = v84;
  uint64_t v51 = v85;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v46, v97, v8, sub_10027BA6C, 0LL, v84, v76, v48, v72);
  sub_100015794((uint64_t)v8, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v83 + 8))(v42, v50);
  uint64_t v52 = sub_100004AEC(&qword_1009AFAF0);
  uint64_t v53 = sub_1000372EC( &qword_1009B1998,  &qword_1009B1968,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  uint64_t v54 = v87;
  uint64_t v55 = v88;
  Publisher.map<A>(_:)(sub_100249DA8, 0LL, v87, v52, v53);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v51, v54);
  uint64_t v56 = sub_100004AEC(&qword_1009A6C28);
  uint64_t v57 = sub_1000372EC( &qword_1009B19A0,  &qword_1009B1970,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v58 = sub_1000372EC(&qword_1009A6C38, &qword_1009A6C28, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v59 = v90;
  uint64_t v60 = v91;
  Publisher.catch<A>(_:)(sub_10024FF78, 0LL, v90, v56, v57, v58);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v55, v59);
  uint64_t v61 = swift_allocObject(&unk_10095F888, 24LL, 7LL);
  uint64_t v62 = v82;
  swift_weakInit(v61 + 16, v82);
  uint64_t v63 = (void *)swift_allocObject(&unk_10095FBD0, 56LL, 7LL);
  uint64_t v65 = v94;
  uint64_t v64 = v95;
  v63[2] = v61;
  v63[3] = v65;
  __int128 v66 = v79;
  v63[4] = v79;
  v63[5] = v64;
  uint64_t v67 = v96;
  v63[6] = v96;
  id v68 = v66;
  swift_retain();
  sub_1000372DC(v64, v67);
  uint64_t v69 = sub_1000372EC( &qword_1009B19A8,  &qword_1009B1978,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  uint64_t v70 = v93;
  Publisher<>.sink(receiveValue:)(sub_1004D757C, v63, v93, v69);
  swift_release();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v60, v70);
  swift_beginAccess(v62 + 80, v97, 33LL, 0LL);
  AnyCancellable.store(in:)(v62 + 80);
  swift_endAccess(v97);
  return swift_release();
}

void sub_1004CE5A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v67 = a6;
  uint64_t v66 = a5;
  uint64_t v73 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v70 = &v64[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v72 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v69 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  id v68 = &v64[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v64[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = &v64[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a2 += 16LL;
  swift_beginAccess(a2, v86, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    Transaction.capture()();
    sub_10001581C(a1, (uint64_t)v84, &qword_1009AFAF0);
    if ((v85 & 1) == 0)
    {

      unsigned int v65 = static os_log_type_t.default.getter(v38);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      uint64_t v39 = qword_100A2B0A8;
      uint64_t v40 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v41 = swift_allocObject(v40, 72LL, 7LL);
      *(_OWORD *)(v41 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      id v42 = [a4 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

      uint64_t v44 = UUID.uuidString.getter(v43);
      uint64_t v46 = v45;
      (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v15);
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 64) = sub_1000226F4();
      *(void *)(v41 + 32) = v44;
      *(void *)(v41 + 40) = v46;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v39, "Successfully unpaired %@.", 25LL, 2LL, v41);
      swift_bridgeObjectRelease();
      sub_100004AB0();
      (*(void (**)(_BYTE *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v11);
      uint64_t v20 = (void *)static OS_dispatch_queue.global(qos:)(v14);
      (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
      uint64_t v47 = swift_allocObject(&unk_10095FC48, 32LL, 7LL);
      uint64_t v48 = v66;
      uint64_t v49 = v67;
      *(void *)(v47 + swift_weakDestroy(v0 + 16) = v66;
      *(void *)(v47 + swift_unknownObjectUnownedDestroy(v0 + 24) = v49;
      uint64_t v80 = sub_1004D7668;
      uint64_t v81 = v47;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v77 = 1107296256LL;
      uint64_t v78 = sub_1001C31E8;
      id v79 = &unk_10095FC60;
      uint64_t v50 = _Block_copy(&aBlock);
      uint64_t v51 = sub_1000372DC(v48, v49);
      uint64_t v52 = v68;
      static DispatchQoS.unspecified.getter(v51);
      v83[0] = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v53 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v54 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v55 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v56 = v70;
      uint64_t v12 = v73;
      dispatch thunk of SetAlgebra.init<A>(_:)(v83, v54, v55, v73, v53);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v52, v56, v50);
      _Block_release(v50);

      (*(void (**)(_BYTE *, uint64_t))(v71 + 8))(v56, v12);
      (*(void (**)(_BYTE *, uint64_t))(v69 + 8))(v52, v72);
      goto LABEL_8;
    }

    uint64_t v19 = sub_100254338((uint64_t)v84, (uint64_t)v83);
    uint64_t v20 = (void *)static os_log_type_t.error.getter(v19);
    if (qword_10099B798 != -1) {
      goto LABEL_12;
    }
    while (1)
    {
      uint64_t v21 = qword_100A2B0A8;
      uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
      *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      sub_1007C9800();
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      *(void *)(v23 + 56) = &type metadata for String;
      *(void *)(v23 + 64) = sub_1000226F4();
      *(void *)(v23 + 32) = v25;
      *(void *)(v23 + 40) = v27;
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Unpair failed. Error %@", 23LL, 2LL, v23);
      swift_bridgeObjectRelease();
      sub_100004AB0();
      (*(void (**)(_BYTE *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v11);
      uint64_t v28 = (void *)static OS_dispatch_queue.global(qos:)(v14);
      (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
      sub_100254374(v83, (uint64_t)v82);
      uint64_t v29 = swift_allocObject(&unk_10095FBF8, 73LL, 7LL);
      uint64_t v30 = v66;
      uint64_t v31 = v67;
      *(void *)(v29 + swift_weakDestroy(v0 + 16) = v66;
      *(void *)(v29 + swift_unknownObjectUnownedDestroy(v0 + 24) = v31;
      sub_100254338((uint64_t)v82, v29 + 32);
      uint64_t v80 = sub_1004D7630;
      uint64_t v81 = v29;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v77 = 1107296256LL;
      uint64_t v78 = sub_1001C31E8;
      id v79 = &unk_10095FC10;
      uint64_t v20 = _Block_copy(&aBlock);
      uint64_t v32 = sub_1000372DC(v30, v31);
      uint64_t v33 = v68;
      static DispatchQoS.unspecified.getter(v32);
      uint64_t v75 = _swiftEmptyArrayStorage;
      uint64_t v34 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v36 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v37 = v70;
      uint64_t v12 = v73;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v35, v36, v73, v34);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v33, v37, v20);
      _Block_release(v20);

      (*(void (**)(_BYTE *, uint64_t))(v71 + 8))(v37, v12);
      (*(void (**)(_BYTE *, uint64_t))(v69 + 8))(v33, v72);
      sub_1002543B0(v83);
LABEL_8:
      uint64_t v57 = swift_release();
      uint64_t v58 = *(_BYTE **)(Strong + 32);
      if (v58[OBJC_IVAR____TtC12searchpartyd14CentralManager_isSharedPairingAgent] == 1) {
        break;
      }
      __break(1u);
LABEL_12:
      swift_once(&qword_10099B798, sub_100651870);
    }

    uint64_t v59 = *(void **)(Strong + 64);
    __chkstk_darwin(v57);
    *(void *)&v64[-16] = v58;
    uint64_t v60 = type metadata accessor for SharedPairingAgent();
    uint64_t v61 = v58;
    id v62 = v59;
    Lock.callAsFunction<A>(_:)(sub_1004D7A8C, &v64[-32], v60);
    uint64_t v63 = aBlock;
    sub_10069CB18(v62);
    swift_release();
  }

uint64_t sub_1004CEDA8(uint64_t result, uint64_t a2, void *a3)
{
  if (result)
  {
    uint64_t v4 = (void (*)(uint64_t))result;
    unint64_t v5 = sub_100122CD4();
    uint64_t v6 = swift_allocError(&type metadata for CentralManager.Error, v5, 0LL, 0LL);
    sub_100254374(a3, v7);
    v4(v6);
    return swift_errorRelease(v6);
  }

  return result;
}

uint64_t sub_1004CEE10(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v40[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v40[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = *(void **)(v2 + 16);
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  uint64_t v14 = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    uint64_t v8 = static os_log_type_t.default.getter(v14);
    if (qword_10099B798 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B798, sub_100651870);
LABEL_3:
  uint64_t v15 = qword_100A2B0A8;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  id v18 = [a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  uint64_t v20 = UUID.uuidString.getter(v19);
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v17 + 32) = v20;
  *(void *)(v17 + 40) = v22;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v15, "unpair accessory %@", 19LL, 2LL, v17);
  swift_bridgeObjectRelease();
  sub_10045C928();
  BinaryDecodable.init(data:)(v23, 0LL, 0xC000000000000000LL);
  uint64_t v45 = 1LL;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  uint64_t v50 = 0x2000000000000000LL;
  uint64_t v24 = *(void *)(v2 + 64);
  uint64_t v43 = &type metadata for BAServiceIdentifier;
  uint64_t v44 = &off_10094C298;
  LOBYTE(v42[0]) = 1;
  uint64_t v25 = (uint64_t *)(v24 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(v24 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v41, 0LL, 0LL);
  uint64_t v26 = *v25;
  __chkstk_darwin(v27);
  *(&v39 - 2) = (uint64_t)v42;
  swift_bridgeObjectRetain(v26);
  sub_100373D00((uint64_t (*)(uint64_t *))sub_10025428C, (uint64_t)(&v39 - 4), v26);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  if (!v29)
  {
LABEL_7:
    uint64_t v36 = static os_log_type_t.error.getter(v30);
    os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  qword_100A2B0A8,  "Unable to retrieve Config Control Point!",  40LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v37 = sub_100004AEC(&qword_1009B1350);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    return Future.init(_:)(sub_1004CF268, 0LL);
  }

  uint64_t v43 = &type metadata for BACharacteristicIdentifier.FindMy;
  uint64_t v44 = &off_10094C288;
  LOBYTE(v42[0]) = 1;
  swift_beginAccess(v29 + 40, v40, 0LL, 0LL);
  uint64_t v31 = *(void *)(v29 + 40);
  __chkstk_darwin(v32);
  *(&v39 - 2) = (uint64_t)v42;
  swift_bridgeObjectRetain(v31);
  sub_100373D2C((uint64_t (*)(uint64_t *))sub_1002542A8, (uint64_t)(&v39 - 4), v31);
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  if (!v34)
  {
    uint64_t v30 = swift_release();
    goto LABEL_7;
  }

  uint64_t v35 = sub_1004D18D8((uint64_t)&v45, v34);
  swift_release();
  swift_release();
  return v35;
}

uint64_t sub_1004CF26C(void (*a1)(_OWORD *))
{
  uint64_t v3 = 0LL;
  memset(v2, 0, sizeof(v2));
  __int16 v4 = 267;
  a1(v2);
  return sub_100015794((uint64_t)v2, &qword_1009A7920);
}

uint64_t sub_1004CF2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = (void *)v4[2];
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    uint64_t v17 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v17);
    *(void *)&v18[-48] = a1;
    *(void *)&v18[-40] = v4;
    *(void *)&v18[-32] = a2;
    *(void *)&v18[-24] = a3;
    *(void *)&v18[-16] = a4;
    *(void *)&v18[-8] = v9;
    return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.AccessoryPairingSession.pairingAgent",  66LL,  2LL,  sub_1004D7338);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004CF404(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v96 = a6;
  uint64_t v94 = a5;
  uint64_t v79 = a4;
  id v74 = a2;
  uint64_t v95 = a1;
  uint64_t v8 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A78F8);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v80 = v11;
  uint64_t v81 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009B1910);
  uint64_t v83 = *(void *)(v15 - 8);
  uint64_t v84 = v15;
  __chkstk_darwin(v15);
  uint64_t v78 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009B1918);
  uint64_t v86 = *(void *)(v17 - 8);
  uint64_t v87 = v17;
  __chkstk_darwin(v17);
  char v85 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC(&qword_1009B1920);
  uint64_t v89 = *(void *)(v19 - 8);
  uint64_t v90 = v19;
  __chkstk_darwin(v19);
  uint64_t v88 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC(&qword_1009B1928);
  uint64_t v92 = *(void *)(v21 - 8);
  uint64_t v93 = v21;
  __chkstk_darwin(v21);
  uint64_t v91 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v23 = [a2 discoveredMetadata];
  id v24 = [v23 manufacturerName];

  static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  Swift::String v25 = String.lowercased()();
  swift_bridgeObjectRelease();
  Swift::String v98 = v25;
  v97[0] = (id)0x6C6F6F747073LL;
  v97[1] = (id)0xE600000000000000LL;
  unint64_t v26 = sub_1000155F8();
  LOBYTE(v23) = StringProtocol.contains<A>(_:)(v97, &type metadata for String, &type metadata for String, v26, v26);
  swift_bridgeObjectRelease();
  v98._countAndFlagsBits = sub_1007C93A8(v23 & 1, *(char **)(a3 + 64));
  v97[0] = *(id *)(a3 + 16);
  id v27 = v97[0];
  uint64_t v28 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  unint64_t v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL);
  v76(v10, 1LL, 1LL, v28);
  id v75 = v27;
  uint64_t v29 = sub_100004AEC(&qword_1009A7910);
  unint64_t v30 = sub_100004AB0();
  uint64_t v31 = sub_1000372EC( &qword_1009A7918,  &qword_1009A7910,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v32 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  uint64_t v33 = v14;
  unint64_t v77 = v30;
  uint64_t v73 = v32;
  Publisher.receive<A>(on:options:)(v97, v10, v29, v30, v31, v32);
  sub_100015794((uint64_t)v10, &qword_1009B0670);

  swift_release();
  uint64_t v34 = (void *)swift_allocObject(&unk_10095FAB8, 40LL, 7LL);
  uint64_t v35 = v74;
  v34[2] = a3;
  void v34[3] = v35;
  v34[4] = v79;
  uint64_t v82 = a3;
  swift_retain();
  id v36 = v35;
  uint64_t v37 = swift_retain();
  uint64_t v38 = static Subscribers.Demand.unlimited.getter(v37);
  uint64_t v39 = sub_100004AEC(&qword_1009B1350);
  uint64_t v40 = sub_1000372EC( &qword_1009A7928,  &qword_1009A78F8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v41 = sub_1000372EC( (unint64_t *)&unk_1009B1358,  &qword_1009B1350,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
  id v42 = v78;
  uint64_t v43 = v38;
  uint64_t v44 = v80;
  Publisher.flatMap<A, B>(maxPublishers:_:)( v43,  sub_1004D73AC,  v34,  v80,  (char *)&type metadata for () + 8,  v39,  v40,  v41);
  swift_release();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v33, v44);
  if (qword_10099B518 != -1) {
    swift_once(&qword_10099B518, sub_1004C9AA8);
  }
  uint64_t v45 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v46 = sub_10000A720(v45, (uint64_t)qword_1009B1628);
  __int128 v47 = v75;
  v98._countAndFlagsBits = (uint64_t)v75;
  v76(v10, 1LL, 1LL, v28);
  uint64_t v48 = sub_1000372EC( &qword_1009B1930,  &qword_1009B1910,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  id v49 = v47;
  uint64_t v50 = v85;
  uint64_t v51 = v46;
  uint64_t v52 = v84;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v51, &v98, v10, sub_10028B5FC, 0LL, v84, v77, v48, v73);
  sub_100015794((uint64_t)v10, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v83 + 8))(v42, v52);
  uint64_t v53 = sub_100004AEC(&qword_1009A7920);
  uint64_t v54 = sub_1000372EC( &qword_1009B1938,  &qword_1009B1918,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  uint64_t v55 = v87;
  uint64_t v56 = v88;
  Publisher.map<A>(_:)(sub_100285644, 0LL, v87, v53, v54);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v50, v55);
  uint64_t v57 = sub_100004AEC(&qword_1009A7930);
  uint64_t v58 = sub_1000372EC( &qword_1009B1940,  &qword_1009B1920,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v59 = sub_1000372EC(&qword_1009A7940, &qword_1009A7930, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v60 = v90;
  uint64_t v61 = v91;
  Publisher.catch<A>(_:)(sub_10028564C, 0LL, v90, v57, v58, v59);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v56, v60);
  uint64_t v62 = swift_allocObject(&unk_10095F888, 24LL, 7LL);
  uint64_t v63 = v82;
  swift_weakInit(v62 + 16, v82);
  uint64_t v64 = (void *)swift_allocObject(&unk_10095FAE0, 48LL, 7LL);
  uint64_t v65 = v94;
  uint64_t v66 = v95;
  v64[2] = v62;
  v64[3] = v66;
  uint64_t v67 = v96;
  _BYTE v64[4] = v65;
  v64[5] = v67;
  uint64_t v68 = sub_1000372EC( &qword_1009B1948,  &qword_1009B1928,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  uint64_t v69 = v93;
  uint64_t v70 = Publisher<>.sink(receiveValue:)(sub_1004D73EC, v64, v93, v68);
  swift_release();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v61, v69);
  *(void *)(v63 + 96) = v70;
  return swift_release();
}

uint64_t sub_1004CFB64@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = sub_1004D3B0C((uint64_t)v7, a2);
  uint64_t result = sub_100015794((uint64_t)v7, &qword_1009B1880);
  *a3 = v5;
  return result;
}

uint64_t sub_1004CFBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = a5;
  uint64_t v41 = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v37[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v44 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v43 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = &v37[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a2 += 16LL;
  swift_beginAccess(a2, v50, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    Transaction.capture()();
    uint64_t v18 = sub_10001581C(a1, (uint64_t)v49, &qword_1009A7920);
    if ((v49[41] & 1) != 0)
    {
      uint64_t v39 = v8;
      uint64_t v40 = v7;
      uint64_t v19 = sub_100254338((uint64_t)v49, (uint64_t)v48);
      unsigned int v38 = static os_log_type_t.error.getter(v19);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      uint64_t v20 = qword_100A2B0A8;
      uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
      *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      sub_1007C9800();
      uint64_t v24 = v23;
      uint64_t v26 = v25;
      *(void *)(v22 + 56) = &type metadata for String;
      *(void *)(v22 + 64) = sub_1000226F4();
      *(void *)(v22 + 32) = v24;
      *(void *)(v22 + 40) = v26;
      os_log(_:dso:log:_:_:)( v38,  &_mh_execute_header,  v20,  "Failed to write initial pairing data. Error %@",  46LL,  2LL,  v22);
      swift_bridgeObjectRelease();
      sub_1004D0BDC(1);
      sub_100004AB0();
      (*(void (**)(_BYTE *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchQoS.QoSClass.default(_:),  v13);
      id v27 = (void *)static OS_dispatch_queue.global(qos:)(v16);
      (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v16, v13);
      sub_100254374(v48, (uint64_t)v47);
      uint64_t v28 = swift_allocObject(&unk_10095FB08, 73LL, 7LL);
      uint64_t v29 = v42;
      *(void *)(v28 + swift_weakDestroy(v0 + 16) = v41;
      *(void *)(v28 + swift_unknownObjectUnownedDestroy(v0 + 24) = v29;
      sub_100254338((uint64_t)v47, v28 + 32);
      aBlock[4] = sub_1004D7494;
      void aBlock[5] = v28;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      id aBlock[3] = &unk_10095FB20;
      unint64_t v30 = _Block_copy(aBlock);
      uint64_t v31 = swift_retain();
      static DispatchQoS.unspecified.getter(v31);
      uint64_t v45 = _swiftEmptyArrayStorage;
      uint64_t v32 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v33 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v34 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v35 = v40;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v33, v34, v40, v32);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v10, v30);
      swift_release();
      _Block_release(v30);

      (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v10, v35);
      (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v12, v44);
      sub_1002543B0(v48);
    }

    else
    {
      uint64_t v36 = static os_log_type_t.default.getter(v18);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      os_log(_:dso:log:_:_:)( v36,  &_mh_execute_header,  qword_100A2B0A8,  "Wrote initial pairing data. Waiting for accessory to write back.",  64LL,  2LL,  _swiftEmptyArrayStorage);
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_1004D0064(void (*a1)(uint64_t), uint64_t a2, void *a3)
{
  unint64_t v5 = sub_100122CD4();
  uint64_t v6 = swift_allocError(&type metadata for CentralManager.Error, v5, 0LL, 0LL);
  sub_100254374(a3, v7);
  a1(v6);
  return swift_errorRelease(v6);
}

uint64_t sub_1004D00C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = (void *)v4[2];
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    uint64_t v17 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v17);
    *(void *)&v18[-48] = v4;
    *(void *)&v18[-40] = a2;
    *(void *)&v18[-32] = a1;
    *(void *)&v18[-24] = a3;
    *(void *)&v18[-16] = a4;
    *(void *)&v18[-8] = v9;
    return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.AccessoryPairingSession.didUpdateValue",  68LL,  2LL,  sub_1004D71F8);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004D0208(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v126 = a2;
  uint64_t v122 = a1;
  uint64_t v123 = a6;
  uint64_t v121 = a5;
  id v111 = a4;
  uint64_t v7 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v7);
  id v124 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v107 = sub_100004AEC(&qword_1009A79B0);
  uint64_t v106 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v104 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A79B8);
  uint64_t v109 = *(void *)(v10 - 8);
  uint64_t v110 = v10;
  __chkstk_darwin(v10);
  uint64_t v108 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009B18C0);
  uint64_t v114 = *(void *)(v12 - 8);
  uint64_t v115 = v12;
  __chkstk_darwin(v12);
  uint64_t v113 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v118 = sub_100004AEC(&qword_1009B18C8);
  uint64_t v116 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v112 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009B18D0);
  uint64_t v119 = *(void *)(v15 - 8);
  uint64_t v120 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_1009B18D8);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC(&qword_1009B18E0);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)(a3 + 16);
  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A6C90);
  uint64_t v117 = a3;
  id v105 = (char *)&type metadata for () + 8;
  unint64_t v103 = v27;
  uint64_t v28 = v125;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100289F88, a3, v26, (char *)&type metadata for () + 8, v27);
  if (v28)
  {
    swift_errorRelease(v28);
    uint64_t v29 = 0LL;
    uint64_t v30 = v126;
  }

  else
  {
    uint64_t v97 = v17;
    Swift::String v98 = v21;
    uint64_t v99 = v19;
    uint64_t v96 = v18;
    uint64_t v100 = 0LL;
    uint64_t v101 = v25;
    uint64_t v102 = v23;
    uint64_t v125 = v22;
    uint64_t v31 = v126;
    id v127 = *(id *)(v126 + 16);
    id v32 = v127;
    uint64_t v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL);
    uint64_t v35 = (uint64_t)v124;
    uint64_t v95 = v33;
    uint64_t v94 = v34;
    ((void (*)(char *, uint64_t, uint64_t))v34)(v124, 1LL, 1LL);
    unint64_t v36 = sub_100004AB0();
    uint64_t v37 = sub_1000372EC( &qword_1009A6CA0,  (uint64_t *)&unk_1009A6C90,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v38 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    id v92 = v32;
    uint64_t v39 = v104;
    unint64_t v40 = v103;
    unint64_t v103 = v36;
    uint64_t v93 = v38;
    Publisher.receive<A>(on:options:)(&v127, v35, v40, v36, v37, v38);
    sub_100015794(v35, &qword_1009B0670);

    swift_release();
    uint64_t v41 = swift_retain();
    uint64_t v42 = static Subscribers.Demand.unlimited.getter(v41);
    uint64_t v43 = sub_100004AEC(&qword_1009A79A8);
    uint64_t v44 = sub_100004AEC(&qword_1009A7958);
    uint64_t v45 = sub_1000372EC( &qword_1009A79E8,  &qword_1009A79B0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    uint64_t v46 = sub_1000372EC(&qword_1009A79F0, &qword_1009A7958, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v48 = v107;
    __int128 v47 = v108;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v42, sub_1004D7214, v31, v107, v43, v44, v45, v46);
    swift_release();
    (*(void (**)(char *, uint64_t))(v106 + 8))(v39, v48);
    uint64_t v49 = swift_allocObject(&unk_10095F950, 32LL, 7LL);
    uint64_t v50 = v111;
    *(void *)(v49 + swift_weakDestroy(v0 + 16) = v31;
    *(void *)(v49 + swift_unknownObjectUnownedDestroy(v0 + 24) = v50;
    swift_retain();
    id v111 = v50;
    uint64_t v51 = sub_100004AEC(&qword_1009B1880);
    uint64_t v52 = sub_1000372EC( &qword_1009A79F8,  &qword_1009A79B8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    uint64_t v53 = v113;
    uint64_t v54 = v110;
    Publisher.map<A>(_:)(sub_1004D7244, v49, v110, v51, v52);
    swift_release();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v47, v54);
    uint64_t v55 = swift_allocObject(&unk_10095F978, 32LL, 7LL);
    uint64_t v56 = v117;
    *(void *)(v55 + swift_weakDestroy(v0 + 16) = v31;
    *(void *)(v55 + swift_unknownObjectUnownedDestroy(v0 + 24) = v56;
    swift_retain();
    uint64_t v57 = swift_retain();
    uint64_t v58 = static Subscribers.Demand.unlimited.getter(v57);
    uint64_t v59 = sub_100004AEC(&qword_1009B1350);
    uint64_t v60 = sub_1000372EC( &qword_1009B18E8,  &qword_1009B18C0,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v61 = sub_1000372EC( (unint64_t *)&unk_1009B1358,  &qword_1009B1350,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v62 = v112;
    uint64_t v63 = v115;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v58, sub_1004D7274, v55, v115, v105, v59, v60, v61);
    swift_release();
    (*(void (**)(char *, uint64_t))(v114 + 8))(v53, v63);
    uint64_t v30 = v31;
    if (qword_10099B510 != -1) {
      swift_once(&qword_10099B510, sub_1004C9A9C);
    }
    uint64_t v64 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
    uint64_t v65 = sub_10000A720(v64, (uint64_t)qword_1009B1610);
    uint64_t v66 = v92;
    id v128 = v92;
    uint64_t v67 = (uint64_t)v124;
    v94(v124, 1LL, 1LL, v95);
    uint64_t v68 = sub_1000372EC( &qword_1009B18F0,  &qword_1009B18C8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    id v69 = v66;
    uint64_t v70 = v97;
    uint64_t v71 = v118;
    Publisher.timeout<A>(_:scheduler:options:customError:)(v65, &v128, v67, sub_10028B5FC, 0LL, v118, v103, v68, v93);
    sub_100015794(v67, &qword_1009B0670);

    (*(void (**)(char *, uint64_t))(v116 + 8))(v62, v71);
    uint64_t v72 = sub_100004AEC(&qword_1009A7920);
    uint64_t v73 = sub_1000372EC( &qword_1009B18F8,  &qword_1009B18D0,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
    id v74 = v98;
    uint64_t v75 = v120;
    Publisher.map<A>(_:)(sub_1004D7B6C, 0LL, v120, v72, v73);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v70, v75);
    uint64_t v76 = sub_100004AEC(&qword_1009A7930);
    uint64_t v77 = sub_1000372EC( &qword_1009B1900,  &qword_1009B18D8,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v78 = sub_1000372EC(&qword_1009A7940, &qword_1009A7930, (uint64_t)&protocol conformance descriptor for Just<A>);
    uint64_t v79 = v101;
    uint64_t v80 = v96;
    Publisher.catch<A>(_:)(sub_10028564C, 0LL, v96, v76, v77, v78);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v74, v80);
    uint64_t v81 = swift_allocObject(&unk_10095F888, 24LL, 7LL);
    swift_weakInit(v81 + 16, v30);
    uint64_t v82 = (void *)swift_allocObject(&unk_10095F9A0, 64LL, 7LL);
    uint64_t v83 = v121;
    uint64_t v84 = v122;
    v82[2] = v81;
    void v82[3] = v84;
    char v85 = v111;
    v82[4] = v111;
    v82[5] = v56;
    uint64_t v86 = v123;
    v82[6] = v83;
    v82[7] = v86;
    uint64_t v87 = sub_1000372EC( &qword_1009B1908,  &qword_1009B18E0,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    id v88 = v85;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v89 = v125;
    uint64_t v29 = Publisher<>.sink(receiveValue:)(sub_1004D72E4, v82, v125, v87);
    swift_release();
    (*(void (**)(char *, uint64_t))(v102 + 8))(v79, v89);
  }

  *(void *)(v30 + 88) = v29;
  return swift_release();
}

uint64_t sub_1004D0B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v11);
  if (result)
  {
    Transaction.capture()();
    sub_1004D61C8(a1, a5, a6, a7);
    return swift_release();
  }

  return result;
}

void sub_1004D0BDC(char a1)
{
  v1[11] = 0LL;
  swift_release();
  v1[12] = 0LL;
  uint64_t v3 = swift_release();
  if ((a1 & 1) != 0)
  {
    if (*(_BYTE *)(v1[4] + OBJC_IVAR____TtC12searchpartyd14CentralManager_isSharedPairingAgent) == 1)
    {
      __int16 v4 = (void *)v1[8];
      __chkstk_darwin(v3);
      v8[2] = v5;
      uint64_t v6 = type metadata accessor for SharedPairingAgent();
      Lock.callAsFunction<A>(_:)(sub_1004D71E0, v8, v6);
      uint64_t v7 = (void *)v8[5];
      sub_10069CB18(v4);
    }

    else
    {
      __break(1u);
    }
  }

void sub_1004D0CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void **)(v2 + 16);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    static os_log_type_t.debug.getter(v10);
    if (qword_10099B798 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B798, sub_100651870);
LABEL_3:
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  *(_OWORD *)(swift_allocObject(v11, 72LL, 7LL) + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  __asm { BR              X11 }

uint64_t sub_1004D0EF4( void (*a1)(__int128 *), uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = type metadata accessor for BinaryDecodingError(0LL);
  uint64_t v114 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v116 = (uint64_t)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for BinaryDecoder(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v113 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A4880);
  __chkstk_darwin(v15);
  uint64_t v111 = (uint64_t)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for Bit(0LL);
  uint64_t v112 = *(void *)(v115 - 8);
  uint64_t v17 = __chkstk_darwin(v115);
  uint64_t v109 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v101 - v19;
  a3 += 16LL;
  swift_beginAccess(a3, v128, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    unint64_t v119 = 0LL;
    __int128 v117 = 0u;
    __int128 v118 = 0u;
    LOBYTE(v120) = 11;
    LOBYTE(v121) = 1;
    a1(&v117);
    return sub_100015794((uint64_t)&v117, &qword_1009A7960);
  }

  uint64_t v22 = Strong;
  uint64_t v101 = v13;
  unint64_t v103 = v20;
  uint64_t v102 = v12;
  uint64_t v110 = v10;
  uint64_t v107 = a2;
  uint64_t v108 = a1;
  uint64_t v23 = *(void *)(Strong + 120);
  unint64_t v24 = *(void *)(Strong + 128);
  if (v24 >> 60 == 15) {
    uint64_t v25 = 0LL;
  }
  else {
    uint64_t v25 = *(void *)(Strong + 120);
  }
  unint64_t v26 = 0xC000000000000000LL;
  if (v24 >> 60 != 15) {
    unint64_t v26 = *(void *)(Strong + 128);
  }
  uint64_t v126 = v25;
  unint64_t v127 = v26;
  sub_10001736C(a4, a5);
  sub_100018BE4(v23, v24);
  sub_1004C990C(1LL, a4, a5);
  __int128 v27 = v117;
  Data.append(_:)(v117, *((void *)&v117 + 1));
  sub_100016F9C(v27, *((unint64_t *)&v27 + 1));
  uint64_t v28 = v126;
  unint64_t v29 = v127;
  uint64_t v31 = *(void *)(v22 + 120);
  unint64_t v30 = *(void *)(v22 + 128);
  *(void *)(v22 + 120) = v126;
  *(void *)(v22 + 128) = v29;
  sub_10001736C(v28, v29);
  uint64_t v32 = sub_1000182F0(v31, v30);
  uint64_t v33 = static os_log_type_t.info.getter(v32);
  uint64_t v34 = a4;
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  uint64_t v35 = qword_100A2B0A8;
  uint64_t v106 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v36 = swift_allocObject(v106, 72LL, 7LL);
  __int128 v105 = xmmword_1007E67D0;
  *(_OWORD *)(v36 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_10001736C(v28, v29);
  uint64_t v37 = Data.description.getter(v28, v29);
  uint64_t v39 = v38;
  sub_100016F9C(v28, v29);
  *(void *)(v36 + 56) = &type metadata for String;
  unint64_t v104 = sub_1000226F4();
  *(void *)(v36 + 64) = v104;
  *(void *)(v36 + 32) = v37;
  *(void *)(v36 + 40) = v39;
  os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v35, "localReadBuffer %@", 18LL, 2LL, v36);
  swift_bridgeObjectRelease();
  sub_10001736C(v34, a5);
  sub_1006F2B10(v34, a5);
  __int16 v41 = v40;
  sub_100016F9C(v34, a5);
  unint64_t v42 = a5;
  uint64_t v43 = v34;
  uint64_t v44 = v110;
  if ((v41 & 0x100) == 0)
  {
    LOBYTE(v117) = v41;
    unint64_t v45 = sub_100041584();
    uint64_t v46 = FixedWidthInteger.bits()(&type metadata for UInt8, v45);
    if (*(void *)(v46 + 16))
    {
      uint64_t v47 = v112;
      uint64_t v48 = v111;
      uint64_t v49 = v115;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v112 + 16))( v111,  v46 + ((*(unsigned __int8 *)(v47 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80)),  v115);
      uint64_t v50 = 0LL;
    }

    else
    {
      uint64_t v50 = 1LL;
      uint64_t v49 = v115;
      uint64_t v47 = v112;
      uint64_t v48 = v111;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v48, v50, 1LL, v49);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v48, 1LL, v49) != 1)
    {
      uint64_t v112 = v43;
      uint64_t v54 = v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v103, v48, v49);
      uint64_t v55 = v109;
      (*(void (**)(char *, void, uint64_t))(v47 + 104))(v109, enum case for Bit.one(_:), v49);
      uint64_t v56 = v47;
      uint64_t v57 = sub_100007864( (unint64_t *)&qword_10099DAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for Bit,  (uint64_t)&protocol conformance descriptor for Bit);
      dispatch thunk of RawRepresentable.rawValue.getter(&v117, v49, v57);
      dispatch thunk of RawRepresentable.rawValue.getter(&v125, v49, v57);
      LODWORD(v57) = v117;
      int v58 = v125;
      uint64_t v59 = *(uint64_t (**)(char *, uint64_t))(v56 + 8);
      uint64_t v60 = v59(v55, v49);
      if ((_DWORD)v57 == v58)
      {
        uint64_t v111 = v42;
        BinaryDecoder.init()(v60);
        uint64_t v62 = v126;
        unint64_t v61 = v127;
        sub_10001736C(v126, v127);
        unint64_t v63 = sub_1004D7150();
        BinaryDecoder.decode<A>(_:from:)( &v117,  &type metadata for AccessoryPairingCommand,  v62,  v61,  &type metadata for AccessoryPairingCommand,  v63);
        sub_100016F9C(v62, v61);
        __int128 v83 = v117;
        uint64_t v84 = *((void *)&v118 + 1);
        uint64_t v112 = v118;
        uint64_t v86 = v119;
        uint64_t v85 = v120;
        uint64_t v87 = v121;
        uint64_t v116 = v122;
        unint64_t v88 = v124;
        uint64_t v114 = v123;
        uint64_t v89 = *(void *)(v22 + 120);
        unint64_t v90 = *(void *)(v22 + 128);
        *(_OWORD *)(v22 + 120) = xmmword_1007E7660;
        sub_1000182F0(v89, v90);
        *((void *)&v118 + 1) = &type metadata for AccessoryPairingCommand;
        unint64_t v119 = v63;
        unint64_t v120 = sub_1004D616C();
        uint64_t v91 = swift_allocObject(&unk_10095F928, 96LL, 7LL);
        *(void *)&__int128 v117 = v91;
        *(_OWORD *)(v91 + swift_weakDestroy(v0 + 16) = v83;
        uint64_t v92 = v112;
        *(void *)(v91 + 32) = v112;
        *(void *)(v91 + 40) = v84;
        uint64_t v93 = v84;
        uint64_t v94 = v86;
        *(void *)(v91 + 48) = v86;
        *(void *)(v91 + 56) = v85;
        uint64_t v95 = v87;
        uint64_t v111 = v87;
        uint64_t v96 = v116;
        *(void *)(v91 + 64) = v87;
        *(void *)(v91 + 72) = v96;
        uint64_t v97 = v114;
        *(void *)(v91 + 80) = v114;
        *(void *)(v91 + 88) = v88;
        LOBYTE(v121) = 0;
        uint64_t v98 = v92;
        uint64_t v99 = v93;
        uint64_t v100 = v94;
        sub_1004D5A20( v83,  *((uint64_t *)&v83 + 1),  v92,  v93,  v94,  v85,  v95,  v96,  v97,  v88,  (void (*)(void))sub_10001736C);
        v108(&v117);
        swift_release();
        sub_1004D5A20( v83,  *((uint64_t *)&v83 + 1),  v98,  v99,  v100,  v85,  v111,  v116,  v114,  v88,  (void (*)(void))sub_100016F9C);
        (*(void (**)(char *, uint64_t))(v101 + 8))(v113, v102);
        v59(v103, v115);
        sub_100016F9C(v126, v127);
        return sub_100015794((uint64_t)&v117, &qword_1009A7960);
      }

      uint64_t v64 = sub_100007864( (unint64_t *)&qword_1009A27E0,  (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecodingError,  (uint64_t)&protocol conformance descriptor for BinaryDecodingError);
      uint64_t v52 = swift_allocError(v44, v64, 0LL, 0LL);
      uint64_t v66 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v114 + 104))( v65,  enum case for BinaryDecodingError.insufficientData(_:),  v44);
      swift_willThrow(v66);
      v59(v54, v49);
      sub_100016F9C(v126, v127);
      uint64_t v43 = v112;
      goto LABEL_20;
    }

    sub_100015794(v48, &qword_1009A4880);
  }

  unint64_t v51 = sub_1004D710C();
  uint64_t v52 = swift_allocError(&type metadata for AccessoryPairingSession.AccessoryPairingSessionError, v51, 0LL, 0LL);
  *uint64_t v53 = 1;
  swift_willThrow(v52);
  sub_100016F9C(v126, v127);
LABEL_20:
  *(void *)&__int128 v117 = v52;
  swift_errorRetain(v52);
  uint64_t v67 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v68 = v116;
  if (swift_dynamicCast(v116, &v117, v67, v44, 0LL))
  {
    uint64_t v69 = v114;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v114 + 88))(v68, v44) == enum case for BinaryDecodingError.insufficientData(_:))
    {
      uint64_t v70 = swift_errorRelease(v52);
      uint64_t v71 = static os_log_type_t.info.getter(v70);
      os_log(_:dso:log:_:_:)( v71,  &_mh_execute_header,  qword_100A2B0A8,  "insufficientData. Keep reading...",  33LL,  2LL,  _swiftEmptyArrayStorage);
      swift_release();
      return swift_errorRelease(v117);
    }

    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v44);
  }

  uint64_t v73 = swift_errorRelease(v117);
  uint64_t v74 = static os_log_type_t.error.getter(v73);
  uint64_t v75 = qword_100A2B0A8;
  uint64_t v76 = swift_allocObject(v106, 72LL, 7LL);
  *(_OWORD *)(v76 + swift_weakDestroy(v0 + 16) = v105;
  sub_10001736C(v43, v42);
  uint64_t v77 = Data.description.getter(v43, v42);
  uint64_t v79 = v78;
  sub_100016F9C(v43, v42);
  unint64_t v80 = v104;
  *(void *)(v76 + 56) = &type metadata for String;
  *(void *)(v76 + 64) = v80;
  *(void *)(v76 + 32) = v77;
  *(void *)(v76 + 40) = v79;
  os_log(_:dso:log:_:_:)(v74, &_mh_execute_header, v75, "Failed to decode data %@", 24LL, 2LL, v76);
  swift_bridgeObjectRelease();
  uint64_t v81 = *(void *)(v22 + 120);
  unint64_t v82 = *(void *)(v22 + 128);
  *(_OWORD *)(v22 + 120) = xmmword_1007E7660;
  sub_1000182F0(v81, v82);
  *(void *)&__int128 v117 = v52;
  LOBYTE(v120) = 10;
  LOBYTE(v121) = 1;
  swift_errorRetain(v52);
  v108(&v117);
  swift_release();
  swift_errorRelease(v52);
  return sub_100015794((uint64_t)&v117, &qword_1009A7960);
}

uint64_t sub_1004D18D8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v9 = *(void **)(v2 + 16);
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    uint64_t v12 = swift_allocObject(&unk_10095F888, 24LL, 7LL);
    swift_weakInit(v12 + 16, v2);
    uint64_t v13 = swift_allocObject(&unk_10095F8D8, 112LL, 7LL);
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = v12;
    sub_1004D5994(a1, v13 + 24);
    *(void *)(v13 + 104) = a2;
    uint64_t v14 = sub_100004AEC(&qword_1009B1350);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    sub_1004D59D0(a1, (void (*)(void))sub_10001736C);
    swift_retain();
    return Future.init(_:)(sub_1004D615C, v13);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004D1A30(void (*a1)(_OWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for BinaryEncoder(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v36, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    uint64_t v15 = Strong;
    uint64_t v31 = a5;
    uint64_t v16 = *(void *)(Strong + 104);
    uint64_t v17 = *(void *)(Strong + 112);
    *(void *)(Strong + 104) = a1;
    *(void *)(Strong + 112) = a2;
    swift_retain();
    uint64_t v18 = sub_10002214C(v16, v17);
    BinaryEncoder.init()(v18);
    sub_1004D5994(a4, (uint64_t)v33);
    unint64_t v19 = sub_1004D616C();
    uint64_t v20 = BinaryEncoder.encode<A>(_:)(v33, &type metadata for AccessoryPairingCommand, v19);
    uint64_t v32 = v10;
    uint64_t v22 = v20;
    unint64_t v24 = v23;
    uint64_t v25 = *(void *)(*(void *)(v15 + 64) + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
    __chkstk_darwin(v20);
    *(&v30 - 2) = (uint64_t)v26;
    id v27 = v26;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1004D61B0,  &v30 - 4,  v25,  (char *)&type metadata for () + 8,  &type metadata for Int);

    uint64_t result = *(void *)&v33[0] - 1LL;
    if (__OFSUB__(*(void *)&v33[0], 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v28 = Data.chunked(into:)(result, v22, v24);
      unint64_t v29 = sub_100289364(v28);
      swift_bridgeObjectRelease();
      swift_beginAccess(v15 + 136, v33, 33LL, 0LL);
      sub_100184CE4((uint64_t)v29);
      swift_endAccess(v33);
      sub_1004D1D98(v31);
      sub_100016F9C(v22, v24);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v32);
    }
  }

  else
  {
    uint64_t v34 = 0LL;
    memset(v33, 0, sizeof(v33));
    __int16 v35 = 267;
    a1(v33);
    return sub_100015794((uint64_t)v33, &qword_1009A7920);
  }

  return result;
}

void sub_1004D1D98(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A78F8);
  uint64_t v56 = *(void *)(v7 - 8);
  uint64_t v57 = v7;
  __chkstk_darwin(v7);
  uint64_t v55 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A7900);
  uint64_t v59 = *(void *)(v9 - 8);
  uint64_t v60 = v9;
  __chkstk_darwin(v9);
  int v58 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A7908);
  uint64_t v62 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v61 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = (void *)v2[2];
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  unint64_t v19 = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  swift_beginAccess(v2 + 17, v66, 0LL, 0LL);
  uint64_t v20 = (void *)v2[17];
  if (v20[2])
  {
    uint64_t v53 = v11;
    uint64_t v54 = a1;
    uint64_t v16 = (void *)v20[4];
    unint64_t v19 = v20[5];
    uint64_t v21 = sub_10001736C((uint64_t)v16, v19);
    uint64_t v13 = static os_log_type_t.debug.getter(v21);
    if (qword_10099B798 == -1)
    {
LABEL_4:
      uint64_t v22 = qword_100A2B0A8;
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
      *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      sub_10001736C((uint64_t)v16, v19);
      uint64_t v25 = Data.description.getter(v16, v19);
      uint64_t v27 = v26;
      sub_100016F9C((uint64_t)v16, v19);
      *(void *)(v24 + 56) = &type metadata for String;
      *(void *)(v24 + 64) = sub_1000226F4();
      *(void *)(v24 + 32) = v25;
      *(void *)(v24 + 40) = v27;
      os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v22, "processQueuedUpdates: writing %@", 32LL, 2LL, v24);
      swift_bridgeObjectRelease();
      uint64_t v28 = v54;
      uint64_t v52 = sub_1004C2924((uint64_t)v16, v19);
      v63[0] = v52;
      id v65 = v18;
      uint64_t v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v6, 1LL, 1LL, v29);
      id v30 = v18;
      uint64_t v31 = sub_100004AEC(&qword_1009A7910);
      unint64_t v32 = sub_100004AB0();
      uint64_t v33 = sub_1000372EC( &qword_1009A7918,  &qword_1009A7910,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      uint64_t v34 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      __int16 v35 = v55;
      Publisher.receive<A>(on:options:)(&v65, v6, v31, v32, v33, v34);
      sub_100015794((uint64_t)v6, &qword_1009B0670);

      uint64_t v36 = sub_100004AEC(&qword_1009A7920);
      uint64_t v37 = sub_1000372EC( &qword_1009A7928,  &qword_1009A78F8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      uint64_t v38 = v57;
      uint64_t v39 = v58;
      Publisher.map<A>(_:)(sub_1004D7B6C, 0LL, v57, v36, v37);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v38);
      uint64_t v40 = sub_100004AEC(&qword_1009A7930);
      uint64_t v41 = sub_1000372EC( &qword_1009A7938,  &qword_1009A7900,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      uint64_t v42 = sub_1000372EC(&qword_1009A7940, &qword_1009A7930, (uint64_t)&protocol conformance descriptor for Just<A>);
      uint64_t v44 = v60;
      uint64_t v43 = v61;
      Publisher.catch<A>(_:)(sub_10028564C, 0LL, v60, v40, v41, v42);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v39, v44);
      uint64_t v45 = swift_allocObject(&unk_10095F888, 24LL, 7LL);
      swift_weakInit(v45 + 16, v2);
      uint64_t v46 = swift_allocObject(&unk_10095F8B0, 32LL, 7LL);
      *(void *)(v46 + swift_weakDestroy(v0 + 16) = v45;
      *(void *)(v46 + swift_unknownObjectUnownedDestroy(v0 + 24) = v28;
      uint64_t v47 = sub_1000372EC( &qword_1009A7948,  &qword_1009A7908,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
      swift_retain();
      uint64_t v48 = v53;
      Publisher<>.sink(receiveValue:)(sub_1004D60F8, v46, v53, v47);
      swift_release();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v48);
      uint64_t v49 = v2 + 10;
      swift_beginAccess(v49, v63, 33LL, 0LL);
      AnyCancellable.store(in:)(v49);
      swift_endAccess(v63);
      swift_release();
      swift_release();
      sub_100016F9C((uint64_t)v16, v19);
      return;
    }

void sub_1004D2370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v30, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = sub_10001581C(a1, (uint64_t)v29, &qword_1009A7920);
    if ((v29[41] & 1) != 0)
    {
      uint64_t v9 = sub_100254338((uint64_t)v29, (uint64_t)v28);
      uint64_t v10 = static os_log_type_t.error.getter(v9);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      uint64_t v11 = qword_100A2B0A8;
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
      *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      sub_1007C9800();
      uint64_t v15 = v14;
      uint64_t v17 = v16;
      *(void *)(v13 + 56) = &type metadata for String;
      *(void *)(v13 + 64) = sub_1000226F4();
      *(void *)(v13 + 32) = v15;
      *(void *)(v13 + 40) = v17;
      os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "writeFuture error: %@", 21LL, 2LL, v13);
      swift_bridgeObjectRelease();
      id v18 = (void (*)(uint64_t *))v7[13];
      if (v18)
      {
        uint64_t v19 = v7[14];
        uint64_t v24 = 4LL;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int16 v27 = 267;
        swift_retain();
        v18(&v24);
        sub_10002214C((uint64_t)v18, v19);
        swift_release();
        sub_100015794((uint64_t)&v24, &qword_1009A7920);
        sub_1002543B0(v28);
        return;
      }

      sub_1002543B0(v28);
    }

    else
    {
      uint64_t v20 = static os_log_type_t.debug.getter(v8);
      if (qword_10099B798 != -1) {
        swift_once(&qword_10099B798, sub_100651870);
      }
      os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_100A2B0A8,  "writeFuture success",  19LL,  2LL,  _swiftEmptyArrayStorage);
      swift_beginAccess(v7 + 17, &v24, 33LL, 0LL);
      uint64_t v21 = (void *)v7[17];
      if (!v21[2])
      {
        __break(1u);
        return;
      }

      uint64_t v23 = v21[4];
      unint64_t v22 = v21[5];
      sub_10001736C(v23, v22);
      sub_100499154(0LL, 1LL);
      swift_endAccess(&v24);
      sub_100016F9C(v23, v22);
      sub_1004D1D98(a3);
    }

    swift_release();
  }

double sub_1004D25EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = *(void **)(v3 + 16);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }

  sub_10028975C(a1, (uint64_t)v77);
  uint64_t v6 = sub_100004AEC(&qword_1009A79A8);
  uint64_t v12 = swift_dynamicCast(&v68, v77, v6, &type metadata for AccessoryPairingCommand, 6LL);
  if (!(_DWORD)v12)
  {
    uint64_t v3 = static os_log_type_t.error.getter(v12);
    if (qword_10099B798 == -1)
    {
LABEL_10:
      uint64_t v24 = qword_100A2B0A8;
      uint64_t v25 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
      *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      sub_10028975C(a1, (uint64_t)&v68);
      uint64_t v27 = String.init<A>(describing:)(&v68, v6);
      uint64_t v29 = v28;
      *(void *)(v26 + 56) = &type metadata for String;
      *(void *)(v26 + 64) = sub_1000226F4();
      *(void *)(v26 + 32) = v27;
      *(void *)(v26 + 40) = v29;
      os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v24, "Invalid command from payload %@", 31LL, 2LL, v26);
      swift_bridgeObjectRelease();
LABEL_16:
      uint64_t v38 = 6LL;
LABEL_18:
      *(void *)a2 = v38;
      double result = 0.0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + swift_unknownObjectUnownedDestroy(v0 + 24) = 0u;
      *(_BYTE *)(a2 + 40) = 11;
LABEL_19:
      *(_BYTE *)(a2 + 80) = 1;
      return result;
    }

void sub_1004D2DF4(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v107 = a1;
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v102 = (uint64_t)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v101 = (char *)&v89 - v6;
  uint64_t v100 = type metadata accessor for AccessoryPairingLockCheckResponse(0LL);
  __chkstk_darwin(v100);
  uint64_t v8 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009B1888);
  __chkstk_darwin(v9);
  id v11 = (void **)((char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v105 = *(void *)(v12 - 8);
  uint64_t v106 = v12;
  __chkstk_darwin(v12);
  int v14 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (void *)((char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v19 = *(void **)(v2 + 16);
  *unint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  uint64_t v21 = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v103 = v9;
  unint64_t v104 = v11;
  uint64_t v22 = *(void *)(v2 + 72);
  uint64_t v23 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v24 = *(void *)(v22 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1;
  unint64_t v25 = *(void *)(v24 + 8);
  if (v25 >> 60 == 15)
  {
    id v11 = (void **)static os_log_type_t.error.getter(v21);
    if (qword_10099B798 == -1)
    {
LABEL_4:
      os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_100A2B0A8,  "Missing C1 from accessory!",  26LL,  2LL,  _swiftEmptyArrayStorage);
      unint64_t v26 = 0xD00000000000001ALL;
      uint64_t v27 = "data!";
LABEL_7:
      __int128 v33 = v107;
      *uint64_t v107 = v26;
      v33[1] = (unint64_t)v27 | 0x8000000000000000LL;
      char v34 = 9;
      goto LABEL_8;
    }

uint64_t sub_1004D38B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B1888);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v4);
  uint64_t v8 = (void *)((char *)v23 - v7);
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void **)(v1 + 16);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    type metadata accessor for SPPairingSessionError(0LL);
    uint64_t v17 = v16;
    uint64_t v24 = 1LL;
    unint64_t v18 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v19 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
    _BridgedStoredNSError.init(_:userInfo:)(v23, &v24, v18, v17, v19);
    void *v8 = v23[0];
    swift_storeEnumTagMultiPayload(v8, v3, 1LL);
    id v20 = dispatch_group_create();
    dispatch_group_enter(v20);
    v23[0] = 1LL;
    uint64_t v21 = v20;
    unint64_t v22 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)(&v24, v23, v22, v17, v19);
    uint64_t *v6 = v24;
    swift_storeEnumTagMultiPayload(v6, v3, 1LL);
    swift_beginAccess(v8, v23, 1LL, 0LL);
    sub_1004D5B4C((uint64_t)v6, (uint64_t)v8, &qword_1009B1888);
    dispatch_group_leave(v21);
    sub_100015794((uint64_t)v6, &qword_1009B1888);

    OS_dispatch_group.wait()();
    sub_10001581C((uint64_t)v8, a1, &qword_1009B1888);
    return sub_100015794((uint64_t)v8, &qword_1009B1888);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004D3B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = *(void **)(v2 + 16);
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  sub_10001581C(a1, (uint64_t)v24, &qword_1009B1880);
  if ((v24[80] & 1) == 0)
  {
    uint64_t v14 = sub_1004D5994((uint64_t)v24, (uint64_t)v25);
    a1 = static os_log_type_t.default.getter(v14);
    if (qword_10099B798 == -1)
    {
LABEL_5:
      uint64_t v15 = qword_100A2B0A8;
      uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
      *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      sub_1004D5994((uint64_t)v25, (uint64_t)v23);
      sub_1004D59D0((uint64_t)v25, (void (*)(void))sub_10001736C);
      uint64_t v18 = String.init<A>(describing:)(v23, &type metadata for AccessoryPairingCommand);
      uint64_t v20 = v19;
      *(void *)(v17 + 56) = &type metadata for String;
      *(void *)(v17 + 64) = sub_1000226F4();
      *(void *)(v17 + 32) = v18;
      *(void *)(v17 + 40) = v20;
      os_log(_:dso:log:_:_:)(a1, &_mh_execute_header, v15, "Sending %@.", 11LL, 2LL, v17);
      swift_bridgeObjectRelease();
      uint64_t v13 = sub_1004D18D8((uint64_t)v25, a2);
      sub_1004D59D0((uint64_t)v25, (void (*)(void))sub_100016F9C);
      return v13;
    }

uint64_t sub_1004D3D70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v2 + 16);
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v11 = *(void *)(v2 + 72);
  uint64_t v12 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  swift_retain();
  id v13 = [a1 productInformation];
  if (v13
    && (uint64_t v14 = v13, v15 = [v13 encryptionKeyE1],
                   v14,
                   v15))
  {
    uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
    unint64_t v18 = v17;
  }

  else
  {
    uint64_t v16 = 0LL;
    unint64_t v18 = 0xF000000000000000LL;
  }

  uint64_t v19 = sub_100092498(v16, v18);
  unint64_t v21 = v20;
  sub_1000182F0(v16, v18);
  uint64_t v22 = swift_release();
  if (v21 >> 60 == 15)
  {
    uint64_t v2 = static os_log_type_t.error.getter(v22);
    if (qword_10099B798 == -1)
    {
LABEL_8:
      uint64_t result = os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_100A2B0A8,  "Unable to generate E1 blob.",  27LL,  2LL,  _swiftEmptyArrayStorage);
      *(void *)(a2 + 32) = 0LL;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = 0u;
LABEL_13:
      *(_BYTE *)(a2 + 40) = 11;
      *(_BYTE *)(a2 + 80) = 1;
      return result;
    }

uint64_t sub_1004D4124@<X0>(void *a1@<X0>, __int128 *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  id v111 = a3;
  __int128 v117 = a2;
  id v118 = a1;
  unint64_t v120 = a4;
  uint64_t v109 = type metadata accessor for PairingConfig(0LL);
  __chkstk_darwin(v109);
  uint64_t v110 = (uint64_t *)((char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = sub_100004AEC(&qword_10099CE68);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v108 = (uint64_t)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  id v10 = (char *)&v103 - v9;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v11);
  uint64_t v114 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v115 = *(void *)(v13 - 8);
  uint64_t v116 = v13;
  __chkstk_darwin(v13);
  uint64_t v119 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v105 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v105);
  uint64_t v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v112 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v26 = (uint64_t *)((char *)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v27 = (void *)v4[2];
  *id v26 = v27;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  id v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v26);
  (*(void (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v29 = v4[5];
  uint64_t v30 = v4[9];
  uint64_t v31 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v32 = *(void *)(v30 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  unint64_t v33 = *(void *)(v32 + 128);
  unint64_t v113 = v4;
  if (v33)
  {
    uint64_t v106 = v30;
    uint64_t v104 = *(void *)(v32 + 120);
    uint64_t v34 = v32 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess(v32 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId, v121, 0LL, 0LL);
    sub_10001581C(v34, (uint64_t)v19, &qword_10099D8A0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20) == 1)
    {
      sub_100015794((uint64_t)v19, &qword_10099D8A0);
    }

    else
    {
      uint64_t v35 = v112;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v112, v19, v20);
      uint64_t v36 = HIBYTE(v33) & 0xF;
      if ((v33 & 0x2000000000000000LL) == 0) {
        uint64_t v36 = v104 & 0xFFFFFFFFFFFFLL;
      }
      if (v36)
      {
        uint64_t v107 = v29;
        uint64_t v37 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
        uint64_t v38 = v35;
        uint64_t v39 = &v16[v37[12]];
        uint64_t v40 = &v16[v37[16]];
        unint64_t v41 = &v16[v37[20]];
        uint64_t v103 = v37[24];
        uint64_t v42 = &v16[v37[28]];
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v16, v38, v20);
        *(void *)uint64_t v39 = 0LL;
        *((void *)v39 + 1) = 0LL;
        *(void *)uint64_t v40 = 0LL;
        *((void *)v40 + 1) = 0LL;
        *(void *)unint64_t v41 = v104;
        *((void *)v41 + 1) = v33;
        *(_WORD *)&v16[v103] = 256;
        *(void *)uint64_t v42 = 0LL;
        *((void *)v42 + 1) = 0LL;
        swift_storeEnumTagMultiPayload(v16, v105, 2LL);
        swift_bridgeObjectRetain(v33);
        uint64_t v44 = static os_log_type_t.default.getter(v43);
        if (qword_10099B798 != -1) {
          swift_once(&qword_10099B798, sub_100651870);
        }
        uint64_t v45 = qword_100A2B0A8;
        uint64_t v46 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v47 = swift_allocObject(v46, 72LL, 7LL);
        *(_OWORD *)(v47 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        sub_1006DD1E4();
        uint64_t v49 = v48;
        uint64_t v51 = v50;
        *(void *)(v47 + 56) = &type metadata for String;
        *(void *)(v47 + 64) = sub_1000226F4();
        *(void *)(v47 + 32) = v49;
        *(void *)(v47 + 40) = v51;
        os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  v45,  "Removing record matching StableIdentifier %@.",  45LL,  2LL,  v47);
        swift_bridgeObjectRelease();
        uint64_t v52 = dispatch_group_create();
        dispatch_group_enter(v52);
        uint64_t v53 = v113;
        uint64_t v54 = (void *)v113[3];
        unint64_t v55 = v52;
        sub_100150CE0((uint64_t)v16, v54, v55);

        OS_dispatch_group.wait()();
        uint64_t v4 = v53;
        sub_100018C68((uint64_t)v16, type metadata accessor for StableIdentifier);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v112, v20);
        uint64_t v29 = v107;
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v35, v20);
      }
    }

    uint64_t v30 = v106;
  }

  uint64_t v56 = (char *)v4[3];
  uint64_t v57 = *(void **)(v30 + v31);
  swift_retain();
  id v58 = v118;
  id v59 = [v118 productInformation];
  if (v59)
  {
    uint64_t v60 = v59;
    sub_1007429A0((uint64_t)v10);

    uint64_t v61 = type metadata accessor for AccessoryProductInfo(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v10, 0LL, 1LL, v61);
  }

  else
  {
    uint64_t v62 = type metadata accessor for AccessoryProductInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56LL))(v10, 1LL, 1LL, v62);
  }

  uint64_t v63 = v114;
  sub_100018304(v117, v57, (uint64_t)v10, v114);
  swift_release();
  sub_100015794((uint64_t)v10, &qword_10099CE68);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v63, 1LL, v116) == 1)
  {
    uint64_t v64 = sub_100015794((uint64_t)v63, (uint64_t *)&unk_1009A9C30);
    uint64_t v20 = static os_log_type_t.error.getter(v64);
    if (qword_10099B798 == -1)
    {
LABEL_18:
      os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_100A2B0A8,  "createBeacon: failed to generate generateOwnedBeaconRecord.",  59LL,  2LL,  _swiftEmptyArrayStorage);
      type metadata accessor for SPPairingSessionError(0LL);
      uint64_t v66 = v65;
      v123[0] = 11LL;
      unint64_t v67 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v68 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
      _BridgedStoredNSError.init(_:userInfo:)(v122, v123, v67, v66, v68);
      unint64_t v69 = v120;
      *unint64_t v120 = v122[0];
      uint64_t v70 = sub_100004AEC((uint64_t *)&unk_1009B0830);
      return swift_storeEnumTagMultiPayload(v69, v70, 1LL);
    }

void sub_1004D4AD4(uint64_t a1, uint64_t a2, dispatch_group_s *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v44[0] = a3;
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v44 - v13;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = swift_projectBox(a4);
  swift_beginAccess(v18, v46, 1LL, 0LL);
  sub_1004D5B4C(a1, v18, (uint64_t *)&unk_1009B0830);
  sub_10001581C(a1, (uint64_t)v17, (uint64_t *)&unk_1009B0830);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v20 = *v17;
    uint64_t v21 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v22 = qword_100A2B0A8;
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
    *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    v45[0] = v20;
    swift_errorRetain(v20);
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v26 = String.init<A>(describing:)(v45, v25);
    uint64_t v28 = v27;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_1000226F4();
    *(void *)(v24 + 32) = v26;
    *(void *)(v24 + 40) = v28;
    os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  v22,  "Failure during finishing pairing - %@",  37LL,  2LL,  v24,  v44[0]);
    swift_bridgeObjectRelease();
    swift_errorRelease(v20);
  }

  else
  {
    uint64_t v29 = sub_10002218C((uint64_t)v17, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    uint64_t v30 = static os_log_type_t.default.getter(v29);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v31 = qword_100A2B0A8;
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v33 = swift_allocObject(v32, 72LL, 7LL);
    *(_OWORD *)(v33 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_10001DC4C((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    uint64_t v34 = String.init<A>(describing:)(v12, v9);
    uint64_t v36 = v35;
    *(void *)(v33 + 56) = &type metadata for String;
    *(void *)(v33 + 64) = sub_1000226F4();
    *(void *)(v33 + 32) = v34;
    *(void *)(v33 + 40) = v36;
    os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  v31,  "New beacon record has been created. Record UUID - %@",  52LL,  2LL,  v33,  v44[0]);
    swift_bridgeObjectRelease();
    sub_1004BDCEC((uint64_t)v14);
    uint64_t v37 = (dispatch_group_s **)(*(void *)(*(void *)(a6 + 72)
                                          + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_locationMonitor)
                              + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
    swift_beginAccess(v37, v45, 0LL, 0LL);
    uint64_t v39 = *v37;
    if (*v37)
    {
      uint64_t v40 = (dispatch_group_s *)&v14[*(int *)(v9 + 20)];
      uint64_t v41 = type metadata accessor for Transaction(0LL);
      __chkstk_darwin(v41);
      v44[-4] = v40;
      v44[-3] = v39;
      v44[-2] = (dispatch_group_t)a6;
      uint64_t v42 = v39;
      static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.AccessoryPairingSession.saveEstimatedLocation",  75LL,  2LL,  sub_1004D56BC);
    }

    else
    {
      uint64_t v43 = static os_log_type_t.error.getter(v38);
      os_log(_:dso:log:_:_:)( v43,  &_mh_execute_header,  qword_100A2B0A8,  "Unable to retrieve current location from CL for pairing",  55LL,  2LL,  _swiftEmptyArrayStorage);
    }

    sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }

  dispatch_group_leave(v44[0]);
}

uint64_t sub_1004D4EDC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v43 = a1;
  uint64_t v41 = a4;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  uint64_t v38 = v7;
  uint64_t v8 = v7;
  uint64_t v42 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v39 = *((void *)v10 - 1);
  uint64_t v11 = *(void *)(v39 + 64);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v37 - v15;
  UUID.init()(v14);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v17(&v16[v10[6]], a2, v6);
  [a3 coordinate];
  uint64_t v19 = v18;
  [a3 coordinate];
  uint64_t v21 = v20;
  [a3 horizontalAccuracy];
  uint64_t v23 = v22;
  id v24 = [a3 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

  uint64_t v25 = &v16[v10[12]];
  uint64_t v26 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v25, 1LL, 1LL, v26);
  *(_OWORD *)uint64_t v16 = xmmword_1007E4480;
  *(void *)&v16[v10[7]] = v19;
  *(void *)&v16[v10[8]] = v21;
  *(void *)&v16[v10[9]] = v23;
  v16[v10[11]] = 1;
  *(void *)&v16[v10[13]] = 0LL;
  uint64_t v41 = *(void *)(v41 + 24);
  sub_10001DC4C((uint64_t)v16, (uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v27 = v40;
  uint64_t v28 = a2;
  uint64_t v29 = v37;
  v17(v40, v28, v37);
  uint64_t v30 = v38;
  uint64_t v31 = *(unsigned __int8 *)(v39 + 80);
  uint64_t v32 = (v31 + 24) & ~v31;
  uint64_t v33 = *(unsigned __int8 *)(v38 + 80);
  uint64_t v34 = (v11 + v33 + v32) & ~v33;
  uint64_t v35 = swift_allocObject(&unk_10095F838, v34 + v42, v31 | v33 | 7);
  *(void *)(v35 + swift_weakDestroy(v0 + 16) = v43;
  sub_10002218C((uint64_t)v13, v35 + v32, type metadata accessor for BeaconEstimatedLocation);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v35 + v34, v27, v29);
  swift_retain();
  sub_1004F89A0((uint64_t)v16, (uint64_t)sub_1004D5834, v35);
  swift_release();
  return sub_100018C68((uint64_t)v16, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_1004D51AC(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A6628);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v4, &qword_1009A6628);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v8 = qword_100A2B0A8;
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v10 = swift_allocObject(v9, 152LL, 7LL);
    *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
    type metadata accessor for BeaconEstimatedLocation(0LL);
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    uint64_t v15 = v14;
    *(void *)(v10 + 56) = &type metadata for String;
    unint64_t v16 = sub_1000226F4();
    *(void *)(v10 + 64) = v16;
    *(void *)(v10 + 32) = v13;
    *(void *)(v10 + 40) = v15;
    uint64_t v17 = type metadata accessor for UUID(0LL);
    uint64_t v18 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    *(void *)(v10 + 96) = &type metadata for String;
    *(void *)(v10 + 104) = v16;
    *(void *)(v10 + 72) = v19;
    *(void *)(v10 + 80) = v20;
    uint64_t v40 = v6;
    swift_errorRetain(v6);
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v22 = String.init<A>(describing:)(&v40, v21);
    *(void *)(v10 + 136) = &type metadata for String;
    *(void *)(v10 + 144) = v16;
    *(void *)(v10 + 112) = v22;
    *(void *)(v10 + 120) = v23;
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  v8,  "Saving BeaconEstimatedLocation %@ for CL %@ error: %@",  53LL,  2LL,  v10);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v6);
  }

  else
  {
    uint64_t v25 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v26 = qword_100A2B0A8;
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v28 = swift_allocObject(v27, 112LL, 7LL);
    *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    type metadata accessor for BeaconEstimatedLocation(0LL);
    uint64_t v29 = type metadata accessor for Date(0LL);
    uint64_t v30 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
    uint64_t v33 = v32;
    *(void *)(v28 + 56) = &type metadata for String;
    unint64_t v34 = sub_1000226F4();
    *(void *)(v28 + 64) = v34;
    *(void *)(v28 + 32) = v31;
    *(void *)(v28 + 40) = v33;
    uint64_t v35 = type metadata accessor for UUID(0LL);
    uint64_t v36 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v35, v36);
    *(void *)(v28 + 96) = &type metadata for String;
    *(void *)(v28 + 104) = v34;
    *(void *)(v28 + 72) = v37;
    *(void *)(v28 + 80) = v38;
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  v26,  "Saved BeaconEstimatedLocation %@ from CL for beacon %@",  54LL,  2LL,  v28);
    swift_bridgeObjectRelease();
    return sub_100015794((uint64_t)v4, &qword_1009A6628);
  }

uint64_t sub_1004D5520()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1004D555C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1004D5568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, int a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter(a1);
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v11 += a1 - result;
  }

  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1004DE260(v11, a3, a4, a5);
    return swift_release();
  }

  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1004D5620(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      uint64_t v2 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        uint64_t v3 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t result = swift_allocObject(v3, 32LL, 7LL);
        *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(result + swift_unknownObjectUnownedDestroy(v0 + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t sub_1004D56BC(uint64_t a1)
{
  return sub_1004D4EDC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1004D56D8()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v17 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v15 = *(void *)(v2 + 64);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = *(void *)(v4 + 64);
  swift_release();
  uint64_t v16 = (v17 + 24) & ~v17;
  sub_100016F9C(*(void *)(v0 + v16), *(void *)(v0 + v16 + 8));
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v0 + v16 + v1[5], v3);
  v6(v0 + v16 + v1[6], v3);
  uint64_t v7 = v0 + v16 + v1[10];
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v16 + v1[12];
  uint64_t v12 = (v16 + v15 + v5) & ~v5;
  swift_bridgeObjectRelease();
  v6(v0 + v12, v3);
  return swift_deallocObject(v0, v12 + v14, v17 | v5 | 7);
}

uint64_t sub_1004D5834(uint64_t a1)
{
  return sub_1004D51AC(a1);
}

uint64_t sub_1004D58A0()
{
  uint64_t v1 = (id *)(v0 + 16);
  switch(*(_BYTE *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      id v2 = *v1;
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 57LL, 7LL);
    case 2:

      goto LABEL_8;
    case 3:

      return swift_deallocObject(v0, 57LL, 7LL);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 57LL, 7LL);
    case 8:
      swift_release();
LABEL_8:
      id v2 = *(id *)(v0 + 24);
LABEL_9:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 57LL, 7LL);
  }

  return swift_deallocObject(v0, 57LL, 7LL);
}

uint64_t sub_1004D5934(void (*a1)(_BYTE *))
{
  v4[41] = 1;
  a1(v4);
  return sub_100015794((uint64_t)v4, &qword_1009A7920);
}

uint64_t sub_1004D5994(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1004D59D0(uint64_t a1, void (*a2)(void))
{
  return a1;
}

void sub_1004D5A20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, void (*a11)(void))
{
  switch((a10 >> 59) & 6 | ((a8 & 0x2000000000000000LL) != 0))
  {
    case 0uLL:
    case 1uLL:
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      break;
    case 2uLL:
      unint64_t v16 = a8 & 0xDFFFFFFFFFFFFFFFLL;
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a11)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a11)(a7, v16);
      ((void (*)(uint64_t, unint64_t))a11)(a9, a10 & 0xCFFFFFFFFFFFFFFFLL);
      break;
    case 3uLL:
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a11)(a5, a6);
      break;
    default:
      return;
  }

uint64_t sub_1004D5B4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100004AEC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_1004D5B90()
{
  unint64_t result = qword_1009B1890;
  if (!qword_1009B1890)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C2,  &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1009B1890);
  }

  return result;
}

uint64_t sub_1004D5BD4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1004D5BEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AccessoryPairingLockCheckResponse(0LL);
  uint64_t v9 = (uint64_t *)(a1 + *(int *)(v8 + 36));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  static String.Encoding.utf8.getter(v8);
  uint64_t v12 = String.data(using:allowLossyConversion:)(v7, 0LL, v10, v11);
  unint64_t v14 = v13;
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v14 >> 60 != 15)
  {
    v19[12] = v12;
    v19[13] = v14;
    uint64_t v18 = *(void *)(a1 + 24);
    v19[10] = *(void *)(a1 + 16);
    v19[11] = v18;
    __asm { BR              X11 }
  }

  uint64_t v16 = static os_log_type_t.error.getter(v15);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  uint64_t result = os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  qword_100A2B0A8,  "Unable to decode masked apple ID",  32LL,  2LL,  _swiftEmptyArrayStorage);
  *(_OWORD *)a2 = xmmword_1007F8BC0;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = xmmword_1007F8BC0;
  *(_OWORD *)(a2 + 32) = xmmword_1007F8BC0;
  *(_OWORD *)(a2 + 48) = xmmword_1007F8BC0;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0x3000000000000000LL;
  return result;
}

uint64_t sub_1004D5F68(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004D5FC0( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  if (a6)
  {
    sub_100016F9C(result, a2);
    sub_100016F9C(a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100016F9C(a11, a12);
    sub_100016F9C(a13, a14);
    swift_bridgeObjectRelease();
    return sub_1000182F0(a17, a18);
  }

  return result;
}

unint64_t sub_1004D6084()
{
  unint64_t result = qword_1009B18A0;
  if (!qword_1009B18A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CollaborativeKeyGen.v1.C3,  &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1009B18A0);
  }

  return result;
}

uint64_t sub_1004D60C8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1004D60EC()
{
  return sub_1001538E8((void (*)(void))&_swift_release);
}

void sub_1004D60F8(uint64_t a1)
{
}

uint64_t sub_1004D6100()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_1004D615C(void (*a1)(_OWORD *), uint64_t a2)
{
  return sub_1004D1A30(a1, a2, *(void *)(v2 + 16), v2 + 24, *(void *)(v2 + 104));
}

unint64_t sub_1004D616C()
{
  unint64_t result = qword_1009B18A8;
  if (!qword_1009B18A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811D70, &type metadata for AccessoryPairingCommand);
    atomic_store(result, (unint64_t *)&qword_1009B18A8);
  }

  return result;
}

id sub_1004D61B0@<X0>(void *a1@<X8>)
{
  return sub_1004A18F0(*(void *)(v1 + 16), a1);
}

uint64_t *sub_1004D61C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v107 = a4;
  uint64_t v106 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v111 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v109 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v112 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v110 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v108 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v105 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v10 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v12 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = sub_10001581C(a1, (uint64_t)v121, &qword_1009A7920);
  if ((v121[41] & 1) != 0)
  {
    uint64_t v104 = v7;
    uint64_t v18 = sub_100254338((uint64_t)v121, (uint64_t)v120);
    os_log_type_t v19 = static os_log_type_t.error.getter(v18);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v20 = (os_log_s *)qword_100A2B0A8;
    sub_100254374(v120, (uint64_t)&aBlock);
    uint64_t v21 = v4;
    if (os_log_type_enabled(v20, v19))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v23 = (void *)swift_slowAlloc(32LL, -1LL);
      __int128 v117 = v23;
      *(_DWORD *)uint64_t v22 = 136446210;
      sub_1007C9800();
      uint64_t v119 = sub_1003F11D4(v24, v25, (uint64_t *)&v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      sub_1002543B0(&aBlock);
      _os_log_impl((void *)&_mh_execute_header, v20, v19, "Pairing error %{public}s", v22, 0xCu);
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
      sub_1002543B0(&aBlock);
    }

    sub_100254374(v120, (uint64_t)&aBlock);
    uint64_t v32 = aBlock;
    if (v116 == 9)
    {
      uint64_t v63 = (void *)v114.i64[0];
      type metadata accessor for SPPairingSessionError(0LL);
      uint64_t v65 = v64;
      uint64_t v119 = 3LL;
      unint64_t v66 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v67 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
      _BridgedStoredNSError.init(_:userInfo:)(&v117, &v119, v66, v65, v67);
      uint64_t v39 = v117;
      __int128 v117 = 0LL;
      unint64_t v118 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(42LL);
      swift_bridgeObjectRelease();
      __int128 v117 = (void *)0xD000000000000028LL;
      unint64_t v118 = 0x8000000100865740LL;
      v68._countAndFlagsBits = v32;
      v68._object = v63;
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      uint64_t v103 = v117;
    }

    else
    {
      int8x16_t v33 = vorrq_s8(v114, v115);
      int8x8_t v34 = vorr_s8(*(int8x8_t *)v33.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
      if (aBlock == 4 && !*(void *)&v34)
      {
        type metadata accessor for SPPairingSessionError(0LL);
        uint64_t v36 = v35;
        uint64_t v119 = 12LL;
        unint64_t v37 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v38 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
        _BridgedStoredNSError.init(_:userInfo:)(&v117, &v119, v37, v36, v38);
        uint64_t v39 = v117;
        __int128 v117 = 0LL;
        unint64_t v118 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(52LL);
        v40._countAndFlagsBits = 0xD000000000000032LL;
        v40._object = (void *)0x8000000100865770LL;
        String.append(_:)(v40);
LABEL_28:
        v73._countAndFlagsBits = sub_1006EA310(*(_BYTE *)(*(void *)(v21 + 72)
                                                        + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
        String.append(_:)(v73);
        swift_bridgeObjectRelease();
        uint64_t v103 = v117;
        goto LABEL_37;
      }

      if (aBlock == 6 && !*(void *)&v34)
      {
        type metadata accessor for SPPairingSessionError(0LL);
        uint64_t v70 = v69;
        uint64_t v119 = 6LL;
        unint64_t v71 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v72 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
        _BridgedStoredNSError.init(_:userInfo:)(&v117, &v119, v71, v70, v72);
        uint64_t v39 = v117;
        __int128 v117 = 0LL;
        unint64_t v118 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(35LL);
        swift_bridgeObjectRelease();
        __int128 v117 = (void *)0xD000000000000021LL;
        unint64_t v118 = 0x80000001008656E0LL;
        goto LABEL_28;
      }

      if (aBlock == 8 && !*(void *)&v34)
      {
        type metadata accessor for SPPairingSessionError(0LL);
        uint64_t v75 = v74;
        uint64_t v119 = 18LL;
        unint64_t v76 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v77 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
        _BridgedStoredNSError.init(_:userInfo:)(&v117, &v119, v76, v75, v77);
        uint64_t v39 = v117;
        uint64_t v103 = (void *)0xD00000000000002DLL;
        goto LABEL_37;
      }

      if (aBlock != 10 || *(void *)&v34)
      {
LABEL_36:
        type metadata accessor for SPPairingSessionError(0LL);
        uint64_t v83 = v82;
        uint64_t v119 = 12LL;
        unint64_t v84 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v85 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
        _BridgedStoredNSError.init(_:userInfo:)(&v117, &v119, v84, v83, v85);
        uint64_t v39 = v117;
        __int128 v117 = 0LL;
        unint64_t v118 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(55LL);
        v86._countAndFlagsBits = 0xD000000000000035LL;
        v86._object = (void *)0x80000001008656A0LL;
        String.append(_:)(v86);
        v87._countAndFlagsBits = sub_1006EA310(*(_BYTE *)(*(void *)(v21 + 72)
                                                        + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
        String.append(_:)(v87);
        swift_bridgeObjectRelease();
        uint64_t v103 = v117;
        sub_1002543B0(&aBlock);
        goto LABEL_37;
      }

      if (*(unsigned __int8 *)(*(void *)(v4 + 72)
                              + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) > 5u)
        return sub_1002543B0(v120);
      uint64_t v103 = (void *)0xD000000000000020LL;
      type metadata accessor for SPPairingSessionError(0LL);
      uint64_t v79 = v78;
      uint64_t v119 = 13LL;
      unint64_t v80 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v81 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
      _BridgedStoredNSError.init(_:userInfo:)(&v117, &v119, v80, v79, v81);
      uint64_t v39 = v117;
    }

uint64_t sub_1004D70D4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1004D7100(void (*a1)(__int128 *), uint64_t a2)
{
  return sub_1004D0EF4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

unint64_t sub_1004D710C()
{
  unint64_t result = qword_1009B18B0;
  if (!qword_1009B18B0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1008059A8,  &type metadata for AccessoryPairingSession.AccessoryPairingSessionError);
    atomic_store(result, (unint64_t *)&qword_1009B18B0);
  }

  return result;
}

unint64_t sub_1004D7150()
{
  unint64_t result = qword_1009B18B8;
  if (!qword_1009B18B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100811D48, &type metadata for AccessoryPairingCommand);
    atomic_store(result, (unint64_t *)&qword_1009B18B8);
  }

  return result;
}

uint64_t sub_1004D7194()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

id sub_1004D71E0@<X0>(void *a1@<X8>)
{
  return sub_1007CA494(*(void *)(v1 + 16), a1);
}

uint64_t sub_1004D71F8(uint64_t a1)
{
  return sub_1004D7354( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1004D0208);
}

void sub_1004D7214(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

double sub_1004D7244@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004D25EC(a1, a2);
}

uint64_t sub_1004D7268()
{
  return sub_1001538E8((void (*)(void))&_swift_release);
}

uint64_t sub_1004D7274@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1004D3B0C(a1, *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_1004D72A0()
{
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1004D72E4(uint64_t a1)
{
  return sub_1004D0B4C(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1004D72F4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1004D7320(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004D7330(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1004D7338(uint64_t a1)
{
  return sub_1004D7354( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1004CF404);
}

uint64_t sub_1004D7354( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1004D7378()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1004D73AC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1004CFB64(*(void **)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1004D73B8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1004D73EC(uint64_t a1)
{
  return sub_1004CFBC8(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1004D73F8()
{
  uint64_t v1 = (id *)(v0 + 32);
  switch(*(_BYTE *)(v0 + 72))
  {
    case 0:
    case 7:
    case 0xA:
      id v2 = *v1;
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 73LL, 7LL);
    case 2:

      goto LABEL_8;
    case 3:

      return swift_deallocObject(v0, 73LL, 7LL);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 73LL, 7LL);
    case 8:
      swift_release();
LABEL_8:
      id v2 = *(id *)(v0 + 40);
LABEL_9:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 73LL, 7LL);
  }

  return swift_deallocObject(v0, 73LL, 7LL);
}

uint64_t sub_1004D7494()
{
  return sub_1004D0064(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), (void *)(v0 + 32));
}

uint64_t sub_1004D74A0(uint64_t a1)
{
  return sub_1004CDDD0(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1004D74C4()
{
  return sub_1004CEE10(*(void **)(v0 + 24));
}

uint64_t sub_1004D74E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1004D7510()
{
  return sub_1007CF938(*(void **)(v0 + 64));
}

uint64_t sub_1004D7538()
{
  if (*(void *)(v0 + 40)) {
    swift_release(*(void *)(v0 + 48));
  }
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1004D757C(uint64_t a1)
{
}

uint64_t sub_1004D758C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  uint64_t v1 = (id *)(v0 + 32);
  switch(*(_BYTE *)(v0 + 72))
  {
    case 0:
    case 7:
    case 0xA:
      id v2 = *v1;
      goto LABEL_11;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 73LL, 7LL);
    case 2:

      goto LABEL_10;
    case 3:

      return swift_deallocObject(v0, 73LL, 7LL);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 73LL, 7LL);
    case 8:
      swift_release();
LABEL_10:
      id v2 = *(id *)(v0 + 40);
LABEL_11:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 73LL, 7LL);
  }

  return swift_deallocObject(v0, 73LL, 7LL);
}

uint64_t sub_1004D7630()
{
  return sub_1004CEDA8(v0[2], v0[3], v0 + 4);
}

uint64_t sub_1004D763C()
{
  if (*(void *)(v0 + 16)) {
    swift_release(*(void *)(v0 + 24));
  }
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1004D7668()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1(0LL);
  }
  return result;
}

uint64_t sub_1004D7694()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 40));

  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1004D76D0()
{
}

void sub_1004D76E0()
{
}

uint64_t sub_1004D76FC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1004D7720()
{
}

void sub_1004D773C()
{
}

uint64_t *sub_1004D7758(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  sub_100016F9C(*a1, a1[1]);
  sub_100016F9C(v2, v3);
  sub_100016F9C(v4, v5);
  sub_1000182F0(v6, v7);
  sub_1000182F0(v8, v9);
  return a1;
}

void sub_1004D77E4()
{
}

void sub_1004D7800()
{
}

uint64_t sub_1004D781C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1004D7850(char a1)
{
}

uint64_t sub_1004D785C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1004D7890()
{
}

void sub_1004D78AC()
{
}

uint64_t sub_1004D78C8()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1004D78FC()
{
  return sub_1004CAF80(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1004D7908@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004CB9E8(a1, v2, a2);
}

uint64_t sub_1004D7910()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1004D7944(uint64_t a1)
{
  return sub_1004CBDCC(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_1004D7950()
{
}

uint64_t sub_1004D796C()
{
  return sub_1001538E8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingSession.AccessoryPairingSessionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1004D79C4 + 4 * byte_10080588A[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004D79F8 + 4 * byte_100805885[v4]))();
}

uint64_t sub_1004D79F8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004D7A00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004D7A08LL);
  }
  return result;
}

uint64_t sub_1004D7A14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004D7A1CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1004D7A20(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004D7A28(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingSession.AccessoryPairingSessionError()
{
  return &type metadata for AccessoryPairingSession.AccessoryPairingSessionError;
}

unint64_t sub_1004D7A48()
{
  unint64_t result = qword_1009B19E0;
  if (!qword_1009B19E0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100805980,  &type metadata for AccessoryPairingSession.AccessoryPairingSessionError);
    atomic_store(result, (unint64_t *)&qword_1009B19E0);
  }

  return result;
}

id sub_1004D7A8C@<X0>(void *a1@<X8>)
{
  return sub_1004D71E0(a1);
}

uint64_t sub_1004D7AA0(uint64_t a1)
{
  return sub_1002542A8(a1) & 1;
}

uint64_t sub_1004D7B70(void *a1)
{
  int v3 = v1;
  uint64_t v5 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  dispatch thunk of BinaryEncoding.container()(v79, v9, v10);
  uint64_t v76 = sub_1004A93C4();
  unint64_t v12 = v11;
  uint64_t v14 = *v3;
  unint64_t v13 = v3[1];
  uint64_t v75 = objc_autoreleasePoolPush();
  sub_10001736C(v14, v13);
  sub_1004DFE7C(v14, v13);
  if (!v2)
  {
    uint64_t v17 = v15;
    Swift::String v73 = v3;
    unint64_t v74 = v12;
    sub_100016F9C(v14, v13);
    uint64_t v18 = sub_1004DDA84(v17, 0);
    unint64_t v20 = v19;
    CCECCryptorRelease(v17);
    uint64_t v36 = sub_10017D59C(v18, v20);
    unint64_t v38 = v37;
    sub_10001736C(v36, v37);
    uint64_t v70 = objc_autoreleasePoolPush();
    unint64_t v71 = v38;
    unint64_t v72 = v36;
    uint64_t v39 = v76;
    unint64_t v40 = v74;
    sub_1004DEA64(&v77);
    objc_autoreleasePoolPop(v70);
    unint64_t v41 = v71;
    sub_100016F9C(v72, v71);
    sub_100016F9C(v72, v41);
    uint64_t v42 = v77;
    unint64_t v72 = v78;
    objc_autoreleasePoolPop(v75);
    sub_100016F9C(v39, v40);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for HashAlgorithm.sha256(_:), v5);
    uint64_t v43 = Data.hash(algorithm:)(v8, v14, v13);
    unint64_t v45 = v44;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v77 = v43;
    unint64_t v78 = v45;
    uint64_t v46 = v80;
    uint64_t v47 = v81;
    sub_100037298((uint64_t)v79, v80);
    unint64_t v48 = sub_100042440();
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v77, &type metadata for Data, v48, v46, v47);
    sub_100016F9C(v43, v45);
    uint64_t v49 = type metadata accessor for BeaconPayloadV2(0LL);
    uint64_t v50 = v73;
    double v51 = Date.timeIntervalSinceReferenceDate.getter(v49);
    if ((~*(void *)&v51 & 0x7FF0000000000000LL) != 0)
    {
      if (v51 > -1.0)
      {
        if (v51 < 4294967300.0)
        {
          LODWORD(v77) = bswap32(v51);
          uint64_t v52 = v80;
          uint64_t v53 = v81;
          sub_100037298((uint64_t)v79, v80);
          unint64_t v54 = sub_10008CFE8();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v77, &type metadata for UInt32, v54, v52, v53);
          uint64_t v55 = (uint64_t)v50 + *(int *)(v49 + 44);
          uint64_t v56 = v80;
          uint64_t v57 = v81;
          sub_100037298((uint64_t)v79, v80);
          uint64_t v58 = v49;
          uint64_t v59 = type metadata accessor for BeaconPayloadMetaDataV2(0LL);
          unint64_t v60 = sub_1004D9264();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v55, v59, v60, v56, v57);
          uint64_t v47 = v58;
          uint64_t v46 = v72;
          uint64_t v77 = v42;
          unint64_t v78 = v72;
          uint64_t v61 = v80;
          uint64_t v62 = v81;
          sub_100037298((uint64_t)v79, v80);
          dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v77, &type metadata for Data, v48, v61, v62);
          if (qword_10099B318 == -1) {
            goto LABEL_11;
          }
          goto LABEL_20;
        }

uint64_t sub_1004D81DC(void *a1)
{
  return sub_1004D7B70(a1);
}

uint64_t sub_1004D81F0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v70 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v69 = &v54[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v68 = type metadata accessor for Bit(0LL);
  uint64_t v65 = *(void *)(v68 - 8);
  uint64_t v6 = __chkstk_darwin(v68);
  uint64_t v64 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  uint64_t v67 = &v54[-v8];
  uint64_t v66 = type metadata accessor for BeaconPayloadMetaDataV2(0LL);
  __chkstk_darwin(v66);
  uint64_t v10 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = sub_100004AEC(&qword_10099E770);
  __chkstk_darwin(v11);
  unint64_t v13 = &v54[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (double *)&v54[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = (int *)type metadata accessor for ObservedAdvertisement(0LL);
  sub_1004D8774(a1 + v18[12], (uint64_t)v13);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) == 1)
  {
    sub_1004D87BC((uint64_t)v13);
    unint64_t v19 = sub_1004D87FC();
    uint64_t v20 = swift_allocError(&type metadata for BeaconPayloadV2.BeaconPayloadV2Error, v19, 0LL, 0LL);
    _BYTE *v21 = 0;
    swift_willThrow(v20);
    return sub_100018C68(a1, type metadata accessor for ObservedAdvertisement);
  }

  else
  {
    sub_10002218C((uint64_t)v13, (uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
    unint64_t v23 = *(void *)(a1 + 24);
    if ((v23 & 0x2000000000000000LL) != 0)
    {
      unint64_t v27 = sub_1004D87FC();
      uint64_t v28 = swift_allocError(&type metadata for BeaconPayloadV2.BeaconPayloadV2Error, v27, 0LL, 0LL);
      *unint64_t v29 = 1;
      swift_willThrow(v28);
      sub_100018C68(a1, type metadata accessor for ObservedAdvertisement);
      return sub_100018C68((uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
    }

    else
    {
      uint64_t v59 = *(void *)(a1 + 16);
      unint64_t v60 = v23;
      sub_10001736C(v59, v23);
      if (qword_10099B318 != -1) {
        swift_once(&qword_10099B318, sub_100352F58);
      }
      uint64_t v24 = v63;
      OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
      uint64_t v63 = v24;
      char v25 = sub_1006A1BB8(v71[0]);
      swift_bridgeObjectRelease();
      uint64_t v61 = v4;
      uint64_t v62 = a2;
      if ((v25 & 1) == 0)
      {
        if (qword_10099B6A0 != -1) {
          swift_once(&qword_10099B6A0, sub_100626B90);
        }
        v71[0] = 0x7365547265646E75LL;
        v71[1] = 0xE900000000000074LL;
        SynchronousCache.cachedValue<A>(key:computeBlock:)(&v72, v71, sub_10000A71C, 0LL, &type metadata for Bool);
        swift_bridgeObjectRelease();
      }

      if ((*(_BYTE *)(a1 + 35) & 1) == 0)
      {
        uint64_t v30 = 2LL;
        if (*(_BYTE *)(a1 + v18[14])) {
          uint64_t v30 = 0LL;
        }
        unint64_t v26 = v30 | ((unint64_t)*(unsigned __int8 *)(a1 + 33) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 34) << 32);
      }

      else
      {
LABEL_11:
        unint64_t v26 = 3LL;
      }

      unint64_t v58 = v26;
      else {
        int v31 = 2;
      }
      int v57 = v31;
      double v32 = v17[2];
      int v33 = sub_1000F0244(v32);
      unsigned int v34 = *(unsigned __int8 *)(a1 + 32);
      int v55 = (v34 >> 4) & 3;
      int v56 = v33;
      int v35 = sub_100041014(v34 & 0xB);
      uint64_t v36 = v64;
      uint64_t v37 = v65;
      if (*(_BYTE *)(a1 + v18[14])) {
        unint64_t v38 = (unsigned int *)&enum case for Bit.one(_:);
      }
      else {
        unint64_t v38 = (unsigned int *)&enum case for Bit.zero(_:);
      }
      uint64_t v39 = v68;
      (*(void (**)(_BYTE *, void, uint64_t))(v65 + 104))(v64, *v38, v68);
      unint64_t v40 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 32);
      unint64_t v41 = v67;
      v40(v67, v36, v39);
      *uint64_t v10 = v56;
      v10[1] = v55;
      v10[2] = v35;
      void v10[3] = BYTE1(v35) & 1;
      v10[4] = BYTE2(v35) & 1;
      void v10[5] = HIBYTE(v35) & 1;
      v10[6] = v57;
      uint64_t v42 = v66;
      v40(&v10[*(int *)(v66 + 32)], v41, v39);
      v10[*(int *)(v42 + 36)] = 0;
      uint64_t v43 = a1 + v18[11];
      unint64_t v45 = v69;
      uint64_t v44 = v70;
      uint64_t v46 = v61;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v70 + 16))(v69, v43, v61);
      double v47 = *v17;
      uint64_t v48 = *((void *)v17 + 1);
      sub_100018C68((uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
      LOBYTE(v39) = *(_BYTE *)(a1 + 32);
      sub_100018C68(a1, type metadata accessor for ObservedAdvertisement);
      uint64_t v49 = v62;
      unint64_t v50 = v60;
      *(void *)uint64_t v62 = v59;
      *((void *)v49 + 1) = v50;
      double v51 = (int *)type metadata accessor for BeaconPayloadV2(0LL);
      (*(void (**)(char *, _BYTE *, uint64_t))(v44 + 32))(&v49[v51[5]], v45, v46);
      *(double *)&v49[v51[6]] = v47;
      *(void *)&v49[v51[7]] = v48;
      *(double *)&v49[v51[8]] = v32;
      v49[v51[9]] = v39;
      uint64_t v52 = &v49[v51[10]];
      int v53 = v58;
      v52[4] = BYTE4(v58);
      *(_DWORD *)uint64_t v52 = v53;
      return sub_10002218C((uint64_t)v10, (uint64_t)&v49[v51[11]], type metadata accessor for BeaconPayloadMetaDataV2);
    }
  }

uint64_t sub_1004D8774(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099E770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004D87BC(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099E770);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1004D87FC()
{
  unint64_t result = qword_1009B19E8;
  if (!qword_1009B19E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805AE0, &type metadata for BeaconPayloadV2.BeaconPayloadV2Error);
    atomic_store(result, (unint64_t *)&qword_1009B19E8);
  }

  return result;
}

uint64_t type metadata accessor for BeaconPayloadV2(uint64_t a1)
{
  uint64_t result = qword_1009B1A48;
  if (!qword_1009B1A48) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconPayloadV2);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadV2.BeaconPayloadV2Error( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1004D88C8 + 4 * byte_1008059F5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004D88FC + 4 * byte_1008059F0[v4]))();
}

uint64_t sub_1004D88FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004D8904(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004D890CLL);
  }
  return result;
}

uint64_t sub_1004D8918(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004D8920LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1004D8924(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004D892C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadV2.BeaconPayloadV2Error()
{
  return &type metadata for BeaconPayloadV2.BeaconPayloadV2Error;
}

uint64_t *sub_1004D8948(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v14 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    uint64_t v15 = a3[10];
    uint64_t v16 = a3[11];
    uint64_t v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
    unint64_t v19 = (char *)a1 + v16;
    uint64_t v20 = (char *)a2 + v16;
    *unint64_t v19 = *((_BYTE *)a2 + v16);
    v19[1] = *((_BYTE *)a2 + v16 + 1);
    *(_DWORD *)(v19 + 2) = *(_DWORD *)((char *)a2 + v16 + 2);
    v19[6] = *((_BYTE *)a2 + v16 + 6);
    uint64_t v21 = type metadata accessor for BeaconPayloadMetaDataV2(0LL);
    uint64_t v22 = *(int *)(v21 + 32);
    unint64_t v23 = &v19[v22];
    uint64_t v24 = &v20[v22];
    uint64_t v25 = type metadata accessor for Bit(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v23, v24, v25);
    v19[*(int *)(v21 + 36)] = v20[*(int *)(v21 + 36)];
  }

  return a1;
}

uint64_t sub_1004D8A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t v7 = v6 + *(int *)(type metadata accessor for BeaconPayloadMetaDataV2(0LL) + 32);
  uint64_t v8 = type metadata accessor for Bit(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
}

uint64_t *sub_1004D8B24(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = (char *)a1 + v15;
  unint64_t v19 = (char *)a2 + v15;
  *uint64_t v18 = *((_BYTE *)a2 + v15);
  v18[1] = *((_BYTE *)a2 + v15 + 1);
  *(_DWORD *)(v18 + 2) = *(_DWORD *)((char *)a2 + v15 + 2);
  v18[6] = *((_BYTE *)a2 + v15 + 6);
  uint64_t v20 = type metadata accessor for BeaconPayloadMetaDataV2(0LL);
  uint64_t v21 = *(int *)(v20 + 32);
  uint64_t v22 = &v18[v21];
  unint64_t v23 = &v19[v21];
  uint64_t v24 = type metadata accessor for Bit(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16LL))(v22, v23, v24);
  v18[*(int *)(v20 + 36)] = v19[*(int *)(v20 + 36)];
  return a1;
}

uint64_t *sub_1004D8C4C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  uint64_t v14 = a3[10];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char v17 = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v15[4] = v17;
  uint64_t v18 = a3[11];
  unint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *unint64_t v19 = *((_BYTE *)a2 + v18);
  v19[1] = *((_BYTE *)a2 + v18 + 1);
  v19[2] = *((_BYTE *)a2 + v18 + 2);
  v19[3] = *((_BYTE *)a2 + v18 + 3);
  v19[4] = *((_BYTE *)a2 + v18 + 4);
  v19[5] = *((_BYTE *)a2 + v18 + 5);
  v19[6] = *((_BYTE *)a2 + v18 + 6);
  uint64_t v21 = type metadata accessor for BeaconPayloadMetaDataV2(0LL);
  uint64_t v22 = *(int *)(v21 + 32);
  unint64_t v23 = &v19[v22];
  uint64_t v24 = &v20[v22];
  uint64_t v25 = type metadata accessor for Bit(0LL);
  (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v25 - 8) + 24LL))(v23, v24, v25);
  v19[*(int *)(v21 + 36)] = v20[*(int *)(v21 + 36)];
  return a1;
}

_OWORD *sub_1004D8DA0(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  uint64_t v12 = a3[10];
  uint64_t v13 = a3[11];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  uint64_t v16 = (char *)a1 + v13;
  char v17 = (char *)a2 + v13;
  *uint64_t v16 = *((_BYTE *)a2 + v13);
  v16[1] = *((_BYTE *)a2 + v13 + 1);
  *(_DWORD *)(v16 + 2) = *(_DWORD *)((char *)a2 + v13 + 2);
  v16[6] = *((_BYTE *)a2 + v13 + 6);
  uint64_t v18 = type metadata accessor for BeaconPayloadMetaDataV2(0LL);
  uint64_t v19 = *(int *)(v18 + 32);
  uint64_t v20 = &v16[v19];
  uint64_t v21 = &v17[v19];
  uint64_t v22 = type metadata accessor for Bit(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
  v16[*(int *)(v18 + 36)] = v17[*(int *)(v18 + 36)];
  return a1;
}

uint64_t *sub_1004D8EBC(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = (char *)a1 + v14;
  char v17 = (char *)a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = (char *)a1 + v15;
  uint64_t v19 = (char *)a2 + v15;
  *uint64_t v18 = *((_BYTE *)a2 + v15);
  v18[1] = *((_BYTE *)a2 + v15 + 1);
  void v18[2] = *((_BYTE *)a2 + v15 + 2);
  v18[3] = *((_BYTE *)a2 + v15 + 3);
  v18[4] = *((_BYTE *)a2 + v15 + 4);
  v18[5] = *((_BYTE *)a2 + v15 + 5);
  v18[6] = *((_BYTE *)a2 + v15 + 6);
  uint64_t v20 = type metadata accessor for BeaconPayloadMetaDataV2(0LL);
  uint64_t v21 = *(int *)(v20 + 32);
  uint64_t v22 = &v18[v21];
  unint64_t v23 = &v19[v21];
  uint64_t v24 = type metadata accessor for Bit(0LL);
  (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v24 - 8) + 40LL))(v22, v23, v24);
  v18[*(int *)(v20 + 36)] = v19[*(int *)(v20 + 36)];
  return a1;
}

uint64_t sub_1004D8FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004D9008);
}

uint64_t sub_1004D9008(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  if ((_DWORD)a2 != 252)
  {
    uint64_t v8 = type metadata accessor for BeaconPayloadMetaDataV2(0LL);
    uint64_t v7 = *(void *)(v8 - 8);
    uint64_t v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unsigned int v10 = *(unsigned __int8 *)(a1 + a3[10]);
  if (v10 >= 2) {
    int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v11 = -2;
  }
  return v11 & ~(v11 >> 31);
}

uint64_t sub_1004D90BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004D90C8);
}

uint64_t sub_1004D90C8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a4[5];
  }

  else
  {
    if (a3 == 252)
    {
      *(_BYTE *)(a1 + a4[10]) = a2 + 3;
      return result;
    }

    uint64_t v10 = type metadata accessor for BeaconPayloadMetaDataV2(0LL);
    uint64_t v9 = *(void *)(v10 - 8);
    uint64_t v11 = a4[11];
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t sub_1004D9164(uint64_t a1)
{
  v5[0] = &unk_100805A38;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    _OWORD v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[5] = (char *)&value witness table for Builtin.Int8 + 64;
    v5[6] = &unk_100805A50;
    uint64_t result = type metadata accessor for BeaconPayloadMetaDataV2(319LL);
    if (v4 <= 0x3F)
    {
      v5[7] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 8LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_1004D9220()
{
  unint64_t result = qword_1009B1A98;
  if (!qword_1009B1A98)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805AB8, &type metadata for BeaconPayloadV2.BeaconPayloadV2Error);
    atomic_store(result, (unint64_t *)&qword_1009B1A98);
  }

  return result;
}

unint64_t sub_1004D9264()
{
  unint64_t result = qword_1009B1AA0;
  if (!qword_1009B1AA0)
  {
    uint64_t v1 = type metadata accessor for BeaconPayloadMetaDataV2(255LL);
    unint64_t result = swift_getWitnessTable(&unk_100805810, v1);
    atomic_store(result, (unint64_t *)&qword_1009B1AA0);
  }

  return result;
}

unint64_t sub_1004D92AC()
{
  unint64_t result = qword_1009B1AA8;
  if (!qword_1009B1AA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080E6C0, &type metadata for TLVPackets);
    atomic_store(result, (unint64_t *)&qword_1009B1AA8);
  }

  return result;
}

uint64_t sub_1004D92F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A1760);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = 0LL;
  uint64_t v6 = CCCKGOwnerCreate(224LL, 10LL, &v22);
  int v7 = v6;
  v21[7] = v6;
  if (!(_DWORD)v6)
  {
    uint64_t v19 = v22;
    if (v22)
    {
      uint64_t v20 = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
      *(void *)(swift_allocObject(v20, 24LL, 7LL) + swift_weakDestroy(v0 + 16) = v19;
      CCCKGGetShareSize(224LL, 10LL);
      __asm { BR              X10 }
    }
  }

  uint64_t v8 = static os_log_type_t.error.getter(v6);
  if (qword_10099B520 != -1) {
    swift_once(&qword_10099B520, sub_1004DC610);
  }
  uint64_t v9 = qword_100A2AC90;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v11 + 56) = &type metadata for Int32;
  *(void *)(v11 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v11 + 32) = v7;
  os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  v9,  "CCCKGOwnerCreate: Error creating owner for collaborative key generation. Status: %d.",  v21[0]);
  swift_bridgeObjectRelease();
  CryptoError.init(rawValue:)(v7);
  uint64_t v12 = type metadata accessor for CryptoError(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
  swift_allocError(v12, v13, 0LL, 0LL);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v5, 1LL, v12) == 1)
  {
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))( v15,  enum case for CryptoError.unspecifiedError(_:),  v12);
    uint64_t v17 = sub_1004E3A70((uint64_t)v5);
  }

  else
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(v15, v5, v12);
  }

  swift_willThrow(v17);
  return v16;
}

uint64_t sub_1004D98A4( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, unint64_t *a9, unint64_t a10, void **a11)
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  uint64_t v40 = 0x7365547265646E75LL;
  unint64_t v41 = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v49, &v40, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((a8 & 1) != 0 || (_BYTE)v49)
  {
    uint64_t result = sub_1004DA16C(a5, a6, a7);
    if (!v11)
    {
      uint64_t v22 = result;
      unint64_t v23 = v21;
      uint64_t v40 = result;
      unint64_t v41 = v21;
      for (int i = a8; ; LOBYTE(a8) = i)
      {
        uint64_t v24 = objc_autoreleasePoolPush();
        sub_10001736C(v22, v23);
        sub_1004DBF7C(a1, a2, a3, a4, v22, v23, a8 & 1, &v40, &v42);
        sub_100016F9C(v22, v23);
        uint64_t v22 = v40;
        unint64_t v23 = v41;
        sub_100015750((uint64_t)&v42, (uint64_t)v47, &qword_1009A2E38);
        __int128 v46 = v43;
        sub_100015750((uint64_t)&v44, (uint64_t)v45, &qword_1009A70F8);
        uint64_t v25 = *a11;
        sub_10001736C(v22, v23);
        sub_10001736C(v22, v23);
        sub_100018BB8((uint64_t)v47);
        sub_100018BF8((uint64_t)&v46);
        sub_100018BB8((uint64_t)v45);
        sub_1002DAC30( &v42,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
        *a11 = v25;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v25 = sub_1004C5854(0LL, v25[2] + 1LL, 1, v25);
          *a11 = v25;
        }

        unint64_t v28 = v25[2];
        unint64_t v27 = v25[3];
        if (v28 >= v27 >> 1) {
          uint64_t v25 = sub_1004C5854((void *)(v27 > 1), v28 + 1, 1, v25);
        }
        void v25[2] = v28 + 1;
        unint64_t v29 = &v25[6 * v28];
        __int128 v30 = v42;
        __int128 v31 = v44;
        v29[3] = v43;
        v29[4] = v31;
        v29[2] = v30;
        *a11 = v25;
        sub_1002DAC30( &v42,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
        sub_100016F9C(v22, v23);
        if (*a9 >= a10) {
          break;
        }
        ++*a9;
        sub_1002DAC30( &v42,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
        sub_100016F9C(v22, v23);
        objc_autoreleasePoolPop(v24);
      }

      sub_1002DAC30( &v42,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
      sub_100016F9C(v22, v23);
      objc_autoreleasePoolPop(v24);
      return sub_100016F9C(v22, v23);
    }
  }

  else
  {
    id v16 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
    unsigned int v17 = [v16 isInternalBuild];

    if (v17) {
      uint64_t v19 = static os_log_type_t.fault.getter(v18);
    }
    else {
      uint64_t v19 = static os_log_type_t.error.getter(v18);
    }
    uint64_t v32 = v19;
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    unint64_t v33 = sub_100117A8C();
    uint64_t v34 = swift_allocError(&type metadata for CryptoTokenError, v33, 0LL, 0LL);
    *int v35 = 3;
    return swift_willThrow(v34);
  }

  return result;
}

uint64_t sub_1004D9CE4( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8, uint64_t *a9, uint64_t *a10, uint64_t a11)
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  uint64_t v49 = 0x7365547265646E75LL;
  unint64_t v50 = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v55, &v49, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((a8 & 1) != 0 || (_BYTE)v55)
  {
    uint64_t result = sub_1004DA16C(a5, a6, a7);
    if (!v11)
    {
      uint64_t v25 = result;
      unint64_t v26 = v24;
      uint64_t v49 = result;
      unint64_t v50 = v24;
      unint64_t v27 = objc_autoreleasePoolPush();
      sub_10001736C(v25, v26);
      sub_1004DBF7C(a1, a2, a3, a4, v25, v26, a8 & 1, &v49, &v51);
      contexta = v27;
      uint64_t v32 = v52;
      __int128 v41 = v53;
      __int128 v42 = v51;
      uint64_t v33 = v54;
      sub_100016F9C(v25, v26);
      uint64_t v34 = v49;
      unint64_t v35 = v50;
      uint64_t v36 = a9[2];
      unint64_t v45 = a9[1];
      uint64_t v46 = *a9;
      unint64_t v37 = a9[3];
      unint64_t v43 = a9[5];
      uint64_t v44 = a9[4];
      *(_OWORD *)a9 = v42;
      a9[2] = v32;
      *(_OWORD *)(a9 + 3) = v41;
      a9[5] = v33;
      sub_10001736C(v34, v35);
      sub_1002DAC30( &v51,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
      sub_100164DD8(v46, v45, v36, v37, v44, v43);
      uint64_t v38 = *a10;
      uint64_t v39 = a10[1];
      unint64_t v40 = a10[2];
      *a10 = a11;
      a10[1] = v34;
      a10[2] = v35;
      sub_10001736C(v34, v35);
      sub_100164D3C(v38, v39, v40);
      sub_1002DAC30( &v51,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
      sub_100016F9C(v34, v35);
      objc_autoreleasePoolPop(contexta);
      return sub_100016F9C(v34, v35);
    }
  }

  else
  {
    id v19 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
    unsigned int v20 = [v19 isInternalBuild];

    if (v20) {
      uint64_t v22 = static os_log_type_t.fault.getter(v21);
    }
    else {
      uint64_t v22 = static os_log_type_t.error.getter(v21);
    }
    uint64_t v28 = v22;
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    unint64_t v29 = sub_100117A8C();
    uint64_t v30 = swift_allocError(&type metadata for CryptoTokenError, v29, 0LL, 0LL);
    _BYTE *v31 = 3;
    return swift_willThrow(v30);
  }

  return result;
}

uint64_t sub_1004DA048()
{
  __int128 v7 = *(_OWORD *)(v0 + 16);
  __int128 v1 = v7;
  sub_100018BF8((uint64_t)&v7);
  uint64_t v2 = sub_1004DFCF0(v1, *((uint64_t *)&v1 + 1));
  uint64_t v4 = v3;
  sub_100164F64((uint64_t)&v7);
  sub_1001782E4(v2, v4);
  return v6;
}

uint64_t sub_1004DA16C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A1760);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001736C(a1, a2);
  uint64_t v9 = String.utf8Data.getter(0x657461647075LL, 0xE600000000000000LL);
  if (a3)
  {
    v15[2] = v8;
    uint64_t v23 = v9 >> 32;
    uint64_t v24 = (int)v9;
    unint64_t v25 = HIDWORD(v9);
    BOOL v11 = __OFSUB__(HIDWORD(v9), (_DWORD)v9);
    BOOL v16 = v11;
    v15[3] = HIDWORD(v9) - (int)v9;
    unint64_t v21 = v10 >> 40;
    uint64_t v22 = BYTE6(v10);
    unint64_t v19 = v10 >> 24;
    unint64_t v20 = HIDWORD(v10);
    unint64_t v18 = v10 >> 16;
    unint64_t v17 = v10 >> 8;
    unint64_t v27 = v10;
    unint64_t v28 = v10 >> 62;
    uint64_t v26 = v10 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v29 = objc_autoreleasePoolPush();
    uint64_t v12 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    sub_10001736C(a1, a2);
    uint64_t v13 = __DataStorage.init(length:)(32LL);
    uint64_t v30 = 0x2000000000LL;
    uint64_t v31 = v13 | 0x4000000000000000LL;
    __asm { BR              X8 }
  }

  sub_100016F9C(v9, v10);
  return a1;
}

uint64_t sub_1004DB8E0@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, char a7@<W6>, void *a8@<X7>, _OWORD *a9@<X8>, uint64_t *a10)
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  uint64_t v78 = 0x7365547265646E75LL;
  unint64_t v79 = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v82, &v78, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((a7 & 1) != 0 || (_BYTE)v82)
  {
    uint64_t result = sub_1004DA16C(a5, a6, 1LL);
    if (!v10)
    {
      uint64_t v23 = result;
      unint64_t v24 = v22;
      Swift::String v73 = a9;
      uint64_t v25 = String.utf8Data.getter(0x6669737265766964LL, 0xE900000000000079LL);
      unint64_t v27 = v26;
      sub_10001736C(v23, v24);
      sub_1004DF7EC(v23, v24, v25, v27, 72LL);
      unint64_t v28 = v24;
      uint64_t v34 = v33;
      uint64_t v36 = v35;
      uint64_t v71 = v23;
      unint64_t v72 = v28;
      sub_100016F9C(v23, v28);
      sub_1001781A0(v34, v36);
      sub_100016F9C(v25, v27);
      uint64_t v38 = v78;
      unint64_t v37 = v79;
      unint64_t v39 = a2;
      if (a2 >> 60 == 15)
      {
        sub_10001736C(v78, v79);
        sub_10001736C(a3, a4);
        sub_1004DFE7C(a3, a4);
        uint64_t v40 = v71;
        uint64_t v42 = v41;
        sub_1004E0738(v41, 0LL, v38, v37);
        uint64_t v46 = v45;
        CCECCryptorRelease(v42);
        sub_100016F9C(a3, a4);
        sub_100016F9C(v38, v37);
        uint64_t v52 = sub_1004DDA84(v46, 0);
        unint64_t v54 = v53;
        uint64_t v55 = v46;
        sub_10001736C(v52, v53);
        uint64_t v56 = sub_10017D59C(v52, v54);
        unint64_t v57 = v72;
        unint64_t v69 = v61;
        uint64_t v70 = v56;
        CCECCryptorRelease(v55);
        sub_100016F9C(v52, v54);
        uint64_t v62 = a1;
      }

      else
      {
        sub_100018BE4(a1, a2);
        sub_10001736C(v38, v37);
        sub_1004DFE7C(a1, a2);
        uint64_t v40 = v71;
        unint64_t v57 = v72;
        uint64_t v44 = v43;
        sub_1004E0738(v43, 1LL, v38, v37);
        uint64_t v48 = v47;
        CCECCryptorRelease(v44);
        sub_100016F9C(v38, v37);
        uint64_t v49 = sub_1004DDA84(v48, 1);
        unint64_t v51 = v50;
        uint64_t v76 = sub_1004DDA84(v48, 0);
        unint64_t v68 = v58;
        sub_10001736C(v49, v51);
        uint64_t v59 = sub_10017D280(v49, v51);
        unint64_t v66 = v60;
        uint64_t v67 = v59;
        sub_10001736C(v76, v68);
        uint64_t v64 = sub_10017D59C(v76, v68);
        unint64_t v69 = v65;
        uint64_t v70 = v64;
        CCECCryptorRelease(v48);
        sub_100016F9C(v76, v68);
        sub_100016F9C(v49, v51);
        sub_1000182F0(a1, v39);
        unint64_t v39 = v66;
        uint64_t v62 = v67;
      }

      v81[0] = v62;
      v81[1] = v39;
      id v81[2] = v70;
      v81[3] = v69;
      void v81[4] = v40;
      v81[5] = v57;
      sub_10001736C(v40, v57);
      sub_100018BE4(v70, v69);
      sub_100018BE4(v62, v39);
      sub_10045C100((uint64_t)v81, a8, a10, v80);
      sub_1000182F0(v62, v39);
      sub_1000182F0(v70, v69);
      sub_100016F9C(v40, v57);
      sub_1000182F0(v62, v39);
      sub_100016F9C(v70, v69);
      sub_100016F9C(v40, v57);
      uint64_t result = sub_100016F9C(v38, v37);
      __int128 v63 = v80[1];
      _OWORD *v73 = v80[0];
      v73[1] = v63;
      v73[2] = v80[2];
    }
  }

  else
  {
    id v17 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
    unsigned int v18 = [v17 isInternalBuild];

    if (v18) {
      uint64_t v20 = static os_log_type_t.fault.getter(v19);
    }
    else {
      uint64_t v20 = static os_log_type_t.error.getter(v19);
    }
    uint64_t v29 = v20;
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    unint64_t v30 = sub_100117A8C();
    uint64_t v31 = swift_allocError(&type metadata for CryptoTokenError, v30, 0LL, 0LL);
    *uint64_t v32 = 3;
    return swift_willThrow(v31);
  }

  return result;
}

uint64_t sub_1004DBF7C@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, char a7@<W6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>)
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  uint64_t v77 = 0x7365547265646E75LL;
  unint64_t v78 = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v81, &v77, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((a7 & 1) != 0 || (_BYTE)v81)
  {
    uint64_t result = sub_1004DA16C(a5, a6, 1LL);
    if (!v9)
    {
      uint64_t v22 = result;
      unint64_t v23 = v21;
      unint64_t v72 = a9;
      uint64_t v24 = String.utf8Data.getter(0x6669737265766964LL, 0xE900000000000079LL);
      unint64_t v26 = v25;
      sub_10001736C(v22, v23);
      sub_1004DF7EC(v22, v23, v24, v26, 72LL);
      unint64_t v27 = v23;
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      uint64_t v70 = v22;
      unint64_t v71 = v27;
      sub_100016F9C(v22, v27);
      sub_1001781A0(v33, v35);
      sub_100016F9C(v24, v26);
      uint64_t v37 = v77;
      unint64_t v36 = v78;
      unint64_t v38 = a2;
      if (a2 >> 60 == 15)
      {
        sub_10001736C(v77, v78);
        sub_10001736C(a3, a4);
        sub_1004DFE7C(a3, a4);
        uint64_t v39 = v70;
        uint64_t v41 = v40;
        sub_1004E0738(v40, 0LL, v37, v36);
        uint64_t v45 = v44;
        CCECCryptorRelease(v41);
        sub_100016F9C(a3, a4);
        sub_100016F9C(v37, v36);
        uint64_t v51 = sub_1004DDA84(v45, 0);
        unint64_t v53 = v52;
        uint64_t v54 = v45;
        sub_10001736C(v51, v52);
        uint64_t v55 = sub_10017D59C(v51, v53);
        unint64_t v56 = v71;
        unint64_t v68 = v60;
        uint64_t v69 = v55;
        CCECCryptorRelease(v54);
        sub_100016F9C(v51, v53);
        uint64_t v61 = a1;
      }

      else
      {
        sub_100018BE4(a1, a2);
        sub_10001736C(v37, v36);
        sub_1004DFE7C(a1, a2);
        uint64_t v39 = v70;
        unint64_t v56 = v71;
        uint64_t v43 = v42;
        sub_1004E0738(v42, 1LL, v37, v36);
        uint64_t v47 = v46;
        CCECCryptorRelease(v43);
        sub_100016F9C(v37, v36);
        uint64_t v48 = sub_1004DDA84(v47, 1);
        unint64_t v50 = v49;
        uint64_t v75 = sub_1004DDA84(v47, 0);
        unint64_t v67 = v57;
        sub_10001736C(v48, v50);
        uint64_t v58 = sub_10017D280(v48, v50);
        unint64_t v65 = v59;
        uint64_t v66 = v58;
        sub_10001736C(v75, v67);
        uint64_t v63 = sub_10017D59C(v75, v67);
        unint64_t v68 = v64;
        uint64_t v69 = v63;
        CCECCryptorRelease(v47);
        sub_100016F9C(v75, v67);
        sub_100016F9C(v48, v50);
        sub_1000182F0(a1, v38);
        unint64_t v38 = v65;
        uint64_t v61 = v66;
      }

      v80[0] = v61;
      v80[1] = v38;
      _OWORD v80[2] = v69;
      _OWORD v80[3] = v68;
      v80[4] = v39;
      v80[5] = v56;
      sub_10001736C(v39, v56);
      sub_100018BE4(v69, v68);
      sub_100018BE4(v61, v38);
      sub_1004DE920((uint64_t)v80, a8, v79);
      sub_1000182F0(v61, v38);
      sub_1000182F0(v69, v68);
      sub_100016F9C(v39, v56);
      sub_1000182F0(v61, v38);
      sub_100016F9C(v69, v68);
      sub_100016F9C(v39, v56);
      uint64_t result = sub_100016F9C(v37, v36);
      __int128 v62 = v79[1];
      *unint64_t v72 = v79[0];
      v72[1] = v62;
      v72[2] = v79[2];
    }
  }

  else
  {
    id v16 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
    unsigned int v17 = [v16 isInternalBuild];

    if (v17) {
      uint64_t v19 = static os_log_type_t.fault.getter(v18);
    }
    else {
      uint64_t v19 = static os_log_type_t.error.getter(v18);
    }
    uint64_t v28 = v19;
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    unint64_t v29 = sub_100117A8C();
    uint64_t v30 = swift_allocError(&type metadata for CryptoTokenError, v29, 0LL, 0LL);
    _BYTE *v31 = 3;
    return swift_willThrow(v30);
  }

  return result;
}

uint64_t sub_1004DC610()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x6F7470797263LL,  0xE600000000000000LL);
  qword_100A2AC90 = result;
  return result;
}

uint64_t sub_1004DC678(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B1DD8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004E435C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for GeneratedTokens.CodingKeys,  &type metadata for GeneratedTokens.CodingKeys,  v11,  v9,  v10);
  __int128 v16 = *v3;
  *(void *)&__int128 v17 = *((void *)v3 + 2);
  char v19 = 0;
  unint64_t v12 = sub_1004E4428();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v19, v5, &type metadata for KeyGenerationHint, v12);
  if (!v2)
  {
    __int128 v13 = *(__int128 *)((char *)v3 + 40);
    __int128 v16 = *(__int128 *)((char *)v3 + 24);
    __int128 v17 = v13;
    __int128 v18 = *(__int128 *)((char *)v3 + 56);
    char v19 = 1;
    unint64_t v14 = sub_1004E446C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v19, v5, &type metadata for DiversifiedRootKeys, v14);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1004DC7D0()
{
  __int128 v1 = v0;
  Hasher.init(_seed:)(v11, 0LL);
  __int128 v16 = *v0;
  uint64_t v17 = *((void *)v0 + 2);
  Hasher._combine(_:)(v16);
  uint64_t v2 = *((void *)&v16 + 1);
  uint64_t v3 = v17;
  sub_1004E4304((uint64_t)&v16);
  Data.hash(into:)(v11, v2, v3);
  sub_1004E4330((uint64_t)&v16);
  __int128 v4 = *(__int128 *)((char *)v1 + 40);
  __int128 v12 = *(__int128 *)((char *)v1 + 24);
  __int128 v13 = v4;
  __int128 v14 = *(__int128 *)((char *)v1 + 56);
  unint64_t v5 = *((void *)&v12 + 1);
  if (*((void *)&v12 + 1) >> 60 == 15LL)
  {
    Hasher._combine(_:)(0);
    sub_1002DAC30( &v12,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
  }

  else
  {
    uint64_t v6 = v12;
    Hasher._combine(_:)(1u);
    sub_1002DAC30( &v12,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
    sub_100018BE4(v6, v5);
    Data.hash(into:)(v11, v6, v5);
    sub_1000182F0(v6, v5);
  }

  __int128 v15 = v13;
  __int128 v7 = v13;
  sub_100018BF8((uint64_t)&v15);
  Data.hash(into:)(v11, v7, *((void *)&v7 + 1));
  sub_100164F64((uint64_t)&v15);
  unint64_t v8 = *((void *)&v14 + 1);
  if (*((void *)&v14 + 1) >> 60 == 15LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v9 = v14;
    Hasher._combine(_:)(1u);
    sub_10001736C(v9, v8);
    Data.hash(into:)(v11, v9, v8);
    sub_1000182F0(v9, v8);
  }

  sub_1002DAC30( &v12,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
  return Hasher._finalize()();
}

uint64_t sub_1004DC9A0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B1D78);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004E3AB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DiversifiedRootKeys.CodingKeys,  &type metadata for DiversifiedRootKeys.CodingKeys,  v11,  v9,  v10);
  sub_100015750(v3, (uint64_t)v20, &qword_1009A2E38);
  sub_100015750((uint64_t)v20, (uint64_t)&v18, &qword_1009A2E38);
  char v17 = 0;
  unint64_t v12 = sub_10017FA90();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v17, v5, &type metadata for IntermediateKey, v12);
  if (!v2)
  {
    __int128 v18 = *(_OWORD *)(v3 + 16);
    char v17 = 1;
    unint64_t v13 = sub_10017EF30();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for PublicKey, v13);
    sub_100015750(v3 + 32, (uint64_t)v19, &qword_1009A70F8);
    sub_100015750((uint64_t)v19, (uint64_t)&v18, &qword_1009A70F8);
    char v17 = 2;
    unint64_t v14 = sub_10017EB68();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v17, v5, &type metadata for PrivateKey, v14);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1004DCB64()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v2 = *(void *)v0;
    Hasher._combine(_:)(1u);
    sub_10001736C(v2, v1);
    Data.hash(into:)(v7, v2, v1);
    sub_1000182F0(v2, v1);
  }

  __int128 v8 = *(_OWORD *)(v0 + 16);
  __int128 v3 = v8;
  sub_100018BF8((uint64_t)&v8);
  Data.hash(into:)(v7, v3, *((void *)&v3 + 1));
  sub_100164F64((uint64_t)&v8);
  unint64_t v4 = *(void *)(v0 + 40);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 32);
    Hasher._combine(_:)(1u);
    sub_10001736C(v5, v4);
    Data.hash(into:)(v7, v5, v4);
    sub_1000182F0(v5, v4);
  }

  return Hasher._finalize()();
}

uint64_t sub_1004DCC80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = sub_100004AEC(&qword_1009B1E00);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_1004E44B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KeyGenerationHint.CodingKeys,  &type metadata for KeyGenerationHint.CodingKeys,  v14,  v12,  v13);
  LOBYTE(v19[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, v19, v8);
  if (!v4)
  {
    v19[0] = a3;
    v19[1] = v18;
    char v20 = 1;
    unint64_t v15 = sub_10017F6C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v20, v8, &type metadata for SharedSecretKey, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1004DCDBC()
{
  if (*v0) {
    return 0xD000000000000013LL;
  }
  else {
    return 1953393000LL;
  }
}

uint64_t sub_1004DCDF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1004E2134(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004DCE18(uint64_t a1)
{
  unint64_t v2 = sub_1004E435C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004DCE40(uint64_t a1)
{
  unint64_t v2 = sub_1004E435C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004DCE6C(uint64_t a1)
{
  uint64_t v3 = v1[1];
  unint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  unint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  unint64_t v10 = v1[8];
  Hasher._combine(_:)(*v1);
  sub_10001736C(v3, v5);
  Data.hash(into:)(a1, v3, v5);
  sub_100016F9C(v3, v5);
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_100018BE4(v4, v7);
    sub_10001736C(v6, v9);
    sub_100018BE4(v8, v10);
  }

  else
  {
    Hasher._combine(_:)(1u);
    sub_100018BE4(v4, v7);
    sub_10001736C(v6, v9);
    sub_100018BE4(v8, v10);
    sub_100018BE4(v4, v7);
    Data.hash(into:)(a1, v4, v7);
    sub_1000182F0(v4, v7);
  }

  sub_10001736C(v6, v9);
  Data.hash(into:)(a1, v6, v9);
  sub_100016F9C(v6, v9);
  if (v10 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    sub_10001736C(v8, v10);
    Data.hash(into:)(a1, v8, v10);
    sub_1000182F0(v8, v10);
  }

  sub_1000182F0(v4, v7);
  sub_100016F9C(v6, v9);
  return sub_1000182F0(v8, v10);
}

Swift::Int sub_1004DD01C(uint64_t a1)
{
  Swift::UInt64 v2 = *v1;
  uint64_t v3 = v1[1];
  unint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  unint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  unint64_t v10 = v1[8];
  Hasher.init(_seed:)(v12, a1);
  Hasher._combine(_:)(v2);
  sub_10001736C(v3, v5);
  Data.hash(into:)(v12, v3, v5);
  sub_100016F9C(v3, v5);
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_100018BE4(v4, v7);
    sub_10001736C(v6, v9);
    sub_100018BE4(v8, v10);
  }

  else
  {
    Hasher._combine(_:)(1u);
    sub_100018BE4(v4, v7);
    sub_10001736C(v6, v9);
    sub_100018BE4(v8, v10);
    sub_100018BE4(v4, v7);
    Data.hash(into:)(v12, v4, v7);
    sub_1000182F0(v4, v7);
  }

  sub_10001736C(v6, v9);
  Data.hash(into:)(v12, v6, v9);
  sub_100016F9C(v6, v9);
  if (v10 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    sub_10001736C(v8, v10);
    Data.hash(into:)(v12, v8, v10);
    sub_1000182F0(v8, v10);
  }

  sub_1000182F0(v4, v7);
  sub_100016F9C(v6, v9);
  sub_1000182F0(v8, v10);
  return Hasher._finalize()();
}

__n128 sub_1004DD1E0@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + swift_weakDestroy(v0 + 16) = result;
  }

  return result;
}

uint64_t sub_1004DD230(void *a1)
{
  return sub_1004DC678(a1);
}

BOOL sub_1004DD244(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  __int128 v5 = *(_OWORD *)(a1 + 5);
  v16[0] = *(_OWORD *)(a1 + 3);
  v16[1] = v5;
  __int128 v6 = *(_OWORD *)(a1 + 7);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = a2[2];
  __int128 v10 = *(_OWORD *)(a2 + 7);
  __int128 v11 = *(_OWORD *)(a2 + 3);
  v17[1] = *(_OWORD *)(a2 + 5);
  uint64_t v17[2] = v10;
  v16[2] = v6;
  v17[0] = v11;
  BOOL v14 = v2 == v7
     && (sub_10001736C(v3, v4),
         sub_10001736C(v8, v9),
         _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v4),
         char v13 = v12,
         sub_100016F9C(v8, v9),
         sub_100016F9C(v3, v4),
         (v13 & 1) != 0)
     && sub_1004E125C((uint64_t)v16, (uint64_t)v17);
  return v14;
}

uint64_t sub_1004DD314()
{
  uint64_t v1 = 0x654B63696C627570LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x4B65746176697270LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x64656D7265746E69LL;
  }
}

uint64_t sub_1004DD384@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1004E246C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004DD3A8(uint64_t a1)
{
  unint64_t v2 = sub_1004E3AB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004DD3D0(uint64_t a1)
{
  unint64_t v2 = sub_1004E3AB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1004DD3FC(uint64_t a1)
{
  unint64_t v4 = v1[1];
  uint64_t v3 = v1[2];
  unint64_t v6 = v1[3];
  uint64_t v5 = v1[4];
  unint64_t v7 = v1[5];
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v8 = *v1;
    Hasher._combine(_:)(1u);
    sub_10001736C(v8, v4);
    Data.hash(into:)(a1, v8, v4);
    sub_1000182F0(v8, v4);
  }

  sub_10001736C(v3, v6);
  Data.hash(into:)(a1, v3, v6);
  sub_100016F9C(v3, v6);
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    sub_10001736C(v5, v7);
    Data.hash(into:)(a1, v5, v7);
    sub_1000182F0(v5, v7);
  }

Swift::Int sub_1004DD518(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = v1[5];
  Hasher.init(_seed:)(v9, a1);
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    sub_10001736C(v2, v3);
    Data.hash(into:)(v9, v2, v3);
    sub_1000182F0(v2, v3);
  }

  sub_10001736C(v4, v5);
  Data.hash(into:)(v9, v4, v5);
  sub_100016F9C(v4, v5);
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    sub_10001736C(v6, v7);
    Data.hash(into:)(v9, v6, v7);
    sub_1000182F0(v6, v7);
  }

  return Hasher._finalize()();
}

double sub_1004DD62C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_1004DD66C(void *a1)
{
  return sub_1004DC9A0(a1);
}

BOOL sub_1004DD6A4(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  __int128 v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1004E125C((uint64_t)v7, (uint64_t)v8);
}

uint64_t sub_1004DD6E8()
{
  if (*v0) {
    return 0x6553646572616873LL;
  }
  else {
    return 0x7865646E69LL;
  }
}

uint64_t sub_1004DD728@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1004E28D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004DD74C(uint64_t a1)
{
  unint64_t v2 = sub_1004E44B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004DD774(uint64_t a1)
{
  unint64_t v2 = sub_1004E44B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1004DD79C()
{
  Swift::UInt64 v1 = *v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v1);
  sub_10001736C(v2, v3);
  Data.hash(into:)(v5, v2, v3);
  sub_100016F9C(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1004DD814(uint64_t a1)
{
  uint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  Hasher._combine(_:)(*v1);
  sub_10001736C(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  return sub_100016F9C(v3, v4);
}

Swift::Int sub_1004DD86C(uint64_t a1)
{
  Swift::UInt64 v2 = *v1;
  uint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v2);
  sub_10001736C(v3, v4);
  Data.hash(into:)(v6, v3, v4);
  sub_100016F9C(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1004DD8E0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1004E29D4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_1004DD90C(void *a1)
{
  return sub_1004DCC80(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1004DD928(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v3 = a2[1];
  unint64_t v2 = a2[2];
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  sub_10001736C(v5, v4);
  sub_10001736C(v3, v2);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v4);
  char v7 = v6;
  sub_100016F9C(v3, v2);
  sub_100016F9C(v5, v4);
  return v7 & 1;
}

uint64_t CollaborativeKeyGen.v1.OwnerContext.deinit()
{
  return v0;
}

uint64_t CollaborativeKeyGen.v1.OwnerContext.__deallocating_deinit()
{
  return sub_1004DDA5C((void (*)(void))&_CCCKGOwnerDestroy);
}

uint64_t CollaborativeKeyGen.v1.ContributorContext.deinit()
{
  return v0;
}

uint64_t CollaborativeKeyGen.v1.ContributorContext.__deallocating_deinit()
{
  return sub_1004DDA5C((void (*)(void))&_CCCKGContributorDestroy);
}

uint64_t CollaborativeKeyGen.v2.OwnerContext.deinit()
{
  return v0;
}

uint64_t CollaborativeKeyGen.v2.OwnerContext.__deallocating_deinit()
{
  return sub_1004DDA5C((void (*)(void))&_CCCKG2OwnerDestroy);
}

uint64_t CollaborativeKeyGen.v2.ContributorContext.deinit()
{
  return v0;
}

uint64_t CollaborativeKeyGen.v2.ContributorContext.__deallocating_deinit()
{
  return sub_1004DDA5C((void (*)(void))&_CCCKG2ContributorDestroy);
}

uint64_t sub_1004DDA5C(void (*a1)(void))
{
  return swift_deallocClassInstance(v1, 24LL, 7LL);
}

uint64_t sub_1004DDA84(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A1760);
  __chkstk_darwin(v4);
  char v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2 == 1) {
    uint64_t v7 = 85LL;
  }
  else {
    uint64_t v7 = 57LL;
  }
  v22[0] = v7;
  uint64_t v23 = sub_1004D5620(v7);
  unint64_t v24 = v8;
  sub_1002B84C0((uint64_t)&v23);
  if (!v2)
  {
    int v10 = v9;
    if (!(_DWORD)v9)
    {
      sub_100178C64(v22[0], v23, v24);
      return v22[1];
    }

    uint64_t v11 = static os_log_type_t.error.getter(v9);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v12 = qword_100A2AC90;
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v14 + 56) = &type metadata for Int32;
    *(void *)(v14 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v14 + 32) = v10;
    os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  v12,  "Error running CCECCryptorExportKey. Code: %d.",  LODWORD(v22[0]));
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v10);
    uint64_t v15 = type metadata accessor for CryptoError(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v15, v16, 0LL, 0LL);
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1LL, v15) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))( v18,  enum case for CryptoError.unspecifiedError(_:),  v15);
      uint64_t v20 = sub_1004E3A70((uint64_t)v6);
    }

    else
    {
      uint64_t v20 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v18, v6, v15);
    }

    swift_willThrow(v20);
  }

  return sub_100016F9C(v23, v24);
}

uint64_t sub_1004DDCF4()
{
  uint64_t v1 = 0x4B65746176697270LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6553646572616873LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x654B63696C627570LL;
  }
}

uint64_t sub_1004DDD60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1004E2B40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004DDD84(uint64_t a1)
{
  unint64_t v2 = sub_1004DDF58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004DDDAC(uint64_t a1)
{
  unint64_t v2 = sub_1004DDF58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RootKey.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B1AB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004DDF58();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RootKey.CodingKeys,  &type metadata for RootKey.CodingKeys,  v11,  v9,  v10);
  __int128 v18 = *v3;
  char v17 = 0;
  unint64_t v12 = sub_10017EF30();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for PublicKey, v12);
  if (!v2)
  {
    __int128 v18 = v3[1];
    char v17 = 1;
    unint64_t v13 = sub_10017EB68();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for PrivateKey, v13);
    __int128 v18 = v3[2];
    char v17 = 2;
    unint64_t v14 = sub_10017F6C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for SharedSecretKey, v14);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1004DDF58()
{
  unint64_t result = qword_1009B1AB8;
  if (!qword_1009B1AB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805F0C, &type metadata for RootKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1AB8);
  }

  return result;
}

double RootKey.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_1004DDFDC(void *a1)
{
  return RootKey.encode(to:)(a1);
}

uint64_t sub_1004DDFF0(uint64_t a1, uint64_t a2, int *a3, void *a4, uint64_t a5, int a6)
{
  uint64_t v11 = sub_100004AEC(&qword_1009A1760);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t result = CCCKGOwnerGenerateShare(*a4, a5, 32LL, a1, a6);
    *a3 = result;
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v15 = static os_log_type_t.error.getter(result);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v16 = qword_100A2AC90;
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    int v19 = *a3;
    *(void *)(v18 + 56) = &type metadata for Int32;
    *(void *)(v18 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v18 + 32) = v19;
    os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "CCCKGOwnerGenerateShare: Error generating share from owner device. Status: %d.",  v29);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(*a3);
    uint64_t v20 = type metadata accessor for CryptoError(0LL);
    uint64_t v21 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v20, v21, 0LL, 0LL);
    uint64_t v23 = v22;
    uint64_t v24 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v13, 1LL, v20) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))( v23,  enum case for CryptoError.unspecifiedError(_:),  v20);
      uint64_t v25 = sub_1004E3A70((uint64_t)v13);
    }

    else
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v23, v13, v20);
    }
  }

  else
  {
    uint64_t v26 = type metadata accessor for CryptoError(0LL);
    uint64_t v27 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v26, v27, 0LL, 0LL);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104LL))( v28,  enum case for CryptoError.memoryFailure(_:),  v26);
  }

  return swift_willThrow(v25);
}

uint64_t sub_1004DE260@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  if (a1)
  {
    uint64_t v9 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    uint64_t v23 = 0x4000000000LL;
    uint64_t v24 = __DataStorage.init(length:)(64LL);
    swift_retain();
    sub_1004E117C((int *)&v23, a2, a1, a3, 64LL, (uint64_t *)&v25);
    if (v4)
    {
      return swift_release();
    }

    else
    {
      uint64_t v15 = v23;
      uint64_t v16 = v24 | 0x4000000000000000LL;
      __int128 v17 = v25;
      uint64_t v19 = v26;
      uint64_t v18 = v27;
      sub_10001736C(v23, v24 | 0x4000000000000000LL);
      sub_100178C64(32LL, v15, v16);
      sub_1001782BC(v23, v24);
      uint64_t v28 = *((void *)&v25 + 1);
      uint64_t v22 = v25;
      sub_10001736C(v15, v16);
      sub_1003B7854(32LL, v15, v16);
      sub_1001782BC(v23, v24);
      uint64_t result = swift_release();
      __int128 v20 = v25;
      *(_OWORD *)a4 = v17;
      *(void *)(a4 + swift_weakDestroy(v0 + 16) = v19;
      *(void *)(a4 + swift_unknownObjectUnownedDestroy(v0 + 24) = v18;
      uint64_t v21 = v28;
      *(void *)(a4 + 32) = v22;
      *(void *)(a4 + 40) = v21;
      *(_OWORD *)(a4 + 48) = v20;
      *(_OWORD *)(a4 + 64) = xmmword_1007E7660;
    }
  }

  else
  {
    uint64_t v11 = type metadata accessor for CryptoError(0LL);
    uint64_t v12 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v11, v12, 0LL, 0LL);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v11 - 8) + 104LL))( v13,  enum case for CryptoError.memoryFailure(_:),  v11);
    return swift_willThrow(v14);
  }

  return result;
}

uint64_t sub_1004DE498@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v13 = sub_100004AEC(&qword_1009A1760);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1)
  {
    uint64_t v29 = type metadata accessor for CryptoError(0LL);
    uint64_t v30 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v29, v30, 0LL, 0LL);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v29 - 8) + 104LL))( v31,  enum case for CryptoError.memoryFailure(_:),  v29);
    return swift_willThrow(v32);
  }

  uint64_t v55 = 0LL;
  uint64_t PublicKeyFromPrivateKey = CCCKGOwnerFinish(*(void *)(a2 + 16), a3, a4, a1, a5, &v55);
  if ((_DWORD)PublicKeyFromPrivateKey)
  {
    int v17 = PublicKeyFromPrivateKey;
    uint64_t v18 = (int)PublicKeyFromPrivateKey;
    uint64_t v19 = static os_log_type_t.error.getter(PublicKeyFromPrivateKey);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v20 = qword_100A2AC90;
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
    *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v22 + 56) = &type metadata for Int32;
    *(void *)(v22 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v22 + 32) = v17;
    os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  v20,  "CCCKGOwnerFinish: Error generating share from owner device. Status: %d",  v53);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v18);
    uint64_t v23 = type metadata accessor for CryptoError(0LL);
    uint64_t v24 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v23, v24, 0LL, 0LL);
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v15, 1LL, v23) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v27 + 104))( v26,  enum case for CryptoError.unspecifiedError(_:),  v23);
      uint64_t v28 = sub_1004E3A70((uint64_t)v15);
    }

    else
    {
      uint64_t v28 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v26, v15, v23);
    }
  }

  else
  {
    uint64_t v34 = v55;
    if (v55)
    {
      uint64_t PublicKeyFromPrivateKey = CCECCryptorGetPublicKeyFromPrivateKey(v55);
      if (PublicKeyFromPrivateKey)
      {
        uint64_t v35 = PublicKeyFromPrivateKey;
        uint64_t v36 = sub_1004DDA84(v34, 1);
        if (!v6)
        {
          uint64_t v38 = v36;
          unint64_t v39 = v37;
          uint64_t v40 = sub_1004DDA84(v35, 0);
          unint64_t v42 = v41;
          sub_10001736C(v38, v39);
          uint64_t v47 = sub_10017D280(v38, v39);
          uint64_t v54 = v48;
          uint64_t v49 = sub_10017D59C(v40, v42);
          uint64_t v51 = v50;
          sub_100016F9C(v38, v39);
          uint64_t v52 = v54;
          *a6 = v47;
          a6[1] = v52;
          a6[2] = v49;
          a6[3] = v51;
        }

        CCECCryptorRelease(v35);
        uint64_t result = v34;
        return CCECCryptorRelease(result);
      }
    }

    uint64_t v43 = static os_log_type_t.error.getter(PublicKeyFromPrivateKey);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    os_log(_:dso:log:_:_:)( v43,  &_mh_execute_header,  qword_100A2AC90,  "CCCKGOwnerFinish: Private key not available",  43LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v44 = type metadata accessor for CryptoError(0LL);
    uint64_t v45 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v44, v45, 0LL, 0LL);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v44 - 8) + 104LL))( v46,  enum case for CryptoError.invalidKey(_:),  v44);
  }

  swift_willThrow(v28);
  uint64_t result = v55;
  if (v55) {
    return CCECCryptorRelease(result);
  }
  return result;
}

uint64_t sub_1004DE920@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  __int128 v23 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  *(_OWORD *)a2 = v23;
  sub_100018BF8((uint64_t)&v23);
  sub_100016F9C(v6, v7);
  uint64_t v8 = String.utf8Data.getter(0x64656D7265746E69LL, 0xEC00000065746169LL);
  unint64_t v10 = v9;
  __int128 v11 = v23;
  sub_100018BF8((uint64_t)&v23);
  sub_1004DF7EC(v11, *((uint64_t *)&v11 + 1), v8, v10, 32LL);
  if (v3)
  {
    sub_100016F9C(v8, v10);
    return sub_100164F64((uint64_t)&v23);
  }

  else
  {
    uint64_t v15 = v12;
    uint64_t v16 = v13;
    sub_100164F64((uint64_t)&v23);
    sub_1001782BC(v15, v16);
    sub_100016F9C(v8, v10);
    uint64_t v17 = *(void *)(a1 + 16);
    unint64_t v18 = *(void *)(a1 + 24);
    uint64_t v20 = *(void *)a1;
    unint64_t v19 = *(void *)(a1 + 8);
    sub_10001736C(v17, v18);
    uint64_t result = sub_100018BE4(v20, v19);
    *a3 = v21;
    a3[1] = v22;
    a3[2] = v17;
    a3[3] = v18;
    a3[4] = v20;
    a3[5] = v19;
  }

  return result;
}

void sub_1004DEA64(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v49 = v1;
  error[0] = (CFErrorRef)kSecAttrKeyTypeEC;
  sub_10006A358(error, v47);
  uint64_t v3 = (id)kSecAttrKeyType;
  uint64_t v4 = (id)kSecAttrKeyTypeEC;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10005C130(v47, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  uint64_t v49 = v2;
  error[0] = (CFErrorRef)kSecAttrKeyClassPublic;
  sub_10006A358(error, v47);
  uint64_t v6 = (id)kSecAttrKeyClass;
  unint64_t v7 = (id)kSecAttrKeyClassPublic;
  char v8 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  uint64_t v46 = &_swiftEmptyDictionarySingleton;
  sub_10005C130(v47, v6, v8);

  swift_bridgeObjectRelease();
  error[0] = 0LL;
  Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  sub_100022898(0LL, (unint64_t *)&qword_10099E400, &OBJC_CLASS___NSObject_ptr);
  sub_100183C14();
  unint64_t v10 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  __int128 v11 = SecKeyCreateWithData(isa, v10, error);

  if (v11)
  {
    v47[0] = 0LL;
    uint64_t v13 = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
    CFDataRef EncryptedData = SecKeyCreateEncryptedData( v11,  kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM,  v13,  v47);

    CFErrorRef v16 = v47[0];
    if (v47[0])
    {
      type metadata accessor for CFError(0LL);
      uint64_t v18 = v17;
      uint64_t v19 = sub_100007864( &qword_1009B1D80,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
      uint64_t v20 = swift_allocError(v18, v19, 0LL, 0LL);
      CFErrorRef *v21 = v16;
      uint64_t v22 = static os_log_type_t.error.getter(v20);
      if (qword_10099B520 != -1) {
        swift_once(&qword_10099B520, sub_1004DC610);
      }
      uint64_t v23 = qword_100A2AC90;
      uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v25 = swift_allocObject(v24, 72LL, 7LL);
      *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v46 = (void *)v20;
      swift_errorRetain(v20);
      uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v27 = String.init<A>(describing:)(&v46, v26);
      uint64_t v29 = v28;
      *(void *)(v25 + 56) = &type metadata for String;
      *(void *)(v25 + 64) = sub_1000226F4();
      *(void *)(v25 + 32) = v27;
      *(void *)(v25 + 40) = v29;
      os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  v23,  "CryptoUtil: Encryption: Could not encrypt the data. Error - %@",  62LL,  2LL,  v25);
      uint64_t v30 = swift_bridgeObjectRelease();
      swift_willThrow(v30);

LABEL_6:
      return;
    }

    if (!EncryptedData)
    {
      uint64_t v40 = static os_log_type_t.error.getter(v15);
      if (qword_10099B520 != -1) {
        swift_once(&qword_10099B520, sub_1004DC610);
      }
      os_log(_:dso:log:_:_:)( v40,  &_mh_execute_header,  qword_100A2AC90,  "CryptoUtil: Encryption did not fail, but encrypted data is nil.",  63LL,  2LL,  _swiftEmptyArrayStorage);
      uint64_t v41 = type metadata accessor for CryptoError(0LL);
      uint64_t v42 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
      swift_allocError(v41, v42, 0LL, 0LL);
      uint64_t v44 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v41 - 8) + 104LL))( v43,  enum case for CryptoError.encodeError(_:),  v41);
      swift_willThrow(v44);
      goto LABEL_6;
    }

    uint64_t v36 = EncryptedData;
    uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(EncryptedData);
    uint64_t v39 = v38;

    *a1 = v37;
    a1[1] = v39;
  }

  else
  {
    uint64_t v31 = static os_log_type_t.error.getter(v12);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  qword_100A2AC90,  "CryptoUtil: SecKeyCreateWithData could not be created for the public key",  72LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v32 = type metadata accessor for CryptoError(0LL);
    uint64_t v33 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v32, v33, 0LL, 0LL);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v32 - 8) + 104LL))( v34,  enum case for CryptoError.encodeError(_:),  v32);
    swift_willThrow(v35);
  }

void sub_1004DEF84(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v56 = v1;
  error[0] = (CFErrorRef)kSecAttrKeyTypeEC;
  sub_10006A358(error, v54);
  uint64_t v3 = (id)kSecAttrKeyType;
  uint64_t v4 = (id)kSecAttrKeyTypeEC;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10005C130(v54, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  uint64_t v56 = v2;
  error[0] = (CFErrorRef)kSecAttrKeyClassPrivate;
  sub_10006A358(error, v54);
  uint64_t v6 = (id)kSecAttrKeyClass;
  unint64_t v7 = (id)kSecAttrKeyClassPrivate;
  char v8 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  int v53 = &_swiftEmptyDictionarySingleton;
  sub_10005C130(v54, v6, v8);

  swift_bridgeObjectRelease();
  error[0] = 0LL;
  Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  sub_100022898(0LL, (unint64_t *)&qword_10099E400, &OBJC_CLASS___NSObject_ptr);
  sub_100183C14();
  unint64_t v10 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  SecKeyRef v11 = SecKeyCreateWithData(isa, v10, error);

  if (!v11) {
    goto LABEL_4;
  }
  if (error[0])
  {

LABEL_4:
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    v54[0] = error[0];
    uint64_t v14 = sub_100004AEC(&qword_1009A4668);
    uint64_t v15 = String.init<A>(describing:)(v54, v14);
    uint64_t v17 = v16;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_1000226F4();
    *(void *)(v13 + 32) = v15;
    *(void *)(v13 + 40) = v17;
    uint64_t v18 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v19 = (void *)static OS_os_log.default.getter(v18);
    uint64_t v20 = static os_log_type_t.default.getter(v19);
    os_log(_:dso:log:type:_:)( "CryptoUtil: decryption: could not create SecKey for private key: %@",  67LL,  2LL,  &_mh_execute_header,  v19,  v20,  v13);
    swift_bridgeObjectRelease();

    uint64_t v21 = type metadata accessor for CryptoError(0LL);
    uint64_t v22 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v21, v22, 0LL, 0LL);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  enum case for CryptoError.decodeError(_:),  v21);
    swift_willThrow(v24);
    return;
  }

  v54[0] = 0LL;
  uint64_t v25 = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  CFDataRef DecryptedData = SecKeyCreateDecryptedData( v11,  kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM,  v25,  v54);

  CFErrorRef v28 = v54[0];
  if (v54[0])
  {
    type metadata accessor for CFError(0LL);
    uint64_t v30 = v29;
    uint64_t v31 = sub_100007864( &qword_1009B1D80,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
    uint64_t v32 = swift_allocError(v30, v31, 0LL, 0LL);
    CFErrorRef *v33 = v28;
    uint64_t v34 = static os_log_type_t.error.getter(v32);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v35 = qword_100A2AC90;
    uint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v37 = swift_allocObject(v36, 72LL, 7LL);
    *(_OWORD *)(v37 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    int v53 = (void *)v32;
    swift_errorRetain(v32);
    uint64_t v38 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v39 = String.init<A>(describing:)(&v53, v38);
    uint64_t v41 = v40;
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 64) = sub_1000226F4();
    *(void *)(v37 + 32) = v39;
    *(void *)(v37 + 40) = v41;
    os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  v35,  "CryptoUtil: Decryption: Could not decrypt the data. Error - %@",  62LL,  2LL,  v37);
    uint64_t v42 = swift_bridgeObjectRelease();
    swift_willThrow(v42);
  }

  else if (DecryptedData)
  {
    uint64_t v43 = DecryptedData;
    uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(DecryptedData);
    uint64_t v46 = v45;

    *a1 = v44;
    a1[1] = v46;
  }

  else
  {
    uint64_t v47 = static os_log_type_t.error.getter(v27);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    os_log(_:dso:log:_:_:)( v47,  &_mh_execute_header,  qword_100A2AC90,  "CryptoUtil: Decryption did not fail, but decrypted data is nil.",  63LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v48 = type metadata accessor for CryptoError(0LL);
    uint64_t v49 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v48, v49, 0LL, 0LL);
    uint64_t v51 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v48 - 8) + 104LL))( v50,  enum case for CryptoError.decodeError(_:),  v48);
    swift_willThrow(v51);
  }

void sub_1004DF518(__SecKey *a1@<X0>, uint64_t *a2@<X8>)
{
  CFErrorRef error = 0LL;
  Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  CFDataRef v5 = SecKeyCreateDecryptedData(a1, kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, isa, &error);

  CFErrorRef v7 = error;
  if (error)
  {
    type metadata accessor for CFError(0LL);
    uint64_t v9 = v8;
    uint64_t v10 = sub_100007864( &qword_1009B1D80,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
    uint64_t v11 = swift_allocError(v9, v10, 0LL, 0LL);
    *uint64_t v12 = v7;
    uint64_t v13 = static os_log_type_t.error.getter(v11);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v14 = qword_100A2AC90;
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
    *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v31 = v11;
    swift_errorRetain(v11);
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v18 = String.init<A>(describing:)(&v31, v17);
    uint64_t v20 = v19;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_1000226F4();
    *(void *)(v16 + 32) = v18;
    *(void *)(v16 + 40) = v20;
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  v14,  "CryptoUtil: Decryption: Could not decrypt the data. Error - %@",  62LL,  2LL,  v16);
    uint64_t v21 = swift_bridgeObjectRelease();
    swift_willThrow(v21);
  }

  else if (v5)
  {
    uint64_t v22 = v5;
    uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v25 = v24;

    *a2 = v23;
    a2[1] = v25;
  }

  else
  {
    uint64_t v26 = static os_log_type_t.error.getter(v6);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  qword_100A2AC90,  "CryptoUtil: Decryption did not fail, but decrypted data is nil.",  63LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v27 = type metadata accessor for CryptoError(0LL);
    uint64_t v28 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v27, v28, 0LL, 0LL);
    uint64_t v30 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v27 - 8) + 104LL))( v29,  enum case for CryptoError.decodeError(_:),  v27);
    swift_willThrow(v30);
  }

void sub_1004DF7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A1760);
  __chkstk_darwin(v7);
  sub_1004D5620(a5);
  __asm { BR              X10 }

uint64_t sub_1004DF894()
{
  *(void *)(v6 - 120) = v3;
  *(_WORD *)(v6 - 112) = v2;
  *(_BYTE *)(v6 - 110) = BYTE2(v2);
  *(_BYTE *)(v6 - 109) = BYTE3(v2);
  *(_BYTE *)(v6 - 108) = BYTE4(v2);
  *(_BYTE *)(v6 - 107) = BYTE5(v2);
  sub_10001736C(v1, v0);
  sub_1004E0430(v6 - 120, v6 - 120 + BYTE6(v2), v3, v2);
  sub_100016F9C(v3, v2);
  uint64_t v7 = sub_100016F9C(v1, v0);
  if (!v4)
  {
    int v9 = *(_DWORD *)(v6 - 124);
    if (!v9) {
      return *(void *)(v6 - 104);
    }
    uint64_t v10 = static os_log_type_t.error.getter(v7);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v11 = qword_100A2AC90;
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v13 + 56) = &type metadata for Int32;
    *(void *)(v13 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v13 + 32) = v9;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Error running CCDeriveKey. Code: %d.", v20);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v9);
    uint64_t v14 = type metadata accessor for CryptoError(0LL);
    uint64_t v15 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v14, v15, 0LL, 0LL);
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v5, 1LL, v14) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))( v17,  enum case for CryptoError.unspecifiedError(_:),  v14);
      uint64_t v19 = sub_1004E3A70(v5);
    }

    else
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v17, v5, v14);
    }

    swift_willThrow(v19);
  }

  return sub_100016F9C(*(void *)(v6 - 104), *(void *)(v6 - 96));
}

uint64_t sub_1004DFCF0(uint64_t a1, uint64_t a2)
{
  if (v2)
  {
    uint64_t v5 = static os_log_type_t.error.getter(v3);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v16 = qword_100A2AC90;
    uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v17 = v2;
    swift_errorRetain(v2);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v9 = String.init<A>(describing:)(&v17, v8);
    uint64_t v11 = v10;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_1000226F4();
    *(void *)(v7 + 32) = v9;
    *(void *)(v7 + 40) = v11;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v16, "Error deriving advertisementKey: %@", 35LL, 2LL, v7);
    swift_bridgeObjectRelease();
    unint64_t v12 = sub_100117A8C();
    uint64_t v13 = swift_allocError(&type metadata for CryptoTokenError, v12, 0LL, 0LL);
    _BYTE *v14 = 0;
    swift_willThrow(v13);
    swift_errorRelease(v2);
  }

  else
  {
    uint64_t v4 = v3;
    uint64_t v16 = sub_1004DDA84(v3, 0);
    CCECCryptorRelease(v4);
  }

  return v16;
}

void sub_1004DFE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A1760);
  __chkstk_darwin(v3);
  __asm { BR              X10 }

uint64_t sub_1004DFF18()
{
  *(void *)(v5 - 112) = v1;
  *(_WORD *)(v5 - 104) = v4;
  *(_BYTE *)(v5 - 102) = BYTE2(v4);
  *(_BYTE *)(v5 - 101) = BYTE3(v4);
  *(_BYTE *)(v5 - 100) = BYTE4(v4);
  *(_BYTE *)(v5 - 99) = BYTE5(v4);
  uint64_t v12 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))CCECCryptorImportKey)( v3,  v5 - 112,  BYTE6(v4),  v2,  v5 - 96);
  int v13 = v12;
  if ((_DWORD)v12)
  {
    uint64_t v14 = static os_log_type_t.error.getter(v12);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v15 = qword_100A2AC90;
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
    *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v17 + 56) = &type metadata for Int32;
    *(void *)(v17 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v17 + 32) = v13;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Error running CCECCryptorImportKey. Code: %d.", v23);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v13);
    uint64_t v18 = type metadata accessor for CryptoError(0LL);
    uint64_t v19 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v18, v19, 0LL, 0LL);
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v0, 1LL, v18) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))( v21,  enum case for CryptoError.unspecifiedError(_:),  v18);
      uint64_t v11 = sub_1004E3A70(v0);
    }

    else
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v21, v0, v18);
    }
  }

  else
  {
    uint64_t result = *(void *)(v5 - 96);
    if (result) {
      return result;
    }
    uint64_t v7 = static os_log_type_t.error.getter(0LL);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_100A2AC90,  "CryptoUtil: diversifyKey: CryptorRef was not populated as expected.",  67LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v8 = type metadata accessor for CryptoError(0LL);
    uint64_t v9 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v8, v9, 0LL, 0LL);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  enum case for CryptoError.unspecifiedError(_:),  v8);
  }

  return swift_willThrow(v11);
}

uint64_t sub_1004E0430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    __asm { BR              X11 }
  }

  uint64_t v4 = type metadata accessor for CryptoError(0LL);
  uint64_t v5 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
  swift_allocError(v4, v5, 0LL, 0LL);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104LL))( v6,  enum case for CryptoError.memoryFailure(_:),  v4);
  return swift_willThrow(v7);
}

void sub_1004E0738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A1760);
  __chkstk_darwin(v6);
  Data.append(_:)(a3, a4);
  JUMPOUT(0x1004E0944LL);
}

uint64_t sub_1004E07F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v6 - 128) = v4;
  *(_WORD *)(v6 - 120) = v3;
  *(_BYTE *)(v6 - 118) = BYTE2(v3);
  *(_BYTE *)(v6 - 117) = BYTE3(v3);
  *(_BYTE *)(v6 - 1swift_weakDestroy(v0 + 16) = BYTE4(v3);
  *(_BYTE *)(v6 - 115) = BYTE5(v3);
  *(_BYTE *)(v6 - 114) = BYTE6(v3);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))((char *)&loc_1004E0874
                                                                    + *((int *)qword_1004E0E48 + (v5 >> 62))))( a1,  a2,  a3,  0LL);
}

uint64_t sub_1004E0884()
{
  uint64_t v5 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t))CCECCryptorTwinDiversifyKey)( v1,  v3,  v4 - 128,  BYTE6(v2),  v4 - 96);
  int v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v4 - 114);
  uint64_t v8 = *(void *)(v4 - 128);
  unint64_t v9 = *(unsigned int *)(v4 - 120) | ((unint64_t)*(unsigned __int8 *)(v4 - 116) << 32) | ((unint64_t)*(unsigned __int8 *)(v4 - 115) << 40);
  *(void *)(v4 - 112) = v8;
  *(void *)(v4 - 104) = v9 | (v7 << 48);
  if ((_DWORD)v5)
  {
    uint64_t v10 = static os_log_type_t.error.getter(v5);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v11 = qword_100A2AC90;
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v13 + 56) = &type metadata for Int32;
    *(void *)(v13 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v13 + 32) = v6;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Error running CCECCryptorTwinDiversifyKey. Code: %d.", v24);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v6);
    uint64_t v14 = type metadata accessor for CryptoError(0LL);
    uint64_t v15 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v14, v15, 0LL, 0LL);
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v0, 1LL, v14) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))( v17,  enum case for CryptoError.unspecifiedError(_:),  v14);
      uint64_t v19 = sub_1004E3A70(v0);
    }

    else
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v17, v0, v14);
    }

void sub_1004E0E58(uint64_t a1)
{
  __asm { BR              X12 }

uint64_t sub_1004E0EC0@<X0>(uint64_t a1@<X4>, int a2@<W5>, uint64_t a3@<X8>)
{
  uint64_t v9 = v3;
  LOWORD(v10) = a3;
  BYTE2(v10) = BYTE2(a3);
  HIBYTE(v10) = BYTE3(a3);
  unsigned __int8 v11 = BYTE4(a3);
  unsigned __int8 v12 = BYTE5(a3);
  unsigned __int8 v13 = BYTE6(a3);
  uint64_t result = sub_1004DDFF0((uint64_t)&v9, (uint64_t)&v9 + BYTE6(a3), v6, v5, a1, a2);
  unint64_t v8 = v10 | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48);
  *uint64_t v4 = v9;
  v4[1] = v8;
  return result;
}

void sub_1004E10AC(int *a1, int *a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  if ((int)v11 < (int)v12)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v20 = a2;
  uint64_t v13 = __DataStorage._bytes.getter(v10);
  if (!v13)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v14 = v13;
  uint64_t v15 = __DataStorage._offset.getter();
  uint64_t v16 = v12 - v15;
  if (__OFSUB__(v12, v15))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v17 = v11 - v12;
  uint64_t v18 = __DataStorage._length.getter();
  if (v18 >= v17) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v18;
  }
  sub_1004DDFF0(v14 + v16, v14 + v16 + v19, v20, a3, a4, a5);
}

void sub_1004E117C( int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v13 = *a1;
  if (a1[1] < (int)v13)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v18 = a6;
  uint64_t v19 = a3;
  uint64_t v14 = __DataStorage._bytes.getter(v12);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = __DataStorage._offset.getter();
    uint64_t v17 = v13 - v16;
    if (!__OFSUB__(v13, v16))
    {
      __DataStorage._length.getter();
      sub_1004DE498(v15 + v17, a2, v19, a4, a5, v18);
      swift_release();
      return;
    }

    goto LABEL_6;
  }

BOOL sub_1004E125C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 == 15) {
      goto LABEL_8;
    }
LABEL_5:
    sub_100018BE4(*(void *)a1, v5);
    sub_100018BE4(v6, v7);
    sub_1000182F0(v4, v5);
    uint64_t v8 = v6;
    unint64_t v9 = v7;
LABEL_6:
    sub_1000182F0(v8, v9);
    return 0LL;
  }

  if (v7 >> 60 == 15) {
    goto LABEL_5;
  }
  sub_100018BE4(*(void *)a1, v5);
  sub_100018BE4(v6, v7);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v4, v5);
  char v11 = v10;
  sub_1000182F0(v6, v7);
  sub_1000182F0(v4, v5);
  if ((v11 & 1) == 0) {
    return 0LL;
  }
LABEL_8:
  __int128 v12 = *(_OWORD *)(a1 + 16);
  __int128 v23 = *(_OWORD *)(a2 + 16);
  __int128 v24 = v12;
  uint64_t v14 = *((void *)&v12 + 1);
  uint64_t v13 = v12;
  sub_100018BF8((uint64_t)&v24);
  sub_100018BF8((uint64_t)&v23);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v13, v14);
  LOBYTE(v13) = v15;
  sub_100164F64((uint64_t)&v23);
  sub_100164F64((uint64_t)&v24);
  if ((v13 & 1) == 0) {
    return 0LL;
  }
  uint64_t v17 = *(void *)(a1 + 32);
  unint64_t v16 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a2 + 32);
  unint64_t v18 = *(void *)(a2 + 40);
  if (v16 >> 60 == 15)
  {
    if (v18 >> 60 == 15) {
      return 1LL;
    }
    goto LABEL_13;
  }

  if (v18 >> 60 == 15)
  {
LABEL_13:
    sub_100018BE4(v17, v16);
    sub_100018BE4(v19, v18);
    sub_1000182F0(v17, v16);
    uint64_t v8 = v19;
    unint64_t v9 = v18;
    goto LABEL_6;
  }

  sub_100018BE4(v17, v16);
  sub_100018BE4(v19, v18);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v16);
  char v21 = v20;
  sub_1000182F0(v19, v18);
  sub_1000182F0(v17, v16);
  return (v21 & 1) != 0;
}

void sub_1004E1454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (__DataStorage._bytes.getter())
  {
    if (!__OFSUB__(a1, __DataStorage._offset.getter()))
    {
      __DataStorage._length.getter();
      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x1004E1540LL);
  }

  __break(1u);
  JUMPOUT(0x1004E154CLL);
}

void sub_1004E155C(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1004E15C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(void, uint64_t, uint64_t, void))((char *)&loc_1004E164C
                                                                   + *((int *)qword_1004E19B0 + (v3 >> 62))))( *v4,  a2,  a3,  0LL);
}

uint64_t sub_1004E165C(uint64_t a1)
{
  uint64_t v6 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t *, uint64_t))CCDeriveKey)( a1,  10LL,  v1,  BYTE6(v4),  &v9,  v3);
  ((void (*)(void))CCKDFParametersDestroy)(*v5);
  unint64_t v7 = v10 | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48);
  *uint64_t v2 = v9;
  v2[1] = v7;
  return v6;
}

uint64_t sub_1004E19C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (!__DataStorage._bytes.getter(a1))
  {
    __DataStorage._length.getter();
    uint64_t v12 = type metadata accessor for CryptoError(0LL);
    uint64_t v13 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v12, v13, 0LL, 0LL);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  enum case for CryptoError.memoryFailure(_:),  v12);
    swift_willThrow(v15);
    sub_100016F9C(a5, a6);
    return v12;
  }

  uint64_t result = __DataStorage._offset.getter();
  if (!__OFSUB__(a1, result))
  {
    __DataStorage._length.getter();
    sub_10001736C(a5, a6);
    sub_1004E155C(a3);
    uint64_t v12 = v11;
    sub_100016F9C(a5, a6);
    sub_100016F9C(a5, a6);
    return v12;
  }

  __break(1u);
  return result;
}

uint64_t sub_1004E1B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter(a1);
  uint64_t v10 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v10 += a1 - result;
  }

  BOOL v11 = __OFSUB__(a2, a1);
  uint64_t v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  uint64_t v15 = v10 + v14;
  if (v10) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0LL;
  }
  uint64_t result = sub_1004E0430(v10, v16, a4, a5);
  if (!v17) {
    return v18;
  }
  return result;
}

uint64_t sub_1004E1BEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A1760);
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = 0LL;
  uint64_t v59 = 0LL;
  uint64_t v6 = CCECCryptorGeneratePair(224LL, &v59, &v58);
  if ((_DWORD)v6)
  {
    int v7 = v6;
    uint64_t v8 = (int)v6;
    uint64_t v9 = static os_log_type_t.error.getter(v6);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v10 = qword_100A2AC90;
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
    *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v12 + 56) = &type metadata for Int32;
    *(void *)(v12 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v12 + 32) = v7;
    os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v10,  "Initial Pairing: CCECCryptorGeneratePair failed. Status: %d",  v49);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v8);
    uint64_t v13 = type metadata accessor for CryptoError(0LL);
    uint64_t v14 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v13, v14, 0LL, 0LL);
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v5, 1LL, v13) == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))( v16,  enum case for CryptoError.unspecifiedError(_:),  v13);
      uint64_t v18 = sub_1004E3A70((uint64_t)v5);
    }

    else
    {
      uint64_t v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v16, v5, v13);
    }

    return swift_willThrow(v18);
  }

  uint64_t v19 = v58;
  if (!v58)
  {
    uint64_t v31 = static os_log_type_t.error.getter(v6);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  qword_100A2AC90,  "Initial Pairing: Private key is not available.",  46LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v32 = type metadata accessor for CryptoError(0LL);
    uint64_t v33 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v32, v33, 0LL, 0LL);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v32 - 8) + 104LL))( v34,  enum case for CryptoError.invalidKey(_:),  v32);
    return swift_willThrow(v18);
  }

  uint64_t v20 = sub_1004DDA84(v58, 1);
  if (!v1)
  {
    uint64_t v22 = v20;
    unint64_t v23 = v21;
    uint64_t v24 = v59;
    if (v59)
    {
      uint64_t v25 = sub_1004DDA84(v59, 0);
      unint64_t v55 = v26;
      uint64_t v27 = static Data.random(bytes:)(32LL);
      uint64_t v29 = v28;
      sub_10001736C(v22, v23);
      uint64_t v30 = sub_10017D280(v22, v23);
      uint64_t v53 = v27;
      uint64_t v54 = v29;
      uint64_t v51 = v30;
      uint64_t v52 = v40;
      unint64_t v41 = v55;
      sub_10001736C(v25, v55);
      uint64_t v42 = sub_10017D59C(v25, v41);
      uint64_t v44 = v43;
      uint64_t v50 = v42;
      sub_1001782BC(v53, v54);
      sub_100016F9C(v25, v41);
      uint64_t v45 = v56;
      uint64_t v46 = v57;
      CCECCryptorRelease(v24);
      sub_100016F9C(v22, v23);
      uint64_t result = CCECCryptorRelease(v19);
      *a1 = v50;
      a1[1] = v44;
      uint64_t v48 = v52;
      a1[2] = v51;
      a1[3] = v48;
      a1[4] = v45;
      a1[5] = v46;
      return result;
    }

    uint64_t v35 = static os_log_type_t.error.getter(v20);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  qword_100A2AC90,  "Initial Pairing: Public key is not available.",  45LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v36 = type metadata accessor for CryptoError(0LL);
    uint64_t v37 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v36, v37, 0LL, 0LL);
    uint64_t v39 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v36 - 8) + 104LL))( v38,  enum case for CryptoError.invalidKey(_:),  v36);
    swift_willThrow(v39);
    sub_100016F9C(v22, v23);
  }

  return CCECCryptorRelease(v19);
}

uint64_t sub_1004E2134(uint64_t a1, unint64_t a2)
{
  if (a1 == 1953393000 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953393000LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x80000001008664E0LL)
  {
    swift_bridgeObjectRelease(0x80000001008664E0LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001008664E0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1004E2210@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B1DB8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004E435C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for GeneratedTokens.CodingKeys,  &type metadata for GeneratedTokens.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v36 = 0;
  unint64_t v12 = sub_1004E43A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v30,  &type metadata for KeyGenerationHint,  &v36,  v5,  &type metadata for KeyGenerationHint,  v12);
  uint64_t v13 = v31;
  uint64_t v29 = v30;
  unint64_t v14 = v32;
  char v36 = 1;
  sub_10001736C(v31, v32);
  unint64_t v15 = sub_1004E43E4();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v30,  &type metadata for DiversifiedRootKeys,  &v36,  v5,  &type metadata for DiversifiedRootKeys,  v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = v30;
  unint64_t v17 = v31;
  unint64_t v18 = v32;
  unint64_t v26 = v33;
  uint64_t v27 = v30;
  unint64_t v19 = v35;
  uint64_t v28 = v34;
  sub_10001736C(v13, v14);
  sub_100018BE4(v16, v17);
  uint64_t v20 = v18;
  uint64_t v21 = v18;
  unint64_t v22 = v26;
  sub_10001736C(v21, v26);
  sub_100018BE4(v28, v19);
  sub_100016F9C(v13, v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_100016F9C(v13, v14);
  sub_1000182F0(v27, v17);
  sub_100016F9C(v20, v22);
  uint64_t v23 = v28;
  uint64_t result = sub_1000182F0(v28, v19);
  *a2 = v29;
  a2[1] = v13;
  uint64_t v25 = v27;
  a2[2] = v14;
  a2[3] = v25;
  a2[4] = v17;
  a2[5] = v20;
  a2[6] = v22;
  a2[7] = v23;
  a2[8] = v19;
  return result;
}

uint64_t sub_1004E246C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x64656D7265746E69LL && a2 == 0xEF79654B65746169LL)
  {
    unint64_t v5 = 0xEF79654B65746169LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656D7265746E69LL, 0xEF79654B65746169LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x654B63696C627570LL && a2 == 0xE900000000000079LL)
  {
    unint64_t v7 = 0xE900000000000079LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B63696C627570LL, 0xE900000000000079LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x4B65746176697270LL && a2 == 0xEA00000000007965LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007965LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4B65746176697270LL, 0xEA00000000007965LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1004E25FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B1D68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004E3AB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DiversifiedRootKeys.CodingKeys,  &type metadata for DiversifiedRootKeys.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v32 = 0;
  unint64_t v12 = sub_10017FA4C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for IntermediateKey,  &v32,  v5,  &type metadata for IntermediateKey,  v12);
  uint64_t v14 = v30;
  unint64_t v13 = v31;
  char v32 = 1;
  sub_100018BE4(v30, v31);
  unint64_t v15 = sub_10017EEEC();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v30,  &type metadata for PublicKey,  &v32,  v5,  &type metadata for PublicKey,  v15);
  uint64_t v28 = v14;
  unint64_t v29 = v13;
  uint64_t v16 = v30;
  char v32 = 2;
  unint64_t v17 = v31;
  sub_10001736C(v30, v31);
  unint64_t v18 = sub_10017EB24();
  uint64_t v27 = 0LL;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for PrivateKey,  &v32,  v5,  &type metadata for PrivateKey,  v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  unint64_t v19 = v31;
  uint64_t v27 = v30;
  uint64_t v20 = v16;
  uint64_t v22 = v28;
  unint64_t v21 = v29;
  sub_100018BE4(v28, v29);
  unint64_t v23 = v17;
  sub_10001736C(v20, v17);
  uint64_t v24 = v27;
  sub_100018BE4(v27, v19);
  sub_100016F9C(v20, v23);
  sub_1000182F0(v22, v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_1000182F0(v22, v21);
  sub_100016F9C(v20, v23);
  uint64_t result = sub_1000182F0(v24, v19);
  *a2 = v22;
  a2[1] = v21;
  a2[2] = v20;
  a2[3] = v23;
  a2[4] = v24;
  a2[5] = v19;
  return result;
}

uint64_t sub_1004E28D4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7865646E69LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6553646572616873LL && a2 == 0xEC00000074657263LL)
  {
    swift_bridgeObjectRelease(0xEC00000074657263LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6553646572616873LL, 0xEC00000074657263LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1004E29D4(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B1DF0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_1004E44B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KeyGenerationHint.CodingKeys,  &type metadata for KeyGenerationHint.CodingKeys,  v9,  v7,  v8);
  if (!v1)
  {
    LOBYTE(v14) = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    char v13 = 1;
    unint64_t v10 = sub_10017F684();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v14,  &type metadata for SharedSecretKey,  &v13,  v3,  &type metadata for SharedSecretKey,  v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

uint64_t sub_1004E2B40(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x654B63696C627570LL && a2 == 0xE900000000000079LL)
  {
    unint64_t v5 = 0xE900000000000079LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B63696C627570LL, 0xE900000000000079LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4B65746176697270LL && a2 == 0xEA00000000007965LL)
  {
    unint64_t v7 = 0xEA00000000007965LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B65746176697270LL, 0xEA00000000007965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6553646572616873LL && a2 == 0xEC00000074657263LL)
  {
    swift_bridgeObjectRelease(0xEC00000074657263LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6553646572616873LL, 0xEC00000074657263LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1004E2CC4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B1D88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1004DDF58();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RootKey.CodingKeys,  &type metadata for RootKey.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v32 = 0;
  unint64_t v12 = sub_10017EEEC();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v30,  &type metadata for PublicKey,  &v32,  v5,  &type metadata for PublicKey,  v12);
  uint64_t v14 = v30;
  unint64_t v13 = v31;
  char v32 = 1;
  sub_10001736C(v30, v31);
  unint64_t v15 = sub_10017EB24();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v30,  &type metadata for PrivateKey,  &v32,  v5,  &type metadata for PrivateKey,  v15);
  uint64_t v28 = v14;
  unint64_t v29 = v13;
  uint64_t v16 = v30;
  char v32 = 2;
  unint64_t v17 = v31;
  sub_10001736C(v30, v31);
  unint64_t v18 = sub_10017F684();
  uint64_t v27 = 0LL;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v30,  &type metadata for SharedSecretKey,  &v32,  v5,  &type metadata for SharedSecretKey,  v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  unint64_t v19 = v31;
  uint64_t v27 = v30;
  uint64_t v20 = v16;
  uint64_t v22 = v28;
  unint64_t v21 = v29;
  sub_10001736C(v28, v29);
  unint64_t v23 = v17;
  sub_10001736C(v20, v17);
  uint64_t v24 = v27;
  sub_10001736C(v27, v19);
  sub_100016F9C(v20, v23);
  sub_100016F9C(v22, v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_100016F9C(v22, v21);
  sub_100016F9C(v20, v23);
  uint64_t result = sub_100016F9C(v24, v19);
  *a2 = v22;
  a2[1] = v21;
  a2[2] = v20;
  a2[3] = v23;
  a2[4] = v24;
  a2[5] = v19;
  return result;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen()
{
  return &type metadata for CollaborativeKeyGen;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v1()
{
  return &type metadata for CollaborativeKeyGen.v1;
}

uint64_t type metadata accessor for CollaborativeKeyGen.v1.OwnerContext()
{
  return objc_opt_self(&OBJC_CLASS____TtCOO12searchpartyd19CollaborativeKeyGen2v112OwnerContext);
}

uint64_t type metadata accessor for CollaborativeKeyGen.v1.ContributorContext()
{
  return objc_opt_self(&OBJC_CLASS____TtCOO12searchpartyd19CollaborativeKeyGen2v118ContributorContext);
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v2()
{
  return &type metadata for CollaborativeKeyGen.v2;
}

uint64_t type metadata accessor for CollaborativeKeyGen.v2.OwnerContext()
{
  return objc_opt_self(&OBJC_CLASS____TtCOO12searchpartyd19CollaborativeKeyGen2v212OwnerContext);
}

uint64_t type metadata accessor for CollaborativeKeyGen.v2.ContributorContext()
{
  return objc_opt_self(&OBJC_CLASS____TtCOO12searchpartyd19CollaborativeKeyGen2v218ContributorContext);
}

ValueMetadata *type metadata accessor for RootKey()
{
  return &type metadata for RootKey;
}

uint64_t destroy for DiversifiedRootKeys(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  if (v2 >> 60 != 15) {
    sub_100016F9C(*a1, v2);
  }
  uint64_t result = sub_100016F9C(a1[2], a1[3]);
  unint64_t v4 = a1[5];
  if (v4 >> 60 != 15) {
    return sub_100016F9C(a1[4], v4);
  }
  return result;
}

uint64_t initializeWithCopy for DiversifiedRootKeys(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v5 = *a2;
    sub_10001736C(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }

  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_10001736C(v6, v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + swift_unknownObjectUnownedDestroy(v0 + 24) = v7;
  char v8 = a2 + 4;
  unint64_t v9 = a2[5];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v10 = *v8;
    sub_10001736C(*v8, v9);
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v9;
  }

  return a1;
}

uint64_t *assignWithCopy for DiversifiedRootKeys(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v5 = *a2;
      sub_10001736C(*a2, a2[1]);
      *a1 = v5;
      a1[1] = v4;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v4 >> 60 == 15)
  {
    sub_1004E3298((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  uint64_t v6 = *a2;
  sub_10001736C(*a2, a2[1]);
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  *a1 = v6;
  a1[1] = v4;
  sub_100016F9C(v7, v8);
LABEL_8:
  uint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  sub_10001736C(v9, v10);
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[3];
  a1[2] = v9;
  a1[3] = v10;
  sub_100016F9C(v11, v12);
  unint64_t v13 = a2 + 4;
  unint64_t v14 = a2[5];
  if ((unint64_t)a1[5] >> 60 != 15)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v16 = *v13;
      sub_10001736C(*v13, v14);
      uint64_t v17 = a1[4];
      unint64_t v18 = a1[5];
      a1[4] = v16;
      a1[5] = v14;
      sub_100016F9C(v17, v18);
      return a1;
    }

    sub_100170B90((uint64_t)(a1 + 4));
    goto LABEL_13;
  }

  if (v14 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v13;
    return a1;
  }

  uint64_t v15 = *v13;
  sub_10001736C(*v13, v14);
  a1[4] = v15;
  a1[5] = v14;
  return a1;
}

uint64_t sub_1004E3298(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for DiversifiedRootKeys(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    sub_1004E3298(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }

  uint64_t v6 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  sub_100016F9C(v6, v4);
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  sub_100016F9C(v7, v8);
  uint64_t v9 = (void *)(a2 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 40);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = *v9;
      *(void *)(a1 + 40) = v11;
      sub_100016F9C(v12, v10);
      return a1;
    }

    sub_100170B90(a1 + 32);
  }

  *(_OWORD *)(a1 + 32) = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for DiversifiedRootKeys(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 24) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 24) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DiversifiedRootKeys(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + swift_unknownObjectUnownedDestroy(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 48) = 0;
    }
    if (a2)
    {
      *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
      *(void *)(result + swift_unknownObjectUnownedDestroy(v0 + 24) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DiversifiedRootKeys()
{
  return &type metadata for DiversifiedRootKeys;
}

uint64_t destroy for InitialPairingInfo(uint64_t *a1)
{
  uint64_t result = sub_100016F9C(a1[4], a1[5]);
  unint64_t v3 = a1[7];
  if (v3 >> 60 != 15) {
    uint64_t result = sub_100016F9C(a1[6], v3);
  }
  unint64_t v4 = a1[9];
  if (v4 >> 60 != 15) {
    return sub_100016F9C(a1[8], v4);
  }
  return result;
}

uint64_t initializeWithCopy for InitialPairingInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_10001736C(v6, v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + swift_unknownObjectUnownedDestroy(v0 + 24) = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_10001736C(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  unint64_t v10 = a2 + 6;
  unint64_t v11 = a2[7];
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
  }

  else
  {
    uint64_t v12 = *v10;
    sub_10001736C(*v10, a2[7]);
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = v11;
  }

  unint64_t v13 = a2 + 8;
  unint64_t v14 = a2[9];
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v13;
  }

  else
  {
    uint64_t v15 = *v13;
    sub_10001736C(*v13, v14);
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v14;
  }

  return a1;
}

uint64_t *assignWithCopy for InitialPairingInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_10001736C(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100016F9C(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_10001736C(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_100016F9C(v14, v15);
  uint64_t v16 = a2 + 6;
  unint64_t v17 = a2[7];
  if ((unint64_t)a1[7] >> 60 == 15)
  {
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v16;
      sub_10001736C(*v16, a2[7]);
      a1[6] = v18;
      a1[7] = v17;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v17 >> 60 == 15)
  {
    sub_1000F79D0((uint64_t)(a1 + 6));
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v16;
    goto LABEL_8;
  }

  uint64_t v19 = *v16;
  sub_10001736C(*v16, a2[7]);
  uint64_t v20 = a1[6];
  unint64_t v21 = a1[7];
  a1[6] = v19;
  a1[7] = v17;
  sub_100016F9C(v20, v21);
LABEL_8:
  uint64_t v22 = a2 + 8;
  unint64_t v23 = a2[9];
  if ((unint64_t)a1[9] >> 60 != 15)
  {
    if (v23 >> 60 != 15)
    {
      uint64_t v25 = *v22;
      sub_10001736C(*v22, v23);
      uint64_t v26 = a1[8];
      unint64_t v27 = a1[9];
      a1[8] = v25;
      a1[9] = v23;
      sub_100016F9C(v26, v27);
      return a1;
    }

    sub_1000F79D0((uint64_t)(a1 + 8));
    goto LABEL_13;
  }

  if (v23 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 4) = *(_OWORD *)v22;
    return a1;
  }

  uint64_t v24 = *v22;
  sub_10001736C(*v22, v23);
  a1[8] = v24;
  a1[9] = v23;
  return a1;
}

uint64_t assignWithTake for InitialPairingInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_100016F9C(v8, v9);
  uint64_t v10 = (_OWORD *)(a2 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  if (v11 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v12 = *(void *)(a2 + 56);
  if (v12 >> 60 == 15)
  {
    sub_1000F79D0(a1 + 48);
LABEL_4:
    *(_OWORD *)(a1 + 48) = *v10;
    goto LABEL_6;
  }

  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)v10;
  *(void *)(a1 + 56) = v12;
  sub_100016F9C(v13, v11);
LABEL_6:
  uint64_t v14 = (void *)(a2 + 64);
  unint64_t v15 = *(void *)(a1 + 72);
  if (v15 >> 60 != 15)
  {
    unint64_t v16 = *(void *)(a2 + 72);
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = *v14;
      *(void *)(a1 + 72) = v16;
      sub_100016F9C(v17, v15);
      return a1;
    }

    sub_1000F79D0(a1 + 64);
  }

  *(_OWORD *)(a1 + 64) = *(_OWORD *)v14;
  return a1;
}

ValueMetadata *type metadata accessor for InitialPairingInfo()
{
  return &type metadata for InitialPairingInfo;
}

ValueMetadata *type metadata accessor for RootKey.CodingKeys()
{
  return &type metadata for RootKey.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CryptoTokenError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1004E3888 + 4 * byte_100805B55[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1004E38BC + 4 * byte_100805B50[v4]))();
}

uint64_t sub_1004E38BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E38C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004E38CCLL);
  }
  return result;
}

uint64_t sub_1004E38D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004E38E0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1004E38E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E38EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CryptoTokenError()
{
  return &type metadata for CryptoTokenError;
}

unint64_t sub_1004E390C()
{
  unint64_t result = qword_1009B1D40;
  if (!qword_1009B1D40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805D74, &type metadata for CryptoTokenError);
    atomic_store(result, (unint64_t *)&qword_1009B1D40);
  }

  return result;
}

unint64_t sub_1004E3954()
{
  unint64_t result = qword_1009B1D48;
  if (!qword_1009B1D48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805E2C, &type metadata for RootKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1D48);
  }

  return result;
}

unint64_t sub_1004E399C()
{
  unint64_t result = qword_1009B1D50;
  if (!qword_1009B1D50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805E54, &type metadata for DiversifiedRootKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1D50);
  }

  return result;
}

unint64_t sub_1004E39E4()
{
  unint64_t result = qword_1009B1D58;
  if (!qword_1009B1D58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805D9C, &type metadata for RootKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1D58);
  }

  return result;
}

unint64_t sub_1004E3A2C()
{
  unint64_t result = qword_1009B1D60;
  if (!qword_1009B1D60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805DC4, &type metadata for RootKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1D60);
  }

  return result;
}

uint64_t sub_1004E3A70(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A1760);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1004E3AB0()
{
  unint64_t result = qword_1009B1D70;
  if (!qword_1009B1D70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008061EC, &type metadata for DiversifiedRootKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1D70);
  }

  return result;
}

uint64_t _s12searchpartyd7RootKeyV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1004E3B40 + 4 * byte_100805B5F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1004E3B74 + 4 * byte_100805B5A[v4]))();
}

uint64_t sub_1004E3B74(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E3B7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004E3B84LL);
  }
  return result;
}

uint64_t sub_1004E3B90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004E3B98LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1004E3B9C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E3BA4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiversifiedRootKeys.CodingKeys()
{
  return &type metadata for DiversifiedRootKeys.CodingKeys;
}

uint64_t destroy for GeneratedTokens(void *a1)
{
  unint64_t v2 = a1[4];
  if (v2 >> 60 != 15) {
    sub_100016F9C(a1[3], v2);
  }
  uint64_t result = sub_100016F9C(a1[5], a1[6]);
  unint64_t v4 = a1[8];
  if (v4 >> 60 != 15) {
    return sub_100016F9C(a1[7], v4);
  }
  return result;
}

uint64_t initializeWithCopy for GeneratedTokens(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  unint64_t v5 = a2[2];
  sub_10001736C(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  uint64_t v6 = a2 + 3;
  unint64_t v7 = a2[4];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + swift_unknownObjectUnownedDestroy(v0 + 24) = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    sub_10001736C(*v6, a2[4]);
    *(void *)(a1 + swift_unknownObjectUnownedDestroy(v0 + 24) = v8;
    *(void *)(a1 + 32) = v7;
  }

  uint64_t v9 = a2[5];
  unint64_t v10 = a2[6];
  sub_10001736C(v9, v10);
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  unint64_t v11 = a2 + 7;
  unint64_t v12 = a2[8];
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v11;
  }

  else
  {
    uint64_t v13 = *v11;
    sub_10001736C(*v11, v12);
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v12;
  }

  return a1;
}

void *assignWithCopy for GeneratedTokens(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  sub_10001736C(v4, v5);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a2 + 3;
  unint64_t v9 = a2[4];
  if (a1[4] >> 60 == 15LL)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *v8;
      sub_10001736C(*v8, a2[4]);
      a1[3] = v10;
      a1[4] = v9;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v9 >> 60 == 15)
  {
    sub_1004E3298((uint64_t)(a1 + 3));
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v8;
    goto LABEL_8;
  }

  uint64_t v11 = *v8;
  sub_10001736C(*v8, a2[4]);
  uint64_t v12 = a1[3];
  unint64_t v13 = a1[4];
  a1[3] = v11;
  a1[4] = v9;
  sub_100016F9C(v12, v13);
LABEL_8:
  uint64_t v14 = a2[5];
  unint64_t v15 = a2[6];
  sub_10001736C(v14, v15);
  uint64_t v16 = a1[5];
  unint64_t v17 = a1[6];
  a1[5] = v14;
  a1[6] = v15;
  sub_100016F9C(v16, v17);
  uint64_t v18 = a2 + 7;
  unint64_t v19 = a2[8];
  if (a1[8] >> 60 != 15LL)
  {
    if (v19 >> 60 != 15)
    {
      uint64_t v21 = *v18;
      sub_10001736C(*v18, v19);
      uint64_t v22 = a1[7];
      unint64_t v23 = a1[8];
      a1[7] = v21;
      a1[8] = v19;
      sub_100016F9C(v22, v23);
      return a1;
    }

    sub_100170B90((uint64_t)(a1 + 7));
    goto LABEL_13;
  }

  if (v19 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 7) = *(_OWORD *)v18;
    return a1;
  }

  uint64_t v20 = *v18;
  sub_10001736C(*v18, v19);
  a1[7] = v20;
  a1[8] = v19;
  return a1;
}

uint64_t assignWithTake for GeneratedTokens(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  sub_100016F9C(v5, v6);
  unint64_t v7 = (_OWORD *)(a2 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  if (v8 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v9 = *(void *)(a2 + 32);
  if (v9 >> 60 == 15)
  {
    sub_1004E3298(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + swift_unknownObjectUnownedDestroy(v0 + 24) = *v7;
    goto LABEL_6;
  }

  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_unknownObjectUnownedDestroy(v0 + 24) = *(void *)v7;
  *(void *)(a1 + 32) = v9;
  sub_100016F9C(v10, v8);
LABEL_6:
  uint64_t v11 = *(void *)(a1 + 40);
  unint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_100016F9C(v11, v12);
  unint64_t v13 = (void *)(a2 + 56);
  unint64_t v14 = *(void *)(a1 + 64);
  if (v14 >> 60 != 15)
  {
    unint64_t v15 = *(void *)(a2 + 64);
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = *v13;
      *(void *)(a1 + 64) = v15;
      sub_100016F9C(v16, v14);
      return a1;
    }

    sub_100170B90(a1 + 56);
  }

  *(_OWORD *)(a1 + 56) = *(_OWORD *)v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for GeneratedTokens(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GeneratedTokens(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + swift_unknownObjectUnownedDestroy(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 72) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0LL;
      *(void *)(result + swift_weakDestroy(v0 + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GeneratedTokens()
{
  return &type metadata for GeneratedTokens;
}

void *sub_1004E4018(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  sub_10001736C(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for KeyGenerationHint(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  unint64_t v4 = a2[2];
  sub_10001736C(v3, v4);
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  sub_100016F9C(v5, v6);
  return a1;
}

uint64_t assignWithTake for KeyGenerationHint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_100016F9C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyGenerationHint(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for KeyGenerationHint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + swift_unknownObjectUnownedDestroy(v0 + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + swift_unknownObjectUnownedDestroy(v0 + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0LL;
      *(void *)(result + swift_weakDestroy(v0 + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationHint()
{
  return &type metadata for KeyGenerationHint;
}

unint64_t sub_1004E41A0()
{
  unint64_t result = qword_1009B1D90;
  if (!qword_1009B1D90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805FC4, &type metadata for KeyGenerationHint);
    atomic_store(result, (unint64_t *)&qword_1009B1D90);
  }

  return result;
}

unint64_t sub_1004E41E8()
{
  unint64_t result = qword_1009B1D98;
  if (!qword_1009B1D98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080607C, &type metadata for GeneratedTokens);
    atomic_store(result, (unint64_t *)&qword_1009B1D98);
  }

  return result;
}

unint64_t sub_1004E4230()
{
  unint64_t result = qword_1009B1DA0;
  if (!qword_1009B1DA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008061C4, &type metadata for DiversifiedRootKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1DA0);
  }

  return result;
}

unint64_t sub_1004E4278()
{
  unint64_t result = qword_1009B1DA8;
  if (!qword_1009B1DA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806134, &type metadata for DiversifiedRootKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1DA8);
  }

  return result;
}

unint64_t sub_1004E42C0()
{
  unint64_t result = qword_1009B1DB0;
  if (!qword_1009B1DB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080615C, &type metadata for DiversifiedRootKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1DB0);
  }

  return result;
}

uint64_t sub_1004E4304(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004E4330(uint64_t a1)
{
  return a1;
}

unint64_t sub_1004E435C()
{
  unint64_t result = qword_1009B1DC0;
  if (!qword_1009B1DC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008063FC, &type metadata for GeneratedTokens.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1DC0);
  }

  return result;
}

unint64_t sub_1004E43A0()
{
  unint64_t result = qword_1009B1DC8;
  if (!qword_1009B1DC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806014, &type metadata for KeyGenerationHint);
    atomic_store(result, (unint64_t *)&qword_1009B1DC8);
  }

  return result;
}

unint64_t sub_1004E43E4()
{
  unint64_t result = qword_1009B1DD0;
  if (!qword_1009B1DD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805EA4, &type metadata for DiversifiedRootKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1DD0);
  }

  return result;
}

unint64_t sub_1004E4428()
{
  unint64_t result = qword_1009B1DE0;
  if (!qword_1009B1DE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805FEC, &type metadata for KeyGenerationHint);
    atomic_store(result, (unint64_t *)&qword_1009B1DE0);
  }

  return result;
}

unint64_t sub_1004E446C()
{
  unint64_t result = qword_1009B1DE8;
  if (!qword_1009B1DE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805E7C, &type metadata for DiversifiedRootKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1DE8);
  }

  return result;
}

unint64_t sub_1004E44B0()
{
  unint64_t result = qword_1009B1DF8;
  if (!qword_1009B1DF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008063AC, &type metadata for KeyGenerationHint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1DF8);
  }

  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationHint.CodingKeys()
{
  return &type metadata for KeyGenerationHint.CodingKeys;
}

uint64_t _s12searchpartyd17KeyGenerationHintV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1004E4554 + 4 * byte_100805B69[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004E4588 + 4 * byte_100805B64[v4]))();
}

uint64_t sub_1004E4588(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E4590(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004E4598LL);
  }
  return result;
}

uint64_t sub_1004E45A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004E45ACLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1004E45B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E45B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GeneratedTokens.CodingKeys()
{
  return &type metadata for GeneratedTokens.CodingKeys;
}

unint64_t sub_1004E45D8()
{
  unint64_t result = qword_1009B1E08;
  if (!qword_1009B1E08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008062CC, &type metadata for GeneratedTokens.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1E08);
  }

  return result;
}

unint64_t sub_1004E4620()
{
  unint64_t result = qword_1009B1E10;
  if (!qword_1009B1E10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806384, &type metadata for KeyGenerationHint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1E10);
  }

  return result;
}

unint64_t sub_1004E4668()
{
  unint64_t result = qword_1009B1E18;
  if (!qword_1009B1E18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008062F4, &type metadata for KeyGenerationHint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1E18);
  }

  return result;
}

unint64_t sub_1004E46B0()
{
  unint64_t result = qword_1009B1E20;
  if (!qword_1009B1E20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080631C, &type metadata for KeyGenerationHint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1E20);
  }

  return result;
}

unint64_t sub_1004E46F8()
{
  unint64_t result = qword_1009B1E28;
  if (!qword_1009B1E28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080623C, &type metadata for GeneratedTokens.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1E28);
  }

  return result;
}

unint64_t sub_1004E4740()
{
  unint64_t result = qword_1009B1E30;
  if (!qword_1009B1E30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806264, &type metadata for GeneratedTokens.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B1E30);
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryTXPowerResponsePayload()
{
  return &type metadata for AccessoryTXPowerResponsePayload;
}

uint64_t sub_1004E4794(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100012ED8(a1, v1);
  dispatch thunk of BinaryEncoding.container()(v12, v1, v2);
  unint64_t v3 = sub_10028AF4C();
  uint64_t v4 = FixedWidthInteger.data.getter(&type metadata for Int8, v3);
  unint64_t v6 = v5;
  v11[0] = v4;
  v11[1] = v5;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  sub_100037298((uint64_t)v12, v13);
  unint64_t v9 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v11, &type metadata for Data, v9, v7, v8);
  sub_100016F9C(v4, v6);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_1004E4868@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1004E4918(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1004E4890(void *a1)
{
  return sub_1004E4794(a1);
}

unint64_t sub_1004E48A8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1004E48D4();
  unint64_t result = sub_1000F5044();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1004E48D4()
{
  unint64_t result = qword_1009B1E38;
  if (!qword_1009B1E38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806470, &type metadata for AccessoryTXPowerResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B1E38);
  }

  return result;
}

uint64_t sub_1004E4918(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v3);
  unint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100012ED8(a1, v6);
  dispatch thunk of BinaryDecoding.container()(&v20[8], v6, v7);
  uint64_t v8 = v21;
  uint64_t v9 = v22;
  uint64_t v10 = sub_100037298((uint64_t)&v20[8], v21);
  uint64_t v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v8, v9);
  if (!v1)
  {
    uint64_t v13 = v11;
    unint64_t v14 = v12;
    uint64_t v15 = sub_10001736C(v11, v12);
    static Endianness.current.getter(v15);
    sub_10028AF4C();
    FixedWidthInteger.init(data:ofEndianness:)(&v20[6], v13, v14, v5);
    if (v20[7] != 1)
    {
      uint64_t v10 = v20[6];
      sub_100016F9C(v13, v14);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v20[8]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v10;
    }

    uint64_t v10 = type metadata accessor for BinaryDecodingError(0LL);
    unint64_t v16 = sub_1001C1808();
    swift_allocError(v10, v16, 0LL, 0LL);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104LL))( v17,  enum case for BinaryDecodingError.decodingError(_:),  v10);
    swift_willThrow(v18);
    sub_100016F9C(v13, v14);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v20[8]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10;
}

uint64_t sub_1004E4ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(void *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      BOOL v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      unint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          uint64_t v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_1004E4BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::Int v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16)
    && (uint64_t v7 = *(void *)(a2 + 40),
        v8 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID),  uint64_t v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8),  v10 = -1LL << *(_BYTE *)(a2 + 32),  v11 = v9 & ~v10,  ((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0))
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v19 + 72);
    unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(void *)(a2 + 48) + v13 * v11, v4);
      uint64_t v15 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

BOOL sub_1004E4D74(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  Swift::UInt v3 = a1;
  Hasher.init(_seed:)(v13, *(void *)(a2 + 40));
  Hasher._combine(_:)(v3);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == (_DWORD)v3;
    if (v12 == (_DWORD)v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_1004E4E60(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), a1);
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1LL;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1004E4F28(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)(v8, *(void *)(a2 + 40));
    uint64_t v4 = sub_100794CB8(a1);
    String.hash(into:)(v8, v4, v5);
    swift_bridgeObjectRelease();
    unint64_t v6 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(a2 + 32));
    if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0) {
      __asm { BR              X9 }
    }
  }

  return 0LL;
}

BOOL sub_1004E55A0(char a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)(v14, *(void *)(a2 + 40));
  Swift::UInt v4 = qword_100806A08[a1];
  Hasher._combine(_:)(v4);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v7 = v5 & ~v6;
  uint64_t v8 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
    return 0LL;
  }
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v11 = ~v6;
  unint64_t v12 = (v7 + 1) & v11;
  if (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    return 0LL;
  }
  do
  {
    uint64_t v13 = qword_100806A08[*(char *)(v9 + v12)];
    BOOL result = v13 == v4;
    if (v13 == v4) {
      break;
    }
    unint64_t v12 = (v12 + 1) & v11;
  }

  while (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
  return result;
}

BOOL sub_1004E56A8(char a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)(v14, *(void *)(a2 + 40));
  Swift::UInt32 v4 = dword_1008069B0[a1];
  Hasher._combine(_:)(v4);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v7 = v5 & ~v6;
  uint64_t v8 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
    return 0LL;
  }
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v11 = ~v6;
  unint64_t v12 = (v7 + 1) & v11;
  if (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    return 0LL;
  }
  do
  {
    int v13 = dword_1008069B0[*(char *)(v9 + v12)];
    BOOL result = v13 == v4;
    if (v13 == v4) {
      break;
    }
    unint64_t v12 = (v12 + 1) & v11;
  }

  while (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
  return result;
}

uint64_t sub_1004E57AC(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a4 + 16)) {
    return 0LL;
  }
  Swift::UInt v7 = a1;
  Hasher.init(_seed:)(v19, *(void *)(a4 + 40));
  Hasher._combine(_:)(v7);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v19, a2, a3);
  swift_bridgeObjectRelease(a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(a4 + 32);
  unint64_t v10 = v8 & ~v9;
  uint64_t v11 = a4 + 56;
  if (((*(void *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
    return 0LL;
  }
  uint64_t v12 = ~v9;
  uint64_t v13 = *(void *)(a4 + 48);
  while (1)
  {
    unint64_t v14 = (unsigned __int8 *)(v13 + 24 * v10);
    if (*v14 == (_DWORD)v7)
    {
      uint64_t v15 = *((void *)v14 + 1);
      uint64_t v16 = *((void *)v14 + 2);
      BOOL v17 = v15 == a2 && v16 == a3;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a2, a3, 0LL) & 1) != 0) {
        break;
      }
    }

    unint64_t v10 = (v10 + 1) & v12;
    if (((*(void *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t sub_1004E58D0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a2 + 40);
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v7 = v6;
    Hasher.init(_seed:)(v30, v4);
    String.hash(into:)(v30, v5, v7);
    Swift::Int v8 = Hasher._finalize()();
    swift_bridgeObjectRelease(v7);
    uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v10 = v8 & ~v9;
    uint64_t v11 = a2 + 56;
    if (((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(a2 + 48) + 8 * v10));
      uint64_t v14 = v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v12 == v15 && v14 == v16)
      {
LABEL_17:
        swift_bridgeObjectRelease_n(v14, 2LL);
        goto LABEL_18;
      }

      uint64_t v18 = v16;
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0LL);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v18);
      if ((v19 & 1) != 0)
      {
LABEL_18:
        char v28 = 1;
        return v28 & 1;
      }

      uint64_t v20 = ~v9;
      unint64_t v21 = (v10 + 1) & v20;
      if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0)
      {
        while (1)
        {
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(a2 + 48) + 8 * v21));
          uint64_t v14 = v23;
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v22 == v24 && v14 == v25) {
            break;
          }
          uint64_t v27 = v25;
          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v14, v24, v25, 0LL);
          swift_bridgeObjectRelease(v14);
          swift_bridgeObjectRelease(v27);
          if ((v28 & 1) == 0)
          {
            unint64_t v21 = (v21 + 1) & v20;
            if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
              continue;
            }
          }

          return v28 & 1;
        }

        goto LABEL_17;
      }
    }
  }

  char v28 = 0;
  return v28 & 1;
}

BOOL sub_1004E5A94(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  int v3 = a1;
  uint64_t v4 = static Hasher._hash(seed:bytes:count:)(*(void *)(a2 + 40), a1, 1LL);
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == v3;
    if (v12 == v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_1004E5B60(unsigned int a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = static Hasher._hash(seed:bytes:count:)(*(void *)(a2 + 40), a1, 4LL);
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(_DWORD *)(v8 + 4 * v6) == a1) {
    return 1LL;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    int v12 = *(_DWORD *)(v8 + 4 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

void sub_1004E5C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v70 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v55 = &v54[-v9];
  __chkstk_darwin(v8);
  uint64_t v69 = &v54[-v10];
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v64 = &v54[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v12);
  uint64_t v15 = &v54[-v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v56 = a1 + 56;
  uint64_t v17 = 1LL << *(_BYTE *)(a1 + 32);
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v16;
  int64_t v57 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v20 = 0LL;
  __int128 v59 = xmmword_1007E67D0;
  uint64_t v61 = a2;
  uint64_t v62 = a1;
  uint64_t v73 = v5;
  unint64_t v60 = v15;
  while (1)
  {
    if (v19)
    {
      uint64_t v68 = (v19 - 1) & v19;
      unint64_t v22 = __clz(__rbit64(v19)) | (v20 << 6);
      goto LABEL_25;
    }

    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
      goto LABEL_38;
    }

    if (v23 >= v57) {
      goto LABEL_35;
    }
    unint64_t v24 = *(void *)(v56 + 8 * v23);
    ++v20;
    if (!v24)
    {
      int64_t v20 = v23 + 1;
      if (v23 + 1 >= v57) {
        goto LABEL_35;
      }
      unint64_t v24 = *(void *)(v56 + 8 * v20);
      if (!v24)
      {
        int64_t v20 = v23 + 2;
        if (v23 + 2 >= v57) {
          goto LABEL_35;
        }
        unint64_t v24 = *(void *)(v56 + 8 * v20);
        if (!v24)
        {
          int64_t v20 = v23 + 3;
          if (v23 + 3 >= v57) {
            goto LABEL_35;
          }
          unint64_t v24 = *(void *)(v56 + 8 * v20);
          if (!v24) {
            break;
          }
        }
      }
    }

uint64_t sub_1004E6208@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v30[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v30[-v10];
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  uint64_t v32 = 0x7365547265646E75LL;
  unint64_t v33 = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v31, &v32, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
  {
    id v12 = [objc_allocWithZone(NSProcessInfo) init];
    unsigned int v13 = [v12 processIdentifier];

    uint64_t v32 = 0LL;
    unint64_t v33 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(31LL);
    uint64_t v14 = NSTemporaryDirectory();
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();

    uint64_t v32 = v15;
    unint64_t v33 = v17;
    v18._countAndFlagsBits = 0x2D7473657463782FLL;
    v18._object = (void *)0xE800000000000000LL;
    String.append(_:)(v18);
    unsigned int v31 = v13;
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x8000000100866B00LL;
    v20._countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v20);
    if (qword_10099B548 != -1) {
      swift_once(&qword_10099B548, sub_100515B90);
    }
    uint64_t v21 = type metadata accessor for UUID(0LL);
    sub_10000A720(v21, (uint64_t)qword_1009B1E40);
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    URL.init(fileURLWithPath:isDirectory:)(v32, v33, 1LL);
    return swift_bridgeObjectRelease();
  }

  else
  {
    id v25 = [(id)objc_opt_self(NSFileManager) defaultManager];
    uint64_t v26 = 1LL;
    id v27 = [v25 URLsForDirectory:5 inDomains:1];

    uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v5);
    if (*(void *)(v28 + 16))
    {
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v6 + 16))( v4,  v28 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)),  v5);
      uint64_t v26 = 0LL;
    }

    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v26, 1LL, v5);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
    {
      sub_100015794((uint64_t)v4, (uint64_t *)&unk_1009A34D0);
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000031LL,  0x8000000100866AC0LL,  "searchpartyd/BeaconStore.swift",  30LL,  2LL,  2851LL,  0);
      __break(1u);
    }

    else
    {
      unint64_t v29 = *(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32);
      v29((uint64_t)v11, v4, v5);
      URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001DLL, 0x80000001008507F0LL, 1LL);
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
      return v29(a1, v9, v5);
    }
  }

  return result;
}

uint64_t sub_1004E6660@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v10 = [v9 isInternalBuild];

  if (!v10) {
    return static Date.trustedNow.getter(a1);
  }
  id v11 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 stringForKey:v12];

  if (!v13) {
    return static Date.trustedNow.getter(a1);
  }
  id v14 = [objc_allocWithZone(NSISO8601DateFormatter) init];
  id v15 = [v14 dateFromString:v13];

  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1LL, 1LL, v2);
    goto LABEL_9;
  }

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v15);

  unint64_t v16 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v16(v8, v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0LL, 1LL, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v2) == 1)
  {
LABEL_9:
    sub_100015794((uint64_t)v8, (uint64_t *)&unk_10099D720);
    return static Date.trustedNow.getter(a1);
  }

  uint64_t v17 = ((uint64_t (*)(uint64_t, char *, uint64_t))v16)(a1, v8, v2);
  uint64_t v18 = static os_log_type_t.error.getter(v17);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v19 = qword_100A2B018;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
  *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v22 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v2, v22);
  uint64_t v25 = v24;
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = sub_1000226F4();
  *(void *)(v21 + 32) = v23;
  *(void *)(v21 + 40) = v25;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Forced pairing date: %@", 23LL, 2LL, v21);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004E696C(unsigned __int8 a1)
{
  uint64_t v2 = sub_1006F1230((uint64_t)&off_100932740);
  BOOL v3 = sub_1004E4D74(a1, v2);
  swift_bridgeObjectRelease();
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2AC98);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc(18LL, -1LL);
    *(_DWORD *)uint64_t v8 = 134218240;
    uint64_t v14 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 1024;
    LODWORD(v14) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, (char *)&v14 + 4, v8 + 14, v8 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Posting SPBeaconsChangedNotification for reason %ld, bypass rate-limit %{BOOL}d",  (uint8_t *)v8,  0x12u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(v3);
  uint64_t v9 = sub_1006F1230((uint64_t)&off_100932770);
  BOOL v10 = sub_1004E4D74(a1, v9);
  swift_bridgeObjectRelease();
  if (v10) {
    sub_10054ECBC();
  }
  uint64_t v11 = sub_1006F1230((uint64_t)&off_100932798);
  BOOL v12 = sub_1004E4D74(a1, v11);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12)
  {
    type metadata accessor for Transaction(0LL);
    return static Transaction.asyncTask(name:block:)("BeaconStore.taskInfoStateChanged", 32LL, 2LL, &unk_1009B2788, 0LL);
  }

  return result;
}

uint64_t sub_1004E6B70()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  BOOL v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v4 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  BOOL v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  uint64_t v11 = (void *)static OS_dispatch_queue.global(qos:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = sub_10056528C;
  uint64_t v23 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_100960ED0;
  BOOL v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v16 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v1, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v6, v3, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v19);
  swift_release(v23);
  type metadata accessor for Transaction(0LL);
  return static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B27B8,  0LL);
}

uint64_t sub_1004E6DFC(id *a1, uint64_t a2)
{
  uint64_t v74 = sub_100004AEC((uint64_t *)&unk_10099D760);
  __chkstk_darwin(v74);
  uint64_t v75 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v73 = (uint64_t)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v72 = (uint64_t)&v71 - v10;
  __chkstk_darwin(v9);
  uint64_t v76 = (uint64_t)&v71 - v11;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v80 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = (int *)type metadata accessor for ShareRecord(0LL);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a2, (uint64_t)v21, v22);
  id v78 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v78);
  uint64_t v23 = v19[6];
  uint64_t v79 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v2 + v23, v15);
  uint64_t v24 = &v21[v19[6]];
  uint64_t v25 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v24, v15, v25);
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if ((v26 & 1) == 0)
  {
    uint64_t v28 = UUID.uuidString.getter(v27);
    *((void *)&v82 + 1) = &type metadata for String;
    uint64_t v83 = &protocol witness table for String;
    *(void *)&__int128 v81 = v28;
    *((void *)&v81 + 1) = v29;
    CKRecordKeyValueSetting.subscript.setter(&v81, 0xD000000000000010LL, 0x800000010084D8A0LL, ObjectType);
  }

  uint64_t v31 = v79;
  uint64_t v30 = v80;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
  v32(v14, v79 + v19[7], v12);
  unint64_t v33 = &v21[v19[7]];
  uint64_t v71 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v33, v12, v71);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v14, v12);
  if ((v34 & 1) == 0)
  {
    *((void *)&v82 + 1) = v12;
    uint64_t v83 = &protocol witness table for Date;
    char v36 = (char *)sub_10000A7C8(&v81);
    v32(v36, (uint64_t)v33, v12);
    CKRecordKeyValueSetting.subscript.setter(&v81, 0x7461446572616873LL, 0xE900000000000065LL, ObjectType);
  }

  uint64_t v37 = v76;
  sub_10001581C(v31 + v19[8], v76, (uint64_t *)&unk_10099D720);
  uint64_t v38 = (uint64_t)&v21[v19[8]];
  uint64_t v39 = v75;
  uint64_t v40 = v75 + *(int *)(v74 + 48);
  sub_10001581C(v37, v75, (uint64_t *)&unk_10099D720);
  uint64_t v41 = v39;
  sub_10001581C(v38, v40, (uint64_t *)&unk_10099D720);
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
  if (v42(v41, 1LL, v12) == 1)
  {
    sub_100015794(v37, (uint64_t *)&unk_10099D720);
    if (v42(v40, 1LL, v12) == 1)
    {
      sub_100015794(v41, (uint64_t *)&unk_10099D720);
      uint64_t v44 = ObjectType;
      id v43 = v78;
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v45 = v41;
    uint64_t v46 = v41;
    uint64_t v47 = v72;
    sub_10001581C(v45, v72, (uint64_t *)&unk_10099D720);
    if (v42(v40, 1LL, v12) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v14, v40, v12);
      LODWORD(v74) = dispatch thunk of static Equatable.== infix(_:_:)(v47, v14, v12, v71);
      v35(v14, v12);
      sub_100015794(v76, (uint64_t *)&unk_10099D720);
      v35((char *)v47, v12);
      sub_100015794(v46, (uint64_t *)&unk_10099D720);
      uint64_t v44 = ObjectType;
      id v43 = v78;
      if ((v74 & 1) != 0) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }

    sub_100015794(v76, (uint64_t *)&unk_10099D720);
    v35((char *)v47, v12);
    uint64_t v41 = v46;
  }

  sub_100015794(v41, (uint64_t *)&unk_10099D760);
  uint64_t v44 = ObjectType;
  id v43 = v78;
LABEL_12:
  uint64_t v48 = v73;
  sub_10001581C(v38, v73, (uint64_t *)&unk_10099D720);
  if (v42(v48, 1LL, v12) == 1)
  {
    sub_100015794(v48, (uint64_t *)&unk_10099D720);
    __int128 v81 = 0u;
    __int128 v82 = 0u;
    uint64_t v83 = 0LL;
  }

  else
  {
    *((void *)&v82 + 1) = v12;
    uint64_t v83 = &protocol witness table for Date;
    uint64_t v49 = sub_10000A7C8(&v81);
    (*(void (**)(void *, uint64_t, uint64_t))(v80 + 32))(v49, v48, v12);
  }

  CKRecordKeyValueSetting.subscript.setter(&v81, 0x6974617269707865LL, 0xEA00000000006E6FLL, v44);
LABEL_16:
  uint64_t v50 = v19[9];
  uint64_t v51 = v79;
  int v52 = *(unsigned __int8 *)(v79 + v50);
  uint64_t v54 = *(void *)(v79 + v50 + 8);
  uint64_t v53 = *(void *)(v79 + v50 + 16);
  unint64_t v55 = &v21[v50];
  if (v52 != *v55
    || ((uint64_t v56 = *((void *)v55 + 1), v57 = *((void *)v55 + 2), v54 != v56) || v53 != v57)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v54, v53, v56, v57, 0LL) & 1) == 0)
  {
    *((void *)&v82 + 1) = &type metadata for String;
    uint64_t v83 = &protocol witness table for String;
    *(void *)&__int128 v81 = v54;
    *((void *)&v81 + 1) = v53;
    swift_bridgeObjectRetain(v53);
    CKRecordKeyValueSetting.subscript.setter(&v81, 0x6148656572616873LL, 0xEC000000656C646ELL, v44);
  }

  uint64_t v58 = v19[10];
  uint64_t v59 = *(void *)(v51 + v58);
  uint64_t v60 = *(void *)(v51 + v58 + 8);
  uint64_t v61 = &v21[v58];
  uint64_t v63 = *(void *)v61;
  uint64_t v62 = *((void *)v61 + 1);
  if ((v59 != *(void *)v61 || v60 != v62)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, *(void *)v61, *((void *)v61 + 1), 0LL) & 1) == 0)
  {
    *((void *)&v82 + 1) = &type metadata for String;
    uint64_t v83 = &protocol witness table for String;
    *(void *)&__int128 v81 = v63;
    *((void *)&v81 + 1) = v62;
    swift_bridgeObjectRetain(v62);
    CKRecordKeyValueSetting.subscript.setter(&v81, 0xD000000000000015LL, 0x800000010084DA30LL, v44);
  }

  uint64_t v64 = v19[11];
  uint64_t v65 = *(void *)(v51 + v64);
  uint64_t v66 = *(void *)&v21[v64];
  if (v65 != v66)
  {
    *((void *)&v82 + 1) = &type metadata for UInt64;
    uint64_t v83 = &protocol witness table for UInt64;
    *(void *)&__int128 v81 = v66;
    CKRecordKeyValueSetting.subscript.setter(&v81, 0xD000000000000011LL, 0x80000001008517B0LL, v44);
  }

  uint64_t v67 = v19[12];
  uint64_t v68 = qword_1008069E8[*(char *)(v51 + v67)];
  uint64_t v69 = qword_1008069E8[v21[v67]];
  if (v68 == v69)
  {
    sub_100018C68((uint64_t)v21, type metadata accessor for ShareRecord);
    return swift_unknownObjectRelease(v43);
  }

  else
  {
    *((void *)&v82 + 1) = &type metadata for Int;
    uint64_t v83 = &protocol witness table for Int;
    *(void *)&__int128 v81 = v69;
    CKRecordKeyValueSetting.subscript.setter(&v81, 0x7079546572616873LL, 0xE900000000000065LL, v44);
    swift_unknownObjectRelease(v43);
    return sub_100018C68((uint64_t)v21, type metadata accessor for ShareRecord);
  }

void *sub_1004E7578(uint64_t a1)
{
  return sub_1004E75B0( a1,  type metadata accessor for OwnedBeaconRecord,  (unint64_t *)&qword_10099D000,  (uint64_t)&unk_10080B120);
}

void *sub_1004E7594(uint64_t a1)
{
  return sub_1004E75B0(a1, type metadata accessor for SharedBeaconRecord, &qword_10099CFF8, (uint64_t)&unk_10081ADAC);
}

void *sub_1004E75B0(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v7 = a2(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - v9;
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v24 = _swiftEmptyArrayStorage;
    sub_100032928(0, v11, 0);
    uint64_t v12 = v24;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v14 = *(void *)(v8 + 72);
    do
    {
      sub_10001DC4C(v13, (uint64_t)v10, a2);
      uint64_t v24 = v12;
      unint64_t v16 = v12[2];
      unint64_t v15 = v12[3];
      if (v16 >= v15 >> 1)
      {
        sub_100032928(v15 > 1, v16 + 1, 1);
        uint64_t v12 = v24;
      }

      uint64_t v22 = v7;
      uint64_t v23 = sub_100007864(a3, a2, v20);
      uint64_t v17 = sub_10000A7C8(&v21);
      sub_10001DC4C((uint64_t)v10, (uint64_t)v17, a2);
      v12[2] = v16 + 1;
      sub_100012EC0(&v21, (uint64_t)&v12[5 * v16 + 4]);
      sub_100018C68((uint64_t)v10, a2);
      v13 += v14;
      --v11;
    }

    while (v11);
  }

  return v12;
}

void *sub_1004E7720(uint64_t a1)
{
  return sub_1004E7FA4( a1,  type metadata accessor for SPCachedAdvertisement,  (void (*)(BOOL, unint64_t, uint64_t))sub_100032B40,  (uint64_t)&off_10093F580,  (void (*)(void *, void *))sub_100012EC0);
}

void *sub_1004E7744(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100032C38(0, v1, 0);
    BOOL v3 = (void **)(a1 + 32);
    type metadata accessor for SPPairingSessionError(0LL);
    uint64_t v5 = v4;
    uint64_t v6 = sub_100007864( &qword_10099BF68,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3148);
    do
    {
      uint64_t v7 = *v3;
      uint64_t v8 = swift_allocError(v5, v6, 0LL, 0LL);
      *uint64_t v9 = v7;
      id v10 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_100032C38(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_100032C38(v11 > 1, v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      _swiftEmptyArrayStorage[v12 + 4] = v8;
      ++v3;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_1004E7878(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  BOOL v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100032C70(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        uint64_t v6 = sub_100022898(0LL, &qword_1009A6000, &OBJC_CLASS___IDSDevice_ptr);
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7LL);
        BOOL v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_100032C70(0, v3[2] + 1LL, 1);
          BOOL v3 = v17;
        }

        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_100032C70(v7 > 1, v8 + 1, 1);
          BOOL v3 = v17;
        }

        v3[2] = v8 + 1;
        sub_10006A358(v16, &v3[4 * v8 + 4]);
      }
    }

    else
    {
      uint64_t v9 = (id *)(a1 + 32);
      uint64_t v10 = sub_100022898(0LL, &qword_1009A6000, &OBJC_CLASS___IDSDevice_ptr);
      do
      {
        id v15 = *v9;
        id v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7LL);
        BOOL v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_100032C70(0, v3[2] + 1LL, 1);
          BOOL v3 = v17;
        }

        unint64_t v13 = v3[2];
        unint64_t v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_100032C70(v12 > 1, v13 + 1, 1);
          BOOL v3 = v17;
        }

        v3[2] = v13 + 1;
        sub_10006A358(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }

      while (v2);
    }

    return (uint64_t)v3;
  }

  __break(1u);
  return result;
}

void *sub_1004E7AD8(uint64_t a1)
{
  return sub_1004E7FA4( a1,  type metadata accessor for BeaconEstimatedLocation,  (void (*)(BOOL, unint64_t, uint64_t))sub_100032CE0,  (uint64_t)&off_10093F780,  (void (*)(void *, void *))sub_100012EC0);
}

void *sub_1004E7AFC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v11 = _swiftEmptyArrayStorage;
    sub_100032C70(0, v1, 0);
    uint64_t v4 = (char *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      char v5 = *v4++;
      char v9 = v5;
      swift_dynamicCast(v10, &v9, &type metadata for LocationSource, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100032C70(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_100032C70(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      _OWORD v2[2] = v7 + 1;
      sub_10006A358(v10, &v2[4 * v7 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *sub_1004E7C18(uint64_t a1)
{
  return sub_1004E7FA4( a1,  type metadata accessor for OwnedBeaconGroup,  (void (*)(BOOL, unint64_t, uint64_t))sub_100032D38,  (uint64_t)&off_100947888,  (void (*)(void *, void *))sub_100012EC0);
}

void *sub_1004E7C3C(uint64_t a1)
{
  return sub_1004E7FA4( a1,  type metadata accessor for SharedBeaconGroup,  (void (*)(BOOL, unint64_t, uint64_t))sub_100032D38,  (uint64_t)&off_100941408,  (void (*)(void *, void *))sub_100012EC0);
}

void *sub_1004E7C60(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v30 = _swiftEmptyArrayStorage;
    sub_100032EA4(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (unint64_t *)(a1 + 64);
    do
    {
      uint64_t v6 = *(v4 - 3);
      uint64_t v5 = *(v4 - 2);
      uint64_t v7 = *(v4 - 1);
      unint64_t v8 = *v4;
      v20[0] = *((_BYTE *)v4 - 32);
      uint64_t v21 = v6;
      uint64_t v22 = v5;
      uint64_t v23 = v7;
      unint64_t v24 = v8;
      swift_bridgeObjectRetain(v5);
      sub_100018BE4(v7, v8);
      uint64_t v9 = sub_100004AEC(&qword_10099D4E0);
      uint64_t v10 = sub_100004AEC(&qword_10099D4D0);
      swift_dynamicCast(v25, v20, v9, v10, 7LL);
      char v11 = v25[0];
      uint64_t v12 = v26;
      uint64_t v13 = v27;
      uint64_t v14 = v28;
      uint64_t v15 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100032EA4(0, v2[2] + 1LL, 1);
        uint64_t v2 = v30;
      }

      unint64_t v17 = v2[2];
      unint64_t v16 = v2[3];
      if (v17 >= v16 >> 1)
      {
        sub_100032EA4(v16 > 1, v17 + 1, 1);
        uint64_t v2 = v30;
      }

      _OWORD v2[2] = v17 + 1;
      uint64_t v18 = &v2[5 * v17];
      *((_BYTE *)v18 + 32) = v11;
      v4 += 5;
      v18[5] = v12;
      v18[6] = v13;
      v18[7] = v14;
      v18[8] = v15;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *sub_1004E7DC0(uint64_t a1)
{
  uint64_t v16 = sub_100004AEC(&qword_1009A6710);
  uint64_t v2 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_10099D508);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_100032F44(0, v9, 0);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v12 = *(void *)(v2 + 72);
    uint64_t v10 = v17;
    do
    {
      sub_10001581C(v11, (uint64_t)v4, &qword_1009A6710);
      swift_dynamicCast(v8, v4, v16, v5, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_100032F44(0, v10[2] + 1LL, 1);
        uint64_t v10 = v17;
      }

      unint64_t v14 = v10[2];
      unint64_t v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_100032F44(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v17;
      }

      _OWORD v10[2] = v14 + 1;
      sub_100015750( (uint64_t)v8,  (uint64_t)v10 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v14,
        &qword_10099D508);
      v11 += v12;
      --v9;
    }

    while (v9);
  }

  return v10;
}

void *sub_1004E7F80(uint64_t a1)
{
  return sub_1004E7FA4( a1,  type metadata accessor for RawSearchResult,  (void (*)(BOOL, unint64_t, uint64_t))sub_100032CE0,  (uint64_t)&off_10093F7A8,  (void (*)(void *, void *))sub_100012EC0);
}

void *sub_1004E7FA4( uint64_t a1, uint64_t (*a2)(void), void (*a3)(BOOL, unint64_t, uint64_t), uint64_t a4, void (*a5)(void *, void *))
{
  uint64_t v22 = a5;
  uint64_t v9 = a2(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - v11;
  unint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    unint64_t v24 = _swiftEmptyArrayStorage;
    uint64_t v21 = a3;
    a3(0, v13, 0LL);
    unint64_t v14 = v24;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v16 = *(void *)(v10 + 72);
    do
    {
      sub_10001DC4C(v15, (uint64_t)v12, a2);
      unint64_t v24 = v14;
      unint64_t v18 = v14[2];
      unint64_t v17 = v14[3];
      if (v18 >= v17 >> 1)
      {
        v21(v17 > 1, v18 + 1, 1LL);
        unint64_t v14 = v24;
      }

      void v23[3] = v9;
      v23[4] = a4;
      uint64_t v19 = sub_10000A7C8(v23);
      sub_10001DC4C((uint64_t)v12, (uint64_t)v19, a2);
      v14[2] = v18 + 1;
      v22(v23, &v14[5 * v18 + 4]);
      sub_100018C68((uint64_t)v12, a2);
      v15 += v16;
      --v13;
    }

    while (v13);
  }

  return v14;
}

void *sub_1004E8110(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_100032FF4(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (char *)(a1 + 32);
    do
    {
      char v5 = *v4++;
      uint64_t v20 = &type metadata for BAServiceIdentifier;
      uint64_t v21 = &off_10094C298;
      LOBYTE(v19[0]) = v5;
      uint64_t v22 = v2;
      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      unint64_t v8 = &type metadata for BAServiceIdentifier;
      if (v7 >= v6 >> 1)
      {
        sub_100032FF4(v6 > 1, v7 + 1, 1);
        unint64_t v8 = v20;
        uint64_t v2 = v22;
      }

      uint64_t v9 = sub_100037298((uint64_t)v19, (uint64_t)v8);
      __chkstk_darwin(v9);
      uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v12 + 16))(v11);
      char v13 = *v11;
      unint64_t v17 = &type metadata for BAServiceIdentifier;
      unint64_t v18 = &off_10094C298;
      LOBYTE(vswift_weakDestroy(v0 + 16) = v13;
      _OWORD v2[2] = v7 + 1;
      sub_100012EC0(&v16, (uint64_t)&v2[5 * v7 + 4]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *sub_1004E826C(uint64_t a1)
{
  return sub_1004E8294( a1,  (uint64_t)&type metadata for BACharacteristicIdentifier.AccessoryInformation,  (uint64_t)&off_10094C278);
}

void *sub_1004E8280(uint64_t a1)
{
  return sub_1004E8294(a1, (uint64_t)&type metadata for BACharacteristicIdentifier.FindMy, (uint64_t)&off_10094C288);
}

void *sub_1004E8294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_100033020(0, v3, 0);
    uint64_t v4 = _swiftEmptyArrayStorage;
    unint64_t v8 = (char *)(a1 + 32);
    do
    {
      char v10 = *v8++;
      char v9 = v10;
      unint64_t v17 = v4;
      unint64_t v12 = v4[2];
      unint64_t v11 = v4[3];
      if (v12 >= v11 >> 1)
      {
        sub_100033020(v11 > 1, v12 + 1, 1);
        uint64_t v4 = v17;
      }

      uint64_t v15 = a2;
      uint64_t v16 = a3;
      LOBYTE(v14) = v9;
      void v4[2] = v12 + 1;
      sub_100012EC0(&v14, (uint64_t)&v4[5 * v12 + 4]);
      --v3;
    }

    while (v3);
  }

  return v4;
}

void *sub_1004E8378(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v20 = _swiftEmptyArrayStorage;
    sub_100033208(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (void *)(a1 + 80);
    do
    {
      uint64_t v5 = *(v4 - 6);
      unint64_t v6 = *(v4 - 5);
      char v16 = *((_BYTE *)v4 - 32);
      uint64_t v7 = *(v4 - 2);
      uint64_t v15 = *(v4 - 3);
      char v13 = *((_BYTE *)v4 - 7);
      char v14 = *((_BYTE *)v4 - 8);
      uint64_t v8 = *v4;
      sub_10001736C(v5, v6);
      uint64_t v20 = v2;
      unint64_t v9 = v2[2];
      unint64_t v10 = v2[3];
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      if (v9 >= v10 >> 1)
      {
        sub_100033208(v10 > 1, v9 + 1, 1);
        uint64_t v2 = v20;
      }

      unint64_t v18 = &type metadata for OwnSubmitPayload;
      unint64_t v19 = sub_10056F34C();
      uint64_t v11 = swift_allocObject(&unk_1009633C0, 72LL, 7LL);
      *(void *)&__int128 v17 = v11;
      *(void *)(v11 + swift_weakDestroy(v0 + 16) = v5;
      *(void *)(v11 + swift_unknownObjectUnownedDestroy(v0 + 24) = v6;
      *(_BYTE *)(v11 + 32) = v16;
      *(void *)(v11 + 40) = v15;
      *(void *)(v11 + 48) = v7;
      *(_BYTE *)(v11 + 56) = v14;
      *(_BYTE *)(v11 + 57) = v13;
      *(void *)(v11 + 64) = v8;
      _OWORD v2[2] = v9 + 1;
      sub_100012EC0(&v17, (uint64_t)&v2[5 * v9 + 4]);
      v4 += 7;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *sub_1004E84E0(uint64_t a1)
{
  uint64_t v16 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v2 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009AC230);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    __int128 v17 = _swiftEmptyArrayStorage;
    sub_1000332C4(0, v9, 0);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v12 = *(void *)(v2 + 72);
    do
    {
      sub_10001DC4C(v11, (uint64_t)v4, type metadata accessor for BeaconKeyManager.IndexInformation);
      swift_dynamicCast(v8, v4, v16, v5, 7LL);
      unint64_t v10 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
      {
        sub_1000332C4(0, v10[2] + 1LL, 1);
        unint64_t v10 = v17;
      }

      unint64_t v14 = v10[2];
      unint64_t v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000332C4(v13 > 1, v14 + 1, 1);
        unint64_t v10 = v17;
      }

      _OWORD v10[2] = v14 + 1;
      sub_100015750( (uint64_t)v8,  (uint64_t)v10 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v14,
        &qword_1009AC230);
      v11 += v12;
      --v9;
    }

    while (v9);
  }

  return v10;
}

uint64_t sub_1004E869C(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  unint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000334C4(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v3 = v18;
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v5 = 0LL;
      do
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        unint64_t v18 = v3;
        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1000334C4(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v18;
        }

        ++v5;
        uint64_t v16 = sub_100022898(0LL, &qword_1009B2C88, &OBJC_CLASS___RTLocationOfInterest_ptr);
        __int128 v17 = &off_10096B978;
        *(void *)&__int128 v15 = v6;
        v3[2] = v8 + 1;
        sub_100012EC0(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }

      while (v2 != v5);
    }

    else
    {
      int64_t v9 = (void **)(a1 + 32);
      do
      {
        unint64_t v10 = *v9;
        unint64_t v18 = v3;
        unint64_t v12 = v3[2];
        unint64_t v11 = v3[3];
        id v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_1000334C4(v11 > 1, v12 + 1, 1);
          uint64_t v3 = v18;
        }

        uint64_t v16 = sub_100022898(0LL, &qword_1009B2C88, &OBJC_CLASS___RTLocationOfInterest_ptr);
        __int128 v17 = &off_10096B978;
        *(void *)&__int128 v15 = v13;
        v3[2] = v12 + 1;
        sub_100012EC0(&v15, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }

      while (v2);
    }

    return (uint64_t)v3;
  }

  __break(1u);
  return result;
}

void *sub_1004E888C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    unint64_t v11 = _swiftEmptyArrayStorage;
    sub_100032C70(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100032C70(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_100032C70(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      v4 += 2;
      _OWORD v2[2] = v7 + 1;
      sub_10006A358(v10, &v2[4 * v7 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_1004E89B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (dispatch_queue_s **)((char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2AC98);
  unint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Attempting to purge beacon store files.", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  unint64_t v11 = *(uint64_t **)(v1 + 136);
  v22[1] = v1;
  uint64_t v12 = sub_1004F730C();
  id v13 = (dispatch_queue_s *)v11[2];
  uint64_t v14 = (void *)swift_allocObject(&unk_100961570, 40LL, 7LL);
  v14[2] = v11;
  v14[3] = sub_100579600;
  v14[4] = 0LL;
  uint64_t v15 = swift_allocObject(&unk_100961598, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = sub_1005670EC;
  *(void *)(v15 + swift_unknownObjectUnownedDestroy(v0 + 24) = v14;
  aBlock[4] = sub_100154688;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  id aBlock[3] = &unk_1009615B0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v13, v16);
  _Block_release(v16);
  LOBYTE(vswift_weakDestroy(v0 + 16) = swift_isEscapingClosureAtFileLocation(v15, "", 113LL, 673LL, 26LL, 1LL);
  uint64_t result = swift_release();
  if ((v16 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    *uint64_t v5 = v13;
    (*(void (**)(dispatch_queue_s **, void, uint64_t))(v3 + 104))( v5,  enum case for DispatchPredicate.notOnQueue(_:),  v2);
    unint64_t v18 = v13;
    char v19 = _dispatchPreconditionTest(_:)(v5);
    uint64_t result = (*(uint64_t (**)(dispatch_queue_s **, uint64_t))(v3 + 8))(v5, v2);
    if ((v19 & 1) != 0)
    {
      uint64_t v20 = dispatch_group_create();
      dispatch_group_enter(v20);
      swift_retain();
      uint64_t v21 = v20;
      sub_100688204(0, v12, v11, v21);
      swift_release();
      swift_release();
      swift_release();

      return QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1004E8CAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v75 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v75);
  uint64_t v7 = (char *)v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v8 = __chkstk_darwin(v68);
  v67[1] = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v70 = (uint64_t)v67 - v10;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v88 = *(void *)(v11 - 8);
  uint64_t v89 = v11;
  __chkstk_darwin(v11);
  Swift::String v87 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v86);
  uint64_t v85 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v84 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v73 = (uint64_t)v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  char v19 = (char *)v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = a1;
  sub_1001CC778();
  uint64_t v21 = v20;
  swift_retain();
  sub_10054F3A0( v21,  v3,  (uint64_t *)&unk_1009A9C30,  type metadata accessor for OwnedBeaconRecord,  (void (*)(char *))sub_100504F30,  (uint64_t (*)(void, uint64_t, uint64_t))sub_1004C46DC);
  uint64_t v23 = v22;
  swift_release();
  swift_bridgeObjectRelease();
  if (!*(void *)(v23 + 16))
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a2, 1LL, 1LL, v16);
  }

  uint64_t v69 = a2;
  uint64_t v80 = v23 + ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  uint64_t v72 = v7 + 8;
  uint64_t v24 = *(void *)(v3 + 136);
  id v78 = (void *)0x800000010085B040LL;
  uint64_t v79 = v24;
  uint64_t v76 = v17;
  uint64_t v77 = v23;
  __int128 v82 = v7;
  uint64_t v83 = v19;
  uint64_t v81 = v16;
  if (*(void *)(v23 + 16))
  {
    uint64_t v90 = 0LL;
    uint64_t v91 = 0LL;
    uint64_t v25 = v14;
    sub_10001DC4C(v80, (uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    uint64_t v26 = *(int *)(v16 + 20);
    if (qword_10099B348 != -1) {
      swift_once(&qword_10099B348, sub_10039BCD8);
    }
    uint64_t v27 = &v19[v26];
    uint64_t v28 = v89;
    uint64_t v29 = sub_10000A720(v89, (uint64_t)qword_100A2A768);
    uint64_t v31 = v87;
    uint64_t v30 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v29, v28);
    v32._countAndFlagsBits = 0xD000000000000014LL;
    v32._object = v78;
    prohibitAsyncContext(functionName:)(v32);
    v93[0] = v25;
    uint64_t v33 = sub_100004AEC(&qword_1009B27F0);
    uint64_t v34 = String.init<A>(describing:)(v93, v33);
    uint64_t v36 = v35;
    uint64_t v37 = objc_autoreleasePoolPush();
    __chkstk_darwin(v37);
    v67[-6] = v38;
    v67[-5] = v27;
    v67[-4] = v31;
    v67[-3] = v34;
    v67[-2] = v36;
    uint64_t v39 = (uint64_t)v85;
    OS_dispatch_queue.sync<A>(execute:)(sub_100565D64, &v67[-8], v86);
    objc_autoreleasePoolPop(v37);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v28);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v39, 1LL, v25) == 1)
    {
      sub_100015794(v39, &qword_1009AA870);
      uint64_t v16 = v81;
      uint64_t v40 = (uint64_t)v82;
      char v19 = v83;
      goto LABEL_18;
    }

    uint64_t v41 = v73;
    sub_10002218C(v39, v73, type metadata accessor for BeaconProductInfoRecord);
    uint64_t v3 = *(void *)(v41 + *(int *)(v25 + 72));
    uint64_t v16 = v81;
    char v19 = v83;
    if (v3)
    {
      uint64_t v42 = *(void *)(v3 + 16);
      uint64_t v40 = (uint64_t)v82;
      if (v42)
      {
        uint64_t v43 = 88LL;
        uint64_t v44 = 1LL;
        while (1)
        {
          int v45 = *(unsigned __int8 *)(v3 + v43);
          if (v45 != 2 && (v45 & 1) != 0) {
            break;
          }
          if (v42 == v44) {
            goto LABEL_16;
          }
          v43 += 64LL;
          if (__OFADD__(v44++, 1LL))
          {
            __break(1u);
            goto LABEL_25;
          }
        }

        swift_bridgeObjectRetain(v3);
        swift_bridgeObjectRelease();
        if (qword_10099B538 == -1) {
          goto LABEL_20;
        }
        goto LABEL_26;
      }

uint64_t sub_1004E97E0()
{
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AC98);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "Requesting SPUnknownBeaconsChangedNotification to be posted before rate limit.",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
}

BOOL sub_1004E98E4(uint64_t (*a1)(char *), BOOL a2, uint64_t a3)
{
  uint64_t v4 = v3;
  BOOL v30 = a2;
  uint64_t v31 = a1;
  uint64_t v32 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    uint64_t v13 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v27 = *(void *)(v6 + 72);
    uint64_t v28 = v8;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v25[1] = a3;
    swift_bridgeObjectRetain(a3);
    while (1)
    {
      uint64_t v14 = v32;
      v29(v11, v13, v32);
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v15(v11, 0LL, 1LL, v14);
      int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1LL, v14);
      BOOL v17 = v16 != 1;
      if (v16 == 1) {
        break;
      }
      int v26 = 1;
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      uint64_t v19 = v6;
      uint64_t v20 = v28;
      v18(v28, v11, v14);
      BOOL v17 = v30;
      char v21 = v31(v20);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v14);
        swift_bridgeObjectRelease();
        return v17;
      }

      char v22 = v21;
      uint64_t v23 = v15;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v14);
      if ((v22 & 1) != 0)
      {
        BOOL v17 = v26;
        break;
      }

      v13 += v27;
      --v12;
      uint64_t v4 = 0LL;
      uint64_t v6 = v19;
      if (!v12) {
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain(a3);
LABEL_9:
    v23(v11, 1LL, 1LL, v32);
    BOOL v17 = 0;
  }

  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_1004E9B0C(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a2, (uint64_t)v11, v12);
  id v13 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v13);
  int v15 = *(unsigned __int8 *)(v3 + 24);
  uint64_t v84 = v9;
  uint64_t v85 = ObjectType;
  id v86 = v13;
  Swift::String v87 = v11;
  if (v15 != 1)
  {
    uint64_t v23 = *(void *)(v3 + 16);
    if (v23 != 1)
    {
      if (qword_10099B138 != -1) {
        swift_once(&qword_10099B138, sub_10012E678);
      }
      uint64_t v36 = type metadata accessor for Logger(0LL);
      uint64_t v37 = sub_10000A720(v36, (uint64_t)qword_100A2A200);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v39 = static os_log_type_t.fault.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v40 = 134217984;
        uint64_t v88 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v40 + 4, v40 + 12);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unexpected OwnedBeaconGroup version: %ld!", v40, 0xCu);
        swift_slowDealloc(v40, -1LL, -1LL);
      }

      goto LABEL_17;
    }

    uint64_t v24 = v3 + *(int *)(v9 + 28);
    uint64_t v25 = &v8[*(int *)(v6 + 20)];
    uint64_t v26 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL))(v25, v24, v26);
    *(void *)uint64_t v8 = 1LL;
    v8[8] = 0;
    uint64_t v27 = sub_1001D0590();
    unint64_t v29 = v28;
    sub_100018C68((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    CKRecordKeyValueSetting.subscript.getter( &v88,  0x657264644163616DLL,  0xEA00000000007373LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
    uint64_t v30 = v88;
    unint64_t v31 = v89;
    sub_10001736C(v27, v29);
    if (v31 >> 60 == 15)
    {
      sub_1000182F0(v30, v31);
      sub_1000182F0(v27, v29);
    }

    else
    {
      sub_100018BE4(v30, v31);
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v30, v31);
      char v42 = v41;
      sub_100016F9C(v27, v29);
      sub_1000182F0(v30, v31);
      sub_1000182F0(v30, v31);
      if ((v42 & 1) != 0)
      {
LABEL_16:
        sub_100016F9C(v27, v29);
        goto LABEL_17;
      }
    }

    uint64_t v90 = &type metadata for Data;
    uint64_t v91 = &protocol witness table for Data;
    uint64_t v88 = v27;
    unint64_t v89 = v29;
    sub_10001736C(v27, v29);
    CKRecordKeyValueSetting.subscript.setter(&v88, 0x657264644163616DLL, 0xEA00000000007373LL, v85);
    goto LABEL_16;
  }

  int v16 = CKRecordKeyValueSetting.subscript.getter( &v88,  0x657264644163616DLL,  0xEA00000000007373LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  uint64_t v17 = v88;
  unint64_t v18 = v89;
  uint64_t v19 = MACAddress.dataRepresentation.getter(v16);
  unint64_t v21 = v20;
  if (v18 >> 60 == 15)
  {
    sub_1000182F0(v17, v18);
    uint64_t v22 = sub_1000182F0(v19, v21);
    uint64_t v9 = v84;
  }

  else
  {
    sub_100018BE4(v17, v18);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v18);
    char v33 = v32;
    sub_100016F9C(v19, v21);
    sub_1000182F0(v17, v18);
    uint64_t v22 = sub_1000182F0(v17, v18);
    uint64_t v9 = v84;
    if ((v33 & 1) != 0) {
      goto LABEL_17;
    }
  }

  uint64_t v34 = MACAddress.dataRepresentation.getter(v22);
  uint64_t v90 = &type metadata for Data;
  uint64_t v91 = &protocol witness table for Data;
  uint64_t v88 = v34;
  unint64_t v89 = v35;
  CKRecordKeyValueSetting.subscript.setter(&v88, 0x657264644163616DLL, 0xEA00000000007373LL, v85);
LABEL_17:
  uint64_t v43 = *(int *)(v9 + 40);
  uint64_t v83 = v3;
  uint64_t v44 = *(void *)(v3 + v43);
  uint64_t v45 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
  unint64_t v46 = sub_1001D31C0();
  unint64_t v47 = sub_1001D32E0();
  unint64_t v48 = sub_1001D3324();
  uint64_t v49 = v9;
  uint64_t v50 = sub_100007864( &qword_1009A5868,  type metadata accessor for OwnedBeaconGroup.PairingState,  (uint64_t)&unk_1007F6420);
  uint64_t v51 = sub_100007864( &qword_1009A58A8,  type metadata accessor for OwnedBeaconGroup.PairingState,  (uint64_t)&unk_1007F63D0);
  uint64_t v52 = Dictionary<>.dataRepresentation.getter( v44,  &type metadata for OwnedBeaconGroup.SerialNumber,  v45,  v46,  v47,  v48,  v50,  v51);
  unint64_t v54 = v53;
  uint64_t v55 = *(void *)&v87[*(int *)(v49 + 40)];
  swift_bridgeObjectRetain(v55);
  unint64_t v81 = v46;
  uint64_t v82 = v45;
  unint64_t v56 = v46;
  unint64_t v57 = v47;
  uint64_t v59 = Dictionary<>.dataRepresentation.getter( v58,  &type metadata for OwnedBeaconGroup.SerialNumber,  v45,  v56,  v47,  v48,  v50,  v51);
  unint64_t v61 = v60;
  swift_bridgeObjectRelease();
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v52, v54);
  LOBYTE(v45) = v62;
  sub_100016F9C(v59, v61);
  sub_100016F9C(v52, v54);
  if ((v45 & 1) == 0)
  {
    swift_bridgeObjectRetain(v55);
    uint64_t v64 = Dictionary<>.dataRepresentation.getter( v63,  &type metadata for OwnedBeaconGroup.SerialNumber,  v82,  v81,  v57,  v48,  v50,  v51);
    unint64_t v66 = v65;
    swift_bridgeObjectRelease();
    uint64_t v90 = &type metadata for Data;
    uint64_t v91 = &protocol witness table for Data;
    uint64_t v88 = v64;
    unint64_t v89 = v66;
    CKRecordKeyValueSetting.subscript.setter(&v88, 0x614D6E6F63616562LL, 0xE900000000000070LL, v85);
  }

  uint64_t v67 = v83;
  uint64_t v68 = v84;
  uint64_t v69 = *(int *)(v84 + 36);
  uint64_t v70 = *(void *)(v83 + v69);
  uint64_t v71 = *(void *)(v83 + v69 + 8);
  uint64_t v72 = (uint64_t)v87;
  uint64_t v73 = &v87[v69];
  uint64_t v75 = *(void *)v73;
  unint64_t v74 = *((void *)v73 + 1);
  if ((v70 != *(void *)v73 || v71 != v74)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v70, v71, *(void *)v73, *((void *)v73 + 1), 0LL) & 1) == 0)
  {
    uint64_t v90 = &type metadata for String;
    uint64_t v91 = &protocol witness table for String;
    uint64_t v88 = v75;
    unint64_t v89 = v74;
    swift_bridgeObjectRetain(v74);
    CKRecordKeyValueSetting.subscript.setter(&v88, 1701667182LL, 0xE400000000000000LL, v85);
  }

  uint64_t v76 = *(int *)(v68 + 32);
  int v77 = *(unsigned __int8 *)(v67 + v76);
  int v78 = *(unsigned __int8 *)(v72 + v76);
  if (v77 == v78)
  {
    sub_100018C68(v72, type metadata accessor for OwnedBeaconGroup);
    return swift_unknownObjectRelease(v86);
  }

  else
  {
    uint64_t v90 = &type metadata for Bool;
    uint64_t v91 = &protocol witness table for Bool;
    LOBYTE(v88) = v78;
    id v79 = v86;
    CKRecordKeyValueSetting.subscript.setter(&v88, 0x616E454E4D467369LL, 0xEC00000064656C62LL, v85);
    swift_unknownObjectRelease(v79);
    return sub_100018C68(v72, type metadata accessor for OwnedBeaconGroup);
  }

uint64_t sub_1004EA204@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v21 = a3;
  int v22 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a2;
  uint64_t v25 = type metadata accessor for Date(0LL);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  uint64_t v13 = type metadata accessor for BeaconKeyManager(0LL);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005717C8, v5, v12, (char *)&type metadata for () + 8, v13);
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_100012ED8(a1, v15);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v14 + 8) + 8LL) + 32LL))(v15);
  uint64_t v17 = a1[3];
  uint64_t v16 = a1[4];
  sub_100012ED8(a1, v17);
  (*(void (**)(uint64_t, uint64_t))(v16 + 184))(v17, v16);
  sub_100520804((uint64_t)v11, v8, v20, v21, v22, v19);
  swift_release();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v24);
}

void *sub_1004EA3B4(void *a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v100 = *(void *)(v12 - 8);
  unint64_t v101 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v93 = v15;
  uint64_t v94 = v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v99 = (unint64_t)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v108 = (unint64_t)&v87 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v92 = (uint64_t)&v87 - v22;
  __chkstk_darwin(v21);
  uint64_t v107 = (uint64_t *)((char *)&v87 - v23);
  uint64_t v24 = type metadata accessor for Date(0LL);
  uint64_t v95 = *(void *)(v24 - 8);
  uint64_t v96 = v24;
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v102 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v91 = (char *)&v87 - v27;
  uint64_t v28 = type metadata accessor for DateInterval(0LL);
  uint64_t v105 = *(void *)(v28 - 8);
  uint64_t v106 = v28;
  __chkstk_darwin(v28);
  uint64_t v104 = (uint64_t)&v87 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for BeaconKeyManager.KeyCriteria(0LL);
  uint64_t result = (void *)__chkstk_darwin(v30);
  char v33 = (char *)&v87 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = a1;
  if ((a5 & 1) != 0)
  {
    unint64_t v90 = sub_1002DF51C(a4);
    uint64_t v34 = a1;
    uint64_t v35 = a1[3];
    uint64_t v36 = v34[4];
    sub_100012ED8(v34, v35);
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v36 + 8) + 8LL) + 32LL))(v35);
    if (a3 < a2)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    v33[*(int *)(v30 + 20)] = a4;
    uint64_t v37 = (unint64_t *)&v33[*(int *)(v30 + 24)];
    *uint64_t v37 = a2;
    v37[1] = a3;
    uint64_t v38 = (void (*)(void, void))v103;
    uint64_t v39 = *(void *)&v103[OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock];
    uint64_t v40 = type metadata accessor for BeaconKeyManager(0LL);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005717C8, v38, v39, (char *)&type metadata for () + 8, v40);
    uint64_t v89 = v5;
    uint64_t v88 = v33;
    char v41 = sub_10079CF10((uint64_t)v33);
    swift_release();
    uint64_t v42 = v41[2];
    Swift::String v87 = v41;
    if (v42)
    {
      uint64_t v43 = v41 + 9;
      uint64_t v109 = _swiftEmptyArrayStorage;
      while (1)
      {
        unint64_t v108 = a2;
        uint64_t v44 = *(v43 - 5);
        unint64_t v45 = *(v43 - 4);
        unint64_t v46 = *(v43 - 2);
        uint64_t v100 = *(v43 - 3);
        uint64_t v47 = v100;
        unint64_t v101 = v45;
        uint64_t v49 = *(v43 - 1);
        unint64_t v48 = *v43;
        uint64_t v98 = v42;
        unint64_t v99 = v48;
        uint64_t v51 = v97[3];
        uint64_t v50 = v97[4];
        uint64_t v52 = (char *)sub_100012ED8(v97, v51);
        unint64_t v53 = *(char **)(v50 + 184);
        uint64_t v102 = v52;
        uint64_t v103 = v53;
        sub_100018BE4(v44, v45);
        sub_10001736C(v47, v46);
        sub_100018BE4(v49, v48);
        unint64_t v54 = v91;
        ((void (*)(uint64_t, uint64_t))v103)(v51, v50);
        uint64_t v55 = v104;
        uint64_t v56 = v108;
        sub_1003DB840(v54, v108, v90, v104);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v54, v96);
        uint64_t v57 = v93;
        uint64_t v58 = v107;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 16))((uint64_t)v107 + *(int *)(v93 + 20), v55, v106);
        *uint64_t v58 = v56;
        unint64_t v60 = v99;
        uint64_t v59 = v100;
        unint64_t v61 = (uint64_t *)((char *)v58 + *(int *)(v57 + 24));
        unint64_t v62 = v101;
        *unint64_t v61 = v44;
        v61[1] = v62;
        _OWORD v61[2] = v59;
        void v61[3] = v46;
        v61[4] = v49;
        v61[5] = v60;
        uint64_t v63 = v92;
        sub_10001DC4C((uint64_t)v58, v92, type metadata accessor for TimeBasedKey);
        uint64_t v102 = (char *)v44;
        sub_100018BE4(v44, v62);
        uint64_t v103 = (char *)v46;
        sub_10001736C(v59, v46);
        sub_100018BE4(v49, v60);
        if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0) {
          uint64_t v109 = (void *)sub_1004C51D4(0, v109[2] + 1LL, 1, (unint64_t)v109);
        }
        unint64_t v65 = v109[2];
        unint64_t v64 = v109[3];
        if (v65 >= v64 >> 1) {
          uint64_t v109 = (void *)sub_1004C51D4(v64 > 1, v65 + 1, 1, (unint64_t)v109);
        }
        unint64_t v66 = v109;
        v109[2] = v65 + 1;
        sub_10002218C( v63,  (uint64_t)v66 + ((*(unsigned __int8 *)(v94 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))
        + *(void *)(v94 + 72) * v65,
          type metadata accessor for TimeBasedKey);
        sub_1000182F0((uint64_t)v102, v62);
        sub_100016F9C(v59, (unint64_t)v103);
        sub_1000182F0(v49, v60);
        sub_100018C68((uint64_t)v107, type metadata accessor for TimeBasedKey);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v105 + 8))(v104, v106);
        a2 = v108 + 1;
        if (v108 == -1LL) {
          break;
        }
        v43 += 6;
        uint64_t v42 = v98 - 1;
        if (v98 == 1) {
          goto LABEL_25;
        }
      }

      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    uint64_t v109 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v88, type metadata accessor for BeaconKeyManager.KeyCriteria);
    return v109;
  }

  if (a3 >= a2)
  {
    uint64_t v106 = *(void *)&v103[OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock];
    uint64_t v105 = type metadata accessor for BeaconKeyManager(0LL);
    uint64_t v109 = _swiftEmptyArrayStorage;
    uint64_t v104 = (uint64_t)&type metadata for () + 8;
    while (1)
    {
      unint64_t v67 = a3;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005717C8, v103, v106, v104, v105);
      uint64_t v107 = (uint64_t *)v6;
      uint64_t v68 = v97;
      uint64_t v70 = v97[3];
      uint64_t v69 = v97[4];
      sub_100012ED8(v97, v70);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v69 + 8) + 8LL) + 32LL))(v70);
      uint64_t v71 = v14;
      uint64_t v72 = a4;
      unint64_t v73 = a2;
      uint64_t v74 = v68[3];
      uint64_t v75 = v68[4];
      sub_100012ED8(v68, v74);
      uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v75 + 184);
      int v77 = v102;
      uint64_t v78 = v75;
      uint64_t v79 = v73;
      a4 = v72;
      uint64_t v14 = v71;
      v76(v74, v78);
      uint64_t v80 = (uint64_t)v107;
      uint64_t v81 = v108;
      sub_100520804((uint64_t)v14, v77, v79, a4, 0, v108);
      uint64_t v6 = v80;
      if (v80) {
        break;
      }
      swift_release();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v77, v96);
      (*(void (**)(char *, unint64_t))(v100 + 8))(v14, v101);
      uint64_t v82 = v99;
      sub_10001DC4C(v81, v99, type metadata accessor for TimeBasedKey);
      if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0) {
        uint64_t v109 = (void *)sub_1004C51D4(0, v109[2] + 1LL, 1, (unint64_t)v109);
      }
      a3 = v67;
      unint64_t v84 = v109[2];
      unint64_t v83 = v109[3];
      if (v84 >= v83 >> 1) {
        uint64_t v109 = (void *)sub_1004C51D4(v83 > 1, v84 + 1, 1, (unint64_t)v109);
      }
      uint64_t v85 = v109;
      v109[2] = v84 + 1;
      sub_10002218C( v82,  (uint64_t)v85 + ((*(unsigned __int8 *)(v94 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))
      + *(void *)(v94 + 72) * v84,
        type metadata accessor for TimeBasedKey);
      uint64_t result = (void *)sub_100018C68(v108, type metadata accessor for TimeBasedKey);
      if (v67 == v79) {
        return v109;
      }
      BOOL v86 = __CFADD__(v79, 1LL);
      a2 = v79 + 1;
      if (v86) {
        goto LABEL_28;
      }
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v95 + 8))(v77, v96);
    (*(void (**)(char *, unint64_t))(v100 + 8))(v14, v101);
    swift_bridgeObjectRelease();
    return v109;
  }

uint64_t sub_1004EAB38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v108 = a2;
  uint64_t v116 = sub_100004AEC(&qword_1009A4780);
  __chkstk_darwin(v116);
  uint64_t v112 = &v105[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v122 = *((void *)v4 - 1);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v111 = &v105[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v119 = &v105[-v8];
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v113 = &v105[-v10];
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v105[-v12];
  __chkstk_darwin(v11);
  uint64_t v125 = &v105[-v14];
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(dispatch_group_s **)(v15 - 8);
  uint64_t v17 = *((void *)v16 + 8);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v109 = &v105[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = &v105[-v20];
  uint64_t v22 = __chkstk_darwin(v19);
  unint64_t v118 = &v105[-v23];
  uint64_t v24 = __chkstk_darwin(v22);
  int8x16_t v114 = &v105[-v25];
  __chkstk_darwin(v24);
  uint64_t v27 = &v105[-v26];
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  uint64_t v29 = sub_10000A720(v28, (uint64_t)qword_100A2B7D8);
  uint64_t v126 = (void (*)(_BYTE *, uint64_t, uint64_t))*((void *)v16 + 2);
  uint64_t v127 = a1;
  uint64_t v30 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v126)(v27, a1, v15);
  uint64_t v121 = v29;
  unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.default.getter(v31);
  int v33 = v32;
  BOOL v34 = os_log_type_enabled(v31, v32);
  uint64_t v110 = v21;
  unint64_t v120 = v13;
  int8x16_t v115 = v16;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc(22LL, -1LL);
    uint64_t v107 = swift_slowAlloc(32LL, -1LL);
    v129[0] = v107;
    *(_DWORD *)uint64_t v35 = 141558275;
    uint64_t v133 = 1752392040LL;
    unint64_t v124 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v35 + 4, v35 + 12);
    *(_WORD *)(v35 + 12) = 2081;
    uint64_t v36 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    int v106 = v33;
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v15, v36);
    uint64_t v133 = sub_1003F11D4(v37, v38, v129);
    uint64_t v4 = v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease();
    uint64_t v39 = (void (*)(_BYTE *, uint64_t))*((void *)v16 + 1);
    v39(v27, v15);
    _os_log_impl( (void *)&_mh_execute_header,  v31,  (os_log_type_t)v106,  "BeaconStore createNewOwnedDeviceKeyRecord called with deviceIdentifier:%{private,mask.hash}s",  (uint8_t *)v35,  0x16u);
    uint64_t v40 = v107;
    swift_arrayDestroy(v107, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {
    uint64_t v39 = (void (*)(_BYTE *, uint64_t))*((void *)v16 + 1);
    v39(v27, v15);
  }

  char v41 = v123;
  uint64_t result = sub_1004E1BEC((uint64_t *)v130);
  if (!v41)
  {
    uint64_t v107 = 0LL;
    uint64_t v123 = (void (*)(void, void))v39;
    uint64_t v43 = v125;
    UUID.init()(result);
    uint64_t v44 = v126;
    uint64_t v45 = v127;
    v126((_BYTE *)v43 + v4[6], v127, v15);
    unint64_t v46 = v44;
    __int128 v131 = v130[1];
    __int128 v132 = v130[0];
    sub_100018BF8((uint64_t)&v132);
    sub_100018BF8((uint64_t)&v131);
    sub_100566710((uint64_t *)v130);
    *uint64_t v43 = xmmword_1007E4480;
    *(_OWORD *)((char *)v43 + v4[7]) = v132;
    *(_OWORD *)((char *)v43 + v4[8]) = v131;
    uint64_t v47 = dispatch_group_create();
    uint64_t v48 = swift_allocBox(v116);
    uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v122 + 56);
    uint64_t v116 = v50;
    v49(v50, 1LL, 1LL, v4);
    dispatch_group_enter(v47);
    unint64_t v124 = v4;
    uint64_t v51 = v114;
    v46(v114, v45, v15);
    uint64_t v52 = v115;
    uint64_t v53 = *((unsigned __int8 *)v115 + 80);
    uint64_t v54 = (v53 + 24) & ~v53;
    unint64_t v55 = (v17 + v54 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v56 = swift_allocObject(&unk_100961340, v55 + 8, v53 | 7);
    *(void *)(v56 + swift_weakDestroy(v0 + 16) = v47;
    (*((void (**)(uint64_t, _BYTE *, uint64_t))v52 + 4))(v56 + v54, v51, v15);
    *(void *)(v56 + v55) = v48;
    uint64_t v57 = v47;
    int8x16_t v114 = (_BYTE *)v48;
    swift_retain();
    sub_1004FCEB4( (uint64_t)v43,  0,  (void (*)(char *))sub_1005667FC,  v56,  &qword_1009B2858,  type metadata accessor for OwnedDeviceKeyRecord,  (uint64_t)sub_100022880,  (uint64_t)sub_100566810,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_1005012CC);
    swift_release();
    uint64_t v58 = v118;
    v126(v118, v127, v15);
    uint64_t v59 = (uint64_t)v120;
    uint64_t v60 = sub_10001DC4C((uint64_t)v43, (uint64_t)v120, type metadata accessor for OwnedDeviceKeyRecord);
    unint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.default.getter(v61);
    BOOL v63 = os_log_type_enabled(v61, v62);
    int8x16_t v115 = v57;
    if (v63)
    {
      uint64_t v64 = swift_slowAlloc(42LL, -1LL);
      uint64_t v117 = swift_slowAlloc(64LL, -1LL);
      v129[0] = v117;
      *(_DWORD *)uint64_t v64 = 141558787;
      uint64_t v133 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v64 + 4, v64 + 12);
      *(_WORD *)(v64 + 12) = 2081;
      uint64_t v65 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter(v15, v65);
      uint64_t v133 = sub_1003F11D4(v66, v67, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v64 + 14, v64 + 22);
      swift_bridgeObjectRelease();
      v123(v58, v15);
      *(_WORD *)(v64 + 22) = 2160;
      uint64_t v133 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v64 + 24, v64 + 32);
      *(_WORD *)(v64 + 32) = 2081;
      uint64_t v68 = (uint64_t)v120;
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v15, v65);
      uint64_t v133 = sub_1003F11D4(v69, v70, v129);
      uint64_t v57 = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v64 + 34, v64 + 42);
      swift_bridgeObjectRelease();
      sub_100018C68(v68, type metadata accessor for OwnedDeviceKeyRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v61,  v62,  "Waiting for the new record to be saved to the cloud %{private,mask.hash}s uuid: %{private,mask.hash}s.",  (uint8_t *)v64,  0x2Au);
      uint64_t v71 = v117;
      swift_arrayDestroy(v117, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1LL, -1LL);
      uint64_t v72 = v124;
      swift_slowDealloc(v64, -1LL, -1LL);

      uint64_t v73 = (uint64_t)v119;
      uint64_t v74 = (uint64_t)v112;
    }

    else
    {
      v123(v58, v15);
      sub_100018C68(v59, type metadata accessor for OwnedDeviceKeyRecord);

      uint64_t v73 = (uint64_t)v119;
      uint64_t v74 = (uint64_t)v112;
      uint64_t v72 = v124;
    }

    OS_dispatch_group.wait()();
    uint64_t v75 = v116;
    swift_beginAccess(v116, v129, 0LL, 0LL);
    sub_10001581C(v75, v74, &qword_1009A4780);
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v122 + 48))(v74, 1LL, v72) == 1)
    {
      sub_100015794(v74, &qword_1009A4780);
      uint64_t v76 = v109;
      v126(v109, v127, v15);
      int v77 = v111;
      uint64_t v78 = sub_10001DC4C((uint64_t)v125, (uint64_t)v111, type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
      os_log_type_t v80 = static os_log_type_t.error.getter(v79);
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = swift_slowAlloc(42LL, -1LL);
        uint64_t v127 = swift_slowAlloc(64LL, -1LL);
        uint64_t v133 = v127;
        *(_DWORD *)uint64_t v81 = 141558787;
        uint64_t v128 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v81 + 4, v81 + 12);
        *(_WORD *)(v81 + 12) = 2081;
        uint64_t v82 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter(v15, v82);
        uint64_t v128 = sub_1003F11D4(v83, v84, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v81 + 14, v81 + 22);
        swift_bridgeObjectRelease();
        v123(v76, v15);
        *(_WORD *)(v81 + 22) = 2160;
        uint64_t v128 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v81 + 24, v81 + 32);
        *(_WORD *)(v81 + 32) = 2081;
        uint64_t v85 = v111;
        uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter(v15, v82);
        uint64_t v128 = sub_1003F11D4(v86, v87, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v81 + 34, v81 + 42);
        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v85, type metadata accessor for OwnedDeviceKeyRecord);
        _os_log_impl( (void *)&_mh_execute_header,  v79,  v80,  "OwnedDeviceKeyRecord save failed for %{private,mask.hash}s uuid: %{private,mask.hash}s",  (uint8_t *)v81,  0x2Au);
        uint64_t v88 = v127;
        swift_arrayDestroy(v127, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v88, -1LL, -1LL);
        uint64_t v89 = v81;
        uint64_t v57 = v115;
        swift_slowDealloc(v89, -1LL, -1LL);
      }

      else
      {
        v123(v76, v15);
        sub_100018C68((uint64_t)v77, type metadata accessor for OwnedDeviceKeyRecord);
      }

      unint64_t v102 = sub_1000220F0();
      uint64_t v103 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v102, 0LL, 0LL);
      *uint64_t v104 = 13;
      swift_willThrow(v103);

      sub_100018C68((uint64_t)v125, type metadata accessor for OwnedDeviceKeyRecord);
    }

    else
    {
      sub_10002218C(v74, (uint64_t)v113, type metadata accessor for OwnedDeviceKeyRecord);
      unint64_t v90 = v110;
      v126(v110, v127, v15);
      uint64_t v91 = sub_10001DC4C((uint64_t)v125, v73, type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
      os_log_type_t v93 = static os_log_type_t.default.getter(v92);
      if (os_log_type_enabled(v92, v93))
      {
        uint64_t v94 = swift_slowAlloc(42LL, -1LL);
        uint64_t v127 = swift_slowAlloc(64LL, -1LL);
        uint64_t v133 = v127;
        *(_DWORD *)uint64_t v94 = 141558787;
        uint64_t v128 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v94 + 4, v94 + 12);
        *(_WORD *)(v94 + 12) = 2081;
        uint64_t v95 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter(v15, v95);
        uint64_t v128 = sub_1003F11D4(v96, v97, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v94 + 14, v94 + 22);
        swift_bridgeObjectRelease();
        v123(v90, v15);
        *(_WORD *)(v94 + 22) = 2160;
        uint64_t v128 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v94 + 24, v94 + 32);
        *(_WORD *)(v94 + 32) = 2081;
        uint64_t v98 = (uint64_t)v119;
        uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter(v15, v95);
        uint64_t v128 = sub_1003F11D4(v99, v100, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v94 + 34, v94 + 42);
        swift_bridgeObjectRelease();
        sub_100018C68(v98, type metadata accessor for OwnedDeviceKeyRecord);
        _os_log_impl( (void *)&_mh_execute_header,  v92,  v93,  "OwnedDeviceKeyRecord saved to CloudKit for: %{private,mask.hash}s uuid: %{private,mask.hash}s.",  (uint8_t *)v94,  0x2Au);
        uint64_t v101 = v127;
        swift_arrayDestroy(v127, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v101, -1LL, -1LL);
        swift_slowDealloc(v94, -1LL, -1LL);
      }

      else
      {

        sub_100018C68(v73, type metadata accessor for OwnedDeviceKeyRecord);
        v123(v90, v15);
      }

      sub_100018C68((uint64_t)v125, type metadata accessor for OwnedDeviceKeyRecord);
      sub_10002218C((uint64_t)v113, v108, type metadata accessor for OwnedDeviceKeyRecord);
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_1004EB960@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v62 = a1;
  uint64_t v58 = a2;
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v56 - v6;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v68 = *(void *)(v8 - 8);
  uint64_t v69 = v8;
  __chkstk_darwin(v8);
  uint64_t v64 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v59 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v56 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v56 = *(void *)(v22 - 8);
  uint64_t v57 = v22;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v25 = [(id)objc_opt_self(NSFileManager) defaultManager];
  if (qword_10099B1A8 != -1) {
    swift_once(&qword_10099B1A8, sub_1001BB8C8);
  }
  uint64_t v26 = sub_10000A720(v10, (uint64_t)qword_100A2A338);
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v26, 0LL, 0LL);

  DirectorySequence.next()(v27);
  unint64_t v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v67(v21, 1LL, v10) != 1)
  {
    unint64_t v31 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 32);
    unint64_t v65 = (unint64_t)"shold: %{public}@";
    uint64_t v66 = v31;
    unint64_t v63 = 0x8000000100855C50LL;
    unint64_t v61 = v24;
    for (uint64_t i = v31(v18, v21, v10); ; uint64_t i = v66(v18, v21, v10))
    {
      uint64_t v35 = URL.pathExtension.getter(i);
      if (v35 == 0xD000000000000010LL && v36 == v63)
      {
        uint64_t v37 = swift_bridgeObjectRelease();
      }

      else
      {
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)( v35,  v36,  0xD000000000000010LL,  v65 | 0x8000000000000000LL,  0LL);
        uint64_t v37 = swift_bridgeObjectRelease();
        if ((v38 & 1) == 0)
        {
          uint64_t v34 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v18, v10);
          goto LABEL_8;
        }
      }

      uint64_t v39 = v11;
      uint64_t v40 = URL.deletingPathExtension()(v37);
      uint64_t v41 = URL.lastPathComponent.getter(v40);
      UUID.init(uuidString:)(v41, v42);
      swift_bridgeObjectRelease();
      uint64_t v43 = v68;
      uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
      if (v44(v7, 1LL, v69) == 1)
      {
        uint64_t v11 = v39;
        int v33 = *(void (**)(char *, uint64_t))(v39 + 8);
        v33(v16, v10);
        v33(v18, v10);
        uint64_t v34 = sub_100015794((uint64_t)v7, &qword_10099D8A0);
      }

      else
      {
        uint64_t v45 = v16;
        unint64_t v46 = v64;
        uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
        v60(v64, v7, v69);
        uint64_t v47 = static UUID.== infix(_:_:)(v46, v62);
        if ((v47 & 1) != 0)
        {
          uint64_t v48 = v59;
          uint64_t Path = URL.deletingLastPathComponent()(v47);
          uint64_t v50 = URL.lastPathComponent.getter(Path);
          UUID.init(uuidString:)(v50, v51);
          swift_bridgeObjectRelease();
          uint64_t v52 = *(void (**)(char *, uint64_t))(v39 + 8);
          uint64_t v53 = v48;
          uint64_t v16 = v45;
          v52(v53, v10);
          uint64_t v54 = v69;
          (*(void (**)(char *, uint64_t))(v68 + 8))(v64, v69);
          v52(v16, v10);
          v52(v18, v10);
          if (v44(v5, 1LL, v54) != 1)
          {
            (*(void (**)(char *, uint64_t))(v56 + 8))(v61, v57);
            uint64_t v29 = v58;
            v60(v58, v5, v69);
            uint64_t v28 = 0LL;
            return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v29, v28, 1LL, v69);
          }

          uint64_t v34 = sub_100015794((uint64_t)v5, &qword_10099D8A0);
          uint64_t v11 = v39;
          uint64_t v24 = v61;
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v43 + 8))(v64, v69);
          uint64_t v11 = v39;
          unint64_t v55 = *(void (**)(char *, uint64_t))(v39 + 8);
          uint64_t v16 = v45;
          v55(v45, v10);
          uint64_t v34 = ((uint64_t (*)(char *, uint64_t))v55)(v18, v10);
          uint64_t v24 = v61;
        }
      }

void sub_1004EBE70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for TimeBasedKey(0LL);
  v21[12] = *(void *)(v3 - 8);
  v21[13] = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  v21[10] = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  _DWORD v21[8] = (char *)v21 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  v21[9] = (char *)v21 - v9;
  __chkstk_darwin(v8);
  v21[11] = (char *)v21 - v10;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  v21[5] = *(void *)(v11 - 8);
  void v21[6] = v11;
  __chkstk_darwin(v11);
  v21[4] = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v13);
  uint64_t v14 = type metadata accessor for DateInterval(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  uint64_t v16 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a2, (uint64_t)v18, v19);
  uint64_t v20 = (char *)&loc_1004EC074 + *((int *)qword_1004ED440 + swift_getEnumCaseMultiPayload(v18, v16));
  __asm { BR              X10 }

void *sub_1004EC084()
{
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  uint64_t v8 = sub_100012ED8(v4, v6);
  uint64_t v9 = sub_10054CE6C((uint64_t)v8, v1, 0, 0, 0, *(void *)(v5 - 184), v6, v7);
  uint64_t v12 = v9;
  if (!v11)
  {
    uint64_t v16 = v10;
    *(void *)(v5 - 144) = v2;
    *(void *)(v5 - 136) = v0;
    swift_bridgeObjectRetain(v9);
    *(_DWORD *)(v5 - 152) = static os_log_type_t.default.getter(v17);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v18 = qword_100A2B018;
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
    *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v22 = v4[3];
    uint64_t v21 = v4[4];
    sub_100012ED8(v4, v22);
    uint64_t v23 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8LL) + 32LL);
    uint64_t v24 = *(void *)(v5 - 208);
    uint64_t v25 = v23(v22);
    uint64_t v26 = UUID.uuidString.getter(v25);
    uint64_t v28 = v27;
    (*(void (**)(uint64_t, void))(*(void *)(v5 - 200) + 8LL))(v24, *(void *)(v5 - 192));
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_1000226F4();
    *(void *)(v20 + 32) = v26;
    *(void *)(v20 + 40) = v28;
    swift_bridgeObjectRelease();
    sub_100117B2C(v12, v16, 0);
    uint64_t v15 = *(void *)(v5 - 136);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 144) + 8LL);
    uint64_t v14 = v1;
    goto LABEL_7;
  }

  if (v11 == 1)
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    uint64_t v14 = v1;
    uint64_t v15 = v0;
LABEL_7:
    v13(v14, v15);
    return (void *)v12;
  }

  uint64_t v29 = v2;
  *(void *)(v5 - 136) = v0;
  uint64_t v30 = static os_log_type_t.default.getter(v9);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v31 = qword_100A2B018;
  uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v33 = swift_allocObject(v32, 72LL, 7LL);
  *(_OWORD *)(v33 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v35 = v4[3];
  uint64_t v34 = v4[4];
  sub_100012ED8(v4, v35);
  uint64_t v36 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v34 + 8) + 8LL) + 32LL);
  uint64_t v37 = *(void *)(v5 - 208);
  uint64_t v38 = v36(v35);
  uint64_t v39 = UUID.uuidString.getter(v38);
  uint64_t v41 = v40;
  (*(void (**)(uint64_t, void))(*(void *)(v5 - 200) + 8LL))(v37, *(void *)(v5 - 192));
  *(void *)(v33 + 56) = &type metadata for String;
  *(void *)(v33 + 64) = sub_1000226F4();
  *(void *)(v33 + 32) = v39;
  *(void *)(v33 + 40) = v41;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v29 + 8))(v1, *(void *)(v5 - 136));
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1004ED494@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a3)
  {
    if (a3 == 1) {
      uint64_t v12 = 0x7261646E6F636553LL;
    }
    else {
      uint64_t v12 = 0x6F4C657275636553LL;
    }
    if (a3 == 1) {
      unint64_t v13 = 0xE900000000000079LL;
    }
    else {
      unint64_t v13 = 0xEF736E6F69746163LL;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, 0x7972616D697250LL, 0xE700000000000000LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      if (qword_10099B318 != -1) {
        swift_once(&qword_10099B318, sub_100352F58);
      }
      OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
      uint64_t v15 = sub_1006A0BD8(v21);
      goto LABEL_16;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v15 = sub_1006A0608(v21);
LABEL_16:
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_100012ED8(a1, v17);
  (*(void (**)(uint64_t, uint64_t))(v18 + 184))(v17, v18);
  if ((v16 & 0x8000000000000000LL) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

  else
  {
    sub_1003DB840(v11, a2, v16, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  return result;
}

Swift::Int sub_1004ED708(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  uint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = (void *)sub_1003D49D8(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100141320(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1004ED788(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconEstimatedLocation(0LL) - 8);
  uint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = (void *)sub_1003D4A00(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100547210(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1004ED808(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v5 = (void *)*v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0) {
    uint64_t v5 = (void *)sub_1003D4A28(v5);
  }
  Swift::Int result = sub_100548030(a1, a2);
  *uint64_t v2 = v5;
  return result;
}

void *sub_1004ED8A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v326 = type metadata accessor for Date(0LL);
  uint64_t v325 = *(void *)(v326 - 8);
  uint64_t v4 = __chkstk_darwin(v326);
  uint64_t v324 = (uint64_t)&v298 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  v323 = (char *)&v298 - v6;
  uint64_t v7 = sub_100004AEC(&qword_1009A7D38);
  __chkstk_darwin(v7);
  v339 = (char *)&v298 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v298 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  v303 = (char *)&v298 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v305 = (uint64_t)&v298 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v308 = (uint64_t)&v298 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v298 - v20;
  __chkstk_darwin(v19);
  uint64_t v311 = (uint64_t)&v298 - v22;
  uint64_t v23 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v23);
  uint64_t v333 = (uint64_t)&v298 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v332 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v331 = *(void *)(v332 - 8);
  __chkstk_darwin(v332);
  uint64_t v327 = (uint64_t)&v298 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v26);
  v349 = (char *)&v298 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v346 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v345 = *(void *)(v346 - 8);
  __chkstk_darwin(v346);
  uint64_t v353 = (uint64_t)&v298 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v352 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v29 = __chkstk_darwin(v352);
  v317 = (char *)&v298 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v316 = (uint64_t)&v298 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v344 = (uint64_t)&v298 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v343 = (uint64_t)&v298 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v322 = (uint64_t)&v298 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v336 = (uint64_t)&v298 - v40;
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v298 - v41;
  uint64_t v43 = type metadata accessor for UUID(0LL);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = __chkstk_darwin(v43);
  v304 = (char *)&v298 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = __chkstk_darwin(v45);
  v330 = (char *)&v298 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v321 = (char *)&v298 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v315 = (char *)&v298 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v312 = (char *)&v298 - v54;
  __chkstk_darwin(v53);
  uint64_t v56 = (char *)&v298 - v55;
  uint64_t v57 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v58 = __chkstk_darwin(v57);
  uint64_t v59 = __chkstk_darwin(v58);
  v307 = (char *)&v298 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v348 = (char *)&v298 - v62;
  __chkstk_darwin(v61);
  uint64_t v329 = (uint64_t)&v298 - v64;
  uint64_t v320 = v9;
  unint64_t v65 = *(void *)(*(void *)(a1 + *(int *)(v9 + 40)) + 16LL);
  if (v65 >= 0x100)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    JUMPOUT(0x1004EFFFCLL);
  }

  uint64_t v335 = a1;
  if (v65 == 1)
  {
    if (qword_10099B538 != -1) {
LABEL_111:
    }
      swift_once(&qword_10099B538, sub_1004F3B48);
    uint64_t v66 = type metadata accessor for Logger(0LL);
    sub_10000A720(v66, (uint64_t)qword_100A2ACC8);
    uint64_t v67 = sub_10001DC4C(v335, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.default.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = v43;
      uint64_t v71 = swift_slowAlloc(22LL, -1LL);
      uint64_t v72 = swift_slowAlloc(32LL, -1LL);
      v360 = (uint64_t (*)(void, void, void))v72;
      *(_DWORD *)uint64_t v71 = 141558275;
      uint64_t v364 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v364, v365, v71 + 4, v71 + 12);
      *(_WORD *)(v71 + 12) = 2081;
      uint64_t v73 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter(v70, v73);
      uint64_t v364 = sub_1003F11D4(v74, v75, (uint64_t *)&v360);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v364, v365, v71 + 14, v71 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl( (void *)&_mh_execute_header,  v68,  v69,  "%{private,mask.hash}s is a single beacon group, returning default set of 1 beacon",  (uint8_t *)v71,  0x16u);
      swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_slowDealloc(v71, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    }

    uint64_t v234 = sub_100004AEC(&qword_1009B28A0);
    uint64_t inited = swift_initStackObject(v234, v359);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_1001CC778();
    *(void *)(inited + 32) = v236;
    uint64_t v237 = sub_1006F1554(inited);
    swift_setDeallocating(inited);
    uint64_t v238 = sub_100004AEC(&qword_1009A0B30);
    swift_arrayDestroy(inited + 32, 1LL, v238);
    return (void *)v237;
  }

  v318 = v21;
  uint64_t v302 = v63;
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v76 = sub_1006A0C34((uint64_t)v360);
  swift_bridgeObjectRelease();
  double v77 = (double)v76;
  uint64_t v364 = (uint64_t)&_swiftEmptySetSingleton;
  v351 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
  v351(v329, 1LL, 1LL, v43);
  sub_1001CC778();
  uint64_t v78 = 0LL;
  uint64_t v80 = *(void *)(v79 + 56);
  uint64_t v337 = v79 + 56;
  uint64_t v347 = v79;
  uint64_t v81 = 1LL << *(_BYTE *)(v79 + 32);
  uint64_t v82 = -1LL;
  if (v81 < 64) {
    uint64_t v82 = ~(-1LL << v81);
  }
  unint64_t v83 = v82 & v80;
  int64_t v338 = (unint64_t)(v81 + 63) >> 6;
  v334 = &v364;
  v310 = (char *)&v363 + 1;
  __int128 v341 = xmmword_1008003C0;
  __int128 v328 = 0x8700203uLL;
  v319 = (char *)&type metadata for Any + 8;
  __int128 v309 = 0x1000303uLL;
  __int128 v306 = 0x8700303uLL;
  uint64_t v342 = v2;
  uint64_t v358 = v43;
  uint64_t v12 = v349;
  v350 = v56;
  uint64_t v357 = v44;
  v340 = v42;
  while (1)
  {
    uint64_t v88 = v348;
    if (!v83) {
      break;
    }
    unint64_t v89 = __clz(__rbit64(v83));
    uint64_t v90 = (v83 - 1) & v83;
    uint64_t v355 = v78;
    unint64_t v91 = v89 | (v78 << 6);
LABEL_29:
    uint64_t v96 = *(void *)(v44 + 72);
    unint64_t v97 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
    v97(v348, *(void *)(v347 + 48) + v96 * v91, v43);
    v351((uint64_t)v88, 0LL, 1LL, v43);
    uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    v98(v56, v88, v43);
    v356 = (uint64_t (*)(char *, char *, uint64_t))v97;
    uint64_t v99 = ((uint64_t (*)(char *, char *, uint64_t))v97)(v42, v56, v43);
    unint64_t v100 = (int *)v352;
    static Date.distantPast.getter(v99);
    v42[v100[5]] = 0;
    *(_OWORD *)&v42[v100[7]] = v341;
    v42[v100[8]] = 0;
    *(void *)&v42[v100[9]] = 0LL;
    sub_100504F30((uint64_t)v56, (uint64_t)v12);
    int v101 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v345 + 48))(v12, 1LL, v346);
    unint64_t v354 = v90;
    if (v101 == 1)
    {
      uint64_t v102 = v2;
      sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A9C30);
      if (qword_10099B538 != -1) {
        swift_once(&qword_10099B538, sub_1004F3B48);
      }
      uint64_t v103 = type metadata accessor for Logger(0LL);
      sub_10000A720(v103, (uint64_t)qword_100A2ACC8);
      uint64_t v104 = v330;
      uint64_t v105 = v356(v330, v56, v43);
      int v106 = (os_log_s *)Logger.logObject.getter(v105);
      os_log_type_t v107 = static os_log_type_t.error.getter(v106);
      BOOL v108 = os_log_type_enabled(v106, v107);
      uint64_t v44 = v357;
      if (v108)
      {
        uint64_t v109 = swift_slowAlloc(22LL, -1LL);
        uint64_t v110 = swift_slowAlloc(32LL, -1LL);
        v360 = (uint64_t (*)(void, void, void))v110;
        *(_DWORD *)uint64_t v109 = v328;
        uint64_t v363 = 1752392040LL;
        uint64_t v111 = v334;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v334, v109 + 4, v109 + 12);
        *(_WORD *)(v109 + 12) = 2081;
        uint64_t v112 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter(v358, v112);
        uint64_t v363 = sub_1003F11D4(v113, v114, (uint64_t *)&v360);
        uint64_t v42 = v340;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v111, v109 + 14, v109 + 22);
        swift_bridgeObjectRelease();
        int8x16_t v115 = v104;
        uint64_t v85 = *(void (**)(char *, uint64_t))(v44 + 8);
        v85(v115, v358);
        _os_log_impl( (void *)&_mh_execute_header,  v106,  v107,  "No beacon record for %{private,mask.hash}s",  (uint8_t *)v109,  0x16u);
        swift_arrayDestroy(v110, 1LL, v319);
        uint64_t v2 = v342;
        swift_slowDealloc(v110, -1LL, -1LL);
        uint64_t v116 = v109;
        uint64_t v43 = v358;
        swift_slowDealloc(v116, -1LL, -1LL);
      }

      else
      {
        unint64_t v84 = v104;
        uint64_t v85 = *(void (**)(char *, uint64_t))(v357 + 8);
        v85(v84, v43);

        uint64_t v2 = v102;
        uint64_t v42 = v340;
      }

      uint64_t v86 = v344;
      sub_10001DC4C((uint64_t)v42, v344, type metadata accessor for BeaconStatus);
      uint64_t v87 = v343;
      sub_1000BF92C(v343, v86);
      sub_100018C68(v87, type metadata accessor for BeaconStatus);
      sub_100018C68((uint64_t)v42, type metadata accessor for BeaconStatus);
      uint64_t v56 = v350;
      v85(v350, v43);
      uint64_t v12 = v349;
      unint64_t v83 = v354;
      uint64_t v78 = v355;
    }

    else
    {
      sub_10002218C((uint64_t)v12, v353, type metadata accessor for OwnedBeaconRecord);
      uint64_t v117 = v333;
      sub_10050B884((uint64_t)v56, v333);
      uint64_t v118 = v332;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v331 + 48))(v117, 1LL, v332) == 1)
      {
        sub_100015794(v117, &qword_1009AA870);
      }

      else
      {
        uint64_t v119 = v117;
        uint64_t v120 = v327;
        sub_10002218C(v119, v327, type metadata accessor for BeaconProductInfoRecord);
        uint64_t v121 = v120;
        uint64_t v12 = *(char **)(v120 + *(int *)(v118 + 72));
        if (v12)
        {
          uint64_t v122 = *((void *)v12 + 2);
          if (v122)
          {
            uint64_t v123 = 88LL;
            uint64_t v124 = 1LL;
            while (1)
            {
              int v125 = v12[v123];
              if (v125 != 2 && (v125 & 1) != 0) {
                break;
              }
              if (v122 == v124) {
                goto LABEL_46;
              }
              v123 += 64LL;
              if (__OFADD__(v124++, 1LL))
              {
                __break(1u);
                goto LABEL_109;
              }
            }

            uint64_t v216 = qword_10099B538;
            swift_bridgeObjectRetain(v12);
            if (v216 != -1) {
              swift_once(&qword_10099B538, sub_1004F3B48);
            }
            uint64_t v217 = type metadata accessor for Logger(0LL);
            sub_10000A720(v217, (uint64_t)qword_100A2ACC8);
            sub_10001DC4C(v335, v311, type metadata accessor for OwnedBeaconGroup);
            swift_bridgeObjectRetain(v12);
            v219 = (os_log_s *)Logger.logObject.getter(v218);
            os_log_type_t v220 = static os_log_type_t.default.getter(v219);
            LODWORD(v314) = v220;
            BOOL v221 = os_log_type_enabled(v219, v220);
            uint64_t v145 = (void (*)(uint64_t, char *, uint64_t))v356;
            if (v221)
            {
              uint64_t v222 = swift_slowAlloc(32LL, -1LL);
              uint64_t v313 = swift_slowAlloc(64LL, -1LL);
              v360 = (uint64_t (*)(void, void, void))v313;
              *(_DWORD *)uint64_t v222 = v306;
              uint64_t v363 = 1752392040LL;
              v223 = v334;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v334, v222 + 4, v222 + 12);
              *(_WORD *)(v222 + 12) = 2081;
              v301 = v219;
              uint64_t v224 = v311;
              uint64_t v225 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              uint64_t v226 = dispatch thunk of CustomStringConvertible.description.getter(v358, v225);
              uint64_t v363 = sub_1003F11D4(v226, v227, (uint64_t *)&v360);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v223, v222 + 14, v222 + 22);
              swift_bridgeObjectRelease();
              sub_100018C68(v224, type metadata accessor for OwnedBeaconGroup);
              *(_WORD *)(v222 + 22) = 2080;
              uint64_t v299 = v222 + 24;
              v300 = (uint8_t *)v222;
              swift_bridgeObjectRetain(v12);
              uint64_t v229 = Array.description.getter(v228, &type metadata for AccessoryLayoutTemplate);
              unint64_t v231 = v230;
              swift_bridgeObjectRelease();
              uint64_t v232 = v229;
              uint64_t v56 = v350;
              uint64_t v233 = v342;
              uint64_t v363 = sub_1003F11D4(v232, v231, (uint64_t *)&v360);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v363, v223, v299, v222 + 32);
              swift_bridgeObjectRelease_n(v12, 2LL);
              uint64_t v2 = v233;
              uint64_t v128 = (uint64_t)v339;
              uint64_t v141 = v329;
              swift_bridgeObjectRelease();
              uint64_t v43 = v358;
              _os_log_impl( (void *)&_mh_execute_header,  v301,  (os_log_type_t)v314,  "Group %{private,mask.hash}s multipart layout template: %s",  v300,  0x20u);
              swift_arrayDestroy(v313, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v313, -1LL, -1LL);
              swift_slowDealloc(v300, -1LL, -1LL);

              sub_100018C68(v327, type metadata accessor for BeaconProductInfoRecord);
              sub_100015794(v141, &qword_10099D8A0);
            }

            else
            {
              swift_bridgeObjectRelease_n(v12, 2LL);

              sub_100018C68(v311, type metadata accessor for OwnedBeaconGroup);
              sub_100018C68(v327, type metadata accessor for BeaconProductInfoRecord);
              uint64_t v141 = v329;
              sub_100015794(v329, &qword_10099D8A0);
              uint64_t v43 = v358;
              uint64_t v128 = (uint64_t)v339;
            }

            goto LABEL_54;
          }
        }

uint64_t sub_1004F0010(uint64_t a1)
{
  uint64_t v163 = a1;
  uint64_t v2 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v2);
  uint64_t v149 = (uint64_t)&v144 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v148 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  uint64_t v145 = (uint64_t)&v144 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v5);
  uint64_t v153 = (uint64_t)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v154 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v152 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v151 = (uint64_t)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v157 = (uint64_t)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v164 = *(void *)(v10 - 8);
  uint64_t v165 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v162 = (char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v158 = (char *)&v144 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v156 = (char *)&v144 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v150 = (char *)&v144 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v146 = (char *)&v144 - v20;
  __chkstk_darwin(v19);
  uint64_t v155 = (char *)&v144 - v21;
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v144 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v161 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v25 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  uint64_t v159 = (uint64_t)&v144 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v144 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v144 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v166 = v1;
  uint64_t v34 = v163;
  uint64_t v167 = v163;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10015471C);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  uint64_t v160 = v30;
  if (v35(v29, 1LL, v30) == 1)
  {
    sub_100015794((uint64_t)v29, &qword_1009AE490);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    sub_10000A720(v36, (uint64_t)qword_100A2AC98);
    uint64_t v38 = v164;
    uint64_t v37 = v165;
    uint64_t v39 = (uint64_t)v162;
    uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v164 + 16))(v162, v34, v165);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc(22LL, -1LL);
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      uint64_t v168 = v44;
      *(_DWORD *)uint64_t v43 = 141558275;
      uint64_t v170 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, v43 + 4, v43 + 12);
      *(_WORD *)(v43 + 12) = 2081;
      uint64_t v45 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v37, v45);
      uint64_t v170 = sub_1003F11D4(v46, v47, &v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, v43 + 14, v43 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v37);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "groupedBeaconDisplayName: No beacon naming record for beacon %{private,mask.hash}s",  (uint8_t *)v43,  0x16u);
      swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v37);
    }

    return 0LL;
  }

  sub_10002218C((uint64_t)v29, (uint64_t)v33, type metadata accessor for BeaconNamingRecord);
  sub_100504F30(v34, (uint64_t)v24);
  uint64_t v48 = v161;
  int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1LL, v161);
  uint64_t v162 = v33;
  uint64_t v50 = v34;
  if (v49 == 1)
  {
    sub_100015794((uint64_t)v24, (uint64_t *)&unk_1009A9C30);
    uint64_t v51 = v165;
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v52 = type metadata accessor for Logger(0LL);
    sub_10000A720(v52, (uint64_t)qword_100A2AC98);
    uint64_t v53 = v164;
    uint64_t v54 = v158;
    uint64_t v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v164 + 16))(v158, v34, v51);
    uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = static os_log_type_t.error.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc(22LL, -1LL);
      uint64_t v59 = swift_slowAlloc(32LL, -1LL);
      uint64_t v168 = v59;
      *(_DWORD *)uint64_t v58 = 141558275;
      uint64_t v170 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, v58 + 4, v58 + 12);
      *(_WORD *)(v58 + 12) = 2081;
      uint64_t v60 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter(v51, v60);
      uint64_t v170 = sub_1003F11D4(v61, v62, &v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v51);
      _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "groupedBeaconDisplayName: No beacon record for beacon identifier %{private,mask.hash}s",  (uint8_t *)v58,  0x16u);
      swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v51);
    }

LABEL_25:
    uint64_t v84 = (uint64_t)v162;
    uint64_t v85 = (uint64_t *)&v162[*(int *)(v160 + 32)];
    uint64_t v63 = *v85;
    swift_bridgeObjectRetain(v85[1]);
    uint64_t v86 = type metadata accessor for BeaconNamingRecord;
    uint64_t v87 = v84;
    goto LABEL_26;
  }

  uint64_t v64 = v159;
  sub_10002218C((uint64_t)v24, v159, type metadata accessor for OwnedBeaconRecord);
  uint64_t v65 = v157;
  sub_10001581C(v64 + *(int *)(v48 + 28), v157, &qword_10099D8A0);
  uint64_t v67 = v164;
  uint64_t v66 = v165;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v65, 1LL, v165) == 1)
  {
    uint64_t v68 = &qword_10099D8A0;
    uint64_t v69 = v65;
LABEL_19:
    sub_100015794(v69, v68);
    uint64_t v73 = v156;
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v74 = type metadata accessor for Logger(0LL);
    sub_10000A720(v74, (uint64_t)qword_100A2AC98);
    uint64_t v75 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 16))(v73, v34, v66);
    uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v77 = static os_log_type_t.default.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = swift_slowAlloc(22LL, -1LL);
      uint64_t v79 = swift_slowAlloc(32LL, -1LL);
      uint64_t v168 = v79;
      *(_DWORD *)uint64_t v78 = 141558275;
      uint64_t v170 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, v78 + 4, v78 + 12);
      *(_WORD *)(v78 + 12) = 2081;
      uint64_t v80 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter(v66, v80);
      uint64_t v170 = sub_1003F11D4(v81, v82, &v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, v78 + 14, v78 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v73, v66);
      _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "groupedBeaconDisplayName: Beacon %{private,mask.hash}s does not belong to an item group or group record is missing.",  (uint8_t *)v78,  0x16u);
      swift_arrayDestroy(v79, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1LL, -1LL);
      swift_slowDealloc(v78, -1LL, -1LL);

      uint64_t v83 = v159;
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v67 + 8))(v73, v66);
      uint64_t v83 = v64;
    }

    sub_100018C68(v83, type metadata accessor for OwnedBeaconRecord);
    goto LABEL_25;
  }

  uint64_t v70 = (uint64_t)v155;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v155, v65, v66);
  uint64_t v71 = v153;
  sub_10050F124(v70, v153);
  uint64_t v72 = v154;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v71, 1LL, v154) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v70, v66);
    uint64_t v68 = &qword_1009AA830;
    uint64_t v69 = v71;
    goto LABEL_19;
  }

  uint64_t v89 = v151;
  sub_10002218C(v71, v151, type metadata accessor for OwnedBeaconGroup);
  unint64_t v90 = *(void *)(*(void *)(v89 + *(int *)(v72 + 40)) + 16LL);
  if (v90 < 0x100)
  {
    unint64_t v91 = v150;
    if (v90 == 1)
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v92 = type metadata accessor for Logger(0LL);
      sub_10000A720(v92, (uint64_t)qword_100A2AC98);
      uint64_t v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 16))(v91, v50, v66);
      int64_t v94 = (os_log_s *)Logger.logObject.getter(v93);
      os_log_type_t v95 = static os_log_type_t.default.getter(v94);
      if (os_log_type_enabled(v94, v95))
      {
        uint64_t v96 = swift_slowAlloc(22LL, -1LL);
        uint64_t v97 = swift_slowAlloc(32LL, -1LL);
        uint64_t v168 = v97;
        *(_DWORD *)uint64_t v96 = 141558275;
        uint64_t v170 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, v96 + 4, v96 + 12);
        *(_WORD *)(v96 + 12) = 2081;
        uint64_t v98 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter(v66, v98);
        uint64_t v170 = sub_1003F11D4(v99, v100, &v168);
        uint64_t v89 = v151;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v171, v96 + 14, v96 + 22);
        swift_bridgeObjectRelease();
        int v101 = *(void (**)(char *, uint64_t))(v67 + 8);
        v101(v91, v66);
        _os_log_impl( (void *)&_mh_execute_header,  v94,  v95,  "groupedBeaconDisplayName: Beacon %{private,mask.hash}s is from a single group.",  (uint8_t *)v96,  0x16u);
        swift_arrayDestroy(v97, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v97, -1LL, -1LL);
        uint64_t v102 = v96;
        uint64_t v72 = v154;
        swift_slowDealloc(v102, -1LL, -1LL);

        v101(v155, v66);
        uint64_t v103 = v159;
      }

      else
      {

        BOOL v108 = *(void (**)(char *, uint64_t))(v67 + 8);
        v108(v91, v66);
        v108((char *)v70, v66);
        uint64_t v103 = v64;
      }

      sub_100018C68(v103, type metadata accessor for OwnedBeaconRecord);
      sub_100018C68((uint64_t)v162, type metadata accessor for BeaconNamingRecord);
      uint64_t v109 = (uint64_t *)(v89 + *(int *)(v72 + 36));
      uint64_t v63 = *v109;
      swift_bridgeObjectRetain(v109[1]);
      uint64_t v86 = type metadata accessor for OwnedBeaconGroup;
      uint64_t v87 = v89;
    }

    else
    {
      uint64_t v104 = sub_10054FA7C(v64);
      uint64_t v105 = v149;
      sub_10050B884(v50, v149);
      uint64_t v106 = v148;
      int v107 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v105, 1LL, v148);
      if (v107 == 1)
      {
        sub_100015794(v105, &qword_1009AA870);
      }

      else
      {
        uint64_t v110 = v145;
        sub_10002218C(v105, v145, type metadata accessor for BeaconProductInfoRecord);
        uint64_t v111 = *(void *)(v110 + *(int *)(v106 + 72));
        if (v111)
        {
          uint64_t v112 = *(void *)(v111 + 16);
          if (v112)
          {
            uint64_t v113 = (uint64_t *)(v111 + 48);
            while (v104 != *((unsigned __int8 *)v113 - 16))
            {
              v113 += 8;
              if (!--v112) {
                goto LABEL_44;
              }
            }

            uint64_t v134 = *v113;
            uint64_t v135 = v113[1];
            uint64_t v136 = (void *)v113[2];
            uint64_t v137 = v64;
            uint64_t v138 = v113[4];
            unint64_t v139 = (uint64_t *)(v89 + *(int *)(v154 + 36));
            uint64_t v140 = v110;
            uint64_t v141 = v139[1];
            uint64_t v168 = *v139;
            uint64_t v169 = v141;
            swift_bridgeObjectRetain(v138);
            swift_bridgeObjectRetain(v141);
            swift_bridgeObjectRetain(v134);
            swift_bridgeObjectRetain(v136);
            v142._countAndFlagsBits = 2108704LL;
            v142._object = (void *)0xE300000000000000LL;
            String.append(_:)(v142);
            swift_bridgeObjectRetain(v136);
            v143._countAndFlagsBits = v135;
            v143._object = v136;
            String.append(_:)(v143);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n(v136, 2LL);
            swift_bridgeObjectRelease();
            uint64_t v63 = v168;
            sub_100018C68(v140, type metadata accessor for BeaconProductInfoRecord);
            sub_100018C68(v89, type metadata accessor for OwnedBeaconGroup);
            (*(void (**)(char *, uint64_t))(v67 + 8))(v155, v66);
            sub_100018C68(v137, type metadata accessor for OwnedBeaconRecord);
            uint64_t v86 = type metadata accessor for BeaconNamingRecord;
            uint64_t v87 = (uint64_t)v162;
            goto LABEL_26;
          }
        }

void sub_1004F116C(uint64_t a1, uint64_t a2, dispatch_group_s *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = sub_100004AEC(a4);
  __chkstk_darwin(v10);
  uint64_t v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = swift_projectBox(a2);
  sub_10001581C(a1, (uint64_t)v12, a5);
  uint64_t v14 = sub_100004AEC(a5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v12, 0LL, 1LL, v14);
  swift_beginAccess(v13, v16, 1LL, 0LL);
  sub_1000D4D50((uint64_t)v12, v13, a4);
  dispatch_group_leave(a3);
}

uint64_t sub_1004F1250()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v4 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  uint64_t v11 = (void *)static OS_dispatch_queue.global(qos:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = sub_100555AC4;
  uint64_t v23 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_100960A98;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v16 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v1, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v6, v3, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v19);
  return swift_release();
}

void *sub_1004F14B0()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5C8 == -1) {
    goto LABEL_2;
  }
LABEL_30:
  swift_once(&qword_10099B5C8, sub_1005BD7E8);
LABEL_2:
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_100A2ADC0);
  uint64_t result = sub_100533A4C(v8);
  uint64_t v10 = result;
  int64_t v11 = 0LL;
  uint64_t v12 = result + 8;
  uint64_t v13 = 1LL << *((_BYTE *)result + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & result[8];
  int64_t v22 = (unint64_t)(v13 + 63) >> 6;
  if (v15)
  {
LABEL_5:
    unint64_t v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v17 = v16 | (v11 << 6);
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v22) {
      goto LABEL_27;
    }
    unint64_t v19 = v12[v18];
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v22) {
        goto LABEL_27;
      }
      unint64_t v19 = v12[v11];
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v22) {
          goto LABEL_27;
        }
        unint64_t v19 = v12[v11];
        if (!v19)
        {
          int64_t v11 = v18 + 3;
          if (v18 + 3 >= v22) {
            goto LABEL_27;
          }
          unint64_t v19 = v12[v11];
          if (!v19)
          {
            int64_t v11 = v18 + 4;
            if (v18 + 4 >= v22) {
              goto LABEL_27;
            }
            unint64_t v19 = v12[v11];
            if (!v19) {
              break;
            }
          }
        }
      }
    }

void *sub_1004F1784()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099BA10 == -1) {
    goto LABEL_2;
  }
LABEL_30:
  swift_once(&qword_10099BA10, sub_100783BF4);
LABEL_2:
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_100A2B788);
  uint64_t result = sub_100534248(v8);
  uint64_t v10 = result;
  int64_t v11 = 0LL;
  uint64_t v12 = result + 8;
  uint64_t v13 = 1LL << *((_BYTE *)result + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & result[8];
  int64_t v22 = (unint64_t)(v13 + 63) >> 6;
  if (v15)
  {
LABEL_5:
    unint64_t v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v17 = v16 | (v11 << 6);
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v22) {
      goto LABEL_27;
    }
    unint64_t v19 = v12[v18];
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v22) {
        goto LABEL_27;
      }
      unint64_t v19 = v12[v11];
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v22) {
          goto LABEL_27;
        }
        unint64_t v19 = v12[v11];
        if (!v19)
        {
          int64_t v11 = v18 + 3;
          if (v18 + 3 >= v22) {
            goto LABEL_27;
          }
          unint64_t v19 = v12[v11];
          if (!v19)
          {
            int64_t v11 = v18 + 4;
            if (v18 + 4 >= v22) {
              goto LABEL_27;
            }
            unint64_t v19 = v12[v11];
            if (!v19) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_1004F1A58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v281 = a4;
  uint64_t v280 = a3;
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v270 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v271 = v7;
  uint64_t v272 = (uint64_t)v255 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BeaconProductInfoRecord(0LL);
  __chkstk_darwin(v8);
  uint64_t v260 = (uint64_t)v255 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_10099CE68);
  __chkstk_darwin(v10);
  uint64_t v263 = (uint64_t)v255 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v262 = type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v261 = *(void *)(v262 - 8);
  uint64_t v12 = __chkstk_darwin(v262);
  uint64_t v257 = (uint64_t)v255 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v259 = (uint64_t)v255 - v14;
  uint64_t v286 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v282 = *(void *)(v286 - 8);
  __chkstk_darwin(v286);
  v283 = (char *)v255 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v287 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v284 = *(void *)(v287 - 8);
  __chkstk_darwin(v287);
  uint64_t v285 = (char *)v255 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v297 = type metadata accessor for DispatchTime(0LL);
  uint64_t v294 = *(void *)(v297 - 8);
  uint64_t v17 = __chkstk_darwin(v297);
  unint64_t v295 = (dispatch_group_s *)((char *)v255 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v17);
  unint64_t v296 = (unint64_t)v255 - v19;
  uint64_t v293 = type metadata accessor for KeySyncMetadata(0LL);
  uint64_t v266 = *(void *)(v293 - 8);
  uint64_t v20 = __chkstk_darwin(v293);
  uint64_t v274 = (uint64_t)v255 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v267 = v21;
  __chkstk_darwin(v20);
  uint64_t v305 = (uint64_t)v255 - v22;
  uint64_t v289 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v264 = *(void *)(v289 - 8);
  uint64_t v23 = __chkstk_darwin(v289);
  uint64_t v273 = (uint64_t)v255 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v265 = v24;
  __chkstk_darwin(v23);
  __int128 v306 = (__int128 *)((char *)v255 - v25);
  uint64_t v288 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v290 = *(void *)(v288 - 8);
  uint64_t v26 = __chkstk_darwin(v288);
  uint64_t v292 = (uint64_t)v255 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v291 = v27;
  __chkstk_darwin(v26);
  uint64_t v299 = (char *)v255 - v28;
  uint64_t v302 = type metadata accessor for Date(0LL);
  uint64_t v300 = *(void *)(v302 - 8);
  __chkstk_darwin(v302);
  uint64_t v30 = (char *)v255 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for UUID(0LL);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v258 = (char *)v255 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)v255 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v277 = (char *)v255 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v278 = (char *)v255 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v304 = (char *)v255 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  unint64_t v303 = (unint64_t)v255 - v44;
  uint64_t v275 = v45;
  __chkstk_darwin(v43);
  uint64_t v46 = *(int *)(v6 + 20);
  uint64_t v276 = a1;
  uint64_t v47 = a1 + v46;
  uint64_t v307 = v48;
  int v49 = *(void (**)(void))(v48 + 16);
  uint64_t v311 = (char *)v255 - v50;
  uint64_t v268 = v47;
  __int128 v309 = v49;
  v49();
  v301 = v30;
  sub_1004E6660((uint64_t)v30);
  if (a2[2]) {
    uint64_t v51 = (char *)a2[2];
  }
  else {
    uint64_t v51 = (char *)SPBeaconRoleIdUndefined;
  }
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v52 = 0LL;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v269 = 0LL;
  uint64_t v53 = sub_1006A0C70((uint64_t)aBlock);
  swift_bridgeObjectRelease();
  unint64_t v54 = a2[4];
  unint64_t v256 = v36;
  uint64_t v298 = v31;
  uint64_t v279 = a2;
  if (v54 && v51 == (char *)SPBeaconRoleIdOther)
  {
    uint64_t v55 = (void *)a2[3];
    swift_bridgeObjectRetain(v54);
    uint64_t v56 = swift_bridgeObjectRelease();
    goto LABEL_30;
  }

  int64_t v57 = *(void *)(v53 + 16);
  if (v57)
  {
    uint64_t aBlock = (void **)_swiftEmptyArrayStorage;
    uint64_t v58 = (dispatch_group_s *)v53;
    sub_100033428(0, v57, 0);
    uint64_t v59 = 0LL;
    uint64_t v60 = aBlock;
    v255[1] = v58;
    uint64_t v61 = (char *)v58 + 32;
    *(void *)&__int128 v310 = (char *)v58 + 32;
    while (1)
    {
      unint64_t v62 = *(uint64_t **)&v61[32 * v59 + 24];
      uint64_t v63 = v62[2];
      if (v63)
      {
        if ((char *)v62[4] == v51)
        {
          uint64_t v64 = (char **)(v62 + 8);
          uint64_t v65 = (void **)(v62 + 7);
          uint64_t v66 = (dispatch_group_s **)(v62 + 6);
          uint64_t v67 = v62 + 5;
LABEL_21:
          uint64_t v70 = *v65;
          uint64_t v52 = *v67;
          uint64_t v36 = *v64;
          uint64_t v58 = *v66;
          swift_bridgeObjectRetain(*v66);
          swift_bridgeObjectRetain(v36);
          uint64_t v61 = (char *)v310;
          goto LABEL_22;
        }

        if (v63 != 1)
        {
          uint64_t v64 = (char **)(v62 + 13);
          uint64_t v68 = 1LL;
          while (1)
          {
            uint64_t v69 = v68 + 1;
            if (__OFADD__(v68, 1LL)) {
              break;
            }
            if (*(v64 - 4) == v51)
            {
              uint64_t v67 = (uint64_t *)(v64 - 3);
              uint64_t v66 = (dispatch_group_s **)(v64 - 2);
              uint64_t v65 = (void **)(v64 - 1);
              goto LABEL_21;
            }

            v64 += 5;
            ++v68;
            if (v69 == v63) {
              goto LABEL_19;
            }
          }

          __break(1u);
          goto LABEL_59;
        }
      }

uint64_t sub_1004F3B00(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2AC98, 0x74536E6F63616562LL, 0xEB0000000065726FLL);
}

uint64_t sub_1004F3B28(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2ACB0, 0x7363697274656DLL, 0xE700000000000000LL);
}

uint64_t sub_1004F3B48(uint64_t a1)
{
  return sub_100189D34(a1, qword_100A2ACC8, 0x72617069746C756DLL, 0xE900000000000074LL);
}

uint64_t sub_1004F3B6C()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(31LL);
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x203A737265657020LL;
  v5._object = (void *)0xE800000000000000LL;
  String.append(_:)(v5);
  uint64_t v6 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v7 = *(void *)(v0 + *(int *)(v6 + 36));
  if (v7) {
    uint64_t v8 = *(void **)(v1 + *(int *)(v6 + 36));
  }
  else {
    uint64_t v8 = &_swiftEmptySetSingleton;
  }
  uint64_t v9 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v7);
  v10._countAndFlagsBits = Set.description.getter(v8, v2, v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x203A6574616420LL;
  v11._object = (void *)0xE700000000000000LL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = Date.localISO8601.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return 0x64496E6F63616562LL;
}

Swift::Int sub_1004F3CF8()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v5, v0, v1);
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1004F3DB0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
}

Swift::Int sub_1004F3E50(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v6, v1, v2);
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1004F3F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24));
}

BOOL sub_1004F3F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a2 + *(int *)(a3 + 24), a1 + *(int *)(a3 + 24)) & 1) == 0;
}

BOOL sub_1004F3F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24)) & 1) == 0;
}

uint64_t sub_1004F3F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a2 + *(int *)(a3 + 24), a1 + *(int *)(a3 + 24));
}

uint64_t sub_1004F3F84()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A1CBC(v10[1]);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v4, 1LL, 1LL, v7);
  uint64_t v8 = (void *)swift_allocObject(&unk_100962B00, 48LL, 7LL);
  v8[2] = 0LL;
  _OWORD v8[3] = 0LL;
  v8[4] = v1;
  v8[5] = v6;
  swift_retain();
  sub_10000BB68((uint64_t)v4, (uint64_t)&unk_1009B2BB0, (uint64_t)v8);
  swift_release();
  return sub_100015794((uint64_t)v4, &qword_1009A9BF0);
}

uint64_t sub_1004F40D0(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(double *)(v5 + 128) = a1;
  *(void *)(v5 + 120) = a5;
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  *(void *)(v5 + 136) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1004F412C, 0LL, 0LL);
}

uint64_t sub_1004F412C()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 144) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1004F422C;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004F422C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 152LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004F4288, 0LL, 0LL);
}

uint64_t sub_1004F4288()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 152);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = type metadata accessor for XPCActivity(0LL);
    static DispatchQoS.background.getter(v4);
    uint64_t v5 = swift_allocObject(&unk_100962B28, 24LL, 7LL);
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = v3;
    uint64_t v6 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc(v6);
    *(void *)(v0 + 160) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1004F4440;
    return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)( 0xD000000000000022LL,  0x80000001008680B0LL,  *(void *)(v0 + 136),  &unk_1009B2BC0,  v5,  &unk_1009B2BD0,  v2);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_10000A720(v9, (uint64_t)qword_100A2AC98);
    Swift::String v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing BeaconStoreActor!", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    swift_task_dealloc(*(void *)(v0 + 136));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1004F4440(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160LL);
  *(void *)(*(void *)v1 + 168LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004F449C, 0LL, 0LL);
}

uint64_t sub_1004F449C()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 120);
  swift_release(*(void *)(v0 + 152));
  uint64_t v3 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = v1;
  swift_release(v3);
  swift_task_dealloc(*(void *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004F44E8(uint64_t a1, uint64_t a2, double a3)
{
  *(double *)(v3 + 40) = a3;
  *(void *)(v3 + swift_unknownObjectUnownedDestroy(v0 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  uint64_t v4 = type metadata accessor for XPCActivity.Criteria.Options(0LL);
  *(void *)(v3 + 48) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 56) = v5;
  *(void *)(v3 + 64) = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for XPCActivity.Priority(0LL);
  *(void *)(v3 + 72) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v3 + 80) = v7;
  *(void *)(v3 + 88) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A17B8);
  *(void *)(v3 + 96) = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for XPCActivity.Criteria(0LL);
  *(void *)(v3 + 104) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v3 + 112) = v10;
  *(void *)(v3 + 120) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1004F45C0, 0LL, 0LL);
}

uint64_t sub_1004F45C0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  sub_10001581C(*(void *)(v0 + 32), v3, &qword_1009A17B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) != 1)
  {
    uint64_t v23 = *(void *)(v0 + 112);
    uint64_t v22 = *(void *)(v0 + 120);
    uint64_t v24 = *(void *)(v0 + 104);
    uint64_t v25 = *(void *)(v0 + 24);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
    v26(v22, *(void *)(v0 + 96), v24);
    v26(v25, v22, v24);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v25, 0LL, 1LL, v24);
    goto LABEL_7;
  }

  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  double v7 = *(double *)(v0 + 40);
  sub_100015794(*(void *)(v0 + 96), &qword_1009A17B8);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(v6 + 104))( v4,  enum case for XPCActivity.Priority.utility(_:),  v5);
  double v9 = v7 * 0.5;
  if ((~COERCE__INT64(v7 * 0.5) & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v9 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v9 < 9.22337204e18)
  {
    uint64_t v31 = *(void *)(v0 + 112);
    uint64_t v32 = *(void *)(v0 + 104);
    uint64_t v30 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 56);
    uint64_t v11 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 48);
    uint64_t v13 = *(void *)(v0 + 24);
    uint64_t v14 = (uint64_t)v9;
    uint64_t v15 = sub_100004AEC(&qword_1009A17D0);
    uint64_t v16 = swift_allocObject( v15,  ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
          + 3LL * *(void *)(v10 + 72),
            *(unsigned __int8 *)(v10 + 80) | 7LL);
    *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
    uint64_t v17 = static XPCActivity.Criteria.Options.requiresNetwork.getter(v16);
    uint64_t v18 = static XPCActivity.Criteria.Options.requiresClassC.getter(v17);
    static XPCActivity.Criteria.Options.allowBattery.getter(v18);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v16;
    uint64_t v19 = sub_100007864( &qword_10099CAF8,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options,  (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
    uint64_t v20 = sub_100004AEC(&qword_1009A17D8);
    uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_1009A17E0,  &qword_1009A17D8,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 16, v20, v21, v12, v19);
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v30, 1LL, 0LL, v14, v14, v11);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v13, 0LL, 1LL, v32);
LABEL_7:
    uint64_t v27 = *(void *)(v0 + 88);
    uint64_t v28 = *(void *)(v0 + 96);
    uint64_t v29 = *(void *)(v0 + 64);
    swift_task_dealloc(*(void *)(v0 + 120));
    swift_task_dealloc(v28);
    swift_task_dealloc(v27);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1004F485C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for XPCActivity.State(0LL);
  void v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1004F48C0, 0LL, 0LL);
}

uint64_t sub_1004F48C0()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, *(void *)(v0 + 24), v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for XPCActivity.State.checkIn(_:) || v4 == enum case for XPCActivity.State.wait(_:)) {
    goto LABEL_6;
  }
  if (v4 != enum case for XPCActivity.State.run(_:))
  {
    if (v4 == enum case for XPCActivity.State.defer(_:))
    {
      uint64_t v13 = type metadata accessor for XPCActivity(0LL);
      uint64_t v14 = sub_100007864( &qword_10099CAD0,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
      uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(v13, v14);
      uint64_t v17 = v16;
      uint64_t v18 = sub_1004F4B54;
      return swift_task_switch(v18, v15, v17);
    }

    if (v4 != enum case for XPCActivity.State.continue(_:)
      && v4 != enum case for XPCActivity.State.done(_:)
      && v4 != enum case for XPCActivity.State.invalidated(_:))
    {
      (*(void (**)(void, void))(*(void *)(v0 + 48) + 8LL))(*(void *)(v0 + 56), *(void *)(v0 + 40));
    }

uint64_t sub_1004F4B54()
{
  return swift_task_switch(sub_100571C6C, 0LL, 0LL);
}

uint64_t sub_1004F4B90()
{
  uint64_t v1 = type metadata accessor for XPCActivity(0LL);
  uint64_t v2 = sub_100007864( &qword_10099CAD0,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_1004F4C20, v3, v4);
}

uint64_t sub_1004F4C20()
{
  return swift_task_switch(sub_100571C6C, 0LL, 0LL);
}

uint64_t sub_1004F4C5C()
{
  v1[27] = v0;
  unint64_t v2 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_10099D720) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[28] = swift_task_alloc(v2);
  v1[29] = swift_task_alloc(v2);
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  v1[30] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v1[31] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[32] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[33] = swift_task_alloc(v6);
  v1[34] = swift_task_alloc(v6);
  v1[35] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for StableIdentifier(0LL);
  v1[36] = v7;
  unint64_t v8 = (*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[37] = swift_task_alloc(v8);
  v1[38] = swift_task_alloc(v8);
  v1[39] = swift_task_alloc(v8);
  v1[40] = swift_task_alloc(v8);
  v1[41] = swift_task_alloc(v8);
  v1[42] = swift_task_alloc(v8);
  v1[43] = swift_task_alloc(v8);
  v1[44] = swift_task_alloc(v8);
  v1[45] = swift_task_alloc(v8);
  v1[46] = swift_task_alloc(v8);
  v1[47] = swift_task_alloc(v8);
  v1[48] = swift_task_alloc(v8);
  v1[49] = swift_task_alloc(v8);
  v1[50] = swift_task_alloc(v8);
  v1[51] = swift_task_alloc(v8);
  v1[52] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord(0LL);
  v1[53] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v1[54] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[55] = swift_task_alloc(v11);
  v1[56] = swift_task_alloc(v11);
  v1[57] = swift_task_alloc(v11);
  v1[58] = swift_task_alloc(v11);
  v1[59] = swift_task_alloc(v11);
  return swift_task_switch(sub_1004F4E68, v0, 0LL);
}

uint64_t sub_1004F4E68()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 144, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 104, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 128))
  {
    sub_100012EC0((__int128 *)(v0 + 104), v0 + 64);
    sub_100012ED8((void *)(v0 + 64), *(void *)(v0 + 88));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C938 + dword_10099C938);
    unint64_t v2 = (void *)swift_task_alloc(unk_10099C93C);
    *(void *)(v0 + 480) = v2;
    *unint64_t v2 = v0;
    v2[1] = sub_1004F4F54;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004F4F54(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 480LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 216LL);
  *(void *)(*(void *)v1 + 488LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004F4FB4, v3, 0LL);
}

uint64_t sub_1004F4FB4()
{
  uint64_t v1 = (void *)(v0 + 64);
  if (*(void *)(v0 + 488))
  {
    uint64_t v2 = *(void *)(v0 + 216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(void *)(v0 + 496) = *(void *)(v2 + 136);
    swift_retain();
    return swift_task_switch(sub_1004F5250, 0LL, 0LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2AC98);
    unint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing FMIPService!", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void *)(v0 + 464);
    uint64_t v10 = *(void *)(v0 + 448);
    uint64_t v11 = *(void *)(v0 + 456);
    uint64_t v12 = *(void *)(v0 + 440);
    uint64_t v14 = *(void *)(v0 + 408);
    uint64_t v13 = *(void *)(v0 + 416);
    uint64_t v16 = *(void *)(v0 + 392);
    uint64_t v15 = *(void *)(v0 + 400);
    uint64_t v17 = *(void *)(v0 + 384);
    uint64_t v18 = *(void *)(v0 + 376);
    uint64_t v19 = *(void *)(v0 + 368);
    uint64_t v20 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 352);
    uint64_t v22 = *(void *)(v0 + 344);
    uint64_t v23 = *(void *)(v0 + 336);
    uint64_t v24 = *(void *)(v0 + 328);
    uint64_t v25 = *(void *)(v0 + 320);
    uint64_t v26 = *(void *)(v0 + 312);
    uint64_t v27 = *(void *)(v0 + 304);
    uint64_t v28 = *(void *)(v0 + 296);
    uint64_t v29 = *(void *)(v0 + 280);
    uint64_t v30 = *(void *)(v0 + 272);
    uint64_t v31 = *(void *)(v0 + 264);
    uint64_t v32 = *(void *)(v0 + 240);
    uint64_t v33 = *(void *)(v0 + 232);
    uint64_t v34 = *(void *)(v0 + 224);
    swift_task_dealloc(*(void *)(v0 + 472));
    swift_task_dealloc(v9);
    swift_task_dealloc(v11);
    swift_task_dealloc(v10);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1004F5250()
{
  uint64_t v1 = v0[62];
  uint64_t v2 = v0[27];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[63] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DD18;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[64] = v4;
  uint64_t v5 = sub_100004AEC(&qword_10099CFB8);
  *uint64_t v4 = v0;
  v4[1] = sub_1004F5310;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 26,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10001DD20,  v3,  v5);
}

uint64_t sub_1004F5310()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 504);
  uint64_t v3 = *(void *)(*v0 + 216);
  swift_task_dealloc(*(void *)(*v0 + 512));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 520) = *(void *)(v1 + 208);
  return swift_task_switch(sub_1004F5384, v3, 0LL);
}

void sub_1004F5384()
{
  uint64_t v1 = v0[65];
  uint64_t v128 = *(void *)(v1 + 16);
  if (v128)
  {
    unint64_t v2 = 0LL;
    uint64_t v124 = v0[53];
    uint64_t v126 = v0[54];
    uint64_t v119 = v0[32];
    uint64_t v122 = v0[65];
    while (1)
    {
      if (v2 >= *(void *)(v1 + 16))
      {
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
        return;
      }

      uint64_t v5 = v0[59];
      uint64_t v6 = v0[38];
      uint64_t v7 = v0[39];
      uint64_t v8 = v0[36];
      unint64_t v9 = (*(unsigned __int8 *)(v126 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
      uint64_t v10 = *(void *)(v126 + 72);
      sub_10001DC4C(v0[65] + v9 + v10 * v2, v5, type metadata accessor for OwnedBeaconRecord);
      uint64_t v11 = v5 + *(int *)(v124 + 24);
      sub_10001DC4C(v11, v7, type metadata accessor for StableIdentifier);
      LODWORD(v8) = swift_getEnumCaseMultiPayload(v7, v8);
      sub_100018C68(v7, type metadata accessor for StableIdentifier);
      sub_10001DC4C(v11, v6, type metadata accessor for StableIdentifier);
      uint64_t v12 = v0[38];
      if ((_DWORD)v8 == 1) {
        break;
      }
      uint64_t v14 = v0[36];
      uint64_t v13 = v0[37];
      sub_10001DC4C(v0[38], v13, type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v14);
      if (EnumCaseMultiPayload == 2)
      {
        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_12:
        uint64_t v1 = v122;
        uint64_t v16 = v0[37];
        uint64_t v12 = v0[38];
        uint64_t v17 = v0[31];
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v16, v17);
LABEL_13:
        sub_100018C68(v12, type metadata accessor for StableIdentifier);
        sub_10002218C(v0[59], v0[55], type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
          sub_1000328A4(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
        }
        unint64_t v19 = _swiftEmptyArrayStorage[2];
        unint64_t v18 = _swiftEmptyArrayStorage[3];
        if (v19 >= v18 >> 1) {
          sub_1000328A4(v18 > 1, v19 + 1, 1);
        }
        uint64_t v20 = v0[55];
        _swiftEmptyArrayStorage[2] = v19 + 1;
        sub_10002218C( v20,  (uint64_t)_swiftEmptyArrayStorage + v9 + v19 * v10,  type metadata accessor for OwnedBeaconRecord);
        goto LABEL_4;
      }

      if (EnumCaseMultiPayload == 3)
      {
        sub_100004AEC((uint64_t *)&unk_1009AF840);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }

      uint64_t v3 = v0[59];
      uint64_t v4 = v0[38];
      sub_100018C68(v0[37], type metadata accessor for StableIdentifier);
      sub_100018C68(v4, type metadata accessor for StableIdentifier);
      sub_100018C68(v3, type metadata accessor for OwnedBeaconRecord);
      uint64_t v1 = v122;
LABEL_4:
      if (v128 == ++v2) {
        goto LABEL_18;
      }
    }

    uint64_t v1 = v122;
    goto LABEL_13;
  }

uint64_t sub_1004F6180()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 528);
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1004F6460;
  }
  else {
    uint64_t v4 = sub_1004F61E4;
  }
  return swift_task_switch(v4, *(void *)(v2 + 216), 0LL);
}

uint64_t sub_1004F61E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 232);
  Date.init()(a1);
  uint64_t v3 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 0LL, 1LL, v3);
  if (qword_10099B568 != -1) {
    swift_once(&qword_10099B568, sub_10052D9CC);
  }
  uint64_t v4 = *(void *)(v1 + 224);
  uint64_t v5 = *(void *)(v1 + 232);
  uint64_t v6 = sub_100004AEC(&qword_1009B2BE0);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_1009B1E98);
  sub_10001581C(v5, v4, (uint64_t *)&unk_10099D720);
  __n128 v8 = swift_beginAccess(v7, v1 + 168, 33LL, 0LL);
  ManagedDefault.wrappedValue.setter(v4, v6, v8);
  swift_endAccess(v1 + 168);
  sub_100015794(v5, (uint64_t *)&unk_10099D720);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v1 + 464);
  uint64_t v10 = *(void *)(v1 + 448);
  uint64_t v11 = *(void *)(v1 + 456);
  uint64_t v12 = *(void *)(v1 + 440);
  uint64_t v14 = *(void *)(v1 + 408);
  uint64_t v13 = *(void *)(v1 + 416);
  uint64_t v16 = *(void *)(v1 + 392);
  uint64_t v15 = *(void *)(v1 + 400);
  uint64_t v17 = *(void *)(v1 + 384);
  uint64_t v19 = *(void *)(v1 + 376);
  uint64_t v20 = *(void *)(v1 + 368);
  uint64_t v21 = *(void *)(v1 + 360);
  uint64_t v22 = *(void *)(v1 + 352);
  uint64_t v23 = *(void *)(v1 + 344);
  uint64_t v24 = *(void *)(v1 + 336);
  uint64_t v25 = *(void *)(v1 + 328);
  uint64_t v26 = *(void *)(v1 + 320);
  uint64_t v27 = *(void *)(v1 + 312);
  uint64_t v28 = *(void *)(v1 + 304);
  uint64_t v29 = *(void *)(v1 + 296);
  uint64_t v30 = *(void *)(v1 + 280);
  uint64_t v31 = *(void *)(v1 + 272);
  uint64_t v32 = *(void *)(v1 + 264);
  uint64_t v33 = *(void *)(v1 + 240);
  uint64_t v34 = *(void *)(v1 + 232);
  uint64_t v35 = *(void *)(v1 + 224);
  swift_task_dealloc(*(void *)(v1 + 472));
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1004F6460()
{
  if (qword_10099B530 != -1) {
    swift_once(&qword_10099B530, sub_1004F3B28);
  }
  uint64_t v1 = *(void *)(v0 + 536);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2ACB0);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 536);
  if (v6)
  {
    __n128 v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)__n128 v8 = 138543362;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 200) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v8 + 4, v8 + 12);
    *uint64_t v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error from postMetrics: %{public}@", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_release();

    swift_errorRelease(v7);
  }

  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v0 + 464);
  uint64_t v13 = *(void *)(v0 + 448);
  uint64_t v14 = *(void *)(v0 + 456);
  uint64_t v15 = *(void *)(v0 + 440);
  uint64_t v17 = *(void *)(v0 + 408);
  uint64_t v16 = *(void *)(v0 + 416);
  uint64_t v19 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 400);
  uint64_t v20 = *(void *)(v0 + 384);
  uint64_t v22 = *(void *)(v0 + 376);
  uint64_t v23 = *(void *)(v0 + 368);
  uint64_t v24 = *(void *)(v0 + 360);
  uint64_t v25 = *(void *)(v0 + 352);
  uint64_t v26 = *(void *)(v0 + 344);
  uint64_t v27 = *(void *)(v0 + 336);
  uint64_t v28 = *(void *)(v0 + 328);
  uint64_t v29 = *(void *)(v0 + 320);
  uint64_t v30 = *(void *)(v0 + 312);
  uint64_t v31 = *(void *)(v0 + 304);
  uint64_t v32 = *(void *)(v0 + 296);
  uint64_t v33 = *(void *)(v0 + 280);
  uint64_t v34 = *(void *)(v0 + 272);
  uint64_t v35 = *(void *)(v0 + 264);
  uint64_t v36 = *(void *)(v0 + 240);
  uint64_t v37 = *(void *)(v0 + 232);
  uint64_t v38 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 472));
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004F679C(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v2 = type metadata accessor for DispatchQoS(0LL);
  *(void *)(v1 + swift_unknownObjectUnownedDestroy(v0 + 24) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1004F67F4, 0LL, 0LL);
}

uint64_t sub_1004F67F4()
{
  uint64_t v1 = type metadata accessor for XPCActivity(0LL);
  static DispatchQoS.background.getter(v1);
  uint64_t v2 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[4] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1004F689C;
  return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)( 0xD000000000000012LL,  0x8000000100867250LL,  v0[3],  &unk_1009B2818,  0LL,  &unk_1009B2828,  v0[2]);
}

uint64_t sub_1004F689C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 4Hasher.init(_seed:)(v5, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004F68F8, 0LL, 0LL);
}

uint64_t sub_1004F68F8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = *(void *)(v0 + 40);
  swift_release(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004F693C(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for XPCActivity.Criteria.Options(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for XPCActivity.Priority(0LL);
  v2[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A17B8);
  v2[11] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for XPCActivity.Criteria(0LL);
  v2[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[13] = v9;
  v2[14] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1004F6A10, 0LL, 0LL);
}

uint64_t sub_1004F6A10()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);
  sub_10001581C(*(void *)(v0 + 32), v3, &qword_1009A17B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v26 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v11 = *(void *)(v0 + 24);
    sub_100015794(*(void *)(v0 + 88), &qword_1009A17B8);
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))( v5,  enum case for XPCActivity.Priority.maintenance(_:),  v6);
    uint64_t v12 = sub_100004AEC(&qword_1009A17D0);
    uint64_t v13 = swift_allocObject( v12,  ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
          + *(void *)(v9 + 72),
            *(unsigned __int8 *)(v9 + 80) | 7LL);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    static XPCActivity.Criteria.Options.requiresNetwork.getter(v13);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v13;
    uint64_t v14 = sub_100007864( &qword_10099CAF8,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options,  (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
    uint64_t v15 = sub_100004AEC(&qword_1009A17D8);
    uint64_t v16 = sub_1000372EC( (unint64_t *)&qword_1009A17E0,  &qword_1009A17D8,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 16, v15, v16, v10, v14);
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v5, 0LL, 0LL, 0LL, 0LL, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v11, 0LL, 1LL, v26);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 104);
    uint64_t v17 = *(void *)(v0 + 112);
    uint64_t v19 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 24);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
    v21(v17, *(void *)(v0 + 88), v19);
    v21(v20, v17, v19);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v20, 0LL, 1LL, v19);
  }

  uint64_t v22 = *(void *)(v0 + 80);
  uint64_t v23 = *(void *)(v0 + 88);
  uint64_t v24 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v23);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004F6C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for XPCActivity.State(0LL);
  void v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1004F6C8C, 0LL, 0LL);
}

uint64_t sub_1004F6C8C()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, *(void *)(v0 + 24), v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for XPCActivity.State.run(_:))
  {
    sub_1004F6E50();
    uint64_t v5 = type metadata accessor for XPCActivity(0LL);
    uint64_t v6 = sub_100007864( &qword_10099CAD0,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
    uint64_t v9 = v8;
    uint64_t v10 = sub_1004F6DE4;
    return swift_task_switch(v10, v7, v9);
  }

  if (v4 == enum case for XPCActivity.State.defer(_:))
  {
    uint64_t v11 = type metadata accessor for XPCActivity(0LL);
    uint64_t v12 = sub_100007864( &qword_10099CAD0,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v11, v12);
    uint64_t v9 = v13;
    uint64_t v10 = sub_1004F4B54;
    return swift_task_switch(v10, v7, v9);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 48) + 8LL))(*(void *)(v0 + 56), *(void *)(v0 + 40));
  swift_task_dealloc(*(void *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004F6DE4()
{
  return swift_task_switch(sub_1004F6E20, 0LL, 0LL);
}

uint64_t sub_1004F6E20()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004F6E50()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  __chkstk_darwin(v2);
  uint64_t v36 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1004F730C();
  swift_retain_n(v0, 2LL);
  uint64_t v11 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  int v12 = LOBYTE(aBlock[0]);
  uint64_t v13 = static os_log_type_t.default.getter(v11);
  if (qword_10099B718 != -1) {
    swift_once(&qword_10099B718, sub_100651228);
  }
  uint64_t v14 = qword_100A2B028;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v16 + 56) = &type metadata for Bool;
  *(void *)(v16 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v16 + 32) = v12;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "localAvailable: %d", v33);
  uint64_t v17 = swift_bridgeObjectRelease();
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  uint64_t v19 = qword_100A2B028;
  if (v12)
  {
    os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_100A2B028,  "Container is already available -- calling completion immediately",  64LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v20 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v9, 1LL, 1LL, v20);
    uint64_t v21 = (void *)swift_allocObject(&unk_100961200, 40LL, 7LL);
    v21[2] = 0LL;
    v21[3] = 0LL;
    v21[4] = v1;
    swift_retain();
    sub_1003EDB00((uint64_t)v9, (uint64_t)&unk_1009B2838, (uint64_t)v21);
  }

  else
  {
    uint64_t v22 = os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_100A2B028,  "Container is not yet available",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v23 = static os_log_type_t.default.getter(v22);
    os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  v19,  "Waiting for availableWaitQueue",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v24 = (void *)swift_allocObject(&unk_1009611B0, 40LL, 7LL);
    void v24[2] = v10;
    v24[3] = sub_100565F14;
    v24[4] = v1;
    aBlock[4] = sub_100565F2C;
    void aBlock[5] = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    id aBlock[3] = &unk_1009611C8;
    uint64_t v25 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v26 = swift_retain();
    static DispatchQoS.unspecified.getter(v26);
    uint64_t v39 = _swiftEmptyArrayStorage;
    uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v29 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v30 = v36;
    uint64_t v31 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v28, v29, v38, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v6, v30, v25);
    _Block_release(v25);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v31);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v35);
  }

  swift_release();
  swift_release_n(v1, 2LL);
  return swift_release();
}

unint64_t sub_1004F7270@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10055A554(*a1);
  *a2 = result;
  return result;
}

CKRecordZoneID sub_1004F7298()
{
  v0._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v0._object = v1;
  v2._countAndFlagsBits = 0x74536E6F63616542LL;
  v2._object = (void *)0xEB0000000065726FLL;
  result.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v2, v0).super.isa;
  qword_100A2ACE0 = (uint64_t)result.super.isa;
  return result;
}

uint64_t sub_1004F730C()
{
  if (*(void *)(v0 + 184))
  {
    uint64_t v1 = *(void *)(v0 + 184);
  }

  else
  {
    uint64_t v2 = *(void *)(v0 + 152);
    uint64_t v3 = type metadata accessor for CloudKitCoordinator();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10056C524, v0, v2, (char *)&type metadata for () + 8, v3);
    uint64_t v1 = v6;
    uint64_t v4 = *(void *)(v0 + 184);
    *(void *)(v0 + 184) = v6;
    swift_retain();
    swift_release(v4);
  }

  swift_retain();
  return v1;
}

void sub_1004F73A0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(a1 + 192);
  uint64_t v24 = *(void *)(a1 + 160);
  uint64_t v23 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v9);
  swift_retain();
  uint64_t v14 = swift_retain();
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v17 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v16, v17, v3, v15);
  uint64_t v18 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000044LL,  0x8000000100867FB0LL,  v8,  v5,  v12,  0LL);
  uint64_t v19 = type metadata accessor for CloudKitCoordinator();
  uint64_t v20 = swift_allocObject(v19, 288LL, 7LL);
  swift_retain();
  uint64_t v21 = v24;
  uint64_t v22 = sub_100560060(v13, a1, v24, v18, v20);
  swift_release(v13);
  swift_release(a1);
  swift_release(v21);

  *uint64_t v25 = v22;
}

uint64_t sub_1004F75F4()
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage____beaconKeyManager;
  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage____beaconKeyManager))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage____beaconKeyManager);
  }

  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = type metadata accessor for BeaconKeyManager(0LL);
    swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    uint64_t v5 = swift_retain();
    uint64_t v2 = sub_1007975BC(v5);
    uint64_t v6 = *(void *)(v3 + v1);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release(v6);
  }

  swift_retain();
  return v2;
}

uint64_t sub_1004F7674@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1004F75F4();
  *a1 = result;
  return result;
}

uint64_t sub_1004F76AC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___recordPublisher);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___recordPublisher);
  }

  else
  {
    uint64_t v2 = *(void *)(*(void *)(v0 + 136) + 56LL);
    *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___recordPublisher) = v2;
    swift_retain_n(v2, 2LL);
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  return v2;
}

uint64_t sub_1004F7700()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_allocObject(&unk_1009626F0, 24LL, 7LL);
  swift_weakInit(v2 + 16, v0);
  uint64_t v3 = type metadata accessor for CryptorRepairTool();
  uint64_t v4 = (void *)swift_allocObject(v3, 72LL, 7LL);
  uint64_t v5 = sub_100004AEC(&qword_1009B2B40);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = swift_retain();
  void v4[2] = KeyedThrottle.init(throttleInterval:)(v6, 10800.0);
  uint64_t v7 = sub_100004AEC(&qword_1009BB4F0);
  uint64_t v8 = swift_allocObject(v7, 20LL, 7LL);
  *(_DWORD *)(v8 + swift_weakDestroy(v0 + 16) = 0;
  v4[3] = v8;
  v4[4] = 0LL;
  v4[5] = 0LL;
  void v4[6] = 0LL;
  void v4[7] = sub_10056BD24;
  v4[8] = v2;
  swift_release();
  *(void *)(*(void *)(v0 + 136) + 32LL) = v4;
  swift_retain();
  swift_release();
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v26[0] = 0x7365547265646E75LL;
  v26[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v27, v26, sub_10000A71C, 0LL, &type metadata for Bool);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
  {
    sub_1004F730C();
    sub_1006773A4();
    sub_1006775F0(1);
    sub_100677C2C();
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.SetupAPS", 38LL, 2LL, sub_10056BD2C);
    uint64_t result = swift_release();
  }

  if (*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_instructionEventCoalescer))
  {
    uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    uint64_t v11 = type metadata accessor for BeaconKeyManager(0LL);
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005717C8, v0, v10, (char *)&type metadata for () + 8, v11);
    int v12 = *(void **)(v26[0] + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_publisher);
    swift_retain();
    swift_release();
    sub_1005F34E8(v12);
    swift_release();
    swift_release();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005717C8, v0, v10, (char *)&type metadata for () + 8, v11);
    uint64_t v13 = v26[0];
    uint64_t v14 = *(void *)(v26[0] + 16LL);
    swift_unownedRetainStrong(v14);
    swift_retain();
    if (v14)
    {
      sub_10055E818(v14, (void (*)(uint64_t))sub_10056BD44, v13);
      swift_release();
    }

    else
    {
      sub_10079942C(v13);
    }

    swift_release_n(v13, 2LL);
    uint64_t v15 = swift_retain();
    sub_10055ED88(v15, v1);
    swift_release();
    uint64_t v16 = sub_100004AEC(&qword_10099FAA8);
    uint64_t inited = swift_initStackObject(v16, &v25);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    if (qword_10099B880 != -1) {
      swift_once(&qword_10099B880, sub_1006D6C48);
    }
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(qword_100A2B2A0);
    uint64_t v20 = v19;
    uint64_t v21 = swift_allocObject(&unk_1009626F0, 24LL, 7LL);
    swift_weakInit(v21 + 16, v1);
    uint64_t v22 = swift_allocObject(&unk_100962718, 32LL, 7LL);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = sub_10056BD4C;
    *(void *)(v22 + swift_unknownObjectUnownedDestroy(v0 + 24) = v21;
    *(void *)(inited + 32) = v18;
    *(void *)(inited + 40) = v20;
    *(void *)(inited + 48) = sub_10009BF1C;
    *(void *)(inited + 56) = v22;
    unint64_t v23 = sub_100412BD0(inited);
    uint64_t v24 = type metadata accessor for DarwinNotificationHelper(0LL);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    *(void *)(v1 + 248) = DarwinNotificationHelper.init(notificationHandlers:)(v23);
    swift_release();
    type metadata accessor for Transaction(0LL);
    swift_retain();
    static Transaction.asyncTask(name:block:)("UpdateBeaconStatusFromObservationStore", 38LL, 2LL, &unk_1009B2B50, v1);
    swift_release();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004F7B4C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v4);
    v5[3] = 0LL;
    v5[4] = 0LL;
    _OWORD v5[2] = v3;
    static Transaction.named<A>(_:with:)( "com.apple.searchpartyd.beaconstore.repairdatastore",  50LL,  2LL,  sub_1004BC6C8,  v5);
    return swift_release();
  }

  return result;
}

uint64_t sub_1004F7C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v18[1] = *(void *)(a2 + 48);
  uint64_t v11 = swift_allocObject(&unk_1009628D0, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v11 + swift_unknownObjectUnownedDestroy(v0 + 24) = a2;
  aBlock[4] = sub_10056C1D0;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_1009628E8;
  int v12 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v16 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_1004F7E10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = (void *)a2[6];
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v11);
    *(void *)&v12[-16] = a2;
    *(void *)&v12[-8] = v3;
    return static Transaction.named<A>(_:with:)("removeDuplicateBeaconsCheck", 27LL, 2LL, sub_10056C1D8, &v12[-32]);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004F7F2C(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  return swift_task_switch(sub_1004F7F44, 0LL, 0LL);
}

uint64_t sub_1004F7F44()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1004F8030;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004F8030(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004F808C, 0LL, 0LL);
}

uint64_t sub_1004F808C()
{
  *(void *)(*(void *)(v0 + 120) + 144LL) = *(void *)(v0 + 136);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004F80D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    type metadata accessor for Transaction(0LL);
    swift_retain(v4);
    static Transaction.asyncTask(name:block:)("UpdateBeaconStatusFromObservationStore", 38LL, 2LL, &unk_1009B2B68, v4);
    return swift_release_n(v4, 2LL);
  }

  return result;
}

uint64_t sub_1004F815C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  _OWORD v6[4] = a6;
  uint64_t v6[2] = a4;
  return swift_task_switch(sub_1004F8178, 0LL, 0LL);
}

uint64_t sub_1004F8178()
{
  uint64_t v1 = sub_1004F730C();
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1004F8210;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 72,  0LL,  0LL,  0xD000000000000014LL,  0x8000000100867600LL,  sub_100568A38,  v1,  &type metadata for Bool);
}

uint64_t sub_1004F8210()
{
  return swift_task_switch(sub_1004F8264, 0LL, 0LL);
}

uint64_t sub_1004F8264()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_release();
  char v3 = *(_BYTE *)(v0 + 72);
  uint64_t v4 = swift_allocObject(&unk_1009619F8, 33LL, 7LL);
  *(void *)(v0 + 56) = v4;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v4 + swift_unknownObjectUnownedDestroy(v0 + 24) = v1;
  *(_BYTE *)(v4 + 32) = v3;
  uint64_t v5 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc(v5);
  *(void *)(v0 + 64) = v6;
  void *v6 = v0;
  v6[1] = sub_1004F830C;
  return unsafeBlocking<A>(_:)(v6, sub_1000DEC6C, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_1004F830C()
{
  return swift_task_switch(sub_10015C680, 0LL, 0LL);
}

void sub_1004F8368()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v54 = *(char **)(v0 - 8);
  uint64_t v55 = (char *)v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (const char **)((char *)&v52 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v3 = (uint64_t *)type metadata accessor for URL(0LL);
  uint64_t v4 = *(v3 - 1);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v52 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v52 - v14;
  id v53 = (id)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v16 = [v53 standardUserDefaults];
  uint64_t v52 = "/MockBeaconStore-";
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v16 integerForKey:v17];

  if (v18 != (id)28)
  {
    if (v18 != (id)27)
    {
      uint64_t v13 = 0LL;
      uint64_t v35 = v56;
      goto LABEL_18;
    }

    type metadata accessor for BeaconStore(0LL);
    sub_1004E6208((uint64_t)v10);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x80000001008567C0LL, 1LL);
    id v16 = *(id *)(v4 + 8);
    ((void (*)(char *, uint64_t *))v16)(v10, v3);
    URL.appendingPathComponent(_:)(0x2E65746176697250LL, 0xED00006E656B6F74LL);
    ((void (*)(char *, uint64_t *))v16)(v13, v3);
    if (qword_10099B540 != -1) {
      goto LABEL_24;
    }
    while (1)
    {
      uint64_t v20 = (void *)qword_100A2ACE0;
      sub_1004E6208((uint64_t)v13);
      URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43LL, 0xED0000656E6F5A2FLL, 1LL);
      ((void (*)(char *, uint64_t *))v16)(v13, v3);
      v21._countAndFlagsBits = 0x65746176697250LL;
      v21._object = (void *)0xE700000000000000LL;
      URL.appendPathComponent(_:)(v21);
      id v22 = [v20 ownerName];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v25 = v24;

      v26._countAndFlagsBits = v23;
      v26._object = v25;
      URL.appendPathComponent(_:)(v26);
      swift_bridgeObjectRelease();
      id v27 = [v20 zoneName];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v30 = v29;

      v57._countAndFlagsBits = v28;
      v57._object = v30;
      v31._countAndFlagsBits = 0x6E656B6F742ELL;
      v31._object = (void *)0xE600000000000000LL;
      String.append(_:)(v31);
      URL.appendPathComponent(_:)(v57);
      swift_bridgeObjectRelease();
      Swift::Bool v32 = URL.checkResourceIsReachable()();
      if (v33)
      {
        swift_errorRelease(v33);
        Swift::Bool v34 = 0;
      }

      else
      {
        Swift::Bool v34 = v32;
      }

      uint64_t v35 = v56;
      Swift::Bool v36 = URL.checkResourceIsReachable()();
      if (v13)
      {
        swift_errorRelease(v13);
        uint64_t v13 = 0LL;
        if (v34) {
          goto LABEL_12;
        }
      }

      else if (!v36 && v34)
      {
LABEL_12:
        if (qword_10099B528 != -1) {
          swift_once(&qword_10099B528, sub_1004F3B00);
        }
        uint64_t v37 = type metadata accessor for Logger(0LL);
        uint64_t v38 = sub_10000A720(v37, (uint64_t)qword_100A2AC98);
        uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
        os_log_type_t v40 = static os_log_type_t.default.getter(v39);
        if (os_log_type_enabled(v39, v40))
        {
          int v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)int v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Recovering from 110328093", v41, 2u);
          swift_slowDealloc(v41, -1LL, -1LL);
        }

        id v42 = [v53 standardUserDefaults];
        NSString v43 = String._bridgeToObjectiveC()();
        [v42 removeObjectForKey:v43];
      }

      ((void (*)(char *, uint64_t *))v16)(v7, v3);
      uint64_t v19 = ((uint64_t (*)(char *, uint64_t *))v16)(v15, v3);
LABEL_18:
      uint64_t v44 = static os_log_type_t.default.getter(v19);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  qword_100A2B018,  "Migration attempting to re-initialize store.",  44LL,  2LL,  _swiftEmptyArrayStorage);
      char v3 = *(uint64_t **)(v35 + 136);
      uint64_t v45 = sub_1004F730C();
      uint64_t v46 = (void *)v3[2];
      *uint64_t v2 = v46;
      uint64_t v15 = v54;
      uint64_t v7 = v55;
      (*((void (**)(void *, void, char *))v54 + 13))( v2,  enum case for DispatchPredicate.notOnQueue(_:),  v55);
      id v47 = v46;
      LOBYTE(v46) = _dispatchPreconditionTest(_:)(v2);
      (*((void (**)(void *, char *))v15 + 1))(v2, v7);
      if ((v46 & 1) != 0)
      {
        uint64_t v48 = dispatch_group_create();
        dispatch_group_enter(v48);
        swift_retain();
        int v49 = v48;
        sub_100688204(0, v45, v3, v49);
        swift_release();
        swift_release();

        uint64_t v50 = *(void *)(v35 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
        uint64_t v51 = type metadata accessor for BeaconKeyManager(0LL);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005717C8, v35, v50, (char *)&type metadata for () + 8, v51);
        type metadata accessor for Transaction(0LL);
        static Transaction.named<A>(_:with:)("BeaconKeyManager.deleteAllKeyMaps", 33LL, 2LL, sub_100153678);
        swift_release();
        sub_100555998();
        return;
      }

      __break(1u);
LABEL_24:
      swift_once(&qword_10099B540, sub_1004F7298);
    }
  }

uint64_t sub_1004F89A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v57 = a3;
  uint64_t v55 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v62 = *(void *)(v4 - 8);
  uint64_t v63 = v4;
  __chkstk_darwin(v4);
  uint64_t v61 = &v50[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  __chkstk_darwin(v6);
  uint64_t v58 = &v50[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v12 = &v50[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = &v50[-v14];
  __chkstk_darwin(v13);
  NSString v17 = &v50[-v16];
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10000A720(v18, (uint64_t)qword_100A2AC98);
  sub_10001DC4C(a1, (uint64_t)v17, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v19 = sub_10001DC4C(a1, (uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    int v51 = v22;
    uint64_t v24 = v23;
    uint64_t v52 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v52;
    *(_DWORD *)uint64_t v24 = 136315651;
    sub_10001DC4C((uint64_t)v17, (uint64_t)v12, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v25 = String.init<A>(describing:)(v12, v8);
    uint64_t v54 = a1;
    uint64_t v64 = sub_1003F11D4(v25, v26, aBlock);
    uint64_t v53 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v17, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v24 + 12) = 2160;
    uint64_t v64 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock, v24 + 14, v24 + 22);
    *(_WORD *)(v24 + 22) = 2081;
    uint64_t v27 = type metadata accessor for UUID(0LL);
    uint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
    uint64_t v64 = sub_1003F11D4(v29, v30, aBlock);
    uint64_t v9 = v53;
    a1 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock, v24 + 24, v24 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  (os_log_type_t)v51,  "Saving BeaconEstimatedLocation record %s,\nbeacon %{private,mask.hash}s.",  (uint8_t *)v24,  0x20u);
    uint64_t v31 = v52;
    swift_arrayDestroy(v52, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v17, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
  }

  uint64_t v32 = v56;
  sub_10001DC4C(a1, (uint64_t)v12, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v33 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v34 = (v33 + 16) & ~v33;
  unint64_t v35 = (v10 + v34 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v37 = swift_allocObject(&unk_100962600, v36 + 16, v33 | 7);
  sub_10002218C((uint64_t)v12, v37 + v34, type metadata accessor for BeaconEstimatedLocation);
  *(void *)(v37 + v35) = v32;
  uint64_t v38 = (void *)(v37 + v36);
  uint64_t v39 = v57;
  *uint64_t v38 = v55;
  v38[1] = v39;
  aBlock[4] = (uint64_t)sub_10056B8A8;
  void aBlock[5] = v37;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1001C31E8;
  id aBlock[3] = (uint64_t)&unk_100962618;
  os_log_type_t v40 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v41 = swift_retain();
  id v42 = v58;
  static DispatchQoS.unspecified.getter(v41);
  uint64_t v64 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v43 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v44 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v45 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v46 = v61;
  uint64_t v47 = v44;
  uint64_t v48 = v63;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v47, v45, v63, v43);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v42, v46, v40);
  _Block_release(v40);
  (*(void (**)(_BYTE *, uint64_t))(v62 + 8))(v46, v48);
  (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v42, v60);
  return swift_release();
}

void sub_1004F8EE0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  uint64_t v135 = a3;
  uint64_t v136 = a4;
  uint64_t v139 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v131 = *(void *)(v5 - 8);
  uint64_t v132 = v5;
  __chkstk_darwin(v5);
  uint64_t v130 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v128 = *(void *)(v7 - 8);
  uint64_t v129 = v7;
  __chkstk_darwin(v7);
  uint64_t v127 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = sub_100004AEC(&qword_1009A6628);
  __chkstk_darwin(v122);
  uint64_t v123 = (uint64_t *)((char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v126 = *((void *)v10 - 1);
  uint64_t v11 = *(void *)(v126 + 64);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v133 = (uint64_t *)((char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v118 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v137 = (uint64_t)&v118 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v124 = (uint64_t)&v118 - v19;
  __chkstk_darwin(v18);
  uint64_t v121 = (uint64_t)&v118 - v20;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  unint64_t v26 = (char *)&v118 - v25;
  uint64_t v27 = type metadata accessor for Date(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(void *)(v28 + 64);
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v125 = (char *)&v118 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v138 = (char *)&v118 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v120 = (char *)&v118 - v34;
  __chkstk_darwin(v33);
  uint64_t v134 = (char *)&v118 - v35;
  if ((sub_100658F88() & 1) != 0)
  {
    unint64_t v36 = v10;
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_10000A720(v37, (uint64_t)qword_100A2AC98);
    sub_10001DC4C(a1, (uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v38 = a1;
    uint64_t v39 = (uint64_t (*)(void, void, void))v133;
    uint64_t v40 = sub_10001DC4C(v38, (uint64_t)v133, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      uint64_t v139 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v139;
      *(_DWORD *)uint64_t v43 = 136315651;
      uint64_t v44 = v137;
      sub_10001DC4C((uint64_t)v15, v137, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v45 = String.init<A>(describing:)(v44, v36);
      uint64_t v140 = sub_1003F11D4(v45, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, aBlock, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
      *(_WORD *)(v43 + 12) = 2160;
      uint64_t v140 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, aBlock, v43 + 14, v43 + 22);
      *(_WORD *)(v43 + 22) = 2081;
      uint64_t v47 = type metadata accessor for UUID(0LL);
      uint64_t v48 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
      uint64_t v140 = sub_1003F11D4(v49, v50, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, aBlock, v43 + 24, v43 + 32);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v39, type metadata accessor for BeaconEstimatedLocation);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Not saving blocked region BeaconEstimatedLocation record %s,\nbeacon %{private,mask.hash}s.",  (uint8_t *)v43,  0x20u);
      uint64_t v51 = v139;
      swift_arrayDestroy(v139, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
      sub_100018C68((uint64_t)v39, type metadata accessor for BeaconEstimatedLocation);
    }

    return;
  }

  uint64_t v52 = a1 + v10[6];
  sub_1004F9AE8(v52, *(unsigned __int8 *)(a1 + v10[11]), (uint64_t)v26);
  uint64_t v133 = *(void **)(v28 + 48);
  int v53 = ((uint64_t (*)(char *, uint64_t, uint64_t))v133)(v26, 1LL, v27);
  uint64_t v119 = a1;
  if (v53 == 1)
  {
    uint64_t v54 = v28;
    sub_100015794((uint64_t)v26, (uint64_t *)&unk_10099D720);
    uint64_t v55 = v27;
LABEL_12:
    uint64_t v57 = v139;
    uint64_t v58 = sub_100577B58(v52);
    sub_1004FAB58((uint64_t)v58, 19, (uint64_t)v24);
    swift_bridgeObjectRelease();
    uint64_t v59 = ((uint64_t (*)(char *, uint64_t, uint64_t))v133)(v24, 1LL, v55);
    uint64_t v60 = v119;
    if ((_DWORD)v59 == 1)
    {
      uint64_t v61 = v138;
      static Date.distantPast.getter(v59);
      sub_100015794((uint64_t)v24, (uint64_t *)&unk_10099D720);
      uint64_t v62 = v55;
      uint64_t v63 = v54;
    }

    else
    {
      uint64_t v63 = v54;
      uint64_t v61 = v138;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v138, v24, v55);
      uint64_t v62 = v55;
    }

    uint64_t v134 = *(char **)(v57 + 48);
    uint64_t v64 = v137;
    sub_10001DC4C(v60, v137, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v65 = v125;
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v125, v61, v62);
    uint64_t v66 = *(unsigned __int8 *)(v126 + 80);
    uint64_t v67 = (v66 + 24) & ~v66;
    uint64_t v68 = *(unsigned __int8 *)(v63 + 80);
    uint64_t v69 = v57;
    uint64_t v70 = (v11 + v68 + v67) & ~v68;
    uint64_t v71 = v66 | v68 | 7;
    uint64_t v72 = v29 + v70 + 7;
    uint64_t v73 = v62;
    unint64_t v74 = v72 & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v75 = swift_allocObject(&unk_100962650, (v72 & 0xFFFFFFFFFFFFFFF8LL) + 16, v71);
    *(void *)(v75 + swift_weakDestroy(v0 + 16) = v69;
    sub_10002218C(v64, v75 + v67, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v75 + v70, v65, v73);
    uint64_t v76 = (void (**)(uint64_t))(v75 + v74);
    uint64_t v77 = v136;
    *uint64_t v76 = v135;
    v76[1] = v77;
    aBlock[4] = (uint64_t)sub_10056BA64;
    void aBlock[5] = v75;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1001C31E8;
    id aBlock[3] = (uint64_t)&unk_100962668;
    uint64_t v78 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v79 = swift_retain();
    uint64_t v80 = v127;
    static DispatchQoS.unspecified.getter(v79);
    uint64_t v140 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v81 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v82 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v83 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v84 = v130;
    uint64_t v85 = v82;
    uint64_t v86 = v132;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v140, v85, v83, v132, v81);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v80, v84, v78);
    _Block_release(v78);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v84, v86);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v80, v129);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v138, v73);
    swift_release();
    return;
  }

  uint64_t v56 = v134;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v134, v26, v27);
  uint64_t v55 = v27;
  if ((static Date.> infix(_:_:)(a1 + v10[10], v56) & 1) != 0)
  {
    uint64_t v54 = v28;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v56, v27);
    goto LABEL_12;
  }

  uint64_t v87 = v10;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v88 = type metadata accessor for Logger(0LL);
  sub_10000A720(v88, (uint64_t)qword_100A2AC98);
  uint64_t v89 = v28;
  unint64_t v90 = v120;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v120, v134, v55);
  uint64_t v91 = v119;
  uint64_t v92 = v121;
  sub_10001DC4C(v119, v121, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v93 = v124;
  uint64_t v94 = sub_10001DC4C(v91, v124, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
  os_log_type_t v96 = static os_log_type_t.default.getter(v95);
  int v97 = v96;
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v98 = swift_slowAlloc(42LL, -1LL);
    uint64_t v139 = swift_slowAlloc(96LL, -1LL);
    aBlock[0] = v139;
    *(_DWORD *)uint64_t v98 = 136446979;
    uint64_t v99 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    LODWORD(v138) = v97;
    uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter(v55, v99);
    uint64_t v140 = sub_1003F11D4(v100, v101, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, aBlock, v98 + 4, v98 + 12);
    swift_bridgeObjectRelease();
    uint64_t v102 = v90;
    uint64_t v103 = *(void (**)(char *, uint64_t))(v89 + 8);
    v103(v102, v55);
    *(_WORD *)(v98 + 12) = 2160;
    uint64_t v140 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, aBlock, v98 + 14, v98 + 22);
    *(_WORD *)(v98 + 22) = 2081;
    uint64_t v104 = type metadata accessor for UUID(0LL);
    uint64_t v105 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter(v104, v105);
    uint64_t v140 = sub_1003F11D4(v106, v107, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, aBlock, v98 + 24, v98 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68(v92, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v98 + 32) = 2080;
    uint64_t v108 = v124;
    uint64_t v109 = v137;
    sub_10001DC4C(v124, v137, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v110 = String.init<A>(describing:)(v109, v87);
    uint64_t v140 = sub_1003F11D4(v110, v111, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, aBlock, v98 + 34, v98 + 42);
    swift_bridgeObjectRelease();
    sub_100018C68(v108, type metadata accessor for BeaconEstimatedLocation);
    _os_log_impl( (void *)&_mh_execute_header,  v95,  (os_log_type_t)v138,  "Not saving outdated (latestLocationDate: %{public}s,\n beacon %{private,mask.hash}s,\n BeaconEstimatedLocation record %s.",  (uint8_t *)v98,  0x2Au);
    uint64_t v112 = v139;
    swift_arrayDestroy(v139, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1LL, -1LL);
    swift_slowDealloc(v98, -1LL, -1LL);
  }

  else
  {
    uint64_t v113 = v90;
    uint64_t v103 = *(void (**)(char *, uint64_t))(v89 + 8);
    v103(v113, v55);
    sub_100018C68(v92, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68(v93, type metadata accessor for BeaconEstimatedLocation);
  }

  unint64_t v114 = sub_1000220F0();
  uint64_t v115 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v114, 0LL, 0LL);
  *uint64_t v116 = 8;
  uint64_t v117 = (uint64_t)v123;
  uint64_t *v123 = v115;
  swift_storeEnumTagMultiPayload(v117, v122, 1LL);
  v135(v117);
  sub_100015794(v117, &qword_1009A6628);
  v103(v134, v55);
}

uint64_t sub_1004F9AE8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LODWORD(v172) = a2;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v6);
  uint64_t v158 = (char *)v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v173 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v149 = *(void *)(v173 - 8);
  __chkstk_darwin(v173);
  uint64_t v162 = (char *)v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v175 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v175 - 8);
  uint64_t v10 = __chkstk_darwin(v175);
  uint64_t v157 = (char *)v148 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v168 = (char *)v148 - v12;
  uint64_t v171 = type metadata accessor for UUID(0LL);
  uint64_t v154 = *(void *)(v171 - 8);
  uint64_t v13 = __chkstk_darwin(v171);
  uint64_t v167 = (char *)v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v153 = (char *)v148 - v15;
  uint64_t v16 = type metadata accessor for Date(0LL);
  *(void *)&__int128 v179 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)v148 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)v148 - v20;
  uint64_t v178 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v164 = *(void *)(v178 - 8);
  uint64_t v22 = __chkstk_darwin(v178);
  uint64_t v24 = (char *)v148 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v160 = (char *)v148 - v26;
  __chkstk_darwin(v25);
  uint64_t v152 = (uint64_t)v148 - v27;
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v29 = __chkstk_darwin(v28);
  BOOL v165 = (void (*)(void, void))((char *)v148 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v31 = __chkstk_darwin(v29);
  v161.n128_u64[0] = (unint64_t)v148 - v32;
  __chkstk_darwin(v31);
  uint64_t v176 = (uint64_t)v148 - v33;
  sub_100514F28();
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  unint64_t v159 = (char *)sub_1006A0DA0((uint64_t)v183);
  swift_bridgeObjectRelease();
  uint64_t v166 = *(void *)(v3 + 136);
  uint64_t v34 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100577B7C();
  uint64_t v155 = v35;
  uint64_t v183 = v34;
  uint64_t v151 = v34;
  swift_bridgeObjectRetain(v34);
  sub_1004ED788(&v183);
  unint64_t v36 = v183;
  uint64_t v180 = 0LL;
  uint64_t v169 = v24;
  uint64_t v163 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56);
  v163(v176, 1LL, 1LL, v16);
  uint64_t v37 = *((void *)v36 + 2);
  uint64_t v177 = v9;
  uint64_t v174 = v37;
  uint64_t v150 = a3;
  uint64_t v170 = a1;
  if (v37)
  {
    LODWORD(v172) = v172;
    v148[0] = (*(unsigned __int8 *)(v164 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80);
    uint64_t v38 = (char *)v36 + v148[0];
    uint64_t v39 = v36;
    int v40 = *((unsigned __int8 *)v36 + v148[0] + *(int *)(v178 + 44));
    v148[1] = v39;
    swift_retain();
    uint64_t v41 = 0LL;
    uint64_t v156 = _swiftEmptyArrayStorage;
    uint64_t v42 = 1LL;
LABEL_5:
    uint64_t v43 = v42;
    int v44 = v40;
    uint64_t v45 = v178;
    uint64_t v46 = v164;
    while (1)
    {
      uint64_t v47 = v179;
      if (v44 == (_DWORD)v172)
      {
        uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v179 + 16);
        v48(v21, &v38[*(void *)(v46 + 72) * v41 + *(int *)(v45 + 40)], v16);
        uint64_t v49 = v165;
        sub_10001581C(v176, (uint64_t)v165, (uint64_t *)&unk_10099D720);
        uint64_t v50 = (*(uint64_t (**)(void (*)(void, void), uint64_t, uint64_t))(v47 + 48))( v49,  1LL,  v16);
        if ((_DWORD)v50 == 1)
        {
          static Date.distantPast.getter(v50);
          sub_100015794((uint64_t)v49, (uint64_t *)&unk_10099D720);
        }

        else
        {
          (*(void (**)(char *, void (*)(void, void), uint64_t))(v47 + 32))(v19, v49, v16);
        }

        uint64_t v51 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        if ((dispatch thunk of static Comparable.>= infix(_:_:)(v19, v21, v16, v51) & 1) != 0) {
          uint64_t v52 = v19;
        }
        else {
          uint64_t v52 = v21;
        }
        uint64_t v53 = v161.n128_u64[0];
        v48((char *)v161.n128_u64[0], v52, v16);
        uint64_t v54 = *(void (**)(char *, uint64_t))(v47 + 8);
        v54(v19, v16);
        v54(v21, v16);
        v163(v53, 0LL, 1LL, v16);
        sub_1000D4D50(v53, v176, (uint64_t *)&unk_10099D720);
        uint64_t v45 = v178;
        uint64_t v46 = v164;
      }

      if (v174 == v43) {
        break;
      }
      uint64_t v55 = *(void *)(v46 + 72);
      uint64_t v56 = *(int *)(v45 + 44);
      int v40 = v38[v55 * v41 + v56];
      uint64_t v57 = (uint64_t)&v38[v55 * v43];
      uint64_t v42 = v43 + 1;
      int v44 = *(unsigned __int8 *)(v57 + v56);
      uint64_t v41 = v43++;
      if (v40 == v44)
      {
        sub_10001DC4C(v57, v152, type metadata accessor for BeaconEstimatedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v156) & 1) == 0) {
          uint64_t v156 = (void *)sub_1004C5700(0, v156[2] + 1LL, 1, (unint64_t)v156);
        }
        unint64_t v59 = v156[2];
        unint64_t v58 = v156[3];
        unint64_t v60 = v59 + 1;
        if (v59 >= v58 >> 1)
        {
          uint64_t v62 = (void *)sub_1004C5700(v58 > 1, v59 + 1, 1, (unint64_t)v156);
          unint64_t v60 = v59 + 1;
          uint64_t v156 = v62;
        }

        uint64_t v41 = v42 - 1;
        uint64_t v61 = v156;
        v156[2] = v60;
        sub_10002218C(v152, (uint64_t)v61 + v148[0] + v59 * v55, type metadata accessor for BeaconEstimatedLocation);
        goto LABEL_5;
      }
    }

    swift_release();
    uint64_t v9 = v177;
    uint64_t v63 = v156;
  }

  else
  {
    uint64_t v63 = _swiftEmptyArrayStorage;
  }

  uint64_t v64 = v171;
  swift_release();
  uint64_t v65 = v63[2];
  unint64_t v66 = (unint64_t)v159;
  uint64_t v67 = v154;
  uint64_t v68 = v153;
  uint64_t v69 = v151;
  *(void *)&__int128 v179 = v66;
  if ((v66 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v70 = qword_10099B188;
    swift_bridgeObjectRetain(v63);
    if (v70 == -1) {
      goto LABEL_27;
    }
  }

  swift_once(&qword_10099B188, sub_100189D08);
LABEL_27:
  uint64_t v71 = type metadata accessor for Logger(0LL);
  uint64_t v72 = sub_10000A720(v71, (uint64_t)qword_100A2A2B0);
  uint64_t v172 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
  v172(v68, v170, v64);
  swift_bridgeObjectRetain((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v69);
  swift_bridgeObjectRetain(v63);
  uint64_t v174 = v72;
  unint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
  os_log_type_t v75 = static os_log_type_t.default.getter(v74);
  BOOL v76 = os_log_type_enabled(v74, v75);
  uint64_t v156 = v63;
  if (v76)
  {
    uint64_t v77 = swift_slowAlloc(42LL, -1LL);
    uint64_t v78 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))swift_slowAlloc(32LL, -1LL);
    uint64_t v183 = v78;
    *(_DWORD *)uint64_t v77 = 134218755;
    uint64_t v181 = v65 - v179;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182, v77 + 4, v77 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v77 + 12) = 2048;
    uint64_t v79 = v69[2];
    swift_bridgeObjectRelease();
    uint64_t v181 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182, v77 + 14, v77 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v77 + 22) = 2160;
    uint64_t v181 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182, v77 + 24, v77 + 32);
    *(_WORD *)(v77 + 32) = 2081;
    uint64_t v80 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v81 = v153;
    uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter(v64, v80);
    uint64_t v181 = sub_1003F11D4(v82, v83, (uint64_t *)&v183);
    uint64_t v9 = v177;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182, v77 + 34, v77 + 42);
    swift_bridgeObjectRelease();
    BOOL v165 = *(void (**)(void, void))(v154 + 8);
    v165(v81, v64);
    _os_log_impl( (void *)&_mh_execute_header,  v74,  v75,  "Decimating %ld of %ld locations for beacon %{private,mask.hash}s.",  (uint8_t *)v77,  0x2Au);
    swift_arrayDestroy(v78, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1LL, -1LL);
    swift_slowDealloc(v77, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v69, 2LL);
    BOOL v165 = *(void (**)(void, void))(v67 + 8);
    v165(v68, v64);
  }

  uint64_t v84 = (uint64_t)v158;
  uint64_t v85 = (uint64_t)v169;
  if (v65 > (uint64_t)v159)
  {
    unint64_t v86 = (*(unsigned __int8 *)(v164 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80);
    uint64_t v87 = *(void *)(v164 + 72);
    __n128 v88 = swift_bridgeObjectRetain(v156);
    uint64_t v89 = v65 - v179;
    uint64_t v164 = v87;
    uint64_t v91 = v90 + v86 + v87 * v179;
    v88.n128_u64[0] = 141558787LL;
    __n128 v161 = v88;
    unint64_t v159 = (char *)&type metadata for Any + 8;
    uint64_t v92 = (uint64_t)v160;
    do
    {
      *(void *)&__int128 v179 = v89;
      sub_10001DC4C(v91, v92, type metadata accessor for BeaconEstimatedLocation);
      sub_10001DC4C(v92, v85, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v93 = v167;
      uint64_t v94 = v171;
      uint64_t v95 = ((uint64_t (*)(char *, uint64_t, uint64_t))v172)(v167, v170, v171);
      os_log_type_t v96 = (os_log_s *)Logger.logObject.getter(v95);
      os_log_type_t v97 = static os_log_type_t.default.getter(v96);
      if (os_log_type_enabled(v96, v97))
      {
        uint64_t v98 = swift_slowAlloc(42LL, -1LL);
        uint64_t v163 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))swift_slowAlloc(64LL, -1LL);
        uint64_t v183 = v163;
        *(_DWORD *)uint64_t v98 = v161.n128_u32[0];
        *(void *)(v98 + 4) = 1752392040LL;
        *(_WORD *)(v98 + 12) = 2081;
        uint64_t v99 = v178;
        uint64_t v100 = v85;
        uint64_t v101 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter(v94, v101);
        *(void *)(v98 + 14) = sub_1003F11D4(v102, v103, (uint64_t *)&v183);
        swift_bridgeObjectRelease();
        uint64_t v104 = v100;
        uint64_t v92 = (uint64_t)v160;
        sub_100018C68(v104, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v98 + 22) = 2160;
        *(void *)(v98 + swift_unknownObjectUnownedDestroy(v0 + 24) = 1752392040LL;
        *(_WORD *)(v98 + 32) = 2081;
        uint64_t v105 = v101;
        uint64_t v106 = v175;
        uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter(v94, v105);
        *(void *)(v98 + 34) = sub_1003F11D4(v107, v108, (uint64_t *)&v183);
        swift_bridgeObjectRelease();
        v165(v93, v94);
        _os_log_impl( (void *)&_mh_execute_header,  v96,  v97,  "Decimating beacon BeaconEstimatedLocation %{private,mask.hash}s for beacon %{private,mask.hash}s.",  (uint8_t *)v98,  0x2Au);
        uint64_t v109 = v163;
        swift_arrayDestroy(v163, 2LL, v159);
        swift_slowDealloc(v109, -1LL, -1LL);
        swift_slowDealloc(v98, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v85, type metadata accessor for BeaconEstimatedLocation);
        v165(v93, v94);

        uint64_t v99 = v178;
        uint64_t v106 = v175;
      }

      uint64_t v110 = *(int *)(v99 + 20);
      unint64_t v111 = objc_autoreleasePoolPush();
      if (qword_10099B5C8 != -1) {
        swift_once(&qword_10099B5C8, sub_1005BD7E8);
      }
      uint64_t v112 = sub_10000A720(v106, (uint64_t)qword_100A2ADC0);
      uint64_t v113 = UUID.uuidString.getter(v112);
      uint64_t v114 = v106;
      uint64_t v115 = v168;
      URL.appendingPathComponent(_:)(v113, v116);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v111);
      __chkstk_darwin(v117);
      v148[-4] = v118;
      v148[-3] = v92 + v110;
      v148[-2] = v115;
      uint64_t v119 = v180;
      OS_dispatch_queue.sync<A>(execute:)(sub_100571C4C, &v148[-6], &type metadata for Bool);
      uint64_t v180 = v119;
      uint64_t v9 = v177;
      (*(void (**)(char *, uint64_t))(v177 + 8))(v115, v114);
      sub_100018C68(v92, type metadata accessor for BeaconEstimatedLocation);
      v91 += v164;
      uint64_t v89 = v179 - 1;
      uint64_t v85 = (uint64_t)v169;
    }

    while ((void)v179 != 1LL);
    swift_bridgeObjectRelease();
    uint64_t v84 = (uint64_t)v158;
  }

  uint64_t v120 = *(void *)(v155 + 16);
  if (v120)
  {
    uint64_t v121 = v155 + ((*(unsigned __int8 *)(v149 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80));
    uint64_t v122 = *(void *)(v149 + 72);
    __int128 v179 = xmmword_1007E67D0;
    uint64_t v123 = (uint64_t)v162;
    uint64_t v124 = v157;
    uint64_t v125 = v175;
    uint64_t v180 = v122;
    do
    {
      sub_10001DC4C(v121, v123, type metadata accessor for BeaconStoreFileRecord);
      sub_10001581C(v123 + *(int *)(v173 + 20), v84, (uint64_t *)&unk_1009A34D0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v84, 1LL, v125) == 1)
      {
        sub_100015794(v84, (uint64_t *)&unk_1009A34D0);
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v124, v84, v125);
        uint64_t v126 = v124;
        id v127 = [(id)objc_opt_self(NSFileManager) defaultManager];
        URL._bridgeToObjectiveC()(v128);
        uint64_t v130 = v129;
        uint64_t v183 = 0LL;
        uint64_t v131 = v9;
        unsigned __int8 v132 = [v127 removeItemAtURL:v129 error:&v183];

        uint64_t v133 = v183;
        if ((v132 & 1) != 0)
        {
          uint64_t v134 = v183;
          (*(void (**)(char *, uint64_t))(v131 + 8))(v126, v125);
          uint64_t v123 = (uint64_t)v162;
          uint64_t v9 = v131;
          uint64_t v124 = v126;
        }

        else
        {
          uint64_t v135 = v183;
          uint64_t v136 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))_convertNSErrorToError(_:)(v133);

          uint64_t v138 = swift_willThrow(v137);
          uint64_t v139 = static os_log_type_t.default.getter(v138);
          if (qword_10099B708 != -1) {
            swift_once(&qword_10099B708, sub_100651168);
          }
          uint64_t v140 = qword_100A2B018;
          uint64_t v141 = sub_100004AEC((uint64_t *)&unk_10099D740);
          uint64_t v142 = swift_allocObject(v141, 72LL, 7LL);
          *(_OWORD *)(v142 + swift_weakDestroy(v0 + 16) = v179;
          uint64_t v183 = v136;
          swift_errorRetain(v136);
          uint64_t v143 = sub_100004AEC((uint64_t *)&unk_1009A5470);
          uint64_t v144 = String.init<A>(describing:)(&v183, v143);
          uint64_t v146 = v145;
          *(void *)(v142 + 56) = &type metadata for String;
          *(void *)(v142 + 64) = sub_1000226F4();
          *(void *)(v142 + 32) = v144;
          *(void *)(v142 + 40) = v146;
          os_log(_:dso:log:_:_:)( v139,  &_mh_execute_header,  v140,  "Could not delete tombstoned record %@",  37LL,  2LL,  v142);
          swift_bridgeObjectRelease();
          swift_errorRelease(v136);
          uint64_t v9 = v177;
          uint64_t v124 = v157;
          uint64_t v125 = v175;
          (*(void (**)(char *, uint64_t))(v177 + 8))(v157, v175);
          uint64_t v84 = (uint64_t)v158;
          uint64_t v123 = (uint64_t)v162;
        }

        uint64_t v122 = v180;
      }

      sub_100018C68(v123, type metadata accessor for BeaconStoreFileRecord);
      v121 += v122;
      --v120;
    }

    while (v120);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100015750(v176, v150, (uint64_t *)&unk_10099D720);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004FAB58@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v41 = a3;
  uint64_t v5 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v43 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v38 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v42 = (uint64_t)v38 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v38 - v14;
  uint64_t v16 = sub_100004AEC(&qword_1009A48E0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v20 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v20)
  {
    uint64_t v39 = v18;
    uint64_t v40 = v6;
    uint64_t v44 = v5;
    uint64_t v21 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v22 = *(void *)(v6 + 72);
    v38[1] = a1;
    uint64_t v45 = (v21 + 32) & ~v21;
    uint64_t v23 = a1 + v45;
    do
    {
      sub_10001DC4C(v23, (uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
      if (a2 == 19 || v15[*(int *)(v44 + 44)] == a2)
      {
        sub_10002218C((uint64_t)v15, (uint64_t)v11, type metadata accessor for BeaconEstimatedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0) {
          sub_100032D0C(0, v19[2] + 1LL, 1);
        }
        uint64_t v19 = v46;
        unint64_t v25 = v46[2];
        unint64_t v24 = v46[3];
        if (v25 >= v24 >> 1)
        {
          sub_100032D0C(v24 > 1, v25 + 1, 1);
          uint64_t v19 = v46;
        }

        void v19[2] = v25 + 1;
        sub_10002218C((uint64_t)v11, (uint64_t)v19 + v45 + v25 * v22, type metadata accessor for BeaconEstimatedLocation);
      }

      else
      {
        sub_100018C68((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
      }

      v23 += v22;
      --v20;
    }

    while (v20);
    uint64_t v19 = v46;
    uint64_t v5 = v44;
    uint64_t v18 = v39;
    uint64_t v6 = v40;
  }

  swift_bridgeObjectRelease();
  uint64_t v26 = v19[2];
  uint64_t v28 = v42;
  uint64_t v27 = (uint64_t)v43;
  if (!v26)
  {
    uint64_t v31 = 1LL;
LABEL_17:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v18, v31, 1LL, v5);
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v18, 1LL, v5) == 1)
    {
      sub_100015794((uint64_t)v18, &qword_1009A48E0);
      uint64_t v32 = type metadata accessor for Date(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))( v41,  1LL,  1LL,  v32);
    }

    else
    {
      uint64_t v33 = &v18[*(int *)(v5 + 40)];
      uint64_t v34 = type metadata accessor for Date(0LL);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = v41;
      (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v41, v33, v34);
      sub_100018C68((uint64_t)v18, type metadata accessor for BeaconEstimatedLocation);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v36, 0LL, 1LL, v34);
    }
  }

  uint64_t v29 = (uint64_t)v19 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  sub_10001DC4C(v29, v42, type metadata accessor for BeaconEstimatedLocation);
  uint64_t result = swift_retain();
  if (v26 == 1)
  {
LABEL_15:
    swift_release();
    sub_10002218C(v28, (uint64_t)v18, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v31 = 0LL;
    goto LABEL_17;
  }

  unint64_t v37 = 1LL;
  while (v37 < v19[2])
  {
    sub_10001DC4C(v29 + *(void *)(v6 + 72) * v37, v27, type metadata accessor for BeaconEstimatedLocation);
    if ((static Date.< infix(_:_:)(v28 + *(int *)(v5 + 40), v27 + *(int *)(v5 + 40)) & 1) != 0)
    {
      sub_100018C68(v28, type metadata accessor for BeaconEstimatedLocation);
      uint64_t result = sub_10002218C(v27, v28, type metadata accessor for BeaconEstimatedLocation);
    }

    else
    {
      uint64_t result = sub_100018C68(v27, type metadata accessor for BeaconEstimatedLocation);
    }

    if (v26 == ++v37) {
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1004FAF54(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *), uint64_t a5)
{
  uint64_t v102 = a5;
  uint64_t v101 = a4;
  uint64_t v96 = a3;
  uint64_t v99 = sub_100004AEC(&qword_1009A6628);
  __chkstk_darwin(v99);
  uint64_t v100 = &v80[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v94 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v92 = &v80[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v91 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v89 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v90 = &v80[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v95 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v10 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v12 = &v80[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v98 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v13 = *(void *)(v98 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v98);
  os_log_type_t v97 = &v80[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = &v80[-v17];
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = &v80[-v20];
  __chkstk_darwin(v19);
  uint64_t v23 = &v80[-v22];
  uint64_t v105 = *(void *)(a1 + 136);
  uint64_t v103 = a2;
  uint64_t v106 = a2;
  OS_dispatch_queue.sync<A>(execute:)(sub_10056BAE0, v104, (char *)&type metadata for () + 8);
  uint64_t v84 = v23;
  uint64_t v85 = 0LL;
  uint64_t v86 = v10;
  uint64_t v87 = v12;
  uint64_t v82 = v13;
  uint64_t v83 = v14;
  os_log_type_t v97 = v18;
  uint64_t v88 = a1;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  sub_10000A720(v24, (uint64_t)qword_100A2AC98);
  uint64_t v25 = v103;
  uint64_t v26 = (uint64_t)v84;
  sub_10001DC4C(v103, (uint64_t)v84, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v27 = (uint64_t)v21;
  uint64_t v28 = sub_10001DC4C(v25, (uint64_t)v21, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter(v29);
  int v31 = v30;
  BOOL v32 = os_log_type_enabled(v29, v30);
  uint64_t v33 = v96;
  uint64_t v34 = v97;
  if (v32)
  {
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 aBlock = swift_slowAlloc(64LL, -1LL);
    uint64_t v36 = aBlock;
    *(_DWORD *)uint64_t v35 = 136315651;
    int v81 = v31;
    sub_10001DC4C(v26, (uint64_t)v34, type metadata accessor for BeaconEstimatedLocation);
    unint64_t v37 = v34;
    uint64_t v38 = v98;
    uint64_t v39 = String.init<A>(describing:)(v37, v98);
    uint64_t v115 = sub_1003F11D4(v39, v40, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v26, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v35 + 12) = 2160;
    uint64_t v115 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v35 + 14, v35 + 22);
    *(_WORD *)(v35 + 22) = 2081;
    uint64_t v41 = type metadata accessor for UUID(0LL);
    uint64_t v42 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
    uint64_t v115 = sub_1003F11D4(v43, v44, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v35 + 24, v35 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68(v27, type metadata accessor for BeaconEstimatedLocation);
    _os_log_impl( (void *)&_mh_execute_header,  v29,  (os_log_type_t)v81,  "Saved BeaconEstimatedLocation record %s\nfor beacon %{private,mask.hash}s.",  (uint8_t *)v35,  0x20u);
    swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v45 = v36;
    uint64_t v33 = v96;
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v26, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68(v27, type metadata accessor for BeaconEstimatedLocation);

    uint64_t v38 = v98;
  }

  uint64_t v46 = (uint64_t)v87;
  uint64_t v47 = v86;
  uint64_t v48 = v95;
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v49 = qword_100A2A6C8;
  uint64_t v50 = v103;
  uint64_t v51 = v103 + *(int *)(v38 + 24);
  uint64_t v52 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16LL))(v46, v51, v52);
  uint64_t v53 = v50 + *(int *)(v38 + 40);
  uint64_t v54 = v46 + *(int *)(v48 + 20);
  uint64_t v55 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16LL))(v54, v53, v55);
  *(_BYTE *)(v46 + *(int *)(v48 + swift_release(*(void *)(v0 + 24)) = 0;
  uint64_t v56 = sub_100004AEC(&qword_10099D318);
  uint64_t v57 = *(unsigned __int8 *)(v47 + 80);
  uint64_t v58 = (v57 + 32) & ~v57;
  uint64_t v59 = swift_allocObject(v56, v58 + *(void *)(v47 + 72), v57 | 7);
  *(_OWORD *)(v59 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_10001DC4C(v46, v59 + v58, type metadata accessor for BeaconObservation);
  uint64_t v60 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v60);
  *(void *)&v80[-32] = v49;
  *(void *)&v80[-24] = v59;
  *(void *)&v80[-16] = 0LL;
  *(void *)&v80[-8] = 0LL;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1000DF788);
  swift_bridgeObjectRelease();
  sub_100018C68(v46, type metadata accessor for BeaconObservation);
  uint64_t v61 = v88;
  sub_100504C28(v51, (uint64_t)&v115);
  sub_10001581C((uint64_t)&v115, (uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
  if (v110)
  {
    sub_100012EC0(&aBlock, (uint64_t)&v114);
    if ((static Date.> infix(_:_:)(v53, v33) & 1) != 0)
    {
      uint64_t v62 = v97;
      sub_10001DC4C(v103, (uint64_t)v97, type metadata accessor for BeaconEstimatedLocation);
      sub_100013044((uint64_t)&v114, (uint64_t)&v113);
      uint64_t v63 = *(unsigned __int8 *)(v82 + 80);
      uint64_t v64 = (v63 + 24) & ~v63;
      unint64_t v65 = (v83 + v64 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v66 = swift_allocObject(&unk_1009626A0, v65 + 40, v63 | 7);
      *(void *)(v66 + swift_weakDestroy(v0 + 16) = v61;
      sub_10002218C((uint64_t)v62, v66 + v64, type metadata accessor for BeaconEstimatedLocation);
      sub_100012EC0(&v113, v66 + v65);
      unint64_t v111 = sub_10056BC70;
      uint64_t v112 = v66;
      *(void *)&__int128 aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      uint64_t v109 = sub_1001C31E8;
      uint64_t v110 = &unk_1009626B8;
      uint64_t v67 = _Block_copy(&aBlock);
      uint64_t v68 = swift_retain();
      uint64_t v69 = v90;
      static DispatchQoS.unspecified.getter(v68);
      uint64_t v107 = _swiftEmptyArrayStorage;
      uint64_t v70 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v71 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v72 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v73 = v92;
      uint64_t v74 = v71;
      uint64_t v75 = v94;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v107, v74, v72, v94, v70);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v69, v73, v67);
      _Block_release(v67);
      (*(void (**)(_BYTE *, uint64_t))(v93 + 8))(v73, v75);
      (*(void (**)(_BYTE *, uint64_t))(v89 + 8))(v69, v91);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v114);
      swift_release();
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v114);
    }

    BOOL v76 = v101;
  }

  else
  {
    sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
    BOOL v76 = v101;
  }

  uint64_t v77 = v100;
  uint64_t v78 = v99;
  sub_10001DC4C(v103, (uint64_t)v100, type metadata accessor for BeaconEstimatedLocation);
  swift_storeEnumTagMultiPayload(v77, v78, 0LL);
  v76(v77);
  sub_100015794((uint64_t)v77, &qword_1009A6628);
  return sub_100015794((uint64_t)&v115, (uint64_t *)&unk_1009A9C40);
}

uint64_t sub_1004FBBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B08D0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10001DC4C(a2, (uint64_t)v8, type metadata accessor for BeaconEstimatedLocation);
  sub_100013044(a3, v9);
  PassthroughSubject.send(_:)(v8);
  return sub_100015794((uint64_t)v8, &qword_1009B08D0);
}

uint64_t sub_1004FBC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100004AEC(&qword_1009AF860);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100963820, v9 + v7, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v10 + v9,  (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
  sub_1004FBDE0(a3, (uint64_t (*)(void, void))sub_100570248, v10);
  return swift_release(v10);
}

uint64_t sub_1004FBD80(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = a1;
    swift_errorRetain(a1);
    uint64_t v4 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(throwing:)(&v5, v4);
  }

  else
  {
    uint64_t v2 = sub_100004AEC(&qword_1009AF860);
    return CheckedContinuation.resume(returning:)(v2, v2);
  }

uint64_t sub_1004FBDE0(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3)
{
  uint64_t v32 = a3;
  os_log_type_t v30 = a2;
  uint64_t v28 = *v3;
  uint64_t v29 = type metadata accessor for UUID(0LL);
  uint64_t v31 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A1718);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for CloudKitChangeSet(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v27 - v15;
  sub_10001581C(a1, (uint64_t)v9, &qword_1009A1718);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    sub_100015794((uint64_t)v9, &qword_1009A1718);
    return v30(0LL, 0LL);
  }

  else
  {
    sub_10002218C((uint64_t)v9, (uint64_t)v16, type metadata accessor for CloudKitChangeSet);
    uint64_t v27 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_changeSetSequence);
    uint64_t v18 = v29;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v6, v16, v29);
    sub_10001DC4C((uint64_t)v16, (uint64_t)v14, type metadata accessor for CloudKitChangeSet);
    uint64_t v19 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v20 = (v19 + 16) & ~v19;
    unint64_t v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v24 = swift_allocObject(&unk_100963848, v23 + 8, v19 | 7);
    sub_10002218C((uint64_t)v14, v24 + v20, type metadata accessor for CloudKitChangeSet);
    *(void *)(v24 + v21) = v3;
    uint64_t v25 = (void *)(v24 + v22);
    uint64_t v26 = v32;
    *uint64_t v25 = v30;
    v25[1] = v26;
    *(void *)(v24 + v23) = v28;
    swift_retain();
    swift_retain();
    Sequencer.perform(identifier:_:enqueueCompletion:)(v6, sub_100570364, v24, 0LL, 0LL);
    swift_release(v24);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v18);
    return sub_100018C68((uint64_t)v16, type metadata accessor for CloudKitChangeSet);
  }

id sub_1004FC074(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v46 = a1;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AC98);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v44 = v9;
  uint64_t v45 = a4;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v20 = 67109120;
    int v47 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v20 + 4, v20 + 8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  unint64_t v21 = (void *)qword_100A2AF38;
  id v22 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v23 = [v22 isInternalBuild];

  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned int v25 = [v21 BOOLForKey:v24];
  }

  else
  {
    unsigned int v25 = 0;
  }

  id result = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (result)
  {
    uint64_t v27 = result;
    id v28 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v25) & 1) == 0))
    {
      return (id)sub_100500D64(v46, a3, v45);
    }

    else
    {
      uint64_t v43 = (void (*)(char *))a3;
      sub_10001DC4C(v46, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      uint64_t v29 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      __chkstk_darwin(v29);
      *(&v42 - 2) = v30;
      *(&v42 - 1) = (uint64_t)v14;
      uint64_t v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100022790, &v42 - 4, (char *)&type metadata for () + 8);
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Saved LocalStorageBacked record. Calling completion.",  v34,  2u);
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      uint64_t v35 = v46;
      sub_10001DC4C(v46, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
      swift_storeEnumTagMultiPayload(v11, v44, 0LL);
      v43(v11);
      uint64_t v36 = sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009B0830);
      if (((v28 != 0LL) & ~v25) != 0)
      {
        uint64_t v41 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v41);
        *(&v42 - 4) = v5;
        *(&v42 - 3) = v35;
        *(&v42 - 2) = (uint64_t)v14;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-saveToCloud",  40LL,  2LL,  sub_100567F80,  &v42 - 6);
      }

      else
      {
        unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
        os_log_type_t v38 = static os_log_type_t.info.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          BOOL v39 = v28 != 0LL;
          uint64_t v40 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v40 = 67109376;
          int v47 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 4, v40 + 8);
          *(_WORD *)(v40 + 8) = 1024;
          int v47 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 10, v40 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v40,  0xEu);
          swift_slowDealloc(v40, -1LL, -1LL);
        }
      }

      return (id)sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1004FC74C(uint64_t a1, int a2, void (*a3)(char *), uint64_t a4)
{
  return sub_1004FCEB4( a1,  a2,  a3,  a4,  &qword_1009A6100,  type metadata accessor for ShareRecord,  (uint64_t)sub_100571B18,  (uint64_t)sub_10056DE1C,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_1005010F0);
}

id sub_1004FC794(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v46 = a1;
  uint64_t v9 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for BeaconNamingRecord(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AC98);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v44 = v9;
  uint64_t v45 = a4;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v20 = 67109120;
    int v47 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v20 + 4, v20 + 8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  unint64_t v21 = (void *)qword_100A2AF38;
  id v22 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v23 = [v22 isInternalBuild];

  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned int v25 = [v21 BOOLForKey:v24];
  }

  else
  {
    unsigned int v25 = 0;
  }

  id result = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (result)
  {
    uint64_t v27 = result;
    id v28 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v25) & 1) == 0))
    {
      return (id)sub_1005014A4(v46, a3, v45);
    }

    else
    {
      uint64_t v43 = (void (*)(char *))a3;
      sub_10001DC4C(v46, (uint64_t)v14, type metadata accessor for BeaconNamingRecord);
      uint64_t v29 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      __chkstk_darwin(v29);
      *(&v42 - 2) = v30;
      *(&v42 - 1) = (uint64_t)v14;
      uint64_t v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100571B40, &v42 - 4, (char *)&type metadata for () + 8);
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Saved LocalStorageBacked record. Calling completion.",  v34,  2u);
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      uint64_t v35 = v46;
      sub_10001DC4C(v46, (uint64_t)v11, type metadata accessor for BeaconNamingRecord);
      swift_storeEnumTagMultiPayload(v11, v44, 0LL);
      v43(v11);
      uint64_t v36 = sub_100015794((uint64_t)v11, &qword_1009A7DE0);
      if (((v28 != 0LL) & ~v25) != 0)
      {
        uint64_t v41 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v41);
        *(&v42 - 4) = v5;
        *(&v42 - 3) = v35;
        *(&v42 - 2) = (uint64_t)v14;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-saveToCloud",  40LL,  2LL,  sub_100571BAC,  &v42 - 6);
      }

      else
      {
        unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
        os_log_type_t v38 = static os_log_type_t.info.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          BOOL v39 = v28 != 0LL;
          uint64_t v40 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v40 = 67109376;
          int v47 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 4, v40 + 8);
          *(_WORD *)(v40 + 8) = 1024;
          int v47 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 10, v40 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v40,  0xEu);
          swift_slowDealloc(v40, -1LL, -1LL);
        }
      }

      return (id)sub_100018C68((uint64_t)v14, type metadata accessor for BeaconNamingRecord);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1004FCE6C(uint64_t a1, int a2, void (*a3)(char *), uint64_t a4)
{
  return sub_1004FCEB4( a1,  a2,  a3,  a4,  &qword_1009A49F0,  type metadata accessor for OwnedBeaconGroup,  (uint64_t)sub_1000227C0,  (uint64_t)sub_10056777C,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_10050167C);
}

id sub_1004FCEB4( uint64_t a1, int a2, void (*a3)(char *), uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, void (*)(void), uint64_t))
{
  uint64_t v44 = a8;
  uint64_t v48 = a3;
  uint64_t v47 = a4;
  uint64_t v46 = sub_100004AEC(a5);
  __chkstk_darwin(v46);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = a6;
  uint64_t v16 = a6(0LL);
  __chkstk_darwin(v16);
  os_log_type_t v18 = (char *)&v44 - v17;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A2AC98);
  unint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v45 = a5;
  if (v23)
  {
    NSString v24 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)NSString v24 = 67109120;
    int v51 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v24 + 4, v24 + 8);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Saving record. Disk First? %{BOOL}d", v24, 8u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  unsigned int v25 = (void *)qword_100A2AF38;
  id v26 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v27 = [v26 isInternalBuild];

  if (v27)
  {
    NSString v28 = String._bridgeToObjectiveC()();
    unsigned int v27 = objc_msgSend(v25, "BOOLForKey:", v28, v44, v45, v46);
  }

  id result = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (result)
  {
    uint64_t v30 = result;
    id v31 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v31 && (v31, ((a2 | v27) & 1) == 0))
    {
      return (id)a9(a1, (void (*)(void))v48, v47);
    }

    else
    {
      uint64_t v32 = sub_10001DC4C(a1, (uint64_t)v18, v50);
      __chkstk_darwin(v32);
      *(&v44 - 2) = v33;
      *(&v44 - 1) = (uint64_t)v18;
      uint64_t v34 = OS_dispatch_queue.sync<A>(execute:)(a7, &v44 - 4, (char *)&type metadata for () + 8);
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        unint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v37 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Saved LocalStorageBacked record. Calling completion.",  v37,  2u);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      os_log_type_t v38 = v50;
      sub_10001DC4C(a1, (uint64_t)v15, v50);
      swift_storeEnumTagMultiPayload(v15, v46, 0LL);
      v48(v15);
      uint64_t v39 = sub_100015794((uint64_t)v15, v45);
      if (((v31 != 0LL) & ~v27) != 0)
      {
        uint64_t v43 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v43);
        *(&v44 - 4) = v49;
        *(&v44 - 3) = a1;
        *(&v44 - 2) = (uint64_t)v18;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40LL, 2LL, v44, &v44 - 6);
      }

      else
      {
        uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
        os_log_type_t v41 = static os_log_type_t.info.getter(v40);
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v42 = 67109376;
          int v51 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v42 + 4, v42 + 8);
          *(_WORD *)(v42 + 8) = 1024;
          int v51 = v31 != 0LL;
          os_log_type_t v38 = v50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v42 + 10, v42 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v42,  0xEu);
          swift_slowDealloc(v42, -1LL, -1LL);
        }
      }

      return (id)sub_100018C68((uint64_t)v18, v38);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1004FD55C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v46 = a1;
  uint64_t v9 = sub_100004AEC(&qword_1009A0E30);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SharedBeaconRecord(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AC98);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v44 = v9;
  uint64_t v45 = a4;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v20 = 67109120;
    int v47 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v20 + 4, v20 + 8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  unint64_t v21 = (void *)qword_100A2AF38;
  id v22 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v23 = [v22 isInternalBuild];

  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned int v25 = [v21 BOOLForKey:v24];
  }

  else
  {
    unsigned int v25 = 0;
  }

  id result = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (result)
  {
    unsigned int v27 = result;
    id v28 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v25) & 1) == 0))
    {
      return (id)sub_100501D8C(v46, a3, v45);
    }

    else
    {
      uint64_t v43 = (void (*)(char *))a3;
      sub_10001DC4C(v46, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
      uint64_t v29 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      __chkstk_darwin(v29);
      *(&v42 - 2) = v30;
      *(&v42 - 1) = (uint64_t)v14;
      uint64_t v31 = OS_dispatch_queue.sync<A>(execute:)(sub_1000227A8, &v42 - 4, (char *)&type metadata for () + 8);
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Saved LocalStorageBacked record. Calling completion.",  v34,  2u);
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      uint64_t v35 = v46;
      sub_10001DC4C(v46, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
      swift_storeEnumTagMultiPayload(v11, v44, 0LL);
      v43(v11);
      uint64_t v36 = sub_100015794((uint64_t)v11, &qword_1009A0E30);
      if (((v28 != 0LL) & ~v25) != 0)
      {
        uint64_t v41 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v41);
        *(&v42 - 4) = v5;
        *(&v42 - 3) = v35;
        *(&v42 - 2) = (uint64_t)v14;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-saveToCloud",  40LL,  2LL,  sub_10056E66C,  &v42 - 6);
      }

      else
      {
        unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
        os_log_type_t v38 = static os_log_type_t.info.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          BOOL v39 = v28 != 0LL;
          uint64_t v40 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v40 = 67109376;
          int v47 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 4, v40 + 8);
          *(_WORD *)(v40 + 8) = 1024;
          int v47 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 10, v40 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v40,  0xEu);
          swift_slowDealloc(v40, -1LL, -1LL);
        }
      }

      return (id)sub_100018C68((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004FDC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - v10;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AC98);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  uint64_t v17 = v27;
  sub_10001DC4C(v27, (uint64_t)v11, type metadata accessor for LostModeRecord);
  sub_10001DC4C(a4, (uint64_t)v9, type metadata accessor for LostModeRecord);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  unint64_t v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (v18 + v20 + 8) & ~v18;
  uint64_t v22 = swift_allocObject(&unk_1009635C8, v21 + v7, v18 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v26;
  sub_10002218C((uint64_t)v11, v22 + v19, type metadata accessor for LostModeRecord);
  *(void *)(v22 + v20) = v25;
  sub_10002218C((uint64_t)v9, v22 + v21, type metadata accessor for LostModeRecord);
  swift_retain();
  swift_retain();
  sub_1004FCEB4( v17,  0,  (void (*)(char *))sub_10056FB68,  v22,  &qword_1009A7F18,  type metadata accessor for LostModeRecord,  (uint64_t)sub_100571B90,  (uint64_t)sub_100571C24,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_100500F10);
  return swift_release();
}

uint64_t sub_1004FDE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for ShareRecord(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - v10;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AC98);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  uint64_t v17 = v27;
  sub_10001DC4C(v27, (uint64_t)v11, type metadata accessor for ShareRecord);
  sub_10001DC4C(a4, (uint64_t)v9, type metadata accessor for ShareRecord);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  unint64_t v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (v18 + v20 + 8) & ~v18;
  uint64_t v22 = swift_allocObject(&unk_1009630A0, v21 + v7, v18 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v26;
  sub_10002218C((uint64_t)v11, v22 + v19, type metadata accessor for ShareRecord);
  *(void *)(v22 + v20) = v25;
  sub_10002218C((uint64_t)v9, v22 + v21, type metadata accessor for ShareRecord);
  swift_retain();
  swift_retain();
  sub_1004FCEB4( v17,  0,  (void (*)(char *))sub_10056E240,  v22,  &qword_1009A6100,  type metadata accessor for ShareRecord,  (uint64_t)sub_100571B18,  (uint64_t)sub_10056DE1C,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_1005010F0);
  return swift_release();
}

uint64_t sub_1004FE0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - v10;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AC98);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  uint64_t v17 = v27;
  sub_10001DC4C(v27, (uint64_t)v11, type metadata accessor for OwnedDeviceKeyRecord);
  sub_10001DC4C(a4, (uint64_t)v9, type metadata accessor for OwnedDeviceKeyRecord);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  unint64_t v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (v18 + v20 + 8) & ~v18;
  uint64_t v22 = swift_allocObject(&unk_1009613B8, v21 + v7, v18 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v26;
  sub_10002218C((uint64_t)v11, v22 + v19, type metadata accessor for OwnedDeviceKeyRecord);
  *(void *)(v22 + v20) = v25;
  sub_10002218C((uint64_t)v9, v22 + v21, type metadata accessor for OwnedDeviceKeyRecord);
  swift_retain();
  swift_retain();
  sub_1004FCEB4( v17,  0,  (void (*)(char *))sub_100566B30,  v22,  &qword_1009B2858,  type metadata accessor for OwnedDeviceKeyRecord,  (uint64_t)sub_100022880,  (uint64_t)sub_100566810,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_1005012CC);
  return swift_release();
}

uint64_t sub_1004FE300( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t a7, void (*a8)(uint64_t, void, uint64_t, uint64_t))
{
  uint64_t v38 = a7;
  BOOL v39 = a8;
  uint64_t v36 = a1;
  uint64_t v37 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = a5(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  os_log_type_t v15 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v34 - v16;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v19 = sub_10000A720(v18, (uint64_t)qword_100A2AC98);
  unint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v34 = v12;
    uint64_t v23 = a6;
    uint64_t v24 = a4;
    uint64_t v25 = v22;
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Saving record to cloud.", v22, 2u);
    uint64_t v26 = v25;
    a4 = v24;
    a6 = v23;
    uint64_t v12 = v34;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  uint64_t v27 = v37;
  sub_10001DC4C(v37, (uint64_t)v17, a5);
  sub_10001DC4C(a4, (uint64_t)v15, a5);
  uint64_t v28 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v29 = (v28 + 24) & ~v28;
  unint64_t v30 = (v13 + v29 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v31 = (v28 + v30 + 8) & ~v28;
  uint64_t v32 = swift_allocObject(a6, v31 + v13, v28 | 7);
  *(void *)(v32 + swift_weakDestroy(v0 + 16) = v36;
  sub_10002218C((uint64_t)v17, v32 + v29, a5);
  *(void *)(v32 + v30) = v35;
  sub_10002218C((uint64_t)v15, v32 + v31, a5);
  swift_retain();
  swift_retain();
  v39(v27, 0LL, v38, v32);
  return swift_release();
}

uint64_t sub_1004FE52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - v10;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AC98);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  uint64_t v17 = v27;
  sub_10001DC4C(v27, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  sub_10001DC4C(a4, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  unint64_t v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (v18 + v20 + 8) & ~v18;
  uint64_t v22 = swift_allocObject(&unk_100961778, v21 + v7, v18 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v26;
  sub_10002218C((uint64_t)v11, v22 + v19, type metadata accessor for OwnedBeaconGroup);
  *(void *)(v22 + v20) = v25;
  sub_10002218C((uint64_t)v9, v22 + v21, type metadata accessor for OwnedBeaconGroup);
  swift_retain();
  swift_retain();
  sub_1004FCEB4( v17,  0,  (void (*)(char *))sub_100567AB8,  v22,  &qword_1009A49F0,  type metadata accessor for OwnedBeaconGroup,  (uint64_t)sub_1000227C0,  (uint64_t)sub_10056777C,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_10050167C);
  return swift_release();
}

uint64_t sub_1004FE770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for SafeLocation(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - v10;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AC98);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  uint64_t v17 = v27;
  sub_10001DC4C(v27, (uint64_t)v11, type metadata accessor for SafeLocation);
  sub_10001DC4C(a4, (uint64_t)v9, type metadata accessor for SafeLocation);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  unint64_t v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (v18 + v20 + 8) & ~v18;
  uint64_t v22 = swift_allocObject(&unk_100961B38, v21 + v7, v18 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v26;
  sub_10002218C((uint64_t)v11, v22 + v19, type metadata accessor for SafeLocation);
  *(void *)(v22 + v20) = v25;
  sub_10002218C((uint64_t)v9, v22 + v21, type metadata accessor for SafeLocation);
  swift_retain();
  swift_retain();
  sub_1004FCEB4( v17,  0,  (void (*)(char *))sub_100569020,  v22,  (uint64_t *)&unk_1009AF730,  type metadata accessor for SafeLocation,  (uint64_t)sub_100571ADC,  (uint64_t)sub_100571BD4,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_100501828);
  return swift_release();
}

uint64_t sub_1004FE9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for LeashRecord(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - v10;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AC98);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  uint64_t v17 = v27;
  sub_10001DC4C(v27, (uint64_t)v11, type metadata accessor for LeashRecord);
  sub_10001DC4C(a4, (uint64_t)v9, type metadata accessor for LeashRecord);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  unint64_t v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (v18 + v20 + 8) & ~v18;
  uint64_t v22 = swift_allocObject(&unk_100961A98, v21 + v7, v18 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v26;
  sub_10002218C((uint64_t)v11, v22 + v19, type metadata accessor for LeashRecord);
  *(void *)(v22 + v20) = v25;
  sub_10002218C((uint64_t)v9, v22 + v21, type metadata accessor for LeashRecord);
  swift_retain();
  swift_retain();
  sub_1004FCEB4( v17,  0,  (void (*)(char *))sub_100568D18,  v22,  (uint64_t *)&unk_1009AF770,  type metadata accessor for LeashRecord,  (uint64_t)sub_100571AF0,  (uint64_t)sub_100571BC0,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_100501A04);
  return swift_release();
}

uint64_t sub_1004FEBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - v10;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AC98);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  uint64_t v17 = v27;
  sub_10001DC4C(v27, (uint64_t)v11, type metadata accessor for KeyAlignmentRecord);
  sub_10001DC4C(a4, (uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  unint64_t v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (v18 + v20 + 8) & ~v18;
  uint64_t v22 = swift_allocObject(&unk_100961D90, v21 + v7, v18 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v26;
  sub_10002218C((uint64_t)v11, v22 + v19, type metadata accessor for KeyAlignmentRecord);
  *(void *)(v22 + v20) = v25;
  sub_10002218C((uint64_t)v9, v22 + v21, type metadata accessor for KeyAlignmentRecord);
  swift_retain();
  swift_retain();
  sub_1004FCEB4( v17,  0,  (void (*)(char *))sub_100569550,  v22,  &qword_1009A7E08,  type metadata accessor for KeyAlignmentRecord,  (uint64_t)sub_100571B68,  (uint64_t)sub_100571BE8,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_100501BE0);
  return swift_release();
}

void sub_1004FEE3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16 = a6(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v51 - v17;
  uint64_t v19 = sub_100004AEC(a7);
  __chkstk_darwin(v19);
  uint64_t v21 = (void *)((char *)v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v21, a7);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    uint64_t v22 = a10;
    uint64_t v23 = *v21;
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v52 = a5;
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2AC98);
    swift_errorRetain(v23);
    uint64_t v26 = swift_errorRetain(v23);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v51[0] = a10;
      uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v53 = v23;
      v54[0] = v30;
      v51[1] = v25;
      *(_DWORD *)uint64_t v29 = 136446210;
      swift_errorRetain(v23);
      uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v32 = String.init<A>(describing:)(&v53, v31);
      uint64_t v53 = sub_1003F11D4(v32, v33, v54);
      uint64_t v22 = v51[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "Saving to cloud failed. Saving the status to disk record. %{public}s",  v29,  0xCu);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v23);
      swift_errorRelease(v23);
    }

    uint64_t v42 = QueueSynchronizer.conditionalSync<A>(_:)(v22);
    __chkstk_darwin(v42);
    v51[-2] = v43;
    v51[-1] = v52;
    uint64_t v44 = OS_dispatch_queue.sync<A>(execute:)(a11, &v51[-4], (char *)&type metadata for () + 8);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v44);
    uint64_t v49 = static os_log_type_t.default.getter(v48);
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v49, "Saved LocalStorageBacked record", v50, 2u);
      swift_slowDealloc(v50, -1LL, -1LL);

      swift_errorRelease(v23);
    }

    else
    {
      swift_errorRelease(v23);
    }
  }

  else
  {
    sub_10002218C((uint64_t)v21, (uint64_t)v18, a6);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    uint64_t v35 = sub_10000A720(v34, (uint64_t)qword_100A2AC98);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Saved to cloud. Updating local record", v38, 2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    uint64_t v39 = QueueSynchronizer.conditionalSync<A>(_:)(a8);
    __chkstk_darwin(v39);
    v51[-2] = v40;
    v51[-1] = v18;
    uint64_t v41 = OS_dispatch_queue.sync<A>(execute:)(a9, &v51[-4], (char *)&type metadata for () + 8);
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v46 = static os_log_type_t.default.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      int v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)int v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Saved LocalStorageBacked record", v47, 2u);
      swift_slowDealloc(v47, -1LL, -1LL);
    }

    sub_100018C68((uint64_t)v18, a6);
  }

void sub_1004FF628( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = a6(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v49 - v15;
  uint64_t v17 = sub_100004AEC(a7);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v19, a7);
  if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
  {
    uint64_t v20 = *v19;
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    uint64_t v22 = sub_10000A720(v21, (uint64_t)qword_100A2AC98);
    swift_errorRetain(v20);
    uint64_t v23 = swift_errorRetain(v20);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(12LL, -1LL);
      uint64_t v51 = v22;
      uint64_t v27 = (uint8_t *)v26;
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v52 = v20;
      v53[0] = v28;
      *(_DWORD *)uint64_t v27 = 136446210;
      uint64_t v50 = v27 + 4;
      swift_errorRetain(v20);
      uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v30 = String.init<A>(describing:)(&v52, v29);
      uint64_t v52 = sub_1003F11D4(v30, v31, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v50, v27 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Saving to cloud failed. Saving the status to disk record. %{public}s",  v27,  0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v20);
      swift_errorRelease(v20);
    }

    __chkstk_darwin(v40);
    *(&v49 - 2) = v41;
    *(&v49 - 1) = a5;
    uint64_t v42 = OS_dispatch_queue.sync<A>(execute:)(a9, &v49 - 4, (char *)&type metadata for () + 8);
    os_log_type_t v46 = (os_log_s *)Logger.logObject.getter(v42);
    uint64_t v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, (os_log_type_t)v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v47, "Saved LocalStorageBacked record", v48, 2u);
      swift_slowDealloc(v48, -1LL, -1LL);

      swift_errorRelease(v20);
    }

    else
    {
      swift_errorRelease(v20);
    }
  }

  else
  {
    sub_10002218C((uint64_t)v19, (uint64_t)v16, a6);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    uint64_t v33 = sub_10000A720(v32, (uint64_t)qword_100A2AC98);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Saved to cloud. Updating local record", v36, 2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    __chkstk_darwin(v37);
    *(&v49 - 2) = v38;
    *(&v49 - 1) = (uint64_t)v16;
    uint64_t v39 = OS_dispatch_queue.sync<A>(execute:)(a8, &v49 - 4, (char *)&type metadata for () + 8);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v44 = static os_log_type_t.default.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Saved LocalStorageBacked record", v45, 2u);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    sub_100018C68((uint64_t)v16, a6);
  }

void sub_1004FFDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for KeyAlignmentRecord(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A7E08);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v12, &qword_1009A7E08);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    uint64_t v13 = *v12;
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2AC98);
    swift_errorRetain(v13);
    uint64_t v16 = swift_errorRetain(v13);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v42 = v13;
      v43[0] = v20;
      uint64_t v41 = v15;
      *(_DWORD *)uint64_t v19 = 136446210;
      swift_errorRetain(v13);
      uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v22 = String.init<A>(describing:)(&v42, v21);
      uint64_t v42 = sub_1003F11D4(v22, v23, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Saving to cloud failed. Saving the status to disk record. %{public}s",  v19,  0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v13);
      swift_errorRelease(v13);
    }

    __chkstk_darwin(v32);
    *(&v41 - 2) = v33;
    *(&v41 - 1) = a5;
    uint64_t v34 = OS_dispatch_queue.sync<A>(execute:)(sub_100571B68, &v41 - 4, (char *)&type metadata for () + 8);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v34);
    uint64_t v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, (os_log_type_t)v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v39, "Saved LocalStorageBacked record", v40, 2u);
      swift_slowDealloc(v40, -1LL, -1LL);

      swift_errorRelease(v13);
    }

    else
    {
      swift_errorRelease(v13);
    }
  }

  else
  {
    sub_10002218C((uint64_t)v12, (uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2AC98);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Saved to cloud. Updating local record", v28, 2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    __chkstk_darwin(v29);
    *(&v41 - 2) = v30;
    *(&v41 - 1) = (uint64_t)v9;
    uint64_t v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100571B68, &v41 - 4, (char *)&type metadata for () + 8);
    os_log_type_t v35 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Saved LocalStorageBacked record", v37, 2u);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    sub_100018C68((uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
  }

void sub_100500578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A0E30);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v12, &qword_1009A0E30);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    uint64_t v13 = *v12;
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2AC98);
    swift_errorRetain(v13);
    uint64_t v16 = swift_errorRetain(v13);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v42 = v13;
      v43[0] = v20;
      uint64_t v41 = v15;
      *(_DWORD *)uint64_t v19 = 136446210;
      swift_errorRetain(v13);
      uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v22 = String.init<A>(describing:)(&v42, v21);
      uint64_t v42 = sub_1003F11D4(v22, v23, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Saving to cloud failed. Saving the status to disk record. %{public}s",  v19,  0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v13);
      swift_errorRelease(v13);
    }

    uint64_t v32 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    __chkstk_darwin(v32);
    *(&v41 - 2) = v33;
    *(&v41 - 1) = a5;
    uint64_t v34 = OS_dispatch_queue.sync<A>(execute:)(sub_100571B7C, &v41 - 4, (char *)&type metadata for () + 8);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v34);
    uint64_t v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, (os_log_type_t)v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v39, "Saved LocalStorageBacked record", v40, 2u);
      swift_slowDealloc(v40, -1LL, -1LL);

      swift_errorRelease(v13);
    }

    else
    {
      swift_errorRelease(v13);
    }
  }

  else
  {
    sub_10002218C((uint64_t)v12, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2AC98);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Saved to cloud. Updating local record", v28, 2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    uint64_t v29 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    __chkstk_darwin(v29);
    *(&v41 - 2) = v30;
    *(&v41 - 1) = (uint64_t)v9;
    uint64_t v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100571B7C, &v41 - 4, (char *)&type metadata for () + 8);
    os_log_type_t v35 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Saved LocalStorageBacked record", v37, 2u);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    sub_100018C68((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
  }

uint64_t sub_100500D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_autoreleasePoolPush();
  sub_100545150(a1);
  uint64_t v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1004F730C();
  sub_10067B3B0(v14);
  swift_release();
  uint64_t v15 = swift_allocObject(&unk_100961840, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + swift_unknownObjectUnownedDestroy(v0 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_100567FBC, v15);
  swift_release();
  swift_release();
  sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_100961868, v18 + 16, v16 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v4;
  sub_10002218C((uint64_t)v11, v19 + v17, type metadata accessor for OwnedBeaconRecord);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_100567FEC, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100500F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_autoreleasePoolPush();
  sub_100545548(a1, type metadata accessor for LostModeRecord);
  uint64_t v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1004F730C();
  sub_10067B3B0(v14);
  swift_release();
  uint64_t v15 = swift_allocObject(&unk_100963578, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + swift_unknownObjectUnownedDestroy(v0 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_10056F7F0, v15);
  swift_release();
  swift_release();
  sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for LostModeRecord);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_1009635A0, v18 + 16, v16 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v4;
  sub_10002218C((uint64_t)v11, v19 + v17, type metadata accessor for LostModeRecord);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_10056F91C, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1005010F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for ShareRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_autoreleasePoolPush();
  sub_100545548(a1, type metadata accessor for ShareRecord);
  uint64_t v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1004F730C();
  sub_10067B3B0(v14);
  swift_release();
  uint64_t v15 = swift_allocObject(&unk_100963050, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + swift_unknownObjectUnownedDestroy(v0 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_10056DE38, v15);
  swift_release();
  swift_release();
  sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for ShareRecord);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_100963078, v18 + 16, v16 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v4;
  sub_10002218C((uint64_t)v11, v19 + v17, type metadata accessor for ShareRecord);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_10056DFA8, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1005012CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_autoreleasePoolPush();
  sub_100545548(a1, type metadata accessor for OwnedDeviceKeyRecord);
  uint64_t v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1004F730C();
  sub_10067B3B0(v14);
  swift_release();
  uint64_t v15 = swift_allocObject(&unk_100961368, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + swift_unknownObjectUnownedDestroy(v0 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_10056682C, v15);
  swift_release();
  swift_release();
  sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for OwnedDeviceKeyRecord);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_100961390, v18 + 16, v16 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v4;
  sub_10002218C((uint64_t)v11, v19 + v17, type metadata accessor for OwnedDeviceKeyRecord);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_100566948, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1005014A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_autoreleasePoolPush();
  sub_100545548(a1, type metadata accessor for BeaconNamingRecord);
  uint64_t v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1004F730C();
  sub_10067B3B0(v14);
  swift_release();
  uint64_t v15 = swift_allocObject(&unk_1009617C8, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + swift_unknownObjectUnownedDestroy(v0 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_100567BC4, v15);
  swift_release();
  swift_release();
  sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for BeaconNamingRecord);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_1009617F0, v18 + 16, v16 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v4;
  sub_10002218C((uint64_t)v11, v19 + v17, type metadata accessor for BeaconNamingRecord);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_100567CE0, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10050167C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_autoreleasePoolPush();
  sub_100544E34(a1);
  uint64_t v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1004F730C();
  sub_10067B3B0(v14);
  swift_release();
  uint64_t v15 = swift_allocObject(&unk_100961728, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + swift_unknownObjectUnownedDestroy(v0 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_100567798, v15);
  swift_release();
  swift_release();
  sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_100961750, v18 + 16, v16 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v4;
  sub_10002218C((uint64_t)v11, v19 + v17, type metadata accessor for OwnedBeaconGroup);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1005678B8, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100501828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SafeLocation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_autoreleasePoolPush();
  sub_100545548(a1, type metadata accessor for SafeLocation);
  uint64_t v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1004F730C();
  sub_10067B3B0(v14);
  swift_release();
  uint64_t v15 = swift_allocObject(&unk_100961AE8, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + swift_unknownObjectUnownedDestroy(v0 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_100568D64, v15);
  swift_release();
  swift_release();
  sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for SafeLocation);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_100961B10, v18 + 16, v16 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v4;
  sub_10002218C((uint64_t)v11, v19 + v17, type metadata accessor for SafeLocation);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_100568E60, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100501A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for LeashRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_autoreleasePoolPush();
  sub_100545548(a1, type metadata accessor for LeashRecord);
  uint64_t v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1004F730C();
  sub_10067B3B0(v14);
  swift_release();
  uint64_t v15 = swift_allocObject(&unk_100961A48, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + swift_unknownObjectUnownedDestroy(v0 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_100568A8C, v15);
  swift_release();
  swift_release();
  sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for LeashRecord);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_100961A70, v18 + 16, v16 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v4;
  sub_10002218C((uint64_t)v11, v19 + v17, type metadata accessor for LeashRecord);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_100568B78, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100501BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_autoreleasePoolPush();
  sub_100544A9C(a1);
  uint64_t v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1004F730C();
  sub_10067B3B0(v14);
  swift_release();
  uint64_t v15 = swift_allocObject(&unk_100961D40, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + swift_unknownObjectUnownedDestroy(v0 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_100569244, v15);
  swift_release();
  swift_release();
  sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for KeyAlignmentRecord);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_100961D68, v18 + 16, v16 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v4;
  sub_10002218C((uint64_t)v11, v19 + v17, type metadata accessor for KeyAlignmentRecord);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_100569364, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100501D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_autoreleasePoolPush();
  sub_100545548(a1, type metadata accessor for SharedBeaconRecord);
  uint64_t v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1004F730C();
  sub_10067B3B0(v14);
  swift_release();
  uint64_t v15 = swift_allocObject(&unk_100963280, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + swift_unknownObjectUnownedDestroy(v0 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_10056E6A8, v15);
  swift_release();
  swift_release();
  sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_1009632A8, v18 + 16, v16 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v4;
  sub_10002218C((uint64_t)v11, v19 + v17, type metadata accessor for SharedBeaconRecord);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_10056E88C, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100501F64( uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t *a4, const char *a5, uint64_t a6)
{
  v22[0] = a6;
  v22[1] = a3;
  unint64_t v23 = a2;
  uint64_t v9 = sub_100004AEC(a4);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = static os_log_type_t.error.getter(v10);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v14 = qword_100A2B018;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v24 = a1;
  swift_errorRetain(a1);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v18 = String.init<A>(describing:)(&v24, v17);
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_1000226F4();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, a5, v22[0], 2LL, v16);
  swift_bridgeObjectRelease();
  *uint64_t v12 = a1;
  swift_storeEnumTagMultiPayload(v12, v9, 1LL);
  swift_errorRetain(a1);
  v23(v12);
  return sub_100015794((uint64_t)v12, a4);
}

uint64_t sub_1005020F4( void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t *a6, uint64_t (*a7)(void), void (*a8)(id), uint64_t a9)
{
  uint64_t v37 = a6;
  uint64_t v38 = a8;
  uint64_t v35 = a5;
  os_log_type_t v36 = a4;
  uint64_t v31 = a3;
  uint64_t v32 = a2;
  uint64_t v34 = sub_100004AEC(a6);
  __chkstk_darwin(v34);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = a7;
  uint64_t v13 = a7(0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = static os_log_type_t.default.getter(v14);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v18 = qword_100A2B018;
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
  __int128 v33 = xmmword_1007E67D0;
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v20 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
  *(void *)(v20 + 64) = sub_10020EB64( (unint64_t *)&qword_10099D750,  (unint64_t *)&qword_10099D920,  &OBJC_CLASS___CKRecord_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v20 + 32) = a1;
  id v21 = a1;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Saved record %@", 15LL, 2LL, v20);
  swift_bridgeObjectRelease();
  id v22 = v21;
  v38(v22);
  uint64_t v23 = v32;
  uint64_t v24 = __chkstk_darwin(a9);
  *(&v29 - 4) = v31;
  *(&v29 - 3) = v23;
  *(&v29 - 2) = (uint64_t)v16;
  OS_dispatch_queue.sync<A>(execute:)(v24, &v29 - 6, (char *)&type metadata for () + 8);
  uint64_t v25 = v30;
  sub_10001DC4C((uint64_t)v16, (uint64_t)v12, v30);
  swift_storeEnumTagMultiPayload(v12, v34, 0LL);
  v36(v12);
  sub_100015794((uint64_t)v12, v37);
  uint64_t v26 = *(void (**)(uint64_t))(v23 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  if (v26)
  {
    uint64_t v27 = *(void *)(v23 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
    swift_retain();
    v26(v23);
    sub_10002214C((uint64_t)v26, v27);
  }

  return sub_100018C68((uint64_t)v16, v25);
}

uint64_t sub_100502474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v9[2] = *(void *)(a2 + 136);
  v9[3] = a3;
  return OS_dispatch_queue.sync<A>(execute:)(a5, v9, (char *)&type metadata for () + 8);
}

void sub_1005024F0(uint64_t a1, char a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  uint64_t v51 = a1;
  uint64_t v52 = a5;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v47 = sub_100004AEC(&qword_1009A0E30);
  __chkstk_darwin(v47);
  uint64_t v48 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v44 - v13;
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v16 = qword_100A2B018;
  uint64_t v46 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v46, 72LL, 7LL);
  uint64_t v18 = (void *)v17;
  __int128 v44 = xmmword_1007E67D0;
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  if ((a2 & 1) != 0) {
    uint64_t v19 = 1702195828LL;
  }
  else {
    uint64_t v19 = 0x65736C6166LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v20 = 0xE400000000000000LL;
  }
  else {
    unint64_t v20 = 0xE500000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v45 = sub_1000226F4();
  v18[8] = v45;
  v18[4] = v19;
  v18[5] = v20;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31LL, 2LL, v18, v44);
  swift_bridgeObjectRelease();
  id v21 = objc_autoreleasePoolPush();
  if ((a2 & 1) != 0)
  {
    uint64_t v22 = v51;
    sub_100545548(v51, type metadata accessor for SharedBeaconRecord);
    uint64_t v24 = v23;
    objc_autoreleasePoolPop(v21);
    v53[0] = v24;
    sub_10001DC4C(v22, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    v49(v14);
    sub_1002B6A70(v53, (uint64_t)v14);
    uint64_t v25 = v52;
    uint64_t v26 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    __chkstk_darwin(v26);
    *((void *)&v44 - 2) = v27;
    *((void *)&v44 - 1) = v14;
    OS_dispatch_queue.sync<A>(execute:)(sub_100571B7C, &v44 - 2, (char *)&type metadata for () + 8);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    sub_1004E696C(8u);
    uint64_t v42 = (uint64_t)v48;
    sub_10001DC4C((uint64_t)v14, (uint64_t)v48, type metadata accessor for SharedBeaconRecord);
    swift_storeEnumTagMultiPayload(v42, v47, 0LL);
    sub_1006FF804(v42);
    sub_100015794(v42, &qword_1009A0E30);
    uint64_t v43 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v43);
    *((void *)&v44 - 4) = v25;
    *((void *)&v44 - 3) = v53;
    *((void *)&v44 - 2) = v22;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_10056F180,  &v44 - 3);
    sub_100018C68((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
  }

  else
  {
    uint64_t v28 = v51;
    sub_100545548(v51, type metadata accessor for SharedBeaconRecord);
    uint64_t v48 = v29;
    objc_autoreleasePoolPop(v21);
    uint64_t v30 = v52;
    sub_1004F730C();
    sub_10001DC4C(v28, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
    uint64_t v31 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v32 = (v31 + 32) & ~v31;
    uint64_t v33 = v31 | 7;
    uint64_t v34 = swift_allocObject(&unk_100963320, v32 + v9, v31 | 7);
    uint64_t v35 = v50;
    *(void *)(v34 + swift_weakDestroy(v0 + 16) = v49;
    *(void *)(v34 + swift_unknownObjectUnownedDestroy(v0 + 24) = v35;
    sub_10002218C((uint64_t)v11, v34 + v32, type metadata accessor for SharedBeaconRecord);
    swift_retain();
    os_log_type_t v36 = v48;
    sub_10067F4C4(v48, (void (*)(id *))sub_10056EF90, v34);
    swift_release();
    swift_release();
    Future.addFailure(block:)(sub_100503E00, 0LL);
    swift_release();
    sub_10001DC4C(v28, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
    uint64_t v37 = (v31 + 16) & ~v31;
    unint64_t v38 = (v9 + v37 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v40 = swift_allocObject(&unk_100963348, v39 + 16, v33);
    sub_10002218C((uint64_t)v11, v40 + v37, type metadata accessor for SharedBeaconRecord);
    *(void *)(v40 + v38) = v30;
    uint64_t v41 = (uint64_t (**)(uint64_t))(v40 + v39);
    *uint64_t v41 = sub_1006FF804;
    v41[1] = 0LL;
    swift_retain();
    Future.addSuccess(block:)(sub_10056F16C, v40);

    swift_release();
    swift_release();
    swift_release();
  }

void sub_100502AF8( uint64_t a1, char a2, void (*a3)(uint64_t), void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v57 = a1;
  uint64_t v58 = a5;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v49 = sub_100004AEC(&qword_1009A6100);
  __chkstk_darwin(v49);
  uint64_t v50 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ShareRecord(0LL);
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v51 + 64);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v53 = (char *)&v47 - v13;
  uint64_t v14 = swift_allocObject(&unk_1009614A8, 24LL, 7LL);
  uint64_t v56 = v14;
  uint64_t v52 = a6;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = a6;
  uint64_t v15 = static os_log_type_t.default.getter(v14);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v16 = qword_100A2B018;
  uint64_t v48 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v48, 72LL, 7LL);
  uint64_t v18 = v17;
  __int128 v47 = xmmword_1007E67D0;
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  if ((a2 & 1) != 0) {
    uint64_t v19 = 1702195828LL;
  }
  else {
    uint64_t v19 = 0x65736C6166LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v20 = 0xE400000000000000LL;
  }
  else {
    unint64_t v20 = 0xE500000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v20;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31LL, 2LL, v18, v47);
  swift_bridgeObjectRelease();
  id v21 = objc_autoreleasePoolPush();
  if ((a2 & 1) != 0)
  {
    uint64_t v22 = v57;
    sub_100545548(v57, type metadata accessor for ShareRecord);
    uint64_t v24 = v23;
    objc_autoreleasePoolPop(v21);
    v59[0] = v24;
    uint64_t v25 = v53;
    sub_10001DC4C(v22, (uint64_t)v53, type metadata accessor for ShareRecord);
    *(void *)&v25[*(int *)(v9 + 44)] = v52;
    uint64_t v26 = sub_1004E6DFC(v59, (uint64_t)v25);
    uint64_t v27 = v58;
    __chkstk_darwin(v26);
    *((void *)&v47 - 2) = v28;
    *((void *)&v47 - 1) = v25;
    OS_dispatch_queue.sync<A>(execute:)(sub_1000227D8, &v47 - 2, (char *)&type metadata for () + 8);
    sub_1004E696C(8u);
    uint64_t v44 = v50;
    sub_10001DC4C((uint64_t)v25, v50, type metadata accessor for ShareRecord);
    swift_storeEnumTagMultiPayload(v44, v49, 0LL);
    v54(v44);
    sub_100015794(v44, &qword_1009A6100);
    uint64_t v45 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v45);
    *((void *)&v47 - 4) = v27;
    *((void *)&v47 - 3) = v59;
    *((void *)&v47 - 2) = v22;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_100566F04,  &v47 - 3);
    sub_100018C68((uint64_t)v25, type metadata accessor for ShareRecord);
    id v46 = v59[0];
    swift_release();
  }

  else
  {
    uint64_t v29 = v57;
    sub_100545548(v57, type metadata accessor for ShareRecord);
    uint64_t v31 = v30;
    uint64_t v53 = v30;
    objc_autoreleasePoolPop(v21);
    sub_1004F730C();
    sub_10001DC4C(v29, (uint64_t)v12, type metadata accessor for ShareRecord);
    uint64_t v32 = *(unsigned __int8 *)(v51 + 80);
    uint64_t v33 = (v32 + 32) & ~v32;
    uint64_t v52 = v32 | 7;
    uint64_t v34 = swift_allocObject(&unk_1009614D0, v33 + v10, v32 | 7);
    uint64_t v35 = v56;
    *(void *)(v34 + swift_weakDestroy(v0 + 16) = sub_100566C18;
    *(void *)(v34 + swift_unknownObjectUnownedDestroy(v0 + 24) = v35;
    sub_10002218C((uint64_t)v12, v34 + v33, type metadata accessor for ShareRecord);
    swift_retain();
    sub_10067F4C4(v31, (void (*)(id *))sub_100566D4C, v34);
    swift_release();
    swift_release();
    uint64_t v36 = swift_allocObject(&unk_1009614F8, 32LL, 7LL);
    uint64_t v37 = v54;
    unint64_t v38 = v55;
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = v54;
    *(void *)(v36 + swift_unknownObjectUnownedDestroy(v0 + 24) = v38;
    swift_retain();
    Future.addFailure(block:)(sub_100566D68, v36);
    swift_release();
    swift_release();
    sub_10001DC4C(v29, (uint64_t)v12, type metadata accessor for ShareRecord);
    uint64_t v39 = (v32 + 16) & ~v32;
    unint64_t v40 = (v10 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v42 = swift_allocObject(&unk_100961520, v41 + 16, v52);
    sub_10002218C((uint64_t)v12, v42 + v39, type metadata accessor for ShareRecord);
    *(void *)(v42 + v40) = v58;
    uint64_t v43 = (void (**)(uint64_t))(v42 + v41);
    *uint64_t v43 = v37;
    v43[1] = v38;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_100566EE0, v42);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }

uint64_t sub_100503164(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_100503298( a1,  a2,  a3,  a4,  type metadata accessor for SharedBeaconRecord,  (uint64_t)&unk_1009632F8,  (uint64_t)sub_10056EDD4);
}

uint64_t sub_100503190(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_100503298( a1,  a2,  a3,  a4,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_100962DF8,  (uint64_t)sub_10056D460);
}

uint64_t sub_1005031BC(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_100503298( a1,  a2,  a3,  a4,  type metadata accessor for OwnedBeaconGroup,  (uint64_t)&unk_100963708,  (uint64_t)sub_1005700D4);
}

uint64_t sub_1005031E8(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_100503298( a1,  a2,  a3,  a4,  type metadata accessor for LostModeRecord,  (uint64_t)&unk_100963488,  (uint64_t)sub_10056F774);
}

uint64_t sub_100503214(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_100503298( a1,  a2,  a3,  a4,  type metadata accessor for BeaconNamingRecord,  (uint64_t)&unk_1009618E0,  (uint64_t)sub_100568880);
}

uint64_t sub_100503240(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_100503298( a1,  a2,  a3,  a4,  type metadata accessor for ShareRecord,  (uint64_t)&unk_100961548,  (uint64_t)sub_100567078);
}

uint64_t sub_10050326C(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_100503298( a1,  a2,  a3,  a4,  type metadata accessor for KeyAlignmentRecord,  (uint64_t)&unk_1009618B8,  (uint64_t)sub_100568714);
}

uint64_t sub_100503298( uint64_t a1, uint64_t a2, id *a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v26 = a4;
  uint64_t v11 = a5(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = sub_1004F730C();
  id v17 = *a3;
  uint64_t v18 = sub_10067EE34(v17, v16);
  swift_release(v16);

  sub_10001DC4C(v26, (uint64_t)v15, a5);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = (v19 + 24) & ~v19;
  unint64_t v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(v27, v21 + 8, v19 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = a1;
  sub_10002218C((uint64_t)v15, v22 + v20, a5);
  *(void *)(v22 + v21) = a2;
  swift_retain();
  swift_retain();
  uint64_t v23 = Future.addCompletion(block:)(v28, v22);
  swift_release(v18);
  swift_release(v23);
  return swift_release(v22);
}

void sub_1005033E8( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), void (*a7)(void), uint64_t a8, uint64_t a9)
{
  uint64_t v14 = a6(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v31 - v15;
  Transaction.capture()();
  if (a2)
  {
    uint64_t v17 = swift_errorRetain(a2);
    uint64_t v18 = static os_log_type_t.error.getter(v17);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v19 = qword_100A2B018;
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
    *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    v31[0] = a2;
    swift_errorRetain(a2);
    uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v23 = String.init<A>(describing:)(v31, v22);
    uint64_t v25 = v24;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_1000226F4();
    *(void *)(v21 + 32) = v23;
    *(void *)(v21 + 40) = v25;
    os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  v19,  "Modifying to cloud failed. Updating disk record with status. Error: %@",  70LL,  2LL,  v21);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
  }

  else if (a1)
  {
    id v26 = a1;
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "Modified to cloud. Updating local record with sync status.",  58LL,  2LL,  _swiftEmptyArrayStorage);
    id v28 = v26;
    a7();
    uint64_t v29 = QueueSynchronizer.conditionalSync<A>(_:)(a8);
    __chkstk_darwin(v29);
    v31[-2] = v30;
    v31[-1] = v16;
    OS_dispatch_queue.sync<A>(execute:)(a9, &v31[-4], (char *)&type metadata for () + 8);
    sub_100018C68((uint64_t)v16, a6);
  }

void sub_100503718( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v13 = a6(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v30 - v14;
  Transaction.capture()();
  if (a2)
  {
    uint64_t v16 = swift_errorRetain(a2);
    uint64_t v17 = static os_log_type_t.error.getter(v16);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v18 = qword_100A2B018;
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
    *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    v30[0] = a2;
    swift_errorRetain(a2);
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v22 = String.init<A>(describing:)(v30, v21);
    uint64_t v24 = v23;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_1000226F4();
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 40) = v24;
    os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  v18,  "Modifying to cloud failed. Updating disk record with status. Error: %@",  70LL,  2LL,  v20);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
  }

  else if (a1)
  {
    id v25 = a1;
    uint64_t v26 = static os_log_type_t.default.getter(v25);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  qword_100A2B018,  "Modified to cloud. Updating local record with sync status.",  58LL,  2LL,  _swiftEmptyArrayStorage);
    id v27 = v25;
    uint64_t v28 = a7();
    __chkstk_darwin(v28);
    v30[-2] = v29;
    v30[-1] = v15;
    OS_dispatch_queue.sync<A>(execute:)(a8, &v30[-4], (char *)&type metadata for () + 8);
    sub_100018C68((uint64_t)v15, a6);
  }

uint64_t sub_100503A24(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100503C58( a1,  a2,  a3,  a4,  type metadata accessor for SharedBeaconRecord,  (void (*)(id))sub_100761E80,  (void (*)(id *, char *))sub_1002B6A70);
}

uint64_t sub_100503A40(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100503C58( a1,  a2,  a3,  a4,  type metadata accessor for OwnedBeaconRecord,  (void (*)(id))sub_1005D1638,  (void (*)(id *, char *))sub_1002B5878);
}

uint64_t sub_100503A5C(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100503C58( a1,  a2,  a3,  a4,  type metadata accessor for OwnedBeaconGroup,  (void (*)(id))sub_1001CBBB8,  (void (*)(id *, char *))sub_1004E9B0C);
}

uint64_t sub_100503A78(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100503C58( a1,  a2,  a3,  a4,  type metadata accessor for LostModeRecord,  (void (*)(id))sub_1005F0CB4,  (void (*)(id *, char *))sub_100543938);
}

uint64_t sub_100503A94(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100503C58( a1,  a2,  a3,  a4,  type metadata accessor for BeaconNamingRecord,  (void (*)(id))sub_1005DD0A4,  (void (*)(id *, char *))sub_1002B6684);
}

uint64_t sub_100503AB0(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_100503C58( a1,  a2,  a3,  a4,  type metadata accessor for ShareRecord,  (void (*)(id))sub_10003CCA8,  (void (*)(id *, char *))sub_1004E6DFC);
}

uint64_t sub_100503ACC(id *a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = type metadata accessor for KeyAlignmentRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100039634(*a1, v6);
  a2(v6);
  sub_10003AF4C((uint64_t)v6, a1);
  return sub_100018C68((uint64_t)v6, type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_100503C58( id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(id), void (*a7)(id *, char *))
{
  uint64_t v12 = a5(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v16 - v13;
  a6(*a1);
  a2(v14);
  a7(a1, v14);
  return sub_100018C68((uint64_t)v14, a5);
}

uint64_t sub_100503E00(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A0E30);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = static os_log_type_t.error.getter(v3);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v7 = qword_100A2B018;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v16 = a1;
  swift_errorRetain(a1);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v11 = String.init<A>(describing:)(&v16, v10);
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1000226F4();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Update failed: %@", 17LL, 2LL, v9);
  swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  swift_storeEnumTagMultiPayload(v5, v2, 1LL);
  swift_errorRetain(a1);
  sub_1006FF804((uint64_t)v5);
  return sub_100015794((uint64_t)v5, &qword_1009A0E30);
}

uint64_t sub_100503F80(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100501F64(a1, a2, a3, &qword_1009A0E30, "Update failed: %@", 17LL);
}

uint64_t sub_100503F98(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100501F64(a1, a2, a3, (uint64_t *)&unk_1009B0830, "Update failed: %@", 17LL);
}

uint64_t sub_100503FB0(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100501F64(a1, a2, a3, &qword_1009A49F0, "Update failed: %@", 17LL);
}

uint64_t sub_100503FC8(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100501F64(a1, a2, a3, &qword_1009A7F18, "Update failed: %@", 17LL);
}

uint64_t sub_100503FE0(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100501F64(a1, a2, a3, &qword_1009A7DE0, "Update failed: %@", 17LL);
}

uint64_t sub_100503FF8(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100501F64(a1, a2, a3, &qword_1009A6100, "Update failed: %@", 17LL);
}

uint64_t sub_100504010(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return sub_100501F64(a1, a2, a3, &qword_1009A7E08, "Update failed: %@", 17LL);
}

uint64_t sub_100504028(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v7 = sub_100004AEC(&qword_1009A0E30);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SharedBeaconRecord(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100761E80(a1, v12);
  uint64_t v13 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
  __chkstk_darwin(v13);
  v18[-2] = v14;
  v18[-1] = v12;
  OS_dispatch_queue.sync<A>(execute:)(sub_100571B7C, &v18[-4], (char *)&type metadata for () + 8);
  sub_1004E696C(8u);
  sub_10001DC4C((uint64_t)v12, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
  swift_storeEnumTagMultiPayload(v9, v7, 0LL);
  a4(v9);
  sub_100015794((uint64_t)v9, &qword_1009A0E30);
  uint64_t v15 = *(void (**)(uint64_t))(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  if (v15)
  {
    uint64_t v16 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
    swift_retain();
    v15(a3);
    sub_10002214C((uint64_t)v15, v16);
  }

  return sub_100018C68((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_100504324(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1005D1638(a1, v12);
  uint64_t v13 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
  __chkstk_darwin(v13);
  v18[-2] = v14;
  v18[-1] = v12;
  OS_dispatch_queue.sync<A>(execute:)(sub_100571B54, &v18[-4], (char *)&type metadata for () + 8);
  sub_1004E696C(8u);
  sub_10001DC4C((uint64_t)v12, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
  swift_storeEnumTagMultiPayload(v9, v7, 0LL);
  a4(v9);
  sub_100015794((uint64_t)v9, (uint64_t *)&unk_1009B0830);
  uint64_t v15 = *(void (**)(uint64_t))(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  if (v15)
  {
    uint64_t v16 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
    swift_retain();
    v15(a3);
    sub_10002214C((uint64_t)v15, v16);
  }

  return sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100504620(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v7 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconNamingRecord(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1005DD0A4(a1, v12);
  uint64_t v13 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
  __chkstk_darwin(v13);
  v18[-2] = v14;
  v18[-1] = v12;
  OS_dispatch_queue.sync<A>(execute:)(sub_100571B40, &v18[-4], (char *)&type metadata for () + 8);
  sub_1004E696C(8u);
  sub_10001DC4C((uint64_t)v12, (uint64_t)v9, type metadata accessor for BeaconNamingRecord);
  swift_storeEnumTagMultiPayload(v9, v7, 0LL);
  a4(v9);
  sub_100015794((uint64_t)v9, &qword_1009A7DE0);
  uint64_t v15 = *(void (**)(uint64_t))(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  if (v15)
  {
    uint64_t v16 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
    swift_retain();
    v15(a3);
    sub_10002214C((uint64_t)v15, v16);
  }

  return sub_100018C68((uint64_t)v12, type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_10050491C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  return sub_10050495C( a1,  a2,  a3,  a4,  a5,  &qword_1009A7E08,  type metadata accessor for KeyAlignmentRecord,  (void (*)(void *))sub_100039634,  (uint64_t)sub_100571B68);
}

uint64_t sub_10050495C( void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t *a6, uint64_t (*a7)(void), void (*a8)(void *), uint64_t a9)
{
  uint64_t v26 = a4;
  uint64_t v14 = sub_100004AEC(a6);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = a7(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v25 - v18;
  a8(a1);
  uint64_t v20 = __chkstk_darwin(a9);
  *(&v25 - 2) = v21;
  *(&v25 - 1) = (uint64_t)v19;
  OS_dispatch_queue.sync<A>(execute:)(v20, &v25 - 4, (char *)&type metadata for () + 8);
  sub_1004E696C(8u);
  sub_10001DC4C((uint64_t)v19, (uint64_t)v16, a7);
  swift_storeEnumTagMultiPayload(v16, v14, 0LL);
  v26(v16);
  sub_100015794((uint64_t)v16, a6);
  uint64_t v22 = *(void (**)(uint64_t))(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  if (v22)
  {
    uint64_t v23 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
    swift_retain();
    v22(a3);
    sub_10002214C((uint64_t)v22, v23);
  }

  return sub_100018C68((uint64_t)v19, a7);
}

uint64_t sub_100504C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v35 - v12;
  unsigned int v38 = static os_log_type_t.info.getter(v11);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v14 = qword_100A2B018;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v36 = a1;
  uint64_t v17 = UUID.uuidString.getter(v16);
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_1000226F4();
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v14, "beaconRecord(for uuid: %@)", 26LL, 2LL, v16);
  uint64_t v20 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v20);
  uint64_t v21 = v39;
  (*(void (**)(char *, void, uint64_t))(v39 + 104))( v10,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v7);
  uint64_t v22 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(vswift_weakDestroy(v0 + 16) = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v7, v22);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v21 + 8);
  v23(v10, v7);
  uint64_t v24 = ((uint64_t (*)(char *, uint64_t))v23)(v13, v7);
  if ((v16 & 1) != 0)
  {
    uint64_t v25 = static os_log_type_t.default.getter(v24);
    uint64_t result = os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_100A2B018,  "beaconRecord call failed because in device is in beforeFirstUnlock state",  72LL,  2LL,  _swiftEmptyArrayStorage);
    id v27 = (_OWORD *)v37;
    *(void *)(v37 + 32) = 0LL;
    _OWORD *v27 = 0u;
    v27[1] = 0u;
  }

  else
  {
    uint64_t v28 = sub_100508644();
    uint64_t v29 = v28[2];
    uint64_t v30 = v36;
    if (v29)
    {
      uint64_t v31 = (uint64_t)(v28 + 4);
      while (1)
      {
        sub_100013044(v31, (uint64_t)&v40);
        uint64_t v32 = v41;
        uint64_t v33 = v42;
        sub_100012ED8(&v40, v41);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v33 + 8) + 8LL) + 32LL))(v32);
        LOBYTE(v32) = static UUID.== infix(_:_:)(v6, v30);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        if ((v32 & 1) != 0) {
          break;
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v40);
        v31 += 40LL;
        if (!--v29) {
          goto LABEL_9;
        }
      }

      sub_100012EC0(&v40, v37);
    }

    else
    {
LABEL_9:
      uint64_t v34 = (_OWORD *)v37;
      *(void *)(v37 + 32) = 0LL;
      *uint64_t v34 = 0u;
      v34[1] = 0u;
    }

    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_100504F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v36 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v32 - v11;
  unsigned int v34 = static os_log_type_t.info.getter(v10);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v13 = qword_100A2B018;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v16 = UUID.uuidString.getter(v15);
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_1000226F4();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v13, "ownedBeaconRecord(for uuid: %@)", 31LL, 2LL, v15);
  uint64_t v19 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v19);
  uint64_t v20 = v35;
  (*(void (**)(char *, void, uint64_t))(v35 + 104))( v9,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v6);
  uint64_t v21 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(vswift_weakDestroy(v0 + 16) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v21);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v20 + 8);
  v22(v9, v6);
  uint64_t v23 = ((uint64_t (*)(char *, uint64_t))v22)(v12, v6);
  if ((v16 & 1) != 0)
  {
    uint64_t v24 = static os_log_type_t.default.getter(v23);
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_100A2B018,  "ownedBeaconRecord call failed because in device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v33, 1LL, 1LL, v3);
  }

  else
  {
    uint64_t v26 = sub_100506C30();
    uint64_t v27 = *((void *)v26 + 2);
    uint64_t v28 = v36;
    if (v27)
    {
      uint64_t v29 = (uint64_t)&v26[(*(unsigned __int8 *)(v36 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80)];
      uint64_t v30 = *(void *)(v36 + 72);
      while (1)
      {
        sub_10001DC4C(v29, (uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
        sub_100018C68((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
        v29 += v30;
        if (!--v27) {
          goto LABEL_9;
        }
      }

      uint64_t v31 = v33;
      sub_10002218C((uint64_t)v5, v33, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v31, 0LL, 1LL, v3);
    }

    else
    {
LABEL_9:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v33, 1LL, 1LL, v3);
    }

    return swift_bridgeObjectRelease();
  }

void *sub_10050524C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2AC98);
  sub_10001736C(a1, a2);
  uint64_t v18 = sub_10001736C(a1, a2);
  uint64_t v43 = v17;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    __int128 v40 = v10;
    uint64_t v41 = v7;
    uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v39 = swift_slowAlloc(32LL, -1LL);
    v45[0] = v39;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v22 = sub_10001736C(a1, a2);
    static String.Encoding.utf8.getter(v22);
    uint64_t v23 = String.init(data:encoding:)(a1, a2, v15);
    uint64_t v42 = v3;
    if (!v24) {
      uint64_t v23 = Data.hexString.getter(a1, a2);
    }
    uint64_t v25 = v23;
    unint64_t v26 = v24;
    sub_100016F9C(a1, a2);
    uint64_t v44 = sub_1003F11D4(v25, v26, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    sub_100016F9C(a1, a2);
    sub_100016F9C(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "ownedBeaconGroups(serialNumber: %s", v21, 0xCu);
    uint64_t v27 = v39;
    swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    uint64_t v7 = v41;
    uint64_t v10 = v40;
  }

  else
  {
    sub_100016F9C(a1, a2);
    sub_100016F9C(a1, a2);
  }

  static SystemInfo.lockState.getter(v28);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v10,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v6);
  uint64_t v29 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v29);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v7 + 8);
  v31(v10, v6);
  uint64_t v32 = ((uint64_t (*)(char *, uint64_t))v31)(v12, v6);
  if ((v30 & 1) != 0)
  {
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "ownedBeaconGroup call failed because in device is in beforeFirstUnlock state",  v35,  2u);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    return _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v37 = sub_100506C30();
    sub_10001736C(a1, a2);
    uint64_t v36 = sub_10054EF94((uint64_t)v37, a1, a2);
    sub_100016F9C(a1, a2);
    swift_bridgeObjectRelease();
  }

  return v36;
}

uint64_t sub_100505638@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v135 = a2;
  uint64_t v119 = type metadata accessor for URL(0LL);
  uint64_t v118 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v117 = (char *)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_1009AE600);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v140 = (char *)&v114 - v8;
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v129 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v114 - v12;
  uint64_t v116 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  uint64_t v14 = __chkstk_darwin(v116);
  uint64_t v121 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v122 = (uint64_t)&v114 - v17;
  __chkstk_darwin(v16);
  uint64_t v124 = (uint64_t)&v114 - v18;
  uint64_t v145 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v139 = *(void *)(v145 - 8);
  uint64_t v19 = __chkstk_darwin(v145);
  uint64_t v120 = (uint64_t)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v141 = (char *)&v114 - v22;
  __chkstk_darwin(v21);
  uint64_t v131 = (uint64_t)&v114 - v23;
  uint64_t v24 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v134 = *(void **)(v24 - 8);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v142 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  unsigned __int8 v132 = (char *)&v114 - v27;
  uint64_t v144 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v144 - 8);
  uint64_t v29 = __chkstk_darwin(v144);
  uint64_t v31 = (char *)&v114 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v137 = (char *)&v114 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v133 = (char *)&v114 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v126 = (char *)&v114 - v37;
  __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v114 - v38;
  v40._countAndFlagsBits = 0xD00000000000001ELL;
  v40._object = (void *)0x8000000100867CE0LL;
  prohibitAsyncContext(functionName:)(v40);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v41 = type metadata accessor for Logger(0LL);
  uint64_t v42 = sub_10000A720(v41, (uint64_t)qword_100A2AC98);
  uint64_t v43 = *(void (**)(char *, void *, uint64_t))(v28 + 16);
  uint64_t v143 = a1;
  uint64_t v136 = v43;
  uint64_t v44 = ((uint64_t (*)(char *, void *, uint64_t))v43)(v39, a1, v144);
  uint64_t v125 = v42;
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.info.getter(v45);
  BOOL v47 = os_log_type_enabled(v45, v46);
  uint64_t v128 = v7;
  id v127 = v31;
  if (v47)
  {
    uint64_t v48 = swift_slowAlloc(22LL, -1LL);
    uint64_t v115 = swift_slowAlloc(32LL, -1LL);
    uint64_t v148 = v115;
    *(_DWORD *)uint64_t v48 = 141558275;
    uint64_t v146 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v48 + 4, v48 + 12);
    *(_WORD *)(v48 + 12) = 2081;
    uint64_t v138 = (void (*)(char *, uint64_t))(v48 + 14);
    uint64_t v49 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v50 = v144;
    uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v144, v49);
    uint64_t v146 = sub_1003F11D4(v51, v52, &v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v138, v48 + 22);
    swift_bridgeObjectRelease();
    uint64_t v138 = *(void (**)(char *, uint64_t))(v28 + 8);
    v138(v39, v50);
    _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "legacySharedBeaconRecord(for uuid: %{private,mask.hash}s",  (uint8_t *)v48,  0x16u);
    uint64_t v53 = v115;
    swift_arrayDestroy(v115, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {
    uint64_t v138 = *(void (**)(char *, uint64_t))(v28 + 8);
    v138(v39, v144);
  }

  uint64_t v54 = v28;
  uint64_t v55 = v132;
  static SystemInfo.lockState.getter(v56);
  uint64_t v57 = v134;
  uint64_t v58 = v142;
  ((void (*)(char *, void, uint64_t))v134[13])( v142,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v24);
  uint64_t v59 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v60 = dispatch thunk of static Equatable.== infix(_:_:)(v55, v58, v24, v59);
  uint64_t v61 = (void (*)(char *, uint64_t))v57[1];
  v61(v58, v24);
  uint64_t v62 = ((uint64_t (*)(char *, uint64_t))v61)(v55, v24);
  uint64_t v63 = v133;
  if ((v60 & 1) != 0)
  {
    uint64_t v64 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v65 = static os_log_type_t.error.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "legacySharedBeaconRecord call failed because in device is in beforeFirstUnlock state",  v66,  2u);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56))(v135, 1LL, 1LL, v145);
  }

  uint64_t v134 = sub_1005073E4();
  uint64_t v68 = v134[2];
  uint64_t v69 = v145;
  uint64_t v70 = (uint64_t)v140;
  uint64_t v71 = (uint64_t)v141;
  uint64_t v72 = v126;
  if (!v68)
  {
LABEL_20:
    uint64_t v84 = v54;
    uint64_t v85 = v139;
    uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
    uint64_t v87 = v124;
    v86(v124, 1LL, 1LL, v69);
    goto LABEL_23;
  }

  uint64_t v73 = (uint64_t)v134 + ((*(unsigned __int8 *)(v139 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80));
  uint64_t v142 = *(char **)(v139 + 72);
  uint64_t v123 = v54;
  while (1)
  {
    sub_10001DC4C(v73, v71, type metadata accessor for SharedBeaconRecord);
    sub_10001581C(v71 + *(int *)(v69 + 80), v70, &qword_1009AE600);
    uint64_t v74 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 48LL))(v70, 1LL, v74) == 1)
    {
      sub_100015794(v70, &qword_1009AE600);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v13, 1LL, 1LL, v144);
LABEL_13:
      sub_100015794((uint64_t)v13, &qword_10099D8A0);
      goto LABEL_14;
    }

    sub_10001581C(v70 + *(int *)(v74 + 20), (uint64_t)v13, &qword_10099D8A0);
    sub_100018C68(v70, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    uint64_t v75 = v144;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v72, v13, v144);
    BOOL v76 = v143;
    char v77 = static UUID.== infix(_:_:)(v71 + *(int *)(v145 + 20), v143);
    uint64_t v78 = v136;
    v136(v63, v72, v75);
    uint64_t v79 = v72;
    uint64_t v80 = v63;
    int v81 = v137;
    v78(v137, v76, v75);
    if ((v77 & 1) != 0) {
      break;
    }
    char v82 = static UUID.== infix(_:_:)(v80, v81);
    uint64_t v83 = v138;
    v138(v81, v75);
    v83(v80, v75);
    v83(v79, v75);
    uint64_t v54 = v123;
    uint64_t v63 = v80;
    uint64_t v72 = v79;
    uint64_t v70 = (uint64_t)v140;
    uint64_t v71 = (uint64_t)v141;
    if ((v82 & 1) != 0) {
      goto LABEL_22;
    }
LABEL_14:
    sub_100018C68(v71, type metadata accessor for SharedBeaconRecord);
    v73 += (uint64_t)v142;
    --v68;
    uint64_t v69 = v145;
    if (!v68) {
      goto LABEL_20;
    }
  }

  uint64_t v88 = v138;
  v138(v81, v75);
  v88(v80, v75);
  v88(v79, v75);
  uint64_t v54 = v123;
  uint64_t v71 = (uint64_t)v141;
LABEL_22:
  uint64_t v84 = v54;
  uint64_t v87 = v124;
  sub_10002218C(v71, v124, type metadata accessor for SharedBeaconRecord);
  uint64_t v85 = v139;
  uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
  uint64_t v69 = v145;
  v86(v87, 0LL, 1LL, v145);
LABEL_23:
  swift_bridgeObjectRelease();
  uint64_t v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  BOOL v90 = v89(v87, 1LL, v69) == 1;
  uint64_t v91 = v131;
  uint64_t v92 = v87;
  uint64_t v94 = (uint64_t)v128;
  uint64_t v93 = (uint64_t)v129;
  uint64_t v95 = v127;
  if (!v90)
  {
    sub_10002218C(v92, v131, type metadata accessor for SharedBeaconRecord);
    sub_10001581C(v91 + *(int *)(v69 + 80), v94, &qword_1009AE600);
    uint64_t v96 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
    int v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 48LL))(v94, 1LL, v96);
    if (v97 == 1)
    {
      sub_100015794(v94, &qword_1009AE600);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v93, 1LL, 1LL, v144);
      uint64_t v98 = (uint64_t)v121;
      goto LABEL_29;
    }

    sub_10001581C(v94 + *(int *)(v96 + 20), v93, &qword_10099D8A0);
    sub_100018C68(v94, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    int v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v93, 1LL, v144);
    uint64_t v98 = (uint64_t)v121;
    if (v99 == 1)
    {
LABEL_29:
      sub_100015794(v93, &qword_10099D8A0);
      uint64_t v100 = v122;
      sub_10001DC4C(v91, v122, type metadata accessor for SharedBeaconRecord);
      v86(v100, 0LL, 1LL, v69);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v84 + 32))(v95, v93, v144);
      uint64_t v101 = *(void *)(v130 + 136);
      if (qword_10099B9E8 != -1) {
        swift_once(&qword_10099B9E8, sub_100763874);
      }
      uint64_t v102 = v119;
      uint64_t v103 = sub_10000A720(v119, (uint64_t)qword_100A2B738);
      uint64_t v104 = v118;
      uint64_t v105 = v117;
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v117, v103, v102);
      v106._object = (void *)0x800000010085B040LL;
      v106._countAndFlagsBits = 0xD000000000000014LL;
      prohibitAsyncContext(functionName:)(v106);
      uint64_t v148 = v69;
      uint64_t v107 = sub_100004AEC(&qword_1009B2AA0);
      uint64_t v108 = String.init<A>(describing:)(&v148, v107);
      uint64_t v110 = v109;
      unint64_t v111 = objc_autoreleasePoolPush();
      uint64_t v142 = (char *)&v114;
      uint64_t v143 = v111;
      __chkstk_darwin(v111);
      *(&v114 - 6) = v101;
      *(&v114 - 5) = (uint64_t)v95;
      *(&v114 - 4) = (uint64_t)v105;
      *(&v114 - 3) = v108;
      *(&v114 - 2) = v110;
      uint64_t v100 = v122;
      OS_dispatch_queue.sync<A>(execute:)(sub_100571820, &v114 - 8, v116);
      uint64_t v69 = v145;
      objc_autoreleasePoolPop(v143);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v102);
      v138(v95, v144);
      uint64_t v98 = (uint64_t)v121;
      uint64_t v91 = v131;
    }

    sub_10001581C(v100, v98, (uint64_t *)&unk_1009AE470);
    if (v89(v98, 1LL, v69) == 1)
    {
      sub_100018C68(v91, type metadata accessor for SharedBeaconRecord);
      sub_100015794(v98, (uint64_t *)&unk_1009AE470);
      return sub_100015750(v100, v135, (uint64_t *)&unk_1009AE470);
    }

    uint64_t v112 = v120;
    sub_10002218C(v98, v120, type metadata accessor for SharedBeaconRecord);
    int v113 = *(unsigned __int8 *)(v112 + *(int *)(v69 + 64));
    sub_100018C68(v112, type metadata accessor for SharedBeaconRecord);
    uint64_t v100 = v122;
    sub_100018C68(v91, type metadata accessor for SharedBeaconRecord);
    if (v113 == 1) {
      return sub_100015750(v100, v135, (uint64_t *)&unk_1009AE470);
    }
    uint64_t v92 = v100;
  }

  sub_100015794(v92, (uint64_t *)&unk_1009AE470);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v86)(v135, 1LL, 1LL, v69);
}

uint64_t sub_100506334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v3 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v57 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v53 = (char *)&v47 - v9;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2AC98);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v56 = a1;
  uint64_t v17 = v16(v13, a1, v10);
  uint64_t v51 = v15;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.info.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v49 = v21;
    *(_DWORD *)uint64_t v20 = 141558275;
    uint64_t v58 = 1752392040LL;
    uint64_t v59 = v21;
    uint64_t v50 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    uint64_t v48 = v20 + 14;
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v10, v22);
    uint64_t v58 = sub_1003F11D4(v23, v24, &v59);
    uint64_t v3 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v48, v20 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "sharedBeaconRecord(for uuid: %{private,mask.hash}s",  (uint8_t *)v20,  0x16u);
    uint64_t v25 = v49;
    swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  uint64_t v26 = v53;
  static SystemInfo.lockState.getter(v27);
  uint64_t v29 = v54;
  uint64_t v28 = v55;
  (*(void (**)(char *, void, uint64_t))(v55 + 104))( v54,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v6);
  uint64_t v30 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)(v26, v29, v6, v30);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v28 + 8);
  v32(v29, v6);
  uint64_t v33 = ((uint64_t (*)(char *, uint64_t))v32)(v26, v6);
  uint64_t v34 = v56;
  if ((v31 & 1) != 0)
  {
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v36 = static os_log_type_t.error.getter(v35);
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = v57;
    if (v37)
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "sharedBeaconRecord call failed because in device is in beforeFirstUnlock state",  v39,  2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v52, 1LL, 1LL, v3);
  }

  else
  {
    uint64_t v41 = sub_1005073E4();
    uint64_t v42 = v41[2];
    uint64_t v43 = v57;
    if (v42)
    {
      uint64_t v44 = (uint64_t)v41 + ((*(unsigned __int8 *)(v57 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80));
      uint64_t v45 = *(void *)(v57 + 72);
      while (1)
      {
        sub_10001DC4C(v44, (uint64_t)v5, type metadata accessor for SharedBeaconRecord);
        sub_100018C68((uint64_t)v5, type metadata accessor for SharedBeaconRecord);
        v44 += v45;
        if (!--v42) {
          goto LABEL_14;
        }
      }

      uint64_t v46 = v52;
      sub_10002218C((uint64_t)v5, v52, type metadata accessor for SharedBeaconRecord);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v46, 0LL, 1LL, v3);
    }

    else
    {
LABEL_14:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v52, 1LL, 1LL, v3);
    }

    return swift_bridgeObjectRelease();
  }

void *sub_1005067E8()
{
  uint64_t v0 = sub_100004AEC(&qword_1009B53F0);
  __chkstk_darwin(v0);
  uint64_t v2 = (void *)((char *)v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v3 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100626750(v2);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3) == 1)
  {
    uint64_t v7 = sub_100015794((uint64_t)v2, &qword_1009B53F0);
    uint64_t v8 = static os_log_type_t.error.getter(v7);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v9 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  qword_100A2B008,  "Local beaconing record Stable Identifier not found.",  51LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {
    sub_10002218C((uint64_t)v2, (uint64_t)v6, type metadata accessor for StableIdentifier);
    uint64_t v10 = objc_autoreleasePoolPush();
    uint64_t v11 = sub_100506C30();
    __chkstk_darwin(v11);
    v14[-2] = v6;
    v14[0] = sub_100023858((uint64_t (*)(char *))sub_10056B758, &v14[-4], v12);
    swift_bridgeObjectRetain(v14[0]);
    sub_1004ED708(v14);
    swift_bridgeObjectRelease();
    uint64_t v9 = (void *)v14[0];
    objc_autoreleasePoolPop(v10);
    sub_100018C68((uint64_t)v6, type metadata accessor for StableIdentifier);
  }

  return v9;
}

void *sub_1005069CC()
{
  uint64_t v0 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (void *)((char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v3 = [objc_allocWithZone(ACAccountStore) init];
  id v4 = objc_msgSend(v3, "aa_primaryAppleAccount");

  if (!v4) {
    goto LABEL_8;
  }
  id v5 = objc_msgSend(v4, "aa_altDSID");
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unint64_t v9 = v8;

    uint64_t v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000LL) == 0) {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      *uint64_t v2 = v7;
      v2[1] = v9;
      swift_storeEnumTagMultiPayload(v2, v0, 4LL);
      uint64_t v11 = objc_autoreleasePoolPush();
      uint64_t v12 = sub_100506C30();
      __chkstk_darwin(v12);
      v21[-2] = v2;
      v21[0] = sub_100023858((uint64_t (*)(char *))sub_10056B758, &v21[-4], v13);
      swift_bridgeObjectRetain(v21[0]);
      sub_1004ED708(v21);
      swift_bridgeObjectRelease();
      uint64_t v14 = v21[0];
      objc_autoreleasePoolPop(v11);

      sub_100018C68((uint64_t)v2, type metadata accessor for StableIdentifier);
      return (void *)v14;
    }

    swift_bridgeObjectRelease();
LABEL_8:
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AE08);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Could not obtain aa_primaryAppleAccount!", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    return _swiftEmptyArrayStorage;
  }

  __break(1u);
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

char *sub_100506C30()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A7E78);
  __chkstk_darwin(v2);
  uint64_t v61 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = sub_100004AEC(&qword_1009B2AF0);
  uint64_t v63 = *(void *)(v65 - 8);
  uint64_t v4 = __chkstk_darwin(v65);
  char v60 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v62 = (uint64_t)&v55 - v6;
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v66 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v59 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v55 - v11;
  __chkstk_darwin(v10);
  uint64_t v67 = (char *)&v55 - v13;
  uint64_t v14 = sub_100004AEC(&qword_1009B2AF8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v64 = (uint64_t)&v55 - v18;
  uint64_t v19 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v55 - v24;
  v26._object = (void *)0x8000000100867BD0LL;
  v26._countAndFlagsBits = 0xD000000000000012LL;
  prohibitAsyncContext(functionName:)(v26);
  static SystemInfo.lockState.getter(v27);
  (*(void (**)(char *, void, uint64_t))(v20 + 104))( v23,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v19);
  uint64_t v28 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v69, v19, v28);
  dispatch thunk of RawRepresentable.rawValue.getter(&v68, v19, v28);
  uint64_t v30 = v68;
  uint64_t v29 = v69;
  char v31 = *(void (**)(char *, uint64_t))(v20 + 8);
  v31(v23, v19);
  uint64_t v32 = ((uint64_t (*)(char *, uint64_t))v31)(v25, v19);
  if (v29 == v30)
  {
    uint64_t v33 = static os_log_type_t.default.getter(v32);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v34 = (char *)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v33,  &_mh_execute_header,  qword_100A2B018,  "ownedBeaconRecords call failed because in device is in beforeFirstUnlock state",  78LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v35 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer);
    sub_100004AEC(&qword_1009B2B00);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_10056B5EC);
    uint64_t v34 = (char *)v69;
    if (!v69)
    {
      uint64_t v57 = 0LL;
      uint64_t v58 = v35;
      uint64_t v36 = *(void *)(v1 + 136);
      uint64_t v56 = v1;
      if (qword_10099B610 != -1) {
        swift_once(&qword_10099B610, sub_1005D3C50);
      }
      uint64_t v37 = sub_10000A720(v7, (uint64_t)qword_100A2AE80);
      uint64_t v38 = v67;
      uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      v39(v67, v37, v7);
      v39(v12, (uint64_t)v38, v7);
      uint64_t v40 = v65;
      uint64_t v41 = (uint64_t)v60;
      uint64_t v55 = &v60[*(int *)(v65 + 40)];
      uint64_t v42 = (uint64_t)v55;
      uint64_t v43 = type metadata accessor for DirectorySequence(0LL);
      uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL);
      v44(v42, 1LL, 1LL, v43);
      v39((char *)v41, (uint64_t)v12, v7);
      *(void *)(v41 + *(int *)(v40 + 36)) = v36;
      uint64_t v45 = v59;
      v39(v59, (uint64_t)v12, v7);
      swift_retain();
      uint64_t v46 = (uint64_t)v61;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v45, 0LL, 0LL);
      uint64_t v47 = *(void (**)(char *, uint64_t))(v66 + 8);
      v47(v12, v7);
      v44(v46, 0LL, 1LL, v43);
      sub_1000D4D50(v46, (uint64_t)v55, &qword_1009A7E78);
      uint64_t v48 = v62;
      sub_100015750(v41, v62, &qword_1009B2AF0);
      uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56);
      v49(v17, 1LL, 1LL, v40);
      sub_100015794((uint64_t)v17, &qword_1009B2B08);
      sub_100015750(v48, (uint64_t)v17, &qword_1009B2AF0);
      v49(v17, 0LL, 1LL, v40);
      uint64_t v50 = v64;
      sub_100015750((uint64_t)v17, v64, &qword_1009B2AF8);
      v47(v67, v7);
      sub_10001581C(v50, (uint64_t)v17, &qword_1009B2AF8);
      uint64_t v51 = v56;
      swift_retain();
      sub_10054D260((uint64_t)v17, v51);
      uint64_t v34 = v52;
      uint64_t v53 = swift_release(v51);
      __chkstk_darwin(v53);
      *(&v55 - 2) = (char *)v51;
      *(&v55 - 1) = v34;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_10056B610);
      sub_100015794(v50, &qword_1009B2AF8);
    }
  }

  return v34;
}

uint64_t sub_1005071E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v8 = sub_1006DDC00();
  if ((v8 & 1) == 0) {
    return 1LL;
  }
  uint64_t v9 = a1 + *(int *)(v7 + 20);
  __chkstk_darwin(v8);
  *(&v22 - 2) = a2;
  *(&v22 - 1) = v9;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10015471C);
  uint64_t v10 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v11 = 1LL;
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v6, 1LL, v10);
  uint64_t v13 = sub_100015794((uint64_t)v6, &qword_1009AE490);
  if (v12 == 1)
  {
    uint64_t v14 = static os_log_type_t.info.getter(v13);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v15 = qword_100A2B018;
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
    *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v18 = UUID.uuidString.getter(v17);
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_1000226F4();
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  v15,  "Filtering out OwnedBeaconRecord for %@ since associated BeaconNamingRecord is missing.",  86LL,  2LL,  v17);
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v11;
}

void *sub_1005073E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A7E78);
  __chkstk_darwin(v2);
  uint64_t v64 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_1009A8E80);
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v63 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v65 = (uint64_t)&v57 - v7;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v68 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v61 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v57 - v12;
  __chkstk_darwin(v11);
  uint64_t v69 = (char *)&v57 - v14;
  uint64_t v15 = sub_100004AEC(&qword_1009A8E88);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v62 = (uint64_t)&v57 - v19;
  uint64_t v20 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  Swift::String v26 = (char *)&v57 - v25;
  v27._object = (void *)0x8000000100867BB0LL;
  v27._countAndFlagsBits = 0xD000000000000013LL;
  prohibitAsyncContext(functionName:)(v27);
  static SystemInfo.lockState.getter(v28);
  (*(void (**)(char *, void, uint64_t))(v21 + 104))( v24,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v20);
  uint64_t v29 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v71, v20, v29);
  dispatch thunk of RawRepresentable.rawValue.getter(&v70, v20, v29);
  char v31 = v70;
  uint64_t v30 = v71;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v21 + 8);
  v32(v24, v20);
  v32(v26, v20);
  if (v30 == v31)
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = sub_10000A720(v33, (uint64_t)qword_100A2AC98);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "sharedBeaconRecords call failed because in device is in beforeFirstUnlock state",  v37,  2u);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    return _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v39 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer);
    sub_100004AEC(&qword_1009B2AE8);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_10056B5B0);
    uint64_t result = v71;
    if (!v71)
    {
      uint64_t v59 = 0LL;
      uint64_t v60 = v39;
      uint64_t v40 = *(void *)(v1 + 136);
      uint64_t v58 = v1;
      if (qword_10099B9E8 != -1) {
        swift_once(&qword_10099B9E8, sub_100763874);
      }
      uint64_t v41 = sub_10000A720(v8, (uint64_t)qword_100A2B738);
      uint64_t v42 = v69;
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
      v43(v69, v41, v8);
      v43(v13, (uint64_t)v42, v8);
      uint64_t v44 = v67;
      uint64_t v45 = (uint64_t)v63;
      uint64_t v57 = &v63[*(int *)(v67 + 40)];
      uint64_t v46 = (uint64_t)v57;
      uint64_t v47 = type metadata accessor for DirectorySequence(0LL);
      uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL);
      v48(v46, 1LL, 1LL, v47);
      v43((char *)v45, (uint64_t)v13, v8);
      *(void *)(v45 + *(int *)(v44 + 36)) = v40;
      uint64_t v49 = v61;
      v43(v61, (uint64_t)v13, v8);
      swift_retain();
      uint64_t v50 = (uint64_t)v64;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v49, 0LL, 0LL);
      uint64_t v51 = *(void (**)(char *, uint64_t))(v68 + 8);
      v51(v13, v8);
      v48(v50, 0LL, 1LL, v47);
      sub_1000D4D50(v50, (uint64_t)v57, &qword_1009A7E78);
      uint64_t v52 = v65;
      sub_100015750(v45, v65, &qword_1009A8E80);
      uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56);
      v53(v18, 1LL, 1LL, v44);
      sub_100015794((uint64_t)v18, &qword_1009A8E78);
      sub_100015750(v52, (uint64_t)v18, &qword_1009A8E80);
      v53(v18, 0LL, 1LL, v44);
      uint64_t v54 = v62;
      sub_100015750((uint64_t)v18, v62, &qword_1009A8E88);
      v51(v69, v8);
      uint64_t v55 = sub_1002FF474(v54);
      uint64_t v56 = sub_100015794(v54, &qword_1009A8E88);
      __chkstk_darwin(v56);
      *(&v57 - 2) = (char *)v58;
      *(&v57 - 1) = (char *)v55;
      sub_100004AEC(&qword_1009A6098);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_10056B5D4);
      swift_release(v55);
      return v71;
    }
  }

  return result;
}

uint64_t sub_1005079D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v123 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v121 = (uint64_t *)((char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = sub_100004AEC(&qword_1009AE600);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v125 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v129 = (char *)&v119 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v126 = (char *)&v119 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v131 = (char *)&v119 - v18;
  __chkstk_darwin(v17);
  unsigned __int8 v132 = (char *)&v119 - v19;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v142 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v128 = (char *)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v143 = (uint64_t)&v119 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v130 = (char *)&v119 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  unint64_t v140 = (unint64_t)&v119 - v28;
  __chkstk_darwin(v27);
  uint64_t v145 = (char *)&v119 - v29;
  uint64_t v147 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v30 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v32 = (char *)&v119 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = a1;
  uint64_t v33 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper);
  uint64_t v135 = (uint64_t *)(v33 + 16);
  swift_beginAccess(v33 + 16, v150, 1LL, 0LL);
  *(void *)(v33 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  uint64_t v134 = (uint64_t *)(v33 + 24);
  swift_beginAccess(v33 + 24, v149, 1LL, 0LL);
  *(void *)(v33 + swift_unknownObjectUnownedDestroy(v0 + 24) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  uint64_t v34 = *(char **)(a2 + 16);
  if (v34)
  {
    uint64_t v120 = a3;
    uint64_t v35 = a2 + ((*(unsigned __int8 *)(v30 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    uint64_t v146 = *(void *)(v30 + 72);
    uint64_t v119 = a2;
    swift_bridgeObjectRetain(a2);
    uint64_t v36 = (uint64_t)v132;
    uint64_t v37 = (void *)v142;
    id v127 = v9;
    uint64_t v133 = v32;
    while (1)
    {
      sub_10001DC4C(v35, (uint64_t)v32, type metadata accessor for SharedBeaconRecord);
      sub_10001581C((uint64_t)&v32[*(int *)(v147 + 80)], (uint64_t)v9, &qword_1009AE600);
      uint64_t v38 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
      sub_10001581C((uint64_t)&v9[*(int *)(v38 + 20)], v36, &qword_10099D8A0);
      sub_100018C68((uint64_t)v9, type metadata accessor for SharedBeaconRecord.PropertyListContent);
      uint64_t v39 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v37[6];
      if (v39(v36, 1LL, v20) == 1) {
        goto LABEL_4;
      }
      uint64_t v139 = v34;
      uint64_t v40 = v39;
      uint64_t v41 = v32;
      uint64_t v42 = (void (*)(char *, uint64_t, uint64_t))v37[4];
      uint64_t v43 = v145;
      v42(v145, v36, v20);
      uint64_t v44 = (void (*)(uint64_t))v37[2];
      uint64_t v45 = v140;
      uint64_t v137 = &v41[*(int *)(v147 + 20)];
      v44(v140);
      uint64_t v46 = (uint64_t)v131;
      uint64_t v141 = (void (*)(unint64_t, uint64_t, uint64_t))v44;
      ((void (*)(char *, char *, uint64_t))v44)(v131, v43, v20);
      uint64_t v144 = (void (*)(uint64_t, void, uint64_t, uint64_t))v37[7];
      v144(v46, 0LL, 1LL, v20);
      uint64_t v47 = v135;
      swift_beginAccess(v135, v148, 33LL, 0LL);
      uint64_t v138 = v40;
      unsigned int v48 = v40(v46, 1LL, v20);
      uint64_t v136 = (void (*)(unint64_t, char *, uint64_t))v42;
      if (v48 == 1)
      {
        sub_100015794(v46, &qword_10099D8A0);
        swift_bridgeObjectRetain(*v47);
        unint64_t v49 = sub_10030D124(v45);
        char v51 = v50;
        swift_bridgeObjectRelease();
        if ((v51 & 1) != 0)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v47);
          uint64_t v53 = (void *)*v47;
          uint64_t v151 = (void *)*v47;
          *uint64_t v47 = 0x8000000000000000LL;
          uint64_t v9 = v127;
          uint64_t v34 = v139;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100063260();
            uint64_t v53 = v151;
          }

          unint64_t v54 = *(void *)(v142 + 72) * v49;
          uint64_t v55 = *(void (**)(unint64_t, uint64_t))(v142 + 8);
          v55(v53[6] + v54, v20);
          uint64_t v56 = (uint64_t)v151;
          unint64_t v57 = v151[7] + v54;
          uint64_t v58 = (uint64_t)v126;
          v42(v126, v57, v20);
          sub_100058DE4(v49, v56);
          *uint64_t v135 = v56;
          swift_bridgeObjectRelease();
          v144(v58, 0LL, 1LL, v20);
          uint64_t v32 = v133;
        }

        else
        {
          uint64_t v58 = (uint64_t)v126;
          v144((uint64_t)v126, 1LL, 1LL, v20);
          uint64_t v55 = *(void (**)(unint64_t, uint64_t))(v142 + 8);
          uint64_t v9 = v127;
          uint64_t v32 = v133;
          uint64_t v34 = v139;
        }

        uint64_t v139 = (char *)v55;
        v55(v140, v20);
        sub_100015794(v58, &qword_10099D8A0);
      }

      else
      {
        v42(v130, v46, v20);
        uint64_t v59 = swift_isUniquelyReferenced_nonNull_native(*v47);
        uint64_t v151 = (void *)*v47;
        uint64_t v60 = v151;
        *uint64_t v47 = 0x8000000000000000LL;
        unint64_t v62 = sub_10030D124(v45);
        uint64_t v63 = v60[2];
        BOOL v64 = (v61 & 1) == 0;
        uint64_t v65 = v63 + v64;
        if (__OFADD__(v63, v64))
        {
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
          __break(1u);
          return result;
        }

        char v66 = v61;
        if (v60[3] >= v65)
        {
          uint64_t v9 = v127;
          uint64_t v32 = v133;
          uint64_t v34 = v139;
          if ((v59 & 1) == 0) {
            sub_100063260();
          }
        }

        else
        {
          sub_10004C52C(v65, v59);
          unint64_t v67 = sub_10030D124(v140);
          uint64_t v9 = v127;
          uint64_t v32 = v133;
          uint64_t v34 = v139;
          if ((v66 & 1) != (v68 & 1)) {
            goto LABEL_53;
          }
          unint64_t v62 = v67;
        }

        uint64_t v69 = v142;
        uint64_t v70 = v151;
        if ((v66 & 1) != 0)
        {
          (*(void (**)(unint64_t, char *, uint64_t))(v142 + 40))( v151[7] + *(void *)(v142 + 72) * v62,  v130,  v20);
          uint64_t v71 = v140;
        }

        else
        {
          v151[(v62 >> 6) + 8] |= 1LL << v62;
          unint64_t v72 = *(void *)(v69 + 72) * v62;
          uint64_t v71 = v140;
          v141(v70[6] + v72, v140, v20);
          v136(v70[7] + v72, v130, v20);
          uint64_t v73 = v70[2];
          BOOL v74 = __OFADD__(v73, 1LL);
          uint64_t v75 = v73 + 1;
          if (v74) {
            goto LABEL_50;
          }
          v70[2] = v75;
        }

        *uint64_t v135 = (uint64_t)v151;
        swift_bridgeObjectRelease();
        uint64_t v139 = *(char **)(v69 + 8);
        ((void (*)(uint64_t, uint64_t))v139)(v71, v20);
      }

      uint64_t v76 = (uint64_t)v129;
      uint64_t v77 = v143;
      uint64_t v78 = v134;
      swift_endAccess(v148);
      uint64_t v79 = (void (*)(uint64_t, char *, uint64_t))v141;
      v141(v77, (uint64_t)v145, v20);
      v79(v76, v137, v20);
      v144(v76, 0LL, 1LL, v20);
      swift_beginAccess(v78, v148, 33LL, 0LL);
      if (v138(v76, 1LL, v20) == 1)
      {
        sub_100015794(v76, &qword_10099D8A0);
        uint64_t v80 = v78;
        swift_bridgeObjectRetain(*v78);
        unint64_t v81 = sub_10030D124(v77);
        char v83 = v82;
        swift_bridgeObjectRelease();
        if ((v83 & 1) != 0)
        {
          unint64_t v84 = v81;
          int v85 = swift_isUniquelyReferenced_nonNull_native(*v78);
          uint64_t v86 = (void *)*v78;
          uint64_t v151 = (void *)*v78;
          *uint64_t v78 = 0x8000000000000000LL;
          uint64_t v87 = v139;
          if (!v85)
          {
            sub_100063260();
            uint64_t v86 = v151;
          }

          uint64_t v88 = v86[6];
          uint64_t v89 = *(void *)(v142 + 72);
          uint64_t v141 = (void (*)(unint64_t, uint64_t, uint64_t))v84;
          unint64_t v90 = v89 * v84;
          ((void (*)(unint64_t, uint64_t))v87)(v88 + v90, v20);
          uint64_t v91 = (uint64_t)v151;
          unint64_t v92 = v151[7] + v90;
          uint64_t v93 = (uint64_t)v125;
          v136((unint64_t)v125, (char *)v92, v20);
          sub_100058DE4((int64_t)v141, v91);
          uint64_t *v80 = v91;
          swift_bridgeObjectRelease();
          uint64_t v94 = 0LL;
        }

        else
        {
          uint64_t v94 = 1LL;
          uint64_t v93 = (uint64_t)v125;
          uint64_t v87 = v139;
        }

        v144(v93, v94, 1LL, v20);
        ((void (*)(uint64_t, uint64_t))v87)(v143, v20);
        sub_100015794(v93, &qword_10099D8A0);
        uint64_t v36 = (uint64_t)v132;
        uint64_t v37 = (void *)v142;
      }

      else
      {
        uint64_t v95 = v136;
        v136((unint64_t)v128, (char *)v76, v20);
        uint64_t v96 = swift_isUniquelyReferenced_nonNull_native(*v78);
        int v97 = v78;
        uint64_t v98 = (void *)*v78;
        uint64_t v151 = v98;
        *int v97 = 0x8000000000000000LL;
        unint64_t v100 = sub_10030D124(v77);
        uint64_t v101 = v98[2];
        BOOL v102 = (v99 & 1) == 0;
        uint64_t v103 = v101 + v102;
        if (__OFADD__(v101, v102)) {
          goto LABEL_49;
        }
        char v104 = v99;
        if (v98[3] >= v103)
        {
          if ((v96 & 1) == 0) {
            sub_100063260();
          }
        }

        else
        {
          sub_10004C52C(v103, v96);
          unint64_t v105 = sub_10030D124(v143);
          if ((v104 & 1) != (v106 & 1)) {
            goto LABEL_53;
          }
          unint64_t v100 = v105;
        }

        uint64_t v87 = v139;
        uint64_t v107 = v151;
        if ((v104 & 1) != 0)
        {
          uint64_t v37 = (void *)v142;
          (*(void (**)(unint64_t, char *, uint64_t))(v142 + 40))( v151[7] + *(void *)(v142 + 72) * v100,  v128,  v20);
        }

        else
        {
          v151[(v100 >> 6) + 8] |= 1LL << v100;
          uint64_t v37 = (void *)v142;
          unint64_t v108 = *(void *)(v142 + 72) * v100;
          v141(v107[6] + v108, v143, v20);
          v95(v107[7] + v108, v128, v20);
          uint64_t v109 = v107[2];
          BOOL v74 = __OFADD__(v109, 1LL);
          uint64_t v110 = v109 + 1;
          if (v74) {
            goto LABEL_51;
          }
          v107[2] = v110;
        }

        *uint64_t v134 = (uint64_t)v151;
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, uint64_t))v87)(v143, v20);
        uint64_t v36 = (uint64_t)v132;
        uint64_t v32 = v133;
      }

      swift_endAccess(v148);
      ((void (*)(char *, uint64_t))v87)(v145, v20);
      sub_100018C68((uint64_t)v32, type metadata accessor for SharedBeaconRecord);
LABEL_5:
      v35 += v146;
      if (!--v34)
      {
        a2 = v119;
        swift_bridgeObjectRelease();
        a3 = v120;
        goto LABEL_46;
      }
    }

    sub_100015794((uint64_t)v9, &qword_1009AE600);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v37[7])(v36, 1LL, 1LL, v20);
LABEL_4:
    sub_100018C68((uint64_t)v32, type metadata accessor for SharedBeaconRecord);
    sub_100015794(v36, &qword_10099D8A0);
    goto LABEL_5;
  }

void *sub_100508644()
{
  uint64_t v0 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v21 - v5;
  v7._countAndFlagsBits = 0x65526E6F63616562LL;
  v7._object = (void *)0xED00007364726F63LL;
  prohibitAsyncContext(functionName:)(v7);
  static SystemInfo.lockState.getter(v8);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v4,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v0);
  uint64_t v9 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v22, v0, v9);
  dispatch thunk of RawRepresentable.rawValue.getter(&v21, v0, v9);
  uint64_t v11 = v21;
  uint64_t v10 = v22;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  uint64_t v13 = ((uint64_t (*)(char *, uint64_t))v12)(v6, v0);
  if (v10 == v11)
  {
    uint64_t v14 = static os_log_type_t.default.getter(v13);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v15 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_100A2B018,  "beaconRecords call failed because in device is in beforeFirstUnlock state",  73LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v16 = sub_100506C30();
    uint64_t v17 = sub_1004E75B0( (uint64_t)v16,  type metadata accessor for OwnedBeaconRecord,  (unint64_t *)&qword_10099D000,  (uint64_t)&unk_10080B120);
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_1005073E4();
    uint64_t v19 = sub_1004E75B0( (uint64_t)v18,  type metadata accessor for SharedBeaconRecord,  &qword_10099CFF8,  (uint64_t)&unk_10081ADAC);
    swift_bridgeObjectRelease();
    uint64_t v22 = v17;
    sub_100184098((uint64_t)v19);
    return v22;
  }

  return v15;
}

uint64_t sub_100508878@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10012B620(a1, a2);
}

uint64_t sub_1005088CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper);
  swift_beginAccess(v5 + 24, v15, 32LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 24);
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_10030D124(a2), (v8 & 1) != 0))
  {
    unint64_t v9 = v7;
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v11 = type metadata accessor for UUID(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))(a3, v10 + *(void *)(v12 + 72) * v9, v11);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a3, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v13 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(a3, 1LL, 1LL, v13);
  }

  return swift_endAccess(v15);
}

uint64_t sub_1005089B8(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v8);
  uint64_t v38 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ShareRecord(0LL);
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v40 = (uint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v32 - v13;
  uint64_t v36 = a2;
  uint64_t result = (uint64_t)sub_1005777D8();
  uint64_t v16 = result;
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v39 = *(void *)(result + 16);
  if (v39)
  {
    uint64_t v33 = v7;
    uint64_t v34 = a1;
    uint64_t v35 = v2;
    unint64_t v18 = 0LL;
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t v20 = type metadata accessor for ShareRecord;
    uint64_t v37 = result;
    while (v18 < *(void *)(v16 + 16))
    {
      uint64_t v21 = *(void *)(v41 + 72);
      unint64_t v43 = (*(unsigned __int8 *)(v41 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      sub_10001DC4C(v16 + v43 + v21 * v18, (uint64_t)v14, v20);
      uint64_t v22 = (uint64_t)&v14[*(int *)(v42 + 32)];
      uint64_t v23 = (uint64_t)v14;
      uint64_t v24 = v38;
      sub_10001581C(v22, v38, (uint64_t *)&unk_10099D720);
      uint64_t v25 = type metadata accessor for Date(0LL);
      int v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48LL))(v24, 1LL, v25);
      sub_100015794(v24, (uint64_t *)&unk_10099D720);
      if (v26 == 1)
      {
        uint64_t result = sub_100018C68(v23, v20);
        uint64_t v14 = (char *)v23;
      }

      else
      {
        uint64_t v27 = v20;
        sub_10002218C(v23, v40, v20);
        uint64_t v14 = (char *)v23;
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0) {
          sub_100032E20(0, v19[2] + 1LL, 1);
        }
        uint64_t v19 = v44;
        unint64_t v29 = v44[2];
        unint64_t v28 = v44[3];
        if (v29 >= v28 >> 1)
        {
          sub_100032E20(v28 > 1, v29 + 1, 1);
          uint64_t v19 = v44;
        }

        void v19[2] = v29 + 1;
        uint64_t v30 = (uint64_t)v19 + v43 + v29 * v21;
        uint64_t v20 = v27;
        uint64_t result = sub_10002218C(v40, v30, v27);
        uint64_t v16 = v37;
      }

      if (v39 == ++v18)
      {
        uint64_t v17 = v44;
        a1 = v34;
        unint64_t v7 = v33;
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    if (v17[2])
    {
      sub_10001DC4C(v36, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
      uint64_t v44 = (void *)*a1;
      *a1 = 0x8000000000000000LL;
      sub_10005D95C((uint64_t)v17, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
      *a1 = v44;
      swift_bridgeObjectRelease();
      return sub_100018C68((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    }

    else
    {
      return swift_release();
    }
  }

  return result;
}

char *sub_100508D04()
{
  uint64_t v0 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v1);
  uint64_t v43 = (uint64_t)&v35 - v5;
  __chkstk_darwin(v4);
  uint64_t v39 = (char *)&v35 - v6;
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v44 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t result = sub_100506C30();
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v40 = *((void *)result + 2);
  if (!v40)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v34 = v13[2];
    swift_release();
    return (char *)v34;
  }

  unint64_t v14 = 0LL;
  uint64_t v37 = v3;
  uint64_t v35 = v3 + 8;
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord;
  uint64_t v36 = v0;
  uint64_t v38 = result;
  uint64_t v17 = (uint64_t)v39;
  while (v14 < *((void *)result + 2))
  {
    uint64_t v18 = *(void *)(v41 + 72);
    unint64_t v45 = (*(unsigned __int8 *)(v41 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    uint64_t v19 = v18;
    uint64_t v20 = v16;
    sub_10001DC4C((uint64_t)&result[v45 + v18 * v14], (uint64_t)v11, v16);
    uint64_t v21 = (uint64_t)&v11[*(int *)(v42 + 24)];
    sub_10001DC4C(v21, v17, type metadata accessor for StableIdentifier);
    uint64_t v22 = v0;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v0);
    sub_100018C68(v17, type metadata accessor for StableIdentifier);
    uint64_t v24 = v21;
    uint64_t v25 = v43;
    sub_10001DC4C(v24, v43, type metadata accessor for StableIdentifier);
    uint64_t v26 = v25;
    if (EnumCaseMultiPayload == 1)
    {
      sub_100018C68(v25, type metadata accessor for StableIdentifier);
      uint64_t v16 = v20;
      unint64_t v27 = v45;
      goto LABEL_13;
    }

    uint64_t v28 = (uint64_t)v37;
    sub_10001DC4C(v26, (uint64_t)v37, type metadata accessor for StableIdentifier);
    int v29 = swift_getEnumCaseMultiPayload(v28, v22);
    if (v29 == 2)
    {
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v30 = v43;
      uint64_t v16 = v20;
LABEL_12:
      unint64_t v27 = v45;
      swift_bridgeObjectRelease();
      uint64_t v31 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8LL))(v37, v31);
      sub_100018C68(v30, type metadata accessor for StableIdentifier);
      uint64_t v15 = v46;
LABEL_13:
      sub_10002218C((uint64_t)v11, v44, v16);
      if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
        sub_1000328A4(0, v15[2] + 1LL, 1);
      }
      uint64_t v15 = v46;
      unint64_t v33 = v46[2];
      unint64_t v32 = v46[3];
      if (v33 >= v32 >> 1)
      {
        sub_1000328A4(v32 > 1, v33 + 1, 1);
        uint64_t v15 = v46;
      }

      v15[2] = v33 + 1;
      sub_10002218C(v44, (uint64_t)v15 + v27 + v33 * v19, v16);
      uint64_t v0 = v36;
      goto LABEL_4;
    }

    uint64_t v0 = v22;
    uint64_t v16 = v20;
    if (v29 == 3)
    {
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v30 = v43;
      goto LABEL_12;
    }

    sub_100018C68((uint64_t)v37, type metadata accessor for StableIdentifier);
    sub_100018C68(v43, type metadata accessor for StableIdentifier);
    sub_100018C68((uint64_t)v11, v20);
LABEL_4:
    ++v14;
    uint64_t result = v38;
    if (v40 == v14)
    {
      uint64_t v13 = v46;
      goto LABEL_19;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100509108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  uint64_t v35 = v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A4890);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - v12;
  sub_10050C17C(a1, (uint64_t)&v33 - v12);
  uint64_t v14 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL);
  if (v15(v13, 1LL, v14) != 1) {
    return sub_10002218C((uint64_t)v13, a2, type metadata accessor for WildModeAssociationRecord);
  }
  sub_100015794((uint64_t)v13, &qword_1009A4890);
  sub_10050BDEC(a1, (uint64_t)v11);
  if (v15(v11, 1LL, v14) != 1)
  {
    uint64_t v13 = v11;
    return sub_10002218C((uint64_t)v13, a2, type metadata accessor for WildModeAssociationRecord);
  }

  sub_100015794((uint64_t)v11, &qword_1009A4890);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10000A720(v16, (uint64_t)qword_100A2AC98);
  uint64_t v17 = v34;
  uint64_t v18 = v35;
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 16))(v7, a1, v34);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v23;
    *(_DWORD *)uint64_t v22 = 141558275;
    uint64_t v36 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2081;
    uint64_t v24 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v17, v24);
    uint64_t v36 = sub_1003F11D4(v25, v26, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v17);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "No wild mode association record found for unknownBeacon: %{private,mask.hash}s.",  (uint8_t *)v22,  0x16u);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v17);
  }

  type metadata accessor for SPOwnerSessionError(0LL);
  uint64_t v29 = v28;
  uint64_t v36 = 2LL;
  unint64_t v30 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v31 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  unint64_t v32 = _BridgedStoredNSError.init(_:userInfo:)(&v38, &v36, v30, v29, v31);
  return swift_willThrow(v32);
}

uint64_t sub_1005094A0(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  __chkstk_darwin(v8);
  uint64_t v34 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1004F730C();
  uint64_t v11 = (void *)swift_allocObject(&unk_100962538, 40LL, 7LL);
  void v11[2] = a1;
  v11[3] = a2;
  v11[4] = v2;
  uint64_t v40 = a2;
  swift_retain_n(a2, 2LL);
  swift_retain_n(v2, 2LL);
  uint64_t v12 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  int v13 = LOBYTE(aBlock[0]);
  uint64_t v14 = static os_log_type_t.default.getter(v12);
  if (qword_10099B718 != -1) {
    swift_once(&qword_10099B718, sub_100651228);
  }
  uint64_t v15 = qword_100A2B028;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v17 + 56) = &type metadata for Bool;
  *(void *)(v17 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 32) = v13;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "localAvailable: %d", v33);
  uint64_t v18 = swift_bridgeObjectRelease();
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  uint64_t v20 = qword_100A2B028;
  if (v13)
  {
    os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  qword_100A2B028,  "Container is already available -- calling completion immediately",  64LL,  2LL,  _swiftEmptyArrayStorage);
    a1(v3);
  }

  else
  {
    uint64_t v21 = os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  qword_100A2B028,  "Container is not yet available",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  v20,  "Waiting for availableWaitQueue",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v33 = *(void *)(v10 + 64);
    uint64_t v23 = (void *)swift_allocObject(&unk_100962560, 40LL, 7LL);
    v23[2] = v10;
    void v23[3] = sub_1001FA824;
    v23[4] = v11;
    aBlock[4] = sub_100571BA4;
    void aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    id aBlock[3] = &unk_100962578;
    uint64_t v24 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v25 = swift_retain();
    unint64_t v26 = v34;
    static DispatchQoS.unspecified.getter(v25);
    uint64_t v41 = _swiftEmptyArrayStorage;
    uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v29 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    unint64_t v30 = v37;
    uint64_t v31 = v39;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v28, v29, v39, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v26, v30, v24);
    _Block_release(v24);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v31);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v36);
    swift_release();
  }

  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *sub_10050989C(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v35 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a2[3];
  uint64_t v13 = a2[4];
  sub_100012ED8(a2, v12);
  int v14 = sub_1005F5498(v12, v13);
  if (!v14)
  {
    uint64_t v34 = v9;
    char v15 = 0;
    goto LABEL_5;
  }

  if (v14 == 1)
  {
    uint64_t v34 = v9;
    char v15 = 1;
LABEL_5:
    uint64_t v17 = a2[3];
    uint64_t v16 = a2[4];
    sub_100012ED8(a2, v17);
    dispatch thunk of RawRepresentable.rawValue.getter(v38, v17, *(void *)(v16 + 56));
    uint64_t v18 = v38[0];
    char *v8 = v15;
    *((void *)v8 + 1) = v18;
    v8[16] = a3;
    swift_storeEnumTagMultiPayload(v8, v6, 3LL);
    uint64_t v31 = sub_100509EC0(a1, v8);
    sub_100018C68((uint64_t)v8, type metadata accessor for TimeBasedKeysCriteria);
    return v31;
  }

  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_10000A720(v19, (uint64_t)qword_100A2AC98);
  uint64_t v20 = sub_100013044(a1, (uint64_t)v38);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc(22LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v23 = 141558275;
    uint64_t v36 = 1752392040LL;
    uint64_t v37 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2081;
    uint64_t v26 = v39;
    uint64_t v25 = v40;
    sub_100012ED8(v38, v39);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8LL) + 32LL))(v26);
    uint64_t v27 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v9, v27);
    unint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v9);
    uint64_t v36 = sub_1003F11D4(v28, v30, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Secure locations index for %{private,mask.hash}s.\nIgnore update.",  (uint8_t *)v23,  0x16u);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  }

  return 0LL;
}

void *sub_100509EC0(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1004EBE70(a1, (uint64_t)a2);
  if (!v2)
  {
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v19 = 0LL;
      uint64_t v11 = v9 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      uint64_t v12 = *(void *)(v6 + 72);
      uint64_t v18 = v9;
      swift_bridgeObjectRetain(v9);
      a2 = _swiftEmptyArrayStorage;
      do
      {
        sub_10001DC4C(v11, (uint64_t)v8, type metadata accessor for TimeBasedKey);
        uint64_t v13 = *v8;
        sub_100018C68((uint64_t)v8, type metadata accessor for TimeBasedKey);
        if ((swift_isUniquelyReferenced_nonNull_native(a2) & 1) == 0) {
          a2 = sub_1004C5978(0LL, a2[2] + 1LL, 1, a2);
        }
        unint64_t v15 = a2[2];
        unint64_t v14 = a2[3];
        if (v15 >= v14 >> 1) {
          a2 = sub_1004C5978((void *)(v14 > 1), v15 + 1, 1, a2);
        }
        a2[2] = v15 + 1;
        a2[v15 + 4] = v13;
        v11 += v12;
        --v10;
      }

      while (v10);
      swift_bridgeObjectRelease_n(v18, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }
  }

  return a2;
}

void sub_10050A054(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v59 + 64);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v61 = (uint64_t)&v56 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v56 - v10;
  uint64_t v60 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  __chkstk_darwin(v60);
  unint64_t v62 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009A2430);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v63 = (uint64_t)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = v4;
  if ((sub_1006DDC00() & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v57 = a1 + *(int *)(v64 + 20);
  uint64_t v58 = v2;
  sub_100576BD4((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    sub_100015794((uint64_t)v15, &qword_1009A2430);
LABEL_4:
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10000A720(v19, (uint64_t)qword_100A2AC98);
    uint64_t v20 = sub_10001DC4C(a1, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v23 = 141558275;
      uint64_t v65 = 1752392040LL;
      uint64_t v66 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v23 + 4, v23 + 12);
      *(_WORD *)(v23 + 12) = 2081;
      uint64_t v25 = type metadata accessor for UUID(0LL);
      uint64_t v26 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
      uint64_t v65 = sub_1003F11D4(v27, v28, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "KeyAlignmentRecord with the identifier not found - %{private,mask.hash}s.",  (uint8_t *)v23,  0x16u);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    }

    return;
  }

  uint64_t v29 = v63;
  sub_10002218C((uint64_t)v15, v63, type metadata accessor for KeyAlignmentRecord);
  uint64_t v30 = sub_100004AEC(&qword_10099C880);
  unsafeFromAsyncTask<A>(_:)(&unk_1009B2AD0, 0LL, v30);
  uint64_t v31 = v66;
  if (v66)
  {
    sub_10001DC4C(a1, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    uint64_t v32 = *(unsigned __int8 *)(v59 + 80);
    uint64_t v33 = (v32 + 24) & ~v32;
    uint64_t v34 = swift_allocObject(&unk_1009624C0, v33 + v5, v32 | 7);
    *(void *)(v34 + swift_weakDestroy(v0 + 16) = v31;
    sub_10002218C((uint64_t)v11, v34 + v33, type metadata accessor for OwnedBeaconRecord);
    swift_retain_n(v31, 2LL);
    uint64_t v35 = (uint64_t)v62;
    unsafeFromAsyncTask<A>(_:)(&unk_1009B2AE0, v34, v60);
    swift_release(v34);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    sub_10000A720(v36, (uint64_t)qword_100A2AC98);
    uint64_t v37 = v61;
    uint64_t v38 = sub_10001DC4C(a1, v61, type metadata accessor for OwnedBeaconRecord);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc(22LL, -1LL);
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v41 = 141558275;
      uint64_t v65 = 1752392040LL;
      uint64_t v66 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v41 + 4, v41 + 12);
      *(_WORD *)(v41 + 12) = 2081;
      uint64_t v43 = type metadata accessor for UUID(0LL);
      uint64_t v44 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v45 = v43;
      uint64_t v29 = v63;
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v45, v44);
      uint64_t v65 = sub_1003F11D4(v46, v47, &v66);
      uint64_t v35 = (uint64_t)v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v41 + 14, v41 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v37, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Updating KeyAlignmentRecord for identifier %{private,mask.hash}s.",  (uint8_t *)v41,  0x16u);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v37, type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v53 = v58;
    uint64_t v54 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v54);
    *(&v56 - 4) = v53;
    *(&v56 - 3) = v29;
    uint64_t v55 = v57;
    *(&v56 - 2) = v35;
    *(&v56 - 1) = v55;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd-saveKeyAlignment",  46LL,  2LL,  sub_10056B2B4,  &v56 - 6);
    swift_release_n(v31, 2LL);
    sub_100015794(v35, (uint64_t *)&unk_1009AE460);
  }

  else
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v48 = type metadata accessor for Logger(0LL);
    uint64_t v49 = sub_10000A720(v48, (uint64_t)qword_100A2AC98);
    char v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Missing ObservationStoreService for updating KeyAlignment from disk.",  v52,  2u);
      swift_slowDealloc(v52, -1LL, -1LL);
    }
  }

  sub_100018C68(v29, type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_10050A7CC(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  return swift_task_switch(sub_10050A7E4, 0LL, 0LL);
}

uint64_t sub_10050A7E4()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10050A8D0;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10050A8D0(uint64_t a1)
{
  uint64_t v3 = *(void **)(*(void *)v1 + 120LL);
  swift_task_dealloc(*(void *)(*(void *)v1 + 128LL));
  *uint64_t v3 = a1;
  return swift_task_switch(sub_10050A92C, 0LL, 0LL);
}

uint64_t sub_10050A92C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10050A95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v7 = a3 + *(int *)(v6 + 20);
  uint64_t v8 = a3 + *(int *)(v6 + 32);
  uint64_t v9 = (void *)swift_task_alloc(dword_1009BCD2C);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100015D58;
  return sub_1006D5220(a1, v7, v8);
}

uint64_t sub_10050A9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = a2;
  uint64_t v28 = a5;
  uint64_t v25 = a4;
  uint64_t v34 = a3;
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64LL);
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v7;
  __chkstk_darwin(v6);
  uint64_t v33 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v26 = v9;
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v27 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  sub_10001581C(a4, (uint64_t)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL), (uint64_t *)&unk_1009AE460);
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v15 + 16) & ~v15;
  uint64_t v17 = swift_allocObject(&unk_1009624E8, v16 + v14, v15 | 7);
  sub_100015750((uint64_t)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL), v17 + v16, (uint64_t *)&unk_1009AE460);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v28,  v9);
  sub_10001DC4C(v34, v33, type metadata accessor for KeyAlignmentRecord);
  sub_10001581C(v25, (uint64_t)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL), (uint64_t *)&unk_1009AE460);
  uint64_t v18 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  uint64_t v20 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v21 = (v11 + v20 + v19) & ~v20;
  uint64_t v22 = (v30 + v15 + v21) & ~v15;
  uint64_t v23 = swift_allocObject(&unk_100962510, v22 + v14, v15 | v18 | v20 | 7);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v23 + v19, v27, v26);
  sub_10002218C(v33, v23 + v21, type metadata accessor for KeyAlignmentRecord);
  sub_100015750((uint64_t)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL), v23 + v22, (uint64_t *)&unk_1009AE460);
  swift_retain();
  sub_1002B52B4( v34,  0,  (void (*)(uint64_t))sub_10056B34C,  v17,  sub_10056B4F8,  (void (*)(uint64_t))v23);
  swift_release(v17);
  return swift_release(v23);
}

uint64_t sub_10050AC48(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = type metadata accessor for KeyAlignmentRecord(0LL);
  *(void *)(a1 + *(int *)(v5 + 28)) = v4;
  uint64_t v6 = (char *)a2 + *(int *)(sub_100004AEC((uint64_t *)&unk_1009AE460) + 36);
  uint64_t v7 = a1 + *(int *)(v5 + 32);
  uint64_t v8 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 24LL))(v7, v6, v8);
}

void sub_10050ACC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v55 = a3;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  __chkstk_darwin(v6);
  uint64_t v54 = (uint64_t *)((char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v51 = type metadata accessor for KeyAlignmentRecord(0LL);
  __chkstk_darwin(v51);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v50 - v15;
  uint64_t v17 = sub_100004AEC(&qword_1009A7E08);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v19, &qword_1009A7E08);
  if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
  {
    uint64_t v20 = *v19;
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2AC98);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v55, v10);
    swift_errorRetain(v20);
    uint64_t v22 = swift_errorRetain(v20);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      uint64_t v55 = v11;
      uint64_t v26 = v25;
      uint64_t v27 = swift_slowAlloc(64LL, -1LL);
      uint64_t v57 = v27;
      *(_DWORD *)uint64_t v26 = 141558531;
      uint64_t v61 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      uint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v10, v28);
      uint64_t v61 = sub_1003F11D4(v29, v30, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v10);
      *(_WORD *)(v26 + 22) = 2082;
      swift_getErrorValue(v20, v60, v59);
      uint64_t v31 = Error.localizedDescription.getter(v59[1], v59[2]);
      uint64_t v61 = sub_1003F11D4(v31, v32, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v26 + 24, v26 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Could not update last seen key index to alignment record uuid - %{private,mask.hash}s\ndue to %{public}s.",  (uint8_t *)v26,  0x20u);
      swift_arrayDestroy(v27, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);

      swift_errorRelease(v20);
    }

    else
    {
      swift_errorRelease(v20);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      swift_errorRelease(v20);
      swift_errorRelease(v20);
    }
  }

  else
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    sub_10000A720(v33, (uint64_t)qword_100A2AC98);
    uint64_t v34 = v11;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v55, v10);
    sub_10001DC4C(v52, (uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
    uint64_t v35 = v54;
    uint64_t v36 = sub_10001581C(v53, (uint64_t)v54, (uint64_t *)&unk_1009AE460);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter(v37);
    int v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v40 = swift_slowAlloc(42LL, -1LL);
      uint64_t v55 = swift_slowAlloc(64LL, -1LL);
      uint64_t v61 = v55;
      *(_DWORD *)uint64_t v40 = 141558787;
      uint64_t v57 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v40 + 4, v40 + 12);
      *(_WORD *)(v40 + 12) = 2081;
      uint64_t v41 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v53) = v39;
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v10, v41);
      uint64_t v57 = sub_1003F11D4(v42, v43, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v40 + 14, v40 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v10);
      *(_WORD *)(v40 + 22) = 2048;
      uint64_t v44 = *(void *)&v9[*(int *)(v51 + 28)];
      sub_100018C68((uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
      uint64_t v57 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v40 + 24, v40 + 32);
      *(_WORD *)(v40 + 32) = 2080;
      uint64_t v45 = v54;
      uint64_t v46 = *v54;
      uint64_t v57 = 0x7972616D6972702ELL;
      unint64_t v58 = 0xE900000000000028LL;
      uint64_t v56 = v46;
      v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._countAndFlagsBits = 41LL;
      v48._object = (void *)0xE100000000000000LL;
      String.append(_:)(v48);
      uint64_t v57 = sub_1003F11D4(v57, v58, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v40 + 34, v40 + 42);
      swift_bridgeObjectRelease();
      sub_100015794((uint64_t)v45, (uint64_t *)&unk_1009AE460);
      _os_log_impl( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v53,  "Successfully updated last seen key index for beacon key alignment record uuid - %{private,mask.hash}s\n old_index - %llu\n new_index - %s.",  (uint8_t *)v40,  0x2Au);
      uint64_t v49 = v55;
      swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      sub_100015794((uint64_t)v35, (uint64_t *)&unk_1009AE460);
    }

    sub_100015794((uint64_t)v19, &qword_1009A7E08);
  }

uint64_t sub_10050B3A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009AE490);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v39 = (uint64_t)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v37 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v37 - v15;
  v37[1] = a1;
  uint64_t v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache, v43, 0LL, 0LL);
  uint64_t v18 = *v17;
  uint64_t v19 = *(void *)(*v17 + 16);
  uint64_t v44 = v8;
  uint64_t v40 = v6;
  uint64_t v41 = a2;
  if (v19)
  {
    v37[0] = a3;
    swift_bridgeObjectRetain(v18);
    unint64_t v20 = sub_10030D124(a2);
    if ((v21 & 1) != 0)
    {
      unint64_t v22 = v20;
      uint64_t v23 = *(void *)(v18 + 56);
      uint64_t v24 = type metadata accessor for BeaconNamingRecord(0LL);
      uint64_t v25 = *(void *)(v24 - 8);
      sub_10001DC4C(v23 + *(void *)(v25 + 72) * v22, (uint64_t)v16, type metadata accessor for BeaconNamingRecord);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v16, 0LL, 1LL, v24);
    }

    else
    {
      uint64_t v24 = type metadata accessor for BeaconNamingRecord(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v16, 1LL, 1LL, v24);
    }

    a3 = v37[0];
    swift_bridgeObjectRelease();
    type metadata accessor for BeaconNamingRecord(0LL);
    uint64_t v27 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v16, 1LL, v24) != 1)
    {
      sub_10002218C((uint64_t)v16, a3, type metadata accessor for BeaconNamingRecord);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(a3, 0LL, 1LL, v24);
    }
  }

  else
  {
    uint64_t v26 = type metadata accessor for BeaconNamingRecord(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v16, 1LL, 1LL, v26);
  }

  sub_100015794((uint64_t)v16, &qword_1009AE490);
  uint64_t v28 = v41;
  uint64_t v29 = sub_100577EF8(v41);
  uint64_t v30 = v29[2];
  uint64_t v31 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  if (v30)
  {
    sub_10001DC4C( (uint64_t)v29 + ((*(unsigned __int8 *)(v32 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80)),  (uint64_t)v14,  type metadata accessor for BeaconNamingRecord);
    uint64_t v33 = 0LL;
  }

  else
  {
    uint64_t v33 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v14, v33, 1LL, v31);
  swift_bridgeObjectRelease();
  uint64_t v35 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v28, v40);
  uint64_t v36 = v39;
  sub_10001581C((uint64_t)v14, v39, &qword_1009AE490);
  swift_beginAccess(v17, v42, 33LL, 0LL);
  sub_100045A6C(v36, v35);
  swift_endAccess(v42);
  return sub_100015750((uint64_t)v14, a3, &qword_1009AE490);
}

uint64_t sub_10050B6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  return a4(a1);
}

uint64_t sub_10050B76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v4);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t))(v10 + 16))(v9, a2);
  uint64_t v11 = type metadata accessor for BeaconNamingRecord(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v6, 1LL, 1LL, v11);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache, v14, 33LL, 0LL);
  sub_100045A6C((uint64_t)v6, (uint64_t)v9);
  return swift_endAccess(v14);
}

uint64_t sub_10050B884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v18[1] = a2;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v2 + 136);
  if (qword_10099B348 != -1) {
    swift_once(&qword_10099B348, sub_10039BCD8);
  }
  uint64_t v9 = sub_10000A720(v4, (uint64_t)qword_100A2A768);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  v10._object = (void *)0x800000010085B040LL;
  v10._countAndFlagsBits = 0xD000000000000014LL;
  prohibitAsyncContext(functionName:)(v10);
  uint64_t v19 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009B27F0);
  uint64_t v12 = String.init<A>(describing:)(&v19, v11);
  v18[0] = v5;
  uint64_t v14 = v13;
  uint64_t v15 = objc_autoreleasePoolPush();
  __chkstk_darwin(v15);
  v18[-6] = v8;
  v18[-5] = a1;
  v18[-4] = v7;
  v18[-3] = v12;
  v18[-2] = v14;
  uint64_t v16 = sub_100004AEC(&qword_1009AA870);
  OS_dispatch_queue.sync<A>(execute:)(sub_10057180C, &v18[-8], v16);
  objc_autoreleasePoolPop(v15);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v18[0] + 8LL))(v7, v4);
}

void sub_10050BA28(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 96))(v9, v10) & 1) == 0)
  {
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    sub_100012ED8(a1, v11);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 104))(v11, v12) & 1) != 0)
    {
      uint64_t v14 = a1[3];
      uint64_t v13 = a1[4];
      sub_100012ED8(a1, v14);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v13 + 8) + 8LL) + 32LL))(v14);
      sub_10050B884((uint64_t)v5, (uint64_t)v8);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v15 = type metadata accessor for BeaconProductInfoRecord(0LL);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v8, 1LL, v15) == 1)
      {
        uint64_t v16 = sub_100015794((uint64_t)v8, &qword_1009AA870);
        uint64_t v17 = static os_log_type_t.error.getter(v16);
        if (qword_10099B708 != -1) {
          swift_once(&qword_10099B708, sub_100651168);
        }
        os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_100A2B018,  "No txPower in productInfo -- defaulting to 4",  44LL,  2LL,  _swiftEmptyArrayStorage);
      }

      else
      {
        double v18 = *(double *)&v8[*(int *)(v15 + 60)];
        uint64_t v19 = sub_100018C68((uint64_t)v8, type metadata accessor for BeaconProductInfoRecord);
        sub_10054EDE0(v19, v18);
      }
    }
  }

void *sub_10050BC4C()
{
  uint64_t v0 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v16 - v6;
  static SystemInfo.lockState.getter(v5);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v4,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v0);
  uint64_t v8 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v0, v8);
  dispatch thunk of RawRepresentable.rawValue.getter(&v16, v0, v8);
  uint64_t v10 = v16;
  uint64_t v9 = v17;
  uint64_t v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  uint64_t v12 = ((uint64_t (*)(char *, uint64_t))v11)(v7, v0);
  if (v9 != v10) {
    return sub_100577790();
  }
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v14 = _swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_100A2B018,  "wildModeAssociationRecords call failed because in device is in beforeFirstUnlock state",  86LL,  2LL,  _swiftEmptyArrayStorage);
  return v14;
}

uint64_t sub_10050BDEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v40 - v12;
  uint64_t v14 = static os_log_type_t.default.getter(v11);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v15 = qword_100A2B018;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v41 = a1;
  uint64_t v18 = UUID.uuidString.getter(v17);
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "wildModeAssociationRecord(for uuid: %@)", 39LL, 2LL, v17);
  uint64_t v21 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v10,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v6);
  uint64_t v22 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v15) = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v6, v22);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v10, v6);
  uint64_t v24 = ((uint64_t (*)(char *, uint64_t))v23)(v13, v6);
  if ((v15 & 1) != 0)
  {
    uint64_t v25 = static os_log_type_t.default.getter(v24);
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_100A2B018,  "wildModeAssociationRecord call failed because in device is in beforeFirstUnlock state",  85LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v26 = type metadata accessor for WildModeAssociationRecord(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))( v44,  1LL,  1LL,  v26);
  }

  else
  {
    uint64_t v28 = *(void *)(v40[1] + 136LL);
    if (qword_10099B100 != -1) {
      swift_once(&qword_10099B100, sub_1000E2B04);
    }
    uint64_t v29 = v43;
    uint64_t v30 = sub_10000A720(v43, (uint64_t)qword_100A2A1B0);
    uint64_t v31 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v5, v30, v29);
    v32._object = (void *)0x800000010085B040LL;
    v32._countAndFlagsBits = 0xD000000000000014LL;
    prohibitAsyncContext(functionName:)(v32);
    uint64_t v45 = type metadata accessor for WildModeAssociationRecord(0LL);
    uint64_t v33 = sub_100004AEC(&qword_1009B2988);
    uint64_t v34 = String.init<A>(describing:)(&v45, v33);
    uint64_t v36 = v35;
    uint64_t v37 = objc_autoreleasePoolPush();
    __chkstk_darwin(v37);
    uint64_t v38 = v41;
    v40[-6] = v28;
    v40[-5] = v38;
    v40[-4] = v5;
    v40[-3] = v34;
    v40[-2] = v36;
    uint64_t v39 = sub_100004AEC(&qword_1009A4890);
    OS_dispatch_queue.sync<A>(execute:)(sub_1005717F8, &v40[-8], v39);
    objc_autoreleasePoolPop(v37);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v5, v29);
  }

uint64_t sub_10050C17C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v48 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v52);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v49 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v56 = (uint64_t)&v45 - v11;
  uint64_t v55 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v47 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v54 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v45 - v19;
  LODWORD(v51) = static os_log_type_t.default.getter(v18);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v50 = (char *)qword_100A2B018;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
  *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v53 = a1;
  uint64_t v23 = UUID.uuidString.getter(v22);
  uint64_t v25 = v24;
  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_1000226F4();
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v25;
  os_log(_:dso:log:_:_:)( v51,  &_mh_execute_header,  v50,  "wildModeAssociationRecord(beaconUUID: %@)",  41LL,  2LL,  v22);
  uint64_t v26 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v26);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v17,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v13);
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v23) = dispatch thunk of static Equatable.== infix(_:_:)(v20, v17, v13, v27);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28(v17, v13);
  uint64_t v29 = ((uint64_t (*)(char *, uint64_t))v28)(v20, v13);
  if ((v23 & 1) != 0)
  {
    uint64_t v30 = static os_log_type_t.default.getter(v29);
    os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_100A2B018,  "wildModeAssociationRecord call failed because in device is in beforeFirstUnlock state",  85LL,  2LL,  _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v46, 1LL, 1LL, v55);
  }

  uint64_t v45 = sub_10050BC4C();
  uint64_t v32 = v45[2];
  uint64_t v33 = (uint64_t)v49;
  uint64_t v34 = v54;
  if (!v32)
  {
LABEL_15:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v46, 1LL, 1LL, v55);
    return swift_bridgeObjectRelease();
  }

  uint64_t v35 = (uint64_t)v45 + ((*(unsigned __int8 *)(v47 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
  uint64_t v51 = *(void *)(v47 + 72);
  uint64_t v50 = v7;
  while (1)
  {
    sub_10001DC4C(v35, v34, type metadata accessor for WildModeAssociationRecord);
    uint64_t v36 = v56;
    uint64_t v37 = v34 + *(int *)(v55 + 20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v56, v53, v3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v36, 0LL, 1LL, v3);
    uint64_t v38 = (uint64_t)&v7[*(int *)(v52 + 48)];
    sub_10001581C(v37, (uint64_t)v7, &qword_10099D8A0);
    sub_10001581C(v36, v38, &qword_10099D8A0);
    uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    if (v39(v7, 1LL, v3) == 1) {
      break;
    }
    sub_10001581C((uint64_t)v7, v33, &qword_10099D8A0);
    if (v39((char *)v38, 1LL, v3) == 1)
    {
      sub_100015794(v56, &qword_10099D8A0);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v33, v3);
      goto LABEL_8;
    }

    uint64_t v40 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v48, v38, v3);
    uint64_t v41 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    char v42 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v40, v3, v41);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v33 = (uint64_t)v49;
    v43(v40, v3);
    sub_100015794(v56, &qword_10099D8A0);
    v43((char *)v33, v3);
    sub_100015794((uint64_t)v7, &qword_10099D8A0);
    if ((v42 & 1) != 0) {
      goto LABEL_17;
    }
LABEL_9:
    uint64_t v34 = v54;
    sub_100018C68(v54, type metadata accessor for WildModeAssociationRecord);
    v35 += v51;
    if (!--v32) {
      goto LABEL_15;
    }
  }

  sub_100015794(v36, &qword_10099D8A0);
  if (v39((char *)v38, 1LL, v3) != 1)
  {
LABEL_8:
    uint64_t v7 = v50;
    sub_100015794((uint64_t)v50, (uint64_t *)&unk_1009B5370);
    goto LABEL_9;
  }

  sub_100015794((uint64_t)v50, &qword_10099D8A0);
LABEL_17:
  uint64_t v44 = v46;
  sub_10002218C(v54, v46, type metadata accessor for WildModeAssociationRecord);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v44, 0LL, 1LL, v55);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10050C740(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v26 - v8;
  uint64_t v10 = static os_log_type_t.default.getter(v7);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v11 = qword_100A2B018;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v14 = MACAddress.description.getter(v13);
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_1000226F4();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "wildModeAssociationRecords(advertisement: %@)", 45LL, 2LL, v13);
  uint64_t v17 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v17);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v6,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v2);
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v14) = dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v2, v18);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v6, v2);
  uint64_t v20 = ((uint64_t (*)(char *, uint64_t))v19)(v9, v2);
  if ((v14 & 1) != 0)
  {
    uint64_t v21 = static os_log_type_t.default.getter(v20);
    uint64_t v22 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_100A2B018,  "wildModeAssociationRecord call failed because in device is in beforeFirstUnlock state",  85LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v23 = sub_10050BC4C();
    __chkstk_darwin(v23);
    v26[-2] = a1;
    return sub_100023DB4((uint64_t (*)(char *))sub_10056AF6C, &v26[-4], v24);
  }

  return (uint64_t)v22;
}

uint64_t sub_10050C994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10050C9BC( a1,  "secureLocationsCachedPayload(identifier: %s",  (uint64_t (*)(void))sub_1005773DC,  a2);
}

uint64_t sub_10050C9A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10050C9BC( a1,  "secureLocationsCachedShared(identifier: %s",  (uint64_t (*)(void))sub_100577580,  a2);
}

uint64_t sub_10050C9BC@<X0>( uint64_t a1@<X0>, const char *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000A720(v12, (uint64_t)qword_100A2AE08);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = a1;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = a3;
    uint64_t v19 = v18;
    uint64_t v30 = v18;
    v25[1] = v4;
    void v25[2] = a4;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v20 = UUID.uuidString.getter(v18);
    uint64_t v29 = sub_1003F11D4(v20, v21, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v28, v17, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v22 = v19;
    a3 = v27;
    swift_slowDealloc(v22, -1LL, -1LL);
    uint64_t v23 = v17;
    a1 = v26;
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  return a3(a1);
}

void *sub_10050CBD8()
{
  uint64_t v0 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v16 - v6;
  static SystemInfo.lockState.getter(v5);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v4,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v0);
  uint64_t v8 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v0, v8);
  dispatch thunk of RawRepresentable.rawValue.getter(&v16, v0, v8);
  uint64_t v10 = v16;
  uint64_t v9 = v17;
  uint64_t v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  uint64_t v12 = ((uint64_t (*)(char *, uint64_t))v11)(v7, v0);
  if (v9 != v10) {
    return sub_1005777B4();
  }
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v14 = _swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_100A2B018,  "ownedBeaconGroups call failed because in device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
  return v14;
}

void *sub_10050CD78()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v72 = *(void *)(v2 - 8);
  uint64_t v73 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v69 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v65 = (char *)&v62 - v5;
  uint64_t v6 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v71 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v74 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v70 = *(void **)(v74 - 8);
  uint64_t v11 = __chkstk_darwin(v74);
  char v68 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v67 = (uint64_t)&v62 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v62 - v15;
  uint64_t v17 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v62 - v23;
  static SystemInfo.lockState.getter(v22);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))( v21,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v17);
  uint64_t v25 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v76, v17, v25);
  dispatch thunk of RawRepresentable.rawValue.getter(&v75, v17, v25);
  uint64_t v27 = v75;
  uint64_t v26 = v76;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v21, v17);
  uint64_t v29 = ((uint64_t (*)(char *, uint64_t))v28)(v24, v17);
  if (v26 == v27)
  {
    uint64_t v30 = (void *)static os_log_type_t.default.getter(v29);
    if (qword_10099B708 == -1)
    {
LABEL_3:
      uint64_t v31 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_100A2B018,  "ownedBeaconGroups call failed because in device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
      return v31;
    }

void *sub_10050D3D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009AA840);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v54 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v51 - v10;
  id v12 = [objc_allocWithZone(SPBeaconGroup) init];
  uint64_t v13 = v12;
  uint64_t v14 = 0LL;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0) {
    uint64_t v14 = *(void *)(a1 + 16);
  }
  [v12 setVersion:v14];
  uint64_t v15 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v16 = a1 + *(int *)(v15 + 24);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v13 setIdentifier:isa];

  NSString v18 = String._bridgeToObjectiveC()();
  [v13 setName:v18];

  uint64_t v20 = MACAddress.data.getter(v19);
  unint64_t v22 = v21;
  Class v23 = Data._bridgeToObjectiveC()().super.isa;
  sub_100016F9C(v20, v22);
  [v13 setMacAddress:v23];

  [v13 setClassification:0];
  [v13 setIsPairingComplete:sub_1001CB708() & 1];
  [v13 setIsFindMyNetworkEnabled:*(unsigned __int8 *)(a1 + *(int *)(v15 + 32))];
  [v13 setStatus:sub_10050D998(a1)];
  sub_1001CC778();
  type metadata accessor for UUID(0LL);
  sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  Class v24 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setBeaconIdentifiers:v24];

  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v25 = qword_100A2A6C8;
  uint64_t v26 = objc_autoreleasePoolPush();
  sub_100346B24(v25, v16, 0LL, 0LL, &v55);
  objc_autoreleasePoolPop(v26);
  LOBYTE(v26) = sub_1001D2A18((uint64_t)v11, v55);
  swift_bridgeObjectRelease();
  sub_100015794((uint64_t)v11, (uint64_t *)&unk_10099D720);
  [v13 setIsClassicConnected:v26 & 1];
  sub_1004ED8A0(a1);
  sub_100004AEC(&qword_1009A0B30);
  sub_1000372EC(&qword_1009B2898, &qword_1009A0B30, (uint64_t)&protocol conformance descriptor for Set<A>);
  Class v27 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setMultipartStatus:v27];

  sub_1001CC778();
  uint64_t v29 = v28;
  swift_retain();
  sub_10054FC4C(v29, v2);
  LOBYTE(v27) = v30;
  swift_bridgeObjectRelease();
  swift_release();
  [v13 setIsConnected:v27 & 1];
  uint64_t v31 = sub_100577004(v16);
  uint64_t v32 = v31[2];
  uint64_t v33 = (int *)type metadata accessor for LostModeRecord(0LL);
  uint64_t v34 = *((void *)v33 - 1);
  if (v32)
  {
    sub_10001DC4C( (uint64_t)v31 + ((*(unsigned __int8 *)(v34 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80)),  (uint64_t)v6,  type metadata accessor for LostModeRecord);
    uint64_t v35 = 0LL;
  }

  else
  {
    uint64_t v35 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, int *))(v34 + 56))(v6, v35, 1LL, v33);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v6, 1LL, v33) == 1)
  {
    sub_100015794((uint64_t)v6, &qword_1009AA840);
    id v36 = 0LL;
  }

  else
  {
    uint64_t v37 = (uint64_t *)&v6[v33[9]];
    uint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    uint64_t v40 = v33[8];
    uint64_t v41 = (uint64_t *)&v6[v33[7]];
    uint64_t v42 = *v41;
    uint64_t v43 = v41[1];
    uint64_t v44 = *(void *)&v6[v40 + 8];
    uint64_t v52 = *(void *)&v6[v40];
    uint64_t v53 = v38;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v43);
    unint64_t v45 = objc_autoreleasePoolPush();
    uint64_t v46 = (uint64_t)v54;
    sub_100544838((uint64_t)v6);
    objc_autoreleasePoolPop(v45);
    uint64_t v47 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))(v46, 0LL, 1LL, v47);
    id v48 = objc_allocWithZone(&OBJC_CLASS___SPLostModeInfo);
    id v36 = sub_100545B10(v53, v39, v42, v43, v52, v44, v46);
    sub_100018C68((uint64_t)v6, type metadata accessor for LostModeRecord);
  }

  [v13 setLostModeInfo:v36];

  sub_1001D13A8();
  sub_100022898(0LL, &qword_1009A5988, &OBJC_CLASS___SPPairingState_ptr);
  Class v49 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setBeaconMap:v49];

  return v13;
}

uint64_t sub_10050D998(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v188 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v198 = (uint64_t)v188 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v196 = (uint64_t)v188 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v195 = (uint64_t)v188 - v11;
  __chkstk_darwin(v10);
  uint64_t v193 = (uint64_t)v188 - v12;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v209 = *(void **)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v202 = (uint64_t)v188 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  unint64_t v201 = (char *)v188 - v16;
  uint64_t v210 = sub_100004AEC(&qword_10099D440);
  uint64_t v212 = *(void *)(v210 - 8);
  uint64_t v17 = __chkstk_darwin(v210);
  uint64_t v19 = (char *)v188 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v204 = (void *)((char *)v188 - v21);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v194 = (void *)((char *)v188 - v23);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)v188 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)v188 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v207 = (char *)v188 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v199 = (void *)((char *)v188 - v33);
  uint64_t v34 = __chkstk_darwin(v32);
  id v36 = (void *)((char *)v188 - v35);
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v208 = (void *)((char *)v188 - v38);
  __chkstk_darwin(v37);
  uint64_t v40 = (void *)((char *)v188 - v39);
  uint64_t v41 = sub_100004AEC(&qword_1009B28A8);
  uint64_t v42 = __chkstk_darwin(v41);
  unint64_t v203 = (char *)v188 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v45 = __chkstk_darwin(v44);
  uint64_t v206 = (uint64_t)v188 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v211 = (uint64_t)v188 - v48;
  __chkstk_darwin(v47);
  uint64_t v51 = (char *)v188 - v50;
  uint64_t v52 = *(int *)(v2 + 40);
  uint64_t v213 = a1;
  unint64_t v53 = *(void *)(*(void *)(a1 + v52) + 16LL);
  if (v53 >= 0x100)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    JUMPOUT(0x10050EF18LL);
  }

  if (v53 == 1)
  {
    if (qword_10099B528 == -1)
    {
LABEL_4:
      uint64_t v54 = type metadata accessor for Logger(0LL);
      sub_10000A720(v54, (uint64_t)qword_100A2AC98);
      uint64_t v55 = sub_10001DC4C(v213, (uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
      unint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      os_log_type_t v57 = static os_log_type_t.default.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        unint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v59 = swift_slowAlloc(32LL, -1LL);
        uint64_t v215 = v59;
        *(_DWORD *)unint64_t v58 = 136315138;
        uint64_t v60 = type metadata accessor for UUID(0LL);
        uint64_t v61 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter(v60, v61);
        uint64_t v214 = sub_1003F11D4(v62, v63, &v215);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215, v58 + 4, v58 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "%s is a single beacon group, returning .grouped",  v58,  0xCu);
        swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1LL, -1LL);
        swift_slowDealloc(v58, -1LL, -1LL);
      }

      else
      {
        sub_100018C68((uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
      }

      return 2LL;
    }

LABEL_80:
    swift_once(&qword_10099B528, sub_1004F3B00);
    goto LABEL_44;
  }

  uint64_t v136 = *(int *)(v77 + 48);
  uint64_t v137 = v207;
  uint64_t v138 = &v207[v136];
  *(void *)uint64_t v207 = *(void *)v118;
  uint64_t v139 = v209;
  unint64_t v140 = (uint64_t (*)(char *, char *, uint64_t))v209[4];
  uint64_t v141 = v197;
  uint64_t v142 = v140(&v137[v136], &v118[v136], v197);
  uint64_t v143 = v201;
  Date.addingTimeInterval(_:)(v142, v82);
  uint64_t v144 = v202;
  static Date.trustedNow.getter(v202);
  char v145 = static Date.< infix(_:_:)(v143, v144);
  uint64_t v146 = (void (*)(uint64_t, uint64_t))v139[1];
  v146(v144, v141);
  v146((uint64_t)v143, v141);
  if ((v145 & 1) != 0)
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v147 = type metadata accessor for Logger(0LL);
    sub_10000A720(v147, (uint64_t)qword_100A2AC98);
    uint64_t v148 = v195;
    uint64_t v149 = sub_10001DC4C(v213, v195, type metadata accessor for OwnedBeaconGroup);
    uint64_t v150 = (os_log_s *)Logger.logObject.getter(v149);
    os_log_type_t v151 = static os_log_type_t.default.getter(v150);
    if (os_log_type_enabled(v150, v151))
    {
      uint64_t v152 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v153 = swift_slowAlloc(32LL, -1LL);
      uint64_t v215 = v153;
      *(_DWORD *)uint64_t v152 = 136315138;
      uint64_t v154 = type metadata accessor for UUID(0LL);
      uint64_t v155 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v156 = dispatch thunk of CustomStringConvertible.description.getter(v154, v155);
      uint64_t v214 = sub_1003F11D4(v156, v157, &v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215, v152 + 4, v152 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v148, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl( (void *)&_mh_execute_header,  v150,  v151,  "Last multipart observation for group %s has expired, returning .unknown",  v152,  0xCu);
      swift_arrayDestroy(v153, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v153, -1LL, -1LL);
      swift_slowDealloc(v152, -1LL, -1LL);
    }

    else
    {

      sub_100018C68(v148, type metadata accessor for OwnedBeaconGroup);
    }

    sub_100015794((uint64_t)v207, &qword_10099D440);
    uint64_t v159 = v211;
    goto LABEL_66;
  }

  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v160 = type metadata accessor for Logger(0LL);
  sub_10000A720(v160, (uint64_t)qword_100A2AC98);
  uint64_t v161 = v210;
  uint64_t v162 = (uint64_t)v194;
  uint64_t v163 = (char *)v194 + *(int *)(v210 + 48);
  *uint64_t v194 = *(void *)v207;
  uint64_t v164 = (void (*)(char *, char *, uint64_t))v209[2];
  uint64_t v165 = v197;
  v164(v163, v138, v197);
  sub_100015750(v162, (uint64_t)v122, &qword_10099D440);
  uint64_t v166 = v196;
  uint64_t v167 = sub_10001DC4C(v213, v196, type metadata accessor for OwnedBeaconGroup);
  uint64_t v168 = (os_log_s *)Logger.logObject.getter(v167);
  int v169 = static os_log_type_t.default.getter(v168);
  if (os_log_type_enabled(v168, (os_log_type_t)v169))
  {
    LODWORD(v213) = v169;
    uint64_t v170 = swift_slowAlloc(22LL, -1LL);
    uint64_t v212 = swift_slowAlloc(64LL, -1LL);
    uint64_t v215 = v212;
    *(_DWORD *)uint64_t v170 = 136315394;
    uint64_t v171 = *(int *)(v161 + 48);
    uint64_t v172 = v189;
    uint64_t v173 = &v189[v171];
    uint64_t v174 = (char *)v122 + v171;
    uint64_t v175 = *v122;
    *(void *)uint64_t v189 = v175;
    v164(&v172[v171], v174, v165);
    v146((uint64_t)v173, v165);
    uint64_t v176 = 0x6574617261706573LL;
    unint64_t v177 = 0xE900000000000064LL;
    uint64_t v178 = v196;
    switch(v175)
    {
      case 0LL:
        unint64_t v177 = 0xE700000000000000LL;
        uint64_t v176 = 0x6E776F6E6B6E75LL;
        break;
      case 1LL:
        break;
      case 2LL:
        unint64_t v177 = 0xE700000000000000LL;
        uint64_t v176 = 0x646570756F7267LL;
        break;
      case 3LL:
        unint64_t v177 = 0xED0000657361436ELL;
        uint64_t v176 = 0x49646570756F7267LL;
        break;
      case 4LL:
        unint64_t v177 = 0xEF657361436E4964LL;
        break;
      default:
        unint64_t v177 = 0xE700000000000000LL;
        uint64_t v176 = 0x6E776F6E6B6E75LL;
        uint64_t v178 = v196;
        break;
    }

    uint64_t v214 = sub_1003F11D4(v176, v177, &v215);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215, v170 + 4, v170 + 12);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v204, &qword_10099D440);
    *(_WORD *)(v170 + 12) = 2080;
    uint64_t v179 = type metadata accessor for UUID(0LL);
    uint64_t v180 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v181 = dispatch thunk of CustomStringConvertible.description.getter(v179, v180);
    uint64_t v214 = sub_1003F11D4(v181, v182, &v215);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215, v170 + 14, v170 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v178, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl( (void *)&_mh_execute_header,  v168,  (os_log_type_t)v213,  "Returning %s for group %s",  (uint8_t *)v170,  0x16u);
    uint64_t v183 = v212;
    swift_arrayDestroy(v212, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v183, -1LL, -1LL);
    swift_slowDealloc(v170, -1LL, -1LL);
  }

  else
  {

    sub_100018C68(v166, type metadata accessor for OwnedBeaconGroup);
    sub_100015794((uint64_t)v122, &qword_10099D440);
  }

  sub_100015794(v211, &qword_1009B28A8);
  sub_100015794((uint64_t)v200, &qword_1009B28A8);
  uint64_t v184 = &v189[*(int *)(v210 + 48)];
  uint64_t v76 = *(void *)v207;
  *(void *)uint64_t v189 = *(void *)v207;
  uint64_t v185 = v138;
  uint64_t v186 = v197;
  v140(v184, v185, v197);
  v146((uint64_t)v184, v186);
  return v76;
}

  __break(1u);
LABEL_81:
  swift_once(&qword_10099B5A8, sub_1005ADA84);
LABEL_69:
  uint64_t v90 = *(void *)(v0 + 560);
  uint64_t v91 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 576) = sub_10000A720(v91, (uint64_t)qword_100A2AD60);
  swift_retain_n(v120, 2LL);
  swift_bridgeObjectRetain(v90);
  uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
  uint64_t v94 = static os_log_type_t.default.getter(v93);
  uint64_t v95 = os_log_type_enabled(v93, v94);
  uint64_t v96 = *(void *)(v0 + 560);
  if (v95)
  {
    uint64_t v97 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v97 = 134218240;
    uint64_t v98 = *(void *)(v122 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 232) = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v97 + 4, v97 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v97 + 12) = 2048;
    swift_release();
    *(void *)(v0 + 240) = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v97 + 14, v97 + 22);
    swift_release();
    _os_log_impl( (void *)&_mh_execute_header,  v93,  v94,  "Count of wild records is %ld, count of records to publish is %ld",  (uint8_t *)v97,  0x16u);
    swift_slowDealloc(v97, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v120, 2LL);
    swift_bridgeObjectRelease_n(v96, 2LL);
  }

  if (v7[2])
  {
    uint64_t v99 = *(void *)(*(void *)(v0 + 256) + 128LL);
    char v100 = unk_1009A9D54;
    uint64_t v155 = (char *)&dword_1009A9D50 + dword_1009A9D50;
    swift_retain();
    uint64_t v101 = (void *)swift_task_alloc(v100);
    *(void *)(v0 + 584) = v101;
    *uint64_t v101 = v0;
    v101[1] = sub_1005AF900;
    return ((uint64_t (*)(void, void *, uint64_t))v155)(0LL, v7, v99);
  }

  else
  {
    swift_release();
    uint64_t v103 = swift_bridgeObjectRelease();
    uint64_t v104 = (os_log_s *)Logger.logObject.getter(v103);
    unint64_t v105 = static os_log_type_t.default.getter(v104);
    if (os_log_type_enabled(v104, v105))
    {
      os_log_type_t v106 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v106 = 0;
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "No records to publish, skip publishing.", v106, 2u);
      swift_slowDealloc(v106, -1LL, -1LL);
      swift_release();
    }

    else
    {

      swift_release();
    }

    BOOL v107 = *(void *)(v0 + 504);
    uint64_t v108 = *(void *)(v0 + 512);
    uint64_t v110 = *(void *)(v0 + 488);
    uint64_t v109 = *(void *)(v0 + 496);
    uint64_t v112 = *(void *)(v0 + 456);
    uint64_t v111 = *(void *)(v0 + 464);
    uint64_t v113 = *(void *)(v0 + 448);
    uint64_t v115 = *(void *)(v0 + 416);
    unint64_t v114 = *(void *)(v0 + 424);
    os_log_type_t v127 = *(void *)(v0 + 408);
    uint64_t v130 = *(void *)(v0 + 400);
    uint64_t v133 = *(void *)(v0 + 392);
    uint64_t v134 = *(void *)(v0 + 376);
    unint64_t v135 = *(void *)(v0 + 368);
    uint64_t v137 = *(void *)(v0 + 344);
    unint64_t v140 = *(void *)(v0 + 336);
    uint64_t v144 = *(void *)(v0 + 312);
    uint64_t v147 = *(void *)(v0 + 288);
    os_log_type_t v151 = *(void *)(v0 + 280);
    uint64_t v156 = *(void *)(v0 + 264);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 480) + 8LL))(v108, *(void *)(v0 + 472));
    swift_task_dealloc(v108);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v127);
    swift_task_dealloc(v130);
    swift_task_dealloc(v133);
    swift_task_dealloc(v134);
    swift_task_dealloc(v135);
    swift_task_dealloc(v137);
    swift_task_dealloc(v140);
    swift_task_dealloc(v144);
    swift_task_dealloc(v147);
    swift_task_dealloc(v151);
    swift_task_dealloc(v156);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v42 = sub_100004AEC(&qword_1009AED50);
  uint64_t v43 = sub_10057C608();
  uint64_t v44 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v42, v43);
  uint64_t v46 = v45;
  swift_bridgeObjectRelease();
  v47._countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._countAndFlagsBits = 93LL;
  v48._object = (void *)0xE100000000000000LL;
  String.append(_:)(v48);
  return 91LL;
}

uint64_t sub_10050EF2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharedBeaconGroup(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v20[-1] - v6;
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v20[-1] - v12;
  sub_100013044(a1, (uint64_t)v20);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009B1230);
  if (swift_dynamicCast(v13, v20, v14, v8, 0LL))
  {
    sub_10002218C((uint64_t)v13, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    uint64_t v15 = sub_10050D3D4((uint64_t)v11);
    uint64_t v16 = (uint64_t)v11;
    uint64_t v17 = type metadata accessor for OwnedBeaconGroup;
LABEL_5:
    sub_100018C68(v16, v17);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    return (uint64_t)v15;
  }

  if (swift_dynamicCast(v7, v20, v14, v2, 0LL))
  {
    sub_10002218C((uint64_t)v7, (uint64_t)v5, type metadata accessor for SharedBeaconGroup);
    uint64_t v15 = sub_10055131C();
    uint64_t v16 = (uint64_t)v5;
    uint64_t v17 = type metadata accessor for SharedBeaconGroup;
    goto LABEL_5;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001BLL,  0x800000010085C9E0LL,  "searchpartyd/BeaconStore.swift",  30LL,  2LL,  2219LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10050F124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v40 - v12;
  uint64_t v14 = static os_log_type_t.default.getter(v11);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v15 = qword_100A2B018;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v41 = a1;
  uint64_t v18 = UUID.uuidString.getter(v17);
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "ownedBeaconGroup(for uuid: %{mask.hash}@)", 41LL, 2LL, v17);
  uint64_t v21 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v10,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v6);
  uint64_t v22 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v15) = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v6, v22);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v10, v6);
  uint64_t v24 = ((uint64_t (*)(char *, uint64_t))v23)(v13, v6);
  if ((v15 & 1) != 0)
  {
    uint64_t v25 = static os_log_type_t.default.getter(v24);
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_100A2B018,  "ownedBeaconGroup call failed because in device is in beforeFirstUnlock state",  76LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v26 = type metadata accessor for OwnedBeaconGroup(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))( v44,  1LL,  1LL,  v26);
  }

  else
  {
    uint64_t v28 = *(void *)(v40[1] + 136LL);
    if (qword_10099B1B8 != -1) {
      swift_once(&qword_10099B1B8, sub_1001CFC94);
    }
    uint64_t v29 = v43;
    uint64_t v30 = sub_10000A720(v43, (uint64_t)qword_100A2A358);
    uint64_t v31 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v5, v30, v29);
    v32._object = (void *)0x800000010085B040LL;
    v32._countAndFlagsBits = 0xD000000000000014LL;
    prohibitAsyncContext(functionName:)(v32);
    uint64_t v45 = type metadata accessor for OwnedBeaconGroup(0LL);
    uint64_t v33 = sub_100004AEC(&qword_1009B2970);
    uint64_t v34 = String.init<A>(describing:)(&v45, v33);
    uint64_t v36 = v35;
    uint64_t v37 = objc_autoreleasePoolPush();
    __chkstk_darwin(v37);
    uint64_t v38 = v41;
    v40[-6] = v28;
    v40[-5] = v38;
    v40[-4] = v5;
    v40[-3] = v34;
    v40[-2] = v36;
    uint64_t v39 = sub_100004AEC(&qword_1009AA830);
    OS_dispatch_queue.sync<A>(execute:)(sub_1005717E4, &v40[-8], v39);
    objc_autoreleasePoolPop(v37);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v5, v29);
  }

uint64_t sub_10050F4B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v36 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v32 - v11;
  unsigned int v34 = static os_log_type_t.default.getter(v10);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v13 = qword_100A2B018;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v16 = MACAddress.description.getter(v15);
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_1000226F4();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v13, "ownedBeaconGroup(macAddress: %{mask.hash}@)", 43LL, 2LL, v15);
  uint64_t v19 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v19);
  uint64_t v20 = v35;
  (*(void (**)(char *, void, uint64_t))(v35 + 104))( v9,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v6);
  uint64_t v21 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(vswift_weakDestroy(v0 + 16) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v21);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v20 + 8);
  v22(v9, v6);
  uint64_t v23 = ((uint64_t (*)(char *, uint64_t))v22)(v12, v6);
  if ((v16 & 1) != 0)
  {
    uint64_t v24 = static os_log_type_t.default.getter(v23);
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_100A2B018,  "ownedBeaconGroup call failed because in device is in beforeFirstUnlock state",  76LL,  2LL,  _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v33, 1LL, 1LL, v3);
  }

  else
  {
    uint64_t v26 = sub_10050CBD8();
    uint64_t v27 = v26[2];
    uint64_t v28 = v36;
    if (v27)
    {
      uint64_t v29 = (uint64_t)v26 + ((*(unsigned __int8 *)(v36 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      uint64_t v30 = *(void *)(v36 + 72);
      while (1)
      {
        sub_10001DC4C(v29, (uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
        sub_100018C68((uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
        v29 += v30;
        if (!--v27) {
          goto LABEL_9;
        }
      }

      uint64_t v31 = v33;
      sub_10002218C((uint64_t)v5, v33, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v31, 0LL, 1LL, v3);
    }

    else
    {
LABEL_9:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v33, 1LL, 1LL, v3);
    }

    return swift_bridgeObjectRelease();
  }

uint64_t sub_10050F7D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v47 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v42 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v42 - v14;
  LODWORD(v46) = static os_log_type_t.default.getter(v13);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v45 = qword_100A2B018;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v43 = a1;
  uint64_t v18 = UUID.uuidString.getter(v17);
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)( v46,  &_mh_execute_header,  v45,  "sharedBeaconGroup(for uuid: %{mask.hash}@)",  42LL,  2LL,  v17);
  uint64_t v21 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v12,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v8);
  uint64_t v22 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v18) = dispatch thunk of static Equatable.== infix(_:_:)(v15, v12, v8, v22);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v12, v8);
  uint64_t v24 = ((uint64_t (*)(char *, uint64_t))v23)(v15, v8);
  if ((v18 & 1) == 0)
  {
    uint64_t v26 = sub_1005073E4();
    __chkstk_darwin(v26);
    *(&v42 - 2) = v43;
    uint64_t v28 = sub_100023CB8((uint64_t (*)(char *))sub_10056AF50, &v42 - 4, v27);
    int64_t v29 = *(void *)(v28 + 16);
    if (v29)
    {
      uint64_t v49 = _swiftEmptyArrayStorage;
      sub_1000328D0(0, v29, 0);
      uint64_t v30 = *(unsigned __int8 *)(v42 + 80);
      uint64_t v46 = v28;
      uint64_t v31 = v28 + ((v30 + 32) & ~v30);
      uint64_t v32 = *(void *)(v42 + 72);
      uint64_t v33 = v48;
      do
      {
        sub_10001DC4C(v31, (uint64_t)v4, type metadata accessor for SharedBeaconRecord);
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v4[*(int *)(v47 + 20)], v33);
        sub_100018C68((uint64_t)v4, type metadata accessor for SharedBeaconRecord);
        unsigned int v34 = v49;
        if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
        {
          sub_1000328D0(0, v34[2] + 1LL, 1);
          unsigned int v34 = v49;
        }

        unint64_t v36 = v34[2];
        unint64_t v35 = v34[3];
        if (v36 >= v35 >> 1)
        {
          sub_1000328D0(v35 > 1, v36 + 1, 1);
          unsigned int v34 = v49;
        }

        v34[2] = v36 + 1;
        uint64_t v33 = v48;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))( (unint64_t)v34 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + *(void *)(v5 + 72) * v36,
          v7,
          v48);
        uint64_t v49 = v34;
        v31 += v32;
        --v29;
      }

      while (v29);
      swift_bridgeObjectRelease();
      if (v34[2]) {
        goto LABEL_13;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      unsigned int v34 = _swiftEmptyArrayStorage;
      uint64_t v33 = v48;
      if (_swiftEmptyArrayStorage[2])
      {
LABEL_13:
        uint64_t v37 = v44;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v44, v43, v33);
        uint64_t v38 = sub_1006F1060((uint64_t)v34);
        swift_bridgeObjectRelease();
        uint64_t v39 = type metadata accessor for SharedBeaconGroup(0LL);
        *(void *)(v37 + *(int *)(v39 + 20)) = v38;
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))( v37,  0LL,  1LL,  v39);
      }
    }

    swift_bridgeObjectRelease();
    goto LABEL_16;
  }

  uint64_t v25 = static os_log_type_t.default.getter(v24);
  os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_100A2B018,  "sharedBeaconGroup call failed because in device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_16:
  uint64_t v41 = type metadata accessor for SharedBeaconGroup(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))( v44,  1LL,  1LL,  v41);
}

uint64_t sub_10050FC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v29 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v30 = (uint64_t)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v29 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = type metadata accessor for SharedBeaconRecord(0LL);
  sub_10001581C(a1 + *(int *)(v18 + 76), (uint64_t)v17, &qword_10099D8A0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v15, a2, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v15, 0LL, 1LL, v4);
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10001581C((uint64_t)v17, (uint64_t)v9, &qword_10099D8A0);
  sub_10001581C((uint64_t)v15, v19, &qword_10099D8A0);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v9, 1LL, v4) == 1)
  {
    sub_100015794((uint64_t)v15, &qword_10099D8A0);
    sub_100015794((uint64_t)v17, &qword_10099D8A0);
    int v21 = v20(v19, 1LL, v4);
    if (v21 == 1) {
      uint64_t v22 = &qword_10099D8A0;
    }
    else {
      uint64_t v22 = (uint64_t *)&unk_1009B5370;
    }
    if (v21 == 1) {
      char v23 = -1;
    }
    else {
      char v23 = 0;
    }
  }

  else
  {
    uint64_t v24 = v30;
    sub_10001581C((uint64_t)v9, v30, &qword_10099D8A0);
    if (v20(v19, 1LL, v4) == 1)
    {
      sub_100015794((uint64_t)v15, &qword_10099D8A0);
      sub_100015794((uint64_t)v17, &qword_10099D8A0);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v24, v4);
      char v23 = 0;
      uint64_t v22 = (uint64_t *)&unk_1009B5370;
    }

    else
    {
      uint64_t v25 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v29, v19, v4);
      uint64_t v26 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v24, v25, v4, v26);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
      v27(v25, v4);
      uint64_t v22 = &qword_10099D8A0;
      sub_100015794((uint64_t)v15, &qword_10099D8A0);
      sub_100015794((uint64_t)v17, &qword_10099D8A0);
      v27((char *)v24, v4);
    }
  }

  sub_100015794((uint64_t)v9, v22);
  return v23 & 1;
}

uint64_t sub_10050FF80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_10099E378);
  __chkstk_darwin(v5);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v8._object = (void *)0x800000010085B900LL;
  v8._countAndFlagsBits = 0xD000000000000015LL;
  prohibitAsyncContext(functionName:)(v8);
  uint64_t v16 = v2;
  uint64_t v17 = a1;
  OS_dispatch_queue.sync<A>(execute:)(sub_1002DDFC0, v15, v5);
  uint64_t v9 = sub_100004AEC(&qword_10099E380);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v7, 1LL, v9) == 1)
  {
    sub_100015794((uint64_t)v7, &qword_10099E378);
    uint64_t v10 = sub_100004AEC(&qword_1009A7D40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))( a2,  1LL,  1LL,  v10);
  }

  else
  {
    char v12 = v7[*(int *)(v9 + 48)];
    uint64_t v13 = sub_100004AEC(&qword_1009A7D40);
    uint64_t v14 = *(int *)(v13 + 48);
    sub_10002218C((uint64_t)v7, a2, type metadata accessor for BeaconStatus);
    *(_BYTE *)(a2 + v14) = v12;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))( a2,  0LL,  1LL,  v13);
  }

uint64_t sub_1005100F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 272);
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain(v6);
    unint64_t v7 = sub_10030D124(a2);
    if ((v8 & 1) != 0)
    {
      unint64_t v9 = v7;
      uint64_t v10 = *(void *)(v6 + 56);
      uint64_t v11 = sub_100004AEC(&qword_10099E380);
      uint64_t v12 = *(void *)(v11 - 8);
      sub_10001581C(v10 + *(void *)(v12 + 72) * v9, a3, &qword_10099E380);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a3, 0LL, 1LL, v11);
    }

    else
    {
      uint64_t v15 = sub_100004AEC(&qword_10099E380);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(a3, 1LL, 1LL, v15);
    }

    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v13 = sub_100004AEC(&qword_10099E380);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))( a3,  1LL,  1LL,  v13);
  }

uint64_t sub_100510218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v57 = a2;
  int v50 = a6;
  int v51 = a7;
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v44 = a3;
  uint64_t v49 = a1;
  uint64_t v53 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v56 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v43 + 64);
  __chkstk_darwin(v10);
  uint64_t v41 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v42 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v39 = v15;
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = *(void *)(v57 + 264);
  (*(void (**)(char *, uint64_t))(v16 + 16))(v18, v44);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))( (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v45,  v12);
  sub_10001DC4C(v46, (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for BeaconStatus);
  uint64_t v19 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v20 = (v19 + 24) & ~v19;
  uint64_t v21 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v22 = (v17 + v21 + v20) & ~v21;
  uint64_t v23 = *(unsigned __int8 *)(v43 + 80);
  uint64_t v24 = (v14 + v23 + v22) & ~v23;
  uint64_t v25 = v24 + v11;
  unint64_t v26 = (v24 + v11 + 9) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v27 = swift_allocObject(&unk_1009627E0, v26 + 8, v19 | v21 | v23 | 7);
  *(void *)(v27 + swift_weakDestroy(v0 + 16) = v57;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v27 + v20, v18, v39);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v27 + v22, v42, v40);
  sub_10002218C(v41, v27 + v24, type metadata accessor for BeaconStatus);
  uint64_t v28 = (_BYTE *)(v27 + v25);
  _BYTE *v28 = v50;
  v28[1] = v51;
  *(void *)(v27 + v26) = v49;
  aBlock[4] = sub_10056BEF8;
  void aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_1009627F8;
  int64_t v29 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v30 = swift_retain();
  uint64_t v31 = v48;
  static DispatchQoS.unspecified.getter(v30);
  uint64_t v59 = _swiftEmptyArrayStorage;
  uint64_t v32 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v33 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v34 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v35 = v52;
  uint64_t v36 = v33;
  uint64_t v37 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v36, v34, v53, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v31, v35, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v37);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v31, v55);
  return swift_release();
}

uint64_t sub_1005105F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, void *a7)
{
  unsigned int v156 = a6;
  int v162 = a5;
  uint64_t v176 = a3;
  uint64_t v155 = a7;
  uint64_t v154 = *a7;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v10);
  unint64_t v158 = (char *)&v147 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v157 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v168 = (char *)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v151 = (uint64_t)&v147 - v15;
  uint64_t v16 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v16);
  uint64_t v167 = (uint64_t)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v179 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v18 = *(void *)(v179 - 8);
  uint64_t v19 = __chkstk_darwin(v179);
  uint64_t v153 = (uint64_t)&v147 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v149 = (uint64_t)&v147 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v170 = (uint64_t)&v147 - v24;
  uint64_t v152 = v25;
  __chkstk_darwin(v23);
  uint64_t v166 = (uint64_t)&v147 - v26;
  uint64_t v164 = type metadata accessor for UUID(0LL);
  uint64_t v173 = *(void *)(v164 - 8);
  uint64_t v27 = __chkstk_darwin(v164);
  uint64_t v163 = (char *)&v147 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  os_log_t v161 = (os_log_t)((char *)&v147 - v29);
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v30);
  uint64_t v172 = (char *)&v147 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v178 = type metadata accessor for Date(0LL);
  uint64_t v180 = *(uint64_t (***)(char *, uint64_t, uint64_t, uint64_t))(v178 - 8);
  uint64_t v32 = __chkstk_darwin(v178);
  uint64_t v165 = (char *)&v147 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v32);
  unint64_t v35 = (char *)&v147 - v34;
  uint64_t v36 = sub_100004AEC(&qword_10099E378);
  uint64_t v37 = __chkstk_darwin(v36);
  uint64_t v160 = (uint64_t)&v147 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v37);
  uint64_t v40 = (char *)&v147 - v39;
  uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AE450);
  uint64_t v42 = __chkstk_darwin(v41);
  uint64_t v150 = (uint64_t)&v147 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v147 - v45;
  __chkstk_darwin(v44);
  uint64_t v48 = (__int128 *)((char *)&v147 - v47);
  uint64_t v159 = a1 + 272;
  swift_beginAccess(a1 + 272, v184, 0LL, 0LL);
  uint64_t v49 = *(void *)(a1 + 272);
  uint64_t v50 = *(void *)(v49 + 16);
  unint64_t v177 = v48;
  uint64_t v169 = v12;
  uint64_t v175 = a2;
  if (v50)
  {
    swift_bridgeObjectRetain(v49);
    unint64_t v51 = sub_10030D124(a2);
    if ((v52 & 1) != 0)
    {
      unint64_t v53 = v51;
      uint64_t v54 = a1;
      uint64_t v55 = a4;
      uint64_t v56 = *(void *)(v49 + 56);
      uint64_t v57 = sub_100004AEC(&qword_10099E380);
      uint64_t v171 = v35;
      uint64_t v58 = v18;
      uint64_t v59 = *(void *)(v57 - 8);
      uint64_t v60 = v56 + *(void *)(v59 + 72) * v53;
      a4 = v55;
      a1 = v54;
      sub_10001581C(v60, (uint64_t)v40, &qword_10099E380);
      uint64_t v61 = *(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56);
      uint64_t v18 = v58;
      unint64_t v35 = v171;
      uint64_t v62 = v57;
      uint64_t v48 = v177;
      v61(v40, 0LL, 1LL, v62);
    }

    else
    {
      uint64_t v64 = sub_100004AEC(&qword_10099E380);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56LL))(v40, 1LL, 1LL, v64);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v63 = sub_100004AEC(&qword_10099E380);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56LL))(v40, 1LL, 1LL, v63);
  }

  uint64_t v174 = a1;
  uint64_t v65 = sub_100004AEC(&qword_10099E380);
  uint64_t v66 = *(void *)(v65 - 8);
  uint64_t v67 = 1LL;
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v40, 1LL, v65))
  {
    sub_10001DC4C((uint64_t)v40, (uint64_t)v48, type metadata accessor for BeaconStatus);
    uint64_t v67 = 0LL;
  }

  uint64_t v68 = a4;
  sub_100015794((uint64_t)v40, &qword_10099E378);
  uint64_t v69 = v179;
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v48, v67, 1LL, v179);
  sub_10001581C((uint64_t)v48, (uint64_t)v46, (uint64_t *)&unk_1009AE450);
  uint64_t v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v70(v46, 1LL, v69) == 1)
  {
    sub_100015794((uint64_t)v46, (uint64_t *)&unk_1009AE450);
    uint64_t v71 = (uint64_t)v172;
    uint64_t v72 = v178;
    uint64_t v73 = v180[7](v172, 1LL, 1LL, v178);
    uint64_t v74 = v175;
LABEL_12:
    static Date.distantPast.getter(v73);
    sub_100015794(v71, (uint64_t *)&unk_10099D720);
    goto LABEL_14;
  }

  uint64_t v75 = &v46[*(int *)(v69 + 24)];
  uint64_t v76 = v180;
  uint64_t v71 = (uint64_t)v172;
  uint64_t v72 = v178;
  ((void (*)(char *, char *, uint64_t))v180[2])(v172, v75, v178);
  uint64_t v77 = (uint64_t)v46;
  uint64_t v78 = v76;
  sub_100018C68(v77, type metadata accessor for BeaconStatus);
  v76[7]((char *)v71, 0LL, 1LL, v72);
  uint64_t v73 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v76[6])(v71, 1LL, v72);
  uint64_t v74 = v175;
  if ((_DWORD)v73 == 1) {
    goto LABEL_12;
  }
  ((void (*)(char *, uint64_t, uint64_t))v78[4])(v35, v71, v72);
LABEL_14:
  if ((static Date.> infix(_:_:)(v176, v35) & 1) == 0)
  {
    ((void (*)(char *, uint64_t))v180[1])(v35, v72);
LABEL_53:
    uint64_t v131 = (uint64_t *)&unk_1009AE450;
    uint64_t v132 = v177;
    return sub_100015794((uint64_t)v132, v131);
  }

  uint64_t v172 = (char *)v70;
  uint64_t v171 = v35;
  uint64_t v148 = v18;
  uint64_t v79 = *(void (**)(os_log_t, uint64_t, uint64_t))(v173 + 16);
  os_log_t v80 = v161;
  uint64_t v81 = v164;
  v79(v161, v74, v164);
  uint64_t v82 = *(int *)(v65 + 48);
  uint64_t v83 = v68;
  uint64_t v84 = v160;
  sub_10001DC4C(v68, v160, type metadata accessor for BeaconStatus);
  *(_BYTE *)(v84 + v82) = v162;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v84, 0LL, 1LL, v65);
  swift_beginAccess(v159, &v183, 33LL, 0LL);
  sub_100045C18(v84, (uint64_t)v80);
  swift_endAccess(&v183);
  uint64_t v85 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v183, v85);
  swift_release();
  int v162 = v183;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v86 = type metadata accessor for Logger(0LL);
  sub_10000A720(v86, (uint64_t)qword_100A2AC98);
  uint64_t v87 = v163;
  v79((os_log_t)v163, v74, v81);
  uint64_t v88 = v165;
  uint64_t v89 = v178;
  ((void (*)(char *, uint64_t, uint64_t))v180[2])(v165, v176, v178);
  uint64_t v90 = v166;
  sub_10001DC4C(v83, v166, type metadata accessor for BeaconStatus);
  uint64_t v176 = v83;
  uint64_t v91 = v170;
  uint64_t v92 = sub_10001DC4C(v83, v170, type metadata accessor for BeaconStatus);
  uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
  int v94 = static os_log_type_t.info.getter(v93);
  if (os_log_type_enabled(v93, (os_log_type_t)v94))
  {
    LODWORD(v160) = v94;
    os_log_t v161 = v93;
    uint64_t v95 = swift_slowAlloc(68LL, -1LL);
    uint64_t v159 = swift_slowAlloc(128LL, -1LL);
    uint64_t v183 = v159;
    *(_DWORD *)uint64_t v95 = 141559555;
    *(void *)&__int128 v181 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 8, v95 + 4, v95 + 12);
    *(_WORD *)(v95 + 12) = 2081;
    uint64_t v96 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v97 = dispatch thunk of CustomStringConvertible.description.getter(v81, v96);
    *(void *)&__int128 v181 = sub_1003F11D4(v97, v98, &v183);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 8, v95 + 14, v95 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v173 + 8))(v87, v81);
    *(_WORD *)(v95 + 22) = 2082;
    uint64_t v99 = sub_100040BA4(v156);
    *(void *)&__int128 v181 = sub_1003F11D4(v99, v100, &v183);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 8, v95 + 24, v95 + 32);
    swift_bridgeObjectRelease();
    *(_WORD *)(v95 + 32) = 2082;
    uint64_t v101 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter(v89, v101);
    *(void *)&__int128 v181 = sub_1003F11D4(v102, v103, &v183);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 8, v95 + 34, v95 + 42);
    swift_bridgeObjectRelease();
    uint64_t v104 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v180[1];
    ((void (*)(char *, uint64_t))v104)(v88, v89);
    *(_WORD *)(v95 + 42) = 2082;
    uint64_t v105 = *(unsigned __int8 *)(v90 + *(int *)(v179 + 28));
    if (v105 == 3)
    {
      unint64_t v106 = 0xE400000000000000LL;
      uint64_t v107 = 1701736302LL;
      uint64_t v108 = (uint64_t)v168;
    }

    else
    {
      uint64_t v108 = (uint64_t)v168;
      if (*(_BYTE *)(v90 + *(int *)(v179 + 28)))
      {
        if ((_DWORD)v105 == 1)
        {
          unint64_t v106 = 0xEA00000000007972LL;
          uint64_t v107 = 0x61646E6F6365732ELL;
        }

        else
        {
          unint64_t v106 = 0x80000001008533C0LL;
          uint64_t v107 = 0xD000000000000010LL;
        }
      }

      else
      {
        unint64_t v106 = 0xE800000000000000LL;
        uint64_t v107 = 0x7972616D6972702ELL;
      }
    }

    *(void *)&__int128 v181 = sub_1003F11D4(v107, v106, &v183);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 8, v95 + 44, v95 + 52);
    swift_bridgeObjectRelease();
    sub_100018C68(v90, type metadata accessor for BeaconStatus);
    *(_WORD *)(v95 + 52) = 2048;
    uint64_t v110 = (unsigned __int8 *)(v170 + *(int *)(v179 + 28));
    uint64_t v111 = *v110;
    uint64_t v112 = *((void *)v110 + 1);
    if (v111 == 3) {
      uint64_t v113 = 0LL;
    }
    else {
      uint64_t v113 = v112;
    }
    sub_100018C68(v170, type metadata accessor for BeaconStatus);
    *(void *)&__int128 v181 = v113;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 8, v95 + 54, v95 + 62);
    *(_WORD *)(v95 + 62) = 1024;
    LODWORD(v181) = v162;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, (char *)&v181 + 4, v95 + 64, v95 + 68);
    os_log_t v114 = v161;
    _os_log_impl( (void *)&_mh_execute_header,  v161,  (os_log_type_t)v160,  "Latest type18 for %{private,mask.hash}s: %{public}s,scanDate: %{public}s,sequence: %{public}s,index: %llu, appActive: %{BOOL}d.",  (uint8_t *)v95,  0x44u);
    uint64_t v115 = v159;
    swift_arrayDestroy(v159, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1LL, -1LL);
    swift_slowDealloc(v95, -1LL, -1LL);

    uint64_t v74 = v175;
    uint64_t v109 = v178;
  }

  else
  {
    sub_100018C68(v91, type metadata accessor for BeaconStatus);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v87, v81);
    uint64_t v104 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v180[1];
    ((void (*)(char *, uint64_t))v104)(v88, v89);
    sub_100018C68(v90, type metadata accessor for BeaconStatus);

    uint64_t v108 = (uint64_t)v168;
    uint64_t v109 = v89;
  }

  uint64_t v116 = v167;
  sub_10050BDEC(v74, v167);
  uint64_t v117 = type metadata accessor for WildModeAssociationRecord(0LL);
  int v118 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 48LL))(v116, 1LL, v117);
  sub_100015794(v116, &qword_1009A4890);
  uint64_t v119 = v171;
  uint64_t v120 = v169;
  int v121 = v172;
  if (v118 != 1) {
    sub_1004E97E0();
  }
  sub_100504C28(v74, (uint64_t)&v181);
  uint64_t v122 = v179;
  if (v182)
  {
    sub_100012EC0(&v181, (uint64_t)&v183);
    sub_100013044((uint64_t)&v183, (uint64_t)&v181);
    uint64_t v123 = sub_100004AEC(&qword_1009B0530);
    uint64_t v124 = (uint64_t)v158;
    char v125 = swift_dynamicCast(v158, &v181, v123, v120, 6LL);
    uint64_t v126 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56);
    if ((v125 & 1) != 0)
    {
      uint64_t v180 = v104;
      v126(v124, 0LL, 1LL, v120);
      uint64_t v127 = v124;
      uint64_t v128 = v151;
      sub_10002218C(v127, v151, type metadata accessor for SharedBeaconRecord);
      unsigned int v129 = *(unsigned __int8 *)(v128 + *(int *)(v120 + 64));
      sub_10002218C(v128, v108, type metadata accessor for SharedBeaconRecord);
      if (v129 >= 3)
      {
        sub_100018C68(v108, type metadata accessor for SharedBeaconRecord);
        uint64_t v104 = v180;
LABEL_46:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v183);
        uint64_t v136 = v119;
LABEL_52:
        ((void (*)(char *, uint64_t))v104)(v136, v109);
        goto LABEL_53;
      }

      int v130 = *(unsigned __int8 *)(v108 + *(int *)(v120 + 64));
      sub_100018C68(v108, type metadata accessor for SharedBeaconRecord);
      uint64_t v104 = v180;
      if (v130 == 1) {
        goto LABEL_46;
      }
    }

    else
    {
      v126(v124, 1LL, 1LL, v120);
      sub_100015794(v124, (uint64_t *)&unk_1009AE470);
    }

    uint64_t v133 = (uint64_t)v177;
    if (((unsigned int (*)(__int128 *, uint64_t, uint64_t))v121)(v177, 1LL, v122) == 1)
    {
      if ((v162 & 1) == 0) {
        goto LABEL_50;
      }
    }

    else
    {
      uint64_t v134 = v150;
      sub_10001581C(v133, v150, (uint64_t *)&unk_1009AE450);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v121)(v134, 1LL, v122) == 1)
      {
        sub_100015794(v134, (uint64_t *)&unk_1009AE450);
        BOOL v135 = 0;
LABEL_51:
        sub_100013044((uint64_t)&v183, (uint64_t)&v181);
        uint64_t v142 = v153;
        sub_10001DC4C(v176, v153, type metadata accessor for BeaconStatus);
        uint64_t v143 = *(unsigned __int8 *)(v148 + 80);
        uint64_t v144 = (v143 + 64) & ~v143;
        uint64_t v145 = swift_allocObject(&unk_100962830, v144 + v152, v143 | 7);
        *(_BYTE *)(v145 + swift_weakDestroy(v0 + 16) = v135;
        sub_100012EC0(&v181, v145 + 24);
        sub_10002218C(v142, v145 + v144, type metadata accessor for BeaconStatus);
        static Transaction.asyncTask(name:block:)("SimpleBeaconStatusUpdate", 24LL, 2LL, &unk_1009B2B60, v145);
        swift_release();
        Transaction.capture()();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v183);
        uint64_t v136 = v171;
        goto LABEL_52;
      }

      uint64_t v137 = v134;
      uint64_t v138 = v149;
      sub_10002218C(v137, v149, type metadata accessor for BeaconStatus);
      int v139 = *(unsigned __int8 *)(v138 + *(int *)(v122 + 20));
      sub_100018C68(v138, type metadata accessor for BeaconStatus);
      int v140 = *(unsigned __int8 *)(v176 + *(int *)(v122 + 20));
      BOOL v141 = v139 == v140;
      BOOL v135 = v139 != v140;
      if (v141 || !v162) {
        goto LABEL_51;
      }
    }

    sub_1004E696C(0x18u);
LABEL_50:
    BOOL v135 = 1;
    goto LABEL_51;
  }

  ((void (*)(char *, uint64_t))v104)(v119, v109);
  sub_100015794((uint64_t)v177, (uint64_t *)&unk_1009AE450);
  uint64_t v131 = (uint64_t *)&unk_1009A9C40;
  uint64_t v132 = &v181;
  return sub_100015794((uint64_t)v132, v131);
}

uint64_t sub_1005115D4(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 2swift_unknownObjectUnownedDestroy(v0 + 24) = a2;
  *(void *)(v3 + 232) = a3;
  *(_BYTE *)(v3 + 296) = a1;
  return swift_task_switch(sub_1005115F0, 0LL, 0LL);
}

uint64_t sub_1005115F0()
{
  if (*(_BYTE *)(v0 + 296) == 1)
  {
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 200, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 160))
    {
      sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
      sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C8F0 + dword_10099C8F0);
      uint64_t v2 = (void *)swift_task_alloc(unk_10099C8F4);
      *(void *)(v0 + 240) = v2;
      uint64_t v3 = sub_1005117A0;
LABEL_10:
      *uint64_t v2 = v0;
      v2[1] = v3;
      return v4();
    }

    __break(1u);
  }

  else
  {
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 80))
    {
      sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
      sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C998 + dword_10099C998);
      uint64_t v2 = (void *)swift_task_alloc(unk_10099C99C);
      *(void *)(v0 + 272) = v2;
      uint64_t v3 = sub_100511B5C;
      goto LABEL_10;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1005117A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240LL);
  *(void *)(*(void *)v1 + 248LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005117FC, 0LL, 0LL);
}

uint64_t sub_1005117FC()
{
  uint64_t v1 = (void *)(v0 + 96);
  if (*(void *)(v0 + 248))
  {
    uint64_t v2 = *(void **)(v0 + 224);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
    uint64_t v4 = type metadata accessor for UUID(0LL);
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = (v7 + 32) & ~v7;
    uint64_t v9 = swift_allocObject(v3, v8 + v6, v7 | 7);
    *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v10 = v2[3];
    uint64_t v11 = v2[4];
    sub_100012ED8(v2, v10);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 8) + 8LL) + 32LL))(v10);
    uint64_t v12 = sub_100768C98(v9);
    *(void *)(v0 + 256) = v12;
    swift_setDeallocating(v9);
    swift_arrayDestroy(v9 + v8, 1LL, v4);
    swift_deallocClassInstance(v9, 32LL, 7LL);
    uint64_t v13 = (void *)swift_task_alloc(dword_1009AE1CC);
    *(void *)(v0 + 264) = v13;
    void *v13 = v0;
    v13[1] = sub_100511A0C;
    return sub_10043DFEC((uint64_t)v12);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 80))
    {
      sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
      sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v16 = (uint64_t (__cdecl *)())((char *)&dword_10099C998 + dword_10099C998);
      uint64_t v15 = (void *)swift_task_alloc(unk_10099C99C);
      *(void *)(v0 + 272) = v15;
      void *v15 = v0;
      v15[1] = sub_100511B5C;
      return v16();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100511A0C()
{
  return swift_task_switch(sub_100511A68, 0LL, 0LL);
}

uint64_t sub_100511A68()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C998 + dword_10099C998);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C99C);
    *(void *)(v0 + 272) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100511B5C;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100511B5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 272LL);
  *(void *)(*(void *)v1 + 28Hasher.init(_seed:)(v5, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100511BB8, 0LL, 0LL);
}

uint64_t sub_100511BB8()
{
  uint64_t v1 = *(void *)(v0 + 280);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (!v1) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v2 = *(void *)(v0 + 232);
  int v3 = *(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for BeaconStatus(0LL) + 20)) >> 6;
  if (v3 == 3) {
    char v4 = 5;
  }
  else {
    char v4 = 0x40201u >> (8 * v3);
  }
  uint64_t v5 = dword_1009BAE34;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc(v5);
  *(void *)(v0 + 288) = v6;
  void *v6 = v0;
  v6[1] = sub_100511C7C;
  return sub_10068D674(*(void *)(v0 + 224), v4);
}

uint64_t sub_100511C7C()
{
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v2 = sub_100571C60;
  }

  else
  {
    uint64_t v2 = sub_100511CF0;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100511CF0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100511D20(uint64_t a1)
{
  v1[20] = a1;
  uint64_t v2 = type metadata accessor for Date(0LL);
  v1[21] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[22] = v3;
  v1[23] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for BeaconStatus(0LL);
  v1[24] = v4;
  v1[25] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009AA730);
  v1[26] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  v1[27] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[28] = v7;
  v1[29] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099FB70);
  v1[30] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ObservedAdvertisement(0LL);
  v1[31] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v1[32] = v10;
  v1[33] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BeaconIdentifier(0LL);
  v1[34] = v11;
  v1[35] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  v1[36] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v1[37] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[38] = swift_task_alloc(v14);
  v1[39] = swift_task_alloc(v14);
  v1[40] = swift_task_alloc(v14);
  v1[41] = swift_task_alloc(v14);
  uint64_t v15 = sub_100004AEC(&qword_10099D8A0);
  v1[42] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100511ED4, 0LL, 0LL);
}

uint64_t sub_100511ED4()
{
  if (qword_10099B890 != -1) {
    swift_once(&qword_10099B890, sub_1006D9D34);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 344) = v1;
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2B2A8);
  *(void *)(v0 + 352) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "readLatestBeaconStatusObservations called.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = qword_10099B9E0;
  swift_retain();
  if (v6 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v8 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 360) = v8;
    void *v8 = v0;
    v8[1] = sub_100512094;
    return v9();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100512094(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 360LL);
  *(void *)(*(void *)v1 + 368LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005120F0, 0LL, 0LL);
}

uint64_t sub_1005120F0()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 368))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc(v2);
    *(void *)(v0 + 376) = v3;
    uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B81E0);
    *uint64_t v3 = v0;
    v3[1] = sub_1005122B8;
    return unsafeBlocking<A>(_:)(v0 + 144, sub_10056BDC0, *(void *)(v0 + 160), v4);
  }

  else
  {
    uint64_t v6 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "readLatestBeaconStatusObservations could not get the ObservationStoreService.",  v9,  2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = *(void *)(v0 + 328);
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v11 = *(void *)(v0 + 320);
    uint64_t v13 = *(void *)(v0 + 304);
    uint64_t v14 = *(void *)(v0 + 280);
    uint64_t v15 = *(void *)(v0 + 264);
    uint64_t v17 = *(void *)(v0 + 232);
    uint64_t v16 = *(void *)(v0 + 240);
    uint64_t v18 = *(void *)(v0 + 208);
    uint64_t v19 = *(void *)(v0 + 200);
    uint64_t v20 = *(void *)(v0 + 184);
    swift_task_dealloc(*(void *)(v0 + 336));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1005122B8()
{
  return swift_task_switch(sub_100512318, 0LL, 0LL);
}

uint64_t sub_100512318()
{
  uint64_t v1 = *(void *)(v0 + 144);
  *(void *)(v0 + 384) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 392) = v2;
  if (!v2)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 296) + 56LL))( *(void *)(v0 + 336),  1LL,  1LL,  *(void *)(v0 + 288));
LABEL_5:
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v9 = *(void *)(v0 + 328);
    uint64_t v11 = *(void *)(v0 + 312);
    uint64_t v10 = *(void *)(v0 + 320);
    uint64_t v12 = *(void *)(v0 + 304);
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v14 = *(void *)(v0 + 264);
    uint64_t v16 = *(void *)(v0 + 232);
    uint64_t v15 = *(void *)(v0 + 240);
    uint64_t v17 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 200);
    uint64_t v28 = *(void *)(v0 + 184);
    swift_task_dealloc(*(void *)(v0 + 336));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 296);
  int v5 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 464) = v5;
  *(void *)(v0 + 400) = *(void *)(v4 + 72);
  uint64_t v6 = *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v0 + 4swift_unknownObjectUnownedDestroy(v0 + 24) = 0LL;
  *(void *)(v0 + 408) = v6;
  uint64_t v7 = *(void *)(v0 + 336);
  v6(v7, v1 + ((v5 + 32LL) & ~(unint64_t)v5), v3);
  os_log_type_t v8 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
  *(void *)(v0 + 432) = v8;
  v8(v7, 0LL, 1LL, v3);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
  uint64_t v21 = *(void *)(v0 + 328);
  uint64_t v20 = *(void *)(v0 + 336);
  uint64_t v22 = *(void *)(v0 + 288);
  uint64_t v24 = *(void *)(v0 + 272);
  uint64_t v23 = *(void *)(v0 + 280);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 296) + 32LL);
  *(void *)(v0 + 440) = v25;
  v25(v21, v20, v22);
  uid_t v26 = getuid();
  sub_1005E2270(v26);
  v19(v23 + *(int *)(v24 + 20), v21, v22);
  return swift_task_switch(sub_100512518, *(void *)(v0 + 368), 0LL);
}

uint64_t sub_100512518()
{
  uint64_t v1 = *(void *)(v0[46] + 128LL);
  if (!v1)
  {
    if (qword_10099B888 != -1) {
      swift_once(&qword_10099B888, sub_1006D6C7C);
    }
    uint64_t v7 = sub_10000A720(v0[43], (uint64_t)qword_1009BCAF8);
    os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.fault.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No observation store on this platform!", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    unint64_t v11 = sub_10023B3D4();
    uint64_t v5 = swift_allocError(&type metadata for ObservationStoreService.ObservationStoreServiceError, v11, 0LL, 0LL);
    swift_willThrow(v5);
    goto LABEL_9;
  }

  uint64_t v2 = v0[52];
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[30];
  swift_retain();
  sub_10007BD98(v3, v1, v4);
  uint64_t v5 = v2;
  v0[56] = v2;
  swift_release();
  if (v2)
  {
LABEL_9:
    v0[57] = v5;
    uint64_t v6 = sub_100512C98;
    return swift_task_switch(v6, 0LL, 0LL);
  }

  uint64_t v6 = sub_100512680;
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100512680()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 256) + 48LL))(v2, 1LL, v1) == 1)
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
    uint64_t v4 = *(void *)(v0 + 328);
    uint64_t v5 = *(void *)(v0 + 312);
    uint64_t v6 = *(void *)(v0 + 288);
    sub_100015794(v2, &qword_10099FB70);
    uint64_t v7 = v3(v5, v4, v6);
    os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 328);
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v14 = *(void *)(v0 + 288);
    uint64_t v13 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 280);
    if (v10)
    {
      uint64_t v80 = *(void *)(v0 + 328);
      uint64_t v16 = swift_slowAlloc(22LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v83 = v17;
      *(_DWORD *)uint64_t v16 = 141558275;
      *(void *)(v16 + 4) = 1752392040LL;
      *(_WORD *)(v16 + 12) = 2081;
      uint64_t v18 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v14, v18);
      *(void *)(v16 + 14) = sub_1003F11D4(v19, v20, &v83);
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v21(v12, v14);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "No latest advertisement read from ObservationService beacon: %{private,mask.hash}s.",  (uint8_t *)v16,  0x16u);
      swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);

      sub_100018C68(v15, type metadata accessor for BeaconIdentifier);
      uint64_t v22 = v80;
    }

    else
    {

      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v21(v12, v14);
      sub_100018C68(v15, type metadata accessor for BeaconIdentifier);
      uint64_t v22 = v11;
    }

    v21(v22, v14);
    uint64_t v28 = *(void *)(v0 + 448);
  }

  else
  {
    uint64_t v23 = *(void *)(v0 + 264);
    uint64_t v24 = *(void *)(v0 + 216);
    uint64_t v25 = *(void *)(v0 + 224);
    uint64_t v26 = *(void *)(v0 + 208);
    sub_10002218C(v2, v23, type metadata accessor for ObservedAdvertisement);
    sub_10001581C(v23 + *(int *)(v1 + 52), v26, &qword_1009AA730);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1LL, v24) == 1)
    {
      sub_100015794(*(void *)(v0 + 208), &qword_1009AA730);
      uint64_t v72 = 0LL;
      uint64_t v27 = 3LL;
    }

    else
    {
      uint64_t v29 = *(void *)(v0 + 232);
      uint64_t v30 = *(void *)(v0 + 216);
      sub_10002218C(*(void *)(v0 + 208), v29, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      unsigned __int8 v31 = *(_BYTE *)(v29 + *(int *)(v30 + 20));
      uint64_t v72 = *(void *)(v29 + *(int *)(v30 + 24));
      sub_100018C68(v29, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      uint64_t v27 = v31;
    }

    uint64_t v75 = v27;
    uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
    uint64_t v76 = *(void *)(v0 + 448);
    uint64_t v77 = *(void *)(v0 + 328);
    uint64_t v32 = *(void *)(v0 + 304);
    uint64_t v33 = *(void *)(v0 + 288);
    uint64_t v78 = *(void *)(v0 + 280);
    uint64_t v81 = *(void *)(v0 + 296);
    uint64_t v34 = *(void *)(v0 + 264);
    uint64_t v35 = *(void *)(v0 + 248);
    uint64_t v36 = *(int **)(v0 + 192);
    uint64_t v37 = *(void *)(v0 + 200);
    uint64_t v38 = *(void *)(v0 + 176);
    uint64_t v39 = *(void *)(v0 + 184);
    uint64_t v40 = *(void *)(v0 + 168);
    uint64_t v74 = *(void *)(v0 + 160);
    BOOL v71 = (*(void *)(v34 + 24) & 0x2000000000000000LL) == 0;
    (*(void (**)(uint64_t))(v0 + 408))(v32);
    char v69 = *(_BYTE *)(v34 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v39, v34 + *(int *)(v35 + 44), v40);
    uint64_t v41 = v72;
    if (v75 == 3) {
      uint64_t v41 = 0LL;
    }
    uint64_t v73 = v41;
    v70(v37, v32, v33);
    *(_BYTE *)(v37 + v36[5]) = v69;
    uint64_t v42 = v37 + v36[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v42, v39, v40);
    uint64_t v43 = (uint64_t *)(v37 + v36[7]);
    *uint64_t v43 = v75;
    v43[1] = v73;
    *(_BYTE *)(v37 + v36[8]) = v71;
    *(void *)(v37 + v36[9]) = 0LL;
    char v44 = *(_BYTE *)(v34 + 9);
    type metadata accessor for Transaction(0LL);
    uint64_t v45 = swift_task_alloc(64LL);
    *(void *)(v45 + swift_weakDestroy(v0 + 16) = v74;
    *(void *)(v45 + swift_unknownObjectUnownedDestroy(v0 + 24) = v37;
    *(void *)(v45 + 32) = v42;
    *(void *)(v45 + 40) = v37;
    *(_BYTE *)(v45 + 48) = v44;
    *(_BYTE *)(v45 + 49) = v69;
    uint64_t v28 = v76;
    static Transaction.named<A>(_:with:)("searchpartyd.beaconstore.updateType18Status", 43LL, 2LL, sub_100245E00, v45);
    swift_task_dealloc(v45);
    sub_100018C68(v37, type metadata accessor for BeaconStatus);
    sub_100018C68(v34, type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v78, type metadata accessor for BeaconIdentifier);
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v77, v33);
  }

  uint64_t v46 = *(void *)(v0 + 424) + 1LL;
  if (v46 == *(void *)(v0 + 392))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 432))( *(void *)(v0 + 336),  1LL,  1LL,  *(void *)(v0 + 288));
LABEL_15:
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v51 = *(void *)(v0 + 328);
    uint64_t v53 = *(void *)(v0 + 312);
    uint64_t v52 = *(void *)(v0 + 320);
    uint64_t v54 = *(void *)(v0 + 304);
    uint64_t v55 = *(void *)(v0 + 280);
    uint64_t v56 = *(void *)(v0 + 264);
    uint64_t v58 = *(void *)(v0 + 232);
    uint64_t v57 = *(void *)(v0 + 240);
    uint64_t v59 = *(void *)(v0 + 208);
    uint64_t v79 = *(void *)(v0 + 200);
    uint64_t v82 = *(void *)(v0 + 184);
    swift_task_dealloc(*(void *)(v0 + 336));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v79);
    swift_task_dealloc(v82);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v28;
  *(void *)(v0 + 4swift_unknownObjectUnownedDestroy(v0 + 24) = v46;
  uint64_t v47 = *(void *)(v0 + 336);
  uint64_t v48 = *(void *)(v0 + 288);
  uint64_t v49 = *(void *)(v0 + 296);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 408))( v47,  *(void *)(v0 + 384)
  + ((*(unsigned __int8 *)(v0 + 464) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 464))
  + *(void *)(v0 + 400) * v46,
    v48);
  uint64_t v50 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56);
  *(void *)(v0 + 432) = v50;
  v50(v47, 0LL, 1LL, v48);
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
  uint64_t v63 = *(void *)(v0 + 328);
  uint64_t v62 = *(void *)(v0 + 336);
  uint64_t v64 = *(void *)(v0 + 288);
  uint64_t v66 = *(void *)(v0 + 272);
  uint64_t v65 = *(void *)(v0 + 280);
  uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 296) + 32LL);
  *(void *)(v0 + 440) = v67;
  v67(v63, v62, v64);
  uid_t v68 = getuid();
  sub_1005E2270(v68);
  v61(v65 + *(int *)(v66 + 20), v63, v64);
  return swift_task_switch(sub_100512518, *(void *)(v0 + 368), 0LL);
}

uint64_t sub_100512C98()
{
  uint64_t v1 = *(void *)(v0 + 456);
  (*(void (**)(void, void, void))(v0 + 408))( *(void *)(v0 + 320),  *(void *)(v0 + 328),  *(void *)(v0 + 288));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 456);
    uint64_t v6 = *(void *)(v0 + 320);
    uint64_t v7 = *(void *)(v0 + 288);
    uint64_t v8 = *(void *)(v0 + 296);
    uint64_t v47 = *(void *)(v0 + 280);
    uint64_t v49 = *(void *)(v0 + 328);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = swift_slowAlloc(64LL, -1LL);
    uint64_t v51 = v10;
    *(_DWORD *)uint64_t v9 = 141558531;
    *(void *)(v9 + 4) = 1752392040LL;
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v11 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v7, v11);
    *(void *)(v9 + 14) = sub_1003F11D4(v12, v13, &v51);
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v14(v6, v7);
    *(_WORD *)(v9 + 22) = 2082;
    swift_getErrorValue(v5, v0 + 152, v0 + 120);
    uint64_t v15 = Error.localizedDescription.getter(*(void *)(v0 + 128), *(void *)(v0 + 136));
    *(void *)(v9 + swift_unknownObjectUnownedDestroy(v0 + 24) = sub_1003F11D4(v15, v16, &v51);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Error reading latest advertisement from ObservationService beacon: %{private,mask.hash}s, error: %{public}s.",  (uint8_t *)v9,  0x20u);
    swift_arrayDestroy(v10, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    swift_errorRelease(v5);
    sub_100018C68(v47, type metadata accessor for BeaconIdentifier);
    v14(v49, v7);
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 456);
    uint64_t v19 = *(void *)(v0 + 320);
    uint64_t v18 = *(void *)(v0 + 328);
    uint64_t v20 = *(void *)(v0 + 288);
    uint64_t v21 = *(void *)(v0 + 296);
    uint64_t v22 = *(void *)(v0 + 280);

    swift_errorRelease(v17);
    swift_errorRelease(v17);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v23(v19, v20);
    swift_errorRelease(v17);
    sub_100018C68(v22, type metadata accessor for BeaconIdentifier);
    v23(v18, v20);
  }

  uint64_t v24 = *(void *)(v0 + 424) + 1LL;
  if (v24 == *(void *)(v0 + 392))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 432))( *(void *)(v0 + 336),  1LL,  1LL,  *(void *)(v0 + 288));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v29 = *(void *)(v0 + 328);
    uint64_t v31 = *(void *)(v0 + 312);
    uint64_t v30 = *(void *)(v0 + 320);
    uint64_t v32 = *(void *)(v0 + 304);
    uint64_t v33 = *(void *)(v0 + 280);
    uint64_t v34 = *(void *)(v0 + 264);
    uint64_t v36 = *(void *)(v0 + 232);
    uint64_t v35 = *(void *)(v0 + 240);
    uint64_t v37 = *(void *)(v0 + 208);
    uint64_t v48 = *(void *)(v0 + 200);
    uint64_t v50 = *(void *)(v0 + 184);
    swift_task_dealloc(*(void *)(v0 + 336));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v0 + 4swift_unknownObjectUnownedDestroy(v0 + 24) = v24;
  uint64_t v25 = *(void *)(v0 + 336);
  uint64_t v26 = *(void *)(v0 + 288);
  uint64_t v27 = *(void *)(v0 + 296);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 408))( v25,  *(void *)(v0 + 384)
  + ((*(unsigned __int8 *)(v0 + 464) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 464))
  + *(void *)(v0 + 400) * v24,
    v26);
  uint64_t v28 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56);
  *(void *)(v0 + 432) = v28;
  v28(v25, 0LL, 1LL, v26);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 328);
  uint64_t v40 = *(void *)(v0 + 336);
  uint64_t v42 = *(void *)(v0 + 288);
  uint64_t v44 = *(void *)(v0 + 272);
  uint64_t v43 = *(void *)(v0 + 280);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 296) + 32LL);
  *(void *)(v0 + 440) = v45;
  v45(v41, v40, v42);
  uid_t v46 = getuid();
  sub_1005E2270(v46);
  v39(v43 + *(int *)(v44 + 20), v41, v42);
  return swift_task_switch(sub_100512518, *(void *)(v0 + 368), 0LL);
}

uint64_t sub_1005130B4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_100508644();
  uint64_t v3 = sub_1001899C8((uint64_t)v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_100513108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7F48);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10050F124(a1, (uint64_t)v13);
  uint64_t v14 = type metadata accessor for OwnedBeaconGroup(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v13, 1LL, v14) == 1)
  {
    sub_100015794((uint64_t)v13, &qword_1009AA830);
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    uint64_t v21 = 0LL;
  }

  else
  {
    *((void *)&v20 + 1) = v14;
    uint64_t v21 = &off_100947888;
    uint64_t v15 = sub_10000A7C8(&v19);
    sub_10002218C((uint64_t)v13, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  if (*((void *)&v20 + 1))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return sub_100012EC0(&v19, a2);
  }

  else
  {
    sub_10050F7D0((uint64_t)v10, (uint64_t)v6);
    uint64_t v17 = type metadata accessor for SharedBeaconGroup(0LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(v6, 1LL, v17) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      sub_100015794((uint64_t)v6, &qword_1009A7F48);
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = 0u;
      *(void *)(a2 + 32) = 0LL;
    }

    else
    {
      *(void *)(a2 + swift_unknownObjectUnownedDestroy(v0 + 24) = v17;
      *(void *)(a2 + 32) = &off_100941408;
      uint64_t v18 = sub_10000A7C8((void *)a2);
      sub_10002218C((uint64_t)v6, (uint64_t)v18, type metadata accessor for SharedBeaconGroup);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }

    return sub_100015794((uint64_t)&v19, (uint64_t *)&unk_1009AA790);
  }

uint64_t sub_100513364(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = v3[6];
  uint64_t v15 = (void *)swift_allocObject(&unk_100962420, 48LL, 7LL);
  v15[2] = v3;
  v15[3] = a1;
  void v15[4] = a2;
  v15[5] = v6;
  aBlock[4] = sub_10056AEEC;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_100962438;
  unint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v20 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_100513564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for OSSignposter(0LL);
  uint64_t v11 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v14 = sub_10000A720(v7, (uint64_t)qword_100A2AC98);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v14, v7);
  uint64_t v15 = OSSignposter.init(logger:)(v10);
  static OSSignpostID.exclusive.getter(v15);
  unint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)unint64_t v16 = 0;
  uint64_t v17 = (os_log_s *)OSSignposter.logHandle.getter();
  os_signpost_type_t v18 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v19, "duplicateReport", "", v16, 2u);
  uint64_t v20 = sub_100513794(v24, v25, v27);
  os_signpost_type_t v21 = static os_signpost_type_t.end.getter(v20);
  os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v21, v22, "duplicateReport", "", v16, 2u);

  swift_slowDealloc(v16, -1LL, -1LL);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v26);
}

uint64_t sub_100513794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100506C30();
  uint64_t v12 = sub_100564028((uint64_t)v11);
  swift_bridgeObjectRelease();
  uint64_t v13 = (void *)swift_allocObject(&unk_100962470, 40LL, 7LL);
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = v12;
  aBlock[4] = sub_10056AF04;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_100962488;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  return swift_release();
}

id *sub_1005139AC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_transactionManager;
  uint64_t v2 = type metadata accessor for PressuredExitTransactionManager(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  sub_10002214C( *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler),  *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler + 8));
  sub_10002214C( *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged),  *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100513C18()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100513C3C()
{
  return type metadata accessor for BeaconStore(0LL);
}

uint64_t type metadata accessor for BeaconStore(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B1F48, (uint64_t)&nominal type descriptor for BeaconStore);
}

uint64_t sub_100513C58(uint64_t a1)
{
  v4[0] = &unk_1008066A8;
  v4[1] = &unk_1008066C0;
  void v4[2] = &unk_1008066C0;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[7] = &unk_1008066C0;
  v4[8] = &unk_1008066C0;
  void v4[9] = &unk_1008066C0;
  v4[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[14] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[15] = &unk_1008066C0;
  v4[16] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[17] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[18] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[19] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[20] = &unk_1008066C0;
  v4[21] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[22] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[23] = (char *)&value witness table for Builtin.NativeObject + 64;
  _BYTE v4[24] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[25] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[26] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[27] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[28] = &unk_1008066C0;
  v4[29] = &unk_1008066C0;
  v4[30] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[31] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for PressuredExitTransactionManager(319LL);
  if (v3 <= 0x3F)
  {
    v4[32] = *(void *)(result - 8) + 64LL;
    v4[33] = &unk_1008066C0;
    v4[34] = &unk_1008066D8;
    v4[35] = &unk_1008066D8;
    v4[36] = &unk_1008066C0;
    v4[37] = &unk_1008066C0;
    v4[38] = &unk_1008066C0;
    v4[39] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[40] = &unk_1008066C0;
    v4[41] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[42] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[43] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[44] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[45] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[46] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[47] = (char *)&value witness table for Builtin.NativeObject + 64;
    _BYTE v4[48] = &unk_1008066C0;
    v4[49] = &unk_1008066C0;
    v4[50] = (char *)&value witness table for Builtin.BridgeObject + 64;
    return swift_updateClassMetadata2(a1, 256LL, 51LL, v4, a1 + 80);
  }

  return result;
}

void *sub_100513D70(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = a3[8];
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    uint64_t v13 = a3[9];
    uint64_t v14 = *(void *)((char *)a2 + v13);
    *(void *)((char *)a1 + v13) = v14;
    swift_bridgeObjectRetain(v14);
  }

  return a1;
}

uint64_t sub_100513E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 36)));
}

uint64_t sub_100513EBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[9];
  uint64_t v13 = *(void *)(a2 + v12);
  *(void *)(a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_100513F6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  uint64_t v11 = a3[9];
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  *(void *)(a1 + v11) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100514030(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1005140DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  uint64_t v12 = a3[9];
  uint64_t v13 = *(void *)(a1 + v12);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_100514190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10051419C);
}

uint64_t sub_10051419C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_100514250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10051425C);
}

uint64_t sub_10051425C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(void *)(a1 + *(int *)(a4 + 36)) = a2;
  return result;
}

uint64_t type metadata accessor for BeaconStatus(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B2728, (uint64_t)&nominal type descriptor for BeaconStatus);
}

uint64_t sub_100514314(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = (char *)&value witness table for Builtin.Int8 + 64;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      _OWORD v5[2] = *(void *)(result - 8) + 64LL;
      v5[3] = &unk_100806700;
      v5[4] = &unk_100806718;
      v5[5] = &unk_1008066C0;
      swift_initStructMetadata(a1, 256LL, 6LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1005143C0()
{
  return sub_100007864(&qword_1009B2770, type metadata accessor for BeaconStatus, (uint64_t)&unk_100806730);
}

uint64_t sub_1005143EC()
{
  return sub_1004F3F84();
}

uint64_t sub_10051440C()
{
  uint64_t v1 = *v0;
  type metadata accessor for Transaction(0LL);
  swift_retain(v1);
  static Transaction.asyncTask(name:block:)("firstLaunchSinceReboot-removeGhostBeacons", 41LL, 2LL, &unk_1009B2810, v1);
  return swift_release(v1);
}

uint64_t sub_100514460(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords);
  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords) = 0LL;
  swift_bridgeObjectRelease(v2);
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords);
  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords) = 0LL;
  swift_bridgeObjectRelease(v3);
  unint64_t v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache, v12, 1LL, 0LL);
  uint64_t v5 = *v4;
  *unint64_t v4 = (uint64_t)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper);
  swift_beginAccess(v6 + 16, v11, 1LL, 0LL);
  uint64_t v7 = *(void *)(v6 + 16);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v7);
  swift_beginAccess(v6 + 24, v10, 1LL, 0LL);
  uint64_t v8 = *(void *)(v6 + 24);
  *(void *)(v6 + swift_unknownObjectUnownedDestroy(v0 + 24) = &_swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_10051453C()
{
  return swift_task_switch(sub_100514550, 0LL, 0LL);
}

uint64_t sub_100514550()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8F0 + dword_10099C8F0);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8F4);
    *(void *)(v0 + 120) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10051463C;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10051463C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100514698, 0LL, 0LL);
}

uint64_t sub_100514698()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 128))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10043DE04();
    swift_release();
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005146E4(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  uint64_t v13 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v14 = swift_allocObject(&unk_100960AD0, 32LL, 7LL);
  uint64_t v15 = v23;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v14 + swift_unknownObjectUnownedDestroy(v0 + 24) = v15;
  aBlock[4] = sub_100564550;
  uint64_t v28 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_100960AE8;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v20 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v19, v20, v3, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v25);
  return swift_release(v28);
}

void sub_100514974()
{
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  sub_1005643B0(v0);
  Transaction.capture()();
}

void sub_1005149C4(uint64_t a1)
{
  uint64_t v1 = static os_log_type_t.default.getter(a1);
  if (qword_10099B180 != -1) {
    swift_once(&qword_10099B180, sub_100189C90);
  }
  os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  qword_100A2A2A8,  "Posting SPPersistentConnectionChanged Darwin notification from BeaconStore",  74LL,  2LL,  _swiftEmptyArrayStorage);
  sub_1005643B0(SPPersistentConnectionChangedNotification);
}

uint64_t sub_100514A48()
{
  return swift_task_switch(sub_100514A5C, 0LL, 0LL);
}

uint64_t sub_100514A5C()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8F0 + dword_10099C8F0);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8F4);
    *(void *)(v0 + 120) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100514B48;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100514B48(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100514BA4, 0LL, 0LL);
}

uint64_t sub_100514BA4()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 128))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10043DE18();
    swift_release();
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100514BF0()
{
  return swift_task_switch(sub_100514C04, 0LL, 0LL);
}

uint64_t sub_100514C04()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8F0 + dword_10099C8F0);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8F4);
    *(void *)(v0 + 120) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100514CF0;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100514CF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100571C64, 0LL, 0LL);
}

void sub_100514D4C()
{
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AAA0);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "Posting SPSeparationMonitoringSafeLocationsChanged Darwin notification from BeaconStore",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  sub_1005643B0(SPSeparationMonitoringSafeLocationsChangedNotification);
}

uint64_t sub_100514E24()
{
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AC98);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "Requesting SPUnknownBeaconsSetChangedNotification to be posted before rate limit.",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
}

uint64_t sub_100514F28()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v1);
  os_log_type_t v3 = (char *)&v81 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v83 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v93 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = type metadata accessor for URL(0LL);
  *(void *)&__int128 v99 = *(void *)(v100 - 8);
  uint64_t v5 = __chkstk_darwin(v100);
  uint64_t v92 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v97 = (char *)&v81 - v7;
  uint64_t v96 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v82 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v86 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v91 = v3;
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A11C0((uint64_t)v102);
  double v14 = v13;
  uint64_t v15 = swift_bridgeObjectRelease();
  Date.init(timeIntervalSinceNow:)(v15, -v14);
  uint64_t v95 = *(void *)(v0 + 136);
  uint64_t v16 = sub_100577B7C();
  uint64_t v18 = v17;
  uint64_t v19 = __chkstk_darwin(v16);
  *(&v81 - 2) = (uint64_t)v12;
  swift_bridgeObjectRetain(v19);
  int v94 = v16;
  uint64_t v20 = sub_100023D00((uint64_t (*)(char *))sub_10056BCB4, &v81 - 4, (uint64_t)v16);
  uint64_t v101 = 0LL;
  LODWORD(v84) = static os_log_type_t.default.getter(v20);
  uint64_t v21 = v12;
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v22 = qword_100A2B018;
  uint64_t v90 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v23 = swift_allocObject(v90, 192LL, 7LL);
  *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E8290;
  uint64_t v24 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v85 = v21;
  uint64_t v87 = v10;
  uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v10, v24);
  uint64_t v27 = v26;
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v28 = sub_1000226F4();
  *(void *)(v23 + 64) = v28;
  *(void *)(v23 + 32) = v25;
  *(void *)(v23 + 40) = v27;
  uint64_t v29 = UUID.uuidString.getter(v28);
  *(void *)(v23 + 96) = &type metadata for String;
  *(void *)(v23 + 104) = v28;
  uint64_t v88 = v18;
  unint64_t v89 = v28;
  *(void *)(v23 + 72) = v29;
  *(void *)(v23 + 80) = v30;
  uint64_t v31 = *(void *)(v20 + 16);
  uint64_t v32 = *(void *)(v18 + 16);
  BOOL v33 = __OFADD__(v31, v32);
  uint64_t v34 = v31 + v32;
  if (v33)
  {
    __break(1u);
LABEL_25:
    __break(1u);
  }

  uint64_t v35 = v20;
  *(void *)(v23 + 136) = &type metadata for Int;
  *(void *)(v23 + 144) = &protocol witness table for Int;
  *(void *)(v23 + 112) = v34;
  uint64_t v36 = v94[2];
  swift_bridgeObjectRelease();
  if (__OFADD__(v36, v32)) {
    goto LABEL_25;
  }
  *(void *)(v23 + 176) = &type metadata for Int;
  *(void *)(v23 + 184) = &protocol witness table for Int;
  *(void *)(v23 + 152) = v36 + v32;
  os_log(_:dso:log:_:_:)( v84,  &_mh_execute_header,  v22,  "prune BeaconEstimatedLocations predating, %@, identifier, %@, deleted, %i/%i",  76LL,  2LL,  v23);
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)(v35 + 16);
  if (v37)
  {
    unint64_t v38 = (*(unsigned __int8 *)(v82 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
    uint64_t v84 = v35;
    uint64_t v39 = v35 + v38;
    int v94 = *(void **)(v82 + 72);
    uint64_t v40 = v100;
    do
    {
      sub_10001DC4C(v39, (uint64_t)v9, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v41 = *(int *)(v96 + 20);
      uint64_t v42 = objc_autoreleasePoolPush();
      if (qword_10099B5C8 != -1) {
        swift_once(&qword_10099B5C8, sub_1005BD7E8);
      }
      uint64_t v43 = &v9[v41];
      uint64_t v44 = sub_10000A720(v40, (uint64_t)qword_100A2ADC0);
      uint64_t v45 = UUID.uuidString.getter(v44);
      uint64_t v46 = (uint64_t)v9;
      uint64_t v47 = v97;
      URL.appendingPathComponent(_:)(v45, v48);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v42);
      __chkstk_darwin(v49);
      *(&v81 - 4) = v50;
      *(&v81 - 3) = (uint64_t)v43;
      *(&v81 - 2) = (uint64_t)v47;
      uint64_t v51 = v101;
      OS_dispatch_queue.sync<A>(execute:)(sub_100571C4C, &v81 - 6, &type metadata for Bool);
      uint64_t v101 = v51;
      uint64_t v52 = v99;
      uint64_t v53 = v47;
      uint64_t v9 = (char *)v46;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v53, v40);
      sub_100018C68(v46, type metadata accessor for BeaconEstimatedLocation);
      v39 += (uint64_t)v94;
      --v37;
    }

    while (v37);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v52 = v99;
  }

  uint64_t v54 = *(void *)(v88 + 16);
  uint64_t v55 = (uint64_t)v91;
  uint64_t v56 = (uint64_t)v93;
  uint64_t v57 = v100;
  if (v54)
  {
    uint64_t v58 = v88 + ((*(unsigned __int8 *)(v83 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80));
    uint64_t v59 = *(void *)(v83 + 72);
    __int128 v99 = xmmword_1007E67D0;
    uint64_t v101 = v59;
    do
    {
      sub_10001DC4C(v58, v56, type metadata accessor for BeaconStoreFileRecord);
      sub_10001581C(v56 + *(int *)(v98 + 20), v55, (uint64_t *)&unk_1009A34D0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v55, 1LL, v57) == 1)
      {
        sub_100015794(v55, (uint64_t *)&unk_1009A34D0);
      }

      else
      {
        uint64_t v60 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v92, v55, v57);
        id v61 = [(id)objc_opt_self(NSFileManager) defaultManager];
        uint64_t v62 = v52;
        URL._bridgeToObjectiveC()(v63);
        uint64_t v65 = v64;
        id v102 = 0LL;
        unsigned __int8 v66 = [v61 removeItemAtURL:v64 error:&v102];

        id v67 = v102;
        if ((v66 & 1) != 0)
        {
          id v68 = v102;
        }

        else
        {
          id v69 = v102;
          uint64_t v70 = (void *)_convertNSErrorToError(_:)(v67);

          uint64_t v72 = swift_willThrow(v71);
          uint64_t v73 = static os_log_type_t.default.getter(v72);
          uint64_t v74 = qword_100A2B018;
          uint64_t v75 = swift_allocObject(v90, 72LL, 7LL);
          *(_OWORD *)(v75 + swift_weakDestroy(v0 + 16) = v99;
          id v102 = v70;
          swift_errorRetain(v70);
          uint64_t v76 = sub_100004AEC((uint64_t *)&unk_1009A5470);
          uint64_t v77 = String.init<A>(describing:)(&v102, v76);
          unint64_t v78 = v89;
          *(void *)(v75 + 56) = &type metadata for String;
          *(void *)(v75 + 64) = v78;
          *(void *)(v75 + 32) = v77;
          *(void *)(v75 + 40) = v79;
          os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v74, "Could not delete tombstoned record %@", 37LL, 2LL, v75);
          uint64_t v55 = (uint64_t)v91;
          swift_bridgeObjectRelease();
          swift_errorRelease(v70);
        }

        (*(void (**)(char *, uint64_t))(v62 + 8))(v60, v57);
        uint64_t v56 = (uint64_t)v93;
        uint64_t v52 = v62;
        uint64_t v59 = v101;
      }

      sub_100018C68(v56, type metadata accessor for BeaconStoreFileRecord);
      v58 += v59;
      --v54;
    }

    while (v54);
  }

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v85, v87);
}

uint64_t sub_100515708(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  __chkstk_darwin(v3);
  uint64_t v46 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = type metadata accessor for LocationProvider(0LL);
  v40[0] = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v43 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A1410(v51);
  double v11 = v10;
  uint64_t v12 = swift_bridgeObjectRelease();
  Date.init(timeIntervalSinceNow:)(v12, -v11);
  v40[1] = v1;
  uint64_t v47 = *(void *)(v1 + 136);
  double v13 = sub_100578498(a1);
  uint64_t v14 = __chkstk_darwin(v13);
  v40[-2] = v9;
  swift_bridgeObjectRetain(v14);
  uint64_t v15 = sub_100024510((uint64_t (*)(char *))sub_10056E4A8, &v40[-4], (uint64_t)v13);
  LODWORD(v41) = static os_log_type_t.default.getter(v15);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v45 = qword_100A2B018;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 192LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E8290;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v42 = v9;
  uint64_t v44 = v7;
  uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter(v7, v18);
  uint64_t v21 = v20;
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v22 = sub_1000226F4();
  *(void *)(v17 + 64) = v22;
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  uint64_t v23 = UUID.uuidString.getter(v22);
  *(void *)(v17 + 96) = &type metadata for String;
  *(void *)(v17 + 104) = v22;
  *(void *)(v17 + 72) = v23;
  *(void *)(v17 + 80) = v24;
  uint64_t v25 = *(void *)(v15 + 16);
  *(void *)(v17 + 136) = &type metadata for Int;
  *(void *)(v17 + 144) = &protocol witness table for Int;
  *(void *)(v17 + 112) = v25;
  uint64_t v26 = v13[2];
  swift_bridgeObjectRelease();
  *(void *)(v17 + 176) = &type metadata for Int;
  *(void *)(v17 + 184) = &protocol witness table for Int;
  *(void *)(v17 + 152) = v26;
  os_log(_:dso:log:_:_:)( v41,  &_mh_execute_header,  v45,  "prune LocationProviders predating, %@, identifier, %@, deleted, %i/%i",  69LL,  2LL,  v17);
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(v15 + 16);
  if (v27)
  {
    uint64_t v28 = v15 + ((*(unsigned __int8 *)(v40[0] + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v40[0] + 80LL));
    uint64_t v45 = *(void *)(v40[0] + 72LL);
    uint64_t v41 = v15;
    swift_bridgeObjectRetain(v15);
    uint64_t v29 = v50;
    do
    {
      sub_10001DC4C(v28, (uint64_t)v6, type metadata accessor for LocationProvider);
      uint64_t v30 = objc_autoreleasePoolPush();
      if (qword_10099BA10 != -1) {
        swift_once(&qword_10099BA10, sub_100783BF4);
      }
      uint64_t v31 = sub_10000A720(v29, (uint64_t)qword_100A2B788);
      uint64_t v32 = UUID.uuidString.getter(v31);
      uint64_t v33 = (uint64_t)v6;
      uint64_t v34 = v46;
      URL.appendingPathComponent(_:)(v32, v35);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v30);
      __chkstk_darwin(v36);
      v40[-4] = v37;
      v40[-3] = v33;
      v40[-2] = v34;
      OS_dispatch_queue.sync<A>(execute:)(sub_100571C4C, &v40[-6], &type metadata for Bool);
      unint64_t v38 = v34;
      uint64_t v6 = (char *)v33;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v29);
      sub_100018C68(v33, type metadata accessor for LocationProvider);
      v28 += v45;
      --v27;
    }

    while (v27);
    swift_bridgeObjectRelease_n(v41, 2LL);
    sub_1004E696C(0x13u);
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v44);
}

uint64_t sub_100515B90()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  sub_10000A8AC(v0, qword_1009B1E40);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009B1E40);
  return UUID.init()(v1);
}

void sub_100515BD8(uint64_t a1, dispatch_group_s *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)&v35[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v9, &qword_1009A7DE0);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    double v11 = (uint64_t *)(a4 + 16);
    uint64_t v12 = *v9;
    uint64_t v13 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v14 = qword_100A2B018;
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v16 = swift_allocObject(v15, 112LL, 7LL);
    *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v17 = type metadata accessor for BeaconNamingRecord(0LL);
    uint64_t v18 = UUID.uuidString.getter(v17);
    uint64_t v20 = v19;
    *(void *)(v16 + 56) = &type metadata for String;
    unint64_t v21 = sub_1000226F4();
    *(void *)(v16 + 64) = v21;
    *(void *)(v16 + 32) = v18;
    *(void *)(v16 + 40) = v20;
    v35[0] = v12;
    swift_errorRetain(v12);
    uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v23 = String.init<A>(describing:)(v35, v22);
    *(void *)(v16 + 96) = &type metadata for String;
    *(void *)(v16 + 104) = v21;
    *(void *)(v16 + 72) = v23;
    *(void *)(v16 + 80) = v24;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Failed to save name record for beacon : %@", 42LL, 2LL, v16);
    swift_bridgeObjectRelease();
    swift_beginAccess(v11, v35, 1LL, 0LL);
    uint64_t v25 = *v11;
    uint64_t *v11 = v12;
    swift_errorRelease(v25);
  }

  else
  {
    uint64_t v26 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v27 = qword_100A2B018;
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
    *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v30 = type metadata accessor for BeaconNamingRecord(0LL);
    uint64_t v31 = UUID.uuidString.getter(v30);
    uint64_t v33 = v32;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = sub_1000226F4();
    *(void *)(v29 + 32) = v31;
    *(void *)(v29 + 40) = v33;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Name record created for beacon: %@", 34LL, 2LL, v29);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v9, &qword_1009A7DE0);
  }

  dispatch_group_leave(a2);
}

void sub_100515E88(uint64_t a1, dispatch_group_s *a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009B2BE8);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v8, &qword_1009B2BE8);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    double v10 = (uint64_t *)(a3 + 16);
    uint64_t v11 = *v8;
    uint64_t v12 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v13 = qword_100A2B0A8;
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    v23[0] = v11;
    swift_errorRetain(v11);
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v17 = String.init<A>(describing:)(v23, v16);
    uint64_t v19 = v18;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_1000226F4();
    *(void *)(v15 + 32) = v17;
    *(void *)(v15 + 40) = v19;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Failed to save productInfoRecord: %@", 36LL, 2LL, v15);
    swift_bridgeObjectRelease();
    swift_beginAccess(v10, v23, 1LL, 0LL);
    uint64_t v20 = *v10;
    *double v10 = v11;
    swift_errorRelease(v20);
  }

  else
  {
    uint64_t v21 = static os_log_type_t.info.getter(EnumCaseMultiPayload);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_100A2B0A8,  "Successfully saved productInfoRecord",  36LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100015794((uint64_t)v8, &qword_1009B2BE8);
  }

  dispatch_group_leave(a2);
}

uint64_t sub_1005160A8(void (*a1)(uint64_t *, char *))
{
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v8 = sub_1000220F0();
  uint64_t v9 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v8, 0LL, 0LL);
  *double v10 = 13;
  *uint64_t v7 = v9;
  swift_storeEnumTagMultiPayload(v7, v5, 1LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v4, 1LL, 1LL, v11);
  a1(v7, v4);
  sub_100015794((uint64_t)v4, &qword_10099D8A0);
  return sub_100015794((uint64_t)v7, (uint64_t *)&unk_1009B0830);
}

uint64_t sub_1005161E0(void (*a1)(void *, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v8);
  double v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *double v10 = a3;
  swift_storeEnumTagMultiPayload(v10, v11, 1LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v7, 1LL, 1LL, v12);
  swift_errorRetain(a3);
  a1(v10, v7);
  sub_100015794((uint64_t)v7, &qword_10099D8A0);
  return sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009B0830);
}

void sub_1005162FC( uint64_t a1, dispatch_group_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v56 = a4;
  dispatch_group_t v57 = a2;
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v17, (uint64_t *)&unk_1009B0830);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v19 = (uint64_t *)(a7 + 16);
    uint64_t v20 = *v17;
    uint64_t v21 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v22 = qword_100A2B018;
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
    *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    v58[0] = v20;
    swift_errorRetain(v20);
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v26 = String.init<A>(describing:)(v58, v25);
    uint64_t v28 = v27;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_1000226F4();
    *(void *)(v24 + 32) = v26;
    *(void *)(v24 + 40) = v28;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Failed to save newRecord: %@", 28LL, 2LL, v24);
    swift_bridgeObjectRelease();
    swift_beginAccess(a7 + 16, v58, 1LL, 0LL);
    uint64_t v29 = *v19;
    *uint64_t v19 = v20;
    swift_errorRelease(v29);
  }

  else
  {
    uint64_t v54 = a5;
    uint64_t v55 = a3;
    uint64_t v52 = a6;
    uint64_t v30 = sub_10002218C((uint64_t)v17, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    uint64_t v31 = static os_log_type_t.default.getter(v30);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v32 = qword_100A2B018;
    uint64_t v33 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v34 = swift_allocObject(v33, 72LL, 7LL);
    __int128 v53 = xmmword_1007E67D0;
    *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v35 = UUID.uuidString.getter(v34);
    uint64_t v37 = v36;
    *(void *)(v34 + 56) = &type metadata for String;
    unint64_t v38 = sub_1000226F4();
    *(void *)(v34 + 64) = v38;
    *(void *)(v34 + 32) = v35;
    *(void *)(v34 + 40) = v37;
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "New remote pairing completed: %@", 32LL, 2LL, v34);
    uint64_t v39 = swift_bridgeObjectRelease();
    uint64_t v40 = static os_log_type_t.default.getter(v39);
    if (qword_10099B768 != -1) {
      swift_once(&qword_10099B768, sub_100651610);
    }
    uint64_t v41 = qword_100A2B078;
    uint64_t v42 = swift_allocObject(v33, 72LL, 7LL);
    *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = v53;
    uint64_t v43 = UUID.uuidString.getter(v42);
    *(void *)(v42 + 56) = &type metadata for String;
    *(void *)(v42 + 64) = v38;
    *(void *)(v42 + 32) = v43;
    *(void *)(v42 + 40) = v44;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "New OwnedBeaconRecord saved to cloudKit: %@", 43LL, 2LL, v42);
    swift_bridgeObjectRelease();
    uint64_t v45 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v45);
    uint64_t v47 = v55;
    uint64_t v46 = v56;
    *(&v51 - 4) = v55;
    *(&v51 - 3) = v46;
    *(&v51 - 2) = v54;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd-keyAlignmentRecordsSave",  53LL,  2LL,  sub_10056CDDC,  &v51 - 6);
    uint64_t My = type metadata accessor for Feature.FindMy(0LL);
    v58[3] = My;
    v58[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    uint64_t v49 = sub_10000A7C8(v58);
    (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v49,  enum case for Feature.FindMy.networkScalingImprovements(_:),  My);
    LOBYTE(My) = isFeatureEnabled(_:)(v58);
    uint64_t v50 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
    if ((My & 1) != 0)
    {
      __chkstk_darwin(v50);
      *(&v51 - 2) = v52;
      *(&v51 - 1) = v47;
      static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd-ownedDeviceKeyRecordSave",  54LL,  2LL,  sub_10056CDF8,  &v51 - 4);
    }

    sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }

  dispatch_group_leave(v57);
}

uint64_t sub_1005167A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a4;
  v23[1] = a2;
  uint64_t v6 = type metadata accessor for KeySyncMetadata(0LL);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v24 + 64);
  __chkstk_darwin(v6);
  uint64_t v8 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v8);
  double v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a3, (uint64_t)v14, type metadata accessor for KeyAlignmentRecord);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 24) & ~v15;
  uint64_t v17 = swift_allocObject(&unk_100962DA8, v16 + v13, v15 | 7);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a1;
  sub_10002218C((uint64_t)v14, v17 + v16, type metadata accessor for KeyAlignmentRecord);
  swift_retain();
  sub_1004FCEB4( a3,  0,  (void (*)(char *))sub_10056D040,  v17,  &qword_1009A7E08,  type metadata accessor for KeyAlignmentRecord,  (uint64_t)sub_100571B68,  (uint64_t)sub_100571BE8,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_100501BE0);
  swift_release();
  uint64_t v18 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v10, 1LL, 1LL, v18);
  sub_10001DC4C(v25, (uint64_t)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for KeySyncMetadata);
  uint64_t v19 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  uint64_t v21 = swift_allocObject(&unk_100962DD0, v20 + v7, v19 | 7);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v21 + swift_unknownObjectUnownedDestroy(v0 + 24) = 0LL;
  sub_10002218C( (uint64_t)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v21 + v20,  type metadata accessor for KeySyncMetadata);
  sub_1003B76DC((uint64_t)v10, (uint64_t)&unk_1009B2BF8, v21);
  return swift_release();
}

uint64_t sub_1005169D8(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A7E08);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v4, &qword_1009A7E08);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v8 = qword_100A2B018;
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
    *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v25 = v6;
    swift_errorRetain(v6);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v12 = String.init<A>(describing:)(&v25, v11);
    uint64_t v14 = v13;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_1000226F4();
    *(void *)(v10 + 32) = v12;
    *(void *)(v10 + 40) = v14;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Failed to save keyAlignmentRecord: %@", 37LL, 2LL, v10);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v6);
  }

  else
  {
    uint64_t v16 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v17 = qword_100A2B018;
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v20 = type metadata accessor for KeyAlignmentRecord(0LL);
    uint64_t v21 = UUID.uuidString.getter(v20);
    uint64_t v23 = v22;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_1000226F4();
    *(void *)(v19 + 32) = v21;
    *(void *)(v19 + 40) = v23;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Successfully saved keyAlignmentRecord: %@", 41LL, 2LL, v19);
    swift_bridgeObjectRelease();
    return sub_100015794((uint64_t)v4, &qword_1009A7E08);
  }

uint64_t sub_100516C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a4;
  return swift_task_switch(sub_100516C4C, 0LL, 0LL);
}

uint64_t sub_100516C4C()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100516D38;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100516D38(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100516D94, 0LL, 0LL);
}

uint64_t sub_100516D94()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 136))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009BCDBC);
    *(void *)(v0 + 144) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100516E08;
    return sub_1006D55B8(*(void *)(v0 + 120));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100516E08()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 152LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100516EA0;
  }
  else {
    uint64_t v3 = sub_100516E6C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100516E6C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100516EA0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100516ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v38[0] = a1;
  v38[1] = a3;
  uint64_t v41 = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v39 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v40 = (char *)v38 - v8;
  uint64_t v9 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (_OWORD *)((char *)v38 - v14);
  uint64_t v16 = sub_1004E1BEC((uint64_t *)v43);
  if (v3)
  {
    uint64_t v17 = v41;
    if (qword_10099BA30 != -1) {
      swift_once(&qword_10099BA30, sub_100795FD8);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_10000A720(v18, (uint64_t)qword_100A2B7D8);
    uint64_t v19 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v39, v17, v4);
    swift_errorRetain(v3);
    uint64_t v20 = swift_errorRetain(v3);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter(v21);
    int v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v45 = v41;
      *(_DWORD *)uint64_t v24 = 141558531;
      *(void *)&__int128 v44 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v24 + 4, v24 + 12);
      *(_WORD *)(v24 + 12) = 2081;
      uint64_t v25 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v40) = v23;
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v4, v25);
      *(void *)&__int128 v44 = sub_1003F11D4(v26, v27, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v19, v4);
      *(_WORD *)(v24 + 22) = 2080;
      swift_getErrorValue(v3, v46, v42);
      uint64_t v28 = Error.localizedDescription.getter(v42[1], v42[2]);
      *(void *)&__int128 v44 = sub_1003F11D4(v28, v29, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v24 + 24, v24 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  (os_log_type_t)v40,  "Failed to create OwnedDeviceKeyRecord for %{private,mask.hash}s error: %s.",  (uint8_t *)v24,  0x20u);
      uint64_t v30 = v41;
      swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);

      swift_errorRelease(v3);
    }

    else
    {
      swift_errorRelease(v3);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v19, v4);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
    }
  }

  else
  {
    UUID.init()(v16);
    uint64_t v31 = (char *)v15 + v9[6];
    uint64_t v39 = 0LL;
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v32(v31, v41, v4);
    __int128 v44 = v43[1];
    __int128 v45 = v43[0];
    sub_100018BF8((uint64_t)&v45);
    sub_100018BF8((uint64_t)&v44);
    sub_100566710((uint64_t *)v43);
    _OWORD *v15 = xmmword_1007E4480;
    *(_OWORD *)((char *)v15 + v9[7]) = v45;
    *(_OWORD *)((char *)v15 + v9[8]) = v44;
    v32(v40, v41, v4);
    sub_10001DC4C((uint64_t)v15, (uint64_t)v13, type metadata accessor for OwnedDeviceKeyRecord);
    uint64_t v33 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v34 = (v33 + 24) & ~v33;
    uint64_t v35 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v36 = (v6 + v35 + v34) & ~v35;
    uint64_t v37 = swift_allocObject(&unk_100962D80, v36 + v11, v33 | v35 | 7);
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = v38[0];
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v37 + v34, v40, v4);
    sub_10002218C((uint64_t)v13, v37 + v36, type metadata accessor for OwnedDeviceKeyRecord);
    swift_retain();
    sub_1004FCEB4( (uint64_t)v15,  0,  (void (*)(char *))sub_10056CF00,  v37,  &qword_1009B2858,  type metadata accessor for OwnedDeviceKeyRecord,  (uint64_t)sub_100022880,  (uint64_t)sub_100566810,  (uint64_t (*)(uint64_t, void (*)(void), uint64_t))sub_1005012CC);
    swift_release();
    sub_100018C68((uint64_t)v15, type metadata accessor for OwnedDeviceKeyRecord);
  }

void sub_1005173B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v55 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v5 = __chkstk_darwin(v55);
  uint64_t v54 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v52 - v7;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v52 - v14;
  uint64_t v16 = sub_100004AEC(&qword_1009B2858);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v18, &qword_1009B2858);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    uint64_t v19 = *v18;
    if (qword_10099BA30 != -1) {
      swift_once(&qword_10099BA30, sub_100795FD8);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000A720(v20, (uint64_t)qword_100A2B7D8);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v56, v9);
    uint64_t v21 = v54;
    sub_10001DC4C(v57, v54, type metadata accessor for OwnedDeviceKeyRecord);
    swift_errorRetain(v19);
    uint64_t v22 = swift_errorRetain(v19);
    int v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter(v23);
    int v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v26 = swift_slowAlloc(52LL, -1LL);
      uint64_t v27 = swift_slowAlloc(96LL, -1LL);
      uint64_t v57 = v27;
      *(_DWORD *)uint64_t v26 = 141559043;
      uint64_t v60 = 1752392040LL;
      uint64_t v61 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      uint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v56) = v25;
      uint64_t v29 = v21;
      uint64_t v30 = v28;
      os_log_t v53 = v23;
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v9, v28);
      uint64_t v60 = sub_1003F11D4(v31, v32, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      *(_WORD *)(v26 + 22) = 2160;
      uint64_t v60 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 24, v26 + 32);
      *(_WORD *)(v26 + 32) = 2081;
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v9, v30);
      uint64_t v60 = sub_1003F11D4(v33, v34, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 34, v26 + 42);
      swift_bridgeObjectRelease();
      sub_100018C68(v29, type metadata accessor for OwnedDeviceKeyRecord);
      *(_WORD *)(v26 + 42) = 2080;
      swift_getErrorValue(v19, v59, v58);
      uint64_t v35 = Error.localizedDescription.getter(v58[1], v58[2]);
      uint64_t v60 = sub_1003F11D4(v35, v36, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 44, v26 + 52);
      swift_bridgeObjectRelease();
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      os_log_t v37 = v53;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  (os_log_type_t)v56,  "Failed to save OwnedDeviceKeyRecord for %{private,mask.hash}s uuid: %{private,mask.hash}s error: %s.",  (uint8_t *)v26,  0x34u);
      uint64_t v38 = v57;
      swift_arrayDestroy(v57, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);

      swift_errorRelease(v19);
    }

    else
    {
      swift_errorRelease(v19);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      sub_100018C68(v21, type metadata accessor for OwnedDeviceKeyRecord);
      swift_errorRelease(v19);
      swift_errorRelease(v19);
    }
  }

  else
  {
    if (qword_10099BA30 != -1) {
      swift_once(&qword_10099BA30, sub_100795FD8);
    }
    uint64_t v39 = type metadata accessor for Logger(0LL);
    sub_10000A720(v39, (uint64_t)qword_100A2B7D8);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v56, v9);
    uint64_t v40 = sub_10001DC4C(v57, (uint64_t)v8, type metadata accessor for OwnedDeviceKeyRecord);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.default.getter(v41);
    int v43 = v42;
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v44 = swift_slowAlloc(42LL, -1LL);
      uint64_t v45 = swift_slowAlloc(64LL, -1LL);
      uint64_t v57 = v45;
      *(_DWORD *)uint64_t v44 = 141558787;
      uint64_t v60 = 1752392040LL;
      uint64_t v61 = v45;
      uint64_t v54 = v10;
      LODWORD(v56) = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v44 + 4, v44 + 12);
      *(_WORD *)(v44 + 12) = 2081;
      uint64_t v46 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v9, v46);
      uint64_t v60 = sub_1003F11D4(v47, v48, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v44 + 14, v44 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v15, v9);
      *(_WORD *)(v44 + 22) = 2160;
      uint64_t v60 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v44 + 24, v44 + 32);
      *(_WORD *)(v44 + 32) = 2081;
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v9, v46);
      uint64_t v60 = sub_1003F11D4(v49, v50, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v44 + 34, v44 + 42);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v8, type metadata accessor for OwnedDeviceKeyRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  (os_log_type_t)v56,  "Successfully saved OwnedDeviceKeyRecord for %{private,mask.hash}s uuid: %{private,mask.hash}s.",  (uint8_t *)v44,  0x2Au);
      uint64_t v51 = v57;
      swift_arrayDestroy(v57, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      sub_100018C68((uint64_t)v8, type metadata accessor for OwnedDeviceKeyRecord);
    }

    sub_100015794((uint64_t)v18, &qword_1009B2858);
  }

uint64_t sub_100517AB4( uint64_t a1, void (*a2)(void *, char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v12);
  uint64_t v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(a1 + 16, v21, 0LL, 0LL);
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    void *v14 = v15;
    swift_storeEnumTagMultiPayload(v14, v12, 1LL);
    uint64_t v16 = type metadata accessor for UUID(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v11, a4, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v11, 0LL, 1LL, v16);
    swift_errorRetain(v15);
    swift_errorRetain(v15);
    a2(v14, v11);
    swift_errorRelease(v15);
  }

  else
  {
    sub_10001DC4C(a5, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    swift_storeEnumTagMultiPayload(v14, v12, 0LL);
    uint64_t v18 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v11, 1LL, 1LL, v18);
    a2(v14, v11);
  }

  sub_100015794((uint64_t)v11, &qword_10099D8A0);
  return sub_100015794((uint64_t)v14, (uint64_t *)&unk_1009B0830);
}

uint64_t sub_100517C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v6 = (void *)swift_task_alloc(dword_1009A8004);
  *(void *)(v3 + swift_unknownObjectUnownedDestroy(v0 + 24) = v6;
  void *v6 = v3;
  v6[1] = sub_100517CE8;
  return sub_1002E0328(a1, a3);
}

uint64_t sub_100517CE8()
{
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v2 = sub_100517DA8;
  }

  else
  {
    uint64_t v2 = sub_100517D54;
  }

  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100517D54()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 0LL, 1LL, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100517DA8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100517DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v35 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v35 - v15;
  sub_100504F30(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    sub_100015794((uint64_t)v9, (uint64_t *)&unk_1009A9C30);
LABEL_6:
    uint64_t v21 = v35;
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000A720(v22, (uint64_t)qword_100A2AC98);
    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 16))(v6, a1, v4);
    os_log_type_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = a2;
      uint64_t v28 = v27;
      *(void *)&__int128 v38 = v27;
      *(_DWORD *)uint64_t v26 = 141558275;
      *(void *)&__int128 v37 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v4, v29);
      *(void *)&__int128 v37 = sub_1003F11D4(v30, v31, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Could not compute productUUID from nil productData of beacon %{private,mask.hash}s.",  (uint8_t *)v26,  0x16u);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
    }

    return UUID.init(uuid:)(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  uint64_t v36 = a2;
  sub_10002218C((uint64_t)v9, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  uint64_t v17 = sub_1005D2984();
  unint64_t v19 = v18;
  sub_10001DC4C((uint64_t)v16, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  if (v19 >> 60 == 15)
  {
    uint64_t v17 = sub_1000F5F2C(*(void *)&v14[*(int *)(v10 + 64)], *(void *)&v14[*(int *)(v10 + 68)]);
    unint64_t v19 = v20;
    sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    if (v19 >> 60 == 15)
    {
      sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
      a2 = v36;
      goto LABEL_6;
    }
  }

  else
  {
    sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }

  if (qword_10099B108 != -1) {
    swift_once(&qword_10099B108, sub_1000F5DDC);
  }
  __int128 v38 = xmmword_1009A1330;
  sub_10001736C(xmmword_1009A1330, *((unint64_t *)&xmmword_1009A1330 + 1));
  Data.append(_:)(v17, v19);
  __int128 v33 = v38;
  __int128 v37 = v38;
  unint64_t v34 = sub_100042F34();
  DataProtocol.stableUUID.getter(&type metadata for Data, v34);
  sub_100016F9C(v33, *((unint64_t *)&v33 + 1));
  sub_100016F9C(v17, v19);
  return sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100518274( uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, uint64_t, uint64_t, uint64_t), int a4)
{
  int v262 = a4;
  v283 = a1;
  uint64_t v267 = sub_100004AEC(&qword_10099E378);
  __chkstk_darwin(v267);
  uint64_t v266 = (char *)v245 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v277 = (char *)v245 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v249 = (char *)v245 - v10;
  uint64_t v11 = sub_100004AEC(&qword_1009A7D38);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v265 = (uint64_t)v245 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v274 = (void *)((char *)v245 - v14);
  uint64_t v276 = sub_100004AEC(&qword_10099E380);
  uint64_t v264 = *(void *)(v276 - 8);
  uint64_t v15 = __chkstk_darwin(v276);
  uint64_t v251 = (uint64_t)v245 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v256 = (uint64_t)v245 - v17;
  uint64_t v263 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v18 = __chkstk_darwin(v263);
  v245[2] = (char *)v245 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v255 = (uint64_t)v245 - v21;
  __chkstk_darwin(v20);
  uint64_t v257 = (uint64_t)v245 - v22;
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v23);
  uint64_t v273 = (char *)v245 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v280 = type metadata accessor for Date(0LL);
  uint64_t v281 = *(void *)(v280 - 8);
  uint64_t v25 = __chkstk_darwin(v280);
  uint64_t v254 = (char *)v245 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v261 = (char *)v245 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v260 = (char *)v245 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v275 = (void (*)(void, void))((char *)v245 - v32);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v285 = (char *)v245 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v290 = (char *)v245 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v284 = (char *)v245 - v38;
  __chkstk_darwin(v37);
  uint64_t v287 = (char *)v245 - v39;
  uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  uint64_t v41 = __chkstk_darwin(v40);
  uint64_t v272 = (uint64_t)v245 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)v245 - v43;
  uint64_t v45 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v49 = (char *)v245 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = __chkstk_darwin(v47);
  uint64_t v52 = (char *)v245 - v51;
  uint64_t v53 = __chkstk_darwin(v50);
  uint64_t v253 = (uint64_t)v245 - v54;
  __chkstk_darwin(v53);
  unint64_t v268 = (unint64_t)v245 - v55;
  uint64_t v56 = type metadata accessor for UUID(0LL);
  uint64_t v57 = __chkstk_darwin(v56);
  uint64_t v246 = (char *)v245 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = __chkstk_darwin(v57);
  v245[0] = (char *)v245 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v245[1] = (char *)v245 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  uint64_t v247 = (char *)v245 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  uint64_t v269 = (char *)v245 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  uint64_t v278 = (char *)v245 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  uint64_t v248 = (char *)v245 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  uint64_t v258 = (char *)v245 - v72;
  uint64_t v73 = __chkstk_darwin(v71);
  uint64_t v259 = (char *)v245 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  uint64_t v252 = (char *)v245 - v76;
  __chkstk_darwin(v75);
  unint64_t v78 = (char *)v245 - v77;
  uint64_t v288 = v79;
  uint64_t v80 = (void (*)(void, void, void))*((void *)v79 + 2);
  uint64_t v250 = a2;
  uint64_t v289 = v80;
  v80((char *)v245 - v77, a2, v56);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v271 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1006A0C20((uint64_t)v299);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a3);
  uint64_t v82 = sub_10054DBB8(v81, (uint64_t)&off_100932718);
  uint64_t v279 = 0LL;
  uint64_t v282 = a3;
  swift_bridgeObjectRelease();
  sub_1000F0A44((uint64_t)v82, (uint64_t)v44);
  swift_bridgeObjectRelease();
  uint64_t v270 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  int v83 = v270(v44, 1LL, v45);
  uint64_t v292 = v56;
  uint64_t v291 = v78;
  uint64_t v293 = (void (*)(void, void, void))v45;
  if (v83 == 1)
  {
    sub_100015794((uint64_t)v44, (uint64_t *)&unk_1009A5990);
    goto LABEL_7;
  }

  uint64_t v84 = v268;
  sub_10002218C((uint64_t)v44, v268, type metadata accessor for BeaconObservation);
  uint64_t v85 = v283;
  if (*(_BYTE *)(v84 + *(int *)(v45 + 24)) == 35)
  {
    sub_100018C68(v84, type metadata accessor for BeaconObservation);
    uint64_t v45 = (uint64_t)v293;
LABEL_7:
    uint64_t v86 = _swiftEmptyArrayStorage;
    uint64_t v299 = _swiftEmptyArrayStorage;
    uint64_t v87 = *((void *)v282 + 2);
    swift_bridgeObjectRetain(v282);
    if (v87)
    {
      unint64_t v89 = (*(unsigned __int8 *)(v46 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      uint64_t v90 = *(void *)(v46 + 72);
      uint64_t v91 = v88 + v89;
      uint64_t v92 = _swiftEmptyArrayStorage;
      do
      {
        sub_10001DC4C(v91, (uint64_t)v52, type metadata accessor for BeaconObservation);
        if (v52[*(int *)(v45 + 24)] == 36)
        {
          sub_10002218C((uint64_t)v52, (uint64_t)v49, type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0) {
            sub_100032AA8(0, v92[2] + 1LL, 1);
          }
          uint64_t v92 = v299;
          unint64_t v94 = v299[2];
          unint64_t v93 = v299[3];
          if (v94 >= v93 >> 1)
          {
            sub_100032AA8(v93 > 1, v94 + 1, 1);
            uint64_t v92 = v299;
          }

          v92[2] = v94 + 1;
          sub_10002218C((uint64_t)v49, (uint64_t)v92 + v89 + v94 * v90, type metadata accessor for BeaconObservation);
          uint64_t v45 = (uint64_t)v293;
        }

        else
        {
          sub_100018C68((uint64_t)v52, type metadata accessor for BeaconObservation);
        }

        v91 += v90;
        --v87;
      }

      while (v87);
      uint64_t v86 = v299;
      uint64_t v56 = v292;
    }

    swift_bridgeObjectRelease();
    uint64_t v95 = v272;
    sub_1000F0A44((uint64_t)v86, v272);
    swift_release(v86);
    int v96 = v270((char *)v95, 1LL, v45);
    uint64_t v97 = v280;
    uint64_t v98 = (uint64_t)v291;
    __int128 v99 = (char *)v281;
    uint64_t v100 = v287;
    uint64_t v101 = v284;
    if (v96 == 1)
    {
      sub_100015794(v95, (uint64_t *)&unk_1009A5990);
      id v102 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v99 + 7);
      uint64_t v103 = (uint64_t)v273;
      uint64_t v104 = v102(v273, 1LL, 1LL, v97);
    }

    else
    {
      uint64_t v103 = (uint64_t)v273;
      (*(void (**)(char *, uint64_t, uint64_t))(v281 + 16))(v273, v95 + *(int *)(v45 + 20), v280);
      sub_100018C68(v95, type metadata accessor for BeaconObservation);
      id v102 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v99 + 7);
      v102((char *)v103, 0LL, 1LL, v97);
      uint64_t v104 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v99 + 6))(v103, 1LL, v97);
      if ((_DWORD)v104 != 1)
      {
        (*((void (**)(char *, uint64_t, uint64_t))v99 + 4))(v100, v103, v97);
LABEL_27:
        uint64_t v282 = v102;
        double v122 = (double)(uint64_t)v271;
        uint64_t v123 = (unsigned int (*)(void, void, void))v274;
        sub_10050FF80(v98, (uint64_t)v274);
        uint64_t v124 = (uint64_t)v123;
        uint64_t v125 = sub_100004AEC(&qword_1009A7D40);
        uint64_t v272 = *(void *)(v125 - 8);
        uint64_t v271 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v272 + 48);
        int v126 = v271(v124, 1LL, v125);
        uint64_t v273 = (char *)v125;
        if (v126 != 1)
        {
          uint64_t v130 = v124;
          char v131 = *(_BYTE *)(v124 + *(int *)(v125 + 48));
          uint64_t v132 = v276;
          uint64_t v133 = *(int *)(v276 + 48);
          uint64_t v134 = v256;
          sub_10002218C(v130, v256, type metadata accessor for BeaconStatus);
          *(_BYTE *)(v134 + v133) = v131;
          uint64_t v135 = *(unsigned __int8 *)(v134 + *(int *)(v132 + 48));
          sub_10002218C(v134, v257, type metadata accessor for BeaconStatus);
          __asm { BR              X9 }
        }

        uint64_t v127 = (void (*)(void, void))v56;
        uint64_t v128 = (void (*)(void, void))v98;
        uint64_t v129 = sub_100015794(v124, &qword_1009A7D38);
        static Date.distantPast.getter(v129);
        uint64_t v136 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        char v137 = dispatch thunk of static Comparable.>= infix(_:_:)(v101, v100, v97, v136);
        uint64_t v138 = (uint64_t (*)(char *, char *, uint64_t))*((void *)v99 + 2);
        if ((v137 & 1) != 0) {
          int v139 = v101;
        }
        else {
          int v139 = v100;
        }
        uint64_t v140 = v138(v290, v139, v97);
        Date.addingTimeInterval(_:)(v140, v122);
        BOOL v141 = v275;
        static Date.trustedNow.getter((uint64_t)v275);
        double v142 = Date.timeIntervalSince(_:)(v141);
        uint64_t v143 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v99 + 1);
        ((void (*)(void, uint64_t))v143)(v141, v97);
        if (v142 > 0.0)
        {
          if (qword_10099B528 == -1)
          {
LABEL_35:
            uint64_t v144 = type metadata accessor for Logger(0LL);
            sub_10000A720(v144, (uint64_t)qword_100A2AC98);
            uint64_t v145 = v259;
            uint64_t v146 = v128;
            uint64_t v147 = v127;
            v289(v259, v146, v127);
            uint64_t v148 = v260;
            uint64_t v149 = v290;
            uint64_t v150 = v138(v260, v290, v97);
            uint64_t v151 = (os_log_s *)Logger.logObject.getter(v150);
            os_log_type_t v152 = static os_log_type_t.default.getter(v151);
            int v153 = v152;
            if (os_log_type_enabled(v151, v152))
            {
              uint64_t v154 = swift_slowAlloc(32LL, -1LL);
              uint64_t v155 = (void *)swift_slowAlloc(64LL, -1LL);
              uint64_t v299 = v155;
              *(_DWORD *)uint64_t v154 = 141558531;
              *(void *)&__int128 v296 = 1752392040LL;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, (char *)&v296 + 8, v154 + 4, v154 + 12);
              *(_WORD *)(v154 + 12) = 2081;
              uint64_t v156 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              LODWORD(v293) = v153;
              uint64_t v157 = dispatch thunk of CustomStringConvertible.description.getter(v292, v156);
              *(void *)&__int128 v296 = sub_1003F11D4(v157, v158, (uint64_t *)&v299);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, (char *)&v296 + 8, v154 + 14, v154 + 22);
              swift_bridgeObjectRelease();
              uint64_t v159 = v145;
              uint64_t v160 = (void (*)(char *, uint64_t))*((void *)v288 + 1);
              v160(v159, v292);
              *(_WORD *)(v154 + 22) = 2082;
              uint64_t v161 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
              uint64_t v162 = dispatch thunk of CustomStringConvertible.description.getter(v97, v161);
              *(void *)&__int128 v296 = sub_1003F11D4(v162, v163, (uint64_t *)&v299);
              uint64_t v147 = (void (*)(void, void))v292;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, (char *)&v296 + 8, v154 + 24, v154 + 32);
              swift_bridgeObjectRelease();
              ((void (*)(char *, uint64_t))v143)(v148, v97);
              _os_log_impl( (void *)&_mh_execute_header,  v151,  (os_log_type_t)v293,  "Beacon %{private,mask.hash}s is connected since %{public}s.",  (uint8_t *)v154,  0x20u);
              swift_arrayDestroy(v155, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v164 = v155;
              __int128 v99 = (char *)v281;
              swift_slowDealloc(v164, -1LL, -1LL);
              swift_slowDealloc(v154, -1LL, -1LL);

              ((void (*)(char *, uint64_t))v143)(v290, v97);
              ((void (*)(char *, uint64_t))v143)(v284, v97);
              ((void (*)(char *, uint64_t))v143)(v287, v97);
            }

            else
            {

              ((void (*)(char *, uint64_t))v143)(v148, v97);
              uint64_t v187 = v145;
              uint64_t v160 = (void (*)(char *, uint64_t))*((void *)v288 + 1);
              v160(v187, (uint64_t)v147);
              ((void (*)(char *, uint64_t))v143)(v149, v97);
              ((void (*)(char *, uint64_t))v143)(v284, v97);
              ((void (*)(char *, uint64_t))v143)(v100, v97);
            }

            uint64_t v188 = v282;
            v160(v291, (uint64_t)v147);
            uint64_t v189 = v283;
            (*((void (**)(uint64_t, char *, uint64_t))v99 + 4))((char *)v283, v285, v97);
            uint64_t v190 = 1LL;
            v188((char *)v189, 0LL, 1LL, v97);
            return v190;
          }

LABEL_73:
          swift_once(&qword_10099B528, sub_1004F3B00);
          goto LABEL_35;
        }

        uint64_t v165 = (uint64_t (*)(char *, char *, uint64_t))v128;
        if (qword_10099B528 != -1) {
          swift_once(&qword_10099B528, sub_1004F3B00);
        }
        uint64_t v166 = type metadata accessor for Logger(0LL);
        uint64_t v167 = sub_10000A720(v166, (uint64_t)qword_100A2AC98);
        uint64_t v168 = v258;
        uint64_t v169 = v128;
        uint64_t v128 = v127;
        v289(v258, v169, v127);
        uint64_t v170 = v261;
        uint64_t v171 = v138(v261, v290, v97);
        uint64_t v256 = v167;
        uint64_t v172 = (os_log_s *)Logger.logObject.getter(v171);
        os_log_type_t v173 = static os_log_type_t.default.getter(v172);
        if (os_log_type_enabled(v172, v173))
        {
          uint64_t v174 = swift_slowAlloc(32LL, -1LL);
          uint64_t v175 = (void *)swift_slowAlloc(64LL, -1LL);
          uint64_t v270 = v143;
          uint64_t v293 = (void (*)(void, void, void))v175;
          uint64_t v299 = v175;
          *(_DWORD *)uint64_t v174 = 141558531;
          *(void *)&__int128 v296 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, (char *)&v296 + 8, v174 + 4, v174 + 12);
          *(_WORD *)(v174 + 12) = 2081;
          uint64_t v176 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v177 = dispatch thunk of CustomStringConvertible.description.getter(v292, v176);
          *(void *)&__int128 v296 = sub_1003F11D4(v177, v178, (uint64_t *)&v299);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, (char *)&v296 + 8, v174 + 14, v174 + 22);
          swift_bridgeObjectRelease();
          uint64_t v179 = v168;
          uint64_t v100 = v288;
          uint64_t v180 = (void (*)(char *, uint64_t))*((void *)v288 + 1);
          v180(v179, v292);
          *(_WORD *)(v174 + 22) = 2082;
          uint64_t v181 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          uint64_t v182 = dispatch thunk of CustomStringConvertible.description.getter(v97, v181);
          *(void *)&__int128 v296 = sub_1003F11D4(v182, v183, (uint64_t *)&v299);
          uint64_t v128 = (void (*)(void, void))v292;
          uint64_t v165 = (uint64_t (*)(char *, char *, uint64_t))v291;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, (char *)&v296 + 8, v174 + 24, v174 + 32);
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v270)(v170, v97);
          os_log_type_t v184 = v173;
          uint64_t v127 = (void (*)(void, void))v180;
          _os_log_impl( (void *)&_mh_execute_header,  v172,  v184,  "Beacon %{private,mask.hash}s is not connected. Last seen: %{public}s.",  (uint8_t *)v174,  0x20u);
          uint64_t v185 = v293;
          swift_arrayDestroy(v293, 2LL, (char *)&type metadata for Any + 8);
          uint64_t v143 = v270;
          swift_slowDealloc(v185, -1LL, -1LL);
          uint64_t v186 = v174;
          uint64_t v101 = v284;
          swift_slowDealloc(v186, -1LL, -1LL);
        }

        else
        {
          uint64_t v191 = v168;
          uint64_t v100 = v288;
          uint64_t v127 = (void (*)(void, void))*((void *)v288 + 1);
          v127(v191, v128);
          ((void (*)(char *, uint64_t))v143)(v170, v97);
        }

        uint64_t v192 = v290;
        if ((v262 & 1) != 0)
        {
          sub_100504C28(v250, (uint64_t)&v296);
          if (v297)
          {
            sub_100012EC0(&v296, (uint64_t)&v299);
            uint64_t v193 = v300;
            uint64_t v194 = v301;
            sub_100012ED8(&v299, v300);
            uint64_t v195 = *(void (**)(uint64_t, uint64_t))(v194 + 192);
            uint64_t v196 = v194;
            uint64_t v197 = (uint64_t)v249;
            v195(v193, v196);
            uint64_t v274 = (void *)*((void *)v100 + 6);
            if (((unsigned int (*)(uint64_t, uint64_t, void (*)(void, void)))v274)( v197,  1LL,  v128) != 1)
            {
              uint64_t v270 = v143;
              uint64_t v201 = (uint64_t)v248;
              uint64_t v293 = (void (*)(void, void, void))*((void *)v100 + 4);
              v293(v248, v197, v128);
              uint64_t v143 = (uint64_t (*)(char *, uint64_t, uint64_t))v286;
              sub_100513108(v201, (uint64_t)&v296);
              uint64_t v138 = v297;
              if (v297)
              {
                uint64_t v202 = v298;
                sub_100012ED8(&v296, (uint64_t)v297);
                uint64_t v203 = (*(uint64_t (**)(uint64_t (*)(char *, char *, uint64_t), uint64_t))(v202 + 16))( v138,  v202);
                __chkstk_darwin(v203);
                v245[-2] = v165;
                uint64_t v204 = v127;
                uint64_t v205 = v279;
                uint64_t v138 = (uint64_t (*)(char *, char *, uint64_t))sub_100549EC8( (uint64_t)sub_10039929C,  (uint64_t)&v245[-4],  v206);
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v296);
                swift_retain();
                sub_10054DDE8((uint64_t)v138);
                __int128 v99 = v207;
                uint64_t v279 = v205;
                uint64_t v127 = v204;
                swift_release(v138);
                swift_release(v143);
              }

              else
              {
                sub_100015794((uint64_t)&v296, (uint64_t *)&unk_1009AA790);
                __int128 v99 = (char *)_swiftEmptyArrayStorage;
              }

              uint64_t v208 = *((void *)v99 + 2);
              uint64_t v275 = v127;
              uint64_t v257 = v208;
              if (v208)
              {
                uint64_t v261 = *(char **)(v286 + 264);
                uint64_t v260 = v99 + 32;
                swift_bridgeObjectRetain(v99);
                unint64_t v209 = 0LL;
                uint64_t v259 = (char *)0x800000010085B900LL;
                uint64_t v258 = v99;
                while (v209 < *((void *)v99 + 2))
                {
                  uint64_t v143 = (uint64_t (*)(char *, uint64_t, uint64_t))v128;
                  uint64_t v210 = v127;
                  uint64_t v138 = v165;
                  unint64_t v268 = v209;
                  sub_100013044((uint64_t)&v260[40 * v209], (uint64_t)&v296);
                  uint64_t v212 = (uint64_t)v297;
                  uint64_t v211 = v298;
                  sub_100012ED8(&v296, (uint64_t)v297);
                  uint64_t v213 = v278;
                  (*(void (**)(uint64_t))(*(void *)(*(void *)(v211 + 8) + 8LL) + 32LL))(v212);
                  v214._countAndFlagsBits = 0xD000000000000015LL;
                  v214._object = v259;
                  prohibitAsyncContext(functionName:)(v214);
                  __chkstk_darwin(v215);
                  v245[-2] = v286;
                  v245[-1] = v213;
                  uint64_t v216 = (uint64_t)v266;
                  uint64_t v217 = v279;
                  OS_dispatch_queue.sync<A>(execute:)(sub_1002D63DC, &v245[-4], v267);
                  uint64_t v279 = v217;
                  uint64_t v218 = v276;
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v264 + 48))(v216, 1LL, v276) == 1)
                  {
                    sub_100015794(v216, &qword_10099E378);
                    uint64_t v219 = 1LL;
                    os_log_type_t v220 = v273;
                    uint64_t v127 = v210;
                    uint64_t v221 = v265;
                  }

                  else
                  {
                    char v222 = *(_BYTE *)(v216 + *(int *)(v218 + 48));
                    os_log_type_t v220 = v273;
                    uint64_t v223 = *((int *)v273 + 12);
                    uint64_t v224 = v216;
                    uint64_t v225 = v265;
                    sub_10002218C(v224, v265, type metadata accessor for BeaconStatus);
                    uint64_t v219 = 0LL;
                    *(_BYTE *)(v225 + v223) = v222;
                    uint64_t v221 = v225;
                    uint64_t v127 = v210;
                  }

                  (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v272 + 56))(v221, v219, 1LL, v220);
                  uint64_t v128 = (void (*)(void, void))v143;
                  v127(v278, v143);
                  uint64_t v165 = v138;
                  if (v271(v221, 1LL, (uint64_t)v220) != 1)
                  {
                    uint64_t v226 = v221;
                    char v227 = *(_BYTE *)(v221 + *((int *)v220 + 12));
                    uint64_t v228 = *(int *)(v218 + 48);
                    uint64_t v229 = v251;
                    sub_10002218C(v226, v251, type metadata accessor for BeaconStatus);
                    *(_BYTE *)(v229 + v228) = v227;
                    uint64_t v230 = *(unsigned __int8 *)(v229 + *(int *)(v218 + 48));
                    sub_10002218C(v229, v255, type metadata accessor for BeaconStatus);
                    __asm { BR              X8 }
                  }

                  sub_100015794(v221, &qword_1009A7D38);
                  __int128 v99 = v258;
                  unint64_t v209 = v268 + 1;
                  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v296);
                  if (v209 == v257)
                  {
                    swift_bridgeObjectRelease();
                    goto LABEL_68;
                  }
                }

                __break(1u);
                goto LABEL_73;
              }

        __break(1u);
      }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10051A850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A7D38);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v37 - v14;
  sub_10050FF80(a2 + *(int *)(v4 + 20), (uint64_t)v9);
  uint64_t v16 = sub_100004AEC(&qword_1009A7D40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v9, 1LL, v16) == 1)
  {
    sub_100015794((uint64_t)v9, &qword_1009A7D38);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_10000A720(v17, (uint64_t)qword_100A2AC98);
    uint64_t v18 = sub_10001DC4C(a2, (uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v38 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v23 = type metadata accessor for UUID(0LL);
      uint64_t v24 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      uint64_t v37 = sub_1003F11D4(v25, v26, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "No multipart observation for beacon %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    }

    static Date.distantPast.getter(v35);
    return 0LL;
  }

  else
  {
    sub_10002218C((uint64_t)v9, (uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_10002218C((uint64_t)v13, (uint64_t)v15, type metadata accessor for BeaconStatus);
    unsigned int v27 = sub_100041014(v15[*(int *)(v10 + 20)] & 0xB);
    int v28 = (v27 >> 8) & 1;
    int v29 = HIWORD(v27) & 1;
    int v30 = HIBYTE(v27) & 1;
    uint64_t v31 = sub_10054FA7C(a2);
    uint64_t v32 = sub_100041610(v28, v29, v30, v31);
    uint64_t v33 = &v15[*(int *)(v10 + 24)];
    uint64_t v34 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(a1, v33, v34);
    sub_100018C68((uint64_t)v15, type metadata accessor for BeaconStatus);
  }

  return v32;
}

void *sub_10051ABF8(uint64_t a1, uint64_t a2)
{
  uint64_t v283 = a2;
  uint64_t v282 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v282);
  uint64_t v288 = (char *)&v258 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE450);
  __chkstk_darwin(v4);
  __int128 v296 = (char *)&v258 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v276 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v276);
  uint64_t v277 = (char *)&v258 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (__n128 *)type metadata accessor for UUID(0LL);
  uint64_t v301 = v7[-1].n128_i64[1];
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v266 = (char *)&v258 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v260 = (char *)&v258 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v289 = (char *)&v258 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v280 = (char *)&v258 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v281 = (char *)&v258 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v286 = (char *)&v258 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v306 = (uint64_t)&v258 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v295 = (uint64_t)&v258 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v290 = (char *)&v258 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v278 = (char *)&v258 - v27;
  __chkstk_darwin(v26);
  uint64_t v293 = (uint64_t)&v258 - v28;
  uint64_t v29 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v269 = (uint64_t)&v258 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v299 = (uint64_t)&v258 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v294 = (char *)&v258 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v267 = (char *)&v258 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  __int128 v310 = (__n128 *)((char *)&v258 - v39);
  __chkstk_darwin(v38);
  uint64_t v311 = (uint8_t *)&v258 - v40;
  uint64_t v303 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v300 = *(void *)(v303 - 8);
  uint64_t v41 = __chkstk_darwin(v303);
  uint64_t v275 = (char *)&v258 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v287 = (uint64_t)&v258 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v258 - v46;
  __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v258 - v48;
  v318 = &_swiftEmptySetSingleton;
  uint64_t v50 = a1 + 56;
  uint64_t v51 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v52 = -1LL;
  if (v51 < 64) {
    uint64_t v52 = ~(-1LL << v51);
  }
  unint64_t v53 = v52 & *(void *)(a1 + 56);
  int64_t v54 = (unint64_t)(v51 + 63) >> 6;
  uint64_t v302 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v55 = 0LL;
  while (v53)
  {
    unint64_t v56 = __clz(__rbit64(v53));
    v53 &= v53 - 1;
    unint64_t v57 = v56 | (v55 << 6);
LABEL_5:
    uint64_t v58 = *(void *)(v300 + 72);
    sub_10001DC4C(*(void *)(v302 + 48) + v58 * v57, (uint64_t)v49, type metadata accessor for BeaconStatus);
    sub_10002218C((uint64_t)v49, (uint64_t)v47, type metadata accessor for BeaconStatus);
    uint64_t v59 = *(void *)&v47[*(int *)(v303 + 36)];
    sub_100018C68((uint64_t)v47, type metadata accessor for BeaconStatus);
    if (v59)
    {
      uint64_t v274 = v58;
      swift_release();
      if (qword_10099B538 != -1) {
        goto LABEL_132;
      }
      while (1)
      {
        uint64_t v63 = type metadata accessor for Logger(0LL);
        uint64_t v64 = sub_10000A720(v63, (uint64_t)qword_100A2ACC8);
        uint64_t v65 = (uint64_t)v311;
        uint64_t v66 = sub_10001581C(v283, (uint64_t)v311, &qword_10099D8A0);
        uint64_t v285 = v64;
        uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
        os_log_type_t v68 = static os_log_type_t.default.getter(v67);
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = swift_slowAlloc(22LL, -1LL);
          uint64_t v70 = swift_slowAlloc(32LL, -1LL);
          uint64_t v316 = (void *)v70;
          *(_DWORD *)uint64_t v69 = 141558275;
          uint64_t v313 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v313, v314, v69 + 4, v69 + 12);
          *(_WORD *)(v69 + 12) = 2081;
          uint64_t v71 = (void (*)(void, void))v310;
          sub_10001581C(v65, (uint64_t)v310, &qword_10099D8A0);
          uint64_t v72 = v301;
          uint64_t v73 = (*(uint64_t (**)(void (*)(void, void), uint64_t, __n128 *))(v301 + 48))( v71,  1LL,  v7);
          if ((_DWORD)v73 == 1)
          {
            sub_100015794((uint64_t)v71, &qword_10099D8A0);
            unint64_t v74 = 0xE400000000000000LL;
            uint64_t v75 = 1701736302LL;
          }

          else
          {
            uint64_t v75 = UUID.uuidString.getter(v73);
            unint64_t v74 = v77;
            (*(void (**)(void, __n128 *))(v72 + 8))(v71, v7);
          }

          uint64_t v313 = sub_1003F11D4(v75, v74, (uint64_t *)&v316);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v313, v314, v69 + 14, v69 + 22);
          swift_bridgeObjectRelease();
          sub_100015794(v65, &qword_10099D8A0);
          _os_log_impl( (void *)&_mh_execute_header,  v67,  v68,  "Primary beacon: %{private,mask.hash}s",  (uint8_t *)v69,  0x16u);
          swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v70, -1LL, -1LL);
          swift_slowDealloc(v69, -1LL, -1LL);
        }

        else
        {
          sub_100015794(v65, &qword_10099D8A0);
        }

        swift_bridgeObjectRetain(v302);
        uint64_t v79 = sub_1002FE904(v78);
        uint64_t v80 = swift_bridgeObjectRelease();
        __chkstk_darwin(v80);
        *((void *)&v258 - 2) = v283;
        uint64_t v316 = v79;
        swift_retain();
        uint64_t v81 = 0LL;
        sub_1004ED808(sub_100567094, (uint64_t)(&v258 - 2));
        swift_release();
        uint64_t v82 = (uint64_t)v316;
        uint64_t v83 = swift_retain_n(v316, 2LL);
        uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
        os_log_type_t v85 = static os_log_type_t.default.getter(v84);
        BOOL v86 = os_log_type_enabled(v84, v85);
        uint64_t v279 = v82;
        if (v86)
        {
          uint64_t v87 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v88 = swift_slowAlloc(32LL, -1LL);
          uint64_t v316 = (void *)v88;
          *(_DWORD *)uint64_t v87 = 136315138;
          uint64_t v311 = v87 + 4;
          swift_retain();
          uint64_t v89 = Array.description.getter(v279, v303);
          unint64_t v91 = v90;
          swift_release();
          uint64_t v313 = sub_1003F11D4(v89, v91, (uint64_t *)&v316);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v313, v314, v311, v87 + 12);
          swift_release_n(v279, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v84, v85, "sortedStatuses %s", v87, 0xCu);
          swift_arrayDestroy(v88, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v92 = v88;
          uint64_t v82 = v279;
          swift_slowDealloc(v92, -1LL, -1LL);
          swift_slowDealloc(v87, -1LL, -1LL);
        }

        else
        {

          swift_release_n(v82, 2LL);
        }

        uint64_t v93 = v293;
        uint64_t v94 = v287;
        v317 = &_swiftEmptySetSingleton;
        uint64_t v272 = *(void *)(v82 + 16);
        if (!v272)
        {
LABEL_127:
          swift_release();
          swift_bridgeObjectRelease();
          return v318;
        }

        uint64_t v271 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
        unint64_t v270 = v82 + ((*(unsigned __int8 *)(v300 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v300 + 80));
        __n128 v95 = swift_beginAccess(&v317, &v316, 0LL, 0LL);
        unint64_t v96 = 0LL;
        uint64_t v265 = (uint64_t *)&v316;
        uint64_t v259 = &v313;
        v95.n128_u64[0] = 136315907LL;
        __n128 v264 = v95;
        uint64_t v263 = (char *)&type metadata for Any + 8;
        v95.n128_u64[0] = 141558275LL;
        __n128 v261 = v95;
        v95.n128_u64[1] = 2LL;
        __int128 v262 = xmmword_1007E67D0;
        v95.n128_u64[0] = 136315138LL;
        __n128 v258 = v95;
        uint64_t v97 = (uint64_t)v277;
        uint64_t v98 = v301;
        __int128 v99 = v278;
        uint64_t v100 = v274;
        while (1)
        {
          if (v96 >= *(void *)(v82 + 16))
          {
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }

          uint64_t v103 = v99;
          unint64_t v284 = v96;
          sub_10001DC4C(v270 + v96 * v100, v94, type metadata accessor for BeaconStatus);
          uint64_t v104 = *(uint64_t (**)(uint64_t, uint64_t, __n128 *))(v98 + 16);
          uint64_t v105 = v104(v93, v94, v7);
          __chkstk_darwin(v105);
          *((void *)&v258 - 2) = v106;
          *((void *)&v258 - 1) = v93;
          QueueSynchronizer.conditionalSync<A>(_:)(sub_10015471C);
          uint64_t v107 = type metadata accessor for BeaconNamingRecord(0LL);
          int v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 48LL))(v97, 1LL, v107);
          uint64_t v311 = (uint8_t *)v81;
          if (v108 == 1)
          {
            sub_100015794(v97, &qword_1009AE490);
            uint64_t v109 = 0LL;
            unint64_t v110 = 0xE000000000000000LL;
          }

          else
          {
            uint64_t v111 = (uint64_t *)(v97 + *(int *)(v107 + 32));
            uint64_t v109 = *v111;
            unint64_t v110 = v111[1];
            swift_bridgeObjectRetain(v110);
            sub_100018C68(v97, type metadata accessor for BeaconNamingRecord);
          }

          uint64_t v112 = (uint64_t)v275;
          uint64_t v308 = (void (*)(uint64_t, uint64_t, __n128 *))v104;
          v104((uint64_t)v103, v93, v7);
          sub_10001DC4C(v287, v112, type metadata accessor for BeaconStatus);
          swift_bridgeObjectRetain(v110);
          unint64_t v114 = (os_log_s *)Logger.logObject.getter(v113);
          os_log_type_t v115 = static os_log_type_t.debug.getter(v114);
          int v116 = v115;
          if (os_log_type_enabled(v114, v115))
          {
            uint64_t v117 = swift_slowAlloc(42LL, -1LL);
            __int128 v310 = (__n128 *)swift_slowAlloc(96LL, -1LL);
            uint64_t v313 = (uint64_t)v310;
            *(_DWORD *)uint64_t v117 = v264.n128_u32[0];
            LODWORD(v307) = v116;
            swift_bridgeObjectRetain(v110);
            uint64_t v315 = sub_1003F11D4(v109, v110, &v313);
            uint64_t v118 = v265;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v315, v265, v117 + 4, v117 + 12);
            swift_bridgeObjectRelease_n(v110, 3LL);
            *(_WORD *)(v117 + 12) = 2160;
            uint64_t v315 = 1752392040LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v315, v118, v117 + 14, v117 + 22);
            *(_WORD *)(v117 + 22) = 2081;
            uint64_t v119 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter(v7, v119);
            uint64_t v315 = sub_1003F11D4(v120, v121, &v313);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v315, v118, v117 + 24, v117 + 32);
            swift_bridgeObjectRelease();
            __int128 v309 = *(__n128 **)(v301 + 8);
            ((void (*)(char *, __n128 *))v309)(v103, v7);
            *(_WORD *)(v117 + 32) = 2080;
            uint64_t v122 = *(void *)(v112 + *(int *)(v303 + 36));
            if (v122) {
              uint64_t v123 = *(void **)(v112 + *(int *)(v303 + 36));
            }
            else {
              uint64_t v123 = &_swiftEmptySetSingleton;
            }
            uint64_t v124 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            swift_bridgeObjectRetain(v122);
            uint64_t v125 = Set.description.getter(v123, v7, v124);
            unint64_t v127 = v126;
            swift_bridgeObjectRelease();
            uint64_t v315 = sub_1003F11D4(v125, v127, &v313);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v315, v118, v117 + 34, v117 + 42);
            uint64_t v97 = (uint64_t)v277;
            swift_bridgeObjectRelease();
            sub_100018C68(v112, type metadata accessor for BeaconStatus);
            _os_log_impl( (void *)&_mh_execute_header,  v114,  (os_log_type_t)v307,  "(%s) %{private,mask.hash}s nearby: %s",  (uint8_t *)v117,  0x2Au);
            uint64_t v128 = (void (*)(void, void))v310;
            swift_arrayDestroy(v310, 3LL, v263);
            uint64_t v98 = v301;
            swift_slowDealloc(v128, -1LL, -1LL);
            swift_slowDealloc(v117, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v110, 2LL);
            uint64_t v98 = v301;
            __int128 v309 = *(__n128 **)(v301 + 8);
            ((void (*)(char *, __n128 *))v309)(v103, v7);
            sub_100018C68(v112, type metadata accessor for BeaconStatus);
          }

          uint64_t v129 = v306;
          uint64_t v130 = (uint64_t)v317;
          swift_bridgeObjectRetain(v317);
          uint64_t v93 = v293;
          char v131 = sub_1004E4BF0(v293, v130);
          swift_bridgeObjectRelease();
          uint64_t v132 = v308;
          if ((v131 & 1) != 0)
          {
            uint64_t v133 = v266;
            uint64_t v134 = ((uint64_t (*)(char *, uint64_t, __n128 *))v308)(v266, v93, v7);
            uint64_t v135 = (os_log_s *)Logger.logObject.getter(v134);
            os_log_type_t v136 = static os_log_type_t.debug.getter(v135);
            if (os_log_type_enabled(v135, v136))
            {
              uint64_t v137 = swift_slowAlloc(22LL, -1LL);
              uint64_t v138 = v98;
              uint64_t v139 = swift_slowAlloc(32LL, -1LL);
              uint64_t v313 = v139;
              *(_DWORD *)uint64_t v137 = v261.n128_u32[0];
              *(void *)(v137 + 4) = 1752392040LL;
              *(_WORD *)(v137 + 12) = 2081;
              uint64_t v140 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter(v7, v140);
              *(void *)(v137 + 14) = sub_1003F11D4(v141, v142, &v313);
              swift_bridgeObjectRelease();
              uint64_t v143 = (void (*)(uint64_t, __n128 *))v309;
              ((void (*)(char *, __n128 *))v309)(v133, v7);
              _os_log_impl( (void *)&_mh_execute_header,  v135,  v136,  "%{private,mask.hash}s has already been inserted",  (uint8_t *)v137,  0x16u);
              swift_arrayDestroy(v139, 1LL, (char *)&type metadata for Any + 8);
              uint64_t v144 = v139;
              uint64_t v98 = v138;
              swift_slowDealloc(v144, -1LL, -1LL);
              uint64_t v145 = v137;
              uint64_t v93 = v293;
              swift_slowDealloc(v145, -1LL, -1LL);

              v143(v93, v7);
            }

            else
            {

              uint64_t v101 = (void (*)(uint64_t, __n128 *))v309;
              ((void (*)(char *, __n128 *))v309)(v133, v7);
              v101(v93, v7);
            }

            uint64_t v94 = v287;
            sub_100018C68(v287, type metadata accessor for BeaconStatus);
            uint64_t v100 = v274;
            uint64_t v81 = (uint64_t)v311;
            uint64_t v82 = v279;
            unint64_t v102 = v284;
            __int128 v99 = v278;
            goto LABEL_40;
          }

          uint64_t v146 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
          uint64_t v147 = *(unsigned __int8 *)(v98 + 80);
          uint64_t v148 = (v147 + 32) & ~v147;
          uint64_t v307 = *(void *)(v98 + 72);
          uint64_t v149 = swift_allocObject(v146, v148 + v307, v147 | 7);
          *(_OWORD *)(v149 + swift_weakDestroy(v0 + 16) = v262;
          uint64_t v150 = v149 + v148;
          v132(v149 + v148, v93, v7);
          uint64_t v151 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v152 = Set.init(minimumCapacity:)(1LL);
          int v153 = (void (*)(char *, uint64_t, __n128 *))v132;
          uint64_t v154 = v152;
          uint64_t v155 = v267;
          v153(v267, v149 + v148, v7);
          uint64_t v156 = *(void (**)(char *, uint64_t, uint64_t, __n128 *))(v98 + 56);
          v156(v155, 0LL, 1LL, v7);
          uint64_t v297 = *(unsigned int (**)(char *, uint64_t, __n128 *))(v98 + 48);
          unsigned int v157 = v297(v155, 1LL, v7);
          v304 = v156;
          uint64_t v273 = v151;
          if (v157 == 1)
          {
            uint64_t v158 = (uint64_t)v296;
            uint64_t v159 = v287;
          }

          else
          {
            uint64_t v159 = v287;
            (*(void (**)(char *, char *, __n128 *))(v98 + 32))(v290, v155, v7);
            uint64_t v160 = *(void *)(v154 + 40);
            swift_bridgeObjectRetain(v154);
            uint64_t v161 = dispatch thunk of Hashable._rawHashValue(seed:)(v160, v7, v151);
            uint64_t v162 = -1LL << *(_BYTE *)(v154 + 32);
            unint64_t v163 = v161 & ~v162;
            if (((*(void *)(v154 + 56 + ((v163 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v163) & 1) != 0)
            {
              uint64_t v164 = ~v162;
              while (1)
              {
                uint64_t v165 = v295;
                v308(v295, *(void *)(v154 + 48) + v163 * v307, v7);
                uint64_t v166 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                char v167 = dispatch thunk of static Equatable.== infix(_:_:)(v165, v290, v7, v166);
                ((void (*)(uint64_t, __n128 *))v309)(v165, v7);
                if ((v167 & 1) != 0) {
                  break;
                }
                unint64_t v163 = (v163 + 1) & v164;
                if (((*(void *)(v154 + 56 + ((v163 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v163) & 1) == 0) {
                  goto LABEL_60;
                }
              }

              swift_bridgeObjectRelease();
              uint64_t v170 = v290;
            }

            else
            {
LABEL_60:
              swift_bridgeObjectRelease();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v154);
              uint64_t v169 = v295;
              uint64_t v170 = v290;
              v308(v295, (uint64_t)v290, v7);
              uint64_t v313 = v154;
              sub_1000C9164(v169, v163, isUniquelyReferenced_nonNull_native);
              uint64_t v154 = v313;
              swift_bridgeObjectRelease();
            }

            ((void (*)(char *, __n128 *))v309)(v170, v7);
            v304(v267, 1LL, 1LL, v7);
            uint64_t v158 = (uint64_t)v296;
            uint64_t v98 = v301;
            uint64_t v129 = v306;
            uint64_t v93 = v293;
            uint64_t v151 = v273;
          }

          swift_setDeallocating(v149);
          swift_arrayDestroy(v150, *(void *)(v149 + 16), v7);
          swift_deallocClassInstance(v149, 32LL, 7LL);
          uint64_t v315 = v154;
          uint64_t v171 = *(void *)(v159 + *(int *)(v303 + 36));
          if (v171) {
            break;
          }
          uint64_t v217 = v159;
          uint64_t v218 = v98;
          uint64_t v219 = v260;
          v308((uint64_t)v260, v93, v7);
          swift_bridgeObjectRetain(v154);
          uint64_t v221 = (os_log_s *)Logger.logObject.getter(v220);
          os_log_type_t v222 = static os_log_type_t.default.getter(v221);
          if (os_log_type_enabled(v221, v222))
          {
            uint64_t v223 = swift_slowAlloc(22LL, -1LL);
            uint64_t v224 = swift_slowAlloc(32LL, -1LL);
            uint64_t v313 = v224;
            *(_DWORD *)uint64_t v223 = v261.n128_u32[0];
            *(void *)(v223 + 4) = 1752392040LL;
            *(_WORD *)(v223 + 12) = 2081;
            uint64_t v225 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v226 = dispatch thunk of CustomStringConvertible.description.getter(v7, v225);
            *(void *)(v223 + 14) = sub_1003F11D4(v226, v227, &v313);
            swift_bridgeObjectRelease();
            ((void (*)(char *, __n128 *))v309)(v219, v7);
            _os_log_impl( (void *)&_mh_execute_header,  v221,  v222,  "No nearby peers for %{private,mask.hash}s",  (uint8_t *)v223,  0x16u);
            swift_arrayDestroy(v224, 1LL, (char *)&type metadata for Any + 8);
            uint64_t v228 = v224;
            uint64_t v217 = v287;
            swift_slowDealloc(v228, -1LL, -1LL);
            uint64_t v229 = v223;
            uint64_t v93 = v293;
            swift_slowDealloc(v229, -1LL, -1LL);
          }

          else
          {
            ((void (*)(char *, __n128 *))v309)(v219, v7);
          }

          uint64_t v232 = (uint64_t)v317;
          swift_bridgeObjectRetain(v317);
          char v233 = sub_1004E4BF0(v93, v232);
          swift_bridgeObjectRelease();
          uint64_t v98 = v218;
          __int128 v99 = v278;
          if ((v233 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }

          else
          {
            sub_1000BF79C(&v313, v154);
            swift_bridgeObjectRelease();
            uint64_t v234 = v315;
            swift_beginAccess(&v317, &v313, 33LL, 0LL);
            sub_100673B54(v234);
            uint64_t v235 = swift_endAccess(&v313);
            uint64_t v236 = (os_log_s *)Logger.logObject.getter(v235);
            os_log_type_t v237 = static os_log_type_t.debug.getter(v236);
            if (os_log_type_enabled(v236, v237))
            {
              unint64_t v238 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v239 = swift_slowAlloc(32LL, -1LL);
              uint64_t v313 = v239;
              *(_DWORD *)unint64_t v238 = v258.n128_u32[0];
              __int128 v310 = (__n128 *)(v238 + 4);
              swift_bridgeObjectRetain(v317);
              uint64_t v241 = Set.description.getter(v240, v7, v151);
              unint64_t v243 = v242;
              swift_bridgeObjectRelease();
              uint64_t v244 = v241;
              __int128 v99 = v278;
              uint64_t v97 = (uint64_t)v277;
              uint64_t v312 = sub_1003F11D4(v244, v243, &v313);
              uint64_t v98 = v218;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v312, v259, v310, v238 + 12);
              uint64_t v245 = v287;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v236, v237, "Inserted: %s", v238, 0xCu);
              swift_arrayDestroy(v239, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v239, -1LL, -1LL);
              uint64_t v246 = v238;
              uint64_t v94 = v245;
              swift_slowDealloc(v246, -1LL, -1LL);

              uint64_t v93 = v293;
              ((void (*)(uint64_t, __n128 *))v309)(v293, v7);
              sub_100018C68(v245, type metadata accessor for BeaconStatus);
LABEL_123:
              uint64_t v81 = (uint64_t)v311;
              uint64_t v82 = v279;
              unint64_t v102 = v284;
              goto LABEL_126;
            }

            uint64_t v93 = v293;
          }

          ((void (*)(uint64_t, __n128 *))v309)(v93, v7);
          uint64_t v94 = v217;
          sub_100018C68(v217, type metadata accessor for BeaconStatus);
          uint64_t v81 = (uint64_t)v311;
          uint64_t v82 = v279;
          unint64_t v102 = v284;
          uint64_t v97 = (uint64_t)v277;
LABEL_126:
          uint64_t v100 = v274;
LABEL_40:
          unint64_t v96 = v102 + 1;
          if (v96 == v272) {
            goto LABEL_127;
          }
        }

        uint64_t v172 = v98;
        os_log_type_t v173 = v7;
        uint64_t v174 = *(void *)(v171 + 56);
        uint64_t v291 = v171 + 56;
        uint64_t v175 = 1LL << *(_BYTE *)(v171 + 32);
        if (v175 < 64) {
          uint64_t v176 = ~(-1LL << v175);
        }
        else {
          uint64_t v176 = -1LL;
        }
        unint64_t v177 = v176 & v174;
        int64_t v292 = (unint64_t)(v175 + 63) >> 6;
        uint64_t v298 = v171;
        __n128 v178 = swift_bridgeObjectRetain(v171);
        int64_t v179 = 0LL;
        uint64_t v180 = (void (*)(char *, unint64_t, __n128 *, __n128))v308;
        uint64_t v181 = v309;
        uint64_t v305 = v309;
        uint64_t v182 = v299;
        while (2)
        {
          uint64_t v188 = v294;
          __int128 v310 = v181;
          if (v177)
          {
            unint64_t v189 = __clz(__rbit64(v177));
            v177 &= v177 - 1;
            unint64_t v190 = v189 | (v179 << 6);
            uint64_t v7 = v173;
            uint64_t v98 = v172;
            uint64_t v191 = (unsigned int (*)(uint64_t, uint64_t, __n128 *))v297;
            goto LABEL_86;
          }

          if (__OFADD__(v179++, 1LL))
          {
            __break(1u);
            goto LABEL_129;
          }

          uint64_t v7 = v173;
          if (v179 >= v292)
          {
            uint64_t v98 = v172;
LABEL_118:
            ((void (*)(char *, uint64_t, uint64_t, __n128 *, __n128))v304)(v294, 1LL, 1LL, v7, v178);
            uint64_t v230 = v287;
            uint64_t v231 = v273;
            goto LABEL_119;
          }

          unint64_t v193 = *(void *)(v291 + 8 * v179);
          uint64_t v98 = v172;
          if (v193)
          {
            uint64_t v191 = (unsigned int (*)(uint64_t, uint64_t, __n128 *))v297;
LABEL_85:
            unint64_t v177 = (v193 - 1) & v193;
            unint64_t v190 = __clz(__rbit64(v193)) + (v179 << 6);
LABEL_86:
            v180(v294, *(void *)(v298 + 48) + v190 * v307, v7, v178);
            v304(v188, 0LL, 1LL, v7);
            if (v191((uint64_t)v188, 1LL, v7) != 1)
            {
              uint64_t v195 = *(uint64_t (**)(uint64_t, char *, __n128 *))(v98 + 32);
              uint64_t v196 = v195(v129, v188, v7);
              __chkstk_darwin(v196);
              *((void *)&v258 - 2) = v129;
              uint64_t v197 = (uint64_t)v311;
              sub_100373A48((uint64_t (*)(char *))sub_1005670B0, v302, v158);
              uint64_t v311 = (uint8_t *)v197;
              uint64_t v198 = v303;
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v300 + 48))(v158, 1LL, v303) == 1)
              {
                sub_100015794(v158, (uint64_t *)&unk_1009AE450);
LABEL_93:
                uint64_t v203 = (uint64_t)v317;
                swift_bridgeObjectRetain(v317);
                uint64_t v129 = v306;
                char v204 = sub_1004E4BF0(v306, v203);
                swift_bridgeObjectRelease();
                uint64_t v187 = v309;
                uint64_t v202 = v7;
                uint64_t v7 = v309;
                uint64_t v172 = v301;
                if ((v204 & 1) == 0)
                {
                  uint64_t v205 = v289;
                  ((void (*)(char *, uint64_t, __n128 *))v180)(v289, v129, v202);
                  uint64_t v206 = v295;
                  sub_1000BD768(v295, v205);
                  uint64_t v207 = v206;
                  uint64_t v180 = (void (*)(char *, unint64_t, __n128 *, __n128))v308;
                  uint64_t v187 = v310;
                  ((void (*)(uint64_t, __n128 *))v310)(v207, v202);
                  uint64_t v7 = v187;
                }

LABEL_131:
        __break(1u);
LABEL_132:
        swift_once(&qword_10099B538, sub_1004F3B48);
      }
    }
  }

  int64_t v60 = v55 + 1;
  if (__OFADD__(v55, 1LL))
  {
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }

  if (v60 >= v54)
  {
LABEL_29:
    swift_release();
    return &_swiftEmptySetSingleton;
  }

  unint64_t v61 = *(void *)(v50 + 8 * v60);
  ++v55;
  if (v61) {
    goto LABEL_24;
  }
  int64_t v55 = v60 + 1;
  if (v60 + 1 >= v54) {
    goto LABEL_29;
  }
  unint64_t v61 = *(void *)(v50 + 8 * v55);
  if (v61) {
    goto LABEL_24;
  }
  int64_t v55 = v60 + 2;
  if (v60 + 2 >= v54) {
    goto LABEL_29;
  }
  unint64_t v61 = *(void *)(v50 + 8 * v55);
  if (v61) {
    goto LABEL_24;
  }
  int64_t v55 = v60 + 3;
  if (v60 + 3 >= v54) {
    goto LABEL_29;
  }
  unint64_t v61 = *(void *)(v50 + 8 * v55);
  if (v61) {
    goto LABEL_24;
  }
  int64_t v55 = v60 + 4;
  if (v60 + 4 >= v54) {
    goto LABEL_29;
  }
  unint64_t v61 = *(void *)(v50 + 8 * v55);
  if (v61)
  {
LABEL_24:
    unint64_t v53 = (v61 - 1) & v61;
    unint64_t v57 = __clz(__rbit64(v61)) + (v55 << 6);
    goto LABEL_5;
  }

  int64_t v62 = v60 + 5;
  if (v62 >= v54) {
    goto LABEL_29;
  }
  unint64_t v61 = *(void *)(v50 + 8 * v62);
  if (v61)
  {
    int64_t v55 = v62;
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v55 = v62 + 1;
    if (__OFADD__(v62, 1LL)) {
      break;
    }
    if (v55 >= v54) {
      goto LABEL_29;
    }
    unint64_t v61 = *(void *)(v50 + 8 * v55);
    ++v62;
    if (v61) {
      goto LABEL_24;
    }
  }

  __break(1u);
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10051CD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a2;
  uint64_t v5 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v27 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a3, (uint64_t)v12, &qword_10099D8A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) != 1)
  {
    uint64_t v18 = v28;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    char v19 = static UUID.== infix(_:_:)(a1, v16);
    sub_10001DC4C(a1, (uint64_t)v9, type metadata accessor for BeaconStatus);
    if ((v19 & 1) != 0)
    {
      uint64_t v20 = *(void *)&v9[*(int *)(v5 + 36)];
      sub_100018C68((uint64_t)v9, type metadata accessor for BeaconStatus);
      if (v20)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        char v17 = 1;
        return v17 & 1;
      }
    }

    else
    {
      sub_100018C68((uint64_t)v9, type metadata accessor for BeaconStatus);
    }

    uint64_t v21 = v18;
    char v22 = static UUID.== infix(_:_:)(v18, v16);
    uint64_t v23 = v18;
    uint64_t v24 = v27;
    sub_10001DC4C(v23, v27, type metadata accessor for BeaconStatus);
    if ((v22 & 1) != 0)
    {
      uint64_t v25 = *(void *)(v24 + *(int *)(v5 + 36));
      sub_100018C68(v24, type metadata accessor for BeaconStatus);
      if (v25)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        char v17 = 0;
        return v17 & 1;
      }
    }

    else
    {
      sub_100018C68(v24, type metadata accessor for BeaconStatus);
    }

    char v17 = static Date.< infix(_:_:)(v21 + *(int *)(v5 + 24), a1 + *(int *)(v5 + 24));
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return v17 & 1;
  }

  sub_100015794((uint64_t)v12, &qword_10099D8A0);
  char v17 = static Date.< infix(_:_:)(v28 + *(int *)(v5 + 24), a1 + *(int *)(v5 + 24));
  return v17 & 1;
}

BOOL sub_10051D000(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a1 + *(int *)(v5 + 24), (uint64_t)v10, v11);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AF840);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned __int8 v19 = v10[*(int *)(v18 + 96)];
  }

  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (qword_10099B538 != -1) {
        swift_once(&qword_10099B538, sub_1004F3B48);
      }
      uint64_t v20 = type metadata accessor for Logger(0LL);
      sub_10000A720(v20, (uint64_t)qword_100A2ACC8);
      uint64_t v21 = sub_10001DC4C(a1, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
      char v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.error.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc(22LL, -1LL);
        uint64_t v32 = swift_slowAlloc(32LL, -1LL);
        uint64_t v36 = v32;
        *(_DWORD *)uint64_t v24 = 141558275;
        uint64_t v34 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v24 + 4, v24 + 12);
        *(_WORD *)(v24 + 12) = 2081;
        uint64_t v33 = v2;
        sub_1006DD1E4();
        uint64_t v34 = sub_1003F11D4(v25, v26, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v24 + 14, v24 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
        _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "nearbyMultipartPeers: Invalid stableIdentifier %{private,mask.hash}s",  (uint8_t *)v24,  0x16u);
        uint64_t v27 = v32;
        swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1LL, -1LL);
        swift_slowDealloc(v24, -1LL, -1LL);
      }

      else
      {
        sub_100018C68((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
      }

      sub_100018C68((uint64_t)v10, type metadata accessor for StableIdentifier);
      return 0;
    }

    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009B0520);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = (unsigned __int8 *)&v10[*(int *)(v13 + 96)];
    unsigned __int8 v15 = *v14;
    int v16 = v14[1];
    swift_bridgeObjectRelease();
    if (v16 == 1)
    {
      uint64_t v17 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v10, v17);
      return 0;
    }

    unsigned __int8 v19 = v15;
  }

  BOOL v28 = sub_1004E5A94(v19, a2);
  uint64_t v29 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8LL))(v10, v29);
  return v28;
}

id sub_10051D3B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X8>)
{
  uint64_t v98 = a2;
  unint64_t v99 = a3;
  uint64_t v97 = a1;
  uint64_t v104 = (char *)a4;
  uint64_t v5 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  unint64_t v101 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v100 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v12 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  int v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1004E1BEC(v111);
  if (v4)
  {
    swift_errorRelease(v4);
    uint64_t v103 = 0LL;
    uint64_t v19 = swift_allocObject(&unk_100962FB0, 32LL, 7LL);
    unint64_t v20 = v99;
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = v98;
    *(void *)(v19 + swift_unknownObjectUnownedDestroy(v0 + 24) = v20;
    uint64_t v109 = sub_1005717DC;
    uint64_t v110 = v19;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v106 = 1107296256LL;
    uint64_t v107 = sub_1001C31E8;
    int v108 = &unk_100962FC8;
    uint64_t v21 = _Block_copy(&aBlock);
    uint64_t v22 = swift_retain();
    static DispatchQoS.unspecified.getter(v22);
    int v116 = _swiftEmptyArrayStorage;
    uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v116, v24, v25, v8, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v10, v21);
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v12, v102);
    swift_release();
    uint64_t v26 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v27 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
    unint64_t v28 = (unint64_t)v104;
    return (id)v27(v28, 1LL, 1LL, v26);
  }

  __n128 v95 = v7;
  unint64_t v96 = v16;
  uint64_t v93 = v14;
  uint64_t v94 = v13;
  uint64_t v17 = static Data.random(bytes:)(32LL);
  sub_1001782BC(v17, v18);
  uint64_t v103 = 0LL;
  unint64_t v30 = v106;
  uint64_t v92 = aBlock;
  uint64_t v32 = v111[0];
  unint64_t v31 = v111[1];
  uint64_t v33 = v114;
  unint64_t v34 = v115;
  uint64_t v89 = v112;
  unint64_t v90 = v113;
  sub_10001736C(v112, v113);
  uint64_t v91 = v32;
  unint64_t v88 = v31;
  sub_10001736C(v32, v31);
  uint64_t v86 = v33;
  unint64_t v87 = v34;
  sub_10001736C(v33, v34);
  uint64_t v35 = sub_100566710(v111);
  uint64_t v36 = UUID.init()(v35);
  id result = (id)MobileGestalt_get_current_device(v36);
  if (!result)
  {
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v37 = result;
  id v38 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

  if (v38)
  {
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    unint64_t v41 = v40;
  }

  else
  {
    uint64_t v39 = 0LL;
    unint64_t v41 = 0xE000000000000000LL;
  }

  uint64_t v42 = v104;
  uint64_t v104 = (char *)v30;
  uint64_t v43 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000LL) == 0) {
    uint64_t v43 = v39 & 0xFFFFFFFFFFFFLL;
  }
  if (!v43)
  {
    swift_bridgeObjectRelease();
    uint64_t v52 = swift_allocObject(&unk_100963000, 32LL, 7LL);
    unint64_t v53 = v99;
    *(void *)(v52 + swift_weakDestroy(v0 + 16) = v98;
    *(void *)(v52 + swift_unknownObjectUnownedDestroy(v0 + 24) = v53;
    uint64_t v109 = sub_10056DE00;
    uint64_t v110 = v52;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v106 = 1107296256LL;
    uint64_t v107 = sub_1001C31E8;
    int v108 = &unk_100963018;
    int64_t v54 = _Block_copy(&aBlock);
    uint64_t v55 = swift_retain();
    static DispatchQoS.unspecified.getter(v55);
    int v116 = _swiftEmptyArrayStorage;
    uint64_t v56 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v57 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v58 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v116, v57, v58, v8, v56);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v10, v54);
    _Block_release(v54);
    sub_100016F9C(v89, v90);
    sub_100016F9C(v91, v88);
    sub_100016F9C(v86, v87);
    sub_1000182F0(0LL, 0xF000000000000000LL);
    sub_1000182F0((uint64_t)v92, (unint64_t)v104);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v12, v102);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v96, v94);
    swift_release();
    uint64_t v26 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v27 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
    unint64_t v28 = (unint64_t)v42;
    return (id)v27(v28, 1LL, 1LL, v26);
  }

  uint64_t v44 = v95;
  uint64_t *v95 = v39;
  v44[1] = v41;
  uint64_t v45 = swift_storeEnumTagMultiPayload(v44, v5, 0LL);
  id result = (id)MobileGestalt_get_current_device(v45);
  if (!result)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }

  uint64_t v46 = result;
  id v47 = (id)MobileGestalt_copy_buildVersion_obj();

  if (v47)
  {
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    unint64_t v51 = v50;
  }

  else
  {
    uint64_t v49 = 0LL;
    unint64_t v51 = 0xE000000000000000LL;
  }

  id result = (id)MobileGestalt_get_current_device(v48);
  if (!result) {
    goto LABEL_24;
  }
  uint64_t v59 = result;
  id v60 = (id)MobileGestalt_copy_productType_obj();

  unint64_t v101 = v51;
  uint64_t v102 = v49;
  if (v60)
  {
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    unint64_t v99 = v62;
    uint64_t v100 = v61;
  }

  else
  {
    unint64_t v99 = 0xE000000000000000LL;
    uint64_t v100 = 0LL;
  }

  uint64_t v63 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v64 = (uint64_t)&v42[v63[8]];
  uint64_t v65 = v89;
  unint64_t v66 = v90;
  sub_10001736C(v89, v90);
  uint64_t v67 = v91;
  unint64_t v68 = v88;
  sub_10001736C(v91, v88);
  uint64_t v69 = v86;
  unint64_t v70 = v87;
  sub_10001736C(v86, v87);
  sub_10001736C((uint64_t)v92, (unint64_t)v104);
  sub_1004E6660(v64);
  sub_100016F9C(v65, v66);
  sub_100016F9C(v67, v68);
  uint64_t v71 = v69;
  unint64_t v72 = v70;
  sub_100016F9C(v69, v70);
  sub_1000182F0(0LL, 0xF000000000000000LL);
  uint64_t v73 = (uint64_t)v92;
  unint64_t v74 = (unint64_t)v104;
  sub_1000182F0((uint64_t)v92, (unint64_t)v104);
  uint64_t v75 = v93;
  uint64_t v76 = v94;
  (*(void (**)(char *, char *, uint64_t))(v93 + 32))(&v42[v63[5]], v96, v94);
  sub_10002218C((uint64_t)v95, (uint64_t)&v42[v63[6]], type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(&v42[v63[7]], 1LL, 1LL, v76);
  *(_OWORD *)uint64_t v42 = xmmword_1007E4480;
  unint64_t v77 = (uint64_t *)&v42[v63[9]];
  *unint64_t v77 = v71;
  v77[1] = v72;
  *(_OWORD *)&v42[v63[10]] = xmmword_1007E7660;
  uint64_t v78 = (uint64_t *)&v42[v63[11]];
  *uint64_t v78 = v73;
  v78[1] = v74;
  uint64_t v79 = &v42[v63[12]];
  unint64_t v80 = v90;
  *(void *)uint64_t v79 = v89;
  *((void *)v79 + 1) = v80;
  uint64_t v81 = &v42[v63[13]];
  *(void *)uint64_t v81 = v91;
  *((void *)v81 + 1) = v68;
  uint64_t v82 = (uint64_t *)&v42[v63[14]];
  unint64_t v83 = v99;
  *uint64_t v82 = v100;
  v82[1] = v83;
  uint64_t v84 = (uint64_t *)&v42[v63[15]];
  unint64_t v85 = v101;
  *uint64_t v84 = v102;
  v84[1] = v85;
  *(void *)&v42[v63[16]] = -1LL;
  *(void *)&v42[v63[17]] = -1LL;
  v42[v63[18]] = 3;
  v42[v63[19]] = 0;
  v42[v63[20]] = 0;
  return (id)(*(uint64_t (**)(char *, void, uint64_t, int *))(*((void *)v63 - 1) + 56LL))( v42,  0LL,  1LL,  v63);
}

uint64_t sub_10051DC2C(void (*a1)(uint64_t *), uint64_t a2, char a3)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v8 = sub_1000220F0();
  uint64_t v9 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v8, 0LL, 0LL);
  *uint64_t v10 = a3;
  *uint64_t v7 = v9;
  swift_storeEnumTagMultiPayload(v7, v5, 1LL);
  a1(v7);
  return sub_100015794((uint64_t)v7, (uint64_t *)&unk_1009B0830);
}

uint64_t sub_10051DCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = *(void *)(a2 + 104);
  sub_10001581C(a1, (uint64_t)v15, (uint64_t *)&unk_1009B0830);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  unint64_t v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_100962EE8, v19 + 16, v16 | 7);
  sub_100015750((uint64_t)v15, v20 + v17, (uint64_t *)&unk_1009B0830);
  *(void *)(v20 + v18) = a2;
  uint64_t v21 = (void *)(v20 + v19);
  uint64_t v22 = v31;
  void *v21 = v30;
  v21[1] = v22;
  aBlock[4] = sub_10056D7E8;
  void aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_100962F00;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v6, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  return swift_release();
}

id sub_10051DF78(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v85 = a2;
  uint64_t v83 = type metadata accessor for BeaconNamingRecord(0LL);
  __chkstk_darwin(v83);
  uint64_t v84 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v86 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v75 - v11;
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v80 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v81 = v15;
  uint64_t v82 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v75 - v16;
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t *)((char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v19);
  uint64_t v23 = (uint64_t *)((char *)&v75 - v22);
  sub_10001581C(a1, (uint64_t)&v75 - v22, (uint64_t *)&unk_1009B0830);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23, v18);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v25 = *v23;
    uint64_t v26 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v27 = qword_100A2B018;
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
    *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v87 = v25;
    swift_errorRetain(v25);
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v31 = String.init<A>(describing:)(&v87, v30);
    uint64_t v33 = v32;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = sub_1000226F4();
    *(void *)(v29 + 32) = v31;
    *(void *)(v29 + 40) = v33;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Failed to save newRecord: %@", 28LL, 2LL, v29);
    swift_bridgeObjectRelease();
    void *v21 = v25;
    swift_storeEnumTagMultiPayload(v21, v18, 1LL);
    swift_errorRetain(v25);
    a3(v21);
    swift_errorRelease(v25);
    return (id)sub_100015794((uint64_t)v21, (uint64_t *)&unk_1009B0830);
  }

  else
  {
    unint64_t v77 = (void (*)(void))a3;
    uint64_t v78 = a4;
    uint64_t v35 = sub_10002218C((uint64_t)v23, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    uint64_t v36 = static os_log_type_t.default.getter(v35);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v37 = qword_100A2B018;
    uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
    __int128 v79 = xmmword_1007E67D0;
    *(_OWORD *)(v39 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v40 = *(int *)(v13 + 20);
    uint64_t v76 = v17;
    unint64_t v41 = &v17[v40];
    uint64_t v42 = UUID.uuidString.getter(v39);
    uint64_t v44 = v43;
    *(void *)(v39 + 56) = &type metadata for String;
    unint64_t v45 = sub_1000226F4();
    *(void *)(v39 + 64) = v45;
    *(void *)(v39 + 32) = v42;
    *(void *)(v39 + 40) = v44;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "New local pairing requested: %@", 31LL, 2LL, v39);
    uint64_t v46 = swift_bridgeObjectRelease();
    uint64_t v47 = static os_log_type_t.default.getter(v46);
    if (qword_10099B768 != -1) {
      swift_once(&qword_10099B768, sub_100651610);
    }
    uint64_t v48 = qword_100A2B078;
    uint64_t v49 = swift_allocObject(v38, 72LL, 7LL);
    *(_OWORD *)(v49 + swift_weakDestroy(v0 + 16) = v79;
    uint64_t v50 = UUID.uuidString.getter(v49);
    *(void *)(v49 + 56) = &type metadata for String;
    *(void *)(v49 + 64) = v45;
    *(void *)(v49 + 32) = v50;
    *(void *)(v49 + 40) = v51;
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "New OwnedBeaconRecord saved to cloudKit: %@", 43LL, 2LL, v49);
    swift_bridgeObjectRelease();
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    uint64_t v52 = type metadata accessor for UUID(0LL);
    uint64_t v53 = *(void *)(v52 - 8);
    int64_t v54 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
    v54(v12, v41, v52);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v12, 0LL, 1LL, v52);
    sub_100024954();
    uint64_t v55 = v86;
    sub_10001581C((uint64_t)v12, v86, &qword_10099D8A0);
    sub_10061FEF4(v55);
    swift_release();
    uint64_t v56 = sub_100015794((uint64_t)v12, &qword_10099D8A0);
    id result = (id)MobileGestalt_get_current_device(v56);
    if (result)
    {
      uint64_t v57 = result;
      id v58 = (id)MobileGestalt_copy_userAssignedDeviceName_obj();

      if (v58)
      {
        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        unint64_t v62 = v61;
      }

      else
      {
        uint64_t v60 = 0LL;
        unint64_t v62 = 0xE000000000000000LL;
      }

      uint64_t v63 = (int *)v83;
      uint64_t v64 = v84;
      UUID.init()(v59);
      v54(&v64[v63[6]], v41, v52);
      uint64_t v65 = SPBeaconRoleIdUndefined;
      *(_OWORD *)uint64_t v64 = xmmword_1007E4480;
      *(void *)&v64[v63[7]] = v65;
      unint64_t v66 = (uint64_t *)&v64[v63[8]];
      uint64_t *v66 = v60;
      v66[1] = v62;
      uint64_t v67 = &v64[v63[9]];
      *(void *)uint64_t v67 = 0LL;
      *((void *)v67 + 1) = 0LL;
      uint64_t v68 = (uint64_t)v76;
      uint64_t v69 = v82;
      sub_10001DC4C((uint64_t)v76, v82, type metadata accessor for OwnedBeaconRecord);
      uint64_t v70 = *(unsigned __int8 *)(v80 + 80);
      uint64_t v71 = (v70 + 40) & ~v70;
      unint64_t v72 = (void *)swift_allocObject(&unk_100962F38, v71 + v81, v70 | 7);
      uint64_t v73 = v77;
      uint64_t v74 = v78;
      v72[2] = v85;
      v72[3] = v73;
      v72[4] = v74;
      sub_10002218C(v69, (uint64_t)v72 + v71, type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      swift_retain();
      sub_1004FC794((uint64_t)v64, 0, (uint64_t)sub_10056DAE4, (uint64_t)v72);
      swift_release();
      sub_100018C68((uint64_t)v64, type metadata accessor for BeaconNamingRecord);
      return (id)sub_100018C68(v68, type metadata accessor for OwnedBeaconRecord);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10051E5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a5;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v33 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v32 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v35 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
  sub_1004E696C(3u);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v15,  enum case for DispatchQoS.QoSClass.default(_:),  v12);
  uint64_t v16 = (void *)static OS_dispatch_queue.global(qos:)(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_10001DC4C(v29, (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for OwnedBeaconRecord);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = swift_allocObject(&unk_100962F60, v18 + v11, v17 | 7);
  uint64_t v20 = v31;
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v30;
  *(void *)(v19 + swift_unknownObjectUnownedDestroy(v0 + 24) = v20;
  sub_10002218C( (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v19 + v18,  type metadata accessor for OwnedBeaconRecord);
  aBlock[4] = sub_100569EC0;
  void aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_100962F78;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v27 = v32;
  uint64_t v26 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v24, v25, v33, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v27, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v26);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v35);
  return swift_release();
}

uint64_t sub_10051E918(uint64_t a1, unint64_t a2)
{
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t v17 = static os_log_type_t.default.getter(v14);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_100A2B018,  "SetupVirtualMeDevice: Creating virtualmedevice record on serial queue.",  70LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v18 = objc_autoreleasePoolPush();
  sub_10051EB94(v2, v27, v28, v16);
  objc_autoreleasePoolPop(v18);
  sub_10001581C((uint64_t)v16, (uint64_t)v13, (uint64_t *)&unk_1009A9C30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1LL, v3) == 1)
  {
    sub_100015794((uint64_t)v16, (uint64_t *)&unk_1009A9C30);
    uint64_t v16 = v13;
  }

  else
  {
    sub_10002218C((uint64_t)v13, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
    sub_10001DC4C((uint64_t)v9, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    uint64_t v19 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v20 = (v19 + 24) & ~v19;
    unint64_t v21 = (v5 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v22 = swift_allocObject(&unk_100961DB8, v21 + 16, v19 | 7);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v2;
    sub_10002218C((uint64_t)v7, v22 + v20, type metadata accessor for OwnedBeaconRecord);
    uint64_t v23 = (void *)(v22 + v21);
    unint64_t v24 = v28;
    *uint64_t v23 = v27;
    v23[1] = v24;
    swift_retain();
    swift_retain();
    sub_1004FC074((uint64_t)v9, 0, (uint64_t)sub_100569894, v22);
    swift_release();
    sub_100018C68((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
  }

  return sub_100015794((uint64_t)v16, (uint64_t *)&unk_1009A9C30);
}

id sub_10051EB94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v127 = a2;
  unint64_t v128 = a3;
  uint64_t v126 = a1;
  uint64_t v133 = a4;
  uint64_t v5 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v130 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v131 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v129 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1004E1BEC(v140);
  if (v4)
  {
    uint64_t v125 = (char *)v11;
    swift_errorRelease(v4);
    uint64_t v132 = 0LL;
    uint64_t v19 = swift_allocObject(&unk_100961E80, 32LL, 7LL);
    unint64_t v20 = v128;
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = v127;
    *(void *)(v19 + swift_unknownObjectUnownedDestroy(v0 + 24) = v20;
    uint64_t v138 = sub_100569EC4;
    uint64_t v139 = v19;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v135 = 1107296256LL;
    os_log_type_t v136 = sub_1001C31E8;
    uint64_t v137 = &unk_100961E98;
    unint64_t v21 = _Block_copy(&aBlock);
    uint64_t v22 = swift_retain();
    uint64_t v23 = v129;
    static DispatchQoS.unspecified.getter(v22);
    uint64_t v145 = _swiftEmptyArrayStorage;
    uint64_t v24 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v26 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v27 = v130;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v145, v25, v26, v8, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v23, v27, v21);
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v27, v8);
    (*(void (**)(char *, char *))(v131 + 8))(v23, v125);
    swift_release();
LABEL_4:
    uint64_t v28 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v29 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL);
    uint64_t v30 = v133;
    return (id)v29(v30, 1LL, 1LL, v28);
  }

  uint64_t v124 = v13;
  uint64_t v122 = v7;
  uint64_t v125 = v16;
  uint64_t v123 = v14;
  uint64_t v17 = static Data.random(bytes:)(32LL);
  sub_1001782BC(v17, v18);
  uint64_t v113 = v8;
  uint64_t v132 = 0LL;
  uint64_t v33 = (uint64_t)aBlock;
  unint64_t v32 = v135;
  uint64_t v35 = v140[0];
  unint64_t v34 = v140[1];
  uint64_t v36 = v143;
  unint64_t v37 = v144;
  uint64_t v117 = v141;
  unint64_t v118 = v142;
  sub_10001736C(v141, v142);
  uint64_t v119 = v35;
  unint64_t v116 = v34;
  sub_10001736C(v35, v34);
  uint64_t v114 = v36;
  unint64_t v115 = v37;
  sub_10001736C(v36, v37);
  uint64_t v38 = sub_100566710(v140);
  UUID.init()(v38);
  id v39 = [objc_allocWithZone(ACAccountStore) init];
  id v40 = objc_msgSend(v39, "aa_primaryAppleAccount");

  unint64_t v121 = v32;
  uint64_t v120 = v33;
  if (!v40)
  {
    uint64_t v55 = swift_allocObject(&unk_100961ED0, 32LL, 7LL);
    uint64_t v56 = v11;
    unint64_t v57 = v128;
    *(void *)(v55 + swift_weakDestroy(v0 + 16) = v127;
    *(void *)(v55 + swift_unknownObjectUnownedDestroy(v0 + 24) = v57;
    uint64_t v138 = sub_1005717DC;
    uint64_t v139 = v55;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v135 = 1107296256LL;
    os_log_type_t v136 = sub_1001C31E8;
    uint64_t v137 = &unk_100961EE8;
    id v58 = _Block_copy(&aBlock);
    uint64_t v59 = swift_retain();
    uint64_t v60 = v129;
    static DispatchQoS.unspecified.getter(v59);
    uint64_t v145 = _swiftEmptyArrayStorage;
    uint64_t v61 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v62 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v63 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v64 = v130;
    uint64_t v65 = v62;
    uint64_t v66 = v113;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v145, v65, v63, v113, v61);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v60, v64, v58);
    _Block_release(v58);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v64, v66);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v60, v56);
    uint64_t v67 = swift_release();
    uint64_t v68 = static os_log_type_t.default.getter(v67);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v68,  &_mh_execute_header,  qword_100A2B018,  "SetupVirtualMeDevice: Could not obtain aa_primaryAppleAccount",  61LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100016F9C(v117, v118);
    sub_100016F9C(v119, v116);
    sub_100016F9C(v114, v115);
    sub_1000182F0(0LL, 0xF000000000000000LL);
    sub_1000182F0(v120, v121);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v125, v124);
    goto LABEL_4;
  }

  id result = objc_msgSend(v40, "aa_altDSID");
  if (!result)
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }

  unint64_t v41 = result;
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  unint64_t v44 = v43;

  uint64_t v45 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000LL) == 0) {
    uint64_t v45 = v42 & 0xFFFFFFFFFFFFLL;
  }
  id v112 = v40;
  if (!v45)
  {
    swift_bridgeObjectRelease();
    uint64_t v69 = swift_allocObject(&unk_100961F20, 32LL, 7LL);
    uint64_t v70 = v11;
    unint64_t v71 = v128;
    *(void *)(v69 + swift_weakDestroy(v0 + 16) = v127;
    *(void *)(v69 + swift_unknownObjectUnownedDestroy(v0 + 24) = v71;
    uint64_t v138 = sub_1005717DC;
    uint64_t v139 = v69;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v135 = 1107296256LL;
    os_log_type_t v136 = sub_1001C31E8;
    uint64_t v137 = &unk_100961F38;
    unint64_t v72 = _Block_copy(&aBlock);
    uint64_t v73 = swift_retain();
    uint64_t v74 = v129;
    static DispatchQoS.unspecified.getter(v73);
    uint64_t v145 = _swiftEmptyArrayStorage;
    uint64_t v75 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v76 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v77 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v78 = v130;
    uint64_t v79 = v76;
    uint64_t v80 = v113;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v145, v79, v77, v113, v75);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v74, v78, v72);
    _Block_release(v72);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v78, v80);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v74, v70);
    uint64_t v81 = swift_release();
    uint64_t v82 = static os_log_type_t.default.getter(v81);
    uint64_t v83 = v133;
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v82,  &_mh_execute_header,  qword_100A2B018,  "SetupVirtualMeDevice: Could not obtain altDsid",  46LL,  2LL,  _swiftEmptyArrayStorage);

    sub_100016F9C(v117, v118);
    sub_100016F9C(v119, v116);
    sub_100016F9C(v114, v115);
    sub_1000182F0(0LL, 0xF000000000000000LL);
    sub_1000182F0(v120, v121);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v125, v124);
    uint64_t v28 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v29 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL);
    uint64_t v30 = v83;
    return (id)v29(v30, 1LL, 1LL, v28);
  }

  uint64_t v46 = v122;
  *uint64_t v122 = v42;
  v46[1] = v44;
  uint64_t v47 = swift_storeEnumTagMultiPayload(v46, v5, 4LL);
  id result = (id)MobileGestalt_get_current_device(v47);
  uint64_t v48 = (char *)v133;
  if (!result) {
    goto LABEL_27;
  }
  uint64_t v49 = result;
  id v50 = (id)MobileGestalt_copy_buildVersion_obj();

  if (v50)
  {
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    unint64_t v54 = v53;
  }

  else
  {
    uint64_t v52 = 0LL;
    unint64_t v54 = 0xE000000000000000LL;
  }

  id result = (id)MobileGestalt_get_current_device(v51);
  if (!result) {
    goto LABEL_28;
  }
  uint64_t v84 = result;
  id v85 = (id)MobileGestalt_copy_productType_obj();

  uint64_t v130 = (char *)v54;
  uint64_t v131 = v52;
  if (v85)
  {
    uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
    unint64_t v128 = v87;
    uint64_t v129 = (char *)v86;
  }

  else
  {
    unint64_t v128 = 0xE000000000000000LL;
    uint64_t v129 = 0LL;
  }

  unint64_t v88 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v89 = (uint64_t)&v48[v88[8]];
  uint64_t v90 = v117;
  unint64_t v91 = v118;
  sub_10001736C(v117, v118);
  uint64_t v92 = v119;
  unint64_t v93 = v116;
  sub_10001736C(v119, v116);
  uint64_t v94 = v114;
  unint64_t v95 = v115;
  sub_10001736C(v114, v115);
  sub_10001736C(v120, v121);
  sub_1004E6660(v89);

  sub_100016F9C(v90, v91);
  sub_100016F9C(v92, v93);
  uint64_t v96 = v94;
  unint64_t v97 = v95;
  sub_100016F9C(v94, v95);
  sub_1000182F0(0LL, 0xF000000000000000LL);
  uint64_t v98 = v120;
  unint64_t v99 = v121;
  sub_1000182F0(v120, v121);
  uint64_t v100 = v123;
  uint64_t v101 = v124;
  (*(void (**)(char *, char *, uint64_t))(v123 + 32))(&v48[v88[5]], v125, v124);
  sub_10002218C((uint64_t)v122, (uint64_t)&v48[v88[6]], type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56))(&v48[v88[7]], 1LL, 1LL, v101);
  *(_OWORD *)uint64_t v48 = xmmword_1007E4480;
  uint64_t v102 = (uint64_t *)&v48[v88[9]];
  *uint64_t v102 = v96;
  v102[1] = v97;
  *(_OWORD *)&v48[v88[10]] = xmmword_1007E7660;
  uint64_t v103 = (uint64_t *)&v48[v88[11]];
  *uint64_t v103 = v98;
  v103[1] = v99;
  uint64_t v104 = &v48[v88[12]];
  unint64_t v105 = v118;
  *(void *)uint64_t v104 = v117;
  *((void *)v104 + 1) = v105;
  uint64_t v106 = &v48[v88[13]];
  *(void *)uint64_t v106 = v119;
  *((void *)v106 + 1) = v93;
  uint64_t v107 = &v48[v88[14]];
  unint64_t v108 = v128;
  *(void *)uint64_t v107 = v129;
  *((void *)v107 + 1) = v108;
  uint64_t v109 = (uint64_t *)&v48[v88[15]];
  uint64_t v110 = v130;
  *uint64_t v109 = v131;
  v109[1] = (uint64_t)v110;
  *(void *)&v48[v88[16]] = -1LL;
  *(void *)&v48[v88[17]] = -1LL;
  v48[v88[18]] = 3;
  v48[v88[19]] = 0;
  v48[v88[20]] = 0;
  return (id)(*(uint64_t (**)(char *, void, uint64_t, int *))(*((void *)v88 - 1) + 56LL))( v48,  0LL,  1LL,  v88);
}

uint64_t sub_10051F72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v36 = a1;
  uint64_t v37 = a3;
  uint64_t v42 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  unint64_t v41 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = *(void *)(a2 + 104);
  sub_10001581C(v36, (uint64_t)v17, (uint64_t *)&unk_1009B0830);
  sub_10001DC4C(v37, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = (v16 + v20 + v19) & ~v20;
  unint64_t v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = swift_allocObject(&unk_100961DE0, v23 + 16, v18 | v20 | 7);
  sub_100015750((uint64_t)v17, v24 + v19, (uint64_t *)&unk_1009B0830);
  sub_10002218C((uint64_t)v13, v24 + v21, type metadata accessor for OwnedBeaconRecord);
  *(void *)(v24 + v22) = a2;
  uint64_t v25 = (void *)(v24 + v23);
  uint64_t v26 = v39;
  *uint64_t v25 = v38;
  v25[1] = v26;
  aBlock[4] = sub_100569E34;
  void aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_100961DF8;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v28 = swift_retain();
  static DispatchQoS.unspecified.getter(v28);
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v29 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v31 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v33 = v41;
  uint64_t v32 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v30, v31, v42, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v33, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v44);
  return swift_release();
}

uint64_t sub_10051FA34(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v79 = a4;
  uint64_t v80 = a5;
  uint64_t v73 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v78 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v77 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v75 = *(void *)(v8 - 8);
  uint64_t v76 = v8;
  __chkstk_darwin(v8);
  uint64_t v74 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v70 = *(void *)(v10 - 8);
  uint64_t v71 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v69 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v69 + 64);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v72 = (uint64_t)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v66 - v16;
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (void *)((char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v19);
  unint64_t v23 = (uint64_t *)((char *)&v66 - v22);
  sub_10001581C(a1, (uint64_t)&v66 - v22, (uint64_t *)&unk_1009B0830);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23, v18);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v25 = *v23;
    uint64_t v26 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v27 = qword_100A2B018;
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
    *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    aBlock[0] = v25;
    swift_errorRetain(v25);
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v31 = String.init<A>(describing:)(aBlock, v30);
    uint64_t v33 = v32;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = sub_1000226F4();
    *(void *)(v29 + 32) = v31;
    *(void *)(v29 + 40) = v33;
    os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  v27,  "SetupVirtualMeDevice: Failed to save newRecord: %@",  50LL,  2LL,  v29);
    swift_bridgeObjectRelease();
    void *v21 = v25;
    swift_storeEnumTagMultiPayload(v21, v18, 1LL);
    swift_errorRetain(v25);
    v79(v21);
    swift_errorRelease(v25);
    return sub_100015794((uint64_t)v21, (uint64_t *)&unk_1009B0830);
  }

  else
  {
    uint64_t v68 = v6;
    uint64_t v35 = sub_10002218C((uint64_t)v23, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    unsigned int v67 = static os_log_type_t.default.getter(v35);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v36 = qword_100A2B018;
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v38 = swift_allocObject(v37, 72LL, 7LL);
    __int128 v66 = xmmword_1007E67D0;
    *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v39 = UUID.uuidString.getter(v38);
    uint64_t v41 = v40;
    *(void *)(v38 + 56) = &type metadata for String;
    unint64_t v42 = sub_1000226F4();
    *(void *)(v38 + 64) = v42;
    *(void *)(v38 + 32) = v39;
    *(void *)(v38 + 40) = v41;
    os_log(_:dso:log:_:_:)( v67,  &_mh_execute_header,  v36,  "SetupVirtualMeDevice: New virtualMe device requested: %@",  56LL,  2LL,  v38);
    uint64_t v43 = swift_bridgeObjectRelease();
    uint64_t v44 = static os_log_type_t.default.getter(v43);
    if (qword_10099B768 != -1) {
      swift_once(&qword_10099B768, sub_100651610);
    }
    uint64_t v45 = qword_100A2B078;
    uint64_t v46 = swift_allocObject(v37, 72LL, 7LL);
    *(_OWORD *)(v46 + swift_weakDestroy(v0 + 16) = v66;
    uint64_t v47 = UUID.uuidString.getter(v46);
    *(void *)(v46 + 56) = &type metadata for String;
    *(void *)(v46 + 64) = v42;
    *(void *)(v46 + 32) = v47;
    *(void *)(v46 + 40) = v48;
    os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  v45,  "SetupVirtualMeDevice: New OwnedBeaconRecord saved to cloudKit: %@",  65LL,  2LL,  v46);
    swift_bridgeObjectRelease();
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v50 = v70;
    uint64_t v49 = v71;
    (*(void (**)(char *, void, uint64_t))(v70 + 104))( v12,  enum case for DispatchQoS.QoSClass.default(_:),  v71);
    uint64_t v51 = (void *)static OS_dispatch_queue.global(qos:)(v12);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v49);
    uint64_t v52 = v72;
    sub_10001DC4C((uint64_t)v17, v72, type metadata accessor for OwnedBeaconRecord);
    uint64_t v53 = *(unsigned __int8 *)(v69 + 80);
    uint64_t v54 = (v53 + 32) & ~v53;
    uint64_t v55 = swift_allocObject(&unk_100961E30, v54 + v14, v53 | 7);
    uint64_t v56 = v80;
    *(void *)(v55 + swift_weakDestroy(v0 + 16) = v79;
    *(void *)(v55 + swift_unknownObjectUnownedDestroy(v0 + 24) = v56;
    sub_10002218C(v52, v55 + v54, type metadata accessor for OwnedBeaconRecord);
    aBlock[4] = sub_100569EC0;
    void aBlock[5] = v55;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    id aBlock[3] = &unk_100961E48;
    unint64_t v57 = _Block_copy(aBlock);
    uint64_t v58 = swift_retain();
    uint64_t v59 = v74;
    static DispatchQoS.unspecified.getter(v58);
    uint64_t v81 = _swiftEmptyArrayStorage;
    uint64_t v60 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v61 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v62 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v63 = v77;
    uint64_t v64 = v61;
    uint64_t v65 = v68;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v81, v64, v62, v68, v60);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v59, v63, v57);
    _Block_release(v57);

    (*(void (**)(char *, uint64_t))(v78 + 8))(v63, v65);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v59, v76);
    sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    return swift_release();
  }

uint64_t sub_1005200C8(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a3, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
  swift_storeEnumTagMultiPayload(v7, v5, 0LL);
  a1(v7);
  return sub_100015794((uint64_t)v7, (uint64_t *)&unk_1009B0830);
}

uint64_t sub_100520178(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v83 = a2;
  unint64_t v84 = a3;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v75 = *(void *)(v4 - 8);
  uint64_t v76 = v4;
  uint64_t v5 = v75;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = v7;
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = v10;
  uint64_t v11 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = v13;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v65 = *(void *)(v14 - 8);
  uint64_t v15 = v65;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v82 = v17;
  uint64_t v54 = *a1;
  unint64_t v53 = a1[1];
  uint64_t v18 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v81 = (char *)a1 + v18[5];
  uint64_t v19 = *(void (**)(char *))(v15 + 16);
  uint64_t v62 = v14;
  v19(v17);
  uint64_t v80 = (uint64_t)a1 + v18[6];
  sub_10001DC4C(v80, (uint64_t)v13, type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v10, 1LL, 1LL, v14);
  uint64_t v74 = (char *)a1 + v18[8];
  (*(void (**)(char *))(v5 + 16))(v7);
  uint64_t v20 = v18[10];
  uint64_t v71 = (uint64_t *)((char *)a1 + v18[9]);
  unint64_t v22 = v71[1];
  uint64_t v51 = *v71;
  uint64_t v21 = v51;
  unint64_t v52 = v22;
  uint64_t v73 = (uint64_t *)((char *)a1 + v20);
  unint64_t v23 = *(uint64_t *)((char *)a1 + v20 + 8);
  uint64_t v86 = *(uint64_t *)((char *)a1 + v20);
  unint64_t v50 = v23;
  uint64_t v24 = v18[13];
  uint64_t v70 = (uint64_t *)((char *)a1 + v18[12]);
  unint64_t v25 = v70[1];
  uint64_t v85 = *v70;
  uint64_t v72 = (uint64_t *)((char *)a1 + v24);
  unint64_t v26 = *(uint64_t *)((char *)a1 + v24 + 8);
  uint64_t v48 = *(uint64_t *)((char *)a1 + v24);
  unint64_t v49 = v26;
  uint64_t v27 = v18[15];
  uint64_t v56 = (uint64_t *)((char *)a1 + v18[14]);
  uint64_t v69 = *v56;
  uint64_t v47 = v56[1];
  uint64_t v64 = v18[16];
  uint64_t v28 = v18[17];
  uint64_t v66 = *(uint64_t *)((char *)a1 + v64);
  uint64_t v67 = v28;
  uint64_t v68 = *(uint64_t *)((char *)a1 + v28);
  uint64_t v29 = (uint64_t *)((char *)a1 + v27);
  uint64_t v61 = v18[18];
  uint64_t v58 = v18[19];
  int v63 = *((unsigned __int8 *)a1 + v61);
  uint64_t v30 = *(uint64_t *)((char *)a1 + v27 + 8);
  uint64_t v55 = *(uint64_t *)((char *)a1 + v27);
  int v60 = *((unsigned __int8 *)a1 + v58);
  uint64_t v57 = v18[20];
  int v59 = *((unsigned __int8 *)a1 + v57);
  uint64_t v31 = v54;
  unint64_t v32 = v53;
  sub_10001736C(v54, v53);
  sub_10001736C(v21, v22);
  sub_100018BE4(v86, v23);
  sub_10001736C(v85, v25);
  uint64_t v33 = v48;
  unint64_t v34 = v49;
  sub_10001736C(v48, v49);
  uint64_t v35 = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v30);
  sub_100018C68((uint64_t)a1, type metadata accessor for OwnedBeaconRecord);
  *a1 = v31;
  a1[1] = v32;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v81, v82, v62);
  sub_10002218C((uint64_t)v78, v80, type metadata accessor for StableIdentifier);
  sub_100015750((uint64_t)v79, (uint64_t)a1 + v18[7], &qword_10099D8A0);
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v74, v77, v76);
  uint64_t v36 = v71;
  unint64_t v37 = v52;
  *uint64_t v71 = v51;
  v36[1] = v37;
  uint64_t v38 = v73;
  unint64_t v39 = v50;
  void *v73 = v86;
  v38[1] = v39;
  uint64_t v40 = (uint64_t *)((char *)a1 + v18[11]);
  uint64_t v41 = v83;
  unint64_t v42 = v84;
  *uint64_t v40 = v83;
  v40[1] = v42;
  uint64_t v43 = v70;
  uint64_t *v70 = v85;
  v43[1] = v25;
  uint64_t v44 = v72;
  *uint64_t v72 = v33;
  v44[1] = v34;
  uint64_t v45 = v56;
  *uint64_t v56 = v69;
  v45[1] = v35;
  *uint64_t v29 = v55;
  v29[1] = v30;
  *(uint64_t *)((char *)a1 + v64) = v66;
  *(uint64_t *)((char *)a1 + v67) = v68;
  *((_BYTE *)a1 + v61) = v63;
  *((_BYTE *)a1 + v58) = v60;
  *((_BYTE *)a1 + v57) = v59;
  return sub_10001736C(v41, v42);
}

void sub_1005205FC(uint64_t a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)&v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = swift_projectBox(a2);
  sub_10001581C(a1, (uint64_t)v11, (uint64_t *)&unk_1009B0830);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v14 = *v11;
    uint64_t v15 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v16 = qword_100A2B018;
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    swift_getErrorValue(v14, v25, v24);
    uint64_t v19 = Error.localizedDescription.getter(v24[1], v24[2]);
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_1000226F4();
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Failed to upgrade record: %@", 28LL, 2LL, v18);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
  }

  else
  {
    sub_10002218C((uint64_t)v11, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
    swift_beginAccess(v12, v23, 1LL, 0LL);
    sub_10006A5A4((uint64_t)v8, v12, type metadata accessor for OwnedBeaconRecord);
  }

  dispatch_group_leave(a3);
}

uint64_t sub_100520804@<X0>( uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  unint64_t v49 = a2;
  uint64_t v65 = a1;
  uint64_t v50 = a6;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v51 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v52 = a4;
  uint64_t v53 = a3;
  if ((_BYTE)a4)
  {
    if (a4 == 1)
    {
      uint64_t v55 = &type metadata for SecondaryIndex;
      unint64_t v17 = sub_1000868A0();
    }

    else
    {
      uint64_t v55 = &type metadata for SecureLocationsIndex;
      unint64_t v17 = sub_10008685C();
    }
  }

  else
  {
    uint64_t v55 = &type metadata for PrimaryIndex;
    unint64_t v17 = sub_1000868E4();
  }

  unint64_t v56 = v17;
  *(void *)&__int128 v54 = a3;
  uint64_t v18 = v11;
  sub_100012EC0(&v54, (uint64_t)v57);
  uint64_t v19 = v12;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20(v16, v65, v18);
  sub_100013044((uint64_t)v57, (uint64_t)&v16[*(int *)(v14 + 20)]);
  sub_10079C86C((uint64_t)v16, a5 & 1, v58);
  sub_100018C68((uint64_t)v16, type metadata accessor for BeaconKeyManager.IndexInformation);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
  sub_100015750((uint64_t)v58, (uint64_t)&v59, &qword_1009A6630);
  if (*((void *)&v60 + 1) >> 60 == 15LL)
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2AC98);
    unint64_t v22 = v51;
    v20(v51, v65, v18);
    uint64_t v23 = swift_retain_n(v7, 2LL);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    int v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      LODWORD(v65) = v25;
      uint64_t v26 = swift_slowAlloc(62LL, -1LL);
      uint64_t v50 = swift_slowAlloc(128LL, -1LL);
      v57[0] = v50;
      *(_DWORD *)uint64_t v26 = 136447491;
      *(void *)&__int128 v54 = *v7;
      uint64_t v27 = sub_100004AEC(&qword_1009A8030);
      uint64_t v28 = String.init<A>(describing:)(&v54, v27);
      *(void *)&__int128 v54 = sub_1003F11D4(v28, v29, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 4, v26 + 12);
      uint64_t v30 = v7;
      uint64_t v31 = 0xD000000000000010LL;
      swift_release_n(v30, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      *(void *)&__int128 v54 = sub_1003F11D4(0xD00000000000004BLL, 0x80000001008675B0LL, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 14, v26 + 22);
      *(_WORD *)(v26 + 22) = 2160;
      *(void *)&__int128 v54 = 1752392040LL;
      uint64_t v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 24, v26 + 32);
      *(_WORD *)(v26 + 32) = 2081;
      uint64_t v33 = UUID.uuidString.getter(v32);
      *(void *)&__int128 v54 = sub_1003F11D4(v33, v34, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 34, v26 + 42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
      *(_WORD *)(v26 + 42) = 2082;
      if ((_BYTE)v52)
      {
        uint64_t v35 = v53;
        if (v52 == 1)
        {
          unint64_t v43 = 0xEA00000000007972LL;
          uint64_t v31 = 0x61646E6F6365732ELL;
        }

        else
        {
          unint64_t v43 = 0x80000001008533C0LL;
        }
      }

      else
      {
        unint64_t v43 = 0xE800000000000000LL;
        uint64_t v31 = 0x7972616D6972702ELL;
        uint64_t v35 = v53;
      }

      *(void *)&__int128 v54 = sub_1003F11D4(v31, v43, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 44, v26 + 52);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 52) = 2048;
      *(void *)&__int128 v54 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 54, v26 + 62);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  (os_log_type_t)v65,  "%{public}s: %{public}s. Unable to obtain keys for beacon %{private,mask.hash}s, sequence %{public}s, index %llu",  (uint8_t *)v26,  0x3Eu);
      uint64_t v44 = v50;
      swift_arrayDestroy(v50, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v7, 2LL);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v18);
    }

    unint64_t v45 = sub_1000220F0();
    uint64_t v46 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v45, 0LL, 0LL);
    *uint64_t v47 = 10;
    return swift_willThrow(v46);
  }

  else
  {
    __int128 v62 = v59;
    __int128 v63 = v60;
    __int128 v64 = v61;
    unint64_t v36 = sub_1002DF51C(v52);
    uint64_t v37 = type metadata accessor for TimeBasedKey(0LL);
    uint64_t v38 = (void *)v50;
    uint64_t v39 = v53;
    uint64_t result = sub_1003DB840(v49, v53, v36, v50 + *(int *)(v37 + 20));
    *uint64_t v38 = v39;
    uint64_t v41 = (_OWORD *)((char *)v38 + *(int *)(v37 + 24));
    __int128 v42 = v63;
    *uint64_t v41 = v62;
    v41[1] = v42;
    void v41[2] = v64;
  }

  return result;
}

uint64_t sub_100520DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1009A8010 + dword_1009A8010);
  uint64_t v13 = (void *)swift_task_alloc(unk_1009A8014);
  *(void *)(v7 + swift_unknownObjectUnownedDestroy(v0 + 24) = v13;
  void *v13 = v7;
  v13[1] = sub_100520E88;
  return v15(a3, a4, a5, a6, a7);
}

uint64_t sub_100520E88(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v4;
  swift_task_dealloc(*(void *)(*v4 + 24));
  if (v3)
  {
    swift_errorRelease(v3);
    uint64_t v9 = sub_100520F34;
  }

  else
  {
    *(_BYTE *)(v8 + 48) = a3;
    *(void *)(v8 + 32) = a2;
    *(void *)(v8 + 40) = a1;
    uint64_t v9 = sub_100520F14;
  }

  return swift_task_switch(v9, 0LL, 0LL);
}

uint64_t sub_100520F14()
{
  __int8 v1 = *(_BYTE *)(v0 + 48);
  uint64_t v2 = *(int8x16_t **)(v0 + 16);
  *uint64_t v2 = vextq_s8(*(int8x16_t *)(v0 + 32), *(int8x16_t *)(v0 + 32), 8uLL);
  v2[1].i8[0] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100520F34()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)uint64_t v1 = 0LL;
  *(void *)(v1 + 8) = 0LL;
  *(_BYTE *)(v1 + swift_weakDestroy(v0 + 16) = 2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100520F4C@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1004EA204(a2, *a1, 0, 0, a3);
  if (!v3)
  {
    uint64_t v6 = type metadata accessor for TimeBasedKey(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a3, 0LL, 1LL, v6);
  }

  return result;
}

uint64_t sub_100520FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)(a2 + 48);
  uint64_t v14 = (void *)swift_allocObject(&unk_100962AB0, 48LL, 7LL);
  void v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  aBlock[4] = sub_10056C518;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_100962AC8;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v16 = sub_1000372DC(a3, a4);
  static DispatchQoS.unspecified.getter(v16);
  int v25 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v19 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v8, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v22);
  return swift_release();
}

uint64_t sub_1005211CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static os_log_type_t.default.getter(v4);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_100A2B018,  "Started repairing cryptor.",  26LL,  2LL,  _swiftEmptyArrayStorage);
  sub_1004E89B0();
  sub_1004F730C();
  sub_10067488C();
  uint64_t v6 = swift_release();
  uint64_t v7 = static os_log_type_t.default.getter(v6);
  uint64_t result = os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_100A2B018,  "Completed repairing cryptor.",  28LL,  2LL,  _swiftEmptyArrayStorage);
  if (a3) {
    return a3(result);
  }
  return result;
}

uint64_t sub_1005212D8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6)
{
  int v311 = a6;
  int v343 = a5;
  v350 = a4;
  uint64_t v376 = a2;
  uint64_t v380 = a1;
  uint64_t v354 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v328 = *(void *)(v354 - 8);
  uint64_t v7 = __chkstk_darwin(v354);
  uint64_t v351 = (uint64_t)&v306 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v315 = (char *)&v306 - v9;
  uint64_t v10 = sub_100004AEC(&qword_1009A4780);
  __chkstk_darwin(v10);
  uint64_t v329 = (uint64_t)&v306 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A7E78);
  __chkstk_darwin(v12);
  uint64_t v324 = (char *)&v306 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v336 = sub_100004AEC(&qword_1009A7E80);
  uint64_t v326 = *(void *)(v336 - 8);
  uint64_t v14 = __chkstk_darwin(v336);
  uint64_t v322 = (char *)&v306 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v325 = (uint64_t)&v306 - v16;
  uint64_t v17 = sub_100004AEC(&qword_1009A7E88);
  uint64_t v18 = __chkstk_darwin(v17);
  v323 = (char *)&v306 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v327 = (uint64_t)&v306 - v20;
  uint64_t v21 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v21);
  uint64_t v313 = (uint64_t)&v306 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v317 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v312 = *(void *)(v317 - 8);
  uint64_t v23 = __chkstk_darwin(v317);
  uint64_t v310 = (uint64_t)&v306 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v309 = (uint64_t)&v306 - v26;
  uint64_t v308 = v27;
  __chkstk_darwin(v25);
  uint64_t v314 = (uint64_t)&v306 - v28;
  uint64_t v29 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v29);
  uint64_t v319 = (uint64_t)&v306 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v335 = (char *)&v306 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v32);
  v334 = (char *)&v306 - v34;
  uint64_t v347 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v344 = *(void *)(v347 - 8);
  uint64_t v35 = __chkstk_darwin(v347);
  uint64_t v337 = (uint64_t)&v306 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v35);
  uint64_t v330 = (uint64_t)&v306 - v37;
  uint64_t v370 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v369 = *(void *)(v370 - 8);
  __chkstk_darwin(v370);
  v368 = (char *)&v306 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v338 = type metadata accessor for SafeLocation(0LL);
  uint64_t v339 = *(void *)(v338 - 8);
  __chkstk_darwin(v338);
  v381 = (char *)&v306 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v348 = type metadata accessor for URL(0LL);
  uint64_t v345 = *(void *)(v348 - 8);
  uint64_t v40 = __chkstk_darwin(v348);
  v321 = (char *)&v306 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v320 = (char *)&v306 - v43;
  __chkstk_darwin(v42);
  uint64_t v346 = (char *)&v306 - v44;
  uint64_t v45 = sub_100004AEC(&qword_1009A2430);
  __chkstk_darwin(v45);
  unint64_t v356 = (unint64_t)&v306 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v357 = type metadata accessor for KeyAlignmentRecord(0LL);
  unint64_t v355 = *(void *)(v357 - 8);
  uint64_t v47 = __chkstk_darwin(v357);
  uint64_t v332 = (uint64_t)&v306 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v47);
  uint64_t v333 = (uint64_t)&v306 - v49;
  uint64_t v360 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v360);
  uint64_t v342 = (char *)&v306 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v358 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v341 = *(void *)(v358 - 8);
  uint64_t v51 = __chkstk_darwin(v358);
  uint64_t v331 = (uint64_t)&v306 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v51);
  uint64_t v359 = (uint64_t)&v306 - v53;
  uint64_t v382 = type metadata accessor for UUID(0LL);
  uint64_t v379 = *(void *)(v382 - 8);
  uint64_t v54 = __chkstk_darwin(v382);
  uint64_t v352 = (char *)&v306 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v316 = (char *)&v306 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  v372 = (char *)&v306 - v59;
  uint64_t v60 = __chkstk_darwin(v58);
  uint64_t v361 = (char *)&v306 - v61;
  uint64_t v353 = v62;
  __chkstk_darwin(v60);
  v378 = (char *)&v306 - v63;
  uint64_t v374 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v64 = *(void *)(v374 - 8);
  uint64_t v65 = __chkstk_darwin(v374);
  *(void *)&__int128 v373 = (char *)&v306 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v65);
  v318 = (char *)&v306 - v67;
  uint64_t v68 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v69 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v71 = (char *)&v306 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v72 = qword_100A2A6C8;
  uint64_t v73 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v73);
  *((void *)&v306 - 4) = v72;
  uint64_t v74 = v375;
  uint64_t v75 = v376;
  *((void *)&v306 - 3) = v376;
  *((void *)&v306 - 2) = sub_10001CC40;
  *((void *)&v306 - 1) = 0LL;
  OS_dispatch_queue.sync<A>(flags:execute:)(v71, sub_1000DEE24);
  uint64_t v340 = (uint64_t)v74;
  uint64_t v76 = *(void (**)(void *, void *))(v69 + 8);
  v366 = v71;
  uint64_t v77 = v71;
  uint64_t v78 = v76;
  v367 = (void *)v68;
  v76(v77, (void *)v68);
  uint64_t v79 = *(void *)(a3 + 136);
  if (qword_10099B5C8 != -1) {
    swift_once(&qword_10099B5C8, sub_1005BD7E8);
  }
  uint64_t v80 = sub_10000A720(v348, (uint64_t)qword_100A2ADC0);
  uint64_t v81 = sub_100533A4C(v80);
  uint64_t v82 = v81[2];
  uint64_t v377 = a3;
  uint64_t v83 = v379;
  uint64_t v349 = v79;
  unint64_t v84 = v361;
  v365 = v78;
  if (!v82 || (unint64_t v85 = sub_10030D124(v75), (v86 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_14:
    uint64_t v219 = v350;
    goto LABEL_15;
  }

  uint64_t v87 = *(void *)(v81[7] + 8 * v85);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRelease();
  v371 = (void (*)(char *, uint64_t))sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v88 = swift_allocObject(v371, 112LL, 7LL);
  *(_OWORD *)(v88 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v89 = *(void *)(v87 + 16);
  *(void *)(v88 + 56) = &type metadata for Int;
  *(void *)(v88 + 64) = &protocol witness table for Int;
  *(void *)(v88 + 32) = v89;
  uint64_t v90 = UUID.uuidString.getter(v88);
  uint64_t v92 = v91;
  *(void *)(v88 + 96) = &type metadata for String;
  unint64_t v364 = sub_1000226F4();
  *(void *)(v88 + 104) = v364;
  *(void *)(v88 + 72) = v90;
  *(void *)(v88 + 80) = v92;
  uint64_t v93 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v94 = (void *)static OS_os_log.default.getter(v93);
  uint64_t v95 = static os_log_type_t.default.getter(v94);
  os_log(_:dso:log:type:_:)( "BeaconStore removing %i locations for beacon %@",  47LL,  2LL,  &_mh_execute_header,  v94,  v95,  v88);
  swift_bridgeObjectRelease();

  uint64_t v96 = *(char **)(v87 + 16);
  if (!v96)
  {
    swift_bridgeObjectRelease();
    uint64_t v83 = v379;
    unint64_t v84 = v361;
    goto LABEL_14;
  }

  unint64_t v97 = (*(unsigned __int8 *)(v64 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
  uint64_t v307 = v87;
  uint64_t v98 = v87 + v97;
  uint64_t v363 = *(void *)(v64 + 72);
  __int128 v362 = xmmword_1007E67D0;
  uint64_t v99 = (uint64_t)v318;
  uint64_t v100 = v378;
  do
  {
    v375 = v96;
    sub_10001DC4C(v98, v99, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v101 = v379;
    uint64_t v102 = v382;
    (*(void (**)(char *, uint64_t, uint64_t))(v379 + 16))(v100, v376, v382);
    uint64_t v103 = *(unsigned __int8 *)(v101 + 80);
    uint64_t v104 = (v103 + 24) & ~v103;
    uint64_t v105 = swift_allocObject(&unk_100960C10, v104 + v353, v103 | 7);
    *(void *)(v105 + swift_weakDestroy(v0 + 16) = v380;
    (*(void (**)(uint64_t, char *, uint64_t))(v101 + 32))(v105 + v104, v100, v102);
    uint64_t v106 = swift_retain();
    uint64_t v107 = static os_log_type_t.default.getter(v106);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v108 = qword_100A2B018;
    uint64_t v109 = swift_allocObject(v371, 72LL, 7LL);
    *(_OWORD *)(v109 + swift_weakDestroy(v0 + 16) = v362;
    uint64_t v110 = v373;
    sub_10001DC4C(v99, v373, type metadata accessor for BeaconEstimatedLocation);
    uint64_t v111 = String.init<A>(describing:)(v110, v374);
    unint64_t v112 = v364;
    *(void *)(v109 + 56) = &type metadata for String;
    *(void *)(v109 + 64) = v112;
    *(void *)(v109 + 32) = v111;
    *(void *)(v109 + 40) = v113;
    os_log(_:dso:log:_:_:)(v107, &_mh_execute_header, v108, "Attempting to remove: %@", 24LL, 2LL, v109);
    swift_bridgeObjectRelease();
    swift_retain();
    a3 = v377;
    sub_1005628E4(v99, v377, (uint64_t)sub_100564BCC, v105);
    swift_release_n(v105, 2LL);
    sub_100018C68(v99, type metadata accessor for BeaconEstimatedLocation);
    v98 += v363;
    uint64_t v96 = v375 - 1;
  }

  while (v375 != (char *)1);
  swift_bridgeObjectRelease();
  uint64_t v219 = v350;
  uint64_t v83 = v379;
  unint64_t v84 = v361;
LABEL_15:
  uint64_t v114 = v219[3];
  uint64_t v115 = v219[4];
  sub_100012ED8(v219, v114);
  uint64_t v116 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v115 + 8) + 8LL) + 32LL))(v114);
  __chkstk_darwin(v116);
  *((void *)&v306 - 2) = a3;
  *((void *)&v306 - 1) = v84;
  uint64_t v117 = (uint64_t (*)(char))v380;
  swift_retain_n(v380, 2LL);
  uint64_t v118 = (uint64_t)v342;
  uint64_t v119 = v340;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10015471C);
  uint64_t v360 = v119;
  int v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v341 + 48))(v118, 1LL, v358);
  uint64_t v121 = v382;
  if (v120 == 1)
  {
    sub_100015794(v118, &qword_1009AE490);
    Transaction.capture()();
    uint64_t v123 = static os_log_type_t.error.getter(v122);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v123,  &_mh_execute_header,  qword_100A2B018,  "Could not remove beaconNamingRecord",  35LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v124 = v380;
    uint64_t v125 = v350;
  }

  else
  {
    sub_10002218C(v118, v359, type metadata accessor for BeaconNamingRecord);
    uint64_t v126 = v378;
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v378, v84, v121);
    uint64_t v127 = *(unsigned __int8 *)(v83 + 80);
    uint64_t v128 = (v127 + 24) & ~v127;
    unint64_t v129 = (v353 + v128 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v130 = swift_allocObject(&unk_100960BE8, v129 + 16, v127 | 7);
    *(void *)(v130 + swift_weakDestroy(v0 + 16) = a3;
    (*(void (**)(uint64_t, char *, uint64_t))(v83 + 32))(v130 + v128, v126, v121);
    uint64_t v131 = (uint64_t (**)(char))(v130 + v129);
    *uint64_t v131 = sub_100564558;
    v131[1] = v117;
    swift_retain();
    uint64_t v132 = swift_retain();
    uint64_t v133 = static os_log_type_t.default.getter(v132);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v134 = qword_100A2B018;
    uint64_t v135 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v136 = swift_allocObject(v135, 72LL, 7LL);
    *(_OWORD *)(v136 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v137 = v359;
    uint64_t v138 = v331;
    sub_10001DC4C(v359, v331, type metadata accessor for BeaconNamingRecord);
    uint64_t v139 = String.init<A>(describing:)(v138, v358);
    uint64_t v141 = v140;
    *(void *)(v136 + 56) = &type metadata for String;
    *(void *)(v136 + 64) = sub_1000226F4();
    *(void *)(v136 + 32) = v139;
    *(void *)(v136 + 40) = v141;
    os_log(_:dso:log:_:_:)(v133, &_mh_execute_header, v134, "Attempting to remove: %@", 24LL, 2LL, v136);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100557ED8(v137, a3, (void (*)(void))sub_100564AB0, v130);
    swift_release_n(v130, 2LL);
    sub_100018C68(v137, type metadata accessor for BeaconNamingRecord);
    uint64_t v83 = v379;
    uint64_t v124 = v380;
    uint64_t v121 = v382;
    uint64_t v125 = v350;
  }

  unint64_t v142 = v357;
  swift_release_n(v124, 2LL);
  v371 = *(void (**)(char *, uint64_t))(v83 + 8);
  v371(v361, v121);
  uint64_t v143 = v356;
  sub_100576BD4(v356);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v355 + 48))(v143, 1LL, v142) == 1)
  {
    sub_100015794(v143, &qword_1009A2430);
  }

  else
  {
    uint64_t v144 = v333;
    sub_10002218C(v143, v333, type metadata accessor for KeyAlignmentRecord);
    uint64_t v145 = swift_retain();
    uint64_t v146 = static os_log_type_t.default.getter(v145);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v147 = qword_100A2B018;
    uint64_t v148 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v149 = swift_allocObject(v148, 72LL, 7LL);
    *(_OWORD *)(v149 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v150 = v332;
    sub_10001DC4C(v144, v332, type metadata accessor for KeyAlignmentRecord);
    uint64_t v151 = String.init<A>(describing:)(v150, v142);
    uint64_t v152 = v144;
    uint64_t v153 = v151;
    uint64_t v155 = v154;
    *(void *)(v149 + 56) = &type metadata for String;
    *(void *)(v149 + 64) = sub_1000226F4();
    *(void *)(v149 + 32) = v153;
    *(void *)(v149 + 40) = v155;
    os_log(_:dso:log:_:_:)(v146, &_mh_execute_header, v147, "Attempting to remove: %@", 24LL, 2LL, v149);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100561A24(v152, a3, (uint64_t)sub_1005649F4, v124);
    swift_release_n(v124, 2LL);
    sub_100018C68(v152, type metadata accessor for KeyAlignmentRecord);
    uint64_t v121 = v382;
    uint64_t v83 = v379;
    uint64_t v125 = v350;
  }

  uint64_t v156 = v125[3];
  uint64_t v157 = v125[4];
  sub_100012ED8(v125, v156);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v157 + 104))(v156, v157) & 1) != 0)
  {
    if (qword_10099B348 != -1) {
      swift_once(&qword_10099B348, sub_10039BCD8);
    }
    uint64_t v158 = v348;
    uint64_t v159 = sub_10000A720(v348, (uint64_t)qword_100A2A768);
    uint64_t v160 = v345;
    uint64_t v161 = v346;
    uint64_t v162 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v345 + 16))(v346, v159, v158);
    __chkstk_darwin(v162);
    uint64_t v163 = v376;
    *((void *)&v306 - 4) = v164;
    *((void *)&v306 - 3) = v163;
    *((void *)&v306 - 2) = v161;
    uint64_t v165 = v360;
    OS_dispatch_queue.sync<A>(execute:)(sub_1000901D4, &v306 - 12, &type metadata for Bool);
    uint64_t v360 = v165;
    char v166 = aBlock;
    uint64_t v167 = (*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v161, v158);
    uint64_t v168 = static os_log_type_t.info.getter(v167);
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v169 = qword_100A2B0A8;
    uint64_t v170 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v171 = swift_allocObject(v170, 72LL, 7LL);
    *(_OWORD *)(v171 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v171 + 56) = &type metadata for Bool;
    *(void *)(v171 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v171 + 32) = v166;
    os_log(_:dso:log:_:_:)(v168, &_mh_execute_header, v169, "Remove BeaconProductInfoRecord? [%d]", v306);
    swift_bridgeObjectRelease();
    uint64_t v121 = v382;
    uint64_t v83 = v379;
  }

  uint64_t v172 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v173 = *(unsigned __int8 *)(v83 + 80);
  uint64_t v174 = (v173 + 32) & ~v173;
  uint64_t v175 = v174 + *(void *)(v83 + 72);
  unint64_t v364 = v172;
  *(void *)&__int128 v362 = v175;
  uint64_t v374 = v173 | 7;
  uint64_t v176 = swift_allocObject(v172, v175, v173 | 7);
  __int128 v373 = xmmword_1007E67D0;
  *(_OWORD *)(v176 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v363 = v174;
  uint64_t v177 = v376;
  v375 = *(char **)(v83 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v375)(v176 + v174, v376, v121);
  uint64_t v178 = v380;
  swift_retain();
  sub_10047B904(v176, (uint64_t)sub_100564580, v178);
  swift_bridgeObjectRelease();
  swift_release(v178);
  int64_t v179 = sub_100576844();
  __chkstk_darwin(v179);
  *((void *)&v306 - 2) = v177;
  uint64_t v180 = (char *)v360;
  uint64_t v182 = sub_100023CDC((uint64_t (*)(char *))sub_1005645A8, (void *)&v306 - 4, v181);
  uint64_t v183 = *(void *)(v182 + 16);
  uint64_t v342 = v180;
  uint64_t v333 = v173;
  uint64_t v341 = ~v173;
  if (v183)
  {
    uint64_t v361 = &v381[*(int *)(v338 + 20)];
    unint64_t v184 = (*(unsigned __int8 *)(v339 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v339 + 80);
    uint64_t v340 = v182;
    uint64_t v185 = v182 + v184;
    uint64_t v359 = *(void *)(a3 + 64);
    uint64_t v360 = (v173 + 24) & ~v173;
    uint64_t v358 = *(void *)(v339 + 72);
    unint64_t v357 = (v353 + v360 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v356 = (v357 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v355 = v356 + 16;
    uint64_t v186 = v378;
    uint64_t v187 = (void (*)(void *, char))v380;
    do
    {
      sub_10001DC4C(v185, (uint64_t)v381, type metadata accessor for SafeLocation);
      uint64_t v188 = v83;
      unint64_t v189 = v375;
      ((void (*)(char *, char *, uint64_t))v375)(v186, v361, v121);
      sub_100018C68((uint64_t)v381, type metadata accessor for SafeLocation);
      uint64_t v190 = v374;
      uint64_t v191 = swift_allocObject(v364, v362, v374);
      *(_OWORD *)(v191 + swift_weakDestroy(v0 + 16) = v373;
      ((void (*)(uint64_t, uint64_t, uint64_t))v189)(v191 + v363, v376, v382);
      uint64_t v192 = v372;
      ((void (*)(char *, char *, uint64_t))v189)(v372, v186, v382);
      uint64_t v193 = swift_allocObject(&unk_100960B20, v355, v190);
      *(void *)(v193 + swift_weakDestroy(v0 + 16) = v191;
      (*(void (**)(uint64_t, char *, uint64_t))(v188 + 32))(v193 + v360, v192, v382);
      *(void *)(v193 + v357) = v377;
      int64_t v194 = (void (**)(void *, char))(v193 + v356);
      *int64_t v194 = sub_1005645C4;
      v194[1] = v187;
      uint64_t v387 = (uint64_t)sub_100564690;
      uint64_t v388 = v193;
      *(void *)&__int128 aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      v385 = sub_1001C31E8;
      v386 = &unk_100960B38;
      uint64_t v195 = _Block_copy(&aBlock);
      swift_retain_n(v187, 2LL);
      swift_retain();
      uint64_t v196 = swift_bridgeObjectRetain(v191);
      uint64_t v197 = v368;
      static DispatchQoS.unspecified.getter(v196);
      v383 = _swiftEmptyArrayStorage;
      uint64_t v198 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v199 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v200 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v201 = v366;
      uint64_t v202 = v367;
      uint64_t v203 = v198;
      uint64_t v187 = (void (*)(void *, char))v380;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v383, v199, v200, v367, v203);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v197, v201, v195);
      char v204 = v195;
      uint64_t v83 = v379;
      _Block_release(v204);
      v365(v201, v202);
      (*(void (**)(char *, uint64_t))(v369 + 8))(v197, v370);
      uint64_t v205 = v388;
      uint64_t v121 = v382;
      swift_bridgeObjectRelease();
      swift_release(v187);
      uint64_t v206 = v205;
      uint64_t v186 = v378;
      swift_release(v206);
      v371(v186, v121);
      v185 += v358;
      --v183;
    }

    while (v183);
    swift_bridgeObjectRelease();
    a3 = v377;
    uint64_t v207 = (uint64_t)v350;
    uint64_t v208 = v352;
    uint64_t v209 = v347;
    uint64_t v210 = v375;
    uint64_t v211 = v341;
    if ((v343 & 1) == 0) {
      goto LABEL_49;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v208 = v352;
    uint64_t v209 = v347;
    uint64_t v210 = v375;
    uint64_t v211 = ~v173;
    uint64_t v207 = (uint64_t)v350;
    if ((v343 & 1) == 0) {
      goto LABEL_49;
    }
  }

  sub_100013044(v207, (uint64_t)&aBlock);
  uint64_t v212 = sub_100004AEC(&qword_1009B0530);
  uint64_t v213 = (uint64_t)v334;
  char v214 = swift_dynamicCast(v334, &aBlock, v212, v209, 6LL);
  uint64_t v215 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v344 + 56);
  if ((v214 & 1) != 0)
  {
    v215(v213, 0LL, 1LL, v209);
    uint64_t v216 = v213;
    uint64_t v217 = v330;
    sub_10002218C(v216, v330, type metadata accessor for OwnedBeaconRecord);
    uint64_t v218 = v319;
    sub_10001581C(v217 + *(int *)(v209 + 28), v319, &qword_10099D8A0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v218, 1LL, v121) == 1)
    {
      sub_100018C68(v217, type metadata accessor for OwnedBeaconRecord);
      sub_100015794(v218, &qword_10099D8A0);
      uint64_t v210 = v375;
    }

    else
    {
      uint64_t v220 = *(char **)(v83 + 32);
      uint64_t v221 = (uint64_t)v316;
      v381 = v220;
      ((void (*)(char *, uint64_t, uint64_t))v220)(v316, v218, v121);
      uint64_t v222 = v313;
      sub_10050F124(v221, v313);
      uint64_t v223 = v312;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v312 + 48))(v222, 1LL, v317) == 1)
      {
        v371((char *)v221, v121);
        sub_100018C68(v217, type metadata accessor for OwnedBeaconRecord);
        sub_100015794(v222, &qword_1009AA830);
        uint64_t v209 = v347;
        uint64_t v210 = v375;
      }

      else
      {
        uint64_t v224 = v314;
        sub_10002218C(v222, v314, type metadata accessor for OwnedBeaconGroup);
        ((void (*)(char *, uint64_t, uint64_t))v375)(v378, v221, v121);
        uint64_t v225 = v309;
        sub_10001DC4C(v224, v309, type metadata accessor for OwnedBeaconGroup);
        uint64_t v226 = (v333 + 24) & v211;
        uint64_t v227 = *(unsigned __int8 *)(v223 + 80);
        uint64_t v228 = (v226 + v353 + v227) & ~v227;
        uint64_t v229 = v380;
        uint64_t v230 = v228 + v308;
        uint64_t v231 = swift_allocObject(&unk_100960BC0, ((v228 + v308) & 0xFFFFFFFFFFFFFFF8LL) + 16, v374 | v227);
        *(void *)(v231 + swift_weakDestroy(v0 + 16) = v229;
        ((void (*)(uint64_t, char *, uint64_t))v381)(v231 + v226, v378, v121);
        sub_10002218C(v225, v231 + v228, type metadata accessor for OwnedBeaconGroup);
        *(_BYTE *)(v231 + v230) = v311 & 1;
        *(void *)((v230 & 0xFFFFFFFFFFFFFFF8LL) + v231 + 8) = a3;
        swift_retain();
        uint64_t v232 = swift_retain();
        uint64_t v233 = static os_log_type_t.default.getter(v232);
        if (qword_10099B708 != -1) {
          swift_once(&qword_10099B708, sub_100651168);
        }
        uint64_t v234 = qword_100A2B018;
        uint64_t v235 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v236 = swift_allocObject(v235, 72LL, 7LL);
        *(_OWORD *)(v236 + swift_weakDestroy(v0 + 16) = v373;
        uint64_t v237 = v314;
        uint64_t v238 = v310;
        sub_10001DC4C(v314, v310, type metadata accessor for OwnedBeaconGroup);
        uint64_t v239 = String.init<A>(describing:)(v238, v317);
        uint64_t v241 = v240;
        *(void *)(v236 + 56) = &type metadata for String;
        *(void *)(v236 + 64) = sub_1000226F4();
        *(void *)(v236 + 32) = v239;
        *(void *)(v236 + 40) = v241;
        os_log(_:dso:log:_:_:)(v233, &_mh_execute_header, v234, "Attempting to remove: %@", 24LL, 2LL, v236);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100560BBC(v237, a3, (void (*)(void))sub_100564970, v231);
        swift_release_n(v231, 2LL);
        sub_100018C68(v237, type metadata accessor for OwnedBeaconGroup);
        uint64_t v121 = v382;
        v371(v316, v382);
        sub_100018C68(v330, type metadata accessor for OwnedBeaconRecord);
        uint64_t v208 = v352;
        uint64_t v209 = v347;
        uint64_t v210 = v375;
        uint64_t v207 = (uint64_t)v350;
      }
    }
  }

  else
  {
    v215(v213, 1LL, 1LL, v209);
    sub_100015794(v213, (uint64_t *)&unk_1009A9C30);
  }

void sub_1005236FC(char a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v3 = static os_log_type_t.error.getter(v2);
    uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
    *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v6 = UUID.uuidString.getter(v5);
    uint64_t v8 = v7;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_1000226F4();
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v8;
    uint64_t v9 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v10 = (id)static OS_os_log.default.getter(v9);
    os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  v10,  "BeaconStore failed to remove locations for beacon %@",  52LL,  2LL,  v5);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1005237FC(char a1, uint64_t a2, const char *a3, const char *a4)
{
  if ((a1 & 1) != 0)
  {
    uint64_t v8 = static os_log_type_t.error.getter(v7);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v9 = qword_100A2B018;
    uint64_t v10 = v8;
    uint64_t v11 = a3;
    uint64_t v12 = 35LL;
  }

  else
  {
    uint64_t v13 = static os_log_type_t.default.getter(v7);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v9 = qword_100A2B018;
    uint64_t v10 = v13;
    uint64_t v11 = a4;
    uint64_t v12 = 27LL;
  }

  return os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v9, v11, v12, 2LL, _swiftEmptyArrayStorage);
}

BOOL sub_1005238E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for SafeLocation(0LL) + 52));
  uint64_t v6[2] = a2;
  swift_bridgeObjectRetain(v3);
  BOOL v4 = sub_1004E98E4((uint64_t (*)(char *))sub_1005655D0, (BOOL)v6, v3);
  swift_bridgeObjectRelease();
  return v4;
}

void sub_100523964(void *a1, char a2, uint64_t a3, const char *a4, uint64_t a5)
{
  if ((a2 & 1) != 0)
  {
    id v9 = a1;
    uint64_t v10 = static os_log_type_t.error.getter(v9);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
    *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    id v21 = v9;
    type metadata accessor for SPSeparationMonitoringError(0LL);
    uint64_t v14 = v13;
    id v15 = v9;
    uint64_t v16 = String.init<A>(describing:)(&v21, v14);
    uint64_t v18 = v17;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_1000226F4();
    *(void *)(v12 + 32) = v16;
    *(void *)(v12 + 40) = v18;
    uint64_t v19 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v20 = (void *)static OS_os_log.default.getter(v19);
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v20, a4, a5, 2LL, v12);
    swift_bridgeObjectRelease();

    sub_10049CCEC(a1, 1);
  }

void sub_100523A90(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_10000A720(v13, (uint64_t)qword_100A2B0B0);
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(28LL, -1LL);
    uint64_t v29 = v14;
    int v27 = a1;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = a4;
    uint64_t v28 = v20;
    *(_DWORD *)uint64_t v19 = 141558531;
    uint64_t v32 = 1752392040LL;
    v33[0] = v20;
    int v30 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v21 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v9, v21);
    uint64_t v32 = sub_1003F11D4(v22, v23, v33);
    LOBYTE(a5) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *(_WORD *)(v19 + 22) = 1024;
    LODWORD(v32) = v27 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 4, v19 + 24, v19 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Remove OwnedBeaconGroup %{private,mask.hash}s? %{BOOL}d",  (uint8_t *)v19,  0x1Cu);
    uint64_t v24 = v28;
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    a4 = v31;
    swift_slowDealloc(v24, -1LL, -1LL);
    uint64_t v14 = v29;
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  sub_1001C97D0(v14);
  if ((a5 & 1) != 0)
  {
    v33[3] = type metadata accessor for OwnedBeaconGroup(0LL);
    v33[4] = sub_100007864(&qword_1009A2480, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_1007F5E9C);
    uint64_t v25 = sub_10000A7C8(v33);
    sub_10001DC4C(a4, (uint64_t)v25, type metadata accessor for OwnedBeaconGroup);
    PassthroughSubject.send(_:)(v33);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  }

void sub_100523D9C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v52[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = &v52[-v13];
  uint64_t v15 = __chkstk_darwin(v12);
  os_log_type_t v17 = &v52[-v16];
  __chkstk_darwin(v15);
  uint64_t v19 = &v52[-v18];
  Transaction.capture()();
  if ((a1 & 1) != 0)
  {
    if (qword_10099BA30 != -1) {
      swift_once(&qword_10099BA30, sub_100795FD8);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000A720(v20, (uint64_t)qword_100A2B7D8);
    uint64_t v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
    v21(v19, a3, v7);
    uint64_t v22 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v21)(v17, a4, v7);
    unint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.default.getter(v23);
    int v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v26 = swift_slowAlloc(42LL, -1LL);
      uint64_t v27 = swift_slowAlloc(64LL, -1LL);
      uint64_t v54 = v27;
      *(_DWORD *)uint64_t v26 = 141558787;
      uint64_t v55 = 1752392040LL;
      uint64_t v56 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      uint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      int v53 = v25;
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v7, v28);
      uint64_t v55 = sub_1003F11D4(v29, v30, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v31(v19, v7);
      *(_WORD *)(v26 + 22) = 2160;
      uint64_t v55 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v26 + 24, v26 + 32);
      *(_WORD *)(v26 + 32) = 2081;
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v7, v28);
      uint64_t v55 = sub_1003F11D4(v32, v33, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v26 + 34, v26 + 42);
      swift_bridgeObjectRelease();
      v31(v17, v7);
      _os_log_impl( (void *)&_mh_execute_header,  v23,  (os_log_type_t)v53,  "OwnedDeviceKeyRecord removed deviceIdentifier:%{private,mask.hash}s, uuid:%{private,mask.hash}s.",  (uint8_t *)v26,  0x2Au);
      uint64_t v34 = v54;
      swift_arrayDestroy(v54, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      uint64_t v50 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v50(v19, v7);
      v50(v17, v7);
    }
  }

  else
  {
    if (qword_10099BA30 != -1) {
      swift_once(&qword_10099BA30, sub_100795FD8);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    sub_10000A720(v35, (uint64_t)qword_100A2B7D8);
    uint64_t v36 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
    v36(v14, a3, v7);
    uint64_t v37 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v36)(v11, a4, v7);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter(v38);
    int v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v41 = swift_slowAlloc(42LL, -1LL);
      uint64_t v42 = swift_slowAlloc(64LL, -1LL);
      uint64_t v54 = v42;
      *(_DWORD *)uint64_t v41 = 141558787;
      uint64_t v55 = 1752392040LL;
      uint64_t v56 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v41 + 4, v41 + 12);
      *(_WORD *)(v41 + 12) = 2081;
      uint64_t v43 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      int v53 = v40;
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v7, v43);
      uint64_t v55 = sub_1003F11D4(v44, v45, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v41 + 14, v41 + 22);
      swift_bridgeObjectRelease();
      uint64_t v46 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v46(v14, v7);
      *(_WORD *)(v41 + 22) = 2160;
      uint64_t v55 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v41 + 24, v41 + 32);
      *(_WORD *)(v41 + 32) = 2081;
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v7, v43);
      uint64_t v55 = sub_1003F11D4(v47, v48, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v41 + 34, v41 + 42);
      swift_bridgeObjectRelease();
      v46(v11, v7);
      _os_log_impl( (void *)&_mh_execute_header,  v38,  (os_log_type_t)v53,  "Could not remove OwnedDeviceKeyRecord deviceIdentifier:%{private,mask.hash}s, uuid:%{private,mask.hash}s.",  (uint8_t *)v41,  0x2Au);
      uint64_t v49 = v54;
      swift_arrayDestroy(v54, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      uint64_t v51 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v51(v14, v7);
      v51(v11, v7);
    }
  }

uint64_t sub_100524324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[19] = v5;
  v3[20] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100524384, 0LL, 0LL);
}

uint64_t sub_100524384()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 168) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100524484;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100524484(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005244E0, 0LL, 0LL);
}

uint64_t sub_1005244E0()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 176))
  {
    uint64_t v2 = *(void **)(v0 + 136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = v2[3];
    uint64_t v4 = v2[4];
    sub_100012ED8(v2, v3);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8LL) + 32LL))(v3);
    uint64_t v5 = (void *)swift_task_alloc(dword_1009BCD54);
    *(void *)(v0 + 184) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1005245AC;
    return sub_1006D6AF4(*(void *)(v0 + 160));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_task_dealloc(*(void *)(v0 + 160));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1005245AC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 152LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 160LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 192LL) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v6 = sub_100524668;
  }
  else {
    uint64_t v6 = sub_100524630;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100524630()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100524668()
{
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AC98);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 192);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138543362;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 120) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    *uint64_t v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Could not delete key sync metadata %{public}@.", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 192));
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  swift_task_dealloc(*(void *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100524844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v82 = a7;
  uint64_t v94 = a1;
  uint64_t v95 = a5;
  uint64_t v98 = a4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v89 = *(void *)(v10 - 8);
  uint64_t v90 = v10;
  __chkstk_darwin(v10);
  uint64_t v88 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  unint64_t v85 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v84 = type metadata accessor for CloudKitChangeSet(0LL);
  uint64_t v91 = *(void *)(v84 - 8);
  uint64_t v13 = *(void *)(v91 + 64);
  uint64_t v14 = __chkstk_darwin(v84);
  uint64_t v83 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v92 = (uint64_t)&v81 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v81 - v17;
  uint64_t v20 = type metadata accessor for Notification(0LL, v19);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  uint64_t aBlock = 0x7365547265646E75LL;
  unint64_t v101 = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v106, &aBlock, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  int v97 = v106;
  uint64_t v96 = a6;
  if (v106 == 1)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    uint64_t v25 = type metadata accessor for UUID(0LL);
    uint64_t v103 = (void *)v25;
    uint64_t v26 = sub_10000A7C8(&aBlock);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16LL))(v26, a3, v25);
    Notification.init(name:object:userInfo:)(v24, &aBlock, 0LL);
    id v27 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    Class isa = Notification._bridgeToObjectiveC()().super.isa;
    [v27 postNotification:isa];

    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }

  else
  {
    id v29 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    UUID.uuidString.getter(v29);
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v31 = String._bridgeToObjectiveC()();
    [v29 setObject:v30 forKey:v31];
  }

  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v32 = type metadata accessor for Logger(0LL);
  sub_10000A720(v32, (uint64_t)qword_100A2AC98);
  uint64_t v99 = a3;
  uint64_t v33 = sub_10001DC4C(a3, (uint64_t)v18, type metadata accessor for CloudKitChangeSet);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter(v34);
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v93 = a2;
  if (v36)
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t aBlock = v38;
    *(_DWORD *)uint64_t v37 = 136446210;
    unint64_t v39 = sub_100611D78();
    uint64_t v106 = (void *)sub_1003F11D4(v39, v40, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v18, type metadata accessor for CloudKitChangeSet);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Begin applying %{public}s", v37, 0xCu);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v18, type metadata accessor for CloudKitChangeSet);
  }

  uint64_t v41 = v98;
  char v42 = v97;
  uint64_t v43 = mach_continuous_time();
  uint64_t v44 = v99;
  if ((v42 & 1) != 0)
  {
    sub_100413D1C((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    uint64_t v45 = v92;
    sub_10001DC4C(v44, v92, type metadata accessor for CloudKitChangeSet);
    uint64_t v46 = *(unsigned __int8 *)(v91 + 80);
    uint64_t v47 = (v46 + 16) & ~v46;
    unint64_t v48 = (v13 + v47 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v49 = (v48 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v50 = swift_allocObject(&unk_100963898, v49 + 16, v46 | 7);
    sub_10002218C(v45, v50 + v47, type metadata accessor for CloudKitChangeSet);
    uint64_t v51 = (void *)(v50 + v48);
    uint64_t v52 = v93;
    *uint64_t v51 = v94;
    v51[1] = v52;
    int v53 = (void *)(v50 + v49);
    uint64_t v54 = v96;
    *int v53 = v95;
    v53[1] = v54;
    uint64_t v104 = sub_10057063C;
    uint64_t v105 = v50;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v101 = 1107296256LL;
    uint64_t v102 = sub_1001C31E8;
    uint64_t v103 = &unk_1009638B0;
    uint64_t v55 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v56 = swift_retain();
    uint64_t v57 = v85;
    static DispatchQoS.unspecified.getter(v56);
    uint64_t v106 = _swiftEmptyArrayStorage;
    uint64_t v58 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v59 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v60 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v61 = v88;
    uint64_t v62 = v59;
    uint64_t v63 = v90;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v106, v62, v60, v90, v58);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v57, v61, v55);
    _Block_release(v55);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v61, v63);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v57, v87);
    uint64_t v64 = v105;
  }

  else
  {
    uint64_t v65 = v43;
    uint64_t v66 = sub_100525278(*(void *)(v99 + *(int *)(v84 + 24)));
    uint64_t v98 = sub_1004F730C();
    uint64_t v67 = v92;
    sub_10001DC4C(v44, v92, type metadata accessor for CloudKitChangeSet);
    uint64_t v68 = *(unsigned __int8 *)(v91 + 80);
    uint64_t v69 = (v68 + 32) & ~v68;
    unint64_t v70 = (v13 + v69 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v71 = (v70 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v72 = (v71 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v73 = (v72 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v74 = swift_allocObject(&unk_100963870, v73 + 8, v68 | 7);
    *(void *)(v74 + swift_weakDestroy(v0 + 16) = v41;
    *(void *)(v74 + swift_unknownObjectUnownedDestroy(v0 + 24) = v65;
    sub_10002218C(v67, v74 + v69, type metadata accessor for CloudKitChangeSet);
    uint64_t v75 = (void *)(v74 + v70);
    uint64_t v76 = v93;
    void *v75 = v94;
    v75[1] = v76;
    *(void *)(v74 + v71) = v66;
    uint64_t v77 = (void *)(v74 + v72);
    uint64_t v78 = v96;
    *uint64_t v77 = v95;
    v77[1] = v78;
    *(void *)(v74 + v73) = v82;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v79 = v98;
    sub_100674CB4(v99, (uint64_t)sub_1005704C8, v74);
    swift_release(v74);
    uint64_t v64 = v79;
  }

  return swift_release(v64);
}

uint64_t sub_100525278(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  os_log_type_t v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v78 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v76 = *(void *)(v80 - 8);
  uint64_t v9 = __chkstk_darwin(v80);
  uint64_t v86 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v87 = (uint64_t)&v69 - v11;
  uint64_t v12 = sub_100004AEC(&qword_1009B2C68);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (int64_t *)((char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v13);
  uint64_t v17 = (id *)((char *)&v69 - v16);
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v70 = a1 + 64;
  uint64_t v19 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v71 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v72 = a1;
  int64_t v69 = v71 - 1;
  swift_bridgeObjectRetain(a1);
  int64_t v22 = 0LL;
  unint64_t v23 = &_swiftEmptyDictionarySingleton;
  uint64_t v82 = v17;
  uint64_t v74 = v7;
  uint64_t v75 = v5;
  uint64_t v77 = v3;
  unint64_t v73 = v15;
  uint64_t v79 = v2;
  while (1)
  {
    uint64_t v88 = v23;
    if (v21)
    {
      uint64_t v24 = v3;
      uint64_t v25 = v6;
      uint64_t v84 = (v21 - 1) & v21;
      int64_t v85 = v22;
      unint64_t v26 = __clz(__rbit64(v21)) | (v22 << 6);
LABEL_8:
      uint64_t v27 = *(void *)(v72 + 56);
      uint64_t v28 = *(void **)(*(void *)(v72 + 48) + 8 * v26);
      void *v15 = v28;
      uint64_t v29 = v27
          + *(void *)(*(void *)(type metadata accessor for CloudKitChangeSet.TombstoneInfo(0LL) - 8) + 72LL) * v26;
      uint64_t v30 = sub_100004AEC(&qword_1009B2C70);
      sub_10001DC4C(v29, (uint64_t)v15 + *(int *)(v30 + 48), type metadata accessor for CloudKitChangeSet.TombstoneInfo);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v15, 0LL, 1LL, v30);
      id v31 = v28;
      uint64_t v17 = v82;
      goto LABEL_23;
    }

    int64_t v32 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      goto LABEL_49;
    }
    if (v32 >= v71) {
      goto LABEL_21;
    }
    unint64_t v33 = *(void *)(v70 + 8 * v32);
    if (v33) {
      goto LABEL_12;
    }
    v22 += 2LL;
    if (v32 + 1 >= v71)
    {
      uint64_t v24 = v3;
      uint64_t v25 = v6;
LABEL_17:
      int64_t v85 = v32;
      goto LABEL_22;
    }

    unint64_t v33 = *(void *)(v70 + 8 * v22);
    if (v33) {
      goto LABEL_15;
    }
    if (v32 + 2 >= v71)
    {
LABEL_21:
      int64_t v85 = v22;
      uint64_t v24 = v3;
      uint64_t v25 = v6;
    }

    else
    {
      unint64_t v33 = *(void *)(v70 + 8 * (v32 + 2));
      if (v33)
      {
        v32 += 2LL;
LABEL_12:
        uint64_t v24 = v3;
        uint64_t v25 = v6;
        uint64_t v84 = (v33 - 1) & v33;
        int64_t v85 = v32;
        unint64_t v26 = __clz(__rbit64(v33)) + (v32 << 6);
        goto LABEL_8;
      }

      int64_t v22 = v32 + 3;
      if (v32 + 3 < v71)
      {
        unint64_t v33 = *(void *)(v70 + 8 * v22);
        if (!v33)
        {
          while (1)
          {
            int64_t v32 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_50;
            }
            if (v32 >= v71)
            {
              uint64_t v24 = v3;
              uint64_t v25 = v6;
              int64_t v32 = v69;
              goto LABEL_17;
            }

            unint64_t v33 = *(void *)(v70 + 8 * v32);
            ++v22;
            if (v33) {
              goto LABEL_12;
            }
          }
        }

uint64_t sub_10052596C(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v31 = a3;
  uint64_t v5 = type metadata accessor for CloudKitChangeSet(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Notification(0LL, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v13 = String._bridgeToObjectiveC()();
  uint64_t v14 = type metadata accessor for UUID(0LL);
  v33[3] = v14;
  uint64_t v15 = sub_10000A7C8(v33);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v15, a1, v14);
  Notification.init(name:object:userInfo:)(v13, v33, 0LL);
  id v16 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  Class isa = Notification._bridgeToObjectiveC()().super.isa;
  [v16 postNotification:isa];

  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10000A720(v18, (uint64_t)qword_100A2AC98);
  uint64_t v19 = sub_10001DC4C(a1, (uint64_t)v7, type metadata accessor for CloudKitChangeSet);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.debug.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = a2;
    unint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    v33[0] = v24;
    *(_DWORD *)unint64_t v23 = 136446210;
    uint64_t v29 = v12;
    unint64_t v25 = sub_100611D78();
    uint64_t v32 = sub_1003F11D4(v25, v26, v33);
    uint64_t v12 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v7, type metadata accessor for CloudKitChangeSet);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Calling wakeChangeSetQueue() after completing %{public}s",  v23,  0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    uint64_t v27 = v23;
    a2 = v30;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v7, type metadata accessor for CloudKitChangeSet);
  }

  a2();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100525C6C( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v48 = a8;
  uint64_t v53 = a7;
  uint64_t v49 = a5;
  uint64_t v47 = a4;
  int v55 = a3;
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v56 = a11;
  uint64_t v57 = a12;
  uint64_t v54 = a10;
  uint64_t v50 = a9;
  uint64_t v61 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v64 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  char v60 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v62 = *(void *)(v15 - 8);
  uint64_t v63 = v15;
  __chkstk_darwin(v15);
  char v58 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for CloudKitChangeSet(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = *(void *)(a4 + 48);
  sub_10001DC4C(a6, (uint64_t)v20, type metadata accessor for CloudKitChangeSet);
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v21 + 24) & ~v21;
  unint64_t v23 = (v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v25 = (v23 + 47) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v28 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v29 = swift_allocObject(&unk_1009638E8, v28 + 8, v21 | 7);
  *(void *)(v29 + swift_weakDestroy(v0 + 16) = v49;
  sub_10002218C((uint64_t)v20, v29 + v22, type metadata accessor for CloudKitChangeSet);
  uint64_t v30 = (void *)(v29 + v23);
  uint64_t v31 = v52;
  uint64_t v32 = v48;
  *uint64_t v30 = v53;
  v30[1] = v32;
  unint64_t v33 = v29 + v24;
  uint64_t v34 = v51;
  *(void *)unint64_t v33 = v51;
  *(void *)(v33 + 8) = v31;
  LOBYTE(vswift_unknownObjectUnownedDestroy(v0 + 24) = v55 & 1;
  *(_BYTE *)(v33 + swift_weakDestroy(v0 + 16) = v55 & 1;
  uint64_t v35 = v50;
  *(void *)(v29 + v25) = v50;
  *(void *)(v29 + v26) = v47;
  uint64_t v36 = (void *)(v29 + v27);
  uint64_t v37 = v56;
  *uint64_t v36 = v54;
  v36[1] = v37;
  *(void *)(v29 + v28) = v57;
  aBlock[4] = sub_1005707F4;
  uint64_t v67 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_100963900;
  int64_t v38 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v35);
  swift_retain();
  sub_100570898(v34, v31, v24);
  swift_retain();
  uint64_t v39 = swift_retain();
  unint64_t v40 = v58;
  static DispatchQoS.unspecified.getter(v39);
  uint64_t v65 = _swiftEmptyArrayStorage;
  uint64_t v41 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v42 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v43 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v45 = v60;
  uint64_t v44 = v61;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v42, v43, v61, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v40, v45, v38);
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v45, v44);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v40, v63);
  return swift_release(v67);
}

uint64_t sub_100525FE0( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, uint64_t), uint64_t a11)
{
  uint64_t v175 = a2;
  uint64_t v176 = a5;
  uint64_t v169 = type metadata accessor for CloudKitChangeSet(0LL);
  uint64_t v18 = __chkstk_darwin(v169);
  unint64_t v20 = (unint64_t)&v157 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v162 = (char *)&v157 - v21;
  uint64_t v22 = sub_100004AEC(&qword_10099E530);
  __chkstk_darwin(v22);
  unint64_t v24 = (id *)((char *)&v157 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v25 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v25);
  unint64_t v27 = (char *)&v157 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v166 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v28 = *(void *)(v166 - 8);
  uint64_t v29 = __chkstk_darwin(v166);
  uint64_t v165 = (uint64_t)&v157 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29);
  uint64_t v164 = (uint64_t)&v157 - v31;
  uint64_t v32 = mach_continuous_time();
  BOOL v33 = v32 >= a1;
  Swift::UInt64 v34 = v32 - a1;
  if (!v33) {
    goto LABEL_120;
  }
  uint64_t v168 = v28;
  uint64_t v172 = a11;
  uint64_t v171 = a10;
  double v11 = (double)convertToNanoseconds(_:)(v34) / 1000000.0;
  uint64_t v35 = &off_10099B000;
  uint64_t v170 = a4;
  if ((a7 & 1) != 0)
  {
    unint64_t v184 = (void *)v176;
    swift_errorRetain(v176);
    uint64_t v111 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_willThrowTypedImpl(&v184, v111, &protocol self-conformance witness table for Error);
    goto LABEL_105;
  }

  uint64_t v159 = v27;
  uint64_t v163 = v24;
  uint64_t v167 = a8;
  unint64_t v158 = v20;
  unint64_t v160 = a3;
  uint64_t v174 = a9;
  uint64_t v36 = *(void *)(a6 + 64);
  uint64_t v178 = a6 + 64;
  uint64_t v37 = 1LL << *(_BYTE *)(a6 + 32);
  uint64_t v38 = -1LL;
  if (v37 < 64) {
    uint64_t v38 = ~(-1LL << v37);
  }
  a3 = v38 & v36;
  int64_t v180 = (unint64_t)(v37 + 63) >> 6;
  swift_bridgeObjectRetain(v176);
  __n128 v39 = swift_bridgeObjectRetain(a6);
  uint64_t v40 = 0LL;
  uint64_t v179 = 0LL;
  uint64_t v161 = _swiftEmptyArrayStorage;
  uint64_t v173 = &_swiftEmptyDictionarySingleton;
  v39.n128_u64[0] = 138412546LL;
  __n128 v177 = v39;
  while (a3)
  {
    unint64_t v41 = __clz(__rbit64(a3));
    a3 &= a3 - 1;
    unint64_t v42 = v41 | (v40 << 6);
LABEL_22:
    uint64_t v46 = *(void **)(*(void *)(a6 + 48) + 8 * v42);
    uint64_t v47 = *(void *)(a6 + 56) + 16 * v42;
    if (*(_BYTE *)(v47 + 8) == 1)
    {
      uint64_t v48 = *(void *)v47;
      sub_10006A598(*(void *)v47, 1);
      id v49 = v46;
      sub_10006A598(v48, 1);
      id v50 = v49;
      sub_10006A598(v48, 1);
      if (v35[165] != (_UNKNOWN *)-1LL) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v51 = type metadata accessor for Logger(0LL);
      sub_10000A720(v51, (uint64_t)qword_100A2AC98);
      unint64_t v20 = (unint64_t)v50;
      uint64_t v52 = sub_10006A598(v48, 1);
      uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v54 = static os_log_type_t.error.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = swift_slowAlloc(22LL, -1LL);
        a4 = v40;
        unint64_t v56 = a3;
        uint64_t v57 = a6;
        char v58 = v35;
        uint64_t v59 = (unint64_t *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v55 = v177.n128_u32[0];
        *(void *)(v55 + 4) = v20;
        unint64_t *v59 = v20;
        *(_WORD *)(v55 + 12) = 2114;
        uint64_t v60 = _convertErrorToNSError(_:)(v48);
        *(void *)(v55 + 14) = v60;
        v59[1] = v60;
        sub_10006A58C(v48, 1);
        _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "Unexpected error deleting recordID [%@]: %{public}@",  (uint8_t *)v55,  0x16u);
        uint64_t v61 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v59, 2LL, v61);
        uint64_t v62 = v59;
        uint64_t v35 = v58;
        a6 = v57;
        a3 = v56;
        uint64_t v40 = a4;
        swift_slowDealloc(v62, -1LL, -1LL);
        swift_slowDealloc(v55, -1LL, -1LL);

        sub_10006A58C(v48, 1);
        sub_10006A58C(v48, 1);
      }

      else
      {

        sub_10006A58C(v48, 1);
        sub_10006A58C(v48, 1);
        sub_10006A58C(v48, 1);
        unint64_t v20 = (unint64_t)v53;
      }

      sub_10006A58C(v48, 1);
    }

    else
    {
      uint64_t v63 = v167;
      uint64_t v64 = *(void *)(v167 + 16);
      id v65 = v46;
      unint64_t v20 = (unint64_t)v65;
      if (v64 && (unint64_t v66 = sub_10030D338((uint64_t)v65), (v67 & 1) != 0))
      {
        uint64_t v68 = *(void *)(v168 + 72);
        uint64_t v69 = v164;
        sub_10001DC4C(*(void *)(v63 + 56) + v68 * v66, v164, type metadata accessor for BeaconStoreFileRecord);
        sub_10002218C(v69, v165, type metadata accessor for BeaconStoreFileRecord);
        uint64_t v70 = (uint64_t)v173;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v173);
        unint64_t v184 = (void *)v70;
        unint64_t v73 = sub_10030D338(v20);
        uint64_t v74 = *(void *)(v70 + 16);
        BOOL v75 = (v72 & 1) == 0;
        uint64_t v76 = v74 + v75;
        if (__OFADD__(v74, v75)) {
          goto LABEL_123;
        }
        char v77 = v72;
        if (*(void *)(v70 + 24) >= v76)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_10006753C();
          }
        }

        else
        {
          sub_100054EF8(v76, isUniquelyReferenced_nonNull_native);
          unint64_t v78 = sub_10030D338(v20);
          if ((v77 & 1) != (v79 & 1))
          {
            uint64_t v156 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v156);
            __break(1u);
            return result;
          }

          unint64_t v73 = v78;
        }

        uint64_t v89 = v184;
        uint64_t v173 = v184;
        if ((v77 & 1) != 0)
        {
          sub_10006A5A4(v165, v184[7] + v73 * v68, type metadata accessor for BeaconStoreFileRecord);
        }

        else
        {
          v184[(v73 >> 6) + 8] |= 1LL << v73;
          *(void *)(v89[6] + 8 * v73) = v20;
          sub_10002218C(v165, v89[7] + v73 * v68, type metadata accessor for BeaconStoreFileRecord);
          uint64_t v90 = v89[2];
          BOOL v43 = __OFADD__(v90, 1LL);
          uint64_t v91 = v90 + 1;
          if (v43) {
            goto LABEL_124;
          }
          v89[2] = v91;
          id v92 = (id)v20;
        }

        uint64_t v35 = &off_10099B000;

        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v80 = (uint64_t)v173;
        swift_bridgeObjectRetain(v173);
        unint64_t v81 = sub_10030D338(v20);
        char v83 = v82;
        swift_bridgeObjectRelease();
        unint64_t v84 = a3;
        if ((v83 & 1) != 0)
        {
          int v85 = swift_isUniquelyReferenced_nonNull_native(v80);
          unint64_t v184 = (void *)v80;
          if (!v85)
          {
            sub_10006753C();
            uint64_t v80 = (uint64_t)v184;
          }

          uint64_t v86 = v168;
          uint64_t v87 = (uint64_t)v159;
          sub_10002218C( *(void *)(v80 + 56) + *(void *)(v168 + 72) * v81,  (uint64_t)v159,  type metadata accessor for BeaconStoreFileRecord);
          uint64_t v173 = (void *)v80;
          sub_10005A7E4(v81, v80);
          swift_bridgeObjectRelease();
          uint64_t v88 = 0LL;
        }

        else
        {
          uint64_t v88 = 1LL;
          uint64_t v87 = (uint64_t)v159;
          uint64_t v86 = v168;
        }

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v87, v88, 1LL, v166);

        sub_100015794(v87, &qword_1009A2460);
        a3 = v84;
      }

      uint64_t v93 = *(void *)(v175 + *(int *)(v169 + 24));
      if (!*(void *)(v93 + 16))
      {
        uint64_t v107 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0LL);
        uint64_t v105 = v163;
        (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56LL))(v163, 1LL, 1LL, v107);
        goto LABEL_56;
      }

      id v94 = (id)v20;
      unint64_t v95 = sub_10030D338((uint64_t)v94);
      if ((v96 & 1) != 0)
      {
        unint64_t v97 = v95;
        uint64_t v98 = *(void *)(v93 + 56);
        uint64_t v99 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0LL);
        a4 = v40;
        unint64_t v100 = a3;
        uint64_t v101 = a6;
        uint64_t v102 = v35;
        uint64_t v103 = *(void *)(v99 - 8);
        uint64_t v104 = v98 + *(void *)(v103 + 72) * v97;
        uint64_t v105 = v163;
        sub_10001DC4C(v104, (uint64_t)v163, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
        uint64_t v106 = *(void (**)(id *, void, uint64_t, uint64_t))(v103 + 56);
        uint64_t v35 = v102;
        a6 = v101;
        a3 = v100;
        uint64_t v40 = a4;
        v106(v105, 0LL, 1LL, v99);
      }

      else
      {
        uint64_t v99 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0LL);
        uint64_t v105 = v163;
        (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56LL))(v163, 1LL, 1LL, v99);
      }

      type metadata accessor for CloudKitChangeSet.TombstoneInfo(0LL);
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v99 - 8) + 48LL))(v105, 1LL, v99) == 1)
      {
LABEL_56:

        sub_100015794((uint64_t)v105, &qword_10099E530);
      }

      else
      {
        id v108 = *v105;
        sub_100018C68((uint64_t)v105, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
        type metadata accessor for BeaconStore(0LL);
        a4 = v179;
        sub_1005272FC((uint64_t)v108);
        if (a4)
        {
          swift_errorRelease(a4);
          uint64_t v179 = 0LL;
          uint64_t v183 = 0LL;
          __int128 v181 = 0u;
          __int128 v182 = 0u;
          goto LABEL_60;
        }

        uint64_t v179 = 0LL;
        if (*((void *)&v182 + 1))
        {
          sub_100012EC0(&v181, (uint64_t)&v184);
          sub_100013044((uint64_t)&v184, (uint64_t)&v181);
          if ((swift_isUniquelyReferenced_nonNull_native(v161) & 1) == 0) {
            uint64_t v161 = sub_1004C67EC(0LL, v161[2] + 1LL, 1, v161);
          }
          unint64_t v20 = v161[2];
          unint64_t v109 = v161[3];
          if (v20 >= v109 >> 1) {
            uint64_t v161 = sub_1004C67EC((void *)(v109 > 1), v20 + 1, 1, v161);
          }
          uint64_t v110 = v161;
          v161[2] = v20 + 1;
          sub_100012EC0(&v181, (uint64_t)&v110[5 * v20 + 4]);

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v184);
        }

        else
        {
LABEL_60:

          sub_100015794((uint64_t)&v181, &qword_10099CFF0);
        }
      }
    }
  }

  BOOL v43 = __OFADD__(v40++, 1LL);
  if (v43)
  {
    __break(1u);
    goto LABEL_118;
  }

  if (v40 >= v180) {
    goto LABEL_67;
  }
  unint64_t v44 = *(void *)(v178 + 8 * v40);
  if (v44)
  {
LABEL_21:
    a3 = (v44 - 1) & v44;
    unint64_t v42 = __clz(__rbit64(v44)) + (v40 << 6);
    goto LABEL_22;
  }

  uint64_t v45 = v40 + 1;
  if (v40 + 1 >= v180) {
    goto LABEL_67;
  }
  unint64_t v44 = *(void *)(v178 + 8 * v45);
  if (v44) {
    goto LABEL_20;
  }
  uint64_t v45 = v40 + 2;
  if (v40 + 2 >= v180) {
    goto LABEL_67;
  }
  unint64_t v44 = *(void *)(v178 + 8 * v45);
  if (v44)
  {
LABEL_20:
    uint64_t v40 = v45;
    goto LABEL_21;
  }

  uint64_t v45 = v40 + 3;
  if (v40 + 3 < v180)
  {
    unint64_t v44 = *(void *)(v178 + 8 * v45);
    if (!v44)
    {
      while (1)
      {
        uint64_t v40 = v45 + 1;
        if (__OFADD__(v45, 1LL)) {
          break;
        }
        if (v40 >= v180) {
          goto LABEL_67;
        }
        unint64_t v44 = *(void *)(v178 + 8 * v40);
        ++v45;
        if (v44) {
          goto LABEL_21;
        }
      }

LABEL_121:
          swift_once(&qword_10099B528, sub_1004F3B00);
          goto LABEL_106;
        }

        sub_10006A574(v122, 0);
        sub_10006A574(v122, 0);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v184);
        if (!v40) {
          goto LABEL_73;
        }
      }

      else
      {
        sub_10006A574(v122, 0);
        sub_10006A574(v122, 0);
        sub_100015794((uint64_t)&v181, &qword_10099CFF0);
        if (!v40) {
          goto LABEL_73;
        }
      }

void sub_1005272FC(uint64_t a1)
{
  char v2 = v1;
  swift_bridgeObjectRelease();
  __asm { BR              X10 }

void sub_10052735C()
{
  v0[3] = type metadata accessor for OwnedBeaconRecord(0LL);
  v0[4] = sub_100007864(&qword_1009B5360, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_10080B07C);
  uint64_t v3 = sub_10000A7C8(v0);
  sub_1005D1638(v1, v3);
  if (v2) {
    sub_1000F4DAC(v0);
  }
}

void sub_100527774( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_100A2AC98);
  id v15 = v13;
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    a12 = v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    uint64_t v20 = CKRecord.recordType.getter(v19);
    a10 = sub_1003F11D4(v20, v21, &a12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v18 + 4, v18 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unexpected recordType: %{public}s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
  }

  *(void *)(v12 + 32) = 0LL;
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = 0u;
  JUMPOUT(0x100527750LL);
}

uint64_t sub_1005278E4(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, const char *a4)
{
  uint64_t v8 = type metadata accessor for CloudKitChangeSet(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_100A2AC98);
  uint64_t v12 = sub_10001DC4C(a1, (uint64_t)v10, type metadata accessor for CloudKitChangeSet);
  NSString v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v16;
    *(_DWORD *)id v15 = 136446210;
    v20[1] = a3;
    unint64_t v17 = sub_100611D78();
    uint64_t v21 = sub_1003F11D4(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v10, type metadata accessor for CloudKitChangeSet);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, a4, v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v10, type metadata accessor for CloudKitChangeSet);
  }

  return a2();
}

uint64_t sub_100527AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009B2B80);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1006F1F84((uint64_t)&off_100936ED8);
  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  uint64_t v11 = swift_retain();
  uint64_t v12 = AnyCurrentValuePublisher.publisher.getter(v11);
  swift_release();
  void v19[3] = v12;
  uint64_t v13 = swift_allocObject(&unk_100962948, 24LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v10;
  uint64_t v14 = sub_100004AEC(&qword_1009B2B88);
  uint64_t v15 = sub_1000372EC( &qword_1009B2B90,  &qword_1009B2B88,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.first(where:)(sub_10056C224, v13, v14, v15);
  swift_release();
  swift_release();
  uint64_t v16 = (void *)swift_allocObject(&unk_100962970, 40LL, 7LL);
  _OWORD v16[2] = a1;
  _OWORD v16[3] = a2;
  v16[4] = a3;
  uint64_t v17 = sub_1000372EC( &qword_1009B2B98,  &qword_1009B2B80,  (uint64_t)&protocol conformance descriptor for Publishers.FirstWhere<A>);
  swift_retain();
  swift_retain();
  Publisher<>.sink(receiveValue:)(sub_10056C254, v16, v6, v17);
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  AnyCancellable.store(in:)(a1);
  return swift_release();
}

uint64_t sub_100527CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject(&unk_100962920, 40LL, 7LL);
  uint64_t v6[2] = a2;
  v6[3] = a1;
  void v6[4] = a3;
  type metadata accessor for Transaction(0LL);
  v8[2] = sub_10056C200;
  _OWORD v8[3] = v6;
  swift_retain();
  swift_retain();
  static Transaction.named<A>(_:with:)("isMeDevice", 10LL, 2LL, sub_10056C20C, v8);
  return swift_release();
}

uint64_t sub_100527DB8(char a1, uint64_t a2, uint64_t a3, uint8_t *a4)
{
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v56 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v56 - v15;
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v56 - v17;
  uint64_t v19 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v56 - v24;
  if ((a1 & 1) != 0)
  {
    unint64_t v56 = v10;
    uint64_t v57 = a4;
    id v26 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    NSString v27 = String._bridgeToObjectiveC()();
    id v28 = [v26 stringForKey:v27];

    if (v28)
    {
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      uint64_t v31 = v30;

      uint64_t v32 = v29;
      uint64_t v33 = (uint64_t)v25;
      UUID.init(uuidString:)(v32, v31);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v33 = (uint64_t)v25;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v25, 1LL, 1LL, v6);
    }

    sub_10062689C((uint64_t)v18);
    Swift::UInt64 v34 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v34(v16, v18, v6);
    sub_10001581C(v33, (uint64_t)v22, &qword_10099D8A0);
    int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v22, 1LL, v6);
    uint64_t v36 = (uint64_t)v57;
    if (v35 == 1)
    {
      sub_100015794((uint64_t)v22, &qword_10099D8A0);
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v37 = type metadata accessor for Logger(0LL);
      uint64_t v38 = sub_10000A720(v37, (uint64_t)qword_100A2AC98);
      __n128 v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.default.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        unint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v41 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "No lastDuplicateRecoveryBootSessionUUID on record",  v41,  2u);
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      sub_100528328(v58, (uint64_t)v16, v59, v36);
      unint64_t v42 = *(void (**)(char *, uint64_t))(v7 + 8);
      v42(v16, v6);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v22, v6);
      uint64_t v43 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v13, v18, v6, v43) & 1) != 0)
      {
        unint64_t v44 = *(void (**)(char *, uint64_t))(v7 + 8);
        v44(v16, v6);
        if (qword_10099B528 != -1) {
          swift_once(&qword_10099B528, sub_1004F3B00);
        }
        uint64_t v45 = type metadata accessor for Logger(0LL);
        sub_10000A720(v45, (uint64_t)qword_100A2AC98);
        uint64_t v46 = v56;
        uint64_t v47 = ((uint64_t (*)(char *, char *, uint64_t))v34)(v56, v18, v6);
        uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
        os_log_type_t v49 = static os_log_type_t.default.getter(v48);
        if (os_log_type_enabled(v48, v49))
        {
          id v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v51 = swift_slowAlloc(32LL, -1LL);
          uint64_t v58 = v51;
          uint64_t v61 = v51;
          uint64_t v59 = v33;
          *(_DWORD *)id v50 = 136315138;
          uint64_t v57 = v50 + 4;
          uint64_t v52 = UUID.uuidString.getter(v51);
          uint64_t v60 = sub_1003F11D4(v52, v53, &v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v57, v50 + 12);
          swift_bridgeObjectRelease();
          v44(v46, v6);
          _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "removeDuplicateBeaconsCheck already ran for boot session: %s",  v50,  0xCu);
          uint64_t v54 = v58;
          swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_slowDealloc(v50, -1LL, -1LL);

          v44(v13, v6);
          v44(v18, v6);
          uint64_t v55 = v59;
          return sub_100015794(v55, &qword_10099D8A0);
        }

        v44(v46, v6);
        v44(v13, v6);
        v44(v18, v6);
LABEL_18:
        uint64_t v55 = v33;
        return sub_100015794(v55, &qword_10099D8A0);
      }

      sub_100528328(v58, (uint64_t)v16, v59, v36);
      unint64_t v42 = *(void (**)(char *, uint64_t))(v7 + 8);
      v42(v13, v6);
      v42(v16, v6);
    }

    v42(v18, v6);
    goto LABEL_18;
  }

  return result;
}

uint64_t sub_100528328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  unint64_t v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v16 = swift_allocObject(&unk_100962998, v15 + 8, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v16 + v12, v10, v7);
  *(void *)(v16 + v13) = a1;
  *(void *)(v16 + v14) = a3;
  *(void *)(v16 + v15) = v20;
  uint64_t v17 = (void *)swift_allocObject(&unk_1009629C0, 40LL, 7LL);
  uint64_t v17[2] = a1;
  _OWORD v17[3] = sub_10056C32C;
  v17[4] = v16;
  swift_retain_n(a1, 2LL);
  swift_retain();
  swift_retain();
  sub_100513364((uint64_t)sub_10056C3A4, (uint64_t)v17);
  swift_release();
  return swift_release();
}

void sub_10052848C(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v10);
    uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v15 = (v14 + 24) & ~v14;
    unint64_t v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v17 = (char *)swift_allocObject(&unk_100962A88, v16 + 8, v14 | 7);
    *((void *)v17 + 2) = a4;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[v15], v13, v10);
    *(void *)&v17[v16] = a5;
    uint64_t v18 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v18);
    v26[-4] = a3;
    LOBYTE(v26[-3]) = 0;
    v26[-2] = sub_10056C458;
    v26[-1] = v17;
    swift_retain();
    static Transaction.named<A>(_:with:)("removeDuplicateBeacons", 22LL, 2LL, sub_10056C4BC, &v26[-6]);
    swift_release();
  }

  else
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A2AC98);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No duplicate beacons detected.", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    id v24 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    UUID.uuidString.getter(v24);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v26[0] = String._bridgeToObjectiveC()();
    [v24 setObject:v25 forKey:v26[0]];
  }

void sub_100528754(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2AC98);
    uint64_t v7 = swift_errorRetain(a1);
    oslog = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v8 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v9 = 138543362;
      uint64_t v11 = _convertErrorToNSError(_:)(a1);
      uint64_t v14 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4, v9 + 12);
      *uint64_t v10 = v11;
      sub_100044A2C(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Error removing duplicates: %{public}@", v9, 0xCu);
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v10, 1LL, v12);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);

      sub_100044A2C(a1, 1);
      return;
    }

    sub_100044A2C(a1, 1);
    sub_100044A2C(a1, 1);
  }

  else
  {
    id v4 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    UUID.uuidString.getter(v4);
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    oslog = (os_log_s *)String._bridgeToObjectiveC()();
    [v4 setObject:v5 forKey:oslog];
  }
}

uint64_t sub_1005289B4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v58 = v14;
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 1) != 0)
  {
    uint64_t aBlock = (void **)a1;
    swift_errorRetain(a1);
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_willThrowTypedImpl(&aBlock, v32, &protocol self-conformance witness table for Error);
    unint64_t v56 = *(char **)(a3 + 48);
    uint64_t v33 = swift_allocObject(&unk_1009629E8, 32LL, 7LL);
    *(void *)(v33 + swift_weakDestroy(v0 + 16) = a4;
    *(void *)(v33 + swift_unknownObjectUnownedDestroy(v0 + 24) = a5;
    uint64_t v64 = sub_10056C3B4;
    uint64_t v65 = v33;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v61 = 1107296256LL;
    uint64_t v62 = sub_1001C31E8;
    uint64_t v63 = &unk_100962A00;
    Swift::UInt64 v34 = _Block_copy(&aBlock);
    uint64_t v35 = swift_retain();
    static DispatchQoS.unspecified.getter(v35);
    uint64_t v59 = _swiftEmptyArrayStorage;
    uint64_t v36 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v38 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v37, v38, v10, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v34);
    _Block_release(v34);
    sub_100044A2C(a1, 1);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v58);
    return swift_release();
  }

  unint64_t v56 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v19 = a1 + 64;
  uint64_t v20 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & *(void *)(a1 + 64);
  uint64_t v23 = *(void ***)(a1 + 16);
  int64_t v24 = (unint64_t)(v20 + 63) >> 6;
  while (v22)
  {
    unint64_t v25 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    unint64_t v26 = v25 | (v17 << 6);
LABEL_6:
    uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8 * v26);
    BOOL v28 = __OFADD__(v18, v27);
    uint64_t v18 = (void **)((char *)v18 + v27);
    if (v28)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      swift_once(&qword_10099B528, sub_1004F3B00);
      goto LABEL_29;
    }
  }

  int64_t v29 = v17 + 1;
  if (__OFADD__(v17, 1LL)) {
    goto LABEL_35;
  }
  if (v29 < v24)
  {
    unint64_t v30 = *(void *)(v19 + 8 * v29);
    ++v17;
    if (!v30)
    {
      int64_t v17 = v29 + 1;
      if (v29 + 1 >= v24) {
        goto LABEL_27;
      }
      unint64_t v30 = *(void *)(v19 + 8 * v17);
      if (!v30)
      {
        int64_t v17 = v29 + 2;
        if (v29 + 2 >= v24) {
          goto LABEL_27;
        }
        unint64_t v30 = *(void *)(v19 + 8 * v17);
        if (!v30)
        {
          int64_t v17 = v29 + 3;
          if (v29 + 3 >= v24) {
            goto LABEL_27;
          }
          unint64_t v30 = *(void *)(v19 + 8 * v17);
          if (!v30)
          {
            int64_t v17 = v29 + 4;
            if (v29 + 4 >= v24) {
              goto LABEL_27;
            }
            unint64_t v30 = *(void *)(v19 + 8 * v17);
            if (!v30)
            {
              int64_t v31 = v29 + 5;
              if (v31 >= v24) {
                goto LABEL_27;
              }
              unint64_t v30 = *(void *)(v19 + 8 * v31);
              if (!v30)
              {
                while (1)
                {
                  int64_t v17 = v31 + 1;
                  if (__OFADD__(v31, 1LL)) {
                    goto LABEL_36;
                  }
                  if (v17 >= v24) {
                    goto LABEL_27;
                  }
                  unint64_t v30 = *(void *)(v19 + 8 * v17);
                  ++v31;
                  if (v30) {
                    goto LABEL_25;
                  }
                }
              }

              int64_t v17 = v31;
            }
          }
        }
      }
    }

uint64_t sub_100528F8C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(a2 + 48);
  uint64_t v16 = swift_allocObject(&unk_1009615E8, 56LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v16 + swift_unknownObjectUnownedDestroy(v0 + 24) = a2;
  *(_BYTE *)(v16 + 32) = a3;
  *(void *)(v16 + 40) = a4;
  *(void *)(v16 + 48) = a5;
  aBlock[4] = sub_10056713C;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  id aBlock[3] = &unk_100961600;
  int64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v10, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  return swift_release();
}

uint64_t sub_1005291AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v432 = a5;
  uint64_t v430 = a4;
  uint64_t v431 = a1;
  uint64_t v453 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v452 = *(void *)(v453 - 8);
  uint64_t v7 = __chkstk_darwin(v453);
  v451 = (char *)&v427 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  v450 = (char *)&v427 - v9;
  uint64_t v438 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v437 = *(void *)(v438 - 8);
  __chkstk_darwin(v438);
  v436 = (char *)&v427 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v435 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v434 = *(void *)(v435 - 8);
  __chkstk_darwin(v435);
  v433 = (char *)&v427 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v469 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v469);
  uint64_t v468 = (uint64_t)&v427 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v497 = type metadata accessor for UUID(0LL);
  uint64_t v488 = *(void *)(v497 - 8);
  uint64_t v13 = __chkstk_darwin(v497);
  v442 = (char *)&v427 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  v479 = (unint64_t *)((char *)&v427 - v15);
  uint64_t v458 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v470 = *(void *)(v458 - 8);
  uint64_t v16 = __chkstk_darwin(v458);
  v447 = (char *)&v427 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v427 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  v466 = (char *)&v427 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v457 = (uint64_t)&v427 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v467 = (uint64_t)&v427 - v26;
  __chkstk_darwin(v25);
  *(void *)&__int128 v480 = (char *)&v427 - v27;
  uint64_t v28 = sub_100004AEC(&qword_1009B28B0);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v464 = (uint64_t)&v427 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v29);
  v446 = (char *)&v427 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  unint64_t v486 = (unint64_t)&v427 - v34;
  __chkstk_darwin(v33);
  unint64_t v481 = (unint64_t)&v427 - v35;
  uint64_t v36 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v37 = __chkstk_darwin(v36);
  uint64_t v459 = (uint64_t)&v427 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v478 = (uint64_t)&v427 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v483 = (char *)&v427 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v463 = (unint64_t *)((char *)&v427 - v44);
  __chkstk_darwin(v43);
  uint64_t v476 = (uint64_t)&v427 - v45;
  uint64_t v499 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v473 = *(void *)(v499 - 8);
  uint64_t v46 = __chkstk_darwin(v499);
  uint64_t v471 = (uint64_t)&v427 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v449 = (uint64_t)&v427 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v448 = (uint64_t)&v427 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v454 = (uint64_t)&v427 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  uint64_t v493 = (uint64_t)&v427 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v461 = (uint64_t)&v427 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  v462 = (char *)&v427 - v59;
  uint64_t v60 = __chkstk_darwin(v58);
  uint64_t v474 = (uint64_t)&v427 - v61;
  uint64_t v62 = __chkstk_darwin(v60);
  v482 = (char *)&v427 - v63;
  uint64_t v64 = __chkstk_darwin(v62);
  uint64_t v489 = (uint64_t)&v427 - v65;
  uint64_t v66 = __chkstk_darwin(v64);
  v492 = (char *)&v427 - v67;
  uint64_t v68 = __chkstk_darwin(v66);
  v487 = (char *)&v427 - v69;
  uint64_t v70 = __chkstk_darwin(v68);
  uint64_t v490 = (uint64_t)&v427 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  v496 = (char *)&v427 - v73;
  uint64_t v74 = __chkstk_darwin(v72);
  uint64_t v76 = (char *)&v427 - v75;
  uint64_t v77 = __chkstk_darwin(v74);
  uint64_t v472 = (uint64_t)&v427 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  *(void *)&__int128 v484 = (char *)&v427 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  uint64_t v475 = (uint64_t)&v427 - v82;
  uint64_t v429 = v83;
  __chkstk_darwin(v81);
  *(void *)&__int128 v465 = (char *)&v427 - v84;
  int v85 = sub_100506C30();
  uint64_t v86 = sub_10050CBD8();
  uint64_t v87 = sub_1004E7FA4( (uint64_t)v86,  type metadata accessor for OwnedBeaconGroup,  (void (*)(BOOL, unint64_t, uint64_t))sub_100032D38,  (uint64_t)&off_100947888,  (void (*)(void *, void *))sub_100012EC0);
  swift_bridgeObjectRelease();
  uint64_t v456 = a2;
  uint64_t v88 = sub_10050CD78();
  uint64_t v89 = sub_1004E7FA4( (uint64_t)v88,  type metadata accessor for SharedBeaconGroup,  (void (*)(BOOL, unint64_t, uint64_t))sub_100032D38,  (uint64_t)&off_100941408,  (void (*)(void *, void *))sub_100012EC0);
  swift_bridgeObjectRelease();
  uint64_t aBlock = (uint64_t)v87;
  sub_100184210((uint64_t)v89);
  dispatch_group_t v90 = (dispatch_group_t)aBlock;
  uint64_t aBlock = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v91 = *((void *)v85 + 2);
  swift_bridgeObjectRetain(v85);
  v477 = v20;
  uint64_t v494 = v91;
  if (!v91)
  {
    swift_bridgeObjectRelease();
    uint64_t v114 = _swiftEmptyArrayStorage;
    int64_t v113 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }

  *(void *)&__int128 v495 = v85;
  dispatch_group_t v455 = v90;
  LODWORD(v460) = a3;
  unint64_t v92 = 0LL;
  uint64_t v93 = _swiftEmptyArrayStorage;
  uint64_t v94 = v473;
  uint64_t v95 = v484;
  uint64_t v96 = v465;
  do
  {
    if (v92 >= *(void *)(v495 + 16))
    {
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }

    unint64_t v100 = *(void **)(v94 + 72);
    v498 = (void *)((*(unsigned __int8 *)(v94 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
    v491 = v100;
    sub_10001DC4C((uint64_t)v498 + v495 + (void)v100 * v92, v96, type metadata accessor for OwnedBeaconRecord);
    uint64_t v101 = v476;
    sub_10001581C(v96 + *(int *)(v499 + 28), v476, &qword_10099D8A0);
    v485 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v488 + 48);
    uint64_t v102 = v96;
    unsigned int v103 = v485(v101, 1LL, v497);
    sub_100015794(v101, &qword_10099D8A0);
    if (v103 == 1)
    {
      sub_10002218C(v102, v475, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) == 0) {
        sub_1000328A4(0, v93[2] + 1LL, 1);
      }
      uint64_t v93 = (void *)aBlock;
      unint64_t v105 = *(void *)(aBlock + 16);
      unint64_t v104 = *(void *)(aBlock + 24);
      unint64_t v97 = v498;
      uint64_t v99 = v491;
      if (v105 >= v104 >> 1)
      {
        sub_1000328A4(v104 > 1, v105 + 1, 1);
        uint64_t v93 = (void *)aBlock;
      }

      v93[2] = v105 + 1;
      sub_10002218C(v475, (uint64_t)v97 + (void)v93 + v105 * (void)v99, type metadata accessor for OwnedBeaconRecord);
      uint64_t v95 = v484;
      uint64_t v98 = _swiftEmptyArrayStorage;
      uint64_t v96 = v465;
    }

    else
    {
      sub_100018C68(v102, type metadata accessor for OwnedBeaconRecord);
      unint64_t v97 = v498;
      uint64_t v98 = _swiftEmptyArrayStorage;
      uint64_t v96 = v102;
      uint64_t v99 = v491;
    }

    ++v92;
    uint64_t v94 = v473;
  }

  while (v494 != v92);
  v491 = (void *)aBlock;
  uint64_t v106 = v495;
  swift_bridgeObjectRelease();
  unint64_t v107 = 0LL;
  uint64_t aBlock = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v108 = (uint64_t)v97 + v106;
  uint64_t v109 = (uint64_t)v463;
  do
  {
    if (v107 >= *(void *)(v495 + 16)) {
      goto LABEL_208;
    }
    sub_10001DC4C(v108, v95, type metadata accessor for OwnedBeaconRecord);
    sub_10001581C(v95 + *(int *)(v499 + 28), v109, &qword_10099D8A0);
    unsigned int v110 = v485(v109, 1LL, v497);
    sub_100015794(v109, &qword_10099D8A0);
    if (v110 == 1)
    {
      sub_100018C68(v95, type metadata accessor for OwnedBeaconRecord);
    }

    else
    {
      sub_10002218C(v95, v472, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v98) & 1) == 0)
      {
        sub_1000328A4(0, v98[2] + 1LL, 1);
        uint64_t v109 = (uint64_t)v463;
      }

      uint64_t v98 = (void *)aBlock;
      unint64_t v112 = *(void *)(aBlock + 16);
      unint64_t v111 = *(void *)(aBlock + 24);
      if (v112 >= v111 >> 1)
      {
        sub_1000328A4(v111 > 1, v112 + 1, 1);
        uint64_t v109 = (uint64_t)v463;
        uint64_t v98 = (void *)aBlock;
      }

      v98[2] = v112 + 1;
      sub_10002218C( v472,  (uint64_t)v498 + (void)v98 + v112 * (void)v99,  type metadata accessor for OwnedBeaconRecord);
      uint64_t v95 = v484;
    }

    ++v107;
    v108 += (uint64_t)v99;
  }

  while (v494 != v107);
  int64_t v113 = (void *)aBlock;
  LOBYTE(a3) = v460;
  dispatch_group_t v90 = v455;
  uint64_t v114 = v491;
LABEL_24:
  swift_bridgeObjectRelease();
  uint64_t v476 = sub_100564028((uint64_t)v114);
  swift_release();
  uint64_t v460 = sub_100564028((uint64_t)v113);
  swift_release();
  if ((a3 & 1) != 0) {
    uint64_t v115 = _swiftEmptyArrayStorage;
  }
  else {
    uint64_t v115 = 0LL;
  }
  uint64_t v116 = swift_allocObject(&unk_100961638, 24LL, 7LL);
  uint64_t v472 = v116;
  *(void *)(v116 + swift_weakDestroy(v0 + 16) = v115;
  unint64_t v117 = (void *)(v116 + 16);
  v509 = _swiftEmptyArrayStorage;
  dispatch_group_t v455 = dispatch_group_create();
  uint64_t v506 = (uint64_t)_swiftEmptyDictionarySingleton;
  uint64_t v118 = *((void *)v90 + 2);
  uint64_t v119 = v497;
  uint64_t v120 = (uint64_t)v487;
  uint64_t v121 = v480;
  if (v118)
  {
    uint64_t v122 = (uint64_t)v90 + 32;
    swift_bridgeObjectRetain(v90);
    do
    {
      sub_100013044(v122, (uint64_t)&aBlock);
      sub_10052C55C(&v506, &aBlock, (uint64_t *)&v508);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      swift_bridgeObjectRelease();
      uint64_t v506 = (uint64_t)v508;
      v122 += 40LL;
      --v118;
    }

    while (v118);
    v491 = v508;
    uint64_t v427 = 0LL;
    swift_bridgeObjectRelease_n(v90, 2LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v427 = 0LL;
    v491 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v124 = 0LL;
  uint64_t v125 = *(void *)(v476 + 64);
  uint64_t v439 = v476 + 64;
  uint64_t v126 = 1LL << *(_BYTE *)(v476 + 32);
  uint64_t v127 = -1LL;
  if (v126 < 64) {
    uint64_t v127 = ~(-1LL << v126);
  }
  unint64_t v128 = v127 & v125;
  v463 = &v507;
  int64_t v445 = (unint64_t)(v126 + 63) >> 6;
  int64_t v428 = v445 - 1;
  *(void *)&__int128 v123 = 141558275LL;
  __int128 v465 = v123;
  v440 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v123 = 136446210LL;
  __int128 v484 = v123;
  unint64_t v441 = 0x80000001008673C0LL;
  v498 = v117;
  uint64_t v129 = v486;
  uint64_t v130 = v481;
  while (2)
  {
    if (v128)
    {
      uint64_t v494 = (v128 - 1) & v128;
      *(void *)&__int128 v495 = v124;
      unint64_t v131 = __clz(__rbit64(v128)) | (v124 << 6);
      goto LABEL_39;
    }

    int64_t v136 = v124 + 1;
    if (__OFADD__(v124, 1LL)) {
      goto LABEL_209;
    }
    if (v136 >= v445)
    {
      *(void *)&__int128 v495 = v124;
      goto LABEL_45;
    }

    unint64_t v137 = *(void *)(v439 + 8 * v136);
    if (!v137)
    {
      int64_t v207 = v124 + 2;
      if (v124 + 2 >= v445)
      {
LABEL_98:
        *(void *)&__int128 v495 = v136;
        goto LABEL_45;
      }

      unint64_t v137 = *(void *)(v439 + 8 * v207);
      if (v137)
      {
LABEL_85:
        int64_t v136 = v207;
        goto LABEL_43;
      }

      if (v124 + 3 >= v445)
      {
        *(void *)&__int128 v495 = v124 + 2;
      }

      else
      {
        unint64_t v137 = *(void *)(v439 + 8 * (v124 + 3));
        if (v137)
        {
          int64_t v136 = v124 + 3;
          goto LABEL_43;
        }

        int64_t v207 = v124 + 4;
        if (v124 + 4 < v445)
        {
          unint64_t v137 = *(void *)(v439 + 8 * v207);
          if (v137) {
            goto LABEL_85;
          }
          while (1)
          {
            int64_t v136 = v207 + 1;
            if (__OFADD__(v207, 1LL)) {
              goto LABEL_211;
            }
            if (v136 >= v445) {
              break;
            }
            unint64_t v137 = *(void *)(v439 + 8 * v136);
            ++v207;
            if (v137) {
              goto LABEL_43;
            }
          }

          int64_t v136 = v428;
          goto LABEL_98;
        }

        *(void *)&__int128 v495 = v124 + 3;
      }

LABEL_110:
    uint64_t v218 = v215;
    uint64_t v475 = (v225 - 1) & v225;
    unint64_t v219 = __clz(__rbit64(v225)) + (v224 << 6);
    uint64_t v476 = v224;
LABEL_106:
    uint64_t v220 = v460;
    sub_10001DC4C( *(void *)(v460 + 48) + *(void *)(v470 + 72) * v219,  v464,  type metadata accessor for StableIdentifier);
    uint64_t v221 = *(void *)(v220 + 56);
    uint64_t v222 = v466;
    uint64_t v223 = *(void *)(v221 + 8 * v219);
    *(void *)(v217 + *((int *)v466 + 12)) = v223;
    ((void (*)(uint64_t, void, uint64_t, char *))v463[7])(v217, 0LL, 1LL, v222);
    swift_bridgeObjectRetain(v223);
    uint64_t v215 = v218;
LABEL_114:
    sub_100015750(v217, v215, &qword_1009B28B0);
    if (v216(v215, 1LL, v222) != 1)
    {
      uint64_t v226 = *(void *)(v215 + *((int *)v222 + 12));
      uint64_t v227 = (uint64_t)v477;
      sub_10002218C(v215, (uint64_t)v477, type metadata accessor for StableIdentifier);
      if (*(void *)(v226 + 16) < 2uLL)
      {
        sub_100018C68(v227, type metadata accessor for StableIdentifier);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v467 = v226;
        sub_10052CB80();
        uint64_t v230 = v229;
        if (*v117)
        {
          uint64_t v231 = v228;
          uint64_t aBlock = 0LL;
          unint64_t v501 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(40LL);
          swift_bridgeObjectRelease();
          uint64_t aBlock = 0xD000000000000026LL;
          unint64_t v501 = v444;
          v232._countAndFlagsBits = v231;
          v232._object = v230;
          String.append(_:)(v232);
          swift_bridgeObjectRelease();
          uint64_t v233 = aBlock;
          unint64_t v234 = v501;
          uint64_t v235 = (void *)*v117;
          char v236 = swift_isUniquelyReferenced_nonNull_native(*v117);
          *unint64_t v117 = v235;
          if ((v236 & 1) == 0)
          {
            uint64_t v235 = sub_1004C4120(0LL, v235[2] + 1LL, 1, v235);
            *unint64_t v117 = v235;
          }

          unint64_t v238 = v235[2];
          unint64_t v237 = v235[3];
          if (v238 >= v237 >> 1)
          {
            uint64_t v235 = sub_1004C4120((void *)(v237 > 1), v238 + 1, 1, v235);
            *unint64_t v117 = v235;
          }

          v235[2] = v238 + 1;
          uint64_t v239 = &v235[2 * v238];
          v239[4] = v233;
          v239[5] = v234;
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        uint64_t v240 = (uint64_t)v477;
        if (qword_10099B528 != -1) {
          swift_once(&qword_10099B528, sub_1004F3B00);
        }
        uint64_t v241 = type metadata accessor for Logger(0LL);
        uint64_t v242 = sub_10000A720(v241, (uint64_t)qword_100A2AC98);
        uint64_t v243 = sub_10001DC4C(v240, v214, type metadata accessor for StableIdentifier);
        uint64_t v494 = v242;
        uint64_t v244 = (os_log_s *)Logger.logObject.getter(v243);
        os_log_type_t v245 = static os_log_type_t.error.getter(v244);
        if (os_log_type_enabled(v244, v245))
        {
          uint64_t v246 = swift_slowAlloc(22LL, -1LL);
          uint64_t v247 = swift_slowAlloc(32LL, -1LL);
          uint64_t aBlock = v247;
          *(_DWORD *)uint64_t v246 = v465;
          *(void *)(v246 + 4) = 1752392040LL;
          *(_WORD *)(v246 + 12) = 2081;
          uint64_t v248 = v457;
          sub_10001DC4C(v214, v457, type metadata accessor for StableIdentifier);
          uint64_t v249 = String.init<A>(describing:)(v248, v458);
          *(void *)(v246 + 14) = sub_1003F11D4(v249, v250, &aBlock);
          swift_bridgeObjectRelease();
          sub_100018C68(v214, type metadata accessor for StableIdentifier);
          _os_log_impl( (void *)&_mh_execute_header,  v244,  v245,  "Duplicates (grouped) for %{private,mask.hash}s",  (uint8_t *)v246,  0x16u);
          swift_arrayDestroy(v247, 1LL, v443);
          swift_slowDealloc(v247, -1LL, -1LL);
          swift_slowDealloc(v246, -1LL, -1LL);
        }

        else
        {
          sub_100018C68(v214, type metadata accessor for StableIdentifier);
        }

        uint64_t v251 = (uint64_t)v492;
        uint64_t v216 = (unsigned int (*)(uint64_t, uint64_t, char *))v485;
        uint64_t v252 = *(char **)(v467 + 16);
        uint64_t v253 = v489;
        if (v252)
        {
          unint64_t v481 = (*(unsigned __int8 *)(v473 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v473 + 80);
          uint64_t v254 = v467 + v481;
          unint64_t v486 = *(void *)(v473 + 72);
          do
          {
            v496 = v252;
            *(void *)&__int128 v495 = v254;
            sub_10001DC4C(v254, v120, type metadata accessor for OwnedBeaconRecord);
            if (*v117)
            {
              uint64_t aBlock = 8224LL;
              unint64_t v501 = 0xE200000000000000LL;
              uint64_t v256 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              v257._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v119, v256);
              String.append(_:)(v257);
              swift_bridgeObjectRelease();
              uint64_t v258 = aBlock;
              unint64_t v259 = v501;
              uint64_t v260 = (void *)*v117;
              char v261 = swift_isUniquelyReferenced_nonNull_native(*v117);
              *unint64_t v117 = v260;
              if ((v261 & 1) == 0)
              {
                uint64_t v260 = sub_1004C4120(0LL, v260[2] + 1LL, 1, v260);
                *unint64_t v117 = v260;
              }

              unint64_t v263 = v260[2];
              unint64_t v262 = v260[3];
              if (v263 >= v262 >> 1)
              {
                uint64_t v260 = sub_1004C4120((void *)(v262 > 1), v263 + 1, 1, v260);
                void *v498 = v260;
              }

              v260[2] = v263 + 1;
              __n128 v264 = &v260[2 * v263];
              v264[4] = v258;
              v264[5] = v259;
              unint64_t v117 = v498;
              uint64_t v251 = (uint64_t)v492;
            }

            uint64_t v265 = sub_10001DC4C(v120, v251, type metadata accessor for OwnedBeaconRecord);
            uint64_t v266 = (os_log_s *)Logger.logObject.getter(v265);
            os_log_type_t v267 = static os_log_type_t.error.getter(v266);
            uint64_t v268 = v253;
            if (os_log_type_enabled(v266, v267))
            {
              uint64_t v269 = v251;
              uint64_t v270 = swift_slowAlloc(12LL, -1LL);
              uint64_t v271 = swift_slowAlloc(32LL, -1LL);
              uint64_t aBlock = v271;
              *(_DWORD *)uint64_t v270 = v484;
              uint64_t v272 = v490;
              sub_10001DC4C(v269, v490, type metadata accessor for OwnedBeaconRecord);
              uint64_t v273 = String.init<A>(describing:)(v272, v499);
              *(void *)(v270 + 4) = sub_1003F11D4(v273, v274, &aBlock);
              unint64_t v117 = v498;
              swift_bridgeObjectRelease();
              uint64_t v275 = v269;
              uint64_t v120 = (uint64_t)v487;
              sub_100018C68(v275, type metadata accessor for OwnedBeaconRecord);
              _os_log_impl((void *)&_mh_execute_header, v266, v267, "DUPE: %{public}s", (uint8_t *)v270, 0xCu);
              swift_arrayDestroy(v271, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v271, -1LL, -1LL);
              swift_slowDealloc(v270, -1LL, -1LL);
            }

            else
            {
              sub_100018C68(v251, type metadata accessor for OwnedBeaconRecord);
            }

            uint64_t v276 = (uint64_t)v482;
            uint64_t v277 = (uint64_t)v483;
            if (!v491[2] || (unint64_t v278 = sub_10030D124(v120 + *(int *)(v499 + 20)), (v279 & 1) == 0))
            {
              uint64_t v284 = v119;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v488 + 56))(v277, 1LL, 1LL, v119);
LABEL_150:
              sub_100015794(v277, &qword_10099D8A0);
              uint64_t v253 = v268;
              sub_10001DC4C(v120, v268, type metadata accessor for OwnedBeaconRecord);
              uint64_t v293 = sub_10001DC4C(v120, v276, type metadata accessor for OwnedBeaconRecord);
              uint64_t v294 = (os_log_s *)Logger.logObject.getter(v293);
              os_log_type_t v295 = static os_log_type_t.error.getter(v294);
              if (os_log_type_enabled(v294, v295))
              {
                uint64_t v296 = swift_slowAlloc(32LL, -1LL);
                uint64_t v297 = v276;
                uint64_t v298 = swift_slowAlloc(64LL, -1LL);
                uint64_t aBlock = v298;
                *(_DWORD *)uint64_t v296 = v480;
                *(void *)(v296 + 4) = 1752392040LL;
                *(_WORD *)(v296 + 12) = 2081;
                uint64_t v299 = v499;
                uint64_t v300 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                uint64_t v301 = dispatch thunk of CustomStringConvertible.description.getter(v497, v300);
                *(void *)(v296 + 14) = sub_1003F11D4(v301, v302, &aBlock);
                swift_bridgeObjectRelease();
                sub_100018C68(v489, type metadata accessor for OwnedBeaconRecord);
                *(_WORD *)(v296 + 22) = 2082;
                uint64_t v303 = v490;
                sub_10001DC4C(v297, v490, type metadata accessor for OwnedBeaconRecord);
                uint64_t v304 = v299;
                unint64_t v117 = v498;
                uint64_t v305 = String.init<A>(describing:)(v303, v304);
                *(void *)(v296 + swift_unknownObjectUnownedDestroy(v0 + 24) = sub_1003F11D4(v305, v306, &aBlock);
                swift_bridgeObjectRelease();
                uint64_t v253 = v489;
                sub_100018C68(v297, type metadata accessor for OwnedBeaconRecord);
                _os_log_impl( (void *)&_mh_execute_header,  v294,  v295,  "Beacon %{private,mask.hash}s is not known by group: %{public}s)",  (uint8_t *)v296,  0x20u);
                swift_arrayDestroy(v298, 2LL, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v298, -1LL, -1LL);
                uint64_t v307 = v296;
                uint64_t v120 = (uint64_t)v487;
                uint64_t v119 = v497;
                swift_slowDealloc(v307, -1LL, -1LL);
              }

              else
              {
                sub_100018C68(v268, type metadata accessor for OwnedBeaconRecord);
                sub_100018C68(v276, type metadata accessor for OwnedBeaconRecord);

                uint64_t v119 = v284;
              }

              sub_10001DC4C(v120, v493, type metadata accessor for OwnedBeaconRecord);
              unint64_t v308 = (unint64_t)v509;
              char v309 = swift_isUniquelyReferenced_nonNull_native(v509);
              uint64_t v216 = (unsigned int (*)(uint64_t, uint64_t, char *))v485;
              if ((v309 & 1) == 0) {
                unint64_t v308 = sub_1004C46DC(0, *(void *)(v308 + 16) + 1LL, 1, v308);
              }
              unint64_t v311 = *(void *)(v308 + 16);
              unint64_t v310 = *(void *)(v308 + 24);
              if (v311 >= v310 >> 1) {
                unint64_t v308 = sub_1004C46DC(v310 > 1, v311 + 1, 1, v308);
              }
              *(void *)(v308 + swift_weakDestroy(v0 + 16) = v311 + 1;
              unint64_t v255 = v486;
              sub_10002218C(v493, v308 + v481 + v311 * v486, type metadata accessor for OwnedBeaconRecord);
              v509 = (void *)v308;
              sub_100018C68(v120, type metadata accessor for OwnedBeaconRecord);
              goto LABEL_133;
            }

            uint64_t v280 = v488;
            uint64_t v281 = *(void (**)(uint64_t, unint64_t, uint64_t))(v488 + 16);
            v281(v277, v491[7] + *(void *)(v488 + 72) * v278, v119);
            uint64_t v282 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v280 + 56);
            v282(v277, 0LL, 1LL, v119);
            uint64_t v283 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v280 + 48);
            uint64_t v284 = v119;
            if (v283(v277, 1LL, v119) == 1) {
              goto LABEL_150;
            }
            uint64_t v285 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v488 + 32);
            uint64_t v286 = v120;
            uint64_t v287 = v479;
            v285(v479, v277, v119);
            uint64_t v288 = v478;
            v281(v478, (unint64_t)v287, v119);
            v282(v288, 0LL, 1LL, v119);
            uint64_t v289 = v286 + *(int *)(v499 + 28);
            uint64_t v290 = v468;
            uint64_t v291 = v468 + *(int *)(v469 + 48);
            sub_10001581C(v288, v468, &qword_10099D8A0);
            sub_10001581C(v289, v291, &qword_10099D8A0);
            if (v283(v290, 1LL, v119) == 1)
            {
              sub_100015794(v288, &qword_10099D8A0);
              unsigned int v292 = v283(v291, 1LL, v119);
              uint64_t v253 = v489;
              unint64_t v117 = v498;
              uint64_t v216 = (unsigned int (*)(uint64_t, uint64_t, char *))v485;
              if (v292 != 1) {
                goto LABEL_160;
              }
              sub_100015794(v290, &qword_10099D8A0);
              uint64_t v120 = (uint64_t)v487;
              (*(void (**)(unint64_t *, uint64_t))(v488 + 8))(v479, v119);
            }

            else
            {
              uint64_t v312 = v459;
              sub_10001581C(v290, v459, &qword_10099D8A0);
              unsigned int v313 = v283(v291, 1LL, v119);
              unint64_t v117 = v498;
              uint64_t v216 = (unsigned int (*)(uint64_t, uint64_t, char *))v485;
              if (v313 == 1)
              {
                sub_100015794(v478, &qword_10099D8A0);
                (*(void (**)(uint64_t, uint64_t))(v488 + 8))(v312, v119);
LABEL_160:
                sub_100015794(v290, (uint64_t *)&unk_1009B5370);
                uint64_t v120 = (uint64_t)v487;
LABEL_161:
                sub_10001DC4C(v120, v474, type metadata accessor for OwnedBeaconRecord);
                unint64_t v314 = (unint64_t)v509;
                if ((swift_isUniquelyReferenced_nonNull_native(v509) & 1) == 0) {
                  unint64_t v314 = sub_1004C46DC(0, *(void *)(v314 + 16) + 1LL, 1, v314);
                }
                uint64_t v315 = (uint64_t)v462;
                unint64_t v317 = *(void *)(v314 + 16);
                unint64_t v316 = *(void *)(v314 + 24);
                if (v317 >= v316 >> 1) {
                  unint64_t v314 = sub_1004C46DC(v316 > 1, v317 + 1, 1, v314);
                }
                *(void *)(v314 + swift_weakDestroy(v0 + 16) = v317 + 1;
                sub_10002218C(v474, v314 + v481 + v317 * v486, type metadata accessor for OwnedBeaconRecord);
                v509 = (void *)v314;
                sub_10001DC4C(v120, v315, type metadata accessor for OwnedBeaconRecord);
                uint64_t v318 = v461;
                uint64_t v319 = sub_10001DC4C(v120, v461, type metadata accessor for OwnedBeaconRecord);
                uint64_t v320 = (os_log_s *)Logger.logObject.getter(v319);
                os_log_type_t v321 = static os_log_type_t.error.getter(v320);
                if (os_log_type_enabled(v320, v321))
                {
                  uint64_t v322 = swift_slowAlloc(32LL, -1LL);
                  uint64_t v323 = v315;
                  uint64_t v324 = swift_slowAlloc(64LL, -1LL);
                  uint64_t aBlock = v324;
                  *(_DWORD *)uint64_t v322 = v480;
                  *(void *)(v322 + 4) = 1752392040LL;
                  *(_WORD *)(v322 + 12) = 2081;
                  uint64_t v325 = v499;
                  uint64_t v326 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                  uint64_t v327 = dispatch thunk of CustomStringConvertible.description.getter(v497, v326);
                  *(void *)(v322 + 14) = sub_1003F11D4(v327, v328, &aBlock);
                  swift_bridgeObjectRelease();
                  sub_100018C68(v323, type metadata accessor for OwnedBeaconRecord);
                  *(_WORD *)(v322 + 22) = 2082;
                  uint64_t v329 = v490;
                  sub_10001DC4C(v318, v490, type metadata accessor for OwnedBeaconRecord);
                  uint64_t v330 = v325;
                  unint64_t v117 = v498;
                  uint64_t v331 = String.init<A>(describing:)(v329, v330);
                  *(void *)(v322 + swift_unknownObjectUnownedDestroy(v0 + 24) = sub_1003F11D4(v331, v332, &aBlock);
                  swift_bridgeObjectRelease();
                  sub_100018C68(v318, type metadata accessor for OwnedBeaconRecord);
                  _os_log_impl( (void *)&_mh_execute_header,  v320,  v321,  "Beacon %{private,mask.hash}s groupId mismatch with group: %{public}s)",  (uint8_t *)v322,  0x20u);
                  swift_arrayDestroy(v324, 2LL, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v324, -1LL, -1LL);
                  uint64_t v333 = v322;
                  uint64_t v120 = (uint64_t)v487;
                  uint64_t v119 = v497;
                  swift_slowDealloc(v333, -1LL, -1LL);
                }

                else
                {

                  sub_100018C68(v318, type metadata accessor for OwnedBeaconRecord);
                  sub_100018C68(v315, type metadata accessor for OwnedBeaconRecord);
                }

                (*(void (**)(unint64_t *, uint64_t))(v488 + 8))(v479, v119);
                sub_100018C68(v120, type metadata accessor for OwnedBeaconRecord);
                uint64_t v253 = v489;
                goto LABEL_132;
              }

              uint64_t v334 = v312;
              uint64_t v335 = v442;
              v285((unint64_t *)v442, v291, v119);
              uint64_t v336 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              uint64_t v337 = v290;
              char v338 = dispatch thunk of static Equatable.== infix(_:_:)(v334, v335, v119, v336);
              uint64_t v339 = *(void (**)(char *, uint64_t))(v488 + 8);
              v339(v335, v119);
              sub_100015794(v478, &qword_10099D8A0);
              v339((char *)v334, v119);
              sub_100015794(v337, &qword_10099D8A0);
              uint64_t v253 = v489;
              uint64_t v120 = (uint64_t)v487;
              if ((v338 & 1) == 0) {
                goto LABEL_161;
              }
              v339((char *)v479, v119);
            }

            sub_100018C68(v120, type metadata accessor for OwnedBeaconRecord);
LABEL_132:
            unint64_t v255 = v486;
LABEL_133:
            uint64_t v254 = v495 + v255;
            uint64_t v252 = v496 - 1;
            uint64_t v251 = (uint64_t)v492;
          }

          while (v496 != (char *)1);
        }

        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v477, type metadata accessor for StableIdentifier);
        uint64_t v214 = (uint64_t)v447;
        uint64_t v215 = (uint64_t)v446;
      }

      uint64_t v209 = v476;
      unint64_t v213 = v475;
      continue;
    }

    break;
  }

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v341 = v509[2];
  if (v341)
  {
    uint64_t v342 = *(unsigned __int8 *)(v473 + 80);
    v477 = v509;
    uint64_t v343 = (uint64_t)v509 + ((v342 + 32) & ~v342);
    v479 = &v507;
    v496 = (char *)(v342 | 7);
    uint64_t v493 = (v342 + 24) & ~v342;
    v492 = (char *)((v429 + 7 + v493) & 0xFFFFFFFFFFFFFFF8LL);
    v491 = v492 + 8;
    LODWORD(v489) = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
    v487 = (char *)((v342 + 16) & ~v342);
    unint64_t v486 = (unint64_t)&v487[v429 + 7] & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v344 = (v486 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)&__int128 v484 = v344 + 8;
    v483 = (char *)(v344 + 9);
    v485 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v344;
    v482 = (char *)(v344 + 10);
    unint64_t v481 = *(void *)(v473 + 72);
    uint64_t v478 = (uint64_t)&type metadata for Any + 8;
    __int128 v495 = xmmword_1007E67D0;
    uint64_t v345 = v454;
    do
    {
      sub_10001DC4C(v343, v345, type metadata accessor for OwnedBeaconRecord);
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v359 = type metadata accessor for Logger(0LL);
      sub_10000A720(v359, (uint64_t)qword_100A2AC98);
      uint64_t v360 = v448;
      uint64_t v361 = sub_10001DC4C(v345, v448, type metadata accessor for OwnedBeaconRecord);
      __int128 v362 = (os_log_s *)Logger.logObject.getter(v361);
      os_log_type_t v363 = static os_log_type_t.error.getter(v362);
      BOOL v364 = os_log_type_enabled(v362, v363);
      uint64_t v365 = v497;
      uint64_t v494 = v341;
      if (v364)
      {
        uint64_t v366 = swift_slowAlloc(22LL, -1LL);
        uint64_t v367 = swift_slowAlloc(32LL, -1LL);
        uint64_t aBlock = v367;
        *(_DWORD *)uint64_t v366 = v465;
        uint64_t v506 = 1752392040LL;
        *(void *)&__int128 v480 = v343;
        v368 = v479;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v479, v366 + 4, v366 + 12);
        *(_WORD *)(v366 + 12) = 2081;
        uint64_t v369 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v370 = dispatch thunk of CustomStringConvertible.description.getter(v365, v369);
        uint64_t v506 = sub_1003F11D4(v370, v371, &aBlock);
        v372 = v368;
        uint64_t v343 = v480;
        unint64_t v117 = v498;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v372, v366 + 14, v366 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v360, type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v362, v363, "Unpairing %{private,mask.hash}s", (uint8_t *)v366, 0x16u);
        swift_arrayDestroy(v367, 1LL, v478);
        swift_slowDealloc(v367, -1LL, -1LL);
        swift_slowDealloc(v366, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v360, type metadata accessor for OwnedBeaconRecord);
      }

      swift_beginAccess(v117, &aBlock, 33LL, 0LL);
      if (*v117)
      {
        uint64_t v506 = 0x6E69726961706E55LL;
        unint64_t v507 = 0xEA00000000002067LL;
        uint64_t v373 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v374._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v497, v373);
        String.append(_:)(v374);
        swift_bridgeObjectRelease();
        uint64_t v375 = v506;
        unint64_t v376 = v507;
        uint64_t v377 = (void *)*v117;
        char v378 = swift_isUniquelyReferenced_nonNull_native(*v117);
        *unint64_t v117 = v377;
        if ((v378 & 1) == 0)
        {
          uint64_t v377 = sub_1004C4120(0LL, v377[2] + 1LL, 1, v377);
          *unint64_t v117 = v377;
        }

        unint64_t v380 = v377[2];
        unint64_t v379 = v377[3];
        if (v380 >= v379 >> 1)
        {
          uint64_t v377 = sub_1004C4120((void *)(v379 > 1), v380 + 1, 1, v377);
          *unint64_t v117 = v377;
        }

        v377[2] = v380 + 1;
        v381 = &v377[2 * v380];
        v381[4] = v375;
        v381[5] = v376;
      }

      swift_endAccess(&aBlock);
      dispatch_group_t v382 = v455;
      dispatch_group_enter(v455);
      uint64_t v383 = v449;
      sub_10001DC4C(v345, v449, type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v383, v471, type metadata accessor for OwnedBeaconRecord);
      uint64_t v384 = swift_allocObject(&unk_100961660, v491, v496);
      *(void *)(v384 + swift_weakDestroy(v0 + 16) = v382;
      sub_10002218C(v383, v384 + v493, type metadata accessor for OwnedBeaconRecord);
      uint64_t v385 = v472;
      *(void *)&v492[v384] = v472;
      swift_retain_n(v385, 2LL);
      v386 = v382;
      uint64_t v387 = v345;
      uint64_t v388 = v386;
      uint64_t v389 = static os_log_type_t.default.getter(v386);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v390 = qword_100A2B018;
      uint64_t v391 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v392 = swift_allocObject(v391, 72LL, 7LL);
      *(_OWORD *)(v392 + swift_weakDestroy(v0 + 16) = v495;
      uint64_t v393 = v387 + *(int *)(v499 + 20);
      uint64_t v394 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v395 = dispatch thunk of CustomStringConvertible.description.getter(v497, v394);
      uint64_t v397 = v396;
      *(void *)(v392 + 56) = &type metadata for String;
      *(void *)(v392 + 64) = sub_1000226F4();
      *(void *)(v392 + 32) = v395;
      *(void *)(v392 + 40) = v397;
      os_log(_:dso:log:_:_:)(v389, &_mh_execute_header, v390, "Unpair owned beacon: %@", 23LL, 2LL, v392);
      uint64_t v398 = swift_bridgeObjectRelease();
      v399 = v450;
      static SystemInfo.lockState.getter(v398);
      uint64_t v400 = v452;
      v401 = v451;
      uint64_t v402 = v453;
      (*(void (**)(char *, void, uint64_t))(v452 + 104))(v451, v489, v453);
      uint64_t v403 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
      dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v402, v403);
      dispatch thunk of RawRepresentable.rawValue.getter(&v506, v402, v403);
      uint64_t v404 = aBlock;
      uint64_t v405 = v506;
      v406 = *(void (**)(char *, uint64_t))(v400 + 8);
      v406(v401, v402);
      uint64_t v407 = ((uint64_t (*)(char *, uint64_t))v406)(v399, v402);
      if (v404 == v405)
      {
        uint64_t v408 = static os_log_type_t.default.getter(v407);
        os_log(_:dso:log:_:_:)( v408,  &_mh_execute_header,  qword_100A2B018,  "unpair call failed because in device is in beforeFirstUnlock state",  66LL,  2LL,  _swiftEmptyArrayStorage);
        unint64_t v409 = sub_1000220F0();
        uint64_t v410 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v409, 0LL, 0LL);
        _BYTE *v411 = 0;
        sub_10052CF94(v410, v388, v471, v472);
        swift_errorRelease(v410);
      }

      uint64_t v346 = dispatch_group_create();
      dispatch_group_enter(v346);
      uint64_t v347 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
      uint64_t v348 = v488;
      uint64_t v349 = *(unsigned __int8 *)(v488 + 80);
      uint64_t v350 = (v349 + 32) & ~v349;
      uint64_t v351 = swift_allocObject(v347, v350 + *(void *)(v488 + 72), v349 | 7);
      *(_OWORD *)(v351 + swift_weakDestroy(v0 + 16) = v495;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v348 + 16))(v351 + v350, v393, v497);
      uint64_t v352 = swift_allocObject(&unk_100961688, 24LL, 7LL);
      *(void *)(v352 + swift_weakDestroy(v0 + 16) = v346;
      uint64_t v353 = v346;
      uint64_t v354 = v456;
      sub_10047B904(v351, (uint64_t)sub_100154694, v352);
      swift_bridgeObjectRelease();
      swift_release();
      OS_dispatch_group.wait()();
      uint64_t v355 = v454;
      uint64_t v356 = v490;
      sub_10001DC4C(v454, v490, type metadata accessor for OwnedBeaconRecord);
      uint64_t v357 = swift_allocObject(&unk_1009616B0, v482, v496);
      sub_10002218C(v356, (uint64_t)&v487[v357], type metadata accessor for OwnedBeaconRecord);
      uint64_t v358 = (void (**)(uint64_t))(v357 + v486);
      *uint64_t v358 = sub_100567424;
      v358[1] = (void (*)(uint64_t))v384;
      *(void *)((char *)v485 + v357) = v354;
      *(_BYTE *)(v357 + v484) = 0;
      v483[v357] = 0;
      swift_retain();
      swift_retain();
      sub_10013E898(v355, (void (*)(void))sub_10014F0C8, v357);

      uint64_t v345 = v355;
      swift_release();
      swift_release();

      sub_100018C68(v471, type metadata accessor for OwnedBeaconRecord);
      swift_release();
      sub_100018C68(v355, type metadata accessor for OwnedBeaconRecord);
      v343 += v481;
      uint64_t v341 = v494 - 1;
      unint64_t v117 = v498;
    }

    while (v494 != 1);
  }

  swift_bridgeObjectRelease();
  uint64_t v412 = *(void *)(v456 + 48);
  v413 = (void *)swift_allocObject(&unk_1009616D8, 48LL, 7LL);
  uint64_t v414 = v472;
  v413[2] = v431;
  v413[3] = v414;
  uint64_t v415 = v432;
  v413[4] = v430;
  v413[5] = v415;
  v504 = sub_100567770;
  v505 = v413;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v501 = 1107296256LL;
  v502 = sub_1001C31E8;
  v503 = &unk_1009616F0;
  v416 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  uint64_t v417 = swift_retain();
  v418 = v433;
  static DispatchQoS.unspecified.getter(v417);
  uint64_t v506 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v419 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v420 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v421 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  v422 = v436;
  uint64_t v423 = v420;
  uint64_t v424 = v438;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v506, v423, v421, v438, v419);
  dispatch_group_t v425 = v455;
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v418, v422, v412, v416);
  _Block_release(v416);

  (*(void (**)(char *, uint64_t))(v437 + 8))(v422, v424);
  (*(void (**)(char *, uint64_t))(v434 + 8))(v418, v435);
  swift_release();
  return swift_release();
}

uint64_t sub_10052C55C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v77 = a3;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void **)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v76 - v9;
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v78 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v83 = (char *)&v76 - v15;
  __chkstk_darwin(v14);
  uint64_t v84 = a2;
  int v85 = (char *)&v76 - v16;
  uint64_t v17 = *a1;
  uint64_t v18 = a2[3];
  uint64_t v19 = a2[4];
  sub_100012ED8(a2, v18);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v19 + 16);
  __n128 v21 = swift_bridgeObjectRetain(v17);
  uint64_t v22 = v18;
  uint64_t v23 = v6;
  uint64_t v24 = v19;
  uint64_t v25 = (uint64_t)v10;
  uint64_t v26 = v20(v22, v24, v21);
  int64_t v27 = 0LL;
  uint64_t v28 = *(void *)(v26 + 56);
  uint64_t v79 = v26 + 56;
  uint64_t v86 = v26;
  uint64_t v87 = v5;
  uint64_t v29 = 1LL << *(_BYTE *)(v26 + 32);
  uint64_t v30 = -1LL;
  if (v29 < 64) {
    uint64_t v30 = ~(-1LL << v29);
  }
  unint64_t v31 = v30 & v28;
  int64_t v80 = (unint64_t)(v29 + 63) >> 6;
  uint64_t v88 = v25;
  uint64_t v82 = v6;
  uint64_t v92 = v17;
  if (v31) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v36 = v27 + 1;
  uint64_t v35 = v85;
  if (__OFADD__(v27, 1LL))
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v87);
    __break(1u);
    return result;
  }

  if (v36 < v80)
  {
    unint64_t v37 = *(void *)(v79 + 8 * v36);
    ++v27;
    if (v37) {
      goto LABEL_21;
    }
    int64_t v27 = v36 + 1;
    if (v36 + 1 >= v80) {
      goto LABEL_41;
    }
    unint64_t v37 = *(void *)(v79 + 8 * v27);
    if (v37) {
      goto LABEL_21;
    }
    int64_t v27 = v36 + 2;
    if (v36 + 2 >= v80) {
      goto LABEL_41;
    }
    unint64_t v37 = *(void *)(v79 + 8 * v27);
    if (v37)
    {
LABEL_21:
      uint64_t v91 = (v37 - 1) & v37;
      unint64_t v34 = __clz(__rbit64(v37)) + (v27 << 6);
      while (1)
      {
        uint64_t v39 = v23[9];
        uint64_t v40 = (void (*)(char *, unint64_t, uint64_t))v23[2];
        v40(v35, *(void *)(v86 + 48) + v39 * v34, v5);
        uint64_t v41 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v23[7];
        v41(v35, 0LL, 1LL, v5);
        uint64_t v42 = (unsigned int (*)(char *, uint64_t, uint64_t))v23[6];
        if (v42(v35, 1LL, v5) == 1)
        {
          uint64_t result = swift_release();
          uint64_t v17 = v92;
          goto LABEL_42;
        }

        uint64_t v89 = v39;
        int64_t v90 = v27;
        uint64_t v43 = (void (*)(uint64_t, char *, uint64_t))v23[4];
        v43(v25, v35, v5);
        uint64_t v44 = v25;
        uint64_t v45 = v84[3];
        uint64_t v46 = v84[4];
        sub_100012ED8(v84, v45);
        uint64_t v47 = v45;
        uint64_t v48 = (uint64_t)v83;
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v46);
        v41((char *)v48, 0LL, 1LL, v5);
        if (v42((char *)v48, 1LL, v5) == 1)
        {
          uint64_t v49 = (void (*)(uint64_t, unint64_t, uint64_t))v43;
          sub_100015794(v48, &qword_10099D8A0);
          uint64_t v17 = v92;
          swift_bridgeObjectRetain(v92);
          unint64_t v50 = sub_10030D124(v44);
          char v52 = v51;
          swift_bridgeObjectRelease();
          if ((v52 & 1) != 0)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
            uint64_t v93 = (void *)v17;
            uint64_t v23 = v82;
            uint64_t v32 = (uint64_t)v78;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100063260();
              uint64_t v17 = (uint64_t)v93;
            }

            unint64_t v54 = v50 * v89;
            uint64_t v33 = (void (*)(unint64_t, uint64_t))v23[1];
            uint64_t v55 = v87;
            v33(*(void *)(v17 + 48) + v50 * v89, v87);
            uint64_t v17 = (uint64_t)v93;
            v49(v32, v93[7] + v54, v55);
            uint64_t v5 = v55;
            sub_100058DE4(v50, v17);
            swift_bridgeObjectRelease();
            v41((char *)v32, 0LL, 1LL, v55);
          }

          else
          {
            uint64_t v32 = (uint64_t)v78;
            uint64_t v5 = v87;
            v41(v78, 1LL, 1LL, v87);
            uint64_t v23 = v82;
            uint64_t v33 = (void (*)(unint64_t, uint64_t))v82[1];
          }

          uint64_t v25 = v88;
          v33(v88, v5);
          sub_100015794(v32, &qword_10099D8A0);
          int64_t v27 = v90;
          unint64_t v31 = v91;
          uint64_t v92 = v17;
          if (!v91) {
            goto LABEL_8;
          }
        }

        else
        {
          v43((uint64_t)v81, (char *)v48, v5);
          uint64_t v56 = (void *)v92;
          uint64_t v57 = swift_isUniquelyReferenced_nonNull_native(v92);
          uint64_t v93 = v56;
          unint64_t v59 = sub_10030D124(v44);
          uint64_t v60 = v56[2];
          BOOL v61 = (v58 & 1) == 0;
          uint64_t v62 = v60 + v61;
          if (__OFADD__(v60, v61))
          {
            __break(1u);
            goto LABEL_44;
          }

          char v63 = v58;
          uint64_t v64 = (void (*)(unint64_t, char *, uint64_t))v43;
          if (v56[3] >= v62)
          {
            uint64_t v67 = v89;
            int64_t v27 = v90;
            if ((v57 & 1) == 0) {
              sub_100063260();
            }
          }

          else
          {
            sub_10004C52C(v62, v57);
            unint64_t v65 = sub_10030D124(v88);
            uint64_t v67 = v89;
            int64_t v27 = v90;
            if ((v63 & 1) != (v66 & 1)) {
              goto LABEL_47;
            }
            unint64_t v59 = v65;
          }

          uint64_t v23 = v82;
          uint64_t v68 = v93;
          if ((v63 & 1) != 0)
          {
            uint64_t v5 = v87;
            ((void (*)(unint64_t, char *, uint64_t))v82[5])(v93[7] + v59 * v67, v81, v87);
            uint64_t v25 = v88;
          }

          else
          {
            v93[(v59 >> 6) + 8] |= 1LL << v59;
            unint64_t v69 = v59 * v67;
            unint64_t v70 = v68[6] + v59 * v67;
            uint64_t v71 = v87;
            uint64_t v25 = v88;
            v40((char *)v70, v88, v87);
            v64(v68[7] + v69, v81, v71);
            uint64_t v72 = v68[2];
            BOOL v73 = __OFADD__(v72, 1LL);
            uint64_t v74 = v72 + 1;
            if (v73) {
              goto LABEL_45;
            }
            v68[2] = v74;
            uint64_t v5 = v87;
          }

          uint64_t v17 = (uint64_t)v93;
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, uint64_t))v23[1])(v25, v5);
          unint64_t v31 = v91;
          uint64_t v92 = v17;
          if (!v91) {
            goto LABEL_8;
          }
        }

void sub_10052CB80()
{
  uint64_t v1 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(v0, (uint64_t)v3, v4);
  uint64_t v5 = (char *)sub_10052CC10 + 4 * byte_100806524[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }

uint64_t sub_10052CC10()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)v0[1];
  *(void *)(v1 - 80) = 0LL;
  *(void *)(v1 - 72) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(31LL);
  swift_bridgeObjectRelease();
  *(void *)(v1 - 80) = 0xD00000000000001CLL;
  *(void *)(v1 - 72) = 0x8000000100867460LL;
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return *(void *)(v1 - 80);
}

void sub_10052CF94(uint64_t a1, dispatch_group_s *a2, uint64_t a3, uint64_t a4)
{
  dispatch_group_t v73 = a2;
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v69 - v12;
  uint64_t v14 = (void *)(a4 + 16);
  uint64_t v72 = v11;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2AC98);
    sub_10001DC4C(a3, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
    swift_errorRetain(a1);
    uint64_t v16 = swift_errorRetain(a1);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v71 = v14;
      uint64_t v20 = v19;
      unint64_t v69 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v70 = swift_slowAlloc(32LL, -1LL);
      v76[0] = v70;
      *(_DWORD *)uint64_t v20 = 141558531;
      uint64_t v74 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v20 + 4, v20 + 12);
      *(_WORD *)(v20 + 12) = 2081;
      uint64_t v21 = type metadata accessor for UUID(0LL);
      uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
      uint64_t v74 = sub_1003F11D4(v23, v24, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v20 + 22) = 2112;
      uint64_t v25 = _convertErrorToNSError(_:)(a1);
      uint64_t v74 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v20 + 24, v20 + 32);
      uint64_t v26 = v69;
      *unint64_t v69 = v25;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Error unpairing %{private,mask.hash}s: %@",  (uint8_t *)v20,  0x20u);
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v26, 1LL, v27);
      swift_slowDealloc(v26, -1LL, -1LL);
      uint64_t v28 = v70;
      swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      uint64_t v29 = v20;
      uint64_t v14 = v71;
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_beginAccess(v14, v76, 33LL, 0LL);
    if (*v14)
    {
      uint64_t v74 = 0LL;
      unint64_t v75 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(24LL);
      swift_bridgeObjectRelease();
      uint64_t v74 = 0xD000000000000012LL;
      unint64_t v75 = 0x80000001008674A0LL;
      uint64_t v42 = type metadata accessor for UUID(0LL);
      uint64_t v43 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v42, v43);
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._countAndFlagsBits = 8250LL;
      v45._object = (void *)0xE200000000000000LL;
      String.append(_:)(v45);
      uint64_t v46 = (void *)_convertErrorToNSError(_:)(a1);
      id v47 = [v46 description];
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      unint64_t v50 = v49;

      v51._countAndFlagsBits = v48;
      v51._object = v50;
      String.append(_:)(v51);

      swift_bridgeObjectRelease();
      uint64_t v52 = v74;
      unint64_t v53 = v75;
      unint64_t v54 = (void *)*v14;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
      void *v14 = v54;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v54 = sub_1004C4120(0LL, v54[2] + 1LL, 1, v54);
        void *v14 = v54;
      }

      unint64_t v57 = v54[2];
      unint64_t v56 = v54[3];
      if (v57 >= v56 >> 1)
      {
        unint64_t v54 = sub_1004C4120((void *)(v56 > 1), v57 + 1, 1, v54);
        void *v14 = v54;
      }

      uint64_t v54[2] = v57 + 1;
      char v58 = &v54[2 * v57];
      v58[4] = v52;
      v58[5] = v53;
    }

    swift_endAccess(v76);
    swift_errorRelease(a1);
  }

  else
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    sub_10000A720(v30, (uint64_t)qword_100A2AC98);
    uint64_t v71 = (void *)a3;
    uint64_t v31 = sub_10001DC4C(a3, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      v76[0] = v35;
      *(_DWORD *)uint64_t v34 = 141558275;
      uint64_t v74 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2081;
      int64_t v36 = v14;
      uint64_t v37 = type metadata accessor for UUID(0LL);
      uint64_t v38 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v39 = v37;
      uint64_t v14 = v36;
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v39, v38);
      uint64_t v74 = sub_1003F11D4(v40, v41, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Successfully unpaired %{private,mask.hash}s",  (uint8_t *)v34,  0x16u);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    }

    swift_beginAccess(v14, v76, 33LL, 0LL);
    if (*v14)
    {
      uint64_t v74 = 0LL;
      unint64_t v75 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(24LL);
      swift_bridgeObjectRelease();
      uint64_t v74 = 0xD000000000000016LL;
      unint64_t v75 = 0x8000000100867480LL;
      uint64_t v59 = type metadata accessor for UUID(0LL);
      uint64_t v60 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v59, v60);
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      uint64_t v62 = v74;
      unint64_t v63 = v75;
      uint64_t v64 = (void *)*v14;
      char v65 = swift_isUniquelyReferenced_nonNull_native(*v14);
      void *v14 = v64;
      if ((v65 & 1) == 0)
      {
        uint64_t v64 = sub_1004C4120(0LL, v64[2] + 1LL, 1, v64);
        void *v14 = v64;
      }

      unint64_t v67 = v64[2];
      unint64_t v66 = v64[3];
      if (v67 >= v66 >> 1)
      {
        uint64_t v64 = sub_1004C4120((void *)(v66 > 1), v67 + 1, 1, v64);
        void *v14 = v64;
      }

      v64[2] = v67 + 1;
      uint64_t v68 = &v64[2 * v67];
      v68[4] = v62;
      v68[5] = v63;
    }

    swift_endAccess(v76);
  }

  dispatch_group_leave(v73);
}

uint64_t sub_10052D764(uint64_t a1, uint64_t a2, void (*a3)(void *, void))
{
  Swift::String v5 = (void **)(a2 + 16);
  swift_beginAccess(a2 + 16, v13, 0LL, 0LL);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    if (!*(void *)(v6 + 16))
    {
      swift_beginAccess(v5, v11, 1LL, 0LL);
      uint64_t v7 = *v5;
      if (*v5)
      {
        *Swift::String v5 = &off_100936F00;
        swift_bridgeObjectRelease(v7);
      }
    }
  }

  swift_beginAccess(v5, v12, 0LL, 0LL);
  uint64_t v8 = *v5;
  if (*v5) {
    uint64_t v9 = *v5;
  }
  else {
    uint64_t v9 = &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(v8);
  a3(v9, 0LL);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_10052D82C()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults(0LL);
  sub_10000A8AC(v0, qword_1009B1E58);
  sub_10000A720(v0, (uint64_t)qword_1009B1E58);
  return PrefixedDefaults.init(prefix:)(0x74536E6F63616542LL, 0xEB0000000065726FLL);
}

uint64_t sub_10052D890()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A1CC8(v4);
  double v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t result = static Duration.seconds(_:)(v1);
  qword_1009B1E70 = result;
  *(void *)algn_1009B1E78 = v3;
  return result;
}

uint64_t sub_10052D93C()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults(0LL);
  sub_10000A8AC(v0, qword_1009B1E80);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009B1E80);
  if (qword_10099B550 != -1) {
    swift_once(&qword_10099B550, sub_10052D82C);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_1009B1E58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_10052D9CC()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_1009B2BE0);
  sub_10000A8AC(v4, qword_1009B1E98);
  sub_10000A720(v4, (uint64_t)qword_1009B1E98);
  if (qword_10099B560 != -1) {
    swift_once(&qword_10099B560, sub_10052D93C);
  }
  uint64_t v5 = sub_10000A720(v0, (uint64_t)qword_1009B1E80);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  uint64_t v6 = type metadata accessor for Date(0LL);
  return ManagedDefault.init(prefixedDefaults:key:)( v3,  0xD000000000000012LL,  0x80000001008680E0LL,  v6,  &protocol witness table for Date);
}

uint64_t sub_10052DAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1LL, 1LL, v6);
  uint64_t v8 = (void *)swift_allocObject(&unk_1009612F0, 40LL, 7LL);
  v8[2] = 0LL;
  uint64_t v9 = v8 + 2;
  _OWORD v8[3] = 0LL;
  void v8[4] = a2;
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  uint64_t v11 = swift_retain();
  if (v10 == 1)
  {
    sub_100015794((uint64_t)v5, &qword_1009A9BF0);
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 7168LL;
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    uint64_t v14 = v15 | 0x1C00LL;
    uint64_t v16 = *v9;
    if (*v9)
    {
      uint64_t v17 = v8[3];
      uint64_t ObjectType = swift_getObjectType(*v9);
      swift_unknownObjectRetain(v16);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      uint64_t v13 = v19;
      swift_unknownObjectRelease(v16);
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
    }
  }

  uint64_t v20 = swift_allocObject(&unk_100961318, 32LL, 7LL);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = &unk_1009B2850;
  *(void *)(v20 + swift_unknownObjectUnownedDestroy(v0 + 24) = v8;
  if (v13 | v12)
  {
    v23[0] = 0LL;
    v23[1] = 0LL;
    uint64_t v21 = v23;
    void v23[2] = v12;
    void v23[3] = v13;
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  swift_task_create(v14, v21, (char *)&type metadata for () + 8, &unk_1009AB890, v20);
  return swift_release();
}

uint64_t sub_10052DCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a4;
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  v4[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[18] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[19] = swift_task_alloc(v7);
  v4[20] = swift_task_alloc(v7);
  v4[21] = swift_task_alloc(v7);
  return swift_task_switch(sub_10052DD34, 0LL, 0LL);
}

uint64_t sub_10052DD34()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C938 + dword_10099C938);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C93C);
    *(void *)(v0 + 176) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10052DE34;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10052DE34(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 184LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10052DE90, 0LL, 0LL);
}

uint64_t sub_10052DE90()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 184))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_10099CEA4);
    *(void *)(v0 + 192) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10052DF18;
    return sub_100018D34();
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = *(void *)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 168));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10052DF18(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 192);
  *(void *)(v3 + 200) = a1;
  *(void *)(v3 + 208) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10052E68C;
  }
  else {
    uint64_t v5 = sub_10052DF84;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10052DF84()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 144);
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 272) = v4;
    *(void *)(v0 + 2swift_unknownObjectUnownedDestroy(v0 + 24) = *(void *)(v3 + 72);
    *(void *)(v0 + 232) = 0LL;
    sub_10001DC4C( v1 + ((v4 + 32LL) & ~(unint64_t)v4),  *(void *)(v0 + 168),  type metadata accessor for OwnedBeaconRecord);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 240) = sub_10000A720(v7, (uint64_t)qword_100A2AC98);
    uint64_t v8 = sub_10001DC4C(v6, v5, type metadata accessor for OwnedBeaconRecord);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter(v9);
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 160);
    if (v11)
    {
      uint64_t v13 = swift_slowAlloc(22LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v14;
      *(_DWORD *)uint64_t v13 = 141558275;
      *(void *)(v13 + 4) = 1752392040LL;
      *(_WORD *)(v13 + 12) = 2081;
      uint64_t v15 = type metadata accessor for UUID(0LL);
      uint64_t v16 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
      *(void *)(v13 + 14) = sub_1003F11D4(v17, v18, &v31);
      swift_bridgeObjectRelease();
      sub_100018C68(v12, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Removing ghost beacon: %{private,mask.hash}s",  (uint8_t *)v13,  0x16u);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 160), type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v27 = *(void *)(v0 + 168);
    uint64_t v28 = *(void *)(v0 + 128);
    uint64_t v29 = swift_task_alloc(32LL);
    *(void *)(v0 + 248) = v29;
    *(void *)(v29 + swift_weakDestroy(v0 + 16) = v28;
    *(void *)(v29 + swift_unknownObjectUnownedDestroy(v0 + 24) = v27;
    uint64_t v30 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 256) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_10052E320;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( v30,  0LL,  0LL,  0xD000000000000014LL,  0x8000000100867320LL,  sub_100565FB4,  v29,  (char *)&type metadata for () + 8);
  }

  else
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A2AC98);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No ghost beacons.", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v24 = *(void *)(v0 + 160);
    uint64_t v25 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 168));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10052E320()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 256);
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    int v4 = sub_10052E87C;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 248));
    int v4 = sub_10052E38C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10052E38C()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 232) + 1LL;
  sub_100018C68(*(void *)(v0 + 168), type metadata accessor for OwnedBeaconRecord);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = *(void *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 168));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 232) + 1LL;
    *(void *)(v0 + 232) = v7;
    sub_10001DC4C( *(void *)(v0 + 200)
    + ((*(unsigned __int8 *)(v0 + 272) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 272))
    + v6 * v7,
      *(void *)(v0 + 168),
      type metadata accessor for OwnedBeaconRecord);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v8 = *(void *)(v0 + 160);
    uint64_t v9 = *(void *)(v0 + 168);
    uint64_t v10 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 240) = sub_10000A720(v10, (uint64_t)qword_100A2AC98);
    uint64_t v11 = sub_10001DC4C(v9, v8, type metadata accessor for OwnedBeaconRecord);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter(v12);
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void *)(v0 + 160);
    if (v14)
    {
      uint64_t v16 = swift_slowAlloc(22LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v26 = v17;
      *(_DWORD *)uint64_t v16 = 141558275;
      *(void *)(v16 + 4) = 1752392040LL;
      *(_WORD *)(v16 + 12) = 2081;
      uint64_t v18 = type metadata accessor for UUID(0LL);
      uint64_t v19 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
      *(void *)(v16 + 14) = sub_1003F11D4(v20, v21, &v26);
      swift_bridgeObjectRelease();
      sub_100018C68(v15, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Removing ghost beacon: %{private,mask.hash}s",  (uint8_t *)v16,  0x16u);
      swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 160), type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v22 = *(void *)(v0 + 168);
    uint64_t v23 = *(void *)(v0 + 128);
    uint64_t v24 = swift_task_alloc(32LL);
    *(void *)(v0 + 248) = v24;
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v23;
    *(void *)(v24 + swift_unknownObjectUnownedDestroy(v0 + 24) = v22;
    uint64_t v25 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 256) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_10052E320;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( v25,  0LL,  0LL,  0xD000000000000014LL,  0x8000000100867320LL,  sub_100565FB4,  v24,  (char *)&type metadata for () + 8);
  }

uint64_t sub_10052E68C()
{
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AC98);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 208);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 120) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    *uint64_t v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during removeGhostBeacons: %@", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 208));
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  uint64_t v12 = *(void *)(v0 + 160);
  uint64_t v13 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10052E87C()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 248));
  sub_10001DC4C(v2, v3, type metadata accessor for OwnedBeaconRecord);
  swift_errorRetain(v1);
  uint64_t v4 = swift_errorRetain(v1);
  os_log_type_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v9 = *(void *)(v0 + 152);
  if (v7)
  {
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v44 = v12;
    *(_DWORD *)uint64_t v10 = 141558531;
    *(void *)(v10 + 4) = 1752392040LL;
    *(_WORD *)(v10 + 12) = 2081;
    uint64_t v13 = type metadata accessor for UUID(0LL);
    uint64_t v14 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    *(void *)(v10 + 14) = sub_1003F11D4(v15, v16, &v44);
    swift_bridgeObjectRelease();
    sub_100018C68(v9, type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v10 + 22) = 2112;
    swift_errorRetain(v8);
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v10 + swift_unknownObjectUnownedDestroy(v0 + 24) = v17;
    uint64_t *v11 = v17;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Error unpairing %{private,mask.hash}s: %@",  (uint8_t *)v10,  0x20u);
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v18);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v8);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 264));
    sub_100018C68(v9, type metadata accessor for OwnedBeaconRecord);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
  }

  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v20 = *(void *)(v0 + 232) + 1LL;
  sub_100018C68(*(void *)(v0 + 168), type metadata accessor for OwnedBeaconRecord);
  if (v20 == v19)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v21 = *(void *)(v0 + 160);
    uint64_t v22 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 168));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v24 = *(void *)(v0 + 224);
    uint64_t v25 = *(void *)(v0 + 232) + 1LL;
    *(void *)(v0 + 232) = v25;
    sub_10001DC4C( *(void *)(v0 + 200)
    + ((*(unsigned __int8 *)(v0 + 272) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 272))
    + v24 * v25,
      *(void *)(v0 + 168),
      type metadata accessor for OwnedBeaconRecord);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v26 = *(void *)(v0 + 160);
    uint64_t v27 = *(void *)(v0 + 168);
    uint64_t v28 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 240) = sub_10000A720(v28, (uint64_t)qword_100A2AC98);
    uint64_t v29 = sub_10001DC4C(v27, v26, type metadata accessor for OwnedBeaconRecord);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter(v30);
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void *)(v0 + 160);
    if (v32)
    {
      uint64_t v34 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = v35;
      *(_DWORD *)uint64_t v34 = 141558275;
      *(void *)(v34 + 4) = 1752392040LL;
      *(_WORD *)(v34 + 12) = 2081;
      uint64_t v36 = type metadata accessor for UUID(0LL);
      uint64_t v37 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
      *(void *)(v34 + 14) = sub_1003F11D4(v38, v39, &v44);
      swift_bridgeObjectRelease();
      sub_100018C68(v33, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Removing ghost beacon: %{private,mask.hash}s",  (uint8_t *)v34,  0x16u);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 160), type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v40 = *(void *)(v0 + 168);
    uint64_t v41 = *(void *)(v0 + 128);
    uint64_t v42 = swift_task_alloc(32LL);
    *(void *)(v0 + 248) = v42;
    *(void *)(v42 + swift_weakDestroy(v0 + 16) = v41;
    *(void *)(v42 + swift_unknownObjectUnownedDestroy(v0 + 24) = v40;
    uint64_t v43 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 256) = v43;
    *uint64_t v43 = v0;
    v43[1] = sub_10052E320;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( v43,  0LL,  0LL,  0xD000000000000014LL,  0x8000000100867320LL,  sub_100565FB4,  v42,  (char *)&type metadata for () + 8);
  }

uint64_t sub_10052ED98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  sub_10001DC4C(a3, (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v21, v4);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (v15 + 40) & ~v15;
  uint64_t v17 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v18 = (v10 + v17 + v16) & ~v17;
  uint64_t v19 = (char *)swift_allocObject(&unk_100961228, v18 + v6, v15 | v17 | 7);
  *((void *)v19 + 2) = 0LL;
  *((void *)v19 + 3) = 0LL;
  *((void *)v19 + 4) = v22;
  sub_10002218C( (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (uint64_t)&v19[v16],  type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v19[v18], v7, v4);
  swift_retain();
  sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009B2848, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_10052EF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a5;
  v6[5] = a6;
  uint64_t v6[2] = a1;
  v6[3] = a4;
  uint64_t v7 = sub_100004AEC(&qword_1009AF860);
  void v6[6] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[7] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v6[8] = v9;
  void v6[9] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  v6[10] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v6[11] = v11;
  v6[12] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10052EFF4, 0LL, 0LL);
}

uint64_t sub_10052EFF4()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v8 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v9 = v0[3];
  sub_10001DC4C(v0[4], v1, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v8, v7);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = (v10 + 24) & ~v10;
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = (v2 + v12 + v11) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_100961250, v13 + v6, v10 | v12 | 7);
  v0[13] = v14;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v9;
  sub_10002218C(v1, v14 + v11, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v14 + v13, v3, v7);
  uint64_t v15 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc(v15);
  v0[14] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_100482194;
  return unsafeBlocking<A>(_:)(v0[2], sub_100566674, v14, (char *)&type metadata for () + 8);
}

uint64_t sub_10052F128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v74 = a2;
  uint64_t v72 = a1;
  uint64_t v68 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v66 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v67 = v4;
  uint64_t v69 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v63 - v9;
  uint64_t v11 = sub_100004AEC(&qword_1009AF860);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v63 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v17((char *)&v63 - v15, a3, v11);
  dispatch_group_t v73 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v17(v73, (uint64_t)v16, v11);
  uint64_t v18 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  uint64_t v65 = swift_allocObject(&unk_100961278, v19 + v13, v18 | 7);
  uint64_t v70 = v12;
  uint64_t v71 = v11;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v65 + v19, v16, v11);
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v22 = qword_100A2B018;
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
  __int128 v63 = xmmword_1007E67D0;
  *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v25 = v74 + *(int *)(v68 + 20);
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v27 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v68 = v25;
  uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
  uint64_t v30 = v29;
  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = sub_1000226F4();
  *(void *)(v24 + 32) = v28;
  *(void *)(v24 + 40) = v30;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Unpair owned beacon: %@", 23LL, 2LL, v24);
  uint64_t v31 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v31);
  uint64_t v32 = v64;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))( v8,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v5);
  uint64_t v33 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v76, v5, v33);
  dispatch thunk of RawRepresentable.rawValue.getter(&v75, v5, v33);
  uint64_t v35 = v75;
  uint64_t v34 = v76;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v32 + 8);
  v36(v8, v5);
  uint64_t v37 = ((uint64_t (*)(char *, uint64_t))v36)(v10, v5);
  uint64_t v38 = v71;
  if (v34 == v35)
  {
    uint64_t v39 = static os_log_type_t.default.getter(v37);
    os_log(_:dso:log:_:_:)( v39,  &_mh_execute_header,  qword_100A2B018,  "unpair call failed because in device is in beforeFirstUnlock state",  66LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v40 = sub_1000220F0();
    uint64_t v41 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v40, 0LL, 0LL);
    _BYTE *v42 = 0;
    uint64_t v76 = v41;
    CheckedContinuation.resume(throwing:)(&v76, v38);
  }

  uint64_t v43 = dispatch_group_create();
  dispatch_group_enter(v43);
  uint64_t v44 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v45 = *(void *)(v26 - 8);
  uint64_t v46 = *(unsigned __int8 *)(v45 + 80);
  uint64_t v47 = (v46 + 32) & ~v46;
  uint64_t v48 = swift_allocObject(v44, v47 + *(void *)(v45 + 72), v46 | 7);
  *(_OWORD *)(v48 + swift_weakDestroy(v0 + 16) = v63;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v48 + v47, v68, v26);
  uint64_t v49 = swift_allocObject(&unk_1009612A0, 24LL, 7LL);
  *(void *)(v49 + swift_weakDestroy(v0 + 16) = v43;
  unint64_t v50 = v43;
  uint64_t v51 = v72;
  sub_10047B904(v48, (uint64_t)sub_10014F0B8, v49);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  uint64_t v52 = v74;
  uint64_t v53 = v69;
  sub_10001DC4C(v74, v69, type metadata accessor for OwnedBeaconRecord);
  uint64_t v54 = *(unsigned __int8 *)(v66 + 80);
  uint64_t v55 = (v54 + 16) & ~v54;
  unint64_t v56 = (v67 + v55 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v57 = (v56 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v58 = swift_allocObject(&unk_1009612C8, v57 + 10, v54 | 7);
  sub_10002218C(v53, v58 + v55, type metadata accessor for OwnedBeaconRecord);
  uint64_t v59 = (uint64_t (**)(uint64_t))(v58 + v56);
  uint64_t v60 = v65;
  void *v59 = sub_1005666E8;
  v59[1] = (uint64_t (*)(uint64_t))v60;
  unint64_t v61 = v58 + v57;
  *(void *)unint64_t v61 = v51;
  *(_WORD *)(v61 + 8) = 257;
  swift_retain();
  swift_retain();
  sub_10013E898(v52, (void (*)(void))sub_10014F0C8, v58);
  swift_release();
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v73, v38);
}

void sub_10052F65C(uint64_t a1, dispatch_group_s *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v64 = a3;
  dispatch_group_t v66 = a2;
  uint64_t v6 = sub_100004AEC(&qword_1009A4780);
  __chkstk_darwin(v6);
  __int128 v63 = &v57[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v65 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v65 - 8);
  uint64_t v9 = __chkstk_darwin(v65);
  uint64_t v11 = &v57[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v9);
  uint64_t v13 = &v57[-v12];
  uint64_t v14 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v61 = *(void *)(v14 - 8);
  uint64_t v62 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = &v57[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v15);
  uint64_t v19 = &v57[-v18];
  uint64_t v20 = sub_100004AEC(&qword_1009B2858);
  __chkstk_darwin(v20);
  uint64_t v22 = (uint64_t *)&v57[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = swift_projectBox(a4);
  sub_10001581C(a1, (uint64_t)v22, &qword_1009B2858);
  if (swift_getEnumCaseMultiPayload(v22, v20) == 1)
  {
    uint64_t v24 = *v22;
    if (qword_10099BA30 != -1) {
      swift_once(&qword_10099BA30, sub_100795FD8);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_10000A720(v25, (uint64_t)qword_100A2B7D8);
    uint64_t v26 = v65;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, v64, v65);
    swift_errorRetain(v24);
    uint64_t v27 = swift_errorRetain(v24);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v64 = v8;
      uint64_t v31 = v30;
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      v67[0] = v32;
      *(_DWORD *)uint64_t v31 = 141558531;
      uint64_t v68 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2081;
      uint64_t v33 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v26, v33);
      uint64_t v68 = sub_1003F11D4(v34, v35, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v31 + 14, v31 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v64 + 8))(v11, v26);
      *(_WORD *)(v31 + 22) = 2080;
      uint64_t v68 = v24;
      swift_errorRetain(v24);
      uint64_t v36 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v37 = String.init<A>(describing:)(&v68, v36);
      uint64_t v68 = sub_1003F11D4(v37, v38, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v24);
      swift_errorRelease(v24);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Unable to save new OwnedDeviceKeyRecord for %{private,mask.hash}s, error %s.",  (uint8_t *)v31,  0x20u);
      swift_arrayDestroy(v32, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);

      swift_errorRelease(v24);
    }

    else
    {
      swift_errorRelease(v24);
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v26);
      swift_errorRelease(v24);
      swift_errorRelease(v24);
    }
  }

  else
  {
    sub_10002218C((uint64_t)v22, (uint64_t)v19, type metadata accessor for OwnedDeviceKeyRecord);
    if (qword_10099BA30 != -1) {
      swift_once(&qword_10099BA30, sub_100795FD8);
    }
    uint64_t v39 = type metadata accessor for Logger(0LL);
    sub_10000A720(v39, (uint64_t)qword_100A2B7D8);
    uint64_t v40 = v65;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v13, v64, v65);
    uint64_t v41 = sub_10001DC4C((uint64_t)v19, (uint64_t)v17, type metadata accessor for OwnedDeviceKeyRecord);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.default.getter(v42);
    int v44 = v43;
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v45 = swift_slowAlloc(42LL, -1LL);
      uint64_t v60 = v19;
      uint64_t v46 = v45;
      uint64_t v59 = swift_slowAlloc(64LL, -1LL);
      v67[0] = v59;
      *(_DWORD *)uint64_t v46 = 141558787;
      uint64_t v68 = 1752392040LL;
      uint64_t v64 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v46 + 4, v46 + 12);
      *(_WORD *)(v46 + 12) = 2081;
      uint64_t v47 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      int v58 = v44;
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v40, v47);
      uint64_t v68 = sub_1003F11D4(v48, v49, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v46 + 14, v46 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v40);
      *(_WORD *)(v46 + 22) = 2160;
      uint64_t v68 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v46 + 24, v46 + 32);
      *(_WORD *)(v46 + 32) = 2081;
      uint64_t v50 = v62;
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v40, v47);
      uint64_t v68 = sub_1003F11D4(v51, v52, v67);
      uint64_t v23 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v46 + 34, v46 + 42);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v17, type metadata accessor for OwnedDeviceKeyRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v42,  (os_log_type_t)v58,  "Successfully saved new OwnedDeviceKeyRecord for: %{private,mask.hash}s uuid: %{private,mask.hash}s.",  (uint8_t *)v46,  0x2Au);
      uint64_t v53 = v59;
      swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      uint64_t v54 = v46;
      uint64_t v19 = v60;
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v40);
      sub_100018C68((uint64_t)v17, type metadata accessor for OwnedDeviceKeyRecord);

      uint64_t v50 = v62;
    }

    uint64_t v55 = (uint64_t)v19;
    unint64_t v56 = v63;
    sub_10002218C(v55, (uint64_t)v63, type metadata accessor for OwnedDeviceKeyRecord);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v61 + 56))(v56, 0LL, 1LL, v50);
    swift_beginAccess(v23, v67, 1LL, 0LL);
    sub_1000D4D50((uint64_t)v56, v23, &qword_1009A4780);
  }

  dispatch_group_leave(v66);
}

uint64_t sub_10052FD68@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t (*a5)(void)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t (*a13)(void), uint64_t *a14)
{
  uint64_t v111 = a6;
  uint64_t v112 = a7;
  uint64_t v119 = a5;
  uint64_t v120 = a8;
  int64_t v113 = a4;
  uint64_t v114 = a1;
  uint64_t v115 = a3;
  uint64_t v117 = a2;
  uint64_t v14 = type metadata accessor for CryptoError(0LL);
  uint64_t v109 = *(void *)(v14 - 8);
  uint64_t v110 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v106 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v107 = (char *)&v101 - v18;
  __chkstk_darwin(v17);
  uint64_t v108 = (char *)&v101 - v19;
  uint64_t v118 = type metadata accessor for URL(0LL);
  unint64_t v116 = *(void *)(v118 - 8);
  uint64_t v20 = __chkstk_darwin(v118);
  uint64_t v22 = (char *)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v101 - v23;
  uint64_t v25 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  os_log_type_t v29 = (char *)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)&v101 - v31;
  static SystemInfo.lockState.getter(v30);
  (*(void (**)(char *, void, uint64_t))(v26 + 104))( v29,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v25);
  uint64_t v33 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v25, v33);
  dispatch thunk of RawRepresentable.rawValue.getter(&v128, v25, v33);
  uint64_t v34 = aBlock;
  unint64_t v35 = (void **)v128;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v26 + 8);
  v36(v29, v25);
  uint64_t v37 = ((uint64_t (*)(char *, uint64_t))v36)(v32, v25);
  if (v34 == v35)
  {
    uint64_t v38 = static os_log_type_t.default.getter(v37);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v38,  &_mh_execute_header,  qword_100A2B018,  "record(for uuid:) call failed because in device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v39 = v119(0LL);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))( v120,  1LL,  1LL,  v39);
  }

  uint64_t v41 = objc_autoreleasePoolPush();
  uint64_t v42 = UUID.uuidString.getter(v41);
  URL.appendingPathComponent(_:)(v42, v43);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
  int v44 = *(void (**)(char *, uint64_t))(v116 + 8);
  uint64_t v45 = v118;
  v44(v22, v118);
  objc_autoreleasePoolPop(v41);
  uint64_t v46 = v121;
  uint64_t v47 = Data.init(contentsOf:options:)(v24, 0LL);
  if (v46)
  {
    swift_errorRelease(v46);
    v44(v24, v45);
    uint64_t v49 = v119(0LL);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))( v120,  1LL,  1LL,  v49);
  }

  unint64_t v116 = v48;
  uint64_t v117 = v47;
  unint64_t v104 = v44;
  uint64_t v50 = static os_log_type_t.debug.getter(v47);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v51 = qword_100A2B018;
  uint64_t v102 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v52 = swift_allocObject(v102, 72LL, 7LL);
  __int128 v101 = xmmword_1007E67D0;
  *(_OWORD *)(v52 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v53 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  unint64_t v105 = v24;
  uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v45, v53);
  uint64_t v56 = v55;
  *(void *)(v52 + 56) = &type metadata for String;
  unint64_t v103 = sub_1000226F4();
  *(void *)(v52 + 64) = v103;
  *(void *)(v52 + 32) = v54;
  *(void *)(v52 + 40) = v56;
  os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v51, "Reading from LocalStorageBacked file: %@", 40LL, 2LL, v52);
  swift_bridgeObjectRelease();
  unint64_t v57 = v114;
  int v58 = v114 + 9;
  swift_beginAccess(v114 + 9, &aBlock, 33LL, 0LL);
  uint64_t v59 = v113;
  swift_bridgeObjectRetain(v113);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v57[9]);
  uint64_t v128 = v57[9];
  uint64_t v61 = v128;
  v57[9] = 0x8000000000000000LL;
  unint64_t v63 = sub_10030CF14(v115, (uint64_t)v59);
  uint64_t v64 = *(void *)(v61 + 16);
  BOOL v65 = (v62 & 1) == 0;
  uint64_t v66 = v64 + v65;
  if (__OFADD__(v64, v65))
  {
    __break(1u);
    goto LABEL_34;
  }

  LOBYTE(v22) = v62;
  if (*(void *)(v61 + 24) >= v66)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_37;
    }
    while (1)
    {
LABEL_14:
      *int v58 = v61;
      swift_bridgeObjectRelease();
      uint64_t v69 = (void *)*v58;
      swift_bridgeObjectRetain(*v58);
      if ((v22 & 1) == 0)
      {
        sub_10006047C(v63, v115, (uint64_t)v59, 0LL, v69);
        swift_bridgeObjectRetain(v59);
      }

      uint64_t v70 = v69[7];
      uint64_t v71 = *(void *)(v70 + 8 * v63);
      BOOL v72 = __OFADD__(v71, 1LL);
      uint64_t v73 = v71 + 1;
      if (v72) {
        break;
      }
      *(void *)(v70 + 8 * v63) = v73;
      swift_endAccess(&aBlock);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v74 = v57[8];
      BOOL v72 = __OFADD__(v74, 1LL);
      uint64_t v75 = v74 + 1;
      if (v72) {
        goto LABEL_35;
      }
      LOBYTE(v22) = a10;
      v57[8] = v75;
      if (__ROR8__(0x1CAC083126E978D5LL * v75 + 0x10624DD2F1A9FB8LL, 3) < 0x4189374BC6A7EFuLL)
      {
        uint64_t v76 = sub_100576484((uint64_t)v57);
        unint64_t v78 = v77;
        uint64_t v79 = swift_bridgeObjectRetain(v57[9]);
        uint64_t v80 = sub_1000F084C(v79);
        char v82 = v81;
        swift_bridgeObjectRelease();
        if ((v82 & 1) != 0 || v80 < 10001)
        {
          if (qword_10099B528 != -1) {
            swift_once(&qword_10099B528, sub_1004F3B00);
          }
          uint64_t v87 = type metadata accessor for Logger(0LL);
          sub_10000A720(v87, (uint64_t)qword_100A2AC98);
          uint64_t v88 = swift_bridgeObjectRetain(v78);
          int v85 = (os_log_s *)Logger.logObject.getter(v88);
          os_log_type_t v86 = static os_log_type_t.info.getter(v85);
        }

        else
        {
          if (qword_10099B528 != -1) {
            swift_once(&qword_10099B528, sub_1004F3B00);
          }
          uint64_t v83 = type metadata accessor for Logger(0LL);
          sub_10000A720(v83, (uint64_t)qword_100A2AC98);
          uint64_t v84 = swift_bridgeObjectRetain(v78);
          int v85 = (os_log_s *)Logger.logObject.getter(v84);
          os_log_type_t v86 = static os_log_type_t.error.getter(v85);
        }

        os_log_type_t v89 = v86;
        if (os_log_type_enabled(v85, v86))
        {
          int64_t v90 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v91 = (void **)swift_slowAlloc(32LL, -1LL);
          *(_DWORD *)int64_t v90 = 136446210;
          uint64_t v121 = v90 + 4;
          uint64_t aBlock = v91;
          swift_bridgeObjectRetain(v78);
          uint64_t v128 = sub_1003F11D4(v76, v78, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v121, v90 + 12);
          swift_bridgeObjectRelease_n(v78, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v85, v89, "readStatistics:\n%{public}s", v90, 0xCu);
          swift_arrayDestroy(v91, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v91, -1LL, -1LL);
          swift_slowDealloc(v90, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v78, 2LL);
        }

        unint64_t v57 = v114;
      }

      unint64_t v63 = v57[3];
      uint64_t v92 = *(dispatch_queue_s **)(v63 + 72);
      int v58 = (uint64_t *)swift_allocObject(v111, 32LL, 7LL);
      v58[2] = v112;
      _OWORD v58[3] = v63;
      uint64_t v126 = a9;
      uint64_t v127 = v58;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v123 = 1107296256LL;
      uint64_t v124 = sub_100025BD4;
      uint64_t v125 = a10;
      uint64_t v59 = _Block_copy(&aBlock);
      uint64_t v93 = v127;
      swift_retain();
      swift_retain();
      swift_release(v93);
      dispatch_sync(v92, v59);
      _Block_release(v59);
      LOBYTE(v92) = swift_isEscapingClosureAtFileLocation(v58, "", 98LL, 71LL, 26LL, 1LL);
      swift_release(v63);
      swift_release(v58);
      if ((v92 & 1) == 0)
      {
        uint64_t v94 = __chkstk_darwin(a11);
        unint64_t v96 = v116;
        uint64_t v95 = v117;
        *((void *)&v101 - 4) = v63;
        *((void *)&v101 - 3) = v95;
        *((void *)&v101 - 2) = v96;
        OS_dispatch_queue.sync<A>(execute:)(v94, &v101 - 3, &type metadata for Data);
        unint64_t v97 = v120;
        uint64_t v98 = (uint64_t)aBlock;
        unint64_t v99 = v123;
        unint64_t v100 = objc_autoreleasePoolPush();
        sub_1005424F8(v98, v99, a12, a13, a14, v97);
        objc_autoreleasePoolPop(v100);
        v104(v105, v118);
        sub_100016F9C(v98, v99);
        return sub_100016F9C(v117, v116);
      }

uint64_t sub_100530A7C@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  return sub_10052FD68( a1,  a2,  a3,  a4,  type metadata accessor for BeaconProductInfoRecord,  (uint64_t)&unk_100961160,  (uint64_t)sub_1005651DC,  a5,  (uint64_t)sub_100154688,  (uint64_t)&unk_100961178,  (uint64_t)sub_100571C38,  &qword_1009AA870,  (uint64_t (*)(void))sub_100565DF0,  &qword_1009B2800);
}

uint64_t sub_100530AEC@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  return sub_10052FD68( a1,  a2,  a3,  a4,  type metadata accessor for SafeLocation,  (uint64_t)&unk_100962380,  (uint64_t)sub_1005651DC,  a5,  (uint64_t)sub_100154688,  (uint64_t)&unk_100962398,  (uint64_t)sub_100571C38,  (uint64_t *)&unk_1009AF740,  (uint64_t (*)(void))sub_10056AD58,  &qword_1009B2A98);
}

uint64_t sub_100530B5C@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  return sub_10052FD68( a1,  a2,  a3,  a4,  type metadata accessor for SecureLocationsCachedSharedKey,  (uint64_t)&unk_1009621A0,  (uint64_t)sub_1005651DC,  a5,  (uint64_t)sub_100154688,  (uint64_t)&unk_1009621B8,  (uint64_t)sub_100571C38,  &qword_1009A7128,  (uint64_t (*)(void))sub_10056A728,  &qword_1009B29F8);
}

uint64_t sub_100530BCC@<X0>( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  return sub_10052FD68( a1,  a2,  a3,  a4,  type metadata accessor for SecureLocationsCachedPayload,  (uint64_t)&unk_100962100,  (uint64_t)sub_1005651DC,  a5,  (uint64_t)sub_100154688,  (uint64_t)&unk_100962118,  (uint64_t)sub_100571C38,  &qword_1009A7110,  (uint64_t (*)(void))sub_10056A55C,  &qword_1009B29B0);
}

uint64_t sub_100530C3C@<X0>( void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  uint64_t v133 = a6;
  uint64_t v126 = a5;
  uint64_t v128 = a1;
  uint64_t v129 = a4;
  unint64_t v131 = a2;
  uint64_t v132 = a3;
  uint64_t v125 = type metadata accessor for CryptoError(0LL);
  uint64_t v123 = *(void *)(v125 - 8);
  uint64_t v6 = __chkstk_darwin(v125);
  uint64_t v122 = (char *)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v127 = (char *)&v119 - v9;
  __chkstk_darwin(v8);
  uint64_t v124 = (char *)&v119 - v10;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v130 = *(char **)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v119 - v15;
  uint64_t v17 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v119 - v23;
  static SystemInfo.lockState.getter(v22);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))( v21,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v17);
  uint64_t v25 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v17, v25);
  dispatch thunk of RawRepresentable.rawValue.getter(&v141, v17, v25);
  uint64_t v26 = aBlock;
  uint64_t v27 = (void **)v141;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v21, v17);
  uint64_t v29 = ((uint64_t (*)(char *, uint64_t))v28)(v24, v17);
  if (v26 == v27)
  {
    uint64_t v30 = static os_log_type_t.default.getter(v29);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t result = os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_100A2B018,  "record(for uuid:) call failed because in device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
    goto LABEL_7;
  }

  uint64_t v32 = objc_autoreleasePoolPush();
  uint64_t v33 = UUID.uuidString.getter(v32);
  URL.appendingPathComponent(_:)(v33, v34);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
  unint64_t v35 = (void (*)(char *, uint64_t))*((void *)v130 + 1);
  v35(v14, v11);
  objc_autoreleasePoolPop(v32);
  uint64_t v36 = v134;
  uint64_t v37 = Data.init(contentsOf:options:)(v16, 0LL);
  uint64_t v39 = v11;
  if (v36)
  {
    swift_errorRelease(v36);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v16, v11);
    goto LABEL_7;
  }

  uint64_t v134 = 0LL;
  unint64_t v131 = v38;
  uint64_t v132 = v37;
  uint64_t v41 = static os_log_type_t.debug.getter(v37);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v42 = qword_100A2B018;
  uint64_t v120 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v43 = swift_allocObject(v120, 72LL, 7LL);
  __int128 v119 = xmmword_1007E67D0;
  *(_OWORD *)(v43 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v44 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v130 = v16;
  uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v11, v44);
  uint64_t v47 = v46;
  *(void *)(v43 + 56) = &type metadata for String;
  unint64_t v121 = sub_1000226F4();
  *(void *)(v43 + 64) = v121;
  *(void *)(v43 + 32) = v45;
  *(void *)(v43 + 40) = v47;
  os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "Reading from LocalStorageBacked file: %@", 40LL, 2LL, v43);
  swift_bridgeObjectRelease();
  unint64_t v48 = v128;
  uint64_t v49 = v128 + 9;
  swift_beginAccess(v128 + 9, &aBlock, 33LL, 0LL);
  uint64_t v50 = v126;
  swift_bridgeObjectRetain(v126);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v48[9]);
  uint64_t v141 = v48[9];
  uint64_t v52 = v141;
  v48[9] = 0x8000000000000000LL;
  unint64_t v54 = sub_10030CF14(v129, (uint64_t)v50);
  uint64_t v55 = *(void *)(v52 + 16);
  BOOL v56 = (v53 & 1) == 0;
  uint64_t v57 = v55 + v56;
  if (__OFADD__(v55, v56))
  {
    __break(1u);
    goto LABEL_41;
  }

  LOBYTE(v11) = v53;
  if (*(void *)(v52 + 24) >= v57)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_44;
    }
    while (1)
    {
LABEL_15:
      *uint64_t v49 = v52;
      swift_bridgeObjectRelease();
      uint64_t v60 = (void *)*v49;
      swift_bridgeObjectRetain(*v49);
      if ((v11 & 1) == 0)
      {
        sub_10006047C(v54, v129, (uint64_t)v50, 0LL, v60);
        swift_bridgeObjectRetain(v50);
      }

      uint64_t v61 = v60[7];
      uint64_t v62 = *(void *)(v61 + 8 * v54);
      BOOL v63 = __OFADD__(v62, 1LL);
      uint64_t v64 = v62 + 1;
      if (v63) {
        break;
      }
      *(void *)(v61 + 8 * v54) = v64;
      swift_endAccess(&aBlock);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v65 = v48[8];
      BOOL v63 = __OFADD__(v65, 1LL);
      uint64_t v66 = v65 + 1;
      uint64_t v11 = (uint64_t)v127;
      if (v63) {
        goto LABEL_42;
      }
      v48[8] = v66;
      if (__ROR8__(0x1CAC083126E978D5LL * v66 + 0x10624DD2F1A9FB8LL, 3) < 0x4189374BC6A7EFuLL)
      {
        uint64_t v67 = sub_100576484((uint64_t)v48);
        unint64_t v69 = v68;
        swift_bridgeObjectRetain(v48[9]);
        uint64_t v71 = sub_1000F084C(v70);
        char v73 = v72;
        swift_bridgeObjectRelease();
        if ((v73 & 1) != 0 || v71 < 10001)
        {
          if (qword_10099B528 != -1) {
            swift_once(&qword_10099B528, sub_1004F3B00);
          }
          uint64_t v78 = type metadata accessor for Logger(0LL);
          sub_10000A720(v78, (uint64_t)qword_100A2AC98);
          swift_bridgeObjectRetain(v69);
          uint64_t v76 = (os_log_s *)Logger.logObject.getter(v79);
          os_log_type_t v77 = static os_log_type_t.info.getter(v76);
        }

        else
        {
          if (qword_10099B528 != -1) {
            swift_once(&qword_10099B528, sub_1004F3B00);
          }
          uint64_t v74 = type metadata accessor for Logger(0LL);
          sub_10000A720(v74, (uint64_t)qword_100A2AC98);
          swift_bridgeObjectRetain(v69);
          uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
          os_log_type_t v77 = static os_log_type_t.error.getter(v76);
        }

        os_log_type_t v80 = v77;
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v129 = v67;
          char v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          char v82 = (void **)swift_slowAlloc(32LL, -1LL);
          uint64_t aBlock = v82;
          *(_DWORD *)char v81 = 136446210;
          swift_bridgeObjectRetain(v69);
          uint64_t v141 = sub_1003F11D4(v129, v69, (uint64_t *)&aBlock);
          unint64_t v48 = v128;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v81 + 4, v81 + 12);
          swift_bridgeObjectRelease_n(v69, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v76, v80, "readStatistics:\n%{public}s", v81, 0xCu);
          swift_arrayDestroy(v82, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v83 = v82;
          uint64_t v11 = (uint64_t)v127;
          swift_slowDealloc(v83, -1LL, -1LL);
          swift_slowDealloc(v81, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v69, 2LL);
        }
      }

      unint64_t v54 = v48[3];
      uint64_t v84 = *(dispatch_queue_s **)(v54 + 72);
      uint64_t v49 = (uint64_t *)swift_allocObject(&unk_100962150, 32LL, 7LL);
      v49[2] = (uint64_t)sub_1005651DC;
      v49[3] = v54;
      uint64_t v139 = sub_100154688;
      unint64_t v140 = v49;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v136 = 1107296256LL;
      unint64_t v137 = sub_100025BD4;
      uint64_t v138 = &unk_100962168;
      uint64_t v50 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v84, v50);
      _Block_release(v50);
      LOBYTE(v84) = swift_isEscapingClosureAtFileLocation(v49, "", 98LL, 71LL, 26LL, 1LL);
      swift_release();
      uint64_t v85 = swift_release();
      if ((v84 & 1) == 0)
      {
        __chkstk_darwin(v85);
        uint64_t v86 = v132;
        *((void *)&v119 - 4) = v54;
        *((void *)&v119 - 3) = v86;
        unint64_t v87 = v131;
        *((void *)&v119 - 2) = v131;
        uint64_t v88 = v134;
        OS_dispatch_queue.sync<A>(execute:)(sub_100571C38, &v119 - 3, &type metadata for Data);
        if (!v88)
        {
          uint64_t v107 = (uint64_t)aBlock;
          unint64_t v108 = v136;
          uint64_t v109 = objc_autoreleasePoolPush();
          sub_1005421A0(v107, v108, v133);
          uint64_t v110 = v130;
          objc_autoreleasePoolPop(v109);
          v35(v110, v39);
          sub_100016F9C(v107, v108);
          return sub_100016F9C(v132, v87);
        }

        uint64_t v129 = v39;
        uint64_t v89 = v11;
        uint64_t aBlock = v88;
        swift_errorRetain(v88);
        uint64_t v90 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        uint64_t v91 = v124;
        uint64_t v92 = v125;
        if ((swift_dynamicCast(v124, &aBlock, v90, v125, 0LL) & 1) != 0)
        {
          uint64_t v134 = 0LL;
          swift_errorRelease(v88);
          uint64_t v93 = v123;
          uint64_t v94 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v123 + 32))(v11, v91, v92);
          uint64_t v95 = static os_log_type_t.error.getter(v94);
          uint64_t v96 = qword_100A2B018;
          uint64_t v97 = swift_allocObject(v120, 72LL, 7LL);
          *(_OWORD *)(v97 + swift_weakDestroy(v0 + 16) = v119;
          uint64_t v98 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 16);
          unint64_t v99 = v122;
          v98(v122, v89, v92);
          uint64_t v100 = String.init<A>(describing:)(v99, v92);
          unint64_t v101 = v121;
          *(void *)(v97 + 56) = &type metadata for String;
          *(void *)(v97 + 64) = v101;
          *(void *)(v97 + 32) = v100;
          *(void *)(v97 + 40) = v102;
          os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Error decrypting record: %@", 27LL, 2LL, v97);
          swift_bridgeObjectRelease();
          unint64_t v103 = v130;
          if (v128[4])
          {
            uint64_t v104 = sub_100007864( (unint64_t *)&qword_1009A1778,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
            uint64_t v105 = swift_allocError(v92, v104, 0LL, 0LL);
            v98(v106, v89, v92);
            swift_retain();
            sub_10068F294(v105);
            sub_100016F9C(v132, v131);
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v89, v92);
            v35(v103, v129);
            swift_errorRelease(v105);
          }

          else
          {
            sub_100016F9C(v132, v131);
            (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v89, v92);
            v35(v103, v129);
          }

          uint64_t v118 = v133;
          v133[10] = 0LL;
          v118[3] = 0u;
          v118[4] = 0u;
          v118[1] = 0u;
          v118[2] = 0u;
          _OWORD *v118 = 0u;
          return swift_errorRelease(aBlock);
        }

        uint64_t v111 = swift_errorRelease(aBlock);
        uint64_t v112 = static os_log_type_t.error.getter(v111);
        uint64_t v113 = qword_100A2B018;
        uint64_t v114 = swift_allocObject(v120, 72LL, 7LL);
        *(_OWORD *)(v114 + swift_weakDestroy(v0 + 16) = v119;
        uint64_t aBlock = v88;
        swift_errorRetain(v88);
        uint64_t v115 = String.init<A>(describing:)(&aBlock, v90);
        unint64_t v116 = v121;
        *(void *)(v114 + 56) = &type metadata for String;
        *(void *)(v114 + 64) = v116;
        *(void *)(v114 + 32) = v115;
        *(void *)(v114 + 40) = v117;
        os_log(_:dso:log:_:_:)(v112, &_mh_execute_header, v113, "Error reading record: %@", 24LL, 2LL, v114);
        sub_100016F9C(v132, v131);
        swift_bridgeObjectRelease();
        swift_errorRelease(v88);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v130, v129);
LABEL_7:
        uint64_t v40 = v133;
        v133[10] = 0LL;
        v40[3] = 0u;
        v40[4] = 0u;
        v40[1] = 0u;
        void v40[2] = 0u;
        *uint64_t v40 = 0u;
        return result;
      }

uint64_t sub_10053187C@<X0>( void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v100 = a5;
  uint64_t v99 = a4;
  uint64_t v104 = a3;
  unint64_t v103 = a2;
  unint64_t v101 = a1;
  uint64_t v105 = a6;
  uint64_t v98 = type metadata accessor for CryptoError(0LL);
  uint64_t v96 = *(void *)(v98 - 8);
  uint64_t v6 = __chkstk_darwin(v98);
  uint64_t v94 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v95 = (char *)&v89 - v9;
  __chkstk_darwin(v8);
  uint64_t v97 = (char *)&v89 - v10;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v102 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v89 - v15;
  uint64_t v17 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v89 - v23;
  static SystemInfo.lockState.getter(v22);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))( v21,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v17);
  uint64_t v25 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v17, v25);
  dispatch thunk of RawRepresentable.rawValue.getter(&v112, v17, v25);
  uint64_t v26 = aBlock;
  uint64_t v27 = v112;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v21, v17);
  uint64_t v29 = ((uint64_t (*)(char *, uint64_t))v28)(v24, v17);
  if (v26 == v27)
  {
    uint64_t v30 = static os_log_type_t.default.getter(v29);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_100A2B018,  "record(for uuid:) call failed because in device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100570148(&aBlock);
    return sub_100015750((uint64_t)&aBlock, (uint64_t)v105, &qword_1009A70F0);
  }

  uint64_t v32 = objc_autoreleasePoolPush();
  uint64_t v33 = UUID.uuidString.getter(v32);
  URL.appendingPathComponent(_:)(v33, v34);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
  unint64_t v35 = *(void (**)(char *, uint64_t))(v102 + 8);
  v35(v14, v11);
  objc_autoreleasePoolPop(v32);
  uint64_t v36 = v106;
  uint64_t v37 = Data.init(contentsOf:options:)(v16, 0LL);
  if (v36)
  {
    swift_errorRelease(v36);
    v35(v16, v11);
    sub_100570148(&aBlock);
    return sub_100015750((uint64_t)&aBlock, (uint64_t)v105, &qword_1009A70F0);
  }

  uint64_t v104 = v37;
  unint64_t v103 = v38;
  uint64_t v92 = v35;
  uint64_t v39 = static os_log_type_t.debug.getter(v37);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v40 = qword_100A2B018;
  uint64_t v90 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v41 = swift_allocObject(v90, 72LL, 7LL);
  __int128 v89 = xmmword_1007E67D0;
  *(_OWORD *)(v41 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v42 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v93 = v16;
  uint64_t v102 = v11;
  uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v11, v42);
  uint64_t v45 = v44;
  *(void *)(v41 + 56) = &type metadata for String;
  unint64_t v91 = sub_1000226F4();
  *(void *)(v41 + 64) = v91;
  *(void *)(v41 + 32) = v43;
  *(void *)(v41 + 40) = v45;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Reading from LocalStorageBacked file: %@", 40LL, 2LL, v41);
  swift_bridgeObjectRelease();
  uint64_t v46 = v101;
  uint64_t v47 = v101 + 9;
  swift_beginAccess(v101 + 9, &aBlock, 33LL, 0LL);
  uint64_t isEscapingClosureAtFileLocation = v100;
  swift_bridgeObjectRetain(v100);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46[9]);
  uint64_t v112 = v46[9];
  uint64_t v50 = v112;
  v46[9] = 0x8000000000000000LL;
  uint64_t v51 = v99;
  unint64_t v53 = sub_10030CF14(v99, isEscapingClosureAtFileLocation);
  uint64_t v54 = *(void *)(v50 + 16);
  BOOL v55 = (v52 & 1) == 0;
  uint64_t v56 = v54 + v55;
  if (__OFADD__(v54, v55))
  {
    __break(1u);
    goto LABEL_33;
  }

  LOBYTE(v11) = v52;
  if (*(void *)(v50 + 24) >= v56)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_36;
    }
    while (1)
    {
LABEL_14:
      *uint64_t v47 = v50;
      swift_bridgeObjectRelease();
      char v59 = (void *)*v47;
      swift_bridgeObjectRetain(*v47);
      if ((v11 & 1) == 0)
      {
        sub_10006047C(v53, v51, isEscapingClosureAtFileLocation, 0LL, v59);
        swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
      }

      uint64_t v60 = v59[7];
      uint64_t v61 = *(void *)(v60 + 8 * v53);
      BOOL v62 = __OFADD__(v61, 1LL);
      uint64_t v63 = v61 + 1;
      if (v62) {
        break;
      }
      *(void *)(v60 + 8 * v53) = v63;
      swift_endAccess(&aBlock);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v64 = v46[8];
      BOOL v62 = __OFADD__(v64, 1LL);
      uint64_t v65 = v64 + 1;
      if (v62) {
        goto LABEL_34;
      }
      char v46[8] = v65;
      unint64_t v53 = v103;
      if (__ROR8__(0x1CAC083126E978D5LL * v65 + 0x10624DD2F1A9FB8LL, 3) < 0x4189374BC6A7EFuLL)
      {
        uint64_t v66 = sub_100576484((uint64_t)v46);
        unint64_t v68 = v67;
        swift_bridgeObjectRetain(v46[9]);
        uint64_t v70 = sub_1000F084C(v69);
        char v72 = v71;
        swift_bridgeObjectRelease();
        if ((v72 & 1) != 0 || v70 < 10001)
        {
          if (qword_10099B528 != -1) {
            swift_once(&qword_10099B528, sub_1004F3B00);
          }
          uint64_t v77 = type metadata accessor for Logger(0LL);
          sub_10000A720(v77, (uint64_t)qword_100A2AC98);
          swift_bridgeObjectRetain(v68);
          uint64_t v75 = (os_log_s *)Logger.logObject.getter(v78);
          os_log_type_t v76 = static os_log_type_t.info.getter(v75);
        }

        else
        {
          if (qword_10099B528 != -1) {
            swift_once(&qword_10099B528, sub_1004F3B00);
          }
          uint64_t v73 = type metadata accessor for Logger(0LL);
          sub_10000A720(v73, (uint64_t)qword_100A2AC98);
          swift_bridgeObjectRetain(v68);
          uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
          os_log_type_t v76 = static os_log_type_t.error.getter(v75);
        }

        os_log_type_t v79 = v76;
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v80 = swift_slowAlloc(12LL, -1LL);
          uint64_t v106 = v66;
          char v81 = (uint8_t *)v80;
          uint64_t v82 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 aBlock = v82;
          *(_DWORD *)char v81 = 136446210;
          LOBYTE(v11) = (_BYTE)v81 + 4;
          swift_bridgeObjectRetain(v68);
          uint64_t v112 = sub_1003F11D4(v106, v68, (uint64_t *)&aBlock);
          unint64_t v53 = v103;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v81 + 4, v81 + 12);
          swift_bridgeObjectRelease_n(v68, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v75, v79, "readStatistics:\n%{public}s", v81, 0xCu);
          swift_arrayDestroy(v82, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v82, -1LL, -1LL);
          swift_slowDealloc(v81, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v68, 2LL);
        }
      }

      uint64_t v51 = v46[3];
      uint64_t v83 = *(dispatch_queue_s **)(v51 + 72);
      uint64_t v84 = swift_allocObject(&unk_1009637D0, 32LL, 7LL);
      *(void *)(v84 + swift_weakDestroy(v0 + 16) = sub_1005651DC;
      *(void *)(v84 + swift_unknownObjectUnownedDestroy(v0 + 24) = v51;
      uint64_t v110 = sub_100154688;
      uint64_t v111 = v84;
      *(void *)&__int128 aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      unint64_t v108 = sub_100025BD4;
      uint64_t v109 = &unk_1009637E8;
      uint64_t v47 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v83, v47);
      _Block_release(v47);
      uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v84, "", 98LL, 71LL, 26LL, 1LL);
      swift_release();
      uint64_t v85 = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
        __chkstk_darwin(v85);
        uint64_t v86 = v104;
        *((void *)&v89 - 4) = v51;
        *((void *)&v89 - 3) = v86;
        *((void *)&v89 - 2) = v53;
        OS_dispatch_queue.sync<A>(execute:)(sub_100571C38, &v89 - 3, &type metadata for Data);
        __int128 v87 = aBlock;
        uint64_t v88 = objc_autoreleasePoolPush();
        sub_10054234C(v87, *((uint64_t *)&v87 + 1), v105);
        objc_autoreleasePoolPop(v88);
        v92(v93, v102);
        sub_100016F9C(v87, *((unint64_t *)&v87 + 1));
        return sub_100016F9C(v104, v53);
      }

uint64_t sub_100532650@<X0>( uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char *a5@<X8>)
{
  return sub_100532690( a1,  a2,  a3,  a4,  type metadata accessor for SecureLocationsCachedSharingKey,  &qword_1009B28E0,  (uint64_t (*)(void))sub_100569168,  a5,  &qword_1009B28F8);
}

uint64_t sub_100532690@<X0>( uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(void)@<X5>, uint64_t *a6@<X6>, uint64_t (*a7)(void)@<X7>, char *a8@<X8>, uint64_t *a9)
{
  uint64_t v100 = a6;
  unint64_t v101 = a7;
  unint64_t v109 = a2;
  uint64_t v110 = a5;
  uint64_t v111 = a8;
  uint64_t v104 = a4;
  uint64_t v105 = a1;
  uint64_t v106 = a3;
  uint64_t v103 = type metadata accessor for CryptoError(0LL);
  uint64_t v99 = *(void *)(v103 - 8);
  uint64_t v9 = __chkstk_darwin(v103);
  uint64_t v97 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v98 = (char *)&v92 - v12;
  __chkstk_darwin(v11);
  uint64_t v102 = (char *)&v92 - v13;
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v107 = *(void *)(v14 - 8);
  uint64_t v108 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v92 - v18;
  uint64_t v20 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v92 - v26;
  static SystemInfo.lockState.getter(v25);
  (*(void (**)(char *, void, uint64_t))(v21 + 104))( v24,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v20);
  uint64_t v28 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v113, v20, v28);
  dispatch thunk of RawRepresentable.rawValue.getter(&v114, v20, v28);
  uint64_t v29 = v113[0];
  uint64_t v30 = v114;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v21 + 8);
  v31(v24, v20);
  uint64_t v32 = ((uint64_t (*)(char *, uint64_t))v31)(v27, v20);
  if (v29 == v30)
  {
    uint64_t v33 = static os_log_type_t.default.getter(v32);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v33,  &_mh_execute_header,  qword_100A2B018,  "record(for uuid:) call failed because in device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v34 = v110(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))( v111,  1LL,  1LL,  v34);
  }

  uint64_t v36 = objc_autoreleasePoolPush();
  uint64_t v37 = UUID.uuidString.getter(v36);
  URL.appendingPathComponent(_:)(v37, v38);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
  uint64_t v39 = v108;
  uint64_t v40 = *(void (**)(char *, uint64_t))(v107 + 8);
  v40(v17, v108);
  objc_autoreleasePoolPop(v36);
  uint64_t v41 = v112;
  uint64_t v42 = Data.init(contentsOf:options:)(v19, 0LL);
  if (v41)
  {
    swift_errorRelease(v41);
    v40(v19, v39);
    uint64_t v44 = v110(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))( v111,  1LL,  1LL,  v44);
  }

  uint64_t v107 = v42;
  unint64_t v109 = v43;
  uint64_t v95 = v40;
  uint64_t v45 = static os_log_type_t.debug.getter();
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v46 = qword_100A2B018;
  uint64_t v93 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v47 = swift_allocObject(v93, 72LL, 7LL);
  __int128 v92 = xmmword_1007E67D0;
  *(_OWORD *)(v47 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v48 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v96 = v19;
  uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v39, v48);
  uint64_t v51 = v50;
  *(void *)(v47 + 56) = &type metadata for String;
  unint64_t v94 = sub_1000226F4();
  *(void *)(v47 + 64) = v94;
  *(void *)(v47 + 32) = v49;
  *(void *)(v47 + 40) = v51;
  os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v46, "Reading from LocalStorageBacked file: %@", 40LL, 2LL, v47);
  swift_bridgeObjectRelease();
  uint64_t v52 = v105;
  unint64_t v53 = (uint64_t *)(v105 + 72);
  swift_beginAccess(v105 + 72, v113, 33LL, 0LL);
  uint64_t v54 = v104;
  swift_bridgeObjectRetain(v104);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v52 + 72));
  uint64_t v114 = *(void *)(v52 + 72);
  uint64_t v56 = v114;
  *(void *)(v52 + 72) = 0x8000000000000000LL;
  unint64_t v58 = sub_10030CF14(v106, v54);
  uint64_t v59 = *(void *)(v56 + 16);
  BOOL v60 = (v57 & 1) == 0;
  uint64_t v61 = v59 + v60;
  if (__OFADD__(v59, v60))
  {
    __break(1u);
    goto LABEL_33;
  }

  LOBYTE(v17) = v57;
  if (*(void *)(v56 + 24) >= v61)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_35;
    }
    while (1)
    {
LABEL_14:
      *unint64_t v53 = v56;
      swift_bridgeObjectRelease();
      uint64_t v64 = (void *)*v53;
      swift_bridgeObjectRetain(*v53);
      if ((v17 & 1) == 0)
      {
        sub_10006047C(v58, v106, v54, 0LL, v64);
        swift_bridgeObjectRetain(v54);
      }

      uint64_t v65 = v64[7];
      uint64_t v66 = *(void *)(v65 + 8 * v58);
      BOOL v67 = __OFADD__(v66, 1LL);
      uint64_t v68 = v66 + 1;
      if (v67)
      {
LABEL_33:
        __break(1u);
      }

      else
      {
        *(void *)(v65 + 8 * v58) = v68;
        swift_endAccess(v113);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v69 = *(void *)(v52 + 64);
        BOOL v67 = __OFADD__(v69, 1LL);
        uint64_t v70 = v69 + 1;
        uint64_t v17 = v111;
        if (!v67)
        {
          *(void *)(v52 + 64) = v70;
          if (__ROR8__(0x1CAC083126E978D5LL * v70 + 0x10624DD2F1A9FB8LL, 3) < 0x4189374BC6A7EFuLL)
          {
            uint64_t v71 = v39;
            uint64_t v72 = sub_100576484(v52);
            unint64_t v74 = v73;
            uint64_t v75 = swift_bridgeObjectRetain(*(void *)(v52 + 72));
            uint64_t v76 = sub_1000F084C(v75);
            char v78 = v77;
            swift_bridgeObjectRelease();
            if ((v78 & 1) != 0 || v76 < 10001)
            {
              if (qword_10099B528 != -1) {
                swift_once(&qword_10099B528, sub_1004F3B00);
              }
              uint64_t v83 = type metadata accessor for Logger(0LL);
              sub_10000A720(v83, (uint64_t)qword_100A2AC98);
              uint64_t v84 = swift_bridgeObjectRetain(v74);
              char v81 = (os_log_s *)Logger.logObject.getter(v84);
              os_log_type_t v82 = static os_log_type_t.info.getter(v81);
            }

            else
            {
              if (qword_10099B528 != -1) {
                swift_once(&qword_10099B528, sub_1004F3B00);
              }
              uint64_t v79 = type metadata accessor for Logger(0LL);
              sub_10000A720(v79, (uint64_t)qword_100A2AC98);
              uint64_t v80 = swift_bridgeObjectRetain(v74);
              char v81 = (os_log_s *)Logger.logObject.getter(v80);
              os_log_type_t v82 = static os_log_type_t.error.getter(v81);
            }

            os_log_type_t v85 = v82;
            if (os_log_type_enabled(v81, v82))
            {
              uint64_t v86 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v87 = swift_slowAlloc(32LL, -1LL);
              v113[0] = v87;
              *(_DWORD *)uint64_t v86 = 136446210;
              swift_bridgeObjectRetain(v74);
              uint64_t v114 = sub_1003F11D4(v72, v74, v113);
              uint64_t v17 = v111;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v86 + 4, v86 + 12);
              swift_bridgeObjectRelease_n(v74, 3LL);
              _os_log_impl((void *)&_mh_execute_header, v81, v85, "readStatistics:\n%{public}s", v86, 0xCu);
              swift_arrayDestroy(v87, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v87, -1LL, -1LL);
              swift_slowDealloc(v86, -1LL, -1LL);
            }

            else
            {

              swift_bridgeObjectRelease_n(v74, 2LL);
            }

            uint64_t v39 = v71;
          }

          uint64_t v88 = sub_1006C5868(v107, v109);
          unint64_t v90 = v89;
          unint64_t v91 = objc_autoreleasePoolPush();
          sub_1005424F8(v88, v90, v100, v101, a9, v17);
          objc_autoreleasePoolPop(v91);
          v95(v96, v39);
          sub_100016F9C(v88, v90);
          return sub_100016F9C(v107, v109);
        }
      }

      __break(1u);
LABEL_35:
      sub_100061B10();
      uint64_t v56 = v114;
    }
  }

  sub_100049DAC(v61, isUniquelyReferenced_nonNull_native);
  uint64_t v56 = v114;
  uint64_t v62 = sub_10030CF14(v106, v54);
  if ((v17 & 1) == (v63 & 1))
  {
    unint64_t v58 = v62;
    goto LABEL_14;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void *sub_100533250(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v2);
  uint64_t v83 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v85 = type metadata accessor for UUID(0LL);
  uint64_t v97 = *(void *)(v85 - 8);
  uint64_t v4 = __chkstk_darwin(v85);
  os_log_type_t v82 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v96 = (char *)&v75 - v6;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v75 - v11;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v84 = (char *)&v75 - v18;
  uint64_t v88 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v86 = *(void *)(v88 - 8);
  uint64_t v19 = __chkstk_darwin(v88);
  char v81 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v75 - v21;
  uint64_t v95 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v23 = swift_allocObject(v95, 72LL, 7LL);
  *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v94 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v13, v94);
  uint64_t v26 = v25;
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v93 = sub_1000226F4();
  *(void *)(v23 + 64) = v93;
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v26;
  uint64_t v27 = v13;
  uint64_t v92 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v28 = (void *)static OS_os_log.default.getter(v92);
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:type:_:)( "BeaconStoreFileManager enumerating records at %@",  48LL,  2LL,  &_mh_execute_header,  v28,  v29,  v23);
  swift_bridgeObjectRelease();

  id v80 = (id)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v30 = [v80 defaultManager];
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)(a1, 0LL);

  uint64_t v87 = v22;
  DirectorySequence.next()(v31);
  uint64_t v99 = v14;
  unint64_t v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v90(v12, 1LL, v13) == 1)
  {
    uint64_t v32 = &_swiftEmptyDictionarySingleton;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
LABEL_13:
    sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A34D0);
  }

  else
  {
    uint64_t v76 = v17;
    uint64_t v33 = *(uint64_t (**)(char *, char *, uint64_t))(v99 + 32);
    unint64_t v91 = &_swiftEmptyDictionarySingleton;
    __int128 v89 = xmmword_1007E4750;
    uint64_t v34 = v85;
    uint64_t v79 = v12;
    unint64_t v35 = v84;
    uint64_t v98 = v33;
    for (uint64_t i = v33(v84, v12, v27); ; uint64_t i = v98(v35, v12, v38))
    {
      uint64_t v62 = URL.lastPathComponent.getter(i);
      uint64_t v63 = (uint64_t)v83;
      UUID.init(uuidString:)(v62, v64);
      swift_bridgeObjectRelease();
      uint64_t v65 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v96, v63, v34);
      uint64_t v100 = _swiftEmptyArrayStorage;
      unint64_t v101 = _swiftEmptyArrayStorage;
      id v66 = [v80 defaultManager];
      BOOL v67 = v81;
      NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v35, 0LL, 0LL);

      DirectorySequence.next()(v68);
      uint64_t v69 = v90;
      if (v90(v10, 1LL, v27) == 1)
      {
        uint64_t v37 = v10;
        uint64_t v38 = v27;
      }

      else
      {
        uint64_t v70 = v77;
        uint64_t v38 = v27;
        uint64_t v37 = v10;
        uint64_t v71 = (uint64_t)v76;
        do
        {
          v98((char *)v71, v10, v27);
          uint64_t v72 = objc_autoreleasePoolPush();
          sub_100534AD4( v71,  v70,  (uint64_t *)&v101,  (unint64_t *)&v100,  &qword_1009AA900,  type metadata accessor for NotifyWhenFoundRecord,  &qword_1009B2920,  (uint64_t)sub_100569FE8,  (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1004C617C);
          objc_autoreleasePoolPop(v72);
          uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v71, v27);
          DirectorySequence.next()(v73);
        }

        while (v69(v10, 1LL, v27) != 1);
      }

      char v78 = *(uint64_t (**)(char *, uint64_t))(v86 + 8);
      uint64_t v39 = v78(v67, v88);
      uint64_t v40 = static os_log_type_t.debug.getter(v39);
      uint64_t v41 = (void *)static OS_os_log.default.getter(v40);
      uint64_t v42 = swift_allocObject(v95, 112LL, 7LL);
      *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = v89;
      uint64_t v43 = (uint64_t)v101;
      uint64_t v44 = v101[2];
      *(void *)(v42 + 56) = &type metadata for Int;
      *(void *)(v42 + 64) = &protocol witness table for Int;
      *(void *)(v42 + 32) = v44;
      unint64_t v35 = v84;
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v38, v94);
      unint64_t v46 = v93;
      *(void *)(v42 + 96) = &type metadata for String;
      *(void *)(v42 + 104) = v46;
      *(void *)(v42 + 72) = v45;
      *(void *)(v42 + 80) = v47;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Found %i records at %@", 22LL, 2LL, v42);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v48 = v96;
      uint64_t v49 = v97;
      uint64_t v50 = (uint64_t)v82;
      uint64_t v34 = v85;
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v82, v96, v85);
      swift_bridgeObjectRetain(v43);
      uint64_t v51 = v91;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v91);
      unint64_t v101 = v51;
      sub_10005E1B8(v43, v50, isUniquelyReferenced_nonNull_native);
      unint64_t v91 = v101;
      swift_bridgeObjectRelease();
      unint64_t v53 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v53(v50, v34);
      uint64_t v54 = swift_allocObject(v95, 112LL, 7LL);
      *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = v89;
      uint64_t v55 = *(void *)(v43 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v54 + 56) = &type metadata for Int;
      *(void *)(v54 + 64) = &protocol witness table for Int;
      *(void *)(v54 + 32) = v55;
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter(v38, v94);
      unint64_t v57 = v93;
      *(void *)(v54 + 96) = &type metadata for String;
      *(void *)(v54 + 104) = v57;
      *(void *)(v54 + 72) = v56;
      *(void *)(v54 + 80) = v58;
      uint64_t v59 = (void *)static OS_os_log.default.getter(v56);
      uint64_t v60 = static os_log_type_t.default.getter(v59);
      os_log(_:dso:log:type:_:)( "BeaconStoreFileManager fetched %i records at %@",  47LL,  2LL,  &_mh_execute_header,  v59,  v60,  v54);
      swift_bridgeObjectRelease();

      v53((uint64_t)v48, v34);
      uint64_t v61 = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v35, v38);
      uint64_t v12 = v79;
      DirectorySequence.next()(v61);
      uint64_t v10 = v37;
      uint64_t v27 = v38;
      if (v90(v12, 1LL, v38) == 1)
      {
        uint64_t v32 = v91;
        v78(v87, v88);
        goto LABEL_13;
      }
    }

    (*(void (**)(char *, uint64_t))(v99 + 8))(v35, v27);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
    sub_100015794(v63, &qword_10099D8A0);
    return v91;
  }

  return v32;
}

void *sub_100533A4C(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v2);
  uint64_t v83 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v85 = type metadata accessor for UUID(0LL);
  uint64_t v97 = *(void *)(v85 - 8);
  uint64_t v4 = __chkstk_darwin(v85);
  os_log_type_t v82 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v96 = (char *)&v75 - v6;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v75 - v11;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v84 = (char *)&v75 - v18;
  uint64_t v88 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v86 = *(void *)(v88 - 8);
  uint64_t v19 = __chkstk_darwin(v88);
  char v81 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v75 - v21;
  uint64_t v95 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v23 = swift_allocObject(v95, 72LL, 7LL);
  *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v94 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v13, v94);
  uint64_t v26 = v25;
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v93 = sub_1000226F4();
  *(void *)(v23 + 64) = v93;
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v26;
  uint64_t v27 = v13;
  uint64_t v92 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v28 = (void *)static OS_os_log.default.getter(v92);
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:type:_:)( "BeaconStoreFileManager enumerating records at %@",  48LL,  2LL,  &_mh_execute_header,  v28,  v29,  v23);
  swift_bridgeObjectRelease();

  id v80 = (id)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v30 = [v80 defaultManager];
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)(a1, 0LL);

  uint64_t v87 = v22;
  DirectorySequence.next()(v31);
  uint64_t v99 = v14;
  unint64_t v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v90(v12, 1LL, v13) == 1)
  {
    uint64_t v32 = &_swiftEmptyDictionarySingleton;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
LABEL_13:
    sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A34D0);
  }

  else
  {
    uint64_t v76 = v17;
    uint64_t v33 = *(uint64_t (**)(char *, char *, uint64_t))(v99 + 32);
    unint64_t v91 = &_swiftEmptyDictionarySingleton;
    __int128 v89 = xmmword_1007E4750;
    uint64_t v34 = v85;
    uint64_t v79 = v12;
    unint64_t v35 = v84;
    uint64_t v98 = v33;
    for (uint64_t i = v33(v84, v12, v27); ; uint64_t i = v98(v35, v12, v38))
    {
      uint64_t v62 = URL.lastPathComponent.getter(i);
      uint64_t v63 = (uint64_t)v83;
      UUID.init(uuidString:)(v62, v64);
      swift_bridgeObjectRelease();
      uint64_t v65 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v96, v63, v34);
      uint64_t v100 = _swiftEmptyArrayStorage;
      unint64_t v101 = _swiftEmptyArrayStorage;
      id v66 = [v80 defaultManager];
      BOOL v67 = v81;
      NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v35, 0LL, 0LL);

      DirectorySequence.next()(v68);
      uint64_t v69 = v90;
      if (v90(v10, 1LL, v27) == 1)
      {
        uint64_t v37 = v10;
        uint64_t v38 = v27;
      }

      else
      {
        uint64_t v70 = v77;
        uint64_t v38 = v27;
        uint64_t v37 = v10;
        uint64_t v71 = (uint64_t)v76;
        do
        {
          v98((char *)v71, v10, v27);
          uint64_t v72 = objc_autoreleasePoolPush();
          sub_100534AD4( v71,  v70,  (uint64_t *)&v101,  (unint64_t *)&v100,  &qword_1009A48E0,  type metadata accessor for BeaconEstimatedLocation,  &qword_1009B27C8,  (uint64_t)sub_100565644,  (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1004C5700);
          objc_autoreleasePoolPop(v72);
          uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v71, v27);
          DirectorySequence.next()(v73);
        }

        while (v69(v10, 1LL, v27) != 1);
      }

      char v78 = *(uint64_t (**)(char *, uint64_t))(v86 + 8);
      uint64_t v39 = v78(v67, v88);
      uint64_t v40 = static os_log_type_t.debug.getter(v39);
      uint64_t v41 = (void *)static OS_os_log.default.getter(v40);
      uint64_t v42 = swift_allocObject(v95, 112LL, 7LL);
      *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = v89;
      uint64_t v43 = (uint64_t)v101;
      uint64_t v44 = v101[2];
      *(void *)(v42 + 56) = &type metadata for Int;
      *(void *)(v42 + 64) = &protocol witness table for Int;
      *(void *)(v42 + 32) = v44;
      unint64_t v35 = v84;
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v38, v94);
      unint64_t v46 = v93;
      *(void *)(v42 + 96) = &type metadata for String;
      *(void *)(v42 + 104) = v46;
      *(void *)(v42 + 72) = v45;
      *(void *)(v42 + 80) = v47;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Found %i records at %@", 22LL, 2LL, v42);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v48 = v96;
      uint64_t v49 = v97;
      uint64_t v50 = (uint64_t)v82;
      uint64_t v34 = v85;
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v82, v96, v85);
      swift_bridgeObjectRetain(v43);
      uint64_t v51 = v91;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v91);
      unint64_t v101 = v51;
      sub_10005CF24(v43, v50, isUniquelyReferenced_nonNull_native);
      unint64_t v91 = v101;
      swift_bridgeObjectRelease();
      unint64_t v53 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v53(v50, v34);
      uint64_t v54 = swift_allocObject(v95, 112LL, 7LL);
      *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = v89;
      uint64_t v55 = *(void *)(v43 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v54 + 56) = &type metadata for Int;
      *(void *)(v54 + 64) = &protocol witness table for Int;
      *(void *)(v54 + 32) = v55;
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter(v38, v94);
      unint64_t v57 = v93;
      *(void *)(v54 + 96) = &type metadata for String;
      *(void *)(v54 + 104) = v57;
      *(void *)(v54 + 72) = v56;
      *(void *)(v54 + 80) = v58;
      uint64_t v59 = (void *)static OS_os_log.default.getter(v56);
      uint64_t v60 = static os_log_type_t.default.getter(v59);
      os_log(_:dso:log:type:_:)( "BeaconStoreFileManager fetched %i records at %@",  47LL,  2LL,  &_mh_execute_header,  v59,  v60,  v54);
      swift_bridgeObjectRelease();

      v53((uint64_t)v48, v34);
      uint64_t v61 = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v35, v38);
      uint64_t v12 = v79;
      DirectorySequence.next()(v61);
      uint64_t v10 = v37;
      uint64_t v27 = v38;
      if (v90(v12, 1LL, v38) == 1)
      {
        uint64_t v32 = v91;
        v78(v87, v88);
        goto LABEL_13;
      }
    }

    (*(void (**)(char *, uint64_t))(v99 + 8))(v35, v27);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
    sub_100015794(v63, &qword_10099D8A0);
    return v91;
  }

  return v32;
}

void *sub_100534248(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v2);
  uint64_t v83 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v85 = type metadata accessor for UUID(0LL);
  uint64_t v97 = *(void *)(v85 - 8);
  uint64_t v4 = __chkstk_darwin(v85);
  os_log_type_t v82 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v96 = (char *)&v75 - v6;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v75 - v11;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v84 = (char *)&v75 - v18;
  uint64_t v88 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v86 = *(void *)(v88 - 8);
  uint64_t v19 = __chkstk_darwin(v88);
  char v81 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v75 - v21;
  uint64_t v95 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v23 = swift_allocObject(v95, 72LL, 7LL);
  *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v94 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v13, v94);
  uint64_t v26 = v25;
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v93 = sub_1000226F4();
  *(void *)(v23 + 64) = v93;
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v26;
  uint64_t v27 = v13;
  uint64_t v92 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v28 = (void *)static OS_os_log.default.getter(v92);
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:type:_:)( "BeaconStoreFileManager enumerating records at %@",  48LL,  2LL,  &_mh_execute_header,  v28,  v29,  v23);
  swift_bridgeObjectRelease();

  id v80 = (id)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v30 = [v80 defaultManager];
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)(a1, 0LL);

  uint64_t v87 = v22;
  DirectorySequence.next()(v31);
  uint64_t v99 = v14;
  unint64_t v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v90(v12, 1LL, v13) == 1)
  {
    uint64_t v32 = _swiftEmptyDictionarySingleton;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
LABEL_13:
    sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A34D0);
  }

  else
  {
    uint64_t v76 = v17;
    uint64_t v33 = *(uint64_t (**)(char *, char *, uint64_t))(v99 + 32);
    unint64_t v91 = _swiftEmptyDictionarySingleton;
    __int128 v89 = xmmword_1007E4750;
    uint64_t v34 = v85;
    uint64_t v79 = v12;
    unint64_t v35 = v84;
    uint64_t v98 = v33;
    for (uint64_t i = v33(v84, v12, v27); ; uint64_t i = v98(v35, v12, v38))
    {
      uint64_t v62 = URL.lastPathComponent.getter(i);
      uint64_t v63 = (uint64_t)v83;
      UUID.init(uuidString:)(v62, v64);
      swift_bridgeObjectRelease();
      uint64_t v65 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v96, v63, v34);
      uint64_t v100 = _swiftEmptyArrayStorage;
      unint64_t v101 = _swiftEmptyArrayStorage;
      id v66 = [v80 defaultManager];
      BOOL v67 = v81;
      NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v35, 0LL, 0LL);

      DirectorySequence.next()(v68);
      uint64_t v69 = v90;
      if (v90(v10, 1LL, v27) == 1)
      {
        uint64_t v37 = v10;
        uint64_t v38 = v27;
      }

      else
      {
        uint64_t v70 = v77;
        uint64_t v38 = v27;
        uint64_t v37 = v10;
        uint64_t v71 = (uint64_t)v76;
        do
        {
          v98((char *)v71, v10, v27);
          uint64_t v72 = objc_autoreleasePoolPush();
          sub_100534AD4( v71,  v70,  (uint64_t *)&v101,  (unint64_t *)&v100,  &qword_1009A2440,  type metadata accessor for LocationProvider,  &qword_1009B2900,  (uint64_t)sub_100569EE0,  (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1004C4E44);
          objc_autoreleasePoolPop(v72);
          uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v71, v27);
          DirectorySequence.next()(v73);
        }

        while (v69(v10, 1LL, v27) != 1);
      }

      char v78 = *(uint64_t (**)(char *, uint64_t))(v86 + 8);
      uint64_t v39 = v78(v67, v88);
      uint64_t v40 = static os_log_type_t.debug.getter(v39);
      uint64_t v41 = (void *)static OS_os_log.default.getter(v40);
      uint64_t v42 = swift_allocObject(v95, 112LL, 7LL);
      *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = v89;
      uint64_t v43 = (uint64_t)v101;
      uint64_t v44 = v101[2];
      *(void *)(v42 + 56) = &type metadata for Int;
      *(void *)(v42 + 64) = &protocol witness table for Int;
      *(void *)(v42 + 32) = v44;
      unint64_t v35 = v84;
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v38, v94);
      unint64_t v46 = v93;
      *(void *)(v42 + 96) = &type metadata for String;
      *(void *)(v42 + 104) = v46;
      *(void *)(v42 + 72) = v45;
      *(void *)(v42 + 80) = v47;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Found %i records at %@", 22LL, 2LL, v42);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v48 = v96;
      uint64_t v49 = v97;
      uint64_t v50 = (uint64_t)v82;
      uint64_t v34 = v85;
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v82, v96, v85);
      swift_bridgeObjectRetain(v43);
      uint64_t v51 = v91;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v91);
      unint64_t v101 = v51;
      sub_10005EB90(v43, v50, isUniquelyReferenced_nonNull_native);
      unint64_t v91 = v101;
      swift_bridgeObjectRelease();
      unint64_t v53 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v53(v50, v34);
      uint64_t v54 = swift_allocObject(v95, 112LL, 7LL);
      *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = v89;
      uint64_t v55 = *(void *)(v43 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v54 + 56) = &type metadata for Int;
      *(void *)(v54 + 64) = &protocol witness table for Int;
      *(void *)(v54 + 32) = v55;
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter(v38, v94);
      unint64_t v57 = v93;
      *(void *)(v54 + 96) = &type metadata for String;
      *(void *)(v54 + 104) = v57;
      *(void *)(v54 + 72) = v56;
      *(void *)(v54 + 80) = v58;
      uint64_t v59 = (void *)static OS_os_log.default.getter(v56);
      uint64_t v60 = static os_log_type_t.default.getter(v59);
      os_log(_:dso:log:type:_:)( "BeaconStoreFileManager fetched %i records at %@",  47LL,  2LL,  &_mh_execute_header,  v59,  v60,  v54);
      swift_bridgeObjectRelease();

      v53((uint64_t)v48, v34);
      uint64_t v61 = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v35, v38);
      uint64_t v12 = v79;
      DirectorySequence.next()(v61);
      uint64_t v10 = v37;
      uint64_t v27 = v38;
      if (v90(v12, 1LL, v38) == 1)
      {
        uint64_t v32 = v91;
        v78(v87, v88);
        goto LABEL_13;
      }
    }

    (*(void (**)(char *, uint64_t))(v99 + 8))(v35, v27);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
    sub_100015794(v63, &qword_10099D8A0);
    return v91;
  }

  return v32;
}

void sub_100534A44(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100534A8C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100534AD4( uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t *a7, uint64_t a8, uint64_t (*a9)(BOOL, uint64_t, uint64_t, uint64_t))
{
  uint64_t v133 = a8;
  unint64_t v131 = a7;
  uint64_t v128 = a4;
  uint64_t v122 = a3;
  uint64_t v132 = a2;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v12);
  uint64_t v125 = (char *)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v127 = *(void *)(v124 - 8);
  uint64_t v14 = __chkstk_darwin(v124);
  uint64_t v16 = (char *)&v117 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v126 = (char *)&v117 - v17;
  uint64_t v120 = a5;
  uint64_t v129 = sub_100004AEC(a5);
  __chkstk_darwin(v129);
  uint64_t v130 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = a6;
  uint64_t v19 = a6(0LL);
  uint64_t v137 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v135 = (uint64_t)&v117 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v134 = (uint64_t)&v117 - v22;
  uint64_t v23 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v117 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v140 = *(void *)(v26 - 8);
  uint64_t v141 = v26;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v143 = type metadata accessor for URL(0LL);
  uint64_t v138 = *(void *)(v143 - 8);
  uint64_t v29 = __chkstk_darwin(v143);
  unint64_t v121 = (char *)&v117 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v139 = (char *)&v117 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  unint64_t v35 = (char *)&v117 - v34;
  uint64_t v36 = URL.pathExtension.getter(v33);
  if (v36 == 0x64726F636572LL && v37 == 0xE600000000000000LL)
  {
    uint64_t v38 = swift_bridgeObjectRelease();
  }

  else
  {
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, 0x64726F636572LL, 0xE600000000000000LL, 0LL);
    uint64_t v38 = swift_bridgeObjectRelease();
    if ((v39 & 1) == 0)
    {
      uint64_t v100 = static os_log_type_t.info.getter(v38);
      uint64_t v101 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v102 = swift_allocObject(v101, 72LL, 7LL);
      *(_OWORD *)(v102 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v103 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v104 = dispatch thunk of CustomStringConvertible.description.getter(v143, v103);
      uint64_t v106 = v105;
      *(void *)(v102 + 56) = &type metadata for String;
      *(void *)(v102 + 64) = sub_1000226F4();
      *(void *)(v102 + 32) = v104;
      *(void *)(v102 + 40) = v106;
      sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v107 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)(v100, &_mh_execute_header, v107, "Invalid extension. Skipping file %@", 35LL, 2LL, v102);
      swift_bridgeObjectRelease();

      return;
    }
  }

  uint64_t v142 = v9;
  uint64_t v136 = v28;
  uint64_t v40 = URL.deletingPathExtension()(v38);
  uint64_t v41 = URL.lastPathComponent.getter(v40);
  uint64_t v43 = v42;
  uint64_t v44 = *(void (**)(char *, uint64_t))(v138 + 8);
  uint64_t v45 = v143;
  v44(v35, v143);
  UUID.init(uuidString:)(v41, v43);
  swift_bridgeObjectRelease();
  uint64_t v47 = v140;
  uint64_t v46 = v141;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v25, 1LL, v141) == 1)
  {
    uint64_t v48 = sub_100015794((uint64_t)v25, &qword_10099D8A0);
    uint64_t v49 = static os_log_type_t.error.getter(v48);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v50 = qword_100A2B018;
    uint64_t v51 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v52 = swift_allocObject(v51, 72LL, 7LL);
    *(_OWORD *)(v52 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v53 = URL.description.getter();
    uint64_t v55 = v54;
    *(void *)(v52 + 56) = &type metadata for String;
    *(void *)(v52 + 64) = sub_1000226F4();
    *(void *)(v52 + 32) = v53;
    *(void *)(v52 + 40) = v55;
    os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v50, "Invalid file identifier at URL: %@", 34LL, 2LL, v52);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v118 = v16;
    uint64_t v56 = *(uint64_t (**)(char *, char *, uint64_t))(v47 + 32);
    unint64_t v57 = v44;
    uint64_t v58 = v136;
    uint64_t v59 = v56(v136, v25, v46);
    uint64_t v60 = URL.deletingPathExtension()(v59);
    uint64_t v61 = v139;
    URL.deletingLastPathComponent()(v60);
    __int128 v119 = v57;
    v57(v35, v45);
    v62._object = (void *)0x800000010085B040LL;
    v62._countAndFlagsBits = 0xD000000000000014LL;
    prohibitAsyncContext(functionName:)(v62);
    uint64_t v144 = v19;
    uint64_t v63 = sub_100004AEC(v131);
    uint64_t v64 = String.init<A>(describing:)(&v144, v63);
    uint64_t v66 = v65;
    BOOL v67 = objc_autoreleasePoolPush();
    __chkstk_darwin(v67);
    *(&v117 - 6) = v68;
    *(&v117 - 5) = (uint64_t)v58;
    *(&v117 - 4) = (uint64_t)v61;
    *(&v117 - 3) = v64;
    *(&v117 - 2) = v66;
    uint64_t v69 = (uint64_t)v130;
    uint64_t v70 = v142;
    OS_dispatch_queue.sync<A>(execute:)(v133, &v117 - 8, v129);
    uint64_t v142 = v70;
    objc_autoreleasePoolPop(v67);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v69, 1LL, v19) == 1)
    {
      uint64_t v71 = sub_100015794(v69, v120);
      LODWORD(v137) = static os_log_type_t.error.getter(v71);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v72 = qword_100A2B018;
      uint64_t v73 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v74 = swift_allocObject(v73, 112LL, 7LL);
      *(_OWORD *)(v74 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
      uint64_t v75 = v136;
      uint64_t v76 = UUID.uuidString.getter(v74);
      uint64_t v78 = v77;
      *(void *)(v74 + 56) = &type metadata for String;
      unint64_t v79 = sub_1000226F4();
      *(void *)(v74 + 64) = v79;
      *(void *)(v74 + 32) = v76;
      *(void *)(v74 + 40) = v78;
      uint64_t v80 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v81 = v143;
      uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter(v143, v80);
      *(void *)(v74 + 96) = &type metadata for String;
      *(void *)(v74 + 104) = v79;
      *(void *)(v74 + 72) = v82;
      *(void *)(v74 + 80) = v83;
      os_log(_:dso:log:_:_:)( v137,  &_mh_execute_header,  v72,  "Could not read item %@ for records at %@",  40LL,  2LL,  v74);
      swift_bridgeObjectRelease();
      uint64_t v84 = objc_autoreleasePoolPush();
      uint64_t v85 = UUID.uuidString.getter(v84);
      uint64_t v86 = v121;
      URL.appendingPathComponent(_:)(v85, v87);
      swift_bridgeObjectRelease();
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v88 = v119;
      v119(v86, v81);
      objc_autoreleasePoolPop(v84);
      __int128 v89 = objc_autoreleasePoolPush();
      uint64_t v90 = UUID.uuidString.getter(v89);
      URL.appendingPathComponent(_:)(v90, v91);
      swift_bridgeObjectRelease();
      uint64_t v92 = (uint64_t)v125;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      v88(v86, v81);
      objc_autoreleasePoolPop(v89);
      uint64_t v93 = v138;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v138 + 56))(v92, 0LL, 1LL, v81);
      uint64_t v94 = (uint64_t)v126;
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v126, v35, v81);
      sub_100015750(v92, v94 + *(int *)(v124 + 20), (uint64_t *)&unk_1009A34D0);
      sub_10001DC4C(v94, (uint64_t)v118, type metadata accessor for BeaconStoreFileRecord);
      uint64_t v95 = v128;
      unint64_t v96 = *v128;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v128);
      unint64_t *v95 = v96;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v96 = sub_1004C4704(0, *(void *)(v96 + 16) + 1LL, 1, v96);
        unint64_t *v95 = v96;
      }

      unint64_t v99 = *(void *)(v96 + 16);
      unint64_t v98 = *(void *)(v96 + 24);
      if (v99 >= v98 >> 1)
      {
        unint64_t v96 = sub_1004C4704(v98 > 1, v99 + 1, 1, v96);
        unint64_t *v95 = v96;
      }

      *(void *)(v96 + swift_weakDestroy(v0 + 16) = v99 + 1;
      sub_10002218C( (uint64_t)v118,  v96 + ((*(unsigned __int8 *)(v127 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80))
      + *(void *)(v127 + 72) * v99,
        type metadata accessor for BeaconStoreFileRecord);
      sub_100018C68(v94, type metadata accessor for BeaconStoreFileRecord);
      v119(v139, v81);
      (*(void (**)(char *, uint64_t))(v140 + 8))(v75, v141);
    }

    else
    {
      uint64_t v108 = v134;
      unint64_t v109 = v123;
      sub_10002218C(v69, v134, v123);
      sub_10001DC4C(v108, v135, v109);
      uint64_t v110 = v122;
      uint64_t v111 = *v122;
      char v112 = swift_isUniquelyReferenced_nonNull_native(*v122);
      *uint64_t v110 = v111;
      if ((v112 & 1) == 0)
      {
        uint64_t v111 = a9(0, *(void *)(v111 + 16) + 1LL, 1LL, v111);
        *uint64_t v110 = v111;
      }

      uint64_t v113 = v143;
      uint64_t v114 = v136;
      unint64_t v116 = *(void *)(v111 + 16);
      unint64_t v115 = *(void *)(v111 + 24);
      if (v116 >= v115 >> 1)
      {
        uint64_t v111 = a9(v115 > 1, v116 + 1, 1LL, v111);
        *uint64_t v110 = v111;
      }

      *(void *)(v111 + swift_weakDestroy(v0 + 16) = v116 + 1;
      sub_10002218C( v135,  v111 + ((*(unsigned __int8 *)(v137 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80))
      + *(void *)(v137 + 72) * v116,
        v109);
      sub_100018C68(v134, v109);
      v119(v139, v113);
      (*(void (**)(char *, uint64_t))(v140 + 8))(v114, v141);
    }
  }

void sub_100535528(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100535570(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_1005355B8(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100535600(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100535648(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100535690(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_1005356D8(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100535720(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100535768(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_1005357B0(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_1005357F8(uint64_t a1, uint64_t a2, void **a3, unint64_t *a4)
{
  uint64_t v124 = a4;
  uint64_t v125 = a3;
  uint64_t v126 = a2;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v5);
  uint64_t v120 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v119 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v123 = *(void *)(v119 - 8);
  uint64_t v7 = __chkstk_darwin(v119);
  uint64_t v122 = (uint64_t)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v121 = (char *)&v114 - v9;
  uint64_t v10 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v130 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v129 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v128 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v118 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v114 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v114 - v22;
  uint64_t v24 = URL.pathExtension.getter(v21);
  if (v24 == 0x64726F636572LL && v25 == 0xE600000000000000LL)
  {
    uint64_t v26 = swift_bridgeObjectRelease();
  }

  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, 0x64726F636572LL, 0xE600000000000000LL, 0LL);
    uint64_t v26 = swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      uint64_t v74 = static os_log_type_t.info.getter(v26);
      uint64_t v75 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v76 = swift_allocObject(v75, 72LL, 7LL);
      *(_OWORD *)(v76 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v77 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter(v15, v77);
      uint64_t v80 = v79;
      *(void *)(v76 + 56) = &type metadata for String;
      *(void *)(v76 + 64) = sub_1000226F4();
      *(void *)(v76 + 32) = v78;
      *(void *)(v76 + 40) = v80;
      uint64_t v81 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v82 = (void *)static OS_os_log.default.getter(v81);
      os_log(_:dso:log:_:_:)(v74, &_mh_execute_header, v82, "Invalid extension. Skipping file %@", 35LL, 2LL, v76);
      swift_bridgeObjectRelease();

      return;
    }
  }

  uint64_t v131 = v4;
  uint64_t v28 = URL.deletingPathExtension()(v26);
  uint64_t v29 = URL.lastPathComponent.getter(v28);
  uint64_t v31 = v30;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v128 + 8);
  v32(v23, v15);
  UUID.init(uuidString:)(v29, v31);
  swift_bridgeObjectRelease();
  uint64_t v33 = v130;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v12, 1LL, v13) == 1)
  {
    uint64_t v34 = sub_100015794((uint64_t)v12, &qword_10099D8A0);
    uint64_t v35 = static os_log_type_t.error.getter(v34);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v36 = qword_100A2B018;
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v38 = swift_allocObject(v37, 72LL, 7LL);
    *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v39 = URL.description.getter(v38);
    uint64_t v41 = v40;
    *(void *)(v38 + 56) = &type metadata for String;
    *(void *)(v38 + 64) = sub_1000226F4();
    *(void *)(v38 + 32) = v39;
    *(void *)(v38 + 40) = v41;
    os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "Invalid file identifier at URL: %@", 34LL, 2LL, v38);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v42 = *(uint64_t (**)(char *, char *, uint64_t))(v33 + 32);
    uint64_t v127 = v20;
    uint64_t v43 = v129;
    uint64_t v115 = v13;
    uint64_t v44 = v42(v129, v12, v13);
    uint64_t v45 = URL.deletingPathExtension()(v44);
    URL.deletingLastPathComponent()(v45);
    uint64_t v116 = v15;
    uint64_t v117 = v32;
    v32(v23, v15);
    v46._object = (void *)0x800000010085B040LL;
    v46._countAndFlagsBits = 0xD000000000000014LL;
    prohibitAsyncContext(functionName:)(v46);
    uint64_t v143 = &type metadata for SecureLocationLabel;
    uint64_t v47 = sub_100004AEC(&qword_1009B29B8);
    uint64_t v48 = String.init<A>(describing:)(&v143, v47);
    uint64_t v50 = v49;
    uint64_t v51 = objc_autoreleasePoolPush();
    __chkstk_darwin(v51);
    *(&v114 - 6) = v52;
    *(&v114 - 5) = (uint64_t)v43;
    uint64_t v111 = v127;
    uint64_t v112 = v48;
    uint64_t v113 = v50;
    uint64_t v53 = sub_100004AEC(&qword_1009B29C0);
    uint64_t v54 = v131;
    OS_dispatch_queue.sync<A>(execute:)(sub_10056A5D8, &v114 - 8, v53);
    objc_autoreleasePoolPop(v51);
    uint64_t v55 = swift_bridgeObjectRelease();
    uint64_t v56 = v133;
    uint64_t v131 = v54;
    if (v133)
    {
      uint64_t v57 = v132;
      uint64_t v58 = v134;
      uint64_t v59 = v135;
      uint64_t v60 = v136;
      uint64_t v61 = v137;
      uint64_t v126 = v138;
      uint64_t v123 = v140;
      uint64_t v124 = v139;
      uint64_t v62 = v142;
      uint64_t v122 = v141;
      uint64_t v63 = v125;
      uint64_t v64 = *v125;
      swift_bridgeObjectRetain(v142);
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v61);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v64);
      void *v63 = v64;
      uint64_t v128 = v60;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v64 = sub_1004C602C(0LL, v64[2] + 1LL, 1, v64);
        *uint64_t v125 = v64;
      }

      unint64_t v67 = v64[2];
      unint64_t v66 = v64[3];
      if (v67 >= v66 >> 1)
      {
        uint64_t v64 = sub_1004C602C((void *)(v66 > 1), v67 + 1, 1, v64);
        *uint64_t v125 = v64;
      }

      v64[2] = v67 + 1;
      uint64_t v68 = &v64[11 * v67];
      v68[4] = v57;
      v68[5] = v56;
      v68[6] = v58;
      v68[7] = v59;
      uint64_t v69 = v128;
      v68[8] = v128;
      v68[9] = v61;
      uint64_t v70 = v126;
      uint64_t v72 = v123;
      uint64_t v71 = (uint64_t)v124;
      v68[10] = v126;
      v68[11] = v71;
      uint64_t v73 = v122;
      v68[12] = v72;
      v68[13] = v73;
      v68[14] = v62;
      sub_10056A5F8(v57, v56, v58, v59, v69, v61, v70, v71, v72, v73, v62);
      v117(v127, v116);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v115);
    }

    else
    {
      LODWORD(v126) = static os_log_type_t.error.getter(v55);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v83 = qword_100A2B018;
      uint64_t v84 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v85 = swift_allocObject(v84, 112LL, 7LL);
      *(_OWORD *)(v85 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
      uint64_t v86 = UUID.uuidString.getter(v85);
      uint64_t v88 = v87;
      *(void *)(v85 + 56) = &type metadata for String;
      unint64_t v89 = sub_1000226F4();
      *(void *)(v85 + 64) = v89;
      *(void *)(v85 + 32) = v86;
      *(void *)(v85 + 40) = v88;
      uint64_t v90 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v91 = v116;
      uint64_t v92 = dispatch thunk of CustomStringConvertible.description.getter(v116, v90);
      *(void *)(v85 + 96) = &type metadata for String;
      *(void *)(v85 + 104) = v89;
      *(void *)(v85 + 72) = v92;
      *(void *)(v85 + 80) = v93;
      os_log(_:dso:log:_:_:)( v126,  &_mh_execute_header,  v83,  "Could not read item %@ for records at %@",  40LL,  2LL,  v85);
      swift_bridgeObjectRelease();
      uint64_t v94 = objc_autoreleasePoolPush();
      uint64_t v95 = UUID.uuidString.getter(v94);
      unint64_t v96 = v118;
      URL.appendingPathComponent(_:)(v95, v97);
      swift_bridgeObjectRelease();
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      unint64_t v98 = v117;
      v117(v96, v91);
      objc_autoreleasePoolPop(v94);
      unint64_t v99 = objc_autoreleasePoolPush();
      uint64_t v100 = UUID.uuidString.getter(v99);
      URL.appendingPathComponent(_:)(v100, v101);
      swift_bridgeObjectRelease();
      uint64_t v102 = (uint64_t)v120;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      v98(v96, v91);
      objc_autoreleasePoolPop(v99);
      uint64_t v103 = v128;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v128 + 56))(v102, 0LL, 1LL, v91);
      uint64_t v104 = (uint64_t)v121;
      (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v121, v23, v91);
      sub_100015750(v102, v104 + *(int *)(v119 + 20), (uint64_t *)&unk_1009A34D0);
      uint64_t v105 = v122;
      sub_10001DC4C(v104, v122, type metadata accessor for BeaconStoreFileRecord);
      uint64_t v106 = v124;
      unint64_t v107 = *v124;
      char v108 = swift_isUniquelyReferenced_nonNull_native(*v124);
      *uint64_t v106 = v107;
      if ((v108 & 1) == 0)
      {
        unint64_t v107 = sub_1004C4704(0, *(void *)(v107 + 16) + 1LL, 1, v107);
        *uint64_t v106 = v107;
      }

      unint64_t v110 = *(void *)(v107 + 16);
      unint64_t v109 = *(void *)(v107 + 24);
      if (v110 >= v109 >> 1)
      {
        unint64_t v107 = sub_1004C4704(v109 > 1, v110 + 1, 1, v107);
        *uint64_t v106 = v107;
      }

      *(void *)(v107 + swift_weakDestroy(v0 + 16) = v110 + 1;
      sub_10002218C( v105,  v107 + ((*(unsigned __int8 *)(v123 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80))
      + *(void *)(v123 + 72) * v110,
        type metadata accessor for BeaconStoreFileRecord);
      sub_100018C68(v104, type metadata accessor for BeaconStoreFileRecord);
      v117(v127, v91);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v115);
    }
  }

void sub_1005361F0(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100536238(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100536280(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_1005362C8(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
}

void sub_100536310(uint64_t a1, uint64_t a2)
{
  uint64_t v119 = a1;
  uint64_t v3 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v116 = *(void *)(v6 - 8);
  *(void *)&__int128 v117 = v6;
  __chkstk_darwin(v6);
  uint64_t v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = type metadata accessor for URL(0LL);
  uint64_t v110 = *(void *)(v120 - 8);
  uint64_t v8 = __chkstk_darwin(v120);
  uint64_t v111 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v113 = (char *)&v105 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v105 - v12;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  id v24 = v122;
  id v23 = v123[0];
  uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *uint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v34 = PropertyListEncoder.init()(v33);
    uint64_t v35 = sub_100007864(&qword_1009B2860, type metadata accessor for OwnedDeviceKeyRecord, (uint64_t)&unk_1008185EC);
    Class v36 = isa;
    uint64_t v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      uint64_t v41 = a2;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      uint64_t v42 = sub_1006C54D4(v39, v40, 0);
      unint64_t v44 = v43;
      uint64_t v107 = v39;
      unint64_t v108 = v40;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v42, v44);
      uint64_t v106 = sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B8A8 != -1) {
        swift_once(&qword_10099B8A8, sub_1006E33E8);
      }
      uint64_t v45 = v120;
      uint64_t v46 = sub_10000A720(v120, (uint64_t)qword_100A2B2E0);
      uint64_t v47 = UUID.uuidString.getter(v46);
      URL.appendingPathComponent(_:isDirectory:)(v47, v48, 1LL);
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0LL);
      uint64_t v49 = *(void (**)(char *, uint64_t))(v110 + 8);
      v49(v13, v45);
      uint64_t v106 = v3;
      uint64_t v50 = *(int *)(v3 + 20);
      uint64_t v110 = v41;
      uint64_t v51 = v112;
      uint64_t v52 = (*(uint64_t (**)(char *, uint64_t, void))(v116 + 16))(v112, v41 + v50, v117);
      uint64_t v53 = UUID.uuidString.getter(v52);
      URL.appendingPathComponent(_:isDirectory:)(v53, v54, 1LL);
      swift_bridgeObjectRelease();
      uint64_t v55 = objc_autoreleasePoolPush();
      uint64_t v56 = UUID.uuidString.getter(v55);
      uint64_t v57 = v111;
      URL.appendingPathComponent(_:)(v56, v58);
      swift_bridgeObjectRelease();
      uint64_t v59 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v60 = v57;
      uint64_t v61 = v120;
      v49(v60, v120);
      objc_autoreleasePoolPop(v55);
      uint64_t v62 = v13;
      uint64_t v63 = v61;
      uint64_t v111 = (char *)v49;
      v49(v62, v61);
      uint64_t v64 = (*(uint64_t (**)(char *, void))(v116 + 8))(v51, v117);
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v65 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v66);
      uint64_t v68 = v67;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1LL);

      objc_autoreleasePoolPop(v65);
      uint64_t v70 = static os_log_type_t.default.getter(v69);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v71 = qword_100A2B018;
      uint64_t v72 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v73 = swift_allocObject(v72, 72LL, 7LL);
      __int128 v117 = xmmword_1007E67D0;
      *(_OWORD *)(v73 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v74 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v63, v74);
      uint64_t v76 = v59;
      uint64_t v78 = v77;
      *(void *)(v73 + 56) = &type metadata for String;
      unint64_t v79 = sub_1000226F4();
      *(void *)(v73 + 64) = v79;
      *(void *)(v73 + 32) = v75;
      *(void *)(v73 + 40) = v78;
      os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Writing to file: %@", 19LL, 2LL, v73);
      swift_bridgeObjectRelease();
      uint64_t v80 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v80, v124);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v117;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v82 = NSFileProtectionKey;
      uint64_t v83 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v84 = sub_10041299C(inited);
      id v85 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v84);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v87 = swift_bridgeObjectRelease();
      URL.path.getter(v87);
      NSString v88 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v123[0] = 0LL;
      LODWORD(v78) = [v85 setAttributes:v86 ofItemAtPath:v88 error:v123];

      id v89 = v123[0];
      if ((_DWORD)v78)
      {
        id v90 = v123[0];
        uint64_t v91 = v118;
        uint64_t v92 = URL.setResourceValues(_:)(v118);
        uint64_t v95 = static os_log_type_t.default.getter(v92);
        uint64_t v96 = qword_100A2B018;
        uint64_t v97 = swift_allocObject(v72, 72LL, 7LL);
        *(_OWORD *)(v97 + swift_weakDestroy(v0 + 16) = v117;
        uint64_t v98 = v110;
        uint64_t v99 = v109;
        sub_10001DC4C(v110, v109, type metadata accessor for OwnedDeviceKeyRecord);
        uint64_t v100 = v99;
        uint64_t v101 = (void *)v106;
        uint64_t v102 = String.init<A>(describing:)(v100, v106);
        *(void *)(v97 + 56) = &type metadata for String;
        *(void *)(v97 + 64) = v79;
        *(void *)(v97 + 32) = v102;
        *(void *)(v97 + 40) = v103;
        os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Publishing record changed: %@", 29LL, 2LL, v97);
        swift_bridgeObjectRelease();
        v123[3] = v101;
        v123[4] = (id)sub_100007864( &qword_1009BD2D0,  type metadata accessor for OwnedDeviceKeyRecord,  (uint64_t)&unk_10081863C);
        uint64_t v104 = sub_10000A7C8(v123);
        sub_10001DC4C(v98, (uint64_t)v104, type metadata accessor for OwnedDeviceKeyRecord);
        PassthroughSubject.send(_:)(v123);
        sub_100016F9C(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v91, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
      }

      else
      {
        id v93 = v123[0];
        _convertNSErrorToError(_:)(v89);

        swift_willThrow(v94);
        sub_100016F9C(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
      }

      ((void (*)(char *, uint64_t))v111)(v76, v120);
    }
  }

void sub_100536D3C(uint64_t a1, void *a2)
{
}

void sub_100536DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v119 = a1;
  uint64_t v3 = type metadata accessor for LostModeRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v116 = *(void *)(v6 - 8);
  *(void *)&__int128 v117 = v6;
  __chkstk_darwin(v6);
  uint64_t v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = type metadata accessor for URL(0LL);
  uint64_t v110 = *(void *)(v120 - 8);
  uint64_t v8 = __chkstk_darwin(v120);
  uint64_t v111 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v113 = (char *)&v105 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v105 - v12;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  id v24 = v122;
  id v23 = v123[0];
  uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *uint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v34 = PropertyListEncoder.init()(v33);
    uint64_t v35 = sub_100007864(&qword_1009B2888, type metadata accessor for LostModeRecord, (uint64_t)&unk_10080CC3C);
    Class v36 = isa;
    uint64_t v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      uint64_t v41 = a2;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      uint64_t v42 = sub_1006C54D4(v39, v40, 0);
      unint64_t v44 = v43;
      uint64_t v107 = v39;
      unint64_t v108 = v40;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v42, v44);
      uint64_t v106 = sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B648 != -1) {
        swift_once(&qword_10099B648, sub_1005F1554);
      }
      uint64_t v45 = v120;
      uint64_t v105 = sub_10000A720(v120, (uint64_t)qword_100A2AEF0);
      uint64_t v46 = UUID.uuidString.getter(v105);
      URL.appendingPathComponent(_:isDirectory:)(v46, v47, 1LL);
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0LL);
      uint64_t v48 = *(void (**)(char *, uint64_t))(v110 + 8);
      v48(v13, v45);
      uint64_t v106 = v3;
      uint64_t v49 = *(int *)(v3 + 20);
      uint64_t v110 = v41;
      uint64_t v50 = v41 + v49;
      uint64_t v51 = v112;
      uint64_t v52 = (*(uint64_t (**)(char *, uint64_t, void))(v116 + 16))(v112, v50, v117);
      uint64_t v53 = UUID.uuidString.getter(v52);
      URL.appendingPathComponent(_:isDirectory:)(v53, v54, 1LL);
      swift_bridgeObjectRelease();
      uint64_t v55 = objc_autoreleasePoolPush();
      uint64_t v56 = UUID.uuidString.getter(v55);
      uint64_t v57 = v111;
      URL.appendingPathComponent(_:)(v56, v58);
      swift_bridgeObjectRelease();
      uint64_t v59 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v60 = v57;
      uint64_t v61 = v120;
      v48(v60, v120);
      objc_autoreleasePoolPop(v55);
      uint64_t v62 = v13;
      uint64_t v63 = v61;
      uint64_t v111 = (char *)v48;
      v48(v62, v61);
      uint64_t v64 = (*(uint64_t (**)(char *, void))(v116 + 8))(v51, v117);
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v65 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v66);
      uint64_t v68 = v67;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1LL);

      objc_autoreleasePoolPop(v65);
      uint64_t v70 = static os_log_type_t.default.getter(v69);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v71 = qword_100A2B018;
      uint64_t v72 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v73 = swift_allocObject(v72, 72LL, 7LL);
      __int128 v117 = xmmword_1007E67D0;
      *(_OWORD *)(v73 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v74 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v63, v74);
      uint64_t v76 = v59;
      uint64_t v78 = v77;
      *(void *)(v73 + 56) = &type metadata for String;
      unint64_t v79 = sub_1000226F4();
      *(void *)(v73 + 64) = v79;
      *(void *)(v73 + 32) = v75;
      *(void *)(v73 + 40) = v78;
      os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Writing to file: %@", 19LL, 2LL, v73);
      swift_bridgeObjectRelease();
      uint64_t v80 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v80, v124);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v117;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v82 = NSFileProtectionKey;
      uint64_t v83 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v84 = sub_10041299C(inited);
      id v85 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v84);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v87 = swift_bridgeObjectRelease();
      URL.path.getter(v87);
      NSString v88 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v123[0] = 0LL;
      LODWORD(v78) = [v85 setAttributes:v86 ofItemAtPath:v88 error:v123];

      id v89 = v123[0];
      if ((_DWORD)v78)
      {
        id v90 = v123[0];
        uint64_t v91 = v118;
        uint64_t v92 = URL.setResourceValues(_:)(v118);
        uint64_t v95 = static os_log_type_t.default.getter(v92);
        uint64_t v96 = qword_100A2B018;
        uint64_t v97 = swift_allocObject(v72, 72LL, 7LL);
        *(_OWORD *)(v97 + swift_weakDestroy(v0 + 16) = v117;
        uint64_t v98 = v110;
        uint64_t v99 = v109;
        sub_10001DC4C(v110, v109, type metadata accessor for LostModeRecord);
        uint64_t v100 = v99;
        uint64_t v101 = (void *)v106;
        uint64_t v102 = String.init<A>(describing:)(v100, v106);
        *(void *)(v97 + 56) = &type metadata for String;
        *(void *)(v97 + 64) = v79;
        *(void *)(v97 + 32) = v102;
        *(void *)(v97 + 40) = v103;
        os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Publishing record changed: %@", 29LL, 2LL, v97);
        swift_bridgeObjectRelease();
        v123[3] = v101;
        v123[4] = (id)sub_100007864( &qword_1009B6770,  type metadata accessor for LostModeRecord,  (uint64_t)&unk_10080CC8C);
        uint64_t v104 = sub_10000A7C8(v123);
        sub_10001DC4C(v98, (uint64_t)v104, type metadata accessor for LostModeRecord);
        PassthroughSubject.send(_:)(v123);
        sub_100016F9C(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v91, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
      }

      else
      {
        id v93 = v123[0];
        _convertNSErrorToError(_:)(v89);

        swift_willThrow(v94);
        sub_100016F9C(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
      }

      ((void (*)(char *, uint64_t))v111)(v76, v120);
    }
  }

void sub_100537800(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = a1;
  uint64_t v3 = type metadata accessor for SafeLocation(0LL);
  __chkstk_darwin(v3);
  uint64_t v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v112 = *(void *)(v6 - 8);
  *(void *)&__int128 v113 = v6;
  __chkstk_darwin(v6);
  unint64_t v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for URL(0LL);
  uint64_t v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  uint64_t v8 = __chkstk_darwin(v115);
  uint64_t v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  uint64_t v109 = (char *)&v101 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  id v24 = v118;
  id v23 = v119[0];
  uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *uint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v34 = PropertyListEncoder.init()(v33);
    uint64_t v35 = sub_100007864(&qword_1009B27C0, type metadata accessor for SafeLocation, (uint64_t)&unk_10080F8EC);
    Class v36 = isa;
    uint64_t v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      uint64_t v41 = sub_1006C54D4(v39, v40, 0);
      unint64_t v43 = v42;
      uint64_t v103 = v39;
      unint64_t v104 = v40;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v41, v43);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B690 != -1) {
        swift_once(&qword_10099B690, sub_10061ABF8);
      }
      uint64_t v44 = v115;
      uint64_t v45 = sub_10000A720(v115, (uint64_t)qword_100A2AF70);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0LL);
      uint64_t v101 = (void *)v3;
      uint64_t v46 = *(int *)(v3 + 20);
      uint64_t v102 = a2;
      uint64_t v47 = v108;
      (*(void (**)(char *, uint64_t, void))(v112 + 16))(v108, a2 + v46, v113);
      uint64_t v48 = v107;
      uint64_t v49 = v106;
      v107[2](v106, v45, v44);
      uint64_t v50 = objc_autoreleasePoolPush();
      uint64_t v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      uint64_t v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      uint64_t v55 = v10;
      uint64_t v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      uint64_t v57 = v49;
      uint64_t v58 = v44;
      uint64_t v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      uint64_t v59 = (*(uint64_t (**)(char *, void))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      uint64_t v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1LL);

      objc_autoreleasePoolPop(v60);
      uint64_t v65 = static os_log_type_t.default.getter(v64);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v66 = qword_100A2B018;
      uint64_t v67 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v68 = swift_allocObject(v67, 72LL, 7LL);
      __int128 v113 = xmmword_1007E67D0;
      *(_OWORD *)(v68 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v69 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      uint64_t v72 = v71;
      *(void *)(v68 + 56) = &type metadata for String;
      unint64_t v73 = sub_1000226F4();
      *(void *)(v68 + 64) = v73;
      *(void *)(v68 + 32) = v70;
      *(void *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19LL, 2LL, v68);
      swift_bridgeObjectRelease();
      uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v113;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v76 = NSFileProtectionKey;
      uint64_t v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v78 = sub_10041299C(inited);
      id v79 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      NSString v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0LL;
      LODWORD(v72) = [v79 setAttributes:v80 ofItemAtPath:v82 error:v119];

      id v83 = v119[0];
      if ((_DWORD)v72)
      {
        id v84 = v119[0];
        id v85 = v114;
        uint64_t v87 = v56;
        uint64_t v86 = URL.setResourceValues(_:)(v114);
        uint64_t v90 = static os_log_type_t.default.getter(v86);
        uint64_t v91 = qword_100A2B018;
        uint64_t v92 = swift_allocObject(v67, 72LL, 7LL);
        *(_OWORD *)(v92 + swift_weakDestroy(v0 + 16) = v113;
        uint64_t v93 = v102;
        uint64_t v94 = v105;
        sub_10001DC4C(v102, v105, type metadata accessor for SafeLocation);
        uint64_t v95 = v94;
        uint64_t v96 = v101;
        uint64_t v97 = String.init<A>(describing:)(v95, v101);
        *(void *)(v92 + 56) = &type metadata for String;
        *(void *)(v92 + 64) = v73;
        *(void *)(v92 + 32) = v97;
        *(void *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29LL, 2LL, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100007864( (unint64_t *)&unk_1009B8190,  type metadata accessor for SafeLocation,  (uint64_t)&unk_10080F93C);
        uint64_t v99 = sub_10000A7C8(v119);
        sub_10001DC4C(v93, (uint64_t)v99, type metadata accessor for SafeLocation);
        PassthroughSubject.send(_:)(v119);
        sub_100016F9C(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        uint64_t v100 = v87;
      }

      else
      {
        id v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_100016F9C(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        uint64_t v100 = v56;
      }

      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }

void sub_1005381D0(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = a1;
  uint64_t v3 = type metadata accessor for LeashRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v112 = *(void *)(v6 - 8);
  *(void *)&__int128 v113 = v6;
  __chkstk_darwin(v6);
  unint64_t v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for URL(0LL);
  uint64_t v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  uint64_t v8 = __chkstk_darwin(v115);
  uint64_t v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  uint64_t v109 = (char *)&v101 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  id v24 = v118;
  id v23 = v119[0];
  uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *uint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v34 = PropertyListEncoder.init()(v33);
    uint64_t v35 = sub_100007864(&qword_1009B27E8, type metadata accessor for LeashRecord, (uint64_t)&unk_10081B42C);
    Class v36 = isa;
    uint64_t v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      uint64_t v41 = sub_1006C54D4(v39, v40, 0);
      unint64_t v43 = v42;
      uint64_t v103 = v39;
      unint64_t v104 = v40;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v41, v43);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099BA08 != -1) {
        swift_once(&qword_10099BA08, sub_10078065C);
      }
      uint64_t v44 = v115;
      uint64_t v45 = sub_10000A720(v115, (uint64_t)qword_100A2B770);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0LL);
      uint64_t v101 = (void *)v3;
      uint64_t v46 = *(int *)(v3 + 20);
      uint64_t v102 = a2;
      uint64_t v47 = v108;
      (*(void (**)(char *, uint64_t, void))(v112 + 16))(v108, a2 + v46, v113);
      uint64_t v48 = v107;
      uint64_t v49 = v106;
      v107[2](v106, v45, v44);
      uint64_t v50 = objc_autoreleasePoolPush();
      uint64_t v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      uint64_t v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      uint64_t v55 = v10;
      uint64_t v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      uint64_t v57 = v49;
      uint64_t v58 = v44;
      uint64_t v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      uint64_t v59 = (*(uint64_t (**)(char *, void))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      uint64_t v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1LL);

      objc_autoreleasePoolPop(v60);
      uint64_t v65 = static os_log_type_t.default.getter(v64);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v66 = qword_100A2B018;
      uint64_t v67 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v68 = swift_allocObject(v67, 72LL, 7LL);
      __int128 v113 = xmmword_1007E67D0;
      *(_OWORD *)(v68 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v69 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      uint64_t v72 = v71;
      *(void *)(v68 + 56) = &type metadata for String;
      unint64_t v73 = sub_1000226F4();
      *(void *)(v68 + 64) = v73;
      *(void *)(v68 + 32) = v70;
      *(void *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19LL, 2LL, v68);
      swift_bridgeObjectRelease();
      uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v113;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v76 = NSFileProtectionKey;
      uint64_t v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v78 = sub_10041299C(inited);
      id v79 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      NSString v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0LL;
      LODWORD(v72) = [v79 setAttributes:v80 ofItemAtPath:v82 error:v119];

      id v83 = v119[0];
      if ((_DWORD)v72)
      {
        id v84 = v119[0];
        id v85 = v114;
        uint64_t v87 = v56;
        uint64_t v86 = URL.setResourceValues(_:)(v114);
        uint64_t v90 = static os_log_type_t.default.getter(v86);
        uint64_t v91 = qword_100A2B018;
        uint64_t v92 = swift_allocObject(v67, 72LL, 7LL);
        *(_OWORD *)(v92 + swift_weakDestroy(v0 + 16) = v113;
        uint64_t v93 = v102;
        uint64_t v94 = v105;
        sub_10001DC4C(v102, v105, type metadata accessor for LeashRecord);
        uint64_t v95 = v94;
        uint64_t v96 = v101;
        uint64_t v97 = String.init<A>(describing:)(v95, v101);
        *(void *)(v92 + 56) = &type metadata for String;
        *(void *)(v92 + 64) = v73;
        *(void *)(v92 + 32) = v97;
        *(void *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29LL, 2LL, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100007864( (unint64_t *)&unk_1009BF8D0,  type metadata accessor for LeashRecord,  (uint64_t)&unk_10081B47C);
        uint64_t v99 = sub_10000A7C8(v119);
        sub_10001DC4C(v93, (uint64_t)v99, type metadata accessor for LeashRecord);
        PassthroughSubject.send(_:)(v119);
        sub_100016F9C(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        uint64_t v100 = v87;
      }

      else
      {
        id v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_100016F9C(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        uint64_t v100 = v56;
      }

      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }

void sub_100538BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v119 = a1;
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  __chkstk_darwin(found);
  uint64_t v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v116 = *(void *)(v6 - 8);
  *(void *)&__int128 v117 = v6;
  __chkstk_darwin(v6);
  uint64_t v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = type metadata accessor for URL(0LL);
  uint64_t v110 = *(void *)(v120 - 8);
  uint64_t v8 = __chkstk_darwin(v120);
  uint64_t v111 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  __int128 v113 = (char *)&v105 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v105 - v12;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  id v24 = v122;
  id v23 = v123[0];
  uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *uint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v34 = PropertyListEncoder.init()(v33);
    uint64_t v35 = sub_100007864(&qword_1009A4D58, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_1007F4AC4);
    Class v36 = isa;
    uint64_t v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, found, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      uint64_t v41 = a2;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      unint64_t v42 = sub_1006C54D4(v39, v40, 0);
      unint64_t v44 = v43;
      uint64_t v107 = v39;
      unint64_t v108 = v40;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v42, v44);
      uint64_t v106 = sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B1A8 != -1) {
        swift_once(&qword_10099B1A8, sub_1001BB8C8);
      }
      uint64_t v45 = v120;
      uint64_t v105 = sub_10000A720(v120, (uint64_t)qword_100A2A338);
      uint64_t v46 = UUID.uuidString.getter(v105);
      URL.appendingPathComponent(_:isDirectory:)(v46, v47, 1LL);
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0LL);
      uint64_t v48 = *(void (**)(char *, uint64_t))(v110 + 8);
      v48(v13, v45);
      uint64_t v106 = found;
      uint64_t v49 = *(int *)(found + 20);
      uint64_t v110 = v41;
      uint64_t v50 = v41 + v49;
      uint64_t v51 = v112;
      uint64_t v52 = (*(uint64_t (**)(char *, uint64_t, void))(v116 + 16))(v112, v50, v117);
      uint64_t v53 = UUID.uuidString.getter(v52);
      URL.appendingPathComponent(_:isDirectory:)(v53, v54, 1LL);
      swift_bridgeObjectRelease();
      uint64_t v55 = objc_autoreleasePoolPush();
      uint64_t v56 = UUID.uuidString.getter(v55);
      uint64_t v57 = v111;
      URL.appendingPathComponent(_:)(v56, v58);
      swift_bridgeObjectRelease();
      uint64_t v59 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v60 = v57;
      uint64_t v61 = v120;
      v48(v60, v120);
      objc_autoreleasePoolPop(v55);
      uint64_t v62 = v13;
      uint64_t v63 = v61;
      uint64_t v111 = (char *)v48;
      v48(v62, v61);
      uint64_t v64 = (*(uint64_t (**)(char *, void))(v116 + 8))(v51, v117);
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v65 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v66);
      uint64_t v68 = v67;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1LL);

      objc_autoreleasePoolPop(v65);
      uint64_t v70 = static os_log_type_t.default.getter(v69);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v71 = qword_100A2B018;
      uint64_t v72 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v73 = swift_allocObject(v72, 72LL, 7LL);
      __int128 v117 = xmmword_1007E67D0;
      *(_OWORD *)(v73 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v74 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v63, v74);
      uint64_t v76 = v59;
      uint64_t v78 = v77;
      *(void *)(v73 + 56) = &type metadata for String;
      unint64_t v79 = sub_1000226F4();
      *(void *)(v73 + 64) = v79;
      *(void *)(v73 + 32) = v75;
      *(void *)(v73 + 40) = v78;
      os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Writing to file: %@", 19LL, 2LL, v73);
      swift_bridgeObjectRelease();
      uint64_t v80 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v80, v124);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v117;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      NSString v82 = NSFileProtectionKey;
      id v83 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v84 = sub_10041299C(inited);
      id v85 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v84);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v87 = swift_bridgeObjectRelease();
      URL.path.getter(v87);
      NSString v88 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v123[0] = 0LL;
      LODWORD(v78) = [v85 setAttributes:v86 ofItemAtPath:v88 error:v123];

      id v89 = v123[0];
      if ((_DWORD)v78)
      {
        id v90 = v123[0];
        uint64_t v91 = v118;
        uint64_t v92 = URL.setResourceValues(_:)(v118);
        uint64_t v95 = static os_log_type_t.default.getter(v92);
        uint64_t v96 = qword_100A2B018;
        uint64_t v97 = swift_allocObject(v72, 72LL, 7LL);
        *(_OWORD *)(v97 + swift_weakDestroy(v0 + 16) = v117;
        uint64_t v98 = v110;
        uint64_t v99 = v109;
        sub_10001DC4C(v110, v109, type metadata accessor for NotifyWhenFoundRecord);
        uint64_t v100 = v99;
        uint64_t v101 = (void *)v106;
        uint64_t v102 = String.init<A>(describing:)(v100, v106);
        *(void *)(v97 + 56) = &type metadata for String;
        *(void *)(v97 + 64) = v79;
        *(void *)(v97 + 32) = v102;
        *(void *)(v97 + 40) = v103;
        os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Publishing record changed: %@", 29LL, 2LL, v97);
        swift_bridgeObjectRelease();
        v123[3] = v101;
        v123[4] = (id)sub_100007864( &qword_1009A4D60,  type metadata accessor for NotifyWhenFoundRecord,  (uint64_t)&unk_1007F4B14);
        unint64_t v104 = sub_10000A7C8(v123);
        sub_10001DC4C(v98, (uint64_t)v104, type metadata accessor for NotifyWhenFoundRecord);
        PassthroughSubject.send(_:)(v123);
        sub_100016F9C(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v91, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
      }

      else
      {
        id v93 = v123[0];
        _convertNSErrorToError(_:)(v89);

        swift_willThrow(v94);
        sub_100016F9C(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
      }

      ((void (*)(char *, uint64_t))v111)(v76, v120);
    }
  }

void sub_1005395D8(uint64_t a1, uint64_t a2)
{
  uint64_t v115 = a1;
  uint64_t v3 = type metadata accessor for BeaconNamingRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v104 = (uint64_t)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v114 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v112 = *(void *)(v6 - 8);
  *(void *)&__int128 v113 = v6;
  __chkstk_darwin(v6);
  unint64_t v108 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v116 = type metadata accessor for URL(0LL);
  uint64_t v105 = *(void *)(v116 - 8);
  uint64_t v8 = __chkstk_darwin(v116);
  uint64_t v106 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v107 = (char *)&v99 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v109 = (char *)&v99 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v99 - v14;
  uint64_t v16 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v18);
  id v23 = (char *)&v99 - v22;
  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, void, uint64_t))(v17 + 104))( v20,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v16);
  uint64_t v24 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v16, v24);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v16, v24);
  id v26 = v118;
  id v25 = v119[0];
  uint64_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v20, v16);
  uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v27)(v23, v16);
  if (v25 == v26)
  {
    uint64_t v29 = static os_log_type_t.default.getter(v28);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v30 = sub_1000220F0();
    uint64_t v31 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v30, 0LL, 0LL);
    *uint64_t v32 = 0;
    swift_willThrow(v31);
  }

  else
  {
    uint64_t v33 = objc_autoreleasePoolPush();
    uint64_t v34 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v35 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    uint64_t v36 = PropertyListEncoder.init()(v35);
    uint64_t v37 = sub_100007864( (unint64_t *)&unk_1009B5740,  type metadata accessor for BeaconNamingRecord,  (uint64_t)&unk_10080B598);
    Class v38 = isa;
    uint64_t v39 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v37);
    if (v38)
    {
      swift_release(v36);
      objc_autoreleasePoolPop(v33);
    }

    else
    {
      uint64_t v41 = v39;
      uint64_t v42 = v40;
      swift_release(v36);
      objc_autoreleasePoolPop(v33);
      unint64_t v43 = sub_1006C54D4(v41, v42, 0);
      unint64_t v45 = v44;
      uint64_t v102 = v41;
      unint64_t v103 = v42;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v43, v45);
      uint64_t v46 = objc_autoreleasePoolPush();
      sub_1005DD780();
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      objc_autoreleasePoolPop(v46);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v15, 0LL);
      uint64_t v47 = *(void (**)(char *, uint64_t))(v105 + 8);
      v47(v15, v116);
      uint64_t v48 = v108;
      (*(void (**)(char *, uint64_t, void))(v112 + 16))(v108, a2 + *(int *)(v3 + 20), v113);
      uint64_t v49 = objc_autoreleasePoolPush();
      uint64_t v50 = v107;
      sub_1005DD780();
      uint64_t v105 = 0LL;
      uint64_t v100 = (void *)v3;
      uint64_t v101 = a2;
      objc_autoreleasePoolPop(v49);
      uint64_t v51 = objc_autoreleasePoolPush();
      uint64_t v52 = UUID.uuidString.getter(v51);
      uint64_t v53 = v106;
      URL.appendingPathComponent(_:)(v52, v54);
      swift_bridgeObjectRelease();
      uint64_t v55 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v56 = v116;
      v47(v53, v116);
      objc_autoreleasePoolPop(v51);
      uint64_t v107 = (char *)v47;
      v47(v50, v56);
      uint64_t v57 = (*(uint64_t (**)(char *, void))(v112 + 8))(v48, v113);
      URLResourceValues.init()(v57);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v58 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v59);
      uint64_t v61 = v60;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v60, 1LL);

      objc_autoreleasePoolPop(v58);
      uint64_t v63 = static os_log_type_t.default.getter(v62);
      uint64_t v64 = v56;
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v65 = qword_100A2B018;
      uint64_t v66 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v67 = swift_allocObject(v66, 72LL, 7LL);
      __int128 v113 = xmmword_1007E67D0;
      *(_OWORD *)(v67 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v68 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v64, v68);
      uint64_t v71 = v70;
      *(void *)(v67 + 56) = &type metadata for String;
      unint64_t v72 = sub_1000226F4();
      *(void *)(v67 + 64) = v72;
      *(void *)(v67 + 32) = v69;
      *(void *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v63, &_mh_execute_header, v65, "Writing to file: %@", 19LL, 2LL, v67);
      swift_bridgeObjectRelease();
      uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v73, v120);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v113;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v75 = NSFileProtectionKey;
      uint64_t v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v77 = sub_10041299C(inited);
      id v78 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      NSString v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0LL;
      LOBYTE(v71) = [v78 setAttributes:v79 ofItemAtPath:v81 error:v119];

      id v82 = v119[0];
      if ((v71 & 1) != 0)
      {
        id v83 = v119[0];
        unint64_t v84 = v114;
        uint64_t v85 = v105;
        uint64_t v86 = URL.setResourceValues(_:)(v114);
        uint64_t v87 = (void (*)(char *, uint64_t))v107;
        if (v85)
        {
          (*(void (**)(char *, uint64_t))(v110 + 8))(v84, v111);

          sub_100016F9C(v102, v103);
        }

        else
        {
          uint64_t v90 = static os_log_type_t.default.getter(v86);
          uint64_t v112 = qword_100A2B018;
          uint64_t v91 = swift_allocObject(v66, 72LL, 7LL);
          *(_OWORD *)(v91 + swift_weakDestroy(v0 + 16) = v113;
          uint64_t v92 = v101;
          uint64_t v93 = v104;
          sub_10001DC4C(v101, v104, type metadata accessor for BeaconNamingRecord);
          uint64_t v94 = v93;
          uint64_t v95 = v100;
          uint64_t v96 = String.init<A>(describing:)(v94, v100);
          *(void *)(v91 + 56) = &type metadata for String;
          *(void *)(v91 + 64) = v72;
          *(void *)(v91 + 32) = v96;
          *(void *)(v91 + 40) = v97;
          os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v112, "Publishing record changed: %@", 29LL, 2LL, v91);
          swift_bridgeObjectRelease();
          v119[3] = v95;
          v119[4] = (id)sub_100007864( &qword_1009B2880,  type metadata accessor for BeaconNamingRecord,  (uint64_t)&unk_10080B5E8);
          uint64_t v98 = sub_10000A7C8(v119);
          sub_10001DC4C(v92, (uint64_t)v98, type metadata accessor for BeaconNamingRecord);
          PassthroughSubject.send(_:)(v119);
          sub_100016F9C(v102, v103);

          (*(void (**)(char *, uint64_t))(v110 + 8))(v84, v111);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        }

        v87(v55, v116);
      }

      else
      {
        id v88 = v119[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v89);
        sub_100016F9C(v102, v103);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        ((void (*)(char *, uint64_t))v107)(v55, v116);
      }
    }
  }

void sub_10053A01C(uint64_t a1, uint64_t a2)
{
  uint64_t v119 = a1;
  uint64_t v3 = type metadata accessor for ShareRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v116 = *(void *)(v6 - 8);
  *(void *)&__int128 v117 = v6;
  __chkstk_darwin(v6);
  uint64_t v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = type metadata accessor for URL(0LL);
  uint64_t v110 = *(void *)(v120 - 8);
  uint64_t v8 = __chkstk_darwin(v120);
  uint64_t v111 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  __int128 v113 = (char *)&v105 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v105 - v12;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  id v24 = v122;
  id v23 = v123[0];
  id v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v34 = PropertyListEncoder.init()(v33);
    uint64_t v35 = sub_100007864(&qword_10099DA10, type metadata accessor for ShareRecord, (uint64_t)&unk_1007E712C);
    Class v36 = isa;
    uint64_t v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      uint64_t v41 = a2;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      uint64_t v42 = sub_1006C54D4(v39, v40, 0);
      unint64_t v44 = v43;
      uint64_t v107 = v39;
      unint64_t v108 = v40;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v42, v44);
      uint64_t v106 = sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B078 != -1) {
        swift_once(&qword_10099B078, sub_10003D920);
      }
      uint64_t v45 = v120;
      uint64_t v105 = sub_10000A720(v120, (uint64_t)qword_100A29F08);
      uint64_t v46 = UUID.uuidString.getter(v105);
      URL.appendingPathComponent(_:isDirectory:)(v46, v47, 1LL);
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0LL);
      uint64_t v48 = *(void (**)(char *, uint64_t))(v110 + 8);
      v48(v13, v45);
      uint64_t v106 = v3;
      uint64_t v49 = *(int *)(v3 + 20);
      uint64_t v110 = v41;
      uint64_t v50 = v41 + v49;
      uint64_t v51 = v112;
      uint64_t v52 = (*(uint64_t (**)(char *, uint64_t, void))(v116 + 16))(v112, v50, v117);
      uint64_t v53 = UUID.uuidString.getter(v52);
      URL.appendingPathComponent(_:isDirectory:)(v53, v54, 1LL);
      swift_bridgeObjectRelease();
      uint64_t v55 = objc_autoreleasePoolPush();
      uint64_t v56 = UUID.uuidString.getter(v55);
      uint64_t v57 = v111;
      URL.appendingPathComponent(_:)(v56, v58);
      swift_bridgeObjectRelease();
      uint64_t v59 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v60 = v57;
      uint64_t v61 = v120;
      v48(v60, v120);
      objc_autoreleasePoolPop(v55);
      uint64_t v62 = v13;
      uint64_t v63 = v61;
      uint64_t v111 = (char *)v48;
      v48(v62, v61);
      uint64_t v64 = (*(uint64_t (**)(char *, void))(v116 + 8))(v51, v117);
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v65 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v66);
      uint64_t v68 = v67;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1LL);

      objc_autoreleasePoolPop(v65);
      uint64_t v70 = static os_log_type_t.default.getter(v69);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v71 = qword_100A2B018;
      uint64_t v72 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v73 = swift_allocObject(v72, 72LL, 7LL);
      __int128 v117 = xmmword_1007E67D0;
      *(_OWORD *)(v73 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v74 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v63, v74);
      uint64_t v76 = v59;
      uint64_t v78 = v77;
      *(void *)(v73 + 56) = &type metadata for String;
      unint64_t v79 = sub_1000226F4();
      *(void *)(v73 + 64) = v79;
      *(void *)(v73 + 32) = v75;
      *(void *)(v73 + 40) = v78;
      os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Writing to file: %@", 19LL, 2LL, v73);
      swift_bridgeObjectRelease();
      uint64_t v80 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v80, v124);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v117;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      id v82 = NSFileProtectionKey;
      id v83 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v84 = sub_10041299C(inited);
      id v85 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v84);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v87 = swift_bridgeObjectRelease();
      URL.path.getter(v87);
      NSString v88 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v123[0] = 0LL;
      LODWORD(v78) = [v85 setAttributes:v86 ofItemAtPath:v88 error:v123];

      id v89 = v123[0];
      if ((_DWORD)v78)
      {
        id v90 = v123[0];
        uint64_t v91 = v118;
        uint64_t v92 = URL.setResourceValues(_:)(v118);
        uint64_t v95 = static os_log_type_t.default.getter(v92);
        uint64_t v96 = qword_100A2B018;
        uint64_t v97 = swift_allocObject(v72, 72LL, 7LL);
        *(_OWORD *)(v97 + swift_weakDestroy(v0 + 16) = v117;
        uint64_t v98 = v110;
        uint64_t v99 = v109;
        sub_10001DC4C(v110, v109, type metadata accessor for ShareRecord);
        uint64_t v100 = v99;
        uint64_t v101 = (void *)v106;
        uint64_t v102 = String.init<A>(describing:)(v100, v106);
        *(void *)(v97 + 56) = &type metadata for String;
        *(void *)(v97 + 64) = v79;
        *(void *)(v97 + 32) = v102;
        *(void *)(v97 + 40) = v103;
        os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Publishing record changed: %@", 29LL, 2LL, v97);
        swift_bridgeObjectRelease();
        v123[3] = v101;
        v123[4] = (id)sub_100007864(&qword_10099DA18, type metadata accessor for ShareRecord, (uint64_t)&unk_1007E7110);
        uint64_t v104 = sub_10000A7C8(v123);
        sub_10001DC4C(v98, (uint64_t)v104, type metadata accessor for ShareRecord);
        PassthroughSubject.send(_:)(v123);
        sub_100016F9C(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v91, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
      }

      else
      {
        id v93 = v123[0];
        _convertNSErrorToError(_:)(v89);

        swift_willThrow(v94);
        sub_100016F9C(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
      }

      ((void (*)(char *, uint64_t))v111)(v76, v120);
    }
  }

void sub_10053AA54(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = a1;
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup(0LL);
  __chkstk_darwin(v3);
  uint64_t v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v112 = *(void *)(v6 - 8);
  *(void *)&__int128 v113 = v6;
  __chkstk_darwin(v6);
  unint64_t v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for URL(0LL);
  uint64_t v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  uint64_t v8 = __chkstk_darwin(v115);
  uint64_t v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  uint64_t v109 = (char *)&v101 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  id v24 = v118;
  id v23 = v119[0];
  id v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v34 = PropertyListEncoder.init()(v33);
    uint64_t v35 = sub_100007864(&qword_1009A5820, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_1007F5E30);
    Class v36 = isa;
    uint64_t v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      uint64_t v41 = sub_1006C54D4(v39, v40, 0);
      unint64_t v43 = v42;
      uint64_t v103 = v39;
      unint64_t v104 = v40;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v41, v43);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B1B8 != -1) {
        swift_once(&qword_10099B1B8, sub_1001CFC94);
      }
      uint64_t v44 = v115;
      uint64_t v45 = sub_10000A720(v115, (uint64_t)qword_100A2A358);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0LL);
      uint64_t v101 = (void *)v3;
      uint64_t v46 = *(int *)(v3 + 24);
      uint64_t v102 = a2;
      uint64_t v47 = v108;
      (*(void (**)(char *, uint64_t, void))(v112 + 16))(v108, a2 + v46, v113);
      uint64_t v48 = v107;
      uint64_t v49 = v106;
      v107[2](v106, v45, v44);
      uint64_t v50 = objc_autoreleasePoolPush();
      uint64_t v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      uint64_t v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      uint64_t v55 = v10;
      uint64_t v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      uint64_t v57 = v49;
      uint64_t v58 = v44;
      uint64_t v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      uint64_t v59 = (*(uint64_t (**)(char *, void))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      uint64_t v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1LL);

      objc_autoreleasePoolPop(v60);
      uint64_t v65 = static os_log_type_t.default.getter(v64);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v66 = qword_100A2B018;
      uint64_t v67 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v68 = swift_allocObject(v67, 72LL, 7LL);
      __int128 v113 = xmmword_1007E67D0;
      *(_OWORD *)(v68 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v69 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      uint64_t v72 = v71;
      *(void *)(v68 + 56) = &type metadata for String;
      unint64_t v73 = sub_1000226F4();
      *(void *)(v68 + 64) = v73;
      *(void *)(v68 + 32) = v70;
      *(void *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19LL, 2LL, v68);
      swift_bridgeObjectRelease();
      uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v113;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v76 = NSFileProtectionKey;
      uint64_t v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v78 = sub_10041299C(inited);
      id v79 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      NSString v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0LL;
      LODWORD(v72) = [v79 setAttributes:v80 ofItemAtPath:v82 error:v119];

      id v83 = v119[0];
      if ((_DWORD)v72)
      {
        id v84 = v119[0];
        id v85 = v114;
        uint64_t v87 = v56;
        uint64_t v86 = URL.setResourceValues(_:)(v114);
        uint64_t v90 = static os_log_type_t.default.getter(v86);
        uint64_t v91 = qword_100A2B018;
        uint64_t v92 = swift_allocObject(v67, 72LL, 7LL);
        *(_OWORD *)(v92 + swift_weakDestroy(v0 + 16) = v113;
        uint64_t v93 = v102;
        uint64_t v94 = v105;
        sub_10001DC4C(v102, v105, type metadata accessor for OwnedBeaconGroup);
        uint64_t v95 = v94;
        uint64_t v96 = v101;
        uint64_t v97 = String.init<A>(describing:)(v95, v101);
        *(void *)(v92 + 56) = &type metadata for String;
        *(void *)(v92 + 64) = v73;
        *(void *)(v92 + 32) = v97;
        *(void *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29LL, 2LL, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100007864( &qword_1009A5828,  type metadata accessor for OwnedBeaconGroup,  (uint64_t)&unk_1007F5E80);
        uint64_t v99 = sub_10000A7C8(v119);
        sub_10001DC4C(v93, (uint64_t)v99, type metadata accessor for OwnedBeaconGroup);
        PassthroughSubject.send(_:)(v119);
        sub_100016F9C(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        uint64_t v100 = v87;
      }

      else
      {
        id v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_100016F9C(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        uint64_t v100 = v56;
      }

      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }

void sub_10053B424(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = a1;
  uint64_t v3 = type metadata accessor for SharedBeaconRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v112 = *(void *)(v6 - 8);
  *(void *)&__int128 v113 = v6;
  __chkstk_darwin(v6);
  unint64_t v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for URL(0LL);
  uint64_t v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  uint64_t v8 = __chkstk_darwin(v115);
  uint64_t v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  uint64_t v109 = (char *)&v101 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  id v24 = v118;
  id v23 = v119[0];
  id v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v34 = PropertyListEncoder.init()(v33);
    uint64_t v35 = sub_100007864( (unint64_t *)&unk_1009BEF30,  type metadata accessor for SharedBeaconRecord,  (uint64_t)&unk_10081ACBC);
    Class v36 = isa;
    uint64_t v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      uint64_t v41 = sub_1006C54D4(v39, v40, 0);
      unint64_t v43 = v42;
      uint64_t v103 = v39;
      unint64_t v104 = v40;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v41, v43);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B9E8 != -1) {
        swift_once(&qword_10099B9E8, sub_100763874);
      }
      uint64_t v44 = v115;
      uint64_t v45 = sub_10000A720(v115, (uint64_t)qword_100A2B738);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0LL);
      uint64_t v101 = (void *)v3;
      uint64_t v46 = *(int *)(v3 + 20);
      uint64_t v102 = a2;
      uint64_t v47 = v108;
      (*(void (**)(char *, uint64_t, void))(v112 + 16))(v108, a2 + v46, v113);
      uint64_t v48 = v107;
      uint64_t v49 = v106;
      v107[2](v106, v45, v44);
      uint64_t v50 = objc_autoreleasePoolPush();
      uint64_t v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      uint64_t v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      uint64_t v55 = v10;
      uint64_t v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      uint64_t v57 = v49;
      uint64_t v58 = v44;
      uint64_t v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      uint64_t v59 = (*(uint64_t (**)(char *, void))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      uint64_t v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1LL);

      objc_autoreleasePoolPop(v60);
      uint64_t v65 = static os_log_type_t.default.getter(v64);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v66 = qword_100A2B018;
      uint64_t v67 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v68 = swift_allocObject(v67, 72LL, 7LL);
      __int128 v113 = xmmword_1007E67D0;
      *(_OWORD *)(v68 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v69 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      uint64_t v72 = v71;
      *(void *)(v68 + 56) = &type metadata for String;
      unint64_t v73 = sub_1000226F4();
      *(void *)(v68 + 64) = v73;
      *(void *)(v68 + 32) = v70;
      *(void *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19LL, 2LL, v68);
      swift_bridgeObjectRelease();
      uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v113;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v76 = NSFileProtectionKey;
      uint64_t v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v78 = sub_10041299C(inited);
      id v79 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      NSString v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0LL;
      LODWORD(v72) = [v79 setAttributes:v80 ofItemAtPath:v82 error:v119];

      id v83 = v119[0];
      if ((_DWORD)v72)
      {
        id v84 = v119[0];
        id v85 = v114;
        uint64_t v87 = v56;
        uint64_t v86 = URL.setResourceValues(_:)(v114);
        uint64_t v90 = static os_log_type_t.default.getter(v86);
        uint64_t v91 = qword_100A2B018;
        uint64_t v92 = swift_allocObject(v67, 72LL, 7LL);
        *(_OWORD *)(v92 + swift_weakDestroy(v0 + 16) = v113;
        uint64_t v93 = v102;
        uint64_t v94 = v105;
        sub_10001DC4C(v102, v105, type metadata accessor for SharedBeaconRecord);
        uint64_t v95 = v94;
        uint64_t v96 = v101;
        uint64_t v97 = String.init<A>(describing:)(v95, v101);
        *(void *)(v92 + 56) = &type metadata for String;
        *(void *)(v92 + 64) = v73;
        *(void *)(v92 + 32) = v97;
        *(void *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29LL, 2LL, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100007864( &qword_1009B2878,  type metadata accessor for SharedBeaconRecord,  (uint64_t)&unk_10081AD0C);
        uint64_t v99 = sub_10000A7C8(v119);
        sub_10001DC4C(v93, (uint64_t)v99, type metadata accessor for SharedBeaconRecord);
        PassthroughSubject.send(_:)(v119);
        sub_100016F9C(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        uint64_t v100 = v87;
      }

      else
      {
        id v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_100016F9C(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        uint64_t v100 = v56;
      }

      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }

void sub_10053BDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = a1;
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v112 = *(void *)(v6 - 8);
  *(void *)&__int128 v113 = v6;
  __chkstk_darwin(v6);
  unint64_t v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for URL(0LL);
  uint64_t v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  uint64_t v8 = __chkstk_darwin(v115);
  uint64_t v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  uint64_t v109 = (char *)&v101 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  id v24 = v118;
  id v23 = v119[0];
  id v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v34 = PropertyListEncoder.init()(v33);
    uint64_t v35 = sub_100007864(&qword_1009B2870, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_10080AFE8);
    Class v36 = isa;
    uint64_t v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      uint64_t v41 = sub_1006C54D4(v39, v40, 0);
      unint64_t v43 = v42;
      uint64_t v103 = v39;
      unint64_t v104 = v40;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v41, v43);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B610 != -1) {
        swift_once(&qword_10099B610, sub_1005D3C50);
      }
      uint64_t v44 = v115;
      uint64_t v45 = sub_10000A720(v115, (uint64_t)qword_100A2AE80);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0LL);
      uint64_t v101 = (void *)v3;
      uint64_t v46 = *(int *)(v3 + 20);
      uint64_t v102 = a2;
      uint64_t v47 = v108;
      (*(void (**)(char *, uint64_t, void))(v112 + 16))(v108, a2 + v46, v113);
      uint64_t v48 = v107;
      uint64_t v49 = v106;
      v107[2](v106, v45, v44);
      uint64_t v50 = objc_autoreleasePoolPush();
      uint64_t v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      uint64_t v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      uint64_t v55 = v10;
      uint64_t v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      uint64_t v57 = v49;
      uint64_t v58 = v44;
      uint64_t v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      uint64_t v59 = (*(uint64_t (**)(char *, void))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      uint64_t v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1LL);

      objc_autoreleasePoolPop(v60);
      uint64_t v65 = static os_log_type_t.default.getter(v64);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v66 = qword_100A2B018;
      uint64_t v67 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v68 = swift_allocObject(v67, 72LL, 7LL);
      __int128 v113 = xmmword_1007E67D0;
      *(_OWORD *)(v68 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v69 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      uint64_t v72 = v71;
      *(void *)(v68 + 56) = &type metadata for String;
      unint64_t v73 = sub_1000226F4();
      *(void *)(v68 + 64) = v73;
      *(void *)(v68 + 32) = v70;
      *(void *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19LL, 2LL, v68);
      swift_bridgeObjectRelease();
      uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v113;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v76 = NSFileProtectionKey;
      uint64_t v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v78 = sub_10041299C(inited);
      id v79 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      NSString v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0LL;
      LODWORD(v72) = [v79 setAttributes:v80 ofItemAtPath:v82 error:v119];

      id v83 = v119[0];
      if ((_DWORD)v72)
      {
        id v84 = v119[0];
        id v85 = v114;
        uint64_t v87 = v56;
        uint64_t v86 = URL.setResourceValues(_:)(v114);
        uint64_t v90 = static os_log_type_t.default.getter(v86);
        uint64_t v91 = qword_100A2B018;
        uint64_t v92 = swift_allocObject(v67, 72LL, 7LL);
        *(_OWORD *)(v92 + swift_weakDestroy(v0 + 16) = v113;
        uint64_t v93 = v102;
        uint64_t v94 = v105;
        sub_10001DC4C(v102, v105, type metadata accessor for OwnedBeaconRecord);
        uint64_t v95 = v94;
        uint64_t v96 = v101;
        uint64_t v97 = String.init<A>(describing:)(v95, v101);
        *(void *)(v92 + 56) = &type metadata for String;
        *(void *)(v92 + 64) = v73;
        *(void *)(v92 + 32) = v97;
        *(void *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29LL, 2LL, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100007864( &qword_1009B5350,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B038);
        uint64_t v99 = sub_10000A7C8(v119);
        sub_10001DC4C(v93, (uint64_t)v99, type metadata accessor for OwnedBeaconRecord);
        PassthroughSubject.send(_:)(v119);
        sub_100016F9C(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        uint64_t v100 = v87;
      }

      else
      {
        id v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_100016F9C(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        uint64_t v100 = v56;
      }

      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }

void sub_10053C7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v115 = a1;
  uint64_t v3 = type metadata accessor for PairingErrorRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v104 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  __int128 v113 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v111 = *(void *)(v6 - 8);
  *(void *)&__int128 v112 = v6;
  __chkstk_darwin(v6);
  uint64_t v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for URL(0LL);
  uint64_t v106 = *(void (***)(char *, uint64_t, uint64_t))(v114 - 8);
  uint64_t v8 = __chkstk_darwin(v114);
  uint64_t v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v105 = (char *)&v100 - v12;
  __chkstk_darwin(v11);
  unint64_t v108 = (char *)&v100 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v100 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v118, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v117, v14, v22);
  id v24 = v117;
  id v23 = v118[0];
  id v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    uint64_t v34 = sub_100007864(&qword_1009B2C78, type metadata accessor for PairingErrorRecord, (uint64_t)&unk_10080A914);
    Class v35 = isa;
    uint64_t v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v38 = v36;
      uint64_t v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v31);
      uint64_t v40 = sub_1006C54D4(v38, v39, 0);
      unint64_t v42 = v41;
      uint64_t v102 = v38;
      unint64_t v103 = v39;
      uint64_t v100 = (void *)v3;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v40, v42);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B600 != -1) {
        swift_once(&qword_10099B600, sub_1005CAED0);
      }
      uint64_t v43 = v114;
      uint64_t v44 = sub_10000A720(v114, (uint64_t)qword_100A2AE58);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v44, 0LL);
      uint64_t v45 = *(void (**)(char *, uint64_t, void))(v111 + 16);
      uint64_t v46 = v107;
      uint64_t v101 = a2;
      v45(v107, a2, v112);
      uint64_t v47 = v106;
      uint64_t v48 = v105;
      v106[2](v105, v44, v43);
      uint64_t v49 = objc_autoreleasePoolPush();
      uint64_t v50 = UUID.uuidString.getter(v49);
      URL.appendingPathComponent(_:)(v50, v51);
      swift_bridgeObjectRelease();
      uint64_t v52 = v108;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))v47[1];
      uint64_t v54 = v10;
      uint64_t v55 = v52;
      ((void (*)(char *, uint64_t))v53)(v54, v43);
      objc_autoreleasePoolPop(v49);
      uint64_t v56 = v48;
      uint64_t v57 = v43;
      uint64_t v106 = v53;
      ((void (*)(char *, uint64_t))v53)(v56, v43);
      uint64_t v58 = (*(uint64_t (**)(char *, void))(v111 + 8))(v46, v112);
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v59 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v60);
      uint64_t v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1LL);

      objc_autoreleasePoolPop(v59);
      uint64_t v64 = static os_log_type_t.default.getter(v63);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v65 = qword_100A2B018;
      uint64_t v66 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v67 = swift_allocObject(v66, 72LL, 7LL);
      __int128 v112 = xmmword_1007E67D0;
      *(_OWORD *)(v67 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v68 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v57, v68);
      uint64_t v71 = v70;
      *(void *)(v67 + 56) = &type metadata for String;
      unint64_t v72 = sub_1000226F4();
      *(void *)(v67 + 64) = v72;
      *(void *)(v67 + 32) = v69;
      *(void *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Writing to file: %@", 19LL, 2LL, v67);
      swift_bridgeObjectRelease();
      uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v73, v119);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v112;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v75 = NSFileProtectionKey;
      uint64_t v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v77 = sub_10041299C(inited);
      id v78 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      NSString v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v118[0] = 0LL;
      LODWORD(v71) = [v78 setAttributes:v79 ofItemAtPath:v81 error:v118];

      id v82 = v118[0];
      if ((_DWORD)v71)
      {
        id v83 = v118[0];
        id v84 = v113;
        uint64_t v86 = v55;
        uint64_t v85 = URL.setResourceValues(_:)(v113);
        uint64_t v89 = static os_log_type_t.default.getter(v85);
        uint64_t v90 = qword_100A2B018;
        uint64_t v91 = swift_allocObject(v66, 72LL, 7LL);
        *(_OWORD *)(v91 + swift_weakDestroy(v0 + 16) = v112;
        uint64_t v92 = v101;
        uint64_t v93 = v104;
        sub_10001DC4C(v101, v104, type metadata accessor for PairingErrorRecord);
        uint64_t v94 = v93;
        uint64_t v95 = v100;
        uint64_t v96 = String.init<A>(describing:)(v94, v100);
        *(void *)(v91 + 56) = &type metadata for String;
        *(void *)(v91 + 64) = v72;
        *(void *)(v91 + 32) = v96;
        *(void *)(v91 + 40) = v97;
        os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Publishing record changed: %@", 29LL, 2LL, v91);
        swift_bridgeObjectRelease();
        v118[3] = v95;
        v118[4] = (id)sub_100007864( &qword_1009B2C80,  type metadata accessor for PairingErrorRecord,  (uint64_t)&unk_10080A8F8);
        uint64_t v98 = sub_10000A7C8(v118);
        sub_10001DC4C(v92, (uint64_t)v98, type metadata accessor for PairingErrorRecord);
        PassthroughSubject.send(_:)(v118);
        sub_100016F9C(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v110);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        uint64_t v99 = v86;
      }

      else
      {
        id v87 = v118[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v88);
        sub_100016F9C(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v113, v110);
        uint64_t v99 = v55;
      }

      ((void (*)(char *, uint64_t))v106)(v99, v114);
    }
  }

void sub_10053D194(uint64_t a1, uint64_t a2)
{
  uint64_t v115 = a1;
  uint64_t v3 = type metadata accessor for WildModeAssociationRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v104 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  __int128 v113 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v111 = *(void *)(v6 - 8);
  *(void *)&__int128 v112 = v6;
  __chkstk_darwin(v6);
  uint64_t v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for URL(0LL);
  uint64_t v106 = *(void (***)(char *, uint64_t, uint64_t))(v114 - 8);
  uint64_t v8 = __chkstk_darwin(v114);
  uint64_t v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v105 = (char *)&v100 - v12;
  __chkstk_darwin(v11);
  unint64_t v108 = (char *)&v100 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v100 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v118, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v117, v14, v22);
  id v24 = v117;
  id v23 = v118[0];
  id v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    uint64_t v34 = sub_100007864(&qword_1009A0F38, type metadata accessor for WildModeAssociationRecord, (uint64_t)&unk_1007EBA2C);
    Class v35 = isa;
    uint64_t v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v38 = v36;
      uint64_t v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v31);
      uint64_t v40 = sub_1006C54D4(v38, v39, 0);
      unint64_t v42 = v41;
      uint64_t v102 = v38;
      unint64_t v103 = v39;
      uint64_t v100 = (void *)v3;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v40, v42);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B100 != -1) {
        swift_once(&qword_10099B100, sub_1000E2B04);
      }
      uint64_t v43 = v114;
      uint64_t v44 = sub_10000A720(v114, (uint64_t)qword_100A2A1B0);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v44, 0LL);
      uint64_t v45 = *(void (**)(char *, uint64_t, void))(v111 + 16);
      uint64_t v46 = v107;
      uint64_t v101 = a2;
      v45(v107, a2, v112);
      uint64_t v47 = v106;
      uint64_t v48 = v105;
      v106[2](v105, v44, v43);
      uint64_t v49 = objc_autoreleasePoolPush();
      uint64_t v50 = UUID.uuidString.getter(v49);
      URL.appendingPathComponent(_:)(v50, v51);
      swift_bridgeObjectRelease();
      uint64_t v52 = v108;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))v47[1];
      uint64_t v54 = v10;
      uint64_t v55 = v52;
      ((void (*)(char *, uint64_t))v53)(v54, v43);
      objc_autoreleasePoolPop(v49);
      uint64_t v56 = v48;
      uint64_t v57 = v43;
      uint64_t v106 = v53;
      ((void (*)(char *, uint64_t))v53)(v56, v43);
      uint64_t v58 = (*(uint64_t (**)(char *, void))(v111 + 8))(v46, v112);
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v59 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v60);
      uint64_t v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1LL);

      objc_autoreleasePoolPop(v59);
      uint64_t v64 = static os_log_type_t.default.getter(v63);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v65 = qword_100A2B018;
      uint64_t v66 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v67 = swift_allocObject(v66, 72LL, 7LL);
      __int128 v112 = xmmword_1007E67D0;
      *(_OWORD *)(v67 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v68 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v57, v68);
      uint64_t v71 = v70;
      *(void *)(v67 + 56) = &type metadata for String;
      unint64_t v72 = sub_1000226F4();
      *(void *)(v67 + 64) = v72;
      *(void *)(v67 + 32) = v69;
      *(void *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Writing to file: %@", 19LL, 2LL, v67);
      swift_bridgeObjectRelease();
      uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v73, v119);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v112;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v75 = NSFileProtectionKey;
      uint64_t v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v77 = sub_10041299C(inited);
      id v78 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      NSString v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v118[0] = 0LL;
      LODWORD(v71) = [v78 setAttributes:v79 ofItemAtPath:v81 error:v118];

      id v82 = v118[0];
      if ((_DWORD)v71)
      {
        id v83 = v118[0];
        id v84 = v113;
        uint64_t v86 = v55;
        uint64_t v85 = URL.setResourceValues(_:)(v113);
        uint64_t v89 = static os_log_type_t.default.getter(v85);
        uint64_t v90 = qword_100A2B018;
        uint64_t v91 = swift_allocObject(v66, 72LL, 7LL);
        *(_OWORD *)(v91 + swift_weakDestroy(v0 + 16) = v112;
        uint64_t v92 = v101;
        uint64_t v93 = v104;
        sub_10001DC4C(v101, v104, type metadata accessor for WildModeAssociationRecord);
        uint64_t v94 = v93;
        uint64_t v95 = v100;
        uint64_t v96 = String.init<A>(describing:)(v94, v100);
        *(void *)(v91 + 56) = &type metadata for String;
        *(void *)(v91 + 64) = v72;
        *(void *)(v91 + 32) = v96;
        *(void *)(v91 + 40) = v97;
        os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Publishing record changed: %@", 29LL, 2LL, v91);
        swift_bridgeObjectRelease();
        v118[3] = v95;
        v118[4] = (id)sub_100007864( &qword_1009B28C8,  type metadata accessor for WildModeAssociationRecord,  (uint64_t)&unk_1007EBA7C);
        uint64_t v98 = sub_10000A7C8(v118);
        sub_10001DC4C(v92, (uint64_t)v98, type metadata accessor for WildModeAssociationRecord);
        PassthroughSubject.send(_:)(v118);
        sub_100016F9C(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v110);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        uint64_t v99 = v86;
      }

      else
      {
        id v87 = v118[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v88);
        sub_100016F9C(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v113, v110);
        uint64_t v99 = v55;
      }

      ((void (*)(char *, uint64_t))v106)(v99, v114);
    }
  }

void sub_10053DB64(uint64_t a1, uint64_t a2)
{
  uint64_t v115 = a1;
  uint64_t v3 = type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  __chkstk_darwin(v3);
  uint64_t v104 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  __int128 v113 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v111 = *(void *)(v6 - 8);
  *(void *)&__int128 v112 = v6;
  __chkstk_darwin(v6);
  uint64_t v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for URL(0LL);
  uint64_t v106 = *(void (***)(char *, uint64_t, uint64_t))(v114 - 8);
  uint64_t v8 = __chkstk_darwin(v114);
  uint64_t v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v105 = (char *)&v100 - v12;
  __chkstk_darwin(v11);
  unint64_t v108 = (char *)&v100 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v100 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v118, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v117, v14, v22);
  id v24 = v117;
  id v23 = v118[0];
  id v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    uint64_t v34 = sub_100007864( &qword_1009B2C00,  type metadata accessor for SecureLocationsCachedSharedKey,  (uint64_t)&unk_100807970);
    Class v35 = isa;
    uint64_t v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v38 = v36;
      uint64_t v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v31);
      uint64_t v40 = sub_1006C54D4(v38, v39, 0);
      unint64_t v42 = v41;
      uint64_t v102 = v38;
      unint64_t v103 = v39;
      uint64_t v100 = (void *)v3;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v40, v42);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B578 != -1) {
        swift_once(&qword_10099B578, sub_1005811B4);
      }
      uint64_t v43 = v114;
      uint64_t v44 = sub_10000A720(v114, (uint64_t)qword_100A2AD10);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v44, 0LL);
      uint64_t v45 = *(void (**)(char *, uint64_t, void))(v111 + 16);
      uint64_t v46 = v107;
      uint64_t v101 = a2;
      v45(v107, a2, v112);
      uint64_t v47 = v106;
      uint64_t v48 = v105;
      v106[2](v105, v44, v43);
      uint64_t v49 = objc_autoreleasePoolPush();
      uint64_t v50 = UUID.uuidString.getter(v49);
      URL.appendingPathComponent(_:)(v50, v51);
      swift_bridgeObjectRelease();
      uint64_t v52 = v108;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))v47[1];
      uint64_t v54 = v10;
      uint64_t v55 = v52;
      ((void (*)(char *, uint64_t))v53)(v54, v43);
      objc_autoreleasePoolPop(v49);
      uint64_t v56 = v48;
      uint64_t v57 = v43;
      uint64_t v106 = v53;
      ((void (*)(char *, uint64_t))v53)(v56, v43);
      uint64_t v58 = (*(uint64_t (**)(char *, void))(v111 + 8))(v46, v112);
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v59 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v60);
      uint64_t v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1LL);

      objc_autoreleasePoolPop(v59);
      uint64_t v64 = static os_log_type_t.default.getter(v63);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v65 = qword_100A2B018;
      uint64_t v66 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v67 = swift_allocObject(v66, 72LL, 7LL);
      __int128 v112 = xmmword_1007E67D0;
      *(_OWORD *)(v67 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v68 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v57, v68);
      uint64_t v71 = v70;
      *(void *)(v67 + 56) = &type metadata for String;
      unint64_t v72 = sub_1000226F4();
      *(void *)(v67 + 64) = v72;
      *(void *)(v67 + 32) = v69;
      *(void *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Writing to file: %@", 19LL, 2LL, v67);
      swift_bridgeObjectRelease();
      uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v73, v119);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v112;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v75 = NSFileProtectionKey;
      uint64_t v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v77 = sub_10041299C(inited);
      id v78 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      NSString v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v118[0] = 0LL;
      LODWORD(v71) = [v78 setAttributes:v79 ofItemAtPath:v81 error:v118];

      id v82 = v118[0];
      if ((_DWORD)v71)
      {
        id v83 = v118[0];
        id v84 = v113;
        uint64_t v86 = v55;
        uint64_t v85 = URL.setResourceValues(_:)(v113);
        uint64_t v89 = static os_log_type_t.default.getter(v85);
        uint64_t v90 = qword_100A2B018;
        uint64_t v91 = swift_allocObject(v66, 72LL, 7LL);
        *(_OWORD *)(v91 + swift_weakDestroy(v0 + 16) = v112;
        uint64_t v92 = v101;
        uint64_t v93 = v104;
        sub_10001DC4C(v101, v104, type metadata accessor for SecureLocationsCachedSharedKey);
        uint64_t v94 = v93;
        uint64_t v95 = v100;
        uint64_t v96 = String.init<A>(describing:)(v94, v100);
        *(void *)(v91 + 56) = &type metadata for String;
        *(void *)(v91 + 64) = v72;
        *(void *)(v91 + 32) = v96;
        *(void *)(v91 + 40) = v97;
        os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Publishing record changed: %@", 29LL, 2LL, v91);
        swift_bridgeObjectRelease();
        v118[3] = v95;
        v118[4] = (id)sub_100007864( &qword_1009B2C08,  type metadata accessor for SecureLocationsCachedSharedKey,  (uint64_t)&unk_100807954);
        uint64_t v98 = sub_10000A7C8(v118);
        sub_10001DC4C(v92, (uint64_t)v98, type metadata accessor for SecureLocationsCachedSharedKey);
        PassthroughSubject.send(_:)(v118);
        sub_100016F9C(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v110);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        uint64_t v99 = v86;
      }

      else
      {
        id v87 = v118[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v88);
        sub_100016F9C(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v113, v110);
        uint64_t v99 = v55;
      }

      ((void (*)(char *, uint64_t))v106)(v99, v114);
    }
  }

void sub_10053E534(uint64_t a1, uint64_t a2)
{
  uint64_t v115 = a1;
  uint64_t v3 = type metadata accessor for SecureLocationsCachedPayload(0LL);
  __chkstk_darwin(v3);
  uint64_t v104 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  __int128 v113 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v111 = *(void *)(v6 - 8);
  *(void *)&__int128 v112 = v6;
  __chkstk_darwin(v6);
  uint64_t v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for URL(0LL);
  uint64_t v106 = *(void (***)(char *, uint64_t, uint64_t))(v114 - 8);
  uint64_t v8 = __chkstk_darwin(v114);
  uint64_t v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v105 = (char *)&v100 - v12;
  __chkstk_darwin(v11);
  unint64_t v108 = (char *)&v100 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v100 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v118, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v117, v14, v22);
  id v24 = v117;
  id v23 = v118[0];
  id v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *unint64_t v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    uint64_t v34 = sub_100007864( &qword_1009A71E0,  type metadata accessor for SecureLocationsCachedPayload,  (uint64_t)&unk_1007F8340);
    Class v35 = isa;
    uint64_t v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v38 = v36;
      uint64_t v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v31);
      uint64_t v40 = sub_1006C54D4(v38, v39, 0);
      unint64_t v42 = v41;
      uint64_t v102 = v38;
      unint64_t v103 = v39;
      uint64_t v100 = (void *)v3;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v40, v42);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B208 != -1) {
        swift_once(&qword_10099B208, sub_100258170);
      }
      uint64_t v43 = v114;
      uint64_t v44 = sub_10000A720(v114, (uint64_t)qword_100A2A428);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v44, 0LL);
      uint64_t v45 = *(void (**)(char *, uint64_t, void))(v111 + 16);
      uint64_t v46 = v107;
      uint64_t v101 = a2;
      v45(v107, a2, v112);
      uint64_t v47 = v106;
      uint64_t v48 = v105;
      v106[2](v105, v44, v43);
      uint64_t v49 = objc_autoreleasePoolPush();
      uint64_t v50 = UUID.uuidString.getter(v49);
      URL.appendingPathComponent(_:)(v50, v51);
      swift_bridgeObjectRelease();
      uint64_t v52 = v108;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))v47[1];
      uint64_t v54 = v10;
      uint64_t v55 = v52;
      ((void (*)(char *, uint64_t))v53)(v54, v43);
      objc_autoreleasePoolPop(v49);
      uint64_t v56 = v48;
      uint64_t v57 = v43;
      uint64_t v106 = v53;
      ((void (*)(char *, uint64_t))v53)(v56, v43);
      uint64_t v58 = (*(uint64_t (**)(char *, void))(v111 + 8))(v46, v112);
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v59 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v60);
      uint64_t v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1LL);

      objc_autoreleasePoolPop(v59);
      uint64_t v64 = static os_log_type_t.default.getter(v63);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v65 = qword_100A2B018;
      uint64_t v66 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v67 = swift_allocObject(v66, 72LL, 7LL);
      __int128 v112 = xmmword_1007E67D0;
      *(_OWORD *)(v67 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v68 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v57, v68);
      uint64_t v71 = v70;
      *(void *)(v67 + 56) = &type metadata for String;
      unint64_t v72 = sub_1000226F4();
      *(void *)(v67 + 64) = v72;
      *(void *)(v67 + 32) = v69;
      *(void *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Writing to file: %@", 19LL, 2LL, v67);
      swift_bridgeObjectRelease();
      uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v73, v119);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v112;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v75 = NSFileProtectionKey;
      uint64_t v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v77 = sub_10041299C(inited);
      id v78 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      NSString v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v118[0] = 0LL;
      LODWORD(v71) = [v78 setAttributes:v79 ofItemAtPath:v81 error:v118];

      id v82 = v118[0];
      if ((_DWORD)v71)
      {
        id v83 = v118[0];
        id v84 = v113;
        uint64_t v86 = v55;
        uint64_t v85 = URL.setResourceValues(_:)(v113);
        uint64_t v89 = static os_log_type_t.default.getter(v85);
        uint64_t v90 = qword_100A2B018;
        uint64_t v91 = swift_allocObject(v66, 72LL, 7LL);
        *(_OWORD *)(v91 + swift_weakDestroy(v0 + 16) = v112;
        uint64_t v92 = v101;
        uint64_t v93 = v104;
        sub_10001DC4C(v101, v104, type metadata accessor for SecureLocationsCachedPayload);
        uint64_t v94 = v93;
        uint64_t v95 = v100;
        uint64_t v96 = String.init<A>(describing:)(v94, v100);
        *(void *)(v91 + 56) = &type metadata for String;
        *(void *)(v91 + 64) = v72;
        *(void *)(v91 + 32) = v96;
        *(void *)(v91 + 40) = v97;
        os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Publishing record changed: %@", 29LL, 2LL, v91);
        swift_bridgeObjectRelease();
        v118[3] = v95;
        v118[4] = (id)sub_100007864( &qword_1009B2C48,  type metadata accessor for SecureLocationsCachedPayload,  (uint64_t)&unk_1007F8324);
        uint64_t v98 = sub_10000A7C8(v118);
        sub_10001DC4C(v92, (uint64_t)v98, type metadata accessor for SecureLocationsCachedPayload);
        PassthroughSubject.send(_:)(v118);
        sub_100016F9C(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v110);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        uint64_t v99 = v86;
      }

      else
      {
        id v87 = v118[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v88);
        sub_100016F9C(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v113, v110);
        uint64_t v99 = v55;
      }

      ((void (*)(char *, uint64_t))v106)(v99, v114);
    }
  }

void sub_10053EF04(uint64_t a1, __int128 *a2)
{
  uint64_t v117 = a1;
  uint64_t v114 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v113 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v116 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v111 = type metadata accessor for UUID(0LL);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v109 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v115 - 8);
  uint64_t v6 = __chkstk_darwin(v115);
  unint64_t v108 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  __int128 v112 = (char *)&v103 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v103 - v10;
  uint64_t v12 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v103 - v18;
  static SystemInfo.lockState.getter(v17);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v16,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v12);
  uint64_t v20 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v121, v12, v20);
  dispatch thunk of RawRepresentable.rawValue.getter(&v119, v12, v20);
  uint64_t v21 = v121;
  uint64_t v22 = v119;
  id v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  uint64_t v24 = ((uint64_t (*)(char *, uint64_t))v23)(v19, v12);
  if (v21 == v22)
  {
    uint64_t v25 = static os_log_type_t.default.getter(v24);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v26 = sub_1000220F0();
    uint64_t v27 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v26, 0LL, 0LL);
    _BYTE *v28 = 0;
    swift_willThrow(v27);
  }

  else
  {
    uint64_t v29 = objc_autoreleasePoolPush();
    __int128 v30 = a2[3];
    __int128 v123 = a2[2];
    __int128 v124 = v30;
    __int128 v125 = a2[4];
    uint64_t v126 = *((void *)a2 + 10);
    __int128 v31 = a2[1];
    __int128 v121 = *a2;
    __int128 v122 = v31;
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    unint64_t v34 = sub_10056F234();
    Class v35 = isa;
    uint64_t v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v121, &type metadata for SecureLocationLabel, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v29);
    }

    else
    {
      uint64_t v38 = v36;
      uint64_t v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v29);
      uint64_t v40 = sub_1006C54D4(v38, v39, 0);
      unint64_t v42 = v41;
      uint64_t v106 = v38;
      unint64_t v107 = v39;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v40, v42);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B800 != -1) {
        swift_once(&qword_10099B800, sub_10069017C);
      }
      uint64_t v43 = v115;
      uint64_t v44 = sub_10000A720(v115, (uint64_t)qword_100A2B170);
      uint64_t v105 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v105(v11, v44, v43);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v11, 0LL);
      uint64_t v45 = *(void (**)(char *, uint64_t))(v5 + 8);
      v45(v11, v43);
      uint64_t v46 = *(void *)a2;
      uint64_t v47 = *((void *)a2 + 1);
      uint64_t v104 = a2;
      uint64_t v48 = String.utf8Data.getter(v46, v47);
      unint64_t v50 = v49;
      *(void *)&__int128 v121 = v48;
      *((void *)&v121 + 1) = v49;
      unint64_t v51 = sub_100042F34();
      uint64_t v52 = v109;
      DataProtocol.stableUUID.getter(&type metadata for Data, v51);
      sub_100016F9C(v48, v50);
      v105(v11, v44, v43);
      uint64_t v53 = objc_autoreleasePoolPush();
      uint64_t v54 = UUID.uuidString.getter(v53);
      uint64_t v55 = v108;
      URL.appendingPathComponent(_:)(v54, v56);
      swift_bridgeObjectRelease();
      uint64_t v57 = v112;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      v45(v55, v43);
      objc_autoreleasePoolPop(v53);
      uint64_t v58 = v11;
      uint64_t v59 = v43;
      uint64_t v60 = v57;
      unint64_t v108 = (char *)v45;
      v45(v58, v59);
      uint64_t v61 = (*(uint64_t (**)(char *, void))(v110 + 8))(v52, v111);
      URLResourceValues.init()(v61);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v62 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v63);
      uint64_t v65 = v64;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v64, 1LL);

      objc_autoreleasePoolPop(v62);
      uint64_t v67 = static os_log_type_t.default.getter(v66);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v68 = qword_100A2B018;
      uint64_t v69 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v70 = swift_allocObject(v69, 72LL, 7LL);
      __int128 v111 = xmmword_1007E67D0;
      *(_OWORD *)(v70 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v71 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter(v59, v71);
      uint64_t v74 = v73;
      *(void *)(v70 + 56) = &type metadata for String;
      unint64_t v75 = sub_1000226F4();
      *(void *)(v70 + 64) = v75;
      *(void *)(v70 + 32) = v72;
      *(void *)(v70 + 40) = v74;
      os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v68, "Writing to file: %@", 19LL, 2LL, v70);
      swift_bridgeObjectRelease();
      uint64_t v76 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v76, v120);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v111;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      id v78 = NSFileProtectionKey;
      Class v79 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v80 = sub_10041299C(inited);
      id v81 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v80);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v82 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v83 = swift_bridgeObjectRelease();
      URL.path.getter(v83);
      NSString v84 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)&__int128 v121 = 0LL;
      unsigned int v85 = [v81 setAttributes:v82 ofItemAtPath:v84 error:&v121];

      uint64_t v86 = v121;
      if (v85)
      {
        id v87 = (id)v121;
        uint64_t v88 = URL.setResourceValues(_:)(v116);
        Class v89 = isa;
        uint64_t v92 = static os_log_type_t.default.getter(v88);
        uint64_t v93 = qword_100A2B018;
        uint64_t v94 = swift_allocObject(v69, 72LL, 7LL);
        *(_OWORD *)(v94 + swift_weakDestroy(v0 + 16) = v111;
        uint64_t v95 = v104;
        __int128 v96 = *((_OWORD *)v104 + 3);
        __int128 v123 = *((_OWORD *)v104 + 2);
        __int128 v124 = v96;
        __int128 v125 = *((_OWORD *)v104 + 4);
        uint64_t v126 = v104[10];
        __int128 v97 = *((_OWORD *)v104 + 1);
        __int128 v121 = *(_OWORD *)v104;
        __int128 v122 = v97;
        sub_10056F278(v104);
        uint64_t v98 = String.init<A>(describing:)(&v121, &type metadata for SecureLocationLabel);
        *(void *)(v94 + 56) = &type metadata for String;
        *(void *)(v94 + 64) = v75;
        *(void *)(v94 + 32) = v98;
        *(void *)(v94 + 40) = v99;
        os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, v93, "Publishing record changed: %@", 29LL, 2LL, v94);
        swift_bridgeObjectRelease();
        *((void *)&v122 + 1) = &type metadata for SecureLocationLabel;
        *(void *)&__int128 v123 = sub_10056F2CC();
        uint64_t v100 = swift_allocObject(&unk_100963398, 104LL, 7LL);
        *(void *)&__int128 v121 = v100;
        __int128 v101 = *((_OWORD *)v95 + 3);
        *(_OWORD *)(v100 + 48) = *((_OWORD *)v95 + 2);
        *(_OWORD *)(v100 + 64) = v101;
        *(_OWORD *)(v100 + 80) = *((_OWORD *)v95 + 4);
        *(void *)(v100 + 96) = v95[10];
        __int128 v102 = *((_OWORD *)v95 + 1);
        *(_OWORD *)(v100 + swift_weakDestroy(v0 + 16) = *(_OWORD *)v95;
        *(_OWORD *)(v100 + 32) = v102;
        sub_10056F278(v95);
        PassthroughSubject.send(_:)(&v121);
        sub_100016F9C(v106, v107);

        (*(void (**)(char *, uint64_t))(v113 + 8))(v116, v114);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v121);
      }

      else
      {
        id v90 = (id)v121;
        _convertNSErrorToError(_:)(v86);

        swift_willThrow(v91);
        sub_100016F9C(v106, v107);

        (*(void (**)(char *, uint64_t))(v113 + 8))(v116, v114);
      }

      ((void (*)(char *, uint64_t))v108)(v60, v115);
    }
  }

void sub_10053F950(uint64_t a1, __int128 *a2)
{
  uint64_t v133 = a1;
  uint64_t v3 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v128 = *(void *)(v3 - 8);
  uint64_t v129 = v3;
  __chkstk_darwin(v3);
  uint64_t v132 = (char *)&v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  unint64_t v130 = *(void *)(v5 - 8);
  *(void *)&__int128 v131 = v5;
  __chkstk_darwin(v5);
  uint64_t v126 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v134 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v134 - 8);
  uint64_t v8 = __chkstk_darwin(v134);
  __int128 v125 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v127 = (char *)&v119 - v11;
  __chkstk_darwin(v10);
  __int128 v124 = (char *)&v119 - v12;
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v119 - v19;
  static SystemInfo.lockState.getter(v18);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v17,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v13);
  uint64_t v21 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v138, v13, v21);
  dispatch thunk of RawRepresentable.rawValue.getter(&v136, v13, v21);
  uint64_t v22 = v138;
  uint64_t v23 = v136;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v17, v13);
  uint64_t v25 = ((uint64_t (*)(char *, uint64_t))v24)(v20, v13);
  if (v22 == v23)
  {
    uint64_t v26 = static os_log_type_t.default.getter(v25);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v27 = sub_1000220F0();
    uint64_t v28 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v27, 0LL, 0LL);
    *uint64_t v29 = 0;
    swift_willThrow(v28);
  }

  else
  {
    __int128 v30 = objc_autoreleasePoolPush();
    __int128 v31 = a2[10];
    __int128 v32 = a2[11];
    __int128 v33 = a2[8];
    __int128 v147 = a2[9];
    __int128 v148 = v31;
    __int128 v34 = a2[12];
    __int128 v149 = v32;
    __int128 v150 = v34;
    __int128 v35 = a2[6];
    __int128 v36 = a2[7];
    __int128 v37 = a2[4];
    __int128 v143 = a2[5];
    __int128 v144 = v35;
    __int128 v145 = v36;
    __int128 v146 = v33;
    __int128 v38 = a2[3];
    __int128 v140 = a2[2];
    __int128 v141 = v38;
    __int128 v142 = v37;
    __int128 v39 = a2[1];
    __int128 v138 = *a2;
    __int128 v139 = v39;
    uint64_t v40 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v41 = swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    PropertyListEncoder.init()(v41);
    unint64_t v42 = sub_1002E90F4();
    Class v43 = isa;
    uint64_t v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v138, &type metadata for SecureLocationsConfig, v42);
    if (v43)
    {
      swift_release();
      objc_autoreleasePoolPop(v30);
    }

    else
    {
      uint64_t v46 = v44;
      uint64_t v47 = v45;
      swift_release();
      objc_autoreleasePoolPop(v30);
      uint64_t v48 = sub_1006C54D4(v46, v47, 0);
      unint64_t v50 = v49;
      uint64_t v121 = v46;
      unint64_t v122 = v47;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v48, v50);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B248 != -1) {
        swift_once(&qword_10099B248, sub_1002E7BAC);
      }
      uint64_t v51 = v134;
      uint64_t v52 = sub_10000A720(v134, (uint64_t)qword_100A2A4B8);
      uint64_t v53 = v124;
      uint64_t v120 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v120(v124, v52, v51);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v53, 0LL);
      uint64_t v54 = v51;
      uint64_t v55 = *(void (**)(char *, uint64_t))(v7 + 8);
      v55(v53, v51);
      if (qword_10099B250 != -1) {
        swift_once(&qword_10099B250, sub_1002E7C7C);
      }
      uint64_t v56 = v131;
      uint64_t v57 = sub_10000A720(v131, (uint64_t)qword_100A2A4D0);
      uint64_t v58 = v126;
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v126, v57, v56);
      v120(v53, v52, v54);
      uint64_t v120 = (void (*)(char *, uint64_t, uint64_t))objc_autoreleasePoolPush();
      uint64_t v59 = UUID.uuidString.getter(v120);
      uint64_t v60 = v53;
      uint64_t v61 = v125;
      URL.appendingPathComponent(_:)(v59, v62);
      swift_bridgeObjectRelease();
      uint64_t v63 = v127;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v64 = v134;
      v55(v61, v134);
      objc_autoreleasePoolPop(v120);
      uint64_t v65 = v64;
      __int128 v123 = v55;
      v55(v60, v64);
      uint64_t v66 = (*(uint64_t (**)(char *, void))(v130 + 8))(v58, v131);
      URLResourceValues.init()(v66);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v67 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v68);
      uint64_t v70 = v69;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v69, 1LL);

      objc_autoreleasePoolPop(v67);
      uint64_t v72 = static os_log_type_t.default.getter(v71);
      uint64_t v73 = v65;
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v74 = qword_100A2B018;
      uint64_t v126 = (char *)sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v75 = swift_allocObject(v126, 72LL, 7LL);
      __int128 v131 = xmmword_1007E67D0;
      *(_OWORD *)(v75 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v76 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter(v73, v76);
      uint64_t v79 = v78;
      *(void *)(v75 + 56) = &type metadata for String;
      unint64_t v130 = sub_1000226F4();
      *(void *)(v75 + 64) = v130;
      *(void *)(v75 + 32) = v77;
      *(void *)(v75 + 40) = v79;
      uint64_t v80 = v72;
      id v81 = v63;
      os_log(_:dso:log:_:_:)(v80, &_mh_execute_header, v74, "Writing to file: %@", 19LL, 2LL, v75);
      swift_bridgeObjectRelease();
      uint64_t v82 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v82, &v137);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v131;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      NSString v84 = NSFileProtectionKey;
      unsigned int v85 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v86 = sub_10041299C(inited);
      id v87 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v86);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v88 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v89 = swift_bridgeObjectRelease();
      URL.path.getter(v89);
      NSString v90 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)&__int128 v138 = 0LL;
      LODWORD(v75) = [v87 setAttributes:v88 ofItemAtPath:v90 error:&v138];

      uint64_t v91 = v138;
      if ((_DWORD)v75)
      {
        id v92 = (id)v138;
        uint64_t v93 = v132;
        uint64_t v94 = URL.setResourceValues(_:)(v132);
        uint64_t v97 = static os_log_type_t.default.getter(v94);
        uint64_t v98 = qword_100A2B018;
        uint64_t v99 = swift_allocObject(v126, 72LL, 7LL);
        *(_OWORD *)(v99 + swift_weakDestroy(v0 + 16) = v131;
        __int128 v100 = a2[10];
        __int128 v101 = a2[11];
        __int128 v102 = a2[8];
        __int128 v147 = a2[9];
        __int128 v148 = v100;
        __int128 v103 = a2[12];
        __int128 v149 = v101;
        __int128 v150 = v103;
        __int128 v104 = a2[6];
        __int128 v105 = a2[7];
        __int128 v106 = a2[4];
        __int128 v143 = a2[5];
        __int128 v144 = v104;
        __int128 v145 = v105;
        __int128 v146 = v102;
        __int128 v107 = a2[3];
        __int128 v140 = a2[2];
        __int128 v141 = v107;
        __int128 v142 = v106;
        __int128 v108 = a2[1];
        __int128 v138 = *a2;
        __int128 v139 = v108;
        sub_1002E9D14(a2);
        uint64_t v109 = String.init<A>(describing:)(&v138, &type metadata for SecureLocationsConfig);
        unint64_t v110 = v130;
        *(void *)(v99 + 56) = &type metadata for String;
        *(void *)(v99 + 64) = v110;
        *(void *)(v99 + 32) = v109;
        *(void *)(v99 + 40) = v111;
        os_log(_:dso:log:_:_:)(v97, &_mh_execute_header, v98, "Publishing record changed: %@", 29LL, 2LL, v99);
        swift_bridgeObjectRelease();
        *((void *)&v139 + 1) = &type metadata for SecureLocationsConfig;
        *(void *)&__int128 v140 = sub_10056F1B4();
        __int128 v112 = (_OWORD *)swift_allocObject(&unk_100963370, 224LL, 7LL);
        *(void *)&__int128 v138 = v112;
        __int128 v113 = a2[11];
        v112[11] = a2[10];
        v112[12] = v113;
        v112[13] = a2[12];
        __int128 v114 = a2[7];
        v112[7] = a2[6];
        v112[8] = v114;
        __int128 v115 = a2[9];
        v112[9] = a2[8];
        v112[10] = v115;
        __int128 v116 = a2[3];
        v112[3] = a2[2];
        v112[4] = v116;
        __int128 v117 = a2[5];
        v112[5] = a2[4];
        v112[6] = v117;
        __int128 v118 = a2[1];
        v112[1] = *a2;
        v112[2] = v118;
        sub_1002E9D14(a2);
        PassthroughSubject.send(_:)(&v138);
        sub_100016F9C(v121, v122);

        (*(void (**)(char *, uint64_t))(v128 + 8))(v93, v129);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
      }

      else
      {
        id v95 = (id)v138;
        _convertNSErrorToError(_:)(v91);

        swift_willThrow(v96);
        sub_100016F9C(v121, v122);

        (*(void (**)(char *, uint64_t))(v128 + 8))(v132, v129);
      }

      v123(v81, v134);
    }
  }

void sub_100540350(uint64_t a1, uint64_t a2)
{
  uint64_t v115 = a1;
  uint64_t v3 = type metadata accessor for BeaconProductInfoRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v104 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  __int128 v113 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v111 = *(void *)(v6 - 8);
  *(void *)&__int128 v112 = v6;
  __chkstk_darwin(v6);
  __int128 v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for URL(0LL);
  __int128 v106 = *(void (***)(char *, uint64_t, uint64_t))(v114 - 8);
  uint64_t v8 = __chkstk_darwin(v114);
  uint64_t v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  __int128 v105 = (char *)&v100 - v12;
  __chkstk_darwin(v11);
  __int128 v108 = (char *)&v100 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v100 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v118, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v117, v14, v22);
  id v24 = v117;
  id v23 = v118[0];
  uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *__int128 v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    __int128 v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    uint64_t v34 = sub_100007864(&qword_1009AB038, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_1007FDCAC);
    Class v35 = isa;
    uint64_t v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v38 = v36;
      uint64_t v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v31);
      uint64_t v40 = sub_1006C54D4(v38, v39, 0);
      unint64_t v42 = v41;
      uint64_t v102 = v38;
      unint64_t v103 = v39;
      __int128 v100 = (void *)v3;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v40, v42);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B348 != -1) {
        swift_once(&qword_10099B348, sub_10039BCD8);
      }
      uint64_t v43 = v114;
      uint64_t v44 = sub_10000A720(v114, (uint64_t)qword_100A2A768);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v44, 0LL);
      uint64_t v45 = *(void (**)(char *, uint64_t, void))(v111 + 16);
      uint64_t v46 = v107;
      uint64_t v101 = a2;
      v45(v107, a2, v112);
      uint64_t v47 = v106;
      uint64_t v48 = v105;
      v106[2](v105, v44, v43);
      unint64_t v49 = objc_autoreleasePoolPush();
      uint64_t v50 = UUID.uuidString.getter(v49);
      URL.appendingPathComponent(_:)(v50, v51);
      swift_bridgeObjectRelease();
      uint64_t v52 = v108;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))v47[1];
      uint64_t v54 = v10;
      uint64_t v55 = v52;
      ((void (*)(char *, uint64_t))v53)(v54, v43);
      objc_autoreleasePoolPop(v49);
      uint64_t v56 = v48;
      uint64_t v57 = v43;
      __int128 v106 = v53;
      ((void (*)(char *, uint64_t))v53)(v56, v43);
      uint64_t v58 = (*(uint64_t (**)(char *, void))(v111 + 8))(v46, v112);
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v59 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v60);
      uint64_t v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1LL);

      objc_autoreleasePoolPop(v59);
      uint64_t v64 = static os_log_type_t.default.getter(v63);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v65 = qword_100A2B018;
      uint64_t v66 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v67 = swift_allocObject(v66, 72LL, 7LL);
      __int128 v112 = xmmword_1007E67D0;
      *(_OWORD *)(v67 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v68 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v57, v68);
      uint64_t v71 = v70;
      *(void *)(v67 + 56) = &type metadata for String;
      unint64_t v72 = sub_1000226F4();
      *(void *)(v67 + 64) = v72;
      *(void *)(v67 + 32) = v69;
      *(void *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Writing to file: %@", 19LL, 2LL, v67);
      swift_bridgeObjectRelease();
      uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v73, v119);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v112;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v75 = NSFileProtectionKey;
      uint64_t v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v77 = sub_10041299C(inited);
      id v78 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      NSString v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v118[0] = 0LL;
      LODWORD(v71) = [v78 setAttributes:v79 ofItemAtPath:v81 error:v118];

      id v82 = v118[0];
      if ((_DWORD)v71)
      {
        id v83 = v118[0];
        NSString v84 = v113;
        unint64_t v86 = v55;
        uint64_t v85 = URL.setResourceValues(_:)(v113);
        uint64_t v89 = static os_log_type_t.default.getter(v85);
        uint64_t v90 = qword_100A2B018;
        uint64_t v91 = swift_allocObject(v66, 72LL, 7LL);
        *(_OWORD *)(v91 + swift_weakDestroy(v0 + 16) = v112;
        uint64_t v92 = v101;
        uint64_t v93 = v104;
        sub_10001DC4C(v101, v104, type metadata accessor for BeaconProductInfoRecord);
        uint64_t v94 = v93;
        id v95 = v100;
        uint64_t v96 = String.init<A>(describing:)(v94, v100);
        *(void *)(v91 + 56) = &type metadata for String;
        *(void *)(v91 + 64) = v72;
        *(void *)(v91 + 32) = v96;
        *(void *)(v91 + 40) = v97;
        os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Publishing record changed: %@", 29LL, 2LL, v91);
        swift_bridgeObjectRelease();
        v118[3] = v95;
        v118[4] = (id)sub_100007864( &qword_1009B2868,  type metadata accessor for BeaconProductInfoRecord,  (uint64_t)&unk_1007FDC90);
        uint64_t v98 = sub_10000A7C8(v118);
        sub_10001DC4C(v92, (uint64_t)v98, type metadata accessor for BeaconProductInfoRecord);
        PassthroughSubject.send(_:)(v118);
        sub_100016F9C(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v110);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        uint64_t v99 = v86;
      }

      else
      {
        id v87 = v118[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v88);
        sub_100016F9C(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v113, v110);
        uint64_t v99 = v55;
      }

      ((void (*)(char *, uint64_t))v106)(v99, v114);
    }
  }

void sub_100540D20( uint64_t a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, unint64_t *a8, uint64_t a9, uint64_t a10)
{
  __int128 v113 = a8;
  uint64_t v116 = a7;
  uint64_t v115 = a6;
  uint64_t v129 = a5;
  *(void *)&__int128 v128 = a4;
  uint64_t v126 = a1;
  uint64_t v12 = a3(0LL);
  __chkstk_darwin(v12);
  uint64_t v112 = (uint64_t)&v108 - v13;
  uint64_t v122 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  __int128 v125 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = type metadata accessor for UUID(0LL);
  uint64_t v123 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v119 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = type metadata accessor for URL(0LL);
  uint64_t v114 = *(void **)(v127 - 8);
  uint64_t v16 = __chkstk_darwin(v127);
  __int128 v118 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v120 = (char *)&v108 - v19;
  __chkstk_darwin(v18);
  __int128 v117 = (char *)&v108 - v20;
  uint64_t v21 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v23);
  unint64_t v28 = (char *)&v108 - v27;
  static SystemInfo.lockState.getter(v26);
  (*(void (**)(char *, void, uint64_t))(v22 + 104))( v25,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v21);
  uint64_t v29 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v132, v21, v29);
  dispatch thunk of RawRepresentable.rawValue.getter(&v131, v21, v29);
  id v31 = v131;
  id v30 = v132[0];
  uint64_t v32 = *(void (**)(char *, uint64_t))(v22 + 8);
  v32(v25, v21);
  uint64_t v33 = ((uint64_t (*)(char *, uint64_t))v32)(v28, v21);
  if (v30 == v31)
  {
    uint64_t v34 = static os_log_type_t.default.getter(v33);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v35 = sub_1000220F0();
    uint64_t v36 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v35, 0LL, 0LL);
    *uint64_t v37 = 0;
    swift_willThrow(v36);
  }

  else
  {
    uint64_t v38 = objc_autoreleasePoolPush();
    uint64_t v39 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v40 = swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
    uint64_t v41 = PropertyListEncoder.init()(v40);
    uint64_t v42 = sub_100007864((unint64_t *)v128, a3, v129);
    Class v43 = isa;
    uint64_t v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v12, v42);
    if (v43)
    {
      swift_release(v41);
      objc_autoreleasePoolPop(v38);
    }

    else
    {
      uint64_t v46 = v44;
      uint64_t v47 = v45;
      swift_release(v41);
      objc_autoreleasePoolPop(v38);
      uint64_t v48 = sub_1006C54D4(v46, v47, 0);
      unint64_t v50 = v49;
      uint64_t v129 = v46;
      unint64_t v111 = v47;
      uint64_t v109 = a3;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v48, v50);
      *(void *)&__int128 v128 = sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      uint64_t v110 = objc_autoreleasePoolPush();
      uint64_t v51 = a2;
      if (*v115 != -1LL) {
        swift_once(v115, a10);
      }
      uint64_t v52 = v127;
      uint64_t v116 = sub_10000A720(v127, v116);
      uint64_t v53 = UUID.uuidString.getter(v116);
      uint64_t v54 = v117;
      URL.appendingPathComponent(_:)(v53, v55);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v110);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v54, 0LL);
      uint64_t v56 = (void (*)(char *, uint64_t))v114[1];
      v56(v54, v52);
      uint64_t v114 = (void *)v12;
      uint64_t v57 = *(int *)(v12 + 20);
      uint64_t v115 = v51;
      uint64_t v58 = (char *)v51 + v57;
      uint64_t v59 = v119;
      (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v119, v58, v124);
      uint64_t v60 = objc_autoreleasePoolPush();
      uint64_t v61 = UUID.uuidString.getter(v60);
      URL.appendingPathComponent(_:)(v61, v62);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v60);
      uint64_t v63 = objc_autoreleasePoolPush();
      uint64_t v64 = UUID.uuidString.getter(v63);
      uint64_t v65 = v118;
      URL.appendingPathComponent(_:)(v64, v66);
      swift_bridgeObjectRelease();
      uint64_t v67 = v120;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v68 = v127;
      v56(v65, v127);
      objc_autoreleasePoolPop(v63);
      __int128 v118 = (char *)v56;
      v56(v54, v68);
      uint64_t v69 = (*(uint64_t (**)(char *, uint64_t))(v123 + 8))(v59, v124);
      URLResourceValues.init()(v69);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v70 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v71);
      uint64_t v73 = v72;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v72, 1LL);

      objc_autoreleasePoolPop(v70);
      uint64_t v75 = static os_log_type_t.default.getter(v74);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v76 = qword_100A2B018;
      uint64_t v124 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v77 = swift_allocObject(v124, 72LL, 7LL);
      __int128 v128 = xmmword_1007E67D0;
      *(_OWORD *)(v77 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v78 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter(v68, v78);
      uint64_t v81 = v80;
      *(void *)(v77 + 56) = &type metadata for String;
      unint64_t v82 = sub_1000226F4();
      *(void *)(v77 + 64) = v82;
      *(void *)(v77 + 32) = v79;
      *(void *)(v77 + 40) = v81;
      os_log(_:dso:log:_:_:)(v75, &_mh_execute_header, v76, "Writing to file: %@", 19LL, 2LL, v77);
      swift_bridgeObjectRelease();
      uint64_t v83 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v83, v133);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v128;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v85 = NSFileProtectionKey;
      unint64_t v86 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v87 = sub_10041299C(inited);
      id v88 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v87);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v89 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v90 = swift_bridgeObjectRelease();
      URL.path.getter(v90);
      NSString v91 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v132[0] = 0LL;
      LODWORD(v81) = [v88 setAttributes:v89 ofItemAtPath:v91 error:v132];

      id v92 = v132[0];
      if ((_DWORD)v81)
      {
        id v93 = v132[0];
        uint64_t v94 = v125;
        uint64_t v95 = URL.setResourceValues(_:)(v125);
        uint64_t v123 = a9;
        uint64_t v98 = static os_log_type_t.default.getter(v95);
        uint64_t v119 = (char *)qword_100A2B018;
        uint64_t v99 = swift_allocObject(v124, 72LL, 7LL);
        *(_OWORD *)(v99 + swift_weakDestroy(v0 + 16) = v128;
        __int128 v100 = v115;
        uint64_t v101 = v112;
        uint64_t v102 = v109;
        sub_10001DC4C((uint64_t)v115, v112, v109);
        uint64_t v103 = v101;
        uint64_t v104 = v114;
        uint64_t v105 = String.init<A>(describing:)(v103, v114);
        *(void *)(v99 + 56) = &type metadata for String;
        *(void *)(v99 + 64) = v82;
        *(void *)(v99 + 32) = v105;
        *(void *)(v99 + 40) = v106;
        os_log(_:dso:log:_:_:)(v98, &_mh_execute_header, v119, "Publishing record changed: %@", 29LL, 2LL, v99);
        swift_bridgeObjectRelease();
        v132[3] = v104;
        v132[4] = (id)sub_100007864(v113, v102, v123);
        __int128 v107 = sub_10000A7C8(v132);
        sub_10001DC4C((uint64_t)v100, (uint64_t)v107, v102);
        PassthroughSubject.send(_:)(v132);
        sub_100016F9C(v129, v111);

        (*(void (**)(char *, uint64_t))(v121 + 8))(v94, v122);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v132);
      }

      else
      {
        id v96 = v132[0];
        _convertNSErrorToError(_:)(v92);

        swift_willThrow(v97);
        sub_100016F9C(v129, v111);

        (*(void (**)(char *, uint64_t))(v121 + 8))(v125, v122);
      }

      ((void (*)(char *, uint64_t))v118)(v67, v127);
    }
  }

void sub_1005417B4(uint64_t a1, uint64_t a2)
{
  uint64_t v115 = a1;
  uint64_t v3 = type metadata accessor for SecureLocationsCachedSharingKey(0LL);
  __chkstk_darwin(v3);
  uint64_t v104 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v110 = *(void *)(v5 - 8);
  uint64_t v111 = v5;
  __chkstk_darwin(v5);
  __int128 v113 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = type metadata accessor for UUID(0LL);
  *(void *)&__int128 v112 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  __int128 v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for URL(0LL);
  uint64_t v105 = *(void **)(v114 - 8);
  uint64_t v8 = __chkstk_darwin(v114);
  uint64_t v106 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v109 = (char *)&v100 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v100 - v12;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v100 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v18,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v14);
  uint64_t v22 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v118, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v117, v14, v22);
  id v24 = v117;
  id v23 = v118[0];
  uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1000220F0();
    uint64_t v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0LL, 0LL);
    *id v30 = 0;
    swift_willThrow(v29);
  }

  else
  {
    id v31 = objc_autoreleasePoolPush();
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    uint64_t v34 = sub_100007864( &qword_1009B28D0,  type metadata accessor for SecureLocationsCachedSharingKey,  (uint64_t)&unk_100807748);
    Class v35 = isa;
    uint64_t v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }

    else
    {
      uint64_t v38 = v36;
      uint64_t v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v31);
      uint64_t v40 = sub_1006C54D4(v38, v39, 0);
      unint64_t v42 = v41;
      uint64_t v102 = v38;
      unint64_t v103 = v39;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v40, v42);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      if (qword_10099B580 != -1) {
        swift_once(&qword_10099B580, sub_100581FC4);
      }
      uint64_t v43 = v114;
      uint64_t v44 = sub_10000A720(v114, (uint64_t)qword_100A2AD28);
      uint64_t v45 = v105;
      uint64_t v46 = (void (*)(char *, uint64_t, uint64_t))v105[2];
      v46(v13, v44, v43);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0LL);
      uint64_t v47 = (void (*)(char *, uint64_t))v45[1];
      v47(v13, v43);
      __int128 v100 = (void *)v3;
      uint64_t v48 = *(int *)(v3 + 20);
      uint64_t v101 = a2;
      uint64_t v49 = a2 + v48;
      unint64_t v50 = v107;
      uint64_t v51 = v108;
      (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v107, v49, v108);
      v46(v13, v44, v43);
      uint64_t v105 = objc_autoreleasePoolPush();
      uint64_t v52 = UUID.uuidString.getter(v105);
      uint64_t v53 = v106;
      URL.appendingPathComponent(_:)(v52, v54);
      swift_bridgeObjectRelease();
      uint64_t v55 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      v47(v53, v43);
      objc_autoreleasePoolPop(v105);
      uint64_t v56 = v13;
      uint64_t v57 = v55;
      uint64_t v106 = (char *)v47;
      v47(v56, v43);
      uint64_t v58 = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v50, v51);
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v59 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v60);
      uint64_t v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1LL);

      objc_autoreleasePoolPop(v59);
      uint64_t v64 = static os_log_type_t.default.getter(v63);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v65 = qword_100A2B018;
      uint64_t v66 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v67 = swift_allocObject(v66, 72LL, 7LL);
      __int128 v112 = xmmword_1007E67D0;
      *(_OWORD *)(v67 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v68 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v43, v68);
      uint64_t v71 = v70;
      *(void *)(v67 + 56) = &type metadata for String;
      unint64_t v72 = sub_1000226F4();
      *(void *)(v67 + 64) = v72;
      *(void *)(v67 + 32) = v69;
      *(void *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Writing to file: %@", 19LL, 2LL, v67);
      swift_bridgeObjectRelease();
      uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v73, v119);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v112;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v75 = NSFileProtectionKey;
      uint64_t v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v77 = sub_10041299C(inited);
      id v78 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      NSString v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v118[0] = 0LL;
      LOBYTE(v71) = [v78 setAttributes:v79 ofItemAtPath:v81 error:v118];

      id v82 = v118[0];
      if ((v71 & 1) != 0)
      {
        id v83 = v118[0];
        NSString v84 = v113;
        unint64_t v86 = v57;
        uint64_t v85 = URL.setResourceValues(_:)(v113);
        uint64_t v89 = static os_log_type_t.default.getter(v85);
        uint64_t v90 = qword_100A2B018;
        uint64_t v91 = swift_allocObject(v66, 72LL, 7LL);
        *(_OWORD *)(v91 + swift_weakDestroy(v0 + 16) = v112;
        uint64_t v92 = v101;
        uint64_t v93 = v104;
        sub_10001DC4C(v101, v104, type metadata accessor for SecureLocationsCachedSharingKey);
        uint64_t v94 = v93;
        uint64_t v95 = v100;
        uint64_t v96 = String.init<A>(describing:)(v94, v100);
        *(void *)(v91 + 56) = &type metadata for String;
        *(void *)(v91 + 64) = v72;
        *(void *)(v91 + 32) = v96;
        *(void *)(v91 + 40) = v97;
        os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Publishing record changed: %@", 29LL, 2LL, v91);
        swift_bridgeObjectRelease();
        v118[3] = v95;
        v118[4] = (id)sub_100007864( &qword_1009B28D8,  type metadata accessor for SecureLocationsCachedSharingKey,  (uint64_t)&unk_100807798);
        uint64_t v98 = sub_10000A7C8(v118);
        sub_10001DC4C(v92, (uint64_t)v98, type metadata accessor for SecureLocationsCachedSharingKey);
        PassthroughSubject.send(_:)(v118);

        sub_100016F9C(v102, v103);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v84, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        uint64_t v99 = v86;
      }

      else
      {
        id v87 = v118[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v88);
        sub_100016F9C(v102, v103);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v113, v111);
        uint64_t v99 = v57;
      }

      ((void (*)(char *, uint64_t))v106)(v99, v114);
    }
  }

void *sub_1005421A0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_100004AEC(&qword_1009B29C0);
  uint64_t v8 = sub_10057017C(&qword_1009B29C8, &qword_1009B29C0, (void (*)(void))sub_10056A658);
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a3, v7, a1, a2, v7, v8);
  if (v3)
  {
    uint64_t v10 = static os_log_type_t.error.getter(result);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v11 = qword_100A2B018;
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v23 = v7;
    uint64_t v14 = sub_100004AEC(&qword_1009B29D8);
    uint64_t v15 = String.init<A>(describing:)(&v23, v14);
    uint64_t v17 = v16;
    *(void *)(v13 + 56) = &type metadata for String;
    unint64_t v18 = sub_1000226F4();
    *(void *)(v13 + 64) = v18;
    *(void *)(v13 + 32) = v15;
    *(void *)(v13 + 40) = v17;
    uint64_t v23 = v3;
    swift_errorRetain(v3);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v20 = String.init<A>(describing:)(&v23, v19);
    *(void *)(v13 + 96) = &type metadata for String;
    *(void *)(v13 + 104) = v18;
    *(void *)(v13 + 72) = v20;
    *(void *)(v13 + 80) = v21;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Error decoding %@: %@", 21LL, 2LL, v13);
    uint64_t v22 = swift_bridgeObjectRelease();
    return (void *)swift_willThrow(v22);
  }

  return result;
}

void *sub_10054234C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A70F0);
  uint64_t v8 = sub_10057017C(&qword_1009B2C38, &qword_1009A70F0, (void (*)(void))sub_1002E90B0);
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a3, v7, a1, a2, v7, v8);
  if (v3)
  {
    uint64_t v10 = static os_log_type_t.error.getter(result);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v11 = qword_100A2B018;
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v23 = v7;
    uint64_t v14 = sub_100004AEC(&qword_1009B2C40);
    uint64_t v15 = String.init<A>(describing:)(&v23, v14);
    uint64_t v17 = v16;
    *(void *)(v13 + 56) = &type metadata for String;
    unint64_t v18 = sub_1000226F4();
    *(void *)(v13 + 64) = v18;
    *(void *)(v13 + 32) = v15;
    *(void *)(v13 + 40) = v17;
    uint64_t v23 = v3;
    swift_errorRetain(v3);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v20 = String.init<A>(describing:)(&v23, v19);
    *(void *)(v13 + 96) = &type metadata for String;
    *(void *)(v13 + 104) = v18;
    *(void *)(v13 + 72) = v20;
    *(void *)(v13 + 80) = v21;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Error decoding %@: %@", 21LL, 2LL, v13);
    uint64_t v22 = swift_bridgeObjectRelease();
    return (void *)swift_willThrow(v22);
  }

  return result;
}

void *sub_1005424F8@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t (*a4)(void)@<X4>, uint64_t *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = sub_100004AEC(a3);
  uint64_t v13 = a4();
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a6, v12, a1, a2, v12, v13);
  if (v6)
  {
    uint64_t v15 = static os_log_type_t.error.getter(result);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v16 = qword_100A2B018;
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v18 = swift_allocObject(v17, 112LL, 7LL);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v28 = v12;
    uint64_t v19 = sub_100004AEC(a5);
    uint64_t v20 = String.init<A>(describing:)(&v28, v19);
    uint64_t v22 = v21;
    *(void *)(v18 + 56) = &type metadata for String;
    unint64_t v23 = sub_1000226F4();
    *(void *)(v18 + 64) = v23;
    *(void *)(v18 + 32) = v20;
    *(void *)(v18 + 40) = v22;
    uint64_t v28 = v6;
    swift_errorRetain(v6);
    uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v25 = String.init<A>(describing:)(&v28, v24);
    *(void *)(v18 + 96) = &type metadata for String;
    *(void *)(v18 + 104) = v23;
    *(void *)(v18 + 72) = v25;
    *(void *)(v18 + 80) = v26;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Error decoding %@: %@", 21LL, 2LL, v18);
    uint64_t v27 = swift_bridgeObjectRelease();
    return (void *)swift_willThrow(v27);
  }

  return result;
}

void *sub_10054268C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return sub_1005426F4( a1,  a2,  type metadata accessor for SharedBeaconRecord,  &qword_1009B2AB0,  (uint64_t)&unk_10081ACE4,  &qword_1009B2AA0,  a3);
}

void *sub_1005426C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return sub_1005426F4( a1,  a2,  type metadata accessor for OwnedBeaconRecord,  (unint64_t *)&unk_1009B5340,  (uint64_t)&unk_10080B010,  &qword_1009B2AC0,  a3);
}

void *sub_1005426F4@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t)@<X3>, unint64_t *a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X6>, void *a7@<X8>)
{
  uint64_t v14 = a3(0LL);
  uint64_t v15 = sub_100007864(a4, a3, a5);
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a7, v14, a1, a2, v14, v15);
  if (v7)
  {
    uint64_t v17 = static os_log_type_t.error.getter(result);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v18 = qword_100A2B018;
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v20 = swift_allocObject(v19, 112LL, 7LL);
    *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v31 = v14;
    uint64_t v21 = sub_100004AEC(a6);
    uint64_t v22 = String.init<A>(describing:)(&v31, v21);
    uint64_t v24 = v23;
    *(void *)(v20 + 56) = &type metadata for String;
    unint64_t v25 = sub_1000226F4();
    *(void *)(v20 + 64) = v25;
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 40) = v24;
    uint64_t v31 = v7;
    swift_errorRetain(v7);
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v27 = String.init<A>(describing:)(&v31, v26);
    *(void *)(v20 + 96) = &type metadata for String;
    *(void *)(v20 + 104) = v25;
    *(void *)(v20 + 72) = v27;
    *(void *)(v20 + 80) = v28;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Error decoding %@: %@", 21LL, 2LL, v20);
    uint64_t v29 = swift_bridgeObjectRelease();
    return (void *)swift_willThrow(v29);
  }

  return result;
}

uint64_t sub_1005428A4@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1005428E8( a1,  a2,  (uint64_t *)&unk_1009AE470,  type metadata accessor for SharedBeaconRecord,  &qword_1009A8E80,  &qword_1009B2AA0,  (uint64_t)sub_100571820,  &qword_1009A8E70,  a3);
}

uint64_t sub_1005428E8@<X0>( void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v175 = a8;
  uint64_t v176 = (char *)a9;
  uint64_t v169 = a7;
  unint64_t v166 = a5;
  unint64_t v167 = a6;
  uint64_t v171 = a2;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v157 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v161 = a3;
  uint64_t v168 = sub_100004AEC(a3);
  __chkstk_darwin(v168);
  uint64_t v170 = (char *)&v157 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v162 = a4;
  uint64_t v16 = a4(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v160 = (uint64_t)&v157 - v18;
  uint64_t v19 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v157 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v172 = *(void *)(v22 - 8);
  uint64_t v173 = v22;
  uint64_t v23 = __chkstk_darwin(v22);
  unint64_t v163 = (char *)&v157 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v174 = (char *)&v157 - v25;
  uint64_t v26 = (void *)type metadata accessor for URL(0LL);
  uint64_t v178 = *(v26 - 1);
  uint64_t v179 = v26;
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v164 = (char *)&v157 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v165 = (char *)&v157 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v157 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v157 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v157 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  unint64_t v42 = (char *)&v157 - v41;
  uint64_t v180 = a1;
  uint64_t v43 = URL.pathExtension.getter(v40);
  if (v43 == 0xD000000000000010LL && v44 == 0x8000000100855C50LL)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v47 = type metadata accessor for Logger(0LL);
    sub_10000A720(v47, (uint64_t)qword_100A2AC98);
    uint64_t v48 = v178;
    uint64_t v49 = v179;
    unint64_t v50 = *(uint64_t (**)(char *, void (*)(void), void *))(v178 + 16);
    uint64_t v51 = v50(v42, v180, v179);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = static os_log_type_t.default.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc(22LL, -1LL);
      uint64_t v55 = swift_slowAlloc(32LL, -1LL);
      uint64_t v183 = v55;
      *(_DWORD *)uint64_t v54 = 141558275;
      uint64_t v181 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v54 + 4, v54 + 12);
      *(_WORD *)(v54 + 12) = 2081;
      uint64_t v56 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v179, v56);
      uint64_t v181 = sub_1003F11D4(v57, v58, &v183);
      uint64_t v48 = v178;
      uint64_t v49 = v179;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v54 + 14, v54 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void *))(v48 + 8))(v42, v49);
      _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "Tombstoned file extension. Skipping file %{private,mask.hash}s",  (uint8_t *)v54,  0x16u);
      swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, void *))(v48 + 8))(v42, v49);
    }

    uint64_t v59 = (uint64_t)v176;
    uint64_t v60 = v180;
    v50(v176, v180, v49);
    uint64_t v61 = v59 + *(int *)(type metadata accessor for BeaconStoreFileRecord(0LL) + 20);
    v50((char *)v61, v60, v49);
    (*(void (**)(uint64_t, void, uint64_t, void *))(v48 + 56))(v61, 0LL, 1LL, v49);
    uint64_t v62 = sub_100004AEC(v175);
    uint64_t v63 = v59;
    uint64_t v64 = v62;
    uint64_t v65 = 1LL;
    goto LABEL_11;
  }

  uint64_t v159 = v14;
  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, 0xD000000000000010LL, 0x8000000100855C50LL, 0LL);
  uint64_t v46 = swift_bridgeObjectRelease();
  if ((v45 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v71 = URL.pathExtension.getter(v46);
  if (v71 == 0x64726F636572LL && v72 == 0xE600000000000000LL)
  {
    uint64_t v73 = swift_bridgeObjectRelease();
  }

  else
  {
    char v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, 0x64726F636572LL, 0xE600000000000000LL, 0LL);
    uint64_t v73 = swift_bridgeObjectRelease();
    if ((v74 & 1) == 0)
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v124 = type metadata accessor for Logger(0LL);
      sub_10000A720(v124, (uint64_t)qword_100A2AC98);
      uint64_t v125 = v178;
      uint64_t v126 = v179;
      uint64_t v127 = (*(uint64_t (**)(char *, void (*)(void), void *))(v178 + 16))(v36, v180, v179);
      __int128 v128 = (os_log_s *)Logger.logObject.getter(v127);
      os_log_type_t v129 = static os_log_type_t.error.getter(v128);
      if (os_log_type_enabled(v128, v129))
      {
        uint64_t v130 = swift_slowAlloc(22LL, -1LL);
        uint64_t v131 = swift_slowAlloc(32LL, -1LL);
        uint64_t v183 = v131;
        *(_DWORD *)uint64_t v130 = 141558275;
        uint64_t v181 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v130 + 4, v130 + 12);
        *(_WORD *)(v130 + 12) = 2081;
        uint64_t v132 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v133 = dispatch thunk of CustomStringConvertible.description.getter(v126, v132);
        uint64_t v181 = sub_1003F11D4(v133, v134, &v183);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v130 + 14, v130 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void *))(v178 + 8))(v36, v126);
        _os_log_impl( (void *)&_mh_execute_header,  v128,  v129,  "Invalid extension. Skipping file %{private,mask.hash}s",  (uint8_t *)v130,  0x16u);
        swift_arrayDestroy(v131, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v135 = (uint64_t)v176;
        swift_slowDealloc(v131, -1LL, -1LL);
        swift_slowDealloc(v130, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, void *))(v125 + 8))(v36, v126);

        uint64_t v135 = (uint64_t)v176;
      }

      uint64_t v69 = sub_100004AEC(v175);
      uint64_t v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL);
      uint64_t v67 = v135;
      goto LABEL_36;
    }
  }

  uint64_t v75 = URL.deletingPathExtension()(v73);
  uint64_t v76 = URL.lastPathComponent.getter(v75);
  uint64_t v78 = v77;
  uint64_t v79 = v178;
  uint64_t v80 = v179;
  unint64_t v158 = *(void (**)(char *, void *))(v178 + 8);
  v158(v39, v179);
  UUID.init(uuidString:)(v76, v78);
  swift_bridgeObjectRelease();
  uint64_t v82 = v172;
  uint64_t v81 = v173;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v172 + 48))(v21, 1LL, v173) == 1)
  {
    sub_100015794((uint64_t)v21, &qword_10099D8A0);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v83 = type metadata accessor for Logger(0LL);
    sub_10000A720(v83, (uint64_t)qword_100A2AC98);
    NSString v84 = v179;
    uint64_t v85 = (*(uint64_t (**)(char *, void (*)(void), void *))(v178 + 16))(v33, v180, v179);
    unint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
    os_log_type_t v87 = static os_log_type_t.error.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = swift_slowAlloc(22LL, -1LL);
      uint64_t v89 = swift_slowAlloc(32LL, -1LL);
      uint64_t v183 = v89;
      *(_DWORD *)uint64_t v88 = 141558275;
      uint64_t v181 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v88 + 4, v88 + 12);
      *(_WORD *)(v88 + 12) = 2081;
      uint64_t v90 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter(v84, v90);
      uint64_t v181 = sub_1003F11D4(v91, v92, &v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v88 + 14, v88 + 22);
      swift_bridgeObjectRelease();
      v158(v33, v84);
      _os_log_impl( (void *)&_mh_execute_header,  v86,  v87,  "Invalid file identifier at URL: %{private,mask.hash}s",  (uint8_t *)v88,  0x16u);
      swift_arrayDestroy(v89, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1LL, -1LL);
      swift_slowDealloc(v88, -1LL, -1LL);
    }

    else
    {
      v158(v33, v84);
    }

    uint64_t v69 = sub_100004AEC(v175);
    uint64_t v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL);
    uint64_t v67 = (uint64_t)v176;
LABEL_36:
    uint64_t v68 = 1LL;
    return v66(v67, v68, 1LL, v69);
  }

  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v174, v21, v81);
  unint64_t v166 = (uint64_t *)*(int *)(sub_100004AEC(v166) + 36);
  uint64_t v93 = *(uint64_t *)((char *)v166 + v171);
  uint64_t v180 = *(void (**)(void))(v79 + 16);
  v180(v39);
  swift_retain();
  v94._countAndFlagsBits = 0xD000000000000014LL;
  v94._object = (void *)0x800000010085B040LL;
  prohibitAsyncContext(functionName:)(v94);
  uint64_t v183 = v16;
  uint64_t v95 = sub_100004AEC(v167);
  uint64_t v96 = String.init<A>(describing:)(&v183, v95);
  uint64_t v98 = v97;
  unint64_t v167 = (uint64_t *)objc_autoreleasePoolPush();
  __chkstk_darwin(v167);
  uint64_t v99 = v174;
  *(&v157 - 6) = v93;
  *(&v157 - 5) = (uint64_t)v99;
  *(&v157 - 4) = (uint64_t)v39;
  *(&v157 - 3) = v96;
  *(&v157 - 2) = v98;
  uint64_t v100 = (uint64_t)v170;
  uint64_t v101 = v177;
  OS_dispatch_queue.sync<A>(execute:)(v169, &v157 - 8, v168);
  objc_autoreleasePoolPop(v167);
  swift_release(v93);
  swift_bridgeObjectRelease();
  uint64_t v102 = v158;
  v158(v39, v80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v100, 1LL, v16) != 1)
  {
    (*(void (**)(char *, uint64_t))(v172 + 8))(v174, v173);
    uint64_t v136 = v160;
    uint64_t v137 = v162;
    sub_10002218C(v100, v160, v162);
    uint64_t v138 = v136;
    uint64_t v59 = (uint64_t)v176;
    sub_10002218C(v138, (uint64_t)v176, v137);
    uint64_t v62 = sub_100004AEC(v175);
    uint64_t v63 = v59;
    uint64_t v64 = v62;
    uint64_t v65 = 0LL;
LABEL_11:
    swift_storeEnumTagMultiPayload(v63, v64, v65);
    uint64_t v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56LL);
    uint64_t v67 = v59;
    uint64_t v68 = 0LL;
    uint64_t v69 = v62;
    return v66(v67, v68, 1LL, v69);
  }

  unint64_t v103 = v80;
  uint64_t v104 = v102;
  uint64_t v177 = v101;
  sub_100015794(v100, v161);
  uint64_t v105 = (void (*)(char *, uint64_t, void *))v180;
  uint64_t v106 = ((uint64_t (*)(char *, uint64_t, void *))v180)(v39, v171, v80);
  __int128 v107 = (uint64_t *)URL.description.getter(v106);
  unint64_t v109 = v108;
  v104(v39, v80);
  uint64_t v170 = v39;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v110 = type metadata accessor for Logger(0LL);
  sub_10000A720(v110, (uint64_t)qword_100A2AC98);
  uint64_t v112 = v172;
  uint64_t v111 = v173;
  __int128 v113 = v163;
  (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v163, v174, v173);
  uint64_t v114 = swift_bridgeObjectRetain(v109);
  uint64_t v115 = (os_log_s *)Logger.logObject.getter(v114);
  os_log_type_t v116 = static os_log_type_t.error.getter(v115);
  int v117 = v116;
  if (os_log_type_enabled(v115, v116))
  {
    uint64_t v118 = swift_slowAlloc(42LL, -1LL);
    uint64_t v169 = swift_slowAlloc(64LL, -1LL);
    uint64_t v183 = v169;
    *(_DWORD *)uint64_t v118 = 141558787;
    uint64_t v181 = 1752392040LL;
    uint64_t v119 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v118 + 4, v118 + 12);
    *(_WORD *)(v118 + 12) = 2081;
    unint64_t v167 = v107;
    LODWORD(v168) = v117;
    uint64_t v120 = UUID.uuidString.getter(v119);
    uint64_t v181 = sub_1003F11D4(v120, v121, &v183);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v118 + 14, v118 + 22);
    swift_bridgeObjectRelease();
    uint64_t v172 = *(void *)(v112 + 8);
    ((void (*)(char *, uint64_t))v172)(v113, v111);
    *(_WORD *)(v118 + 22) = 2160;
    uint64_t v181 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v118 + 24, v118 + 32);
    *(_WORD *)(v118 + 32) = 2081;
    swift_bridgeObjectRetain(v109);
    uint64_t v181 = sub_1003F11D4((uint64_t)v167, v109, &v183);
    unint64_t v103 = v179;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v118 + 34, v118 + 42);
    swift_bridgeObjectRelease_n(v109, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v115,  (os_log_type_t)v168,  "Could not read item %{private,mask.hash}s for records at: %{private,mask.hash}s",  (uint8_t *)v118,  0x2Au);
    uint64_t v122 = v169;
    swift_arrayDestroy(v169, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v122, -1LL, -1LL);
    uint64_t v123 = v118;
    uint64_t v105 = (void (*)(char *, uint64_t, void *))v180;
    swift_slowDealloc(v123, -1LL, -1LL);
  }

  else
  {
    uint64_t v172 = *(void *)(v112 + 8);
    ((void (*)(char *, uint64_t))v172)(v113, v111);

    swift_bridgeObjectRelease_n(v109, 2LL);
  }

  __int128 v140 = v165;
  __int128 v139 = v166;
  uint64_t v141 = v171;
  uint64_t v142 = *(uint64_t *)((char *)v166 + v171);
  v105(v165, v171, v103);
  swift_retain();
  uint64_t v179 = objc_autoreleasePoolPush();
  uint64_t v143 = UUID.uuidString.getter(v179);
  __int128 v144 = v164;
  URL.appendingPathComponent(_:)(v143, v145);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
  __int128 v146 = v158;
  v158(v144, v103);
  objc_autoreleasePoolPop(v179);
  swift_release(v142);
  v146(v140, v103);
  uint64_t v147 = *(uint64_t *)((char *)v139 + v141);
  ((void (*)(char *, uint64_t, void *))v180)(v140, v141, v103);
  swift_retain();
  __int128 v148 = objc_autoreleasePoolPush();
  __int128 v149 = v174;
  uint64_t v150 = UUID.uuidString.getter(v148);
  URL.appendingPathComponent(_:)(v150, v151);
  swift_bridgeObjectRelease();
  uint64_t v152 = (uint64_t)v159;
  URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
  v146(v144, v103);
  objc_autoreleasePoolPop(v148);
  swift_release(v147);
  v146(v140, v103);
  ((void (*)(char *, uint64_t))v172)(v149, v173);
  uint64_t v153 = v178;
  (*(void (**)(uint64_t, void, uint64_t, void *))(v178 + 56))(v152, 0LL, 1LL, v103);
  uint64_t v154 = (uint64_t)v176;
  (*(void (**)(char *, char *, void *))(v153 + 32))(v176, v170, v103);
  uint64_t v155 = type metadata accessor for BeaconStoreFileRecord(0LL);
  sub_100015750(v152, v154 + *(int *)(v155 + 20), (uint64_t *)&unk_1009A34D0);
  uint64_t v156 = sub_100004AEC(v175);
  swift_storeEnumTagMultiPayload(v154, v156, 1LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v156 - 8) + 56LL))( v154,  0LL,  1LL,  v156);
}

uint64_t sub_1005438B4@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1005428E8( a1,  a2,  &qword_1009A4780,  type metadata accessor for OwnedDeviceKeyRecord,  &qword_1009A7E80,  &qword_1009B27A0,  (uint64_t)sub_100565160,  &qword_1009A8E48,  a3);
}

uint64_t sub_1005438F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_100543938(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (int *)type metadata accessor for LostModeRecord(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a2, (uint64_t)v12, v13);
  id v14 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + v10[6], v6);
  uint64_t v16 = &v12[v10[6]];
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v16, v6, v17);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v18 & 1) == 0)
  {
    uint64_t v20 = UUID.uuidString.getter(v19);
    *((void *)&v45 + 1) = &type metadata for String;
    uint64_t v46 = &protocol witness table for String;
    *(void *)&__int128 v44 = v20;
    *((void *)&v44 + 1) = v21;
    CKRecordKeyValueSetting.subscript.setter(&v44, 0xD000000000000010LL, 0x800000010084D8A0LL, ObjectType);
  }

  uint64_t v22 = v10[7];
  uint64_t v23 = (void *)(v3 + v22);
  uint64_t v24 = *(void *)(v3 + v22 + 8);
  uint64_t v25 = &v12[v22];
  uint64_t v27 = *(void *)v25;
  uint64_t v26 = *((void *)v25 + 1);
  if (!v24)
  {
    if (!v26) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }

  if (!v26)
  {
    uint64_t v46 = 0LL;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    goto LABEL_14;
  }

  BOOL v28 = *v23 == v27 && v24 == v26;
  if (!v28
    && (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, *(void *)v25, *((void *)v25 + 1), 0LL) & 1) == 0)
  {
LABEL_12:
    *((void *)&v45 + 1) = &type metadata for String;
    uint64_t v46 = &protocol witness table for String;
    *(void *)&__int128 v44 = v27;
    *((void *)&v44 + 1) = v26;
LABEL_14:
    swift_bridgeObjectRetain(v26);
    CKRecordKeyValueSetting.subscript.setter(&v44, 0x6C69616D65LL, 0xE500000000000000LL, ObjectType);
  }

uint64_t sub_100543CE8(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  uint64_t v62 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (int *)type metadata accessor for SafeLocation(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a2, (uint64_t)v12, v13);
  id v14 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v14);
  uint64_t v16 = v10[7];
  uint64_t v17 = *(void *)(v3 + v16);
  uint64_t v18 = *(void *)(v3 + v16 + 8);
  uint64_t v19 = &v12[v16];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  BOOL v22 = v17 == *(void *)v19 && v18 == v20;
  if (!v22
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, *(void *)v19, *((void *)v19 + 1), 0LL) & 1) == 0)
  {
    uint64_t v64 = &type metadata for String;
    uint64_t v65 = &protocol witness table for String;
    v63[0] = v21;
    v63[1] = v20;
    swift_bridgeObjectRetain(v20);
    CKRecordKeyValueSetting.subscript.setter(v63, 1701667182LL, 0xE400000000000000LL, ObjectType);
  }

  uint64_t v23 = v10[8];
  double v24 = *(double *)&v12[v23];
  if (*(double *)(v3 + v23) != v24)
  {
    uint64_t v64 = &type metadata for Double;
    uint64_t v65 = &protocol witness table for Double;
    *(double *)uint64_t v63 = v24;
    CKRecordKeyValueSetting.subscript.setter(v63, 0x656475746974616CLL, 0xE800000000000000LL, ObjectType);
  }

  uint64_t v25 = v10[9];
  double v26 = *(double *)&v12[v25];
  if (*(double *)(v3 + v25) != v26)
  {
    uint64_t v64 = &type metadata for Double;
    uint64_t v65 = &protocol witness table for Double;
    *(double *)uint64_t v63 = v26;
    CKRecordKeyValueSetting.subscript.setter(v63, 0x64757469676E6F6CLL, 0xE900000000000065LL, ObjectType);
  }

  uint64_t v27 = v10[10];
  double v28 = *(double *)&v12[v27];
  if (*(double *)(v3 + v27) != v28)
  {
    uint64_t v64 = &type metadata for Double;
    uint64_t v65 = &protocol witness table for Double;
    *(double *)uint64_t v63 = v28;
    CKRecordKeyValueSetting.subscript.setter(v63, 0x737569646172LL, 0xE600000000000000LL, ObjectType);
  }

  uint64_t v29 = v10[11];
  int v30 = *(unsigned __int8 *)(v3 + v29);
  uint64_t v31 = v12[v29];
  if (v30 != (_DWORD)v31)
  {
    uint64_t v64 = &type metadata for Int;
    uint64_t v65 = &protocol witness table for Int;
    v63[0] = v31;
    CKRecordKeyValueSetting.subscript.setter(v63, 0x636E657265666572LL, 0xEE00656D61724665LL, ObjectType);
  }

  uint64_t v32 = v10[6];
  int v33 = *(unsigned __int8 *)(v3 + v32);
  uint64_t v34 = v12[v32];
  if (v33 != (_DWORD)v34)
  {
    uint64_t v64 = &type metadata for Int;
    uint64_t v65 = &protocol witness table for Int;
    v63[0] = v34;
    CKRecordKeyValueSetting.subscript.setter(v63, 1701869940LL, 0xE400000000000000LL, ObjectType);
  }

  uint64_t v35 = v10[12];
  int v36 = *(unsigned __int8 *)(v3 + v35);
  uint64_t v37 = v12[v35];
  if (v36 != (_DWORD)v37)
  {
    uint64_t v64 = &type metadata for Int;
    uint64_t v65 = &protocol witness table for Int;
    v63[0] = v37;
    CKRecordKeyValueSetting.subscript.setter(v63, 0x6C61766F72707061LL, 0xED00006574617453LL, ObjectType);
  }

  uint64_t v38 = v10[13];
  uint64_t v39 = *(void *)(v3 + v38);
  uint64_t v40 = *(void *)&v12[v38];
  swift_bridgeObjectRetain(v40);
  LOBYTE(v39) = sub_100126DB8(v39, v40);
  swift_bridgeObjectRelease();
  if ((v39 & 1) != 0)
  {
    sub_100018C68((uint64_t)v12, type metadata accessor for SafeLocation);
    return swift_unknownObjectRelease(v14);
  }

  else
  {
    int64_t v42 = *(void *)(v40 + 16);
    if (v42)
    {
      id v59 = v14;
      uint64_t v60 = v12;
      v63[0] = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v40);
      sub_100032800(0, v42, 0);
      unint64_t v43 = (*(unsigned __int8 *)(v62 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      uint64_t v58 = v40;
      unint64_t v44 = v40 + v43;
      uint64_t v45 = *(void *)(v62 + 72);
      uint64_t v46 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v62 + 16);
      do
      {
        uint64_t v47 = v61;
        uint64_t v48 = v46(v9, v44, v61);
        uint64_t v49 = UUID.uuidString.getter(v48);
        uint64_t v51 = v50;
        (*(void (**)(char *, uint64_t))(v62 + 8))(v9, v47);
        uint64_t v52 = v63[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v63[0]) & 1) == 0)
        {
          sub_100032800(0, *(void *)(v52 + 16) + 1LL, 1);
          uint64_t v52 = v63[0];
        }

        unint64_t v54 = *(void *)(v52 + 16);
        unint64_t v53 = *(void *)(v52 + 24);
        if (v54 >= v53 >> 1)
        {
          sub_100032800(v53 > 1, v54 + 1, 1);
          uint64_t v52 = v63[0];
        }

        *(void *)(v52 + swift_weakDestroy(v0 + 16) = v54 + 1;
        uint64_t v55 = v52 + 16 * v54;
        *(void *)(v55 + 32) = v49;
        *(void *)(v55 + 40) = v51;
        v44 += v45;
        --v42;
      }

      while (v42);
      swift_bridgeObjectRelease();
      id v14 = v59;
      uint64_t v12 = v60;
    }

    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v57 = String._bridgeToObjectiveC()();
    [v14 setObject:isa forKeyedSubscript:v57];
    swift_unknownObjectRelease(v14);

    return sub_100018C68((uint64_t)v12, type metadata accessor for SafeLocation);
  }

uint64_t sub_1005441EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v2);
  uint64_t v66 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  __chkstk_darwin(v4);
  uint64_t v63 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A7E78);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v76 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v59 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A8E40);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v62 = (uint64_t)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v55 - v14;
  uint64_t v65 = sub_100004AEC(&qword_1009A8E48);
  uint64_t v75 = *(void *)(v65 - 8);
  uint64_t v16 = __chkstk_darwin(v65);
  uint64_t v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v72 = (uint64_t)&v55 - v19;
  uint64_t v20 = sub_100004AEC(&qword_1009A7E90);
  __chkstk_darwin(v20);
  BOOL v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100004AEC(&qword_1009A7E80);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  double v26 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = v1;
  uint64_t v28 = v27;
  sub_10001581C(v1, (uint64_t)v22, &qword_1009A7E90);
  uint64_t v57 = v24;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v28) == 1)
  {
    sub_100015794((uint64_t)v22, &qword_1009A7E90);
  }

  else
  {
    sub_100015750((uint64_t)v22, (uint64_t)v26, &qword_1009A7E80);
    uint64_t v56 = v28;
    uint64_t v29 = *(int *)(v28 + 40);
    uint64_t v61 = v26;
    uint64_t v30 = (uint64_t)&v26[v29];
    sub_10001581C(v30, (uint64_t)v8, &qword_1009A7E78);
    uint64_t v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48);
    int v31 = v71(v8, 1LL, v9);
    uint64_t v32 = v65;
    uint64_t v33 = (uint64_t)v66;
    uint64_t v34 = v59;
    if (v31 == 1)
    {
LABEL_11:
      sub_100015794((uint64_t)v8, &qword_1009A7E78);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v15, 1LL, 1LL, v32);
    }

    else
    {
      uint64_t v67 = *(uint64_t (**)(char *, char *, uint64_t))(v76 + 32);
      uint64_t v68 = v18;
      uint64_t v64 = v9;
      uint64_t v69 = v15;
      uint64_t v70 = v8;
      while (1)
      {
        uint64_t v35 = v76;
        uint64_t v36 = v67(v34, v8, v9);
        DirectorySequence.next()(v36);
        uint64_t v37 = v73;
        uint64_t v38 = v34;
        uint64_t v39 = v74;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v33, 1LL, v74) == 1)
        {
          (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v9);
          sub_100015794(v33, (uint64_t *)&unk_1009A34D0);
          sub_100015794(v30, &qword_1009A7E78);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v30, 1LL, 1LL, v9);
          uint64_t v40 = v75;
          uint64_t v15 = v69;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v69, 1LL, 1LL, v32);
          uint64_t v34 = v38;
        }

        else
        {
          uint64_t v41 = v63;
          (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v63, v33, v39);
          uint64_t v42 = v30;
          unint64_t v43 = objc_autoreleasePoolPush();
          uint64_t v44 = v62;
          sub_1005428E8( (void (*)(void))v41,  (uint64_t)v61,  &qword_1009A4780,  type metadata accessor for OwnedDeviceKeyRecord,  &qword_1009A7E80,  &qword_1009B27A0,  (uint64_t)sub_100565160,  &qword_1009A8E48,  v62);
          uint64_t v45 = v43;
          uint64_t v30 = v42;
          uint64_t v33 = (uint64_t)v66;
          objc_autoreleasePoolPop(v45);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v9);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v41, v39);
          uint64_t v46 = v44;
          uint64_t v32 = v65;
          uint64_t v15 = v69;
          sub_100015750(v46, (uint64_t)v69, &qword_1009A8E40);
          uint64_t v34 = v38;
          uint64_t v40 = v75;
        }

        int v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v15, 1LL, v32);
        uint64_t v8 = v70;
        uint64_t v48 = (uint64_t)v68;
        if (v47 == 1) {
          break;
        }
        uint64_t v49 = v72;
        sub_100015750((uint64_t)v15, v72, &qword_1009A8E48);
        sub_100015750(v49, v48, &qword_1009A8E48);
        if (swift_getEnumCaseMultiPayload(v48, v32) != 1)
        {
          sub_100015794((uint64_t)v61, &qword_1009A7E80);
          uint64_t v53 = v60;
          sub_10002218C(v48, v60, type metadata accessor for OwnedDeviceKeyRecord);
          uint64_t v54 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56LL))( v53,  0LL,  1LL,  v54);
        }

        sub_100015794(v48, &qword_1009A8E48);
        sub_10001581C(v30, (uint64_t)v8, &qword_1009A7E78);
        uint64_t v9 = v64;
      }
    }

    sub_100015794((uint64_t)v61, &qword_1009A7E80);
    sub_100015794((uint64_t)v15, &qword_1009A8E40);
    uint64_t v50 = v58;
    sub_100015794(v58, &qword_1009A7E90);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v50, 1LL, 1LL, v56);
  }

  uint64_t v51 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))( v60,  1LL,  1LL,  v51);
}

void sub_100544824(uint64_t a1)
{
}

void sub_100544838(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  __asm { BR              X10 }

void sub_100544A9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeyAlignmentRecord(0LL);
  __chkstk_darwin(v2);
  __asm { BR              X10 }

void sub_100544DB0(uint64_t a1)
{
}

void sub_100544DF0(uint64_t a1)
{
}

void sub_100544E34(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup(0LL);
  __chkstk_darwin(v2);
  __asm { BR              X10 }

void sub_100545150(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v2);
  __asm { BR              X10 }

void sub_100545494(uint64_t a1)
{
}

void sub_1005454D0(uint64_t a1)
{
}

void sub_10054550C(uint64_t a1)
{
}

void sub_100545548(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  __chkstk_darwin(v3);
  __asm { BR              X10 }

uint64_t sub_100545850(id *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v35 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LeashRecord(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a2, (uint64_t)v10, v11);
  id v12 = [*a1 encryptedValues];
  uint64_t v13 = *(int *)(v8 + 24);
  uint64_t v14 = *(void *)(v2 + v13);
  uint64_t v15 = *(void *)&v10[v13];
  swift_bridgeObjectRetain(v15);
  LOBYTE(v14) = sub_100126DB8(v14, v15);
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
    sub_100018C68((uint64_t)v10, type metadata accessor for LeashRecord);
    return swift_unknownObjectRelease(v12);
  }

  else
  {
    int64_t v17 = *(void *)(v15 + 16);
    if (v17)
    {
      id v32 = v12;
      uint64_t v33 = v10;
      uint64_t v36 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v15);
      sub_100032800(0, v17, 0);
      uint64_t v18 = *(unsigned __int8 *)(v35 + 80);
      uint64_t v31 = v15;
      uint64_t v19 = v15 + ((v18 + 32) & ~v18);
      uint64_t v34 = *(void *)(v35 + 72);
      uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 16);
      do
      {
        uint64_t v21 = v20(v7, v19, v5);
        uint64_t v22 = UUID.uuidString.getter(v21);
        uint64_t v24 = v23;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
        uint64_t v25 = v36;
        if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
        {
          sub_100032800(0, v25[2] + 1LL, 1);
          uint64_t v25 = v36;
        }

        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1)
        {
          sub_100032800(v26 > 1, v27 + 1, 1);
          uint64_t v25 = v36;
        }

        void v25[2] = v27 + 1;
        uint64_t v28 = &v25[2 * v27];
        v28[4] = v22;
        v28[5] = v24;
        v19 += v34;
        --v17;
      }

      while (v17);
      swift_bridgeObjectRelease();
      id v12 = v32;
      uint64_t v10 = v33;
    }

    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v30 = String._bridgeToObjectiveC()();
    [v12 setObject:isa forKeyedSubscript:v30];
    swift_unknownObjectRelease(v12);

    return sub_100018C68((uint64_t)v10, type metadata accessor for LeashRecord);
  }

id sub_100545B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  if (a2)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v14 = 0LL;
    if (a6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  NSString v13 = 0LL;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
LABEL_4:
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    goto LABEL_8;
  }

uint64_t sub_100545C40(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100546480( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  &qword_1009A0A48,  &qword_1009A58F0,  (uint64_t)&protocol conformance descriptor for UUID);
}

void *sub_100545C64(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
    goto LABEL_23;
  }

  if (*(void *)(a4 + 16) != a3)
  {
    sub_100004AEC(&qword_1009A0B58);
    uint64_t v8 = static _SetStorage.allocate(capacity:)(a3);
    uint64_t v9 = (void *)v8;
    if (a2 < 1) {
      unint64_t v10 = 0LL;
    }
    else {
      unint64_t v10 = *a1;
    }
    if (v10)
    {
      unint64_t v11 = __clz(__rbit64(v10));
      goto LABEL_22;
    }

    if (a2 > 1)
    {
      unint64_t v12 = a1[1];
      uint64_t v13 = 1LL;
      if (v12) {
        goto LABEL_21;
      }
      uint64_t v13 = 2LL;
      if (a2 > 2)
      {
        unint64_t v12 = a1[2];
        if (v12) {
          goto LABEL_21;
        }
        uint64_t v13 = 3LL;
        if (a2 > 3)
        {
          unint64_t v12 = a1[3];
          if (!v12)
          {
            uint64_t v14 = 4LL;
            if (a2 > 4)
            {
              unint64_t v12 = a1[4];
              if (v12)
              {
                uint64_t v13 = 4LL;
                goto LABEL_21;
              }

              while (1)
              {
                uint64_t v13 = v14 + 1;
                if (__OFADD__(v14, 1LL))
                {
                  __break(1u);
                  JUMPOUT(0x10054614CLL);
                }

                if (v13 >= a2) {
                  break;
                }
                unint64_t v12 = a1[v13];
                ++v14;
                if (v12) {
                  goto LABEL_21;
                }
              }
            }

            goto LABEL_23;
          }

Swift::Int sub_1005461A0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100004AEC(&qword_1009A0BC0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (void *)result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v31) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v31) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v31) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

uint64_t sub_10054645C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100546480( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier,  &qword_1009A0BC8,  &qword_1009AC308,  (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
}

uint64_t sub_100546480( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v42 = a5;
  uint64_t v13 = a5(0LL);
  uint64_t v45 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v40 - v14;
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100004AEC(a6);
  uint64_t result = static _SetStorage.allocate(capacity:)(a3);
  uint64_t v16 = result;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  if (a2 < 1) {
    unint64_t v18 = 0LL;
  }
  else {
    unint64_t v18 = *a1;
  }
  uint64_t v19 = 0LL;
  uint64_t v20 = result + 56;
  while (1)
  {
    if (v18)
    {
      unint64_t v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v22 = v21 | (v19 << 6);
    }

    else
    {
      uint64_t v23 = v19 + 1;
      if (__OFADD__(v19, 1LL)) {
        goto LABEL_40;
      }
      if (v23 >= v41)
      {
LABEL_37:
        swift_release(a4);
        return v16;
      }

      unint64_t v24 = v40[v23];
      ++v19;
      if (!v24)
      {
        uint64_t v19 = v23 + 1;
        if (v23 + 1 >= v41) {
          goto LABEL_37;
        }
        unint64_t v24 = v40[v19];
        if (!v24)
        {
          uint64_t v19 = v23 + 2;
          if (v23 + 2 >= v41) {
            goto LABEL_37;
          }
          unint64_t v24 = v40[v19];
          if (!v24)
          {
            uint64_t v25 = v23 + 3;
            if (v25 >= v41) {
              goto LABEL_37;
            }
            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                uint64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_41;
                }
                if (v19 >= v41) {
                  goto LABEL_37;
                }
                unint64_t v24 = v40[v19];
                ++v25;
                if (v24) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v19 = v25;
          }
        }
      }

char *sub_100546770(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3)
  {
    swift_release();
    return (char *)&_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return (char *)a4;
  }
  sub_100004AEC(&qword_1009A0C00);
  uint64_t result = (char *)static _SetStorage.allocate(capacity:)(a3);
  uint64_t v10 = result;
  uint64_t v24 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0LL;
  }
  else {
    unint64_t v12 = *v25;
  }
  uint64_t v13 = 0LL;
  uint64_t v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }

    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_30;
      }
      if (v17 >= v24)
      {
LABEL_27:
        swift_release();
        return v10;
      }

      unint64_t v18 = v25[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v24) {
          goto LABEL_27;
        }
        unint64_t v18 = v25[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v24) {
            goto LABEL_27;
          }
          unint64_t v18 = v25[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v24) {
              goto LABEL_27;
            }
            unint64_t v18 = v25[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_31;
                }
                if (v13 >= v24) {
                  goto LABEL_27;
                }
                unint64_t v18 = v25[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v13 = v19;
          }
        }
      }

Swift::Int sub_1005469F0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100004AEC((uint64_t *)&unk_1009BEFE0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  unint64_t v9 = (void *)result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }

Swift::Int sub_100546C4C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3)
  {
    swift_release();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100004AEC(&qword_1009A0A68);
  Swift::Int result = static _SetStorage.allocate(capacity:)(a3);
  Swift::Int v11 = result;
  unint64_t v36 = a1;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0LL;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0LL;
  Swift::Int v15 = result + 56;
  uint64_t v38 = a4;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v41 = v14;
      unint64_t v17 = v16 | (v14 << 6);
    }

    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_40;
      }
      if (v18 >= v37)
      {
LABEL_37:
        swift_release();
        return v11;
      }

      unint64_t v19 = v36[v18];
      uint64_t v20 = v14 + 1;
      if (!v19)
      {
        uint64_t v20 = v14 + 2;
        if (v14 + 2 >= v37) {
          goto LABEL_37;
        }
        unint64_t v19 = v36[v20];
        if (!v19)
        {
          uint64_t v20 = v14 + 3;
          if (v14 + 3 >= v37) {
            goto LABEL_37;
          }
          unint64_t v19 = v36[v20];
          if (!v19)
          {
            uint64_t v21 = v14 + 4;
            if (v14 + 4 >= v37) {
              goto LABEL_37;
            }
            unint64_t v19 = v36[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_41;
                }
                if (v20 >= v37) {
                  goto LABEL_37;
                }
                unint64_t v19 = v36[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v20 = v14 + 4;
          }
        }
      }

Swift::Int sub_100546F94(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v10;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100004AEC(&qword_1009A0AE8);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  unint64_t v10 = (void *)result;
  if (a2 < 1) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0LL;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }

    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = a1[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = a1[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = a1[v12];
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_100547210(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v196 = sub_100004AEC(&qword_1009B2B38);
  uint64_t v4 = __chkstk_darwin(v196);
  unint64_t v206 = (char *)&v176 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v205 = (char *)&v176 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  char v190 = (char *)&v176 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v189 = (char *)&v176 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v181 = (char *)&v176 - v13;
  __chkstk_darwin(v12);
  uint64_t v180 = (char *)&v176 - v14;
  uint64_t v198 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v192 = *(void *)(v198 - 8);
  uint64_t v15 = __chkstk_darwin(v198);
  uint64_t v185 = (uint64_t)&v176 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v199 = (uint64_t)&v176 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v204 = (uint64_t)&v176 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v203 = (uint64_t)&v176 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v188 = (uint64_t)&v176 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v187 = (uint64_t)&v176 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v179 = (uint64_t)&v176 - v28;
  __chkstk_darwin(v27);
  uint64_t v178 = (uint64_t)&v176 - v29;
  int64_t v207 = a1;
  Swift::Int v30 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v30);
  if (result >= v30)
  {
    if (v30 < 0) {
      goto LABEL_147;
    }
    if (v30) {
      return sub_100548C14(0LL, v30, 1LL, v207);
    }
    return result;
  }

  if (v30 >= 0) {
    uint64_t v32 = v30;
  }
  else {
    uint64_t v32 = v30 + 1;
  }
  if (v30 < -1) {
    goto LABEL_155;
  }
  Swift::Int v177 = result;
  if (v30 < 2)
  {
    unint64_t v191 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v192 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80));
    uint64_t v176 = _swiftEmptyArrayStorage;
    if (v30 != 1)
    {
      unint64_t v38 = _swiftEmptyArrayStorage[2];
      uint64_t v37 = (char *)_swiftEmptyArrayStorage;
LABEL_113:
      if (v38 >= 2)
      {
        uint64_t v169 = *v207;
        do
        {
          unint64_t v170 = v38 - 2;
          if (v38 < 2) {
            goto LABEL_142;
          }
          if (!v169) {
            goto LABEL_154;
          }
          uint64_t v171 = v37;
          uint64_t v172 = *(void *)&v37[16 * v170 + 32];
          uint64_t v173 = *(void *)&v37[16 * v38 + 24];
          sub_1005491F0( v169 + *(void *)(v192 + 72) * v172,  v169 + *(void *)(v192 + 72) * *(void *)&v37[16 * v38 + 16],  v169 + *(void *)(v192 + 72) * v173,  v191);
          if (v2) {
            break;
          }
          if (v173 < v172) {
            goto LABEL_143;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v171) & 1) == 0) {
            uint64_t v171 = sub_1003CBA90((uint64_t)v171);
          }
          if (v170 >= *((void *)v171 + 2)) {
            goto LABEL_144;
          }
          uint64_t v174 = &v171[16 * v170 + 32];
          *(void *)uint64_t v174 = v172;
          *((void *)v174 + 1) = v173;
          unint64_t v175 = *((void *)v171 + 2);
          if (v38 > v175) {
            goto LABEL_145;
          }
          memmove(&v171[16 * v38 + 16], &v171[16 * v38 + 32], 16 * (v175 - v38));
          uint64_t v37 = v171;
          *((void *)v171 + 2) = v175 - 1;
          unint64_t v38 = v175 - 1;
        }

        while (v175 > 2);
      }

LABEL_124:
      swift_bridgeObjectRelease();
      v176[2] = 0LL;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v33 = v32 >> 1;
    uint64_t v34 = static Array._allocateBufferUninitialized(minimumCapacity:)(v32 >> 1, v198);
    *(void *)(v34 + swift_weakDestroy(v0 + 16) = v33;
    uint64_t v35 = *(unsigned __int8 *)(v192 + 80);
    uint64_t v176 = (void *)v34;
    unint64_t v191 = v34 + ((v35 + 32) & ~v35);
  }

  Swift::Int v36 = 0LL;
  uint64_t v37 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v39 = v36;
    Swift::Int v40 = v36 + 1;
    uint64_t v184 = v37;
    Swift::Int v186 = v36;
    if (v36 + 1 >= v30)
    {
      Swift::Int v60 = v36 + 1;
    }

    else
    {
      Swift::Int v201 = v30;
      uint64_t v41 = *v207;
      Swift::Int v42 = *(void *)(v192 + 72);
      Swift::Int v43 = v36;
      uint64_t v44 = v178;
      sub_10001DC4C(*v207 + v42 * v40, v178, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v182 = v41;
      Swift::Int v202 = v42;
      uint64_t v45 = v41 + v42 * v43;
      uint64_t v46 = v179;
      sub_10001DC4C(v45, v179, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v48 = *(int *)(v198 + 40);
      uint64_t v47 = *(int *)(v198 + 44);
      unsigned int v49 = *(unsigned __int8 *)(v44 + v47);
      uint64_t v50 = v44 + v48;
      unsigned int v51 = *(unsigned __int8 *)(v46 + v47);
      uint64_t v200 = v46 + v48;
      uint64_t v52 = v180;
      *uint64_t v180 = v49;
      uint64_t v53 = v196;
      uint64_t v54 = &v52[*(int *)(v196 + 48)];
      uint64_t v55 = type metadata accessor for Date(0LL);
      uint64_t v56 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16LL);
      Swift::Int v197 = (Swift::Int)v54;
      v56(v54, v50, v55);
      uint64_t v57 = v181;
      *uint64_t v181 = v51;
      uint64_t v58 = &v57[*(int *)(v53 + 48)];
      uint64_t v195 = v56;
      v56(v58, v200, v55);
      if (v49 == v51)
      {
        uint64_t v59 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        LODWORD(v200) = dispatch thunk of static Comparable.> infix(_:_:)(v197, v58, v55, v59);
      }

      else
      {
        LODWORD(v200) = v51 < v49;
      }

      Swift::Int v30 = v201;
      sub_100015794((uint64_t)v181, &qword_1009B2B38);
      sub_100015794((uint64_t)v180, &qword_1009B2B38);
      sub_100018C68(v179, type metadata accessor for BeaconEstimatedLocation);
      sub_100018C68(v178, type metadata accessor for BeaconEstimatedLocation);
      Swift::Int v39 = v186;
      Swift::Int v60 = v186 + 2;
      if (v186 + 2 < v30)
      {
        uint64_t v193 = v202 * v40;
        uint64_t v194 = v55;
        uint64_t v61 = v182;
        Swift::Int v183 = v202 * v60;
        while (1)
        {
          Swift::Int v197 = v60;
          uint64_t v62 = v2;
          uint64_t v63 = v187;
          sub_10001DC4C(v61 + v183, v187, type metadata accessor for BeaconEstimatedLocation);
          uint64_t v64 = v188;
          sub_10001DC4C(v61 + v193, v188, type metadata accessor for BeaconEstimatedLocation);
          uint64_t v66 = *(int *)(v198 + 40);
          uint64_t v65 = *(int *)(v198 + 44);
          unsigned int v67 = *(unsigned __int8 *)(v63 + v65);
          uint64_t v68 = v63 + v66;
          unsigned int v69 = *(unsigned __int8 *)(v64 + v65);
          uint64_t v70 = v64 + v66;
          uint64_t v71 = v189;
          *unint64_t v189 = v67;
          uint64_t v72 = v195;
          uint64_t v73 = v196;
          uint64_t v74 = &v71[*(int *)(v196 + 48)];
          uint64_t v75 = v194;
          v195(v74, v68, v194);
          uint64_t v76 = v190;
          _BYTE *v190 = v69;
          uint64_t v77 = &v76[*(int *)(v73 + 48)];
          v72(v77, v70, v75);
          if (v67 == v69)
          {
            uint64_t v78 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
            int v79 = dispatch thunk of static Comparable.> infix(_:_:)(v74, v77, v75, v78);
          }

          else
          {
            int v79 = v69 < v67;
          }

          sub_100015794((uint64_t)v190, &qword_1009B2B38);
          sub_100015794((uint64_t)v189, &qword_1009B2B38);
          sub_100018C68(v188, type metadata accessor for BeaconEstimatedLocation);
          sub_100018C68(v187, type metadata accessor for BeaconEstimatedLocation);
          uint64_t v2 = v62;
          Swift::Int v60 = v197;
          Swift::Int v30 = v201;
          Swift::Int v60 = v197 + 1;
          v61 += v202;
          if (v201 == v197 + 1)
          {
            Swift::Int v60 = v201;
            break;
          }
        }

        Swift::Int v39 = v186;
      }

      uint64_t v37 = v184;
      if ((v200 & 1) != 0)
      {
        if (v60 < v39) {
          goto LABEL_148;
        }
        if (v39 < v60)
        {
          uint64_t v80 = 0LL;
          uint64_t v81 = v202 * (v60 - 1);
          Swift::Int v82 = v60 * v202;
          Swift::Int v83 = v39;
          uint64_t v84 = v39 * v202;
          do
          {
            if (v83 != v60 + v80 - 1)
            {
              uint64_t v87 = v182;
              if (!v182) {
                goto LABEL_153;
              }
              unint64_t v88 = v182 + v84;
              uint64_t v200 = v182 + v81;
              sub_10002218C(v182 + v84, v185, type metadata accessor for BeaconEstimatedLocation);
              if (v84 < v81 || v88 >= v87 + v82)
              {
                uint64_t v85 = v87 + v84;
                uint64_t v86 = v200;
                swift_arrayInitWithTakeFrontToBack(v85, v200, 1LL, v198);
              }

              else
              {
                uint64_t v86 = v200;
                if (v84 != v81) {
                  swift_arrayInitWithTakeBackToFront(v88, v200);
                }
              }

              sub_10002218C(v185, v86, type metadata accessor for BeaconEstimatedLocation);
              uint64_t v37 = v184;
              Swift::Int v39 = v186;
              Swift::Int v30 = v201;
            }

            ++v83;
            --v80;
            v81 -= v202;
            v82 -= v202;
            v84 += v202;
          }

          while (v83 < v60 + v80);
        }
      }
    }

    if (v60 < v30)
    {
      if (__OFSUB__(v60, v39)) {
        goto LABEL_146;
      }
      if (v60 - v39 < v177) {
        break;
      }
    }

LABEL_94:
        if ((v146 & 1) != 0) {
          goto LABEL_134;
        }
        uint64_t v154 = &v120[16 * v123];
        uint64_t v156 = *(void *)v154;
        uint64_t v155 = *((void *)v154 + 1);
        BOOL v134 = __OFSUB__(v155, v156);
        uint64_t v157 = v155 - v156;
        if (v134) {
          goto LABEL_137;
        }
        if (v157 < v145) {
          goto LABEL_14;
        }
LABEL_102:
        unint64_t v162 = v123 - 1;
        if (v123 - 1 >= v38)
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }

        if (!*v207) {
          goto LABEL_152;
        }
        unint64_t v163 = v37;
        uint64_t v164 = &v120[16 * v162];
        uint64_t v165 = *(void *)v164;
        unint64_t v166 = &v120[16 * v123];
        uint64_t v167 = *((void *)v166 + 1);
        sub_1005491F0( *v207 + *(void *)(v192 + 72) * *(void *)v164,  *v207 + *(void *)(v192 + 72) * *(void *)v166,  *v207 + *(void *)(v192 + 72) * v167,  v191);
        if (v2) {
          goto LABEL_124;
        }
        if (v167 < v165) {
          goto LABEL_127;
        }
        if (v123 > *((void *)v163 + 2)) {
          goto LABEL_128;
        }
        *(void *)uint64_t v164 = v165;
        *(void *)&v120[16 * v162 + 8] = v167;
        unint64_t v168 = *((void *)v163 + 2);
        if (v123 >= v168) {
          goto LABEL_129;
        }
        unint64_t v38 = v168 - 1;
        memmove(&v120[16 * v123], v166 + 16, 16 * (v168 - 1 - v123));
        uint64_t v37 = v163;
        *((void *)v163 + 2) = v168 - 1;
        if (v168 <= 2) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v38 = 1LL;
LABEL_14:
    Swift::Int v30 = v207[1];
    Swift::Int v36 = v197;
    if (v197 >= v30) {
      goto LABEL_113;
    }
  }

  if (__OFADD__(v39, v177)) {
    goto LABEL_149;
  }
  if (v39 + v177 >= v30) {
    Swift::Int v89 = v30;
  }
  else {
    Swift::Int v89 = v39 + v177;
  }
  if (v89 >= v39)
  {
    if (v60 != v89)
    {
      uint64_t v182 = v2;
      uint64_t v90 = *(void *)(v192 + 72);
      uint64_t v91 = v90 * (v60 - 1);
      uint64_t v193 = v90;
      Swift::Int v92 = v60 * v90;
      Swift::Int v183 = v89;
      do
      {
        uint64_t v94 = 0LL;
        Swift::Int v197 = v60;
        uint64_t v194 = v92;
        uint64_t v195 = (void (*)(_BYTE *, uint64_t, uint64_t))v91;
        while (1)
        {
          uint64_t v95 = *v207;
          Swift::Int v201 = v92 + v94;
          Swift::Int v202 = v39;
          uint64_t v96 = v203;
          sub_10001DC4C(v92 + v94 + v95, v203, type metadata accessor for BeaconEstimatedLocation);
          uint64_t v200 = v91 + v94;
          uint64_t v97 = v91 + v94 + v95;
          uint64_t v98 = v204;
          sub_10001DC4C(v97, v204, type metadata accessor for BeaconEstimatedLocation);
          uint64_t v100 = *(int *)(v198 + 40);
          uint64_t v99 = *(int *)(v198 + 44);
          unsigned int v101 = *(unsigned __int8 *)(v96 + v99);
          uint64_t v102 = v96 + v100;
          unsigned int v103 = *(unsigned __int8 *)(v98 + v99);
          uint64_t v104 = v98 + v100;
          uint64_t v105 = v205;
          *unint64_t v205 = v101;
          uint64_t v106 = v196;
          __int128 v107 = &v105[*(int *)(v196 + 48)];
          uint64_t v108 = type metadata accessor for Date(0LL);
          unint64_t v109 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16LL);
          v109(v107, v102, v108);
          uint64_t v110 = v206;
          *unint64_t v206 = v103;
          uint64_t v111 = &v110[*(int *)(v106 + 48)];
          v109(v111, v104, v108);
          if (v101 == v103)
          {
            uint64_t v112 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
            char v113 = dispatch thunk of static Comparable.> infix(_:_:)(v107, v111, v108, v112);
          }

          else
          {
            char v113 = v103 < v101;
          }

          sub_100015794((uint64_t)v206, &qword_1009B2B38);
          sub_100015794((uint64_t)v205, &qword_1009B2B38);
          sub_100018C68(v204, type metadata accessor for BeaconEstimatedLocation);
          sub_100018C68(v203, type metadata accessor for BeaconEstimatedLocation);
          Swift::Int v92 = v194;
          if ((v113 & 1) == 0) {
            break;
          }
          uint64_t v114 = *v207;
          uint64_t v91 = (uint64_t)v195;
          if (!*v207) {
            goto LABEL_151;
          }
          uint64_t v115 = v114 + v194 + v94;
          uint64_t v116 = (uint64_t)v195 + v114 + v94;
          sub_10002218C(v115, v199, type metadata accessor for BeaconEstimatedLocation);
          swift_arrayInitWithTakeFrontToBack(v115, v116, 1LL, v198);
          sub_10002218C(v199, v116, type metadata accessor for BeaconEstimatedLocation);
          v94 -= v193;
          Swift::Int v39 = v202 + 1;
          Swift::Int v93 = v197;
          if (v197 == v202 + 1) {
            goto LABEL_53;
          }
        }

        Swift::Int v93 = v197;
        uint64_t v91 = (uint64_t)v195;
LABEL_53:
        Swift::Int v60 = v93 + 1;
        v91 += v193;
        v92 += v193;
        Swift::Int v39 = v186;
      }

      while (v60 != v183);
      Swift::Int v60 = v183;
      uint64_t v2 = v182;
      uint64_t v37 = v184;
    }

    goto LABEL_63;
  }

          __break(1u);
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }

LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

Swift::Int sub_100548030(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v161 = a1;
  uint64_t v150 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v158 = *(void *)(v150 - 8);
  uint64_t v4 = __chkstk_darwin(v150);
  uint64_t v151 = (uint64_t)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v155 = (uint64_t)&v138 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v138 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v138 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v138 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v138 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v138 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v138 - v23;
  uint64_t v160 = v2;
  Swift::Int v25 = v2[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v25);
  Swift::Int v143 = result;
  if (result >= v25)
  {
    if (v25 < 0) {
      goto LABEL_151;
    }
    if (v25) {
      return sub_100548F80(0LL, v25, 1LL, v161);
    }
    return result;
  }

  if (v25 >= 0) {
    uint64_t v27 = v25;
  }
  else {
    uint64_t v27 = v25 + 1;
  }
  if (v25 <= -2) {
    goto LABEL_160;
  }
  uint64_t v153 = v10;
  if (v25 < 2)
  {
    uint64_t v29 = _swiftEmptyArrayStorage;
    unint64_t v156 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v158 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
    if (v25 != 1)
    {
      unint64_t v60 = _swiftEmptyArrayStorage[2];
      unint64_t v31 = (char *)_swiftEmptyArrayStorage;
LABEL_114:
      uint64_t v142 = v29;
      if (v60 >= 2)
      {
        uint64_t v128 = *v160;
        do
        {
          unint64_t v129 = v60 - 2;
          if (v60 < 2) {
            goto LABEL_146;
          }
          if (!v128) {
            goto LABEL_159;
          }
          uint64_t v130 = v31;
          uint64_t v131 = v31 + 32;
          uint64_t v132 = *(void *)&v31[16 * v129 + 32];
          uint64_t v133 = *(void *)&v31[16 * v60 + 24];
          uint64_t v134 = v159;
          sub_100549968( v128 + *(void *)(v158 + 72) * v132,  v128 + *(void *)(v158 + 72) * *(void *)&v131[16 * v60 - 16],  v128 + *(void *)(v158 + 72) * v133,  v156,  (uint64_t (*)(char *, char *))v161,  a2);
          uint64_t v159 = v134;
          if (v134) {
            goto LABEL_128;
          }
          if (v133 < v132) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v130) & 1) == 0) {
            uint64_t v130 = sub_1003CBA90((uint64_t)v130);
          }
          if (v129 >= *((void *)v130 + 2)) {
            goto LABEL_148;
          }
          unint64_t v135 = &v130[16 * v129 + 32];
          *(void *)unint64_t v135 = v132;
          *((void *)v135 + 1) = v133;
          unint64_t v136 = *((void *)v130 + 2);
          if (v60 > v136) {
            goto LABEL_149;
          }
          unint64_t v31 = v130;
          memmove(&v130[16 * v60 + 16], &v130[16 * v60 + 32], 16 * (v136 - v60));
          *((void *)v130 + 2) = v136 - 1;
          unint64_t v60 = v136 - 1;
        }

        while (v136 > 2);
      }

      swift_bridgeObjectRelease();
      v142[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v140 = v24;
    uint64_t v141 = v22;
    char v146 = v19;
    uint64_t v147 = v16;
    uint64_t v149 = v13;
  }

  else
  {
    uint64_t v140 = v24;
    uint64_t v141 = v22;
    char v146 = v19;
    uint64_t v147 = v16;
    uint64_t v149 = v13;
    uint64_t v28 = v27 >> 1;
    uint64_t v29 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(v27 >> 1, v150);
    v29[2] = v28;
    unint64_t v156 = (unint64_t)v29
         + ((*(unsigned __int8 *)(v158 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
  }

  uint64_t v142 = v29;
  Swift::Int v30 = 0LL;
  unint64_t v31 = (char *)_swiftEmptyArrayStorage;
  uint64_t v157 = a2;
  while (1)
  {
    Swift::Int v32 = v30;
    Swift::Int v33 = v30 + 1;
    if (v30 + 1 >= v25)
    {
LABEL_50:
      if (v33 < v32) {
        goto LABEL_150;
      }
      goto LABEL_51;
    }

    Swift::Int v152 = v25;
    Swift::Int v34 = *v160;
    uint64_t v35 = *(void *)(v158 + 72);
    uint64_t v36 = (uint64_t)v140;
    sub_10001DC4C(*v160 + v35 * v33, (uint64_t)v140, type metadata accessor for BeaconStatus);
    Swift::Int v144 = v34;
    uint64_t v154 = v35;
    uint64_t v37 = v34 + v35 * v32;
    Swift::Int v38 = v32;
    uint64_t v39 = (uint64_t)v141;
    sub_10001DC4C(v37, (uint64_t)v141, type metadata accessor for BeaconStatus);
    uint64_t v40 = v159;
    LODWORD(v148) = v161(v36, v39);
    if (v40)
    {
      sub_100018C68(v39, type metadata accessor for BeaconStatus);
      sub_100018C68(v36, type metadata accessor for BeaconStatus);
      swift_bridgeObjectRelease();
      uint64_t v137 = v142;
LABEL_129:
      v137[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    sub_100018C68(v39, type metadata accessor for BeaconStatus);
    sub_100018C68(v36, type metadata accessor for BeaconStatus);
    Swift::Int v41 = v38 + 2;
    Swift::Int v42 = v152;
    Swift::Int v32 = v38;
    if (v38 + 2 >= v152)
    {
      Swift::Int v44 = v38 + 2;
    }

    else
    {
      Swift::Int v139 = v38;
      uint64_t v159 = v154 * v33;
      Swift::Int v43 = v144;
      Swift::Int v44 = v38 + 2;
      uint64_t v145 = (char *)(v154 * v41);
      while (1)
      {
        uint64_t v45 = (uint64_t)v146;
        sub_10001DC4C((uint64_t)&v145[v43], (uint64_t)v146, type metadata accessor for BeaconStatus);
        uint64_t v46 = (uint64_t)v147;
        sub_10001DC4C(v43 + v159, (uint64_t)v147, type metadata accessor for BeaconStatus);
        int v47 = v161(v45, v46);
        sub_100018C68(v46, type metadata accessor for BeaconStatus);
        sub_100018C68(v45, type metadata accessor for BeaconStatus);
        v43 += v154;
        ++v44;
        Swift::Int v42 = v152;
        a2 = v157;
        if (v152 == v44)
        {
          Swift::Int v44 = v152;
          Swift::Int v32 = v139;
          goto LABEL_24;
        }
      }

      a2 = v157;
      Swift::Int v32 = v139;
      Swift::Int v42 = v152;
    }

LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100548C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v56 = a4;
  uint64_t v43 = a1;
  uint64_t v47 = sub_100004AEC(&qword_1009B2B38);
  uint64_t v6 = __chkstk_darwin(v47);
  unint64_t v58 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v41 - v8;
  uint64_t v52 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v10 = __chkstk_darwin(v52);
  uint64_t v53 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v18 = (char *)&v41 - v17;
  uint64_t v51 = a3;
  uint64_t v42 = a2;
  if (a3 != a2)
  {
    uint64_t v19 = *(void *)(v16 + 72);
    uint64_t v20 = v19 * (v51 - 1);
    uint64_t v48 = v19;
    uint64_t v21 = v19 * v51;
    uint64_t v45 = v14;
    uint64_t v46 = v9;
    Swift::Int v44 = (char *)&v41 - v17;
LABEL_5:
    uint64_t v22 = 0LL;
    uint64_t v57 = v43;
    uint64_t v49 = v21;
    uint64_t v50 = v20;
    while (1)
    {
      uint64_t v23 = *v56;
      uint64_t v55 = v21 + v22;
      sub_10001DC4C(v21 + v22 + v23, (uint64_t)v18, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v54 = v20 + v22;
      sub_10001DC4C(v20 + v22 + v23, (uint64_t)v14, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v25 = *(int *)(v52 + 40);
      uint64_t v24 = *(int *)(v52 + 44);
      unsigned int v26 = v18[v24];
      uint64_t v27 = &v18[v25];
      unsigned int v28 = v14[v24];
      uint64_t v29 = &v14[v25];
      *uint64_t v9 = v26;
      uint64_t v30 = v47;
      unint64_t v31 = &v9[*(int *)(v47 + 48)];
      uint64_t v32 = type metadata accessor for Date(0LL);
      Swift::Int v33 = *(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v32 - 8) + 16LL);
      v33(v31, v27, v32);
      Swift::Int v34 = v58;
      *unint64_t v58 = v28;
      uint64_t v35 = &v34[*(int *)(v30 + 48)];
      v33(v35, v29, v32);
      if (v26 == v28)
      {
        uint64_t v36 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        char v37 = dispatch thunk of static Comparable.> infix(_:_:)(v31, v35, v32, v36);
      }

      else
      {
        char v37 = v28 < v26;
      }

      sub_100015794((uint64_t)v58, &qword_1009B2B38);
      uint64_t v9 = v46;
      sub_100015794((uint64_t)v46, &qword_1009B2B38);
      uint64_t v14 = v45;
      sub_100018C68((uint64_t)v45, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v18 = v44;
      uint64_t result = sub_100018C68((uint64_t)v44, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v21 = v49;
      uint64_t v20 = v50;
      if ((v37 & 1) == 0)
      {
LABEL_4:
        v20 += v48;
        v21 += v48;
        if (++v51 == v42) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v38 = *v56;
      if (!*v56) {
        break;
      }
      uint64_t v39 = v38 + v49 + v22;
      uint64_t v40 = v38 + v50 + v22;
      sub_10002218C(v39, v53, type metadata accessor for BeaconEstimatedLocation);
      swift_arrayInitWithTakeFrontToBack(v39, v40, 1LL, v52);
      uint64_t result = sub_10002218C(v53, v40, type metadata accessor for BeaconEstimatedLocation);
      v22 -= v48;
      if (v51 == ++v57) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100548F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  char v37 = a4;
  uint64_t v31 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v10 = __chkstk_darwin(v31);
  uint64_t v39 = (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v36 = (uint64_t)&v29 - v13;
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v35 = (uint64_t)&v29 - v16;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v17 = *(void *)(v15 + 72);
    uint64_t v41 = v17 * (a3 - 1);
    uint64_t v32 = v4;
    uint64_t v33 = v17;
    uint64_t v40 = v17 * a3;
    uint64_t v29 = a1;
LABEL_4:
    uint64_t v18 = 0LL;
    uint64_t v34 = a3;
    while (1)
    {
      uint64_t v38 = a1;
      uint64_t v20 = *v6;
      uint64_t v21 = v40 + v18 + *v6;
      uint64_t v22 = v35;
      sub_10001DC4C(v21, v35, type metadata accessor for BeaconStatus);
      uint64_t v23 = v36;
      sub_10001DC4C(v41 + v18 + v20, v36, type metadata accessor for BeaconStatus);
      char v24 = v37(v22, v23);
      sub_100018C68(v23, type metadata accessor for BeaconStatus);
      uint64_t result = sub_100018C68(v22, type metadata accessor for BeaconStatus);
      if (v5) {
        break;
      }
      if ((v24 & 1) == 0)
      {
        uint64_t v19 = v34;
        uint64_t v6 = v32;
LABEL_11:
        a3 = v19 + 1;
        v41 += v33;
        v40 += v33;
        a1 = v29;
        if (a3 != v30) {
          goto LABEL_4;
        }
        return result;
      }

      uint64_t v25 = v32;
      uint64_t v26 = *v32;
      if (!*v32)
      {
        __break(1u);
        return result;
      }

      uint64_t v27 = v26 + v40 + v18;
      uint64_t v28 = v26 + v41 + v18;
      sub_10002218C(v27, v39, type metadata accessor for BeaconStatus);
      swift_arrayInitWithTakeFrontToBack(v27, v28, 1LL, v31);
      uint64_t result = sub_10002218C(v39, v28, type metadata accessor for BeaconStatus);
      uint64_t v19 = v34;
      v18 -= v33;
      a1 = v38 + 1;
      uint64_t v6 = v25;
      if (v34 == v38 + 1) {
        goto LABEL_11;
      }
    }
  }

  return result;
}

uint64_t sub_1005491F0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v96 = sub_100004AEC(&qword_1009B2B38);
  uint64_t v8 = __chkstk_darwin(v96);
  uint64_t v95 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v84 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v94 = (char *)&v84 - v14;
  __chkstk_darwin(v13);
  uint64_t v93 = (char *)&v84 - v15;
  uint64_t v16 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v92 = (uint64_t)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v91 = (uint64_t)&v84 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v90 = (uint64_t)&v84 - v22;
  __chkstk_darwin(v21);
  uint64_t v89 = (uint64_t)&v84 - v23;
  uint64_t v97 = *(void *)(v24 + 72);
  if (!v97)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }

  if (a2 - a1 == 0x8000000000000000LL && v97 == -1) {
    goto LABEL_67;
  }
  int64_t v25 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v97 == -1) {
    goto LABEL_68;
  }
  uint64_t v26 = (uint64_t)(a2 - a1) / v97;
  uint64_t v102 = (_BYTE *)a1;
  uint64_t v101 = (_BYTE *)a4;
  uint64_t v27 = v25 / v97;
  if (v26 >= v25 / v97)
  {
    if ((v27 & 0x8000000000000000LL) == 0)
    {
      uint64_t v29 = v27 * v97;
      if (a4 < a2 || a2 + v29 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v27, v16);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v56 = a4 + v29;
      unint64_t v100 = a4 + v29;
      uint64_t v102 = (_BYTE *)a2;
      if (v29 >= 1 && a1 < a2)
      {
        uint64_t v97 = -v97;
        unint64_t v87 = a4;
        uint64_t v88 = v16;
        BOOL v85 = v12;
        unint64_t v86 = a1;
        do
        {
          unint64_t v98 = a3;
          uint64_t v58 = v97;
          uint64_t v59 = v91;
          sub_10001DC4C(v56 + v97, v91, type metadata accessor for BeaconEstimatedLocation);
          unint64_t v99 = a2;
          unint64_t v60 = a2 + v58;
          uint64_t v61 = v92;
          sub_10001DC4C(a2 + v58, v92, type metadata accessor for BeaconEstimatedLocation);
          uint64_t v63 = *(int *)(v16 + 40);
          uint64_t v62 = *(int *)(v16 + 44);
          unsigned int v64 = *(unsigned __int8 *)(v59 + v62);
          uint64_t v65 = v59 + v63;
          unsigned int v66 = *(unsigned __int8 *)(v61 + v62);
          uint64_t v67 = v61 + v63;
          *uint64_t v12 = v64;
          uint64_t v68 = v96;
          unint64_t v69 = &v12[*(int *)(v96 + 48)];
          uint64_t v70 = type metadata accessor for Date(0LL);
          uint64_t v71 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16LL);
          v71(v69, v65, v70);
          uint64_t v72 = v95;
          _BYTE *v95 = v66;
          uint64_t v73 = &v72[*(int *)(v68 + 48)];
          v71(v73, v67, v70);
          if (v64 == v66)
          {
            uint64_t v74 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
            char v75 = dispatch thunk of static Comparable.> infix(_:_:)(v69, v73, v70, v74);
          }

          else
          {
            char v75 = v66 < v64;
          }

          uint64_t v77 = v97;
          unint64_t v76 = v98;
          unint64_t v78 = v98 + v97;
          sub_100015794((uint64_t)v95, &qword_1009B2B38);
          uint64_t v12 = v85;
          sub_100015794((uint64_t)v85, &qword_1009B2B38);
          sub_100018C68(v92, type metadata accessor for BeaconEstimatedLocation);
          sub_100018C68(v91, type metadata accessor for BeaconEstimatedLocation);
          uint64_t v16 = v88;
          if ((v75 & 1) != 0)
          {
            if (v76 < v99 || v78 >= v99)
            {
              swift_arrayInitWithTakeFrontToBack(v76 + v77, v60, 1LL, v88);
              unint64_t v80 = v86;
              unint64_t v79 = v87;
            }

            else
            {
              unint64_t v80 = v86;
              unint64_t v79 = v87;
              if (v76 != v99) {
                swift_arrayInitWithTakeBackToFront(v76 + v77, v60);
              }
            }

            v102 += v77;
          }

          else
          {
            unint64_t v81 = v100;
            unint64_t v82 = v100 + v77;
            v100 += v77;
            if (v76 < v81 || v78 >= v81)
            {
              swift_arrayInitWithTakeFrontToBack(v76 + v77, v82, 1LL, v88);
              unint64_t v60 = v99;
              unint64_t v80 = v86;
              unint64_t v79 = v87;
            }

            else
            {
              unint64_t v60 = v99;
              unint64_t v80 = v86;
              unint64_t v79 = v87;
              if (v76 != v81) {
                swift_arrayInitWithTakeBackToFront(v76 + v77, v82);
              }
            }
          }

          unint64_t v56 = v100;
          if (v100 <= v79) {
            break;
          }
          a2 = v60;
          a3 = v76 + v77;
        }

        while (v60 > v80);
      }

      goto LABEL_65;
    }
  }

  else if ((v26 & 0x8000000000000000LL) == 0)
  {
    uint64_t v28 = v26 * v97;
    if (a4 < a1 || a1 + v28 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v26, v16);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    uint64_t v95 = (_BYTE *)(a4 + v28);
    unint64_t v100 = a4 + v28;
    if (v28 >= 1 && a2 < a3)
    {
      uint64_t v31 = type metadata accessor for BeaconEstimatedLocation;
      uint64_t v88 = v16;
      unint64_t v98 = a3;
      do
      {
        unint64_t v99 = a2;
        uint64_t v32 = v89;
        sub_10001DC4C(a2, v89, v31);
        uint64_t v33 = a4;
        uint64_t v34 = v90;
        uint64_t v35 = v31;
        sub_10001DC4C(v33, v90, v31);
        uint64_t v37 = *(int *)(v16 + 40);
        uint64_t v36 = *(int *)(v16 + 44);
        unsigned int v38 = *(unsigned __int8 *)(v32 + v36);
        uint64_t v39 = v32 + v37;
        unsigned int v40 = *(unsigned __int8 *)(v34 + v36);
        uint64_t v41 = v34 + v37;
        uint64_t v42 = v93;
        _BYTE *v93 = v38;
        uint64_t v43 = v96;
        Swift::Int v44 = &v42[*(int *)(v96 + 48)];
        uint64_t v45 = type metadata accessor for Date(0LL);
        uint64_t v46 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16LL);
        v46(v44, v39, v45);
        uint64_t v47 = v94;
        *uint64_t v94 = v40;
        uint64_t v48 = &v47[*(int *)(v43 + 48)];
        v46(v48, v41, v45);
        if (v38 == v40)
        {
          uint64_t v49 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          char v50 = dispatch thunk of static Comparable.> infix(_:_:)(v44, v48, v45, v49);
        }

        else
        {
          char v50 = v40 < v38;
        }

        sub_100015794((uint64_t)v94, &qword_1009B2B38);
        sub_100015794((uint64_t)v93, &qword_1009B2B38);
        uint64_t v31 = v35;
        sub_100018C68(v90, v35);
        sub_100018C68(v89, v35);
        unint64_t v51 = (unint64_t)v102;
        unint64_t v52 = v99;
        uint64_t v16 = v88;
        if ((v50 & 1) != 0)
        {
          unint64_t v53 = v98;
          unint64_t v54 = v99 + v97;
          if ((unint64_t)v102 < v99 || (unint64_t)v102 >= v54)
          {
            swift_arrayInitWithTakeFrontToBack(v102, v99, 1LL, v88);
          }

          else if (v102 == (_BYTE *)v99)
          {
            unint64_t v51 = v99;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v102, v99);
          }
        }

        else
        {
          unint64_t v55 = (unint64_t)&v101[v97];
          if (v102 < v101 || (unint64_t)v102 >= v55)
          {
            swift_arrayInitWithTakeFrontToBack(v102, v101, 1LL, v88);
          }

          else if (v102 != v101)
          {
            swift_arrayInitWithTakeBackToFront(v102, v101);
          }

          uint64_t v101 = (_BYTE *)v55;
          unint64_t v54 = v52;
          unint64_t v53 = v98;
        }

        uint64_t v102 = (_BYTE *)(v51 + v97);
        a4 = (unint64_t)v101;
        if (v101 >= v95) {
          break;
        }
        a2 = v54;
      }

      while (v54 < v53);
    }

LABEL_65:
    sub_1003CB570((unint64_t *)&v102, (unint64_t *)&v101, (uint64_t *)&v100);
    return 1LL;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v34 = v2[2];
  uint64_t v33 = v2[3];
  if (v34 >= v33 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v33 > 1), v34 + 1, 1, v2);
  }
  _OWORD v2[2] = v34 + 1;
  uint64_t v35 = &v2[2 * v34];
  v35[4] = 0x69646E694674622ELL;
  v35[5] = 0xEA0000000000676ELL;
  if ((a1 & 0x800) == 0)
  {
LABEL_43:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_75;
  }

  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_100549968( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6)
{
  uint64_t v7 = v6;
  unint64_t v56 = a5;
  unint64_t v57 = a3;
  uint64_t v55 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v12 = __chkstk_darwin(v55);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v50 - v15;
  __chkstk_darwin(v14);
  uint64_t v20 = (char *)&v50 - v19;
  uint64_t v22 = *(void *)(v21 + 72);
  if (!v22)
  {
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }

  unint64_t v23 = a1;
  if (a2 - a1 == 0x8000000000000000LL && v22 == -1) {
    goto LABEL_64;
  }
  int64_t v24 = v57 - a2;
  if (v57 - a2 == 0x8000000000000000LL && v22 == -1) {
    goto LABEL_65;
  }
  uint64_t v25 = (uint64_t)(a2 - a1) / v22;
  unint64_t v60 = a1;
  unint64_t v59 = a4;
  uint64_t v26 = v24 / v22;
  if (v25 >= v24 / v22)
  {
    if ((v26 & 0x8000000000000000LL) == 0)
    {
      unint64_t v52 = (char *)v18;
      unint64_t v53 = a1;
      uint64_t v28 = v26 * v22;
      uint64_t v29 = v17;
      if (a4 < a2 || a2 + v28 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v26, v55);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }

      unint64_t v36 = a4 + v28;
      unint64_t v58 = a4 + v28;
      unint64_t v60 = a2;
      if (v28 < 1 || v53 >= a2) {
        goto LABEL_62;
      }
      uint64_t v38 = -v22;
      uint64_t v50 = a6;
      unint64_t v51 = a4;
      while (1)
      {
        sub_10001DC4C(v36 + v38, v29, type metadata accessor for BeaconStatus);
        unint64_t v39 = a2 + v38;
        uint64_t v40 = a2 + v38;
        uint64_t v41 = v38;
        uint64_t v20 = (char *)v29;
        uint64_t v16 = v52;
        sub_10001DC4C(v40, (uint64_t)v52, type metadata accessor for BeaconStatus);
        char v42 = v56(v20, v16);
        if (v7) {
          goto LABEL_61;
        }
        char v43 = v42;
        unint64_t v54 = a2;
        unint64_t v44 = v57;
        unint64_t v45 = v57 + v41;
        sub_100018C68((uint64_t)v16, type metadata accessor for BeaconStatus);
        sub_100018C68((uint64_t)v20, type metadata accessor for BeaconStatus);
        uint64_t v29 = (uint64_t)v20;
        if ((v43 & 1) != 0)
        {
          uint64_t v38 = v41;
          unint64_t v46 = v44 + v41;
          if (v44 < v54 || v45 >= v54)
          {
            swift_arrayInitWithTakeFrontToBack(v45, v39, 1LL, v55);
            uint64_t v7 = 0LL;
          }

          else
          {
            uint64_t v7 = 0LL;
            if (v44 != v54) {
              swift_arrayInitWithTakeBackToFront(v45, v39);
            }
          }

          v60 += v38;
        }

        else
        {
          unint64_t v47 = v58;
          unint64_t v48 = v58 + v41;
          v58 += v41;
          uint64_t v38 = v41;
          unint64_t v46 = v44 + v41;
          if (v44 < v47 || v45 >= v47)
          {
            swift_arrayInitWithTakeFrontToBack(v45, v48, 1LL, v55);
            unint64_t v39 = v54;
            uint64_t v7 = 0LL;
          }

          else
          {
            uint64_t v7 = 0LL;
            unint64_t v39 = v54;
            if (v44 != v47) {
              swift_arrayInitWithTakeBackToFront(v45, v48);
            }
          }
        }

        unint64_t v36 = v58;
        if (v58 > v51)
        {
          a2 = v39;
          unint64_t v57 = v46;
          if (v39 > v53) {
            continue;
          }
        }

        goto LABEL_62;
      }
    }
  }

  else if ((v25 & 0x8000000000000000LL) == 0)
  {
    uint64_t v27 = v25 * v22;
    if (a4 < v23 || v23 + v27 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, v23, v25, v55);
    }

    else if (a4 != v23)
    {
      swift_arrayInitWithTakeBackToFront(a4, v23);
    }

    unint64_t v54 = a4 + v27;
    unint64_t v58 = a4 + v27;
    if (v27 < 1 || a2 >= v57) {
      goto LABEL_62;
    }
    while (1)
    {
      sub_10001DC4C(a2, (uint64_t)v20, type metadata accessor for BeaconStatus);
      sub_10001DC4C(a4, (uint64_t)v16, type metadata accessor for BeaconStatus);
      char v31 = v56(v20, v16);
      if (v6) {
        break;
      }
      char v32 = v31;
      sub_100018C68((uint64_t)v16, type metadata accessor for BeaconStatus);
      sub_100018C68((uint64_t)v20, type metadata accessor for BeaconStatus);
      unint64_t v33 = v60;
      if ((v32 & 1) != 0)
      {
        unint64_t v34 = a2 + v22;
        if (v60 < a2 || v60 >= v34)
        {
          swift_arrayInitWithTakeFrontToBack(v60, a2, 1LL, v55);
        }

        else if (v60 == a2)
        {
          unint64_t v33 = a2;
        }

        else
        {
          swift_arrayInitWithTakeBackToFront(v60, a2);
        }
      }

      else
      {
        unint64_t v35 = v59 + v22;
        if (v60 < v59 || v60 >= v35)
        {
          swift_arrayInitWithTakeFrontToBack(v60, v59, 1LL, v55);
        }

        else if (v60 != v59)
        {
          swift_arrayInitWithTakeBackToFront(v60, v59);
        }

        unint64_t v59 = v35;
        unint64_t v34 = a2;
      }

      unint64_t v60 = v33 + v22;
      a4 = v59;
      if (v59 < v54)
      {
        a2 = v34;
        if (v34 < v57) {
          continue;
        }
      }

      goto LABEL_62;
    }